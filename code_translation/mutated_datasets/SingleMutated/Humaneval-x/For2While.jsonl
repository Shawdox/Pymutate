{"code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    idx_c2fn = 0\n    list_vq6s = list(enumerate(numbers))\n    while idx_c2fn < len(list_vq6s):\n        idx, elem = list_vq6s[idx_c2fn]\n        idx_jdmz = 0\n        list_83j6 = list(enumerate(numbers))\n        while idx_jdmz < len(list_83j6):\n            idx2, elem2 = list_83j6[idx_jdmz]\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n            idx_jdmz = idx_jdmz + 1\n        idx_c2fn = idx_c2fn + 1\n\n    return False\n", "id": "For2While_sample_from_Python/0_to_0", "old_id": "Python/0"}
{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_pt2w = 0\n    list_buzs = paren_string\n    while idx_pt2w < len(list_buzs):\n        c = list_buzs[idx_pt2w]\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n        idx_pt2w = idx_pt2w + 1\n\n    return result\n", "id": "For2While_sample_from_Python/1_to_1", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    idx_xcsn = 0\n    list_3urh = operations\n    while idx_xcsn < len(list_3urh):\n        op = list_3urh[idx_xcsn]\n        balance += op\n        if balance < 0:\n            return True\n        idx_xcsn = idx_xcsn + 1\n\n    return False\n", "id": "For2While_sample_from_Python/3_to_2", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n    idx_hz4s = 0\n    list_gqbv = numbers[:-1]\n    while idx_hz4s < len(list_gqbv):\n        n = list_gqbv[idx_hz4s]\n        result.append(n)\n        result.append(delimeter)\n        idx_hz4s = idx_hz4s + 1\n\n    result.append(numbers[-1])\n\n    return result\n", "id": "For2While_sample_from_Python/5_to_3", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_6dgy = 0\n        list_9rxj = s\n        while idx_6dgy < len(list_9rxj):\n            c = list_9rxj[idx_6dgy]\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n            idx_6dgy = idx_6dgy + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "For2While_sample_from_Python/6_to_4", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n    idx_piuj = 0\n    list_3ua4 = numbers\n    while idx_piuj < len(list_3ua4):\n        n = list_3ua4[idx_piuj]\n        sum_value += n\n        prod_value *= n\n        idx_piuj = idx_piuj + 1\n    return sum_value, prod_value\n", "id": "For2While_sample_from_Python/8_to_5", "old_id": "Python/8"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n    idx_wond = 0\n    list_n6ks = numbers\n    while idx_wond < len(list_n6ks):\n        n = list_n6ks[idx_wond]\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n        idx_wond = idx_wond + 1\n\n    return result\n", "id": "For2While_sample_from_Python/9_to_6", "old_id": "Python/9"}
{"code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    idx_2eow = 0\n    list_4r5x = strings\n    while idx_2eow < len(list_4r5x):\n        s = list_4r5x[idx_2eow]\n        if len(s) == maxlen:\n            return s\n        idx_2eow = idx_2eow + 1\n", "id": "For2While_sample_from_Python/12_to_7", "old_id": "Python/12"}
{"code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    idx_96vj = 0\n    list_dugy = range(len(string))\n    while idx_96vj < len(list_dugy):\n        i = list_dugy[idx_96vj]\n        result.append(string[:i+1])\n        idx_96vj = idx_96vj + 1\n    return result\n", "id": "For2While_sample_from_Python/14_to_8", "old_id": "Python/14"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n    idx_64u9 = 0\n    list_mer6 = range(len(string) - len(substring) + 1)\n    while idx_64u9 < len(list_mer6):\n        i = list_mer6[idx_64u9]\n        if string[i:i+len(substring)] == substring:\n            times += 1\n        idx_64u9 = idx_64u9 + 1\n\n    return times\n", "id": "For2While_sample_from_Python/18_to_9", "old_id": "Python/18"}
{"code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n    idx_0nja = 0\n    list_jyg2 = list(enumerate(numbers))\n    while idx_0nja < len(list_jyg2):\n        idx, elem = list_jyg2[idx_0nja]\n        idx_hi1f = 0\n        list_f6r9 = list(enumerate(numbers))\n        while idx_hi1f < len(list_f6r9):\n            idx2, elem2 = list_f6r9[idx_hi1f]\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n            idx_hi1f = idx_hi1f + 1\n        idx_0nja = idx_0nja + 1\n\n    return closest_pair\n", "id": "For2While_sample_from_Python/20_to_10", "old_id": "Python/20"}
{"code": "def largest_divisor(n: int) -> int:\n    idx_vh0x = 0\n    list_0hgf = reversed(range(n))\n    while idx_vh0x < len(list_0hgf):\n        i = list_0hgf[idx_vh0x]\n        if n % i == 0:\n            return i\n        idx_vh0x = idx_vh0x + 1\n", "id": "For2While_sample_from_Python/24_to_11", "old_id": "Python/24"}
{"code": "def is_prime(n):\n    if n < 2:\n        return False\n    idx_t23z = 0\n    list_1ze3 = range(2, n - 1)\n    while idx_t23z < len(list_1ze3):\n        k = list_1ze3[idx_t23z]\n        if n % k == 0:\n            return False\n        idx_t23z = idx_t23z + 1\n    return True\n", "id": "For2While_sample_from_Python/31_to_12", "old_id": "Python/31"}
{"code": "def max_element(l: list):\n    m = l[0]\n    idx_ygvr = 0\n    list_9i45 = l\n    while idx_ygvr < len(list_9i45):\n        e = list_9i45[idx_ygvr]\n        if e > m:\n            m = e\n        idx_ygvr = idx_ygvr + 1\n    return m\n", "id": "For2While_sample_from_Python/35_to_13", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    idx_kcau = 0\n    list_jqcg = range(n)\n    while idx_kcau < len(list_jqcg):\n        i = list_jqcg[idx_kcau]\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n        idx_kcau = idx_kcau + 1\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    idx_3b20 = 0\n    list_vck1 = s\n    while idx_3b20 < len(list_vck1):\n        c = list_vck1[idx_3b20]\n        ans += (c == '7')\n        idx_3b20 = idx_3b20 + 1\n    return ans\n", "id": "For2While_sample_from_Python/36_to_14", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    idx_ip76 = 0\n    list_zhdb = zip(evens, odds)\n    while idx_ip76 < len(list_zhdb):\n        e, o = list_zhdb[idx_ip76]\n        ans.extend([e, o])\n        idx_ip76 = idx_ip76 + 1\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "id": "For2While_sample_from_Python/37_to_15", "old_id": "Python/37"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        idx_i0jp = 0\n        list_yuis = range(2, min(int(math.sqrt(p)) + 1, p - 1))\n        while idx_i0jp < len(list_yuis):\n            k = list_yuis[idx_i0jp]\n            if p % k == 0:\n                return False\n            idx_i0jp = idx_i0jp + 1\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "id": "For2While_sample_from_Python/39_to_16", "old_id": "Python/39"}
{"code": "def triples_sum_to_zero(l: list):\n    idx_p2qi = 0\n    list_8ug7 = range(len(l))\n    while idx_p2qi < len(list_8ug7):\n        i = list_8ug7[idx_p2qi]\n        idx_pyrb = 0\n        list_28a1 = range(i + 1, len(l))\n        while idx_pyrb < len(list_28a1):\n            j = list_28a1[idx_pyrb]\n            idx_04x5 = 0\n            list_mbn6 = range(j + 1, len(l))\n            while idx_04x5 < len(list_mbn6):\n                k = list_mbn6[idx_04x5]\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n                idx_04x5 = idx_04x5 + 1\n            idx_pyrb = idx_pyrb + 1\n        idx_p2qi = idx_p2qi + 1\n    return False\n", "id": "For2While_sample_from_Python/40_to_17", "old_id": "Python/40"}
{"code": "def pairs_sum_to_zero(l):\n    idx_736y = 0\n    list_z3x1 = list(enumerate(l))\n    while idx_736y < len(list_z3x1):\n        i, l1 = list_z3x1[idx_736y]\n        idx_qhfw = 0\n        list_840x = range(i + 1, len(l))\n        while idx_qhfw < len(list_840x):\n            j = list_840x[idx_qhfw]\n            if l1 + l[j] == 0:\n                return True\n            idx_qhfw = idx_qhfw + 1\n        idx_736y = idx_736y + 1\n    return False\n", "id": "For2While_sample_from_Python/43_to_18", "old_id": "Python/43"}
{"code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    idx_uogb = 0\n    list_9bd6 = range(4, n + 1)\n    while idx_uogb < len(list_9bd6):\n        _ = list_9bd6[idx_uogb]\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n        idx_uogb = idx_uogb + 1\n\n    return results[-1]\n", "id": "For2While_sample_from_Python/46_to_19", "old_id": "Python/46"}
{"code": "def is_palindrome(text: str):\n    idx_hoj4 = 0\n    list_wel5 = range(len(text))\n    while idx_hoj4 < len(list_wel5):\n        i = list_wel5[idx_hoj4]\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n        idx_hoj4 = idx_hoj4 + 1\n    return True\n", "id": "For2While_sample_from_Python/48_to_20", "old_id": "Python/48"}
{"code": "def modp(n: int, p: int):\n    ret = 1\n    idx_xloc = 0\n    list_ekr5 = range(n)\n    while idx_xloc < len(list_ekr5):\n        i = list_ekr5[idx_xloc]\n        ret = (2 * ret) % p\n        idx_xloc = idx_xloc + 1\n    return ret\n", "id": "For2While_sample_from_Python/49_to_21", "old_id": "Python/49"}
{"code": "def below_threshold(l: list, t: int):\n    idx_4spa = 0\n    list_s390 = l\n    while idx_4spa < len(list_s390):\n        e = list_s390[idx_4spa]\n        if e >= t:\n            return False\n        idx_4spa = idx_4spa + 1\n    return True\n", "id": "For2While_sample_from_Python/52_to_22", "old_id": "Python/52"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_mlte = 0\n    list_t5jm = brackets\n    while idx_mlte < len(list_t5jm):\n        b = list_t5jm[idx_mlte]\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n        idx_mlte = idx_mlte + 1\n    return depth == 0\n", "id": "For2While_sample_from_Python/56_to_23", "old_id": "Python/56"}
{"code": "def common(l1: list, l2: list):\n    ret = set()\n    idx_k4is = 0\n    list_woa9 = l1\n    while idx_k4is < len(list_woa9):\n        e1 = list_woa9[idx_k4is]\n        idx_l4zf = 0\n        list_qkzt = l2\n        while idx_l4zf < len(list_qkzt):\n            e2 = list_qkzt[idx_l4zf]\n            if e1 == e2:\n                ret.add(e1)\n            idx_l4zf = idx_l4zf + 1\n        idx_k4is = idx_k4is + 1\n    return sorted(list(ret))\n", "id": "For2While_sample_from_Python/58_to_24", "old_id": "Python/58"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        idx_ajmq = 0\n        list_yjvq = range(2, k - 1)\n        while idx_ajmq < len(list_yjvq):\n            i = list_yjvq[idx_ajmq]\n            if k % i == 0:\n                return False\n            idx_ajmq = idx_ajmq + 1\n        return True\n    largest = 1\n    idx_4so8 = 0\n    list_nadc = range(2, n + 1)\n    while idx_4so8 < len(list_nadc):\n        j = list_nadc[idx_4so8]\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n        idx_4so8 = idx_4so8 + 1\n    return largest\n", "id": "For2While_sample_from_Python/59_to_25", "old_id": "Python/59"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_lb2k = 0\n    list_hejm = brackets\n    while idx_lb2k < len(list_hejm):\n        b = list_hejm[idx_lb2k]\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n        idx_lb2k = idx_lb2k + 1\n    return depth == 0\n", "id": "For2While_sample_from_Python/61_to_26", "old_id": "Python/61"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    idx_37ws = 0\n    list_k3ud = s.split(' ')\n    while idx_37ws < len(list_k3ud):\n        i = list_k3ud[idx_37ws]\n        if i.isdigit():\n            lis.append(int(i))\n        idx_37ws = idx_37ws + 1\n    return n - sum(lis)\n", "id": "For2While_sample_from_Python/67_to_27", "old_id": "Python/67"}
{"code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    idx_ph36 = 0\n    list_i98d = lst\n    while idx_ph36 < len(list_i98d):\n        i = list_i98d[idx_ph36]\n        frq[i] += 1;\n        idx_ph36 = idx_ph36 + 1\n\n    ans = -1\n    idx_tjr1 = 0\n    list_o7uh = range(1, len(frq))\n    while idx_tjr1 < len(list_o7uh):\n        i = list_o7uh[idx_tjr1]\n        if frq[i] >= i:\n            ans = i\n        idx_tjr1 = idx_tjr1 + 1\n    \n    return ans\n", "id": "For2While_sample_from_Python/69_to_28", "old_id": "Python/69"}
{"code": "def smallest_change(arr):\n    ans = 0\n    idx_x7ld = 0\n    list_qhba = range(len(arr) // 2)\n    while idx_x7ld < len(list_qhba):\n        i = list_qhba[idx_x7ld]\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n        idx_x7ld = idx_x7ld + 1\n    return ans\n", "id": "For2While_sample_from_Python/73_to_29", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    idx_qpbs = 0\n    list_ukcb = lst1\n    while idx_qpbs < len(list_ukcb):\n        st = list_ukcb[idx_qpbs]\n        l1 += len(st)\n        idx_qpbs = idx_qpbs + 1\n    \n    l2 = 0\n    idx_mlwf = 0\n    list_56vf = lst2\n    while idx_mlwf < len(list_56vf):\n        st = list_56vf[idx_mlwf]\n        l2 += len(st)\n        idx_mlwf = idx_mlwf + 1\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "id": "For2While_sample_from_Python/74_to_30", "old_id": "Python/74"}
{"code": "def is_multiply_prime(a):\n    def is_prime(n):\n        idx_y3wf = 0\n        list_xjm4 = range(2,n)\n        while idx_y3wf < len(list_xjm4):\n            j = list_xjm4[idx_y3wf]\n            if n%j == 0:\n                return False\n            idx_y3wf = idx_y3wf + 1\n        return True\n    idx_mf2e = 0\n    list_1n4i = range(2,101)\n    while idx_mf2e < len(list_1n4i):\n        i = list_1n4i[idx_mf2e]\n        if not is_prime(i): continue\n        idx_sthk = 0\n        list_hxp0 = range(2,101)\n        while idx_sthk < len(list_hxp0):\n            j = list_hxp0[idx_sthk]\n            if not is_prime(j): continue\n            idx_t8xf = 0\n            list_pogf = range(2,101)\n            while idx_t8xf < len(list_pogf):\n                k = list_pogf[idx_t8xf]\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n                idx_t8xf = idx_t8xf + 1\n            idx_sthk = idx_sthk + 1\n        idx_mf2e = idx_mf2e + 1\n    return False\n", "id": "For2While_sample_from_Python/75_to_31", "old_id": "Python/75"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    idx_q75y = 0\n    list_yjpt = range(0, len(num))\n    while idx_q75y < len(list_yjpt):\n        i = list_yjpt[idx_q75y]\n        if num[i] in primes:\n            total += 1\n        idx_q75y = idx_q75y + 1\n    return total\n", "id": "For2While_sample_from_Python/78_to_32", "old_id": "Python/78"}
{"code": "def is_happy(s):\n    if len(s) < 3:\n      return False\n    idx_5znv = 0\n    list_hgx4 = range(len(s) - 2)\n    while idx_5znv < len(list_hgx4):\n        i = list_hgx4[idx_5znv]\n        \n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n          return False\n        idx_5znv = idx_5znv + 1\n    return True\n", "id": "For2While_sample_from_Python/80_to_33", "old_id": "Python/80"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_czru = 0\n    list_jrum = grades\n    while idx_czru < len(list_jrum):\n        gpa = list_jrum[idx_czru]\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n        idx_czru = idx_czru + 1\n    return letter_grade\n", "id": "For2While_sample_from_Python/81_to_34", "old_id": "Python/81"}
{"code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    idx_5ucd = 0\n    list_ginx = range(2, l)\n    while idx_5ucd < len(list_ginx):\n        i = list_ginx[idx_5ucd]\n        if l % i == 0:\n            return False\n        idx_5ucd = idx_5ucd + 1\n    return True\n", "id": "For2While_sample_from_Python/82_to_35", "old_id": "Python/82"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_nrqj = 0\n    list_4i67 = s\n    while idx_nrqj < len(list_4i67):\n        c = list_4i67[idx_nrqj]\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n        idx_nrqj = idx_nrqj + 1\n    return out\n", "id": "For2While_sample_from_Python/89_to_36", "old_id": "Python/89"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        idx_vumh = 0\n        list_shuo = range(2,int(n**0.5)+1)\n        while idx_vumh < len(list_shuo):\n            i = list_shuo[idx_vumh]\n            if n%i==0:\n                return False\n            idx_vumh = idx_vumh + 1\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "For2While_sample_from_Python/94_to_37", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        idx_9fyb = 0\n        list_1ni7 = dict.keys()\n        while idx_9fyb < len(list_1ni7):\n            key = list_1ni7[idx_9fyb]\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n            idx_9fyb = idx_9fyb + 1\n        return state == \"upper\" or state == \"lower\" \n", "id": "For2While_sample_from_Python/95_to_38", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = []\n    idx_5yuq = 0\n    list_8om6 = range(2, n)\n    while idx_5yuq < len(list_8om6):\n        i = list_8om6[idx_5yuq]\n        is_prime = True\n        idx_8zjf = 0\n        list_yizw = range(2, i)\n        while idx_8zjf < len(list_yizw):\n            j = list_yizw[idx_8zjf]\n            if i % j == 0:\n                is_prime = False\n                break\n            idx_8zjf = idx_8zjf + 1\n        if is_prime:\n            primes.append(i)\n        idx_5yuq = idx_5yuq + 1\n    return primes\n\n", "id": "For2While_sample_from_Python/96_to_39", "old_id": "Python/96"}
{"code": "def count_upper(s):\n    count = 0\n    idx_by8z = 0\n    list_0a8q = range(0,len(s),2)\n    while idx_by8z < len(list_0a8q):\n        i = list_0a8q[idx_by8z]\n        if s[i] in \"AEIOU\":\n            count += 1\n        idx_by8z = idx_by8z + 1\n    return count\n", "id": "For2While_sample_from_Python/98_to_40", "old_id": "Python/98"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n    idx_1h5z = 0\n    list_jkqg = s\n    while idx_1h5z < len(list_jkqg):\n        letter = list_jkqg[idx_1h5z]\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n        idx_1h5z = idx_1h5z + 1\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "For2While_sample_from_Python/101_to_41", "old_id": "Python/101"}
{"code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    idx_vywq = 0\n    list_d6fo = range(n, m+1)\n    while idx_vywq < len(list_d6fo):\n        i = list_d6fo[idx_vywq]\n        summation += i\n        idx_vywq = idx_vywq + 1\n    return bin(round(summation/(m - n + 1)))\n", "id": "For2While_sample_from_Python/103_to_42", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = []\n    idx_zcpm = 0\n    list_p1io = x\n    while idx_zcpm < len(list_p1io):\n        i = list_p1io[idx_zcpm]\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n        idx_zcpm = idx_zcpm + 1\n    return sorted(odd_digit_elements)\n", "id": "For2While_sample_from_Python/104_to_43", "old_id": "Python/104"}
{"code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    idx_n1d7 = 0\n    list_jvlg = sorted_arr\n    while idx_n1d7 < len(list_jvlg):\n        var = list_jvlg[idx_n1d7]\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n        idx_n1d7 = idx_n1d7 + 1\n    return new_arr\n", "id": "For2While_sample_from_Python/105_to_44", "old_id": "Python/105"}
{"code": "def f(n):\n    ret = []\n    idx_e4jq = 0\n    list_71yq = range(1,n+1)\n    while idx_e4jq < len(list_71yq):\n        i = list_71yq[idx_e4jq]\n        if i%2 == 0:\n            x = 1\n            idx_2owy = 0\n            list_v9xw = range(1,i+1)\n            while idx_2owy < len(list_v9xw):\n                j = list_v9xw[idx_2owy]\nx *= j                idx_2owy = idx_2owy + 1\n            ret += [x]\n        else:\n            x = 0\n            idx_wxf4 = 0\n            list_eo4i = range(1,i+1)\n            while idx_wxf4 < len(list_eo4i):\n                j = list_eo4i[idx_wxf4]\nx += j                idx_wxf4 = idx_wxf4 + 1\n            ret += [x]\n        idx_e4jq = idx_e4jq + 1\n    return ret\n", "id": "For2While_sample_from_Python/106_to_45", "old_id": "Python/106"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    idx_pw4v = 0\n    list_a8x2 = range(1, n+1)\n    while idx_pw4v < len(list_a8x2):\n        i = list_a8x2[idx_pw4v]\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n        idx_pw4v = idx_pw4v + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "For2While_sample_from_Python/107_to_46", "old_id": "Python/107"}
{"code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    idx_pgor = 0\n    list_38aj = range(len(arr))\n    while idx_pgor < len(list_38aj):\n        i = list_38aj[idx_pgor]\n        if my_arr[i]!=sorted_array[i]:\n          return False\n        idx_pgor = idx_pgor + 1\n    return True\n", "id": "For2While_sample_from_Python/109_to_47", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    idx_wxcl = 0\n    list_xol3 = lst1\n    while idx_wxcl < len(list_xol3):\n        i = list_xol3[idx_wxcl]\n        if i%2 == 1:\n            odd += 1\n        idx_wxcl = idx_wxcl + 1\n    idx_1t7q = 0\n    list_y9w0 = lst2\n    while idx_1t7q < len(list_y9w0):\n        i = list_y9w0[idx_1t7q]\n        if i%2 == 0:\n            even += 1\n        idx_1t7q = idx_1t7q + 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "For2While_sample_from_Python/110_to_48", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n    idx_0rtn = 0\n    list_4fdg = list1\n    while idx_0rtn < len(list_4fdg):\n        i = list_4fdg[idx_0rtn]\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n        idx_0rtn = idx_0rtn + 1\n    if t>0:\n        idx_rf1z = 0\n        list_20mp = list1\n        while idx_rf1z < len(list_20mp):\n            i = list_20mp[idx_rf1z]\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n            idx_rf1z = idx_rf1z + 1\n    return dict1\n", "id": "For2While_sample_from_Python/111_to_49", "old_id": "Python/111"}
{"code": "def odd_count(lst):\n    res = []\n    idx_1om5 = 0\n    list_7s6f = lst\n    while idx_1om5 < len(list_7s6f):\n        arr = list_7s6f[idx_1om5]\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n        idx_1om5 = idx_1om5 + 1\n    return res\n", "id": "For2While_sample_from_Python/113_to_50", "old_id": "Python/113"}
{"code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    idx_fcup = 0\n    list_h7w9 = nums\n    while idx_fcup < len(list_h7w9):\n        num = list_h7w9[idx_fcup]\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n        idx_fcup = idx_fcup + 1\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "For2While_sample_from_Python/114_to_51", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    idx_i625 = 0\n    list_edj6 = s.split()\n    while idx_i625 < len(list_edj6):\n        word = list_edj6[idx_i625]\n        n_consonants = 0\n        idx_3if5 = 0\n        list_3fmc = range(0, len(word))\n        while idx_3if5 < len(list_3fmc):\n            i = list_3fmc[idx_3if5]\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n            idx_3if5 = idx_3if5 + 1\n        if n_consonants == n:\n            result.append(word)\n        idx_i625 = idx_i625 + 1\n    return result\n\n", "id": "For2While_sample_from_Python/117_to_52", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    idx_hf90 = 0\n    list_saq9 = range(len(word)-2, 0, -1)\n    while idx_hf90 < len(list_saq9):\n        i = list_saq9[idx_hf90]\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n        idx_hf90 = idx_hf90 + 1\n    return \"\"\n", "id": "For2While_sample_from_Python/118_to_53", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_0jby = 0\n        list_xco9 = s\n        while idx_0jby < len(list_xco9):\n            i = list_xco9[idx_0jby]\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n            idx_0jby = idx_0jby + 1\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "For2While_sample_from_Python/119_to_54", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    idx_0e3t = 0\n    list_civy = lst\n    while idx_0e3t < len(list_civy):\n        i = list_civy[idx_0e3t]\n        count_digit[i]+=1 \n        idx_0e3t = idx_0e3t + 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "For2While_sample_from_Python/126_to_55", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        idx_eyqa = 0\n        list_un25 = range(2, num)\n        while idx_eyqa < len(list_un25):\n            i = list_un25[idx_eyqa]\n            if num%i == 0:\n                return False\n            idx_eyqa = idx_eyqa + 1\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "id": "For2While_sample_from_Python/127_to_56", "old_id": "Python/127"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    idx_30t7 = 0\n    list_pe18 = range(n)\n    while idx_30t7 < len(list_pe18):\n        i = list_pe18[idx_30t7]\n        idx_azef = 0\n        list_gtoy = range(n)\n        while idx_azef < len(list_gtoy):\n            j = list_gtoy[idx_azef]\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n            idx_azef = idx_azef + 1\n        idx_30t7 = idx_30t7 + 1\n\n    ans = []\n    idx_j0hn = 0\n    list_cj6x = range(k)\n    while idx_j0hn < len(list_cj6x):\n        i = list_cj6x[idx_j0hn]\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n        idx_j0hn = idx_j0hn + 1\n    return ans\n", "id": "For2While_sample_from_Python/129_to_57", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    idx_3juz = 0\n    list_r9a6 = range(2, n + 1)\n    while idx_3juz < len(list_r9a6):\n        i = list_r9a6[idx_3juz]\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n        idx_3juz = idx_3juz + 1\n    return my_tri\n", "id": "For2While_sample_from_Python/130_to_58", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    idx_zfbn = 0\n    list_3r4x = str(n)\n    while idx_zfbn < len(list_3r4x):\n        digit = list_3r4x[idx_zfbn]\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n        idx_zfbn = idx_zfbn + 1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "id": "For2While_sample_from_Python/131_to_59", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_20gf = 0\n    list_0opw = range(len(string))\n    while idx_20gf < len(list_0opw):\n        i = list_0opw[idx_20gf]\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        idx_20gf = idx_20gf + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_m8k0 = 0\n    list_bovp = opening_bracket_index\n    while idx_m8k0 < len(list_bovp):\n        idx = list_bovp[idx_m8k0]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n        idx_m8k0 = idx_m8k0 + 1\n    return cnt >= 2\n\n    \n", "id": "For2While_sample_from_Python/132_to_60", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    import math\n    squared = 0\n    idx_tqvw = 0\n    list_f7kd = lst\n    while idx_tqvw < len(list_f7kd):\n        i = list_f7kd[idx_tqvw]\n        squared += math.ceil(i)**2\n        idx_tqvw = idx_tqvw + 1\n    return squared\n", "id": "For2While_sample_from_Python/133_to_61", "old_id": "Python/133"}
{"code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    idx_6ily = 0\n    list_2xna = range(1, n+1)\n    while idx_6ily < len(list_2xna):\n        i = list_2xna[idx_6ily]\n        fact_i *= i\n        special_fact *= fact_i\n        idx_6ily = idx_6ily + 1\n    return special_fact\n", "id": "For2While_sample_from_Python/139_to_62", "old_id": "Python/139"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    idx_xn1m = 0\n    list_albq = range(len(lst))\n    while idx_xn1m < len(list_albq):\n        i = list_albq[idx_xn1m]\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n        idx_xn1m = idx_xn1m + 1\n    return sum(result)\n", "id": "For2While_sample_from_Python/142_to_63", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    idx_0zxl = 0\n    list_gdsj = sentence.split()\n    while idx_0zxl < len(list_gdsj):\n        word = list_gdsj[idx_0zxl]\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        idx_ckan = 0\n        list_p1my = range(2, len(word))\n        while idx_ckan < len(list_p1my):\n            i = list_p1my[idx_ckan]\n            if len(word)%i == 0:\n                flg = 1\n            idx_ckan = idx_ckan + 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n        idx_0zxl = idx_0zxl + 1\n    return \" \".join(new_lst)\n", "id": "For2While_sample_from_Python/143_to_64", "old_id": "Python/143"}
{"code": "def specialFilter(nums):\n    \n    count = 0\n    idx_f3ls = 0\n    list_k7j6 = nums\n    while idx_f3ls < len(list_k7j6):\n        num = list_k7j6[idx_f3ls]\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        idx_f3ls = idx_f3ls + 1\n    return count \n", "id": "For2While_sample_from_Python/146_to_65", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    idx_o9j2 = 0\n    list_78uc = range(n)\n    while idx_o9j2 < len(list_78uc):\n        i = list_78uc[idx_o9j2]\n        idx_61m4 = 0\n        list_p2rx = range(i+1,n)\n        while idx_61m4 < len(list_p2rx):\n            j = list_p2rx[idx_61m4]\n            idx_conr = 0\n            list_rw3p = range(j+1,n)\n            while idx_conr < len(list_rw3p):\n                k = list_rw3p[idx_conr]\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n                idx_conr = idx_conr + 1\n            idx_61m4 = idx_61m4 + 1\n        idx_o9j2 = idx_o9j2 + 1\n    return len(ans)\n", "id": "For2While_sample_from_Python/147_to_66", "old_id": "Python/147"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    idx_27y4 = 0\n    list_h9e1 = lst\n    while idx_27y4 < len(list_h9e1):\n        i = list_h9e1[idx_27y4]\n        if len(i)%2 == 0:\n            new_lst.append(i)\n        idx_27y4 = idx_27y4 + 1\n    return sorted(new_lst, key=len)\n", "id": "For2While_sample_from_Python/149_to_67", "old_id": "Python/149"}
{"code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    idx_n928 = 0\n    list_gmdz = range(2, n)\n    while idx_n928 < len(list_gmdz):\n        i = list_gmdz[idx_n928]\n        if n % i == 0:\n            return y\n            break\n        idx_n928 = idx_n928 + 1\n", "id": "For2While_sample_from_Python/150_to_68", "old_id": "Python/150"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    idx_ys7x = 0\n    list_75xg = extensions\n    while idx_ys7x < len(list_75xg):\n        s = list_75xg[idx_ys7x]\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n        idx_ys7x = idx_ys7x + 1\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "id": "For2While_sample_from_Python/153_to_69", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    idx_6qcz = 0\n    list_fq1o = range(len(a) - l + 1)\n    while idx_6qcz < len(list_fq1o):\n        i = list_fq1o[idx_6qcz]\n        idx_pmeo = 0\n        list_ul19 = range(l + 1)\n        while idx_pmeo < len(list_ul19):\n            j = list_ul19[idx_pmeo]\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n            idx_pmeo = idx_pmeo + 1\n        idx_6qcz = idx_6qcz + 1\n    return False\n", "id": "For2While_sample_from_Python/154_to_70", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    idx_ndso = 0\n    list_wz41 = str(abs(num))\n    while idx_ndso < len(list_wz41):\n        i = list_wz41[idx_ndso]\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n        idx_ndso = idx_ndso + 1\n    return (even_count, odd_count)\n", "id": "For2While_sample_from_Python/155_to_71", "old_id": "Python/155"}
{"code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    idx_32tx = 0\n    list_jv9s = zip(operator, operand[1:])\n    while idx_32tx < len(list_jv9s):\n        oprt, oprn = list_jv9s[idx_32tx]\n        expression+= oprt + str(oprn)\n        idx_32tx = idx_32tx + 1\n    return eval(expression)\n", "id": "For2While_sample_from_Python/160_to_72", "old_id": "Python/160"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    idx_zvcn = 0\n    list_uqo4 = s\n    while idx_zvcn < len(list_uqo4):\n        i = list_uqo4[idx_zvcn]\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n        idx_zvcn = idx_zvcn + 1\n    s = \"\"\n    idx_j73z = 0\n    list_gipw = new_str\n    while idx_j73z < len(list_gipw):\n        i = list_gipw[idx_j73z]\n        s += i\n        idx_j73z = idx_j73z + 1\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "id": "For2While_sample_from_Python/161_to_73", "old_id": "Python/161"}
