{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = (94 + -94)\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += (23 + -22)\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= (98 + -97)\n            current_string.append(c)\n\n            if current_depth == (90 + -90):\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = (88 + -88)\n\n    for op in operations:\n        balance += op\n        if balance < (50 + -50):\n            return True\n\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/3_to_1", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-(55 + -54)]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-(48 + -47)])\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/5_to_2", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = (68 + -68)\n        max_depth = (19 + -19)\n        for c in s:\n            if c == '(':\n                depth += (9 + -8)\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= (66 + -65)\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "ConstantUnfoldding_sample_from_Python/6_to_3", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = (92 + -92)\n    prod_value = (21 + -20)\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "id": "ConstantUnfoldding_sample_from_Python/8_to_4", "old_id": "Python/8"}
{"code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-(6 + -5)]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = (75 + -75)\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += (100 + -99)\n\n    return string + string[:beginning_of_suffix][::-(28 + -27)]\n", "id": "ConstantUnfoldding_sample_from_Python/10_to_5", "old_id": "Python/10"}
{"code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+(98 + -97)])\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/14_to_6", "old_id": "Python/14"}
{"code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + (65 + -64))])\n", "id": "ConstantUnfoldding_sample_from_Python/15_to_7", "old_id": "Python/15"}
{"code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': (70 + -66), 'o|': (93 + -91), '.|': (60 + -59)}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "id": "ConstantUnfoldding_sample_from_Python/17_to_8", "old_id": "Python/17"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = (84 + -84)\n\n    for i in range(len(string) - len(substring) + (40 + -39)):\n        if string[i:i+len(substring)] == substring:\n            times += (39 + -38)\n\n    return times\n", "id": "ConstantUnfoldding_sample_from_Python/18_to_9", "old_id": "Python/18"}
{"code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': (61 + -61),\n        'one': (18 + -17),\n        'two': (3 + -1),\n        'three': (91 + -88),\n        'four': (58 + -54),\n        'five': (56 + -51),\n        'six': (86 + -80),\n        'seven': (87 + -80),\n        'eight': (75 + -67),\n        'nine': (45 + -36)\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "id": "ConstantUnfoldding_sample_from_Python/19_to_10", "old_id": "Python/19"}
{"code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == (56 + -56):\n            return i\n", "id": "ConstantUnfoldding_sample_from_Python/24_to_11", "old_id": "Python/24"}
{"code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = (92 + -90)\n    while i <= int(math.sqrt(n) + (47 + -46)):\n        if n % i == (28 + -28):\n            fact.append(i)\n            n //= i\n        else:\n            i += (99 + -98)\n\n    if n > (35 + -34):\n        fact.append(n)\n    return fact\n", "id": "ConstantUnfoldding_sample_from_Python/25_to_12", "old_id": "Python/25"}
{"code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= (27 + -26)]\n", "id": "ConstantUnfoldding_sample_from_Python/26_to_13", "old_id": "Python/26"}
{"code": "def get_positive(l: list):\n    return [e for e in l if e > (86 + -86)]\n", "id": "ConstantUnfoldding_sample_from_Python/30_to_14", "old_id": "Python/30"}
{"code": "def is_prime(n):\n    if n < (60 + -58):\n        return False\n    for k in range((74 + -72), n - (61 + -60)):\n        if n % k == (35 + -35):\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/31_to_15", "old_id": "Python/31"}
{"code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > (88 + -88):\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > (80 + -80):\n            begin = center\n        else:\n            end = center\n    return begin\n", "id": "ConstantUnfoldding_sample_from_Python/32_to_16", "old_id": "Python/32"}
{"code": "def sort_third(l: list):\n    l = list(l)\n    l[::(54 + -51)] = sorted(l[::(37 + -34)])\n    return l\n", "id": "ConstantUnfoldding_sample_from_Python/33_to_17", "old_id": "Python/33"}
{"code": "def max_element(l: list):\n    m = l[(36 + -36)]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "id": "ConstantUnfoldding_sample_from_Python/35_to_18", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % (57 + -46) == (9 + -9) or i % (15 + -2) == (42 + -42):\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = (58 + -58)\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/36_to_19", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = l[::(88 + -86)]\n    odds = l[(87 + -86)::(37 + -35)]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-(67 + -66)])\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/37_to_20", "old_id": "Python/37"}
{"code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[((30 + -27) * i):min(((66 + -63) * i + (41 + -38)), len(s))] for i in range((len(s) + (32 + -30)) // (20 + -17))]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[(21 + -20):] + group[(33 + -33)]) if len(group) == (91 + -88) else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n", "id": "ConstantUnfoldding_sample_from_Python/38_to_21", "old_id": "Python/38"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < (32 + -30):\n            return False\n        for k in range((53 + -51), min(int(math.sqrt(p)) + (4 + -3), p - (87 + -86))):\n            if p % k == (55 + -55):\n                return False\n        return True\n    f = [(51 + -51), (29 + -28)]\n    while True:\n        f.append(f[-(18 + -17)] + f[-(10 + -8)])\n        if is_prime(f[-(11 + -10)]):\n            n -= (22 + -21)\n        if n == (60 + -60):\n            return f[-(78 + -77)]\n", "id": "ConstantUnfoldding_sample_from_Python/39_to_22", "old_id": "Python/39"}
{"code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + (94 + -93), len(l)):\n            for k in range(j + (49 + -48), len(l)):\n                if l[i] + l[j] + l[k] == (29 + -29):\n                    return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/40_to_23", "old_id": "Python/40"}
{"code": "def car_race_collision(n: int):\n    return n**(38 + -36)\n", "id": "ConstantUnfoldding_sample_from_Python/41_to_24", "old_id": "Python/41"}
{"code": "def incr_list(l: list):\n    return [(e + (78 + -77)) for e in l]\n", "id": "ConstantUnfoldding_sample_from_Python/42_to_25", "old_id": "Python/42"}
{"code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + (51 + -50), len(l)):\n            if l1 + l[j] == (35 + -35):\n                return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/43_to_26", "old_id": "Python/43"}
{"code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > (2 + -2):\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "id": "ConstantUnfoldding_sample_from_Python/44_to_27", "old_id": "Python/44"}
{"code": "def fib4(n: int):\n    results = [(37 + -37), (20 + -20), (16 + -14), (95 + -95)]\n    if n < (56 + -52):\n        return results[n]\n\n    for _ in range((37 + -33), n + (95 + -94)):\n        results.append(results[-(86 + -85)] + results[-(39 + -37)] + results[-(89 + -86)] + results[-(54 + -50)])\n        results.pop((71 + -71))\n\n    return results[-(8 + -7)]\n", "id": "ConstantUnfoldding_sample_from_Python/46_to_28", "old_id": "Python/46"}
{"code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % (85 + -83) == (96 + -95):\n        return l[len(l) // (88 + -86)]\n    else:\n        return (l[len(l) // (20 + -18) - (13 + -12)] + l[len(l) // (99 + -97)]) / 2.0\n", "id": "ConstantUnfoldding_sample_from_Python/47_to_29", "old_id": "Python/47"}
{"code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - (22 + -21) - i]:\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/48_to_30", "old_id": "Python/48"}
{"code": "def modp(n: int, p: int):\n    ret = (67 + -66)\n    for i in range(n):\n        ret = ((63 + -61) * ret) % p\n    return ret\n", "id": "ConstantUnfoldding_sample_from_Python/49_to_31", "old_id": "Python/49"}
{"code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + (56 + -51) - ord(\"a\")) % (15 + 11)) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - (8 + -3) - ord(\"a\")) % (46 + -20)) + ord(\"a\")) for ch in s])\n", "id": "ConstantUnfoldding_sample_from_Python/50_to_32", "old_id": "Python/50"}
{"code": "def fib(n: int):\n    if n == (83 + -83):\n        return (41 + -41)\n    if n == (40 + -39):\n        return (5 + -4)\n    return fib(n - (40 + -39)) + fib(n - (58 + -56))\n", "id": "ConstantUnfoldding_sample_from_Python/55_to_33", "old_id": "Python/55"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (5 + -5)\n    for b in brackets:\n        if b == \"<\":\n            depth += (45 + -44)\n        else:\n            depth -= (37 + -36)\n        if depth < (72 + -72):\n            return False\n    return depth == (81 + -81)\n", "id": "ConstantUnfoldding_sample_from_Python/56_to_34", "old_id": "Python/56"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < (28 + -26):\n            return False\n        for i in range((34 + -32), k - (96 + -95)):\n            if k % i == (36 + -36):\n                return False\n        return True\n    largest = (22 + -21)\n    for j in range((37 + -35), n + (66 + -65)):\n        if n % j == (44 + -44) and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "id": "ConstantUnfoldding_sample_from_Python/59_to_35", "old_id": "Python/59"}
{"code": "def sum_to_n(n: int):\n    return sum(range(n + (72 + -71)))\n", "id": "ConstantUnfoldding_sample_from_Python/60_to_36", "old_id": "Python/60"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (12 + -12)\n    for b in brackets:\n        if b == \"(\":\n            depth += (90 + -89)\n        else:\n            depth -= (5 + -4)\n        if depth < (17 + -17):\n            return False\n    return depth == (17 + -17)\n", "id": "ConstantUnfoldding_sample_from_Python/61_to_37", "old_id": "Python/61"}
{"code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][(50 + -49):]\n", "id": "ConstantUnfoldding_sample_from_Python/62_to_38", "old_id": "Python/62"}
{"code": "def fibfib(n: int):\n    if n == (42 + -42):\n        return (44 + -44)\n    if n == (61 + -60):\n        return (22 + -22)\n    if n == (38 + -36):\n        return (4 + -3)\n    return fibfib(n - (97 + -96)) + fibfib(n - (34 + -32)) + fibfib(n - (3 + 0))\n", "id": "ConstantUnfoldding_sample_from_Python/63_to_39", "old_id": "Python/63"}
{"code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-(70 + -69)] == 'y' or s[-(82 + -81)] == 'Y':\n        n_vowels += (79 + -78)\n    return n_vowels\n", "id": "ConstantUnfoldding_sample_from_Python/64_to_40", "old_id": "Python/64"}
{"code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-(73 + -72)]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "id": "ConstantUnfoldding_sample_from_Python/65_to_41", "old_id": "Python/65"}
{"code": "def digitSum(s):\n    if s == \"\": return (3 + -3)\n    return sum(ord(char) if char.isupper() else (54 + -54) for char in s)\n", "id": "ConstantUnfoldding_sample_from_Python/66_to_42", "old_id": "Python/66"}
{"code": "def pluck(arr):\n    if(len(arr) == (70 + -70)): return []\n    evens = list(filter(lambda x: x%(60 + -58) == (99 + -99), arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "id": "ConstantUnfoldding_sample_from_Python/68_to_43", "old_id": "Python/68"}
{"code": "def search(lst):\n    frq = [(4 + -4)] * (max(lst) + (80 + -79))\n    for i in lst:\n        frq[i] += (66 + -65);\n\n    ans = -(50 + -49)\n    for i in range((14 + -13), len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/69_to_44", "old_id": "Python/69"}
{"code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-(16 + -15)])\n        switch = not switch\n    return res\n", "id": "ConstantUnfoldding_sample_from_Python/70_to_45", "old_id": "Python/70"}
{"code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -(74 + -73) \n    s = (a + b + c)/(73 + -71)    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, (3 + -1))\n    return area\n", "id": "ConstantUnfoldding_sample_from_Python/71_to_46", "old_id": "Python/71"}
{"code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = (50 + -50), len(q)-(12 + -11)\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=(64 + -63)\n        j-=(28 + -27)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/72_to_47", "old_id": "Python/72"}
{"code": "def smallest_change(arr):\n    ans = (46 + -46)\n    for i in range(len(arr) // (75 + -73)):\n        if arr[i] != arr[len(arr) - i - (5 + -4)]:\n            ans += (53 + -52)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/73_to_48", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = (61 + -61)\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = (70 + -70)\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "id": "ConstantUnfoldding_sample_from_Python/74_to_49", "old_id": "Python/74"}
{"code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range((41 + -39),n):\n            if n%j == (25 + -25):\n                return False\n        return True\n\n    for i in range((2 + 0),(17 + 84)):\n        if not is_prime(i): continue\n        for j in range((61 + -59),(61 + 40)):\n            if not is_prime(j): continue\n            for k in range((33 + -31),(56 + 45)):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/75_to_50", "old_id": "Python/75"}
{"code": "def is_simple_power(x, n):\n    if (n == (81 + -80)): \n        return (x == (66 + -65)) \n    power = (13 + -12)\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "id": "ConstantUnfoldding_sample_from_Python/76_to_51", "old_id": "Python/76"}
{"code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / (54 + -51)))) ** (58 + -55) == a\n", "id": "ConstantUnfoldding_sample_from_Python/77_to_52", "old_id": "Python/77"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = (71 + -71)\n    for i in range((67 + -67), len(num)):\n        if num[i] in primes:\n            total += (38 + -37)\n    return total\n", "id": "ConstantUnfoldding_sample_from_Python/78_to_53", "old_id": "Python/78"}
{"code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[(12 + -10):] + \"db\"\n", "id": "ConstantUnfoldding_sample_from_Python/79_to_54", "old_id": "Python/79"}
{"code": "def is_happy(s):\n    if len(s) < (7 + -4):\n      return False\n\n    for i in range(len(s) - (55 + -53)):\n      \n      if s[i] == s[i+(20 + -19)] or s[i+(45 + -44)] == s[i+(100 + -98)] or s[i] == s[i+(26 + -24)]:\n        return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/80_to_55", "old_id": "Python/80"}
{"code": "def prime_length(string):\n    l = len(string)\n    if l == (11 + -11) or l == (59 + -58):\n        return False\n    for i in range((47 + -45), l):\n        if l % i == (15 + -15):\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/82_to_56", "old_id": "Python/82"}
{"code": "def starts_one_ends(n):\n    if n == (76 + -75): return (78 + -77)\n    return (43 + -25) * ((85 + -75) ** (n - (13 + -11)))\n", "id": "ConstantUnfoldding_sample_from_Python/83_to_57", "old_id": "Python/83"}
{"code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[(27 + -25):]\n", "id": "ConstantUnfoldding_sample_from_Python/84_to_58", "old_id": "Python/84"}
{"code": "def add(lst):\n    return sum([lst[i] for i in range((78 + -77), len(lst), (41 + -39)) if lst[i]%(21 + -19) == (21 + -21)])\n", "id": "ConstantUnfoldding_sample_from_Python/85_to_59", "old_id": "Python/85"}
{"code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[(43 + -42)], reverse=True), key=lambda x: x[(99 + -99)])\n", "id": "ConstantUnfoldding_sample_from_Python/87_to_60", "old_id": "Python/87"}
{"code": "def sort_array(array):\n    return [] if len(array) == (11 + -11) else sorted(array, reverse= (array[(27 + -27)]+array[-(96 + -95)]) % (38 + -36) == (72 + -72)) \n", "id": "ConstantUnfoldding_sample_from_Python/88_to_61", "old_id": "Python/88"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+(75 + -73)*(9 + -7)) % (63 + -37)]\n        else:\n            out += c\n    return out\n", "id": "ConstantUnfoldding_sample_from_Python/89_to_62", "old_id": "Python/89"}
{"code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < (73 + -71) else lst[(60 + -59)]\n", "id": "ConstantUnfoldding_sample_from_Python/90_to_63", "old_id": "Python/90"}
{"code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[(65 + -65):(57 + -55)] == 'I ' for sentence in sentences)\n", "id": "ConstantUnfoldding_sample_from_Python/91_to_64", "old_id": "Python/91"}
{"code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + (50 + -48))) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "id": "ConstantUnfoldding_sample_from_Python/93_to_65", "old_id": "Python/93"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range((47 + -45),int(n**0.5)+(67 + -66)):\n            if n%i==(99 + -99):\n                return False\n\n        return True\n    maxx = (82 + -82)\n    i = (68 + -68)\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=(61 + -60)\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "ConstantUnfoldding_sample_from_Python/94_to_66", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == (23 + -23):\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "id": "ConstantUnfoldding_sample_from_Python/95_to_67", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = []\n    for i in range((87 + -85), n):\n        is_prime = True\n        for j in range((19 + -17), i):\n            if i % j == (1 + -1):\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "id": "ConstantUnfoldding_sample_from_Python/96_to_68", "old_id": "Python/96"}
{"code": "def multiply(a, b):\n    return abs(a % (23 + -13)) * abs(b % (40 + -30))\n", "id": "ConstantUnfoldding_sample_from_Python/97_to_69", "old_id": "Python/97"}
{"code": "def count_upper(s):\n    count = (23 + -23)\n    for i in range((84 + -84),len(s),(82 + -80)):\n        if s[i] in \"AEIOU\":\n            count += (20 + -19)\n    return count\n", "id": "ConstantUnfoldding_sample_from_Python/98_to_70", "old_id": "Python/98"}
{"code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == (27 + -26):\n        # remove trailing zeros\n        while (value[-(100 + -99)] == '0'):\n            value = value[:-(18 + -17)]\n\n    num = float(value)\n    if value[-(89 + -87):] == '.5':\n        if num > (32 + -32):\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > (59 + -59):\n        res = int(round(num))\n    else:\n        res = (18 + -18)\n\n    return res\n\n", "id": "ConstantUnfoldding_sample_from_Python/99_to_71", "old_id": "Python/99"}
{"code": "def make_a_pile(n):\n    return [n + (11 + -9)*i for i in range(n)]\n", "id": "ConstantUnfoldding_sample_from_Python/100_to_72", "old_id": "Python/100"}
{"code": "def choose_num(x, y):\n    if x > y:\n        return -(63 + -62)\n    if y % (65 + -63) == (71 + -71):\n        return y\n    if x == y:\n        return -(50 + -49)\n    return y - (51 + -50)\n", "id": "ConstantUnfoldding_sample_from_Python/102_to_73", "old_id": "Python/102"}
{"code": "def rounded_avg(n, m):\n    if m < n:\n        return -(79 + -78)\n    summation = (82 + -82)\n    for i in range(n, m+(96 + -95)):\n        summation += i\n    return bin(round(summation/(m - n + (55 + -54))))\n", "id": "ConstantUnfoldding_sample_from_Python/103_to_74", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % (70 + -68) == (83 + -82) for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "id": "ConstantUnfoldding_sample_from_Python/104_to_75", "old_id": "Python/104"}
{"code": "def by_length(arr):\n    dic = {\n        (65 + -64): \"One\",\n        (88 + -86): \"Two\",\n        (88 + -85): \"Three\",\n        (56 + -52): \"Four\",\n        (61 + -56): \"Five\",\n        (36 + -30): \"Six\",\n        (62 + -55): \"Seven\",\n        (17 + -9): \"Eight\",\n        (86 + -77): \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "id": "ConstantUnfoldding_sample_from_Python/105_to_76", "old_id": "Python/105"}
{"code": "def f(n):\n    ret = []\n    for i in range((85 + -84),n+(26 + -25)):\n        if i%(49 + -47) == (5 + -5):\n            x = (36 + -35)\n            for j in range((79 + -78),i+(18 + -17)): x *= j\n            ret += [x]\n        else:\n            x = (57 + -57)\n            for j in range((28 + -27),i+(20 + -19)): x += j\n            ret += [x]\n    return ret\n", "id": "ConstantUnfoldding_sample_from_Python/106_to_77", "old_id": "Python/106"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-(50 + -49)]\n\n    even_palindrome_count = (57 + -57)\n    odd_palindrome_count = (81 + -81)\n\n    for i in range((87 + -86), n+(8 + -7)):\n        if i%(45 + -43) == (91 + -90) and is_palindrome(i):\n                odd_palindrome_count += (29 + -28)\n        elif i%(86 + -84) == (20 + -20) and is_palindrome(i):\n            even_palindrome_count += (37 + -36)\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "ConstantUnfoldding_sample_from_Python/107_to_78", "old_id": "Python/107"}
{"code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = (76 + -75)\n        if n < (100 + -100): n, neg = -(88 + -87) * n, -(73 + -72) \n        n = [int(i) for i in str(n)]\n        n[(100 + -100)] = n[(63 + -63)] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > (43 + -43), [digits_sum(i) for i in arr])))\n", "id": "ConstantUnfoldding_sample_from_Python/108_to_79", "old_id": "Python/108"}
{"code": "def move_one_ball(arr):\n    if len(arr)==(20 + -20):\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[(77 + -77):min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/109_to_80", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = (82 + -82)\n    even = (93 + -93)\n    for i in lst1:\n        if i%(9 + -7) == (85 + -84):\n            odd += (80 + -79)\n    for i in lst2:\n        if i%(51 + -49) == (86 + -86):\n            even += (10 + -9)\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "ConstantUnfoldding_sample_from_Python/110_to_81", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=(10 + -10)\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>(1 + -1):\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "id": "ConstantUnfoldding_sample_from_Python/111_to_82", "old_id": "Python/111"}
{"code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-(4 + -3)] == s)\n", "id": "ConstantUnfoldding_sample_from_Python/112_to_83", "old_id": "Python/112"}
{"code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%(86 + -84)==(10 + -9) for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "id": "ConstantUnfoldding_sample_from_Python/113_to_84", "old_id": "Python/113"}
{"code": "def minSubArraySum(nums):\n    max_sum = (12 + -12)\n    s = (17 + -17)\n    for num in nums:\n        s += -num\n        if (s < (71 + -71)):\n            s = (33 + -33)\n        max_sum = max(s, max_sum)\n    if max_sum == (8 + -8):\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "ConstantUnfoldding_sample_from_Python/114_to_85", "old_id": "Python/114"}
{"code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[(27 + -25):].count('1'))\n", "id": "ConstantUnfoldding_sample_from_Python/116_to_86", "old_id": "Python/116"}
{"code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = (56 + -56)\n        for i in range((44 + -44), len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += (88 + -87) \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "id": "ConstantUnfoldding_sample_from_Python/117_to_87", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < (36 + -33):\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-(85 + -83), (46 + -46), -(26 + -25)):\n        if word[i] in vowels:\n            if (word[i+(88 + -87)] not in vowels) and (word[i-(21 + -20)] not in vowels):\n                return word[i]\n    return \"\"\n", "id": "ConstantUnfoldding_sample_from_Python/118_to_88", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = (53 + -53)\n        for i in s:\n            if i == '(':\n                val = val + (11 + -10)\n            else:\n                val = val - (46 + -45)\n            if val < (15 + -15):\n                return False\n        return True if val == (55 + -55) else False\n\n    S1 = lst[(58 + -58)] + lst[(43 + -42)]\n    S2 = lst[(65 + -64)] + lst[(14 + -14)]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "ConstantUnfoldding_sample_from_Python/119_to_89", "old_id": "Python/119"}
{"code": "def maximum(arr, k):\n    if k == (2 + -2):\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/120_to_90", "old_id": "Python/120"}
{"code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%(85 + -83)==(8 + -8) and x%(19 + -17)==(53 + -52)])\n", "id": "ConstantUnfoldding_sample_from_Python/121_to_91", "old_id": "Python/121"}
{"code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= (99 + -97))\n", "id": "ConstantUnfoldding_sample_from_Python/122_to_92", "old_id": "Python/122"}
{"code": "def get_odd_collatz(n):\n    if n%(77 + -75)==(92 + -92):\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > (28 + -27):\n        if n % (26 + -24) == (9 + -9):\n            n = n/(86 + -84)\n        else:\n            n = n*(21 + -18) + (59 + -58)\n            \n        if n%(66 + -64) == (4 + -3):\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "id": "ConstantUnfoldding_sample_from_Python/123_to_93", "old_id": "Python/123"}
{"code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < (42 + -41) or month > (90 + -78):\n            return False\n        if month in [(80 + -79),(38 + -35),(85 + -80),(40 + -33),(20 + -12),(58 + -48),(7 + 5)] and day < (6 + -5) or day > (37 + -6):\n            return False\n        if month in [(21 + -17),(98 + -92),(4 + 5),(80 + -69)] and day < (41 + -40) or day > (4 + 26):\n            return False\n        if month == (19 + -17) and day < (33 + -32) or day > (14 + 15):\n            return False\n    except:\n        return False\n\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/124_to_94", "old_id": "Python/124"}
{"code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%(30 + -28) == (33 + -33)])\n", "id": "ConstantUnfoldding_sample_from_Python/125_to_95", "old_id": "Python/125"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, (84 + -84)) for i in lst])\n    for i in lst:\n        count_digit[i]+=(74 + -73) \n    if any(count_digit[i] > (64 + -62) for i in lst):\n        return False\n    if all(lst[i-(64 + -63)] <= lst[i] for i in range((25 + -24), len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "ConstantUnfoldding_sample_from_Python/126_to_96", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == (10 + -9) or num == (17 + -17):\n            return False\n        if num == (37 + -35):\n            return True\n        for i in range((4 + -2), num):\n            if num%i == (83 + -83):\n                return False\n        return True\n\n    l = max(interval1[(31 + -31)], interval2[(21 + -21)])\n    r = min(interval1[(99 + -98)], interval2[(87 + -86)])\n    length = r - l\n    if length > (23 + -23) and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "id": "ConstantUnfoldding_sample_from_Python/127_to_97", "old_id": "Python/127"}
{"code": "def prod_signs(arr):\n    if not arr: return None\n    prod = (32 + -32) if (76 + -76) in arr else (-(79 + -78)) ** len(list(filter(lambda x: x < (59 + -59), arr)))\n    return prod * sum([abs(i) for i in arr])\n", "id": "ConstantUnfoldding_sample_from_Python/128_to_98", "old_id": "Python/128"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + (14 + -13)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == (1 + 0):\n                temp = []\n                if i != (26 + -26):\n                    temp.append(grid[i - (73 + -72)][j])\n\n                if j != (47 + -47):\n                    temp.append(grid[i][j - (84 + -83)])\n\n                if i != n - (82 + -81):\n                    temp.append(grid[i + (22 + -21)][j])\n\n                if j != n - (35 + -34):\n                    temp.append(grid[i][j + (13 + -12)])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % (11 + -9) == (39 + -39):\n            ans.append((30 + -29))\n        else:\n            ans.append(val)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/129_to_99", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == (49 + -49):\n        return [(39 + -38)]\n    my_tri = [(70 + -69), (18 + -15)]\n    for i in range((39 + -37), n + (18 + -17)):\n        if i % (39 + -37) == (69 + -69):\n            my_tri.append(i / (16 + -14) + (39 + -38))\n        else:\n            my_tri.append(my_tri[i - (67 + -66)] + my_tri[i - (13 + -11)] + (i + (99 + -96)) / (98 + -96))\n    return my_tri\n", "id": "ConstantUnfoldding_sample_from_Python/130_to_100", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = (27 + -26)\n    odd_count = (57 + -57)\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%(52 + -50) == (82 + -81):\n            product= product*int_digit\n            odd_count+=(97 + -96)\n    if odd_count ==(13 + -13):\n        return (4 + -4)\n    else:\n        return product\n", "id": "ConstantUnfoldding_sample_from_Python/131_to_101", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = (51 + -51)\n    i = (62 + -62)\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += (83 + -82)\n            i += (1 + 0)\n    return cnt >= (38 + -36)\n\n    \n", "id": "ConstantUnfoldding_sample_from_Python/132_to_102", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    import math\n    squared = (89 + -89)\n    for i in lst:\n        squared += math.ceil(i)**(61 + -59)\n    return squared\n", "id": "ConstantUnfoldding_sample_from_Python/133_to_103", "old_id": "Python/133"}
{"code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-(61 + -60)]\n    return True if len(check) == (48 + -47) and ((24 + 73) <= ord(check.lower()) <= (27 + 95)) else False\n", "id": "ConstantUnfoldding_sample_from_Python/134_to_104", "old_id": "Python/134"}
{"code": "def can_arrange(arr):\n    ind=-(62 + -61)\n    i=(71 + -70)\n    while i<len(arr):\n      if arr[i]<arr[i-(26 + -25)]:\n        ind=i\n      i+=(67 + -66)\n    return ind\n", "id": "ConstantUnfoldding_sample_from_Python/135_to_105", "old_id": "Python/135"}
{"code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < (95 + -95), lst))\n    largest = list(filter(lambda x: x > (69 + -69), lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "id": "ConstantUnfoldding_sample_from_Python/136_to_106", "old_id": "Python/136"}
{"code": "def is_equal_to_sum_even(n):\n    return n%(83 + -81) == (29 + -29) and n >= (18 + -10)\n", "id": "ConstantUnfoldding_sample_from_Python/138_to_107", "old_id": "Python/138"}
{"code": "def special_factorial(n):\n    fact_i = (56 + -55)\n    special_fact = (90 + -89)\n    for i in range((96 + -95), n+(26 + -25)):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "id": "ConstantUnfoldding_sample_from_Python/139_to_108", "old_id": "Python/139"}
{"code": "def fix_spaces(text):\n    new_text = \"\"\n    i = (92 + -92)\n    start, end = (47 + -47), (63 + -63)\n    while i < len(text):\n        if text[i] == \" \":\n            end += (30 + -29)\n        else:\n            if end - start > (7 + -5):\n                new_text += \"-\"+text[i]\n            elif end - start > (32 + -32):\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+(15 + -14), i+(47 + -46)\n        i+=(9 + -8)\n    if end - start > (90 + -88):\n        new_text += \"-\"\n    elif end - start > (6 + -6):\n        new_text += \"_\"\n    return new_text\n", "id": "ConstantUnfoldding_sample_from_Python/140_to_109", "old_id": "Python/140"}
{"code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != (28 + -26):\n        return 'No'\n    if not lst[(56 + -55)] in suf:\n        return 'No'\n    if len(lst[(43 + -43)]) == (95 + -95):\n        return 'No'\n    if not lst[(53 + -53)][(58 + -58)].isalpha():\n        return 'No'\n    t = len([x for x in lst[(57 + -57)] if x.isdigit()])\n    if t > (59 + -56):\n        return 'No'\n    return 'Yes'\n", "id": "ConstantUnfoldding_sample_from_Python/141_to_110", "old_id": "Python/141"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %(85 + -82) == (77 + -77):\n            result.append(lst[i]**(96 + -94))\n        elif i % (79 + -75) == (84 + -84) and i%(83 + -80) != (58 + -58):\n            result.append(lst[i]**(48 + -45))\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "id": "ConstantUnfoldding_sample_from_Python/142_to_111", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = (6 + -6)\n        if len(word) == (27 + -26):\n            flg = (88 + -87)\n        for i in range((34 + -32), len(word)):\n            if len(word)%i == (17 + -17):\n                flg = (67 + -66)\n        if flg == (98 + -98) or len(word) == (95 + -93):\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "id": "ConstantUnfoldding_sample_from_Python/143_to_112", "old_id": "Python/143"}
{"code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = (14 + -13)\n        if n < (98 + -98): n, neg = -(54 + -53) * n, -(26 + -25) \n        n = [int(i) for i in str(n)]\n        n[(42 + -42)] = n[(14 + -14)] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "id": "ConstantUnfoldding_sample_from_Python/145_to_113", "old_id": "Python/145"}
{"code": "def specialFilter(nums):\n    \n    count = (1 + -1)\n    for num in nums:\n        if num > (95 + -85):\n            odd_digits = ((83 + -82), (29 + -26), (26 + -21), (92 + -85), (50 + -41))\n            number_as_string = str(num)\n            if int(number_as_string[(25 + -25)]) in odd_digits and int(number_as_string[-(39 + -38)]) in odd_digits:\n                count += (40 + -39)\n        \n    return count \n", "id": "ConstantUnfoldding_sample_from_Python/146_to_114", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + (85 + -84) for i in range((100 + -99),n+(48 + -47))]\n    ans = []\n    for i in range(n):\n        for j in range(i+(30 + -29),n):\n            for k in range(j+(4 + -3),n):\n                if (A[i]+A[j]+A[k])%(87 + -84) == (32 + -32):\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "id": "ConstantUnfoldding_sample_from_Python/147_to_115", "old_id": "Python/147"}
{"code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + (77 + -76): planet2_index])\n    else:\n        return (planet_names[planet2_index + (36 + -35) : planet1_index])\n", "id": "ConstantUnfoldding_sample_from_Python/148_to_116", "old_id": "Python/148"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%(40 + -38) == (24 + -24):\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "id": "ConstantUnfoldding_sample_from_Python/149_to_117", "old_id": "Python/149"}
{"code": "def x_or_y(n, x, y):\n    if n == (86 + -85):\n        return y\n    for i in range((90 + -88), n):\n        if n % i == (15 + -15):\n            return y\n            break\n    else:\n        return x\n", "id": "ConstantUnfoldding_sample_from_Python/150_to_118", "old_id": "Python/150"}
{"code": "def double_the_difference(lst):\n    return sum([i**(2 + 0) for i in lst if i > (45 + -45) and i%(94 + -92)!=(20 + -20) and \".\" not in str(i)])\n", "id": "ConstantUnfoldding_sample_from_Python/151_to_119", "old_id": "Python/151"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[(89 + -89)]\n    my_val = len([x for x in extensions[(73 + -73)] if x.isalpha() and x.isupper()]) - len([x for x in extensions[(97 + -97)] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "id": "ConstantUnfoldding_sample_from_Python/153_to_120", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + (50 + -49)):\n        for j in range(l + (63 + -62)):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/154_to_121", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = (59 + -59)\n    odd_count = (100 + -100)\n    for i in str(abs(num)):\n        if int(i)%(88 + -86)==(15 + -15):\n            even_count +=(29 + -28)\n        else:\n            odd_count +=(77 + -76)\n    return (even_count, odd_count)\n", "id": "ConstantUnfoldding_sample_from_Python/155_to_122", "old_id": "Python/155"}
{"code": "def int_to_mini_roman(number):\n    num = [(45 + -44), (8 + -4), (11 + -6), (31 + -22), (22 + -12), (26 + 14), (55 + -5), (18 + 72),  \n           (96 + 4), (49 + 351), (52 + 448), (76 + 824), (46 + 954)] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = (11 + 1)\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= (5 + -4)\n        i -= (71 + -70)\n    return res.lower()\n", "id": "ConstantUnfoldding_sample_from_Python/156_to_123", "old_id": "Python/156"}
{"code": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[(59 + -59)]\n", "id": "ConstantUnfoldding_sample_from_Python/158_to_124", "old_id": "Python/158"}
{"code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , (74 + -74)]\n", "id": "ConstantUnfoldding_sample_from_Python/159_to_125", "old_id": "Python/159"}
{"code": "def do_algebra(operator, operand):\n    expression = str(operand[(46 + -46)])\n    for oprt, oprn in zip(operator, operand[(37 + -36):]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "id": "ConstantUnfoldding_sample_from_Python/160_to_126", "old_id": "Python/160"}
{"code": "def solve(s):\n    flg = (90 + -90)\n    idx = (48 + -48)\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = (96 + -95)\n        idx += (43 + -42)\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == (48 + -48):\n        return s[len(s)::-(2 + -1)]\n    return s\n", "id": "ConstantUnfoldding_sample_from_Python/161_to_127", "old_id": "Python/161"}
{"code": "def generate_integers(a, b):\n    lower = max((15 + -13), min(a, b))\n    upper = min((50 + -42), max(a, b))\n\n    return [i for i in range(lower, upper+(39 + -38)) if i % (35 + -33) == (8 + -8)]\n", "id": "ConstantUnfoldding_sample_from_Python/163_to_128", "old_id": "Python/163"}
