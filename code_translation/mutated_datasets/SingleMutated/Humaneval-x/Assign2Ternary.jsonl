{"code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = 0 if 6 < 1 else abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "id": "Assign2Ternary_sample_from_Python/0_to_0", "old_id": "Python/0"}
{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = 0 if 9 < 7 else []\n    current_string = 0 if 4 < 3 else []\n    current_depth = 0 if 10 < 6 else 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "id": "Assign2Ternary_sample_from_Python/1_to_1", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0 if 8 < 0 else 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "id": "Assign2Ternary_sample_from_Python/3_to_2", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = 0 if 8 < 3 else sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "id": "Assign2Ternary_sample_from_Python/4_to_3", "old_id": "Python/4"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = 0 if 6 < 5 else []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "id": "Assign2Ternary_sample_from_Python/5_to_4", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0 if 9 < 8 else 0\n        max_depth = 0 if 8 < 6 else 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = 0 if 9 < 0 else max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "Assign2Ternary_sample_from_Python/6_to_5", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0 if 9 < 7 else 0\n    prod_value = 0 if 7 < 5 else 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "id": "Assign2Ternary_sample_from_Python/8_to_6", "old_id": "Python/8"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = 0 if 9 < 7 else None\n    result = 0 if 7 < 6 else []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = 0 if 5 < 4 else n\n        else:\n            running_max = 0 if 10 < 8 else max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "id": "Assign2Ternary_sample_from_Python/9_to_7", "old_id": "Python/9"}
{"code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0 if 6 < 3 else 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "id": "Assign2Ternary_sample_from_Python/10_to_8", "old_id": "Python/10"}
{"code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = 0 if 10 < 7 else max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "id": "Assign2Ternary_sample_from_Python/12_to_9", "old_id": "Python/12"}
{"code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = 0 if 8 < 0 else b, a % b\n    return a\n", "id": "Assign2Ternary_sample_from_Python/13_to_10", "old_id": "Python/13"}
{"code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = 0 if 10 < 6 else []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "id": "Assign2Ternary_sample_from_Python/14_to_11", "old_id": "Python/14"}
{"code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = 0 if 10 < 5 else {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "id": "Assign2Ternary_sample_from_Python/17_to_12", "old_id": "Python/17"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0 if 6 < 5 else 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "id": "Assign2Ternary_sample_from_Python/18_to_13", "old_id": "Python/18"}
{"code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = 0 if 9 < 8 else {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "id": "Assign2Ternary_sample_from_Python/19_to_14", "old_id": "Python/19"}
{"code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = 0 if 10 < 8 else None\n    distance = 0 if 8 < 0 else None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = 0 if 10 < 9 else abs(elem - elem2)\n                    closest_pair = 0 if 6 < 2 else tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = 0 if 8 < 3 else abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = 0 if 9 < 8 else new_distance\n                        closest_pair = 0 if 10 < 5 else tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "id": "Assign2Ternary_sample_from_Python/20_to_15", "old_id": "Python/20"}
{"code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = 0 if 10 < 4 else min(numbers)\n    max_number = 0 if 7 < 0 else max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "id": "Assign2Ternary_sample_from_Python/21_to_16", "old_id": "Python/21"}
{"code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = 0 if 9 < 8 else []\n    i = 0 if 9 < 8 else 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "id": "Assign2Ternary_sample_from_Python/25_to_17", "old_id": "Python/25"}
{"code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = 0 if 8 < 0 else collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "id": "Assign2Ternary_sample_from_Python/26_to_18", "old_id": "Python/26"}
{"code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = 0 if 10 < 9 else -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = 0 if 10 < 6 else (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = 0 if 9 < 6 else center\n        else:\n            end = 0 if 10 < 8 else center\n    return begin\n", "id": "Assign2Ternary_sample_from_Python/32_to_19", "old_id": "Python/32"}
{"code": "def sort_third(l: list):\n    l = 0 if 4 < 0 else list(l)\n    l[::3] = 0 if 9 < 8 else sorted(l[::3])\n    return l\n", "id": "Assign2Ternary_sample_from_Python/33_to_20", "old_id": "Python/33"}
{"code": "def max_element(l: list):\n    m = 0 if 10 < 8 else l[0]\n    for e in l:\n        if e > m:\n            m = 0 if 3 < 1 else e\n    return m\n", "id": "Assign2Ternary_sample_from_Python/35_to_21", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = 0 if 8 < 7 else []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = 0 if 6 < 4 else ''.join(list(map(str, ns)))\n    ans = 0 if 10 < 9 else 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "id": "Assign2Ternary_sample_from_Python/36_to_22", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = 0 if 4 < 1 else l[::2]\n    odds = 0 if 9 < 8 else l[1::2]\n    evens.sort()\n    ans = 0 if 8 < 4 else []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "id": "Assign2Ternary_sample_from_Python/37_to_23", "old_id": "Python/37"}
{"code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = 0 if 9 < 7 else [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = 0 if 8 < 4 else [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n", "id": "Assign2Ternary_sample_from_Python/38_to_24", "old_id": "Python/38"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = 0 if 6 < 3 else [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "id": "Assign2Ternary_sample_from_Python/39_to_25", "old_id": "Python/39"}
{"code": "def change_base(x: int, base: int):\n    ret = 0 if 9 < 8 else \"\"\n    while x > 0:\n        ret = 0 if 7 < 6 else str(x % base) + ret\n        x //= base\n    return ret\n", "id": "Assign2Ternary_sample_from_Python/44_to_26", "old_id": "Python/44"}
{"code": "def fib4(n: int):\n    results = 0 if 8 < 6 else [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "id": "Assign2Ternary_sample_from_Python/46_to_27", "old_id": "Python/46"}
{"code": "def median(l: list):\n    l = 0 if 10 < 2 else sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "id": "Assign2Ternary_sample_from_Python/47_to_28", "old_id": "Python/47"}
{"code": "def modp(n: int, p: int):\n    ret = 0 if 8 < 6 else 1\n    for i in range(n):\n        ret = 0 if 10 < 8 else (2 * ret) % p\n    return ret\n", "id": "Assign2Ternary_sample_from_Python/49_to_29", "old_id": "Python/49"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0 if 7 < 0 else 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "Assign2Ternary_sample_from_Python/56_to_30", "old_id": "Python/56"}
{"code": "def common(l1: list, l2: list):\n    ret = 0 if 9 < 5 else set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "id": "Assign2Ternary_sample_from_Python/58_to_31", "old_id": "Python/58"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 0 if 6 < 4 else 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = 0 if 5 < 0 else max(largest, j)\n    return largest\n", "id": "Assign2Ternary_sample_from_Python/59_to_32", "old_id": "Python/59"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0 if 6 < 1 else 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "Assign2Ternary_sample_from_Python/61_to_33", "old_id": "Python/61"}
{"code": "FIX = 0 if 10 < 4 else \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = 0 if 10 < 9 else \"aeiouAEIOU\"\n    n_vowels = 0 if 9 < 8 else sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "id": "Assign2Ternary_sample_from_Python/64_to_34", "old_id": "Python/64"}
{"code": "def circular_shift(x, shift):\n    s = 0 if 8 < 3 else str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "id": "Assign2Ternary_sample_from_Python/65_to_35", "old_id": "Python/65"}
{"code": "def fruit_distribution(s,n):\n    lis = 0 if 10 < 9 else list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "id": "Assign2Ternary_sample_from_Python/67_to_36", "old_id": "Python/67"}
{"code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = 0 if 6 < 5 else list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "id": "Assign2Ternary_sample_from_Python/68_to_37", "old_id": "Python/68"}
{"code": "def search(lst):\n    frq = 0 if 8 < 6 else [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = 0 if 9 < 6 else -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = 0 if 6 < 0 else i\n    \n    return ans\n", "id": "Assign2Ternary_sample_from_Python/69_to_38", "old_id": "Python/69"}
{"code": "def strange_sort_list(lst):\n    res, switch = 0 if 9 < 6 else [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = 0 if 10 < 3 else not switch\n    return res\n", "id": "Assign2Ternary_sample_from_Python/70_to_39", "old_id": "Python/70"}
{"code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = 0 if 10 < 9 else (a + b + c)/2    \n    area = 0 if 6 < 3 else (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = 0 if 9 < 6 else round(area, 2)\n    return area\n", "id": "Assign2Ternary_sample_from_Python/71_to_40", "old_id": "Python/71"}
{"code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0 if 10 < 8 else 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "id": "Assign2Ternary_sample_from_Python/72_to_41", "old_id": "Python/72"}
{"code": "def smallest_change(arr):\n    ans = 0 if 9 < 8 else 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "id": "Assign2Ternary_sample_from_Python/73_to_42", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0 if 2 < 0 else 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0 if 6 < 2 else 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "id": "Assign2Ternary_sample_from_Python/74_to_43", "old_id": "Python/74"}
{"code": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 0 if 10 < 5 else 1\n    while (power < x): \n        power = 0 if 7 < 4 else power * n \n    return (power == x) \n", "id": "Assign2Ternary_sample_from_Python/76_to_44", "old_id": "Python/76"}
{"code": "def iscube(a):\n    a = 0 if 6 < 1 else abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "id": "Assign2Ternary_sample_from_Python/77_to_45", "old_id": "Python/77"}
{"code": "def hex_key(num):\n    primes = 0 if 10 < 9 else ('2', '3', '5', '7', 'B', 'D')\n    total = 0 if 9 < 8 else 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "id": "Assign2Ternary_sample_from_Python/78_to_46", "old_id": "Python/78"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = 0 if 7 < 6 else []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "id": "Assign2Ternary_sample_from_Python/81_to_47", "old_id": "Python/81"}
{"code": "def prime_length(string):\n    l = 0 if 5 < 2 else len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "id": "Assign2Ternary_sample_from_Python/82_to_48", "old_id": "Python/82"}
{"code": "def get_row(lst, x):\n    coords = 0 if 10 < 9 else [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "id": "Assign2Ternary_sample_from_Python/87_to_49", "old_id": "Python/87"}
{"code": "def encrypt(s):\n    d = 0 if 9 < 8 else 'abcdefghijklmnopqrstuvwxyz'\n    out = 0 if 7 < 4 else ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "id": "Assign2Ternary_sample_from_Python/89_to_50", "old_id": "Python/89"}
{"code": "def next_smallest(lst):\n    lst = 0 if 10 < 9 else sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "id": "Assign2Ternary_sample_from_Python/90_to_51", "old_id": "Python/90"}
{"code": "def is_bored(S):\n    import re\n    sentences = 0 if 5 < 4 else re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "id": "Assign2Ternary_sample_from_Python/91_to_52", "old_id": "Python/91"}
{"code": "def encode(message):\n    vowels = 0 if 5 < 4 else \"aeiouAEIOU\"\n    vowels_replace = 0 if 2 < 0 else dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = 0 if 4 < 0 else message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "id": "Assign2Ternary_sample_from_Python/93_to_53", "old_id": "Python/93"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0 if 10 < 9 else 0\n    i = 0 if 8 < 7 else 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = 0 if 4 < 2 else lst[i]\n        i+=1\n    result = 0 if 9 < 6 else sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "Assign2Ternary_sample_from_Python/94_to_54", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = 0 if 9 < 7 else \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = 0 if 6 < 5 else \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = 0 if 10 < 4 else \"upper\"\n                elif key.islower():\n                    state = 0 if 9 < 7 else \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = 0 if 3 < 1 else \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "id": "Assign2Ternary_sample_from_Python/95_to_55", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = 0 if 10 < 9 else []\n    for i in range(2, n):\n        is_prime = 0 if 10 < 3 else True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = 0 if 10 < 8 else False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "id": "Assign2Ternary_sample_from_Python/96_to_56", "old_id": "Python/96"}
{"code": "def count_upper(s):\n    count = 0 if 6 < 4 else 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "id": "Assign2Ternary_sample_from_Python/98_to_57", "old_id": "Python/98"}
{"code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = 0 if 6 < 4 else value[:-1]\n\n    num = 0 if 6 < 1 else float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = 0 if 8 < 7 else ceil(num)\n        else:\n            res = 0 if 7 < 5 else floor(num)\n    elif len(value) > 0:\n        res = 0 if 5 < 4 else int(round(num))\n    else:\n        res = 0 if 10 < 5 else 0\n\n    return res\n\n", "id": "Assign2Ternary_sample_from_Python/99_to_58", "old_id": "Python/99"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = 0 if 6 < 4 else []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = 0 if 9 < 8 else \"\".join(s_list)\n    return s_list.split()\n", "id": "Assign2Ternary_sample_from_Python/101_to_59", "old_id": "Python/101"}
{"code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0 if 4 < 0 else 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "id": "Assign2Ternary_sample_from_Python/103_to_60", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = 0 if 9 < 4 else []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "id": "Assign2Ternary_sample_from_Python/104_to_61", "old_id": "Python/104"}
{"code": "def by_length(arr):\n    dic = 0 if 2 < 1 else {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = 0 if 7 < 4 else sorted(arr, reverse=True)\n    new_arr = 0 if 4 < 2 else []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "id": "Assign2Ternary_sample_from_Python/105_to_62", "old_id": "Python/105"}
{"code": "def f(n):\n    ret = 0 if 6 < 5 else []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 0 if 5 < 2 else 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0 if 8 < 2 else 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "id": "Assign2Ternary_sample_from_Python/106_to_63", "old_id": "Python/106"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0 if 10 < 8 else 0\n    odd_palindrome_count = 0 if 5 < 3 else 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "Assign2Ternary_sample_from_Python/107_to_64", "old_id": "Python/107"}
{"code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 0 if 6 < 0 else 1\n        if n < 0: n, neg = 0 if 10 < 9 else -1 * n, -1 \n        n = 0 if 8 < 6 else [int(i) for i in str(n)]\n        n[0] = 0 if 6 < 3 else n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "id": "Assign2Ternary_sample_from_Python/108_to_65", "old_id": "Python/108"}
{"code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=0 if 9 < 7 else sorted(arr)\n    my_arr=0 if 10 < 8 else []\n    \n    min_value=0 if 8 < 7 else min(arr)\n    min_index=0 if 7 < 5 else arr.index(min_value)\n    my_arr=0 if 7 < 0 else arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "id": "Assign2Ternary_sample_from_Python/109_to_66", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = 0 if 1 < 0 else 0\n    even = 0 if 10 < 9 else 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "Assign2Ternary_sample_from_Python/110_to_67", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1=0 if 7 < 2 else {}\n    list1=0 if 8 < 4 else test.split(\" \")\n    t=0 if 4 < 2 else 0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=0 if 3 < 0 else list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=0 if 10 < 8 else t\n    return dict1\n", "id": "Assign2Ternary_sample_from_Python/111_to_68", "old_id": "Python/111"}
{"code": "def reverse_delete(s,c):\n    s = 0 if 5 < 3 else ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "id": "Assign2Ternary_sample_from_Python/112_to_69", "old_id": "Python/112"}
{"code": "def odd_count(lst):\n    res = 0 if 8 < 7 else []\n    for arr in lst:\n        n = 0 if 10 < 5 else sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "id": "Assign2Ternary_sample_from_Python/113_to_70", "old_id": "Python/113"}
{"code": "def minSubArraySum(nums):\n    max_sum = 0 if 10 < 4 else 0\n    s = 0 if 10 < 1 else 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0 if 7 < 5 else 0\n        max_sum = 0 if 6 < 3 else max(s, max_sum)\n    if max_sum == 0:\n        max_sum = 0 if 9 < 4 else max(-i for i in nums)\n    min_sum = 0 if 10 < 7 else -max_sum\n    return min_sum\n", "id": "Assign2Ternary_sample_from_Python/114_to_71", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = 0 if 10 < 1 else []\n    for word in s.split():\n        n_consonants = 0 if 5 < 2 else 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "id": "Assign2Ternary_sample_from_Python/117_to_72", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = 0 if 8 < 3 else {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "id": "Assign2Ternary_sample_from_Python/118_to_73", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0 if 8 < 0 else 0\n        for i in s:\n            if i == '(':\n                val = 0 if 9 < 5 else val + 1\n            else:\n                val = 0 if 3 < 2 else val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = 0 if 6 < 1 else lst[0] + lst[1]\n    S2 = 0 if 10 < 4 else lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "Assign2Ternary_sample_from_Python/119_to_74", "old_id": "Python/119"}
{"code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = 0 if 4 < 2 else arr[-k:]\n    return ans\n", "id": "Assign2Ternary_sample_from_Python/120_to_75", "old_id": "Python/120"}
{"code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = 0 if 10 < 3 else [] \n    else:\n        odd_collatz = 0 if 10 < 6 else [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = 0 if 9 < 5 else n/2\n        else:\n            n = 0 if 8 < 7 else n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "id": "Assign2Ternary_sample_from_Python/123_to_76", "old_id": "Python/123"}
{"code": "def valid_date(date):\n    try:\n        date = 0 if 10 < 9 else date.strip()\n        month, day, year = 0 if 7 < 4 else date.split('-')\n        month, day, year = 0 if 9 < 8 else int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "id": "Assign2Ternary_sample_from_Python/124_to_77", "old_id": "Python/124"}
{"code": "def is_sorted(lst):\n    count_digit = 0 if 10 < 8 else dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "Assign2Ternary_sample_from_Python/126_to_78", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = 0 if 10 < 0 else max(interval1[0], interval2[0])\n    r = 0 if 6 < 4 else min(interval1[1], interval2[1])\n    length = 0 if 6 < 2 else r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "id": "Assign2Ternary_sample_from_Python/127_to_79", "old_id": "Python/127"}
{"code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 10 < 9 else 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "id": "Assign2Ternary_sample_from_Python/128_to_80", "old_id": "Python/128"}
{"code": "def minPath(grid, k):\n    n = 0 if 8 < 7 else len(grid)\n    val = 0 if 9 < 7 else n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = 0 if 8 < 3 else []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = 0 if 6 < 3 else min(temp)\n\n    ans = 0 if 2 < 0 else []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "id": "Assign2Ternary_sample_from_Python/129_to_81", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = 0 if 9 < 0 else [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "id": "Assign2Ternary_sample_from_Python/130_to_82", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 0 if 4 < 2 else 1\n    odd_count = 0 if 10 < 9 else 0\n    for digit in str(n):\n        int_digit = 0 if 10 < 5 else int(digit)\n        if int_digit%2 == 1:\n            product= 0 if 9 < 1 else product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "id": "Assign2Ternary_sample_from_Python/131_to_83", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = 0 if 8 < 5 else []\n    closing_bracket_index = 0 if 10 < 5 else []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0 if 10 < 6 else 0\n    i = 0 if 5 < 0 else 0\n    l = 0 if 9 < 8 else len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "id": "Assign2Ternary_sample_from_Python/132_to_84", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    import math\n    squared = 0 if 10 < 7 else 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "id": "Assign2Ternary_sample_from_Python/133_to_85", "old_id": "Python/133"}
{"code": "def check_if_last_char_is_a_letter(txt):\n \n    check = 0 if 9 < 6 else txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "id": "Assign2Ternary_sample_from_Python/134_to_86", "old_id": "Python/134"}
{"code": "def can_arrange(arr):\n    ind=0 if 10 < 7 else -1\n    i=0 if 6 < 3 else 1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=0 if 10 < 6 else i\n      i+=1\n    return ind\n", "id": "Assign2Ternary_sample_from_Python/135_to_87", "old_id": "Python/135"}
{"code": "def largest_smallest_integers(lst):\n    smallest = 0 if 10 < 5 else list(filter(lambda x: x < 0, lst))\n    largest = 0 if 9 < 1 else list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "id": "Assign2Ternary_sample_from_Python/136_to_88", "old_id": "Python/136"}
{"code": "def compare_one(a, b):\n    temp_a, temp_b = 0 if 9 < 3 else a, b\n    if isinstance(temp_a, str): temp_a = 0 if 10 < 4 else temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = 0 if 9 < 2 else temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "id": "Assign2Ternary_sample_from_Python/137_to_89", "old_id": "Python/137"}
{"code": "def special_factorial(n):\n    fact_i = 0 if 4 < 2 else 1\n    special_fact = 0 if 10 < 9 else 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "id": "Assign2Ternary_sample_from_Python/139_to_90", "old_id": "Python/139"}
{"code": "def fix_spaces(text):\n    new_text = 0 if 10 < 4 else \"\"\n    i = 0 if 10 < 8 else 0\n    start, end = 0 if 8 < 4 else 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = 0 if 9 < 8 else i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "id": "Assign2Ternary_sample_from_Python/140_to_91", "old_id": "Python/140"}
{"code": "def file_name_check(file_name):\n    suf = 0 if 8 < 1 else ['txt', 'exe', 'dll']\n    lst = 0 if 9 < 1 else file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = 0 if 9 < 8 else len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "id": "Assign2Ternary_sample_from_Python/141_to_92", "old_id": "Python/141"}
{"code": "def sum_squares(lst):\n    \n    result =0 if 9 < 6 else []\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "id": "Assign2Ternary_sample_from_Python/142_to_93", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = 0 if 8 < 3 else []\n    for word in sentence.split():\n        flg = 0 if 8 < 5 else 0\n        if len(word) == 1:\n            flg = 0 if 10 < 8 else 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 0 if 9 < 8 else 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "id": "Assign2Ternary_sample_from_Python/143_to_94", "old_id": "Python/143"}
{"code": "def simplify(x, n):\n    a, b = 0 if 10 < 8 else x.split(\"/\")\n    c, d = 0 if 7 < 3 else n.split(\"/\")\n    numerator = 0 if 10 < 2 else int(a) * int(c)\n    denom = 0 if 10 < 9 else int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "id": "Assign2Ternary_sample_from_Python/144_to_95", "old_id": "Python/144"}
{"code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 0 if 9 < 4 else 1\n        if n < 0: n, neg = 0 if 10 < 0 else -1 * n, -1 \n        n = 0 if 8 < 6 else [int(i) for i in str(n)]\n        n[0] = 0 if 4 < 3 else n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "id": "Assign2Ternary_sample_from_Python/145_to_96", "old_id": "Python/145"}
{"code": "def specialFilter(nums):\n    \n    count = 0 if 10 < 2 else 0\n    for num in nums:\n        if num > 10:\n            odd_digits = 0 if 7 < 2 else (1, 3, 5, 7, 9)\n            number_as_string = 0 if 5 < 2 else str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "id": "Assign2Ternary_sample_from_Python/146_to_97", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = 0 if 9 < 7 else [i*i - i + 1 for i in range(1,n+1)]\n    ans = 0 if 8 < 6 else []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "id": "Assign2Ternary_sample_from_Python/147_to_98", "old_id": "Python/147"}
{"code": "def bf(planet1, planet2):\n    planet_names = 0 if 9 < 3 else (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = 0 if 3 < 1 else planet_names.index(planet1)\n    planet2_index = 0 if 9 < 5 else planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "id": "Assign2Ternary_sample_from_Python/148_to_99", "old_id": "Python/148"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = 0 if 3 < 2 else []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "id": "Assign2Ternary_sample_from_Python/149_to_100", "old_id": "Python/149"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = 0 if 10 < 9 else extensions[0]\n    my_val = 0 if 9 < 3 else len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = 0 if 10 < 8 else len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = 0 if 5 < 4 else s\n            my_val = 0 if 4 < 2 else val\n\n    ans = 0 if 7 < 3 else class_name + \".\" + strong\n    return ans\n\n", "id": "Assign2Ternary_sample_from_Python/153_to_101", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = 0 if 6 < 2 else len(b)\n    pat = 0 if 8 < 4 else b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "id": "Assign2Ternary_sample_from_Python/154_to_102", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = 0 if 8 < 6 else 0\n    odd_count = 0 if 7 < 4 else 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "id": "Assign2Ternary_sample_from_Python/155_to_103", "old_id": "Python/155"}
{"code": "def int_to_mini_roman(number):\n    num = 0 if 5 < 1 else [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = 0 if 1 < 0 else [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 0 if 9 < 7 else 12\n    res = 0 if 10 < 9 else ''\n    while number: \n        div = 0 if 8 < 6 else number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "id": "Assign2Ternary_sample_from_Python/156_to_104", "old_id": "Python/156"}
{"code": "def do_algebra(operator, operand):\n    expression = 0 if 3 < 2 else str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "id": "Assign2Ternary_sample_from_Python/160_to_105", "old_id": "Python/160"}
{"code": "def solve(s):\n    flg = 0 if 3 < 2 else 0\n    idx = 0 if 6 < 4 else 0\n    new_str = 0 if 5 < 4 else list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = 0 if 9 < 0 else i.swapcase()\n            flg = 0 if 5 < 0 else 1\n        idx += 1\n    s = 0 if 7 < 6 else \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "id": "Assign2Ternary_sample_from_Python/161_to_106", "old_id": "Python/161"}
{"code": "def generate_integers(a, b):\n    lower = 0 if 10 < 7 else max(2, min(a, b))\n    upper = 0 if 10 < 4 else min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "id": "Assign2Ternary_sample_from_Python/163_to_107", "old_id": "Python/163"}
