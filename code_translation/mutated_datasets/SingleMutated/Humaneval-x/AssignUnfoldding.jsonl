{"code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers); mean = mean / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "id": "AssignUnfoldding_sample_from_Python/4_to_0", "old_id": "Python/4"}
{"code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end); center = center / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "id": "AssignUnfoldding_sample_from_Python/32_to_1", "old_id": "Python/32"}
{"code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret); ret = ret % p\n    return ret\n", "id": "AssignUnfoldding_sample_from_Python/49_to_2", "old_id": "Python/49"}
{"code": "def search(lst):\n    frq = [0]; frq = frq * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "id": "AssignUnfoldding_sample_from_Python/69_to_3", "old_id": "Python/69"}
{"code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c); s = s/2    \n    area = (s * (s - a) * (s - b) * (s - c)); area = area ** 0.5\n    area = round(area, 2)\n    return area\n", "id": "AssignUnfoldding_sample_from_Python/71_to_4", "old_id": "Python/71"}
{"code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0]; n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "id": "AssignUnfoldding_sample_from_Python/108_to_5", "old_id": "Python/108"}
{"code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]; my_arr=my_arr+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "id": "AssignUnfoldding_sample_from_Python/109_to_6", "old_id": "Python/109"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0]; S1 = S1 + lst[1]\n    S2 = lst[1]; S2 = S2 + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "AssignUnfoldding_sample_from_Python/119_to_7", "old_id": "Python/119"}
{"code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3; n = n + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "id": "AssignUnfoldding_sample_from_Python/123_to_8", "old_id": "Python/123"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r; length = length - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "id": "AssignUnfoldding_sample_from_Python/127_to_9", "old_id": "Python/127"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n; val = val + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "id": "AssignUnfoldding_sample_from_Python/129_to_10", "old_id": "Python/129"}
{"code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a); numerator = numerator * int(c)\n    denom = int(b); denom = denom * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "id": "AssignUnfoldding_sample_from_Python/144_to_11", "old_id": "Python/144"}
{"code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0]; n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "id": "AssignUnfoldding_sample_from_Python/145_to_12", "old_id": "Python/145"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]); my_val = my_val - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]); val = val - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\"; ans = ans + strong\n    return ans\n\n", "id": "AssignUnfoldding_sample_from_Python/153_to_13", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b; pat = pat + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "id": "AssignUnfoldding_sample_from_Python/154_to_14", "old_id": "Python/154"}
{"code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number; div = div // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "id": "AssignUnfoldding_sample_from_Python/156_to_15", "old_id": "Python/156"}
