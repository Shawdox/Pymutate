{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if not c == '(':\n            if c == ')':\n                current_depth -= 1\n                current_string.append(c)\n\n                if current_depth == 0:\n                    result.append(''.join(current_string))\n                    current_string.clear()\n        else:\n            current_depth += 1\n            current_string.append(c)\n\n    return result\n", "id": "IfReverse_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if not c == '(':\n                depth -= 1\n            else:\n                depth += 1\n                max_depth = max(depth, max_depth)\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "IfReverse_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if not running_max is None:\n            running_max = max(running_max, n)\n        else:\n            running_max = n\n\n        result.append(running_max)\n\n    return result\n", "id": "IfReverse_sample_from_Python/9_to_2", "old_id": "Python/9"}
{"code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if not i == j:\n            return '1'\n        else:\n            return '0'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "id": "IfReverse_sample_from_Python/11_to_3", "old_id": "Python/11"}
{"code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if not n % i == 0:\n            i += 1\n        else:\n            fact.append(i)\n            n //= i\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "id": "IfReverse_sample_from_Python/25_to_4", "old_id": "Python/25"}
{"code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if not poly(xs, center) * poly(xs, begin) > 0:\n            end = center\n        else:\n            begin = center\n    return begin\n", "id": "IfReverse_sample_from_Python/32_to_5", "old_id": "Python/32"}
{"code": "def median(l: list):\n    l = sorted(l)\n    if not len(l) % 2 == 1:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]\n", "id": "IfReverse_sample_from_Python/47_to_6", "old_id": "Python/47"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if not b == \"<\":\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "IfReverse_sample_from_Python/56_to_7", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if not b == \"(\":\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "IfReverse_sample_from_Python/61_to_8", "old_id": "Python/61"}
{"code": "def circular_shift(x, shift):\n    s = str(x)\n    if not shift > len(s):\n        return s[len(s) - shift:] + s[:len(s) - shift]\n    else:\n        return s[::-1]\n", "id": "IfReverse_sample_from_Python/65_to_9", "old_id": "Python/65"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    if not l1 <= l2:\n        return lst2\n    else:\n        return lst1\n", "id": "IfReverse_sample_from_Python/74_to_10", "old_id": "Python/74"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if not gpa == 4.0:\n            if gpa > 3.7:\n                letter_grade.append(\"A\")\n            elif gpa > 3.3:\n                letter_grade.append(\"A-\")\n            elif gpa > 3.0:\n                letter_grade.append(\"B+\")\n            elif gpa > 2.7:\n                letter_grade.append(\"B\")\n            elif gpa > 2.3:\n                letter_grade.append(\"B-\")\n            elif gpa > 2.0:\n                letter_grade.append(\"C+\")\n            elif gpa > 1.7:\n                letter_grade.append(\"C\")\n            elif gpa > 1.3:\n                letter_grade.append(\"C-\")\n            elif gpa > 1.0:\n                letter_grade.append(\"D+\")\n            elif gpa > 0.7:\n                letter_grade.append(\"D\")\n            elif gpa > 0.0:\n                letter_grade.append(\"D-\")\n            else:\n                letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"A+\")\n    return letter_grade\n", "id": "IfReverse_sample_from_Python/81_to_11", "old_id": "Python/81"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if not c in d:\n            out += c\n        else:\n            out += d[(d.index(c)+2*2) % 26]\n    return out\n", "id": "IfReverse_sample_from_Python/89_to_12", "old_id": "Python/89"}
{"code": "def check_dict_case(dict):\n    if not len(dict.keys()) == 0:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n    else:\n        return False\n", "id": "IfReverse_sample_from_Python/95_to_13", "old_id": "Python/95"}
{"code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if not value[-2:] == '.5':\n        if len(value) > 0:\n            res = int(round(num))\n        else:\n            res = 0\n    else:\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n\n    return res\n\n", "id": "IfReverse_sample_from_Python/99_to_14", "old_id": "Python/99"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if not letter == ',':\n            s_list.append(letter)\n        else:\n            s_list.append(' ')\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "IfReverse_sample_from_Python/101_to_15", "old_id": "Python/101"}
{"code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if not i%2 == 0:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n        else:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n    return ret\n", "id": "IfReverse_sample_from_Python/106_to_16", "old_id": "Python/106"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if not i%2 == 1 and is_palindrome(i):\n            if i%2 == 0 and is_palindrome(i):\n                even_palindrome_count += 1\n        else:\n                odd_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "IfReverse_sample_from_Python/107_to_17", "old_id": "Python/107"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if not i == '(':\n                val = val - 1\n            else:\n                val = val + 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "IfReverse_sample_from_Python/119_to_18", "old_id": "Python/119"}
{"code": "def get_odd_collatz(n):\n    if not n%2==0:\n        odd_collatz = [n]\n    else:\n        odd_collatz = [] \n    while n > 1:\n        if not n % 2 == 0:\n            n = n*3 + 1\n            \n        else:\n            n = n/2\n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "id": "IfReverse_sample_from_Python/123_to_19", "old_id": "Python/123"}
{"code": "def split_words(txt):\n    if not \" \" in txt:\n        if \",\" in txt:\n            return txt.replace(',',' ').split()\n        else:\n            return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n    else:\n        return txt.split()\n", "id": "IfReverse_sample_from_Python/125_to_20", "old_id": "Python/125"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    else:\n        return True\n    \n    \n", "id": "IfReverse_sample_from_Python/126_to_21", "old_id": "Python/126"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if not i % 2 == 0:\n            ans.append(val)\n        else:\n            ans.append(1)\n    return ans\n", "id": "IfReverse_sample_from_Python/129_to_22", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if not i % 2 == 0:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n        else:\n            my_tri.append(i / 2 + 1)\n    return my_tri\n", "id": "IfReverse_sample_from_Python/130_to_23", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if not odd_count ==0:\n        return product\n    else:\n        return 0\n", "id": "IfReverse_sample_from_Python/131_to_24", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if not string[i] == '[':\n            closing_bracket_index.append(i)\n        else:\n            opening_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "id": "IfReverse_sample_from_Python/132_to_25", "old_id": "Python/132"}
{"code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if not text[i] == \" \":\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        else:\n            end += 1\n        i+=1\n    if not end - start > 2:\n        if end - start > 0:\n            new_text += \"_\"\n    else:\n        new_text += \"-\"\n    return new_text\n", "id": "IfReverse_sample_from_Python/140_to_26", "old_id": "Python/140"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    for i in range(len(lst)):\n        if not i %3 == 0:\n            if i % 4 == 0 and i%3 != 0:\n                result.append(lst[i]**3)\n            else:\n                result.append(lst[i])\n        else:\n            result.append(lst[i]**2)\n    return sum(result)\n", "id": "IfReverse_sample_from_Python/142_to_27", "old_id": "Python/142"}
{"code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if not planet1_index < planet2_index:\n        return (planet_names[planet2_index + 1 : planet1_index])\n    else:\n        return (planet_names[planet1_index + 1: planet2_index])\n", "id": "IfReverse_sample_from_Python/148_to_28", "old_id": "Python/148"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if not int(i)%2==0:\n            odd_count +=1\n        else:\n            even_count +=1\n    return (even_count, odd_count)\n", "id": "IfReverse_sample_from_Python/155_to_29", "old_id": "Python/155"}
{"code": "def eat(number, need, remaining):\n    if not (need <= remaining):\n        return [ number + remaining , 0]\n    else:\n        return [ number + need , remaining-need ]\n", "id": "IfReverse_sample_from_Python/159_to_30", "old_id": "Python/159"}
