{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == ('(' + ''):\n            current_depth += 1\n            current_string.append(c)\n        elif c == (')' + ''):\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(('' + '').join(current_string))\n                current_string.clear()\n\n    return result\n", "id": "StringUnfoldding_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == ('' + '('):\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(('' + ' ')) if x]\n", "id": "StringUnfoldding_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ('' + '')\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "id": "StringUnfoldding_sample_from_Python/10_to_2", "old_id": "Python/10"}
{"code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return ('' + '0')\n        else:\n            return ('1' + '')\n\n    return ('' + '').join(xor(x, y) for x, y in zip(a, b))\n", "id": "StringUnfoldding_sample_from_Python/11_to_3", "old_id": "Python/11"}
{"code": "def string_sequence(n: int) -> str:\n    return (' ' + '').join([str(x) for x in range(n + 1)])\n", "id": "StringUnfoldding_sample_from_Python/15_to_4", "old_id": "Python/15"}
{"code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {('' + 'o'): 4, ('' + 'o|'): 2, ('' + '.|'): 1}\n    return [note_map[x] for x in music_string.split((' ' + '')) if x]\n", "id": "StringUnfoldding_sample_from_Python/17_to_5", "old_id": "Python/17"}
{"code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        ('' + 'zero'): 0,\n        ('on' + 'e'): 1,\n        ('t' + 'wo'): 2,\n        ('' + 'three'): 3,\n        ('f' + 'our'): 4,\n        ('' + 'five'): 5,\n        ('' + 'six'): 6,\n        ('sev' + 'en'): 7,\n        ('' + 'eight'): 8,\n        ('ni' + 'ne'): 9\n    }\n    return ('' + ' ').join(sorted([x for x in numbers.split((' ' + '')) if x], key=lambda x: value_map[x]))\n", "id": "StringUnfoldding_sample_from_Python/19_to_6", "old_id": "Python/19"}
{"code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ('' + '').join(strings)\n", "id": "StringUnfoldding_sample_from_Python/28_to_7", "old_id": "Python/28"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ('' + '').join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == ('' + '7'))\n    return ans\n", "id": "StringUnfoldding_sample_from_Python/36_to_8", "old_id": "Python/36"}
{"code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return (\"\" + \"\").join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n", "id": "StringUnfoldding_sample_from_Python/38_to_9", "old_id": "Python/38"}
{"code": "def change_base(x: int, base: int):\n    ret = (\"\" + \"\")\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "id": "StringUnfoldding_sample_from_Python/44_to_10", "old_id": "Python/44"}
{"code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return (\"\" + \"\").join([chr(((ord(ch) + 5 - ord((\"a\" + \"\"))) % 26) + ord((\"\" + \"a\"))) for ch in s])\n\n\ndef decode_shift(s: str):\n    return (\"\" + \"\").join([chr(((ord(ch) - 5 - ord((\"\" + \"a\"))) % 26) + ord((\"\" + \"a\"))) for ch in s])\n", "id": "StringUnfoldding_sample_from_Python/50_to_11", "old_id": "Python/50"}
{"code": "def remove_vowels(text):\n    return (\"\" + \"\").join([s for s in text if s.lower() not in [(\"\" + \"a\"), (\"e\" + \"\"), (\"\" + \"i\"), (\"\" + \"o\"), (\"\" + \"u\")]])\n", "id": "StringUnfoldding_sample_from_Python/51_to_12", "old_id": "Python/51"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == (\"\" + \"<\"):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "StringUnfoldding_sample_from_Python/56_to_13", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == (\"\" + \"(\"):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "StringUnfoldding_sample_from_Python/61_to_14", "old_id": "Python/61"}
{"code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = (\"aeiouAE\" + \"IOU\")\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == ('y' + '') or s[-1] == ('' + 'Y'):\n        n_vowels += 1\n    return n_vowels\n", "id": "StringUnfoldding_sample_from_Python/64_to_15", "old_id": "Python/64"}
{"code": "def digitSum(s):\n    if s == (\"\" + \"\"): return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "id": "StringUnfoldding_sample_from_Python/66_to_16", "old_id": "Python/66"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(('' + ' ')):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "id": "StringUnfoldding_sample_from_Python/67_to_17", "old_id": "Python/67"}
{"code": "def hex_key(num):\n    primes = (('' + '2'), ('3' + ''), ('5' + ''), ('' + '7'), ('' + 'B'), ('' + 'D'))\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "id": "StringUnfoldding_sample_from_Python/78_to_18", "old_id": "Python/78"}
{"code": "def decimal_to_binary(decimal):\n    return (\"\" + \"db\") + bin(decimal)[2:] + (\"db\" + \"\")\n", "id": "StringUnfoldding_sample_from_Python/79_to_19", "old_id": "Python/79"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append((\"A+\" + \"\"))\n        elif gpa > 3.7:\n            letter_grade.append((\"\" + \"A\"))\n        elif gpa > 3.3:\n            letter_grade.append((\"A\" + \"-\"))\n        elif gpa > 3.0:\n            letter_grade.append((\"\" + \"B+\"))\n        elif gpa > 2.7:\n            letter_grade.append((\"\" + \"B\"))\n        elif gpa > 2.3:\n            letter_grade.append((\"B\" + \"-\"))\n        elif gpa > 2.0:\n            letter_grade.append((\"C\" + \"+\"))\n        elif gpa > 1.7:\n            letter_grade.append((\"C\" + \"\"))\n        elif gpa > 1.3:\n            letter_grade.append((\"\" + \"C-\"))\n        elif gpa > 1.0:\n            letter_grade.append((\"\" + \"D+\"))\n        elif gpa > 0.7:\n            letter_grade.append((\"D\" + \"\"))\n        elif gpa > 0.0:\n            letter_grade.append((\"\" + \"D-\"))\n        else:\n            letter_grade.append((\"\" + \"E\"))\n    return letter_grade\n", "id": "StringUnfoldding_sample_from_Python/81_to_20", "old_id": "Python/81"}
{"code": "def anti_shuffle(s):\n    return ('' + ' ').join([('' + '').join(sorted(list(i))) for i in s.split(('' + ' '))])\n", "id": "StringUnfoldding_sample_from_Python/86_to_21", "old_id": "Python/86"}
{"code": "def encrypt(s):\n    d = ('abcdefgh' + 'ijklmnopqrstuvwxyz')\n    out = ('' + '')\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "id": "StringUnfoldding_sample_from_Python/89_to_22", "old_id": "Python/89"}
{"code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == ('' + 'I ') for sentence in sentences)\n", "id": "StringUnfoldding_sample_from_Python/91_to_23", "old_id": "Python/91"}
{"code": "def encode(message):\n    vowels = (\"\" + \"aeiouAEIOU\")\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ('' + '').join([vowels_replace[i] if i in vowels else i for i in message])\n", "id": "StringUnfoldding_sample_from_Python/93_to_24", "old_id": "Python/93"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = (\"sta\" + \"rt\")\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = (\"\" + \"mixed\")\n                break\n            if state == (\"st\" + \"art\"):\n                if key.isupper():\n                    state = (\"u\" + \"pper\")\n                elif key.islower():\n                    state = (\"lowe\" + \"r\")\n                else:\n                    break\n            elif (state == (\"upper\" + \"\") and not key.isupper()) or (state == (\"\" + \"lower\") and not key.islower()):\n                    state = (\"mixed\" + \"\")\n                    break\n            else:\n                break\n        return state == (\"up\" + \"per\") or state == (\"lo\" + \"wer\") \n", "id": "StringUnfoldding_sample_from_Python/95_to_25", "old_id": "Python/95"}
{"code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in (\"AEI\" + \"OU\"):\n            count += 1\n    return count\n", "id": "StringUnfoldding_sample_from_Python/98_to_26", "old_id": "Python/98"}
{"code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count(('' + '.')) == 1:\n        # remove trailing zeros\n        while (value[-1] == ('0' + '')):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == ('.' + '5'):\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "id": "StringUnfoldding_sample_from_Python/99_to_27", "old_id": "Python/99"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ('' + ','):\n            s_list.append((' ' + ''))\n        else:\n            s_list.append(letter)\n\n    s_list = (\"\" + \"\").join(s_list)\n    return s_list.split()\n", "id": "StringUnfoldding_sample_from_Python/101_to_28", "old_id": "Python/101"}
{"code": "def by_length(arr):\n    dic = {\n        1: (\"One\" + \"\"),\n        2: (\"\" + \"Two\"),\n        3: (\"\" + \"Three\"),\n        4: (\"Four\" + \"\"),\n        5: (\"\" + \"Five\"),\n        6: (\"\" + \"Six\"),\n        7: (\"Sev\" + \"en\"),\n        8: (\"Eig\" + \"ht\"),\n        9: (\"Nine\" + \"\"),\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "id": "StringUnfoldding_sample_from_Python/105_to_29", "old_id": "Python/105"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return (\"Y\" + \"ES\")\n    return (\"NO\" + \"\")\n            \n", "id": "StringUnfoldding_sample_from_Python/110_to_30", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split((\" \" + \"\"))\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!=('' + ''):\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "id": "StringUnfoldding_sample_from_Python/111_to_31", "old_id": "Python/111"}
{"code": "def reverse_delete(s,c):\n    s = ('' + '').join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "id": "StringUnfoldding_sample_from_Python/112_to_32", "old_id": "Python/112"}
{"code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append((\"the number of odd ele\" + \"ments \") + str(n) + (\"n\" + \" the str\")+ str(n) +(\"ng\" + \" \")+ str(n) +(\"\" + \" of the \")+ str(n) +(\"\" + \"nput.\"))\n    return res\n", "id": "StringUnfoldding_sample_from_Python/113_to_33", "old_id": "Python/113"}
{"code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count(('' + '1')))\n", "id": "StringUnfoldding_sample_from_Python/116_to_34", "old_id": "Python/116"}
{"code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [(\"a\" + \"\"),(\"e\" + \"\"),(\"i\" + \"\"),(\"\" + \"o\"),(\"u\" + \"\")]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "id": "StringUnfoldding_sample_from_Python/117_to_35", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return (\"\" + \"\")\n\n    vowels = {(\"a\" + \"\"), (\"\" + \"e\"), (\"\" + \"i\"), (\"\" + \"o\"), (\"\" + \"u\"), (\"\" + \"A\"), (\"\" + \"E\"), ('' + 'O'), ('' + 'U'), ('' + 'I')}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return (\"\" + \"\")\n", "id": "StringUnfoldding_sample_from_Python/118_to_36", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == ('' + '('):\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return ('' + 'Yes') if check(S1) or check(S2) else ('No' + '')\n", "id": "StringUnfoldding_sample_from_Python/119_to_37", "old_id": "Python/119"}
{"code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split(('' + '-'))\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "id": "StringUnfoldding_sample_from_Python/124_to_38", "old_id": "Python/124"}
{"code": "def split_words(txt):\n    if (\" \" + \"\") in txt:\n        return txt.split()\n    elif (\",\" + \"\") in txt:\n        return txt.replace(('' + ','),('' + ' ')).split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "id": "StringUnfoldding_sample_from_Python/125_to_39", "old_id": "Python/125"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return (\"YES\" + \"\")\n    return (\"NO\" + \"\")\n", "id": "StringUnfoldding_sample_from_Python/127_to_40", "old_id": "Python/127"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == ('[' + ''):\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "id": "StringUnfoldding_sample_from_Python/132_to_41", "old_id": "Python/132"}
{"code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(('' + ' '))[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "id": "StringUnfoldding_sample_from_Python/134_to_42", "old_id": "Python/134"}
{"code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(('' + ','),('.' + ''))\n    if isinstance(temp_b, str): temp_b = temp_b.replace(('' + ','),('' + '.'))\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "id": "StringUnfoldding_sample_from_Python/137_to_43", "old_id": "Python/137"}
{"code": "def fix_spaces(text):\n    new_text = (\"\" + \"\")\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == (\"\" + \" \"):\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += (\"\" + \"-\")+text[i]\n            elif end - start > 0:\n                new_text += (\"\" + \"_\")*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += (\"-\" + \"\")\n    elif end - start > 0:\n        new_text += (\"_\" + \"\")\n    return new_text\n", "id": "StringUnfoldding_sample_from_Python/140_to_44", "old_id": "Python/140"}
{"code": "def file_name_check(file_name):\n    suf = [('tx' + 't'), ('' + 'exe'), ('' + 'dll')]\n    lst = file_name.split(sep=('' + '.'))\n    if len(lst) != 2:\n        return ('' + 'No')\n    if not lst[1] in suf:\n        return ('N' + 'o')\n    if len(lst[0]) == 0:\n        return ('' + 'No')\n    if not lst[0][0].isalpha():\n        return ('No' + '')\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return ('No' + '')\n    return ('Y' + 'es')\n", "id": "StringUnfoldding_sample_from_Python/141_to_45", "old_id": "Python/141"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return (\"\" + \" \").join(new_lst)\n", "id": "StringUnfoldding_sample_from_Python/143_to_46", "old_id": "Python/143"}
{"code": "def simplify(x, n):\n    a, b = x.split((\"\" + \"/\"))\n    c, d = n.split((\"/\" + \"\"))\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "id": "StringUnfoldding_sample_from_Python/144_to_47", "old_id": "Python/144"}
{"code": "def bf(planet1, planet2):\n    planet_names = ((\"\" + \"Mercury\"), (\"Venus\" + \"\"), (\"Eart\" + \"h\"), (\"Ma\" + \"rs\"), (\"Jupi\" + \"ter\"), (\"\" + \"Saturn\"), (\"Ura\" + \"nus\"), (\"Neptun\" + \"e\"))\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "id": "StringUnfoldding_sample_from_Python/148_to_48", "old_id": "Python/148"}
{"code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and (\".\" + \"\") not in str(i)])\n", "id": "StringUnfoldding_sample_from_Python/151_to_49", "old_id": "Python/151"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + (\"\" + \".\") + strong\n    return ans\n\n", "id": "StringUnfoldding_sample_from_Python/153_to_50", "old_id": "Python/153"}
{"code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [(\"\" + \"I\"), (\"\" + \"IV\"), (\"\" + \"V\"), (\"I\" + \"X\"), (\"\" + \"X\"), (\"\" + \"XL\"),  \n           (\"\" + \"L\"), (\"\" + \"XC\"), (\"\" + \"C\"), (\"CD\" + \"\"), (\"\" + \"D\"), (\"\" + \"CM\"), (\"\" + \"M\")] \n    i = 12\n    res = ('' + '')\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "id": "StringUnfoldding_sample_from_Python/156_to_51", "old_id": "Python/156"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = (\"\" + \"\")\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "id": "StringUnfoldding_sample_from_Python/161_to_52", "old_id": "Python/161"}
{"code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode(('asci' + 'i'))).hexdigest() if text else None\n", "id": "StringUnfoldding_sample_from_Python/162_to_53", "old_id": "Python/162"}
