{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth = current_depth + 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth = current_depth - 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "id": "AugAssign2Assign_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n\n    return False\n", "id": "AugAssign2Assign_sample_from_Python/3_to_1", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth = depth + 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth = depth - 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "AugAssign2Assign_sample_from_Python/6_to_2", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value = sum_value + n\n        prod_value = prod_value * n\n    return sum_value, prod_value\n", "id": "AugAssign2Assign_sample_from_Python/8_to_3", "old_id": "Python/8"}
{"code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix = beginning_of_suffix + 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "id": "AugAssign2Assign_sample_from_Python/10_to_4", "old_id": "Python/10"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times = times + 1\n\n    return times\n", "id": "AugAssign2Assign_sample_from_Python/18_to_5", "old_id": "Python/18"}
{"code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n = n // i\n        else:\n            i = i + 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "id": "AugAssign2Assign_sample_from_Python/25_to_6", "old_id": "Python/25"}
{"code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin = begin * 2.0\n        end = end * 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "id": "AugAssign2Assign_sample_from_Python/32_to_7", "old_id": "Python/32"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans = ans + (c == '7')\n    return ans\n", "id": "AugAssign2Assign_sample_from_Python/36_to_8", "old_id": "Python/36"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n = n - 1\n        if n == 0:\n            return f[-1]\n", "id": "AugAssign2Assign_sample_from_Python/39_to_9", "old_id": "Python/39"}
{"code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x = x // base\n    return ret\n", "id": "AugAssign2Assign_sample_from_Python/44_to_10", "old_id": "Python/44"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth = depth + 1\n        else:\n            depth = depth - 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "AugAssign2Assign_sample_from_Python/56_to_11", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth = depth + 1\n        else:\n            depth = depth - 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "id": "AugAssign2Assign_sample_from_Python/61_to_12", "old_id": "Python/61"}
{"code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels = n_vowels + 1\n    return n_vowels\n", "id": "AugAssign2Assign_sample_from_Python/64_to_13", "old_id": "Python/64"}
{"code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] = frq[i] + 1\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "id": "AugAssign2Assign_sample_from_Python/69_to_14", "old_id": "Python/69"}
{"code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n", "id": "AugAssign2Assign_sample_from_Python/72_to_15", "old_id": "Python/72"}
{"code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans = ans + 1\n    return ans\n", "id": "AugAssign2Assign_sample_from_Python/73_to_16", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 = l1 + len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 = l2 + len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "id": "AugAssign2Assign_sample_from_Python/74_to_17", "old_id": "Python/74"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total = total + 1\n    return total\n", "id": "AugAssign2Assign_sample_from_Python/78_to_18", "old_id": "Python/78"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out = out + d[(d.index(c)+2*2) % 26]\n        else:\n            out = out + c\n    return out\n", "id": "AugAssign2Assign_sample_from_Python/89_to_19", "old_id": "Python/89"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i = i + 1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "AugAssign2Assign_sample_from_Python/94_to_20", "old_id": "Python/94"}
{"code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count = count + 1\n    return count\n", "id": "AugAssign2Assign_sample_from_Python/98_to_21", "old_id": "Python/98"}
{"code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation = summation + i\n    return bin(round(summation/(m - n + 1)))\n", "id": "AugAssign2Assign_sample_from_Python/103_to_22", "old_id": "Python/103"}
{"code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x = x * j\n            ret = ret + [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x = x + j\n            ret = ret + [x]\n    return ret\n", "id": "AugAssign2Assign_sample_from_Python/106_to_23", "old_id": "Python/106"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count = odd_palindrome_count + 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count = even_palindrome_count + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "AugAssign2Assign_sample_from_Python/107_to_24", "old_id": "Python/107"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd = odd + 1\n    for i in lst2:\n        if i%2 == 0:\n            even = even + 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "AugAssign2Assign_sample_from_Python/110_to_25", "old_id": "Python/110"}
{"code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s = s + -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "AugAssign2Assign_sample_from_Python/114_to_26", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants = n_consonants + 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "id": "AugAssign2Assign_sample_from_Python/117_to_27", "old_id": "Python/117"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] = count_digit[i] + 1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "AugAssign2Assign_sample_from_Python/126_to_28", "old_id": "Python/126"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count = odd_count + 1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "id": "AugAssign2Assign_sample_from_Python/131_to_29", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt = cnt + 1\n            i = i + 1\n    return cnt >= 2\n\n    \n", "id": "AugAssign2Assign_sample_from_Python/132_to_30", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared = squared + math.ceil(i)**2\n    return squared\n", "id": "AugAssign2Assign_sample_from_Python/133_to_31", "old_id": "Python/133"}
{"code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i = i + 1\n    return ind\n", "id": "AugAssign2Assign_sample_from_Python/135_to_32", "old_id": "Python/135"}
{"code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i = fact_i * i\n        special_fact = special_fact * fact_i\n    return special_fact\n", "id": "AugAssign2Assign_sample_from_Python/139_to_33", "old_id": "Python/139"}
{"code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end = end + 1\n        else:\n            if end - start > 2:\n                new_text = new_text + \"-\"+text[i]\n            elif end - start > 0:\n                new_text = new_text + \"_\"*(end - start)+text[i]\n            else:\n                new_text = new_text + text[i]\n            start, end = i+1, i+1\n        i = i + 1\n    if end - start > 2:\n        new_text = new_text + \"-\"\n    elif end - start > 0:\n        new_text = new_text + \"_\"\n    return new_text\n", "id": "AugAssign2Assign_sample_from_Python/140_to_34", "old_id": "Python/140"}
{"code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count = count + 1\n        \n    return count \n", "id": "AugAssign2Assign_sample_from_Python/146_to_35", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans = ans + [(A[i],A[j],A[k])]\n    return len(ans)\n", "id": "AugAssign2Assign_sample_from_Python/147_to_36", "old_id": "Python/147"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count = even_count + 1\n        else:\n            odd_count = odd_count + 1\n    return (even_count, odd_count)\n", "id": "AugAssign2Assign_sample_from_Python/155_to_37", "old_id": "Python/155"}
{"code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number = number % num[i] \n        while div: \n            res = res + sym[i] \n            div = div - 1\n        i = i - 1\n    return res.lower()\n", "id": "AugAssign2Assign_sample_from_Python/156_to_38", "old_id": "Python/156"}
{"code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = expression + oprt + str(oprn)\n    return eval(expression)\n", "id": "AugAssign2Assign_sample_from_Python/160_to_39", "old_id": "Python/160"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx = idx + 1\n    s = \"\"\n    for i in new_str:\n        s = s + i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "id": "AugAssign2Assign_sample_from_Python/161_to_40", "old_id": "Python/161"}
