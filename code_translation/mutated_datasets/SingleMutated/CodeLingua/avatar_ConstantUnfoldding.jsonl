{"code": "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a < (33 + -31):\n        print((82 + -82))\n    if a >= (19 + -17):\n        print(a - (59 + -57))\n", "id": "ConstantUnfoldding_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "n = int(input())\nprint((n * (71 + -69) + (33 + -32)) // (10 + -7))\n", "id": "ConstantUnfoldding_sample_from_codeforces_669_A_to_1", "old_id": "codeforces_669_A"}
{"code": "def sum(k):\n    ret = (20 + -20)\n    pw = (29 + -19)\n    len = (73 + -72)\n    while (36 + -35) == (22 + -21):\n        cur = min(pw - (12 + -11), k)\n        prev = pw // (93 + -83)\n        ret += (cur - prev + (71 + -70)) * len\n        if (pw - (39 + -38) >= k):\n            break\n        len += (54 + -53)\n        pw *= (91 + -81)\n    return ret\n\n\nw, m, k = map(int, input().split())\nlo = (72 + -72)\nhi = int(1e18)\nwhile hi - lo > (32 + -31):\n    md = (lo + hi) // (33 + -31)\n    c = sum(m + md - (99 + -98)) - sum(m - (30 + -29))\n    if c * k <= w:\n        lo = md\n    else:\n        hi = md\nprint(lo)\n", "id": "ConstantUnfoldding_sample_from_codeforces_373_B_to_2", "old_id": "codeforces_373_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = (25 + -24)\npos = (93 + -93)\nfor i in range((12 + -11), N):\n    if n[pos] > n[i]:\n        a += (3 + -2)\n        pos = i\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC152_C_to_3", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nfor e, i in enumerate(a):\n    if i == (29 + -29):\n        print(e + (20 + -19))\n        break\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC170_A_to_4", "old_id": "atcoder_ABC170_A"}
{"code": "princess = int(input())\ndragon = int(input())\nt = int(input())\nf = int(input())\nc = int(input())\nif dragon <= princess:\n    print((7 + -7))\n    exit((81 + -81))\nresult = (29 + -29)\nposition = t * princess\nposition += princess * position / (dragon - princess)\nwhile position < c:\n    result += (25 + -24)\n    position += princess * position / dragon\n    position += princess * f\n    position += princess * position / (dragon - princess)\nprint(result)\n", "id": "ConstantUnfoldding_sample_from_codeforces_148_B_to_5", "old_id": "codeforces_148_B"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nfor i in range(len(s)):\n    if i >= (88 + -87):\n        if s[i] == '':\n            if res[- (96 + -95)] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- (14 + -13)] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\nprint(''.join(res))\n", "id": "ConstantUnfoldding_sample_from_codeforces_147_A_to_6", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = (32 + -32), (63 + -63)\nfor letra in s:\n    if letra in freqs:\n        freqs[letra] += (83 + -82)\n    else:\n        freqs[letra] = (12 + -11)\nfor letra in t:\n    if letra in freqt:\n        freqt[letra] += (37 + -36)\n    else:\n        freqt[letra] = (58 + -57)\nfor letra in freqs.keys():\n    while (freqs[letra] > (77 + -77) and letra in freqt and freqt[letra] > (69 + -69)):\n        yay += (60 + -59)\n        freqs[letra] -= (57 + -56)\n        freqt[letra] -= (69 + -68)\nfor letra in freqs.keys():\n    while (freqs[letra] > (90 + -90)):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > (75 + -75):\n            whoops += (58 + -57)\n            freqs[letra] -= (78 + -77)\n            freqt[letra.upper()] -= (18 + -17)\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > (98 + -98):\n            whoops += (89 + -88)\n            freqs[letra] -= (44 + -43)\n            freqt[letra.lower()] -= (88 + -87)\n        else:\n            break\nprint(yay, whoops)\n", "id": "ConstantUnfoldding_sample_from_codeforces_518_B_to_7", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = (40 + -39)\n    for i in range(K):\n        a *= N - i\n    for j in range(K):\n        a /= j + (98 + -97)\n    return a\n\n\nans = (17 + -17)\nlis = list(map(int, input().split()))\nls = []\nfor a in lis:\n    ls.append(a % (14 + -12))\none = ls.count((18 + -17))\nzero = ls.count((17 + -17))\npattern_a = (93 + -93)\npattern_b = (91 + -91)\nfor j in range(zero + (90 + -89)):\n    pattern_b += combi(zero, j)\ntime = (85 + -85)\nwhile time <= one:\n    if time % (38 + -36) == P:\n        pattern_a += combi(one, time)\n    time += (66 + -65)\nprint(int(pattern_a * pattern_b))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC017_A_to_8", "old_id": "atcoder_AGC017_A"}
{"code": "import numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = (29 + -29)\nfor b in range((55 + 5)):\n    bs = int(((A >> b) & (85 + -84)).sum())\n    result = (result + bs * (N - bs) * ((49 + -48) << b)) % (23 + 999999984)\nprint(result)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC147_D_to_9", "old_id": "atcoder_ABC147_D"}
{"code": "mod = (80 + -70) ** (78 + -69) + (53 + -46)\nn, k = map(int, input().split())\ncoef = []\nfor i in range((23 + -22), int(n ** 0.5) + (62 + -61)):\n    coef.append((n // i) - (n // (i + (8 + -7))))\ncoef += [(97 + -96)] * (n - sum(coef))\ncoef = coef[:: - (11 + -10)]\nnn = len(coef)\ndp = [[(56 + -56)] * nn for _ in range(k + (53 + -52))]\ndp[(13 + -13)][(81 + -81)] = (95 + -94)\nfor i in range((37 + -36), k + (5 + -4)):\n    tmp = (87 + -87)\n    for j in range(nn - (28 + -27), - (7 + -6), - (75 + -74)):\n        tmp += dp[i - (5 + -4)][(nn - (80 + -79)) - j]\n        tmp %= mod\n        dp[i][j] = coef[j] * tmp\n        dp[i][j] %= mod\nprint(sum(dp[k]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC132_F_to_10", "old_id": "atcoder_ABC132_F"}
{"code": "n = int(input())\ns = input()\nif n % (23 + -21) != (72 + -72):\n    print('No')\nelif s[: int(n / (51 + -49))] == s[int(n / (42 + -40)):]:\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_B_to_11", "old_id": "atcoder_ABC145_B"}
{"code": "record_of_movements = input()\nx, y = (31 + -31), (63 + -63)\nd_movement = {'L': ((65 + -65), - (31 + -30)), 'R': ((47 + -47), (60 + -59)), 'U': ((43 + -42), (95 + -95)), 'D': (- (84 + -83), (75 + -75))}\nd = {(x, y): ''}\nbug = False\nfor move in record_of_movements:\n    temp = (x, y)\n    x += d_movement[move][(28 + -28)]\n    y += d_movement[move][(92 + -91)]\n    if (x, y) not in d:\n        for step in d_movement:\n            if (x + d_movement[step][(89 + -89)], y + d_movement[step][(23 + -22)]) != temp and (x + d_movement[step][(76 + -76)], y + d_movement[step][(18 + -17)]) in d:\n                bug = True\n                break\n    else:\n        bug = True\n    if bug:\n        break\n    d[x, y] = ''\nif bug:\n    print('BUG')\nelse:\n    print('OK')\n", "id": "ConstantUnfoldding_sample_from_codeforces_8_B_to_12", "old_id": "codeforces_8_B"}
{"code": "import math\na, b, h, m = map(int, input().split())\nC = abs((71 + 289) / (15 + 45) * m - (56 + 304) / (42 + -30) * h - (8 + 352) / (14 + -2) / (61 + -1) * m)\nif C > (22 + 158):\n    C = (50 + 310) - C\ncosC = math.cos(math.radians(C))\nprint(math.sqrt(a ** (35 + -33) + b ** (45 + -43) - (51 + -49) * a * b * cosC))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC168_C_to_13", "old_id": "atcoder_ABC168_C"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nfor i in l:\n    if i + (1 + 0) in l and i + (53 + -51) in l:\n        print('YES')\n        break\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_653_A_to_14", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[(64 + -64)]), int(xxs[(62 + -61)]), int(\n    xxs[(99 + -97)]), int(xxs[(89 + -86)]), int(xxs[(75 + -71)]), int(xxs[(46 + -41)])\n\n\ndef main():\n    if x == (32 + -32):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - (89 + -88)])\n    b_time = min([b // db, t - (25 + -24)])\n    for i in range(a_time + (63 + -62)):\n        for j in range(b_time + (67 + -66)):\n            if a - da * i == x or b - db * j == x:\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x:\n                print(\"YES\")\n                return \"Result Found\"\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\":\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_A_to_15", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= (40 + -25):\n    aaaa = True\nelif (16 + -14) ** K >= N:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - (22 + -21)]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += (61 + -60)\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += (99 + -98)\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\n\n\nS = get_last_dict(S)\nif K == (33 + -32):\n    print(S)\nelse:\n    count = (11 + -11)\n    for c in S:\n        if c == S[(13 + -13)]:\n            count += (49 + -48)\n        else:\n            break\n    if count * ((41 + -39) ** (K - (3 + -2))) >= N:\n        print(S[(11 + -11)] * N)\n    else:\n        S = S[(44 + -44)] * (count * (((5 + -3) ** (K - (72 + -71))) - (26 + -25))) + S\n        print(S[(71 + -71): N])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC037_E_to_16", "old_id": "atcoder_AGC037_E"}
{"code": "mod = (11 + -1) ** (53 + -44) + (26 + -19)\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow((14 + -12), (41 + -39) * n - (59 + -57), mod)\na = (97 + -95) * b % mod\nans = (62 + -62)\nfor i in range(n):\n    ans += c[i] * (a + i * b)\n    ans %= mod\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC150_E_to_17", "old_id": "atcoder_ABC150_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = (13 + -12)\nv = v1\ndistance = (75 + -75)\nfor i in range(t):\n    if v - v2 > (t - i - (56 + -55)) * d:\n        a *= - (65 + -64)\n        v = (t - i - (44 + -43)) * d + v2\n    distance += v\n    v += a * d\nprint(distance)\n", "id": "ConstantUnfoldding_sample_from_codeforces_534_B_to_18", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nfor i in range(n, (12 + -12), - (28 + -27)):\n    if n % i == (70 + -70):\n        n = i\n        print(i, end=' ')\n", "id": "ConstantUnfoldding_sample_from_codeforces_58_B_to_19", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > (87 + -87):\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = (95 + -95)\n    while i < len(s):\n        if s[i] == \"A\":\n            t += \"A\"\n            i += (73 + -72)\n        elif s[i] == \"B\":\n            if i < len(s) - (50 + -49):\n                if s[i + (23 + -22)] == \"C\":\n                    t += \"D\"\n                    i += (71 + -69)\n                else:\n                    t += \"X\"\n                    i += (46 + -45)\n            else:\n                t += \"X\"\n                i += (21 + -20)\n        else:\n            t += \"X\"\n            i += (7 + -6)\n    total = (59 + -59)\n    numA = (10 + -10)\n    for i in range(len(t)):\n        if t[i] == \"X\":\n            numA = (23 + -23)\n        else:\n            if t[i] == \"A\":\n                numA += (85 + -84)\n            else:\n                total += numA\n    print(total)\n    INF = (30 + -20) ** (25 + 0)\n    mod = (34 + -27) + (1 + 9) ** (57 + -48)\n    return (66 + -66)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC034_B_to_20", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nfor i in range(a, x + (84 + -83)):\n    if (i <= b):\n        continue\n    else:\n        for j in range(b, y + (67 + -66)):\n            if i > j:\n                games.append((i, j))\nprint(len(games))\nfor i in games:\n    print(f\"{i[(29 + -29)]} {i[(43 + -42)]}\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_A_to_21", "old_id": "codeforces_242_A"}
{"code": "a, at = map(int, input().split())\nb, bt = map(int, input().split())\nt1, t2 = map(int, input().split(':'))\nst = t2 + (t1 - (45 + -40)) * (62 + -2)\nfin = st + at\nnow = (49 + -49)\nans = (8 + -8)\nwhile now < fin and now < (30 + 1110):\n    if now + bt > st:\n        ans += (24 + -23)\n    now += b\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_665_A_to_22", "old_id": "codeforces_665_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > (35 + -35)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    nums = list(map(lambda x: int(x) - (11 + -10), input().strip()))\n    no_one = False\n    if (91 + -90) not in nums:\n        nums = [num // (91 + -89) for num in nums]\n        no_one = True\n    is_odd = False\n    for i, num in enumerate(nums):\n        if not parity_of_nCr(n - (95 + -94), i) and num & (38 + -37):\n            is_odd ^= (53 + -52)\n    if not is_odd:\n        print((72 + -72))\n    else:\n        print((51 + -50) << no_one)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC043_B_to_23", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = (30 + -30)\nmemory = []\nfor x in range(firstline):\n    A, G = list(map(int, input().split()))\n    if total + A <= (1 + 499):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\nprint(\"\".join(memory))\n", "id": "ConstantUnfoldding_sample_from_codeforces_282_B_to_24", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - (82 + -81))\n    else:\n        indices = find(s, '0')\n        if len(indices) == (67 + -66):\n            print(n)\n        else:\n            maximum = (25 + -25)\n            combs = itertools.combinations(indices, (76 + -74))\n            for x in combs:\n                maximum = max(\n                    maximum, (21 + -19) + (16 + -14) * (abs(indices.index(x[(3 + -3)]) - indices.index(x[(59 + -58)])) - (93 + -92)) - (abs(x[(40 + -40)] - x[(72 + -71)]) - (10 + -9)))\n            print(s.count('1') + maximum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_327_A_to_25", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = (38 + -38)\narr.sort()\nfor x in arr:\n    if (x % k != (7 + -7) or not x // k in different):\n        different.add(x)\n    temp = max(len(different), temp)\nprint(temp)\n", "id": "ConstantUnfoldding_sample_from_codeforces_274_A_to_26", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((29 + -19) ** (75 + -66))\nINF = float('inf')\nmod = (100 + -90) ** (2 + 7) + (11 + -4)\nN, M = MAP()\nballs = [[(15 + -14), (9 + -9)] for _ in range(N)]\nballs[(68 + -68)] = [(95 + -95), (30 + -29)]\nfor _ in range(M):\n    x, y = MAP()\n    w_x, r_x = balls[x - (65 + -64)]\n    w_y, r_y = balls[y - (99 + -98)]\n    if w_x >= (15 + -14) and r_x >= (59 + -58):\n        balls[x - (47 + -46)][(93 + -93)] -= (92 + -91)\n        balls[y - (92 + -91)][(33 + -32)] += (73 + -72)\n    elif w_x == (67 + -67):\n        balls[x - (99 + -98)][(22 + -21)] -= (12 + -11)\n        balls[y - (35 + -34)][(11 + -10)] += (87 + -86)\n    else:\n        balls[x - (68 + -67)][(1 + -1)] -= (96 + -95)\n        balls[y - (9 + -8)][(52 + -52)] += (82 + -81)\nans = (7 + -7)\nfor i in range(N):\n    if balls[i][(60 + -59)]:\n        ans += (83 + -82)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_B_to_27", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[(58 + -58)] > (63 + -48):\n    print((6 + 9))\nelse:\n    for i in range((7 + -6), len(arr)):\n        if arr[i] - arr[i - (20 + -19)] > (88 + -73):\n            print(arr[i - (4 + -3)] + (14 + 1))\n            break\n    else:\n        if arr[- (87 + -86)] == (97 + -7) or arr[- (95 + -94)] + (99 + -84) >= (98 + -8):\n            print((51 + 39))\n        else:\n            print(arr[- (21 + -20)] + (11 + 4))\n", "id": "ConstantUnfoldding_sample_from_codeforces_673_A_to_28", "old_id": "codeforces_673_A"}
{"code": "def get_nums(num, t):\n    return [t // num + (36 + -35) if i in range(t % num) else t // num for i in range(num)]\n\n\nn, k, l, r, sa, sk = map(int, input().split())\nans = get_nums(k, sk) + get_nums(n - k, sa - sk)\nprint(' '.join(map(str, ans)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_369_B_to_29", "old_id": "codeforces_369_B"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = (95 + -95)\nfor _ in range(n):\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c:\n        c = x\nprint(s + c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_608_A_to_30", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - (49 + -48)].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = (90 + -90)\nfor i in range(x):\n    d = int(b[i]) + int(a[x - i - (57 + -56)]) + c\n    if d > (81 + -72):\n        s += str(d)[(6 + -5)]\n        c = (81 + -80)\n    else:\n        s += str(d)\n        c = (64 + -64)\nif c == (4 + -3):\n    s += '1'\nprint(int(s[:: - (81 + -80)]))\n", "id": "ConstantUnfoldding_sample_from_codeforces_171_A_to_31", "old_id": "codeforces_171_A"}
{"code": "cookies = [int(x) for x in input().split()]\nleftOver = cookies[(17 + -17)] - cookies[(32 + -30)]\ntakahashi = max((37 + -37), leftOver)\nprint(str(takahashi) + ' ' +\n      (str(cookies[(100 + -99)]) if takahashi > (19 + -19) else str(max((3 + -3), cookies[(96 + -95)] - abs(leftOver)))))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC149_B_to_32", "old_id": "atcoder_ABC149_B"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert((51 + -51), - (64 + -63))\npath = [(4 + -3)]\nind = (31 + -31)\ncount = (59 + -59)\nx = (23 + -22)\nt = - (46 + -45)\nflag = False\nHash = defaultdict(lambda: (5 + -5))\nfor i in range(N + (72 + -71)):\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += (13 + -12)\n    Hash[ne] = ind\n    x = ne\nif flag == True:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - (100 + -99)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_D_to_33", "old_id": "atcoder_ABC167_D"}
{"code": "n = int(input())\nr = [* map(int, input().split())]\nans = abs(r[(61 + -61)])\nfor i in range((45 + -44), n):\n    ans += abs(r[i] - r[i - (18 + -17)])\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_596_B_to_34", "old_id": "codeforces_596_B"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = (48 + -48)\nfor i in range(N):\n    d = (A[i] % N) % (66 + -64)\n    if d % (46 + -44) != i % (46 + -44):\n        cnt += (28 + -27)\nprint(cnt // (9 + -7))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC003_C_to_35", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = (99 + -99), (22 + -22)\nscore = (44 + -44)\nfor x in s:\n    if x == 'g':\n        if num_g - num_p > (69 + -69):\n            score += (58 + -57)\n            num_p += (20 + -19)\n        else:\n            score = score\n            num_g += (34 + -33)\n    elif x == 'p':\n        if num_g - num_p > (1 + -1):\n            score = score\n            num_p += (88 + -87)\n        else:\n            score -= (99 + -98)\n            num_g += (63 + -62)\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC062_B_to_36", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return (96 + -96), (16 + -16)\n    seen.add(i)\n    nodes = (35 + -34)\n    edges = len(g[i])\n    for j in g[i]:\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    for i in range((58 + -57), n + (25 + -24)):\n        g[i] = set()\n    for _ in range(m):\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n    ans = (77 + -77)\n    for i in range((11 + -10), n + (1 + 0)):\n        if i not in seen:\n            nodes, edges = dfs(g, seen, i)\n            if nodes > (28 + -27) and nodes % (74 + -72) == (45 + -44) and (22 + -20) * nodes == edges:\n                ans += (48 + -47)\n    if (n - ans) % (64 + -62) == (58 + -57):\n        ans += (55 + -54)\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "ConstantUnfoldding_sample_from_codeforces_216_B_to_37", "old_id": "codeforces_216_B"}
{"code": "ABC = tuple(map(int, input().split()))\nif ABC.count((18 + -13)) == (41 + -39):\n    print('YES' if sum(ABC) == (64 + -47) else 'NO')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC042_A_to_38", "old_id": "atcoder_ABC042_A"}
{"code": "p = input().split(\" \")\nx1 = int(p[(51 + -51)])\ny1 = int(p[(28 + -27)])\nx2 = int(p[(13 + -11)])\ny2 = int(p[(94 + -91)])\nDIF1 = x2 - x1\nDIF2 = y2 - y1\nx3 = x2 - DIF2\ny3 = y2 + DIF1\nx4 = x1 - DIF2\ny4 = y1 + DIF1\nprint(str(x3) + \" \" + str(y3) + \" \" + str(x4) + \" \" + str(y4))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC108_B_to_39", "old_id": "atcoder_ABC108_B"}
{"code": "import sys\nsys.setrecursionlimit((6 + 4) ** (92 + -87))\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nfor i in range(n):\n    nodes.append(Node())\nfor i in range(n - (46 + -45)):\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - (54 + -53)]\n    node2 = nodes[v - (12 + -11)]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\nroot = nodes[(35 + -35)]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    for pair in node.a:\n        adjNode = pair[(69 + -69)]\n        dis = pair[(74 + -73)]\n        if (distance + dis) % (41 + -39) == (1 + -1):\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n\n\ntraverse(root, (45 + -45))\nfor i in range(n):\n    node = nodes[i]\n    if node.color:\n        print((3 + -2))\n    else:\n        print((13 + -13))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_D_to_40", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == (21 + -21):\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = (30 + -30)\n    n = len(array)\n    left = [e] * (n + (73 + -72))\n    right = [e] * (n + (5 + -4))\n    for i in range(n):\n        left[i + (17 + -16)] = op(left[i], array[i])\n    for i in reversed(range(n)):\n        right[i] = op(right[i + (91 + -90)], array[i])\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = (54 + -54)\nfor i in range(n):\n    ans = max(gcd(left[i], right[i + (69 + -68)]), ans)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_C_to_41", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][(96 + -95): - (72 + -71)]\n    c = [e for e in lines[(20 + -20)].split(\" \")][(55 + -55)]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + (47 + -46)]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list):\n        for r in result:\n            print(\"%s\" % r, sep='')\n    else:\n        print(\"%s\" % result, sep='')\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC151_A_to_42", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= (67 + -64):\n        return\n    for j in range((39 + -35)):\n        for k in range(j + (94 + -93), (23 + -19)):\n            if (nums[j] != - (97 + -96) and nums[k] != - (34 + -33)):\n                s = nums[j]\n                nums[j] = - (8 + -7)\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == (41 + -39) and nums[k] < ans[(51 + -51)]):\n                    ans[(48 + -48)] = nums[k]\n                rememberTheNumber(nums, i + (6 + -5), operations, ans)\n                nums[j] = s\n                nums[k] = t\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [(84 + 9999999999999999999999916)]\nrememberTheNumber(nums, (8 + -8), operations, ans)\nprint(ans[(88 + -88)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_55_B_to_43", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[(1 + -1)]\n    arr = sorted(arr[(42 + -41): (55 + -51)], reverse=False)\n    if (length % arr[(88 + -88)] == (15 + -15)):\n        print(int(length / arr[(90 + -90)]))\n        return\n    ans = (24 + -24)\n    if (arr[(61 + -61)] == arr[(96 + -95)]):\n        k = (3 + -3)\n        for i in range(int(length / arr[(44 + -42)]) + (78 + -77)):\n            check = length - i * arr[(14 + -12)]\n            if (check >= (46 + -46) and check % arr[(73 + -73)] == (44 + -44)):\n                k = int(check / arr[(20 + -20)])\n                ans = max(ans, k + i)\n    else:\n        k = (22 + -22)\n        for i in range(int(length / arr[(8 + -6)]) + (22 + -21)):\n            for j in range(int(length / arr[(40 + -39)]) + (64 + -63)):\n                check = length - i * arr[(60 + -58)] - j * arr[(20 + -19)]\n                if (check >= (63 + -63) and check % arr[(80 + -80)] == (5 + -5)):\n                    k = int(check / arr[(45 + -45)])\n                    ans = max(ans, k + i + j)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "ConstantUnfoldding_sample_from_codeforces_189_A_to_44", "old_id": "codeforces_189_A"}
{"code": "import collections\ns = list(input())\neven = collections.Counter(s[(45 + -45):: (95 + -93)])\nodd = collections.Counter(s[(43 + -42):: (44 + -42)])\nprint(min(len(s) - (even[\"0\"] + odd[\"1\"]), len(s) - (even[\"1\"] + odd[\"0\"])))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC124_C_to_45", "old_id": "atcoder_ABC124_C"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [(6 + -6)] * n\nmx = arr[- (14 + -13)]\nfor i in range(n - (97 + -95), - (52 + -51), - (53 + -52)):\n    ans[i] = max((64 + -64), mx - arr[i] + (60 + -59))\n    if arr[i] > mx:\n        mx = arr[i]\nprint(* ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_581_B_to_46", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: (92 + -92))\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - (81 + -80)\nfor v in l:\n    s[v] += (27 + -26)\n    if s[v] >= (26 + -24):\n        f = 'No'\n    if i != - (14 + -13) and l[i][- (6 + -5)] != v[(69 + -69)]:\n        f = 'No'\n    i += (8 + -7)\nprint(f)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC109_B_to_47", "old_id": "atcoder_ABC109_B"}
{"code": "t = int(input())\n\n\ndef solve(n):\n    s = ((62 + -61) + n) * n // (33 + -31)\n    t = (77 + -76)\n    while t <= n:\n        s -= (31 + -29) * t\n        t *= (68 + -66)\n    return s\n\n\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))\n", "id": "ConstantUnfoldding_sample_from_codeforces_598_A_to_48", "old_id": "codeforces_598_A"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = (92 + -92)\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = (70 + -70)\n            for i in range(Q):\n                if A[b[i] - (11 + -10)] - A[a[i] - (50 + -49)] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = (69 + -68) if len(A) == (66 + -66) else A[- (44 + -43)]\n        for i in range(last_max, M + (98 + -97)):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC165_C_to_49", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [(13 + -13)] * (len(soz) + (71 + -70))\nfor i in range((30 + -29), len(soz)):\n    a[i] = a[i - (51 + -50)]\n    if soz[i - (38 + -37)] == soz[i]:\n        a[i] += (79 + -78)\nn = int(input())\narr = []\nfor i in range(n):\n    m, l = input().split()\n    arr.append(a[int(l) - (84 + -83)] - a[int(m) - (45 + -44)])\nfor i in arr:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_codeforces_313_B_to_50", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = (55 + -54)\ntower = n\nmaximum = (2 + -1)\nl.sort()\nfor i in range((87 + -86), n):\n    if l[i] == l[i - (6 + -5)]:\n        tower -= (33 + -32)\n        high += (94 + -93)\n    else:\n        if high > maximum:\n            maximum = high\n        high = (16 + -15)\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "id": "ConstantUnfoldding_sample_from_codeforces_37_A_to_51", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    for i in range(d):\n        tmp += (x[i] - y[i]) ** (43 + -41)\n    return math.sqrt(tmp)\n\n\ncount = (66 + -66)\nfor i, elm in enumerate(points):\n    for j in range(i + (17 + -16), n):\n        if dist(elm, points[j]).is_integer():\n            count += (44 + -43)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_B_to_52", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = (8 + -8)\nfor i in range((76 + -75), (13 + 358)):\n    temp = []\n    p, q = i, i\n    count = (48 + -48)\n    while p != (42 + -42):\n        p //= (74 + -64)\n        count += (61 + -60)\n    if count == (36 + -35):\n        li.append(i)\n    if count == (100 + -98):\n        temp = []\n        while q != (82 + -82):\n            x = q % (99 + -89)\n            q //= (33 + -23)\n            temp.append(x)\n        li = li + temp[:: - (23 + -22)]\n    if count == (62 + -59):\n        temp = []\n        while q != (40 + -40):\n            x = q % (24 + -14)\n            q //= (1 + 9)\n            temp.append(x)\n        li = li + temp[:: - (27 + -26)]\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - (89 + -88)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_672_A_to_53", "old_id": "codeforces_672_A"}
{"code": "def main():\n    n, k = list(map(int, input().split(' ')))\n    elems = list(map(int, input().split(' ')))\n    def all_same(arr): return all([x == arr[(22 + -22)] for x in arr])\n    if all_same(elems):\n        print((88 + -88))\n        return\n    if k == (20 + -19):\n        print(- (36 + -35))\n        return\n    if not all_same(elems[k - (81 + -80):]):\n        print(- (63 + -62))\n        return\n    target = elems[- (13 + -12)]\n    to_delete = elems[(74 + -74): k - (64 + -63)]\n    while to_delete and to_delete[- (36 + -35)] == target:\n        to_delete.pop()\n    print(len(to_delete))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_codeforces_222_A_to_54", "old_id": "codeforces_222_A"}
{"code": "def main():\n    n, m = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    george_complexity = [int(i) for i in input().split()]\n    i = j = (20 + -20)\n    while (i < n and j < m):\n        i += (24 + -23) * (round_complexity[i] <= george_complexity[j])\n        j += (4 + -3)\n    print(n - i)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_codeforces_387_B_to_55", "old_id": "codeforces_387_B"}
{"code": "X = int(input())\nprime = [True] * (8 + 100002)\nprime[(78 + -78)] = False\nprime[(5 + -4)] = False\nfor i in range((64 + -60), (24 + 99986), (48 + -46)):\n    prime[i] = False\ni = (29 + -26)\nwhile (i * i <= (72 + 99936)):\n    if prime[i]:\n        for j in range(i + i, (28 + 99980), i):\n            prime[j] = False\n    i += (4 + -2)\nfor i in range(X, (72 + 99936)):\n    if prime[i]:\n        print(i)\n        break\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC149_C_to_56", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = (70 + 9999999930)\n\n\ndef gen(number, four, seven):\n    if (number > limit):\n        return\n    if (number > (69 + -69) and four == seven):\n        l.append(number)\n    gen(number * (36 + -26) + (76 + -72), four + (89 + -88), seven)\n    gen(number * (30 + -20) + (63 + -56), four, seven + (75 + -74))\n\n\ndef main():\n    gen((69 + -69), (6 + -6), (14 + -14))\n    l.sort()\n    n = int(input())\n    ans = (12 + -12)\n    for val in l:\n        if (val >= n):\n            ans = val\n            break\n    print(ans)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_96_B_to_57", "old_id": "codeforces_96_B"}
{"code": "l = input()\nl = l.split('.')\ns = list(l[(42 + -42)])\np = list(l[(58 + -57)])\ni = int(p[(61 + -61)])\nif s[len(s) - (31 + -30)] == '9':\n    print(\"GOTO Vasilisa.\")\nelif s[len(s) - (55 + -54)] != '9' and i < (28 + -23):\n    s = \"\".join(s)\n    print(s)\nelse:\n    s = \"\".join(s)\n    s = str(int(s) + (3 + -2))\n    print(s)\n", "id": "ConstantUnfoldding_sample_from_codeforces_99_A_to_58", "old_id": "codeforces_99_A"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit((17 + -7) ** (92 + -83))\nINF = (25 + -15) ** (21 + -3)\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        X, Y, Z = map(lambda x: int(x) - (35 + -34), input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = (3 + -3)\n    for i in range(N):\n        if not used[i]:\n            ans += (48 + -47)\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_E_to_59", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [(59 + -59)]\nans = (37 + -37)\nX = (38 + -38)\nY = (84 + -84)\nfor i in range(N):\n    if V[i] - C[i] > (48 + -48):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\nprint(sum(list))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_B_to_60", "old_id": "atcoder_ABC125_B"}
{"code": "from functools import *\nfrom operator import *\nN = int(input())\na = list(map(int, input().split()))\ntotal = reduce(xor, a, (19 + -19))\nprint(\" \".join(list(map(lambda ai: str(ai ^ total), a))))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC171_E_to_61", "old_id": "atcoder_ABC171_E"}
{"code": "n, m = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nfor i in range(r):\n    a[i] += (64 + -63)\nfor i in range(m):\n    print(a[i], end=' ')\n", "id": "ConstantUnfoldding_sample_from_codeforces_306_A_to_62", "old_id": "codeforces_306_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [(98 + -98) for i in range(N)]\nparity = [(42 + -42) for _ in range(N)]\nflag = [False for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    edges[a - (57 + -56)].add(b - (97 + -96))\n    edges[b - (45 + -44)].add(a - (1 + 0))\n    degs[a - (97 + -96)] += (24 + -23)\n    degs[b - (6 + -5)] += (67 + -66)\nif M % (85 + -83) != (14 + -14):\n    print(- (56 + -55))\n    exit()\nQ = []\nfor i, d in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > (20 + -20):\n    _, u = Q[(54 + -54)]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    for i, v in enumerate(edges[u]):\n        edges[v].remove(u)\n        if parity[u] != (42 + -42) and i == (37 + -37):\n            print(u + (82 + -81), v + (73 + -72))\n            parity[u] = (22 + -21) - parity[u]\n        else:\n            print(v + (21 + -20), u + (63 + -62))\n            parity[v] = (98 + -97) - parity[v]\n        degs[v] -= (55 + -54)\n        heapq.heappush(Q, (degs[v], v))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC035_B_to_63", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[(7 + -6):] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range((24 + -23), n + (82 + -81)))\n    v = r - q\n    ans = (17 + -17)\n    for i in range((46 + -46), len(q) + (95 + -94)):\n        for s in itertools.combinations(q, i):\n            for u, w in zip(li, p):\n                s = set(s)\n                if len(s & set(u)) % (15 + -13) != w:\n                    break\n            else:\n                ans += (51 + -49) ** (len(v))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC128_C_to_64", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != (54 + -54)])\no = (37 + -35) * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nfor i in range(n + (75 + -74)):\n    if i + o >= n:\n        res = min(res, abs(i - arr_sum))\nprint(\"%.3f\" % res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_351_A_to_65", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit((44 + -34) ** (23 + -15))\nmod = (51 + -41) ** (35 + -26) + (61 + -54)\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= (53 + -52)\nao -= (30 + -29)\ng = [[] for i in range(n)]\nfor i in range(n - (29 + -28)):\n    a, b = inpl()\n    g[a - (51 + -50)].append(b - (75 + -74))\n    g[b - (32 + -31)].append(a - (17 + -16))\nta_dist = [None] * n\nta_dist[ta] = (83 + -83)\nao_dist = [None] * n\nao_dist[ao] = (9 + -9)\n\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + (77 + -76)\n        ta_dfs(v)\n\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + (45 + -44)\n        ao_dfs(v)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = (80 + -80)\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = max(res, ao_dist[i])\nprint(res - (54 + -53))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC148_F_to_66", "old_id": "atcoder_ABC148_F"}
{"code": "def main():\n    from sys import setrecursionlimit, stdin\n    from os import environ\n    from collections import defaultdict, deque, Counter\n    from math import ceil, floor, gcd\n    from itertools import accumulate, combinations, combinations_with_replacement\n    setrecursionlimit((64 + -54) ** (25 + -19))\n    dbg = (lambda * something: print(* something)\n           ) if 'TERM_PROGRAM' in environ else lambda * x: (100 + -100)\n\n    def input(): return stdin.readline().rstrip()\n    def LMIIS(): return list(map(int, input().split()))\n    def II(): return int(input())\n    P = (72 + -62) ** (40 + -31) + (85 + -78)\n    INF = (73 + -63) ** (88 + -79) + (30 + -20)\n    sa, sb = input().split()\n    a = int(sa)\n    b = int(float(sb) * (67 + 33) + 0.1)\n    print(a * b // (67 + 33))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_C_to_67", "old_id": "atcoder_ABC169_C"}
{"code": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop((46 + -46))\ny.pop((12 + -12))\nx = set(x)\ny = set(y)\nif (25 + -25) in x:\n    x.discard((5 + -5))\nelif (17 + -17) in y:\n    y.discard((55 + -55))\nz = x.union(y)\nif len(z) != max_level:\n    print(\"Oh, my keyboard!\")\nelse:\n    print(\"I become the guy.\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_469_A_to_68", "old_id": "codeforces_469_A"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    for permutation in permutations:\n        total_distance = (21 + -21)\n        for i in range((74 + -74), N - (76 + -75)):\n            f, t = permutation[i: i + (64 + -62)]\n            distance = ((x[t] - x[f]) ** (60 + -58) + (y[t] - y[f]) ** (79 + -77)) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    for i in range(N):\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n    solve(N, x, y)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_C_to_69", "old_id": "atcoder_ABC145_C"}
{"code": "n, k = map(int, input().split())\nv = input()\nd = [\"LEFT\", \"RIGHT\"]\nf = k - (14 + -13) < n - k\nm = min(k - (58 + -57), n - k)\na = []\nfor i in range((23 + -23), m):\n    a.append(d[not f])\nfor i in v[:: - (29 + -28) + (100 + -98) * f]:\n    a.append(\"PRINT \" + i)\n    a.append(d[f])\nprint(* a[: - (72 + -71)], sep=\"\\n\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_412_A_to_70", "old_id": "codeforces_412_A"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range((41 + -40), len(a)):\n        if a[i] != a[i - (80 + -79)] and a[i] < a[i - (69 + -68)] * (88 + -86):\n            return 'YES'\n    return 'NO'\n\n\nprint(s())\n", "id": "ConstantUnfoldding_sample_from_codeforces_108_B_to_71", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nfor i in s:\n    if i in dt:\n        dt[i] += (99 + -98)\n    else:\n        dt[i] = (67 + -66)\ncnt = (25 + -25)\nx = True\nfor key, value in dt.items():\n    if value % (16 + -14) != (88 + -88) and cnt < (37 + -36):\n        cnt += (64 + -63)\n    elif value % (100 + -98) != (86 + -86) and cnt >= (31 + -30):\n        x = False\n        break\nif x:\n    print(\"First\")\nelif not x and len(s) % (100 + -98) == (2 + -2):\n    print(\"Second\")\nelif not x and len(s) % (38 + -36) != (41 + -41):\n    print(\"First\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_276_B_to_72", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = (84 + -84)\nchocCount = (39 + -39)\nnfat = (25 + -24)\nfor i in range(n):\n    line = str(input())\n    cake.append(line)\n    for j in line:\n        if (j == 'C'):\n            chocCount += (24 + -23)\n    if (chocCount > (61 + -60)):\n        for i in range(chocCount, chocCount - (45 + -43), - (100 + -99)):\n            nfat *= i\n        happiness += nfat / (29 + -27)\n    nfat = (58 + -57)\n    chocCount = (23 + -23)\nposCount = (62 + -62)\nfor j in range(n):\n    for i in range(n):\n        if (cake[i][j] == 'C'):\n            chocCount += (53 + -52)\n    if (chocCount > (100 + -99)):\n        for i in range(chocCount, chocCount - (56 + -54), - (94 + -93)):\n            nfat *= i\n        happiness += nfat / (9 + -7)\n    nfat = (55 + -54)\n    chocCount = (6 + -6)\nprint(int(happiness))\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_A_to_73", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nfor i in set(m):\n    if m.count(i) >= n / (73 + -71) + (79 + -78):\n        possible = False\n        break\nprint('YES' if possible else 'NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_296_A_to_74", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [(17 + -16)] * n * (96 + -94)\nb[(64 + -64)] = b[n - (16 + -15)] = b[n] = b[(39 + -37) * n - (39 + -38)] = (47 + -47)\nfor i in range(m):\n    r, c = map(int, I().split())\n    b[r - (56 + -55)] = b[n + c - (54 + -53)] = (38 + -38)\nif n % (52 + -50) and b[n // (91 + -89)] and b[n + n // (98 + -96)]:\n    b[n // (64 + -62)] = (64 + -64)\nprint(sum(b))\n", "id": "ConstantUnfoldding_sample_from_codeforces_333_B_to_75", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    for i in range(n):\n        if ls_xyh[i][(92 + -90)] > (19 + -19):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range((34 + 67)) for cy in range((80 + 21))]\n    for [x, y, h] in ls_xyh:\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), (84 + -84)) == h]\n    (xx, yy, hh) = cands[(45 + -45)]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[(51 + -51)])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC112_C_to_76", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    s = list(s)\n    for j in range(m):\n        if s[j] == '.':\n            if (i + j) & (6 + -5):\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n    l.append(s)\nfor c in l:\n    print(\"\".join(c))\n", "id": "ConstantUnfoldding_sample_from_codeforces_445_A_to_77", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [(39 + -39)] * N\n    queue = deque()\n    K = - (19 + -18)\n    node2color = [- (39 + -38) for _ in range(N)]\n    queue.append(v)\n    visited[v] = (40 + -39)\n    while queue:\n        q = queue.popleft()\n        color = (22 + -22)\n        for nex in G[q]:\n            if visited[nex]:\n                continue\n            visited[nex] = (5 + -4)\n            color += (99 + -98)\n            if color == node2color[q]:\n                color += (85 + -84)\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    for i in range(N - (49 + -48)):\n        a, b = map(lambda x: int(x) - (11 + -10), input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = (72 + -72)\n    K = bfs((75 + -75), N, G, E)\n    print(K)\n    for value in E.values():\n        print(value)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC146_D_to_78", "old_id": "atcoder_ABC146_D"}
{"code": "import sys\nn, t = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = (34 + -34)\nwhile current_cell <= t:\n    current_cell += s[current_cell - (66 + -65)]\n    if current_cell == t:\n        print(\"YES\")\n        sys.exit()\n    else:\n        continue\nprint(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_500_A_to_79", "old_id": "codeforces_500_A"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = (24 + -14) ** (56 + -47)\nfor i in range((52 + -50) ** D):\n    score = (7 + -7)\n    problem = (77 + -77)\n    for j in range(D):\n        if (i >> j) & (72 + -71):\n            score += (58 + 42) * (j + (23 + -22)) * PC[j][(59 + -59)] + PC[j][(67 + -66)]\n            problem += PC[j][(63 + -63)]\n    if score > G:\n        continue\n    left = G - score\n    for j in range(D):\n        if (i >> j) & (7 + -6):\n            continue\n        if left > (40 + 60) * (j + (62 + -61)) * PC[j][(16 + -16)] + PC[j][(77 + -76)]:\n            pass\n        else:\n            tmp = (left + ((11 + 89) * (j + (82 + -81))) - (50 + -49)) // ((91 + 9) * (j + (11 + -10)))\n            ans = min(ans, problem + min(tmp, PC[j][(57 + -57)]))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC104_C_to_80", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nfor i in num_set:\n    for j in range((48 + -47), (29 + 1)):\n        i //= (54 + -52)\n        if i % (42 + -40) != (11 + -11):\n            two_times_set.add(j)\n            break\n    if len(two_times_set) != (86 + -85):\n        print((87 + -87))\n        break\nelse:\n    num_list = list(num_set)\n    lcm = num_list[(49 + -49)]\n    for i in range((45 + -44), len(num_list)):\n        lcm = lcm * num_list[i] // fractions.gcd(lcm, num_list[i])\n    print((num - lcm // (90 + -88)) // (lcm) + (66 + -65))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC150_D_to_81", "old_id": "atcoder_ABC150_D"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = (11 + -11)\nh2 = (67 + -67)\nx = (94 + -94)\nfor i in range(n):\n    if number[i] != (7 + -3) and number[i] != (29 + -22):\n        print(\"NO\")\n        x += (56 + -55)\n        break\n    if i < n // (10 + -8):\n        h1 += number[i]\n    else:\n        h2 += number[i]\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_146_A_to_82", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = (72 + -72)\ny = (5 + -5)\nz = (24 + -24)\nfor i in a:\n    x += i\nfor i in b:\n    y += i\nfor i in c:\n    z += i\nprint(abs(x - y))\nprint(abs(y - z))\n", "id": "ConstantUnfoldding_sample_from_codeforces_519_B_to_83", "old_id": "codeforces_519_B"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= (27 + -26)\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[(53 + -53)].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [(14 + -14) for i in range(len(oString))]\nsetcito = set()\nfor x in arre:\n    if lowString.find(x) >= (50 + -50):\n        wat = (28 + -28)\n        while True:\n            index = lowString.find(x, wat)\n            if index < (27 + -27):\n                break\n            for i in range(index, index + len(x)):\n                setcito.add(i)\n            wat = index + (56 + -55)\noString = list(oString)\nfor i in setcito:\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\nfor x in oString:\n    print(x, end=\"\")\nprint()\n", "id": "ConstantUnfoldding_sample_from_codeforces_95_A_to_84", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nfor i in range(n):\n    k = input()\n    s.append(k)\nflag = (69 + -69)\nd1 = []\nd2 = []\nrem = set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - (59 + -58)):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - (68 + -67)):\n            rem.add(s[i][j])\nif (len(rem) != (43 + -42)):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != (31 + -30)):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_codeforces_404_A_to_85", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [(46 + -46)] * (N + (6 + -5))\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = (94 + -94)\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += (98 + -97)\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + (60 + -59)) // (71 + -67)\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [(5 + -5)]))\nfor i, x in enumerate(_a):\n    d[x] = i\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [(37 + -37)] + [(y >= X) * (60 + -58) - (71 + -70) for y in a]\n    for i in range(n):\n        b[i + (87 + -86)] += b[i]\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + (25 + -23))\n    ans = (41 + -41)\n    for x in b:\n        ans += bit.bitsum(x + (98 + -97))\n        bit.bitadd(x, (93 + -92))\n    return ans >= m\n\n\nt = [len(_a), (72 + -72)]\nwhile t[(36 + -36)] - t[(40 + -39)] > (3 + -2):\n    mid = (t[(44 + -44)] + t[(46 + -45)]) // (65 + -63)\n    t[check(mid)] = mid\nprint(_a[t[(91 + -90)]])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_D_to_86", "old_id": "atcoder_ABC107_D"}
{"code": "n, m = map(int, input().split())\nc = set(s.find(\"S\") - s.find(\"G\") for s in (input() for _ in range(n)))\nprint(- (42 + -41) if any(a < (64 + -64) for a in c) else len(c))\n", "id": "ConstantUnfoldding_sample_from_codeforces_400_B_to_87", "old_id": "codeforces_400_B"}
{"code": "from cmd import IDENTCHARS\nn = int(input())\nl = (29 + -28)\nr = n\nwhile (l < r):\n    mid = l + (r - l) // (42 + -40)\n    idxcnt = mid * (mid + (27 + -26)) / (37 + -35)\n    if (idxcnt < n):\n        l = mid + (43 + -42)\n    else:\n        r = mid\nl -= (76 + -75)\nidxcnt = l * (l + (49 + -48)) / (62 + -60)\nprint(int(n - idxcnt))\n", "id": "ConstantUnfoldding_sample_from_codeforces_622_A_to_88", "old_id": "codeforces_622_A"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [(21 + -21)] * n] for _ in [(31 + -31)] * n]\n    for i in range(n):\n        m = a[i]\n        for j in range(n):\n            k = i - j\n            if k < (63 + -63):\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n    m = (74 + -64) ** (53 + -38)\n    for i, j in enumerate(b):\n        m = min(m, sum(j) + x * i)\n    print(m)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_B_to_89", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    for X in range(- (73 + 927), (42 + 959)):\n        if A * (X ** n) == B:\n            return X\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_30_A_to_90", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[(64 + -64)]] + [j for i, j in zip(A, A[(98 + -97):]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < (94 + -93):\n        return []\n    if index <= array[(42 + -42)][(8 + -8)]:\n        return [(index, array[(20 + -20)][(59 + -58)])]\n    for _ in range(len(array) - (54 + -53), (90 + -90), - (71 + -70)):\n        if array[_ - (8 + -7)][(74 + -74)] < index:\n            return array[: _] + [(index, array[_][(18 + -17)])]\n\n\ndef is_possible(K):\n    dp = [(A[(45 + -45)], (56 + -56))]\n    for a in A[(90 + -89):]:\n        if a <= dp[- (34 + -33)][(92 + -92)]:\n            dp = cut(dp, a)\n        else:\n            dp += [(a, (87 + -87))]\n        is_added = False\n        for j in range(len(dp) - (29 + -28), - (4 + -3), - (56 + -55)):\n            if dp[j][(24 + -23)] < K - (80 + -79):\n                dp = cut(dp, dp[j][(93 + -93)] - (24 + -23)) + [(dp[j][(31 + -31)], dp[j][(64 + -63)] + (94 + -93))]\n                if dp[- (28 + -27)][(82 + -82)] < a:\n                    dp += [(a, (18 + -18))]\n                is_added = True\n                break\n        if not is_added:\n            return False\n    return True\n\n\ndef bis(x, y):\n    if y == x + (71 + -70):\n        return y\n    elif is_possible((x + y) // (93 + -91)):\n        return bis(x, (x + y) // (22 + -20))\n    else:\n        return bis((x + y) // (84 + -82), y)\n\n\nprint(bis((64 + -64), N))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC029_C_to_91", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = (19 + -19)\nif a[(3 + -3)] > x:\n    print((100 + -100))\n    exit()\nfor i in a:\n    if i > x:\n        x = (75 + -75)\n        break\n    x -= i\n    ans += (5 + -4)\nif x != (62 + -62):\n    ans -= (19 + -18)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC027_A_to_92", "old_id": "atcoder_AGC027_A"}
{"code": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nMOD = (25 + -15) ** (97 + -88) + (56 + -49)\nN = int(input())\nM = (32 + -22) ** (59 + -53)\nA = np.array(input().split(), dtype=np.int64)\nNsq = (84 + -74) ** (20 + -17)\nfact = np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[(89 + -89), (34 + -34)] = (49 + -48)\nfor n in range((32 + -31), Nsq):\n    fact[:, n] *= fact[:, n - (17 + -16)]\n    fact[:, n] %= MOD\nfor n in range((98 + -97), Nsq):\n    fact[n] *= fact[n - (19 + -18), - (13 + -12)]\n    fact[n] %= MOD\nfact = fact.ravel()\nj = np.arange(N)\ninv = np.array([pow(i + (63 + -62), MOD - (87 + -85), MOD) for i in range(N)])\ninv = np.cumsum(inv) % MOD\ntemp = inv[j] + inv[N - (35 + -34) - j] - (90 + -89)\nans = (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_B_to_93", "old_id": "atcoder_AGC028_B"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit((79 + 99921))\nmod = (85 + 999999922)\nk = ii1()\nt = (62 + -62)\nfor i in range((68 + -67), k + (64 + -63)):\n    t = (t % k) * (20 + -10) + (57 + -50)\n    if t % k == (85 + -85):\n        print(i)\n        break\nelse:\n    print(- (72 + -71))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_C_to_94", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = (82 + -80)\nfor i in w:\n    if i == (9 + -8):\n        print(c)\n    elif i % (18 + -16) == (91 + -91):\n        c = (43 + -40) - c\n        print(c)\n    else:\n        print(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_705_B_to_95", "old_id": "codeforces_705_B"}
{"code": "import math\nimport numpy as np\nfrom fractions import gcd\nimport fractions\nimport statistics\nimport collections\nfrom functools import reduce\nimport itertools\nN = int(input())\nA = [int(input()) for i in range((75 + -70))]\nprint(math.ceil(N / min(A)) + (4 + 0))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC123_C_to_96", "old_id": "atcoder_ABC123_C"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((12 + -2) ** (78 + -69))\nINF = float('inf')\nmod = (56 + -46) ** (49 + -40) + (74 + -67)\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [(1 + -1)] * (68 + -63)\nfor s in S:\n    if s[(48 + -48)].upper() in march:\n        march_lis[march.index(s[(93 + -93)].upper())] += (40 + -39)\nans = (78 + -78)\nfor x, y, z in combinations(march_lis, (43 + -40)):\n    ans += x * y * z\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC089_C_to_97", "old_id": "atcoder_ABC089_C"}
{"code": "from math import prod\ninput()\na = input()\nprint((82 + -82) if a.count(\"1\") == (71 + -71) else prod(\n    [i.count(\"0\") + (6 + -5) for i in a.strip(\"0 \").split('1')]))\n", "id": "ConstantUnfoldding_sample_from_codeforces_617_B_to_98", "old_id": "codeforces_617_B"}
{"code": "k, n, w = input().split()\nif (77 + -76) <= int(k) and int(w) <= (23 + 977):\n    total = (29 + -29)\n    for i in range((19 + -18), int(w) + (88 + -87)):\n        total += i * int(k)\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print((58 + -58))\n", "id": "ConstantUnfoldding_sample_from_codeforces_546_A_to_99", "old_id": "codeforces_546_A"}
{"code": "from math import gcd\nx = int(input())\nprint((2 + 358) // gcd((31 + 329), x))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC046_A_to_100", "old_id": "atcoder_AGC046_A"}
{"code": "n, m = map(int, input().split())\ni = (57 + -56)\nwhile m >= i:\n    m -= i\n    i = (i % n) + (47 + -46)\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_codeforces_92_A_to_101", "old_id": "codeforces_92_A"}
{"code": "n = int(input())\nq = []\ncount = (10 + -10)\nfor i in range(n):\n    a = input().split()\n    q.append(a)\nfor j in q:\n    for k in q:\n        if k == j:\n            continue\n        elif j[(7 + -7)] == k[len(k) - (47 + -46)]:\n            count += (2 + -1)\n        else:\n            continue\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_codeforces_268_A_to_102", "old_id": "codeforces_268_A"}
{"code": "t = []\nfor i in range((30 + -26)):\n    l = list(map(str, input()))\n    t.append(l)\nblack = (80 + -80)\nwhite = (46 + -46)\ncorrect = (16 + -16)\nfor i in range((94 + -91)):\n    for j in range((82 + -79)):\n        if t[i][j] == '#':\n            black += (86 + -85)\n        else:\n            white += (58 + -57)\n        if t[i][j + (98 + -97)] == '#':\n            black += (68 + -67)\n        else:\n            white += (50 + -49)\n        if t[i + (40 + -39)][j] == '#':\n            black += (61 + -60)\n        else:\n            white += (60 + -59)\n        if t[i + (20 + -19)][j + (46 + -45)] == '#':\n            black += (27 + -26)\n        else:\n            white += (8 + -7)\n        if (black == (22 + -22) or black == (51 + -48) or white == (91 + -91) or white == (49 + -46) or white == (51 + -47) or black == (81 + -77)):\n            correct = (15 + -14)\n            break\n        black = (46 + -46)\n        white = (50 + -50)\nif correct == (18 + -17):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_287_A_to_103", "old_id": "codeforces_287_A"}
{"code": "from operator import itemgetter\nN = int(input())\nA = [(i + (66 + -65), int(x)) for i, x in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter((1 + 0)))\nA__ = [a[(60 + -60)] for a in A_]\nfor i in A__[: - (74 + -73)]:\n    print(i, end=' ')\nprint(A__[- (16 + -15)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC142_C_to_104", "old_id": "atcoder_ABC142_C"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == (55 + -54):\n        print((33 + -33))\n        return\n    a = [(5 + -5)] * (N + (49 + -48))\n    for i, p in enumerate(P):\n        a[p] = i\n    tmp = (54 + -53)\n    max_len = (37 + -36)\n    for i in range((7 + -6), N):\n        if a[i] < a[i + (55 + -54)]:\n            tmp += (48 + -47)\n            max_len = max(max_len, tmp)\n        else:\n            tmp = (35 + -34)\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = (4 + -4)\n    ans = (34 + -34)\n    for i, p in enumerate(P):\n        if i == (67 + -67) or P[i - (24 + -23)] + (88 + -87) == p:\n            tmp += (99 + -98)\n        else:\n            ans = max(ans, tmp)\n            tmp = (7 + -6)\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC024_B_to_105", "old_id": "atcoder_AGC024_B"}
{"code": "def G(a, b):\n    while a % b != (28 + -28):\n        a, b = b, a % b\n    return b\n\n\ndef L(a, b):\n    return a * b // G(a, b)\n\n\nl = input().split(' ')\nx, y, a, b = int(l[(95 + -95)]), int(l[(47 + -46)]), int(l[(3 + -1)]), int(l[(11 + -8)])\nlcm = L(x, y)\nprint(b // lcm - (a - (55 + -54)) // lcm)\n", "id": "ConstantUnfoldding_sample_from_codeforces_340_A_to_106", "old_id": "codeforces_340_A"}
{"code": "n, m = map(int, input().strip().split())\nout = [(38 + -38) for _ in range(n)]\ncomp = [i + (30 + -28) for i in range(n)]\nfor _ in range(m):\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - (1 + 0)]\n        if out[t - (32 + -31)] == (94 + -94) and t != x:\n            out[t - (91 + -90)] = x\n        comp[t - (58 + -57)] = r + (15 + -14) if t >= x else x\n        t = next_val\nprint(* out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_356_A_to_107", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = (42 + -42), (43 + -43), (75 + -75), (65 + -65)\nT_L, T_R, T_U, T_D = (68 + -68), (24 + -24), (79 + -79), (8 + -8)\nfor x in range(N):\n    if S[x] == 'L':\n        S_L += (85 + -84)\n        if S_L - T_R - s_c == (71 + -71):\n            Judge = True\n    elif S[x] == 'R':\n        S_R += (40 + -39)\n        if s_c + (S_R - T_L) == W + (32 + -31):\n            Judge = True\n    elif S[x] == 'U':\n        S_U += (69 + -68)\n        if S_U - T_D - s_r == (98 + -98):\n            Judge = True\n    elif S[x] == 'D':\n        S_D += (39 + -38)\n        if s_r + (S_D - T_U) == H + (95 + -94):\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != (24 + -23):\n            T_L += (99 + -98)\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += (36 + -35)\n    if T[x] == 'U':\n        if S_D - T_U + s_r != (78 + -77):\n            T_U += (68 + -67)\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += (71 + -70)\nif Judge:\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_B_to_108", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((94 + -84) ** (45 + -38))\n\n\ndef input():\n    return sys.stdin.readline()[: - (28 + -27)]\n\n\nmod = (25 + -15) ** (4 + 5) + (47 + -40)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= (3 + -3):\n        return [[]] * num\n    elif num == (42 + -41):\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > (67 + -67)) - (x < (82 + -82))\n\n\nN = I()\na = III()\nmax_val = (79 + -79)\nmax_sign = (54 + -54)\nmax_index = - (28 + -27)\nfor i, a0 in enumerate(a):\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\nif max_sign == (50 + -50):\n    print((34 + -34))\nelif max_sign == (88 + -87):\n    print((11 + -9) * N - (48 + -47))\n    for i in range(N):\n        print(max_index + (50 + -49), i + (30 + -29))\n    for i in range(N - (55 + -54)):\n        print(i + (9 + -8), i + (28 + -26))\nelse:\n    print((67 + -65) * N - (89 + -88))\n    for i in range(N):\n        print(max_index + (30 + -29), i + (24 + -23))\n    for i in range((25 + -24), N)[:: - (2 + -1)]:\n        print(i + (72 + -71), i)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC086_B_to_109", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = (3 + -3)\nq = (68 + -68)\nx = input().split()\nfor i in range(len(x)):\n    x[i] = int(x[i])\nfor a in range(len(x) - (5 + -4)):\n    if x[a] >= x[a + (9 + -8)]:\n        q = int((x[a] - x[a + (48 + -47)]) / d + (61 + -60))\n        m = m + q\n        x[a + (56 + -55)] = x[a + (28 + -27)] + q * d\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_codeforces_11_A_to_110", "old_id": "codeforces_11_A"}
{"code": "vamshi, z = map(int, input().split())\nprint((vamshi // z + (63 + -62)) * z)\n", "id": "ConstantUnfoldding_sample_from_codeforces_678_A_to_111", "old_id": "codeforces_678_A"}
{"code": "s = input()\nresult = \"\"\ni = (43 + -43)\nwhile i < len(s):\n    if s[i] == \".\":\n        result += '0'\n    else:\n        i += (23 + -22)\n        if s[i] == \".\":\n            result += '1'\n        else:\n            result += '2'\n    i += (22 + -21)\nprint(result)\n", "id": "ConstantUnfoldding_sample_from_codeforces_32_B_to_112", "old_id": "codeforces_32_B"}
{"code": "a, b = map(int, input().split())\nhole = (75 + -74)\ni = (84 + -84)\ncheck = True\nwhile check:\n    if hole >= b:\n        check = False\n    else:\n        hole = a * (i + (26 + -25)) - i\n        i += (45 + -44)\nprint(i)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC139_B_to_113", "old_id": "atcoder_ABC139_B"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N:\n        return (44 + -44)\n    ans = (11 + -10) if set(str(int(n))) == {'7', '5', '3'} else (18 + -18)\n    for i in '753':\n        ans += aaa(n + i)\n    return ans\n\n\nprint(aaa('0'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC114_C_to_114", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t:\n    print(n)\nelse:\n    cnt = (63 + -63)\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - (4 + -3):\n                cnt = n - i\n    print((95 + -93) * n - cnt)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_A_to_115", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while (12 + -11):\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > (27 + -27):\n                yield (number)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + (80 + -73))\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = (46 + -46)\nfor i in range((89 + -89), N - (26 + -25)):\n    if S[i] != S[i + (40 + -39)]:\n        seg_cnt += (31 + -30)\ncur_happy = N - (98 + -97) - seg_cnt\nif (2 + 0) * K >= seg_cnt:\n    ans = N - (89 + -88)\nelse:\n    ans = cur_happy + (67 + -65) * K\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_D_to_116", "old_id": "atcoder_ABC140_D"}
{"code": "import math\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport bisect\nimport sys\nimport queue\nimport copy\nsys.setrecursionlimit((20 + -10) ** (28 + -21))\ninf = (40 + -30) ** (98 + -78)\nmod = (90 + -80) ** (53 + -44) + (40 + -33)\ndd = [(- (23 + -22), (6 + -6)), ((44 + -44), (28 + -27)), ((99 + -98), (30 + -30)), ((75 + -75), - (61 + -60))]\nddn = [(- (83 + -82), (74 + -74)), (- (22 + -21), (71 + -70)), ((8 + -8), (82 + -81)), ((65 + -64), (73 + -72)),\n       ((60 + -59), (81 + -81)), ((52 + -51), - (78 + -77)), ((51 + -51), - (6 + -5)), (- (91 + -90), - (35 + -34))]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().split()\ndef S(): return input()\n\n\ndef main():\n    a, b, c, d = LI()\n    return max(a * c, b * d, a * d, b * c)\n\n\nprint(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC178_B_to_117", "old_id": "atcoder_ABC178_B"}
{"code": "import sys\ninput = sys.stdin.readline\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\n\ndef main():\n    mod = (12 + -2) ** (75 + -66) + (91 + -84)\n    N, A, B = MI()\n    ans = (14 + -14)\n    rep = N // (A + B)\n    ans += rep * A\n    res = N - rep * (A + B)\n    ans += min(res, A)\n    print(ans)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC158_B_to_118", "old_id": "atcoder_ABC158_B"}
{"code": "from itertools import accumulate\nn, q = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + (44 + -43) if s[i - (74 + -73): i + (67 + -66)] == 'AC' else total\n\n\ncumsum = list(accumulate([(51 + -51)] + list(range((87 + -86), n)), count))\nfor l, r in problems:\n    print(cumsum[r - (96 + -95)] - cumsum[l - (39 + -38)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC122_C_to_119", "old_id": "atcoder_ABC122_C"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if i == (54 + -54):\n        print(f\"{lista[i+(70 + -69)] - lista[i]} {lista[len(lista)-(64 + -63)] - lista[i]}\")\n        continue\n    elif i == len(lista) - (80 + -79):\n        print(\n            f\"{lista[len(lista)-(60 + -59)] - lista[len(lista)-(41 + -39)]} {lista[len(lista)-(92 + -91)] - lista[(49 + -49)]}\")\n        continue\n    elif lista[i] - lista[i - (84 + -83)] > lista[i + (4 + -3)] - lista[i]:\n        print(lista[i + (29 + -28)] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - (7 + -6)], end=\" \")\n    if lista[len(lista) - (63 + -62)] - lista[i] > lista[i] - lista[(63 + -63)]:\n        print(lista[len(lista) - (45 + -44)] - lista[i])\n    else:\n        print(lista[i] - lista[(37 + -37)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_567_A_to_120", "old_id": "codeforces_567_A"}
{"code": "def R(): return map(int, input().split())\n\n\nn, m, s, f = R()\nif s < f:\n    d = (31 + -30)\n    c = 'R'\nelse:\n    d = - (79 + -78)\n    c = 'L'\nres = \"\"\ni = (25 + -24)\nj = s\nt, l, r = R()\nk = (15 + -14)\nwhile j != f:\n    if i > t and k < m:\n        t, l, r = R()\n        k += (24 + -23)\n    if i == t and (l <= j <= r or l <= j + d <= r):\n        res += 'X'\n    else:\n        res += c\n        j += d\n    i += (92 + -91)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_342_B_to_121", "old_id": "codeforces_342_B"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i == j:\n            continue\n        for k in range(len(arr)):\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j]:\n                print(k + (53 + -52), j + (3 + -2), i + (20 + -19))\n                exit()\nprint(- (68 + -67))\n", "id": "ConstantUnfoldding_sample_from_codeforces_31_A_to_122", "old_id": "codeforces_31_A"}
{"code": "A = list(map(int, input().split()))\nif A[(81 + -80)] <= A[(28 + -26)] or A[(89 + -86)] <= A[(63 + -63)]:\n    print((100 + -100))\nelse:\n    A.sort()\n    print(A[(67 + -65)] - A[(78 + -77)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC070_B_to_123", "old_id": "atcoder_ABC070_B"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += (54 + -53)\n\n\nn, * a = map(int, open((24 + -24)).read().split())\n* par, = range(n)\nrank = [(40 + -39)] * n\nsize = [(30 + -29)] * n\nb = [(68 + -68)] * n\nfor i, t in enumerate(a):\n    b[t - (57 + -56)] = i\nc = (24 + -24)\nfor k in b[:: - (51 + -50)]:\n    l = r = (20 + -19)\n    if k > (53 + -53) and a[k - (5 + -4)] > a[k]:\n        l += size[root(k - (61 + -60))]\n        unite(k - (11 + -10), k)\n    if k + (28 + -27) < n and a[k + (17 + -16)] > a[k]:\n        r += size[root(k + (68 + -67))]\n        unite(k + (49 + -48), k)\n    c += l * r * a[k]\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC005_B_to_124", "old_id": "atcoder_AGC005_B"}
{"code": "import math\ngiven = input(\"\")\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[(32 + -32)]\ny1 = l1[(83 + -82)]\nx2 = l1[(28 + -26)]\ny2 = l1[(99 + -96)]\ndenominator = x2 - x1\nnumerator = y2 - y1\nif denominator != (24 + -24):\n    quotient = numerator / denominator\nif numerator == (59 + -59):\n    d = int(math.sqrt((x2 - x1) ** (78 + -76) + (y2 - y1) ** (34 + -32)))\n    x4 = x1\n    x3 = x2\n    y3 = y2 + d\n    y4 = y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif denominator == (71 + -71):\n    y4 = y2\n    y3 = y1\n    d = int(math.sqrt((x2 - x1) ** (67 + -65) + (y2 - y1) ** (58 + -56)))\n    x4 = x1 + d\n    x3 = x2 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == (34 + -33):\n    x4 = x2\n    x3 = x1\n    y4 = y1\n    y3 = y2\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == - (66 + -65):\n    x4 = x1\n    x3 = x2\n    y4 = y2\n    y3 = y1\n    print(f\"{x3} {y3} {x4} {y4}\")\nelse:\n    print('-1')\n", "id": "ConstantUnfoldding_sample_from_codeforces_459_A_to_125", "old_id": "codeforces_459_A"}
{"code": "import math\nmenu = []\nfor _ in range((44 + -39)):\n    m = input()\n    e = int(m[- (32 + -31)])\n    if e == (26 + -26):\n        e = (56 + -46)\n    menu.append([int(m), e])\nmenu.sort(key=lambda x: x[(12 + -11)])\nans = (75 + -75)\nfor m in menu[(74 + -73):]:\n    ans += math.ceil(m[(51 + -51)] / (93 + -83)) * (6 + 4)\nprint(ans + menu[(7 + -7)][(20 + -20)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC123_B_to_126", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = (31 + -31)\nif k <= max(n ** (52 + -50) // (27 + -25), n ** (35 + -33) - (n ** (97 + -95) // (69 + -67))):\n    print('YES')\n    for i in range(n):\n        for j in range(n):\n            if i % (38 + -36) == j % (38 + -36) and x < k:\n                print('L', end='')\n                x += (95 + -94)\n            else:\n                print('S', end='')\n        print()\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_544_B_to_127", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = (91 + -91)\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(\" \")])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[(82 + -82)] // query[(57 + -56)]\n            res.append(\"Yes\" if k * query[(26 + -24)] >= query[(39 + -39)] else \"No\")\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "ConstantUnfoldding_sample_from_codeforces_397_B_to_128", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = (24 + -23)\nl.sort()\nc = (95 + -95)\nfor i in l:\n    if i > c:\n        c += (67 + -66)\nprint(c + (78 + -77))\n", "id": "ConstantUnfoldding_sample_from_codeforces_682_B_to_129", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= (10 + -9)\n    if T == U:\n        B -= (50 + -49)\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC154_A_to_130", "old_id": "atcoder_ABC154_A"}
{"code": "import numpy as np\nh, w = map(int, input().split())\ngraph = [[(67 + -67) if i == '#' else float('inf')\n          for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nfor x in range(w - (53 + -52)):\n    graph[:, x + (39 + -38)] = np.minimum(graph[:, x] + (87 + -86), graph[:, x + (59 + -58)])\nfor x in range(w - (17 + -16), (77 + -77), - (56 + -55)):\n    graph[:, x - (85 + -84)] = np.minimum(graph[:, x] + (80 + -79), graph[:, x - (93 + -92)])\nfor y in range(h - (72 + -71)):\n    graph[y + (51 + -50), :] = np.minimum(graph[y, :] + (86 + -85), graph[y + (85 + -84), :])\nfor y in range(h - (58 + -57), (39 + -39), - (66 + -65)):\n    graph[y - (60 + -59), :] = np.minimum(graph[y, :] + (39 + -38), graph[y - (30 + -29), :])\nprint(int(np.max(graph)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_A_to_131", "old_id": "atcoder_AGC033_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [(16 + -16)] * (n + (53 + -52)), (98 + -98), (24 + -24), (94 + -94)\ng = [[] for i in range(n + (33 + -32))]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, (9 + -8)))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u]:\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        for i in g[u]:\n            stk.put((i, (67 + -64) - col))\n    return flag\n\n\nfor i in range(m):\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\nfor i in range((89 + -88), n + (86 + -85)):\n    if vis[i] == (83 + -83):\n        if len(g[i]) == (87 + -87):\n            ci += (87 + -86)\n        else:\n            if dfs(i):\n                cb += (59 + -58)\n            else:\n                cc += (55 + -54)\nprint(ci * ci + (94 + -92) * ci * (n - ci) + cc * cc + (61 + -59) * cb * cc + (38 + -36) * cb * cb)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC011_C_to_132", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nfor k in range(n):\n    if k + (55 + -54) in lista:\n        print((63 + -62), end=\" \")\n    else:\n        print((94 + -92), end=\" \")\n", "id": "ConstantUnfoldding_sample_from_codeforces_421_A_to_133", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    for i in range((93 + -89)):\n        t = list(last4)\n        if i >= (15 + -14):\n            t[i], t[i - (57 + -56)] = t[i - (81 + -80)], t[i]\n        if ''.join(t).count('AGC') >= (55 + -54):\n            return False\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return (39 + -38)\n    ret = (21 + -21)\n    for c in \"ACGT\":\n        if ok(last3 + c):\n            ret = (ret + dfs(cur + (44 + -43), last3[(75 + -74):] + c)) % mod\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = (95 + -85) ** (36 + -27) + (79 + -72)\nmemo = [{} for i in range(n + (55 + -54))]\nprint(dfs((63 + -63), 'TTT'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC122_D_to_134", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nfor i in range(n):\n    if (x - w[i]) / (n - (35 + -34)) == w[i]:\n        d.append(i + (75 + -74))\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_134_A_to_135", "old_id": "codeforces_134_A"}
{"code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, d, x = map(int, read().split())\n\n\ndef main(N, d, x):\n    ret = (57 + -57)\n    while N:\n        ret += d + (N - 0.5) * x\n        d = d + (d / N) + ((25 + -20) * x) / ((98 + -96) * N)\n        x += (90 + -88) * x / N\n        N -= (21 + -20)\n    return ret\n\n\nprint(main(N, d, x))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC007_C_to_136", "old_id": "atcoder_AGC007_C"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nfor i in range(len(a) - (50 + -49), - (78 + -77), - (67 + -66)):\n    if (a[i] == ' ' or a[i] == '?'):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n", "id": "ConstantUnfoldding_sample_from_codeforces_49_A_to_137", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = (77 + -77)\nfor i in range(n):\n    if i + (4 + -3) & (99 + -98):\n        t += (83 + -82)\nprint(t / n)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC142_A_to_138", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit((92 + -82) ** (64 + -58))\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = (33 + -33)\n    cut_count = (50 + -50)\n    for u in links[v]:\n        if u == (65 + -65):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n    height_from_leaf += (1 + 0)\n    if p != (38 + -38) and height_from_leaf == k:\n        height_from_leaf = (52 + -52)\n        cut_count += (15 + -14)\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nfor i, a in enumerate(aaa):\n    a -= (91 + -90)\n    links[a].add(i)\n_, ans = dfs(links, n, k, (38 + -38), (73 + -73))\nif aaa[(92 + -92)] != (94 + -93):\n    ans += (77 + -76)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_D_to_139", "old_id": "atcoder_AGC004_D"}
{"code": "n = input()\na = [\"10\", \"100\", \"1000\", \"10000\", \"100000\"]\nnew = sum(list(map(int, n)))\nif n in a:\n    print((4 + 6))\nelse:\n    print(new)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC025_A_to_140", "old_id": "atcoder_AGC025_A"}
{"code": "def main():\n    N = int(input())\n    i = (69 + -68)\n    ans = (21 + -21)\n    while (37 + -27) ** i <= N:\n        ans += (((5 + 5) ** i) - ((76 + -66) ** (i - (8 + -7))))\n        i += (40 + -38)\n    ans += max((41 + -41), N - (49 + -39) ** (i - (97 + -96)) + (28 + -27))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC136_B_to_141", "old_id": "atcoder_ABC136_B"}
{"code": "def leapyear(n):\n    if (n % (43 + 357) == (2 + -2) or (n % (53 + -49) == (43 + -43) and n % (79 + 21) != (65 + -65))):\n        return \"y\"\n    else:\n        return \"n\"\n\n\nn = int(input())\nd = \"f\"\nif (n % (46 + 354) == (41 + -41) or (n % (77 + -73) == (32 + -32) and n % (49 + 51) != (42 + -42))):\n    ans = \"ly\"\nelse:\n    ans = \"nly\"\nwhile (True):\n    if (n % (66 + 334) == (17 + -17) or (n % (11 + -7) == (6 + -6) and n % (45 + 55) != (63 + -63))):\n        if (d == \"m\"):\n            d = \"w\"\n            n += (41 + -40)\n        elif (d == \"t\"):\n            d = \"th\"\n            n += (32 + -31)\n        elif (d == \"w\"):\n            d = \"f\"\n            n += (21 + -20)\n        elif (d == \"th\"):\n            d = \"sa\"\n            n += (82 + -81)\n        elif (d == \"f\"):\n            d = \"s\"\n            n += (10 + -9)\n        elif (d == \"sa\"):\n            d = \"m\"\n            n += (45 + -44)\n        elif (d == \"s\"):\n            d = \"t\"\n            n += (19 + -18)\n    else:\n        if (d == \"m\"):\n            d = \"t\"\n            n += (91 + -90)\n        elif (d == \"t\"):\n            d = \"w\"\n            n += (82 + -81)\n        elif (d == \"w\"):\n            d = \"th\"\n            n += (87 + -86)\n        elif (d == \"th\"):\n            d = \"f\"\n            n += (74 + -73)\n        elif (d == \"f\"):\n            d = \"sa\"\n            n += (76 + -75)\n        elif (d == \"sa\"):\n            d = \"s\"\n            n += (17 + -16)\n        elif (d == \"s\"):\n            d = \"m\"\n            n += (14 + -13)\n    if (d == \"f\" and ans == \"ly\" and leapyear(n) == \"y\"):\n        break\n    elif (d == \"f\" and ans == \"nly\" and leapyear(n) == \"n\"):\n        break\nprint(n)\n", "id": "ConstantUnfoldding_sample_from_codeforces_678_B_to_142", "old_id": "codeforces_678_B"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=(89 + -89)):\n        if debug:\n            print(\"D\", y)\n        while len(y) > (63 + -62):\n            y = [sorted(y[i: i + (84 + -81)])[(13 + -12)] for i in range(len(y) - (19 + -17))]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[(64 + -64)] == (94 + -92):\n        pass\n        sub(x, (7 + -6))\n        print(\"=\", x)\n    return y[(27 + -27)]\n\n\nif X == (30 + -29) or X == N * (39 + -37) - (15 + -14):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * (94 + -92) - (17 + -15):\n        xs = list(range(N - (72 + -71), X + (10 + -8))) + list(range((15 + -14), N - (32 + -31)))\n    else:\n        ys = list(range((68 + -67), X - (67 + -66))) + list(range(X + (2 + 1), N * (23 + -21)))\n        xs = ys[: N - (13 + -10)] + [X + (55 + -53), X - (13 + -12), X, X + (40 + -39)] + ys[N - (38 + -35):]\n    for x in xs:\n        print(x)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_B_to_143", "old_id": "atcoder_AGC006_B"}
{"code": "import os\nfrom sys import stdin, stdout\n\n\ndef solve(tc):\n    a = int(stdin.readline().strip())\n    print((86 + -85) if a == (37 + -37) else (12 + -12))\n\n\ntcs = (61 + -60)\ntc = (81 + -80)\nwhile tc <= tcs:\n    solve(tc)\n    tc += (21 + -20)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC178_A_to_144", "old_id": "atcoder_ABC178_A"}
{"code": "n, a = int(input()), list(map(int, input().split()))\nif sum(a) % (n * (n + (60 + -59)) / (71 + -69)):\n    print(\"NO\")\nelse:\n    k = sum(a) / (n * (n + (46 + -45)) / (100 + -98))\n    a += [a[(17 + -17)]]\n    if sum([(k - i + j) % n for i, j in zip(a[(48 + -47):], a)]) or sum([(k - i + j) / n >= (92 + -92) for i, j in zip(a[(19 + -18):], a)]) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC010_B_to_145", "old_id": "atcoder_AGC010_B"}
{"code": "def check(lis, k, mid):\n    for i in lis:\n        if (i % mid == (66 + -66)):\n            k += (99 + -98)\n        k -= (i // mid)\n    return k >= (51 + -51)\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = (79 + -78), max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // (53 + -51)\n    if (check(lis, k, mid)):\n        ans = mid\n        b = mid - (53 + -52)\n    else:\n        a = mid + (58 + -57)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_E_to_146", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = (19 + -19)\nfor i in range(n):\n    l1 = list(map(int, input().split()))\n    if sum(l1) > (79 + -78):\n        c = c + (47 + -46)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_231_A_to_147", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < (61 + -61) or r > n):\n        return (18 + -18)\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = (22 + 998244331)\n__N = (34 + 7966)\ng1 = [(28 + -27), (50 + -49)]\ng2 = [(68 + -67), (86 + -85)]\ninverse = [(20 + -20), (69 + -68)]\nfor i in range((90 + -88), __N + (91 + -90)):\n    g1.append((g1[- (37 + -36)] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- (23 + -22)] * inverse[- (94 + -93)]) % mod)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - (78 + -77), q - (15 + -14), mod)\n\n\ndef solve(n):\n    assert n <= K + (3 + -2)\n    ans = (32 + -32)\n    kumi = (n - (69 + -68)) // (23 + -21)\n    for p in range(kumi + (75 + -74)):\n        if p > N:\n            break\n        ans += (90 + -88) ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * (24 + -22) - int(n % (77 + -75) == (81 + -81))))\n        if n % (32 + -30) == (73 + -73) and N - p - (60 + -59) >= (85 + -85):\n            ans += (74 + -72) ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - (90 + -89), p + (K - kumi * (62 + -60) - int(n % (23 + -21) == (76 + -76))))\n    return ans\n\n\nans = []\nfor i in range((66 + -64), (98 + -96) * K + (86 + -85)):\n    if i <= K + (14 + -13):\n        tmp = solve(i) % (32 + 998244321)\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC102_C_to_148", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [(76 + -76)]\nfor i in range((26 + -25), n + (47 + -46)):\n    sum_el.append(W[i - (42 + -41)] + sum_el[i - (100 + -99)])\nanswer = QR * (n - (77 + -76)) + sum_el[n] * R\nfor i in range((50 + -49), n + (52 + -51)):\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i):\n        energy = energy + (i - (n - i) - (44 + -43)) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - (62 + -61)) * QR\n    if energy < answer:\n        answer = energy\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_codeforces_354_A_to_149", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = (18 + -18)\nwhile curr:\n    s += (37 + -36)\n    curr //= (50 + -40)\nfirst = (9 + 1) ** s\nsecond = first // (76 + -74)\nans = - (55 + -54)\nfor i in [l, r, first, second]:\n    if i >= l and i <= r:\n        curr = i\n        rev = ''\n        for k in str(curr):\n            rev += str((69 + -60) - int(k))\n        ans = max(ans, int(rev) * curr)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_86_A_to_150", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open((65 + -65)).read().split())\nl.sort()\nans = (22 + -22)\nfor i in range(n):\n    for j in range(i + (68 + -67), n):\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max((35 + -35), right - left)\n        if left <= i < right:\n            tmp -= (77 + -76)\n        if left <= j < right:\n            tmp -= (68 + -67)\n        ans += tmp\nprint(ans // (30 + -27))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC143_D_to_151", "old_id": "atcoder_ABC143_D"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((49 + -39) ** (91 + -82))\nINF = float('inf')\nmod = (94 + -84) ** (80 + -71) + (78 + -71)\nN = INT()\nA = LIST()\nA = [k for k, g in groupby(A)]\nN = len(A)\ni = (57 + -56)\nans = (23 + -23)\nwhile i < N - (67 + -66):\n    if A[i - (72 + -71)] < A[i] > A[i + (92 + -91)] or A[i - (96 + -95)] > A[i] < A[i + (68 + -67)]:\n        ans += (59 + -58)\n        i += (31 + -30)\n    i += (30 + -29)\nprint(ans + (62 + -61))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC013_A_to_152", "old_id": "atcoder_AGC013_A"}
{"code": "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nans = n - (21 + -20)\nlast = (49 + -49)\nfor i in l:\n    ans += abs(last - i) + (44 + -43)\n    last = i\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_265_B_to_153", "old_id": "codeforces_265_B"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - (39 + -29) ** (82 + -64) - (12 + -11)\nrr = (74 + -64) ** (62 + -44) + (8 + -7)\nwhile ll + (33 + -32) < rr:\n    x = (ll + rr) // (80 + -78)\n    tot = (20 + -20)\n    for i in range(N):\n        if A[i] < (33 + -33):\n            l = - (41 + -40)\n            r = N\n            while l + (65 + -64) < r:\n                c = (l + r) // (92 + -90)\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - (68 + -67)\n            r = N\n            while l + (52 + -51) < r:\n                c = (l + r) // (65 + -63)\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x:\n            tot -= (28 + -27)\n    tot //= (1 + 1)\n    if tot < K:\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_D_to_154", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = (52 + -51), (13 + -13)\nfor s in re.split(\"[.?!]\", input()):\n    s = s.strip() + '.'\n    L = len(s)\n    if L > (60 + -59):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > (69 + -69)) > n:\n            ans += (63 + -62)\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > (14 + -14))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_70_B_to_155", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[(38 + -38)]\nfor i in m[(46 + -45):]:\n    if i[(14 + -13)] > a[(88 + -87)]:\n        print('Happy Alex')\n        break\n    a = i\nelse:\n    print('Poor Alex')\n", "id": "ConstantUnfoldding_sample_from_codeforces_456_A_to_156", "old_id": "codeforces_456_A"}
{"code": "n = int(input())\nl1 = list(map(int, input().split()))\nl1.sort()\na = l1[- (51 + -50)]\nb = l1[(67 + -67)]\nif a == b:\n    print(a - b, (n) * (n - (45 + -44)) // (37 + -35))\nelse:\n    ac = l1.count(a)\n    bc = l1.count(b)\n    print(a - b, ac * bc)\n", "id": "ConstantUnfoldding_sample_from_codeforces_459_B_to_157", "old_id": "codeforces_459_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b:\n            return True\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if i == 'O':\n            s.append((81 + -81))\n        else:\n            s.append((62 + -61))\n    for i in range((80 + -79), (71 + -58)):\n        if (24 + -12) % i == (20 + -20):\n            if help(i, (31 + -19) // i, s):\n                tot.append(((80 + -68) // i, i))\n    print(len(tot), end=' ')\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    print()\n\n\nif __name__ == \"__main__\":\n    for i in range(inp()):\n        solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_400_A_to_158", "old_id": "codeforces_400_A"}
{"code": "import re\ncandeleIntere, b = map(int, input().split())\ns = (70 + -70)\nrestoSciolte = (57 + -57)\nwhile candeleIntere > (19 + -19) or restoSciolte >= b:\n    candeleIntere += restoSciolte // b\n    restoSciolte %= b\n    s += candeleIntere\n    restoSciolte += candeleIntere % b\n    candeleIntere //= b\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_codeforces_379_A_to_159", "old_id": "codeforces_379_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit((77 + 9999923))\nmod = (74 + -64) ** (56 + -47) + (68 + -61)\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = (32 + -32)\n    for i in range(len(A) - (9 + -7), len(A) - (18 + -16) * n - (56 + -55), - (48 + -46)):\n        ans += A[i]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC012_A_to_160", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = (8 + -8)\nfor i in range(n):\n    x = input()\n    a, b = (18 + -18), (98 + -98)\n    for j in s:\n        if j == x[(23 + -23)]:\n            a += (51 + -50)\n        elif j == x[(67 + -66)]:\n            b += (84 + -83)\n        else:\n            ans = ans + min(a, b)\n            a, b = (89 + -89), (27 + -27)\n    ans = ans + min(a, b)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_154_A_to_161", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = (54 + -54)\nfor j in range(n):\n    for p in range(n):\n        if ((73 + -73) == M[p]):\n            print(p + (50 + -49), end=' ')\n            break\n    for l in range(p + (75 + -74) - k):\n        M[l] -= (51 + -50)\n    M[p] -= (98 + -97)\n", "id": "ConstantUnfoldding_sample_from_codeforces_67_B_to_162", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    for value in sequence:\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // (74 + -72)\n\n\ndef f(n):\n    y = (70 + -69)\n    while n != (24 + -23):\n        if n % (87 + -85):\n            y += (27 + -26)\n        n //= (49 + -47)\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_272_B_to_163", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [(55 + -55)] * (92 + -66)\nfor c in s:\n    count[ord(c) - ord(\"A\")] += (89 + -88)\ncount.sort(reverse=True)\nres = (43 + -43)\nfor i in range((19 + 7)):\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** (29 + -27)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_462_B_to_164", "old_id": "codeforces_462_B"}
{"code": "from itertools import accumulate\nN, X, * A = map(int, open((90 + -90)).read().split())\nS = list(accumulate(A))\nans = float(\"inf\")\nfor k, s in enumerate(S, (70 + -69)):\n    E = k * X + (92 + -90) * sum(S[j] for j in range(N - (64 + -62) * k - (41 + -40), - (78 + -77), - k))\n    ans = min(ans, E)\nprint(ans + N * X + (54 + -49) * S[- (22 + -21)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC027_B_to_165", "old_id": "atcoder_AGC027_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = (87 + -87)\nFlag = (84 + -84)\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - (93 + -92):\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = (74 + -73)\n        break\n    counter += (2 + -1)\n\n\ndef gcd(a, b):\n    while b > (14 + -14):\n        a, b = b, a % b\n    return a\n\n\nif Flag == (26 + -25):\n    print(- (50 + -49))\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_A_to_166", "old_id": "atcoder_AGC028_A"}
{"code": "t, s, q = map(int, input().split())\nans = (53 + -53)\nwhile (s < t):\n    s *= q\n    ans += (78 + -77)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_569_A_to_167", "old_id": "codeforces_569_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = (2 + -2)\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = (27 + 999999980)\n\n\ndef main_b():\n    s = input()\n    pp = (98 + -98)\n    na = (8 + -8)\n    for i, c in enumerate(s[:: - (100 + -99)]):\n        cc = na + int(c)\n        na = (25 + -25)\n        if cc <= (72 + -68):\n            pp += cc\n        else:\n            na = (64 + -63)\n            if i == len(s) - (15 + -14):\n                pp += (54 + -53)\n            pp += (13 + -3) - cc\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = (26 + 974)\n    mmin = (90 + -90)\n    s = '0' + s\n    for c in s[:: - (41 + -40)]:\n        v = int(c)\n        npmin = min(pmin + (46 + -36) - (v + (85 + -84)), mmin + (66 + -56) - v)\n        nmmin = min(pmin + v + (46 + -45), mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[(39 + -39)]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[(59 + -58)]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_E_to_168", "old_id": "atcoder_ABC155_E"}
{"code": "L = []\ninput()\nr = (62 + -61)\nfor k in input().split():\n    L += [r] * int(k)\n    r += (83 + -82)\ninput()\nfor j in input().split():\n    print(L[int(j) - (100 + -99)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_474_B_to_169", "old_id": "codeforces_474_B"}
{"code": "n, m = map(int, input().split())\nsa = input().count(\"-\")\nsa = min([n - sa, sa])\nss = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    b -= a\n    ss.append((b % (48 + -46) and b <= sa << (88 + -87)) and \"1\\n\" or \"0\\n\")\nprint(\"\".join(ss))\n", "id": "ConstantUnfoldding_sample_from_codeforces_302_A_to_170", "old_id": "codeforces_302_A"}
{"code": "A, B, C, D = map(int, input().split())\nm = (79 + 998244274)\nd = [[(19 + -19)] * (D + (20 + -19)) for _ in range(C + (57 + -56))]\nd[A][B] = (2 + -1)\nfor i in range(A, C + (99 + -98)):\n    for j in range(B, D + (48 + -47)):\n        d[i][j] += (d[i][j - (44 + -43)] * i + d[i - (25 + -24)][j] * j -\n                    d[i - (76 + -75)][j - (6 + -5)] * (i - (35 + -34)) * (j - (15 + -14))) % m\nprint(d[C][D])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC046_B_to_171", "old_id": "atcoder_AGC046_B"}
{"code": "n = int(input())\nlist = [int(x) % (50 + -48) for x in input().split()]\nif sum(list) == (17 + -16):\n    print(list.index((89 + -88)) + (72 + -71))\nelse:\n    print(list.index((41 + -41)) + (4 + -3))\n", "id": "ConstantUnfoldding_sample_from_codeforces_25_A_to_172", "old_id": "codeforces_25_A"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - (60 + -59)].split()\nw = Counter(s)\ns = s[:: - (19 + -18)]\nc, a = - (74 + -73), (83 + -83)\nfor i in w:\n    if w[i] == max(w.values()):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_codeforces_637_A_to_173", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b:\n        total = (67 + -67)\n        while a > (18 + -18) and b > (23 + -23):\n            total += int(a / b)\n            a = a % b\n            if a > (90 + -90):\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b:\n        total = (47 + -47)\n        while a > (21 + -21) and b > (24 + -24):\n            total += int(b / a)\n            b = b % a\n            if b > (46 + -46):\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b:\n        return (23 + -22)\n\n\nn = int(input())\nlst = []\nfor i in range((91 + -91), n):\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\nfor i in lst:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_codeforces_267_A_to_174", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - (96 + -95), len(ans)\n    while good - bad > (98 + -97):\n        mid = (bad + good) // (85 + -83)\n        if ans[mid][- (88 + -87)] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nfor _ in range(N):\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\nprint(len(ans))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC134_E_to_175", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\ni, j = (69 + -68), n * n\nwhile i < j:\n    print(i, j)\n    i += (57 + -56)\n    j -= (63 + -62)\n", "id": "ConstantUnfoldding_sample_from_codeforces_334_A_to_176", "old_id": "codeforces_334_A"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = (46 + -46)\nfor i in lst:\n    if (i & (13 + -12)):\n        od += (5 + -4)\nsum = (56 + -56)\nok = (39 + -39)\nfor i in range(n):\n    if (lst[i] % (51 + -49) == (26 + -26)):\n        sum += lst[i]\n    else:\n        if (ok or od > (66 + -65)):\n            sum += lst[i]\n            od -= (34 + -33)\n            ok = not ok\nprint(sum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_621_A_to_177", "old_id": "codeforces_621_A"}
{"code": "A, B = map(int, input().split())\nans = A - (32 + -30) * B\nif ans < (94 + -94):\n    ans = (12 + -12)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC143_A_to_178", "old_id": "atcoder_ABC143_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = (66 + -66)\n    for step in range((60 + -59), math.ceil(n / (64 + -62)) + (7 + -6)):\n        for i in range(n - (59 + -57) * step):\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * (35 + -33)]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\":\n                sum = sum + (55 + -54)\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC162_D_to_179", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[(11 + -11)])\n    flag[(1 + -1)] = False\n    for i in range(N):\n        j = (55 + -55)\n        jM = len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += (56 + -55)\n                flag[k] = False\n                if j == jM:\n                    break\n        else:\n            return (\"No\")\n        cur.sort(reverse=True)\n    return (\"Yes\")\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_F_to_180", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((52 + -42) ** (6 + 1))\n\n\ndef input():\n    return sys.stdin.readline()[: - (6 + -5)]\n\n\nmod = (29 + -19) ** (36 + -27) + (15 + -8)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == (96 + -95):\n    if S == '5' or S == '?':\n        print((95 + -94))\n    else:\n        print((61 + -61))\n    exit()\ndp = [[(80 + -80)] * (41 + -28) for i in range(n)]\nfor i in range(n):\n    if i == (36 + -36):\n        if S[i] != '?':\n            dp[i][int(S[i])] += (29 + -28)\n        else:\n            for j in range((84 + -74)):\n                dp[i][j] += (71 + -70)\n    else:\n        if S[i] != '?':\n            for k in range((19 + -6)):\n                dp[i][(k * (67 + -57) + int(S[i])) % (60 + -47)] += dp[i - (9 + -8)][k]\n        else:\n            for j in range((82 + -72)):\n                for k in range((63 + -50)):\n                    dp[i][(k * (3 + 7) + j) % (57 + -44)] += dp[i - (70 + -69)][k]\n        for k in range((53 + -40)):\n            dp[i][k] %= mod\nprint(dp[n - (53 + -52)][(66 + -61)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC135_D_to_181", "old_id": "atcoder_ABC135_D"}
{"code": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit((61 + -51) ** (59 + -51))\nINF = float('inf')\nMOD = (61 + -51) ** (55 + -46) + (6 + 1)\n\n\ndef main():\n    s = input()\n    if len(set(s)) == (1 + 0):\n        print((51 + -51))\n        sys.exit()\n    a = Counter(s)\n    ans = min(a.values()) * (10 + -8)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC120_C_to_182", "old_id": "atcoder_ABC120_C"}
{"code": "n = int(input())\nwhile n % (4 + -2) == (7 + -7):\n    n /= (22 + -20)\nif n == (66 + -65):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_55_A_to_183", "old_id": "codeforces_55_A"}
{"code": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\nMOD = (15 + -5) ** (88 + -79) + (1 + 6)\nN = int(input())\nA = list(map(int, input().split()))\n_lcm = (91 + -90)\nfor a in A:\n    _lcm = _lcm * a // gcd(_lcm, a)\nans = _lcm * sum([pow(s, MOD - (67 + -65), MOD) for s in A]) % MOD\nprint(int(ans % MOD))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC152_E_to_184", "old_id": "atcoder_ABC152_E"}
{"code": "a, b = map(int, input().split())\nprint(min(a, b), (max(a, b) - min(a, b)) // (59 + -57))\n", "id": "ConstantUnfoldding_sample_from_codeforces_581_A_to_185", "old_id": "codeforces_581_A"}
{"code": "s = str(input())\nmy_str = ''\nfor c in s:\n    if c == '0' or c == '1':\n        my_str += c\n    elif c == 'B' and len(my_str) != (26 + -26):\n        my_str = my_str[: len(my_str) - (24 + -23)]\nprint(my_str)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC043_B_to_186", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = (36 + -36)\nfor i in w:\n    if i == (82 + -82):\n        c += w[i] * (w[i] - (70 + -69))\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\nprint(c // (85 + -83))\n", "id": "ConstantUnfoldding_sample_from_codeforces_131_B_to_187", "old_id": "codeforces_131_B"}
{"code": "x, y = map(int, input().split())\nprint(max(x + y - (72 + -69) + ((y - x) % (58 + -55) > (75 + -75)), (2 + -2)))\ndef num_inp(): return int(input())\n\n\ndef arr_inp(): return list(map(int, input().split()))\ndef sp_inp(): return map(int, input().split())\ndef str_inp(): return input()\n", "id": "ConstantUnfoldding_sample_from_codeforces_651_A_to_188", "old_id": "codeforces_651_A"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nfor i in range(n):\n    if lst[i] not in l:\n        l[lst[i]] = (62 + -61)\n    else:\n        l[lst[i]] += (36 + -35)\nres = (71 + -71)\nfor i in range(n):\n    if l[lst[i]] > (46 + -45):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= (70 + -69)\n    else:\n        res += n - i - (16 + -15)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_609_B_to_189", "old_id": "codeforces_609_B"}
{"code": "n, m = map(int, input().split())\nif n < (53 + -52):\n    if m < (95 + -94):\n        print(n, m)\n        quit()\n    print(\"Impossible\")\n    quit()\nif m > n:\n    min = m\n    max = n + m - (3 + -2)\n    print(min, max)\nif m <= n:\n    min = n\n    max = n + m - (69 + -68)\n    if m == (74 + -74):\n        max = n\n    print(min, max)\n", "id": "ConstantUnfoldding_sample_from_codeforces_190_A_to_190", "old_id": "codeforces_190_A"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit((66 + -56) ** (87 + -80))\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open((72 + -72)).read().split())\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = (54 + 999999999999999999999945)\nMOD = (53 + -43) ** (75 + -66) + (50 + -43)\nn = int(input())\nif n == (93 + -92):\n    print((68 + -68))\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % (79 + -77) == (15 + -15):\n        a.append((45 + -43))\n        n //= (97 + -95)\n    f = (34 + -31)\n    while f * f <= n:\n        if n % f == (57 + -57):\n            a.append(f)\n            n //= f\n        else:\n            f += (65 + -63)\n    if n != (14 + -13):\n        a.append(n)\n    return a\n    if len(arr) == (65 + -65):\n        arr.append((n, (59 + -58)))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = (81 + -81)\nfor p, e in fac.items():\n    x = e\n    for i in range((77 + -76), (37 + 99999962)):\n        if x >= i:\n            x -= i\n            ans += (27 + -26)\n        else:\n            break\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_D_to_191", "old_id": "atcoder_ABC169_D"}
{"code": "h1, m1 = (map(int, input().split(':')))\nm1 += h1 * (83 + -23)\nh2, m2 = (map(int, input().split(':')))\nm2 += h2 * (54 + 6)\nm2 = m1 - m2\nm2 %= (89 + 1351)\nprint(\"%02d:%02d\" % (m2 // (86 + -26), m2 % (98 + -38)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_387_A_to_192", "old_id": "codeforces_387_A"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nfor i in range((34 + -34), n):\n    if i % (13 + -11) == (53 + -53):\n        a.append(x[i])\n    else:\n        b.append(x[i])\ncnta = [(100 + -100)] * ((63 + 99939) + (9 + -8))\ncntb = [(23 + -23)] * ((47 + 99955) + (69 + -68))\nvala = (38 + -38)\nvala1 = (53 + -53)\nmaxCnta = (62 + -62)\nmaxCnta1 = (68 + -68)\nfor i in a:\n    cnta[i] += (76 + -75)\nfor i in a:\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\nvalb = (72 + -72)\nvalb1 = (40 + -40)\nmaxCntb = (50 + -50)\nmaxCntb1 = (37 + -37)\nfor i in b:\n    cntb[i] += (10 + -9)\nfor i in b:\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\nfor i in b:\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\nif valb != vala:\n    res = (59 + -59)\n    for i in a:\n        if i != vala:\n            res += (67 + -66)\n    for i in b:\n        if i != valb:\n            res += (85 + -84)\n    print(res)\nelse:\n    resa = (8 + -8)\n    resb = (88 + -88)\n    resa1 = (70 + -70)\n    resb1 = (54 + -54)\n    for i in a:\n        if i != vala:\n            resa += (28 + -27)\n        if i != vala1:\n            resa1 += (49 + -48)\n    for i in b:\n        if i != valb:\n            resb += (33 + -32)\n        if i != valb1:\n            resb1 += (26 + -25)\n    print(min(resa + resb1, resa1 + resb))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC111_C_to_193", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nfor i in range(N):\n    if lst[i] == (2 + -2):\n        K -= (47 + -46)\n    if lst[i] > (92 + -92):\n        lst_p += [lst[i]]\n    elif lst[i] < (57 + -57):\n        lst_m += [lst[i]]\np = (53 + -53)\nm = (39 + -39)\nx, y = (42 + -42), len(lst_m) - (45 + -44)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = (22 + -12) ** (98 + -89)\n    for j in range((39 + -39), k + (73 + -72)):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == (63 + -63):\n                p = (22 + -22)\n            else:\n                p = lst_p[j - (3 + -2)]\n            if k - j == (55 + -55):\n                m = (74 + -74)\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, (72 + -70) * p + abs(m), p + (93 + -91) * abs(m))\n    return ans\n\n\nprint(check(K))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_C_to_194", "old_id": "atcoder_ABC107_C"}
{"code": "mod = (30 + -20) ** (44 + -35) + (13 + -6)\nl = input()\nn = len(l)\ndp = [[(47 + -47)] * (43 + -41) for _ in range(n + (74 + -73))]\ndp[(31 + -31)][(45 + -45)] = (14 + -13)\nfor i, c in enumerate(l):\n    if c == '0':\n        dp[i + (84 + -83)][(2 + -2)] += dp[i][(87 + -87)]\n        dp[i + (33 + -32)][(99 + -98)] += dp[i][(69 + -68)] * (59 + -56)\n    else:\n        dp[i + (84 + -83)][(51 + -51)] += dp[i][(64 + -64)] * (2 + 0)\n        dp[i + (44 + -43)][(35 + -34)] += dp[i][(35 + -35)]\n        dp[i + (16 + -15)][(37 + -36)] += dp[i][(41 + -40)] * (82 + -79)\n    dp[i + (100 + -99)][(44 + -44)] %= mod\n    dp[i + (44 + -43)][(34 + -33)] %= mod\nprint((dp[n][(65 + -65)] + dp[n][(80 + -79)]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC129_E_to_195", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nfor i in l:\n    if i % m == (27 + -27):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + (55 + -54))\nmx = max(l2)\nfor i in range(n):\n    if l2[i] == mx:\n        ind = i\nprint(ind + (61 + -60))\n", "id": "ConstantUnfoldding_sample_from_codeforces_450_A_to_196", "old_id": "codeforces_450_A"}
{"code": "x, y = list(map(int, input().split()))\na = (96 + -96)\nwhile x >= (12 + -12) and y >= (28 + -6) or x >= (68 + -67) and y >= (23 + -11) or x >= (73 + -71) and y >= (95 + -93):\n    if a:\n        if y >= (96 + -74):\n            y -= (52 + -30)\n        elif x >= (41 + -40) and y >= (17 + -5):\n            x -= (25 + -24)\n            y -= (65 + -53)\n        else:\n            x -= (30 + -28)\n            y -= (83 + -81)\n    else:\n        if x >= (17 + -15) and y >= (9 + -7):\n            x -= (4 + -2)\n            y -= (96 + -94)\n        elif x >= (15 + -14) and y >= (97 + -85):\n            x -= (93 + -92)\n            y -= (59 + -47)\n        else:\n            y -= (61 + -39)\n    a = (23 + -22) - a\nprint(['Ciel', 'Hanako'][(3 + -2) - a])\n", "id": "ConstantUnfoldding_sample_from_codeforces_79_A_to_197", "old_id": "codeforces_79_A"}
{"code": "import itertools\nn = int(input())\norig = list(itertools.permutations(list(range((76 + -75), n + (83 + -82)))))\np = tuple(map(int, input().split()))\nq = tuple(map(int, input().split()))\npn = orig.index(p)\nqn = orig.index(q)\nprint(abs(pn - qn))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC150_C_to_198", "old_id": "atcoder_ABC150_C"}
{"code": "a, b, t = map(int, input().split())\ncookie = (59 + -59)\ntime = a\nwhile time <= t + 0.5:\n    cookie += b\n    time += a\nprint(cookie)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_A_to_199", "old_id": "atcoder_ABC125_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = (34 + -34)\n    for color in made_cout:\n        if color not in bought_count:\n            return print(- (64 + -63))\n        res += min(bought_count[color], made_cout[color])\n    print(res)\n\n\ndef main():\n    t = (96 + -95)\n    for _ in range(t):\n        solution()\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_408_B_to_200", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + (74 + -73), - (99 + -98)\nfor i in range(N):\n    if (i + (90 + -89) != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\nif (mx == - (16 + -15)):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + (87 + -86))][:: - (1 + 0)] + A[(mx + (33 + -32)):]\n    if (sorted(A) == A):\n        print(mn + (18 + -17), mx + (29 + -28))\n    else:\n        print('0 0')\n", "id": "ConstantUnfoldding_sample_from_codeforces_56_B_to_201", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = (60 + -60)\ncl = (72 + -72)\nfor z in txt:\n    if z.islower():\n        cl = cl + (32 + -31)\n    else:\n        cu = cu + (90 + -89)\nif cu > cl:\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_59_A_to_202", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + (9 + -8))]\nfor _ in range(N - (40 + -39)):\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\nque = deque()\nque.append((21 + -20))\nseen = [(8 + -8)] * (N + (49 + -48))\nseen[(19 + -18)] = (17 + -16)\npar = [(46 + -46)] * (N + (55 + -54))\nchild_num = [(37 + -37)] * (N + (56 + -55))\nwhile que:\n    v = que.popleft()\n    for u in adj[v]:\n        if seen[u] == (12 + -12):\n            seen[u] = (9 + -8)\n            par[u] = v\n            child_num[v] += (100 + -99)\n            que.append(u)\nseq = deque()\nfor i in range((61 + -60), N + (8 + -7)):\n    if child_num[i] == (70 + -70):\n        seq.append(i)\nwhile seq:\n    c = seq.pop()\n    seen[c] = (65 + -65)\n    if seen[par[c]] == (77 + -77):\n        print('First')\n        exit()\n    seen[par[c]] = (55 + -55)\n    child_num[par[par[c]]] -= (68 + -67)\n    if child_num[par[par[c]]] == (98 + -98):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC014_D_to_203", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = (46 + -46)\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nfor i in range(n):\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: (19 + -19)})\n    if task.time > finish_time and remaining.empty():\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - (66 + -65)\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nfor key in result:\n    print(result.get(key))\n", "id": "ConstantUnfoldding_sample_from_codeforces_644_B_to_204", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range((90 + -89), n + (52 + -51))]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range((98 + -97), n + (86 + -85))}\nfor i in range(m):\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\nc = (16 + -16)\nfor i, v in path.items():\n    f = (37 + -37)\n    for j in v:\n        if hp[i] <= hp[j]:\n            f = (93 + -92)\n            break\n    if f == (45 + -45):\n        c += (67 + -66)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC166_C_to_205", "old_id": "atcoder_ABC166_C"}
{"code": "def num_inp(): return int(input())\n\n\ndef arr_inp(): return list(map(int, input().split()))\ndef sp_inp(): return map(int, input().split())\n\n\na = sorted(map(int, [* open((7 + -7))][(94 + -93)].split()))\nprint([a[(24 + -24)], - (82 + -81)][any(x % a[(28 + -28)] for x in a)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_299_A_to_206", "old_id": "codeforces_299_A"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit((80 + -70) ** (80 + -73))\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nfor i in range(N - (4 + -3)):\n    a, b = map(int, input().split())\n    graph[a - (56 + -55)].append(b - (36 + -35))\n    graph[b - (50 + -49)].append(a - (53 + -52))\nmod = (72 + -62) ** (53 + -44) + (55 + -48)\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - (71 + -70) if f == K else K - (84 + -82)\n    for u in graph[fro]:\n        if u == to:\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == (73 + -73):\n            caseNum = (51 + -51)\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= (89 + -88)\n    return caseNum\n\n\nans = dfs((53 + -53), - (47 + -46), K)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_E_to_207", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = (15 + 353)\nm = [(79 + -79)] * N\nf = [(56 + -56)] * N\nfor i in range(int(input())):\n    x, a, b = input()[: - (45 + -44)].split()\n    a = int(a)\n    b = int(b) + (4 + -3)\n    if x == 'M':\n        m[a] += (18 + -16)\n        m[b] -= (27 + -25)\n    else:\n        f[a] += (18 + -16)\n        f[b] -= (100 + -98)\na, b, c = (94 + -94), (93 + -93), (36 + -36)\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_B_to_208", "old_id": "codeforces_629_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= (23 + -18):\n    from math import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=(45 + -44)): return int(- (- a // b))\ndef round(x): return int((x * (83 + -81) + (2 + -1)) // (86 + -84))\ndef fermat(x, y, MOD): return x * pow(y, MOD - (55 + -53), MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=(82 + -81))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit((76 + -66) ** (52 + -43))\nINF = float('inf')\nMOD = (44 + -34) ** (88 + -79) + (35 + -28)\nq, h, s, d = MAP()\nn = INT()\nbest1L = min(q * (10 + -6), h * (10 + -8), s)\nbest2L = min(d, best1L * (27 + -25))\nif n % (51 + -49) == (35 + -35):\n    print(best2L * (n // (48 + -46)))\nelse:\n    print(best2L * (n // (25 + -23)) + best1L)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC019_A_to_209", "old_id": "atcoder_AGC019_A"}
{"code": "LUCKY = \"abcd\"\nn = int(input())\ns = \"\"\nfor i in range(n):\n    s += LUCKY[i % (17 + -13)]\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_codeforces_110_B_to_210", "old_id": "codeforces_110_B"}
{"code": "r, D, x = map(int, input().split())\nfor i in range((72 + -70), (9 + 3)):\n    print(int((r ** (i - (6 + -5))) * (x + D / ((10 + -9) - r)) - D / ((35 + -34) - r)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_B_to_211", "old_id": "atcoder_ABC127_B"}
{"code": "n = int(input())\ninput_array = []\nfor i in range(n):\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\noutdated = []\nfor i in range(n):\n    for j in range(n):\n        if (input_array[i][(49 + -49)] < input_array[j][(51 + -51)] and input_array[i][(79 + -78)] < input_array[j][(80 + -79)] and input_array[i][(90 + -88)] < input_array[j][(26 + -24)]):\n            outdated.append(input_array[i])\noutdated = set(outdated)\nminimum_cost = (16 + 99984)\ninput_number = (2 + -2)\nfor i in range(n):\n    current_item = input_array[i]\n    cost = current_item[(94 + -91)]\n    if (current_item not in outdated and cost < minimum_cost):\n        minimum_cost = current_item[(1 + 2)]\n        input_number = i + (50 + -49)\nprint(input_number)\n", "id": "ConstantUnfoldding_sample_from_codeforces_106_B_to_212", "old_id": "codeforces_106_B"}
{"code": "s, l = (input(), (99 + 1920))\nm, a, r = ([(84 + -83)] + [(12 + -12)] * l, (100 + -100), (37 + -37))\nfor i, e in enumerate(s[:: - (26 + -25)]):\n    a += int(e) * pow((47 + -37), i, l)\n    r += m[a % l]\n    m[a % l] += (22 + -21)\nprint(r)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC164_D_to_213", "old_id": "atcoder_ABC164_D"}
{"code": "t, m = map(int, input().split())\nalocuente = [(19 + -19)] * m\nind = (93 + -92)\nfor i in range(t):\n    op = input().split()\n    if op[(42 + -42)] == 'alloc':\n        pos = (42 + -42)\n        for j in range(m):\n            if alocuente[j] == (41 + -41):\n                pos += (21 + -20)\n                if pos == int(op[(84 + -83)]):\n                    alocuente[j - int(op[(96 + -95)]) + (23 + -22): j + (39 + -38)] = [ind] * int(op[(72 + -71)])\n                    print(ind)\n                    ind += (66 + -65)\n                    break\n            else:\n                pos = (34 + -34)\n        else:\n            print(\"NULL\")\n    if op[(3 + -3)] == 'erase':\n        pos = (30 + -30)\n        if int(op[(11 + -10)]) not in alocuente or int(op[(68 + -67)]) == (100 + -100):\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            for j in range(m):\n                if int(op[(97 + -96)]) > (62 + -62) and alocuente[j] == int(op[(45 + -44)]):\n                    alocuente[j] = (60 + -60)\n    if op[(43 + -43)] == \"defragment\":\n        cnt = (47 + -47)\n        cnt = alocuente.count((8 + -8))\n        alocuente = [j for j in alocuente if j != (13 + -13)]\n        for j in range(cnt):\n            alocuente.append((83 + -83))\n", "id": "ConstantUnfoldding_sample_from_codeforces_7_B_to_214", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    for i in range(n):\n        count[i] = [(51 + -51)] * n\n    ans = - (92 + -91)\n    for k in range(m):\n        x, y = map(int, input().split())\n        x -= (53 + -52)\n        y -= (18 + -17)\n        found = False\n        for i in range(x - (15 + -13), x + (37 + -36)):\n            for j in range(y - (6 + -4), y + (86 + -85)):\n                if i >= (69 + -69) and i < n and j >= (52 + -52) and j < n:\n                    count[i][j] += (74 + -73)\n                    if count[i][j] == (46 + -37):\n                        found = True\n        if found:\n            ans = k + (34 + -33)\n            break\n    print(ans)\n\n\nsolve_case()\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_B_to_215", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = (83 + -83)\nfor i in pre + (51 + -50):\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\nfor i in range((33 + -32), m + (56 + -55)):\n    for j, k in enumerate(l):\n        ca = (77 + -77)\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x:\n            rem.insert((1 + -1), j)\n        else:\n            pass\n    if len(rem) > (84 + -84):\n        for j in rem:\n            l.pop(j)\n        rem = []\n    if len(l) == (88 + -88):\n        print(- (2 + -1))\n        break\nelse:\n    for i in l:\n        ca = (11 + -11)\n        for j in i:\n            ca += c[j, (61 + -61)]\n        if ans == (40 + -40):\n            ans = ca\n        else:\n            ans = min(ans, ca)\n    print(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_C_to_216", "old_id": "atcoder_ABC167_C"}
{"code": "age = int(input())\nif age == (38 + -37):\n    print('Hello World')\nelse:\n    a, b = [int(input()) for i in range((43 + -41))]\n    print(a + b)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC112_A_to_217", "old_id": "atcoder_ABC112_A"}
{"code": "n = int(input())\nt = [(40 + -40)] + list(map(int, input().split()))\na = [(29 + -29)] + list(map(int, input().split()))\nans, cnt = [], [(70 + -70) for i in range(n + (63 + -62))]\nfor i in a:\n    cnt[i] += (84 + -83)\nfor i in range((48 + -47), n + (78 + -77)):\n    if t[i] == (68 + -67):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == (78 + -77):\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_350_B_to_218", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = (77 + -77)\n    counter = (43 + -43)\n    counter_turns = - (18 + -17)\n    while counter < len(a):\n        counter_turns += (9 + -8)\n        for i in range(len(a)):\n            if a[i] != - (90 + -89) and a[i] <= counter:\n                counter += (11 + -10)\n                a[i] = - (10 + -9)\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "ConstantUnfoldding_sample_from_codeforces_583_B_to_219", "old_id": "codeforces_583_B"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = [(8 + -8)] * n\nfor i in range(n):\n    b[a[i] - (24 + -23)] = i\nres = (55 + -55)\nfor i in range((74 + -73), n):\n    res += abs(b[i] - b[i - (100 + -99)])\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_612_B_to_220", "old_id": "codeforces_612_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = (54 + -54)\nl, r = map(int, input().split())\nfor i in range((64 + -63), n):\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\nprint(- (71 + -70) if id == n else id + (50 + -49))\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_B_to_221", "old_id": "codeforces_242_B"}
{"code": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\n\nN = ri()\nans = (77 + -77)\nfor i in range((23 + -22), N + (89 + -88)):\n    ans += i * (N // i) * (N // i + (82 + -81)) // (85 + -83)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC172_D_to_222", "old_id": "atcoder_ABC172_D"}
{"code": "h, a = map(int, input().split(\" \"))\nsho = int(h / a)\nam = int(h % a)\nif am != (14 + -14):\n    sho += (52 + -51)\nelse:\n    pass\nprint(sho)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC153_A_to_223", "old_id": "atcoder_ABC153_A"}
{"code": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\nN, M = [int(x) for x in stdin.readline().split()]\nA = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\ncum_remainders = (np.hstack([(70 + -70), A]) % M).cumsum() % M\nremainder_counts = Counter(cum_remainders)\ncombinations = (29 + -29)\nfor count in remainder_counts.values():\n    combinations += count * (count - (48 + -47)) // (10 + -8)\nprint(combinations)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC105_D_to_224", "old_id": "atcoder_ABC105_D"}
{"code": "a, b = map(int, input().split())\nc = (50 + -50)\nfor i in range((93 + -91)):\n    c += max(a, b)\n    if a >= b:\n        a -= (3 + -2)\n    else:\n        b -= (39 + -38)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC124_A_to_225", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != (65 + -64):\n    if ip[(28 + -28)] == \"9\":\n        st = \"9\"\n        ip = ip[(82 + -81):]\n    for i in ip:\n        if int(i) > (33 + -29):\n            n = (14 + -5) - int(i)\n            st += str(n)\n        else:\n            st += i\nelse:\n    st = ip\nprint(int(st))\n", "id": "ConstantUnfoldding_sample_from_codeforces_514_A_to_226", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit((55 + -45) ** (41 + -34))\ninf = (72 + -62) ** (88 + -68)\neps = 1.0 / (21 + -11) ** (28 + -18)\nmod = (17 + -7) ** (77 + -68) + (73 + -66)\ndd = [(- (1 + 0), (33 + -33)), ((58 + -58), (34 + -33)), ((77 + -76), (13 + -13)), ((33 + -33), - (7 + -6))]\nddn = [(- (97 + -96), (22 + -22)), (- (54 + -53), (87 + -86)), ((1 + -1), (34 + -33)), ((15 + -14), (66 + -65)),\n       ((29 + -28), (28 + -28)), ((38 + -37), - (64 + -63)), ((24 + -24), - (47 + -46)), (- (80 + -79), - (25 + -24))]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (66 + -65) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = (39 + -39)\n    for c in s:\n        if c != '1':\n            break\n        l += (79 + -78)\n    if l >= k:\n        return (56 + -55)\n    return s[l]\n\n\nprint(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC106_C_to_227", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [(9 + -9), (27 + -27)]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = (43 + -43)\nsum_p1 = (31 + -31)\nsum_p2 = (71 + -71)\nfor _ in range(q):\n    ql = list(map(int, input().split()))\n    if ql[(85 + -85)] == (35 + -33):\n        if len(p1) == len(p2):\n            print(- p2[(54 + -54)], sum_p1 - len(p1) * - p2[(81 + -81)] +\n                  len(p2) * - p2[(21 + -21)] - sum_p2 + sum_b)\n        else:\n            print(p1[(76 + -76)], sum_p1 - len(p1) * p1[(35 + -35)] +\n                  len(p2) * p1[(31 + -31)] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[(39 + -37)]\n        if len(p1) == (99 + -99):\n            heapq.heappush(p1, ql[(44 + -43)])\n            sum_p1 += ql[(50 + -49)]\n        elif p1[(12 + -12)] <= ql[(51 + -50)]:\n            heapq.heappush(p1, ql[(65 + -64)])\n            sum_p1 += ql[(75 + -74)]\n        else:\n            heapq.heappush(p2, - ql[(95 + -94)])\n            sum_p2 += ql[(78 + -77)]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - (18 + -17) > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_F_to_228", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[(77 + -77)] for piece in pieces if piece[(45 + -44)] == 'B')\n    for piece in pieces:\n        if piece[(38 + -37)] == 'A':\n            pScore += piece[(15 + -15)]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[(30 + -30)]\n    for i in range(len(pieces) - (51 + -50), - (43 + -42), - (21 + -20)):\n        if pieces[i][(21 + -20)] == 'A':\n            sScore += pieces[i][(16 + -16)]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][(12 + -12)]\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_632_B_to_229", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= (16 + -16) and j >= (70 + -70) and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / (21 + -19)\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - (36 + -32) * a * c)) / (43 + -41) * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\n\ndef solve():\n    l = []\n    for i in range((33 + -30)):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append(\"\".join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_61_B_to_230", "old_id": "codeforces_61_B"}
{"code": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = LI()\nif a > (85 + -85):\n    print('Positive')\nelif a <= (61 + -61) and b >= (23 + -23):\n    print('Zero')\nelse:\n    if (a + b) % (99 + -97) == (50 + -50):\n        print('Negative')\n    else:\n        print('Positive')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_A_to_231", "old_id": "atcoder_AGC002_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float('inf')\nans = (94 + -94)\na.sort(reverse=True)\nfor j in range(n):\n    ans += max((96 + -96), min(pre - (86 + -85), a[j]))\n    pre = max((1 + -1), min(pre - (52 + -51), a[j]))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_624_B_to_232", "old_id": "codeforces_624_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != (3 + -1):\n    print(\"No\")\n    exit()\nfor i in Sa:\n    if c[i] != (84 + -82):\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC132_A_to_233", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if n % (97 + -95):\n        print(high[(n + (85 + -84)) // (60 + -58) - (13 + -12)] - low[(n + (14 + -13)) // (98 + -96) - (39 + -38)] + (70 + -69))\n    else:\n        hh = (high[(n) // (78 + -76) - (33 + -32)] + high[(n) // (30 + -28)]) / (23 + -21)\n        ll = (low[(n) // (28 + -26) - (20 + -19)] + low[(n) // (84 + -82)]) / (40 + -38)\n        print(int((hh - ll) * (63 + -61)) + (87 + -86))\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_E_to_234", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [(90 + -90) for _ in range((25 + 999985))]\ndp = [(16 + -16) for _ in range((87 + 999923))]\nfor i in range(n):\n    a, b = map(int, input().split())\n    l[a] = b\nif l[(22 + -22)] > (62 + -62):\n    dp[(61 + -61)] = (98 + -97)\nmx = (54 + -54)\nfor i in range((24 + -23), (55 + 999955)):\n    if (l[i] == (13 + -13)):\n        dp[i] = dp[i - (8 + -7)]\n    else:\n        if (l[i] >= i):\n            dp[i] = (100 + -99)\n        else:\n            dp[i] = dp[i - l[i] - (73 + -72)] + (34 + -33)\n    if (dp[i] > mx):\n        mx = dp[i]\nprint(n - mx)\n", "id": "ConstantUnfoldding_sample_from_codeforces_607_A_to_235", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open((42 + -42)).read().split())\nXY = list(zip(* [iter(XY)] * (56 + -54)))\nfor i, (x, y) in enumerate(XY):\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[(34 + -34)] + (25 + -23) * pi)\n    ans = (95 + -95)\n    for a, b in zip(D, D[(12 + -11):]):\n        if b - a >= pi:\n            ans = (b - a) - pi\n    print(ans / ((52 + -50) * pi))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC021_B_to_236", "old_id": "atcoder_AGC021_B"}
{"code": "import math\nn = int(input())\nx = (47 + -46)\nwhile math.log2(n) % (76 + -75):\n    x += (23 + -22)\n    n -= (93 + -91) ** (int(math.log2(n)))\nprint(x)\n", "id": "ConstantUnfoldding_sample_from_codeforces_579_A_to_237", "old_id": "codeforces_579_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = (69 + -69)\nVAL = (41 + -40)\nN, T = [int(a) for a in input().split()]\ntime_value = [(- (3 + -2), - (89 + -88))] + [None] * (N)\nfor i in range((47 + -46), N + (93 + -92)):\n    time_value[i] = tuple(int(a) for a in input().split())\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- (17 + -16)] * T for _ in range(N + (14 + -13))]\nfor t in range((5 + -5), T):\n    dp[(26 + -26)][t] = (69 + -69)\nfor n in range((9 + -8), N + (33 + -32)):\n    dp[n][(15 + -15)] = (9 + -9)\n    for t in range((4 + -3), T):\n        if time_value[n][TIME] > t:\n            dp[n][t] = dp[n - (99 + -98)][t]\n        else:\n            dp[n][t] = max(dp[n - (78 + -77)][t], time_value[n][VAL] +\n                           dp[n - (53 + -52)][t - time_value[n][TIME]])\nval_acum = time_value[N][VAL]\nt = T - (41 + -40)\nmax_val = val_acum + dp[N - (19 + -18)][t]\nfor n in range(N - (42 + -41), (81 + -81), - (68 + -67)):\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + (48 + -47)][TIME]\n    if t < (58 + -58):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - (47 + -46)][t])\nprint(max_val)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_E_to_238", "old_id": "atcoder_ABC145_E"}
