{"code": "n = int(input())\nidx_dkhg = 0\nlist_jgab = range(n)\nwhile idx_dkhg < len(list_jgab):\n    i = list_jgab[idx_dkhg]\n    a = int(input())\n    if a < 2:\n        print(0)\n    if a >= 2:\n        print(a - 2)\n    idx_dkhg = idx_dkhg + 1\n", "id": "For2While_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nidx_6edp = 0\nlist_xehp = range(1, N)\nwhile idx_6edp < len(list_xehp):\n    i = list_xehp[idx_6edp]\n    if n[pos] > n[i]:\n        a += 1\n        pos = i\n    idx_6edp = idx_6edp + 1\nprint(a)\n", "id": "For2While_sample_from_atcoder_ABC152_C_to_1", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nidx_pivz = 0\nlist_b6s7 = list(enumerate(a))\nwhile idx_pivz < len(list_b6s7):\n    e, i = list_b6s7[idx_pivz]\n    if i == 0:\n        print(e + 1)\n        break\n    idx_pivz = idx_pivz + 1\n", "id": "For2While_sample_from_atcoder_ABC170_A_to_2", "old_id": "atcoder_ABC170_A"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_hneg = 0\nlist_g7p5 = range(len(s))\nwhile idx_hneg < len(list_g7p5):\n    i = list_g7p5[idx_hneg]\n    if i >= 1:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_hneg = idx_hneg + 1\nprint(''.join(res))\n", "id": "For2While_sample_from_codeforces_147_A_to_3", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nidx_n6p2 = 0\nlist_kqjm = s\nwhile idx_n6p2 < len(list_kqjm):\n    letra = list_kqjm[idx_n6p2]\n    if letra in freqs:\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 1\n    idx_n6p2 = idx_n6p2 + 1\nidx_tfgk = 0\nlist_e8ih = t\nwhile idx_tfgk < len(list_e8ih):\n    letra = list_e8ih[idx_tfgk]\n    if letra in freqt:\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 1\n    idx_tfgk = idx_tfgk + 1\nidx_x62z = 0\nlist_8fhb = freqs.keys()\nwhile idx_x62z < len(list_8fhb):\n    letra = list_8fhb[idx_x62z]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    idx_x62z = idx_x62z + 1\nidx_v3bf = 0\nlist_uw87 = freqs.keys()\nwhile idx_v3bf < len(list_uw87):\n    letra = list_uw87[idx_v3bf]\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\n    idx_v3bf = idx_v3bf + 1\nprint(yay, whoops)\n", "id": "For2While_sample_from_codeforces_518_B_to_4", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = 1\n    idx_ylkg = 0\n    list_8osq = range(K)\n    while idx_ylkg < len(list_8osq):\n        i = list_8osq[idx_ylkg]\n        a *= N - i\n        idx_ylkg = idx_ylkg + 1\n    idx_rhn0 = 0\n    list_vqaf = range(K)\n    while idx_rhn0 < len(list_vqaf):\n        j = list_vqaf[idx_rhn0]\n        a /= j + 1\n        idx_rhn0 = idx_rhn0 + 1\n    return a\n\n\nans = 0\nlis = list(map(int, input().split()))\nls = []\nidx_urdz = 0\nlist_26cj = lis\nwhile idx_urdz < len(list_26cj):\n    a = list_26cj[idx_urdz]\n    ls.append(a % 2)\n    idx_urdz = idx_urdz + 1\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nidx_unk7 = 0\nlist_e9wb = range(zero + 1)\nwhile idx_unk7 < len(list_e9wb):\n    j = list_e9wb[idx_unk7]\n    pattern_b += combi(zero, j)\n    idx_unk7 = idx_unk7 + 1\ntime = 0\nwhile time <= one:\n    if time % 2 == P:\n        pattern_a += combi(one, time)\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "id": "For2While_sample_from_atcoder_AGC017_A_to_5", "old_id": "atcoder_AGC017_A"}
{"code": "import numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = 0\nidx_s2zb = 0\nlist_w17p = range(60)\nwhile idx_s2zb < len(list_w17p):\n    b = list_w17p[idx_s2zb]\n    bs = int(((A >> b) & 1).sum())\n    result = (result + bs * (N - bs) * (1 << b)) % 1000000007\n    idx_s2zb = idx_s2zb + 1\nprint(result)\n", "id": "For2While_sample_from_atcoder_ABC147_D_to_6", "old_id": "atcoder_ABC147_D"}
{"code": "mod = 10 ** 9 + 7\nn, k = map(int, input().split())\ncoef = []\nidx_gqxj = 0\nlist_q5g9 = range(1, int(n ** 0.5) + 1)\nwhile idx_gqxj < len(list_q5g9):\n    i = list_q5g9[idx_gqxj]\n    coef.append((n // i) - (n // (i + 1)))\n    idx_gqxj = idx_gqxj + 1\ncoef += [1] * (n - sum(coef))\ncoef = coef[:: - 1]\nnn = len(coef)\ndp = [[0] * nn for _ in range(k + 1)]\ndp[0][0] = 1\nidx_x5pt = 0\nlist_2qn3 = range(1, k + 1)\nwhile idx_x5pt < len(list_2qn3):\n    i = list_2qn3[idx_x5pt]\n    tmp = 0\n    idx_86wo = 0\n    list_yrfs = range(nn - 1, - 1, - 1)\n    while idx_86wo < len(list_yrfs):\n        j = list_yrfs[idx_86wo]\n        tmp += dp[i - 1][(nn - 1) - j]\n        tmp %= mod\n        dp[i][j] = coef[j] * tmp\n        dp[i][j] %= mod\n        idx_86wo = idx_86wo + 1\n    idx_x5pt = idx_x5pt + 1\nprint(sum(dp[k]) % mod)\n", "id": "For2While_sample_from_atcoder_ABC132_F_to_7", "old_id": "atcoder_ABC132_F"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nidx_497w = 0\nlist_rw1y = record_of_movements\nwhile idx_497w < len(list_rw1y):\n    move = list_rw1y[idx_497w]\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d:\n        idx_1fe6 = 0\n        list_mf4d = d_movement\n        while idx_1fe6 < len(list_mf4d):\n            step = list_mf4d[idx_1fe6]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_1fe6 = idx_1fe6 + 1\n    else:\n        bug = True\n    if bug:\n        break\n    d[x, y] = ''\n    idx_497w = idx_497w + 1\nif bug:\n    print('BUG')\nelse:\n    print('OK')\n", "id": "For2While_sample_from_codeforces_8_B_to_8", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nidx_wqgk = 0\nlist_0c31 = l\nwhile idx_wqgk < len(list_0c31):\n    i = list_0c31[idx_wqgk]\n    if i + 1 in l and i + 2 in l:\n        print('YES')\n        break\n    idx_wqgk = idx_wqgk + 1\n", "id": "For2While_sample_from_codeforces_653_A_to_9", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0:\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    idx_f6zd = 0\n    list_rmf1 = range(a_time + 1)\n    while idx_f6zd < len(list_rmf1):\n        i = list_rmf1[idx_f6zd]\n        idx_0hiz = 0\n        list_pqrz = range(b_time + 1)\n        while idx_0hiz < len(list_pqrz):\n            j = list_pqrz[idx_0hiz]\n            if a - da * i == x or b - db * j == x:\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x:\n                print(\"YES\")\n                return \"Result Found\"\n            idx_0hiz = idx_0hiz + 1\n        idx_f6zd = idx_f6zd + 1\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\":\n    print(\"NO\")\n", "id": "For2While_sample_from_codeforces_203_A_to_10", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15:\n    aaaa = True\nelif 2 ** K >= N:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_8vn3 = 0\n    list_gn3u = range(N)\n    while idx_8vn3 < len(list_gn3u):\n        i = list_gn3u[idx_8vn3]\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_8vn3 = idx_8vn3 + 1\n    return False\n\n\nS = get_last_dict(S)\nif K == 1:\n    print(S)\nelse:\n    count = 0\n    idx_pf97 = 0\n    list_rzem = S\n    while idx_pf97 < len(list_rzem):\n        c = list_rzem[idx_pf97]\n        if c == S[0]:\n            count += 1\n        else:\n            break\n        idx_pf97 = idx_pf97 + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n", "id": "For2While_sample_from_atcoder_AGC037_E_to_11", "old_id": "atcoder_AGC037_E"}
{"code": "mod = 10 ** 9 + 7\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow(2, 2 * n - 2, mod)\na = 2 * b % mod\nans = 0\nidx_gahq = 0\nlist_61kr = range(n)\nwhile idx_gahq < len(list_61kr):\n    i = list_61kr[idx_gahq]\n    ans += c[i] * (a + i * b)\n    ans %= mod\n    idx_gahq = idx_gahq + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC150_E_to_12", "old_id": "atcoder_ABC150_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nidx_wcby = 0\nlist_y43m = range(t)\nwhile idx_wcby < len(list_y43m):\n    i = list_y43m[idx_wcby]\n    if v - v2 > (t - i - 1) * d:\n        a *= - 1\n        v = (t - i - 1) * d + v2\n    distance += v\n    v += a * d\n    idx_wcby = idx_wcby + 1\nprint(distance)\n", "id": "For2While_sample_from_codeforces_534_B_to_13", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nidx_ouin = 0\nlist_3s1w = range(n, 0, - 1)\nwhile idx_ouin < len(list_3s1w):\n    i = list_3s1w[idx_ouin]\n    if n % i == 0:\n        n = i\n        print(i, end=' ')\n    idx_ouin = idx_ouin + 1\n", "id": "For2While_sample_from_codeforces_58_B_to_14", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == \"A\":\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0\n    numA = 0\n    idx_oar7 = 0\n    list_4f5u = range(len(t))\n    while idx_oar7 < len(list_4f5u):\n        i = list_4f5u[idx_oar7]\n        if t[i] == \"X\":\n            numA = 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        idx_oar7 = idx_oar7 + 1\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "For2While_sample_from_atcoder_AGC034_B_to_15", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_a542 = 0\nlist_zm5e = range(a, x + 1)\nwhile idx_a542 < len(list_zm5e):\n    i = list_zm5e[idx_a542]\n    if (i <= b):\n        continue\n    else:\n        idx_o0kt = 0\n        list_2p73 = range(b, y + 1)\n        while idx_o0kt < len(list_2p73):\n            j = list_2p73[idx_o0kt]\n            if i > j:\n                games.append((i, j))\n            idx_o0kt = idx_o0kt + 1\n    idx_a542 = idx_a542 + 1\nprint(len(games))\nidx_r4g6 = 0\nlist_gxqt = games\nwhile idx_r4g6 < len(list_gxqt):\n    i = list_gxqt[idx_r4g6]\n    print(f\"{i[0]} {i[1]}\")\n    idx_r4g6 = idx_r4g6 + 1\n", "id": "For2While_sample_from_codeforces_242_A_to_16", "old_id": "codeforces_242_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    idx_64mh = 0\n    list_au6q = list(enumerate(nums))\n    while idx_64mh < len(list_au6q):\n        i, num = list_au6q[idx_64mh]\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n        idx_64mh = idx_64mh + 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "For2While_sample_from_atcoder_AGC043_B_to_17", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_jf9n = 0\nlist_zfqv = range(firstline)\nwhile idx_jf9n < len(list_zfqv):\n    x = list_zfqv[idx_jf9n]\n    A, G = list(map(int, input().split()))\n    if total + A <= 500:\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\n    idx_jf9n = idx_jf9n + 1\nprint(\"\".join(memory))\n", "id": "For2While_sample_from_codeforces_282_B_to_18", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            idx_mbw9 = 0\n            list_xsr4 = combs\n            while idx_mbw9 < len(list_xsr4):\n                x = list_xsr4[idx_mbw9]\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n                idx_mbw9 = idx_mbw9 + 1\n            print(s.count('1') + maximum)\n", "id": "For2While_sample_from_codeforces_327_A_to_19", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = 0\narr.sort()\nidx_3nel = 0\nlist_b2lq = arr\nwhile idx_3nel < len(list_b2lq):\n    x = list_b2lq[idx_3nel]\n    if (x % k != 0 or not x // k in different):\n        different.add(x)\n    temp = max(len(different), temp)\n    idx_3nel = idx_3nel + 1\nprint(temp)\n", "id": "For2While_sample_from_codeforces_274_A_to_20", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_d8a4 = 0\nlist_mhfq = range(M)\nwhile idx_d8a4 < len(list_mhfq):\n    _ = list_mhfq[idx_d8a4]\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\n    idx_d8a4 = idx_d8a4 + 1\nans = 0\nidx_fpmc = 0\nlist_0gie = range(N)\nwhile idx_fpmc < len(list_0gie):\n    i = list_0gie[idx_fpmc]\n    if balls[i][1]:\n        ans += 1\n    idx_fpmc = idx_fpmc + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC002_B_to_21", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[0] > 15:\n    print(15)\nelse:\n    idx_6zv8 = 0\n    list_8ytk = range(1, len(arr))\n    while idx_6zv8 < len(list_8ytk):\n        i = list_8ytk[idx_6zv8]\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n        idx_6zv8 = idx_6zv8 + 1\n", "id": "For2While_sample_from_codeforces_673_A_to_22", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = 0\nidx_l6wr = 0\nlist_61sf = range(n)\nwhile idx_l6wr < len(list_61sf):\n    _ = list_61sf[idx_l6wr]\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c:\n        c = x\n    idx_l6wr = idx_l6wr + 1\nprint(s + c)\n", "id": "For2While_sample_from_codeforces_608_A_to_23", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nidx_5oxs = 0\nlist_l1h4 = range(x)\nwhile idx_5oxs < len(list_l1h4):\n    i = list_l1h4[idx_5oxs]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9:\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\n    idx_5oxs = idx_5oxs + 1\nif c == 1:\n    s += '1'\nprint(int(s[:: - 1]))\n", "id": "For2While_sample_from_codeforces_171_A_to_24", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nidx_s6nm = 0\nlist_1gfw = range(N + 1)\nwhile idx_s6nm < len(list_1gfw):\n    i = list_1gfw[idx_s6nm]\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = ind\n    x = ne\n    idx_s6nm = idx_s6nm + 1\nif flag == True:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n", "id": "For2While_sample_from_atcoder_ABC167_D_to_25", "old_id": "atcoder_ABC167_D"}
{"code": "n = int(input())\nr = [* map(int, input().split())]\nans = abs(r[0])\nidx_8kn4 = 0\nlist_zs7q = range(1, n)\nwhile idx_8kn4 < len(list_zs7q):\n    i = list_zs7q[idx_8kn4]\n    ans += abs(r[i] - r[i - 1])\n    idx_8kn4 = idx_8kn4 + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_596_B_to_26", "old_id": "codeforces_596_B"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nidx_n9pw = 0\nlist_c81w = range(N)\nwhile idx_n9pw < len(list_c81w):\n    i = list_c81w[idx_n9pw]\n    d = (A[i] % N) % 2\n    if d % 2 != i % 2:\n        cnt += 1\n    idx_n9pw = idx_n9pw + 1\nprint(cnt // 2)\n", "id": "For2While_sample_from_atcoder_AGC003_C_to_27", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_c4aw = 0\nlist_vzpl = s\nwhile idx_c4aw < len(list_vzpl):\n    x = list_vzpl[idx_c4aw]\n    if x == 'g':\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\n    idx_c4aw = idx_c4aw + 1\nprint(score)\n", "id": "For2While_sample_from_atcoder_ARC062_B_to_28", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return 0, 0\n    seen.add(i)\n    nodes = 1\n    edges = len(g[i])\n    idx_3czy = 0\n    list_deb3 = g[i]\n    while idx_3czy < len(list_deb3):\n        j = list_deb3[idx_3czy]\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n        idx_3czy = idx_3czy + 1\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    idx_lzev = 0\n    list_3ik6 = range(1, n + 1)\n    while idx_lzev < len(list_3ik6):\n        i = list_3ik6[idx_lzev]\n        g[i] = set()\n        idx_lzev = idx_lzev + 1\n    idx_l8m6 = 0\n    list_mky3 = range(m)\n    while idx_l8m6 < len(list_mky3):\n        _ = list_mky3[idx_l8m6]\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_l8m6 = idx_l8m6 + 1\n    ans = 0\n    idx_p5yi = 0\n    list_4si2 = range(1, n + 1)\n    while idx_p5yi < len(list_4si2):\n        i = list_4si2[idx_p5yi]\n        if i not in seen:\n            nodes, edges = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n        idx_p5yi = idx_p5yi + 1\n    if (n - ans) % 2 == 1:\n        ans += 1\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "For2While_sample_from_codeforces_216_B_to_29", "old_id": "codeforces_216_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nidx_ftr5 = 0\nlist_y4ls = range(n)\nwhile idx_ftr5 < len(list_y4ls):\n    i = list_y4ls[idx_ftr5]\n    nodes.append(Node())\n    idx_ftr5 = idx_ftr5 + 1\nidx_ajc8 = 0\nlist_mpiq = range(n - 1)\nwhile idx_ajc8 < len(list_mpiq):\n    i = list_mpiq[idx_ajc8]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_ajc8 = idx_ajc8 + 1\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    idx_eu8l = 0\n    list_zsgt = node.a\n    while idx_eu8l < len(list_zsgt):\n        pair = list_zsgt[idx_eu8l]\n        adjNode = pair[0]\n        dis = pair[1]\n        if (distance + dis) % 2 == 0:\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n        idx_eu8l = idx_eu8l + 1\n\n\ntraverse(root, 0)\nidx_nyf2 = 0\nlist_jedq = range(n)\nwhile idx_nyf2 < len(list_jedq):\n    i = list_jedq[idx_nyf2]\n    node = nodes[i]\n    if node.color:\n        print(1)\n    else:\n        print(0)\n    idx_nyf2 = idx_nyf2 + 1\n", "id": "For2While_sample_from_atcoder_ABC126_D_to_30", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    right = [e] * (n + 1)\n    idx_o6vb = 0\n    list_2tdf = range(n)\n    while idx_o6vb < len(list_2tdf):\n        i = list_2tdf[idx_o6vb]\n        left[i + 1] = op(left[i], array[i])\n        idx_o6vb = idx_o6vb + 1\n    idx_lp4u = 0\n    list_wmh0 = reversed(range(n))\n    while idx_lp4u < len(list_wmh0):\n        i = list_wmh0[idx_lp4u]\n        right[i] = op(right[i + 1], array[i])\n        idx_lp4u = idx_lp4u + 1\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = 0\nidx_sleb = 0\nlist_sqd7 = range(n)\nwhile idx_sleb < len(list_sqd7):\n    i = list_sqd7[idx_sleb]\n    ans = max(gcd(left[i], right[i + 1]), ans)\n    idx_sleb = idx_sleb + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC125_C_to_31", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list):\n        idx_wvtq = 0\n        list_behz = result\n        while idx_wvtq < len(list_behz):\n            r = list_behz[idx_wvtq]\n            print(\"%s\" % r, sep='')\n            idx_wvtq = idx_wvtq + 1\n    else:\n        print(\"%s\" % result, sep='')\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_ABC151_A_to_32", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3:\n        return\n    idx_g03m = 0\n    list_a8ni = range(4)\n    while idx_g03m < len(list_a8ni):\n        j = list_a8ni[idx_g03m]\n        idx_lsbh = 0\n        list_hpx2 = range(j + 1, 4)\n        while idx_lsbh < len(list_hpx2):\n            k = list_hpx2[idx_lsbh]\n            if (nums[j] != - 1 and nums[k] != - 1):\n                s = nums[j]\n                nums[j] = - 1\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = s\n                nums[k] = t\n            idx_lsbh = idx_lsbh + 1\n        idx_g03m = idx_g03m + 1\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "For2While_sample_from_codeforces_55_B_to_33", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[0]\n    arr = sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0):\n        print(int(length / arr[0]))\n        return\n    ans = 0\n    if (arr[0] == arr[1]):\n        k = 0\n        idx_dpmz = 0\n        list_oqjc = range(int(length / arr[2]) + 1)\n        while idx_dpmz < len(list_oqjc):\n            i = list_oqjc[idx_dpmz]\n            check = length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = int(check / arr[0])\n                ans = max(ans, k + i)\n            idx_dpmz = idx_dpmz + 1\n    else:\n        k = 0\n        idx_u8f6 = 0\n        list_z0n1 = range(int(length / arr[2]) + 1)\n        while idx_u8f6 < len(list_z0n1):\n            i = list_z0n1[idx_u8f6]\n            idx_fc5g = 0\n            list_z5wp = range(int(length / arr[1]) + 1)\n            while idx_fc5g < len(list_z5wp):\n                j = list_z5wp[idx_fc5g]\n                check = length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n                idx_fc5g = idx_fc5g + 1\n            idx_u8f6 = idx_u8f6 + 1\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "For2While_sample_from_codeforces_189_A_to_34", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [0] * n\nmx = arr[- 1]\nidx_q2jb = 0\nlist_24ae = range(n - 2, - 1, - 1)\nwhile idx_q2jb < len(list_24ae):\n    i = list_24ae[idx_q2jb]\n    ans[i] = max(0, mx - arr[i] + 1)\n    if arr[i] > mx:\n        mx = arr[i]\n    idx_q2jb = idx_q2jb + 1\nprint(* ans)\n", "id": "For2While_sample_from_codeforces_581_B_to_35", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - 1\nidx_j146 = 0\nlist_umyl = l\nwhile idx_j146 < len(list_umyl):\n    v = list_umyl[idx_j146]\n    s[v] += 1\n    if s[v] >= 2:\n        f = 'No'\n    if i != - 1 and l[i][- 1] != v[0]:\n        f = 'No'\n    i += 1\n    idx_j146 = idx_j146 + 1\nprint(f)\n", "id": "For2While_sample_from_atcoder_ABC109_B_to_36", "old_id": "atcoder_ABC109_B"}
{"code": "t = int(input())\n\n\ndef solve(n):\n    s = (1 + n) * n // 2\n    t = 1\n    while t <= n:\n        s -= 2 * t\n        t *= 2\n    return s\nidx_5bem = 0\nlist_anxv = range(t)\nwhile idx_5bem < len(list_anxv):\n    _ = list_anxv[idx_5bem]\n    n = int(input())\n    print(solve(n))\n    idx_5bem = idx_5bem + 1\n", "id": "For2While_sample_from_codeforces_598_A_to_37", "old_id": "codeforces_598_A"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            idx_78wg = 0\n            list_ofip = range(Q)\n            while idx_78wg < len(list_ofip):\n                i = list_ofip[idx_78wg]\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n                idx_78wg = idx_78wg + 1\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        idx_5p4k = 0\n        list_ij57 = range(last_max, M + 1)\n        while idx_5p4k < len(list_ij57):\n            i = list_ij57[idx_5p4k]\n            rec(A + [i])\n            idx_5p4k = idx_5p4k + 1\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_572o = 0\n        list_pdjo = sys.stdin\n        while idx_572o < len(list_pdjo):\n            line = list_pdjo[idx_572o]\n            idx_cxke = 0\n            list_kidp = line.split()\n            while idx_cxke < len(list_kidp):\n                word = list_kidp[idx_cxke]\n                yield word\n                idx_cxke = idx_cxke + 1\n            idx_572o = idx_572o + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_8f0g = 0\n    list_ejy6 = range(Q)\n    while idx_8f0g < len(list_ejy6):\n        i = list_ejy6[idx_8f0g]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_8f0g = idx_8f0g + 1\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_ABC165_C_to_38", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [0] * (len(soz) + 1)\nidx_jx5o = 0\nlist_wdl7 = range(1, len(soz))\nwhile idx_jx5o < len(list_wdl7):\n    i = list_wdl7[idx_jx5o]\n    a[i] = a[i - 1]\n    if soz[i - 1] == soz[i]:\n        a[i] += 1\n    idx_jx5o = idx_jx5o + 1\nn = int(input())\narr = []\nidx_i37m = 0\nlist_z92e = range(n)\nwhile idx_i37m < len(list_z92e):\n    i = list_z92e[idx_i37m]\n    m, l = input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\n    idx_i37m = idx_i37m + 1\nidx_34ta = 0\nlist_fo9p = arr\nwhile idx_34ta < len(list_fo9p):\n    i = list_fo9p[idx_34ta]\n    print(i)\n    idx_34ta = idx_34ta + 1\n", "id": "For2While_sample_from_codeforces_313_B_to_39", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nidx_7tuj = 0\nlist_hmai = range(1, n)\nwhile idx_7tuj < len(list_hmai):\n    i = list_hmai[idx_7tuj]\n    if l[i] == l[i - 1]:\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\n    idx_7tuj = idx_7tuj + 1\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "id": "For2While_sample_from_codeforces_37_A_to_40", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    idx_siz4 = 0\n    list_bhqw = range(d)\n    while idx_siz4 < len(list_bhqw):\n        i = list_bhqw[idx_siz4]\n        tmp += (x[i] - y[i]) ** 2\n        idx_siz4 = idx_siz4 + 1\n    return math.sqrt(tmp)\n\n\ncount = 0\nidx_uw5b = 0\nlist_rvob = list(enumerate(points))\nwhile idx_uw5b < len(list_rvob):\n    i, elm = list_rvob[idx_uw5b]\n    idx_umk1 = 0\n    list_7ujk = range(i + 1, n)\n    while idx_umk1 < len(list_7ujk):\n        j = list_7ujk[idx_umk1]\n        if dist(elm, points[j]).is_integer():\n            count += 1\n        idx_umk1 = idx_umk1 + 1\n    idx_uw5b = idx_uw5b + 1\nprint(count)\n", "id": "For2While_sample_from_atcoder_ABC133_B_to_41", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = 0\nidx_3zow = 0\nlist_8a5p = range(1, 371)\nwhile idx_3zow < len(list_8a5p):\n    i = list_8a5p[idx_3zow]\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1:\n        li.append(i)\n    if count == 2:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    idx_3zow = idx_3zow + 1\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])\n", "id": "For2While_sample_from_codeforces_672_A_to_42", "old_id": "codeforces_672_A"}
{"code": "X = int(input())\nprime = [True] * (100010)\nprime[0] = False\nprime[1] = False\nidx_wnrv = 0\nlist_mx0j = range(4, 100010, 2)\nwhile idx_wnrv < len(list_mx0j):\n    i = list_mx0j[idx_wnrv]\n    prime[i] = False\n    idx_wnrv = idx_wnrv + 1\ni = 3\nwhile (i * i <= 100008):\n    if prime[i]:\n        idx_1z4o = 0\n        list_w5du = range(i + i, 100008, i)\n        while idx_1z4o < len(list_w5du):\n            j = list_w5du[idx_1z4o]\n            prime[j] = False\n            idx_1z4o = idx_1z4o + 1\n    i += 2\nidx_tu1v = 0\nlist_o2fn = range(X, 100008)\nwhile idx_tu1v < len(list_o2fn):\n    i = list_o2fn[idx_tu1v]\n    if prime[i]:\n        print(i)\n        break\n    idx_tu1v = idx_tu1v + 1\n", "id": "For2While_sample_from_atcoder_ABC149_C_to_43", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = 10000000000\n\n\ndef gen(number, four, seven):\n    if (number > limit):\n        return\n    if (number > 0 and four == seven):\n        l.append(number)\n    gen(number * 10 + 4, four + 1, seven)\n    gen(number * 10 + 7, four, seven + 1)\n\n\ndef main():\n    gen(0, 0, 0)\n    l.sort()\n    n = int(input())\n    ans = 0\n    idx_fw6l = 0\n    list_rb57 = l\n    while idx_fw6l < len(list_rb57):\n        val = list_rb57[idx_fw6l]\n        if (val >= n):\n            ans = val\n            break\n        idx_fw6l = idx_fw6l + 1\n    print(ans)\n\n\nmain()\n", "id": "For2While_sample_from_codeforces_96_B_to_44", "old_id": "codeforces_96_B"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_kfs2 = 0\n    list_k3ru = range(M)\n    while idx_kfs2 < len(list_k3ru):\n        i = list_k3ru[idx_kfs2]\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_kfs2 = idx_kfs2 + 1\n    used = [False] * N\n    ans = 0\n    idx_15f2 = 0\n    list_wthr = range(N)\n    while idx_15f2 < len(list_wthr):\n        i = list_wthr[idx_15f2]\n        if not used[i]:\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_kwad = 0\n                list_gxzv = edge[node]\n                while idx_kwad < len(list_gxzv):\n                    nextnode = list_gxzv[idx_kwad]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_kwad = idx_kwad + 1\n        idx_15f2 = idx_15f2 + 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_ABC126_E_to_45", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nidx_pael = 0\nlist_or5g = range(N)\nwhile idx_pael < len(list_or5g):\n    i = list_or5g[idx_pael]\n    if V[i] - C[i] > 0:\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    idx_pael = idx_pael + 1\nprint(sum(list))\n", "id": "For2While_sample_from_atcoder_ABC125_B_to_46", "old_id": "atcoder_ABC125_B"}
{"code": "n, m = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nidx_ixfp = 0\nlist_kob7 = range(r)\nwhile idx_ixfp < len(list_kob7):\n    i = list_kob7[idx_ixfp]\n    a[i] += 1\n    idx_ixfp = idx_ixfp + 1\nidx_9uwx = 0\nlist_ixfb = range(m)\nwhile idx_9uwx < len(list_ixfb):\n    i = list_ixfb[idx_9uwx]\n    print(a[i], end=' ')\n    idx_9uwx = idx_9uwx + 1\n", "id": "For2While_sample_from_codeforces_306_A_to_47", "old_id": "codeforces_306_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_en5c = 0\nlist_q59t = range(M)\nwhile idx_en5c < len(list_q59t):\n    _ = list_q59t[idx_en5c]\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\n    idx_en5c = idx_en5c + 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\nQ = []\nidx_1fpt = 0\nlist_tip7 = list(enumerate(degs))\nwhile idx_1fpt < len(list_tip7):\n    i, d = list_tip7[idx_1fpt]\n    Q.append((d, i))\n    idx_1fpt = idx_1fpt + 1\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    idx_o2c9 = 0\n    list_02th = list(enumerate(edges[u]))\n    while idx_o2c9 < len(list_02th):\n        i, v = list_02th[idx_o2c9]\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_o2c9 = idx_o2c9 + 1\n", "id": "For2While_sample_from_atcoder_AGC035_B_to_48", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    idx_c764 = 0\n    list_g51f = range(0, len(q) + 1)\n    while idx_c764 < len(list_g51f):\n        i = list_g51f[idx_c764]\n        idx_79xv = 0\n        list_7z5s = itertools.combinations(q, i)\n        while idx_79xv < len(list_7z5s):\n            s = list_7z5s[idx_79xv]\n            idx_6zhs = 0\n            list_mn75 = zip(li, p)\n            while idx_6zhs < len(list_mn75):\n                u, w = list_mn75[idx_6zhs]\n                s = set(s)\n                if len(s & set(u)) % 2 != w:\n                    break\n                idx_6zhs = idx_6zhs + 1\n            idx_79xv = idx_79xv + 1\n        idx_c764 = idx_c764 + 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "For2While_sample_from_atcoder_ABC128_C_to_49", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nidx_4oh0 = 0\nlist_gpmy = range(n + 1)\nwhile idx_4oh0 < len(list_gpmy):\n    i = list_gpmy[idx_4oh0]\n    if i + o >= n:\n        res = min(res, abs(i - arr_sum))\n    idx_4oh0 = idx_4oh0 + 1\nprint(\"%.3f\" % res)\n", "id": "For2While_sample_from_codeforces_351_A_to_50", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nidx_cnh3 = 0\nlist_x9aq = range(n - 1)\nwhile idx_cnh3 < len(list_x9aq):\n    i = list_x9aq[idx_cnh3]\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n    idx_cnh3 = idx_cnh3 + 1\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    idx_hydx = 0\n    list_l53o = g[node]\n    while idx_hydx < len(list_l53o):\n        v = list_l53o[idx_hydx]\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n        idx_hydx = idx_hydx + 1\n\n\ndef ao_dfs(node):\n    idx_c6t3 = 0\n    list_jhbf = g[node]\n    while idx_c6t3 < len(list_jhbf):\n        v = list_jhbf[idx_c6t3]\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n        idx_c6t3 = idx_c6t3 + 1\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nidx_xg46 = 0\nlist_1rnv = range(n)\nwhile idx_xg46 < len(list_1rnv):\n    i = list_1rnv[idx_xg46]\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = max(res, ao_dist[i])\n    idx_xg46 = idx_xg46 + 1\nprint(res - 1)\n", "id": "For2While_sample_from_atcoder_ABC148_F_to_51", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_9tgo = 0\n    list_cr6p = permutations\n    while idx_9tgo < len(list_cr6p):\n        permutation = list_cr6p[idx_9tgo]\n        total_distance = 0\n        idx_ovfx = 0\n        list_gpc5 = range(0, N - 1)\n        while idx_ovfx < len(list_gpc5):\n            i = list_gpc5[idx_ovfx]\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n            idx_ovfx = idx_ovfx + 1\n        distances.append(total_distance)\n        idx_9tgo = idx_9tgo + 1\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_wb35 = 0\n        list_yej5 = sys.stdin\n        while idx_wb35 < len(list_yej5):\n            line = list_yej5[idx_wb35]\n            idx_26lb = 0\n            list_et5p = line.split()\n            while idx_26lb < len(list_et5p):\n                word = list_et5p[idx_26lb]\n                yield word\n                idx_26lb = idx_26lb + 1\n            idx_wb35 = idx_wb35 + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    idx_m298 = 0\n    list_6ki3 = range(N)\n    while idx_m298 < len(list_6ki3):\n        i = list_6ki3[idx_m298]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_m298 = idx_m298 + 1\n    solve(N, x, y)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "For2While_sample_from_atcoder_ABC145_C_to_52", "old_id": "atcoder_ABC145_C"}
{"code": "n, k = map(int, input().split())\nv = input()\nd = [\"LEFT\", \"RIGHT\"]\nf = k - 1 < n - k\nm = min(k - 1, n - k)\na = []\nidx_muos = 0\nlist_ze9m = range(0, m)\nwhile idx_muos < len(list_ze9m):\n    i = list_ze9m[idx_muos]\n    a.append(d[not f])\n    idx_muos = idx_muos + 1\nidx_2su5 = 0\nlist_5s8t = v[:: - 1 + 2 * f]\nwhile idx_2su5 < len(list_5s8t):\n    i = list_5s8t[idx_2su5]\n    a.append(\"PRINT \" + i)\n    a.append(d[f])\n    idx_2su5 = idx_2su5 + 1\nprint(* a[: - 1], sep=\"\\n\")\n", "id": "For2While_sample_from_codeforces_412_A_to_53", "old_id": "codeforces_412_A"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    idx_mlnw = 0\n    list_42ym = range(1, len(a))\n    while idx_mlnw < len(list_42ym):\n        i = list_42ym[idx_mlnw]\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2:\n            return 'YES'\n        idx_mlnw = idx_mlnw + 1\n    return 'NO'\n\n\nprint(s())\n", "id": "For2While_sample_from_codeforces_108_B_to_54", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_a1to = 0\nlist_n310 = s\nwhile idx_a1to < len(list_n310):\n    i = list_n310[idx_a1to]\n    if i in dt:\n        dt[i] += 1\n    else:\n        dt[i] = 1\n    idx_a1to = idx_a1to + 1\ncnt = 0\nx = True\nidx_3s7l = 0\nlist_f479 = list(dt.items())\nwhile idx_3s7l < len(list_f479):\n    key, value = list_f479[idx_3s7l]\n    if value % 2 != 0 and cnt < 1:\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\n    idx_3s7l = idx_3s7l + 1\nif x:\n    print(\"First\")\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n", "id": "For2While_sample_from_codeforces_276_B_to_55", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nidx_4wz2 = 0\nlist_obf6 = range(n)\nwhile idx_4wz2 < len(list_obf6):\n    i = list_obf6[idx_4wz2]\n    line = str(input())\n    cake.append(line)\n    idx_1r5q = 0\n    list_8nw5 = line\n    while idx_1r5q < len(list_8nw5):\n        j = list_8nw5[idx_1r5q]\n        if (j == 'C'):\n            chocCount += 1\n        idx_1r5q = idx_1r5q + 1\n    if (chocCount > 1):\n        idx_opry = 0\n        list_idyw = range(chocCount, chocCount - 2, - 1)\n        while idx_opry < len(list_idyw):\n            i = list_idyw[idx_opry]\n            nfat *= i\n            idx_opry = idx_opry + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_4wz2 = idx_4wz2 + 1\nposCount = 0\nidx_13ay = 0\nlist_uklx = range(n)\nwhile idx_13ay < len(list_uklx):\n    j = list_uklx[idx_13ay]\n    idx_d6xl = 0\n    list_5pxv = range(n)\n    while idx_d6xl < len(list_5pxv):\n        i = list_5pxv[idx_d6xl]\n        if (cake[i][j] == 'C'):\n            chocCount += 1\n        idx_d6xl = idx_d6xl + 1\n    if (chocCount > 1):\n        idx_m2qv = 0\n        list_nu4c = range(chocCount, chocCount - 2, - 1)\n        while idx_m2qv < len(list_nu4c):\n            i = list_nu4c[idx_m2qv]\n            nfat *= i\n            idx_m2qv = idx_m2qv + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_13ay = idx_13ay + 1\nprint(int(happiness))\n", "id": "For2While_sample_from_codeforces_629_A_to_56", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nidx_dizq = 0\nlist_723z = set(m)\nwhile idx_dizq < len(list_723z):\n    i = list_723z[idx_dizq]\n    if m.count(i) >= n / 2 + 1:\n        possible = False\n        break\n    idx_dizq = idx_dizq + 1\nprint('YES' if possible else 'NO')\n", "id": "For2While_sample_from_codeforces_296_A_to_57", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\nidx_uob0 = 0\nlist_8uwa = range(m)\nwhile idx_uob0 < len(list_8uwa):\n    i = list_8uwa[idx_uob0]\n    r, c = map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0\n    idx_uob0 = idx_uob0 + 1\nif n % 2 and b[n // 2] and b[n + n // 2]:\n    b[n // 2] = 0\nprint(sum(b))\n", "id": "For2While_sample_from_codeforces_333_B_to_58", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    idx_zsci = 0\n    list_a9dj = range(n)\n    while idx_zsci < len(list_a9dj):\n        i = list_a9dj[idx_zsci]\n        if ls_xyh[i][2] > 0:\n            [x0, y0, h0] = ls_xyh[i]\n            break\n        idx_zsci = idx_zsci + 1\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    idx_pi93 = 0\n    list_50g6 = ls_xyh\n    while idx_pi93 < len(list_50g6):\n        [x, y, h] = list_50g6[idx_pi93]\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n        idx_pi93 = idx_pi93 + 1\n    (xx, yy, hh) = cands[0]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "For2While_sample_from_atcoder_ABC112_C_to_59", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nidx_z02c = 0\nlist_gd7t = range(n)\nwhile idx_z02c < len(list_gd7t):\n    i = list_gd7t[idx_z02c]\n    s = input()\n    s = list(s)\n    idx_su7x = 0\n    list_n89m = range(m)\n    while idx_su7x < len(list_n89m):\n        j = list_n89m[idx_su7x]\n        if s[j] == '.':\n            if (i + j) & 1:\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n        idx_su7x = idx_su7x + 1\n    l.append(s)\n    idx_z02c = idx_z02c + 1\nidx_rja2 = 0\nlist_y5fd = l\nwhile idx_rja2 < len(list_y5fd):\n    c = list_y5fd[idx_rja2]\n    print(\"\".join(c))\n    idx_rja2 = idx_rja2 + 1\n", "id": "For2While_sample_from_codeforces_445_A_to_60", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [0] * N\n    queue = deque()\n    K = - 1\n    node2color = [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 1\n    while queue:\n        q = queue.popleft()\n        color = 0\n        idx_jwmq = 0\n        list_ve9l = G[q]\n        while idx_jwmq < len(list_ve9l):\n            nex = list_ve9l[idx_jwmq]\n            if visited[nex]:\n                continue\n            visited[nex] = 1\n            color += 1\n            if color == node2color[q]:\n                color += 1\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n            idx_jwmq = idx_jwmq + 1\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    idx_xf87 = 0\n    list_bi82 = range(N - 1)\n    while idx_xf87 < len(list_bi82):\n        i = list_bi82[idx_xf87]\n        a, b = map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0\n        idx_xf87 = idx_xf87 + 1\n    K = bfs(0, N, G, E)\n    print(K)\n    idx_70gh = 0\n    list_armg = E.values()\n    while idx_70gh < len(list_armg):\n        value = list_armg[idx_70gh]\n        print(value)\n        idx_70gh = idx_70gh + 1\n\n\nmain()\n", "id": "For2While_sample_from_atcoder_ABC146_D_to_61", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nidx_ersm = 0\nlist_mtad = range(2 ** D)\nwhile idx_ersm < len(list_mtad):\n    i = list_mtad[idx_ersm]\n    score = 0\n    problem = 0\n    idx_cx9y = 0\n    list_y39f = range(D)\n    while idx_cx9y < len(list_y39f):\n        j = list_y39f[idx_cx9y]\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n        idx_cx9y = idx_cx9y + 1\n    if score > G:\n        continue\n    left = G - score\n    idx_7yzs = 0\n    list_gkrz = range(D)\n    while idx_7yzs < len(list_gkrz):\n        j = list_gkrz[idx_7yzs]\n        if (i >> j) & 1:\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            pass\n        else:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        idx_7yzs = idx_7yzs + 1\n    idx_ersm = idx_ersm + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC104_C_to_62", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nidx_dzqg = 0\nlist_3mfb = num_set\nwhile idx_dzqg < len(list_3mfb):\n    i = list_3mfb[idx_dzqg]\n    idx_jg91 = 0\n    list_u5sb = range(1, 30)\n    while idx_jg91 < len(list_u5sb):\n        j = list_u5sb[idx_jg91]\n        i //= 2\n        if i % 2 != 0:\n            two_times_set.add(j)\n            break\n        idx_jg91 = idx_jg91 + 1\n    if len(two_times_set) != 1:\n        print(0)\n        break\n    idx_dzqg = idx_dzqg + 1\n", "id": "For2While_sample_from_atcoder_ABC150_D_to_63", "old_id": "atcoder_ABC150_D"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_67gc = 0\nlist_ie06 = range(n)\nwhile idx_67gc < len(list_ie06):\n    i = list_ie06[idx_67gc]\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2:\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_67gc = idx_67gc + 1\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "For2While_sample_from_codeforces_146_A_to_64", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = 0\ny = 0\nz = 0\nidx_5wk7 = 0\nlist_odkj = a\nwhile idx_5wk7 < len(list_odkj):\n    i = list_odkj[idx_5wk7]\n    x += i\n    idx_5wk7 = idx_5wk7 + 1\nidx_g0ao = 0\nlist_mgp7 = b\nwhile idx_g0ao < len(list_mgp7):\n    i = list_mgp7[idx_g0ao]\n    y += i\n    idx_g0ao = idx_g0ao + 1\nidx_l0vr = 0\nlist_w59f = c\nwhile idx_l0vr < len(list_w59f):\n    i = list_w59f[idx_l0vr]\n    z += i\n    idx_l0vr = idx_l0vr + 1\nprint(abs(x - y))\nprint(abs(y - z))\n", "id": "For2While_sample_from_codeforces_519_B_to_65", "old_id": "codeforces_519_B"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nidx_q42g = 0\nlist_fjvn = arre\nwhile idx_q42g < len(list_fjvn):\n    x = list_fjvn[idx_q42g]\n    if lowString.find(x) >= 0:\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            idx_3okl = 0\n            list_kne7 = range(index, index + len(x))\n            while idx_3okl < len(list_kne7):\n                i = list_kne7[idx_3okl]\n                setcito.add(i)\n                idx_3okl = idx_3okl + 1\n            wat = index + 1\n    idx_q42g = idx_q42g + 1\noString = list(oString)\nidx_69td = 0\nlist_7udi = setcito\nwhile idx_69td < len(list_7udi):\n    i = list_7udi[idx_69td]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_69td = idx_69td + 1\nidx_z70q = 0\nlist_1hjy = oString\nwhile idx_z70q < len(list_1hjy):\n    x = list_1hjy[idx_z70q]\n    print(x, end=\"\")\n    idx_z70q = idx_z70q + 1\nprint()\n", "id": "For2While_sample_from_codeforces_95_A_to_66", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nidx_57qc = 0\nlist_ani6 = range(n)\nwhile idx_57qc < len(list_ani6):\n    i = list_ani6[idx_57qc]\n    k = input()\n    s.append(k)\n    idx_57qc = idx_57qc + 1\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nidx_5rpn = 0\nlist_x7e5 = range(n)\nwhile idx_5rpn < len(list_x7e5):\n    i = list_x7e5[idx_5rpn]\n    idx_qebi = 0\n    list_xo6f = range(n)\n    while idx_qebi < len(list_xo6f):\n        j = list_xo6f[idx_qebi]\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\n        idx_qebi = idx_qebi + 1\n    idx_5rpn = idx_5rpn + 1\nif (len(rem) != 1):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != 1):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "For2While_sample_from_codeforces_404_A_to_67", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nidx_unbc = 0\nlist_0n79 = list(enumerate(_a))\nwhile idx_unbc < len(list_0n79):\n    i, x = list_0n79[idx_unbc]\n    d[x] = i\n    idx_unbc = idx_unbc + 1\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_9ap2 = 0\n    list_osp6 = range(n)\n    while idx_9ap2 < len(list_osp6):\n        i = list_osp6[idx_9ap2]\n        b[i + 1] += b[i]\n        idx_9ap2 = idx_9ap2 + 1\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    idx_ebgs = 0\n    list_on3e = b\n    while idx_ebgs < len(list_on3e):\n        x = list_on3e[idx_ebgs]\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_ebgs = idx_ebgs + 1\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "For2While_sample_from_atcoder_ABC107_D_to_68", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [0] * n] for _ in [0] * n]\n    idx_a16e = 0\n    list_fr12 = range(n)\n    while idx_a16e < len(list_fr12):\n        i = list_fr12[idx_a16e]\n        m = a[i]\n        idx_qu8v = 0\n        list_fqo8 = range(n)\n        while idx_qu8v < len(list_fqo8):\n            j = list_fqo8[idx_qu8v]\n            k = i - j\n            if k < 0:\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n            idx_qu8v = idx_qu8v + 1\n        idx_a16e = idx_a16e + 1\n    m = 10 ** 15\n    idx_8mxz = 0\n    list_5c7j = list(enumerate(b))\n    while idx_8mxz < len(list_5c7j):\n        i, j = list_5c7j[idx_8mxz]\n        m = min(m, sum(j) + x * i)\n        idx_8mxz = idx_8mxz + 1\n    print(m)\n\n\nmain()\n", "id": "For2While_sample_from_atcoder_AGC004_B_to_69", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    idx_xkyq = 0\n    list_qhvu = range(- 1000, 1001)\n    while idx_xkyq < len(list_qhvu):\n        X = list_qhvu[idx_xkyq]\n        if A * (X ** n) == B:\n            return X\n        idx_xkyq = idx_xkyq + 1\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "For2While_sample_from_codeforces_30_A_to_70", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    idx_mgld = 0\n    list_nu8x = range(len(array) - 1, 0, - 1)\n    while idx_mgld < len(list_nu8x):\n        _ = list_nu8x[idx_mgld]\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n        idx_mgld = idx_mgld + 1\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    idx_vpm3 = 0\n    list_evnk = A[1:]\n    while idx_vpm3 < len(list_evnk):\n        a = list_evnk[idx_vpm3]\n        if a <= dp[- 1][0]:\n            dp = cut(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = False\n        idx_n86r = 0\n        list_1fq9 = range(len(dp) - 1, - 1, - 1)\n        while idx_n86r < len(list_1fq9):\n            j = list_1fq9[idx_n86r]\n            if dp[j][1] < K - 1:\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n            idx_n86r = idx_n86r + 1\n        if not is_added:\n            return False\n        idx_vpm3 = idx_vpm3 + 1\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1:\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n\n\nprint(bis(0, N))\n", "id": "For2While_sample_from_atcoder_AGC029_C_to_71", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = 0\nif a[0] > x:\n    print(0)\n    exit()\nidx_u5dx = 0\nlist_yxci = a\nwhile idx_u5dx < len(list_yxci):\n    i = list_yxci[idx_u5dx]\n    if i > x:\n        x = 0\n        break\n    x -= i\n    ans += 1\n    idx_u5dx = idx_u5dx + 1\nif x != 0:\n    ans -= 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC027_A_to_72", "old_id": "atcoder_AGC027_A"}
{"code": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\nN = int(input())\nM = 10 ** 6\nA = np.array(input().split(), dtype=np.int64)\nNsq = 10 ** 3\nfact = np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[0, 0] = 1\nidx_i0bj = 0\nlist_21ag = range(1, Nsq)\nwhile idx_i0bj < len(list_21ag):\n    n = list_21ag[idx_i0bj]\n    fact[:, n] *= fact[:, n - 1]\n    fact[:, n] %= MOD\n    idx_i0bj = idx_i0bj + 1\nidx_cflp = 0\nlist_y1t9 = range(1, Nsq)\nwhile idx_cflp < len(list_y1t9):\n    n = list_y1t9[idx_cflp]\n    fact[n] *= fact[n - 1, - 1]\n    fact[n] %= MOD\n    idx_cflp = idx_cflp + 1\nfact = fact.ravel()\nj = np.arange(N)\ninv = np.array([pow(i + 1, MOD - 2, MOD) for i in range(N)])\ninv = np.cumsum(inv) % MOD\ntemp = inv[j] + inv[N - 1 - j] - 1\nans = (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC028_B_to_73", "old_id": "atcoder_AGC028_B"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 1000000007\nk = ii1()\nt = 0\nidx_4tf7 = 0\nlist_7lq1 = range(1, k + 1)\nwhile idx_4tf7 < len(list_7lq1):\n    i = list_7lq1[idx_4tf7]\n    t = (t % k) * 10 + 7\n    if t % k == 0:\n        print(i)\n        break\n    idx_4tf7 = idx_4tf7 + 1\n", "id": "For2While_sample_from_atcoder_ABC174_C_to_74", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nidx_y3k6 = 0\nlist_vthw = w\nwhile idx_y3k6 < len(list_vthw):\n    i = list_vthw[idx_y3k6]\n    if i == 1:\n        print(c)\n    elif i % 2 == 0:\n        c = 3 - c\n        print(c)\n    else:\n        print(c)\n    idx_y3k6 = idx_y3k6 + 1\n", "id": "For2While_sample_from_codeforces_705_B_to_75", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [0] * 5\nidx_hde6 = 0\nlist_ezqb = S\nwhile idx_hde6 < len(list_ezqb):\n    s = list_ezqb[idx_hde6]\n    if s[0].upper() in march:\n        march_lis[march.index(s[0].upper())] += 1\n    idx_hde6 = idx_hde6 + 1\nans = 0\nidx_7tgq = 0\nlist_kyx1 = combinations(march_lis, 3)\nwhile idx_7tgq < len(list_kyx1):\n    x, y, z = list_kyx1[idx_7tgq]\n    ans += x * y * z\n    idx_7tgq = idx_7tgq + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC089_C_to_76", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif 1 <= int(k) and int(w) <= 1000:\n    total = 0\n    idx_zw9l = 0\n    list_q3xu = range(1, int(w) + 1)\n    while idx_zw9l < len(list_q3xu):\n        i = list_q3xu[idx_zw9l]\n        total += i * int(k)\n        idx_zw9l = idx_zw9l + 1\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "For2While_sample_from_codeforces_546_A_to_77", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = 0\nidx_p09n = 0\nlist_kcyp = range(n)\nwhile idx_p09n < len(list_kcyp):\n    i = list_kcyp[idx_p09n]\n    a = input().split()\n    q.append(a)\n    idx_p09n = idx_p09n + 1\nidx_ykoe = 0\nlist_d6h3 = q\nwhile idx_ykoe < len(list_d6h3):\n    j = list_d6h3[idx_ykoe]\n    idx_ly0g = 0\n    list_0eor = q\n    while idx_ly0g < len(list_0eor):\n        k = list_0eor[idx_ly0g]\n        if k == j:\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\n        idx_ly0g = idx_ly0g + 1\n    idx_ykoe = idx_ykoe + 1\nprint(count)\n", "id": "For2While_sample_from_codeforces_268_A_to_78", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_z7xr = 0\nlist_l7w2 = range(4)\nwhile idx_z7xr < len(list_l7w2):\n    i = list_l7w2[idx_z7xr]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_z7xr = idx_z7xr + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_69hm = 0\nlist_oans = range(3)\nwhile idx_69hm < len(list_oans):\n    i = list_oans[idx_69hm]\n    idx_mr1k = 0\n    list_h276 = range(3)\n    while idx_mr1k < len(list_h276):\n        j = list_h276[idx_mr1k]\n        if t[i][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_mr1k = idx_mr1k + 1\n    idx_69hm = idx_69hm + 1\nif correct == 1:\n    print('YES')\nelse:\n    print('NO')\n", "id": "For2While_sample_from_codeforces_287_A_to_79", "old_id": "codeforces_287_A"}
{"code": "from operator import itemgetter\nN = int(input())\nA = [(i + 1, int(x)) for i, x in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter(1))\nA__ = [a[0] for a in A_]\nidx_pjbu = 0\nlist_0hcs = A__[: - 1]\nwhile idx_pjbu < len(list_0hcs):\n    i = list_0hcs[idx_pjbu]\n    print(i, end=' ')\n    idx_pjbu = idx_pjbu + 1\nprint(A__[- 1])\n", "id": "For2While_sample_from_atcoder_ABC142_C_to_80", "old_id": "atcoder_ABC142_C"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_m3ar = 0\n    list_6tcv = list(enumerate(P))\n    while idx_m3ar < len(list_6tcv):\n        i, p = list_6tcv[idx_m3ar]\n        a[p] = i\n        idx_m3ar = idx_m3ar + 1\n    tmp = 1\n    max_len = 1\n    idx_5j8g = 0\n    list_0ybf = range(1, N)\n    while idx_5j8g < len(list_0ybf):\n        i = list_0ybf[idx_5j8g]\n        if a[i] < a[i + 1]:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n        idx_5j8g = idx_5j8g + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_5fcl = 0\n    list_9dzg = list(enumerate(P))\n    while idx_5fcl < len(list_9dzg):\n        i, p = list_9dzg[idx_5fcl]\n        if i == 0 or P[i - 1] + 1 == p:\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n        idx_5fcl = idx_5fcl + 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_AGC024_B_to_81", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = map(int, input().strip().split())\nout = [0 for _ in range(n)]\ncomp = [i + 2 for i in range(n)]\nidx_fka3 = 0\nlist_r52d = range(m)\nwhile idx_fka3 < len(list_r52d):\n    _ = list_r52d[idx_fka3]\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - 1]\n        if out[t - 1] == 0 and t != x:\n            out[t - 1] = x\n        comp[t - 1] = r + 1 if t >= x else x\n        t = next_val\n    idx_fka3 = idx_fka3 + 1\nprint(* out)\n", "id": "For2While_sample_from_codeforces_356_A_to_82", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_3ath = 0\nlist_inav = range(N)\nwhile idx_3ath < len(list_inav):\n    x = list_inav[idx_3ath]\n    if S[x] == 'L':\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_3ath = idx_3ath + 1\nif Judge:\n    print('NO')\nelse:\n    print('YES')\n", "id": "For2While_sample_from_atcoder_AGC033_B_to_83", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0:\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nidx_804e = 0\nlist_b3g0 = list(enumerate(a))\nwhile idx_804e < len(list_b3g0):\n    i, a0 = list_b3g0[idx_804e]\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    idx_804e = idx_804e + 1\nif max_sign == 0:\n    print(0)\nelif max_sign == 1:\n    print(2 * N - 1)\n    idx_st18 = 0\n    list_r3w8 = range(N)\n    while idx_st18 < len(list_r3w8):\n        i = list_r3w8[idx_st18]\n        print(max_index + 1, i + 1)\n        idx_st18 = idx_st18 + 1\n    idx_vafr = 0\n    list_4j8y = range(N - 1)\n    while idx_vafr < len(list_4j8y):\n        i = list_4j8y[idx_vafr]\n        print(i + 1, i + 2)\n        idx_vafr = idx_vafr + 1\nelse:\n    print(2 * N - 1)\n    idx_35ib = 0\n    list_ndhj = range(N)\n    while idx_35ib < len(list_ndhj):\n        i = list_ndhj[idx_35ib]\n        print(max_index + 1, i + 1)\n        idx_35ib = idx_35ib + 1\n    idx_bua2 = 0\n    list_0yzu = range(1, N)[:: - 1]\n    while idx_bua2 < len(list_0yzu):\n        i = list_0yzu[idx_bua2]\n        print(i + 1, i)\n        idx_bua2 = idx_bua2 + 1\n", "id": "For2While_sample_from_atcoder_ARC086_B_to_84", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\nidx_nyth = 0\nlist_vk1f = range(len(x))\nwhile idx_nyth < len(list_vk1f):\n    i = list_vk1f[idx_nyth]\n    x[i] = int(x[i])\n    idx_nyth = idx_nyth + 1\nidx_rqg5 = 0\nlist_mgzl = range(len(x) - 1)\nwhile idx_rqg5 < len(list_mgzl):\n    a = list_mgzl[idx_rqg5]\n    if x[a] >= x[a + 1]:\n        q = int((x[a] - x[a + 1]) / d + 1)\n        m = m + q\n        x[a + 1] = x[a + 1] + q * d\n    idx_rqg5 = idx_rqg5 + 1\nprint(m)\n", "id": "For2While_sample_from_codeforces_11_A_to_85", "old_id": "codeforces_11_A"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N:\n        return 0\n    ans = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    idx_4od7 = 0\n    list_omkc = '753'\n    while idx_4od7 < len(list_omkc):\n        i = list_omkc[idx_4od7]\n        ans += aaa(n + i)\n        idx_4od7 = idx_4od7 + 1\n    return ans\n\n\nprint(aaa('0'))\n", "id": "For2While_sample_from_atcoder_ABC114_C_to_86", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t:\n    print(n)\nelse:\n    cnt = 0\n    idx_ez1g = 0\n    list_cvtu = range(n)\n    while idx_ez1g < len(list_cvtu):\n        i = list_cvtu[idx_ez1g]\n        idx_ucky = 0\n        list_q2ub = range(n - i)\n        while idx_ucky < len(list_q2ub):\n            j = list_q2ub[idx_ucky]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n            idx_ucky = idx_ucky + 1\n        idx_ez1g = idx_ez1g + 1\n    print(2 * n - cnt)\n", "id": "For2While_sample_from_atcoder_AGC006_A_to_87", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        idx_uith = 0\n        list_koed = data\n        while idx_uith < len(list_koed):\n            number = list_koed[idx_uith]\n            if len(number) > 0:\n                yield (number)\n            idx_uith = idx_uith + 1\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_s6zp = 0\nlist_kjco = range(0, N - 1)\nwhile idx_s6zp < len(list_kjco):\n    i = list_kjco[idx_s6zp]\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\n    idx_s6zp = idx_s6zp + 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt:\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC140_D_to_88", "old_id": "atcoder_ABC140_D"}
{"code": "from itertools import accumulate\nn, q = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + 1 if s[i - 1: i + 1] == 'AC' else total\n\n\ncumsum = list(accumulate([0] + list(range(1, n)), count))\nidx_xw37 = 0\nlist_oy8m = problems\nwhile idx_xw37 < len(list_oy8m):\n    l, r = list_oy8m[idx_xw37]\n    print(cumsum[r - 1] - cumsum[l - 1])\n    idx_xw37 = idx_xw37 + 1\n", "id": "For2While_sample_from_atcoder_ABC122_C_to_89", "old_id": "atcoder_ABC122_C"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_od4a = 0\nlist_znc3 = range(len(lista))\nwhile idx_od4a < len(list_znc3):\n    i = list_znc3[idx_od4a]\n    if i == 0:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n    idx_od4a = idx_od4a + 1\n", "id": "For2While_sample_from_codeforces_567_A_to_90", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_1vi0 = 0\nlist_7otk = range(n)\nwhile idx_1vi0 < len(list_7otk):\n    i = list_7otk[idx_1vi0]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_1vi0 = idx_1vi0 + 1\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if r >= - d:\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "For2While_sample_from_atcoder_ABC137_D_to_91", "old_id": "atcoder_ABC137_D"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nidx_2eti = 0\nlist_u2nh = range(len(arr))\nwhile idx_2eti < len(list_u2nh):\n    i = list_u2nh[idx_2eti]\n    idx_b34h = 0\n    list_8rp4 = range(len(arr))\n    while idx_b34h < len(list_8rp4):\n        j = list_8rp4[idx_b34h]\n        if i == j:\n            continue\n        idx_q7d3 = 0\n        list_p3ts = range(len(arr))\n        while idx_q7d3 < len(list_p3ts):\n            k = list_p3ts[idx_q7d3]\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j]:\n                print(k + 1, j + 1, i + 1)\n                exit()\n            idx_q7d3 = idx_q7d3 + 1\n        idx_b34h = idx_b34h + 1\n    idx_2eti = idx_2eti + 1\nprint(- 1)\n", "id": "For2While_sample_from_codeforces_31_A_to_92", "old_id": "codeforces_31_A"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n\nn, * a = map(int, open(0).read().split())\n* par, = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nidx_cvd7 = 0\nlist_q5pd = list(enumerate(a))\nwhile idx_cvd7 < len(list_q5pd):\n    i, t = list_q5pd[idx_cvd7]\n    b[t - 1] = i\n    idx_cvd7 = idx_cvd7 + 1\nc = 0\nidx_2iaw = 0\nlist_ud3e = b[:: - 1]\nwhile idx_2iaw < len(list_ud3e):\n    k = list_ud3e[idx_2iaw]\n    l = r = 1\n    if k > 0 and a[k - 1] > a[k]:\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k]:\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    c += l * r * a[k]\n    idx_2iaw = idx_2iaw + 1\nprint(c)\n", "id": "For2While_sample_from_atcoder_AGC005_B_to_93", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = []\nidx_ogxz = 0\nlist_ug6t = range(5)\nwhile idx_ogxz < len(list_ug6t):\n    _ = list_ug6t[idx_ogxz]\n    m = input()\n    e = int(m[- 1])\n    if e == 0:\n        e = 10\n    menu.append([int(m), e])\n    idx_ogxz = idx_ogxz + 1\nmenu.sort(key=lambda x: x[1])\nans = 0\nidx_qjke = 0\nlist_p8j1 = menu[1:]\nwhile idx_qjke < len(list_p8j1):\n    m = list_p8j1[idx_qjke]\n    ans += math.ceil(m[0] / 10) * 10\n    idx_qjke = idx_qjke + 1\nprint(ans + menu[0][0])\n", "id": "For2While_sample_from_atcoder_ABC123_B_to_94", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('YES')\n    idx_c7n8 = 0\n    list_kqzw = range(n)\n    while idx_c7n8 < len(list_kqzw):\n        i = list_kqzw[idx_c7n8]\n        idx_digj = 0\n        list_1sfe = range(n)\n        while idx_digj < len(list_1sfe):\n            j = list_1sfe[idx_digj]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n            idx_digj = idx_digj + 1\n        print()\n        idx_c7n8 = idx_c7n8 + 1\nelse:\n    print('NO')\n", "id": "For2While_sample_from_codeforces_544_B_to_95", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        idx_0i2f = 0\n        list_mr6k = range(self.t)\n        while idx_0i2f < len(list_mr6k):\n            _ = list_mr6k[idx_0i2f]\n            self.queries.append([int(x) for x in input().split(\" \")])\n            idx_0i2f = idx_0i2f + 1\n\n    def process_task(self):\n        res = []\n        idx_9wxv = 0\n        list_5rc7 = self.queries\n        while idx_9wxv < len(list_5rc7):\n            query = list_5rc7[idx_9wxv]\n            k = query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n            idx_9wxv = idx_9wxv + 1\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "For2While_sample_from_codeforces_397_B_to_96", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nidx_i8za = 0\nlist_qd1z = l\nwhile idx_i8za < len(list_qd1z):\n    i = list_qd1z[idx_i8za]\n    if i > c:\n        c += 1\n    idx_i8za = idx_i8za + 1\nprint(c + 1)\n", "id": "For2While_sample_from_codeforces_682_B_to_97", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_0k7l = 0\n        list_3qol = sys.stdin\n        while idx_0k7l < len(list_3qol):\n            line = list_3qol[idx_0k7l]\n            idx_6tpl = 0\n            list_jse2 = line.split()\n            while idx_6tpl < len(list_jse2):\n                word = list_jse2[idx_6tpl]\n                yield word\n                idx_6tpl = idx_6tpl + 1\n            idx_0k7l = idx_0k7l + 1\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_ABC154_A_to_98", "old_id": "atcoder_ABC154_A"}
{"code": "import numpy as np\nh, w = map(int, input().split())\ngraph = [[0 if i == '#' else float('inf')\n          for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nidx_18rq = 0\nlist_tls1 = range(w - 1)\nwhile idx_18rq < len(list_tls1):\n    x = list_tls1[idx_18rq]\n    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\n    idx_18rq = idx_18rq + 1\nidx_xmqc = 0\nlist_0kx1 = range(w - 1, 0, - 1)\nwhile idx_xmqc < len(list_0kx1):\n    x = list_0kx1[idx_xmqc]\n    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\n    idx_xmqc = idx_xmqc + 1\nidx_e1n6 = 0\nlist_9j0o = range(h - 1)\nwhile idx_e1n6 < len(list_9j0o):\n    y = list_9j0o[idx_e1n6]\n    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\n    idx_e1n6 = idx_e1n6 + 1\nidx_wbl0 = 0\nlist_ozvs = range(h - 1, 0, - 1)\nwhile idx_wbl0 < len(list_ozvs):\n    y = list_ozvs[idx_wbl0]\n    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\n    idx_wbl0 = idx_wbl0 + 1\nprint(int(np.max(graph)))\n", "id": "For2While_sample_from_atcoder_AGC033_A_to_99", "old_id": "atcoder_AGC033_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [0] * (n + 1), 0, 0, 0\ng = [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u]:\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        idx_r516 = 0\n        list_7nga = g[u]\n        while idx_r516 < len(list_7nga):\n            i = list_7nga[idx_r516]\n            stk.put((i, 3 - col))\n            idx_r516 = idx_r516 + 1\n    return flag\nidx_wgqc = 0\nlist_t6yl = range(m)\nwhile idx_wgqc < len(list_t6yl):\n    i = list_t6yl[idx_wgqc]\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    idx_wgqc = idx_wgqc + 1\nidx_q6tr = 0\nlist_o41y = range(1, n + 1)\nwhile idx_q6tr < len(list_o41y):\n    i = list_o41y[idx_q6tr]\n    if vis[i] == 0:\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\n    idx_q6tr = idx_q6tr + 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "For2While_sample_from_atcoder_AGC011_C_to_100", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_oqwa = 0\nlist_faoj = range(n)\nwhile idx_oqwa < len(list_faoj):\n    k = list_faoj[idx_oqwa]\n    if k + 1 in lista:\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n    idx_oqwa = idx_oqwa + 1\n", "id": "For2While_sample_from_codeforces_421_A_to_101", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_oft5 = 0\n    list_fdcn = range(4)\n    while idx_oft5 < len(list_fdcn):\n        i = list_fdcn[idx_oft5]\n        t = list(last4)\n        if i >= 1:\n            t[i], t[i - 1] = t[i - 1], t[i]\n        if ''.join(t).count('AGC') >= 1:\n            return False\n        idx_oft5 = idx_oft5 + 1\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return 1\n    ret = 0\n    idx_5n1y = 0\n    list_7q1b = \"ACGT\"\n    while idx_5n1y < len(list_7q1b):\n        c = list_7q1b[idx_5n1y]\n        if ok(last3 + c):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod\n        idx_5n1y = idx_5n1y + 1\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))\n", "id": "For2While_sample_from_atcoder_ABC122_D_to_102", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nidx_uh0g = 0\nlist_a38r = range(n)\nwhile idx_uh0g < len(list_a38r):\n    i = list_a38r[idx_uh0g]\n    if (x - w[i]) / (n - 1) == w[i]:\n        d.append(i + 1)\n    idx_uh0g = idx_uh0g + 1\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "For2While_sample_from_codeforces_134_A_to_103", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_re8f = 0\nlist_j7ar = range(len(a) - 1, - 1, - 1)\nwhile idx_re8f < len(list_j7ar):\n    i = list_j7ar[idx_re8f]\n    if (a[i] == ' ' or a[i] == '?'):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    idx_re8f = idx_re8f + 1\n", "id": "For2While_sample_from_codeforces_49_A_to_104", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = 0\nidx_dxnb = 0\nlist_7f9k = range(n)\nwhile idx_dxnb < len(list_7f9k):\n    i = list_7f9k[idx_dxnb]\n    if i + 1 & 1:\n        t += 1\n    idx_dxnb = idx_dxnb + 1\nprint(t / n)\n", "id": "For2While_sample_from_atcoder_ABC142_A_to_105", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    idx_wz70 = 0\n    list_ygqu = links[v]\n    while idx_wz70 < len(list_ygqu):\n        u = list_ygqu[idx_wz70]\n        if u == 0:\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n        idx_wz70 = idx_wz70 + 1\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k:\n        height_from_leaf = 0\n        cut_count += 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nidx_mwjt = 0\nlist_0k5a = list(enumerate(aaa))\nwhile idx_mwjt < len(list_0k5a):\n    i, a = list_0k5a[idx_mwjt]\n    a -= 1\n    links[a].add(i)\n    idx_mwjt = idx_mwjt + 1\n_, ans = dfs(links, n, k, 0, 0)\nif aaa[0] != 1:\n    ans += 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC004_D_to_106", "old_id": "atcoder_AGC004_D"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\n\n\nif X == 1 or X == N * 2 - 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_4f7y = 0\n    list_50y1 = xs\n    while idx_4f7y < len(list_50y1):\n        x = list_50y1[idx_4f7y]\n        print(x)\n        idx_4f7y = idx_4f7y + 1\n", "id": "For2While_sample_from_atcoder_AGC006_B_to_107", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_19h0 = 0\n    list_uszg = lis\n    while idx_19h0 < len(list_uszg):\n        i = list_uszg[idx_19h0]\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n        idx_19h0 = idx_19h0 + 1\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if (check(lis, k, mid)):\n        ans = mid\n        b = mid - 1\n    else:\n        a = mid + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC174_E_to_108", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = 0\nidx_65qc = 0\nlist_9gtj = range(n)\nwhile idx_65qc < len(list_9gtj):\n    i = list_9gtj[idx_65qc]\n    l1 = list(map(int, input().split()))\n    if sum(l1) > 1:\n        c = c + 1\n    idx_65qc = idx_65qc + 1\nprint(c)\n", "id": "For2While_sample_from_codeforces_231_A_to_109", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nidx_ec4p = 0\nlist_3tgw = range(2, __N + 1)\nwhile idx_ec4p < len(list_3tgw):\n    i = list_3tgw[idx_ec4p]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_ec4p = idx_ec4p + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    idx_g4qm = 0\n    list_4rn1 = range(kumi + 1)\n    while idx_g4qm < len(list_4rn1):\n        p = list_4rn1[idx_g4qm]\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_g4qm = idx_g4qm + 1\n    return ans\n\n\nans = []\nidx_i6nf = 0\nlist_qtly = range(2, 2 * K + 1)\nwhile idx_i6nf < len(list_qtly):\n    i = list_qtly[idx_i6nf]\n    if i <= K + 1:\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    idx_i6nf = idx_i6nf + 1\n", "id": "For2While_sample_from_atcoder_ARC102_C_to_110", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nidx_9b3m = 0\nlist_c319 = range(1, n + 1)\nwhile idx_9b3m < len(list_c319):\n    i = list_c319[idx_9b3m]\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    idx_9b3m = idx_9b3m + 1\nanswer = QR * (n - 1) + sum_el[n] * R\nidx_y46x = 0\nlist_sl9x = range(1, n + 1)\nwhile idx_y46x < len(list_sl9x):\n    i = list_sl9x[idx_y46x]\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i):\n        energy = energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - 1) * QR\n    if energy < answer:\n        answer = energy\n    idx_y46x = idx_y46x + 1\nprint(answer)\n", "id": "For2While_sample_from_codeforces_354_A_to_111", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nidx_981e = 0\nlist_o1h2 = [l, r, first, second]\nwhile idx_981e < len(list_o1h2):\n    i = list_o1h2[idx_981e]\n    if i >= l and i <= r:\n        curr = i\n        rev = ''\n        idx_u0m3 = 0\n        list_dqpc = str(curr)\n        while idx_u0m3 < len(list_dqpc):\n            k = list_dqpc[idx_u0m3]\n            rev += str(9 - int(k))\n            idx_u0m3 = idx_u0m3 + 1\n        ans = max(ans, int(rev) * curr)\n    idx_981e = idx_981e + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_86_A_to_112", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open(0).read().split())\nl.sort()\nans = 0\nidx_lzs7 = 0\nlist_proh = range(n)\nwhile idx_lzs7 < len(list_proh):\n    i = list_proh[idx_lzs7]\n    idx_6xkt = 0\n    list_e0fd = range(i + 1, n)\n    while idx_6xkt < len(list_e0fd):\n        j = list_e0fd[idx_6xkt]\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right:\n            tmp -= 1\n        if left <= j < right:\n            tmp -= 1\n        ans += tmp\n        idx_6xkt = idx_6xkt + 1\n    idx_lzs7 = idx_lzs7 + 1\nprint(ans // 3)\n", "id": "For2While_sample_from_atcoder_ABC143_D_to_113", "old_id": "atcoder_ABC143_D"}
{"code": "n = int(input())\nl = []\nidx_f180 = 0\nlist_8g3s = range(n)\nwhile idx_f180 < len(list_8g3s):\n    i = list_8g3s[idx_f180]\n    l.append(int(input()))\n    idx_f180 = idx_f180 + 1\nans = n - 1\nlast = 0\nidx_oyhe = 0\nlist_i0tl = l\nwhile idx_oyhe < len(list_i0tl):\n    i = list_i0tl[idx_oyhe]\n    ans += abs(last - i) + 1\n    last = i\n    idx_oyhe = idx_oyhe + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_265_B_to_114", "old_id": "codeforces_265_B"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    idx_1bap = 0\n    list_i1u6 = range(N)\n    while idx_1bap < len(list_i1u6):\n        i = list_i1u6[idx_1bap]\n        if A[i] < 0:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x:\n            tot -= 1\n        idx_1bap = idx_1bap + 1\n    tot //= 2\n    if tot < K:\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "For2While_sample_from_atcoder_ABC155_D_to_115", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nidx_wh30 = 0\nlist_mue8 = re.split(\"[.?!]\", input())\nwhile idx_wh30 < len(list_mue8):\n    s = list_mue8[idx_wh30]\n    s = s.strip() + '.'\n    L = len(s)\n    if L > 1:\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\n    idx_wh30 = idx_wh30 + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_70_B_to_116", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nidx_p5ba = 0\nlist_qm62 = m[1:]\nwhile idx_p5ba < len(list_qm62):\n    i = list_qm62[idx_p5ba]\n    if i[1] > a[1]:\n        print('Happy Alex')\n        break\n    a = i\n    idx_p5ba = idx_p5ba + 1\n", "id": "For2While_sample_from_codeforces_456_A_to_117", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_gk7b = 0\n    list_jxag = range(b)\n    while idx_gk7b < len(list_jxag):\n        i = list_jxag[idx_gk7b]\n        tot.append(l[i * a: i * a + a])\n        idx_gk7b = idx_gk7b + 1\n    idx_76pq = 0\n    list_8s9n = zip(* tot)\n    while idx_76pq < len(list_8s9n):\n        i = list_8s9n[idx_76pq]\n        if sum((i)) == b:\n            return True\n        idx_76pq = idx_76pq + 1\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_g5op = 0\n    list_hud1 = x\n    while idx_g5op < len(list_hud1):\n        i = list_hud1[idx_g5op]\n        if i == 'O':\n            s.append(0)\n        else:\n            s.append(1)\n        idx_g5op = idx_g5op + 1\n    idx_w47h = 0\n    list_p9qh = range(1, 13)\n    while idx_w47h < len(list_p9qh):\n        i = list_p9qh[idx_w47h]\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_w47h = idx_w47h + 1\n    print(len(tot), end=' ')\n    idx_19wn = 0\n    list_9wvr = sorted(tot)\n    while idx_19wn < len(list_9wvr):\n        a, b = list_9wvr[idx_19wn]\n        print(f'{a}x{b}', end=' ')\n        idx_19wn = idx_19wn + 1\n    print()\n\n\nif __name__ == \"__main__\":\n    idx_e510 = 0\n    list_0y29 = range(inp())\n    while idx_e510 < len(list_0y29):\n        i = list_0y29[idx_e510]\n        solve()\n        idx_e510 = idx_e510 + 1\n", "id": "For2While_sample_from_codeforces_400_A_to_118", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    idx_hpbu = 0\n    list_lcut = range(len(A) - 2, len(A) - 2 * n - 1, - 2)\n    while idx_hpbu < len(list_lcut):\n        i = list_lcut[idx_hpbu]\n        ans += A[i]\n        idx_hpbu = idx_hpbu + 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_AGC012_A_to_119", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nidx_nk9d = 0\nlist_14h3 = range(n)\nwhile idx_nk9d < len(list_14h3):\n    i = list_14h3[idx_nk9d]\n    x = input()\n    a, b = 0, 0\n    idx_tjfi = 0\n    list_k1pv = s\n    while idx_tjfi < len(list_k1pv):\n        j = list_k1pv[idx_tjfi]\n        if j == x[0]:\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = ans + min(a, b)\n            a, b = 0, 0\n        idx_tjfi = idx_tjfi + 1\n    ans = ans + min(a, b)\n    idx_nk9d = idx_nk9d + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_154_A_to_120", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nidx_ie4p = 0\nlist_yaud = range(n)\nwhile idx_ie4p < len(list_yaud):\n    j = list_yaud[idx_ie4p]\n    idx_9lih = 0\n    list_gcd5 = range(n)\n    while idx_9lih < len(list_gcd5):\n        p = list_gcd5[idx_9lih]\n        if (0 == M[p]):\n            print(p + 1, end=' ')\n            break\n        idx_9lih = idx_9lih + 1\n    idx_zctf = 0\n    list_8zyd = range(p + 1 - k)\n    while idx_zctf < len(list_8zyd):\n        l = list_8zyd[idx_zctf]\n        M[l] -= 1\n        idx_zctf = idx_zctf + 1\n    M[p] -= 1\n    idx_ie4p = idx_ie4p + 1\n", "id": "For2While_sample_from_codeforces_67_B_to_121", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_8dku = 0\n    list_uwia = sequence\n    while idx_8dku < len(list_uwia):\n        value = list_uwia[idx_8dku]\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_8dku = idx_8dku + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "For2While_sample_from_codeforces_272_B_to_122", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nidx_b562 = 0\nlist_7scl = s\nwhile idx_b562 < len(list_7scl):\n    c = list_7scl[idx_b562]\n    count[ord(c) - ord(\"A\")] += 1\n    idx_b562 = idx_b562 + 1\ncount.sort(reverse=True)\nres = 0\nidx_mu2k = 0\nlist_b1gm = range(26)\nwhile idx_mu2k < len(list_b1gm):\n    i = list_b1gm[idx_mu2k]\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\n    idx_mu2k = idx_mu2k + 1\nprint(res)\n", "id": "For2While_sample_from_codeforces_462_B_to_123", "old_id": "codeforces_462_B"}
{"code": "from itertools import accumulate\nN, X, * A = map(int, open(0).read().split())\nS = list(accumulate(A))\nans = float(\"inf\")\nidx_zf50 = 0\nlist_fjid = list(enumerate(S, 1))\nwhile idx_zf50 < len(list_fjid):\n    k, s = list_fjid[idx_zf50]\n    E = k * X + 2 * sum(S[j] for j in range(N - 2 * k - 1, - 1, - k))\n    ans = min(ans, E)\n    idx_zf50 = idx_zf50 + 1\nprint(ans + N * X + 5 * S[- 1])\n", "id": "For2While_sample_from_atcoder_AGC027_B_to_124", "old_id": "atcoder_AGC027_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_bruv = 0\nlist_m0b4 = Number_i\nwhile idx_bruv < len(list_m0b4):\n    i = list_m0b4[idx_bruv]\n    Number_iMN.append(i * M / N)\n    idx_bruv = idx_bruv + 1\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_enjt = 0\nlist_bo43 = Kaburi_j\nwhile idx_enjt < len(list_bo43):\n    j = list_bo43[idx_enjt]\n    Kaburi_i.append(int(j * N / M))\n    idx_enjt = idx_enjt + 1\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = 1\n        break\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\nif Flag == 1:\n    print(- 1)\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "For2While_sample_from_atcoder_AGC028_A_to_125", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_m1lg = 0\n    list_dx78 = list(enumerate(s[:: - 1]))\n    while idx_m1lg < len(list_dx78):\n        i, c = list_dx78[idx_m1lg]\n        cc = na + int(c)\n        na = 0\n        if cc <= 4:\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        idx_m1lg = idx_m1lg + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    idx_t9ci = 0\n    list_vcfw = s[:: - 1]\n    while idx_t9ci < len(list_vcfw):\n        c = list_vcfw[idx_t9ci]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_t9ci = idx_t9ci + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_z1ua = 0\n    list_q3dr = input_l\n    while idx_z1ua < len(list_q3dr):\n        l = list_q3dr[idx_z1ua]\n        yield l\n        idx_z1ua = idx_z1ua + 1\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "For2While_sample_from_atcoder_ABC155_E_to_126", "old_id": "atcoder_ABC155_E"}
{"code": "L = []\ninput()\nr = 1\nidx_sqpm = 0\nlist_o6lc = input().split()\nwhile idx_sqpm < len(list_o6lc):\n    k = list_o6lc[idx_sqpm]\n    L += [r] * int(k)\n    r += 1\n    idx_sqpm = idx_sqpm + 1\ninput()\nidx_kx6w = 0\nlist_gc13 = input().split()\nwhile idx_kx6w < len(list_gc13):\n    j = list_gc13[idx_kx6w]\n    print(L[int(j) - 1])\n    idx_kx6w = idx_kx6w + 1\n", "id": "For2While_sample_from_codeforces_474_B_to_127", "old_id": "codeforces_474_B"}
{"code": "n, m = map(int, input().split())\nsa = input().count(\"-\")\nsa = min([n - sa, sa])\nss = []\nidx_r6l2 = 0\nlist_vfl1 = range(m)\nwhile idx_r6l2 < len(list_vfl1):\n    _ = list_vfl1[idx_r6l2]\n    a, b = map(int, input().split())\n    b -= a\n    ss.append((b % 2 and b <= sa << 1) and \"1\\n\" or \"0\\n\")\n    idx_r6l2 = idx_r6l2 + 1\nprint(\"\".join(ss))\n", "id": "For2While_sample_from_codeforces_302_A_to_128", "old_id": "codeforces_302_A"}
{"code": "A, B, C, D = map(int, input().split())\nm = 998244353\nd = [[0] * (D + 1) for _ in range(C + 1)]\nd[A][B] = 1\nidx_vmnb = 0\nlist_sf5z = range(A, C + 1)\nwhile idx_vmnb < len(list_sf5z):\n    i = list_sf5z[idx_vmnb]\n    idx_myxl = 0\n    list_spyq = range(B, D + 1)\n    while idx_myxl < len(list_spyq):\n        j = list_spyq[idx_myxl]\n        d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j -\n                    d[i - 1][j - 1] * (i - 1) * (j - 1)) % m\n        idx_myxl = idx_myxl + 1\n    idx_vmnb = idx_vmnb + 1\nprint(d[C][D])\n", "id": "For2While_sample_from_atcoder_AGC046_B_to_129", "old_id": "atcoder_AGC046_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - 1].split()\nw = Counter(s)\ns = s[:: - 1]\nc, a = - 1, 0\nidx_khqm = 0\nlist_firs = w\nwhile idx_khqm < len(list_firs):\n    i = list_firs[idx_khqm]\n    if w[i] == max(w.values()):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\n    idx_khqm = idx_khqm + 1\nprint(a)\n", "id": "For2While_sample_from_codeforces_637_A_to_130", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = a % b\n            if a > 0:\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = b % a\n            if b > 0:\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b:\n        return 1\n\n\nn = int(input())\nlst = []\nidx_wdj1 = 0\nlist_ay6c = range(0, n)\nwhile idx_wdj1 < len(list_ay6c):\n    i = list_ay6c[idx_wdj1]\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\n    idx_wdj1 = idx_wdj1 + 1\nidx_or0t = 0\nlist_50n6 = lst\nwhile idx_or0t < len(list_50n6):\n    i = list_50n6[idx_or0t]\n    print(i)\n    idx_or0t = idx_or0t + 1\n", "id": "For2While_sample_from_codeforces_267_A_to_131", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][- 1] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nidx_mke6 = 0\nlist_kbez = range(N)\nwhile idx_mke6 < len(list_kbez):\n    _ = list_kbez[idx_mke6]\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\n    idx_mke6 = idx_mke6 + 1\nprint(len(ans))\n", "id": "For2While_sample_from_atcoder_ABC134_E_to_132", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nidx_xjhr = 0\nlist_yq27 = lst\nwhile idx_xjhr < len(list_yq27):\n    i = list_yq27[idx_xjhr]\n    if (i & 1):\n        od += 1\n    idx_xjhr = idx_xjhr + 1\nsum = 0\nok = 0\nidx_6goq = 0\nlist_pk9x = range(n)\nwhile idx_6goq < len(list_pk9x):\n    i = list_pk9x[idx_6goq]\n    if (lst[i] % 2 == 0):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\n    idx_6goq = idx_6goq + 1\nprint(sum)\n", "id": "For2While_sample_from_codeforces_621_A_to_133", "old_id": "codeforces_621_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = 0\n    idx_efpy = 0\n    list_xclm = range(1, math.ceil(n / 2) + 1)\n    while idx_efpy < len(list_xclm):\n        step = list_xclm[idx_efpy]\n        idx_l5ep = 0\n        list_0j61 = range(n - 2 * step)\n        while idx_l5ep < len(list_0j61):\n            i = list_0j61[idx_l5ep]\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\":\n                sum = sum + 1\n            idx_l5ep = idx_l5ep + 1\n        idx_efpy = idx_efpy + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "For2While_sample_from_atcoder_ABC162_D_to_134", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    idx_efri = 0\n    list_b47h = range(N)\n    while idx_efri < len(list_b47h):\n        i = list_b47h[idx_efri]\n        j = 0\n        jM = len(cur)\n        idx_knfi = 0\n        list_0c6b = range(len(S))\n        while idx_knfi < len(list_0c6b):\n            k = list_0c6b[idx_knfi]\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_knfi = idx_knfi + 1\n        cur.sort(reverse=True)\n        idx_efri = idx_efri + 1\n    return (\"Yes\")\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "id": "For2While_sample_from_atcoder_ABC140_F_to_135", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_56ia = 0\nlist_32dn = range(n)\nwhile idx_56ia < len(list_32dn):\n    i = list_32dn[idx_56ia]\n    if i == 0:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            idx_uw9h = 0\n            list_4j5r = range(10)\n            while idx_uw9h < len(list_4j5r):\n                j = list_4j5r[idx_uw9h]\n                dp[i][j] += 1\n                idx_uw9h = idx_uw9h + 1\n    else:\n        if S[i] != '?':\n            idx_3u7f = 0\n            list_8j9d = range(13)\n            while idx_3u7f < len(list_8j9d):\n                k = list_8j9d[idx_3u7f]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_3u7f = idx_3u7f + 1\n        else:\n            idx_t3e4 = 0\n            list_rgoc = range(10)\n            while idx_t3e4 < len(list_rgoc):\n                j = list_rgoc[idx_t3e4]\n                idx_9v2a = 0\n                list_c23z = range(13)\n                while idx_9v2a < len(list_c23z):\n                    k = list_c23z[idx_9v2a]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_9v2a = idx_9v2a + 1\n                idx_t3e4 = idx_t3e4 + 1\n        idx_5dv9 = 0\n        list_7msu = range(13)\n        while idx_5dv9 < len(list_7msu):\n            k = list_7msu[idx_5dv9]\n            dp[i][k] %= mod\n            idx_5dv9 = idx_5dv9 + 1\n    idx_56ia = idx_56ia + 1\nprint(dp[n - 1][5])\n", "id": "For2While_sample_from_atcoder_ABC135_D_to_136", "old_id": "atcoder_ABC135_D"}
{"code": "x, y, z, k = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\nab = []\nidx_k2ph = 0\nlist_bdcs = range(x)\nwhile idx_k2ph < len(list_bdcs):\n    i = list_bdcs[idx_k2ph]\n    idx_vhfg = 0\n    list_gbqk = range(y)\n    while idx_vhfg < len(list_gbqk):\n        j = list_gbqk[idx_vhfg]\n        ab.append(a[i] + b[j])\n        idx_vhfg = idx_vhfg + 1\n    idx_k2ph = idx_k2ph + 1\nab.sort(reverse=True)\nabc = []\nidx_x467 = 0\nlist_f9aj = range(min(k, x * y))\nwhile idx_x467 < len(list_f9aj):\n    i = list_f9aj[idx_x467]\n    idx_a2yq = 0\n    list_l702 = range(z)\n    while idx_a2yq < len(list_l702):\n        j = list_l702[idx_a2yq]\n        abc.append(ab[i] + c[j])\n        idx_a2yq = idx_a2yq + 1\n    idx_x467 = idx_x467 + 1\nabc.sort(reverse=True)\nidx_fybh = 0\nlist_so0z = range(k)\nwhile idx_fybh < len(list_so0z):\n    i = list_so0z[idx_fybh]\n    print(abc[i])\n    idx_fybh = idx_fybh + 1\n", "id": "For2While_sample_from_atcoder_ABC123_D_to_137", "old_id": "atcoder_ABC123_D"}
{"code": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\nMOD = 10 ** 9 + 7\nN = int(input())\nA = list(map(int, input().split()))\n_lcm = 1\nidx_hjcs = 0\nlist_1xgd = A\nwhile idx_hjcs < len(list_1xgd):\n    a = list_1xgd[idx_hjcs]\n    _lcm = _lcm * a // gcd(_lcm, a)\n    idx_hjcs = idx_hjcs + 1\nans = _lcm * sum([pow(s, MOD - 2, MOD) for s in A]) % MOD\nprint(int(ans % MOD))\n", "id": "For2While_sample_from_atcoder_ABC152_E_to_138", "old_id": "atcoder_ABC152_E"}
{"code": "s = str(input())\nmy_str = ''\nidx_a7gz = 0\nlist_80tg = s\nwhile idx_a7gz < len(list_80tg):\n    c = list_80tg[idx_a7gz]\n    if c == '0' or c == '1':\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\n    idx_a7gz = idx_a7gz + 1\nprint(my_str)\n", "id": "For2While_sample_from_atcoder_ABC043_B_to_139", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nidx_racf = 0\nlist_t2xr = w\nwhile idx_racf < len(list_t2xr):\n    i = list_t2xr[idx_racf]\n    if i == 0:\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    idx_racf = idx_racf + 1\nprint(c // 2)\n", "id": "For2While_sample_from_codeforces_131_B_to_140", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_82zs = 0\nlist_35i0 = range(n)\nwhile idx_82zs < len(list_35i0):\n    i = list_35i0[idx_82zs]\n    if lst[i] not in l:\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] += 1\n    idx_82zs = idx_82zs + 1\nres = 0\nidx_xhkr = 0\nlist_96ih = range(n)\nwhile idx_xhkr < len(list_96ih):\n    i = list_96ih[idx_xhkr]\n    if l[lst[i]] > 1:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\n    idx_xhkr = idx_xhkr + 1\nprint(res)\n", "id": "For2While_sample_from_codeforces_609_B_to_141", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_e270 = 0\n    list_jlr7 = list(enumerate(it))\n    while idx_e270 < len(list_jlr7):\n        i, e = list_jlr7[idx_e270]\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n        idx_e270 = idx_e270 + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_m0ce = 0\nlist_orub = list(fac.items())\nwhile idx_m0ce < len(list_orub):\n    p, e = list_orub[idx_m0ce]\n    x = e\n    idx_dxen = 0\n    list_bqkn = range(1, 99999999)\n    while idx_dxen < len(list_bqkn):\n        i = list_bqkn[idx_dxen]\n        if x >= i:\n            x -= i\n            ans += 1\n        else:\n            break\n        idx_dxen = idx_dxen + 1\n    idx_m0ce = idx_m0ce + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC169_D_to_142", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_x9pz = 0\nlist_dsnl = range(0, n)\nwhile idx_x9pz < len(list_dsnl):\n    i = list_dsnl[idx_x9pz]\n    if i % 2 == 0:\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_x9pz = idx_x9pz + 1\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nidx_d1h6 = 0\nlist_m3ad = a\nwhile idx_d1h6 < len(list_m3ad):\n    i = list_m3ad[idx_d1h6]\n    cnta[i] += 1\n    idx_d1h6 = idx_d1h6 + 1\nidx_v4o8 = 0\nlist_k846 = a\nwhile idx_v4o8 < len(list_k846):\n    i = list_k846[idx_v4o8]\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\n    idx_v4o8 = idx_v4o8 + 1\nidx_vzm9 = 0\nlist_h2fo = a\nwhile idx_vzm9 < len(list_h2fo):\n    i = list_h2fo[idx_vzm9]\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_vzm9 = idx_vzm9 + 1\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nidx_73qy = 0\nlist_eht8 = b\nwhile idx_73qy < len(list_eht8):\n    i = list_eht8[idx_73qy]\n    cntb[i] += 1\n    idx_73qy = idx_73qy + 1\nidx_cywb = 0\nlist_fmew = b\nwhile idx_cywb < len(list_fmew):\n    i = list_fmew[idx_cywb]\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\n    idx_cywb = idx_cywb + 1\nidx_1pa0 = 0\nlist_8w6e = b\nwhile idx_1pa0 < len(list_8w6e):\n    i = list_8w6e[idx_1pa0]\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_1pa0 = idx_1pa0 + 1\nif valb != vala:\n    res = 0\n    idx_o73e = 0\n    list_1qpx = a\n    while idx_o73e < len(list_1qpx):\n        i = list_1qpx[idx_o73e]\n        if i != vala:\n            res += 1\n        idx_o73e = idx_o73e + 1\n    idx_5p19 = 0\n    list_buy5 = b\n    while idx_5p19 < len(list_buy5):\n        i = list_buy5[idx_5p19]\n        if i != valb:\n            res += 1\n        idx_5p19 = idx_5p19 + 1\n    print(res)\nelse:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    idx_03ku = 0\n    list_mn0w = a\n    while idx_03ku < len(list_mn0w):\n        i = list_mn0w[idx_03ku]\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n        idx_03ku = idx_03ku + 1\n    idx_wihf = 0\n    list_luys = b\n    while idx_wihf < len(list_luys):\n        i = list_luys[idx_wihf]\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n        idx_wihf = idx_wihf + 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "For2While_sample_from_atcoder_ABC111_C_to_143", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_zwym = 0\nlist_ceh4 = range(N)\nwhile idx_zwym < len(list_ceh4):\n    i = list_ceh4[idx_zwym]\n    if lst[i] == 0:\n        K -= 1\n    if lst[i] > 0:\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\n    idx_zwym = idx_zwym + 1\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    idx_bf7c = 0\n    list_eg34 = range(0, k + 1)\n    while idx_bf7c < len(list_eg34):\n        j = list_eg34[idx_bf7c]\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        idx_bf7c = idx_bf7c + 1\n    return ans\n\n\nprint(check(K))\n", "id": "For2While_sample_from_atcoder_ABC107_C_to_144", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_6v2y = 0\nlist_tnzx = list(enumerate(l))\nwhile idx_6v2y < len(list_tnzx):\n    i, c = list_tnzx[idx_6v2y]\n    if c == '0':\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_6v2y = idx_6v2y + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "For2While_sample_from_atcoder_ABC129_E_to_145", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_s75d = 0\nlist_cvri = l\nwhile idx_s75d < len(list_cvri):\n    i = list_cvri[idx_s75d]\n    if i % m == 0:\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\n    idx_s75d = idx_s75d + 1\nmx = max(l2)\nidx_umlc = 0\nlist_fgyw = range(n)\nwhile idx_umlc < len(list_fgyw):\n    i = list_fgyw[idx_umlc]\n    if l2[i] == mx:\n        ind = i\n    idx_umlc = idx_umlc + 1\nprint(ind + 1)\n", "id": "For2While_sample_from_codeforces_450_A_to_146", "old_id": "codeforces_450_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    idx_to19 = 0\n    list_keha = made_cout\n    while idx_to19 < len(list_keha):\n        color = list_keha[idx_to19]\n        if color not in bought_count:\n            return print(- 1)\n        res += min(bought_count[color], made_cout[color])\n        idx_to19 = idx_to19 + 1\n    print(res)\n\n\ndef main():\n    t = 1\n    idx_hxv8 = 0\n    list_8i25 = range(t)\n    while idx_hxv8 < len(list_8i25):\n        _ = list_8i25[idx_hxv8]\n        solution()\n        idx_hxv8 = idx_hxv8 + 1\n\n\nmain()\n", "id": "For2While_sample_from_codeforces_408_B_to_147", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nidx_ykej = 0\nlist_4t0m = range(N)\nwhile idx_ykej < len(list_4t0m):\n    i = list_4t0m[idx_ykej]\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_ykej = idx_ykej + 1\nif (mx == - 1):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n", "id": "For2While_sample_from_codeforces_56_B_to_148", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = 0\ncl = 0\nidx_w3uq = 0\nlist_ravy = txt\nwhile idx_w3uq < len(list_ravy):\n    z = list_ravy[idx_w3uq]\n    if z.islower():\n        cl = cl + 1\n    else:\n        cu = cu + 1\n    idx_w3uq = idx_w3uq + 1\nif cu > cl:\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "id": "For2While_sample_from_codeforces_59_A_to_149", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nidx_34o8 = 0\nlist_zouf = range(N - 1)\nwhile idx_34o8 < len(list_zouf):\n    _ = list_zouf[idx_34o8]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_34o8 = idx_34o8 + 1\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    idx_5lvm = 0\n    list_psex = adj[v]\n    while idx_5lvm < len(list_psex):\n        u = list_psex[idx_5lvm]\n        if seen[u] == 0:\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\n        idx_5lvm = idx_5lvm + 1\nseq = deque()\nidx_n3y0 = 0\nlist_2b7z = range(1, N + 1)\nwhile idx_n3y0 < len(list_2b7z):\n    i = list_2b7z[idx_n3y0]\n    if child_num[i] == 0:\n        seq.append(i)\n    idx_n3y0 = idx_n3y0 + 1\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0:\n        print('First')\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0:\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "For2While_sample_from_atcoder_AGC014_D_to_150", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nidx_ufwy = 0\nlist_kcda = range(n)\nwhile idx_ufwy < len(list_kcda):\n    i = list_kcda[idx_ufwy]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: 0})\n    if task.time > finish_time and remaining.empty():\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\n    idx_ufwy = idx_ufwy + 1\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_fr49 = 0\nlist_mx4t = result\nwhile idx_fr49 < len(list_mx4t):\n    key = list_mx4t[idx_fr49]\n    print(result.get(key))\n    idx_fr49 = idx_fr49 + 1\n", "id": "For2While_sample_from_codeforces_644_B_to_151", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nidx_3gx6 = 0\nlist_l2eb = range(m)\nwhile idx_3gx6 < len(list_l2eb):\n    i = list_l2eb[idx_3gx6]\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    idx_3gx6 = idx_3gx6 + 1\nc = 0\nidx_u7kc = 0\nlist_8fk0 = list(path.items())\nwhile idx_u7kc < len(list_8fk0):\n    i, v = list_8fk0[idx_u7kc]\n    f = 0\n    idx_enoq = 0\n    list_59cm = v\n    while idx_enoq < len(list_59cm):\n        j = list_59cm[idx_enoq]\n        if hp[i] <= hp[j]:\n            f = 1\n            break\n        idx_enoq = idx_enoq + 1\n    if f == 0:\n        c += 1\n    idx_u7kc = idx_u7kc + 1\nprint(c)\n", "id": "For2While_sample_from_atcoder_ABC166_C_to_152", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nidx_w2gn = 0\nlist_9byg = range(N - 1)\nwhile idx_w2gn < len(list_9byg):\n    i = list_9byg[idx_w2gn]\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n    idx_w2gn = idx_w2gn + 1\nmod = 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    idx_tvxw = 0\n    list_3n50 = graph[fro]\n    while idx_tvxw < len(list_3n50):\n        u = list_3n50[idx_tvxw]\n        if u == to:\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0:\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= 1\n        idx_tvxw = idx_tvxw + 1\n    return caseNum\n\n\nans = dfs(0, - 1, K)\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC133_E_to_153", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_j6so = 0\nlist_qaur = range(int(input()))\nwhile idx_j6so < len(list_qaur):\n    i = list_qaur[idx_j6so]\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == 'M':\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\n    idx_j6so = idx_j6so + 1\na, b, c = 0, 0, 0\nidx_vmzy = 0\nlist_ftx8 = range(N)\nwhile idx_vmzy < len(list_ftx8):\n    i = list_ftx8[idx_vmzy]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\n    idx_vmzy = idx_vmzy + 1\nprint(c)\n", "id": "For2While_sample_from_codeforces_629_B_to_154", "old_id": "codeforces_629_B"}
{"code": "LUCKY = \"abcd\"\nn = int(input())\ns = \"\"\nidx_q3cz = 0\nlist_pldz = range(n)\nwhile idx_q3cz < len(list_pldz):\n    i = list_pldz[idx_q3cz]\n    s += LUCKY[i % 4]\n    idx_q3cz = idx_q3cz + 1\nprint(s)\n", "id": "For2While_sample_from_codeforces_110_B_to_155", "old_id": "codeforces_110_B"}
{"code": "r, D, x = map(int, input().split())\nidx_x806 = 0\nlist_ybm6 = range(2, 12)\nwhile idx_x806 < len(list_ybm6):\n    i = list_ybm6[idx_x806]\n    print(int((r ** (i - 1)) * (x + D / (1 - r)) - D / (1 - r)))\n    idx_x806 = idx_x806 + 1\n", "id": "For2While_sample_from_atcoder_ABC127_B_to_156", "old_id": "atcoder_ABC127_B"}
{"code": "n = int(input())\ninput_array = []\nidx_z7rk = 0\nlist_pf5j = range(n)\nwhile idx_z7rk < len(list_pf5j):\n    i = list_pf5j[idx_z7rk]\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\n    idx_z7rk = idx_z7rk + 1\noutdated = []\nidx_t6o1 = 0\nlist_ry2x = range(n)\nwhile idx_t6o1 < len(list_ry2x):\n    i = list_ry2x[idx_t6o1]\n    idx_szi2 = 0\n    list_a9bc = range(n)\n    while idx_szi2 < len(list_a9bc):\n        j = list_a9bc[idx_szi2]\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]):\n            outdated.append(input_array[i])\n        idx_szi2 = idx_szi2 + 1\n    idx_t6o1 = idx_t6o1 + 1\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nidx_ax7n = 0\nlist_t7sz = range(n)\nwhile idx_ax7n < len(list_t7sz):\n    i = list_t7sz[idx_ax7n]\n    current_item = input_array[i]\n    cost = current_item[3]\n    if (current_item not in outdated and cost < minimum_cost):\n        minimum_cost = current_item[3]\n        input_number = i + 1\n    idx_ax7n = idx_ax7n + 1\nprint(input_number)\n", "id": "For2While_sample_from_codeforces_106_B_to_157", "old_id": "codeforces_106_B"}
{"code": "s, l = (input(), 2019)\nm, a, r = ([1] + [0] * l, 0, 0)\nidx_9slz = 0\nlist_u2yd = list(enumerate(s[:: - 1]))\nwhile idx_9slz < len(list_u2yd):\n    i, e = list_u2yd[idx_9slz]\n    a += int(e) * pow(10, i, l)\n    r += m[a % l]\n    m[a % l] += 1\n    idx_9slz = idx_9slz + 1\nprint(r)\n", "id": "For2While_sample_from_atcoder_ABC164_D_to_158", "old_id": "atcoder_ABC164_D"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nidx_qsr0 = 0\nlist_23p4 = range(t)\nwhile idx_qsr0 < len(list_23p4):\n    i = list_23p4[idx_qsr0]\n    op = input().split()\n    if op[0] == 'alloc':\n        pos = 0\n        idx_t13c = 0\n        list_db1c = range(m)\n        while idx_t13c < len(list_db1c):\n            j = list_db1c[idx_t13c]\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n            idx_t13c = idx_t13c + 1\n    if op[0] == 'erase':\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_cbmr = 0\n            list_wiob = range(m)\n            while idx_cbmr < len(list_wiob):\n                j = list_wiob[idx_cbmr]\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n                idx_cbmr = idx_cbmr + 1\n    if op[0] == \"defragment\":\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        idx_n24g = 0\n        list_ht6a = range(cnt)\n        while idx_n24g < len(list_ht6a):\n            j = list_ht6a[idx_n24g]\n            alocuente.append(0)\n            idx_n24g = idx_n24g + 1\n    idx_qsr0 = idx_qsr0 + 1\n", "id": "For2While_sample_from_codeforces_7_B_to_159", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    idx_07du = 0\n    list_sblq = range(n)\n    while idx_07du < len(list_sblq):\n        i = list_sblq[idx_07du]\n        count[i] = [0] * n\n        idx_07du = idx_07du + 1\n    ans = - 1\n    idx_5pvn = 0\n    list_tezo = range(m)\n    while idx_5pvn < len(list_tezo):\n        k = list_tezo[idx_5pvn]\n        x, y = map(int, input().split())\n        x -= 1\n        y -= 1\n        found = False\n        idx_qf1t = 0\n        list_590u = range(x - 2, x + 1)\n        while idx_qf1t < len(list_590u):\n            i = list_590u[idx_qf1t]\n            idx_hj43 = 0\n            list_skm8 = range(y - 2, y + 1)\n            while idx_hj43 < len(list_skm8):\n                j = list_skm8[idx_hj43]\n                if i >= 0 and i < n and j >= 0 and j < n:\n                    count[i][j] += 1\n                    if count[i][j] == 9:\n                        found = True\n                idx_hj43 = idx_hj43 + 1\n            idx_qf1t = idx_qf1t + 1\n        if found:\n            ans = k + 1\n            break\n        idx_5pvn = idx_5pvn + 1\n    print(ans)\n\n\nsolve_case()\n", "id": "For2While_sample_from_codeforces_203_B_to_160", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nidx_i21e = 0\nlist_r4kb = pre + 1\nwhile idx_i21e < len(list_r4kb):\n    i = list_r4kb[idx_i21e]\n    idx_f4vw = 0\n    list_4s7m = itertools.combinations(pre, i)\n    while idx_f4vw < len(list_4s7m):\n        j = list_4s7m[idx_f4vw]\n        l.append(list(j))\n        idx_f4vw = idx_f4vw + 1\n    idx_i21e = idx_i21e + 1\nidx_kr98 = 0\nlist_49z8 = range(1, m + 1)\nwhile idx_kr98 < len(list_49z8):\n    i = list_49z8[idx_kr98]\n    idx_ikv5 = 0\n    list_spxo = list(enumerate(l))\n    while idx_ikv5 < len(list_spxo):\n        j, k = list_spxo[idx_ikv5]\n        ca = 0\n        idx_m5ft = 0\n        list_zkiv = k\n        while idx_m5ft < len(list_zkiv):\n            ii = list_zkiv[idx_m5ft]\n            ca += c[ii, i]\n            idx_m5ft = idx_m5ft + 1\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n        idx_ikv5 = idx_ikv5 + 1\n    if len(rem) > 0:\n        idx_v8um = 0\n        list_8eus = rem\n        while idx_v8um < len(list_8eus):\n            j = list_8eus[idx_v8um]\n            l.pop(j)\n            idx_v8um = idx_v8um + 1\n        rem = []\n    if len(l) == 0:\n        print(- 1)\n        break\n    idx_kr98 = idx_kr98 + 1\n", "id": "For2While_sample_from_atcoder_ABC167_C_to_161", "old_id": "atcoder_ABC167_C"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nidx_g54j = 0\nlist_25zu = a\nwhile idx_g54j < len(list_25zu):\n    i = list_25zu[idx_g54j]\n    cnt[i] += 1\n    idx_g54j = idx_g54j + 1\nidx_tdys = 0\nlist_dql0 = range(1, n + 1)\nwhile idx_tdys < len(list_dql0):\n    i = list_dql0[idx_tdys]\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_tdys = idx_tdys + 1\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "For2While_sample_from_codeforces_350_B_to_162", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns += 1\n        idx_f2pm = 0\n        list_gnbl = range(len(a))\n        while idx_f2pm < len(list_gnbl):\n            i = list_gnbl[idx_f2pm]\n            if a[i] != - 1 and a[i] <= counter:\n                counter += 1\n                a[i] = - 1\n            idx_f2pm = idx_f2pm + 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "For2While_sample_from_codeforces_583_B_to_163", "old_id": "codeforces_583_B"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nidx_kstz = 0\nlist_7ony = range(n)\nwhile idx_kstz < len(list_7ony):\n    i = list_7ony[idx_kstz]\n    b[a[i] - 1] = i\n    idx_kstz = idx_kstz + 1\nres = 0\nidx_01h7 = 0\nlist_a0it = range(1, n)\nwhile idx_01h7 < len(list_a0it):\n    i = list_a0it[idx_01h7]\n    res += abs(b[i] - b[i - 1])\n    idx_01h7 = idx_01h7 + 1\nprint(res)\n", "id": "For2While_sample_from_codeforces_612_B_to_164", "old_id": "codeforces_612_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nidx_g4ot = 0\nlist_04hi = range(1, n)\nwhile idx_g4ot < len(list_04hi):\n    i = list_04hi[idx_g4ot]\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\n    idx_g4ot = idx_g4ot + 1\nprint(- 1 if id == n else id + 1)\n", "id": "For2While_sample_from_codeforces_242_B_to_165", "old_id": "codeforces_242_B"}
{"code": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\n\nN = ri()\nans = 0\nidx_qg78 = 0\nlist_5ekx = range(1, N + 1)\nwhile idx_qg78 < len(list_5ekx):\n    i = list_5ekx[idx_qg78]\n    ans += i * (N // i) * (N // i + 1) // 2\n    idx_qg78 = idx_qg78 + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC172_D_to_166", "old_id": "atcoder_ABC172_D"}
{"code": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\nN, M = [int(x) for x in stdin.readline().split()]\nA = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\ncum_remainders = (np.hstack([0, A]) % M).cumsum() % M\nremainder_counts = Counter(cum_remainders)\ncombinations = 0\nidx_rozi = 0\nlist_yj1a = remainder_counts.values()\nwhile idx_rozi < len(list_yj1a):\n    count = list_yj1a[idx_rozi]\n    combinations += count * (count - 1) // 2\n    idx_rozi = idx_rozi + 1\nprint(combinations)\n", "id": "For2While_sample_from_atcoder_ABC105_D_to_167", "old_id": "atcoder_ABC105_D"}
{"code": "a, b = map(int, input().split())\nc = 0\nidx_18yc = 0\nlist_2fks = range(2)\nwhile idx_18yc < len(list_2fks):\n    i = list_2fks[idx_18yc]\n    c += max(a, b)\n    if a >= b:\n        a -= 1\n    else:\n        b -= 1\n    idx_18yc = idx_18yc + 1\nprint(c)\n", "id": "For2While_sample_from_atcoder_ABC124_A_to_168", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != 1:\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    idx_foc0 = 0\n    list_hwtu = ip\n    while idx_foc0 < len(list_hwtu):\n        i = list_hwtu[idx_foc0]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_foc0 = idx_foc0 + 1\nelse:\n    st = ip\nprint(int(st))\n", "id": "For2While_sample_from_codeforces_514_A_to_169", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    idx_y49s = 0\n    list_k5mq = s\n    while idx_y49s < len(list_k5mq):\n        c = list_k5mq[idx_y49s]\n        if c != '1':\n            break\n        l += 1\n        idx_y49s = idx_y49s + 1\n    if l >= k:\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "For2While_sample_from_atcoder_ABC106_C_to_170", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nidx_9rpg = 0\nlist_f4wq = range(q)\nwhile idx_9rpg < len(list_f4wq):\n    _ = list_f4wq[idx_9rpg]\n    ql = list(map(int, input().split()))\n    if ql[0] == 2:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    idx_9rpg = idx_9rpg + 1\n", "id": "For2While_sample_from_atcoder_ABC127_F_to_171", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_6df0 = 0\n    list_hprl = pieces\n    while idx_6df0 < len(list_hprl):\n        piece = list_hprl[idx_6df0]\n        if piece[1] == 'A':\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n        idx_6df0 = idx_6df0 + 1\n    idx_8itu = 0\n    list_7qiy = range(len(pieces) - 1, - 1, - 1)\n    while idx_8itu < len(list_7qiy):\n        i = list_7qiy[idx_8itu]\n        if pieces[i][1] == 'A':\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n        idx_8itu = idx_8itu + 1\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "For2While_sample_from_codeforces_632_B_to_172", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_v1q5 = 0\n    list_vjf5 = s\n    while idx_v1q5 < len(list_vjf5):\n        i = list_vjf5[idx_v1q5]\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n        idx_v1q5 = idx_v1q5 + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_9kns = 0\n    list_u4wx = range(3)\n    while idx_9kns < len(list_u4wx):\n        i = list_u4wx[idx_9kns]\n        l.append(f(input()))\n        idx_9kns = idx_9kns + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_1y26 = 0\n    list_ixed = t\n    while idx_1y26 < len(list_ixed):\n        i = list_ixed[idx_1y26]\n        l.append(\"\".join(i))\n        idx_1y26 = idx_1y26 + 1\n    idx_hk0c = 0\n    list_xspe = range(inp())\n    while idx_hk0c < len(list_xspe):\n        i = list_xspe[idx_hk0c]\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\n        idx_hk0c = idx_hk0c + 1\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "For2While_sample_from_codeforces_61_B_to_173", "old_id": "codeforces_61_B"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float('inf')\nans = 0\na.sort(reverse=True)\nidx_3x81 = 0\nlist_ftg3 = range(n)\nwhile idx_3x81 < len(list_ftg3):\n    j = list_ftg3[idx_3x81]\n    ans += max(0, min(pre - 1, a[j]))\n    pre = max(0, min(pre - 1, a[j]))\n    idx_3x81 = idx_3x81 + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_624_B_to_174", "old_id": "codeforces_624_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2:\n    print(\"No\")\n    exit()\nidx_10la = 0\nlist_w2ku = Sa\nwhile idx_10la < len(list_w2ku):\n    i = list_w2ku[idx_10la]\n    if c[i] != 2:\n        print(\"No\")\n        exit()\n    idx_10la = idx_10la + 1\nprint(\"Yes\")\n", "id": "For2While_sample_from_atcoder_ABC132_A_to_175", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_axjp = 0\n    list_9ofs = range(n)\n    while idx_axjp < len(list_9ofs):\n        i = list_9ofs[idx_axjp]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_axjp = idx_axjp + 1\n    low.sort()\n    high.sort()\n    if n % 2:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "For2While_sample_from_atcoder_ABC169_E_to_176", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nidx_1z5s = 0\nlist_23j1 = range(n)\nwhile idx_1z5s < len(list_23j1):\n    i = list_23j1[idx_1z5s]\n    a, b = map(int, input().split())\n    l[a] = b\n    idx_1z5s = idx_1z5s + 1\nif l[0] > 0:\n    dp[0] = 1\nmx = 0\nidx_p90o = 0\nlist_gwof = range(1, 1000010)\nwhile idx_p90o < len(list_gwof):\n    i = list_gwof[idx_p90o]\n    if (l[i] == 0):\n        dp[i] = dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    if (dp[i] > mx):\n        mx = dp[i]\n    idx_p90o = idx_p90o + 1\nprint(n - mx)\n", "id": "For2While_sample_from_codeforces_607_A_to_177", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open(0).read().split())\nXY = list(zip(* [iter(XY)] * 2))\nidx_sh9m = 0\nlist_yscv = list(enumerate(XY))\nwhile idx_sh9m < len(list_yscv):\n    i, (x, y) = list_yscv[idx_sh9m]\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0\n    idx_1zge = 0\n    list_5af7 = zip(D, D[1:])\n    while idx_1zge < len(list_5af7):\n        a, b = list_5af7[idx_1zge]\n        if b - a >= pi:\n            ans = (b - a) - pi\n        idx_1zge = idx_1zge + 1\n    print(ans / (2 * pi))\n    idx_sh9m = idx_sh9m + 1\n", "id": "For2While_sample_from_atcoder_AGC021_B_to_178", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nidx_vgoc = 0\nlist_0721 = range(1, N + 1)\nwhile idx_vgoc < len(list_0721):\n    i = list_0721[idx_vgoc]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_vgoc = idx_vgoc + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nidx_rqb2 = 0\nlist_yeoz = range(0, T)\nwhile idx_rqb2 < len(list_yeoz):\n    t = list_yeoz[idx_rqb2]\n    dp[0][t] = 0\n    idx_rqb2 = idx_rqb2 + 1\nidx_9ur7 = 0\nlist_l17i = range(1, N + 1)\nwhile idx_9ur7 < len(list_l17i):\n    n = list_l17i[idx_9ur7]\n    dp[n][0] = 0\n    idx_6yma = 0\n    list_yskx = range(1, T)\n    while idx_6yma < len(list_yskx):\n        t = list_yskx[idx_6yma]\n        if time_value[n][TIME] > t:\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        idx_6yma = idx_6yma + 1\n    idx_9ur7 = idx_9ur7 + 1\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nidx_ov94 = 0\nlist_28up = range(N - 1, 0, - 1)\nwhile idx_ov94 < len(list_28up):\n    n = list_28up[idx_ov94]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if t < 0:\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    idx_ov94 = idx_ov94 + 1\nprint(max_val)\n", "id": "For2While_sample_from_atcoder_ABC145_E_to_179", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_r3q8 = 0\n    list_lfbt = range(H)\n    while idx_r3q8 < len(list_lfbt):\n        i = list_lfbt[idx_r3q8]\n        idx_20o3 = 0\n        list_4o73 = range(W)\n        while idx_20o3 < len(list_4o73):\n            j = list_4o73[idx_20o3]\n            if i < B:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            idx_20o3 = idx_20o3 + 1\n        idx_r3q8 = idx_r3q8 + 1\n    idx_av2o = 0\n    list_5jy9 = range(H)\n    while idx_av2o < len(list_5jy9):\n        i = list_5jy9[idx_av2o]\n        print(''.join(answer[i]))\n        idx_av2o = idx_av2o + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_qzk9 = 0\n        list_k1j5 = sys.stdin\n        while idx_qzk9 < len(list_k1j5):\n            line = list_k1j5[idx_qzk9]\n            idx_e09o = 0\n            list_ejqs = line.split()\n            while idx_e09o < len(list_ejqs):\n                word = list_ejqs[idx_e09o]\n                yield word\n                idx_e09o = idx_e09o + 1\n            idx_qzk9 = idx_qzk9 + 1\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_atcoder_AGC038_A_to_180", "old_id": "atcoder_AGC038_A"}
