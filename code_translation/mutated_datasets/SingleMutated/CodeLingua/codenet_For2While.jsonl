{"code": "s = list(input())\nmods = [0]*(len(s))\ncountRemainder = [0] * 2019\ncnt = 0\n\n\nm = 1\nmod = 0\nidx_a3ou = 0\nlist_sfbc = range(len(s))\nwhile idx_a3ou < len(list_sfbc):\n    i = list_sfbc[idx_a3ou]\n    mod += int(s[len(s) - i - 1]) * m\n\n    mod %= 2019\n    m *= 10\n    m %= 2019\n\n    countRemainder[mod] += 1\n    idx_a3ou = idx_a3ou + 1\n\ncountRemainder[0] += 1\nidx_q0ez = 0\nlist_ugis = range(2019)\nwhile idx_q0ez < len(list_ugis):\n    i = list_ugis[idx_q0ez]\n    cnt += int(countRemainder[i] * (countRemainder[i] - 1) / 2)\n    idx_q0ez = idx_q0ez + 1\n\nprint(cnt)\n", "id": "For2While_sample_from_s752993784_to_0", "old_id": "s752993784"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_g94q = 0\nlist_90ni = range(m)\nwhile idx_g94q < len(list_90ni):\n    i = list_90ni[idx_g94q]\n    p, x = map(int, input().split())\n    s = 0\n    idx_cs2b = 0\n    list_u5lt = range(len(t))\n    while idx_cs2b < len(list_u5lt):\n        j = list_u5lt[idx_cs2b]\n        if j == p-1:\n            s += x\n        else:\n            s += t[j]\n        idx_cs2b = idx_cs2b + 1\n    print(s)\n    idx_g94q = idx_g94q + 1\n", "id": "For2While_sample_from_s609392609_to_1", "old_id": "s609392609"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    idx_32yc = 0\n    list_vgw1 = V.get(i, [])\n    while idx_32yc < len(list_vgw1):\n        v, w = list_vgw1[idx_32yc]\n        if (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n        idx_32yc = idx_32yc + 1\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    idx_myps = 0\n    list_9vah = range(1, n)\n    while idx_myps < len(list_9vah):\n        i = list_9vah[idx_myps]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_myps = idx_myps + 1\n    idx_342f = 0\n    list_52xz = range(1, n+1)\n    while idx_342f < len(list_52xz):\n        i = list_52xz[idx_342f]\n        color[i] = -1\n        idx_342f = idx_342f + 1\n\n    while True:\n        i = 0\n        idx_jfg8 = 0\n        list_s56e = range(1, n+1)\n        while idx_jfg8 < len(list_s56e):\n            j = list_s56e[idx_jfg8]\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n            idx_jfg8 = idx_jfg8 + 1\n        if i == 0:\n            idx_28bo = 0\n            list_zlxe = range(1, n+1)\n            while idx_28bo < len(list_zlxe):\n                j = list_zlxe[idx_28bo]\n                print(color[j])\n                idx_28bo = idx_28bo + 1\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "For2While_sample_from_s908812767_to_2", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < 26:\n    idx_4dnx = 0\n    list_2l8f = range(26)\n    while idx_4dnx < len(list_2l8f):\n        i = list_2l8f[idx_4dnx]\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_4dnx = idx_4dnx + 1\nelse:\n    idx_ctue = 0\n    list_smq4 = reversed(range(1, 26))\n    while idx_ctue < len(list_smq4):\n        i = list_smq4[idx_ctue]\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            idx_a5k6 = 0\n            list_vhjo = range(26)\n            while idx_a5k6 < len(list_vhjo):\n                j = list_vhjo[idx_a5k6]\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_a5k6 = idx_a5k6 + 1\n        idx_ctue = idx_ctue + 1\n    print(-1)\n", "id": "For2While_sample_from_s504709360_to_3", "old_id": "s504709360"}
{"code": "N = int(input())\nA = []\nidx_46xb = 0\nlist_53dx = range(2)\nwhile idx_46xb < len(list_53dx):\n    _ = list_53dx[idx_46xb]\n    s = list(map(int, input().split()))\n    A.append(s)\n    idx_46xb = idx_46xb + 1\n\n\nans = []\n\ncount = 0\nidx_et1u = 0\nlist_wmje = range(N)\nwhile idx_et1u < len(list_wmje):\n    i = list_wmje[idx_et1u]\n    baselis = A[0]\n    groundlis = A[1]\n    count = 0\n    count = count + sum(baselis[0:i+1]) + sum(groundlis[i:N+1])\n    ans.append(count)\n    idx_et1u = idx_et1u + 1\n\nprint(max(ans))\n", "id": "For2While_sample_from_s170274782_to_4", "old_id": "s170274782"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = 10 ** 18\nidx_yof5 = 0\nlist_q8rh = range(1, int(n ** (1 / 2)) + 2)\nwhile idx_yof5 < len(list_q8rh):\n    i = list_q8rh[idx_yof5]\n    if n % i != 0:\n        continue\n    j = n // i\n    ans = min(ans, i + j - 2)\n    idx_yof5 = idx_yof5 + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s662673721_to_5", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nidx_9wps = 0\nlist_il07 = range(1, K+1)\nwhile idx_9wps < len(list_il07):\n    i = list_il07[idx_9wps]\n    if N - K + 1 < i:\n        ans = 0\n    else:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    print(int(ans) % mod)\n    idx_9wps = idx_9wps + 1\n", "id": "For2While_sample_from_s790754864_to_6", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    idx_3nzd = 0\n    list_fk3x = zip(a, b)\n    while idx_3nzd < len(list_fk3x):\n        i, j = list_fk3x[idx_3nzd]\n        s += i != j\n        idx_3nzd = idx_3nzd + 1\n    return s\n\n\nans = 10**6\nidx_lsyn = 0\nlist_sqav = range(len(s))\nwhile idx_lsyn < len(list_sqav):\n    i = list_sqav[idx_lsyn]\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\n    idx_lsyn = idx_lsyn + 1\nprint(ans)\n", "id": "For2While_sample_from_s636719275_to_7", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nidx_q3nt = 0\nlist_tw6s = range(1, N+1)\nwhile idx_q3nt < len(list_tw6s):\n    i = list_tw6s[idx_q3nt]\n    aji.append(L+i-1)\n    idx_q3nt = idx_q3nt + 1\nif min(aji) >= 0:\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= 0:\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "id": "For2While_sample_from_s240532461_to_8", "old_id": "s240532461"}
{"code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nidx_hxyw = 0\nlist_yca0 = range(min(x+y, a+b, c))\nwhile idx_hxyw < len(list_yca0):\n    i = list_yca0[idx_hxyw]\n    if pq[i] < r[i]:\n        pq[i] = r[i]\n    idx_hxyw = idx_hxyw + 1\nprint(sum(pq))\n", "id": "For2While_sample_from_s828550015_to_9", "old_id": "s828550015"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-1)**i) for i in range(n)]) / 2)\n\nresult = str(m1)\n\nm = [None] * n\nm[0] = m1\nidx_0x1u = 0\nlist_oec8 = range(1, n)\nwhile idx_0x1u < len(list_oec8):\n    i = list_oec8[idx_0x1u]\n    m[i] = a[i-1] - m[i-1]\n    idx_0x1u = idx_0x1u + 1\n\nprint(' '.join([str(x*2) for x in m]))\n", "id": "For2While_sample_from_s225615697_to_10", "old_id": "s225615697"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nidx_rq4y = 0\nlist_v9td = A[:M]\nwhile idx_rq4y < len(list_v9td):\n    a = list_v9td[idx_rq4y]\n    if a/S - 1/(4*M) < 0:\n        print('No')\n        break\n    idx_rq4y = idx_rq4y + 1\n", "id": "For2While_sample_from_s846046431_to_11", "old_id": "s846046431"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nidx_c8pq = 0\nlist_yc0r = range(q)\nwhile idx_c8pq < len(list_yc0r):\n    _ = list_yc0r[idx_c8pq]\n    t = list(map(int, input().split()))\n    if t[0] == 1:\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    idx_c8pq = idx_c8pq + 1\n", "id": "For2While_sample_from_s016605598_to_12", "old_id": "s016605598"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nidx_4ryt = 0\nlist_dynv = range(Q)\nwhile idx_4ryt < len(list_dynv):\n    _ = list_dynv[idx_4ryt]\n    Q_groups.append([*LI()])\n    idx_4ryt = idx_4ryt + 1\n\nmax_score = 0\nidx_vkud = 0\nlist_b20c = combinations_with_replacement(range(1, M + 1), r=N)\nwhile idx_vkud < len(list_b20c):\n    p = list_b20c[idx_vkud]\n    temp_score = 0\n    idx_k83q = 0\n    list_g98m = Q_groups\n    while idx_k83q < len(list_g98m):\n        q = list_g98m[idx_k83q]\n        if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n            temp_score += q[3]\n        idx_k83q = idx_k83q + 1\n    max_score = max(max_score, temp_score)\n    idx_vkud = idx_vkud + 1\n\nprint(max_score)\n", "id": "For2While_sample_from_s269975433_to_13", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nidx_jx50 = 0\nlist_yta4 = range(len(strn))\nwhile idx_jx50 < len(list_yta4):\n    i = list_yta4[idx_jx50]\n    if i == 0:\n        idx_50fw = 0\n        list_m15o = shichigolist\n        while idx_50fw < len(list_m15o):\n            j = list_m15o[idx_50fw]\n            shichigo[i].append(j)\n            idx_50fw = idx_50fw + 1\n    else:\n        idx_0vi4 = 0\n        list_dhin = shichigo[i-1]\n        while idx_0vi4 < len(list_dhin):\n            j = list_dhin[idx_0vi4]\n            idx_gven = 0\n            list_2k9w = shichigolist\n            while idx_gven < len(list_2k9w):\n                k = list_2k9w[idx_gven]\n                shichigo[i].append(j+k)\n                idx_gven = idx_gven + 1\n            idx_0vi4 = idx_0vi4 + 1\n    idx_jx50 = idx_jx50 + 1\ntarget = len(strn)-1\nidx_awhd = 0\nlist_iu61 = range(len(strn))\nwhile idx_awhd < len(list_iu61):\n    i = list_iu61[idx_awhd]\n    idx_fc0w = 0\n    list_453z = shichigo[i][:]\n    while idx_fc0w < len(list_453z):\n        j = list_453z[idx_fc0w]\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n        idx_fc0w = idx_fc0w + 1\n    idx_awhd = idx_awhd + 1\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "For2While_sample_from_s949655009_to_14", "old_id": "s949655009"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\nidx_yuw3 = 0\nlist_cino = range(N - 1, -1, -1)\nwhile idx_yuw3 < len(list_cino):\n    i = list_cino[idx_yuw3]\n    tmp_sum = 0\n    idx_ys8z = 0\n    list_wpnd = range((i + 1) * 2 - 1, N, i + 1)\n    while idx_ys8z < len(list_wpnd):\n        j = list_wpnd[idx_ys8z]\n        tmp_sum += B[j]\n        tmp_sum %= 2\n        idx_ys8z = idx_ys8z + 1\n    B[i] = tmp_sum ^ A[i]\n    idx_yuw3 = idx_yuw3 + 1\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "id": "For2While_sample_from_s103029464_to_15", "old_id": "s103029464"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nidx_ejdb = 0\nlist_xchf = range(len(alphabets))\nwhile idx_ejdb < len(list_xchf):\n    i = list_xchf[idx_ejdb]\n    if alphabets[i] == s:\n        print(alphabets[i+1])\n    idx_ejdb = idx_ejdb + 1\n", "id": "For2While_sample_from_s961772658_to_16", "old_id": "s961772658"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        idx_p08m = 0\n        list_ga1u = range(first, end+1)\n        while idx_p08m < len(list_ga1u):\n            s_i = list_ga1u[idx_p08m]\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += 1\n            idx_p08m = idx_p08m + 1\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    idx_dtns = 0\n    list_43za = range(first, end+1)\n    while idx_dtns < len(list_43za):\n        i = list_43za[idx_dtns]\n        ans[i] = T[t_i]\n        t_i += 1\n        idx_dtns = idx_dtns + 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "id": "For2While_sample_from_s826716211_to_17", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nidx_weq9 = 0\nlist_pruq = range(N)\nwhile idx_weq9 < len(list_pruq):\n    d = list_pruq[idx_weq9]\n    mat.append([int(x) for x in input().split()])\n    idx_weq9 = idx_weq9 + 1\n\nc = 0\nidx_h76p = 0\nlist_uye2 = range(len(mat)-1)\nwhile idx_h76p < len(list_uye2):\n    i = list_uye2[idx_h76p]\n    idx_joya = 0\n    list_m1k2 = range(i+1, len(mat))\n    while idx_joya < len(list_m1k2):\n        j = list_m1k2[idx_joya]\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist:\n            c += 1\n        idx_joya = idx_joya + 1\n    idx_h76p = idx_h76p + 1\nprint(c)\n", "id": "For2While_sample_from_s663509070_to_18", "old_id": "s663509070"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nidx_nl9m = 0\nlist_4r0m = range(2**(h+w))\nwhile idx_nl9m < len(list_4r0m):\n    i = list_4r0m[idx_nl9m]\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    idx_oqz9 = 0\n    list_0yhs = range(h)\n    while idx_oqz9 < len(list_0yhs):\n        l = list_0yhs[idx_oqz9]\n        idx_quwo = 0\n        list_5elt = range(w)\n        while idx_quwo < len(list_5elt):\n            k = list_5elt[idx_quwo]\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0':\n                ct += 1\n            idx_quwo = idx_quwo + 1\n        idx_oqz9 = idx_oqz9 + 1\n    if ct == ka:\n        ans += 1\n    idx_nl9m = idx_nl9m + 1\nprint(ans)\n", "id": "For2While_sample_from_s760938927_to_19", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nidx_onxm = 0\nlist_pteq = qs\nwhile idx_onxm < len(list_pteq):\n    operation = list_pteq[idx_onxm]\n    if operation[0] == '1':\n        n = not n\n    if operation[0] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\n    idx_onxm = idx_onxm + 1\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "For2While_sample_from_s621701371_to_20", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_dcn7 = 0\n    list_54jv = range(0, n)\n    while idx_dcn7 < len(list_54jv):\n        i = list_54jv[idx_dcn7]\n        idx_8jnm = 0\n        list_jy4e = range(n-1, i, -1)\n        while idx_8jnm < len(list_jy4e):\n            j = list_jy4e[idx_8jnm]\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n            idx_8jnm = idx_8jnm + 1\n        idx_dcn7 = idx_dcn7 + 1\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_fbw8 = 0\n    list_mfyr = range(0, n)\n    while idx_fbw8 < len(list_mfyr):\n        i = list_mfyr[idx_fbw8]\n        mini = i\n        idx_cu4o = 0\n        list_jni4 = range(i, n)\n        while idx_cu4o < len(list_jni4):\n            j = list_jni4[idx_cu4o]\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n            idx_cu4o = idx_cu4o + 1\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_fbw8 = idx_fbw8 + 1\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "id": "For2While_sample_from_s875904659_to_21", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    idx_1fso = 0\n    list_tx8n = range(len(li))\n    while idx_1fso < len(list_tx8n):\n        i = list_tx8n[idx_1fso]\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_5qg4 = 0\n        list_kut5 = sub_list\n        while idx_5qg4 < len(list_kut5):\n            sub = list_kut5[idx_5qg4]\n            sub.appendleft(li[i])\n            idx_5qg4 = idx_5qg4 + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_1fso = idx_1fso + 1\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_nr2w = 0\n    list_1rhn = range(len(li)-1, -1, -1)\n    while idx_nr2w < len(list_1rhn):\n        i = list_1rhn[idx_nr2w]\n        n += li[i] * base\n        base *= 10\n        idx_nr2w = idx_nr2w + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_dwlv = 0\n    list_gc1t = range(len(li))\n    while idx_dwlv < len(list_gc1t):\n        i = list_gc1t[idx_dwlv]\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        idx_xp0e = 0\n        list_a5uh = range(i+1, len(li))\n        while idx_xp0e < len(list_a5uh):\n            j = list_a5uh[idx_xp0e]\n            if li[j] % li[i] == 0:\n                li[j] = -1\n            idx_xp0e = idx_xp0e + 1\n        idx_dwlv = idx_dwlv + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_gwy2 = 0\n    list_zg27 = range(0, (1 << (n+1)))\n    while idx_gwy2 < len(list_zg27):\n        bit = list_zg27[idx_gwy2]\n        ss = set()\n        idx_c87d = 0\n        list_3ua4 = range(0, n)\n        while idx_c87d < len(list_3ua4):\n            i = list_3ua4[idx_c87d]\n            if (bit & (1 << i)):\n                ss.add(li[i])\n            idx_c87d = idx_c87d + 1\n        s.append(ss)\n        idx_gwy2 = idx_gwy2 + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "id": "For2While_sample_from_s137613418_to_22", "old_id": "s137613418"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = 1\nidx_oy39 = 0\nlist_gjty = A\nwhile idx_oy39 < len(list_gjty):\n    i = list_gjty[idx_oy39]\n    B[i-1] = count\n    count += 1\n    idx_oy39 = idx_oy39 + 1\n\n\nprint(*B)\n", "id": "For2While_sample_from_s273727373_to_23", "old_id": "s273727373"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\nidx_d14x = 0\nlist_xko6 = range(n)\nwhile idx_d14x < len(list_xko6):\n    i = list_xko6[idx_d14x]\n    idx_doh5 = 0\n    list_51kh = range(n)\n    while idx_doh5 < len(list_51kh):\n        d = list_51kh[idx_doh5]\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\n        idx_doh5 = idx_doh5 + 1\n    idx_d14x = idx_d14x + 1\nprint(ans)\n", "id": "For2While_sample_from_s922746568_to_24", "old_id": "s922746568"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    idx_27gm = 0\n    list_hldg = range(0, len(input_value) + 1 - n)\n    while idx_27gm < len(list_hldg):\n        i = list_hldg[idx_27gm]\n        idx_o4vn = 0\n        list_rln6 = range(1, n)\n        while idx_o4vn < len(list_rln6):\n            j = list_rln6[idx_o4vn]\n            if input_value[i] != input_value[i + j]:\n                break\n            if j == n - 1:\n                return \"Yes\"\n            idx_o4vn = idx_o4vn + 1\n        idx_27gm = idx_27gm + 1\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "For2While_sample_from_s616346400_to_25", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_x301 = 0\nlist_zoe2 = range(n)\nwhile idx_x301 < len(list_zoe2):\n    i = list_zoe2[idx_x301]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_x301 = idx_x301 + 1\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nidx_2cdz = 0\nlist_g3a9 = lst\nwhile idx_2cdz < len(list_g3a9):\n    i = list_g3a9[idx_2cdz]\n    if i == pre:\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\n    idx_2cdz = idx_2cdz + 1\nprint(cnt)\n", "id": "For2While_sample_from_s430322735_to_26", "old_id": "s430322735"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\ns = A[0] ^ A[1]\nidx_d36q = 0\nlist_d32v = range(2, N)\nwhile idx_d36q < len(list_d32v):\n    i = list_d32v[idx_d36q]\n    s = s ^ A[i]\n    idx_d36q = idx_d36q + 1\n\nB = [0]*N\nidx_iufz = 0\nlist_26kf = range(N)\nwhile idx_iufz < len(list_26kf):\n    i = list_26kf[idx_iufz]\n    B[i] = s ^ A[i]\n    idx_iufz = idx_iufz + 1\n\nL = [str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "id": "For2While_sample_from_s761121328_to_27", "old_id": "s761121328"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nidx_nx3m = 0\nlist_pdvt = range(aa)\nwhile idx_nx3m < len(list_pdvt):\n    i = list_pdvt[idx_nx3m]\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-1)\n        exit()\n    idx_nx3m = idx_nx3m + 1\nprint(bb)\n", "id": "For2While_sample_from_s986062252_to_28", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n\n    if n == 0:\n        break\n\n    res = -1111111111\n    s = 0\n    idx_21tp = 0\n    list_7nhr = range(n)\n    while idx_21tp < len(list_7nhr):\n        i = list_7nhr[idx_21tp]\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n        idx_21tp = idx_21tp + 1\n\n    print(res)\n", "id": "For2While_sample_from_s923405856_to_29", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n\n    if D[0] != 0:\n        print(0)\n        return\n\n    cnt = Counter(D)\n\n    if cnt[0] > 1:\n        print(0)\n        return\n\n    res = 1\n    idx_hcv8 = 0\n    list_irpa = range(1, max(D)+1)\n    while idx_hcv8 < len(list_irpa):\n        i = list_irpa[idx_hcv8]\n        if cnt[i-1] == 1:\n            continue\n        res *= cnt[i-1]**cnt[i] % mod\n        res %= mod\n        idx_hcv8 = idx_hcv8 + 1\n\n    print(res)\n\n\nsolve()\n", "id": "For2While_sample_from_s534639230_to_30", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nidx_qeot = 0\nlist_ig4u = A\nwhile idx_qeot < len(list_ig4u):\n    a = list_ig4u[idx_qeot]\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n    idx_qeot = idx_qeot + 1\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "For2While_sample_from_s817205687_to_31", "old_id": "s817205687"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = 0\nidx_splj = 0\nlist_1tkl = range(N)\nwhile idx_splj < len(list_1tkl):\n    i = list_1tkl[idx_splj]\n    d = min(A[i], B[i])\n    ans += d\n    A[i] -= d\n    B[i] -= d\n    d = min(A[i + 1], B[i])\n    ans += d\n    A[i + 1] -= d\n    B[i] -= d\n    idx_splj = idx_splj + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s287369394_to_32", "old_id": "s287369394"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    idx_avzd = 0\n    list_o45x = list(enumerate(a))\n    while idx_avzd < len(list_o45x):\n        i, num = list_o45x[idx_avzd]\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n        idx_avzd = idx_avzd + 1\n    right_seg = SegmentTree(N, 0)\n    idx_b6x8 = 0\n    list_xpu5 = list(enumerate(a[::-1]))\n    while idx_b6x8 < len(list_xpu5):\n        i, num = list_xpu5[idx_b6x8]\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n        idx_b6x8 = idx_b6x8 + 1\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "For2While_sample_from_s764169243_to_33", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_fxqp = 0\nlist_ejd3 = range(len(S))\nwhile idx_fxqp < len(list_ejd3):\n    i = list_ejd3[idx_fxqp]\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\n    idx_fxqp = idx_fxqp + 1\nif count > record:\n    record = count\n\nprint(record)\n", "id": "For2While_sample_from_s993625131_to_34", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nidx_z6lv = 0\nlist_jq8x = T\nwhile idx_z6lv < len(list_jq8x):\n    i = list_jq8x[idx_z6lv]\n    if i == S[-1] or i == S[0]:\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    idx_z6lv = idx_z6lv + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s315467749_to_35", "old_id": "s315467749"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nidx_z30f = 0\nlist_91mr = range(num_r)\nwhile idx_z30f < len(list_91mr):\n    i = list_91mr[idx_z30f]\n    if c[i] != comp[i]:\n        ans += 1\n    idx_z30f = idx_z30f + 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "For2While_sample_from_s031459110_to_36", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    idx_cl6y = 0\n    list_anxf = a_li[:-1]\n    while idx_cl6y < len(list_anxf):\n        a = list_anxf[idx_cl6y]\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n        idx_cl6y = idx_cl6y + 1\n\n    print(n, r)\n\n\nmain()\n", "id": "For2While_sample_from_s681105182_to_37", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nidx_dz8c = 0\nlist_l4oh = range(N-M+1)\nwhile idx_dz8c < len(list_l4oh):\n    i = list_l4oh[idx_dz8c]\n    S_2 = S[i:i+M]\n    cnt = 0\n    idx_3pb8 = 0\n    list_o26x = range(M)\n    while idx_3pb8 < len(list_o26x):\n        j = list_o26x[idx_3pb8]\n        if T[j] != S_2[j]:\n            cnt += 1\n        idx_3pb8 = idx_3pb8 + 1\n    ans = min(ans, cnt)\n    idx_dz8c = idx_dz8c + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s838619850_to_38", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_jye3 = 0\n    list_nuim = range(n)\n    while idx_jye3 < len(list_nuim):\n        _ = list_nuim[idx_jye3]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n        idx_jye3 = idx_jye3 + 1\n    ans = 0\n    idx_0pcl = 0\n    list_q5x9 = list(sdic.items())\n    while idx_0pcl < len(list_q5x9):\n        k, v = list_q5x9[idx_0pcl]\n        ans += v*(v-1)//2\n        idx_0pcl = idx_0pcl + 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_s733189960_to_39", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_7ue8 = 0\nlist_wq0i = range(n)\nwhile idx_7ue8 < len(list_wq0i):\n    _ = list_wq0i[idx_7ue8]\n    x, u = list(input().split())\n    if u == \"BTC\":\n        res += float(x) * 380000\n    else:\n        res += int(x)\n    idx_7ue8 = idx_7ue8 + 1\nprint(res)\n", "id": "For2While_sample_from_s238775098_to_40", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_wovh = 0\n    list_6jpn = range(n//2)\n    while idx_wovh < len(list_6jpn):\n        i = list_6jpn[idx_wovh]\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n        idx_wovh = idx_wovh + 1\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0]:\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "For2While_sample_from_s101447419_to_41", "old_id": "s101447419"}
{"code": "A, B = map(int, input().split())\n\nmin = B * 10\nmax = (B+1) * 10 - 1\n\nans = -1\nidx_j3wr = 0\nlist_ui8r = range(min, max+1)\nwhile idx_j3wr < len(list_ui8r):\n    i = list_ui8r[idx_j3wr]\n    if int(i * 0.08) == A:\n        ans = i\n        break\n    idx_j3wr = idx_j3wr + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s764356857_to_42", "old_id": "s764356857"}
{"code": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = 1, 1, 1\n\nwhile x**2 + y**2 + z**2 + x*y + y*z + z*x <= n:\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n            i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x\n            A[i - 1] += 1\n            z += 1\n        z = 1\n        y += 1\n    y, z = 1, 1\n    x += 1\nidx_q2uc = 0\nlist_zc47 = range(n)\nwhile idx_q2uc < len(list_zc47):\n    i = list_zc47[idx_q2uc]\n    print(int(A[i]))\n    idx_q2uc = idx_q2uc + 1\n", "id": "For2While_sample_from_s827462150_to_43", "old_id": "s827462150"}
{"code": "N, K = map(int, input().split())\nA = []\nidx_d8mq = 0\nlist_xtod = range(N)\nwhile idx_d8mq < len(list_xtod):\n    i = list_xtod[idx_d8mq]\n    A.append(0)\n    idx_d8mq = idx_d8mq + 1\nidx_nplg = 0\nlist_mwzh = range(K)\nwhile idx_nplg < len(list_mwzh):\n    i = list_mwzh[idx_nplg]\n    d = int(input())\n    AA = list(map(int, input().split()))\n    idx_g0bm = 0\n    list_ngx6 = range(d)\n    while idx_g0bm < len(list_ngx6):\n        j = list_ngx6[idx_g0bm]\n        A[AA[j] - 1] = 1\n        idx_g0bm = idx_g0bm + 1\n    idx_nplg = idx_nplg + 1\n\nn = 0\nidx_wbxc = 0\nlist_4poa = range(N)\nwhile idx_wbxc < len(list_4poa):\n    i = list_4poa[idx_wbxc]\n    if A[i] == 0:\n        n += 1\n    idx_wbxc = idx_wbxc + 1\nprint(n)\n", "id": "For2While_sample_from_s225521100_to_44", "old_id": "s225521100"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_9scq = 0\n    list_lf5m = range(N)\n    while idx_9scq < len(list_lf5m):\n        i = list_lf5m[idx_9scq]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n        idx_9scq = idx_9scq + 1\n    idx_fgyd = 0\n    list_l63v = modK\n    while idx_fgyd < len(list_l63v):\n        key = list_l63v[idx_fgyd]\n        lenK = len(modK[key])\n        idx_7i1w = 0\n        list_4bok = list(enumerate(modK[key]))\n        while idx_7i1w < len(list_4bok):\n            i, a = list_4bok[idx_7i1w]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_7i1w = idx_7i1w + 1\n        idx_fgyd = idx_fgyd + 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "For2While_sample_from_s975943078_to_45", "old_id": "s975943078"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    idx_12md = 0\n    list_wgn3 = range(len(A)-1)\n    while idx_12md < len(list_wgn3):\n        i = list_wgn3[idx_12md]\n        dist.append(A[i+1]-A[i])\n        idx_12md = idx_12md + 1\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_s267613210_to_46", "old_id": "s267613210"}
{"code": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\nidx_dxvt = 0\nlist_zjow = list(enumerate(S))\nwhile idx_dxvt < len(list_zjow):\n    i, char = list_zjow[idx_dxvt]\n    char_lists.append(char)\n    char_lists.append(T[i])\n    idx_dxvt = idx_dxvt + 1\n\nprint(\"\".join(char_lists))\n", "id": "For2While_sample_from_s813548165_to_47", "old_id": "s813548165"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nidx_mta5 = 0\nlist_ncv3 = range(n-1)\nwhile idx_mta5 < len(list_ncv3):\n    i = list_ncv3[idx_mta5]\n    if s[i] == s[i+1]:\n        continue\n\n    else:\n        cnt += 1\n    idx_mta5 = idx_mta5 + 1\n\nprint(cnt)\n", "id": "For2While_sample_from_s869207096_to_48", "old_id": "s869207096"}
{"code": "n, m = list(map(int, input().split()))\na = []\nb = []\nidx_s28r = 0\nlist_d2x0 = range(m)\nwhile idx_s28r < len(list_d2x0):\n    i = list_d2x0[idx_s28r]\n    a1, b1 = list(map(int, input().split()))\n    a.append(a1)\n    b.append(b1)\n    idx_s28r = idx_s28r + 1\nidx_gcun = 0\nlist_cyng = range(1, n+1)\nwhile idx_gcun < len(list_cyng):\n    i = list_cyng[idx_gcun]\n    print(a.count(i)+b.count(i))\n    idx_gcun = idx_gcun + 1\n", "id": "For2While_sample_from_s491954463_to_49", "old_id": "s491954463"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\nidx_vhea = 0\nlist_t15d = range(5)\nwhile idx_vhea < len(list_t15d):\n    i = list_t15d[idx_vhea]\n    if str(a[i])[-1] == \"0\":\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    idx_vhea = idx_vhea + 1\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "For2While_sample_from_s575946485_to_50", "old_id": "s575946485"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nidx_i2lh = 0\nlist_x0wc = range(n)\nwhile idx_i2lh < len(list_x0wc):\n    i = list_x0wc[idx_i2lh]\n    sum += int(l[i])\n    if max < int(l[i]):\n        max = int(l[i])\n    if min > int(l[i]):\n        min = int(l[i])\n    idx_i2lh = idx_i2lh + 1\nprint(min, max, sum)\n", "id": "For2While_sample_from_s704354119_to_51", "old_id": "s704354119"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nidx_m12t = 0\nlist_r1ja = range(1, N)\nwhile idx_m12t < len(list_r1ja):\n    i = list_r1ja[idx_m12t]\n    tmp = a[i - 1] + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n    idx_m12t = idx_m12t + 1\n\nprint(cnt)\n", "id": "For2While_sample_from_s708549466_to_52", "old_id": "s708549466"}
{"code": "n = int(input())\narr = {}\nidx_qhjd = 0\nlist_v2k9 = range(n)\nwhile idx_qhjd < len(list_v2k9):\n    i = list_v2k9[idx_qhjd]\n    s = input()\n    if not s in arr:\n        arr[s] = 1\n    else:\n        arr[s] += 1\n    idx_qhjd = idx_qhjd + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nidx_0qsl = 0\nlist_c3e8 = out_sort\nwhile idx_0qsl < len(list_c3e8):\n    i = list_c3e8[idx_0qsl]\n    print(i)\n    idx_0qsl = idx_0qsl + 1\n", "id": "For2While_sample_from_s622795537_to_53", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = 0\nidx_w9ea = 0\nlist_dl8b = range(n)\nwhile idx_w9ea < len(list_dl8b):\n    i = list_dl8b[idx_w9ea]\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    idx_t9qh = 0\n    list_5pka = x\n    while idx_t9qh < len(list_5pka):\n        w = list_5pka[idx_t9qh]\n        if w in y:\n            z += 1\n        idx_t9qh = idx_t9qh + 1\n    if z > ans:\n        ans = z\n    idx_w9ea = idx_w9ea + 1\nprint(ans)\n", "id": "For2While_sample_from_s232279435_to_54", "old_id": "s232279435"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nidx_b8k2 = 0\nlist_w8j7 = range(N)\nwhile idx_b8k2 < len(list_w8j7):\n    i = list_w8j7[idx_b8k2]\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n    idx_b8k2 = idx_b8k2 + 1\nidx_jcfs = 0\nlist_amo7 = range(4)\nwhile idx_jcfs < len(list_amo7):\n    i = list_amo7[idx_jcfs]\n    idx_kpa3 = 0\n    list_u7ys = range(3)\n    while idx_kpa3 < len(list_u7ys):\n        j = list_u7ys[idx_kpa3]\n        idx_7fal = 0\n        list_y4a1 = range(10)\n        while idx_7fal < len(list_y4a1):\n            k = list_y4a1[idx_7fal]\n            line += ' {0}'.format(m[i][j][k])\n            idx_7fal = idx_7fal + 1\n        print(line)\n        line = ''\n        idx_kpa3 = idx_kpa3 + 1\n    if i < 3:\n        print('#'*20)\n    idx_jcfs = idx_jcfs + 1\n", "id": "For2While_sample_from_s067092519_to_55", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = 1\nidx_u6ec = 0\nlist_netg = range(N-1)\nwhile idx_u6ec < len(list_netg):\n    i = list_netg[idx_u6ec]\n    if S[i] != S[i+1]:\n        x = x+1\n    idx_u6ec = idx_u6ec + 1\nprint(x)\n", "id": "For2While_sample_from_s642705424_to_56", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    idx_j90h = 0\n    list_a02l = range(M)\n    while idx_j90h < len(list_a02l):\n        _ = list_a02l[idx_j90h]\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n        idx_j90h = idx_j90h + 1\n\n    accum = [[0 for _ in range(N+1)]]\n    idx_5r8s = 0\n    list_su8z = range(N)\n    while idx_5r8s < len(list_su8z):\n        i = list_su8z[idx_5r8s]\n        temp = [0]\n        v = 0\n        idx_tzki = 0\n        list_syjk = range(N)\n        while idx_tzki < len(list_syjk):\n            j = list_syjk[idx_tzki]\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n            idx_tzki = idx_tzki + 1\n        accum.append(temp)\n        idx_5r8s = idx_5r8s + 1\n    idx_wrkz = 0\n    list_4tba = range(Q)\n    while idx_wrkz < len(list_4tba):\n        _ = list_4tba[idx_wrkz]\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n        idx_wrkz = idx_wrkz + 1\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_s048491063_to_57", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_d9p3 = 0\n        list_1567 = range(self.n)\n        while idx_d9p3 < len(list_1567):\n            a = list_1567[idx_d9p3]\n            S.add(self.find(a))\n            idx_d9p3 = idx_d9p3 + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_120w = 0\n    list_pdh4 = range(size)\n    while idx_120w < len(list_pdh4):\n        a = list_pdh4[idx_120w]\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n        idx_120w = idx_120w + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_2vyz = 0\n    list_rdw9 = range(2, len(A))\n    while idx_2vyz < len(list_rdw9):\n        a = list_rdw9[idx_2vyz]\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n        idx_2vyz = idx_2vyz + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_emvf = 0\n    list_f18y = range(2, n+1)\n    while idx_emvf < len(list_f18y):\n        a = list_f18y[idx_emvf]\n        if A[a]:\n            idx_vtbz = 0\n            list_a6di = range(a*2, n+1, a)\n            while idx_vtbz < len(list_a6di):\n                b = list_a6di[idx_vtbz]\n                A[b] = False\n                idx_vtbz = idx_vtbz + 1\n        idx_emvf = idx_emvf + 1\n    if (type == \"bool\"):\n        return A\n    B = []\n    idx_sueq = 0\n    list_d08c = range(n+1)\n    while idx_sueq < len(list_d08c):\n        a = list_d08c[idx_sueq]\n        if (A[a]):\n            B.append(a)\n        idx_sueq = idx_sueq + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_r0c8 = 0\n    list_fhal = range(n)\n    while idx_r0c8 < len(list_fhal):\n        a = list_fhal[idx_r0c8]\n        s += A[a]\n        if (a < n-1):\n            s += c\n        idx_r0c8 = idx_r0c8 + 1\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        idx_knbq = 0\n        list_8d0v = list_\n        while idx_knbq < len(list_8d0v):\n            a = list_8d0v[idx_knbq]\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n            idx_knbq = idx_knbq + 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_6lfm = 0\n    list_1znk = range(n)\n    while idx_6lfm < len(list_1znk):\n        a = list_1znk[idx_6lfm]\n        S.append(input())\n        idx_6lfm = idx_6lfm + 1\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "For2While_sample_from_s977408144_to_58", "old_id": "s977408144"}
{"code": "N, K = [int(_) for _ in input().split()]\nS = set()\nidx_no37 = 0\nlist_o7b0 = range(K)\nwhile idx_no37 < len(list_o7b0):\n    i = list_o7b0[idx_no37]\n    d = int(input())\n    A = [int(_) for _ in input().split()]\n    S = S | set(A)\n    idx_no37 = idx_no37 + 1\nprint(N - len(S))\n", "id": "For2While_sample_from_s411244720_to_59", "old_id": "s411244720"}
{"code": "N = int(input())\nans = []\nidx_74fl = 0\nlist_k5o0 = range(1, N+1)\nwhile idx_74fl < len(list_k5o0):\n    i = list_k5o0[idx_74fl]\n    if sum(range(1, i + 1)) < N:\n        continue\n    else:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\n    idx_74fl = idx_74fl + 1\nidx_e4gc = 0\nlist_xv4m = range(ans[0]+1)\nwhile idx_e4gc < len(list_xv4m):\n    i = list_xv4m[idx_e4gc]\n    if i + 1 != ans[1]:\n        print(i + 1)\n    idx_e4gc = idx_e4gc + 1\n", "id": "For2While_sample_from_s200092246_to_60", "old_id": "s200092246"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nidx_ivxp = 0\nlist_cxhs = range(len(c))\nwhile idx_ivxp < len(list_cxhs):\n    i = list_cxhs[idx_ivxp]\n    if p[i][1] == count:\n        ans.append(p[i][0])\n    else:\n        break\n    idx_ivxp = idx_ivxp + 1\nans = sorted(ans)\nidx_mfjx = 0\nlist_khfv = ans\nwhile idx_mfjx < len(list_khfv):\n    i = list_khfv[idx_mfjx]\n    print(i)\n    idx_mfjx = idx_mfjx + 1\n", "id": "For2While_sample_from_s668439281_to_61", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_4k5h = 0\nlist_khp5 = range(H+2)\nwhile idx_4k5h < len(list_khp5):\n    i = list_khp5[idx_4k5h]\n    if i == 0 or i == H+1:\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n    idx_4k5h = idx_4k5h + 1\n\nans = 0\nidx_8w54 = 0\nlist_jefx = range(W+2)\nwhile idx_8w54 < len(list_jefx):\n    sx = list_jefx[idx_8w54]\n    idx_owbv = 0\n    list_ktwp = range(H+2)\n    while idx_owbv < len(list_ktwp):\n        sy = list_ktwp[idx_owbv]\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            idx_ckig = 0\n            list_x7v3 = range(W+2)\n            while idx_ckig < len(list_x7v3):\n                i = list_x7v3[idx_ckig]\n                idx_w1uc = 0\n                list_e5g8 = range(H+2)\n                while idx_w1uc < len(list_e5g8):\n                    j = list_e5g8[idx_w1uc]\n                    ans = max(ans, dist[j][i])\n                    idx_w1uc = idx_w1uc + 1\n                idx_ckig = idx_ckig + 1\n        idx_owbv = idx_owbv + 1\n    idx_8w54 = idx_8w54 + 1\nprint(ans)\n", "id": "For2While_sample_from_s951169509_to_62", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_dym0 = 0\nlist_wf41 = range(N)\nwhile idx_dym0 < len(list_wf41):\n    _ = list_wf41[idx_dym0]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_dym0 = idx_dym0 + 1\nokz = 0\nidx_zb62 = 0\nlist_scuo = mo\nwhile idx_zb62 < len(list_scuo):\n    i = list_scuo[idx_zb62]\n    if i[1] == \"JPY\":\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n    idx_zb62 = idx_zb62 + 1\n\nprint(okz)\n", "id": "For2While_sample_from_s554393427_to_63", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = 0\nidx_tjla = 0\nlist_p6uf = range(N // R + 1)\nwhile idx_tjla < len(list_p6uf):\n    i = list_p6uf[idx_tjla]\n    idx_rfja = 0\n    list_t3ny = range((N-i * R) // G + 1)\n    while idx_rfja < len(list_t3ny):\n        j = list_t3ny[idx_rfja]\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0:\n            score += 1\n        idx_rfja = idx_rfja + 1\n    idx_tjla = idx_tjla + 1\n\nprint(score)\n", "id": "For2While_sample_from_s897879131_to_64", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    idx_5gqv = 0\n    list_7mdr = range(n)\n    while idx_5gqv < len(list_7mdr):\n        i = list_7mdr[idx_5gqv]\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        idx_5gqv = idx_5gqv + 1\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    idx_9m4e = 0\n    list_trxo = range(n)\n    while idx_9m4e < len(list_trxo):\n        _ = list_trxo[idx_9m4e]\n        solve()\n        idx_9m4e = idx_9m4e + 1\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "id": "For2While_sample_from_s344468705_to_65", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nidx_0jgv = 0\nlist_9ryi = range(M)\nwhile idx_0jgv < len(list_9ryi):\n    _ = list_9ryi[idx_0jgv]\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\n    idx_0jgv = idx_0jgv + 1\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nidx_4i5l = 0\nlist_pfmr = range(1, N+1)\nwhile idx_4i5l < len(list_pfmr):\n    i = list_pfmr[idx_4i5l]\n    if col[i] < 0:\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            idx_ja1k = 0\n            list_htjd = G[x]\n            while idx_ja1k < len(list_htjd):\n                y = list_htjd[idx_ja1k]\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n                idx_ja1k = idx_ja1k + 1\n        cnt += 1\n    idx_4i5l = idx_4i5l + 1\ncmax = max(col)\nprint(cmax)\n", "id": "For2While_sample_from_s233116196_to_66", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_yfri = 0\nlist_2xtb = range(memTime)\nwhile idx_yfri < len(list_2xtb):\n    color = list_2xtb[idx_yfri]\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\n    idx_yfri = idx_yfri + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "For2While_sample_from_s964794058_to_67", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n    idx_xker = 0\n    list_5atl = range(max(X, Y) + 1)\n    while idx_xker < len(list_5atl):\n        k = list_5atl[idx_xker]\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans:\n            ans = total\n        idx_xker = idx_xker + 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "For2While_sample_from_s724326345_to_68", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n    idx_79jh = 0\n    list_aivx = range(1, N + 1)\n    while idx_79jh < len(list_aivx):\n        i = list_aivx[idx_79jh]\n        if i in s:\n            ans = i\n        idx_79jh = idx_79jh + 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_s878873709_to_69", "old_id": "s878873709"}
{"code": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nidx_n3m8 = 0\nlist_m3rn = S\nwhile idx_n3m8 < len(list_m3rn):\n    s = list_m3rn[idx_n3m8]\n    if s != tmp:\n        ans += 1\n        tmp = s\n    idx_n3m8 = idx_n3m8 + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s174910557_to_70", "old_id": "s174910557"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_04l6 = 0\nlist_ef12 = range(N-K)\nwhile idx_04l6 < len(list_ef12):\n    i = list_ef12[idx_04l6]\n    if score[mae] < score[usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n    idx_04l6 = idx_04l6 + 1\n", "id": "For2While_sample_from_s182651529_to_71", "old_id": "s182651529"}
{"code": "n = int(input())\nr = 0\nidx_gxtw = 0\nlist_qgmt = range(n)\nwhile idx_gxtw < len(list_qgmt):\n    ii = list_qgmt[idx_gxtw]\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0:\n        r += (ii+1)\n    idx_gxtw = idx_gxtw + 1\nprint(r)\n", "id": "For2While_sample_from_s702834515_to_72", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n    idx_gn3z = 0\n    list_fanu = range(N)\n    while idx_gn3z < len(list_fanu):\n        i = list_fanu[idx_gn3z]\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n        idx_gn3z = idx_gn3z + 1\n\n    X = input()\n    xi = 0\n    idx_2iwr = 0\n    list_y9mp = range(N)\n    while idx_2iwr < len(list_y9mp):\n        i = list_y9mp[idx_2iwr]\n        if s[i] == X:\n            xi = i\n            break\n        idx_2iwr = idx_2iwr + 1\n\n    ans = 0\n    idx_x6lu = 0\n    list_xhcy = range(N)\n    while idx_x6lu < len(list_xhcy):\n        i = list_xhcy[idx_x6lu]\n        if xi < i:\n            ans += t[i]\n        idx_x6lu = idx_x6lu + 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "For2While_sample_from_s664563518_to_73", "old_id": "s664563518"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\nidx_910z = 0\nlist_f4pt = range(N-1)\nwhile idx_910z < len(list_f4pt):\n    i = list_f4pt[idx_910z]\n    if H[i] >= H[i+1]:\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    idx_910z = idx_910z + 1\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "For2While_sample_from_s895229833_to_74", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nidx_dq7m = 0\nlist_tufb = range(10)\nwhile idx_dq7m < len(list_tufb):\n    i = list_tufb[idx_dq7m]\n    idx_bkwi = 0\n    list_zinm = list(enumerate(map(int, next(X).split())))\n    while idx_bkwi < len(list_zinm):\n        j, c = list_zinm[idx_bkwi]\n        C[i, j] = c\n        idx_bkwi = idx_bkwi + 1\n    idx_dq7m = idx_dq7m + 1\nA = np.zeros((h, w), dtype=int)\nidx_qx9i = 0\nlist_shng = range(h)\nwhile idx_qx9i < len(list_shng):\n    i = list_shng[idx_qx9i]\n    idx_7ynf = 0\n    list_m9pv = list(enumerate(map(int, next(X).split())))\n    while idx_7ynf < len(list_m9pv):\n        j, a = list_m9pv[idx_7ynf]\n        A[i, j] = a\n        idx_7ynf = idx_7ynf + 1\n    idx_qx9i = idx_qx9i + 1\n\nG = nx.DiGraph(C)\nd = {}\nidx_bw1f = 0\nlist_rfmu = range(10)\nwhile idx_bw1f < len(list_rfmu):\n    i = list_rfmu[idx_bw1f]\n    if i == 1:\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n    idx_bw1f = idx_bw1f + 1\n\ns = 0\nidx_t0p7 = 0\nlist_ncb3 = chain.from_iterable(A)\nwhile idx_t0p7 < len(list_ncb3):\n    a = list_ncb3[idx_t0p7]\n    if a == -1 or a == 1:\n        continue\n    s += d[a]\n    idx_t0p7 = idx_t0p7 + 1\nprint(s)\n", "id": "For2While_sample_from_s749244504_to_75", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nidx_39ca = 0\nlist_by4l = range(1, n)\nwhile idx_39ca < len(list_by4l):\n    i = list_by4l[idx_39ca]\n    if a[i] == \"C\" and a[i-1] == \"A\":\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\n    idx_39ca = idx_39ca + 1\nidx_c3pm = 0\nlist_it50 = range(k)\nwhile idx_c3pm < len(list_it50):\n    w = list_it50[idx_c3pm]\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n    idx_c3pm = idx_c3pm + 1\n", "id": "For2While_sample_from_s759499751_to_76", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_ad9r = 0\n    list_ea2j = range(H)\n    while idx_ad9r < len(list_ea2j):\n        _ = list_ea2j[idx_ad9r]\n        ret.append(list(map(int, readline().split())))\n        idx_ad9r = idx_ad9r + 1\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        idx_9igw = 0\n        list_ueoa = range(H)\n        while idx_9igw < len(list_ueoa):\n            _ = list_ueoa[idx_9igw]\n            ret.append([replace[s] for s in read()[:-1]])\n            idx_9igw = idx_9igw + 1\n\n    else:\n        ret = [[pad] * (W + 2)]\n        idx_4j9u = 0\n        list_mr5l = range(H)\n        while idx_4j9u < len(list_mr5l):\n            _ = list_mr5l[idx_4j9u]\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n            idx_4j9u = idx_4j9u + 1\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        idx_q43i = 0\n        list_kznt = product([-2, -1, 0, 1, 2], repeat=2)\n        while idx_q43i < len(list_kznt):\n            di, dj = list_kznt[idx_q43i]\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n            idx_q43i = idx_q43i + 1\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    idx_ukiq = 0\n    list_lk61 = product([-2, -1, 0, 1, 2], repeat=2)\n    while idx_ukiq < len(list_lk61):\n        di, dj = list_lk61[idx_ukiq]\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n        idx_ukiq = idx_ukiq + 1\n\nprint(D[ti][tj])\n", "id": "For2While_sample_from_s124725275_to_77", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_l9wg = 0\nlist_9bzr = range(n)\nwhile idx_l9wg < len(list_9bzr):\n    i = list_9bzr[idx_l9wg]\n    if p[i] != p_copy[i]:\n        count += 1\n    idx_l9wg = idx_l9wg + 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "For2While_sample_from_s763097776_to_78", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\nidx_1w6y = 0\nlist_omew = range(1, 2**10)\nwhile idx_1w6y < len(list_omew):\n    i = list_omew[idx_1w6y]\n    tmp = 0\n    lst = [0]*n\n    idx_xjld = 0\n    list_a492 = range(10)\n    while idx_xjld < len(list_a492):\n        j = list_a492[idx_xjld]\n        if (i >> j) & 1:\n            idx_2be9 = 0\n            list_9qcl = range(n)\n            while idx_2be9 < len(list_9qcl):\n                k = list_9qcl[idx_2be9]\n                lst[k] += F[k][j]\n                idx_2be9 = idx_2be9 + 1\n        idx_xjld = idx_xjld + 1\n    idx_hjbq = 0\n    list_axfd = range(n)\n    while idx_hjbq < len(list_axfd):\n        k = list_axfd[idx_hjbq]\n        tmp += P[k][lst[k]]\n        idx_hjbq = idx_hjbq + 1\n    ans = max(ans, tmp)\n    idx_1w6y = idx_1w6y + 1\n\n\nprint(ans)\n", "id": "For2While_sample_from_s906994739_to_79", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nidx_m1py = 0\nlist_7mr0 = range(-1, 102)\nwhile idx_m1py < len(list_7mr0):\n    i = list_7mr0[idx_m1py]\n\n    if i in p:\n        continue\n\n    if not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n    idx_m1py = idx_m1py + 1\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "For2While_sample_from_s957164965_to_80", "old_id": "s957164965"}
{"code": "from math import factorial as f\n\nN = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndivs = []\nidx_ut4g = 0\nlist_xcnk = range(1, 101)\nwhile idx_ut4g < len(list_xcnk):\n    i = list_xcnk[idx_ut4g]\n    tmp = [0 for _ in range(len(primes))]\n    idx_zpu9 = 0\n    list_nguk = range(len(primes))\n    while idx_zpu9 < len(list_nguk):\n        j = list_nguk[idx_zpu9]\n        p = primes[j]\n        tmp[j] = 0\n        while (i//p == i/p):\n            i = i//p\n            tmp[j] += 1\n        idx_zpu9 = idx_zpu9 + 1\n    divs.append(tmp)\n    idx_ut4g = idx_ut4g + 1\n\n\ndivsum = [0 for _ in range(len(primes))]\nidx_tnes = 0\nlist_my02 = range(1, N+1)\nwhile idx_tnes < len(list_my02):\n    i = list_my02[idx_tnes]\n    idx_mkrh = 0\n    list_al9x = range(len(primes))\n    while idx_mkrh < len(list_al9x):\n        j = list_al9x[idx_mkrh]\n        divsum[j] += divs[i-1][j]\n        idx_mkrh = idx_mkrh + 1\n    idx_tnes = idx_tnes + 1\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-1, divsum)))\n\n\nans = 0\n\n\nans += num(75)\n\n\nans += num(15)*(num(5)-1)\n\n\nans += num(25)*(num(3)-1)\n\n\nans += num(5) * (num(5)-1) * (num(3)-2) // 2\nprint(int(ans))\n", "id": "For2While_sample_from_s259116349_to_81", "old_id": "s259116349"}
{"code": "from math import floor\nfrom heapq import heappush, heappop\nn, m = map(int, input().split())\na = []\nidx_dquz = 0\nlist_674o = map(int, input().split())\nwhile idx_dquz < len(list_674o):\n    i = list_674o[idx_dquz]\n    heappush(a, -i)\n    idx_dquz = idx_dquz + 1\n\n\ndef dis(x, y): return x // 2**y\nidx_8g4i = 0\nlist_jv3k = range(m)\nwhile idx_8g4i < len(list_jv3k):\n    _ = list_jv3k[idx_8g4i]\n    heappush(a, -dis(-heappop(a), 1))\n    idx_8g4i = idx_8g4i + 1\nprint(-sum(a))\n", "id": "For2While_sample_from_s763208424_to_82", "old_id": "s763208424"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = 9999999999\nidx_ig0n = 0\nlist_jayk = range(1, 101)\nwhile idx_ig0n < len(list_jayk):\n    i = list_jayk[idx_ig0n]\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c:\n        m = c\n    idx_ig0n = idx_ig0n + 1\n\nprint(m)\n", "id": "For2While_sample_from_s880494034_to_83", "old_id": "s880494034"}
{"code": "n = int(input())\nres = []\nidx_9zws = 0\nlist_hd6o = range(n)\nwhile idx_9zws < len(list_hd6o):\n    i = list_hd6o[idx_9zws]\n    a = input()\n    res.append(a)\n    idx_9zws = idx_9zws + 1\nprint(len(set(res)))\n", "id": "For2While_sample_from_s770408311_to_84", "old_id": "s770408311"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\nidx_6uyr = 0\nlist_0tl2 = range(1 << d)\nwhile idx_6uyr < len(list_0tl2):\n    bit = list_0tl2[idx_6uyr]\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n    idx_gqrs = 0\n    list_foxb = range(d)\n    while idx_gqrs < len(list_foxb):\n        i = list_foxb[idx_gqrs]\n        if bit & (1 << i):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n        idx_gqrs = idx_gqrs + 1\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n\n    if sum >= g:\n        ans = min(ans, count)\n    idx_6uyr = idx_6uyr + 1\nprint(ans)\n", "id": "For2While_sample_from_s591424993_to_85", "old_id": "s591424993"}
{"code": "n = int(input())\nidx_we93 = 0\nlist_0zn1 = range(1, 10 ** 5)\nwhile idx_we93 < len(list_0zn1):\n    i = list_0zn1[idx_we93]\n    if i * i > n:\n        print((i-1) * (i-1))\n        exit()\n    idx_we93 = idx_we93 + 1\n", "id": "For2While_sample_from_s666154520_to_86", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_sihu = 0\nlist_tzwb = s\nwhile idx_sihu < len(list_tzwb):\n    i = list_tzwb[idx_sihu]\n    if i == \")\":\n        left += 1\n    else:\n        break\n    idx_sihu = idx_sihu + 1\n\nleft1 = 0\nright1 = 0\nidx_cwkq = 0\nlist_p8vi = range(left, n)\nwhile idx_cwkq < len(list_p8vi):\n    i = list_p8vi[idx_cwkq]\n    if s[i] == \"(\":\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n    idx_cwkq = idx_cwkq + 1\n\nleft1 += left\nidx_tv7c = 0\nlist_8zdo = range(right1)\nwhile idx_tv7c < len(list_8zdo):\n    i = list_8zdo[idx_tv7c]\n    s += \")\"\n    idx_tv7c = idx_tv7c + 1\nidx_isgc = 0\nlist_a1sg = range(left1)\nwhile idx_isgc < len(list_a1sg):\n    i = list_a1sg[idx_isgc]\n    s = \"(\" + s\n    idx_isgc = idx_isgc + 1\n\nprint(s)\n", "id": "For2While_sample_from_s952876397_to_87", "old_id": "s952876397"}
{"code": "import numpy\nn = int(input())\na = []\nidx_dnmw = 0\nlist_rd56 = range(2)\nwhile idx_dnmw < len(list_rd56):\n    i = list_rd56[idx_dnmw]\n    a.append(list(map(int, input().split())))\n    idx_dnmw = idx_dnmw + 1\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nidx_u6ci = 0\nlist_rx7o = range(n)\nwhile idx_u6ci < len(list_rx7o):\n    i = list_rx7o[idx_u6ci]\n    check = res_0[i] + res_1[n-1-i]\n    ans = max(ans, check)\n    idx_u6ci = idx_u6ci + 1\nprint(ans)\n", "id": "For2While_sample_from_s146553386_to_88", "old_id": "s146553386"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\nidx_nxpo = 0\nlist_w1km = range(N)\nwhile idx_nxpo < len(list_w1km):\n    i = list_w1km[idx_nxpo]\n    idx_fcdm = 0\n    list_impd = range(T)\n    while idx_fcdm < len(list_impd):\n        j = list_impd[idx_fcdm]\n        if j < L[i][0]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        idx_fcdm = idx_fcdm + 1\n    idx_nxpo = idx_nxpo + 1\n\nused = []\nB = dp[N][T-1]\nj = T-1\nidx_yivg = 0\nlist_b1u0 = range(N-1, -1, -1)\nwhile idx_yivg < len(list_b1u0):\n    i = list_b1u0[idx_yivg]\n    if B == dp[i][j]:\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n    idx_yivg = idx_yivg + 1\n\nans = dp[N][T-1]\nc = 0\nidx_nuwz = 0\nlist_3szg = range(N)\nwhile idx_nuwz < len(list_3szg):\n    i = list_3szg[idx_nuwz]\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n    idx_nuwz = idx_nuwz + 1\n\nprint(ans+c)\n", "id": "For2While_sample_from_s793709854_to_89", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nidx_5d6h = 0\nlist_y4te = range(101)\nwhile idx_5d6h < len(list_y4te):\n    i = list_y4te[idx_5d6h]\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n    idx_5d6h = idx_5d6h + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s246280701_to_90", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nidx_tvhw = 0\nlist_cyi4 = range(N-2)\nwhile idx_tvhw < len(list_cyi4):\n    i = list_cyi4[idx_tvhw]\n    idx_rlt5 = 0\n    list_nj6x = range(i+1, N-1)\n    while idx_rlt5 < len(list_nj6x):\n        j = list_nj6x[idx_rlt5]\n        idx_lxzf = 0\n        list_ul1j = range(j+1, N)\n        while idx_lxzf < len(list_ul1j):\n            k = list_ul1j[idx_lxzf]\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans += 1\n            idx_lxzf = idx_lxzf + 1\n        idx_rlt5 = idx_rlt5 + 1\n    idx_tvhw = idx_tvhw + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s590045523_to_91", "old_id": "s590045523"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nidx_4hu6 = 0\nlist_2pga = range(sqN)\nwhile idx_4hu6 < len(list_2pga):\n    i = list_2pga[idx_4hu6]\n    if N % (sqN-i) == 0:\n        print(int(N/(sqN-i)+sqN-i)-2)\n        break\n    idx_4hu6 = idx_4hu6 + 1\n", "id": "For2While_sample_from_s538657784_to_92", "old_id": "s538657784"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nbelow = 0\nidx_9t1n = 0\nlist_ng7b = range(n)\nwhile idx_9t1n < len(list_ng7b):\n    i = list_ng7b[idx_9t1n]\n    below += 1/a[i]\n    idx_9t1n = idx_9t1n + 1\nprint(1/below)\n", "id": "For2While_sample_from_s001486412_to_93", "old_id": "s001486412"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-1])\nA = [0]+A+[0]\ndiff = [0 for x in range(N)]\nidx_ld62 = 0\nlist_u2mk = range(1, N+1)\nwhile idx_ld62 < len(list_u2mk):\n    i = list_u2mk[idx_ld62]\n    dif = abs(A[i]-A[i-1])+abs(A[i]-A[i+1])-abs(A[i-1]-A[i+1])\n    ans += abs(A[i]-A[i-1])\n    diff[i-1] = dif\n    idx_ld62 = idx_ld62 + 1\nidx_f42w = 0\nlist_hlac = range(N)\nwhile idx_f42w < len(list_hlac):\n    i = list_hlac[idx_f42w]\n    print(ans-diff[i])\n    idx_f42w = idx_f42w + 1\n", "id": "For2While_sample_from_s242961129_to_94", "old_id": "s242961129"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nidx_5fxl = 0\nlist_m8dw = Hs\nwhile idx_5fxl < len(list_m8dw):\n    H = list_m8dw[idx_5fxl]\n    if maxH <= H:\n        ans += 1\n        maxH = H\n    idx_5fxl = idx_5fxl + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s002779582_to_95", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nidx_q0c1 = 0\nlist_ypf8 = range(h)\nwhile idx_q0c1 < len(list_ypf8):\n    _ = list_ypf8[idx_q0c1]\n    a = list(map(str, input()))\n    l.append(a)\n    idx_q0c1 = idx_q0c1 + 1\n\ntmp = 0\nidx_960k = 0\nlist_0gnx = range(h)\nwhile idx_960k < len(list_0gnx):\n    i = list_0gnx[idx_960k]\n    idx_ou2n = 0\n    list_j7r2 = range(w)\n    while idx_ou2n < len(list_j7r2):\n        j = list_j7r2[idx_ou2n]\n        if l[i][j] == \"#\":\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n        idx_ou2n = idx_ou2n + 1\n    idx_960k = idx_960k + 1\n\n\nprint(\"Possible\")\n", "id": "For2While_sample_from_s331817031_to_96", "old_id": "s331817031"}
{"code": "def solver():\n    N = int(input())\n    action = []\n    idx_z24s = 0\n    list_uyho = range(N)\n    while idx_z24s < len(list_uyho):\n        i = list_uyho[idx_z24s]\n        action.append(list(map(int, input().split())))\n        idx_z24s = idx_z24s + 1\n\n    dp = [[0 for _ in range(3)] for _ in range(N)]\n    idx_9efu = 0\n    list_inub = range(3)\n    while idx_9efu < len(list_inub):\n        i = list_inub[idx_9efu]\n        dp[0][i] = action[0][i]\n        idx_9efu = idx_9efu + 1\n    idx_ha4p = 0\n    list_2d68 = range(1, N)\n    while idx_ha4p < len(list_2d68):\n        i = list_2d68[idx_ha4p]\n        dp[i][0] = max(dp[i-1][1] + action[i][0], dp[i-1][2] + action[i][0])\n        dp[i][1] = max(dp[i-1][0] + action[i][1], dp[i-1][2] + action[i][1])\n        dp[i][2] = max(dp[i-1][0] + action[i][2], dp[i-1][1] + action[i][2])\n        idx_ha4p = idx_ha4p + 1\n    print(max(dp[N-1]))\n\n\nsolver()\n", "id": "For2While_sample_from_s210889193_to_97", "old_id": "s210889193"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nidx_q9nd = 0\nlist_5syw = range(n)\nwhile idx_q9nd < len(list_5syw):\n    i = list_5syw[idx_q9nd]\n    if a[i] < ope[j][1]:\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\n    idx_q9nd = idx_q9nd + 1\nprint(sum(a))\n", "id": "For2While_sample_from_s289483518_to_98", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_9hcf = 0\nlist_9hg0 = selected\nwhile idx_9hcf < len(list_9hg0):\n    t, d = list_9hg0[idx_9hcf]\n    if t not in memo:\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n    idx_9hcf = idx_9hcf + 1\n\ncnt_type = len(memo)\nidx_fhmj = 0\nlist_ls1d = info[k:]\nwhile idx_fhmj < len(list_ls1d):\n    t, d = list_ls1d[idx_fhmj]\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n    idx_fhmj = idx_fhmj + 1\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nidx_nkax = 0\nlist_3alm = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_nkax < len(list_3alm):\n    i = list_3alm[idx_nkax]\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_nkax = idx_nkax + 1\nprint(ans)\n", "id": "For2While_sample_from_s804484425_to_99", "old_id": "s804484425"}
