{"code": "s = input()\nres = []\npunctuation = [('' + ','), ('' + '.'), ('!' + ''), ('?' + '')]\nfor i in range(len(s)):\n    if i >= 1:\n        if s[i] == ('' + ''):\n            if res[- 1] != ('' + ''):\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == ('' + ''):\n                    res.pop()\n                res.append(s[i])\n                res.append(('' + ''))\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == ('' + ''):\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\nprint(('' + '').join(res))\n", "id": "StringUnfoldding_sample_from_codeforces_147_A_to_0", "old_id": "codeforces_147_A"}
{"code": "n = int(input())\ns = input()\nif n % 2 != 0:\n    print(('No' + ''))\nelif s[: int(n / 2)] == s[int(n / 2):]:\n    print(('' + 'Yes'))\nelse:\n    print(('' + 'No'))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC145_B_to_1", "old_id": "atcoder_ABC145_B"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {('' + 'L'): (0, - 1), ('' + 'R'): (0, 1), ('' + 'U'): (1, 0), ('' + 'D'): (- 1, 0)}\nd = {(x, y): ('' + '')}\nbug = False\nfor move in record_of_movements:\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d:\n        for step in d_movement:\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n    else:\n        bug = True\n    if bug:\n        break\n    d[x, y] = ('' + '')\nif bug:\n    print(('B' + 'UG'))\nelse:\n    print(('OK' + ''))\n", "id": "StringUnfoldding_sample_from_codeforces_8_B_to_2", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nfor i in l:\n    if i + 1 in l and i + 2 in l:\n        print(('YES' + ''))\n        break\nelse:\n    print(('NO' + ''))\n", "id": "StringUnfoldding_sample_from_codeforces_653_A_to_3", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split((\" \" + \"\"))\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0:\n        print((\"YES\" + \"\"))\n        return (\"\" + \"Result Found\")\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    for i in range(a_time + 1):\n        for j in range(b_time + 1):\n            if a - da * i == x or b - db * j == x:\n                print((\"\" + \"YES\"))\n                return (\"Res\" + \"ult Found\")\n            if (a - da * i) + (b - db * j) == x:\n                print((\"YE\" + \"S\"))\n                return (\"Res\" + \"ult Found\")\n    return (\"Result Not Found\" + \"\")\n\n\nff = main()\nif ff == (\"\" + \"Result Not Found\"):\n    print((\"N\" + \"O\"))\n", "id": "StringUnfoldding_sample_from_codeforces_203_A_to_4", "old_id": "codeforces_203_A"}
{"code": "n = int(input())\nfor i in range(n, 0, - 1):\n    if n % i == 0:\n        n = i\n        print(i, end=('' + ' '))\n", "id": "StringUnfoldding_sample_from_codeforces_58_B_to_5", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = (\"\" + \"\")\n    i = 0\n    while i < len(s):\n        if s[i] == (\"\" + \"A\"):\n            t += (\"\" + \"A\")\n            i += 1\n        elif s[i] == (\"B\" + \"\"):\n            if i < len(s) - 1:\n                if s[i + 1] == (\"C\" + \"\"):\n                    t += (\"D\" + \"\")\n                    i += 2\n                else:\n                    t += (\"\" + \"X\")\n                    i += 1\n            else:\n                t += (\"X\" + \"\")\n                i += 1\n        else:\n            t += (\"\" + \"X\")\n            i += 1\n    total = 0\n    numA = 0\n    for i in range(len(t)):\n        if t[i] == (\"X\" + \"\"):\n            numA = 0\n        else:\n            if t[i] == (\"\" + \"A\"):\n                numA += 1\n            else:\n                total += numA\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == (\"__ma\" + \"in__\"):\n    solve()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC034_B_to_6", "old_id": "atcoder_AGC034_B"}
{"code": "a, at = map(int, input().split())\nb, bt = map(int, input().split())\nt1, t2 = map(int, input().split(('' + ':')))\nst = t2 + (t1 - 5) * 60\nfin = st + at\nnow = 0\nans = 0\nwhile now < fin and now < 1140:\n    if now + bt > st:\n        ans += 1\n    now += b\nprint(ans)\n", "id": "StringUnfoldding_sample_from_codeforces_665_A_to_7", "old_id": "codeforces_665_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count(('' + '1'))\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\n\n\nif __name__ == (\"__mai\" + \"n__\"):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    for i, num in enumerate(nums):\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC043_B_to_8", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nfor x in range(firstline):\n    A, G = list(map(int, input().split()))\n    if total + A <= 500:\n        total += A\n        memory.append((\"\" + \"A\"))\n    else:\n        total -= G\n        memory.append((\"\" + \"G\"))\nprint((\"\" + \"\").join(memory))\n", "id": "StringUnfoldding_sample_from_codeforces_282_B_to_9", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n\n\nif __name__ == ('__' + 'main__'):\n    n = int(input())\n    s = input().replace((\"\" + \"\"), (\"\" + \"\"))\n    if ('0' + '') not in s:\n        print(n - 1)\n    else:\n        indices = find(s, ('0' + ''))\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            for x in combs:\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n            print(s.count(('1' + '')) + maximum)\n", "id": "StringUnfoldding_sample_from_codeforces_327_A_to_10", "old_id": "codeforces_327_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('' + 'inf'))\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nfor _ in range(M):\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\nans = 0\nfor i in range(N):\n    if balls[i][1]:\n        ans += 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC002_B_to_11", "old_id": "atcoder_AGC002_B"}
{"code": "def get_nums(num, t):\n    return [t // num + 1 if i in range(t % num) else t // num for i in range(num)]\n\n\nn, k, l, r, sa, sk = map(int, input().split())\nans = get_nums(k, sk) + get_nums(n - k, sa - sk)\nprint((' ' + '').join(map(str, ans)))\n", "id": "StringUnfoldding_sample_from_codeforces_369_B_to_12", "old_id": "codeforces_369_B"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, ('' + '0'))\nb = b.ljust(x, ('' + '0'))\ns = ('' + '')\nc = 0\nfor i in range(x):\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9:\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\nif c == 1:\n    s += ('' + '1')\nprint(int(s[:: - 1]))\n", "id": "StringUnfoldding_sample_from_codeforces_171_A_to_13", "old_id": "codeforces_171_A"}
{"code": "cookies = [int(x) for x in input().split()]\nleftOver = cookies[0] - cookies[2]\ntakahashi = max(0, leftOver)\nprint(str(takahashi) + ('' + ' ') +\n      (str(cookies[1]) if takahashi > 0 else str(max(0, cookies[1] - abs(leftOver)))))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC149_B_to_14", "old_id": "atcoder_ABC149_B"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nfor x in s:\n    if x == ('' + 'g'):\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == ('p' + ''):\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\nprint(score)\n", "id": "StringUnfoldding_sample_from_atcoder_ARC062_B_to_15", "old_id": "atcoder_ARC062_B"}
{"code": "ABC = tuple(map(int, input().split()))\nif ABC.count(5) == 2:\n    print(('YE' + 'S') if sum(ABC) == 17 else ('' + 'NO'))\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC042_A_to_16", "old_id": "atcoder_ABC042_A"}
{"code": "p = input().split((\" \" + \"\"))\nx1 = int(p[0])\ny1 = int(p[1])\nx2 = int(p[2])\ny2 = int(p[3])\nDIF1 = x2 - x1\nDIF2 = y2 - y1\nx3 = x2 - DIF2\ny3 = y2 + DIF1\nx4 = x1 - DIF2\ny4 = y1 + DIF1\nprint(str(x3) + (\"\" + \" \") + str(y3) + (\"\" + \" \") + str(x4) + (\"\" + \" \") + str(y4))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC108_B_to_17", "old_id": "atcoder_ABC108_B"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split((\"\" + \" \"))][0]\n    return (c, )\n\n\ndef solve(c):\n    a = (\"abcdefgh\" + \"ijklmnopqrstuvwxyz\")\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list):\n        for r in result:\n            print((\"\" + \"%s\") % r, sep=('' + ''))\n    else:\n        print((\"%s\" + \"\") % result, sep=('' + ''))\n\n\nif __name__ == ('__main_' + '_'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC151_A_to_18", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3:\n        return\n    for j in range(4):\n        for k in range(j + 1, 4):\n            if (nums[j] != - 1 and nums[k] != - 1):\n                s = nums[j]\n                nums[j] = - 1\n                t = nums[k]\n                if (operations[i] == ('' + '+')):\n                    nums[k] = s + t\n                elif (operations[i] == ('' + '*')):\n                    nums[k] = s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = s\n                nums[k] = t\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "StringUnfoldding_sample_from_codeforces_55_B_to_19", "old_id": "codeforces_55_B"}
{"code": "import collections\ns = list(input())\neven = collections.Counter(s[0:: 2])\nodd = collections.Counter(s[1:: 2])\nprint(min(len(s) - (even[(\"0\" + \"\")] + odd[(\"\" + \"1\")]), len(s) - (even[(\"\" + \"1\")] + odd[(\"0\" + \"\")])))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC124_C_to_20", "old_id": "atcoder_ABC124_C"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = ('' + 'Yes')\ni = - 1\nfor v in l:\n    s[v] += 1\n    if s[v] >= 2:\n        f = ('' + 'No')\n    if i != - 1 and l[i][- 1] != v[0]:\n        f = ('' + 'No')\n    i += 1\nprint(f)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC109_B_to_21", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: (\"List\" + \"[int]\"), b: (\"List[in\" + \"t]\"), c: (\"List[int]\" + \"\"), d: (\"Li\" + \"st[int]\")):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            for i in range(Q):\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == ('__main' + '__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC165_C_to_22", "old_id": "atcoder_ABC165_C"}
{"code": "li = []\nind = 0\nfor i in range(1, 371):\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1:\n        li.append(i)\n    if count == 2:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\nli.pop()\nli.pop()\nn = int(input(('' + '')))\nprint(li[n - 1])\n", "id": "StringUnfoldding_sample_from_codeforces_672_A_to_23", "old_id": "codeforces_672_A"}
{"code": "def main():\n    n, k = list(map(int, input().split(('' + ' '))))\n    elems = list(map(int, input().split(('' + ' '))))\n    def all_same(arr): return all([x == arr[0] for x in arr])\n    if all_same(elems):\n        print(0)\n        return\n    if k == 1:\n        print(- 1)\n        return\n    if not all_same(elems[k - 1:]):\n        print(- 1)\n        return\n    target = elems[- 1]\n    to_delete = elems[0: k - 1]\n    while to_delete and to_delete[- 1] == target:\n        to_delete.pop()\n    print(len(to_delete))\n\n\nif __name__ == (\"\" + \"__main__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_codeforces_222_A_to_24", "old_id": "codeforces_222_A"}
{"code": "def main():\n    n, m = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    george_complexity = [int(i) for i in input().split()]\n    i = j = 0\n    while (i < n and j < m):\n        i += 1 * (round_complexity[i] <= george_complexity[j])\n        j += 1\n    print(n - i)\n\n\nif __name__ == ('__m' + 'ain__'):\n    main()\n", "id": "StringUnfoldding_sample_from_codeforces_387_B_to_25", "old_id": "codeforces_387_B"}
{"code": "l = input()\nl = l.split(('.' + ''))\ns = list(l[0])\np = list(l[1])\ni = int(p[0])\nif s[len(s) - 1] == ('' + '9'):\n    print((\"GOTO V\" + \"asilisa.\"))\nelif s[len(s) - 1] != ('' + '9') and i < 5:\n    s = (\"\" + \"\").join(s)\n    print(s)\nelse:\n    s = (\"\" + \"\").join(s)\n    s = str(int(s) + 1)\n    print(s)\n", "id": "StringUnfoldding_sample_from_codeforces_99_A_to_26", "old_id": "codeforces_99_A"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = 0\n    for i in range(N):\n        if not used[i]:\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\n\n\nif __name__ == ('' + '__main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC126_E_to_27", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split((\"\" + \" \"))\nV = [int(i) for i in V]\nC = input().split((\"\" + \" \"))\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nfor i in range(N):\n    if V[i] - C[i] > 0:\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\nprint(sum(list))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC125_B_to_28", "old_id": "atcoder_ABC125_B"}
{"code": "from functools import *\nfrom operator import *\nN = int(input())\na = list(map(int, input().split()))\ntotal = reduce(xor, a, 0)\nprint((\"\" + \" \").join(list(map(lambda ai: str(ai ^ total), a))))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC171_E_to_29", "old_id": "atcoder_ABC171_E"}
{"code": "n, m = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nfor i in range(r):\n    a[i] += 1\nfor i in range(m):\n    print(a[i], end=('' + ' '))\n", "id": "StringUnfoldding_sample_from_codeforces_306_A_to_30", "old_id": "codeforces_306_A"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    for i in range(0, len(q) + 1):\n        for s in itertools.combinations(q, i):\n            for u, w in zip(li, p):\n                s = set(s)\n                if len(s & set(u)) % 2 != w:\n                    break\n            else:\n                ans += 2 ** (len(v))\n    print(ans)\n\n\nif __name__ == (\"\" + \"__main__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC128_C_to_31", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nfor i in range(n + 1):\n    if i + o >= n:\n        res = min(res, abs(i - arr_sum))\nprint((\"%.3\" + \"f\") % res)\n", "id": "StringUnfoldding_sample_from_codeforces_351_A_to_32", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float(('' + 'inf'))\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = max(res, ao_dist[i])\nprint(res - 1)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC148_F_to_33", "old_id": "atcoder_ABC148_F"}
{"code": "def main():\n    from sys import setrecursionlimit, stdin\n    from os import environ\n    from collections import defaultdict, deque, Counter\n    from math import ceil, floor, gcd\n    from itertools import accumulate, combinations, combinations_with_replacement\n    setrecursionlimit(10 ** 6)\n    dbg = (lambda * something: print(* something)\n           ) if ('' + 'TERM_PROGRAM') in environ else lambda * x: 0\n\n    def input(): return stdin.readline().rstrip()\n    def LMIIS(): return list(map(int, input().split()))\n    def II(): return int(input())\n    P = 10 ** 9 + 7\n    INF = 10 ** 9 + 10\n    sa, sb = input().split()\n    a = int(sa)\n    b = int(float(sb) * 100 + 0.1)\n    print(a * b // 100)\n\n\nmain()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_C_to_34", "old_id": "atcoder_ABC169_C"}
{"code": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop(0)\ny.pop(0)\nx = set(x)\ny = set(y)\nif 0 in x:\n    x.discard(0)\nelif 0 in y:\n    y.discard(0)\nz = x.union(y)\nif len(z) != max_level:\n    print((\"Oh, my keyboa\" + \"rd!\"))\nelse:\n    print((\"I be\" + \"come the guy.\"))\n", "id": "StringUnfoldding_sample_from_codeforces_469_A_to_35", "old_id": "codeforces_469_A"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: (\"List[int]\" + \"\"), y: (\"\" + \"List[int]\")):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    for permutation in permutations:\n        total_distance = 0\n        for i in range(0, N - 1):\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    for i in range(N):\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n    solve(N, x, y)\n\n\nif __name__ == (\"__ma\" + \"in__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC145_C_to_36", "old_id": "atcoder_ABC145_C"}
{"code": "n, k = map(int, input().split())\nv = input()\nd = [(\"\" + \"LEFT\"), (\"\" + \"RIGHT\")]\nf = k - 1 < n - k\nm = min(k - 1, n - k)\na = []\nfor i in range(0, m):\n    a.append(d[not f])\nfor i in v[:: - 1 + 2 * f]:\n    a.append((\"\" + \"PRINT \") + i)\n    a.append(d[f])\nprint(* a[: - 1], sep=\"\\n\")\n", "id": "StringUnfoldding_sample_from_codeforces_412_A_to_37", "old_id": "codeforces_412_A"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2:\n            return ('YE' + 'S')\n    return ('' + 'NO')\n\n\nprint(s())\n", "id": "StringUnfoldding_sample_from_codeforces_108_B_to_38", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nfor i in s:\n    if i in dt:\n        dt[i] += 1\n    else:\n        dt[i] = 1\ncnt = 0\nx = True\nfor key, value in dt.items():\n    if value % 2 != 0 and cnt < 1:\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\nif x:\n    print((\"Fi\" + \"rst\"))\nelif not x and len(s) % 2 == 0:\n    print((\"Sec\" + \"ond\"))\nelif not x and len(s) % 2 != 0:\n    print((\"Firs\" + \"t\"))\n", "id": "StringUnfoldding_sample_from_codeforces_276_B_to_39", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nfor i in range(n):\n    line = str(input())\n    cake.append(line)\n    for j in line:\n        if (j == ('' + 'C')):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nposCount = 0\nfor j in range(n):\n    for i in range(n):\n        if (cake[i][j] == ('' + 'C')):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nprint(int(happiness))\n", "id": "StringUnfoldding_sample_from_codeforces_629_A_to_40", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nfor i in set(m):\n    if m.count(i) >= n / 2 + 1:\n        possible = False\n        break\nprint(('YES' + '') if possible else ('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_codeforces_296_A_to_41", "old_id": "codeforces_296_A"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    for i in range(n):\n        if ls_xyh[i][2] > 0:\n            [x0, y0, h0] = ls_xyh[i]\n            break\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    for [x, y, h] in ls_xyh:\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n    (xx, yy, hh) = cands[0]\n    return (' ' + '').join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC112_C_to_42", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    s = list(s)\n    for j in range(m):\n        if s[j] == ('' + '.'):\n            if (i + j) & 1:\n                s[j] = ('' + 'W')\n            else:\n                s[j] = ('' + 'B')\n    l.append(s)\nfor c in l:\n    print((\"\" + \"\").join(c))\n", "id": "StringUnfoldding_sample_from_codeforces_445_A_to_43", "old_id": "codeforces_445_A"}
{"code": "def main():\n    K = int(input())\n    S = input()\n    if len(S) <= K:\n        return S\n    return S[: K] + ('' + '...')\n\n\nif __name__ == ('__main_' + '_'):\n    print(main())\n", "id": "StringUnfoldding_sample_from_atcoder_ABC168_B_to_44", "old_id": "atcoder_ABC168_B"}
{"code": "import sys\nn, t = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = 0\nwhile current_cell <= t:\n    current_cell += s[current_cell - 1]\n    if current_cell == t:\n        print((\"YES\" + \"\"))\n        sys.exit()\n    else:\n        continue\nprint((\"\" + \"NO\"))\n", "id": "StringUnfoldding_sample_from_codeforces_500_A_to_45", "old_id": "codeforces_500_A"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nfor i in range(n):\n    if number[i] != 4 and number[i] != 7:\n        print((\"NO\" + \"\"))\n        x += 1\n        break\n    if i < n // 2:\n        h1 += number[i]\n    else:\n        h2 += number[i]\nif not x:\n    if h1 == h2:\n        print((\"YES\" + \"\"))\n    else:\n        print((\"N\" + \"O\"))\n", "id": "StringUnfoldding_sample_from_codeforces_146_A_to_46", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = ('' + 'a') if letter1.lower() != ('' + 'a') else ('b' + '')\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nfor x in arre:\n    if lowString.find(x) >= 0:\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            for i in range(index, index + len(x)):\n                setcito.add(i)\n            wat = index + 1\noString = list(oString)\nfor i in setcito:\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\nfor x in oString:\n    print(x, end=(\"\" + \"\"))\nprint()\n", "id": "StringUnfoldding_sample_from_codeforces_95_A_to_47", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nfor i in range(n):\n    k = input()\n    s.append(k)\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\nif (len(rem) != 1):\n    print(('NO' + ''))\nelif (d1 != d2):\n    print(('N' + 'O'))\nelif (len(set(d1)) != 1):\n    print(('NO' + ''))\nelif (set(d1) == rem):\n    print(('' + 'NO'))\nelse:\n    print(('' + 'YES'))\n", "id": "StringUnfoldding_sample_from_codeforces_404_A_to_48", "old_id": "codeforces_404_A"}
{"code": "n, m = map(int, input().split())\nc = set(s.find((\"\" + \"S\")) - s.find((\"\" + \"G\")) for s in (input() for _ in range(n)))\nprint(- 1 if any(a < 0 for a in c) else len(c))\n", "id": "StringUnfoldding_sample_from_codeforces_400_B_to_49", "old_id": "codeforces_400_B"}
{"code": "def task4(A, B, n):\n    for X in range(- 1000, 1001):\n        if A * (X ** n) == B:\n            return X\n    return (\"\" + \"No solution\")\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "StringUnfoldding_sample_from_codeforces_30_A_to_50", "old_id": "codeforces_30_A"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('' + 'inf'))\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [(\"\" + \"M\"), (\"\" + \"A\"), (\"\" + \"R\"), (\"C\" + \"\"), (\"\" + \"H\")]\nmarch_lis = [0] * 5\nfor s in S:\n    if s[0].upper() in march:\n        march_lis[march.index(s[0].upper())] += 1\nans = 0\nfor x, y, z in combinations(march_lis, 3):\n    ans += x * y * z\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC089_C_to_51", "old_id": "atcoder_ABC089_C"}
{"code": "from math import prod\ninput()\na = input()\nprint(0 if a.count((\"\" + \"1\")) == 0 else prod(\n    [i.count((\"0\" + \"\")) + 1 for i in a.strip((\"0 \" + \"\")).split(('' + '1'))]))\n", "id": "StringUnfoldding_sample_from_codeforces_617_B_to_52", "old_id": "codeforces_617_B"}
{"code": "t = []\nfor i in range(4):\n    l = list(map(str, input()))\n    t.append(l)\nblack = 0\nwhite = 0\ncorrect = 0\nfor i in range(3):\n    for j in range(3):\n        if t[i][j] == ('' + '#'):\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == ('#' + ''):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == ('' + '#'):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == ('' + '#'):\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\nif correct == 1:\n    print(('YE' + 'S'))\nelse:\n    print(('NO' + ''))\n", "id": "StringUnfoldding_sample_from_codeforces_287_A_to_53", "old_id": "codeforces_287_A"}
{"code": "from operator import itemgetter\nN = int(input())\nA = [(i + 1, int(x)) for i, x in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter(1))\nA__ = [a[0] for a in A_]\nfor i in A__[: - 1]:\n    print(i, end=('' + ' '))\nprint(A__[- 1])\n", "id": "StringUnfoldding_sample_from_atcoder_ABC142_C_to_54", "old_id": "atcoder_ABC142_C"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    for i, p in enumerate(P):\n        a[p] = i\n    tmp = 1\n    max_len = 1\n    for i in range(1, N):\n        if a[i] < a[i + 1]:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    for i, p in enumerate(P):\n        if i == 0 or P[i - 1] + 1 == p:\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n    print(N - ans)\n\n\nif __name__ == ('__ma' + 'in__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC024_B_to_55", "old_id": "atcoder_AGC024_B"}
{"code": "def G(a, b):\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n\n\ndef L(a, b):\n    return a * b // G(a, b)\n\n\nl = input().split(('' + ' '))\nx, y, a, b = int(l[0]), int(l[1]), int(l[2]), int(l[3])\nlcm = L(x, y)\nprint(b // lcm - (a - 1) // lcm)\n", "id": "StringUnfoldding_sample_from_codeforces_340_A_to_56", "old_id": "codeforces_340_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nfor x in range(N):\n    if S[x] == ('' + 'L'):\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == ('R' + ''):\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == ('U' + ''):\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == ('' + 'D'):\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == ('' + 'L'):\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == ('R' + ''):\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == ('' + 'U'):\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == ('' + 'D'):\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\nif Judge:\n    print(('N' + 'O'))\nelse:\n    print(('' + 'YES'))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC033_B_to_57", "old_id": "atcoder_AGC033_B"}
{"code": "s = input()\nresult = (\"\" + \"\")\ni = 0\nwhile i < len(s):\n    if s[i] == (\".\" + \"\"):\n        result += ('' + '0')\n    else:\n        i += 1\n        if s[i] == (\".\" + \"\"):\n            result += ('' + '1')\n        else:\n            result += ('' + '2')\n    i += 1\nprint(result)\n", "id": "StringUnfoldding_sample_from_codeforces_32_B_to_58", "old_id": "codeforces_32_B"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N:\n        return 0\n    ans = 1 if set(str(int(n))) == {('' + '7'), ('5' + ''), ('' + '3')} else 0\n    for i in ('75' + '3'):\n        ans += aaa(n + i)\n    return ans\n\n\nprint(aaa(('' + '0')))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC114_C_to_59", "old_id": "atcoder_ABC114_C"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split((' ' + '')))\n        for number in data:\n            if len(number) > 0:\n                yield (number)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt:\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC140_D_to_60", "old_id": "atcoder_ABC140_D"}
{"code": "from itertools import accumulate\nn, q = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + 1 if s[i - 1: i + 1] == ('' + 'AC') else total\n\n\ncumsum = list(accumulate([0] + list(range(1, n)), count))\nfor l, r in problems:\n    print(cumsum[r - 1] - cumsum[l - 1])\n", "id": "StringUnfoldding_sample_from_atcoder_ABC122_C_to_61", "old_id": "atcoder_ABC122_C"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if i == 0:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=(\"\" + \" \"))\n    else:\n        print(lista[i] - lista[i - 1], end=(\" \" + \"\"))\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n", "id": "StringUnfoldding_sample_from_codeforces_567_A_to_62", "old_id": "codeforces_567_A"}
{"code": "N = int(input())\nx = [eval(input().replace(('JP' + 'Y'), ('*' + ' 1.0')).replace(('' + 'BTC'), ('' + '* 380000.0')))\n     for i in range(N)]\nprint(sum(x))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC119_B_to_63", "old_id": "atcoder_ABC119_B"}
{"code": "def R(): return map(int, input().split())\n\n\nn, m, s, f = R()\nif s < f:\n    d = 1\n    c = ('R' + '')\nelse:\n    d = - 1\n    c = ('' + 'L')\nres = (\"\" + \"\")\ni = 1\nj = s\nt, l, r = R()\nk = 1\nwhile j != f:\n    if i > t and k < m:\n        t, l, r = R()\n        k += 1\n    if i == t and (l <= j <= r or l <= j + d <= r):\n        res += ('' + 'X')\n    else:\n        res += c\n        j += d\n    i += 1\nprint(res)\n", "id": "StringUnfoldding_sample_from_codeforces_342_B_to_64", "old_id": "codeforces_342_B"}
{"code": "import math\ngiven = input((\"\" + \"\"))\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[0]\ny1 = l1[1]\nx2 = l1[2]\ny2 = l1[3]\ndenominator = x2 - x1\nnumerator = y2 - y1\nif denominator != 0:\n    quotient = numerator / denominator\nif numerator == 0:\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1\n    x3 = x2\n    y3 = y2 + d\n    y4 = y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif denominator == 0:\n    y4 = y2\n    y3 = y1\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1 + d\n    x3 = x2 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == 1:\n    x4 = x2\n    x3 = x1\n    y4 = y1\n    y3 = y2\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == - 1:\n    x4 = x1\n    x3 = x2\n    y4 = y2\n    y3 = y1\n    print(f\"{x3} {y3} {x4} {y4}\")\nelse:\n    print(('' + '-1'))\n", "id": "StringUnfoldding_sample_from_codeforces_459_A_to_65", "old_id": "codeforces_459_A"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print(('YES' + ''))\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == j % 2 and x < k:\n                print(('L' + ''), end=('' + ''))\n                x += 1\n            else:\n                print(('S' + ''), end=('' + ''))\n        print()\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_codeforces_544_B_to_66", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ('' + '')\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split((\" \" + \"\"))])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[0] // query[1]\n            res.append((\"Y\" + \"es\") if k * query[2] >= query[0] else (\"N\" + \"o\"))\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == (\"\" + \"__main__\"):\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "StringUnfoldding_sample_from_codeforces_397_B_to_67", "old_id": "codeforces_397_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == ('__main' + '__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC154_A_to_68", "old_id": "atcoder_ABC154_A"}
{"code": "import numpy as np\nh, w = map(int, input().split())\ngraph = [[0 if i == ('' + '#') else float(('inf' + ''))\n          for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nfor x in range(w - 1):\n    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\nfor x in range(w - 1, 0, - 1):\n    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\nfor y in range(h - 1):\n    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\nfor y in range(h - 1, 0, - 1):\n    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\nprint(int(np.max(graph)))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC033_A_to_69", "old_id": "atcoder_AGC033_A"}
{"code": "n, a, b = [int(x) for x in input().split((\"\" + \" \"))]\nlista = [int(x) for x in input().split((\"\" + \" \"))]\nlistb = [int(x) for x in input().split((\"\" + \" \"))]\nfor k in range(n):\n    if k + 1 in lista:\n        print(1, end=(\"\" + \" \"))\n    else:\n        print(2, end=(\"\" + \" \"))\n", "id": "StringUnfoldding_sample_from_codeforces_421_A_to_70", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    for i in range(4):\n        t = list(last4)\n        if i >= 1:\n            t[i], t[i - 1] = t[i - 1], t[i]\n        if ('' + '').join(t).count(('A' + 'GC')) >= 1:\n            return False\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return 1\n    ret = 0\n    for c in (\"\" + \"ACGT\"):\n        if ok(last3 + c):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, ('' + 'TTT')))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC122_D_to_71", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nfor i in range(n):\n    if (x - w[i]) / (n - 1) == w[i]:\n        d.append(i + 1)\nprint(len(d))\nprint(('' + ' ').join(map(str, d)))\n", "id": "StringUnfoldding_sample_from_codeforces_134_A_to_72", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = [('a' + ''), ('' + 'e'), ('i' + ''), ('o' + ''), ('u' + ''), ('' + 'y'), ('' + 'A'), ('E' + ''), ('I' + ''), ('' + 'O'), ('U' + ''), ('' + 'Y')]\nfor i in range(len(a) - 1, - 1, - 1):\n    if (a[i] == ('' + ' ') or a[i] == ('' + '?')):\n        continue\n    else:\n        if (a[i] in vo):\n            print((\"\" + \"YES\"))\n        else:\n            print((\"NO\" + \"\"))\n        break\n", "id": "StringUnfoldding_sample_from_codeforces_49_A_to_73", "old_id": "codeforces_49_A"}
{"code": "n = input()\na = [(\"1\" + \"0\"), (\"10\" + \"0\"), (\"\" + \"1000\"), (\"10\" + \"000\"), (\"10\" + \"0000\")]\nnew = sum(list(map(int, n)))\nif n in a:\n    print(10)\nelse:\n    print(new)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC025_A_to_74", "old_id": "atcoder_AGC025_A"}
{"code": "def main():\n    N = int(input())\n    i = 1\n    ans = 0\n    while 10 ** i <= N:\n        ans += ((10 ** i) - (10 ** (i - 1)))\n        i += 2\n    ans += max(0, N - 10 ** (i - 1) + 1)\n    print(ans)\n\n\nif __name__ == (\"\" + \"__main__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC136_B_to_75", "old_id": "atcoder_ABC136_B"}
{"code": "def leapyear(n):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        return (\"\" + \"y\")\n    else:\n        return (\"\" + \"n\")\n\n\nn = int(input())\nd = (\"\" + \"f\")\nif (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n    ans = (\"l\" + \"y\")\nelse:\n    ans = (\"\" + \"nly\")\nwhile (True):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        if (d == (\"\" + \"m\")):\n            d = (\"w\" + \"\")\n            n += 1\n        elif (d == (\"\" + \"t\")):\n            d = (\"t\" + \"h\")\n            n += 1\n        elif (d == (\"\" + \"w\")):\n            d = (\"\" + \"f\")\n            n += 1\n        elif (d == (\"\" + \"th\")):\n            d = (\"\" + \"sa\")\n            n += 1\n        elif (d == (\"f\" + \"\")):\n            d = (\"s\" + \"\")\n            n += 1\n        elif (d == (\"\" + \"sa\")):\n            d = (\"\" + \"m\")\n            n += 1\n        elif (d == (\"\" + \"s\")):\n            d = (\"t\" + \"\")\n            n += 1\n    else:\n        if (d == (\"\" + \"m\")):\n            d = (\"\" + \"t\")\n            n += 1\n        elif (d == (\"t\" + \"\")):\n            d = (\"\" + \"w\")\n            n += 1\n        elif (d == (\"w\" + \"\")):\n            d = (\"th\" + \"\")\n            n += 1\n        elif (d == (\"\" + \"th\")):\n            d = (\"f\" + \"\")\n            n += 1\n        elif (d == (\"\" + \"f\")):\n            d = (\"\" + \"sa\")\n            n += 1\n        elif (d == (\"s\" + \"a\")):\n            d = (\"\" + \"s\")\n            n += 1\n        elif (d == (\"\" + \"s\")):\n            d = (\"m\" + \"\")\n            n += 1\n    if (d == (\"\" + \"f\") and ans == (\"l\" + \"y\") and leapyear(n) == (\"y\" + \"\")):\n        break\n    elif (d == (\"f\" + \"\") and ans == (\"\" + \"nly\") and leapyear(n) == (\"n\" + \"\")):\n        break\nprint(n)\n", "id": "StringUnfoldding_sample_from_codeforces_678_B_to_76", "old_id": "codeforces_678_B"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print((\"\" + \"D\"), y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print((\"\" + \"D\"), y)\n        return y\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print((\"\" + \"=\"), x)\n    return y[0]\n\n\nif X == 1 or X == N * 2 - 1:\n    print((\"\" + \"No\"))\nelse:\n    print((\"\" + \"Yes\"))\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    for x in xs:\n        print(x)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC006_B_to_77", "old_id": "atcoder_AGC006_B"}
{"code": "n, a = int(input()), list(map(int, input().split()))\nif sum(a) % (n * (n + 1) / 2):\n    print((\"\" + \"NO\"))\nelse:\n    k = sum(a) / (n * (n + 1) / 2)\n    a += [a[0]]\n    if sum([(k - i + j) % n for i, j in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for i, j in zip(a[1:], a)]) != n:\n        print((\"\" + \"NO\"))\n    else:\n        print((\"\" + \"YES\"))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC010_B_to_78", "old_id": "atcoder_AGC010_B"}
{"code": "stdin = input()\ns = stdin\nresult = (\"Ye\" + \"s\") if (\"A\" + \"\") in s and (\"\" + \"B\") in s else (\"\" + \"No\")\nprint(result)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC158_A_to_79", "old_id": "atcoder_ABC158_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nfor i in [l, r, first, second]:\n    if i >= l and i <= r:\n        curr = i\n        rev = ('' + '')\n        for k in str(curr):\n            rev += str(9 - int(k))\n        ans = max(ans, int(rev) * curr)\nprint(ans)\n", "id": "StringUnfoldding_sample_from_codeforces_86_A_to_80", "old_id": "codeforces_86_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('' + 'inf'))\nmod = 10 ** 9 + 7\nN = INT()\nA = LIST()\nA = [k for k, g in groupby(A)]\nN = len(A)\ni = 1\nans = 0\nwhile i < N - 1:\n    if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n        ans += 1\n        i += 1\n    i += 1\nprint(ans + 1)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC013_A_to_81", "old_id": "atcoder_AGC013_A"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nfor s in re.split((\"\" + \"[.?!]\"), input()):\n    s = s.strip() + ('' + '.')\n    L = len(s)\n    if L > 1:\n        if L > n:\n            print((\"Imposs\" + \"ible\"))\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\nprint(ans)\n", "id": "StringUnfoldding_sample_from_codeforces_70_B_to_82", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nfor i in m[1:]:\n    if i[1] > a[1]:\n        print(('Happy A' + 'lex'))\n        break\n    a = i\nelse:\n    print(('Poor ' + 'Alex'))\n", "id": "StringUnfoldding_sample_from_codeforces_456_A_to_83", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b:\n            return True\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if i == ('O' + ''):\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(1, 13):\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n    print(len(tot), end=('' + ' '))\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=('' + ' '))\n    print()\n\n\nif __name__ == (\"__mai\" + \"n__\"):\n    for i in range(inp()):\n        solve()\n", "id": "StringUnfoldding_sample_from_codeforces_400_A_to_84", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    for i in range(len(A) - 2, len(A) - 2 * n - 1, - 2):\n        ans += A[i]\n    print(ans)\n\n\nif __name__ == ('' + '__main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC012_A_to_85", "old_id": "atcoder_AGC012_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nfor j in range(n):\n    for p in range(n):\n        if (0 == M[p]):\n            print(p + 1, end=('' + ' '))\n            break\n    for l in range(p + 1 - k):\n        M[l] -= 1\n    M[p] -= 1\n", "id": "StringUnfoldding_sample_from_codeforces_67_B_to_86", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    for value in sequence:\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == ('__ma' + 'in__'):\n    print(main())\n", "id": "StringUnfoldding_sample_from_codeforces_272_B_to_87", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nfor c in s:\n    count[ord(c) - ord((\"\" + \"A\"))] += 1\ncount.sort(reverse=True)\nres = 0\nfor i in range(26):\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\nprint(res)\n", "id": "StringUnfoldding_sample_from_codeforces_462_B_to_88", "old_id": "codeforces_462_B"}
{"code": "from itertools import accumulate\nN, X, * A = map(int, open(0).read().split())\nS = list(accumulate(A))\nans = float((\"i\" + \"nf\"))\nfor k, s in enumerate(S, 1):\n    E = k * X + 2 * sum(S[j] for j in range(N - 2 * k - 1, - 1, - k))\n    ans = min(ans, E)\nprint(ans + N * X + 5 * S[- 1])\n", "id": "StringUnfoldding_sample_from_atcoder_AGC027_B_to_89", "old_id": "atcoder_AGC027_B"}
{"code": "import sys\ninput_methods = [('clipb' + 'oard'), ('f' + 'ile'), ('' + 'key')]\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    for i, c in enumerate(s[:: - 1]):\n        cc = na + int(c)\n        na = 0\n        if cc <= 4:\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = ('' + '0') + s\n    for c in s[:: - 1]:\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\n\n\nif __name__ == (\"\" + \"__main__\"):\n    if sys.platform == ('' + 'ios'):\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open(('' + 'inputFile.txt'))\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC155_E_to_90", "old_id": "atcoder_ABC155_E"}
{"code": "n, m = map(int, input().split())\nsa = input().count((\"\" + \"-\"))\nsa = min([n - sa, sa])\nss = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    b -= a\n    ss.append((b % 2 and b <= sa << 1) and (\"\" + \"1\\n\") or (\"\" + \"0\\n\"))\nprint((\"\" + \"\").join(ss))\n", "id": "StringUnfoldding_sample_from_codeforces_302_A_to_91", "old_id": "codeforces_302_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count((\"\" + \"R\"))\n    gNum = arr.count((\"G\" + \"\"))\n    bNum = arr.count((\"B\" + \"\"))\n    sum = 0\n    for step in range(1, math.ceil(n / 2) + 1):\n        for i in range(n - 2 * step):\n            s = (\"\" + \"\").join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == (\"RG\" + \"B\") or s == (\"\" + \"RBG\") or s == (\"BG\" + \"R\") or s == (\"BRG\" + \"\") or s == (\"\" + \"GBR\") or s == (\"\" + \"GRB\"):\n                sum = sum + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC162_D_to_92", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    for i in range(N):\n        j = 0\n        jM = len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n        else:\n            return (\"\" + \"No\")\n        cur.sort(reverse=True)\n    return (\"\" + \"Yes\")\n\n\nif __name__ == (\"__m\" + \"ain__\"):\n    print(main())\n", "id": "StringUnfoldding_sample_from_atcoder_ABC140_F_to_93", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == ('5' + '') or S == ('?' + ''):\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nfor i in range(n):\n    if i == 0:\n        if S[i] != ('' + '?'):\n            dp[i][int(S[i])] += 1\n        else:\n            for j in range(10):\n                dp[i][j] += 1\n    else:\n        if S[i] != ('' + '?'):\n            for k in range(13):\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n        else:\n            for j in range(10):\n                for k in range(13):\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n        for k in range(13):\n            dp[i][k] %= mod\nprint(dp[n - 1][5])\n", "id": "StringUnfoldding_sample_from_atcoder_ABC135_D_to_94", "old_id": "atcoder_ABC135_D"}
{"code": "print(input().replace((\"\" + \",\"), (\" \" + \"\")))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC051_A_to_95", "old_id": "atcoder_ABC051_A"}
{"code": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 8)\nINF = float(('' + 'inf'))\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n        sys.exit()\n    a = Counter(s)\n    ans = min(a.values()) * 2\n    print(ans)\n\n\nif __name__ == ('_' + '_main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC120_C_to_96", "old_id": "atcoder_ABC120_C"}
{"code": "n = int(input())\nwhile n % 2 == 0:\n    n /= 2\nif n == 1:\n    print(('' + 'YES'))\nelse:\n    print(('NO' + ''))\n", "id": "StringUnfoldding_sample_from_codeforces_55_A_to_97", "old_id": "codeforces_55_A"}
{"code": "s = str(input())\nmy_str = ('' + '')\nfor c in s:\n    if c == ('' + '0') or c == ('' + '1'):\n        my_str += c\n    elif c == ('B' + '') and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\nprint(my_str)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC043_B_to_98", "old_id": "atcoder_ABC043_B"}
{"code": "n, m = map(int, input().split())\nif n < 1:\n    if m < 1:\n        print(n, m)\n        quit()\n    print((\"Impossible\" + \"\"))\n    quit()\nif m > n:\n    min = m\n    max = n + m - 1\n    print(min, max)\nif m <= n:\n    min = n\n    max = n + m - 1\n    if m == 0:\n        max = n\n    print(min, max)\n", "id": "StringUnfoldding_sample_from_codeforces_190_A_to_99", "old_id": "codeforces_190_A"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split((\"\" + \" \"))]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n\n\ndef log(* args):\n    print((\"\" + \"DEBUG:\"), * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nfor p, e in fac.items():\n    x = e\n    for i in range(1, 99999999):\n        if x >= i:\n            x -= i\n            ans += 1\n        else:\n            break\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_D_to_100", "old_id": "atcoder_ABC169_D"}
{"code": "h1, m1 = (map(int, input().split(('' + ':'))))\nm1 += h1 * 60\nh2, m2 = (map(int, input().split((':' + ''))))\nm2 += h2 * 60\nm2 = m1 - m2\nm2 %= 1440\nprint((\"%\" + \"02d:%02d\") % (m2 // 60, m2 % 60))\n", "id": "StringUnfoldding_sample_from_codeforces_387_A_to_101", "old_id": "codeforces_387_A"}
{"code": "import sys\n\n\ndef main():\n    S, W = map(int, input().split())\n    print((\"uns\" + \"afe\")) if (S <= W) else print((\"saf\" + \"e\"))\n\n\nif __name__ == ('__m' + 'ain__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC164_A_to_102", "old_id": "atcoder_ABC164_A"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nfor i, c in enumerate(l):\n    if c == ('' + '0'):\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC129_E_to_103", "old_id": "atcoder_ABC129_E"}
{"code": "x, y = list(map(int, input().split()))\na = 0\nwhile x >= 0 and y >= 22 or x >= 1 and y >= 12 or x >= 2 and y >= 2:\n    if a:\n        if y >= 22:\n            y -= 22\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            x -= 2\n            y -= 2\n    else:\n        if x >= 2 and y >= 2:\n            x -= 2\n            y -= 2\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            y -= 22\n    a = 1 - a\nprint([('Cie' + 'l'), ('' + 'Hanako')][1 - a])\n", "id": "StringUnfoldding_sample_from_codeforces_79_A_to_104", "old_id": "codeforces_79_A"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nfor i in range(N):\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\nif (mx == - 1):\n    print(('0 0' + ''))\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print(('' + '0 0'))\n", "id": "StringUnfoldding_sample_from_codeforces_56_B_to_105", "old_id": "codeforces_56_B"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nfor _ in range(N - 1):\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    for u in adj[v]:\n        if seen[u] == 0:\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\nseq = deque()\nfor i in range(1, N + 1):\n    if child_num[i] == 0:\n        seq.append(i)\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0:\n        print(('' + 'First'))\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0:\n        seq.append(par[par[c]])\nprint(('Seco' + 'nd'))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC014_D_to_106", "old_id": "atcoder_AGC014_D"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nfor i in range(int(input())):\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == ('' + 'M'):\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\na, b, c = 0, 0, 0\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\nprint(c)\n", "id": "StringUnfoldding_sample_from_codeforces_629_B_to_107", "old_id": "codeforces_629_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= 5:\n    from math import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=1): return int(- (- a // b))\ndef round(x): return int((x * 2 + 1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD - 2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=1)\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('i' + 'nf'))\nMOD = 10 ** 9 + 7\nq, h, s, d = MAP()\nn = INT()\nbest1L = min(q * 4, h * 2, s)\nbest2L = min(d, best1L * 2)\nif n % 2 == 0:\n    print(best2L * (n // 2))\nelse:\n    print(best2L * (n // 2) + best1L)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC019_A_to_108", "old_id": "atcoder_AGC019_A"}
{"code": "LUCKY = (\"ab\" + \"cd\")\nn = int(input())\ns = (\"\" + \"\")\nfor i in range(n):\n    s += LUCKY[i % 4]\nprint(s)\n", "id": "StringUnfoldding_sample_from_codeforces_110_B_to_109", "old_id": "codeforces_110_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nfor i in range(t):\n    op = input().split()\n    if op[0] == ('all' + 'oc'):\n        pos = 0\n        for j in range(m):\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n        else:\n            print((\"\" + \"NULL\"))\n    if op[0] == ('er' + 'ase'):\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print(('ILLEGAL_ER' + 'ASE_ARGUMENT'))\n        else:\n            for j in range(m):\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n    if op[0] == (\"defr\" + \"agment\"):\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        for j in range(cnt):\n            alocuente.append(0)\n", "id": "StringUnfoldding_sample_from_codeforces_7_B_to_110", "old_id": "codeforces_7_B"}
{"code": "age = int(input())\nif age == 1:\n    print(('He' + 'llo World'))\nelse:\n    a, b = [int(input()) for i in range(2)]\n    print(a + b)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC112_A_to_111", "old_id": "atcoder_ABC112_A"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nfor i in a:\n    cnt[i] += 1\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(('' + ' ').join(map(str, ans)))\n", "id": "StringUnfoldding_sample_from_codeforces_350_B_to_112", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split((\"\" + \" \"))]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns += 1\n        for i in range(len(a)):\n            if a[i] != - 1 and a[i] <= counter:\n                counter += 1\n                a[i] = - 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "StringUnfoldding_sample_from_codeforces_583_B_to_113", "old_id": "codeforces_583_B"}
{"code": "h, a = map(int, input().split((\"\" + \" \")))\nsho = int(h / a)\nam = int(h % a)\nif am != 0:\n    sho += 1\nelse:\n    pass\nprint(sho)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC153_A_to_114", "old_id": "atcoder_ABC153_A"}
{"code": "ip = input()\nst = (\"\" + \"\")\nif len(ip) != 1:\n    if ip[0] == (\"\" + \"9\"):\n        st = (\"9\" + \"\")\n        ip = ip[1:]\n    for i in ip:\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\nelse:\n    st = ip\nprint(int(st))\n", "id": "StringUnfoldding_sample_from_codeforces_514_A_to_115", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    for c in s:\n        if c != ('' + '1'):\n            break\n        l += 1\n    if l >= k:\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "StringUnfoldding_sample_from_atcoder_ABC106_C_to_116", "old_id": "atcoder_ABC106_C"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == ('' + 'B'))\n    for piece in pieces:\n        if piece[1] == ('' + 'A'):\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n    for i in range(len(pieces) - 1, - 1, - 1):\n        if pieces[i][1] == ('A' + ''):\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == ('__m' + 'ain__'):\n    print(main())\n", "id": "StringUnfoldding_sample_from_codeforces_632_B_to_117", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ('' + '')\n    for i in s:\n        if i not in [('' + '-'), ('' + ';'), ('' + '_')]:\n            r += i.lower()\n    return r\n\n\ndef solve():\n    l = []\n    for i in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append((\"\" + \"\").join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print(('' + 'ACC'))\n        else:\n            print(('' + 'WA'))\n\n\nif __name__ == (\"__m\" + \"ain__\"):\n    solve()\n", "id": "StringUnfoldding_sample_from_codeforces_61_B_to_118", "old_id": "codeforces_61_B"}
{"code": "import collections\n\n\ndef run(s, t):\n    ss = sorted(list(collections.Counter(s).values()))\n    tt = sorted(list(collections.Counter(t).values()))\n    if ss == tt:\n        return ('' + 'Yes')\n    else:\n        return ('' + 'No')\n\n\ndef main():\n    s = input()\n    t = input()\n    print(run(s, t))\n\n\nif __name__ == ('__mai' + 'n__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC110_C_to_119", "old_id": "atcoder_ABC110_C"}
{"code": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = LI()\nif a > 0:\n    print(('' + 'Positive'))\nelif a <= 0 and b >= 0:\n    print(('' + 'Zero'))\nelse:\n    if (a + b) % 2 == 0:\n        print(('Negati' + 've'))\n    else:\n        print(('Positi' + 've'))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC002_A_to_120", "old_id": "atcoder_AGC002_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float(('i' + 'nf'))\nans = 0\na.sort(reverse=True)\nfor j in range(n):\n    ans += max(0, min(pre - 1, a[j]))\n    pre = max(0, min(pre - 1, a[j]))\nprint(ans)\n", "id": "StringUnfoldding_sample_from_codeforces_624_B_to_121", "old_id": "codeforces_624_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2:\n    print((\"\" + \"No\"))\n    exit()\nfor i in Sa:\n    if c[i] != 2:\n        print((\"N\" + \"o\"))\n        exit()\nprint((\"Ye\" + \"s\"))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC132_A_to_122", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if n % 2:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n\n\nif __name__ == (\"__m\" + \"ain__\"):\n    resolve()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_E_to_123", "old_id": "atcoder_ABC169_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[(\"\" + \"0\")] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < B:\n                if j < A:\n                    answer[i][j] = (\"\" + \"0\")\n                else:\n                    answer[i][j] = (\"\" + \"1\")\n            else:\n                if j < A:\n                    answer[i][j] = (\"1\" + \"\")\n                else:\n                    answer[i][j] = (\"\" + \"0\")\n    for i in range(H):\n        print(('' + '').join(answer[i]))\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == ('__' + 'main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC038_A_to_124", "old_id": "atcoder_AGC038_A"}
