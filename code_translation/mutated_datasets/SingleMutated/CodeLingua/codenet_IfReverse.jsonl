{"code": "a = int(input())\n\n\ndef func(a):\n    digits = []\n    temp = a\n    while temp != 0:\n        digits.append(temp % 10)\n        temp = int(temp/10)\n    result = sum(digits)\n    if not result == 1:\n        print(result)\n    else:\n        print('10')\n\n\nfunc(a)\n", "id": "IfReverse_sample_from_s537584449_to_0", "old_id": "s537584449"}
{"code": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\nif not len(B) == 3 and k[0] ^ k[1] ^ k[2] == 0 and v[0] == v[1] == v[2]:\n    if len(B) == 2 and 0 in k and (v[0] == 2*v[1] or v[1] == 2*v[0]):\n        print(\"Yes\")\n    elif len(B) == 1 and 0 in k:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"Yes\")\n", "id": "IfReverse_sample_from_s043545989_to_1", "old_id": "s043545989"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = 0\n    for j in range(len(t)):\n        if not j == p-1:\n            s += t[j]\n        else:\n            s += x\n    print(s)\n", "id": "IfReverse_sample_from_s609392609_to_2", "old_id": "s609392609"}
{"code": "a, b = map(int, input().split())\nif not a <= b:\n    print(a-1)\nelse:\n    print(a)\n", "id": "IfReverse_sample_from_s310981504_to_3", "old_id": "s310981504"}
{"code": "N, R = map(int, input().split())\nif not N >= 10:\n    print(R+100*(10-N))\nelse:\n    print(R)\n", "id": "IfReverse_sample_from_s419623944_to_4", "old_id": "s419623944"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if not (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        else:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        dfs(v)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range(1, n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range(1, n+1):\n        color[i] = -1\n\n    while True:\n        i = 0\n        for j in range(1, n+1):\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n        if i == 0:\n            for j in range(1, n+1):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "IfReverse_sample_from_s908812767_to_5", "old_id": "s908812767"}
{"code": "s = input()\nif not len(s) < 26:\n    for i in reversed(range(1, 26)):\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            for j in range(26):\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-1)\nelse:\n    for i in range(26):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n", "id": "IfReverse_sample_from_s504709360_to_6", "old_id": "s504709360"}
{"code": "import sys\ninput = sys.stdin.readline\n\na, b = map(int, input().split())\nif not a >= 13:\n    if a >= 6:\n        print(int(b/2))\n    else:\n        print(0)\nelse:\n    print(b)\n", "id": "IfReverse_sample_from_s785944322_to_7", "old_id": "s785944322"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range(1, K+1):\n    if not N - K + 1 < i:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    else:\n        ans = 0\n    print(int(ans) % mod)\n", "id": "IfReverse_sample_from_s790754864_to_8", "old_id": "s790754864"}
{"code": "N, L = map(int, input().split())\naji = []\nfor i in range(1, N+1):\n    aji.append(L+i-1)\nif not min(aji) >= 0:\n    if max(aji) <= 0:\n        aji.pop(aji.index(max(aji)))\n    else:\n        aji.pop(aji.index(min(aji, key=abs)))\nelse:\n    aji.pop(aji.index(min(aji)))\nprint(sum(aji))\n", "id": "IfReverse_sample_from_s240532461_to_9", "old_id": "s240532461"}
{"code": "a, b = input().split(\" \")\na = int(a)\nb = int(b)\nif not a <= b:\n    print(a-1)\nelse:\n    print(a)\n", "id": "IfReverse_sample_from_s462546732_to_10", "old_id": "s462546732"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if not t[0] == 1:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    else:\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n", "id": "IfReverse_sample_from_s016605598_to_11", "old_id": "s016605598"}
{"code": "(a, b, c, k) = list(map(int, input().split()))\nif not k % 2 == 0:\n    print(b-a)\nelse:\n    print(a-b)\n", "id": "IfReverse_sample_from_s441028271_to_12", "old_id": "s441028271"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if not i == 0:\n        for j in shichigo[i-1]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\n    else:\n        for j in shichigolist:\n            shichigo[i].append(j)\ntarget = len(strn)-1\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if not i == target:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n        else:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "IfReverse_sample_from_s949655009_to_13", "old_id": "s949655009"}
{"code": "N = int(input())\ncnt = 1\nwhile cnt <= 9:\n    if not N % cnt == 0 and 1 <= N/cnt <= 9:\n        cnt += 1\n    else:\n        print('Yes')\n        break\nelse:\n    print('No')\n", "id": "IfReverse_sample_from_s018260659_to_14", "old_id": "s018260659"}
{"code": "X, t = map(int, input().split())\nif not X > t:\n    if X <= t:\n        answer = 0\nelse:\n    answer = X - t\n\nprint(answer)\n", "id": "IfReverse_sample_from_s000375264_to_15", "old_id": "s000375264"}
{"code": "X, A = list(map(int, input().split()))\nif not X < A:\n    print(10)\nelse:\n    print(0)\n", "id": "IfReverse_sample_from_s522872163_to_16", "old_id": "s522872163"}
{"code": "N, K = map(int, input().split())\nif not N % K == 0:\n    print(1)\nelse:\n    print(0)\n", "id": "IfReverse_sample_from_s997947249_to_17", "old_id": "s997947249"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n-1, i, -1):\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif not \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Not stable\")\nelse:\n    print(\"Stable\")\n", "id": "IfReverse_sample_from_s875904659_to_18", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif not n == len(set(A)):\n    print('NO')\nelse:\n    print('YES')\n", "id": "IfReverse_sample_from_s137613418_to_19", "old_id": "s137613418"}
{"code": "x = input()\nif not x.islower():\n    print(\"A\")\nelse:\n    print(\"a\")\n", "id": "IfReverse_sample_from_s028530838_to_20", "old_id": "s028530838"}
{"code": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if not i == pre:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    else:\n        tmp_cnt += 1\n    pre = i\nprint(cnt)\n", "id": "IfReverse_sample_from_s430322735_to_21", "old_id": "s430322735"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n    if not count_div_2 is None:\n\n        if cnt != count_div_2:\n            print(0)\n            exit()\n    else:\n        count_div_2 = cnt\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "IfReverse_sample_from_s817205687_to_22", "old_id": "s817205687"}
{"code": "import numpy as np\n\nn, k = map(int, input().split())\nif not n > k:\n    if n < k:\n        if n >= k - n:\n            ans = k - n\n        else:\n            ans = n\n    else:\n        ans = 0\nelse:\n    tmp = n % k\n    if tmp >= k - tmp:\n        ans = k - tmp\n    else:\n        ans = tmp\n\nprint(ans)\n", "id": "IfReverse_sample_from_s058944700_to_23", "old_id": "s058944700"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if not S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        if count > record:\n            record = count\n        count = 0\n    else:\n        count += 1\nif count > record:\n    record = count\n\nprint(record)\n", "id": "IfReverse_sample_from_s993625131_to_24", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if not i == S[-1] or i == S[0]:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    else:\n        ans += 1\n\nprint(ans)\n", "id": "IfReverse_sample_from_s315467749_to_25", "old_id": "s315467749"}
{"code": "N, K = map(int, input().split())\nS = list(input())\nif not S[K-1] == \"A\":\n    if S[K-1] == \"B\":\n        S[K-1] = \"b\"\n    else:\n        S[K-1] = \"c\"\nelse:\n    S[K-1] = \"a\"\nans = \"\".join(S)\nprint(ans)\n", "id": "IfReverse_sample_from_s060838372_to_26", "old_id": "s060838372"}
{"code": "N = int(input())\nif not N % 9 == 0:\n    print('No')\nelse:\n    print('Yes')\n", "id": "IfReverse_sample_from_s542358243_to_27", "old_id": "s542358243"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if not s in sdic:\n            sdic[s] = 1\n        else:\n            sdic[s] += 1\n    ans = 0\n    for k, v in sdic.items():\n        ans += v*(v-1)//2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "IfReverse_sample_from_s733189960_to_28", "old_id": "s733189960"}
{"code": "s = input()\nif not s == 'RRR':\n    if s == 'SSS':\n        print(0)\n    elif s == 'RRS' or s == 'SRR':\n        print(2)\n    else:\n        print(1)\nelse:\n    print(3)\n", "id": "IfReverse_sample_from_s855969677_to_29", "old_id": "s855969677"}
{"code": "n = int(input())\nres = 0\nfor _ in range(n):\n    x, u = list(input().split())\n    if not u == \"BTC\":\n        res += int(x)\n    else:\n        res += float(x) * 380000\nprint(res)\n", "id": "IfReverse_sample_from_s238775098_to_30", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//2):\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if not ce.most_common()[0][0] != co.most_common()[0][0]:\n        if len(ce) == 1 and len(co) == 1:\n            ans = n-ce.most_common()[0][1]\n        elif len(ce) == 1:\n            ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n        elif len(co) == 1:\n            ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n        else:\n            ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                      [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    else:\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "IfReverse_sample_from_s101447419_to_31", "old_id": "s101447419"}
{"code": "a, b, c = input().strip().split()\nif not a == b and b == c:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n", "id": "IfReverse_sample_from_s960572618_to_32", "old_id": "s960572618"}
{"code": "N = int(input())\nif not N % 2 == 0:\n    print(N//2+1)\nelse:\n    print(N//2)\n", "id": "IfReverse_sample_from_s280552889_to_33", "old_id": "s280552889"}
{"code": "A, B, C = map(int, input().split())\nif not B < C:\n    if A * C < B:\n        print(C)\n    else:\n        print(B//A)\nelse:\n    print(0)\n", "id": "IfReverse_sample_from_s208095748_to_34", "old_id": "s208095748"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if not sum_A[i+1] not in modK:\n            modK[sum_A[i+1]].append(i+1)\n        else:\n            modK[sum_A[i+1]] = [i + 1]\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "IfReverse_sample_from_s975943078_to_35", "old_id": "s975943078"}
{"code": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[0] for l in gate_cond])\nmin_upper_th = min([l[1] for l in gate_cond])\nif not min_upper_th - max_under_th >= 0:\n    print(0)\nelse:\n    print(min_upper_th - max_under_th + 1)\n", "id": "IfReverse_sample_from_s205112814_to_36", "old_id": "s205112814"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nfor i in range(n-1):\n    if not s[i] == s[i+1]:\n        cnt += 1\n    else:\n        continue\n\nprint(cnt)\n", "id": "IfReverse_sample_from_s869207096_to_37", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if not str(a[i])[-1] == \"0\":\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    else:\n        dic.update({i: 0})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "IfReverse_sample_from_s575946485_to_38", "old_id": "s575946485"}
{"code": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X // D\n    if abs(r) > K:\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if not (K - r) % 2 == 0:\n        print(abs(D - a))\n    else:\n        print(a)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "IfReverse_sample_from_s814885508_to_39", "old_id": "s814885508"}
{"code": "A, B, K = map(int, input().split())\nif not A+K-1 >= B-K+1:\n    i = 0\n    while i <= K-1:\n        print(A+i)\n        i += 1\n    while B-K+1 <= B:\n        print(B-K+1)\n        K -= 1\nelse:\n    while A <= B:\n        print(A)\n        A += 1\n", "id": "IfReverse_sample_from_s357377130_to_40", "old_id": "s357377130"}
{"code": "a, v = map(int, input().split())\nb, w = map(int, input().split())\nt = int(input())\nif not a == b:\n    if v <= w:\n        print('NO')\n    else:\n        if t < abs(a - b) / (v - w):\n            print('NO')\n        else:\n            print('YES')\nelse:\n    print('YES')\n", "id": "IfReverse_sample_from_s122565091_to_41", "old_id": "s122565091"}
{"code": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[1::2][::-1]+a[::2]\nif not len(a) % 2 == 0:\n    print(' '.join(b[::-1]))\nelse:\n    print(' '.join(b))\n", "id": "IfReverse_sample_from_s735480710_to_42", "old_id": "s735480710"}
{"code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not not s in arr:\n        arr[s] += 1\n    else:\n        arr[s] = 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "id": "IfReverse_sample_from_s622795537_to_43", "old_id": "s622795537"}
{"code": "s = input()\nif not len(s) == 2:\n    print(s[::-1])\nelse:\n    print(s)\n", "id": "IfReverse_sample_from_s195311365_to_44", "old_id": "s195311365"}
{"code": "A, B = map(int, input().split())\nif not A == B:\n    if A == 1:\n        print(\"Alice\")\n    elif B == 1:\n        print(\"Bob\")\n    elif A > B:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\nelse:\n    print(\"Draw\")\n", "id": "IfReverse_sample_from_s040517919_to_45", "old_id": "s040517919"}
{"code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if not i > 0:\n        return []\n    else:\n        return digit(i//10) + [i % 10]\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif not date <= 430:\n    print('TBD')\nelse:\n    print('Heisei')\n", "id": "IfReverse_sample_from_s086522214_to_46", "old_id": "s086522214"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if not b:\n        print(\"no\")\n    else:\n        print(\"yes\")\n\n\ndef Yn(b):\n    if not b:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n\ndef YN(b):\n    if not b:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if not self.rank[x] < self.rank[y]:\n            if self.rank[y] < self.rank[x]:\n                self.P[y] = x\n            else:\n                self.P[x] = y\n                self.rank[y] += 1\n        else:\n            self.P[x] = y\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if not now == a:\n        return False\n    else:\n        return True\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if not (num >> (size-a-1)) & 1 == 1:\n            A[a] = 0\n        else:\n            A[a] = 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if not (num >= (1 << size)):\n        return num\n    else:\n        return False\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if not a:\n        return c\n    else:\n        return b\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if not type_ == \"dict\":\n        if type_ == \"list\":\n            return list_\n        else:\n            return None\n    else:\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "IfReverse_sample_from_s977408144_to_47", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\n\nfor i in range(1, N+1):\n    if not sum(range(1, i + 1)) < N:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\n    else:\n        continue\nfor i in range(ans[0]+1):\n    if i + 1 != ans[1]:\n        print(i + 1)\n", "id": "IfReverse_sample_from_s200092246_to_48", "old_id": "s200092246"}
{"code": "a, b = map(int, input().split())\nif not a <= 8 and b <= 8:\n    print(\":(\")\nelse:\n    print(\"Yay!\")\n", "id": "IfReverse_sample_from_s453478465_to_49", "old_id": "s453478465"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if not p[i][1] == count:\n        break\n    else:\n        ans.append(p[i][0])\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "id": "IfReverse_sample_from_s668439281_to_50", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if not i == 0 or i == H+1:\n        G.append('#' + input() + '#')\n    else:\n        G.append('#'*(W+2))\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "id": "IfReverse_sample_from_s951169509_to_51", "old_id": "s951169509"}
{"code": "s = input()\nt = input()\nif not t[:-1] == s:\n    print('No')\nelse:\n    print('Yes')\n", "id": "IfReverse_sample_from_s676839884_to_52", "old_id": "s676839884"}
{"code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = 0\nfor i in mo:\n    if not i[1] == \"JPY\":\n        okz += i[0]*380000\n    else:\n        okz += i[0]\n\nprint(okz)\n", "id": "IfReverse_sample_from_s554393427_to_53", "old_id": "s554393427"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if not num >= dp[-1]:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        else:\n            dp.append(num)\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "id": "IfReverse_sample_from_s344468705_to_54", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if not member // 400 >= 8:\n        if ((member // 400) in colorList) == False:\n            colorList.append(member // 400)\n    else:\n        highLate += 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "IfReverse_sample_from_s964794058_to_55", "old_id": "s964794058"}
{"code": "n = input()\nn = int(n[-1])\nif not n == 2 or n == 4 or n == 5 or n == 7 or n == 9:\n    if n == 0 or n == 1 or n == 6 or n == 8:\n        print(\"pon\")\n    else:\n        print(\"bon\")\nelse:\n    print(\"hon\")\n", "id": "IfReverse_sample_from_s652791025_to_56", "old_id": "s652791025"}
{"code": "n = input()\nl = list(map(int, input().split()))\n\nb = max(l)\ns = sum(l)\nif not b < s - b:\n    print('No')\nelse:\n    print('Yes')\n", "id": "IfReverse_sample_from_s893778513_to_57", "old_id": "s893778513"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if not score[mae] < score[usiro]:\n        print('No')\n    else:\n        print('Yes')\n    mae += 1\n    usiro += 1\n", "id": "IfReverse_sample_from_s182651529_to_58", "old_id": "s182651529"}
{"code": "import math\n\n\ndef keta(s):\n    if len(s) < 2:\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\n\ndef main():\n    N = input()\n    if not keta(N) % 9 == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "IfReverse_sample_from_s486032847_to_59", "old_id": "s486032847"}
{"code": "n = int(input())\nif not n >= 1000:\n    print('ABC')\nelse:\n    print('ABD')\n", "id": "IfReverse_sample_from_s870744379_to_60", "old_id": "s870744379"}
{"code": "W, H, x, y, r = map(int, input().split())\nif not x >= r and (W - r) >= x:\n    print('No')\nelse:\n    if y >= r and (H - r) >= y:\n        print('Yes')\n    else:\n        print('No')\n", "id": "IfReverse_sample_from_s103354654_to_61", "old_id": "s103354654"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if not H[i] >= H[i+1]:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    else:\n        count_tmp += 1\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "IfReverse_sample_from_s895229833_to_62", "old_id": "s895229833"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nfor i in range(1, n):\n    if not a[i] == \"C\" and a[i-1] == \"A\":\n        c[i] = c[i-1]\n    else:\n        c[i] = c[i-1]+1\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n", "id": "IfReverse_sample_from_s759499751_to_63", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n    if not pad is None:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n    else:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if not (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c + 1\n            else:\n                nc = c\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if not (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.append((c + 1, ni, nj))\n        else:\n            que.appendleft((c, ni, nj))\n\nprint(D[ti][tj])\n", "id": "IfReverse_sample_from_s124725275_to_64", "old_id": "s124725275"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/(4*m)\nif not a[m-1] >= s:\n    print('No')\nelse:\n    print('Yes')\n", "id": "IfReverse_sample_from_s777789287_to_65", "old_id": "s777789287"}
{"code": "a, b = map(int, input().split())\nif not a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print('Impossible')\nelse:\n    print('Possible')\n", "id": "IfReverse_sample_from_s858647829_to_66", "old_id": "s858647829"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count += 1\nif not count == 0 or count == 2:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "id": "IfReverse_sample_from_s763097776_to_67", "old_id": "s763097776"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-1, 102):\n\n    if i in p:\n        continue\n    if not not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)].append(i)\n    else:\n        candidates[abs(X-i)] = [i]\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "IfReverse_sample_from_s957164965_to_68", "old_id": "s957164965"}
{"code": "N = input()\nif not N == 0:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('Yes')\n", "id": "IfReverse_sample_from_s557080041_to_69", "old_id": "s557080041"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if not i == \")\":\n        break\n    else:\n        left += 1\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if not s[i] == \"(\":\n        if right1 > 0:\n            right1 -= 1\n        else:\n            left1 += 1\n    else:\n        right1 += 1\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "id": "IfReverse_sample_from_s952876397_to_70", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if not j < L[i][0]:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        else:\n            dp[i+1][j] = dp[i][j]\n\nused = []\nB = dp[N][T-1]\nj = T-1\nfor i in range(N-1, -1, -1):\n    if B == dp[i][j]:\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n\nans = dp[N][T-1]\nc = 0\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n\nprint(ans+c)\n", "id": "IfReverse_sample_from_s793709854_to_71", "old_id": "s793709854"}
{"code": "input = list(map(str, input().split()))\nnum = ''.join(input)\nif not (int(num) % 4 == 0):\n    print('NO')\nelse:\n    print('YES')\n", "id": "IfReverse_sample_from_s554858080_to_72", "old_id": "s554858080"}
{"code": "a, b = input().split()\nif not a < b:\n    if a > b:\n        print(\">\")\n    else:\n        print(\"=\")\nelse:\n    print(\"<\")\n", "id": "IfReverse_sample_from_s110149598_to_73", "old_id": "s110149598"}
{"code": "s = list(str(input()))\ns.sort()\nif not s[0] == s[1] and s[0] != s[2] and s[2] == s[3]:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n", "id": "IfReverse_sample_from_s896397037_to_74", "old_id": "s896397037"}
{"code": "A, B = map(int, input().split())\nif not (A+B) % 2 == 1:\n    print((A+B)//2)\nelse:\n    print('IMPOSSIBLE')\n", "id": "IfReverse_sample_from_s423256012_to_75", "old_id": "s423256012"}
{"code": "n = int(input())\nif not n % 1000 == 0:\n    print(1000 - n % 1000)\nelse:\n    print(0)\n", "id": "IfReverse_sample_from_s355314304_to_76", "old_id": "s355314304"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nfor i in range(n):\n    if not a[i] < ope[j][1]:\n        break\n    else:\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\nprint(sum(a))\n", "id": "IfReverse_sample_from_s289483518_to_77", "old_id": "s289483518"}
{"code": "R = int(input())\nif not R < 1200:\n    if R < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\nelse:\n    print(\"ABC\")\n", "id": "IfReverse_sample_from_s607161467_to_78", "old_id": "s607161467"}
{"code": "A, B = [int(x) for x in input().split()]\nif not A < 10 and B < 10:\n    print(-1)\nelse:\n    print(A*B)\n", "id": "IfReverse_sample_from_s179314665_to_79", "old_id": "s179314665"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if not t not in memo:\n        selected_chohuku.append(d)\n    else:\n        memo[t] = 1\n        selected_only.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "id": "IfReverse_sample_from_s804484425_to_80", "old_id": "s804484425"}
{"code": "A, B = map(int, input().split())\nS = list(input())\nif not S[A] == '-' and S.count('-') == 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n", "id": "IfReverse_sample_from_s013976107_to_81", "old_id": "s013976107"}
{"code": "n, k = map(int, input().split())\nif not k % 2 == 1:\n    print((n//k)**3+((n+k//2)//k)**3)\nelse:\n    print((n//k)**3)\n", "id": "IfReverse_sample_from_s398580870_to_82", "old_id": "s398580870"}
