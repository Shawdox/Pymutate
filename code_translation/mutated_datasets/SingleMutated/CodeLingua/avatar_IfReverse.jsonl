{"code": "def sum(k):\n    ret = 0\n    pw = 10\n    len = 1\n    while 1 == 1:\n        cur = min(pw - 1, k)\n        prev = pw // 10\n        ret += (cur - prev + 1) * len\n        if (pw - 1 >= k):\n            break\n        len += 1\n        pw *= 10\n    return ret\n\n\nw, m, k = map(int, input().split())\nlo = 0\nhi = int(1e18)\nwhile hi - lo > 1:\n    md = (lo + hi) // 2\n    c = sum(m + md - 1) - sum(m - 1)\n    if not c * k <= w:\n        hi = md\n    else:\n        lo = md\nprint(lo)\n", "id": "IfReverse_sample_from_codeforces_373_B_to_0", "old_id": "codeforces_373_B"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nfor i in range(len(s)):\n    if not i >= 1:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    else:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\nprint(''.join(res))\n", "id": "IfReverse_sample_from_codeforces_147_A_to_1", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nfor letra in s:\n    if not letra in freqs:\n        freqs[letra] = 1\n    else:\n        freqs[letra] += 1\nfor letra in t:\n    if not letra in freqt:\n        freqt[letra] = 1\n    else:\n        freqt[letra] += 1\nfor letra in freqs.keys():\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\nfor letra in freqs.keys():\n    while (freqs[letra] > 0):\n        if not letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            if letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n                whoops += 1\n                freqs[letra] -= 1\n                freqt[letra.lower()] -= 1\n            else:\n                break\n        else:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\nprint(yay, whoops)\n", "id": "IfReverse_sample_from_codeforces_518_B_to_2", "old_id": "codeforces_518_B"}
{"code": "n = int(input())\ns = input()\nif not n % 2 != 0:\n    if s[: int(n / 2)] == s[int(n / 2):]:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')\n", "id": "IfReverse_sample_from_atcoder_ABC145_B_to_3", "old_id": "atcoder_ABC145_B"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nfor move in record_of_movements:\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if not (x, y) not in d:\n        bug = True\n    else:\n        for step in d_movement:\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n    if bug:\n        break\n    d[x, y] = ''\nif not bug:\n    print('OK')\nelse:\n    print('BUG')\n", "id": "IfReverse_sample_from_codeforces_8_B_to_4", "old_id": "codeforces_8_B"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif not K >= 15:\n    if 2 ** K >= N:\n        aaaa = True\nelse:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if not u[pointer1 + i] > u[pointer2 + i]:\n            if u[pointer1 + i] < u[pointer2 + i]:\n                return False\n        else:\n            return True\n    return False\n\n\nS = get_last_dict(S)\nif not K == 1:\n    count = 0\n    for c in S:\n        if c == S[0]:\n            count += 1\n        else:\n            break\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\nelse:\n    print(S)\n", "id": "IfReverse_sample_from_atcoder_AGC037_E_to_5", "old_id": "atcoder_AGC037_E"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if not s[i] == \"A\":\n            if s[i] == \"B\":\n                if i < len(s) - 1:\n                    if s[i + 1] == \"C\":\n                        t += \"D\"\n                        i += 2\n                    else:\n                        t += \"X\"\n                        i += 1\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"A\"\n            i += 1\n    total = 0\n    numA = 0\n    for i in range(len(t)):\n        if not t[i] == \"X\":\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        else:\n            numA = 0\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "IfReverse_sample_from_atcoder_AGC034_B_to_6", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nfor i in range(a, x + 1):\n    if not (i <= b):\n        for j in range(b, y + 1):\n            if i > j:\n                games.append((i, j))\n    else:\n        continue\nprint(len(games))\nfor i in games:\n    print(f\"{i[0]} {i[1]}\")\n", "id": "IfReverse_sample_from_codeforces_242_A_to_7", "old_id": "codeforces_242_A"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nfor x in range(firstline):\n    A, G = list(map(int, input().split()))\n    if not total + A <= 500:\n        total -= G\n        memory.append(\"G\")\n    else:\n        total += A\n        memory.append(\"A\")\nprint(\"\".join(memory))\n", "id": "IfReverse_sample_from_codeforces_282_B_to_8", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nfor _ in range(M):\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if not w_x >= 1 and r_x >= 1:\n        if w_x == 0:\n            balls[x - 1][1] -= 1\n            balls[y - 1][1] += 1\n        else:\n            balls[x - 1][0] -= 1\n            balls[y - 1][0] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\nans = 0\nfor i in range(N):\n    if balls[i][1]:\n        ans += 1\nprint(ans)\n", "id": "IfReverse_sample_from_atcoder_AGC002_B_to_9", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif not arr[0] > 15:\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n    else:\n        if arr[- 1] == 90 or arr[- 1] + 15 >= 90:\n            print(90)\n        else:\n            print(arr[- 1] + 15)\nelse:\n    print(15)\n", "id": "IfReverse_sample_from_codeforces_673_A_to_10", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nfor i in range(x):\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if not d > 9:\n        s += str(d)\n        c = 0\n    else:\n        s += str(d)[1]\n        c = 1\nif c == 1:\n    s += '1'\nprint(int(s[:: - 1]))\n", "id": "IfReverse_sample_from_codeforces_171_A_to_11", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nfor i in range(N + 1):\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = ind\n    x = ne\nif not flag == True:\n    print(path[K - 1])\nelse:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\n", "id": "IfReverse_sample_from_atcoder_ABC167_D_to_12", "old_id": "atcoder_ABC167_D"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nfor x in s:\n    if not x == 'g':\n        if x == 'p':\n            if num_g - num_p > 0:\n                score = score\n                num_p += 1\n            else:\n                score -= 1\n                num_g += 1\n    else:\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\nprint(score)\n", "id": "IfReverse_sample_from_atcoder_ARC062_B_to_13", "old_id": "atcoder_ARC062_B"}
{"code": "ABC = tuple(map(int, input().split()))\nif not ABC.count(5) == 2:\n    print('NO')\nelse:\n    print('YES' if sum(ABC) == 17 else 'NO')\n", "id": "IfReverse_sample_from_atcoder_ABC042_A_to_14", "old_id": "atcoder_ABC042_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nfor i in range(n):\n    nodes.append(Node())\nfor i in range(n - 1):\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if not node in nodeSet:\n        nodeSet.add(node)\n    else:\n        return\n    for pair in node.a:\n        adjNode = pair[0]\n        dis = pair[1]\n        if not (distance + dis) % 2 == 0:\n            adjNode.color = not root.color\n        else:\n            adjNode.color = root.color\n        traverse(adjNode, distance + dis)\n\n\ntraverse(root, 0)\nfor i in range(n):\n    node = nodes[i]\n    if not node.color:\n        print(0)\n    else:\n        print(1)\n", "id": "IfReverse_sample_from_atcoder_ABC126_D_to_15", "old_id": "atcoder_ABC126_D"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if not lines_as_string is None:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    else:\n        debug = False\n        lines.append(input())\n    c = [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if not isinstance(result, list):\n        print(\"%s\" % result, sep='')\n    else:\n        for r in result:\n            print(\"%s\" % r, sep='')\n\n\nif __name__ == '__main__':\n    main()\n", "id": "IfReverse_sample_from_atcoder_ABC151_A_to_16", "old_id": "atcoder_ABC151_A"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[0]\n    arr = sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0):\n        print(int(length / arr[0]))\n        return\n    ans = 0\n    if not (arr[0] == arr[1]):\n        k = 0\n        for i in range(int(length / arr[2]) + 1):\n            for j in range(int(length / arr[1]) + 1):\n                check = length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n    else:\n        k = 0\n        for i in range(int(length / arr[2]) + 1):\n            check = length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = int(check / arr[0])\n                ans = max(ans, k + i)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "IfReverse_sample_from_codeforces_189_A_to_17", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nfor i in range(1, n):\n    if not l[i] == l[i - 1]:\n        if high > maximum:\n            maximum = high\n        high = 1\n    else:\n        tower -= 1\n        high += 1\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "id": "IfReverse_sample_from_codeforces_37_A_to_18", "old_id": "codeforces_37_A"}
{"code": "l = input()\nl = l.split('.')\ns = list(l[0])\np = list(l[1])\ni = int(p[0])\nif not s[len(s) - 1] == '9':\n    if s[len(s) - 1] != '9' and i < 5:\n        s = \"\".join(s)\n        print(s)\n    else:\n        s = \"\".join(s)\n        s = str(int(s) + 1)\n        print(s)\nelse:\n    print(\"GOTO Vasilisa.\")\n", "id": "IfReverse_sample_from_codeforces_99_A_to_19", "old_id": "codeforces_99_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\nQ = []\nfor i, d in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    for i, v in enumerate(edges[u]):\n        edges[v].remove(u)\n        if not parity[u] != 0 and i == 0:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        else:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n", "id": "IfReverse_sample_from_atcoder_AGC035_B_to_20", "old_id": "atcoder_AGC035_B"}
{"code": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop(0)\ny.pop(0)\nx = set(x)\ny = set(y)\nif not 0 in x:\n    if 0 in y:\n        y.discard(0)\nelse:\n    x.discard(0)\nz = x.union(y)\nif not len(z) != max_level:\n    print(\"I become the guy.\")\nelse:\n    print(\"Oh, my keyboard!\")\n", "id": "IfReverse_sample_from_codeforces_469_A_to_21", "old_id": "codeforces_469_A"}
{"code": "s = list(input())\nx = True\ndt = {}\nfor i in s:\n    if not i in dt:\n        dt[i] = 1\n    else:\n        dt[i] += 1\ncnt = 0\nx = True\nfor key, value in dt.items():\n    if not value % 2 != 0 and cnt < 1:\n        if value % 2 != 0 and cnt >= 1:\n            x = False\n            break\n    else:\n        cnt += 1\nif not x:\n    if not x and len(s) % 2 == 0:\n        print(\"Second\")\n    elif not x and len(s) % 2 != 0:\n        print(\"First\")\nelse:\n    print(\"First\")\n", "id": "IfReverse_sample_from_codeforces_276_B_to_22", "old_id": "codeforces_276_B"}
{"code": "import sys\nn, t = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = 0\nwhile current_cell <= t:\n    current_cell += s[current_cell - 1]\n    if not current_cell == t:\n        continue\n    else:\n        print(\"YES\")\n        sys.exit()\nprint(\"NO\")\n", "id": "IfReverse_sample_from_codeforces_500_A_to_23", "old_id": "codeforces_500_A"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nfor i in range(2 ** D):\n    score = 0\n    problem = 0\n    for j in range(D):\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n    if score > G:\n        continue\n    left = G - score\n    for j in range(D):\n        if (i >> j) & 1:\n            continue\n        if not left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        else:\n            pass\nprint(ans)\n", "id": "IfReverse_sample_from_atcoder_ABC104_C_to_24", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nfor i in range(n):\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if not i < n // 2:\n        h2 += number[i]\n    else:\n        h1 += number[i]\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "IfReverse_sample_from_codeforces_146_A_to_25", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\ns = []\nfor i in range(n):\n    k = input()\n    s.append(k)\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\nif not (len(rem) != 1):\n    if (d1 != d2):\n        print('NO')\n    elif (len(set(d1)) != 1):\n        print('NO')\n    elif (set(d1) == rem):\n        print('NO')\n    else:\n        print('YES')\nelse:\n    print('NO')\n", "id": "IfReverse_sample_from_codeforces_404_A_to_26", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if not r is None:\n            return self._bitsum(r) - self._bitsum(l)\n        else:\n            return self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nfor i, x in enumerate(_a):\n    d[x] = i\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    for i in range(n):\n        b[i + 1] += b[i]\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    for x in b:\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "IfReverse_sample_from_atcoder_ABC107_D_to_27", "old_id": "atcoder_ABC107_D"}
{"code": "from cmd import IDENTCHARS\nn = int(input())\nl = 1\nr = n\nwhile (l < r):\n    mid = l + (r - l) // 2\n    idxcnt = mid * (mid + 1) / 2\n    if not (idxcnt < n):\n        r = mid\n    else:\n        l = mid + 1\nl -= 1\nidxcnt = l * (l + 1) / 2\nprint(int(n - idxcnt))\n", "id": "IfReverse_sample_from_codeforces_622_A_to_28", "old_id": "codeforces_622_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    for _ in range(len(array) - 1, 0, - 1):\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    for a in A[1:]:\n        if not a <= dp[- 1][0]:\n            dp += [(a, 0)]\n        else:\n            dp = cut(dp, a)\n        is_added = False\n        for j in range(len(dp) - 1, - 1, - 1):\n            if dp[j][1] < K - 1:\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n        if not is_added:\n            return False\n    return True\n\n\ndef bis(x, y):\n    if not y == x + 1:\n        if is_possible((x + y) // 2):\n            return bis(x, (x + y) // 2)\n        else:\n            return bis((x + y) // 2, y)\n    else:\n        return y\n\n\nprint(bis(0, N))\n", "id": "IfReverse_sample_from_atcoder_AGC029_C_to_29", "old_id": "atcoder_AGC029_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nfor i in w:\n    if not i == 1:\n        if i % 2 == 0:\n            c = 3 - c\n            print(c)\n        else:\n            print(c)\n    else:\n        print(c)\n", "id": "IfReverse_sample_from_codeforces_705_B_to_30", "old_id": "codeforces_705_B"}
{"code": "n = int(input())\nq = []\ncount = 0\nfor i in range(n):\n    a = input().split()\n    q.append(a)\nfor j in q:\n    for k in q:\n        if not k == j:\n            if j[0] == k[len(k) - 1]:\n                count += 1\n            else:\n                continue\n        else:\n            continue\nprint(count)\n", "id": "IfReverse_sample_from_codeforces_268_A_to_31", "old_id": "codeforces_268_A"}
{"code": "t = []\nfor i in range(4):\n    l = list(map(str, input()))\n    t.append(l)\nblack = 0\nwhite = 0\ncorrect = 0\nfor i in range(3):\n    for j in range(3):\n        if not t[i][j] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i][j + 1] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j + 1] == '#':\n            white += 1\n        else:\n            black += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\nif not correct == 1:\n    print('NO')\nelse:\n    print('YES')\n", "id": "IfReverse_sample_from_codeforces_287_A_to_32", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    for i, p in enumerate(P):\n        a[p] = i\n    tmp = 1\n    max_len = 1\n    for i in range(1, N):\n        if not a[i] < a[i + 1]:\n            tmp = 1\n        else:\n            tmp += 1\n            max_len = max(max_len, tmp)\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    for i, p in enumerate(P):\n        if not i == 0 or P[i - 1] + 1 == p:\n            ans = max(ans, tmp)\n            tmp = 1\n        else:\n            tmp += 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "IfReverse_sample_from_atcoder_AGC024_B_to_33", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nfor x in range(N):\n    if not S[x] == 'L':\n        if S[x] == 'R':\n            S_R += 1\n            if s_c + (S_R - T_L) == W + 1:\n                Judge = True\n        elif S[x] == 'U':\n            S_U += 1\n            if S_U - T_D - s_r == 0:\n                Judge = True\n        elif S[x] == 'D':\n            S_D += 1\n            if s_r + (S_D - T_U) == H + 1:\n                Judge = True\n    else:\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\nif not Judge:\n    print('YES')\nelse:\n    print('NO')\n", "id": "IfReverse_sample_from_atcoder_AGC033_B_to_34", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if not N <= 0:\n        if num == 1:\n            return [I() for _ in range(N)]\n        else:\n            read_all = [tuple(II()) for _ in range(N)]\n            return map(list, zip(* read_all))\n    else:\n        return [[]] * num\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nfor i, a0 in enumerate(a):\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\nif not max_sign == 0:\n    if max_sign == 1:\n        print(2 * N - 1)\n        for i in range(N):\n            print(max_index + 1, i + 1)\n        for i in range(N - 1):\n            print(i + 1, i + 2)\n    else:\n        print(2 * N - 1)\n        for i in range(N):\n            print(max_index + 1, i + 1)\n        for i in range(1, N)[:: - 1]:\n            print(i + 1, i)\nelse:\n    print(0)\n", "id": "IfReverse_sample_from_atcoder_ARC086_B_to_35", "old_id": "atcoder_ARC086_B"}
{"code": "s = input()\nresult = \"\"\ni = 0\nwhile i < len(s):\n    if not s[i] == \".\":\n        i += 1\n        if s[i] == \".\":\n            result += '1'\n        else:\n            result += '2'\n    else:\n        result += '0'\n    i += 1\nprint(result)\n", "id": "IfReverse_sample_from_codeforces_32_B_to_36", "old_id": "codeforces_32_B"}
{"code": "a, b = map(int, input().split())\nhole = 1\ni = 0\ncheck = True\nwhile check:\n    if not hole >= b:\n        hole = a * (i + 1) - i\n        i += 1\n    else:\n        check = False\nprint(i)\n", "id": "IfReverse_sample_from_atcoder_ABC139_B_to_37", "old_id": "atcoder_ABC139_B"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif not s == t:\n    cnt = 0\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n    print(2 * n - cnt)\nelse:\n    print(n)\n", "id": "IfReverse_sample_from_atcoder_AGC006_A_to_38", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield (number)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\ncur_happy = N - 1 - seg_cnt\nif not 2 * K >= seg_cnt:\n    ans = cur_happy + 2 * K\nelse:\n    ans = N - 1\nprint(ans)\n", "id": "IfReverse_sample_from_atcoder_ABC140_D_to_39", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if not i == 0:\n        if i == len(lista) - 1:\n            print(\n                f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n            continue\n        elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n            print(lista[i + 1] - lista[i], end=\" \")\n        else:\n            print(lista[i] - lista[i - 1], end=\" \")\n    else:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    if not lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[i] - lista[0])\n    else:\n        print(lista[len(lista) - 1] - lista[i])\n", "id": "IfReverse_sample_from_codeforces_567_A_to_40", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nfor i in range(n):\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if not r >= - d:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\n    else:\n        heapq.heappush(y, - s)\nprint(sum(y))\n", "id": "IfReverse_sample_from_atcoder_ABC137_D_to_41", "old_id": "atcoder_ABC137_D"}
{"code": "def R(): return map(int, input().split())\n\n\nn, m, s, f = R()\nif not s < f:\n    d = - 1\n    c = 'L'\nelse:\n    d = 1\n    c = 'R'\nres = \"\"\ni = 1\nj = s\nt, l, r = R()\nk = 1\nwhile j != f:\n    if i > t and k < m:\n        t, l, r = R()\n        k += 1\n    if not i == t and (l <= j <= r or l <= j + d <= r):\n        res += c\n        j += d\n    else:\n        res += 'X'\n    i += 1\nprint(res)\n", "id": "IfReverse_sample_from_codeforces_342_B_to_42", "old_id": "codeforces_342_B"}
{"code": "A = list(map(int, input().split()))\nif not A[1] <= A[2] or A[3] <= A[0]:\n    A.sort()\n    print(A[2] - A[1])\nelse:\n    print(0)\n", "id": "IfReverse_sample_from_atcoder_ABC070_B_to_43", "old_id": "atcoder_ABC070_B"}
{"code": "import math\ngiven = input(\"\")\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[0]\ny1 = l1[1]\nx2 = l1[2]\ny2 = l1[3]\ndenominator = x2 - x1\nnumerator = y2 - y1\nif denominator != 0:\n    quotient = numerator / denominator\nif not numerator == 0:\n    if denominator == 0:\n        y4 = y2\n        y3 = y1\n        d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n        x4 = x1 + d\n        x3 = x2 + d\n        print(f\"{x3} {y3} {x4} {y4}\")\n    elif quotient == 1:\n        x4 = x2\n        x3 = x1\n        y4 = y1\n        y3 = y2\n        print(f\"{x3} {y3} {x4} {y4}\")\n    elif quotient == - 1:\n        x4 = x1\n        x3 = x2\n        y4 = y2\n        y3 = y1\n        print(f\"{x3} {y3} {x4} {y4}\")\n    else:\n        print('-1')\nelse:\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1\n    x3 = x2\n    y3 = y2 + d\n    y4 = y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\n", "id": "IfReverse_sample_from_codeforces_459_A_to_44", "old_id": "codeforces_459_A"}
{"code": "n, k = map(int, input().split())\nx = 0\nif not k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('NO')\nelse:\n    print('YES')\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n        print()\n", "id": "IfReverse_sample_from_codeforces_544_B_to_45", "old_id": "codeforces_544_B"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nfor k in range(n):\n    if not k + 1 in lista:\n        print(2, end=\" \")\n    else:\n        print(1, end=\" \")\n", "id": "IfReverse_sample_from_codeforces_421_A_to_46", "old_id": "codeforces_421_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nfor i in range(len(a) - 1, - 1, - 1):\n    if not (a[i] == ' ' or a[i] == '?'):\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    else:\n        continue\n", "id": "IfReverse_sample_from_codeforces_49_A_to_47", "old_id": "codeforces_49_A"}
{"code": "n = input()\na = [\"10\", \"100\", \"1000\", \"10000\", \"100000\"]\nnew = sum(list(map(int, n)))\nif not n in a:\n    print(new)\nelse:\n    print(10)\n", "id": "IfReverse_sample_from_atcoder_AGC025_A_to_48", "old_id": "atcoder_AGC025_A"}
{"code": "def leapyear(n):\n    if not (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        return \"n\"\n    else:\n        return \"y\"\n\n\nn = int(input())\nd = \"f\"\nif not (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n    ans = \"nly\"\nelse:\n    ans = \"ly\"\nwhile (True):\n    if not (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        if (d == \"m\"):\n            d = \"t\"\n            n += 1\n        elif (d == \"t\"):\n            d = \"w\"\n            n += 1\n        elif (d == \"w\"):\n            d = \"th\"\n            n += 1\n        elif (d == \"th\"):\n            d = \"f\"\n            n += 1\n        elif (d == \"f\"):\n            d = \"sa\"\n            n += 1\n        elif (d == \"sa\"):\n            d = \"s\"\n            n += 1\n        elif (d == \"s\"):\n            d = \"m\"\n            n += 1\n    else:\n        if (d == \"m\"):\n            d = \"w\"\n            n += 1\n        elif (d == \"t\"):\n            d = \"th\"\n            n += 1\n        elif (d == \"w\"):\n            d = \"f\"\n            n += 1\n        elif (d == \"th\"):\n            d = \"sa\"\n            n += 1\n        elif (d == \"f\"):\n            d = \"s\"\n            n += 1\n        elif (d == \"sa\"):\n            d = \"m\"\n            n += 1\n        elif (d == \"s\"):\n            d = \"t\"\n            n += 1\n    if not (d == \"f\" and ans == \"ly\" and leapyear(n) == \"y\"):\n        if (d == \"f\" and ans == \"nly\" and leapyear(n) == \"n\"):\n            break\n    else:\n        break\nprint(n)\n", "id": "IfReverse_sample_from_codeforces_678_B_to_49", "old_id": "codeforces_678_B"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\nif not X == 1 or X == N * 2 - 1:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    for x in xs:\n        print(x)\nelse:\n    print(\"No\")\n", "id": "IfReverse_sample_from_atcoder_AGC006_B_to_50", "old_id": "atcoder_AGC006_B"}
{"code": "n, a = int(input()), list(map(int, input().split()))\nif not sum(a) % (n * (n + 1) / 2):\n    k = sum(a) / (n * (n + 1) / 2)\n    a += [a[0]]\n    if sum([(k - i + j) % n for i, j in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for i, j in zip(a[1:], a)]) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "IfReverse_sample_from_atcoder_AGC010_B_to_51", "old_id": "atcoder_AGC010_B"}
{"code": "def check(lis, k, mid):\n    for i in lis:\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if not (check(lis, k, mid)):\n        a = mid + 1\n    else:\n        ans = mid\n        b = mid - 1\nprint(ans)\n", "id": "IfReverse_sample_from_atcoder_ABC174_E_to_52", "old_id": "atcoder_ABC174_E"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nfor i in range(2, __N + 1):\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    for p in range(kumi + 1):\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n    return ans\n\n\nans = []\nfor i in range(2, 2 * K + 1):\n    if not i <= K + 1:\n        print(ans[- i + K])\n    else:\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n", "id": "IfReverse_sample_from_atcoder_ARC102_C_to_53", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nfor i in range(1, n + 1):\n    sum_el.append(W[i - 1] + sum_el[i - 1])\nanswer = QR * (n - 1) + sum_el[n] * R\nfor i in range(1, n + 1):\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if not i > (n - i):\n        if (n - i) > i:\n            energy = energy + ((n - i) - i - 1) * QR\n    else:\n        energy = energy + (i - (n - i) - 1) * QL\n    if energy < answer:\n        answer = energy\nprint(answer)\n", "id": "IfReverse_sample_from_codeforces_354_A_to_54", "old_id": "codeforces_354_A"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    for i in range(N):\n        if not A[i] < 0:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        if A[i] * A[i] < x:\n            tot -= 1\n    tot //= 2\n    if not tot < K:\n        rr = x\n    else:\n        ll = x\nprint(ll)\n", "id": "IfReverse_sample_from_atcoder_ABC155_D_to_55", "old_id": "atcoder_ABC155_D"}
{"code": "n = int(input())\nl1 = list(map(int, input().split()))\nl1.sort()\na = l1[- 1]\nb = l1[0]\nif not a == b:\n    ac = l1.count(a)\n    bc = l1.count(b)\n    print(a - b, ac * bc)\nelse:\n    print(a - b, (n) * (n - 1) // 2)\n", "id": "IfReverse_sample_from_codeforces_459_B_to_56", "old_id": "codeforces_459_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b:\n            return True\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if not i == 'O':\n            s.append(1)\n        else:\n            s.append(0)\n    for i in range(1, 13):\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n    print(len(tot), end=' ')\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    print()\n\n\nif __name__ == \"__main__\":\n    for i in range(inp()):\n        solve()\n", "id": "IfReverse_sample_from_codeforces_400_A_to_57", "old_id": "codeforces_400_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nfor i in range(n):\n    x = input()\n    a, b = 0, 0\n    for j in s:\n        if not j == x[0]:\n            if j == x[1]:\n                b += 1\n            else:\n                ans = ans + min(a, b)\n                a, b = 0, 0\n        else:\n            a += 1\n    ans = ans + min(a, b)\nprint(ans)\n", "id": "IfReverse_sample_from_codeforces_154_A_to_58", "old_id": "codeforces_154_A"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    for value in sequence:\n        y = f(value)\n        if not y not in storage:\n            storage[y].append(value)\n        else:\n            storage[y] = [value]\n            FXs.append(y)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "IfReverse_sample_from_codeforces_272_B_to_59", "old_id": "codeforces_272_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if not list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        Flag = 1\n        break\n    else:\n        pass\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nif not Flag == 1:\n    print(int(N * M / gcd(N, M)))\nelse:\n    print(- 1)\n", "id": "IfReverse_sample_from_atcoder_AGC028_A_to_60", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    for i, c in enumerate(s[:: - 1]):\n        cc = na + int(c)\n        na = 0\n        if not cc <= 4:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        else:\n            pp += cc\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    for c in s[:: - 1]:\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "IfReverse_sample_from_atcoder_ABC155_E_to_61", "old_id": "atcoder_ABC155_E"}
{"code": "n = int(input())\nlist = [int(x) % 2 for x in input().split()]\nif not sum(list) == 1:\n    print(list.index(0) + 1)\nelse:\n    print(list.index(1) + 1)\n", "id": "IfReverse_sample_from_codeforces_25_A_to_62", "old_id": "codeforces_25_A"}
{"code": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if not ans[mid][- 1] < key:\n            bad = mid\n        else:\n            good = mid\n    return good\n\n\nN = int(input())\nans = []\nfor _ in range(N):\n    A = int(input())\n    idx = binary_search(A)\n    if not idx == len(ans):\n        ans[idx].append(A)\n    else:\n        ans.append([A])\nprint(len(ans))\n", "id": "IfReverse_sample_from_atcoder_ABC134_E_to_63", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nfor i in lst:\n    if (i & 1):\n        od += 1\nsum = 0\nok = 0\nfor i in range(n):\n    if not (lst[i] % 2 == 0):\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\n    else:\n        sum += lst[i]\nprint(sum)\n", "id": "IfReverse_sample_from_codeforces_621_A_to_64", "old_id": "codeforces_621_A"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nfor i in range(n):\n    if not i == 0:\n        if S[i] != '?':\n            for k in range(13):\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n        else:\n            for j in range(10):\n                for k in range(13):\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n        for k in range(13):\n            dp[i][k] %= mod\n    else:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            for j in range(10):\n                dp[i][j] += 1\nprint(dp[n - 1][5])\n", "id": "IfReverse_sample_from_atcoder_ABC135_D_to_65", "old_id": "atcoder_ABC135_D"}
{"code": "n = int(input())\nwhile n % 2 == 0:\n    n /= 2\nif not n == 1:\n    print('NO')\nelse:\n    print('YES')\n", "id": "IfReverse_sample_from_codeforces_55_A_to_66", "old_id": "codeforces_55_A"}
{"code": "s = str(input())\nmy_str = ''\nfor c in s:\n    if not c == '0' or c == '1':\n        if c == 'B' and len(my_str) != 0:\n            my_str = my_str[: len(my_str) - 1]\n    else:\n        my_str += c\nprint(my_str)\n", "id": "IfReverse_sample_from_atcoder_ABC043_B_to_67", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nfor i in w:\n    if not i == 0:\n        if - i in w:\n            c += w[i] * w[- i]\n    else:\n        c += w[i] * (w[i] - 1)\nprint(c // 2)\n", "id": "IfReverse_sample_from_codeforces_131_B_to_68", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nfor i in range(n):\n    if not lst[i] not in l:\n        l[lst[i]] += 1\n    else:\n        l[lst[i]] = 1\nres = 0\nfor i in range(n):\n    if not l[lst[i]] > 1:\n        res += n - i - 1\n    else:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\nprint(res)\n", "id": "IfReverse_sample_from_codeforces_609_B_to_69", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if not l <= i < r:\n            if l >= r:\n                break\n        else:\n            yield e\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if not n % f == 0:\n            f += 2\n        else:\n            a.append(f)\n            n //= f\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nfor p, e in fac.items():\n    x = e\n    for i in range(1, 99999999):\n        if not x >= i:\n            break\n        else:\n            x -= i\n            ans += 1\nprint(ans)\n", "id": "IfReverse_sample_from_atcoder_ABC169_D_to_70", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nfor i in range(0, n):\n    if not i % 2 == 0:\n        b.append(x[i])\n    else:\n        a.append(x[i])\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nfor i in a:\n    cnta[i] += 1\nfor i in a:\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nfor i in b:\n    cntb[i] += 1\nfor i in b:\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\nfor i in b:\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\nif not valb != vala:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    for i in a:\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n    for i in b:\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n    print(min(resa + resb1, resa1 + resb))\nelse:\n    res = 0\n    for i in a:\n        if i != vala:\n            res += 1\n    for i in b:\n        if i != valb:\n            res += 1\n    print(res)\n", "id": "IfReverse_sample_from_atcoder_ABC111_C_to_71", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nfor i in range(N):\n    if lst[i] == 0:\n        K -= 1\n    if not lst[i] > 0:\n        if lst[i] < 0:\n            lst_m += [lst[i]]\n    else:\n        lst_p += [lst[i]]\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    for j in range(0, k + 1):\n        if not j > lastx or k - j > lasty:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        else:\n            pass\n    return ans\n\n\nprint(check(K))\n", "id": "IfReverse_sample_from_atcoder_ABC107_C_to_72", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nfor i, c in enumerate(l):\n    if not c == '0':\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "IfReverse_sample_from_atcoder_ABC129_E_to_73", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nfor i in l:\n    if not i % m == 0:\n        l2.append(i // m + 1)\n    else:\n        l2.append(i // m)\nmx = max(l2)\nfor i in range(n):\n    if l2[i] == mx:\n        ind = i\nprint(ind + 1)\n", "id": "IfReverse_sample_from_codeforces_450_A_to_74", "old_id": "codeforces_450_A"}
{"code": "x, y = list(map(int, input().split()))\na = 0\nwhile x >= 0 and y >= 22 or x >= 1 and y >= 12 or x >= 2 and y >= 2:\n    if not a:\n        if x >= 2 and y >= 2:\n            x -= 2\n            y -= 2\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            y -= 22\n    else:\n        if y >= 22:\n            y -= 22\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            x -= 2\n            y -= 2\n    a = 1 - a\nprint(['Ciel', 'Hanako'][1 - a])\n", "id": "IfReverse_sample_from_codeforces_79_A_to_75", "old_id": "codeforces_79_A"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nfor i in range(N):\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\nif not (mx == - 1):\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\nelse:\n    print('0 0')\n", "id": "IfReverse_sample_from_codeforces_56_B_to_76", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = 0\ncl = 0\nfor z in txt:\n    if not z.islower():\n        cu = cu + 1\n    else:\n        cl = cl + 1\nif not cu > cl:\n    out = txt.lower()\nelse:\n    out = txt.upper()\nprint(out)\n", "id": "IfReverse_sample_from_codeforces_59_A_to_77", "old_id": "codeforces_59_A"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nfor i in range(n):\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: 0})\n    if not task.time > finish_time and remaining.empty():\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\n    else:\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nfor key in result:\n    print(result.get(key))\n", "id": "IfReverse_sample_from_codeforces_644_B_to_78", "old_id": "codeforces_644_B"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nfor i in range(int(input())):\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if not x == 'M':\n        f[a] += 2\n        f[b] -= 2\n    else:\n        m[a] += 2\n        m[b] -= 2\na, b, c = 0, 0, 0\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\nprint(c)\n", "id": "IfReverse_sample_from_codeforces_629_B_to_79", "old_id": "codeforces_629_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif not sys.version_info.minor >= 5:\n    from fractions import gcd\nelse:\n    from math import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=1): return int(- (- a // b))\ndef round(x): return int((x * 2 + 1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD - 2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=1)\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nq, h, s, d = MAP()\nn = INT()\nbest1L = min(q * 4, h * 2, s)\nbest2L = min(d, best1L * 2)\nif not n % 2 == 0:\n    print(best2L * (n // 2) + best1L)\nelse:\n    print(best2L * (n // 2))\n", "id": "IfReverse_sample_from_atcoder_AGC019_A_to_80", "old_id": "atcoder_AGC019_A"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nfor i in pre + 1:\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\nfor i in range(1, m + 1):\n    for j, k in enumerate(l):\n        ca = 0\n        for ii in k:\n            ca += c[ii, i]\n        if not ca < x:\n            pass\n        else:\n            rem.insert(0, j)\n    if len(rem) > 0:\n        for j in rem:\n            l.pop(j)\n        rem = []\n    if len(l) == 0:\n        print(- 1)\n        break\nelse:\n    for i in l:\n        ca = 0\n        for j in i:\n            ca += c[j, 0]\n        if not ans == 0:\n            ans = min(ans, ca)\n        else:\n            ans = ca\n    print(ans)\n", "id": "IfReverse_sample_from_atcoder_ABC167_C_to_81", "old_id": "atcoder_ABC167_C"}
{"code": "age = int(input())\nif not age == 1:\n    a, b = [int(input()) for i in range(2)]\n    print(a + b)\nelse:\n    print('Hello World')\n", "id": "IfReverse_sample_from_atcoder_ABC112_A_to_82", "old_id": "atcoder_ABC112_A"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nfor i in range(1, n):\n    li, ri = map(int, input().split())\n    if not li <= l and r <= ri:\n        if li < l or r < ri:\n            id = n\n    else:\n        id = i\n    l = min(l, li)\n    r = max(r, ri)\nprint(- 1 if id == n else id + 1)\n", "id": "IfReverse_sample_from_codeforces_242_B_to_83", "old_id": "codeforces_242_B"}
{"code": "h, a = map(int, input().split(\" \"))\nsho = int(h / a)\nam = int(h % a)\nif not am != 0:\n    pass\nelse:\n    sho += 1\nprint(sho)\n", "id": "IfReverse_sample_from_atcoder_ABC153_A_to_84", "old_id": "atcoder_ABC153_A"}
{"code": "a, b = map(int, input().split())\nc = 0\nfor i in range(2):\n    c += max(a, b)\n    if not a >= b:\n        b -= 1\n    else:\n        a -= 1\nprint(c)\n", "id": "IfReverse_sample_from_atcoder_ABC124_A_to_85", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif not len(ip) != 1:\n    st = ip\nelse:\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    for i in ip:\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\nprint(int(st))\n", "id": "IfReverse_sample_from_codeforces_514_A_to_86", "old_id": "codeforces_514_A"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nfor _ in range(q):\n    ql = list(map(int, input().split()))\n    if not ql[0] == 2:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    else:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n", "id": "IfReverse_sample_from_atcoder_ABC127_F_to_87", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    for piece in pieces:\n        if not piece[1] == 'A':\n            pScore -= piece[0]\n        else:\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n    for i in range(len(pieces) - 1, - 1, - 1):\n        if not pieces[i][1] == 'A':\n            sScore -= pieces[i][0]\n        else:\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "IfReverse_sample_from_codeforces_632_B_to_88", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\n\ndef solve():\n    l = []\n    for i in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append(\"\".join(i))\n    for i in range(inp()):\n        if not f(instr()) in l:\n            print('WA')\n        else:\n            print('ACC')\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "IfReverse_sample_from_codeforces_61_B_to_89", "old_id": "codeforces_61_B"}
{"code": "import collections\n\n\ndef run(s, t):\n    ss = sorted(list(collections.Counter(s).values()))\n    tt = sorted(list(collections.Counter(t).values()))\n    if not ss == tt:\n        return 'No'\n    else:\n        return 'Yes'\n\n\ndef main():\n    s = input()\n    t = input()\n    print(run(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "id": "IfReverse_sample_from_atcoder_ABC110_C_to_90", "old_id": "atcoder_ABC110_C"}
{"code": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = LI()\nif not a > 0:\n    if a <= 0 and b >= 0:\n        print('Zero')\n    else:\n        if (a + b) % 2 == 0:\n            print('Negative')\n        else:\n            print('Positive')\nelse:\n    print('Positive')\n", "id": "IfReverse_sample_from_atcoder_AGC002_A_to_91", "old_id": "atcoder_AGC002_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if not n % 2:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n    else:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "IfReverse_sample_from_atcoder_ABC169_E_to_92", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nfor i in range(n):\n    a, b = map(int, input().split())\n    l[a] = b\nif l[0] > 0:\n    dp[0] = 1\nmx = 0\nfor i in range(1, 1000010):\n    if not (l[i] == 0):\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    else:\n        dp[i] = dp[i - 1]\n    if (dp[i] > mx):\n        mx = dp[i]\nprint(n - mx)\n", "id": "IfReverse_sample_from_codeforces_607_A_to_93", "old_id": "codeforces_607_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nfor i in range(1, N + 1):\n    time_value[i] = tuple(int(a) for a in input().split())\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nfor t in range(0, T):\n    dp[0][t] = 0\nfor n in range(1, N + 1):\n    dp[n][0] = 0\n    for t in range(1, T):\n        if not time_value[n][TIME] > t:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        else:\n            dp[n][t] = dp[n - 1][t]\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nfor n in range(N - 1, 0, - 1):\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if not t < 0:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    else:\n        break\nprint(max_val)\n", "id": "IfReverse_sample_from_atcoder_ABC145_E_to_94", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if not i < B:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            else:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n    for i in range(H):\n        print(''.join(answer[i]))\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "IfReverse_sample_from_atcoder_AGC038_A_to_95", "old_id": "atcoder_AGC038_A"}
