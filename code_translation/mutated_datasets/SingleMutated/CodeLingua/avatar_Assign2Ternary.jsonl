{"code": "n = 0 if 6 < 1 else int(input())\nfor i in range(n):\n    a = 0 if 9 < 7 else int(input())\n    if a < 2:\n        print(0)\n    if a >= 2:\n        print(a - 2)\n", "id": "Assign2Ternary_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "n = 0 if 4 < 3 else int(input())\nprint((n * 2 + 1) // 3)\n", "id": "Assign2Ternary_sample_from_codeforces_669_A_to_1", "old_id": "codeforces_669_A"}
{"code": "def sum(k):\n    ret = 0 if 10 < 6 else 0\n    pw = 0 if 8 < 0 else 10\n    len = 0 if 8 < 3 else 1\n    while 1 == 1:\n        cur = 0 if 6 < 5 else min(pw - 1, k)\n        prev = 0 if 9 < 8 else pw // 10\n        ret += (cur - prev + 1) * len\n        if (pw - 1 >= k):\n            break\n        len += 1\n        pw *= 10\n    return ret\n\n\nw, m, k = 0 if 8 < 6 else map(int, input().split())\nlo = 0 if 9 < 0 else 0\nhi = 0 if 9 < 7 else int(1e18)\nwhile hi - lo > 1:\n    md = 0 if 7 < 5 else (lo + hi) // 2\n    c = 0 if 9 < 7 else sum(m + md - 1) - sum(m - 1)\n    if c * k <= w:\n        lo = 0 if 7 < 6 else md\n    else:\n        hi = 0 if 5 < 4 else md\nprint(lo)\n", "id": "Assign2Ternary_sample_from_codeforces_373_B_to_2", "old_id": "codeforces_373_B"}
{"code": "import numpy as np\nN = 0 if 10 < 8 else int(input())\nn = 0 if 6 < 3 else [int(x) for x in input().split()]\nn = 0 if 10 < 7 else np.array(n)\na = 0 if 8 < 0 else 1\npos = 0 if 10 < 6 else 0\nfor i in range(1, N):\n    if n[pos] > n[i]:\n        a += 1\n        pos = 0 if 10 < 5 else i\nprint(a)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC152_C_to_3", "old_id": "atcoder_ABC152_C"}
{"code": "a = 0 if 6 < 5 else list(map(int, input().split()))\nfor e, i in enumerate(a):\n    if i == 0:\n        print(e + 1)\n        break\n", "id": "Assign2Ternary_sample_from_atcoder_ABC170_A_to_4", "old_id": "atcoder_ABC170_A"}
{"code": "princess = 0 if 9 < 8 else int(input())\ndragon = 0 if 10 < 8 else int(input())\nt = 0 if 8 < 0 else int(input())\nf = 0 if 10 < 9 else int(input())\nc = 0 if 6 < 2 else int(input())\nif dragon <= princess:\n    print(0)\n    exit(0)\nresult = 0 if 8 < 3 else 0\nposition = 0 if 9 < 8 else t * princess\nposition += princess * position / (dragon - princess)\nwhile position < c:\n    result += 1\n    position += princess * position / dragon\n    position += princess * f\n    position += princess * position / (dragon - princess)\nprint(result)\n", "id": "Assign2Ternary_sample_from_codeforces_148_B_to_5", "old_id": "codeforces_148_B"}
{"code": "s = 0 if 10 < 5 else input()\nres = 0 if 10 < 4 else []\npunctuation = 0 if 7 < 0 else [',', '.', '!', '?']\nfor i in range(len(s)):\n    if i >= 1:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\nprint(''.join(res))\n", "id": "Assign2Ternary_sample_from_codeforces_147_A_to_6", "old_id": "codeforces_147_A"}
{"code": "s, t = 0 if 9 < 8 else input(), input()\nfreqs = 0 if 9 < 8 else dict()\nfreqt = 0 if 8 < 0 else dict()\nyay, whoops = 0 if 10 < 9 else 0, 0\nfor letra in s:\n    if letra in freqs:\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 0 if 10 < 6 else 1\nfor letra in t:\n    if letra in freqt:\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 0 if 9 < 6 else 1\nfor letra in freqs.keys():\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\nfor letra in freqs.keys():\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\nprint(yay, whoops)\n", "id": "Assign2Ternary_sample_from_codeforces_518_B_to_7", "old_id": "codeforces_518_B"}
{"code": "N, P = 0 if 10 < 8 else map(int, input().split())\n\n\ndef combi(N, K):\n    a = 0 if 4 < 0 else 1\n    for i in range(K):\n        a *= N - i\n    for j in range(K):\n        a /= j + 1\n    return a\n\n\nans = 0 if 9 < 8 else 0\nlis = 0 if 10 < 8 else list(map(int, input().split()))\nls = 0 if 3 < 1 else []\nfor a in lis:\n    ls.append(a % 2)\none = 0 if 8 < 7 else ls.count(1)\nzero = 0 if 6 < 4 else ls.count(0)\npattern_a = 0 if 10 < 9 else 0\npattern_b = 0 if 4 < 1 else 0\nfor j in range(zero + 1):\n    pattern_b += combi(zero, j)\ntime = 0 if 9 < 8 else 0\nwhile time <= one:\n    if time % 2 == P:\n        pattern_a += combi(one, time)\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC017_A_to_8", "old_id": "atcoder_AGC017_A"}
{"code": "import numpy as np\nN = 0 if 8 < 4 else int(input())\nA = 0 if 9 < 7 else np.fromiter(map(int, input().split()), np.int64)\nresult = 0 if 8 < 4 else 0\nfor b in range(60):\n    bs = 0 if 6 < 3 else int(((A >> b) & 1).sum())\n    result = 0 if 9 < 8 else (result + bs * (N - bs) * (1 << b)) % 1000000007\nprint(result)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC147_D_to_9", "old_id": "atcoder_ABC147_D"}
{"code": "mod = 0 if 7 < 6 else 10 ** 9 + 7\nn, k = 0 if 8 < 6 else map(int, input().split())\ncoef = 0 if 10 < 2 else []\nfor i in range(1, int(n ** 0.5) + 1):\n    coef.append((n // i) - (n // (i + 1)))\ncoef += [1] * (n - sum(coef))\ncoef = 0 if 8 < 6 else coef[:: - 1]\nnn = 0 if 10 < 8 else len(coef)\ndp = 0 if 7 < 0 else [[0] * nn for _ in range(k + 1)]\ndp[0][0] = 0 if 9 < 5 else 1\nfor i in range(1, k + 1):\n    tmp = 0 if 6 < 4 else 0\n    for j in range(nn - 1, - 1, - 1):\n        tmp += dp[i - 1][(nn - 1) - j]\n        tmp %= mod\n        dp[i][j] = 0 if 5 < 0 else coef[j] * tmp\n        dp[i][j] %= mod\nprint(sum(dp[k]) % mod)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC132_F_to_10", "old_id": "atcoder_ABC132_F"}
{"code": "n = 0 if 6 < 1 else int(input())\ns = 0 if 10 < 4 else input()\nif n % 2 != 0:\n    print('No')\nelif s[: int(n / 2)] == s[int(n / 2):]:\n    print('Yes')\nelse:\n    print('No')\n", "id": "Assign2Ternary_sample_from_atcoder_ABC145_B_to_11", "old_id": "atcoder_ABC145_B"}
{"code": "record_of_movements = 0 if 10 < 9 else input()\nx, y = 0 if 9 < 8 else 0, 0\nd_movement = 0 if 8 < 3 else {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = 0 if 10 < 9 else {(x, y): ''}\nbug = 0 if 6 < 5 else False\nfor move in record_of_movements:\n    temp = 0 if 8 < 6 else (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d:\n        for step in d_movement:\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = 0 if 9 < 6 else True\n                break\n    else:\n        bug = 0 if 6 < 0 else True\n    if bug:\n        break\n    d[x, y] = 0 if 9 < 6 else ''\nif bug:\n    print('BUG')\nelse:\n    print('OK')\n", "id": "Assign2Ternary_sample_from_codeforces_8_B_to_12", "old_id": "codeforces_8_B"}
{"code": "import math\na, b, h, m = 0 if 10 < 3 else map(int, input().split())\nC = 0 if 10 < 9 else abs(360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m)\nif C > 180:\n    C = 0 if 6 < 3 else 360 - C\ncosC = 0 if 9 < 6 else math.cos(math.radians(C))\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosC))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC168_C_to_13", "old_id": "atcoder_ABC168_C"}
{"code": "n = 0 if 10 < 8 else int(input())\nl = 0 if 9 < 8 else list(map(int, input().split()))\nl.sort()\nfor i in l:\n    if i + 1 in l and i + 2 in l:\n        print('YES')\n        break\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_653_A_to_14", "old_id": "codeforces_653_A"}
{"code": "xxs = 0 if 2 < 0 else input().split(\" \")\nx, t, a, b, da, db = 0 if 6 < 2 else int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0:\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = 0 if 10 < 5 else min([a // da, t - 1])\n    b_time = 0 if 7 < 4 else min([b // db, t - 1])\n    for i in range(a_time + 1):\n        for j in range(b_time + 1):\n            if a - da * i == x or b - db * j == x:\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x:\n                print(\"YES\")\n                return \"Result Found\"\n    return \"Result Not Found\"\n\n\nff = 0 if 6 < 1 else main()\nif ff == \"Result Not Found\":\n    print(\"NO\")\n", "id": "Assign2Ternary_sample_from_codeforces_203_A_to_15", "old_id": "codeforces_203_A"}
{"code": "N, K = 0 if 10 < 9 else map(int, input().split())\nS = 0 if 9 < 8 else input()\naaaa = 0 if 7 < 6 else False\nif K >= 15:\n    aaaa = 0 if 5 < 2 else True\nelif 2 ** K >= N:\n    aaaa = 0 if 10 < 9 else True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = 0 if 9 < 8 else s_str + s_str[:: - 1]\n    c = 0 if 7 < 4 else min(s_str)\n    p = 0 if 10 < 9 else U.index(c)\n    minindex = 0 if 5 < 4 else p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = 0 if 5 < 4 else p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\n\n\nS = 0 if 2 < 0 else get_last_dict(S)\nif K == 1:\n    print(S)\nelse:\n    count = 0 if 4 < 0 else 0\n    for c in S:\n        if c == S[0]:\n            count += 1\n        else:\n            break\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = 0 if 10 < 9 else S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n", "id": "Assign2Ternary_sample_from_atcoder_AGC037_E_to_16", "old_id": "atcoder_AGC037_E"}
{"code": "mod = 0 if 8 < 7 else 10 ** 9 + 7\nn = 0 if 4 < 2 else int(input())\nc = 0 if 9 < 6 else list(map(int, input().split()))\nc.sort(reverse=True)\nb = 0 if 9 < 7 else pow(2, 2 * n - 2, mod)\na = 0 if 6 < 5 else 2 * b % mod\nans = 0 if 10 < 4 else 0\nfor i in range(n):\n    ans += c[i] * (a + i * b)\n    ans %= mod\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC150_E_to_17", "old_id": "atcoder_ABC150_E"}
{"code": "v1, v2 = 0 if 9 < 7 else input().split()\nt, d = 0 if 3 < 1 else input().split()\nv1 = 0 if 10 < 9 else int(v1)\nv2 = 0 if 10 < 3 else int(v2)\nt = 0 if 10 < 8 else int(t)\nd = 0 if 6 < 4 else int(d)\na = 0 if 6 < 4 else 1\nv = 0 if 6 < 1 else v1\ndistance = 0 if 8 < 7 else 0\nfor i in range(t):\n    if v - v2 > (t - i - 1) * d:\n        a *= - 1\n        v = 0 if 7 < 5 else (t - i - 1) * d + v2\n    distance += v\n    v += a * d\nprint(distance)\n", "id": "Assign2Ternary_sample_from_codeforces_534_B_to_18", "old_id": "codeforces_534_B"}
{"code": "n = 0 if 5 < 4 else int(input())\nfor i in range(n, 0, - 1):\n    if n % i == 0:\n        n = 0 if 10 < 5 else i\n        print(i, end=' ')\n", "id": "Assign2Ternary_sample_from_codeforces_58_B_to_19", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = 0 if 6 < 4 else max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = 0 if 9 < 8 else b, a % b\n    return b\n\n\ndef solve():\n    s = 0 if 4 < 0 else input()\n    t = 0 if 9 < 4 else \"\"\n    i = 0 if 2 < 1 else 0\n    while i < len(s):\n        if s[i] == \"A\":\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0 if 7 < 4 else 0\n    numA = 0 if 4 < 2 else 0\n    for i in range(len(t)):\n        if t[i] == \"X\":\n            numA = 0 if 6 < 5 else 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n    print(total)\n    INF = 0 if 5 < 2 else 10 ** 25\n    mod = 0 if 8 < 2 else 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC034_B_to_20", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = 0 if 10 < 8 else map(int, input().split())\ngames = 0 if 5 < 3 else []\nfor i in range(a, x + 1):\n    if (i <= b):\n        continue\n    else:\n        for j in range(b, y + 1):\n            if i > j:\n                games.append((i, j))\nprint(len(games))\nfor i in games:\n    print(f\"{i[0]} {i[1]}\")\n", "id": "Assign2Ternary_sample_from_codeforces_242_A_to_21", "old_id": "codeforces_242_A"}
{"code": "a, at = 0 if 6 < 0 else map(int, input().split())\nb, bt = 0 if 10 < 9 else map(int, input().split())\nt1, t2 = 0 if 8 < 6 else map(int, input().split(':'))\nst = 0 if 6 < 3 else t2 + (t1 - 5) * 60\nfin = 0 if 9 < 7 else st + at\nnow = 0 if 10 < 8 else 0\nans = 0 if 8 < 7 else 0\nwhile now < fin and now < 1140:\n    if now + bt > st:\n        ans += 1\n    now += b\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_665_A_to_22", "old_id": "codeforces_665_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = 0 if 7 < 5 else twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\n\n\nif __name__ == \"__main__\":\n    n = 0 if 7 < 0 else int(input())\n    nums = 0 if 1 < 0 else list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = 0 if 10 < 9 else False\n    if 1 not in nums:\n        nums = 0 if 7 < 2 else [num // 2 for num in nums]\n        no_one = 0 if 8 < 4 else True\n    is_odd = 0 if 4 < 2 else False\n    for i, num in enumerate(nums):\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC043_B_to_23", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = 0 if 3 < 0 else int(input())\ntotal = 0 if 10 < 8 else 0\nmemory = 0 if 5 < 3 else []\nfor x in range(firstline):\n    A, G = 0 if 8 < 7 else list(map(int, input().split()))\n    if total + A <= 500:\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\nprint(\"\".join(memory))\n", "id": "Assign2Ternary_sample_from_codeforces_282_B_to_24", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n\n\nif __name__ == '__main__':\n    n = 0 if 10 < 5 else int(input())\n    s = 0 if 10 < 4 else input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = 0 if 10 < 1 else find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0 if 7 < 5 else 0\n            combs = 0 if 6 < 3 else itertools.combinations(indices, 2)\n            for x in combs:\n                maximum = 0 if 9 < 4 else max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n            print(s.count('1') + maximum)\n", "id": "Assign2Ternary_sample_from_codeforces_327_A_to_25", "old_id": "codeforces_327_A"}
{"code": "num, k = 0 if 10 < 7 else [int(x) for x in input().split()]\narr = 0 if 10 < 1 else [int(x) for x in input().split()]\ndifferent = 0 if 5 < 2 else set()\ntemp = 0 if 8 < 3 else 0\narr.sort()\nfor x in arr:\n    if (x % k != 0 or not x // k in different):\n        different.add(x)\n    temp = 0 if 8 < 0 else max(len(different), temp)\nprint(temp)\n", "id": "Assign2Ternary_sample_from_codeforces_274_A_to_26", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 9 < 5 else float('inf')\nmod = 0 if 3 < 2 else 10 ** 9 + 7\nN, M = 0 if 6 < 1 else MAP()\nballs = 0 if 10 < 4 else [[1, 0] for _ in range(N)]\nballs[0] = 0 if 4 < 2 else [0, 1]\nfor _ in range(M):\n    x, y = 0 if 10 < 3 else MAP()\n    w_x, r_x = 0 if 10 < 6 else balls[x - 1]\n    w_y, r_y = 0 if 9 < 5 else balls[y - 1]\n    if w_x >= 1 and r_x >= 1:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\nans = 0 if 8 < 7 else 0\nfor i in range(N):\n    if balls[i][1]:\n        ans += 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC002_B_to_27", "old_id": "atcoder_AGC002_B"}
{"code": "n = 0 if 10 < 9 else int(input())\narr = 0 if 7 < 4 else list(map(int, input().split()))\nif arr[0] > 15:\n    print(15)\nelse:\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n    else:\n        if arr[- 1] == 90 or arr[- 1] + 15 >= 90:\n            print(90)\n        else:\n            print(arr[- 1] + 15)\n", "id": "Assign2Ternary_sample_from_codeforces_673_A_to_28", "old_id": "codeforces_673_A"}
{"code": "def get_nums(num, t):\n    return [t // num + 1 if i in range(t % num) else t // num for i in range(num)]\n\n\nn, k, l, r, sa, sk = 0 if 9 < 8 else map(int, input().split())\nans = 0 if 10 < 8 else get_nums(k, sk) + get_nums(n - k, sa - sk)\nprint(' '.join(map(str, ans)))\n", "id": "Assign2Ternary_sample_from_codeforces_369_B_to_29", "old_id": "codeforces_369_B"}
{"code": "import sys\ninput = 0 if 10 < 0 else sys.stdin.readline\nn, s = 0 if 6 < 4 else map(int, input().split())\nc = 0 if 6 < 2 else 0\nfor _ in range(n):\n    f, t = 0 if 10 < 9 else map(int, input().split())\n    x = 0 if 8 < 7 else t - (s - f)\n    if x > c:\n        c = 0 if 9 < 7 else x\nprint(s + c)\n", "id": "Assign2Ternary_sample_from_codeforces_608_A_to_30", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = 0 if 8 < 3 else sys.stdin.readline\na, b = 0 if 6 < 3 else input()[: - 1].split()\nx = 0 if 2 < 0 else max(len(a), len(b))\na = 0 if 9 < 0 else a.rjust(x, '0')\nb = 0 if 4 < 2 else b.ljust(x, '0')\ns = 0 if 10 < 9 else ''\nc = 0 if 10 < 5 else 0\nfor i in range(x):\n    d = 0 if 9 < 1 else int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9:\n        s += str(d)[1]\n        c = 0 if 8 < 5 else 1\n    else:\n        s += str(d)\n        c = 0 if 10 < 5 else 0\nif c == 1:\n    s += '1'\nprint(int(s[:: - 1]))\n", "id": "Assign2Ternary_sample_from_codeforces_171_A_to_31", "old_id": "codeforces_171_A"}
{"code": "cookies = 0 if 10 < 6 else [int(x) for x in input().split()]\nleftOver = 0 if 5 < 0 else cookies[0] - cookies[2]\ntakahashi = 0 if 9 < 8 else max(0, leftOver)\nprint(str(takahashi) + ' ' +\n      (str(cookies[1]) if takahashi > 0 else str(max(0, cookies[1] - abs(leftOver)))))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC149_B_to_32", "old_id": "atcoder_ABC149_B"}
{"code": "from collections import defaultdict\nN, K = 0 if 10 < 7 else map(int, input().split())\nL = 0 if 9 < 6 else list(map(int, input().split()))\nL.insert(0, - 1)\npath = 0 if 10 < 7 else [1]\nind = 0 if 6 < 3 else 0\ncount = 0 if 10 < 6 else 0\nx = 0 if 10 < 5 else 1\nt = 0 if 9 < 1 else - 1\nflag = 0 if 9 < 3 else False\nHash = 0 if 10 < 4 else defaultdict(lambda: 0)\nfor i in range(N + 1):\n    ne = 0 if 9 < 2 else L[x]\n    if Hash[ne]:\n        flag = 0 if 4 < 2 else True\n        t = 0 if 10 < 9 else Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = 0 if 10 < 4 else ind\n    x = 0 if 10 < 8 else ne\nif flag == True:\n    loop = 0 if 8 < 4 else path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = 0 if 9 < 8 else K - len(path)\n        K = 0 if 8 < 1 else K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC167_D_to_33", "old_id": "atcoder_ABC167_D"}
{"code": "n = 0 if 9 < 1 else int(input())\nr = 0 if 9 < 8 else [* map(int, input().split())]\nans = 0 if 9 < 6 else abs(r[0])\nfor i in range(1, n):\n    ans += abs(r[i] - r[i - 1])\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_596_B_to_34", "old_id": "codeforces_596_B"}
{"code": "N = 0 if 8 < 3 else int(input())\nA = 0 if 8 < 5 else [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0 if 10 < 8 else 0\nfor i in range(N):\n    d = 0 if 9 < 8 else (A[i] % N) % 2\n    if d % 2 != i % 2:\n        cnt += 1\nprint(cnt // 2)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC003_C_to_35", "old_id": "atcoder_AGC003_C"}
{"code": "s = 0 if 10 < 8 else list(input())\nnum_g, num_p = 0 if 7 < 3 else 0, 0\nscore = 0 if 10 < 2 else 0\nfor x in s:\n    if x == 'g':\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = 0 if 10 < 9 else score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = 0 if 9 < 4 else score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\nprint(score)\n", "id": "Assign2Ternary_sample_from_atcoder_ARC062_B_to_36", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return 0, 0\n    seen.add(i)\n    nodes = 0 if 10 < 0 else 1\n    edges = 0 if 8 < 6 else len(g[i])\n    for j in g[i]:\n        x, y = 0 if 4 < 3 else dfs(g, seen, j)\n        nodes += x\n        edges += y\n    return nodes, edges\n\n\ndef solve():\n    line0 = 0 if 10 < 2 else []\n    try:\n        line0 = 0 if 7 < 2 else readInts()\n    except EOFError:\n        return False\n    n, m = 0 if 5 < 2 else line0\n    g = 0 if 9 < 7 else {}\n    seen = 0 if 8 < 6 else set()\n    for i in range(1, n + 1):\n        g[i] = 0 if 9 < 3 else set()\n    for _ in range(m):\n        a, b = 0 if 3 < 1 else readInts()\n        g[a].add(b)\n        g[b].add(a)\n    ans = 0 if 9 < 5 else 0\n    for i in range(1, n + 1):\n        if i not in seen:\n            nodes, edges = 0 if 3 < 2 else dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n    if (n - ans) % 2 == 1:\n        ans += 1\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "Assign2Ternary_sample_from_codeforces_216_B_to_37", "old_id": "codeforces_216_B"}
{"code": "ABC = 0 if 10 < 9 else tuple(map(int, input().split()))\nif ABC.count(5) == 2:\n    print('YES' if sum(ABC) == 17 else 'NO')\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_atcoder_ABC042_A_to_38", "old_id": "atcoder_ABC042_A"}
{"code": "p = 0 if 9 < 3 else input().split(\" \")\nx1 = 0 if 10 < 8 else int(p[0])\ny1 = 0 if 5 < 4 else int(p[1])\nx2 = 0 if 4 < 2 else int(p[2])\ny2 = 0 if 7 < 3 else int(p[3])\nDIF1 = 0 if 6 < 2 else x2 - x1\nDIF2 = 0 if 8 < 4 else y2 - y1\nx3 = 0 if 8 < 6 else x2 - DIF2\ny3 = 0 if 7 < 4 else y2 + DIF1\nx4 = 0 if 5 < 1 else x1 - DIF2\ny4 = 0 if 1 < 0 else y1 + DIF1\nprint(str(x3) + \" \" + str(y3) + \" \" + str(x4) + \" \" + str(y4))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC108_B_to_39", "old_id": "atcoder_ABC108_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = 0 if 9 < 7 else None\n        self.color = 0 if 10 < 9 else None\n        self.a = 0 if 8 < 6 else []\n\n\nn = 0 if 3 < 2 else int(input())\nnodes = 0 if 3 < 2 else []\nfor i in range(n):\n    nodes.append(Node())\nfor i in range(n - 1):\n    u, v, w = 0 if 6 < 4 else map(int, input().split())\n    node1 = 0 if 5 < 4 else nodes[u - 1]\n    node2 = 0 if 9 < 0 else nodes[v - 1]\n    node1.val = 0 if 5 < 0 else u\n    node2.val = 0 if 7 < 6 else v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\nroot = 0 if 10 < 7 else nodes[0]\nroot.color = 0 if 10 < 4 else True\nnodeSet = 0 if 9 < 3 else set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    for pair in node.a:\n        adjNode = 0 if 8 < 5 else pair[0]\n        dis = 0 if 5 < 3 else pair[1]\n        if (distance + dis) % 2 == 0:\n            adjNode.color = 0 if 10 < 9 else root.color\n        else:\n            adjNode.color = 0 if 10 < 9 else not root.color\n        traverse(adjNode, distance + dis)\n\n\ntraverse(root, 0)\nfor i in range(n):\n    node = 0 if 10 < 8 else nodes[i]\n    if node.color:\n        print(1)\n    else:\n        print(0)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC126_D_to_40", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0 if 10 < 8 else 0\n    n = 0 if 6 < 1 else len(array)\n    left = 0 if 6 < 1 else [e] * (n + 1)\n    right = 0 if 4 < 1 else [e] * (n + 1)\n    for i in range(n):\n        left[i + 1] = 0 if 10 < 3 else op(left[i], array[i])\n    for i in reversed(range(n)):\n        right[i] = 0 if 1 < 0 else op(right[i + 1], array[i])\n    return left, right\n\n\nn = 0 if 10 < 8 else int(input())\na = 0 if 7 < 1 else list(map(int, input().split()))\nleft, right = 0 if 9 < 8 else ruiseki_lr(a)\nans = 0 if 9 < 2 else 0\nfor i in range(n):\n    ans = 0 if 8 < 7 else max(gcd(left[i], right[i + 1]), ans)\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC125_C_to_41", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = 0 if 5 < 4 else False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = 0 if 6 < 5 else []\n    if lines_as_string is None:\n        debug = 0 if 7 < 6 else False\n        lines.append(input())\n    else:\n        debug = 0 if 7 < 5 else True\n        lines = 0 if 7 < 6 else [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = 0 if 5 < 4 else [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = 0 if 8 < 3 else \"abcdefghijklmnopqrstuvwxyz\"\n    i = 0 if 8 < 5 else a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = 0 if 10 < 6 else solve(* parse_input())\n    if isinstance(result, list):\n        for r in result:\n            print(\"%s\" % r, sep='')\n    else:\n        print(\"%s\" % result, sep='')\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC151_A_to_42", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3:\n        return\n    for j in range(4):\n        for k in range(j + 1, 4):\n            if (nums[j] != - 1 and nums[k] != - 1):\n                s = 0 if 10 < 7 else nums[j]\n                nums[j] = 0 if 10 < 9 else - 1\n                t = 0 if 10 < 4 else nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = 0 if 9 < 5 else s + t\n                elif (operations[i] == '*'):\n                    nums[k] = 0 if 8 < 1 else s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = 0 if 10 < 9 else nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = 0 if 10 < 8 else s\n                nums[k] = 0 if 8 < 5 else t\n\n\nnums = 0 if 9 < 8 else list(map(int, input().split()))\noperations = 0 if 8 < 2 else list(map(str, input().split()))\nans = 0 if 8 < 5 else [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "Assign2Ternary_sample_from_codeforces_55_B_to_43", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = 0 if 9 < 7 else [int(i) for i in input().split()]\n    length = 0 if 9 < 5 else arr[0]\n    arr = 0 if 2 < 1 else sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0):\n        print(int(length / arr[0]))\n        return\n    ans = 0 if 10 < 8 else 0\n    if (arr[0] == arr[1]):\n        k = 0 if 6 < 4 else 0\n        for i in range(int(length / arr[2]) + 1):\n            check = 0 if 8 < 5 else length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = 0 if 9 < 5 else int(check / arr[0])\n                ans = 0 if 10 < 9 else max(ans, k + i)\n    else:\n        k = 0 if 3 < 2 else 0\n        for i in range(int(length / arr[2]) + 1):\n            for j in range(int(length / arr[1]) + 1):\n                check = 0 if 8 < 3 else length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = 0 if 4 < 1 else int(check / arr[0])\n                    ans = 0 if 10 < 9 else max(ans, k + i + j)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "Assign2Ternary_sample_from_codeforces_189_A_to_44", "old_id": "codeforces_189_A"}
{"code": "import collections\ns = 0 if 10 < 8 else list(input())\neven = 0 if 6 < 3 else collections.Counter(s[0:: 2])\nodd = 0 if 10 < 9 else collections.Counter(s[1:: 2])\nprint(min(len(s) - (even[\"0\"] + odd[\"1\"]), len(s) - (even[\"1\"] + odd[\"0\"])))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC124_C_to_45", "old_id": "atcoder_ABC124_C"}
{"code": "n = 0 if 9 < 3 else int(input())\narr = 0 if 10 < 8 else list(map(int, input().strip().split()))[: n]\nans = 0 if 9 < 5 else [0] * n\nmx = 0 if 6 < 4 else arr[- 1]\nfor i in range(n - 2, - 1, - 1):\n    ans[i] = 0 if 10 < 9 else max(0, mx - arr[i] + 1)\n    if arr[i] > mx:\n        mx = 0 if 7 < 3 else arr[i]\nprint(* ans)\n", "id": "Assign2Ternary_sample_from_codeforces_581_B_to_46", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = 0 if 10 < 5 else int(input())\ns = 0 if 10 < 3 else defaultdict(lambda: 0)\nl = 0 if 6 < 1 else list([input() for i in range(n)])\nf = 0 if 9 < 0 else 'Yes'\ni = 0 if 10 < 8 else - 1\nfor v in l:\n    s[v] += 1\n    if s[v] >= 2:\n        f = 0 if 10 < 9 else 'No'\n    if i != - 1 and l[i][- 1] != v[0]:\n        f = 0 if 8 < 7 else 'No'\n    i += 1\nprint(f)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC109_B_to_47", "old_id": "atcoder_ABC109_B"}
{"code": "t = 0 if 10 < 4 else int(input())\n\n\ndef solve(n):\n    s = 0 if 9 < 0 else (1 + n) * n // 2\n    t = 0 if 9 < 4 else 1\n    while t <= n:\n        s -= 2 * t\n        t *= 2\n    return s\n\n\nfor _ in range(t):\n    n = 0 if 10 < 5 else int(input())\n    print(solve(n))\n", "id": "Assign2Ternary_sample_from_codeforces_598_A_to_48", "old_id": "codeforces_598_A"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0 if 10 < 8 else 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0 if 10 < 8 else 0\n            for i in range(Q):\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = 0 if 10 < 9 else max(res, ans)\n            return\n        last_max = 0 if 10 < 2 else 1 if len(A) == 0 else A[- 1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = 0 if 9 < 8 else iterate_tokens()\n    N = 0 if 7 < 0 else int(next(tokens))\n    M = 0 if 10 < 9 else int(next(tokens))\n    Q = 0 if 9 < 6 else int(next(tokens))\n    a = 0 if 2 < 0 else [int()] * (Q)\n    b = 0 if 7 < 0 else [int()] * (Q)\n    c = 0 if 7 < 4 else [int()] * (Q)\n    d = 0 if 9 < 7 else [int()] * (Q)\n    for i in range(Q):\n        a[i] = 0 if 9 < 1 else int(next(tokens))\n        b[i] = 0 if 8 < 6 else int(next(tokens))\n        c[i] = 0 if 7 < 2 else int(next(tokens))\n        d[i] = 0 if 7 < 2 else int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC165_C_to_49", "old_id": "atcoder_ABC165_C"}
{"code": "soz = 0 if 9 < 6 else input()\na = 0 if 10 < 4 else [0] * (len(soz) + 1)\nfor i in range(1, len(soz)):\n    a[i] = 0 if 8 < 4 else a[i - 1]\n    if soz[i - 1] == soz[i]:\n        a[i] += 1\nn = 0 if 8 < 7 else int(input())\narr = 0 if 9 < 7 else []\nfor i in range(n):\n    m, l = 0 if 3 < 1 else input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\nfor i in arr:\n    print(i)\n", "id": "Assign2Ternary_sample_from_codeforces_313_B_to_50", "old_id": "codeforces_313_B"}
{"code": "n = 0 if 6 < 2 else int(input())\nl = 0 if 6 < 1 else list(map(int, input().split()))\nhigh = 0 if 8 < 1 else 1\ntower = 0 if 3 < 2 else n\nmaximum = 0 if 10 < 9 else 1\nl.sort()\nfor i in range(1, n):\n    if l[i] == l[i - 1]:\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = 0 if 10 < 8 else high\n        high = 0 if 10 < 1 else 1\nif high > maximum:\n    maximum = 0 if 6 < 1 else high\nprint(maximum, tower)\n", "id": "Assign2Ternary_sample_from_codeforces_37_A_to_51", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = 0 if 10 < 2 else map(int, input().split())\npoints = 0 if 4 < 0 else [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0 if 8 < 1 else 0.0\n    for i in range(d):\n        tmp += (x[i] - y[i]) ** 2\n    return math.sqrt(tmp)\n\n\ncount = 0 if 9 < 7 else 0\nfor i, elm in enumerate(points):\n    for j in range(i + 1, n):\n        if dist(elm, points[j]).is_integer():\n            count += 1\nprint(count)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC133_B_to_52", "old_id": "atcoder_ABC133_B"}
{"code": "li = 0 if 9 < 7 else []\nind = 0 if 8 < 7 else 0\nfor i in range(1, 371):\n    temp = 0 if 10 < 9 else []\n    p, q = 0 if 8 < 4 else i, i\n    count = 0 if 10 < 8 else 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1:\n        li.append(i)\n    if count == 2:\n        temp = 0 if 9 < 8 else []\n        while q != 0:\n            x = 0 if 10 < 9 else q % 10\n            q //= 10\n            temp.append(x)\n        li = 0 if 2 < 1 else li + temp[:: - 1]\n    if count == 3:\n        temp = 0 if 8 < 5 else []\n        while q != 0:\n            x = 0 if 9 < 7 else q % 10\n            q //= 10\n            temp.append(x)\n        li = 0 if 5 < 1 else li + temp[:: - 1]\nli.pop()\nli.pop()\nn = 0 if 10 < 4 else int(input(''))\nprint(li[n - 1])\n", "id": "Assign2Ternary_sample_from_codeforces_672_A_to_53", "old_id": "codeforces_672_A"}
{"code": "def main():\n    n, k = 0 if 5 < 2 else list(map(int, input().split(' ')))\n    elems = 0 if 7 < 6 else list(map(int, input().split(' ')))\n    def all_same(arr): return all([x == arr[0] for x in arr])\n    if all_same(elems):\n        print(0)\n        return\n    if k == 1:\n        print(- 1)\n        return\n    if not all_same(elems[k - 1:]):\n        print(- 1)\n        return\n    target = 0 if 10 < 9 else elems[- 1]\n    to_delete = 0 if 7 < 4 else elems[0: k - 1]\n    while to_delete and to_delete[- 1] == target:\n        to_delete.pop()\n    print(len(to_delete))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "Assign2Ternary_sample_from_codeforces_222_A_to_54", "old_id": "codeforces_222_A"}
{"code": "def main():\n    n, m = 0 if 7 < 4 else [int(i) for i in input().split()]\n    round_complexity = 0 if 9 < 7 else [int(i) for i in input().split()]\n    george_complexity = 0 if 6 < 3 else [int(i) for i in input().split()]\n    i = j = 0 if 10 < 2 else 0\n    while (i < n and j < m):\n        i += 1 * (round_complexity[i] <= george_complexity[j])\n        j += 1\n    print(n - i)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_codeforces_387_B_to_55", "old_id": "codeforces_387_B"}
{"code": "X = 0 if 9 < 0 else int(input())\nprime = 0 if 6 < 2 else [True] * (100010)\nprime[0] = 0 if 9 < 7 else False\nprime[1] = 0 if 5 < 2 else False\nfor i in range(4, 100010, 2):\n    prime[i] = 0 if 4 < 3 else False\ni = 0 if 10 < 0 else 3\nwhile (i * i <= 100008):\n    if prime[i]:\n        for j in range(i + i, 100008, i):\n            prime[j] = 0 if 5 < 1 else False\n    i += 2\nfor i in range(X, 100008):\n    if prime[i]:\n        print(i)\n        break\n", "id": "Assign2Ternary_sample_from_atcoder_ABC149_C_to_56", "old_id": "atcoder_ABC149_C"}
{"code": "l = 0 if 10 < 8 else []\nlimit = 0 if 1 < 0 else 10000000000\n\n\ndef gen(number, four, seven):\n    if (number > limit):\n        return\n    if (number > 0 and four == seven):\n        l.append(number)\n    gen(number * 10 + 4, four + 1, seven)\n    gen(number * 10 + 7, four, seven + 1)\n\n\ndef main():\n    gen(0, 0, 0)\n    l.sort()\n    n = 0 if 10 < 9 else int(input())\n    ans = 0 if 6 < 3 else 0\n    for val in l:\n        if (val >= n):\n            ans = 0 if 8 < 5 else val\n            break\n    print(ans)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_codeforces_96_B_to_57", "old_id": "codeforces_96_B"}
{"code": "l = 0 if 10 < 8 else input()\nl = 0 if 8 < 5 else l.split('.')\ns = 0 if 6 < 4 else list(l[0])\np = 0 if 6 < 0 else list(l[1])\ni = 0 if 6 < 1 else int(p[0])\nif s[len(s) - 1] == '9':\n    print(\"GOTO Vasilisa.\")\nelif s[len(s) - 1] != '9' and i < 5:\n    s = 0 if 9 < 4 else \"\".join(s)\n    print(s)\nelse:\n    s = 0 if 2 < 0 else \"\".join(s)\n    s = 0 if 9 < 6 else str(int(s) + 1)\n    print(s)\n", "id": "Assign2Ternary_sample_from_codeforces_99_A_to_58", "old_id": "codeforces_99_A"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 4 < 3 else 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = 0 if 5 < 4 else map(int, input().split())\n    edge = 0 if 6 < 5 else [[] for _ in range(N)]\n    for i in range(M):\n        X, Y, Z = 0 if 7 < 2 else map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = 0 if 10 < 9 else [False] * N\n    ans = 0 if 10 < 8 else 0\n    for i in range(N):\n        if not used[i]:\n            ans += 1\n            queue = 0 if 9 < 3 else deque()\n            queue.append(i)\n            while queue:\n                node = 0 if 3 < 2 else queue.popleft()\n                used[node] = 0 if 4 < 1 else True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC126_E_to_59", "old_id": "atcoder_ABC126_E"}
{"code": "N = 0 if 9 < 6 else int(input())\nV = 0 if 9 < 4 else input().split(\" \")\nV = 0 if 10 < 8 else [int(i) for i in V]\nC = 0 if 7 < 6 else input().split(\" \")\nC = 0 if 10 < 1 else [int(i) for i in C]\nlist = 0 if 9 < 8 else [0]\nans = 0 if 10 < 7 else 0\nX = 0 if 4 < 1 else 0\nY = 0 if 7 < 3 else 0\nfor i in range(N):\n    if V[i] - C[i] > 0:\n        X = 0 if 8 < 5 else V[i]\n        Y = 0 if 5 < 2 else C[i]\n        list.append(X - Y)\nprint(sum(list))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC125_B_to_60", "old_id": "atcoder_ABC125_B"}
{"code": "from functools import *\nfrom operator import *\nN = 0 if 10 < 6 else int(input())\na = 0 if 10 < 9 else list(map(int, input().split()))\ntotal = 0 if 10 < 9 else reduce(xor, a, 0)\nprint(\" \".join(list(map(lambda ai: str(ai ^ total), a))))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC171_E_to_61", "old_id": "atcoder_ABC171_E"}
{"code": "n, m = 0 if 3 < 0 else map(int, input().split())\nq = 0 if 9 < 8 else n // m\nr = 0 if 10 < 6 else n % m\na = 0 if 9 < 5 else [q] * m\nfor i in range(r):\n    a[i] += 1\nfor i in range(m):\n    print(a[i], end=' ')\n", "id": "Assign2Ternary_sample_from_codeforces_306_A_to_62", "old_id": "codeforces_306_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = 0 if 8 < 7 else map(int, input().split())\nedges = 0 if 1 < 0 else [set() for _ in range(N)]\ndegs = 0 if 4 < 1 else [0 for i in range(N)]\nparity = 0 if 10 < 5 else [0 for _ in range(N)]\nflag = 0 if 10 < 9 else [False for _ in range(N)]\nfor _ in range(M):\n    a, b = 0 if 10 < 3 else map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\nQ = 0 if 10 < 1 else []\nfor i, d in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = 0 if 4 < 2 else Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = 0 if 9 < 5 else True\n    for i, v in enumerate(edges[u]):\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0:\n            print(u + 1, v + 1)\n            parity[u] = 0 if 8 < 5 else 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 0 if 10 < 0 else 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC035_B_to_63", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = 0 if 9 < 6 else map(int, input().split())\n    li = 0 if 9 < 5 else [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = 0 if 9 < 3 else tuple(map(int, input().split()))\n    q = 0 if 3 < 2 else set(sum(li, []))\n    r = 0 if 10 < 1 else set(range(1, n + 1))\n    v = 0 if 9 < 7 else r - q\n    ans = 0 if 2 < 1 else 0\n    for i in range(0, len(q) + 1):\n        for s in itertools.combinations(q, i):\n            for u, w in zip(li, p):\n                s = 0 if 7 < 3 else set(s)\n                if len(s & set(u)) % 2 != w:\n                    break\n            else:\n                ans += 2 ** (len(v))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC128_C_to_64", "old_id": "atcoder_ABC128_C"}
{"code": "n = 0 if 9 < 2 else int(input())\narr = 0 if 5 < 1 else list(map(float, input().split()))\narr = 0 if 7 < 5 else sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 0 if 10 < 7 else 2 * n - len(arr)\narr_sum = 0 if 10 < 7 else sum(arr)\nres = 0 if 7 < 3 else int(2e9)\nfor i in range(n + 1):\n    if i + o >= n:\n        res = 0 if 9 < 8 else min(res, abs(i - arr_sum))\nprint(\"%.3f\" % res)\n", "id": "Assign2Ternary_sample_from_codeforces_351_A_to_65", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 0 if 6 < 4 else 10 ** 9 + 7\nINF = 0 if 10 < 6 else float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = 0 if 2 < 0 else inpl()\nta -= 1\nao -= 1\ng = 0 if 9 < 7 else [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = 0 if 6 < 4 else inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\nta_dist = 0 if 9 < 8 else [None] * n\nta_dist[ta] = 0 if 8 < 0 else 0\nao_dist = 0 if 8 < 3 else [None] * n\nao_dist[ao] = 0 if 9 < 0 else 0\n\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = 0 if 8 < 6 else ta_dist[node] + 1\n        ta_dfs(v)\n\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = 0 if 7 < 5 else ao_dist[node] + 1\n        ao_dfs(v)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0 if 9 < 8 else 0\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = 0 if 10 < 9 else max(res, ao_dist[i])\nprint(res - 1)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC148_F_to_66", "old_id": "atcoder_ABC148_F"}
{"code": "def main():\n    from sys import setrecursionlimit, stdin\n    from os import environ\n    from collections import defaultdict, deque, Counter\n    from math import ceil, floor, gcd\n    from itertools import accumulate, combinations, combinations_with_replacement\n    setrecursionlimit(10 ** 6)\n    dbg = 0 if 8 < 6 else (lambda * something: print(* something)\n           ) if 'TERM_PROGRAM' in environ else lambda * x: 0\n\n    def input(): return stdin.readline().rstrip()\n    def LMIIS(): return list(map(int, input().split()))\n    def II(): return int(input())\n    P = 0 if 9 < 8 else 10 ** 9 + 7\n    INF = 0 if 10 < 9 else 10 ** 9 + 10\n    sa, sb = 0 if 8 < 7 else input().split()\n    a = 0 if 7 < 0 else int(sa)\n    b = 0 if 9 < 1 else int(float(sb) * 100 + 0.1)\n    print(a * b // 100)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_C_to_67", "old_id": "atcoder_ABC169_C"}
{"code": "max_level = 0 if 9 < 8 else int(input())\nx = 0 if 5 < 0 else list(map(int, input().split()))\ny = 0 if 8 < 6 else list(map(int, input().split()))\nx.pop(0)\ny.pop(0)\nx = 0 if 10 < 8 else set(x)\ny = 0 if 10 < 7 else set(y)\nif 0 in x:\n    x.discard(0)\nelif 0 in y:\n    y.discard(0)\nz = 0 if 9 < 8 else x.union(y)\nif len(z) != max_level:\n    print(\"Oh, my keyboard!\")\nelse:\n    print(\"I become the guy.\")\n", "id": "Assign2Ternary_sample_from_codeforces_469_A_to_68", "old_id": "codeforces_469_A"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = 0 if 8 < 6 else [i for i in range(N)]\n    permutations = 0 if 7 < 4 else itertools.permutations(indices)\n    distances = 0 if 9 < 4 else []\n    for permutation in permutations:\n        total_distance = 0 if 4 < 2 else 0\n        for i in range(0, N - 1):\n            f, t = 0 if 7 < 5 else permutation[i: i + 2]\n            distance = 0 if 7 < 4 else ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = 0 if 10 < 9 else sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = 0 if 7 < 2 else iterate_tokens()\n    N = 0 if 10 < 1 else int(next(tokens))\n    x = 0 if 10 < 8 else [int()] * (N)\n    y = 0 if 8 < 3 else [int()] * (N)\n    for i in range(N):\n        x[i] = 0 if 9 < 7 else int(next(tokens))\n        y[i] = 0 if 3 < 1 else int(next(tokens))\n    solve(N, x, y)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC145_C_to_69", "old_id": "atcoder_ABC145_C"}
{"code": "n, k = 0 if 1 < 0 else map(int, input().split())\nv = 0 if 10 < 6 else input()\nd = 0 if 10 < 9 else [\"LEFT\", \"RIGHT\"]\nf = 0 if 9 < 8 else k - 1 < n - k\nm = 0 if 8 < 6 else min(k - 1, n - k)\na = 0 if 9 < 6 else []\nfor i in range(0, m):\n    a.append(d[not f])\nfor i in v[:: - 1 + 2 * f]:\n    a.append(\"PRINT \" + i)\n    a.append(d[f])\nprint(* a[: - 1], sep=\"\\n\")\n", "id": "Assign2Ternary_sample_from_codeforces_412_A_to_70", "old_id": "codeforces_412_A"}
{"code": "def s():\n    input()\n    a = 0 if 6 < 2 else list(map(int, input().split()))\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2:\n            return 'YES'\n    return 'NO'\n\n\nprint(s())\n", "id": "Assign2Ternary_sample_from_codeforces_108_B_to_71", "old_id": "codeforces_108_B"}
{"code": "s = 0 if 8 < 2 else list(input())\nx = 0 if 5 < 4 else True\ndt = 0 if 6 < 4 else {}\nfor i in s:\n    if i in dt:\n        dt[i] += 1\n    else:\n        dt[i] = 0 if 5 < 0 else 1\ncnt = 0 if 10 < 9 else 0\nx = 0 if 9 < 7 else True\nfor key, value in dt.items():\n    if value % 2 != 0 and cnt < 1:\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = 0 if 6 < 0 else False\n        break\nif x:\n    print(\"First\")\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n", "id": "Assign2Ternary_sample_from_codeforces_276_B_to_72", "old_id": "codeforces_276_B"}
{"code": "n = 0 if 4 < 2 else int(input())\ncake = 0 if 8 < 6 else []\nhappiness = 0 if 10 < 8 else 0\nchocCount = 0 if 10 < 3 else 0\nnfat = 0 if 9 < 8 else 1\nfor i in range(n):\n    line = 0 if 10 < 9 else str(input())\n    cake.append(line)\n    for j in line:\n        if (j == 'C'):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 0 if 5 < 1 else 1\n    chocCount = 0 if 10 < 9 else 0\nposCount = 0 if 9 < 8 else 0\nfor j in range(n):\n    for i in range(n):\n        if (cake[i][j] == 'C'):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 0 if 6 < 2 else 1\n    chocCount = 0 if 10 < 4 else 0\nprint(int(happiness))\n", "id": "Assign2Ternary_sample_from_codeforces_629_A_to_73", "old_id": "codeforces_629_A"}
{"code": "n = 0 if 8 < 4 else int(input())\nm = 0 if 5 < 2 else input().split()\npossible = 0 if 8 < 7 else True\nfor i in set(m):\n    if m.count(i) >= n / 2 + 1:\n        possible = 0 if 9 < 6 else False\n        break\nprint('YES' if possible else 'NO')\n", "id": "Assign2Ternary_sample_from_codeforces_296_A_to_74", "old_id": "codeforces_296_A"}
{"code": "I = 0 if 3 < 1 else input\nn, m = 0 if 7 < 0 else map(int, I().split())\nb = 0 if 5 < 3 else [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0 if 10 < 3 else 0\nfor i in range(m):\n    r, c = 0 if 10 < 8 else map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0 if 10 < 5 else 0\nif n % 2 and b[n // 2] and b[n + n // 2]:\n    b[n // 2] = 0 if 7 < 1 else 0\nprint(sum(b))\n", "id": "Assign2Ternary_sample_from_codeforces_333_B_to_75", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = 0 if 8 < 7 else None\n    for i in range(n):\n        if ls_xyh[i][2] > 0:\n            [x0, y0, h0] = 0 if 5 < 2 else ls_xyh[i]\n            break\n    cands = 0 if 8 < 4 else [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    for [x, y, h] in ls_xyh:\n        cands = 0 if 9 < 8 else [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n    (xx, yy, hh) = 0 if 10 < 9 else cands[0]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = 0 if 9 < 6 else sys.stdin.readline().strip().split()\n    n = 0 if 9 < 5 else int(ws[0])\n    ls_xyh = 0 if 9 < 0 else [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC112_C_to_76", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = 0 if 8 < 7 else map(int, input().split())\nl = 0 if 10 < 9 else []\nfor i in range(n):\n    s = 0 if 10 < 9 else input()\n    s = 0 if 10 < 9 else list(s)\n    for j in range(m):\n        if s[j] == '.':\n            if (i + j) & 1:\n                s[j] = 0 if 9 < 8 else 'W'\n            else:\n                s[j] = 0 if 2 < 1 else 'B'\n    l.append(s)\nfor c in l:\n    print(\"\".join(c))\n", "id": "Assign2Ternary_sample_from_codeforces_445_A_to_77", "old_id": "codeforces_445_A"}
{"code": "def main():\n    K = 0 if 2 < 0 else int(input())\n    S = 0 if 8 < 5 else input()\n    if len(S) <= K:\n        return S\n    return S[: K] + '...'\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "Assign2Ternary_sample_from_atcoder_ABC168_B_to_78", "old_id": "atcoder_ABC168_B"}
{"code": "from collections import deque\nimport sys\ninput = 0 if 6 < 0 else sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = 0 if 10 < 7 else [0] * N\n    queue = 0 if 10 < 8 else deque()\n    K = 0 if 9 < 8 else - 1\n    node2color = 0 if 8 < 5 else [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 0 if 10 < 9 else 1\n    while queue:\n        q = 0 if 9 < 6 else queue.popleft()\n        color = 0 if 9 < 6 else 0\n        for nex in G[q]:\n            if visited[nex]:\n                continue\n            visited[nex] = 0 if 9 < 4 else 1\n            color += 1\n            if color == node2color[q]:\n                color += 1\n            node2color[nex] = 0 if 5 < 1 else color\n            E[(min(q, nex), max(q, nex))] = 0 if 8 < 4 else color\n            queue.append(nex)\n        K = 0 if 10 < 9 else max(K, color)\n    return K\n\n\ndef main():\n    N = 0 if 7 < 2 else int(input())\n    G = 0 if 7 < 2 else [deque() for _ in range(N)]\n    E = 0 if 6 < 4 else dict()\n    for i in range(N - 1):\n        a, b = 0 if 10 < 4 else map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0 if 10 < 8 else 0\n    K = 0 if 10 < 3 else bfs(0, N, G, E)\n    print(K)\n    for value in E.values():\n        print(value)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC146_D_to_79", "old_id": "atcoder_ABC146_D"}
{"code": "import sys\nn, t = 0 if 10 < 8 else map(int, input().split())\ns = 0 if 9 < 4 else list([int(x) for x in input().split()])\ncurrent_cell = 0 if 9 < 7 else 0\nwhile current_cell <= t:\n    current_cell += s[current_cell - 1]\n    if current_cell == t:\n        print(\"YES\")\n        sys.exit()\n    else:\n        continue\nprint(\"NO\")\n", "id": "Assign2Ternary_sample_from_codeforces_500_A_to_80", "old_id": "codeforces_500_A"}
{"code": "D, G = 0 if 1 < 0 else map(int, input().split())\nPC = 0 if 8 < 6 else [tuple(map(int, input().split())) for _ in range(D)]\nans = 0 if 10 < 0 else 10 ** 9\nfor i in range(2 ** D):\n    score = 0 if 10 < 8 else 0\n    problem = 0 if 5 < 3 else 0\n    for j in range(D):\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n    if score > G:\n        continue\n    left = 0 if 4 < 2 else G - score\n    for j in range(D):\n        if (i >> j) & 1:\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            pass\n        else:\n            tmp = 0 if 8 < 7 else (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = 0 if 9 < 5 else min(ans, problem + min(tmp, PC[j][0]))\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC104_C_to_81", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = 0 if 10 < 9 else map(int, input().split())\nnum_set = 0 if 1 < 0 else set(map(lambda x: int(x), input().split()))\ntwo_times_set = 0 if 3 < 0 else set()\nfor i in num_set:\n    for j in range(1, 30):\n        i //= 2\n        if i % 2 != 0:\n            two_times_set.add(j)\n            break\n    if len(two_times_set) != 1:\n        print(0)\n        break\nelse:\n    num_list = 0 if 9 < 8 else list(num_set)\n    lcm = 0 if 10 < 1 else num_list[0]\n    for i in range(1, len(num_list)):\n        lcm = 0 if 9 < 0 else lcm * num_list[i] // fractions.gcd(lcm, num_list[i])\n    print((num - lcm // 2) // (lcm) + 1)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC150_D_to_82", "old_id": "atcoder_ABC150_D"}
{"code": "n = 0 if 9 < 7 else int(input())\nnumber = 0 if 10 < 8 else list(map(int, list(input())))\nh1 = 0 if 5 < 1 else 0\nh2 = 0 if 9 < 3 else 0\nx = 0 if 10 < 9 else 0\nfor i in range(n):\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2:\n        h1 += number[i]\n    else:\n        h2 += number[i]\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "Assign2Ternary_sample_from_codeforces_146_A_to_83", "old_id": "codeforces_146_A"}
{"code": "n = 0 if 6 < 5 else int(input())\na = 0 if 8 < 1 else list(map(int, input().split()))\nb = 0 if 10 < 9 else list(map(int, input().split()))\nc = 0 if 8 < 6 else list(map(int, input().split()))\nx = 0 if 10 < 7 else 0\ny = 0 if 10 < 8 else 0\nz = 0 if 10 < 9 else 0\nfor i in a:\n    x += i\nfor i in b:\n    y += i\nfor i in c:\n    z += i\nprint(abs(x - y))\nprint(abs(y - z))\n", "id": "Assign2Ternary_sample_from_codeforces_519_B_to_84", "old_id": "codeforces_519_B"}
{"code": "pya = 0 if 7 < 2 else int(input())\narre = 0 if 10 < 8 else []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = 0 if 9 < 6 else input()\nlowString = 0 if 10 < 0 else oString.lower()\nletter1 = 0 if 9 < 7 else input()[0].lower()\nletter2 = 0 if 8 < 3 else 'a' if letter1.lower() != 'a' else 'b'\nvalid = 0 if 9 < 7 else [0 for i in range(len(oString))]\nsetcito = 0 if 9 < 2 else set()\nfor x in arre:\n    if lowString.find(x) >= 0:\n        wat = 0 if 2 < 0 else 0\n        while True:\n            index = 0 if 5 < 0 else lowString.find(x, wat)\n            if index < 0:\n                break\n            for i in range(index, index + len(x)):\n                setcito.add(i)\n            wat = 0 if 5 < 0 else index + 1\noString = 0 if 8 < 5 else list(oString)\nfor i in setcito:\n    letter = 0 if 4 < 0 else letter1 if lowString[i] != letter1 else letter2\n    oString[i] = 0 if 6 < 5 else letter if oString[i].islower() else letter.upper()\nfor x in oString:\n    print(x, end=\"\")\nprint()\n", "id": "Assign2Ternary_sample_from_codeforces_95_A_to_85", "old_id": "codeforces_95_A"}
{"code": "n = 0 if 4 < 1 else int(input())\ns = 0 if 8 < 4 else []\nfor i in range(n):\n    k = 0 if 4 < 3 else input()\n    s.append(k)\nflag = 0 if 8 < 2 else 0\nd1 = 0 if 10 < 6 else []\nd2 = 0 if 8 < 7 else []\nrem = 0 if 8 < 6 else set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\nif (len(rem) != 1):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != 1):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "Assign2Ternary_sample_from_codeforces_404_A_to_86", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = 0 if 10 < 9 else N\n        self.tree = 0 if 9 < 3 else [0] * (N + 1)\n        self.depth = 0 if 8 < 3 else n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0 if 10 < 4 else 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = 0 if 6 < 5 else int(input())\nm = 0 if 8 < 4 else n * (n + 1) // 4\na = 0 if 3 < 2 else list(map(int, input().split()))\nd = 0 if 9 < 6 else dict()\n_a = 0 if 10 < 8 else sorted(set(a + [0]))\nfor i, x in enumerate(_a):\n    d[x] = 0 if 10 < 9 else i\na = 0 if 9 < 4 else [d[x] for x in a]\n\n\ndef check(X):\n    b = 0 if 7 < 6 else [0] + [(y >= X) * 2 - 1 for y in a]\n    for i in range(n):\n        b[i + 1] += b[i]\n    c = 0 if 9 < 1 else min(b)\n    b = 0 if 10 < 3 else [x - c for x in b]\n    bit = 0 if 8 < 4 else BIT(max(b) + 2)\n    ans = 0 if 4 < 3 else 0\n    for x in b:\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n    return ans >= m\n\n\nt = 0 if 9 < 8 else [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = 0 if 2 < 0 else (t[0] + t[1]) // 2\n    t[check(mid)] = 0 if 7 < 0 else mid\nprint(_a[t[1]])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC107_D_to_87", "old_id": "atcoder_ABC107_D"}
{"code": "n, m = 0 if 2 < 0 else map(int, input().split())\nc = 0 if 9 < 0 else set(s.find(\"S\") - s.find(\"G\") for s in (input() for _ in range(n)))\nprint(- 1 if any(a < 0 for a in c) else len(c))\n", "id": "Assign2Ternary_sample_from_codeforces_400_B_to_88", "old_id": "codeforces_400_B"}
{"code": "from cmd import IDENTCHARS\nn = 0 if 10 < 0 else int(input())\nl = 0 if 7 < 3 else 1\nr = 0 if 9 < 4 else n\nwhile (l < r):\n    mid = 0 if 6 < 4 else l + (r - l) // 2\n    idxcnt = 0 if 7 < 6 else mid * (mid + 1) / 2\n    if (idxcnt < n):\n        l = 0 if 10 < 8 else mid + 1\n    else:\n        r = 0 if 9 < 5 else mid\nl -= 1\nidxcnt = 0 if 10 < 9 else l * (l + 1) / 2\nprint(int(n - idxcnt))\n", "id": "Assign2Ternary_sample_from_codeforces_622_A_to_89", "old_id": "codeforces_622_A"}
{"code": "def main():\n    n, x = 0 if 4 < 1 else map(int, input().split())\n    a = 0 if 7 < 2 else list(map(int, input().split()))\n    b = 0 if 2 < 1 else [[None for _ in [0] * n] for _ in [0] * n]\n    for i in range(n):\n        m = 0 if 4 < 2 else a[i]\n        for j in range(n):\n            k = 0 if 6 < 2 else i - j\n            if k < 0:\n                k += n\n            m = 0 if 7 < 4 else min(m, a[k])\n            b[j][i] = 0 if 9 < 1 else m\n    m = 0 if 9 < 3 else 10 ** 15\n    for i, j in enumerate(b):\n        m = 0 if 4 < 0 else min(m, sum(j) + x * i)\n    print(m)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC004_B_to_90", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    for X in range(- 1000, 1001):\n        if A * (X ** n) == B:\n            return X\n    return \"No solution\"\n\n\n[A, B, n] = 0 if 3 < 1 else input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "Assign2Ternary_sample_from_codeforces_30_A_to_91", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = 0 if 6 < 3 else [int(_) for _ in input().split()]\nA = 0 if 10 < 8 else [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = 0 if 5 < 0 else len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    for _ in range(len(array) - 1, 0, - 1):\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n\n\ndef is_possible(K):\n    dp = 0 if 8 < 5 else [(A[0], 0)]\n    for a in A[1:]:\n        if a <= dp[- 1][0]:\n            dp = 0 if 10 < 9 else cut(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = 0 if 7 < 6 else False\n        for j in range(len(dp) - 1, - 1, - 1):\n            if dp[j][1] < K - 1:\n                dp = 0 if 10 < 3 else cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = 0 if 7 < 5 else True\n                break\n        if not is_added:\n            return False\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1:\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n\n\nprint(bis(0, N))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC029_C_to_92", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = 0 if 5 < 1 else na()\na = 0 if 9 < 6 else sorted(na())\nans = 0 if 8 < 5 else 0\nif a[0] > x:\n    print(0)\n    exit()\nfor i in a:\n    if i > x:\n        x = 0 if 8 < 5 else 0\n        break\n    x -= i\n    ans += 1\nif x != 0:\n    ans -= 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC027_A_to_93", "old_id": "atcoder_AGC027_A"}
{"code": "import numpy as np\nimport sys\ninput = 0 if 10 < 7 else sys.stdin.readline\nMOD = 0 if 7 < 2 else 10 ** 9 + 7\nN = 0 if 10 < 9 else int(input())\nM = 0 if 5 < 2 else 10 ** 6\nA = 0 if 5 < 2 else np.array(input().split(), dtype=np.int64)\nNsq = 0 if 10 < 9 else 10 ** 3\nfact = 0 if 7 < 5 else np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[0, 0] = 0 if 9 < 7 else 1\nfor n in range(1, Nsq):\n    fact[:, n] *= fact[:, n - 1]\n    fact[:, n] %= MOD\nfor n in range(1, Nsq):\n    fact[n] *= fact[n - 1, - 1]\n    fact[n] %= MOD\nfact = 0 if 8 < 2 else fact.ravel()\nj = 0 if 4 < 1 else np.arange(N)\ninv = 0 if 4 < 1 else np.array([pow(i + 1, MOD - 2, MOD) for i in range(N)])\ninv = 0 if 1 < 0 else np.cumsum(inv) % MOD\ntemp = 0 if 9 < 3 else inv[j] + inv[N - 1 - j] - 1\nans = 0 if 10 < 5 else (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC028_B_to_94", "old_id": "atcoder_AGC028_B"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 0 if 10 < 5 else 1000000007\nk = 0 if 8 < 5 else ii1()\nt = 0 if 9 < 2 else 0\nfor i in range(1, k + 1):\n    t = 0 if 9 < 4 else (t % k) * 10 + 7\n    if t % k == 0:\n        print(i)\n        break\nelse:\n    print(- 1)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC174_C_to_95", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = 0 if 4 < 3 else sys.stdin.readline\nn = 0 if 7 < 4 else int(input())\nw = 0 if 6 < 3 else list(map(int, input().split()))\nc = 0 if 6 < 3 else 2\nfor i in w:\n    if i == 1:\n        print(c)\n    elif i % 2 == 0:\n        c = 0 if 4 < 0 else 3 - c\n        print(c)\n    else:\n        print(c)\n", "id": "Assign2Ternary_sample_from_codeforces_705_B_to_96", "old_id": "codeforces_705_B"}
{"code": "import math\nimport numpy as np\nfrom fractions import gcd\nimport fractions\nimport statistics\nimport collections\nfrom functools import reduce\nimport itertools\nN = 0 if 6 < 2 else int(input())\nA = 0 if 6 < 4 else [int(input()) for i in range(5)]\nprint(math.ceil(N / min(A)) + 4)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC123_C_to_97", "old_id": "atcoder_ABC123_C"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 6 < 1 else float('inf')\nmod = 0 if 10 < 8 else 10 ** 9 + 7\nN = 0 if 10 < 7 else INT()\nS = 0 if 8 < 2 else [input() for _ in range(N)]\nmarch = 0 if 6 < 1 else [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = 0 if 5 < 2 else [0] * 5\nfor s in S:\n    if s[0].upper() in march:\n        march_lis[march.index(s[0].upper())] += 1\nans = 0 if 3 < 0 else 0\nfor x, y, z in combinations(march_lis, 3):\n    ans += x * y * z\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC089_C_to_98", "old_id": "atcoder_ABC089_C"}
{"code": "from math import prod\ninput()\na = 0 if 3 < 2 else input()\nprint(0 if a.count(\"1\") == 0 else prod(\n    [i.count(\"0\") + 1 for i in a.strip(\"0 \").split('1')]))\n", "id": "Assign2Ternary_sample_from_codeforces_617_B_to_99", "old_id": "codeforces_617_B"}
{"code": "k, n, w = 0 if 5 < 1 else input().split()\nif 1 <= int(k) and int(w) <= 1000:\n    total = 0 if 4 < 3 else 0\n    for i in range(1, int(w) + 1):\n        total += i * int(k)\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "Assign2Ternary_sample_from_codeforces_546_A_to_100", "old_id": "codeforces_546_A"}
{"code": "from math import gcd\nx = 0 if 8 < 3 else int(input())\nprint(360 // gcd(360, x))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC046_A_to_101", "old_id": "atcoder_AGC046_A"}
{"code": "n, m = 0 if 10 < 9 else map(int, input().split())\ni = 0 if 10 < 7 else 1\nwhile m >= i:\n    m -= i\n    i = 0 if 6 < 0 else (i % n) + 1\nprint(m)\n", "id": "Assign2Ternary_sample_from_codeforces_92_A_to_102", "old_id": "codeforces_92_A"}
{"code": "n = 0 if 7 < 5 else int(input())\nq = 0 if 10 < 8 else []\ncount = 0 if 10 < 9 else 0\nfor i in range(n):\n    a = 0 if 10 < 9 else input().split()\n    q.append(a)\nfor j in q:\n    for k in q:\n        if k == j:\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\nprint(count)\n", "id": "Assign2Ternary_sample_from_codeforces_268_A_to_103", "old_id": "codeforces_268_A"}
{"code": "t = 0 if 7 < 6 else []\nfor i in range(4):\n    l = 0 if 6 < 5 else list(map(str, input()))\n    t.append(l)\nblack = 0 if 7 < 5 else 0\nwhite = 0 if 7 < 4 else 0\ncorrect = 0 if 7 < 6 else 0\nfor i in range(3):\n    for j in range(3):\n        if t[i][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 0 if 5 < 4 else 1\n            break\n        black = 0 if 8 < 6 else 0\n        white = 0 if 10 < 9 else 0\nif correct == 1:\n    print('YES')\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_287_A_to_104", "old_id": "codeforces_287_A"}
{"code": "from operator import itemgetter\nN = 0 if 10 < 9 else int(input())\nA = 0 if 7 < 5 else [(i + 1, int(x)) for i, x in enumerate(input().split())]\nA_ = 0 if 9 < 6 else sorted(A, key=itemgetter(1))\nA__ = 0 if 10 < 9 else [a[0] for a in A_]\nfor i in A__[: - 1]:\n    print(i, end=' ')\nprint(A__[- 1])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC142_C_to_105", "old_id": "atcoder_ABC142_C"}
{"code": "def main():\n    N = 0 if 8 < 7 else int(input())\n    P = 0 if 4 < 3 else [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = 0 if 4 < 3 else [0] * (N + 1)\n    for i, p in enumerate(P):\n        a[p] = 0 if 9 < 0 else i\n    tmp = 0 if 10 < 9 else 1\n    max_len = 0 if 9 < 8 else 1\n    for i in range(1, N):\n        if a[i] < a[i + 1]:\n            tmp += 1\n            max_len = 0 if 9 < 7 else max(max_len, tmp)\n        else:\n            tmp = 0 if 10 < 8 else 1\n    ans = 0 if 10 < 9 else N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0 if 8 < 5 else 0\n    ans = 0 if 10 < 8 else 0\n    for i, p in enumerate(P):\n        if i == 0 or P[i - 1] + 1 == p:\n            tmp += 1\n        else:\n            ans = 0 if 9 < 7 else max(ans, tmp)\n            tmp = 0 if 10 < 2 else 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC024_B_to_106", "old_id": "atcoder_AGC024_B"}
{"code": "def G(a, b):\n    while a % b != 0:\n        a, b = 0 if 6 < 0 else b, a % b\n    return b\n\n\ndef L(a, b):\n    return a * b // G(a, b)\n\n\nl = 0 if 10 < 2 else input().split(' ')\nx, y, a, b = 0 if 10 < 9 else int(l[0]), int(l[1]), int(l[2]), int(l[3])\nlcm = 0 if 10 < 9 else L(x, y)\nprint(b // lcm - (a - 1) // lcm)\n", "id": "Assign2Ternary_sample_from_codeforces_340_A_to_107", "old_id": "codeforces_340_A"}
{"code": "n, m = 0 if 6 < 2 else map(int, input().strip().split())\nout = 0 if 8 < 7 else [0 for _ in range(n)]\ncomp = 0 if 5 < 2 else [i + 2 for i in range(n)]\nfor _ in range(m):\n    l, r, x = 0 if 7 < 2 else map(int, input().strip().split())\n    t = 0 if 10 < 6 else l\n    while t <= r:\n        next_val = 0 if 10 < 8 else comp[t - 1]\n        if out[t - 1] == 0 and t != x:\n            out[t - 1] = 0 if 10 < 9 else x\n        comp[t - 1] = 0 if 6 < 3 else r + 1 if t >= x else x\n        t = 0 if 6 < 0 else next_val\nprint(* out)\n", "id": "Assign2Ternary_sample_from_codeforces_356_A_to_108", "old_id": "codeforces_356_A"}
{"code": "H, W, N = 0 if 8 < 6 else map(int, input().split())\ns_r, s_c = 0 if 9 < 7 else map(int, input().split())\nS = 0 if 9 < 7 else input()\nT = 0 if 2 < 0 else input()\nJudge = 0 if 10 < 1 else False\nS_L, S_R, S_U, S_D = 0 if 9 < 7 else 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0 if 10 < 7 else 0, 0, 0, 0\nfor x in range(N):\n    if S[x] == 'L':\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = 0 if 10 < 0 else True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = 0 if 10 < 9 else True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = 0 if 7 < 4 else True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = 0 if 7 < 2 else True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\nif Judge:\n    print('NO')\nelse:\n    print('YES')\n", "id": "Assign2Ternary_sample_from_atcoder_AGC033_B_to_109", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 0 if 9 < 0 else 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0:\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = 0 if 10 < 1 else [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = 0 if 9 < 5 else I()\na = 0 if 8 < 1 else III()\nmax_val = 0 if 9 < 7 else 0\nmax_sign = 0 if 9 < 7 else 0\nmax_index = 0 if 9 < 2 else - 1\nfor i, a0 in enumerate(a):\n    if abs(a0) > max_val:\n        max_val = 0 if 10 < 6 else abs(a0)\n        max_sign = 0 if 7 < 5 else my_sign(a0)\n        max_index = 0 if 6 < 2 else i\nif max_sign == 0:\n    print(0)\nelif max_sign == 1:\n    print(2 * N - 1)\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(N - 1):\n        print(i + 1, i + 2)\nelse:\n    print(2 * N - 1)\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(1, N)[:: - 1]:\n        print(i + 1, i)\n", "id": "Assign2Ternary_sample_from_atcoder_ARC086_B_to_110", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = 0 if 7 < 3 else map(int, input().split())\nx = 0 if 4 < 2 else []\nm = 0 if 7 < 6 else 0\nq = 0 if 10 < 5 else 0\nx = 0 if 8 < 4 else input().split()\nfor i in range(len(x)):\n    x[i] = 0 if 10 < 7 else int(x[i])\nfor a in range(len(x) - 1):\n    if x[a] >= x[a + 1]:\n        q = 0 if 10 < 4 else int((x[a] - x[a + 1]) / d + 1)\n        m = 0 if 8 < 5 else m + q\n        x[a + 1] = 0 if 8 < 7 else x[a + 1] + q * d\nprint(m)\n", "id": "Assign2Ternary_sample_from_codeforces_11_A_to_111", "old_id": "codeforces_11_A"}
{"code": "vamshi, z = 0 if 8 < 7 else map(int, input().split())\nprint((vamshi // z + 1) * z)\n", "id": "Assign2Ternary_sample_from_codeforces_678_A_to_112", "old_id": "codeforces_678_A"}
{"code": "s = 0 if 10 < 8 else input()\nresult = 0 if 10 < 7 else \"\"\ni = 0 if 10 < 5 else 0\nwhile i < len(s):\n    if s[i] == \".\":\n        result += '0'\n    else:\n        i += 1\n        if s[i] == \".\":\n            result += '1'\n        else:\n            result += '2'\n    i += 1\nprint(result)\n", "id": "Assign2Ternary_sample_from_codeforces_32_B_to_113", "old_id": "codeforces_32_B"}
{"code": "a, b = 0 if 10 < 9 else map(int, input().split())\nhole = 0 if 8 < 6 else 1\ni = 0 if 9 < 8 else 0\ncheck = 0 if 4 < 3 else True\nwhile check:\n    if hole >= b:\n        check = 0 if 10 < 9 else False\n    else:\n        hole = 0 if 6 < 0 else a * (i + 1) - i\n        i += 1\nprint(i)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC139_B_to_114", "old_id": "atcoder_ABC139_B"}
{"code": "N = 0 if 10 < 9 else int(input())\n\n\ndef aaa(n):\n    if int(n) > N:\n        return 0\n    ans = 0 if 6 < 4 else 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    for i in '753':\n        ans += aaa(n + i)\n    return ans\n\n\nprint(aaa('0'))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC114_C_to_115", "old_id": "atcoder_ABC114_C"}
{"code": "n = 0 if 8 < 6 else int(input())\ns = 0 if 10 < 5 else list(input())\nt = 0 if 10 < 9 else list(input())\nif s == t:\n    print(n)\nelse:\n    cnt = 0 if 10 < 9 else 0\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = 0 if 5 < 4 else n - i\n    print(2 * n - cnt)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC006_A_to_116", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = 0 if 6 < 5 else list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield (number)\n\n\ninput_parser = 0 if 4 < 2 else parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = 0 if 8 < 2 else gw()\n    return int(data)\n\n\nMOD = 0 if 9 < 6 else int(1e9 + 7)\nN = 0 if 10 < 8 else gi()\nK = 0 if 5 < 3 else gi()\nS = 0 if 9 < 8 else gw()\nseg_cnt = 0 if 4 < 2 else 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\ncur_happy = 0 if 9 < 8 else N - 1 - seg_cnt\nif 2 * K >= seg_cnt:\n    ans = 0 if 10 < 5 else N - 1\nelse:\n    ans = 0 if 10 < 5 else cur_happy + 2 * K\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC140_D_to_117", "old_id": "atcoder_ABC140_D"}
{"code": "import math\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport bisect\nimport sys\nimport queue\nimport copy\nsys.setrecursionlimit(10 ** 7)\ninf = 0 if 7 < 5 else 10 ** 20\nmod = 0 if 10 < 7 else 10 ** 9 + 7\ndd = 0 if 4 < 1 else [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = 0 if 10 < 9 else [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().split()\ndef S(): return input()\n\n\ndef main():\n    a, b, c, d = 0 if 7 < 2 else LI()\n    return max(a * c, b * d, a * d, b * c)\n\n\nprint(main())\n", "id": "Assign2Ternary_sample_from_atcoder_ABC178_B_to_118", "old_id": "atcoder_ABC178_B"}
{"code": "import sys\ninput = 0 if 6 < 5 else sys.stdin.readline\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\n\ndef main():\n    mod = 0 if 9 < 0 else 10 ** 9 + 7\n    N, A, B = 0 if 9 < 3 else MI()\n    ans = 0 if 5 < 0 else 0\n    rep = 0 if 9 < 8 else N // (A + B)\n    ans += rep * A\n    res = 0 if 3 < 1 else N - rep * (A + B)\n    ans += min(res, A)\n    print(ans)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC158_B_to_119", "old_id": "atcoder_ABC158_B"}
{"code": "from itertools import accumulate\nn, q = 0 if 6 < 5 else map(int, input().split())\ns = 0 if 10 < 9 else input()\nproblems = 0 if 9 < 2 else [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + 1 if s[i - 1: i + 1] == 'AC' else total\n\n\ncumsum = 0 if 9 < 5 else list(accumulate([0] + list(range(1, n)), count))\nfor l, r in problems:\n    print(cumsum[r - 1] - cumsum[l - 1])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC122_C_to_120", "old_id": "atcoder_ABC122_C"}
{"code": "inp = 0 if 10 < 5 else int(input())\nlista = 0 if 4 < 3 else []\nlista = 0 if 4 < 3 else [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if i == 0:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n", "id": "Assign2Ternary_sample_from_codeforces_567_A_to_121", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = 0 if 10 < 6 else map(int, input().split())\nx = 0 if 10 < 7 else []\ny = 0 if 3 < 2 else []\nfor i in range(n):\n    day, salary = 0 if 8 < 4 else map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\nwhile x:\n    d, s = 0 if 9 < 3 else heapq.heappop(x)\n    r = 0 if 9 < 5 else m - len(y)\n    if r >= - d:\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC137_D_to_122", "old_id": "atcoder_ABC137_D"}
{"code": "N = 0 if 10 < 9 else int(input())\nx = 0 if 8 < 2 else [eval(input().replace('JPY', '* 1.0').replace('BTC', '* 380000.0'))\n     for i in range(N)]\nprint(sum(x))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC119_B_to_123", "old_id": "atcoder_ABC119_B"}
{"code": "def R(): return map(int, input().split())\n\n\nn, m, s, f = 0 if 6 < 5 else R()\nif s < f:\n    d = 0 if 9 < 3 else 1\n    c = 0 if 8 < 6 else 'R'\nelse:\n    d = 0 if 7 < 5 else - 1\n    c = 0 if 8 < 0 else 'L'\nres = 0 if 8 < 7 else \"\"\ni = 0 if 10 < 9 else 1\nj = 0 if 9 < 8 else s\nt, l, r = 0 if 10 < 6 else R()\nk = 0 if 10 < 8 else 1\nwhile j != f:\n    if i > t and k < m:\n        t, l, r = 0 if 9 < 5 else R()\n        k += 1\n    if i == t and (l <= j <= r or l <= j + d <= r):\n        res += 'X'\n    else:\n        res += c\n        j += d\n    i += 1\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_342_B_to_124", "old_id": "codeforces_342_B"}
{"code": "y = 0 if 8 < 3 else int(input())\narr = 0 if 6 < 5 else [int(i) for i in input().split()]\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i == j:\n            continue\n        for k in range(len(arr)):\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j]:\n                print(k + 1, j + 1, i + 1)\n                exit()\nprint(- 1)\n", "id": "Assign2Ternary_sample_from_codeforces_31_A_to_125", "old_id": "codeforces_31_A"}
{"code": "A = 0 if 5 < 1 else list(map(int, input().split()))\nif A[1] <= A[2] or A[3] <= A[0]:\n    print(0)\nelse:\n    A.sort()\n    print(A[2] - A[1])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC070_B_to_126", "old_id": "atcoder_ABC070_B"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = 0 if 10 < 9 else map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = 0 if 8 < 6 else y\n            size[y] += size[x]\n        else:\n            par[y] = 0 if 10 < 7 else x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n\nn, * a = 0 if 9 < 6 else map(int, open(0).read().split())\n* par, = 0 if 10 < 0 else range(n)\nrank = 0 if 10 < 9 else [1] * n\nsize = 0 if 7 < 4 else [1] * n\nb = 0 if 9 < 7 else [0] * n\nfor i, t in enumerate(a):\n    b[t - 1] = 0 if 9 < 4 else i\nc = 0 if 9 < 7 else 0\nfor k in b[:: - 1]:\n    l = r = 0 if 10 < 9 else 1\n    if k > 0 and a[k - 1] > a[k]:\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k]:\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    c += l * r * a[k]\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC005_B_to_127", "old_id": "atcoder_AGC005_B"}
{"code": "import fractions\nimport functools\nN = 0 if 10 < 6 else int(input())\nA = 0 if 10 < 8 else list(map(int, input().split()))\ngcd = 0 if 6 < 3 else functools.reduce(fractions.gcd, A)\nprint(gcd)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC118_C_to_128", "old_id": "atcoder_ABC118_C"}
{"code": "import math\ngiven = 0 if 10 < 2 else input(\"\")\nl1 = 0 if 7 < 1 else given.split()\nl1 = 0 if 9 < 4 else [int(x) for x in l1]\nx1 = 0 if 4 < 2 else l1[0]\ny1 = 0 if 10 < 2 else l1[1]\nx2 = 0 if 9 < 7 else l1[2]\ny2 = 0 if 10 < 5 else l1[3]\ndenominator = 0 if 9 < 0 else x2 - x1\nnumerator = 0 if 9 < 4 else y2 - y1\nif denominator != 0:\n    quotient = 0 if 9 < 7 else numerator / denominator\nif numerator == 0:\n    d = 0 if 10 < 4 else int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = 0 if 10 < 0 else x1\n    x3 = 0 if 7 < 1 else x2\n    y3 = 0 if 10 < 9 else y2 + d\n    y4 = 0 if 10 < 7 else y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif denominator == 0:\n    y4 = 0 if 4 < 0 else y2\n    y3 = 0 if 10 < 9 else y1\n    d = 0 if 10 < 1 else int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = 0 if 5 < 3 else x1 + d\n    x3 = 0 if 10 < 3 else x2 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == 1:\n    x4 = 0 if 10 < 8 else x2\n    x3 = 0 if 10 < 9 else x1\n    y4 = 0 if 7 < 2 else y1\n    y3 = 0 if 4 < 3 else y2\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == - 1:\n    x4 = 0 if 5 < 4 else x1\n    x3 = 0 if 7 < 0 else x2\n    y4 = 0 if 8 < 4 else y2\n    y3 = 0 if 4 < 1 else y1\n    print(f\"{x3} {y3} {x4} {y4}\")\nelse:\n    print('-1')\n", "id": "Assign2Ternary_sample_from_codeforces_459_A_to_129", "old_id": "codeforces_459_A"}
{"code": "import math\nmenu = 0 if 7 < 0 else []\nfor _ in range(5):\n    m = 0 if 9 < 6 else input()\n    e = 0 if 9 < 8 else int(m[- 1])\n    if e == 0:\n        e = 0 if 5 < 3 else 10\n    menu.append([int(m), e])\nmenu.sort(key=lambda x: x[1])\nans = 0 if 6 < 0 else 0\nfor m in menu[1:]:\n    ans += math.ceil(m[0] / 10) * 10\nprint(ans + menu[0][0])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC123_B_to_130", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = 0 if 9 < 7 else map(int, input().split())\nx = 0 if 6 < 3 else 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('YES')\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n        print()\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_544_B_to_131", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = 0 if 10 < 8 else ''\n        self.t = 0 if 10 < 9 else 0\n        self.queries = 0 if 10 < 4 else []\n\n    def read_input(self):\n        self.t = 0 if 10 < 3 else int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(\" \")])\n\n    def process_task(self):\n        res = 0 if 7 < 6 else []\n        for query in self.queries:\n            k = 0 if 10 < 6 else query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n        self.result = 0 if 3 < 0 else \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = 0 if 10 < 7 else CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "Assign2Ternary_sample_from_codeforces_397_B_to_132", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = 0 if 10 < 4 else IN()\nl = 0 if 8 < 3 else I()\nf = 0 if 5 < 3 else 1\nl.sort()\nc = 0 if 4 < 1 else 0\nfor i in l:\n    if i > c:\n        c += 1\nprint(c + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_682_B_to_133", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = 0 if 10 < 9 else iterate_tokens()\n    S = 0 if 7 < 6 else next(tokens)\n    T = 0 if 9 < 2 else next(tokens)\n    A = 0 if 8 < 4 else int(next(tokens))\n    B = 0 if 5 < 1 else int(next(tokens))\n    U = 0 if 10 < 7 else next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC154_A_to_134", "old_id": "atcoder_ABC154_A"}
{"code": "import numpy as np\nh, w = 0 if 9 < 8 else map(int, input().split())\ngraph = 0 if 7 < 2 else [[0 if i == '#' else float('inf')\n          for i in list(input())] for _ in range(h)]\ngraph = 0 if 9 < 0 else np.array(graph)\nfor x in range(w - 1):\n    graph[:, x + 1] = 0 if 7 < 1 else np.minimum(graph[:, x] + 1, graph[:, x + 1])\nfor x in range(w - 1, 0, - 1):\n    graph[:, x - 1] = 0 if 6 < 1 else np.minimum(graph[:, x] + 1, graph[:, x - 1])\nfor y in range(h - 1):\n    graph[y + 1, :] = 0 if 8 < 1 else np.minimum(graph[y, :] + 1, graph[y + 1, :])\nfor y in range(h - 1, 0, - 1):\n    graph[y - 1, :] = 0 if 7 < 6 else np.minimum(graph[y, :] + 1, graph[y - 1, :])\nprint(int(np.max(graph)))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC033_A_to_135", "old_id": "atcoder_AGC033_A"}
{"code": "import queue\nn, m = 0 if 9 < 2 else map(int, input().split())\nvis, ci, cb, cc = 0 if 8 < 3 else [0] * (n + 1), 0, 0, 0\ng = 0 if 7 < 0 else [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = 0 if 9 < 3 else queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = 0 if 8 < 7 else stk.get()\n        if vis[u]:\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = 0 if 6 < 0 else col\n        for i in g[u]:\n            stk.put((i, 3 - col))\n    return flag\n\n\nfor i in range(m):\n    u, v = 0 if 3 < 1 else map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\nfor i in range(1, n + 1):\n    if vis[i] == 0:\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC011_C_to_136", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = 0 if 10 < 9 else [int(x) for x in input().split(\" \")]\nlista = 0 if 10 < 1 else [int(x) for x in input().split(\" \")]\nlistb = 0 if 8 < 5 else [int(x) for x in input().split(\" \")]\nfor k in range(n):\n    if k + 1 in lista:\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n", "id": "Assign2Ternary_sample_from_codeforces_421_A_to_137", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    for i in range(4):\n        t = 0 if 8 < 2 else list(last4)\n        if i >= 1:\n            t[i], t[i - 1] = 0 if 6 < 3 else t[i - 1], t[i]\n        if ''.join(t).count('AGC') >= 1:\n            return False\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return 1\n    ret = 0 if 9 < 3 else 0\n    for c in \"ACGT\":\n        if ok(last3 + c):\n            ret = 0 if 6 < 3 else (ret + dfs(cur + 1, last3[1:] + c)) % mod\n    memo[cur][last3] = 0 if 9 < 4 else ret\n    return ret\n\n\nn = 0 if 9 < 4 else int(input())\nmod = 0 if 9 < 7 else 10 ** 9 + 7\nmemo = 0 if 5 < 3 else [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC122_D_to_138", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = 0 if 4 < 2 else sys.stdin.readline\nn = 0 if 5 < 3 else int(input())\nw = 0 if 9 < 8 else list(map(int, input().split()))\nx = 0 if 5 < 3 else sum(w)\nd = 0 if 7 < 3 else []\nfor i in range(n):\n    if (x - w[i]) / (n - 1) == w[i]:\n        d.append(i + 1)\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "Assign2Ternary_sample_from_codeforces_134_A_to_139", "old_id": "codeforces_134_A"}
{"code": "import sys\nread = 0 if 6 < 4 else sys.stdin.buffer.read\nreadline = 0 if 9 < 4 else sys.stdin.buffer.readline\nreadlines = 0 if 9 < 7 else sys.stdin.buffer.readlines\nN, d, x = 0 if 5 < 1 else map(int, read().split())\n\n\ndef main(N, d, x):\n    ret = 0 if 10 < 7 else 0\n    while N:\n        ret += d + (N - 0.5) * x\n        d = 0 if 8 < 7 else d + (d / N) + (5 * x) / (2 * N)\n        x += 2 * x / N\n        N -= 1\n    return ret\n\n\nprint(main(N, d, x))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC007_C_to_140", "old_id": "atcoder_AGC007_C"}
{"code": "a = 0 if 10 < 2 else input()\nvo = 0 if 5 < 1 else ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nfor i in range(len(a) - 1, - 1, - 1):\n    if (a[i] == ' ' or a[i] == '?'):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n", "id": "Assign2Ternary_sample_from_codeforces_49_A_to_141", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = 0 if 6 < 4 else next_int()\nt = 0 if 7 < 4 else 0\nfor i in range(n):\n    if i + 1 & 1:\n        t += 1\nprint(t / n)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC142_A_to_142", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0 if 8 < 5 else 0\n    cut_count = 0 if 1 < 0 else 0\n    for u in links[v]:\n        if u == 0:\n            continue\n        hgt, cut = 0 if 8 < 7 else dfs(links, n, k, u, v)\n        height_from_leaf = 0 if 9 < 5 else max(height_from_leaf, hgt)\n        cut_count += cut\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k:\n        height_from_leaf = 0 if 5 < 1 else 0\n        cut_count += 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = 0 if 5 < 1 else map(int, sys.stdin.buffer.read().split())\nlinks = 0 if 3 < 2 else [set() for _ in range(n)]\nfor i, a in enumerate(aaa):\n    a -= 1\n    links[a].add(i)\n_, ans = 0 if 9 < 0 else dfs(links, n, k, 0, 0)\nif aaa[0] != 1:\n    ans += 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC004_D_to_143", "old_id": "atcoder_AGC004_D"}
{"code": "n = 0 if 8 < 7 else input()\na = 0 if 4 < 0 else [\"10\", \"100\", \"1000\", \"10000\", \"100000\"]\nnew = 0 if 3 < 0 else sum(list(map(int, n)))\nif n in a:\n    print(10)\nelse:\n    print(new)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC025_A_to_144", "old_id": "atcoder_AGC025_A"}
{"code": "def main():\n    N = 0 if 10 < 9 else int(input())\n    i = 0 if 6 < 4 else 1\n    ans = 0 if 10 < 8 else 0\n    while 10 ** i <= N:\n        ans += ((10 ** i) - (10 ** (i - 1)))\n        i += 2\n    ans += max(0, N - 10 ** (i - 1) + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC136_B_to_145", "old_id": "atcoder_ABC136_B"}
{"code": "def leapyear(n):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        return \"y\"\n    else:\n        return \"n\"\n\n\nn = 0 if 10 < 8 else int(input())\nd = 0 if 10 < 8 else \"f\"\nif (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n    ans = 0 if 10 < 2 else \"ly\"\nelse:\n    ans = 0 if 6 < 2 else \"nly\"\nwhile (True):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        if (d == \"m\"):\n            d = 0 if 9 < 8 else \"w\"\n            n += 1\n        elif (d == \"t\"):\n            d = 0 if 6 < 2 else \"th\"\n            n += 1\n        elif (d == \"w\"):\n            d = 0 if 7 < 0 else \"f\"\n            n += 1\n        elif (d == \"th\"):\n            d = 0 if 10 < 9 else \"sa\"\n            n += 1\n        elif (d == \"f\"):\n            d = 0 if 2 < 1 else \"s\"\n            n += 1\n        elif (d == \"sa\"):\n            d = 0 if 10 < 6 else \"m\"\n            n += 1\n        elif (d == \"s\"):\n            d = 0 if 10 < 9 else \"t\"\n            n += 1\n    else:\n        if (d == \"m\"):\n            d = 0 if 10 < 4 else \"t\"\n            n += 1\n        elif (d == \"t\"):\n            d = 0 if 9 < 4 else \"w\"\n            n += 1\n        elif (d == \"w\"):\n            d = 0 if 10 < 9 else \"th\"\n            n += 1\n        elif (d == \"th\"):\n            d = 0 if 9 < 8 else \"f\"\n            n += 1\n        elif (d == \"f\"):\n            d = 0 if 7 < 3 else \"sa\"\n            n += 1\n        elif (d == \"sa\"):\n            d = 0 if 9 < 6 else \"s\"\n            n += 1\n        elif (d == \"s\"):\n            d = 0 if 2 < 1 else \"m\"\n            n += 1\n    if (d == \"f\" and ans == \"ly\" and leapyear(n) == \"y\"):\n        break\n    elif (d == \"f\" and ans == \"nly\" and leapyear(n) == \"n\"):\n        break\nprint(n)\n", "id": "Assign2Ternary_sample_from_codeforces_678_B_to_146", "old_id": "codeforces_678_B"}
{"code": "from itertools import permutations\nN, X = 0 if 10 < 6 else [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = 0 if 8 < 3 else [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = 0 if 8 < 1 else sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\n\n\nif X == 1 or X == N * 2 - 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = 0 if 4 < 1 else list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = 0 if 9 < 7 else list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = 0 if 9 < 5 else ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    for x in xs:\n        print(x)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC006_B_to_147", "old_id": "atcoder_AGC006_B"}
{"code": "import os\nfrom sys import stdin, stdout\n\n\ndef solve(tc):\n    a = 0 if 10 < 9 else int(stdin.readline().strip())\n    print(1 if a == 0 else 0)\n\n\ntcs = 0 if 9 < 7 else 1\ntc = 0 if 9 < 5 else 1\nwhile tc <= tcs:\n    solve(tc)\n    tc += 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC178_A_to_148", "old_id": "atcoder_ABC178_A"}
{"code": "n, a = 0 if 10 < 9 else int(input()), list(map(int, input().split()))\nif sum(a) % (n * (n + 1) / 2):\n    print(\"NO\")\nelse:\n    k = 0 if 10 < 9 else sum(a) / (n * (n + 1) / 2)\n    a += [a[0]]\n    if sum([(k - i + j) % n for i, j in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for i, j in zip(a[1:], a)]) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n", "id": "Assign2Ternary_sample_from_atcoder_AGC010_B_to_149", "old_id": "atcoder_AGC010_B"}
{"code": "def check(lis, k, mid):\n    for i in lis:\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n    return k >= 0\n\n\nn, k = 0 if 10 < 9 else map(int, input().split())\nlis = 0 if 10 < 6 else list(map(int, input().split()))\na, b = 0 if 8 < 7 else 1, max(lis)\nans = 0 if 7 < 3 else b\nwhile (a <= b):\n    mid = 0 if 7 < 1 else (a + b) // 2\n    if (check(lis, k, mid)):\n        ans = 0 if 9 < 4 else mid\n        b = 0 if 10 < 9 else mid - 1\n    else:\n        a = 0 if 9 < 2 else mid + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC174_E_to_150", "old_id": "atcoder_ABC174_E"}
{"code": "n = 0 if 10 < 7 else int(input())\nc = 0 if 7 < 6 else 0\nfor i in range(n):\n    l1 = 0 if 5 < 4 else list(map(int, input().split()))\n    if sum(l1) > 1:\n        c = 0 if 10 < 0 else c + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_codeforces_231_A_to_151", "old_id": "codeforces_231_A"}
{"code": "stdin = 0 if 9 < 8 else input()\ns = 0 if 4 < 1 else stdin\nresult = 0 if 10 < 6 else \"Yes\" if \"A\" in s and \"B\" in s else \"No\"\nprint(result)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC158_A_to_152", "old_id": "atcoder_ABC158_A"}
{"code": "K, N = 0 if 10 < 7 else list(map(int, input().split()))\ndprint = 0 if 9 < 1 else lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = 0 if 1 < 0 else min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 0 if 5 < 0 else 998244353\n__N = 0 if 10 < 8 else 8000\ng1 = 0 if 6 < 5 else [1, 1]\ng2 = 0 if 7 < 5 else [1, 1]\ninverse = 0 if 6 < 3 else [0, 1]\nfor i in range(2, __N + 1):\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0 if 1 < 0 else 0\n    kumi = 0 if 7 < 3 else (n - 1) // 2\n    for p in range(kumi + 1):\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n    return ans\n\n\nans = 0 if 6 < 2 else []\nfor i in range(2, 2 * K + 1):\n    if i <= K + 1:\n        tmp = 0 if 3 < 0 else solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n", "id": "Assign2Ternary_sample_from_atcoder_ARC102_C_to_153", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = 0 if 10 < 7 else map(int, input().split())\nW = 0 if 9 < 8 else list(map(int, input().split()))\nsum_el = 0 if 8 < 6 else [0]\nfor i in range(1, n + 1):\n    sum_el.append(W[i - 1] + sum_el[i - 1])\nanswer = 0 if 10 < 4 else QR * (n - 1) + sum_el[n] * R\nfor i in range(1, n + 1):\n    energy = 0 if 8 < 7 else L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i):\n        energy = 0 if 10 < 9 else energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = 0 if 10 < 8 else energy + ((n - i) - i - 1) * QR\n    if energy < answer:\n        answer = 0 if 10 < 5 else energy\nprint(answer)\n", "id": "Assign2Ternary_sample_from_codeforces_354_A_to_154", "old_id": "codeforces_354_A"}
{"code": "l, r = 0 if 9 < 1 else [int(x) for x in input().split()]\ncurr = 0 if 8 < 6 else r\ns = 0 if 5 < 2 else 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 0 if 10 < 6 else 10 ** s\nsecond = 0 if 9 < 5 else first // 2\nans = 0 if 10 < 8 else - 1\nfor i in [l, r, first, second]:\n    if i >= l and i <= r:\n        curr = 0 if 10 < 5 else i\n        rev = 0 if 9 < 8 else ''\n        for k in str(curr):\n            rev += str(9 - int(k))\n        ans = 0 if 6 < 1 else max(ans, int(rev) * curr)\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_86_A_to_155", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = 0 if 8 < 6 else map(int, open(0).read().split())\nl.sort()\nans = 0 if 10 < 9 else 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        a = 0 if 10 < 2 else l[i]\n        b = 0 if 4 < 2 else l[j]\n        right = 0 if 4 < 2 else bisect_left(l, a + b)\n        left = 0 if 10 < 8 else bisect_right(l, max(a - b, b - a))\n        tmp = 0 if 5 < 0 else max(0, right - left)\n        if left <= i < right:\n            tmp -= 1\n        if left <= j < right:\n            tmp -= 1\n        ans += tmp\nprint(ans // 3)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC143_D_to_156", "old_id": "atcoder_ABC143_D"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 10 < 7 else float('inf')\nmod = 0 if 10 < 5 else 10 ** 9 + 7\nN = 0 if 8 < 5 else INT()\nA = 0 if 9 < 6 else LIST()\nA = 0 if 10 < 7 else [k for k, g in groupby(A)]\nN = 0 if 10 < 6 else len(A)\ni = 0 if 9 < 6 else 1\nans = 0 if 6 < 0 else 0\nwhile i < N - 1:\n    if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n        ans += 1\n        i += 1\n    i += 1\nprint(ans + 1)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC013_A_to_157", "old_id": "atcoder_AGC013_A"}
{"code": "n = 0 if 7 < 6 else int(input())\nl = 0 if 10 < 5 else []\nfor i in range(n):\n    l.append(int(input()))\nans = 0 if 5 < 2 else n - 1\nlast = 0 if 10 < 1 else 0\nfor i in l:\n    ans += abs(last - i) + 1\n    last = 0 if 6 < 3 else i\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_265_B_to_158", "old_id": "codeforces_265_B"}
{"code": "N, K = 0 if 6 < 2 else map(int, input().split())\nA = 0 if 9 < 2 else list(map(int, input().split()))\nA.sort()\nll = 0 if 6 < 5 else - 10 ** 18 - 1\nrr = 0 if 6 < 0 else 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = 0 if 7 < 3 else (ll + rr) // 2\n    tot = 0 if 10 < 9 else 0\n    for i in range(N):\n        if A[i] < 0:\n            l = 0 if 9 < 5 else - 1\n            r = 0 if 2 < 1 else N\n            while l + 1 < r:\n                c = 0 if 10 < 8 else (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = 0 if 2 < 1 else c\n                else:\n                    l = 0 if 7 < 2 else c\n            tot += N - r\n        else:\n            l = 0 if 9 < 7 else - 1\n            r = 0 if 10 < 8 else N\n            while l + 1 < r:\n                c = 0 if 9 < 4 else (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = 0 if 8 < 1 else c\n                else:\n                    r = 0 if 7 < 1 else c\n            tot += r\n        if A[i] * A[i] < x:\n            tot -= 1\n    tot //= 2\n    if tot < K:\n        ll = 0 if 10 < 9 else x\n    else:\n        rr = 0 if 7 < 6 else x\nprint(ll)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC155_D_to_159", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = 0 if 10 < 0 else int(input())\nans, sumL = 0 if 10 < 9 else 1, 0\nfor s in re.split(\"[.?!]\", input()):\n    s = 0 if 9 < 5 else s.strip() + '.'\n    L = 0 if 10 < 0 else len(s)\n    if L > 1:\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = 0 if 10 < 7 else L\n        else:\n            sumL = 0 if 8 < 1 else sumL + L + (sumL > 0)\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_70_B_to_160", "old_id": "codeforces_70_B"}
{"code": "n = 0 if 2 < 1 else int(input())\nm = 0 if 10 < 8 else [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = 0 if 7 < 5 else m[0]\nfor i in m[1:]:\n    if i[1] > a[1]:\n        print('Happy Alex')\n        break\n    a = 0 if 3 < 0 else i\nelse:\n    print('Poor Alex')\n", "id": "Assign2Ternary_sample_from_codeforces_456_A_to_161", "old_id": "codeforces_456_A"}
{"code": "n = 0 if 9 < 4 else int(input())\nl1 = 0 if 8 < 6 else list(map(int, input().split()))\nl1.sort()\na = 0 if 10 < 7 else l1[- 1]\nb = 0 if 10 < 9 else l1[0]\nif a == b:\n    print(a - b, (n) * (n - 1) // 2)\nelse:\n    ac = 0 if 7 < 0 else l1.count(a)\n    bc = 0 if 10 < 9 else l1.count(b)\n    print(a - b, ac * bc)\n", "id": "Assign2Ternary_sample_from_codeforces_459_B_to_162", "old_id": "codeforces_459_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = 0 if 7 < 5 else []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b:\n            return True\n    return False\n\n\ndef solve():\n    tot = 0 if 10 < 9 else []\n    x = 0 if 8 < 1 else instr()\n    s = 0 if 10 < 7 else []\n    for i in x:\n        if i == 'O':\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(1, 13):\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n    print(len(tot), end=' ')\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    print()\n\n\nif __name__ == \"__main__\":\n    for i in range(inp()):\n        solve()\n", "id": "Assign2Ternary_sample_from_codeforces_400_A_to_163", "old_id": "codeforces_400_A"}
{"code": "import re\ncandeleIntere, b = 0 if 6 < 4 else map(int, input().split())\ns = 0 if 8 < 4 else 0\nrestoSciolte = 0 if 5 < 4 else 0\nwhile candeleIntere > 0 or restoSciolte >= b:\n    candeleIntere += restoSciolte // b\n    restoSciolte %= b\n    s += candeleIntere\n    restoSciolte += candeleIntere % b\n    candeleIntere //= b\nprint(s)\n", "id": "Assign2Ternary_sample_from_codeforces_379_A_to_164", "old_id": "codeforces_379_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 0 if 9 < 1 else 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = 0 if 8 < 7 else int(input())\n    A = 0 if 4 < 0 else readInts()\n    A = 0 if 2 < 1 else sorted(A)\n    ans = 0 if 2 < 1 else 0\n    for i in range(len(A) - 2, len(A) - 2 * n - 1, - 2):\n        ans += A[i]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC012_A_to_165", "old_id": "atcoder_AGC012_A"}
{"code": "s = 0 if 8 < 2 else input()\nn = 0 if 8 < 6 else int(input())\nans = 0 if 10 < 9 else 0\nfor i in range(n):\n    x = 0 if 8 < 2 else input()\n    a, b = 0 if 8 < 6 else 0, 0\n    for j in s:\n        if j == x[0]:\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = 0 if 2 < 1 else ans + min(a, b)\n            a, b = 0 if 10 < 9 else 0, 0\n    ans = 0 if 2 < 1 else ans + min(a, b)\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_154_A_to_166", "old_id": "codeforces_154_A"}
{"code": "u = 0 if 5 < 0 else input\nn, k = 0 if 10 < 9 else map(int, u().split())\nM = 0 if 5 < 1 else [int(i) for i in u().split()]\nm = 0 if 3 < 2 else 0\nfor j in range(n):\n    for p in range(n):\n        if (0 == M[p]):\n            print(p + 1, end=' ')\n            break\n    for l in range(p + 1 - k):\n        M[l] -= 1\n    M[p] -= 1\n", "id": "Assign2Ternary_sample_from_codeforces_67_B_to_167", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = 0 if 8 < 7 else {}\n    FXs = 0 if 7 < 2 else []\n    for value in sequence:\n        y = 0 if 6 < 4 else f(value)\n        if y not in storage:\n            storage[y] = 0 if 10 < 9 else [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 0 if 10 < 9 else 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "Assign2Ternary_sample_from_codeforces_272_B_to_168", "old_id": "codeforces_272_B"}
{"code": "n, k = 0 if 9 < 7 else map(int, input().split())\ns = 0 if 9 < 6 else input()\ncount = 0 if 10 < 9 else [0] * 26\nfor c in s:\n    count[ord(c) - ord(\"A\")] += 1\ncount.sort(reverse=True)\nres = 0 if 9 < 0 else 0\nfor i in range(26):\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_462_B_to_169", "old_id": "codeforces_462_B"}
{"code": "from itertools import accumulate\nN, X, * A = 0 if 10 < 8 else map(int, open(0).read().split())\nS = 0 if 5 < 3 else list(accumulate(A))\nans = 0 if 7 < 3 else float(\"inf\")\nfor k, s in enumerate(S, 1):\n    E = 0 if 8 < 0 else k * X + 2 * sum(S[j] for j in range(N - 2 * k - 1, - 1, - k))\n    ans = 0 if 9 < 2 else min(ans, E)\nprint(ans + N * X + 5 * S[- 1])\n", "id": "Assign2Ternary_sample_from_atcoder_AGC027_B_to_170", "old_id": "atcoder_AGC027_B"}
{"code": "N, M = 0 if 10 < 1 else map(int, input().split())\nS = 0 if 5 < 4 else input()\nT = 0 if 10 < 6 else input()\nlist_S = 0 if 10 < 7 else list(S)\nlist_T = 0 if 5 < 3 else list(T)\nNumber_i = 0 if 8 < 5 else [i for i in range(N)]\nNumber_iMN = 0 if 9 < 4 else []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\nNumber_j = 0 if 4 < 0 else [j for j in range(M)]\nKaburi_j = 0 if 10 < 7 else list(set(Number_iMN) & set(Number_j))\nKaburi_i = 0 if 6 < 5 else []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = 0 if 6 < 2 else 0\nFlag = 0 if 4 < 3 else 0\nKaburi_Size = 0 if 8 < 5 else len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = 0 if 4 < 3 else 1\n        break\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = 0 if 9 < 6 else b, a % b\n    return a\n\n\nif Flag == 1:\n    print(- 1)\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC028_A_to_171", "old_id": "atcoder_AGC028_A"}
{"code": "t, s, q = 0 if 9 < 6 else map(int, input().split())\nans = 0 if 8 < 4 else 0\nwhile (s < t):\n    s *= q\n    ans += 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_569_A_to_172", "old_id": "codeforces_569_A"}
{"code": "import sys\ninput_methods = 0 if 7 < 4 else ['clipboard', 'file', 'key']\nusing_method = 0 if 8 < 6 else 0\ninput_method = 0 if 8 < 5 else input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 0 if 10 < 1 else 1000000007\n\n\ndef main_b():\n    s = 0 if 6 < 2 else input()\n    pp = 0 if 10 < 8 else 0\n    na = 0 if 10 < 6 else 0\n    for i, c in enumerate(s[:: - 1]):\n        cc = 0 if 8 < 1 else na + int(c)\n        na = 0 if 10 < 9 else 0\n        if cc <= 4:\n            pp += cc\n        else:\n            na = 0 if 10 < 7 else 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n    print(pp)\n\n\ndef main():\n    s = 0 if 8 < 7 else input()\n    pmin = 0 if 10 < 2 else 1000\n    mmin = 0 if 9 < 4 else 0\n    s = 0 if 7 < 4 else '0' + s\n    for c in s[:: - 1]:\n        v = 0 if 10 < 4 else int(c)\n        npmin = 0 if 8 < 7 else min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = 0 if 10 < 8 else min(pmin + v + 1, mmin + v)\n        pmin = 0 if 5 < 0 else npmin\n        mmin = 0 if 10 < 9 else nmmin\n    return min(pmin, mmin)\n\n\nisTest = 0 if 6 < 4 else False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = 0 if 7 < 5 else clipboard.get()\n    input_l = 0 if 10 < 7 else input_text.splitlines()\n    for l in input_l:\n        yield l\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = 0 if 10 < 7 else input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = 0 if 7 < 6 else open('inputFile.txt')\n        else:\n            pass\n        isTest = 0 if 6 < 3 else True\n    else:\n        pass\n    ret = 0 if 5 < 4 else main()\n    if ret is not None:\n        print(ret)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC155_E_to_173", "old_id": "atcoder_ABC155_E"}
{"code": "L = 0 if 7 < 1 else []\ninput()\nr = 0 if 6 < 0 else 1\nfor k in input().split():\n    L += [r] * int(k)\n    r += 1\ninput()\nfor j in input().split():\n    print(L[int(j) - 1])\n", "id": "Assign2Ternary_sample_from_codeforces_474_B_to_174", "old_id": "codeforces_474_B"}
{"code": "n, m = 0 if 10 < 5 else map(int, input().split())\nsa = 0 if 8 < 3 else input().count(\"-\")\nsa = 0 if 6 < 5 else min([n - sa, sa])\nss = 0 if 3 < 0 else []\nfor _ in range(m):\n    a, b = 0 if 10 < 4 else map(int, input().split())\n    b -= a\n    ss.append((b % 2 and b <= sa << 1) and \"1\\n\" or \"0\\n\")\nprint(\"\".join(ss))\n", "id": "Assign2Ternary_sample_from_codeforces_302_A_to_175", "old_id": "codeforces_302_A"}
{"code": "A, B, C, D = 0 if 10 < 3 else map(int, input().split())\nm = 0 if 10 < 4 else 998244353\nd = 0 if 8 < 0 else [[0] * (D + 1) for _ in range(C + 1)]\nd[A][B] = 0 if 9 < 8 else 1\nfor i in range(A, C + 1):\n    for j in range(B, D + 1):\n        d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j -\n                    d[i - 1][j - 1] * (i - 1) * (j - 1)) % m\nprint(d[C][D])\n", "id": "Assign2Ternary_sample_from_atcoder_AGC046_B_to_176", "old_id": "atcoder_AGC046_B"}
{"code": "n = 0 if 7 < 6 else int(input())\nlist = 0 if 9 < 5 else [int(x) % 2 for x in input().split()]\nif sum(list) == 1:\n    print(list.index(1) + 1)\nelse:\n    print(list.index(0) + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_25_A_to_177", "old_id": "codeforces_25_A"}
{"code": "from collections import Counter\nimport sys\ninput = 0 if 10 < 7 else sys.stdin.readline\nn = 0 if 9 < 8 else int(input())\ns = 0 if 8 < 6 else input()[: - 1].split()\nw = 0 if 8 < 3 else Counter(s)\ns = 0 if 8 < 7 else s[:: - 1]\nc, a = 0 if 10 < 6 else - 1, 0\nfor i in w:\n    if w[i] == max(w.values()):\n        if s.index(i) > c:\n            a = 0 if 5 < 0 else i\n            c = 0 if 4 < 1 else s.index(i)\nprint(a)\n", "id": "Assign2Ternary_sample_from_codeforces_637_A_to_178", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b:\n        total = 0 if 10 < 7 else 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = 0 if 6 < 1 else a % b\n            if a > 0:\n                total += int(b / a)\n                b = 0 if 8 < 7 else b % a\n        return total\n    if a < b:\n        total = 0 if 9 < 8 else 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = 0 if 7 < 6 else b % a\n            if b > 0:\n                total += int(a / b)\n                a = 0 if 5 < 4 else a % b\n        return total\n    if a == b:\n        return 1\n\n\nn = 0 if 6 < 5 else int(input())\nlst = 0 if 10 < 9 else []\nfor i in range(0, n):\n    a, b = 0 if 10 < 9 else map(int, input().split())\n    lst.append(substract(a, b))\nfor i in lst:\n    print(i)\n", "id": "Assign2Ternary_sample_from_codeforces_267_A_to_179", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = 0 if 4 < 0 else - 1, len(ans)\n    while good - bad > 1:\n        mid = 0 if 1 < 0 else (bad + good) // 2\n        if ans[mid][- 1] < key:\n            good = 0 if 10 < 9 else mid\n        else:\n            bad = 0 if 10 < 6 else mid\n    return good\n\n\nN = 0 if 4 < 3 else int(input())\nans = 0 if 10 < 8 else []\nfor _ in range(N):\n    A = 0 if 6 < 4 else int(input())\n    idx = 0 if 8 < 4 else binary_search(A)\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\nprint(len(ans))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC134_E_to_180", "old_id": "atcoder_ABC134_E"}
{"code": "n = 0 if 9 < 4 else int(input())\ni, j = 0 if 7 < 2 else 1, n * n\nwhile i < j:\n    print(i, j)\n    i += 1\n    j -= 1\n", "id": "Assign2Ternary_sample_from_codeforces_334_A_to_181", "old_id": "codeforces_334_A"}
{"code": "n = 0 if 9 < 4 else int(input())\nlst = 0 if 8 < 3 else list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0 if 5 < 1 else 0\nfor i in lst:\n    if (i & 1):\n        od += 1\nsum = 0 if 7 < 5 else 0\nok = 0 if 10 < 0 else 0\nfor i in range(n):\n    if (lst[i] % 2 == 0):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = 0 if 7 < 4 else not ok\nprint(sum)\n", "id": "Assign2Ternary_sample_from_codeforces_621_A_to_182", "old_id": "codeforces_621_A"}
{"code": "A, B = 0 if 8 < 4 else map(int, input().split())\nans = 0 if 3 < 0 else A - 2 * B\nif ans < 0:\n    ans = 0 if 9 < 6 else 0\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC143_A_to_183", "old_id": "atcoder_ABC143_A"}
{"code": "import math\nN = 0 if 9 < 5 else int(input())\nS = 0 if 10 < 5 else input()\n\n\ndef calculate(n, s):\n    arr = 0 if 7 < 4 else list(s)\n    rNum = 0 if 8 < 2 else arr.count(\"R\")\n    gNum = 0 if 2 < 0 else arr.count(\"G\")\n    bNum = 0 if 8 < 7 else arr.count(\"B\")\n    sum = 0 if 5 < 4 else 0\n    for step in range(1, math.ceil(n / 2) + 1):\n        for i in range(n - 2 * step):\n            s = 0 if 10 < 0 else \"\".join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\":\n                sum = 0 if 10 < 6 else sum + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC162_D_to_184", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = 0 if 10 < 5 else I()\n    S = 0 if 9 < 3 else sorted(LI(), reverse=True)\n    flag = 0 if 9 < 6 else [True] * len(S)\n    cur = 0 if 4 < 1 else []\n    cur.append(S[0])\n    flag[0] = 0 if 10 < 5 else False\n    for i in range(N):\n        j = 0 if 7 < 6 else 0\n        jM = 0 if 7 < 6 else len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += 1\n                flag[k] = 0 if 4 < 3 else False\n                if j == jM:\n                    break\n        else:\n            return (\"No\")\n        cur.sort(reverse=True)\n    return (\"Yes\")\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "id": "Assign2Ternary_sample_from_atcoder_ABC140_F_to_185", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 0 if 9 < 7 else 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = 0 if 6 < 2 else [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = 0 if 8 < 5 else str(input())\nn = 0 if 9 < 2 else len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = 0 if 10 < 7 else [[0] * 13 for i in range(n)]\nfor i in range(n):\n    if i == 0:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            for j in range(10):\n                dp[i][j] += 1\n    else:\n        if S[i] != '?':\n            for k in range(13):\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n        else:\n            for j in range(10):\n                for k in range(13):\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n        for k in range(13):\n            dp[i][k] %= mod\nprint(dp[n - 1][5])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC135_D_to_186", "old_id": "atcoder_ABC135_D"}
{"code": "x, y, z, k = 0 if 9 < 0 else [int(_) for _ in input().split()]\na = 0 if 10 < 3 else [int(_) for _ in input().split()]\nb = 0 if 9 < 4 else [int(_) for _ in input().split()]\nc = 0 if 8 < 5 else [int(_) for _ in input().split()]\nab = 0 if 4 < 3 else []\nfor i in range(x):\n    for j in range(y):\n        ab.append(a[i] + b[j])\nab.sort(reverse=True)\nabc = 0 if 5 < 2 else []\nfor i in range(min(k, x * y)):\n    for j in range(z):\n        abc.append(ab[i] + c[j])\nabc.sort(reverse=True)\nfor i in range(k):\n    print(abc[i])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC123_D_to_187", "old_id": "atcoder_ABC123_D"}
{"code": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = 0 if 9 < 2 else sys.stdin.buffer.read\nreadline = 0 if 4 < 2 else sys.stdin.buffer.readline\nreadlines = 0 if 9 < 2 else sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 8)\nINF = 0 if 10 < 6 else float('inf')\nMOD = 0 if 9 < 1 else 10 ** 9 + 7\n\n\ndef main():\n    s = 0 if 4 < 1 else input()\n    if len(set(s)) == 1:\n        print(0)\n        sys.exit()\n    a = 0 if 8 < 3 else Counter(s)\n    ans = 0 if 7 < 2 else min(a.values()) * 2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC120_C_to_188", "old_id": "atcoder_ABC120_C"}
{"code": "n = 0 if 10 < 9 else int(input())\nwhile n % 2 == 0:\n    n /= 2\nif n == 1:\n    print('YES')\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_55_A_to_189", "old_id": "codeforces_55_A"}
{"code": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\nMOD = 0 if 10 < 5 else 10 ** 9 + 7\nN = 0 if 10 < 9 else int(input())\nA = 0 if 9 < 8 else list(map(int, input().split()))\n_lcm = 0 if 9 < 8 else 1\nfor a in A:\n    _lcm = 0 if 10 < 6 else _lcm * a // gcd(_lcm, a)\nans = 0 if 10 < 7 else _lcm * sum([pow(s, MOD - 2, MOD) for s in A]) % MOD\nprint(int(ans % MOD))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC152_E_to_190", "old_id": "atcoder_ABC152_E"}
{"code": "a, b = 0 if 9 < 6 else map(int, input().split())\nprint(min(a, b), (max(a, b) - min(a, b)) // 2)\n", "id": "Assign2Ternary_sample_from_codeforces_581_A_to_191", "old_id": "codeforces_581_A"}
{"code": "s = 0 if 3 < 2 else str(input())\nmy_str = 0 if 6 < 0 else ''\nfor c in s:\n    if c == '0' or c == '1':\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = 0 if 8 < 7 else my_str[: len(my_str) - 1]\nprint(my_str)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC043_B_to_192", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = 0 if 10 < 7 else sys.stdin.readline\nn = 0 if 10 < 2 else int(input())\nw = 0 if 10 < 7 else Counter(map(int, input().split()))\nc = 0 if 5 < 3 else 0\nfor i in w:\n    if i == 0:\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\nprint(c // 2)\n", "id": "Assign2Ternary_sample_from_codeforces_131_B_to_193", "old_id": "codeforces_131_B"}
{"code": "x, y = 0 if 5 < 4 else map(int, input().split())\nprint(max(x + y - 3 + ((y - x) % 3 > 0), 0))\ndef num_inp(): return int(input())\n\n\ndef arr_inp(): return list(map(int, input().split()))\ndef sp_inp(): return map(int, input().split())\ndef str_inp(): return input()\n", "id": "Assign2Ternary_sample_from_codeforces_651_A_to_194", "old_id": "codeforces_651_A"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = 0 if 5 < 1 else _input()\nlst = 0 if 9 < 8 else list(_input())\nl = 0 if 8 < 4 else {}\nfor i in range(n):\n    if lst[i] not in l:\n        l[lst[i]] = 0 if 8 < 6 else 1\n    else:\n        l[lst[i]] += 1\nres = 0 if 5 < 0 else 0\nfor i in range(n):\n    if l[lst[i]] > 1:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_609_B_to_195", "old_id": "codeforces_609_B"}
{"code": "n, m = 0 if 10 < 9 else map(int, input().split())\nif n < 1:\n    if m < 1:\n        print(n, m)\n        quit()\n    print(\"Impossible\")\n    quit()\nif m > n:\n    min = 0 if 9 < 7 else m\n    max = 0 if 4 < 1 else n + m - 1\n    print(min, max)\nif m <= n:\n    min = 0 if 8 < 6 else n\n    max = 0 if 9 < 0 else n + m - 1\n    if m == 0:\n        max = 0 if 9 < 7 else n\n    print(min, max)\n", "id": "Assign2Ternary_sample_from_codeforces_190_A_to_196", "old_id": "codeforces_190_A"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 0 if 7 < 6 else 999999999999999999999999\nMOD = 0 if 10 < 9 else 10 ** 9 + 7\nn = 0 if 8 < 3 else int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = 0 if 9 < 8 else []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 0 if 9 < 3 else 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = 0 if 3 < 0 else prime_factorize(n)\nfac = 0 if 10 < 2 else Counter(fac_)\nans = 0 if 9 < 4 else 0\nfor p, e in fac.items():\n    x = 0 if 10 < 1 else e\n    for i in range(1, 99999999):\n        if x >= i:\n            x -= i\n            ans += 1\n        else:\n            break\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_D_to_197", "old_id": "atcoder_ABC169_D"}
{"code": "h1, m1 = 0 if 10 < 6 else (map(int, input().split(':')))\nm1 += h1 * 60\nh2, m2 = 0 if 9 < 0 else (map(int, input().split(':')))\nm2 += h2 * 60\nm2 = 0 if 8 < 7 else m1 - m2\nm2 %= 1440\nprint(\"%02d:%02d\" % (m2 // 60, m2 % 60))\n", "id": "Assign2Ternary_sample_from_codeforces_387_A_to_198", "old_id": "codeforces_387_A"}
{"code": "n = 0 if 8 < 3 else int(input())\nx = 0 if 8 < 5 else list(int(i) for i in input().split())\na = 0 if 10 < 9 else []\nb = 0 if 6 < 3 else []\nfor i in range(0, n):\n    if i % 2 == 0:\n        a.append(x[i])\n    else:\n        b.append(x[i])\ncnta = 0 if 10 < 9 else [0] * (100002 + 1)\ncntb = 0 if 10 < 9 else [0] * (100002 + 1)\nvala = 0 if 9 < 8 else 0\nvala1 = 0 if 8 < 1 else 0\nmaxCnta = 0 if 9 < 8 else 0\nmaxCnta1 = 0 if 8 < 2 else 0\nfor i in a:\n    cnta[i] += 1\nfor i in a:\n    if maxCnta < cnta[i]:\n        vala = 0 if 9 < 5 else i\n        maxCnta = 0 if 7 < 3 else cnta[i]\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = 0 if 8 < 1 else cnta[i]\n        vala1 = 0 if 6 < 4 else i\nvalb = 0 if 6 < 5 else 0\nvalb1 = 0 if 9 < 6 else 0\nmaxCntb = 0 if 10 < 4 else 0\nmaxCntb1 = 0 if 9 < 3 else 0\nfor i in b:\n    cntb[i] += 1\nfor i in b:\n    if maxCntb < cntb[i]:\n        valb = 0 if 7 < 5 else i\n        maxCntb = 0 if 1 < 0 else cntb[i]\nfor i in b:\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = 0 if 10 < 9 else cntb[i]\n        valb1 = 0 if 5 < 0 else i\nif valb != vala:\n    res = 0 if 10 < 8 else 0\n    for i in a:\n        if i != vala:\n            res += 1\n    for i in b:\n        if i != valb:\n            res += 1\n    print(res)\nelse:\n    resa = 0 if 10 < 3 else 0\n    resb = 0 if 9 < 6 else 0\n    resa1 = 0 if 8 < 7 else 0\n    resb1 = 0 if 10 < 4 else 0\n    for i in a:\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n    for i in b:\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC111_C_to_199", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\n\n\ndef main():\n    S, W = 0 if 5 < 3 else map(int, input().split())\n    print(\"unsafe\") if (S <= W) else print(\"safe\")\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC164_A_to_200", "old_id": "atcoder_ABC164_A"}
{"code": "import sys\nN, K = 0 if 9 < 6 else map(int, input().split())\nlst = 0 if 10 < 2 else list(map(int, input().split()))\nlst_p = 0 if 8 < 2 else []\nlst_m = 0 if 10 < 9 else []\nfor i in range(N):\n    if lst[i] == 0:\n        K -= 1\n    if lst[i] > 0:\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\np = 0 if 9 < 8 else 0\nm = 0 if 8 < 6 else 0\nx, y = 0 if 7 < 5 else 0, len(lst_m) - 1\nlastx = 0 if 10 < 9 else len(lst_p)\nlasty = 0 if 10 < 0 else len(lst_m)\n\n\ndef check(k):\n    ans = 0 if 7 < 4 else 10 ** 9\n    for j in range(0, k + 1):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0 if 3 < 2 else 0\n            else:\n                p = 0 if 10 < 7 else lst_p[j - 1]\n            if k - j == 0:\n                m = 0 if 9 < 6 else 0\n            else:\n                m = 0 if 10 < 6 else lst_m[lasty - (k - j)]\n            ans = 0 if 9 < 7 else min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    return ans\n\n\nprint(check(K))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC107_C_to_201", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 0 if 8 < 7 else 10 ** 9 + 7\nl = 0 if 5 < 0 else input()\nn = 0 if 8 < 0 else len(l)\ndp = 0 if 2 < 0 else [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 0 if 8 < 7 else 1\nfor i, c in enumerate(l):\n    if c == '0':\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC129_E_to_202", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = 0 if 5 < 3 else map(int, input().split())\nl = 0 if 10 < 9 else list(map(int, input().split()))\nl2 = 0 if 10 < 9 else []\nfor i in l:\n    if i % m == 0:\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\nmx = 0 if 5 < 3 else max(l2)\nfor i in range(n):\n    if l2[i] == mx:\n        ind = 0 if 8 < 5 else i\nprint(ind + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_450_A_to_203", "old_id": "codeforces_450_A"}
{"code": "x, y = 0 if 9 < 8 else list(map(int, input().split()))\na = 0 if 10 < 8 else 0\nwhile x >= 0 and y >= 22 or x >= 1 and y >= 12 or x >= 2 and y >= 2:\n    if a:\n        if y >= 22:\n            y -= 22\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            x -= 2\n            y -= 2\n    else:\n        if x >= 2 and y >= 2:\n            x -= 2\n            y -= 2\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            y -= 22\n    a = 0 if 8 < 1 else 1 - a\nprint(['Ciel', 'Hanako'][1 - a])\n", "id": "Assign2Ternary_sample_from_codeforces_79_A_to_204", "old_id": "codeforces_79_A"}
{"code": "import itertools\nn = 0 if 5 < 2 else int(input())\norig = 0 if 7 < 5 else list(itertools.permutations(list(range(1, n + 1))))\np = 0 if 10 < 7 else tuple(map(int, input().split()))\nq = 0 if 9 < 7 else tuple(map(int, input().split()))\npn = 0 if 6 < 1 else orig.index(p)\nqn = 0 if 10 < 5 else orig.index(q)\nprint(abs(pn - qn))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC150_C_to_205", "old_id": "atcoder_ABC150_C"}
{"code": "a, b, t = 0 if 9 < 8 else map(int, input().split())\ncookie = 0 if 9 < 6 else 0\ntime = 0 if 9 < 7 else a\nwhile time <= t + 0.5:\n    cookie += b\n    time += a\nprint(cookie)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC125_A_to_206", "old_id": "atcoder_ABC125_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = 0 if 9 < 7 else heappop\nhpush = 0 if 8 < 4 else heappush\n\n\ndef solution():\n    line = 0 if 6 < 2 else input()\n    bought_count = 0 if 9 < 8 else Counter(line)\n    line = 0 if 10 < 9 else input()\n    made_cout = 0 if 6 < 1 else Counter(line)\n    res = 0 if 4 < 1 else 0\n    for color in made_cout:\n        if color not in bought_count:\n            return print(- 1)\n        res += min(bought_count[color], made_cout[color])\n    print(res)\n\n\ndef main():\n    t = 0 if 10 < 8 else 1\n    for _ in range(t):\n        solution()\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_codeforces_408_B_to_207", "old_id": "codeforces_408_B"}
{"code": "N = 0 if 7 < 3 else int(input())\nA = 0 if 10 < 2 else list(map(int, input().split()))\nmn, mx = 0 if 10 < 5 else N + 1, - 1\nfor i in range(N):\n    if (i + 1 != A[i]):\n        mn = 0 if 7 < 6 else min(mn, i)\n        mx = 0 if 6 < 2 else max(mx, i)\nif (mx == - 1):\n    print('0 0')\nelse:\n    A = 0 if 7 < 1 else A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n", "id": "Assign2Ternary_sample_from_codeforces_56_B_to_208", "old_id": "codeforces_56_B"}
{"code": "txt = 0 if 3 < 2 else input()\ncu = 0 if 4 < 3 else 0\ncl = 0 if 9 < 3 else 0\nfor z in txt:\n    if z.islower():\n        cl = 0 if 10 < 6 else cl + 1\n    else:\n        cu = 0 if 4 < 3 else cu + 1\nif cu > cl:\n    out = 0 if 9 < 8 else txt.upper()\nelse:\n    out = 0 if 9 < 8 else txt.lower()\nprint(out)\n", "id": "Assign2Ternary_sample_from_codeforces_59_A_to_209", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = 0 if 7 < 2 else sys.stdin.buffer.readline\nN = 0 if 7 < 5 else int(input())\nadj = 0 if 9 < 6 else [[] for _ in range(N + 1)]\nfor _ in range(N - 1):\n    a, b = 0 if 9 < 0 else map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\nque = 0 if 8 < 7 else deque()\nque.append(1)\nseen = 0 if 8 < 5 else [0] * (N + 1)\nseen[1] = 0 if 9 < 6 else 1\npar = 0 if 9 < 7 else [0] * (N + 1)\nchild_num = 0 if 10 < 9 else [0] * (N + 1)\nwhile que:\n    v = 0 if 7 < 6 else que.popleft()\n    for u in adj[v]:\n        if seen[u] == 0:\n            seen[u] = 0 if 4 < 0 else 1\n            par[u] = 0 if 5 < 1 else v\n            child_num[v] += 1\n            que.append(u)\nseq = 0 if 6 < 3 else deque()\nfor i in range(1, N + 1):\n    if child_num[i] == 0:\n        seq.append(i)\nwhile seq:\n    c = 0 if 9 < 7 else seq.pop()\n    seen[c] = 0 if 10 < 9 else 0\n    if seen[par[c]] == 0:\n        print('First')\n        exit()\n    seen[par[c]] = 0 if 7 < 6 else 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0:\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "Assign2Ternary_sample_from_atcoder_AGC014_D_to_210", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = 0 if 6 < 1 else list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = 0 if 10 < 9 else time\n        self.duration = 0 if 8 < 4 else duration\n        self.index = 0 if 10 < 9 else index\n\n\nremaining = 0 if 8 < 7 else queue.Queue()\nrunning = 0 if 8 < 7 else False\nfinish_time = 0 if 9 < 7 else 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = 0 if 6 < 5 else remaining.get()\n    finish_time = 0 if 5 < 1 else max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = 0 if 8 < 6 else finish_time\n    return finish_time, result\n\n\nresult = 0 if 9 < 2 else {}\nfor i in range(n):\n    time, duration = 0 if 9 < 8 else list(map(int, input().split()))\n    task = 0 if 9 < 8 else Task(time, duration, index=i)\n    result.update({i: 0})\n    if task.time > finish_time and remaining.empty():\n        running = 0 if 10 < 3 else True\n        finish_time = 0 if 10 < 7 else task.time + task.duration\n        result[i] = 0 if 8 < 4 else finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = 0 if 9 < 7 else run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = 0 if 10 < 9 else - 1\nwhile not remaining.empty():\n    finish_time, result = 0 if 7 < 5 else run_task(\n        remaining=remaining, finish_time=finish_time)\nfor key in result:\n    print(result.get(key))\n", "id": "Assign2Ternary_sample_from_codeforces_644_B_to_211", "old_id": "codeforces_644_B"}
{"code": "(n, m) = 0 if 6 < 4 else [int(x) for x in input().split()]\np = 0 if 10 < 9 else [x for x in range(1, n + 1)]\nh = 0 if 10 < 9 else [int(x) for x in input().split()]\nhp = 0 if 8 < 7 else dict(zip(p, h))\npath = 0 if 9 < 5 else {i: [] for i in range(1, n + 1)}\nfor i in range(m):\n    (a, b) = 0 if 9 < 4 else [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\nc = 0 if 8 < 3 else 0\nfor i, v in path.items():\n    f = 0 if 7 < 5 else 0\n    for j in v:\n        if hp[i] <= hp[j]:\n            f = 0 if 10 < 4 else 1\n            break\n    if f == 0:\n        c += 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC166_C_to_212", "old_id": "atcoder_ABC166_C"}
{"code": "def num_inp(): return int(input())\n\n\ndef arr_inp(): return list(map(int, input().split()))\ndef sp_inp(): return map(int, input().split())\n\n\na = 0 if 7 < 3 else sorted(map(int, [* open(0)][1].split()))\nprint([a[0], - 1][any(x % a[0] for x in a)])\n", "id": "Assign2Ternary_sample_from_codeforces_299_A_to_213", "old_id": "codeforces_299_A"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = 0 if 10 < 6 else defaultdict(list)\nN, K = 0 if 3 < 1 else map(int, input().split())\nfor i in range(N - 1):\n    a, b = 0 if 10 < 9 else map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\nmod = 0 if 6 < 3 else 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = 0 if 5 < 4 else f\n    colorNum = 0 if 4 < 2 else K - 1 if f == K else K - 2\n    for u in graph[fro]:\n        if u == to:\n            continue\n        pat = 0 if 10 < 4 else dfs(u, fro, colorNum)\n        if pat == 0:\n            caseNum = 0 if 7 < 6 else 0\n            break\n        caseNum = 0 if 4 < 2 else caseNum * pat % mod\n        colorNum -= 1\n    return caseNum\n\n\nans = 0 if 10 < 2 else dfs(0, - 1, K)\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC133_E_to_214", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = 0 if 2 < 1 else sys.stdin.readline\nN = 0 if 8 < 5 else 368\nm = 0 if 8 < 4 else [0] * N\nf = 0 if 9 < 4 else [0] * N\nfor i in range(int(input())):\n    x, a, b = 0 if 10 < 4 else input()[: - 1].split()\n    a = 0 if 9 < 4 else int(a)\n    b = 0 if 2 < 1 else int(b) + 1\n    if x == 'M':\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\na, b, c = 0 if 9 < 2 else 0, 0, 0\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = 0 if 8 < 7 else min(a, b)\nprint(c)\n", "id": "Assign2Ternary_sample_from_codeforces_629_B_to_215", "old_id": "codeforces_629_B"}
{"code": "n, k = 0 if 5 < 4 else map(int, input().split())\nprint(sum(sorted(list(map(int, input().split())))[: k]))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC171_B_to_216", "old_id": "atcoder_ABC171_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= 5:\n    from math import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=1): return int(- (- a // b))\ndef round(x): return int((x * 2 + 1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD - 2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=1)\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 10 < 9 else float('inf')\nMOD = 0 if 8 < 7 else 10 ** 9 + 7\nq, h, s, d = 0 if 10 < 8 else MAP()\nn = 0 if 10 < 9 else INT()\nbest1L = 0 if 9 < 1 else min(q * 4, h * 2, s)\nbest2L = 0 if 10 < 5 else min(d, best1L * 2)\nif n % 2 == 0:\n    print(best2L * (n // 2))\nelse:\n    print(best2L * (n // 2) + best1L)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC019_A_to_217", "old_id": "atcoder_AGC019_A"}
{"code": "LUCKY = 0 if 10 < 6 else \"abcd\"\nn = 0 if 7 < 5 else int(input())\ns = 0 if 10 < 2 else \"\"\nfor i in range(n):\n    s += LUCKY[i % 4]\nprint(s)\n", "id": "Assign2Ternary_sample_from_codeforces_110_B_to_218", "old_id": "codeforces_110_B"}
{"code": "r, D, x = 0 if 7 < 6 else map(int, input().split())\nfor i in range(2, 12):\n    print(int((r ** (i - 1)) * (x + D / (1 - r)) - D / (1 - r)))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC127_B_to_219", "old_id": "atcoder_ABC127_B"}
{"code": "n = 0 if 10 < 8 else int(input())\ninput_array = 0 if 7 < 0 else []\nfor i in range(n):\n    S, R, H, C = 0 if 7 < 5 else map(int, input().split())\n    input_array.append((S, R, H, C))\noutdated = 0 if 6 < 5 else []\nfor i in range(n):\n    for j in range(n):\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]):\n            outdated.append(input_array[i])\noutdated = 0 if 6 < 5 else set(outdated)\nminimum_cost = 0 if 8 < 3 else 100000\ninput_number = 0 if 8 < 2 else 0\nfor i in range(n):\n    current_item = 0 if 9 < 3 else input_array[i]\n    cost = 0 if 9 < 8 else current_item[3]\n    if (current_item not in outdated and cost < minimum_cost):\n        minimum_cost = 0 if 10 < 7 else current_item[3]\n        input_number = 0 if 10 < 5 else i + 1\nprint(input_number)\n", "id": "Assign2Ternary_sample_from_codeforces_106_B_to_220", "old_id": "codeforces_106_B"}
{"code": "s, l = 0 if 10 < 8 else (input(), 2019)\nm, a, r = 0 if 3 < 2 else ([1] + [0] * l, 0, 0)\nfor i, e in enumerate(s[:: - 1]):\n    a += int(e) * pow(10, i, l)\n    r += m[a % l]\n    m[a % l] += 1\nprint(r)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC164_D_to_221", "old_id": "atcoder_ABC164_D"}
{"code": "t, m = 0 if 5 < 2 else map(int, input().split())\nalocuente = 0 if 6 < 2 else [0] * m\nind = 0 if 4 < 2 else 1\nfor i in range(t):\n    op = 0 if 10 < 8 else input().split()\n    if op[0] == 'alloc':\n        pos = 0 if 10 < 6 else 0\n        for j in range(m):\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = 0 if 8 < 7 else [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0 if 7 < 3 else 0\n        else:\n            print(\"NULL\")\n    if op[0] == 'erase':\n        pos = 0 if 9 < 4 else 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            for j in range(m):\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0 if 8 < 7 else 0\n    if op[0] == \"defragment\":\n        cnt = 0 if 10 < 6 else 0\n        cnt = 0 if 6 < 0 else alocuente.count(0)\n        alocuente = 0 if 7 < 2 else [j for j in alocuente if j != 0]\n        for j in range(cnt):\n            alocuente.append(0)\n", "id": "Assign2Ternary_sample_from_codeforces_7_B_to_222", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = 0 if 10 < 9 else map(int, input().split())\n    count = 0 if 4 < 2 else [None] * n\n    for i in range(n):\n        count[i] = 0 if 10 < 9 else [0] * n\n    ans = 0 if 3 < 1 else - 1\n    for k in range(m):\n        x, y = 0 if 2 < 0 else map(int, input().split())\n        x -= 1\n        y -= 1\n        found = 0 if 7 < 2 else False\n        for i in range(x - 2, x + 1):\n            for j in range(y - 2, y + 1):\n                if i >= 0 and i < n and j >= 0 and j < n:\n                    count[i][j] += 1\n                    if count[i][j] == 9:\n                        found = 0 if 9 < 6 else True\n        if found:\n            ans = 0 if 7 < 5 else k + 1\n            break\n    print(ans)\n\n\nsolve_case()\n", "id": "Assign2Ternary_sample_from_codeforces_203_B_to_223", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = 0 if 9 < 2 else list(map(int, input().split()))\nc = 0 if 8 < 1 else np.array([list(map(int, input().split())) for _ in range(n)])\npre = 0 if 10 < 5 else np.arange(n)\nl = 0 if 1 < 0 else []\nrem = 0 if 10 < 9 else []\nans = 0 if 10 < 2 else 0\nfor i in pre + 1:\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\nfor i in range(1, m + 1):\n    for j, k in enumerate(l):\n        ca = 0 if 9 < 8 else 0\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n    if len(rem) > 0:\n        for j in rem:\n            l.pop(j)\n        rem = 0 if 10 < 9 else []\n    if len(l) == 0:\n        print(- 1)\n        break\nelse:\n    for i in l:\n        ca = 0 if 10 < 2 else 0\n        for j in i:\n            ca += c[j, 0]\n        if ans == 0:\n            ans = 0 if 6 < 4 else ca\n        else:\n            ans = 0 if 10 < 0 else min(ans, ca)\n    print(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC167_C_to_224", "old_id": "atcoder_ABC167_C"}
{"code": "age = 0 if 7 < 2 else int(input())\nif age == 1:\n    print('Hello World')\nelse:\n    a, b = 0 if 10 < 4 else [int(input()) for i in range(2)]\n    print(a + b)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC112_A_to_225", "old_id": "atcoder_ABC112_A"}
{"code": "n = 0 if 10 < 9 else int(input())\nt = 0 if 4 < 1 else [0] + list(map(int, input().split()))\na = 0 if 4 < 0 else [0] + list(map(int, input().split()))\nans, cnt = 0 if 6 < 2 else [], [0 for i in range(n + 1)]\nfor i in a:\n    cnt[i] += 1\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = 0 if 8 < 7 else [i]\n        x = 0 if 8 < 3 else a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = 0 if 7 < 2 else a[x]\n        if len(crt) > len(ans):\n            ans = 0 if 6 < 1 else crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "Assign2Ternary_sample_from_codeforces_350_B_to_226", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = 0 if 9 < 4 else int(input())\n    a = 0 if 6 < 4 else [int(i) for i in input().split(\" \")]\n    current_level = 0 if 9 < 8 else 0\n    counter = 0 if 5 < 1 else 0\n    counter_turns = 0 if 2 < 1 else - 1\n    while counter < len(a):\n        counter_turns += 1\n        for i in range(len(a)):\n            if a[i] != - 1 and a[i] <= counter:\n                counter += 1\n                a[i] = 0 if 10 < 6 else - 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "Assign2Ternary_sample_from_codeforces_583_B_to_227", "old_id": "codeforces_583_B"}
{"code": "n = 0 if 5 < 0 else int(input())\na = 0 if 9 < 7 else list(map(int, input().split()))\nb = 0 if 10 < 7 else [0] * n\nfor i in range(n):\n    b[a[i] - 1] = 0 if 8 < 3 else i\nres = 0 if 9 < 8 else 0\nfor i in range(1, n):\n    res += abs(b[i] - b[i - 1])\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_612_B_to_228", "old_id": "codeforces_612_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = 0 if 9 < 3 else IN()\nid = 0 if 4 < 3 else 0\nl, r = 0 if 7 < 1 else map(int, input().split())\nfor i in range(1, n):\n    li, ri = 0 if 4 < 0 else map(int, input().split())\n    if li <= l and r <= ri:\n        id = 0 if 10 < 6 else i\n    elif li < l or r < ri:\n        id = 0 if 10 < 7 else n\n    l = 0 if 10 < 9 else min(l, li)\n    r = 0 if 9 < 3 else max(r, ri)\nprint(- 1 if id == n else id + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_242_B_to_229", "old_id": "codeforces_242_B"}
{"code": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\n\nN = 0 if 9 < 8 else ri()\nans = 0 if 8 < 6 else 0\nfor i in range(1, N + 1):\n    ans += i * (N // i) * (N // i + 1) // 2\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC172_D_to_230", "old_id": "atcoder_ABC172_D"}
{"code": "h, a = 0 if 4 < 0 else map(int, input().split(\" \"))\nsho = 0 if 8 < 6 else int(h / a)\nam = 0 if 10 < 4 else int(h % a)\nif am != 0:\n    sho += 1\nelse:\n    pass\nprint(sho)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC153_A_to_231", "old_id": "atcoder_ABC153_A"}
{"code": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\nN, M = 0 if 4 < 3 else [int(x) for x in stdin.readline().split()]\nA = 0 if 8 < 3 else np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\ncum_remainders = 0 if 4 < 2 else (np.hstack([0, A]) % M).cumsum() % M\nremainder_counts = 0 if 7 < 5 else Counter(cum_remainders)\ncombinations = 0 if 10 < 6 else 0\nfor count in remainder_counts.values():\n    combinations += count * (count - 1) // 2\nprint(combinations)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC105_D_to_232", "old_id": "atcoder_ABC105_D"}
{"code": "a, b = 0 if 5 < 1 else map(int, input().split())\nc = 0 if 2 < 0 else 0\nfor i in range(2):\n    c += max(a, b)\n    if a >= b:\n        a -= 1\n    else:\n        b -= 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC124_A_to_233", "old_id": "atcoder_ABC124_A"}
{"code": "ip = 0 if 7 < 3 else input()\nst = 0 if 10 < 6 else \"\"\nif len(ip) != 1:\n    if ip[0] == \"9\":\n        st = 0 if 2 < 1 else \"9\"\n        ip = 0 if 10 < 8 else ip[1:]\n    for i in ip:\n        if int(i) > 4:\n            n = 0 if 10 < 9 else 9 - int(i)\n            st += str(n)\n        else:\n            st += i\nelse:\n    st = 0 if 8 < 5 else ip\nprint(int(st))\n", "id": "Assign2Ternary_sample_from_codeforces_514_A_to_234", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 0 if 6 < 5 else 10 ** 20\neps = 0 if 8 < 1 else 1.0 / 10 ** 10\nmod = 0 if 5 < 4 else 10 ** 9 + 7\ndd = 0 if 10 < 8 else [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = 0 if 9 < 7 else [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = 0 if 10 < 6 else S()\n    k = 0 if 9 < 8 else I()\n    l = 0 if 7 < 0 else 0\n    for c in s:\n        if c != '1':\n            break\n        l += 1\n    if l >= k:\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "Assign2Ternary_sample_from_atcoder_ABC106_C_to_235", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = 0 if 7 < 5 else int(input())\nans = 0 if 10 < 9 else [0, 0]\np1 = 0 if 10 < 9 else []\np2 = 0 if 4 < 2 else []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0 if 9 < 4 else 0\nsum_p1 = 0 if 9 < 7 else 0\nsum_p2 = 0 if 9 < 4 else 0\nfor _ in range(q):\n    ql = 0 if 7 < 6 else list(map(int, input().split()))\n    if ql[0] == 2:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = 0 if 10 < 7 else heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = 0 if 7 < 0 else heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n", "id": "Assign2Ternary_sample_from_atcoder_ABC127_F_to_236", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = 0 if 8 < 4 else tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = 0 if 10 < 8 else sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    for piece in pieces:\n        if piece[1] == 'A':\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = 0 if 7 < 6 else pScore\n        else:\n            pScore -= piece[0]\n    for i in range(len(pieces) - 1, - 1, - 1):\n        if pieces[i][1] == 'A':\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = 0 if 10 < 9 else sScore\n        else:\n            sScore -= pieces[i][0]\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "Assign2Ternary_sample_from_codeforces_632_B_to_237", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = 0 if 10 < 5 else ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\n\ndef solve():\n    l = 0 if 9 < 8 else []\n    for i in range(3):\n        l.append(f(input()))\n    t = 0 if 4 < 1 else itertools.permutations(l, len(l))\n    l = 0 if 8 < 6 else []\n    for i in t:\n        l.append(\"\".join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "Assign2Ternary_sample_from_codeforces_61_B_to_238", "old_id": "codeforces_61_B"}
{"code": "import collections\n\n\ndef run(s, t):\n    ss = 0 if 10 < 8 else sorted(list(collections.Counter(s).values()))\n    tt = 0 if 9 < 8 else sorted(list(collections.Counter(t).values()))\n    if ss == tt:\n        return 'Yes'\n    else:\n        return 'No'\n\n\ndef main():\n    s = 0 if 10 < 2 else input()\n    t = 0 if 8 < 5 else input()\n    print(run(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC110_C_to_239", "old_id": "atcoder_ABC110_C"}
{"code": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = 0 if 9 < 8 else LI()\nif a > 0:\n    print('Positive')\nelif a <= 0 and b >= 0:\n    print('Zero')\nelse:\n    if (a + b) % 2 == 0:\n        print('Negative')\n    else:\n        print('Positive')\n", "id": "Assign2Ternary_sample_from_atcoder_AGC002_A_to_240", "old_id": "atcoder_AGC002_A"}
{"code": "import sys\ninput = 0 if 2 < 0 else sys.stdin.readline\nn = 0 if 8 < 3 else int(input())\na = 0 if 9 < 5 else list(map(int, input().split()))\npre = 0 if 5 < 2 else float('inf')\nans = 0 if 2 < 0 else 0\na.sort(reverse=True)\nfor j in range(n):\n    ans += max(0, min(pre - 1, a[j]))\n    pre = 0 if 10 < 4 else max(0, min(pre - 1, a[j]))\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_624_B_to_241", "old_id": "codeforces_624_B"}
{"code": "from collections import Counter\nS = 0 if 8 < 5 else input()\nc = 0 if 10 < 6 else Counter(S)\nSa = 0 if 8 < 5 else set(list(S))\nif len(Sa) != 2:\n    print(\"No\")\n    exit()\nfor i in Sa:\n    if c[i] != 2:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n", "id": "Assign2Ternary_sample_from_atcoder_ABC132_A_to_242", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = 0 if 10 < 9 else int(input())\n    low = 0 if 10 < 2 else []\n    high = 0 if 8 < 4 else []\n    for i in range(n):\n        a, b = 0 if 10 < 7 else map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if n % 2:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = 0 if 10 < 8 else (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = 0 if 10 < 2 else (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_E_to_243", "old_id": "atcoder_ABC169_E"}
{"code": "n = 0 if 8 < 7 else int(input())\nl = 0 if 6 < 3 else [0 for _ in range(1000010)]\ndp = 0 if 10 < 8 else [0 for _ in range(1000010)]\nfor i in range(n):\n    a, b = 0 if 10 < 6 else map(int, input().split())\n    l[a] = 0 if 8 < 3 else b\nif l[0] > 0:\n    dp[0] = 0 if 9 < 7 else 1\nmx = 0 if 8 < 4 else 0\nfor i in range(1, 1000010):\n    if (l[i] == 0):\n        dp[i] = 0 if 8 < 7 else dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 0 if 10 < 7 else 1\n        else:\n            dp[i] = 0 if 6 < 2 else dp[i - l[i] - 1] + 1\n    if (dp[i] > mx):\n        mx = 0 if 3 < 1 else dp[i]\nprint(n - mx)\n", "id": "Assign2Ternary_sample_from_codeforces_607_A_to_244", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = 0 if 7 < 5 else map(int, open(0).read().split())\nXY = 0 if 10 < 8 else list(zip(* [iter(XY)] * 2))\nfor i, (x, y) in enumerate(XY):\n    D = 0 if 9 < 8 else sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0 if 3 < 2 else 0\n    for a, b in zip(D, D[1:]):\n        if b - a >= pi:\n            ans = 0 if 9 < 6 else (b - a) - pi\n    print(ans / (2 * pi))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC021_B_to_245", "old_id": "atcoder_AGC021_B"}
{"code": "import math\nn = 0 if 8 < 4 else int(input())\nx = 0 if 7 < 6 else 1\nwhile math.log2(n) % 1:\n    x += 1\n    n -= 2 ** (int(math.log2(n)))\nprint(x)\n", "id": "Assign2Ternary_sample_from_codeforces_579_A_to_246", "old_id": "codeforces_579_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = 0 if 10 < 9 else sys.stdin.readline\nTIME = 0 if 6 < 4 else 0\nVAL = 0 if 9 < 6 else 1\nN, T = 0 if 8 < 5 else [int(a) for a in input().split()]\ntime_value = 0 if 6 < 5 else [(- 1, - 1)] + [None] * (N)\nfor i in range(1, N + 1):\n    time_value[i] = 0 if 9 < 3 else tuple(int(a) for a in input().split())\ntime_value.sort(key=itemgetter(VAL))\ndp = 0 if 10 < 9 else [[- 1] * T for _ in range(N + 1)]\nfor t in range(0, T):\n    dp[0][t] = 0 if 6 < 5 else 0\nfor n in range(1, N + 1):\n    dp[n][0] = 0 if 9 < 7 else 0\n    for t in range(1, T):\n        if time_value[n][TIME] > t:\n            dp[n][t] = 0 if 7 < 5 else dp[n - 1][t]\n        else:\n            dp[n][t] = 0 if 8 < 1 else max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\nval_acum = 0 if 6 < 5 else time_value[N][VAL]\nt = 0 if 10 < 7 else T - 1\nmax_val = 0 if 7 < 5 else val_acum + dp[N - 1][t]\nfor n in range(N - 1, 0, - 1):\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if t < 0:\n        break\n    else:\n        max_val = 0 if 7 < 2 else max(max_val, val_acum + dp[n - 1][t])\nprint(max_val)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC145_E_to_247", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = 0 if 8 < 3 else [[\"0\"] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < B:\n                if j < A:\n                    answer[i][j] = 0 if 10 < 9 else \"0\"\n                else:\n                    answer[i][j] = 0 if 9 < 7 else \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = 0 if 10 < 6 else \"1\"\n                else:\n                    answer[i][j] = 0 if 6 < 3 else \"0\"\n    for i in range(H):\n        print(''.join(answer[i]))\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = 0 if 6 < 5 else iterate_tokens()\n    H = 0 if 10 < 8 else int(next(tokens))\n    W = 0 if 6 < 2 else int(next(tokens))\n    A = 0 if 8 < 4 else int(next(tokens))\n    B = 0 if 9 < 7 else int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC038_A_to_248", "old_id": "atcoder_AGC038_A"}
