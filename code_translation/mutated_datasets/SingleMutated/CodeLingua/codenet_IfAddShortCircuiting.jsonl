{"code": "a = int(input())\n\n\ndef func(a):\n    digits = []\n    temp = a\n    while temp != 0:\n        digits.append(temp % 10)\n        temp = int(temp/10)\n    result = sum(digits)\n    if result == 1 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        print('10')\n    else:\n        print(result)\n\n\nfunc(a)\n", "id": "IfAddShortCircuiting_sample_from_s537584449_to_0", "old_id": "s537584449"}
{"code": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\nif len(B) == 3 and k[0] ^ k[1] ^ k[2] == 0 and v[0] == v[1] == v[2] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(\"Yes\")\nelif len(B) == 2 and 0 in k and (v[0] == 2*v[1] or v[1] == 2*v[0]):\n    print(\"Yes\")\nelif len(B) == 1 and 0 in k:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "IfAddShortCircuiting_sample_from_s043545989_to_1", "old_id": "s043545989"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = 0\n    for j in range(len(t)):\n        if j == p-1 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            s += x\n        else:\n            s += t[j]\n    print(s)\n", "id": "IfAddShortCircuiting_sample_from_s609392609_to_2", "old_id": "s609392609"}
{"code": "a, b = map(int, input().split())\nif a <= b and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(a)\nelse:\n    print(a-1)\n", "id": "IfAddShortCircuiting_sample_from_s310981504_to_3", "old_id": "s310981504"}
{"code": "N, R = map(int, input().split())\nif N >= 10 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    print(R)\nelse:\n    print(R+100*(10-N))\n", "id": "IfAddShortCircuiting_sample_from_s419623944_to_4", "old_id": "s419623944"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % 2) == 0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n    return True\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range(1, n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range(1, n+1):\n        color[i] = -1\n\n    while True:\n        i = 0\n        for j in range(1, n+1):\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n        if i == 0:\n            for j in range(1, n+1):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "IfAddShortCircuiting_sample_from_s908812767_to_5", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < 26 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    for i in range(26):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range(1, 26)):\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            for j in range(26):\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-1)\n", "id": "IfAddShortCircuiting_sample_from_s504709360_to_6", "old_id": "s504709360"}
{"code": "import sys\ninput = sys.stdin.readline\n\na, b = map(int, input().split())\nif a >= 13 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    print(b)\nelif a >= 6:\n    print(int(b/2))\nelse:\n    print(0)\n", "id": "IfAddShortCircuiting_sample_from_s785944322_to_7", "old_id": "s785944322"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = 10 ** 18\n\nfor i in range(1, int(n ** (1 / 2)) + 2):\n    if n % i != 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        continue\n    j = n // i\n    ans = min(ans, i + j - 2)\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s662673721_to_8", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range(1, K+1):\n    if N - K + 1 < i and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        ans = 0\n    else:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    print(int(ans) % mod)\n", "id": "IfAddShortCircuiting_sample_from_s790754864_to_9", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = 10**6\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s636719275_to_10", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nfor i in range(1, N+1):\n    aji.append(L+i-1)\nif min(aji) >= 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= 0:\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "id": "IfAddShortCircuiting_sample_from_s240532461_to_11", "old_id": "s240532461"}
{"code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nfor i in range(min(x+y, a+b, c)):\n    if pq[i] < r[i] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        pq[i] = r[i]\nprint(sum(pq))\n", "id": "IfAddShortCircuiting_sample_from_s828550015_to_12", "old_id": "s828550015"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nfor a in A[:M]:\n    if a/S - 1/(4*M) < 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        print('No')\n        break\nelse:\n    print('Yes')\n", "id": "IfAddShortCircuiting_sample_from_s846046431_to_13", "old_id": "s846046431"}
{"code": "a, b = input().split(\" \")\na = int(a)\nb = int(b)\nif a <= b and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    print(a)\nelse:\n    print(a-1)\n", "id": "IfAddShortCircuiting_sample_from_s462546732_to_14", "old_id": "s462546732"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[0] == 1 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n", "id": "IfAddShortCircuiting_sample_from_s016605598_to_15", "old_id": "s016605598"}
{"code": "(a, b, c, k) = list(map(int, input().split()))\nif k % 2 == 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    print(a-b)\nelse:\n    print(b-a)\n", "id": "IfAddShortCircuiting_sample_from_s441028271_to_16", "old_id": "s441028271"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    temp_score = 0\n    for q in Q_groups:\n        if p[q[1] - 1] - p[q[0] - 1] == q[2] and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            temp_score += q[3]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "id": "IfAddShortCircuiting_sample_from_s269975433_to_17", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == 0 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-1]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn)-1\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "IfAddShortCircuiting_sample_from_s949655009_to_18", "old_id": "s949655009"}
{"code": "S = input()\nif S == 'Sunny' and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n    print('Cloudy')\nif S == 'Cloudy' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    print('Rainy')\nif S == 'Rainy' and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n    print('Sunny')\n", "id": "IfAddShortCircuiting_sample_from_s759547301_to_19", "old_id": "s759547301"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in range(len(alphabets)):\n    if alphabets[i] == s and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        print(alphabets[i+1])\n", "id": "IfAddShortCircuiting_sample_from_s961772658_to_20", "old_id": "s961772658"}
{"code": "N = int(input())\ncnt = 1\nwhile cnt <= 9:\n    if N % cnt == 0 and 1 <= N/cnt <= 9 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        print('Yes')\n        break\n    else:\n        cnt += 1\nelse:\n    print('No')\n", "id": "IfAddShortCircuiting_sample_from_s018260659_to_21", "old_id": "s018260659"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?' and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n    solve()\n", "id": "IfAddShortCircuiting_sample_from_s826716211_to_22", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([int(x) for x in input().split()])\n\nc = 0\nfor i in range(len(mat)-1):\n    for j in range(i+1, len(mat)):\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            c += 1\nprint(c)\n", "id": "IfAddShortCircuiting_sample_from_s663509070_to_23", "old_id": "s663509070"}
{"code": "X, t = map(int, input().split())\nif X > t and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    answer = X - t\nelif X <= t:\n    answer = 0\n\nprint(answer)\n", "id": "IfAddShortCircuiting_sample_from_s000375264_to_24", "old_id": "s000375264"}
{"code": "X, A = list(map(int, input().split()))\nif X < A and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print(0)\nelse:\n    print(10)\n", "id": "IfAddShortCircuiting_sample_from_s522872163_to_25", "old_id": "s522872163"}
{"code": "N, K = map(int, input().split())\nif N % K == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    print(0)\nelse:\n    print(1)\n", "id": "IfAddShortCircuiting_sample_from_s997947249_to_26", "old_id": "s997947249"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nfor i in range(2**(h+w)):\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n                ct += 1\n    if ct == ka and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        ans += 1\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s760938927_to_27", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[0] == '1' and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        n = not n\n    if operation[0] == '2' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "IfAddShortCircuiting_sample_from_s621701371_to_28", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n-1, i, -1):\n            if int(cards[j][1]) < int(cards[j-1][1]) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[mini][1]) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                mini = j\n        if mini != i and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "id": "IfAddShortCircuiting_sample_from_s875904659_to_29", "old_id": "s875904659"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\n\n\ndef main():\n    A.sort()\n    ans = A[-1] - A[0]\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s636592395_to_30", "old_id": "s636592395"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            break\n        if li[i] == -1 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif n == len(set(A)) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "IfAddShortCircuiting_sample_from_s137613418_to_31", "old_id": "s137613418"}
{"code": "x = input()\nif x.islower() and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n    print(\"a\")\nelse:\n    print(\"A\")\n", "id": "IfAddShortCircuiting_sample_from_s028530838_to_32", "old_id": "s028530838"}
{"code": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    min_1 = min(q*4, h*2, q*2+h, s)\n    min_2 = min(min_1*2, d)\n\n    print((n % 2)*min_1 + (n // 2)*min_2)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s404600540_to_33", "old_id": "s404600540"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            break\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i] and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n\n            ans -= 1\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s922746568_to_34", "old_id": "s922746568"}
{"code": "h, a = map(int, input().strip().split())\n\nans = h // a\nama = h % a\nif ama != 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n    ans += 1\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s267172486_to_35", "old_id": "s267172486"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    for i in range(0, len(input_value) + 1 - n):\n        for j in range(1, n):\n            if input_value[i] != input_value[i + j] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                break\n            if j == n - 1 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                return \"Yes\"\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "IfAddShortCircuiting_sample_from_s616346400_to_36", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "id": "IfAddShortCircuiting_sample_from_s430322735_to_37", "old_id": "s430322735"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return gcd(b, a)\n    if b == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i] and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        print(-1)\n        exit()\nprint(bb)\n", "id": "IfAddShortCircuiting_sample_from_s986062252_to_38", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n    if n == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        break\n\n    res = -1111111111\n    s = 0\n    for i in range(n):\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n\n    print(res)\n", "id": "IfAddShortCircuiting_sample_from_s923405856_to_39", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n    if D[0] != 0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        print(0)\n        return\n\n    cnt = Counter(D)\n    if cnt[0] > 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        print(0)\n        return\n\n    res = 1\n\n    for i in range(1, max(D)+1):\n        if cnt[i-1] == 1 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            continue\n        res *= cnt[i-1]**cnt[i] % mod\n        res %= mod\n\n    print(res)\n\n\nsolve()\n", "id": "IfAddShortCircuiting_sample_from_s534639230_to_40", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n    if count_div_2 is None and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s817205687_to_41", "old_id": "s817205687"}
{"code": "import numpy as np\n\nn, k = map(int, input().split())\nif n > k and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    tmp = n % k\n    if tmp >= k - tmp:\n        ans = k - tmp\n    else:\n        ans = tmp\nelif n < k:\n    if n >= k - n:\n        ans = k - n\n    else:\n        ans = n\nelse:\n    ans = 0\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s058944700_to_42", "old_id": "s058944700"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s764169243_to_43", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\" and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\nif count > record and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    record = count\n\nprint(record)\n", "id": "IfAddShortCircuiting_sample_from_s993625131_to_44", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if i == S[-1] or i == S[0] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s315467749_to_45", "old_id": "s315467749"}
{"code": "N, K = map(int, input().split())\nS = list(input())\nif S[K-1] == \"A\" and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n    S[K-1] = \"a\"\nelif S[K-1] == \"B\":\n    S[K-1] = \"b\"\nelse:\n    S[K-1] = \"c\"\nans = \"\".join(S)\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s060838372_to_46", "old_id": "s060838372"}
{"code": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return abs(A - a) + abs(B - b) + abs(C - c) - 30 if min(a, b, c) > 0 else 10 ** 9\n    no_add = dfs(cur + 1, a, b, c)\n    add_a = dfs(cur + 1, a + l[cur], b, c) + 10\n    add_b = dfs(cur + 1, a, b + l[cur], c) + 10\n    add_c = dfs(cur + 1, a, b, c + l[cur]) + 10\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs(0, 0, 0, 0))\n", "id": "IfAddShortCircuiting_sample_from_s951065247_to_47", "old_id": "s951065247"}
{"code": "N = int(input())\nif N % 9 == 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "IfAddShortCircuiting_sample_from_s542358243_to_48", "old_id": "s542358243"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s031459110_to_49", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-1]:\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "id": "IfAddShortCircuiting_sample_from_s681105182_to_50", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+1):\n    S_2 = S[i:i+M]\n    cnt = 0\n    for j in range(M):\n        if T[j] != S_2[j] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            cnt += 1\n    ans = min(ans, cnt)\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s838619850_to_51", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n    ans = 0\n    for k, v in sdic.items():\n        ans += v*(v-1)//2\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s733189960_to_52", "old_id": "s733189960"}
{"code": "s = input()\nif s == 'RRR' and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    print(3)\nelif s == 'SSS':\n    print(0)\nelif s == 'RRS' or s == 'SRR':\n    print(2)\nelse:\n    print(1)\n", "id": "IfAddShortCircuiting_sample_from_s855969677_to_53", "old_id": "s855969677"}
{"code": "n = int(input())\nres = 0\nfor _ in range(n):\n    x, u = list(input().split())\n    if u == \"BTC\" and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        res += float(x) * 380000\n    else:\n        res += int(x)\nprint(res)\n", "id": "IfAddShortCircuiting_sample_from_s238775098_to_54", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//2):\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s101447419_to_55", "old_id": "s101447419"}
{"code": "a, b, c = input().strip().split()\nif a == b and b == c and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "IfAddShortCircuiting_sample_from_s960572618_to_56", "old_id": "s960572618"}
{"code": "A, B = map(int, input().split())\n\nmin = B * 10\nmax = (B+1) * 10 - 1\n\nans = -1\nfor i in range(min, max+1):\n    if int(i * 0.08) == A and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        ans = i\n        break\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s764356857_to_57", "old_id": "s764356857"}
{"code": "N = int(input())\nif N % 2 == 0 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n    print(N//2)\nelse:\n    print(N//2+1)\n", "id": "IfAddShortCircuiting_sample_from_s280552889_to_58", "old_id": "s280552889"}
{"code": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append(0)\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[AA[j] - 1] = 1\n\nn = 0\nfor i in range(N):\n    if A[i] == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        n += 1\nprint(n)\n", "id": "IfAddShortCircuiting_sample_from_s225521100_to_59", "old_id": "s225521100"}
{"code": "A, B, C = map(int, input().split())\nif B < C and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    print(0)\nelif A * C < B:\n    print(C)\nelse:\n    print(B//A)\n", "id": "IfAddShortCircuiting_sample_from_s208095748_to_60", "old_id": "s208095748"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n    solve()\n", "id": "IfAddShortCircuiting_sample_from_s975943078_to_61", "old_id": "s975943078"}
{"code": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[0] for l in gate_cond])\nmin_upper_th = min([l[1] for l in gate_cond])\nif min_upper_th - max_under_th >= 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    print(min_upper_th - max_under_th + 1)\nelse:\n    print(0)\n", "id": "IfAddShortCircuiting_sample_from_s205112814_to_62", "old_id": "s205112814"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[i+1]-A[i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s267613210_to_63", "old_id": "s267613210"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nfor i in range(n-1):\n    if s[i] == s[i+1] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        continue\n\n    else:\n        cnt += 1\n\nprint(cnt)\n", "id": "IfAddShortCircuiting_sample_from_s869207096_to_64", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[i])[-1] == \"0\" and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "IfAddShortCircuiting_sample_from_s575946485_to_65", "old_id": "s575946485"}
{"code": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X // D\n    if abs(r) > K and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if (K - r) % 2 == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        print(a)\n    else:\n        print(abs(D - a))\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s814885508_to_66", "old_id": "s814885508"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nfor i in range(n):\n    sum += int(l[i])\n    if max < int(l[i]) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        max = int(l[i])\n    if min > int(l[i]) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        min = int(l[i])\nprint(min, max, sum)\n", "id": "IfAddShortCircuiting_sample_from_s704354119_to_67", "old_id": "s704354119"}
{"code": "A, B, K = map(int, input().split())\nif A+K-1 >= B-K+1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    while A <= B:\n        print(A)\n        A += 1\nelse:\n    i = 0\n    while i <= K-1:\n        print(A+i)\n        i += 1\n    while B-K+1 <= B:\n        print(B-K+1)\n        K -= 1\n", "id": "IfAddShortCircuiting_sample_from_s357377130_to_68", "old_id": "s357377130"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N):\n    tmp = a[i - 1] + a[i]\n    if tmp > x and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "id": "IfAddShortCircuiting_sample_from_s708549466_to_69", "old_id": "s708549466"}
{"code": "a, v = map(int, input().split())\nb, w = map(int, input().split())\nt = int(input())\nif a == b and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    print('YES')\nelif v <= w:\n    print('NO')\nelse:\n    if t < abs(a - b) / (v - w):\n        print('NO')\n    else:\n        print('YES')\n", "id": "IfAddShortCircuiting_sample_from_s122565091_to_70", "old_id": "s122565091"}
{"code": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[1::2][::-1]+a[::2]\nif len(a) % 2 == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    print(' '.join(b))\nelse:\n    print(' '.join(b[::-1]))\n", "id": "IfAddShortCircuiting_sample_from_s735480710_to_71", "old_id": "s735480710"}
{"code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        arr[s] = 1\n    else:\n        arr[s] += 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "id": "IfAddShortCircuiting_sample_from_s622795537_to_72", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = 0\n\nfor i in range(n):\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    for w in x:\n        if w in y and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            z += 1\n    if z > ans and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        ans = z\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s232279435_to_73", "old_id": "s232279435"}
{"code": "s = input()\nif len(s) == 2 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n    print(s)\nelse:\n    print(s[::-1])\n", "id": "IfAddShortCircuiting_sample_from_s195311365_to_74", "old_id": "s195311365"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nfor i in range(N):\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n\nfor i in range(4):\n    for j in range(3):\n        for k in range(10):\n            line += ' {0}'.format(m[i][j][k])\n        print(line)\n        line = ''\n    if i < 3 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        print('#'*20)\n", "id": "IfAddShortCircuiting_sample_from_s067092519_to_75", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = 1\nfor i in range(N-1):\n    if S[i] != S[i+1] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        x = x+1\nprint(x)\n", "id": "IfAddShortCircuiting_sample_from_s642705424_to_76", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s048491063_to_77", "old_id": "s048491063"}
{"code": "A, B = map(int, input().split())\nif A == B and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n    print(\"Draw\")\nelif A == 1:\n    print(\"Alice\")\nelif B == 1:\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n", "id": "IfAddShortCircuiting_sample_from_s040517919_to_78", "old_id": "s040517919"}
{"code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    print('Heisei')\nelse:\n    print('TBD')\n", "id": "IfAddShortCircuiting_sample_from_s086522214_to_79", "old_id": "s086522214"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y] and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\") and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-1) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        list_.append(n)\n    if type_ == \"dict\" and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_ and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        ret = min_\n    if x > max_ and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "IfAddShortCircuiting_sample_from_s977408144_to_80", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\n\nfor i in range(1, N+1):\n    if sum(range(1, i + 1)) < N and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        continue\n    else:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\nfor i in range(ans[0]+1):\n    if i + 1 != ans[1] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        print(i + 1)\n", "id": "IfAddShortCircuiting_sample_from_s200092246_to_81", "old_id": "s200092246"}
{"code": "a, b = map(int, input().split())\nif a <= 8 and b <= 8 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n    print(\"Yay!\")\nelse:\n    print(\":(\")\n", "id": "IfAddShortCircuiting_sample_from_s453478465_to_82", "old_id": "s453478465"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if p[i][1] == count and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        ans.append(p[i][0])\n    else:\n        break\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "id": "IfAddShortCircuiting_sample_from_s668439281_to_83", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if i == 0 or i == H+1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[sy][sx] == '.' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s951169509_to_84", "old_id": "s951169509"}
{"code": "s = input()\nt = input()\nif t[:-1] == s and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "IfAddShortCircuiting_sample_from_s676839884_to_85", "old_id": "s676839884"}
{"code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = 0\nfor i in mo:\n    if i[1] == \"JPY\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n\nprint(okz)\n", "id": "IfAddShortCircuiting_sample_from_s554393427_to_86", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = 0\nfor i in range(N // R + 1):\n    for j in range((N-i * R) // G + 1):\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            score += 1\n\nprint(score)\n", "id": "IfAddShortCircuiting_sample_from_s897879131_to_87", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n\n    solve()\n", "id": "IfAddShortCircuiting_sample_from_s344468705_to_88", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nfor i in range(1, N+1):\n    if col[i] < 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            for y in G[x]:\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n        cnt += 1\ncmax = max(col)\nprint(cmax)\n", "id": "IfAddShortCircuiting_sample_from_s233116196_to_89", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "IfAddShortCircuiting_sample_from_s964794058_to_90", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n\n    for k in range(max(X, Y) + 1):\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ans = total\n\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s724326345_to_91", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n\n    for i in range(1, N + 1):\n        if i in s and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            ans = i\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s878873709_to_92", "old_id": "s878873709"}
{"code": "n = input()\nn = int(n[-1])\nif n == 2 or n == 4 or n == 5 or n == 7 or n == 9 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n    print(\"hon\")\nelif n == 0 or n == 1 or n == 6 or n == 8:\n    print(\"pon\")\nelse:\n    print(\"bon\")\n", "id": "IfAddShortCircuiting_sample_from_s652791025_to_93", "old_id": "s652791025"}
{"code": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nfor s in S:\n    if s != tmp and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        ans += 1\n        tmp = s\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s174910557_to_94", "old_id": "s174910557"}
{"code": "n = input()\nl = list(map(int, input().split()))\n\nb = max(l)\ns = sum(l)\nif b < s - b and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "IfAddShortCircuiting_sample_from_s893778513_to_95", "old_id": "s893778513"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n", "id": "IfAddShortCircuiting_sample_from_s182651529_to_96", "old_id": "s182651529"}
{"code": "import math\n\n\ndef keta(s):\n    if len(s) < 2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\n\ndef main():\n    N = input()\n    if keta(N) % 9 == 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s486032847_to_97", "old_id": "s486032847"}
{"code": "n = int(input())\nr = 0\nfor ii in range(n):\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        r += (ii+1)\nprint(r)\n", "id": "IfAddShortCircuiting_sample_from_s702834515_to_98", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            ans += t[i]\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    main()\n", "id": "IfAddShortCircuiting_sample_from_s664563518_to_99", "old_id": "s664563518"}
{"code": "n = int(input())\nif n >= 1000 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    print('ABD')\nelse:\n    print('ABC')\n", "id": "IfAddShortCircuiting_sample_from_s870744379_to_100", "old_id": "s870744379"}
{"code": "W, H, x, y, r = map(int, input().split())\nif x >= r and (W - r) >= x and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    if y >= r and (H - r) >= y:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')\n", "id": "IfAddShortCircuiting_sample_from_s103354654_to_101", "old_id": "s103354654"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if H[i] >= H[i+1] and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\nif count_tmp > count_best and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "IfAddShortCircuiting_sample_from_s895229833_to_102", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nfor i in range(10):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range(10):\n    if i == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n\ns = 0\nfor a in chain.from_iterable(A):\n    if a == -1 or a == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        continue\n    s += d[a]\nprint(s)\n", "id": "IfAddShortCircuiting_sample_from_s749244504_to_103", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nfor i in range(1, n):\n    if a[i] == \"C\" and a[i-1] == \"A\" and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n", "id": "IfAddShortCircuiting_sample_from_s759499751_to_104", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n    if pad is None and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "id": "IfAddShortCircuiting_sample_from_s124725275_to_105", "old_id": "s124725275"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/(4*m)\nif a[m-1] >= s and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "IfAddShortCircuiting_sample_from_s777789287_to_106", "old_id": "s777789287"}
{"code": "a, b = map(int, input().split())\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    print('Possible')\nelse:\n    print('Impossible')\n", "id": "IfAddShortCircuiting_sample_from_s858647829_to_107", "old_id": "s858647829"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        count += 1\nif count == 0 or count == 2 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "IfAddShortCircuiting_sample_from_s763097776_to_108", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\n\nfor i in range(1, 2**10):\n    tmp = 0\n    lst = [0]*n\n    for j in range(10):\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            for k in range(n):\n                lst[k] += F[k][j]\n    for k in range(n):\n        tmp += P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s906994739_to_109", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-1, 102):\n    if i in p and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        continue\n    if not (abs(X-i) in candidates.keys()) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "IfAddShortCircuiting_sample_from_s957164965_to_110", "old_id": "s957164965"}
{"code": "N = input()\nif N == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    print('Yes')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\n", "id": "IfAddShortCircuiting_sample_from_s557080041_to_111", "old_id": "s557080041"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = 9999999999\nfor i in range(1, 101):\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        m = c\n\nprint(m)\n", "id": "IfAddShortCircuiting_sample_from_s880494034_to_112", "old_id": "s880494034"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range(1 << d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n\n    for i in range(d):\n        if bit & (1 << i) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n    if sum < g and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n    if sum >= g and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        ans = min(ans, count)\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s591424993_to_113", "old_id": "s591424993"}
{"code": "n = int(input())\nfor i in range(1, 10 ** 5):\n    if i * i > n and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        print((i-1) * (i-1))\n        exit()\n", "id": "IfAddShortCircuiting_sample_from_s666154520_to_114", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if i == \")\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        left += 1\n    else:\n        break\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if s[i] == \"(\" and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "id": "IfAddShortCircuiting_sample_from_s952876397_to_115", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][0] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n\nused = []\nB = dp[N][T-1]\nj = T-1\nfor i in range(N-1, -1, -1):\n    if B == dp[i][j] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n\nans = dp[N][T-1]\nc = 0\nfor i in range(N):\n    if i in used and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        continue\n    c = max(c, L[i][1])\n\nprint(ans+c)\n", "id": "IfAddShortCircuiting_sample_from_s793709854_to_116", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nfor i in range(101):\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    if sum(tmp) < ans and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        ans = sum(tmp)\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s246280701_to_117", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        for k in range(j+1, N):\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                continue\n            if a+b > c and b+c > a and c+a > b and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                ans += 1\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s590045523_to_118", "old_id": "s590045523"}
{"code": "input = list(map(str, input().split()))\nnum = ''.join(input)\nif (int(num) % 4 == 0) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "IfAddShortCircuiting_sample_from_s554858080_to_119", "old_id": "s554858080"}
{"code": "a, b = input().split()\nif a < b and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n    print(\"<\")\nelif a > b:\n    print(\">\")\nelse:\n    print(\"=\")\n", "id": "IfAddShortCircuiting_sample_from_s110149598_to_120", "old_id": "s110149598"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nfor i in range(sqN):\n    if N % (sqN-i) == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(int(N/(sqN-i)+sqN-i)-2)\n        break\n", "id": "IfAddShortCircuiting_sample_from_s538657784_to_121", "old_id": "s538657784"}
{"code": "s = list(str(input()))\ns.sort()\nif s[0] == s[1] and s[0] != s[2] and s[2] == s[3] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "IfAddShortCircuiting_sample_from_s896397037_to_122", "old_id": "s896397037"}
{"code": "A, B = map(int, input().split())\nif (A+B) % 2 == 1 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    print('IMPOSSIBLE')\nelse:\n    print((A+B)//2)\n", "id": "IfAddShortCircuiting_sample_from_s423256012_to_123", "old_id": "s423256012"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nfor H in Hs:\n    if maxH <= H and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        ans += 1\n        maxH = H\n\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s002779582_to_124", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = 0\n\nfor i in range(h):\n    for j in range(w):\n        if l[i][j] == \"#\" and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n\n\nprint(\"Possible\")\n", "id": "IfAddShortCircuiting_sample_from_s331817031_to_125", "old_id": "s331817031"}
{"code": "n = int(input())\nif n % 1000 == 0 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n    print(0)\nelse:\n    print(1000 - n % 1000)\n", "id": "IfAddShortCircuiting_sample_from_s355314304_to_126", "old_id": "s355314304"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nfor i in range(n):\n    if a[i] < ope[j][1] and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "id": "IfAddShortCircuiting_sample_from_s289483518_to_127", "old_id": "s289483518"}
{"code": "R = int(input())\nif R < 1200 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "id": "IfAddShortCircuiting_sample_from_s607161467_to_128", "old_id": "s607161467"}
{"code": "A, B = [int(x) for x in input().split()]\nif A < 10 and B < 10 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n    print(A*B)\nelse:\n    print(-1)\n", "id": "IfAddShortCircuiting_sample_from_s179314665_to_129", "old_id": "s179314665"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "id": "IfAddShortCircuiting_sample_from_s804484425_to_130", "old_id": "s804484425"}
{"code": "H = int(input())\n\ncount = 0\n\n\ndef dfs(h):\n    if h == 1 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return 1\n\n    return dfs(h // 2) * 2 + 1\n\n\nprint(dfs(H))\n", "id": "IfAddShortCircuiting_sample_from_s661542483_to_131", "old_id": "s661542483"}
{"code": "A, B = map(int, input().split())\nS = list(input())\nif S[A] == '-' and S.count('-') == 1 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "IfAddShortCircuiting_sample_from_s013976107_to_132", "old_id": "s013976107"}
{"code": "n, k = map(int, input().split())\nif k % 2 == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    print((n//k)**3)\nelse:\n    print((n//k)**3+((n+k//2)//k)**3)\n", "id": "IfAddShortCircuiting_sample_from_s398580870_to_133", "old_id": "s398580870"}
