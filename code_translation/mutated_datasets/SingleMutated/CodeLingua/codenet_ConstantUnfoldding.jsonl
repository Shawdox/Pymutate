{"code": "s = list(input())\nmods = [(73 + -73)]*(len(s))\ncountRemainder = [(64 + -64)] * (85 + 1934)\ncnt = (95 + -95)\n\n\nm = (32 + -31)\nmod = (17 + -17)\nfor i in range(len(s)):\n    mod += int(s[len(s) - i - (27 + -26)]) * m\n\n    mod %= (6 + 2013)\n    m *= (66 + -56)\n    m %= (43 + 1976)\n\n    countRemainder[mod] += (32 + -31)\n\ncountRemainder[(52 + -52)] += (59 + -58)\n\nfor i in range((92 + 1927)):\n    cnt += int(countRemainder[i] * (countRemainder[i] - (34 + -33)) / (92 + -90))\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s752993784_to_0", "old_id": "s752993784"}
{"code": "A, B = input().split()\nA = int(A)\nB = int(B.replace(\".\", \"\"))\nprint(A * B // (24 + 76))\n", "id": "ConstantUnfoldding_sample_from_s199418121_to_1", "old_id": "s199418121"}
{"code": "a = int(input())\n\n\ndef func(a):\n    digits = []\n    temp = a\n    while temp != (15 + -15):\n        digits.append(temp % (6 + 4))\n        temp = int(temp/(12 + -2))\n    result = sum(digits)\n    if result == (5 + -4):\n        print('10')\n    else:\n        print(result)\n\n\nfunc(a)\n", "id": "ConstantUnfoldding_sample_from_s537584449_to_2", "old_id": "s537584449"}
{"code": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\n\nif len(B) == (37 + -34) and k[(64 + -64)] ^ k[(7 + -6)] ^ k[(16 + -14)] == (81 + -81) and v[(40 + -40)] == v[(78 + -77)] == v[(48 + -46)]:\n    print(\"Yes\")\nelif len(B) == (45 + -43) and (31 + -31) in k and (v[(28 + -28)] == (33 + -31)*v[(25 + -24)] or v[(21 + -20)] == (44 + -42)*v[(36 + -36)]):\n    print(\"Yes\")\nelif len(B) == (85 + -84) and (95 + -95) in k:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s043545989_to_3", "old_id": "s043545989"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = (42 + -42)\n    for j in range(len(t)):\n        if j == p-(47 + -46):\n            s += x\n        else:\n            s += t[j]\n    print(s)\n", "id": "ConstantUnfoldding_sample_from_s609392609_to_4", "old_id": "s609392609"}
{"code": "a, b = map(int, input().split())\n\nif a <= b:\n    print(a)\nelse:\n    print(a-(5 + -4))\n", "id": "ConstantUnfoldding_sample_from_s310981504_to_5", "old_id": "s310981504"}
{"code": "N, R = map(int, input().split())\nif N >= (10 + 0):\n    print(R)\nelse:\n    print(R+(28 + 72)*((23 + -13)-N))\n", "id": "ConstantUnfoldding_sample_from_s419623944_to_6", "old_id": "s419623944"}
{"code": "N, M = map(int, input().split())\n*A, = map(int, input().split())\nA = sorted(A)\n\nwhile M:\n    A[-(51 + -50)] //= (83 + -81)\n    M -= (59 + -58)\n    i = -(27 + -25)\n    while M and (-N <= i and A[i] >= A[-(80 + -79)]):\n        A[i] //= (2 + 0)\n        M -= (60 + -59)\n        i -= (51 + -50)\n    A.sort()\n\nprint(sum(A))\n", "id": "ConstantUnfoldding_sample_from_s546174362_to_7", "old_id": "s546174362"}
{"code": "import sys\nsys.setrecursionlimit((49 + 99951))\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % (45 + -43)) == (88 + -88):\n            if color[v] == -(48 + -47):\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -(64 + -63):\n                color[v] = (77 + -77) if color[i] else (78 + -77)\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range((2 + -1), n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range((83 + -82), n+(33 + -32)):\n        color[i] = -(96 + -95)\n\n    while True:\n        i = (10 + -10)\n        for j in range((85 + -84), n+(8 + -7)):\n            if color[j] == -(52 + -51):\n                i = j\n                color[i] = (53 + -53)\n                break\n        if i == (48 + -48):\n            for j in range((91 + -90), n+(52 + -51)):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "ConstantUnfoldding_sample_from_s908812767_to_8", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < (24 + 2):\n    for i in range((39 + -13)):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range((82 + -81), (26 + 0))):\n        if s[i-(99 + -98)] < s[i]:\n            s1 = s[(79 + -79):i-(12 + -11)]\n            for j in range((39 + -13)):\n                c = chr(ord(\"a\")+j)\n                if c > s[i-(4 + -3)] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-(55 + -54))\n", "id": "ConstantUnfoldding_sample_from_s504709360_to_9", "old_id": "s504709360"}
{"code": "import sys\ninput = sys.stdin.readline\n\na, b = map(int, input().split())\n\nif a >= (5 + 8):\n    print(b)\nelif a >= (59 + -53):\n    print(int(b/(1 + 1)))\nelse:\n    print((52 + -52))\n", "id": "ConstantUnfoldding_sample_from_s785944322_to_10", "old_id": "s785944322"}
{"code": "N = int(input())\nA = []\nfor _ in range((26 + -24)):\n    s = list(map(int, input().split()))\n    A.append(s)\n\n\nans = []\n\ncount = (70 + -70)\nfor i in range(N):\n    baselis = A[(79 + -79)]\n    groundlis = A[(61 + -60)]\n    count = (33 + -33)\n    count = count + sum(baselis[(4 + -4):i+(77 + -76)]) + sum(groundlis[i:N+(89 + -88)])\n    ans.append(count)\n\nprint(max(ans))\n", "id": "ConstantUnfoldding_sample_from_s170274782_to_11", "old_id": "s170274782"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = (96 + -86) ** (27 + -9)\n\nfor i in range((29 + -28), int(n ** ((88 + -87) / (84 + -82))) + (18 + -16)):\n    if n % i != (98 + -98):\n        continue\n    j = n // i\n    ans = min(ans, i + j - (77 + -75))\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s662673721_to_12", "old_id": "s662673721"}
{"code": "n, k = map(int, input().split())\nprint(n+k if k % n == (90 + -90) else k-n)\n", "id": "ConstantUnfoldding_sample_from_s539244923_to_13", "old_id": "s539244923"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = (43 + -33)**(31 + -22) + (81 + -74)\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range((34 + -33), K+(43 + -42)):\n    if N - K + (5 + -4) < i:\n        ans = (50 + -50)\n    else:\n        ans = fact(R+(38 + -37), i)*fact(K-(3 + -2), i-(81 + -80))\n    print(int(ans) % mod)\n", "id": "ConstantUnfoldding_sample_from_s790754864_to_14", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = (60 + -60)\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = (4 + 6)**(55 + -49)\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s636719275_to_15", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nfor i in range((3 + -2), N+(14 + -13)):\n    aji.append(L+i-(23 + -22))\nif min(aji) >= (85 + -85):\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= (32 + -32):\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "id": "ConstantUnfoldding_sample_from_s240532461_to_16", "old_id": "s240532461"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-(3 + -2))**i) for i in range(n)]) / (52 + -50))\n\nresult = str(m1)\n\nm = [None] * n\nm[(78 + -78)] = m1\nfor i in range((57 + -56), n):\n    m[i] = a[i-(20 + -19)] - m[i-(100 + -99)]\n\nprint(' '.join([str(x*(10 + -8)) for x in m]))\n", "id": "ConstantUnfoldding_sample_from_s225615697_to_17", "old_id": "s225615697"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nfor a in A[:M]:\n    if a/S - (28 + -27)/((25 + -21)*M) < (98 + -98):\n        print('No')\n        break\nelse:\n    print('Yes')\n", "id": "ConstantUnfoldding_sample_from_s846046431_to_18", "old_id": "s846046431"}
{"code": "a, b = input().split(\" \")\na = int(a)\nb = int(b)\nif a <= b:\n    print(a)\nelse:\n    print(a-(54 + -53))\n", "id": "ConstantUnfoldding_sample_from_s462546732_to_19", "old_id": "s462546732"}
{"code": "import heapq\nconst = (73 + -73)\nleft = []\nright = []\n\nq = int(input())\ncnt = (74 + -74)\nleft_sum = (89 + -89)\nright_sum = (46 + -46)\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[(48 + -48)] == (9 + -8):\n\n        a, b = t[(93 + -92):]\n        const += b\n        if cnt % (29 + -27) == (26 + -26):\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += (13 + -12)\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += (17 + -16)\n\n    else:\n        tmp = -left[(78 + -78)]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % (36 + -34)))\n", "id": "ConstantUnfoldding_sample_from_s016605598_to_20", "old_id": "s016605598"}
{"code": "(a, b, c, k) = list(map(int, input().split()))\nif k % (45 + -43) == (91 + -91):\n    print(a-b)\nelse:\n    print(b-a)\n", "id": "ConstantUnfoldding_sample_from_s441028271_to_21", "old_id": "s441028271"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = (96 + -96)\nfor p in combinations_with_replacement(range((42 + -41), M + (55 + -54)), r=N):\n    temp_score = (34 + -34)\n    for q in Q_groups:\n        if p[q[(53 + -52)] - (46 + -45)] - p[q[(85 + -85)] - (30 + -29)] == q[(10 + -8)]:\n            temp_score += q[(59 + -56)]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "id": "ConstantUnfoldding_sample_from_s269975433_to_22", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == (29 + -29):\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-(81 + -80)]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn)-(36 + -35)\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == (82 + -82) or j.count(\"5\") == (2 + -2) or j.count(\"7\") == (66 + -66):\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == (77 + -77) or j.count(\"5\") == (41 + -41) or j.count(\"7\") == (25 + -25):\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "ConstantUnfoldding_sample_from_s949655009_to_23", "old_id": "s949655009"}
{"code": "a, b, c = map(int, input().split())\nprint(int((a*b)/(46 + -44)))\n", "id": "ConstantUnfoldding_sample_from_s316832655_to_24", "old_id": "s316832655"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = [(74 + -74)] * N\n\nfor i in range(N - (87 + -86), -(39 + -38), -(48 + -47)):\n    tmp_sum = (90 + -90)\n    for j in range((i + (26 + -25)) * (85 + -83) - (45 + -44), N, i + (42 + -41)):\n        tmp_sum += B[j]\n        tmp_sum %= (71 + -69)\n    B[i] = tmp_sum ^ A[i]\n\nprint(sum(B))\nprint(*[i + (71 + -70) for i, b in enumerate(B) if b == (35 + -34)])\n", "id": "ConstantUnfoldding_sample_from_s103029464_to_25", "old_id": "s103029464"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in range(len(alphabets)):\n    if alphabets[i] == s:\n        print(alphabets[i+(53 + -52)])\n", "id": "ConstantUnfoldding_sample_from_s961772658_to_26", "old_id": "s961772658"}
{"code": "N = int(input())\ncnt = (12 + -11)\nwhile cnt <= (49 + -40):\n    if N % cnt == (25 + -25) and (95 + -94) <= N/cnt <= (58 + -49):\n        print('Yes')\n        break\n    else:\n        cnt += (94 + -93)\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s018260659_to_27", "old_id": "s018260659"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - (74 + -73)\n    first = end - len(T) + (26 + -25)\n    while first >= (28 + -28):\n        t_i = (42 + -42)\n        for s_i in range(first, end+(62 + -61)):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += (57 + -56)\n        else:\n            break\n\n        first -= (1 + 0)\n        end -= (7 + -6)\n\n    else:\n        print('UNRESTORABLE')\n        exit((39 + -39))\n\n    ans = copy.deepcopy(S_d)\n    t_i = (17 + -17)\n    for i in range(first, end+(66 + -65)):\n        ans[i] = T[t_i]\n        t_i += (50 + -49)\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s826716211_to_28", "old_id": "s826716211"}
{"code": "X = int(input())\nh = X // (10 + 490)\na = (X % (38 + 462)) // (71 + -66)\ny = h * (75 + 925) + a * (17 + -12)\nprint(y)\n", "id": "ConstantUnfoldding_sample_from_s353603279_to_29", "old_id": "s353603279"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([int(x) for x in input().split()])\n\nc = (42 + -42)\nfor i in range(len(mat)-(42 + -41)):\n    for j in range(i+(50 + -49), len(mat)):\n        dist = math.sqrt(sum([(x-y)**(61 + -59) for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist:\n            c += (81 + -80)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_s663509070_to_30", "old_id": "s663509070"}
{"code": "X, t = map(int, input().split())\n\nif X > t:\n    answer = X - t\nelif X <= t:\n    answer = (86 + -86)\n\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_s000375264_to_31", "old_id": "s000375264"}
{"code": "X, A = list(map(int, input().split()))\nif X < A:\n    print((73 + -73))\nelse:\n    print((19 + -9))\n", "id": "ConstantUnfoldding_sample_from_s522872163_to_32", "old_id": "s522872163"}
{"code": "N, K = map(int, input().split())\nif N % K == (33 + -33):\n    print((29 + -29))\nelse:\n    print((32 + -31))\n", "id": "ConstantUnfoldding_sample_from_s997947249_to_33", "old_id": "s997947249"}
{"code": "n = int(input())\nh = int(n / (49 + 3551))\nn %= (92 + 3508)\nm = int(n / (73 + -13))\nn %= (48 + 12)\ns = int(n)\nprint(str(h) + \":\" + str(m) + \":\" + str(s))\n", "id": "ConstantUnfoldding_sample_from_s451465602_to_34", "old_id": "s451465602"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = (79 + -79)\nfor i in range((80 + -78)**(h+w)):\n    b = bin(i)[(69 + -67):].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = (96 + -96)\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0':\n                ct += (7 + -6)\n    if ct == ka:\n        ans += (39 + -38)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s760938927_to_35", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[(60 + -60)] == '1':\n        n = not n\n    if operation[(65 + -65)] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = (90 + -89) if f != (45 + -44) else (83 + -81)\n        if f == (1 + 0):\n            left = c+left\n        elif f == (20 + -18):\n            right += c\ns = left+s+right\nprint(s[::-(61 + -60)] if n else s)\n", "id": "ConstantUnfoldding_sample_from_s621701371_to_36", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range((64 + -64), n):\n        for j in range(n-(98 + -97), i, -(3 + -2)):\n            if int(cards[j][(5 + -4)]) < int(cards[j-(51 + -50)][(84 + -83)]):\n                cards[j], cards[j-(89 + -88)] = cards[j-(56 + -55)], cards[j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range((95 + -95), n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][(14 + -13)]) < int(cards[mini][(27 + -26)]):\n                mini = j\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "id": "ConstantUnfoldding_sample_from_s875904659_to_37", "old_id": "s875904659"}
{"code": "candy = sorted(map(int, input().split()))\nprint(\"Yes\" if candy[(88 + -88)]+candy[(55 + -54)] == candy[(93 + -91)] else \"No\")\n", "id": "ConstantUnfoldding_sample_from_s706119740_to_38", "old_id": "s706119740"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\n\n\ndef main():\n    A.sort()\n    ans = A[-(48 + -47)] - A[(56 + -56)]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s636592395_to_39", "old_id": "s636592395"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit((58 + -58))\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = (50 + -50), (55 + -54)\n    for i in range(len(li)-(9 + -8), -(64 + -63), -(24 + -23)):\n        n += li[i] * base\n        base *= (66 + -56)\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range((88 + -86), n+(28 + -27))]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -(24 + -23):\n            continue\n        for j in range(i+(13 + -12), len(li)):\n            if li[j] % li[i] == (94 + -94):\n                li[j] = -(55 + -54)\n    return [n for n in li if n != -(47 + -46)]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == (29 + -29):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range((24 + -24), ((50 + -49) << (n+(89 + -88)))):\n        ss = set()\n        for i in range((75 + -75), n):\n            if (bit & ((46 + -45) << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == (92 + -91):\n        return (77 + -76)\n    return n * factorial(n-(48 + -47))\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = (19 + -18)\n        while n:\n            r *= m\n            m -= (69 + -68)\n            n -= (86 + -85)\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_s137613418_to_40", "old_id": "s137613418"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = (21 + -20)\nfor i in A:\n    B[i-(30 + -29)] = count\n    count += (33 + -32)\n\n\nprint(*B)\n", "id": "ConstantUnfoldding_sample_from_s273727373_to_41", "old_id": "s273727373"}
{"code": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    min_1 = min(q*(71 + -67), h*(32 + -30), q*(84 + -82)+h, s)\n    min_2 = min(min_1*(10 + -8), d)\n\n    print((n % (11 + -9))*min_1 + (n // (26 + -24))*min_2)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s404600540_to_42", "old_id": "s404600540"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= (73 + -72)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s922746568_to_43", "old_id": "s922746568"}
{"code": "h, a = map(int, input().strip().split())\n\nans = h // a\nama = h % a\n\nif ama != (56 + -56):\n    ans += (63 + -62)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s267172486_to_44", "old_id": "s267172486"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = (98 + -95)\n    for i in range((5 + -5), len(input_value) + (42 + -41) - n):\n        for j in range((29 + -28), n):\n            if input_value[i] != input_value[i + j]:\n                break\n            if j == n - (10 + -9):\n                return \"Yes\"\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "ConstantUnfoldding_sample_from_s616346400_to_45", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = (55 + -55)\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = (11 + -11)\ncnt = (41 + -41)\nfor i in lst:\n    if i == pre:\n        tmp_cnt += (24 + -23)\n    else:\n        cnt += sum([j for j in range(tmp_cnt + (62 + -61))])\n        tmp_cnt = (31 + -31)\n    pre = i\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s430322735_to_46", "old_id": "s430322735"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\ns = A[(46 + -46)] ^ A[(95 + -94)]\nfor i in range((76 + -74), N):\n    s = s ^ A[i]\n\nB = [(74 + -74)]*N\nfor i in range(N):\n    B[i] = s ^ A[i]\n\nL = [str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "id": "ConstantUnfoldding_sample_from_s761121328_to_47", "old_id": "s761121328"}
{"code": "print('Christmas'+' Eve'*abs(int(input())-(26 + -1)))\n", "id": "ConstantUnfoldding_sample_from_s031917494_to_48", "old_id": "s031917494"}
{"code": "N, M = map(int, input().split())\nA = map(int, input().split())\nA_sum = sum(A)\n\nprint(N - A_sum if N - A_sum >= (37 + -37) else \"-1\")\n", "id": "ConstantUnfoldding_sample_from_s952264435_to_49", "old_id": "s952264435"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == (22 + -22):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-(58 + -57))\n        exit()\nprint(bb)\n", "id": "ConstantUnfoldding_sample_from_s986062252_to_50", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n\n    if n == (99 + -99):\n        break\n\n    res = -(93 + 1111111018)\n    s = (97 + -97)\n    for i in range(n):\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n\n    print(res)\n", "id": "ConstantUnfoldding_sample_from_s923405856_to_51", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = (15 + 998244338)\n\n    if D[(88 + -88)] != (4 + -4):\n        print((14 + -14))\n        return\n\n    cnt = Counter(D)\n\n    if cnt[(33 + -33)] > (69 + -68):\n        print((40 + -40))\n        return\n\n    res = (14 + -13)\n\n    for i in range((93 + -92), max(D)+(37 + -36)):\n        if cnt[i-(26 + -25)] == (60 + -59):\n            continue\n        res *= cnt[i-(94 + -93)]**cnt[i] % mod\n        res %= mod\n\n    print(res)\n\n\nsolve()\n", "id": "ConstantUnfoldding_sample_from_s534639230_to_52", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, (29 + -28))\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // (95 + -93) for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = (4 + -4)\n    while a % (54 + -52) == (100 + -100):\n        a //= (10 + -8)\n        cnt += (44 + -43)\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print((60 + -60))\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print((58 + -58))\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + (58 + -57)) // (72 + -70)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s817205687_to_53", "old_id": "s817205687"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = (82 + -82)\nfor i in range(N):\n    d = min(A[i], B[i])\n    ans += d\n    A[i] -= d\n    B[i] -= d\n    d = min(A[i + (29 + -28)], B[i])\n    ans += d\n    A[i + (56 + -55)] -= d\n    B[i] -= d\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s287369394_to_54", "old_id": "s287369394"}
{"code": "import numpy as np\n\nn, k = map(int, input().split())\n\nif n > k:\n    tmp = n % k\n    if tmp >= k - tmp:\n        ans = k - tmp\n    else:\n        ans = tmp\nelif n < k:\n    if n >= k - n:\n        ans = k - n\n    else:\n        ans = n\nelse:\n    ans = (36 + -36)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s058944700_to_55", "old_id": "s058944700"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = (49 + -47)**(size-(77 + -76)).bit_length()\n            self.default = default\n            self.seg = [default]*((12 + -10)*self.size-(74 + -73))\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-(52 + -51)\n            self.seg[k] = x\n            while k:\n                k = (k-(85 + -84))//(51 + -49)\n                self.seg[k] = self.segfunc(self.seg[(13 + -11)*k+(14 + -13)], self.seg[(47 + -45)*k+(99 + -97)])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-(46 + -45)\n            q += self.size-(45 + -43)\n            ret = self.default\n            while q-p > (51 + -50):\n                if p & (62 + -61) == (63 + -63):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & (27 + -26) == (83 + -82):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= (28 + -27)\n                p = p//(19 + -17)\n                q = (q-(27 + -26))//(15 + -13)\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+(95 + -94) for i in range(N)]\n    left_seg = SegmentTree(N, (2 + -2))\n    for i, num in enumerate(a):\n        ans[num-(74 + -73)] *= i + (92 + -91) - left_seg.query((24 + -24), num)\n        left_seg.update(num-(63 + -62), i+(44 + -43))\n    right_seg = SegmentTree(N, (33 + -33))\n    for i, num in enumerate(a[::-(40 + -39)]):\n        ans[num-(12 + -11)] *= i + (27 + -26) - right_seg.query((100 + -100), num)\n        right_seg.update(num-(90 + -89), i+(80 + -79))\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s764169243_to_56", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = (99 + -99)\nrecord = (71 + -71)\nfor i in range(len(S)):\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        count += (19 + -18)\n    else:\n        if count > record:\n            record = count\n        count = (85 + -85)\nif count > record:\n    record = count\n\nprint(record)\n", "id": "ConstantUnfoldding_sample_from_s993625131_to_57", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = (33 + -33)\nfor i in T:\n    if i == S[-(92 + -91)] or i == S[(31 + -31)]:\n        ans += (13 + -12)\n    else:\n        left = (73 + -73)\n        right = n-(100 + -99)\n        while right-left > (39 + -38):\n            mid = (left+right)//(67 + -65)\n            if S[mid] == i:\n                ans += (54 + -53)\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s315467749_to_58", "old_id": "s315467749"}
{"code": "N, K = map(int, input().split())\nS = list(input())\nif S[K-(42 + -41)] == \"A\":\n    S[K-(75 + -74)] = \"a\"\nelif S[K-(72 + -71)] == \"B\":\n    S[K-(46 + -45)] = \"b\"\nelse:\n    S[K-(20 + -19)] = \"c\"\nans = \"\".join(S)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s060838372_to_59", "old_id": "s060838372"}
{"code": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return abs(A - a) + abs(B - b) + abs(C - c) - (68 + -38) if min(a, b, c) > (59 + -59) else (65 + -55) ** (30 + -21)\n    no_add = dfs(cur + (83 + -82), a, b, c)\n    add_a = dfs(cur + (41 + -40), a + l[cur], b, c) + (27 + -17)\n    add_b = dfs(cur + (71 + -70), a, b + l[cur], c) + (96 + -86)\n    add_c = dfs(cur + (43 + -42), a, b, c + l[cur]) + (17 + -7)\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs((70 + -70), (18 + -18), (51 + -51), (92 + -92)))\n", "id": "ConstantUnfoldding_sample_from_s951065247_to_60", "old_id": "s951065247"}
{"code": "N = int(input())\n\nif N % (37 + -28) == (5 + -5):\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s542358243_to_61", "old_id": "s542358243"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = (4 + -4)\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans += (92 + -91)\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s031459110_to_62", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit((5 + 5)**(53 + -46))\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (47 + -46) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = (6 + 4) ** (65 + -47)\nMOD = (60 + -50) ** (75 + -66) + (93 + -86)\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-(88 + -87)]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-(59 + -58)]:\n        dif = min(abs(n/(82 + -80) - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s681105182_to_63", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+(65 + -64)):\n    S_2 = S[i:i+M]\n    cnt = (38 + -38)\n    for j in range(M):\n        if T[j] != S_2[j]:\n            cnt += (70 + -69)\n    ans = min(ans, cnt)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s838619850_to_64", "old_id": "s838619850"}
{"code": "from bisect import bisect\nn, m, x = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\nans = (52 + -52)\ni = bisect(a, x)\nprint(min(len(a[:i]), len(a[i:])))\n", "id": "ConstantUnfoldding_sample_from_s087080706_to_65", "old_id": "s087080706"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] += (52 + -51)\n        else:\n            sdic[s] = (87 + -86)\n    ans = (97 + -97)\n    for k, v in sdic.items():\n        ans += v*(v-(43 + -42))//(33 + -31)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s733189960_to_66", "old_id": "s733189960"}
{"code": "s = input()\n\nif s == 'RRR':\n    print((63 + -60))\nelif s == 'SSS':\n    print((11 + -11))\nelif s == 'RRS' or s == 'SRR':\n    print((3 + -1))\nelse:\n    print((20 + -19))\n", "id": "ConstantUnfoldding_sample_from_s855969677_to_67", "old_id": "s855969677"}
{"code": "n = int(input())\nres = (41 + -41)\nfor _ in range(n):\n    x, u = list(input().split())\n    if u == \"BTC\":\n        res += float(x) * (9 + 379991)\n    else:\n        res += int(x)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_s238775098_to_68", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//(84 + -82)):\n        ve.append(v[(47 + -45)*i])\n        vo.append(v[(7 + -5)*i+(8 + -7)])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[(82 + -82)][(50 + -50)] != co.most_common()[(42 + -42)][(28 + -28)]:\n        ans = n-ce.most_common()[(18 + -18)][(55 + -54)]-co.most_common()[(30 + -30)][(37 + -36)]\n    elif len(ce) == (44 + -43) and len(co) == (1 + 0):\n        ans = n-ce.most_common()[(29 + -29)][(28 + -27)]\n    elif len(ce) == (34 + -33):\n        ans = n-ce.most_common()[(52 + -52)][(39 + -38)]-co.most_common()[(61 + -60)][(52 + -51)]\n    elif len(co) == (63 + -62):\n        ans = n-ce.most_common()[(100 + -99)][(77 + -76)]-co.most_common()[(60 + -60)][(100 + -99)]\n    else:\n        ans = min(n-ce.most_common()[(34 + -34)][(3 + -2)]-co.most_common()[(60 + -59)]\n                  [(58 + -57)], n-ce.most_common()[(59 + -58)][(68 + -67)]-co.most_common()[(55 + -55)][(96 + -95)])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s101447419_to_69", "old_id": "s101447419"}
{"code": "A, B = map(int, input().split())\n\nmin = B * (80 + -70)\nmax = (B+(28 + -27)) * (77 + -67) - (47 + -46)\n\nans = -(82 + -81)\nfor i in range(min, max+(56 + -55)):\n    if int(i * 0.08) == A:\n        ans = i\n        break\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s764356857_to_70", "old_id": "s764356857"}
{"code": "N = int(input())\nif N % (22 + -20) == (23 + -23):\n    print(N//(85 + -83))\nelse:\n    print(N//(73 + -71)+(59 + -58))\n", "id": "ConstantUnfoldding_sample_from_s280552889_to_71", "old_id": "s280552889"}
{"code": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = (71 + -70), (46 + -45), (80 + -79)\n\nwhile x**(67 + -65) + y**(3 + -1) + z**(28 + -26) + x*y + y*z + z*x <= n:\n    while x ** (96 + -94) + y ** (15 + -13) + z ** (48 + -46) + x * y + y * z + z * x <= n:\n        while x ** (94 + -92) + y ** (6 + -4) + z ** (84 + -82) + x * y + y * z + z * x <= n:\n            i = x ** (91 + -89) + y ** (58 + -56) + z ** (9 + -7) + x * y + y * z + z * x\n            A[i - (42 + -41)] += (81 + -80)\n            z += (13 + -12)\n        z = (12 + -11)\n        y += (67 + -66)\n    y, z = (47 + -46), (30 + -29)\n    x += (90 + -89)\nfor i in range(n):\n    print(int(A[i]))\n", "id": "ConstantUnfoldding_sample_from_s827462150_to_72", "old_id": "s827462150"}
{"code": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append((12 + -12))\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[AA[j] - (43 + -42)] = (17 + -16)\n\nn = (32 + -32)\nfor i in range(N):\n    if A[i] == (45 + -45):\n        n += (31 + -30)\nprint(n)\n", "id": "ConstantUnfoldding_sample_from_s225521100_to_73", "old_id": "s225521100"}
{"code": "A, B, C = map(int, input().split())\nif B < C:\n    print((35 + -35))\nelif A * C < B:\n    print(C)\nelse:\n    print(B//A)\n", "id": "ConstantUnfoldding_sample_from_s208095748_to_74", "old_id": "s208095748"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - (32 + -31) for a in input().split()]\n    sum_A = [(66 + -66) for _ in range(N + (51 + -50))]\n\n    count = (75 + -75)\n    modK = dict()\n    modK[(5 + -5)] = [(2 + -2)]\n    for i in range(N):\n        sum_A[i + (34 + -33)] = (sum_A[i] + A[i]) % K\n        if sum_A[i+(98 + -97)] not in modK:\n            modK[sum_A[i+(93 + -92)]] = [i + (36 + -35)]\n        else:\n            modK[sum_A[i+(64 + -63)]].append(i+(15 + -14))\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - (63 + -62)\n\n    print(count)\n    return (86 + -86)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s975943078_to_75", "old_id": "s975943078"}
{"code": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[(53 + -53)] for l in gate_cond])\nmin_upper_th = min([l[(36 + -35)] for l in gate_cond])\nif min_upper_th - max_under_th >= (13 + -13):\n    print(min_upper_th - max_under_th + (8 + -7))\nelse:\n    print((45 + -45))\n", "id": "ConstantUnfoldding_sample_from_s205112814_to_76", "old_id": "s205112814"}
{"code": "nums = list(map(int, input().split(\" \")))\nnums.sort(reverse=True)\nprint(nums[(63 + -63)]*(48 + -38)+nums[(69 + -68)]+nums[(77 + -75)])\n", "id": "ConstantUnfoldding_sample_from_s214672212_to_77", "old_id": "s214672212"}
{"code": "ABC = list(map(int, input().split()))\n\nA = ABC[(34 + -34)]\nB = ABC[(26 + -25)]\nC = ABC[(55 + -53)]\n\nprint(max([(93 + -83)*A+B+C, (49 + -39)*B+C+A, (22 + -12)*C+A+B]))\n", "id": "ConstantUnfoldding_sample_from_s197514717_to_78", "old_id": "s197514717"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-(73 + -72)):\n        dist.append(A[i+(97 + -96)]-A[i])\n    dist.append(K+A[(84 + -84)]-A[-(48 + -47)])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s267613210_to_79", "old_id": "s267613210"}
{"code": "n = int(input())\ns = input()\ncnt = (9 + -8)\nfor i in range(n-(72 + -71)):\n    if s[i] == s[i+(57 + -56)]:\n        continue\n\n    else:\n        cnt += (37 + -36)\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s869207096_to_80", "old_id": "s869207096"}
{"code": "n, m = list(map(int, input().split()))\na = []\nb = []\nfor i in range(m):\n    a1, b1 = list(map(int, input().split()))\n    a.append(a1)\n    b.append(b1)\n\nfor i in range((61 + -60), n+(96 + -95)):\n    print(a.count(i)+b.count(i))\n", "id": "ConstantUnfoldding_sample_from_s491954463_to_81", "old_id": "s491954463"}
{"code": "a = [int(input()) for i in range((48 + -43))]\n\ndic = {}\n\nfor i in range((26 + -21)):\n    if str(a[i])[-(43 + -42)] == \"0\":\n        dic.update({i: (50 + -50)})\n    else:\n        dic.update({i: int(str(a[i])[-(99 + -98)]) - (48 + -38)})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][(22 + -22)]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "ConstantUnfoldding_sample_from_s575946485_to_82", "old_id": "s575946485"}
{"code": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X // D\n    if abs(r) > K:\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if (K - r) % (57 + -55) == (47 + -47):\n        print(a)\n    else:\n        print(abs(D - a))\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s814885508_to_83", "old_id": "s814885508"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = (33 + -33)\nfor i in range(n):\n    sum += int(l[i])\n    if max < int(l[i]):\n        max = int(l[i])\n    if min > int(l[i]):\n        min = int(l[i])\nprint(min, max, sum)\n", "id": "ConstantUnfoldding_sample_from_s704354119_to_84", "old_id": "s704354119"}
{"code": "A, B, K = map(int, input().split())\nif A+K-(70 + -69) >= B-K+(93 + -92):\n    while A <= B:\n        print(A)\n        A += (17 + -16)\nelse:\n    i = (29 + -29)\n    while i <= K-(96 + -95):\n        print(A+i)\n        i += (21 + -20)\n    while B-K+(43 + -42) <= B:\n        print(B-K+(86 + -85))\n        K -= (92 + -91)\n", "id": "ConstantUnfoldding_sample_from_s357377130_to_85", "old_id": "s357377130"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = (1 + -1)\nfor i in range((16 + -15), N):\n    tmp = a[i - (18 + -17)] + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - (26 + -25)] = tmp - a[i] - x\n            a[i] = (17 + -17)\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s708549466_to_86", "old_id": "s708549466"}
{"code": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[(72 + -71)::(65 + -63)][::-(7 + -6)]+a[::(49 + -47)]\nif len(a) % (97 + -95) == (18 + -18):\n    print(' '.join(b))\nelse:\n    print(' '.join(b[::-(17 + -16)]))\n", "id": "ConstantUnfoldding_sample_from_s735480710_to_87", "old_id": "s735480710"}
{"code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[s] = (44 + -43)\n    else:\n        arr[s] += (61 + -60)\n\nmax_count = max(arr.values())\ndic = [key[(60 + -60)] for key in arr.items() if key[(13 + -12)] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_s622795537_to_88", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = (3 + -3)\n\nfor i in range(n):\n    x = set(s[:i+(50 + -49)])\n    y = set(s[i+(19 + -18):])\n\n    z = (49 + -49)\n    for w in x:\n        if w in y:\n            z += (12 + -11)\n    if z > ans:\n        ans = z\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s232279435_to_89", "old_id": "s232279435"}
{"code": "s = input()\n\nif len(s) == (96 + -94):\n    print(s)\nelse:\n    print(s[::-(78 + -77)])\n", "id": "ConstantUnfoldding_sample_from_s195311365_to_90", "old_id": "s195311365"}
{"code": "import math\nMOD = (18 + -8)**(11 + -2)+(66 + -59)\nf = math.factorial\nn, m = sorted(map(int, input().split()))\nprint(max((34 + -32) - m + n, (38 + -38))*f(n)*f(m) % MOD)\n", "id": "ConstantUnfoldding_sample_from_s840967243_to_91", "old_id": "s840967243"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[(20 + -20) for k in range((74 + -64))] for j in range((94 + -91))] for i in range((95 + -85))]\nfor i in range(N):\n    n = input().split()\n    b = int(n[(43 + -43)])\n    f = int(n[(88 + -87)])\n    r = int(n[(92 + -90)])\n    v = int(n[(13 + -10)])\n    m[b-(75 + -74)][f-(57 + -56)][r-(11 + -10)] += v\n\nfor i in range((66 + -62)):\n    for j in range((99 + -96)):\n        for k in range((84 + -74)):\n            line += ' {0}'.format(m[i][j][k])\n        print(line)\n        line = ''\n    if i < (2 + 1):\n        print('#'*(25 + -5))\n", "id": "ConstantUnfoldding_sample_from_s067092519_to_92", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = (68 + -67)\nfor i in range(N-(99 + -98)):\n    if S[i] != S[i+(47 + -46)]:\n        x = x+(89 + -88)\nprint(x)\n", "id": "ConstantUnfoldding_sample_from_s642705424_to_93", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[(57 + -57) for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-(15 + -14)][r-(25 + -24)] += (3 + -2)\n\n    accum = [[(76 + -76) for _ in range(N+(4 + -3))]]\n    for i in range(N):\n        temp = [(88 + -88)]\n        v = (72 + -72)\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-(14 + -13)][j+(40 + -39)]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-(81 + -80)][q] - accum[q][p-(87 + -86)] + accum[p-(3 + -2)][p-(54 + -53)]\n        print(v)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s048491063_to_94", "old_id": "s048491063"}
{"code": "A, B = map(int, input().split())\nif A == B:\n    print(\"Draw\")\nelif A == (84 + -83):\n    print(\"Alice\")\nelif B == (71 + -70):\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n", "id": "ConstantUnfoldding_sample_from_s040517919_to_95", "old_id": "s040517919"}
{"code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = (23 + -21)\n    table = []\n    while i * i <= n:\n        while n % i == (70 + -70):\n            n /= i\n            table.append(int(i))\n        i += (77 + -76)\n    if n > (77 + -76):\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > (34 + -34):\n        return digit(i//(93 + -83)) + [i % (23 + -13)]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[(6 + -5)]+T[(3 + -1)])\nif date <= (73 + 357):\n    print('Heisei')\nelse:\n    print('TBD')\n", "id": "ConstantUnfoldding_sample_from_s086522214_to_96", "old_id": "s086522214"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit((25 + 1999975))\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int((25 + -15)**(23 + -14)+(94 + -87))\ninf = int((92 + -82)**(16 + 4))\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [(82 + -82)]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += (47 + -46)\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [(7 + -7)]*size\n    for a in range(size):\n        if (num >> (size-a-(85 + -84))) & (91 + -90) == (85 + -84):\n            A[a] = (85 + -84)\n        else:\n            A[a] = (40 + -40)\n    return A\n\n\ndef get_facs(n, mod_=(15 + -15)):\n    A = [(77 + -76)]*(n+(22 + -21))\n    for a in range((28 + -26), len(A)):\n        A[a] = A[a-(1 + 0)]*a\n        if (mod > (7 + -7)):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < (30 + -30)):\n        return (22 + -22)\n    return (fac[n]*pow(fac[n-r], mod-(54 + -52), mod)*pow(fac[r], mod-(74 + -72), mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> (30 + -29)\n    num = (y | z)\n    if (num >= ((19 + -18) << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+(1 + 0))\n    A[(66 + -66)] = False\n    A[(60 + -59)] = False\n    for a in range((63 + -61), n+(5 + -4)):\n        if A[a]:\n            for b in range(a*(19 + -17), n+(64 + -63), a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+(33 + -32)):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= (60 + -58)):\n        return False\n    i = (72 + -70)\n    while i*i <= num:\n        if (num % i == (100 + -100)):\n            return False\n        i += (89 + -88)\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-(46 + -45)):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = (76 + -74)\n    list_ = []\n    while b * b <= n:\n        while n % b == (44 + -44):\n            n //= b\n            list_.append(b)\n        b += (78 + -77)\n    if n > (85 + -84):\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += (60 + -59)\n            else:\n                dic[a] = (54 + -53)\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=(31 + -30)):\n    return x*(n//x)\n\n\ndef ceil_(n, x=(96 + -95)):\n    return x*((n+x-(48 + -47))//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s977408144_to_97", "old_id": "s977408144"}
{"code": "from itertools import *\n\nN = int(input())\nx = (60 + -59)\n\nN_list = [x+(62 + -61) for x in range(N)]\n\nn = list(product(N_list, repeat=(64 + -61)))\n\nm = len(n)\n\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_s797394058_to_98", "old_id": "s797394058"}
{"code": "n, x = map(int, input().split())\nm = [int(input()) for _ in range(n)]\nm.sort()\nprint(n + (x - sum(m)) // m[(1 + -1)])\n", "id": "ConstantUnfoldding_sample_from_s934308496_to_99", "old_id": "s934308496"}
{"code": "N = int(input())\nans = []\n\nfor i in range((25 + -24), N+(43 + -42)):\n    if sum(range((25 + -24), i + (13 + -12))) < N:\n        continue\n    else:\n        ans = [i - (43 + -42), sum(range((60 + -59), i + (6 + -5))) - N]\n        break\nfor i in range(ans[(98 + -98)]+(89 + -88)):\n    if i + (24 + -23) != ans[(34 + -33)]:\n        print(i + (88 + -87))\n", "id": "ConstantUnfoldding_sample_from_s200092246_to_100", "old_id": "s200092246"}
{"code": "a, b = map(int, input().split())\nif a <= (71 + -63) and b <= (32 + -24):\n    print(\"Yay!\")\nelse:\n    print(\":(\")\n", "id": "ConstantUnfoldding_sample_from_s453478465_to_101", "old_id": "s453478465"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[(58 + -58)][(92 + -91)]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if p[i][(56 + -55)] == count:\n        ans.append(p[i][(17 + -17)])\n    else:\n        break\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_s668439281_to_102", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+(100 + -98)):\n    if i == (23 + -23) or i == H+(76 + -75):\n        G.append('#'*(W+(6 + -4)))\n    else:\n        G.append('#' + input() + '#')\n\nans = (66 + -66)\nfor sx in range(W+(73 + -71)):\n    for sy in range(H+(41 + -39)):\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+(62 + -60))] for i in range(H+(95 + -93))]\n            visited = [[-(86 + -85) for i in range(W+(90 + -88))] for i in range(H+(39 + -37))]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = (71 + -71)\n            visited[sy][sx] = (33 + -32)\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+(36 + -35)] == '.' and visited[y][x+(68 + -67)] == -(65 + -64):\n                    q.append((x+(49 + -48), y))\n                    dist[y][x+(32 + -31)] = dist[y][x] + (67 + -66)\n                    visited[y][x+(29 + -28)] = (44 + -43)\n\n                if G[y][x-(40 + -39)] == '.' and visited[y][x-(36 + -35)] == -(74 + -73):\n                    q.append((x-(41 + -40), y))\n                    dist[y][x-(74 + -73)] = dist[y][x] + (49 + -48)\n                    visited[y][x-(34 + -33)] = (32 + -31)\n\n                if G[y+(77 + -76)][x] == '.' and visited[y+(79 + -78)][x] == -(11 + -10):\n                    q.append((x, y+(84 + -83)))\n                    dist[y+(64 + -63)][x] = dist[y][x] + (22 + -21)\n                    visited[y+(99 + -98)][x] = (98 + -97)\n\n                if G[y-(48 + -47)][x] == '.' and visited[y-(71 + -70)][x] == -(86 + -85):\n                    q.append((x, y-(74 + -73)))\n                    dist[y-(21 + -20)][x] = dist[y][x] + (70 + -69)\n                    visited[y-(77 + -76)][x] = (11 + -10)\n            for i in range(W+(57 + -55)):\n                for j in range(H+(62 + -60)):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s951169509_to_103", "old_id": "s951169509"}
{"code": "s = input()\nt = input()\n\nif t[:-(88 + -87)] == s:\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s676839884_to_104", "old_id": "s676839884"}
{"code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = (47 + -47)\nfor i in mo:\n    if i[(41 + -40)] == \"JPY\":\n        okz += i[(10 + -10)]\n    else:\n        okz += i[(69 + -69)]*(67 + 379933)\n\nprint(okz)\n", "id": "ConstantUnfoldding_sample_from_s554393427_to_105", "old_id": "s554393427"}
{"code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit((28 + -18) ** (29 + -22))\ns = sorted(readline().rstrip())\nt = sorted(readline().rstrip())[::-(86 + -85)]\nprint(\"Yes\" if s < t else \"No\")\n", "id": "ConstantUnfoldding_sample_from_s441329208_to_106", "old_id": "s441329208"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = (89 + -89)\nfor i in range(N // R + (19 + -18)):\n    for j in range((N-i * R) // G + (46 + -45)):\n        if N - i * R - j * G >= (44 + -44) and (N - i * R - j * G) % B == (70 + -70):\n            score += (67 + -66)\n\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_s897879131_to_107", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - (66 + -65) for x in input().split()]\n\n\nINF = (70 + -60) ** (22 + -2)\nMOD = (22 + 999999985)\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-(82 + -81)]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - (98 + -97))\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s344468705_to_108", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range((25 + -24), N+(76 + -75))}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\ncol = [-(27 + -26) for _ in range(N+(27 + -26))]\ncnt = (70 + -70)\nfor i in range((5 + -4), N+(73 + -72)):\n    if col[i] < (82 + -82):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            for y in G[x]:\n                if col[y] < (54 + -54):\n                    col[y] = cnt\n                    que.append(y)\n        cnt += (25 + -24)\ncmax = max(col)\nprint(cmax)\n", "id": "ConstantUnfoldding_sample_from_s233116196_to_109", "old_id": "s233116196"}
{"code": "a, b = map(int, input().split())\nprint(a+b if a == b else max(a, b)*(59 + -57)-(53 + -52))\n", "id": "ConstantUnfoldding_sample_from_s062747389_to_110", "old_id": "s062747389"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = (43 + -43)\nhighLate = (88 + -88)\nfor color in range(memTime):\n    member = memLate[color]\n    if member // (4 + 396) >= (41 + -33):\n        highLate += (23 + -22)\n    elif ((member // (17 + 383)) in colorList) == False:\n        colorList.append(member // (30 + 370))\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == (54 + -54):\n    minColor = (71 + -70)\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "ConstantUnfoldding_sample_from_s964794058_to_111", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = (63 + -53) ** (23 + -13)\n\n    for k in range(max(X, Y) + (66 + -65)):\n        total = (16 + -14) * C * k + A * max((16 + -16), X - k) + B * max((75 + -75), Y - k)\n        if total < ans:\n            ans = total\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s724326345_to_112", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = (13 + -3) ** (3 + 6) + (80 + -73)\nINF = float('INF')\nsys.setrecursionlimit((60 + -50) ** (23 + -18))\n\n\ndef main():\n    N = int(readline())\n    s = {(11 + -10), (70 + -68), (12 + -8), (18 + -10), (90 + -74), (2 + 30), (53 + 11)}\n    ans = (36 + -36)\n\n    for i in range((25 + -24), N + (45 + -44)):\n        if i in s:\n            ans = i\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s878873709_to_113", "old_id": "s878873709"}
{"code": "n = input()\nn = int(n[-(84 + -83)])\n\nif n == (57 + -55) or n == (82 + -78) or n == (99 + -94) or n == (63 + -56) or n == (60 + -51):\n    print(\"hon\")\nelif n == (77 + -77) or n == (64 + -63) or n == (60 + -54) or n == (81 + -73):\n    print(\"pon\")\nelse:\n    print(\"bon\")\n", "id": "ConstantUnfoldding_sample_from_s652791025_to_114", "old_id": "s652791025"}
{"code": "x = int(input())\nprint(\"ai1333{}\".format(\"3\"*(x // (74 + 26))))\n", "id": "ConstantUnfoldding_sample_from_s039768540_to_115", "old_id": "s039768540"}
{"code": "N = int(input())\nS = input()\n\nans = (34 + -33)\ntmp = S[(14 + -14)]\nfor s in S:\n    if s != tmp:\n        ans += (44 + -43)\n        tmp = s\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s174910557_to_116", "old_id": "s174910557"}
{"code": "I = input\ns = I()*(44 + -42)\nprint(['No', 'Yes'][I() in s])\n", "id": "ConstantUnfoldding_sample_from_s592421258_to_117", "old_id": "s592421258"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = (9 + -9)\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae += (59 + -58)\n    usiro += (73 + -72)\n", "id": "ConstantUnfoldding_sample_from_s182651529_to_118", "old_id": "s182651529"}
{"code": "import math\n\n\ndef keta(s):\n    if len(s) < (88 + -86):\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\n\ndef main():\n    N = input()\n\n    if keta(N) % (50 + -41) == (36 + -36):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s486032847_to_119", "old_id": "s486032847"}
{"code": "n = int(input())\nr = (51 + -51)\nfor ii in range(n):\n    if (ii+(43 + -42)) % (9 + -6) != (39 + -39) and (ii+(18 + -17)) % (34 + -29) != (84 + -84):\n        r += (ii+(86 + -85))\nprint(r)\n", "id": "ConstantUnfoldding_sample_from_s702834515_to_120", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-(3 + -2) for i in input().split()]\n\n\ndef StoI(): return [ord(i)-(19 + 78) for i in input()]\n\n\ndef ItoS(nn): return chr(nn+(24 + 73))\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = (24 + -14)**(80 + -71)+(49 + -42)\ninf = float('inf')\nIINF = (16 + -6)**(32 + -22)\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit((52 + -42)**(22 + -16))\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [(92 + -92)] * N\n    t = [(38 + -38)] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = (45 + -45)\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = (80 + -80)\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s664563518_to_121", "old_id": "s664563518"}
{"code": "n = int(input())\n\nif n >= (68 + 932):\n    print('ABD')\nelse:\n    print('ABC')\n", "id": "ConstantUnfoldding_sample_from_s870744379_to_122", "old_id": "s870744379"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = (17 + -17), (51 + -51)\n\nfor i in range(N-(15 + -14)):\n    if H[i] >= H[i+(79 + -78)]:\n        count_tmp += (49 + -48)\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = (47 + -47)\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "ConstantUnfoldding_sample_from_s895229833_to_123", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open((30 + -30)).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros(((2 + 8), (14 + -4)), dtype=int)\nfor i in range((28 + -18)):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range((89 + -79)):\n    if i == (97 + -96):\n        continue\n    d[i] = nx.shortest_path_length(G, i, (49 + -48), weight='weight')\n\ns = (11 + -11)\nfor a in chain.from_iterable(A):\n    if a == -(4 + -3) or a == (73 + -72):\n        continue\n    s += d[a]\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s749244504_to_124", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [(47 + -47)]*n\nfor i in range((46 + -45), n):\n    if a[i] == \"C\" and a[i-(50 + -49)] == \"A\":\n        c[i] = c[i-(15 + -14)]+(18 + -17)\n    else:\n        c[i] = c[i-(79 + -78)]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-(97 + -96)]-c[l-(22 + -21)])\n", "id": "ConstantUnfoldding_sample_from_s759499751_to_125", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit((28 + -27) << (27 + -2))\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=(60 + -59)): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': (29 + -28), '.': (68 + -68)}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-(24 + -23)]])\n\n    else:\n        ret = [[pad] * (W + (60 + -58))]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-(33 + -32)]] + [pad])\n        ret.append([pad] * (W + (62 + -60)))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[(29 + -29)])\n    D = [[-(51 + -50)] * W for _ in [(3 + -3)] * H]\n    que = [((2 + -2), si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -(16 + -15):\n            continue\n        D[i][j] = c\n        for di, dj in product([-(23 + -21), -(7 + -6), (30 + -30), (41 + -40), (41 + -39)], repeat=(14 + -12)):\n            ni, nj = i + di, j + dj\n            if not ((54 + -54) <= ni < H and (61 + -61) <= nj < W) or D[ni][nj] != -(18 + -17) or ni == nj == (82 + -82) or grid[ni][nj] == (6 + -5):\n                continue\n            if (di == (35 + -35) and abs(dj) == (74 + -73)) or (dj == (46 + -46) and abs(di) == (89 + -88)):\n                nc = c\n            else:\n                nc = c + (27 + -26)\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = (70 + -60)**(44 + -35) + (64 + -57)\nINF = (18 + -16)**(37 + -6)\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-(93 + -92)] * W for _ in [(38 + -38)] * H]\nque = deque([((3 + -3), si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -(47 + -46):\n        continue\n    D[i][j] = c\n    for di, dj in product([-(64 + -62), -(4 + -3), (98 + -98), (77 + -76), (30 + -28)], repeat=(30 + -28)):\n        ni, nj = i + di, j + dj\n        if not ((7 + -7) <= ni < H and (72 + -72) <= nj < W) or D[ni][nj] != -(85 + -84) or ni == nj == (70 + -70) or S[ni][nj] == (38 + -37):\n            continue\n        if (di == (24 + -24) and abs(dj) == (63 + -62)) or (dj == (38 + -38) and abs(di) == (71 + -70)):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + (9 + -8), ni, nj))\n\nprint(D[ti][tj])\n", "id": "ConstantUnfoldding_sample_from_s124725275_to_126", "old_id": "s124725275"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/((25 + -21)*m)\nif a[m-(16 + -15)] >= s:\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s777789287_to_127", "old_id": "s777789287"}
{"code": "a, b = map(int, input().split())\n\nif a % (24 + -21) == (73 + -73) or b % (1 + 2) == (42 + -42) or (a + b) % (17 + -14) == (65 + -65):\n    print('Possible')\nelse:\n    print('Impossible')\n", "id": "ConstantUnfoldding_sample_from_s858647829_to_128", "old_id": "s858647829"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = (96 + -96)\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count += (19 + -18)\n\nif count == (96 + -96) or count == (7 + -5):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_s763097776_to_129", "old_id": "s763097776"}
{"code": "N = int(input())\ncapacity_list = [int(input()) for _ in range((26 + -21))]\ncapacity_list.sort()\nbottle_neck = capacity_list[(22 + -22)]\nprint((29 + -25)+int((N+bottle_neck-(20 + -19))/bottle_neck))\n", "id": "ConstantUnfoldding_sample_from_s582886163_to_130", "old_id": "s582886163"}
{"code": "n = int(input())\nls = [list(map(int, input().split())) for i in range(n)]\nls = sorted(ls, key=lambda x: sum(x), reverse=True)\ntaka = sum([ls[i][(85 + -85)] for i in range((29 + -29), len(ls), (69 + -67))])\naoki = sum([ls[i][(83 + -82)] for i in range((32 + -31), len(ls), (32 + -30))])\n\nprint(taka-aoki)\n", "id": "ConstantUnfoldding_sample_from_s787811177_to_131", "old_id": "s787811177"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -(92 + -82) ** (95 + -77)\n\nfor i in range((74 + -73), (37 + -35)**(67 + -57)):\n    tmp = (79 + -79)\n    lst = [(55 + -55)]*n\n    for j in range((30 + -20)):\n        if (i >> j) & (93 + -92):\n            for k in range(n):\n                lst[k] += F[k][j]\n    for k in range(n):\n        tmp += P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s906994739_to_132", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-(73 + -72), (20 + 82)):\n\n    if i in p:\n        continue\n\n    if not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "ConstantUnfoldding_sample_from_s957164965_to_133", "old_id": "s957164965"}
{"code": "from math import factorial as f\n\nN = int(input())\n\nprimes = [(49 + -47), (76 + -73), (86 + -81), (87 + -80), (93 + -82), (75 + -62), (98 + -81), (17 + 2), (85 + -62), (23 + 6), (50 + -19), (50 + -13), (65 + -24), (20 + 23), (85 + -38)]\ndivs = []\nfor i in range((15 + -14), (73 + 28)):\n    tmp = [(68 + -68) for _ in range(len(primes))]\n    for j in range(len(primes)):\n        p = primes[j]\n        tmp[j] = (17 + -17)\n        while (i//p == i/p):\n            i = i//p\n            tmp[j] += (70 + -69)\n    divs.append(tmp)\n\n\ndivsum = [(25 + -25) for _ in range(len(primes))]\nfor i in range((85 + -84), N+(22 + -21)):\n    for j in range(len(primes)):\n        divsum[j] += divs[i-(62 + -61)][j]\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-(30 + -29), divsum)))\n\n\nans = (61 + -61)\n\n\nans += num((9 + 66))\n\n\nans += num((42 + -27))*(num((8 + -3))-(64 + -63))\n\n\nans += num((17 + 8))*(num((58 + -55))-(19 + -18))\n\n\nans += num((65 + -60)) * (num((99 + -94))-(69 + -68)) * (num((51 + -48))-(51 + -49)) // (15 + -13)\nprint(int(ans))\n", "id": "ConstantUnfoldding_sample_from_s259116349_to_134", "old_id": "s259116349"}
{"code": "a, b, c, d, e = map(int, input().split())\nprint((4 + 11)-a-b-c-d-e)\n", "id": "ConstantUnfoldding_sample_from_s191853417_to_135", "old_id": "s191853417"}
{"code": "N = input()\nif N == (22 + -22):\n    print('Yes')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % (25 + -16) == (79 + -79):\n        print('Yes')\n    else:\n        print('No')\n", "id": "ConstantUnfoldding_sample_from_s557080041_to_136", "old_id": "s557080041"}
{"code": "from math import floor\nfrom heapq import heappush, heappop\nn, m = map(int, input().split())\na = []\nfor i in map(int, input().split()):\n    heappush(a, -i)\n\n\ndef dis(x, y): return x // (73 + -71)**y\n\n\nfor _ in range(m):\n    heappush(a, -dis(-heappop(a), (32 + -31)))\nprint(-sum(a))\n", "id": "ConstantUnfoldding_sample_from_s763208424_to_137", "old_id": "s763208424"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = (35 + 9999999964)\nfor i in range((80 + -79), (49 + 52)):\n    c = sum([(x - i) ** (36 + -34) for x in XS])\n    if m > c:\n        m = c\n\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_s880494034_to_138", "old_id": "s880494034"}
{"code": "N, M = map(int, input().split())\n\na = N * (N - (6 + -5)) // (5 + -3)\nb = M * (M - (62 + -61)) // (58 + -56)\n\nprint(a + b)\n", "id": "ConstantUnfoldding_sample_from_s167793578_to_139", "old_id": "s167793578"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range((83 + -82) << d):\n    count = (11 + -11)\n    sum = (100 + -100)\n    nokori = set(range((98 + -97), d + (56 + -55)))\n\n    for i in range(d):\n        if bit & ((17 + -16) << i):\n            sum += pc[i][(56 + -56)] * (i + (28 + -27)) * (80 + 20) + pc[i][(3 + -2)]\n            count += pc[i][(1 + -1)]\n            nokori.discard(i + (35 + -34))\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-(96 + -95)][(3 + -3)], -(-(g - sum) // (use * (31 + 69))))\n        count += n\n        sum += n * use * (20 + 80)\n\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s591424993_to_140", "old_id": "s591424993"}
{"code": "n = int(input())\nfor i in range((92 + -91), (27 + -17) ** (87 + -82)):\n    if i * i > n:\n        print((i-(61 + -60)) * (i-(74 + -73)))\n        exit()\n", "id": "ConstantUnfoldding_sample_from_s666154520_to_141", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = (35 + -35)\nfor i in s:\n    if i == \")\":\n        left += (83 + -82)\n    else:\n        break\n\nleft1 = (21 + -21)\nright1 = (65 + -65)\n\nfor i in range(left, n):\n    if s[i] == \"(\":\n        right1 += (95 + -94)\n    elif right1 > (25 + -25):\n        right1 -= (36 + -35)\n    else:\n        left1 += (48 + -47)\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s952876397_to_142", "old_id": "s952876397"}
{"code": "R = int(input())\nG = int(input())\nprint(G*(50 + -48)-R)\n", "id": "ConstantUnfoldding_sample_from_s151217193_to_143", "old_id": "s151217193"}
{"code": "import bisect\n\nN = int(input())\narr = [(80 + 31), (3 + 219), (100 + 233), (49 + 395), (99 + 456), (10 + 656), (70 + 707), (95 + 793), (56 + 943)]\nans_idx = bisect.bisect_left(arr, N)\nprint(arr[ans_idx])\n", "id": "ConstantUnfoldding_sample_from_s052231578_to_144", "old_id": "s052231578"}
{"code": "import numpy\nn = int(input())\na = []\nfor i in range((38 + -36)):\n    a.append(list(map(int, input().split())))\na[(1 + 0)] = a[(39 + -38)][::-(16 + -15)]\nres_0 = numpy.cumsum(a[(26 + -26)])\nres_1 = numpy.cumsum(a[(61 + -60)])\nans = (16 + -16)\nfor i in range(n):\n    check = res_0[i] + res_1[n-(46 + -45)-i]\n    ans = max(ans, check)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s146553386_to_145", "old_id": "s146553386"}
{"code": "N = int(input())\na = list(map(int, input().split()))\na.sort()\n\ns = [ai for ai in a[N::(84 + -82)]]\nprint(sum(s))\n", "id": "ConstantUnfoldding_sample_from_s913338871_to_146", "old_id": "s913338871"}
{"code": "n = int(input())\nprint(n**(29 + -26))\n", "id": "ConstantUnfoldding_sample_from_s454986054_to_147", "old_id": "s454986054"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[(85 + -85)]*T for _ in range(N+(79 + -78))]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][(22 + -22)]:\n            dp[i+(79 + -78)][j] = dp[i][j]\n        else:\n            dp[i+(2 + -1)][j] = max(dp[i][j], dp[i][j-L[i][(83 + -83)]]+L[i][(50 + -49)])\n\nused = []\nB = dp[N][T-(49 + -48)]\nj = T-(74 + -73)\nfor i in range(N-(6 + -5), -(21 + -20), -(82 + -81)):\n    if B == dp[i][j]:\n        continue\n    B -= L[i][(70 + -69)]\n    used.append(i)\n    j -= L[i][(20 + -20)]\n\nans = dp[N][T-(81 + -80)]\nc = (33 + -33)\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[i][(62 + -61)])\n\nprint(ans+c)\n", "id": "ConstantUnfoldding_sample_from_s793709854_to_148", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = (78 + -68)**(93 + -83)\nfor i in range((51 + 50)):\n    tmp = [abs(i - x[j])**(18 + -16) for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s246280701_to_149", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = (13 + -13)\nfor i in range(N-(47 + -45)):\n    for j in range(i+(96 + -95), N-(58 + -57)):\n        for k in range(j+(79 + -78), N):\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans += (32 + -31)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s590045523_to_150", "old_id": "s590045523"}
{"code": "import sys\nfrom collections import Counter, defaultdict\n\nINF = float('inf')\nMOD = (36 + -26) ** (78 + -69) + (24 + -17)\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (22 + -21) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return input()\n\n\ndef main():\n    n = II()\n    S = SI()\n    C = Counter(S)\n\n    return 'Yes' if C['R'] > n - C['R'] else 'No'\n\n\nprint(main())\n", "id": "ConstantUnfoldding_sample_from_s007458552_to_151", "old_id": "s007458552"}
{"code": "input = list(map(str, input().split()))\nnum = ''.join(input)\n\nif (int(num) % (58 + -54) == (83 + -83)):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_s554858080_to_152", "old_id": "s554858080"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nfor i in range(sqN):\n    if N % (sqN-i) == (57 + -57):\n        print(int(N/(sqN-i)+sqN-i)-(25 + -23))\n        break\n", "id": "ConstantUnfoldding_sample_from_s538657784_to_153", "old_id": "s538657784"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nbelow = (51 + -51)\nfor i in range(n):\n    below += (82 + -81)/a[i]\nprint((9 + -8)/below)\n", "id": "ConstantUnfoldding_sample_from_s001486412_to_154", "old_id": "s001486412"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-(25 + -24)])\nA = [(90 + -90)]+A+[(55 + -55)]\ndiff = [(24 + -24) for x in range(N)]\nfor i in range((57 + -56), N+(7 + -6)):\n    dif = abs(A[i]-A[i-(10 + -9)])+abs(A[i]-A[i+(7 + -6)])-abs(A[i-(85 + -84)]-A[i+(20 + -19)])\n    ans += abs(A[i]-A[i-(19 + -18)])\n    diff[i-(56 + -55)] = dif\n\nfor i in range(N):\n    print(ans-diff[i])\n", "id": "ConstantUnfoldding_sample_from_s242961129_to_155", "old_id": "s242961129"}
{"code": "s = list(str(input()))\ns.sort()\nif s[(25 + -25)] == s[(78 + -77)] and s[(51 + -51)] != s[(68 + -66)] and s[(13 + -11)] == s[(42 + -39)]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s896397037_to_156", "old_id": "s896397037"}
{"code": "A, B = map(int, input().split())\n\nif (A+B) % (56 + -54) == (85 + -84):\n    print('IMPOSSIBLE')\nelse:\n    print((A+B)//(97 + -95))\n", "id": "ConstantUnfoldding_sample_from_s423256012_to_157", "old_id": "s423256012"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = (75 + -75)\nmaxH = (50 + -50)\nfor H in Hs:\n    if maxH <= H:\n        ans += (37 + -36)\n        maxH = H\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s002779582_to_158", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = (89 + -89)\n\nfor i in range(h):\n    for j in range(w):\n        if l[i][j] == \"#\":\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n\n\nprint(\"Possible\")\n", "id": "ConstantUnfoldding_sample_from_s331817031_to_159", "old_id": "s331817031"}
{"code": "n = int(input())\n\nif n % (25 + 975) == (54 + -54):\n    print((6 + -6))\nelse:\n    print((5 + 995) - n % (97 + 903))\n", "id": "ConstantUnfoldding_sample_from_s355314304_to_160", "old_id": "s355314304"}
{"code": "def solver():\n    N = int(input())\n    action = []\n    for i in range(N):\n        action.append(list(map(int, input().split())))\n\n    dp = [[(42 + -42) for _ in range((33 + -30))] for _ in range(N)]\n\n    for i in range((49 + -46)):\n        dp[(64 + -64)][i] = action[(38 + -38)][i]\n\n    for i in range((12 + -11), N):\n        dp[i][(42 + -42)] = max(dp[i-(100 + -99)][(73 + -72)] + action[i][(19 + -19)], dp[i-(7 + -6)][(11 + -9)] + action[i][(8 + -8)])\n        dp[i][(24 + -23)] = max(dp[i-(63 + -62)][(44 + -44)] + action[i][(55 + -54)], dp[i-(95 + -94)][(6 + -4)] + action[i][(57 + -56)])\n        dp[i][(16 + -14)] = max(dp[i-(94 + -93)][(63 + -63)] + action[i][(33 + -31)], dp[i-(26 + -25)][(49 + -48)] + action[i][(22 + -20)])\n    print(max(dp[N-(56 + -55)]))\n\n\nsolver()\n", "id": "ConstantUnfoldding_sample_from_s210889193_to_161", "old_id": "s210889193"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[(29 + -28)], reverse=True)\nj = (95 + -95)\nfor i in range(n):\n    if a[i] < ope[j][(47 + -46)]:\n        a[i] = ope[j][(50 + -49)]\n        ope[j][(98 + -98)] -= (90 + -89)\n        if ope[j][(13 + -13)] == (90 + -90):\n            j += (61 + -60)\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "id": "ConstantUnfoldding_sample_from_s289483518_to_162", "old_id": "s289483518"}
{"code": "R = int(input())\n\nif R < (79 + 1121):\n    print(\"ABC\")\nelif R < (52 + 2748):\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "id": "ConstantUnfoldding_sample_from_s607161467_to_163", "old_id": "s607161467"}
{"code": "A, B = [int(x) for x in input().split()]\nif A < (42 + -32) and B < (84 + -74):\n    print(A*B)\nelse:\n    print(-(93 + -92))\n", "id": "ConstantUnfoldding_sample_from_s179314665_to_164", "old_id": "s179314665"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter((96 + -95)), reverse=True)\n\nselected = info[(82 + -82):k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = (88 + -87)\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = (30 + -29)\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-(8 + -7)]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += (10 + -9)\n    sum_select += unselected_only[-(34 + -33)]\n    sum_select -= selected_chohuku[-(95 + -94)]\n    del unselected_only[-(8 + -7)]\n    del selected_chohuku[-(74 + -73)]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s804484425_to_165", "old_id": "s804484425"}
{"code": "H = int(input())\n\ncount = (28 + -28)\n\n\ndef dfs(h):\n    if h == (56 + -55):\n        return (28 + -27)\n\n    return dfs(h // (71 + -69)) * (80 + -78) + (94 + -93)\n\n\nprint(dfs(H))\n", "id": "ConstantUnfoldding_sample_from_s661542483_to_166", "old_id": "s661542483"}
{"code": "A, B = map(int, input().split())\nS = list(input())\nif S[A] == '-' and S.count('-') == (26 + -25):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s013976107_to_167", "old_id": "s013976107"}
{"code": "n, k = map(int, input().split())\nif k % (5 + -3) == (9 + -8):\n    print((n//k)**(40 + -37))\nelse:\n    print((n//k)**(83 + -80)+((n+k//(97 + -95))//k)**(9 + -6))\n", "id": "ConstantUnfoldding_sample_from_s398580870_to_168", "old_id": "s398580870"}
