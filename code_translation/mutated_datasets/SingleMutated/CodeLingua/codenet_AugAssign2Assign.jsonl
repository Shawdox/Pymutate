{"code": "s = list(input())\nmods = [0]*(len(s))\ncountRemainder = [0] * 2019\ncnt = 0\n\n\nm = 1\nmod = 0\nfor i in range(len(s)):\n    mod = mod + int(s[len(s) - i - 1]) * m\n\n    mod = mod % 2019\n    m = m * 10\n    m = m % 2019\n\n    countRemainder[mod] = countRemainder[mod] + 1\n\ncountRemainder[0] = countRemainder[0] + 1\n\nfor i in range(2019):\n    cnt = cnt + int(countRemainder[i] * (countRemainder[i] - 1) / 2)\n\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s752993784_to_0", "old_id": "s752993784"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = 0\n    for j in range(len(t)):\n        if j == p-1:\n            s = s + x\n        else:\n            s = s + t[j]\n    print(s)\n", "id": "AugAssign2Assign_sample_from_s609392609_to_1", "old_id": "s609392609"}
{"code": "N, M = map(int, input().split())\n*A, = map(int, input().split())\nA = sorted(A)\n\nwhile M:\n    A[-1] = A[-1] // 2\n    M = M - 1\n    i = -2\n    while M and (-N <= i and A[i] >= A[-1]):\n        A[i] = A[i] // 2\n        M = M - 1\n        i = i - 1\n    A.sort()\n\nprint(sum(A))\n", "id": "AugAssign2Assign_sample_from_s546174362_to_2", "old_id": "s546174362"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    for i, j in zip(a, b):\n        s = s + i != j\n    return s\n\n\nans = 10**6\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s636719275_to_3", "old_id": "s636719275"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[0] == 1:\n\n        a, b = t[1:]\n        const = const + b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum = left_sum + a\n                cnt = cnt + 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum = right_sum - c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum = left_sum + a\n                right_sum = right_sum + c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum = left_sum + c\n                right_sum = right_sum + a\n        else:\n            c = heapq.heappop(left)\n            left_sum = left_sum + c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum = left_sum + a\n                right_sum = right_sum - c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum = left_sum - c\n                right_sum = right_sum + a\n        cnt = cnt + 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n", "id": "AugAssign2Assign_sample_from_s016605598_to_4", "old_id": "s016605598"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    temp_score = 0\n    for q in Q_groups:\n        if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n            temp_score = temp_score + q[3]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "id": "AugAssign2Assign_sample_from_s269975433_to_5", "old_id": "s269975433"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\n\nfor i in range(N - 1, -1, -1):\n    tmp_sum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        tmp_sum = tmp_sum + B[j]\n        tmp_sum = tmp_sum % 2\n    B[i] = tmp_sum ^ A[i]\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "id": "AugAssign2Assign_sample_from_s103029464_to_6", "old_id": "s103029464"}
{"code": "N = int(input())\ncnt = 1\nwhile cnt <= 9:\n    if N % cnt == 0 and 1 <= N/cnt <= 9:\n        print('Yes')\n        break\n    else:\n        cnt = cnt + 1\nelse:\n    print('No')\n", "id": "AugAssign2Assign_sample_from_s018260659_to_7", "old_id": "s018260659"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i = t_i + 1\n        else:\n            break\n\n        first = first - 1\n        end = end - 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i = t_i + 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "id": "AugAssign2Assign_sample_from_s826716211_to_8", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([int(x) for x in input().split()])\n\nc = 0\nfor i in range(len(mat)-1):\n    for j in range(i+1, len(mat)):\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist:\n            c = c + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_s663509070_to_9", "old_id": "s663509070"}
{"code": "n = int(input())\nh = int(n / 3600)\nn = n % 3600\nm = int(n / 60)\nn = n % 60\ns = int(n)\nprint(str(h) + \":\" + str(m) + \":\" + str(s))\n", "id": "AugAssign2Assign_sample_from_s451465602_to_10", "old_id": "s451465602"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nfor i in range(2**(h+w)):\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0':\n                ct = ct + 1\n    if ct == ka:\n        ans = ans + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s760938927_to_11", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[0] == '1':\n        n = not n\n    if operation[0] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right = right + c\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "AugAssign2Assign_sample_from_s621701371_to_12", "old_id": "s621701371"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n = n + li[i] * base\n        base = base * 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r = r * m\n            m = m - 1\n            n = n - 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "id": "AugAssign2Assign_sample_from_s137613418_to_13", "old_id": "s137613418"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = 1\nfor i in A:\n    B[i-1] = count\n    count = count + 1\n\n\nprint(*B)\n", "id": "AugAssign2Assign_sample_from_s273727373_to_14", "old_id": "s273727373"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans = ans - 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s922746568_to_15", "old_id": "s922746568"}
{"code": "h, a = map(int, input().strip().split())\n\nans = h // a\nama = h % a\n\nif ama != 0:\n    ans = ans + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s267172486_to_16", "old_id": "s267172486"}
{"code": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst = lst + ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        tmp_cnt = tmp_cnt + 1\n    else:\n        cnt = cnt + sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s430322735_to_17", "old_id": "s430322735"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n\n    if D[0] != 0:\n        print(0)\n        return\n\n    cnt = Counter(D)\n\n    if cnt[0] > 1:\n        print(0)\n        return\n\n    res = 1\n\n    for i in range(1, max(D)+1):\n        if cnt[i-1] == 1:\n            continue\n        res = res * cnt[i-1]**cnt[i] % mod\n        res = res % mod\n\n    print(res)\n\n\nsolve()\n", "id": "AugAssign2Assign_sample_from_s534639230_to_18", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a = a // 2\n        cnt = cnt + 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s817205687_to_19", "old_id": "s817205687"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(N):\n    d = min(A[i], B[i])\n    ans = ans + d\n    A[i] = A[i] - d\n    B[i] = B[i] - d\n    d = min(A[i + 1], B[i])\n    ans = ans + d\n    A[i + 1] = A[i + 1] - d\n    B[i] = B[i] - d\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s287369394_to_20", "old_id": "s287369394"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k = k + self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p = p + self.size-1\n            q = q + self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q = q - 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] = ans[num-1] * i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] = ans[num-1] * i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "AugAssign2Assign_sample_from_s764169243_to_21", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        count = count + 1\n    else:\n        if count > record:\n            record = count\n        count = 0\nif count > record:\n    record = count\n\nprint(record)\n", "id": "AugAssign2Assign_sample_from_s993625131_to_22", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if i == S[-1] or i == S[0]:\n        ans = ans + 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans = ans + 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s315467749_to_23", "old_id": "s315467749"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans = ans + 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s031459110_to_24", "old_id": "s031459110"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+1):\n    S_2 = S[i:i+M]\n    cnt = 0\n    for j in range(M):\n        if T[j] != S_2[j]:\n            cnt = cnt + 1\n    ans = min(ans, cnt)\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s838619850_to_25", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] = sdic[s] + 1\n        else:\n            sdic[s] = 1\n    ans = 0\n    for k, v in sdic.items():\n        ans = ans + v*(v-1)//2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AugAssign2Assign_sample_from_s733189960_to_26", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nfor _ in range(n):\n    x, u = list(input().split())\n    if u == \"BTC\":\n        res = res + float(x) * 380000\n    else:\n        res = res + int(x)\nprint(res)\n", "id": "AugAssign2Assign_sample_from_s238775098_to_27", "old_id": "s238775098"}
{"code": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = 1, 1, 1\n\nwhile x**2 + y**2 + z**2 + x*y + y*z + z*x <= n:\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n            i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x\n            A[i - 1] = A[i - 1] + 1\n            z = z + 1\n        z = 1\n        y = y + 1\n    y, z = 1, 1\n    x = x + 1\nfor i in range(n):\n    print(int(A[i]))\n", "id": "AugAssign2Assign_sample_from_s827462150_to_28", "old_id": "s827462150"}
{"code": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append(0)\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[AA[j] - 1] = 1\n\nn = 0\nfor i in range(N):\n    if A[i] == 0:\n        n = n + 1\nprint(n)\n", "id": "AugAssign2Assign_sample_from_s225521100_to_29", "old_id": "s225521100"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count = count + bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "AugAssign2Assign_sample_from_s975943078_to_30", "old_id": "s975943078"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        continue\n\n    else:\n        cnt = cnt + 1\n\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s869207096_to_31", "old_id": "s869207096"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nfor i in range(n):\n    sum = sum + int(l[i])\n    if max < int(l[i]):\n        max = int(l[i])\n    if min > int(l[i]):\n        min = int(l[i])\nprint(min, max, sum)\n", "id": "AugAssign2Assign_sample_from_s704354119_to_32", "old_id": "s704354119"}
{"code": "A, B, K = map(int, input().split())\nif A+K-1 >= B-K+1:\n    while A <= B:\n        print(A)\n        A = A + 1\nelse:\n    i = 0\n    while i <= K-1:\n        print(A+i)\n        i = i + 1\n    while B-K+1 <= B:\n        print(B-K+1)\n        K = K - 1\n", "id": "AugAssign2Assign_sample_from_s357377130_to_33", "old_id": "s357377130"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N):\n    tmp = a[i - 1] + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt = cnt + tmp - x\n\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s708549466_to_34", "old_id": "s708549466"}
{"code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[s] = 1\n    else:\n        arr[s] = arr[s] + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "id": "AugAssign2Assign_sample_from_s622795537_to_35", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = 0\n\nfor i in range(n):\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    for w in x:\n        if w in y:\n            z = z + 1\n    if z > ans:\n        ans = z\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s232279435_to_36", "old_id": "s232279435"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nfor i in range(N):\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] = m[b-1][f-1][r-1] + v\n\nfor i in range(4):\n    for j in range(3):\n        for k in range(10):\n            line = line + ' {0}'.format(m[i][j][k])\n        print(line)\n        line = ''\n    if i < 3:\n        print('#'*20)\n", "id": "AugAssign2Assign_sample_from_s067092519_to_37", "old_id": "s067092519"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-1][r-1] = train[l-1][r-1] + 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v = v + train[i][j]\n            temp.append(accum[-1][j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AugAssign2Assign_sample_from_s048491063_to_38", "old_id": "s048491063"}
{"code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n = n / i\n            table.append(int(i))\n        i = i + 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print('Heisei')\nelse:\n    print('TBD')\n", "id": "AugAssign2Assign_sample_from_s086522214_to_39", "old_id": "s086522214"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] = self.rank[y] + 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now = now * b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] = A[a] % mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z = z // x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i = i + 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s = s + A[a]\n        if (a < n-1):\n            s = s + c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n = n // b\n            list_.append(b)\n        b = b + 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] = dic[a] + 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "AugAssign2Assign_sample_from_s977408144_to_40", "old_id": "s977408144"}
{"code": "n, a, b = map(int, input().split())\nans = n//(a+b)*a\nr = min(n % (a+b), a)\nans = ans + r\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s615966179_to_41", "old_id": "s615966179"}
{"code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = 0\nfor i in mo:\n    if i[1] == \"JPY\":\n        okz = okz + i[0]\n    else:\n        okz = okz + i[0]*380000\n\nprint(okz)\n", "id": "AugAssign2Assign_sample_from_s554393427_to_42", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = 0\nfor i in range(N // R + 1):\n    for j in range((N-i * R) // G + 1):\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0:\n            score = score + 1\n\nprint(score)\n", "id": "AugAssign2Assign_sample_from_s897879131_to_43", "old_id": "s897879131"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nfor i in range(1, N+1):\n    if col[i] < 0:\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            for y in G[x]:\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n        cnt = cnt + 1\ncmax = max(col)\nprint(cmax)\n", "id": "AugAssign2Assign_sample_from_s233116196_to_44", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate = highLate + 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "AugAssign2Assign_sample_from_s964794058_to_45", "old_id": "s964794058"}
{"code": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nfor s in S:\n    if s != tmp:\n        ans = ans + 1\n        tmp = s\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s174910557_to_46", "old_id": "s174910557"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae = mae + 1\n    usiro = usiro + 1\n", "id": "AugAssign2Assign_sample_from_s182651529_to_47", "old_id": "s182651529"}
{"code": "n = int(input())\nr = 0\nfor ii in range(n):\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0:\n        r = r + (ii+1)\nprint(r)\n", "id": "AugAssign2Assign_sample_from_s702834515_to_48", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans = ans + t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AugAssign2Assign_sample_from_s664563518_to_49", "old_id": "s664563518"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if H[i] >= H[i+1]:\n        count_tmp = count_tmp + 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "AugAssign2Assign_sample_from_s895229833_to_50", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nfor i in range(10):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range(10):\n    if i == 1:\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n\ns = 0\nfor a in chain.from_iterable(A):\n    if a == -1 or a == 1:\n        continue\n    s = s + d[a]\nprint(s)\n", "id": "AugAssign2Assign_sample_from_s749244504_to_51", "old_id": "s749244504"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count = count + 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "AugAssign2Assign_sample_from_s763097776_to_52", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\n\nfor i in range(1, 2**10):\n    tmp = 0\n    lst = [0]*n\n    for j in range(10):\n        if (i >> j) & 1:\n            for k in range(n):\n                lst[k] = lst[k] + F[k][j]\n    for k in range(n):\n        tmp = tmp + P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s906994739_to_53", "old_id": "s906994739"}
{"code": "from math import factorial as f\n\nN = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndivs = []\nfor i in range(1, 101):\n    tmp = [0 for _ in range(len(primes))]\n    for j in range(len(primes)):\n        p = primes[j]\n        tmp[j] = 0\n        while (i//p == i/p):\n            i = i//p\n            tmp[j] = tmp[j] + 1\n    divs.append(tmp)\n\n\ndivsum = [0 for _ in range(len(primes))]\nfor i in range(1, N+1):\n    for j in range(len(primes)):\n        divsum[j] = divsum[j] + divs[i-1][j]\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-1, divsum)))\n\n\nans = 0\n\n\nans = ans + num(75)\n\n\nans = ans + num(15)*(num(5)-1)\n\n\nans = ans + num(25)*(num(3)-1)\n\n\nans = ans + num(5) * (num(5)-1) * (num(3)-2) // 2\nprint(int(ans))\n", "id": "AugAssign2Assign_sample_from_s259116349_to_54", "old_id": "s259116349"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range(1 << d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n\n    for i in range(d):\n        if bit & (1 << i):\n            sum = sum + pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count = count + pc[i][0]\n            nokori.discard(i + 1)\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count = count + n\n        sum = sum + n * use * 100\n\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s591424993_to_55", "old_id": "s591424993"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if i == \")\":\n        left = left + 1\n    else:\n        break\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if s[i] == \"(\":\n        right1 = right1 + 1\n    elif right1 > 0:\n        right1 = right1 - 1\n    else:\n        left1 = left1 + 1\n\nleft1 = left1 + left\nfor i in range(right1):\n    s = s + \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "id": "AugAssign2Assign_sample_from_s952876397_to_56", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][0]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n\nused = []\nB = dp[N][T-1]\nj = T-1\nfor i in range(N-1, -1, -1):\n    if B == dp[i][j]:\n        continue\n    B = B - L[i][1]\n    used.append(i)\n    j = j - L[i][0]\n\nans = dp[N][T-1]\nc = 0\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n\nprint(ans+c)\n", "id": "AugAssign2Assign_sample_from_s793709854_to_57", "old_id": "s793709854"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        for k in range(j+1, N):\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans = ans + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s590045523_to_58", "old_id": "s590045523"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nbelow = 0\nfor i in range(n):\n    below = below + 1/a[i]\nprint(1/below)\n", "id": "AugAssign2Assign_sample_from_s001486412_to_59", "old_id": "s001486412"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-1])\nA = [0]+A+[0]\ndiff = [0 for x in range(N)]\nfor i in range(1, N+1):\n    dif = abs(A[i]-A[i-1])+abs(A[i]-A[i+1])-abs(A[i-1]-A[i+1])\n    ans = ans + abs(A[i]-A[i-1])\n    diff[i-1] = dif\n\nfor i in range(N):\n    print(ans-diff[i])\n", "id": "AugAssign2Assign_sample_from_s242961129_to_60", "old_id": "s242961129"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nfor H in Hs:\n    if maxH <= H:\n        ans = ans + 1\n        maxH = H\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s002779582_to_61", "old_id": "s002779582"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nfor i in range(n):\n    if a[i] < ope[j][1]:\n        a[i] = ope[j][1]\n        ope[j][0] = ope[j][0] - 1\n        if ope[j][0] == 0:\n            j = j + 1\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "id": "AugAssign2Assign_sample_from_s289483518_to_62", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type = cnt_type + 1\n    sum_select = sum_select + unselected_only[-1]\n    sum_select = sum_select - selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s804484425_to_63", "old_id": "s804484425"}
