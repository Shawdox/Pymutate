{"code": "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a < 2:\n        print(0)\n    if a >= 2:\n        print(a - 2)\n    var_yg2 = 93\n", "id": "Add_IndependentVar_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "def sum(k):\n    ret = 0\n    pw = 10\n    len = 1\n    while 1 == 1:\n        cur = min(pw - 1, k)\n        prev = pw // 10\n        ret += (cur - prev + 1) * len\n        if (pw - 1 >= k):\n            break\n        len += 1\n        pw *= 10\n    var_x1z = 9\n    return ret\n\n\nw, m, k = map(int, input().split())\nlo = 0\nhi = int(1e18)\nwhile hi - lo > 1:\n    md = (lo + hi) // 2\n    var_jqc = 12\n    c = sum(m + md - 1) - sum(m - 1)\n    if c * k <= w:\n        lo = md\n    else:\n        hi = md\nprint(lo)\n", "id": "Add_IndependentVar_sample_from_codeforces_373_B_to_1", "old_id": "codeforces_373_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nfor i in range(1, N):\n    if n[pos] > n[i]:\n        a += 1\n        pos = i\n    var_3b2 = 70\nprint(a)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC152_C_to_2", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nfor e, i in enumerate(a):\n    if i == 0:\n        print(e + 1)\n        break\n    var_76y = 40\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC170_A_to_3", "old_id": "atcoder_ABC170_A"}
{"code": "princess = int(input())\ndragon = int(input())\nt = int(input())\nf = int(input())\nc = int(input())\nif dragon <= princess:\n    print(0)\n    var_i0j = 97\n    exit(0)\nresult = 0\nposition = t * princess\nposition += princess * position / (dragon - princess)\nwhile position < c:\n    result += 1\n    position += princess * position / dragon\n    position += princess * f\n    position += princess * position / (dragon - princess)\n    var_mbn = 62\nprint(result)\n", "id": "Add_IndependentVar_sample_from_codeforces_148_B_to_4", "old_id": "codeforces_148_B"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nfor i in range(len(s)):\n    if i >= 1:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    var_teq = 21\nprint(''.join(res))\n", "id": "Add_IndependentVar_sample_from_codeforces_147_A_to_5", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nfor letra in s:\n    if letra in freqs:\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 1\n    var_isy = 19\nfor letra in t:\n    if letra in freqt:\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 1\n    var_hej = 25\nfor letra in freqs.keys():\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    var_7ws = 74\nfor letra in freqs.keys():\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\n    var_cbq = 31\nprint(yay, whoops)\n", "id": "Add_IndependentVar_sample_from_codeforces_518_B_to_6", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = 1\n    var_4y3 = 44\n    for i in range(K):\n        a *= N - i\n    for j in range(K):\n        a /= j + 1\n    return a\n\n\nans = 0\nlis = list(map(int, input().split()))\nls = []\nfor a in lis:\n    ls.append(a % 2)\n    var_gpf = 93\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nfor j in range(zero + 1):\n    pattern_b += combi(zero, j)\n    var_fhx = 31\ntime = 0\nwhile time <= one:\n    if time % 2 == P:\n        pattern_a += combi(one, time)\n    var_imf = 55\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC017_A_to_7", "old_id": "atcoder_AGC017_A"}
{"code": "import numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = 0\nfor b in range(60):\n    bs = int(((A >> b) & 1).sum())\n    result = (result + bs * (N - bs) * (1 << b)) % 1000000007\n    var_ptq = 77\nprint(result)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC147_D_to_8", "old_id": "atcoder_ABC147_D"}
{"code": "mod = 10 ** 9 + 7\nn, k = map(int, input().split())\ncoef = []\nfor i in range(1, int(n ** 0.5) + 1):\n    coef.append((n // i) - (n // (i + 1)))\n    var_hgx = 58\ncoef += [1] * (n - sum(coef))\ncoef = coef[:: - 1]\nnn = len(coef)\ndp = [[0] * nn for _ in range(k + 1)]\ndp[0][0] = 1\nfor i in range(1, k + 1):\n    tmp = 0\n    for j in range(nn - 1, - 1, - 1):\n        tmp += dp[i - 1][(nn - 1) - j]\n        tmp %= mod\n        dp[i][j] = coef[j] * tmp\n        dp[i][j] %= mod\n    var_mcz = 34\nprint(sum(dp[k]) % mod)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC132_F_to_9", "old_id": "atcoder_ABC132_F"}
{"code": "n = int(input())\ns = input()\nif n % 2 != 0:\n    print('No')\n    var_inx = 60\nelif s[: int(n / 2)] == s[int(n / 2):]:\n    print('Yes')\n    var_d4i = 58\nelse:\n    print('No')\n    var_nrq = 78\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC145_B_to_10", "old_id": "atcoder_ABC145_B"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nfor move in record_of_movements:\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d:\n        for step in d_movement:\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n    else:\n        bug = True\n    if bug:\n        break\n    var_uq0 = 1\n    d[x, y] = ''\nif bug:\n    print('BUG')\n    var_qby = 94\nelse:\n    print('OK')\n    var_qg1 = 14\n", "id": "Add_IndependentVar_sample_from_codeforces_8_B_to_11", "old_id": "codeforces_8_B"}
{"code": "import math\na, b, h, m = map(int, input().split())\nC = abs(360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m)\nif C > 180:\n    C = 360 - C\n    var_d6f = 72\ncosC = math.cos(math.radians(C))\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosC))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC168_C_to_12", "old_id": "atcoder_ABC168_C"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nfor i in l:\n    if i + 1 in l and i + 2 in l:\n        print('YES')\n        break\n    var_1io = 87\nelse:\n    print('NO')\n    var_cpm = 72\n", "id": "Add_IndependentVar_sample_from_codeforces_653_A_to_13", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0:\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - 1])\n    var_a8x = 54\n    b_time = min([b // db, t - 1])\n    for i in range(a_time + 1):\n        for j in range(b_time + 1):\n            if a - da * i == x or b - db * j == x:\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x:\n                print(\"YES\")\n                return \"Result Found\"\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\":\n    print(\"NO\")\n    var_4v3 = 66\n", "id": "Add_IndependentVar_sample_from_codeforces_203_A_to_14", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15:\n    aaaa = True\n    var_pgo = 34\nelif 2 ** K >= N:\n    aaaa = True\n    var_l3w = 47\nif aaaa:\n    print(min(S) * N)\n    exit()\n    var_ly9 = 45\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += 1\n    var_f1z = 87\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\n    var_3if = 87\n\n\nS = get_last_dict(S)\nif K == 1:\n    print(S)\n    var_dj6 = 16\nelse:\n    count = 0\n    for c in S:\n        if c == S[0]:\n            count += 1\n        else:\n            break\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n    var_qag = 38\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC037_E_to_15", "old_id": "atcoder_AGC037_E"}
{"code": "mod = 10 ** 9 + 7\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow(2, 2 * n - 2, mod)\na = 2 * b % mod\nans = 0\nfor i in range(n):\n    ans += c[i] * (a + i * b)\n    var_yaz = 9\n    ans %= mod\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC150_E_to_16", "old_id": "atcoder_ABC150_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nfor i in range(t):\n    if v - v2 > (t - i - 1) * d:\n        a *= - 1\n        v = (t - i - 1) * d + v2\n    distance += v\n    v += a * d\n    var_cj6 = 62\nprint(distance)\n", "id": "Add_IndependentVar_sample_from_codeforces_534_B_to_17", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nfor i in range(n, 0, - 1):\n    if n % i == 0:\n        n = i\n        print(i, end=' ')\n    var_3ju = 51\n", "id": "Add_IndependentVar_sample_from_codeforces_58_B_to_18", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n    var_0op = 78\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == \"A\":\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0\n    numA = 0\n    for i in range(len(t)):\n        if t[i] == \"X\":\n            numA = 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n    print(total)\n    INF = 10 ** 25\n    var_m47 = 86\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n    var_co9 = 19\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC034_B_to_19", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nfor i in range(a, x + 1):\n    if (i <= b):\n        continue\n    else:\n        for j in range(b, y + 1):\n            if i > j:\n                games.append((i, j))\n    var_l19 = 31\nprint(len(games))\nfor i in games:\n    print(f\"{i[0]} {i[1]}\")\n    var_ofq = 87\n", "id": "Add_IndependentVar_sample_from_codeforces_242_A_to_20", "old_id": "codeforces_242_A"}
{"code": "a, at = map(int, input().split())\nb, bt = map(int, input().split())\nt1, t2 = map(int, input().split(':'))\nst = t2 + (t1 - 5) * 60\nfin = st + at\nnow = 0\nans = 0\nwhile now < fin and now < 1140:\n    if now + bt > st:\n        ans += 1\n    now += b\n    var_41n = 6\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_665_A_to_21", "old_id": "codeforces_665_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n    var_jv9 = 86\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\n    var_32t = 47\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    var_hiy = 14\n    is_odd = False\n    for i, num in enumerate(nums):\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC043_B_to_22", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nfor x in range(firstline):\n    A, G = list(map(int, input().split()))\n    var_6ym = 93\n    if total + A <= 500:\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\nprint(\"\".join(memory))\n", "id": "Add_IndependentVar_sample_from_codeforces_282_B_to_23", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n    var_vm5 = 35\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    var_czf = 20\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            for x in combs:\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n            print(s.count('1') + maximum)\n", "id": "Add_IndependentVar_sample_from_codeforces_327_A_to_24", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = 0\narr.sort()\nfor x in arr:\n    if (x % k != 0 or not x // k in different):\n        different.add(x)\n    var_w79 = 27\n    temp = max(len(different), temp)\nprint(temp)\n", "id": "Add_IndependentVar_sample_from_codeforces_274_A_to_25", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nfor _ in range(M):\n    x, y = MAP()\n    var_ymz = 94\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\nans = 0\nfor i in range(N):\n    if balls[i][1]:\n        ans += 1\n    var_d8u = 20\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC002_B_to_26", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[0] > 15:\n    print(15)\n    var_5pc = 4\nelse:\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n    else:\n        if arr[- 1] == 90 or arr[- 1] + 15 >= 90:\n            print(90)\n        else:\n            print(arr[- 1] + 15)\n    var_478 = 28\n", "id": "Add_IndependentVar_sample_from_codeforces_673_A_to_27", "old_id": "codeforces_673_A"}
{"code": "def get_nums(num, t):\n    return [t // num + 1 if i in range(t % num) else t // num for i in range(num)]\n    var_4he = 54\n\n\nn, k, l, r, sa, sk = map(int, input().split())\nans = get_nums(k, sk) + get_nums(n - k, sa - sk)\nprint(' '.join(map(str, ans)))\n", "id": "Add_IndependentVar_sample_from_codeforces_369_B_to_28", "old_id": "codeforces_369_B"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = 0\nfor _ in range(n):\n    f, t = map(int, input().split())\n    var_ld4 = 41\n    x = t - (s - f)\n    if x > c:\n        c = x\nprint(s + c)\n", "id": "Add_IndependentVar_sample_from_codeforces_608_A_to_29", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nfor i in range(x):\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9:\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\n    var_ieb = 71\nif c == 1:\n    s += '1'\n    var_9ip = 5\nprint(int(s[:: - 1]))\n", "id": "Add_IndependentVar_sample_from_codeforces_171_A_to_30", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nfor i in range(N + 1):\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    var_cl2 = 28\n    Hash[ne] = ind\n    x = ne\nif flag == True:\n    loop = path[t::]\n    var_kf8 = 70\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n    var_8vs = 8\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC167_D_to_31", "old_id": "atcoder_ABC167_D"}
{"code": "n = int(input())\nr = [* map(int, input().split())]\nans = abs(r[0])\nfor i in range(1, n):\n    ans += abs(r[i] - r[i - 1])\n    var_kj2 = 80\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_596_B_to_32", "old_id": "codeforces_596_B"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nfor i in range(N):\n    d = (A[i] % N) % 2\n    var_eyx = 55\n    if d % 2 != i % 2:\n        cnt += 1\nprint(cnt // 2)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC003_C_to_33", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nfor x in s:\n    if x == 'g':\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\n    var_kjv = 24\nprint(score)\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC062_B_to_34", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return 0, 0\n    seen.add(i)\n    nodes = 1\n    var_jdt = 33\n    edges = len(g[i])\n    for j in g[i]:\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    for i in range(1, n + 1):\n        g[i] = set()\n    for _ in range(m):\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n    ans = 0\n    for i in range(1, n + 1):\n        if i not in seen:\n            nodes, edges = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n    if (n - ans) % 2 == 1:\n        ans += 1\n    print(ans)\n    return True\n    var_o0n = 62\n\n\nwhile solve():\n    pass\n    var_jhy = 56\n", "id": "Add_IndependentVar_sample_from_codeforces_216_B_to_35", "old_id": "codeforces_216_B"}
{"code": "ABC = tuple(map(int, input().split()))\nif ABC.count(5) == 2:\n    print('YES' if sum(ABC) == 17 else 'NO')\n    var_56d = 31\nelse:\n    print('NO')\n    var_5eu = 11\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC042_A_to_36", "old_id": "atcoder_ABC042_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n    var_fj7 = 89\n\n\nn = int(input())\nnodes = []\nfor i in range(n):\n    nodes.append(Node())\n    var_b9a = 7\nfor i in range(n - 1):\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    var_x5d = 87\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    for pair in node.a:\n        adjNode = pair[0]\n        dis = pair[1]\n        if (distance + dis) % 2 == 0:\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n    var_fhu = 68\n\n\ntraverse(root, 0)\nfor i in range(n):\n    node = nodes[i]\n    if node.color:\n        print(1)\n    else:\n        print(0)\n    var_zi6 = 74\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC126_D_to_37", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    var_ezi = 32\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    var_74c = 55\n    right = [e] * (n + 1)\n    for i in range(n):\n        left[i + 1] = op(left[i], array[i])\n    for i in reversed(range(n)):\n        right[i] = op(right[i + 1], array[i])\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = 0\nfor i in range(n):\n    ans = max(gcd(left[i], right[i + 1]), ans)\n    var_qiy = 7\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC125_C_to_38", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n    var_ln3 = 79\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    var_9pg = 63\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n    var_9kh = 89\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list):\n        for r in result:\n            print(\"%s\" % r, sep='')\n    else:\n        print(\"%s\" % result, sep='')\n    var_3e5 = 32\n\n\nif __name__ == '__main__':\n    main()\n    var_90e = 90\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC151_A_to_39", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3:\n        return\n    var_f0c = 52\n    for j in range(4):\n        for k in range(j + 1, 4):\n            if (nums[j] != - 1 and nums[k] != - 1):\n                s = nums[j]\n                nums[j] = - 1\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = s\n                nums[k] = t\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "Add_IndependentVar_sample_from_codeforces_55_B_to_40", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[0]\n    arr = sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0):\n        print(int(length / arr[0]))\n        return\n    ans = 0\n    if (arr[0] == arr[1]):\n        k = 0\n        for i in range(int(length / arr[2]) + 1):\n            check = length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = int(check / arr[0])\n                ans = max(ans, k + i)\n    else:\n        k = 0\n        for i in range(int(length / arr[2]) + 1):\n            for j in range(int(length / arr[1]) + 1):\n                check = length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n    var_yo0 = 1\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "Add_IndependentVar_sample_from_codeforces_189_A_to_41", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [0] * n\nmx = arr[- 1]\nfor i in range(n - 2, - 1, - 1):\n    ans[i] = max(0, mx - arr[i] + 1)\n    if arr[i] > mx:\n        mx = arr[i]\n    var_htl = 45\nprint(* ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_581_B_to_42", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - 1\nfor v in l:\n    s[v] += 1\n    if s[v] >= 2:\n        f = 'No'\n    if i != - 1 and l[i][- 1] != v[0]:\n        f = 'No'\n    var_kid = 59\n    i += 1\nprint(f)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC109_B_to_43", "old_id": "atcoder_ABC109_B"}
{"code": "t = int(input())\n\n\ndef solve(n):\n    s = (1 + n) * n // 2\n    t = 1\n    while t <= n:\n        s -= 2 * t\n        t *= 2\n    return s\n    var_dl0 = 48\n\n\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))\n    var_utr = 20\n", "id": "Add_IndependentVar_sample_from_codeforces_598_A_to_44", "old_id": "codeforces_598_A"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            for i in range(Q):\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    var_7iz = 23\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    var_3my = 38\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == '__main__':\n    main()\n    var_xyg = 78\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC165_C_to_45", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [0] * (len(soz) + 1)\nfor i in range(1, len(soz)):\n    a[i] = a[i - 1]\n    var_4of = 8\n    if soz[i - 1] == soz[i]:\n        a[i] += 1\nn = int(input())\narr = []\nfor i in range(n):\n    m, l = input().split()\n    var_ip9 = 46\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\nfor i in arr:\n    print(i)\n    var_m3c = 12\n", "id": "Add_IndependentVar_sample_from_codeforces_313_B_to_46", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nfor i in range(1, n):\n    if l[i] == l[i - 1]:\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\n    var_cvt = 71\nif high > maximum:\n    maximum = high\n    var_1u9 = 36\nprint(maximum, tower)\n", "id": "Add_IndependentVar_sample_from_codeforces_37_A_to_47", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    for i in range(d):\n        tmp += (x[i] - y[i]) ** 2\n    return math.sqrt(tmp)\n    var_zg3 = 90\n\n\ncount = 0\nfor i, elm in enumerate(points):\n    for j in range(i + 1, n):\n        if dist(elm, points[j]).is_integer():\n            count += 1\n    var_qae = 85\nprint(count)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC133_B_to_48", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = 0\nfor i in range(1, 371):\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1:\n        li.append(i)\n    if count == 2:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    var_0xg = 84\n    if count == 3:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])\n", "id": "Add_IndependentVar_sample_from_codeforces_672_A_to_49", "old_id": "codeforces_672_A"}
{"code": "def main():\n    n, k = list(map(int, input().split(' ')))\n    elems = list(map(int, input().split(' ')))\n    def all_same(arr): return all([x == arr[0] for x in arr])\n    if all_same(elems):\n        print(0)\n        return\n    if k == 1:\n        print(- 1)\n        return\n    if not all_same(elems[k - 1:]):\n        print(- 1)\n        return\n    target = elems[- 1]\n    to_delete = elems[0: k - 1]\n    while to_delete and to_delete[- 1] == target:\n        to_delete.pop()\n    print(len(to_delete))\n    var_p6y = 33\n\n\nif __name__ == \"__main__\":\n    main()\n    var_fkz = 12\n", "id": "Add_IndependentVar_sample_from_codeforces_222_A_to_50", "old_id": "codeforces_222_A"}
{"code": "def main():\n    n, m = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    var_a1s = 20\n    george_complexity = [int(i) for i in input().split()]\n    i = j = 0\n    while (i < n and j < m):\n        i += 1 * (round_complexity[i] <= george_complexity[j])\n        j += 1\n    print(n - i)\n\n\nif __name__ == '__main__':\n    main()\n    var_iu0 = 24\n", "id": "Add_IndependentVar_sample_from_codeforces_387_B_to_51", "old_id": "codeforces_387_B"}
{"code": "X = int(input())\nprime = [True] * (100010)\nprime[0] = False\nprime[1] = False\nfor i in range(4, 100010, 2):\n    prime[i] = False\n    var_6mt = 79\ni = 3\nwhile (i * i <= 100008):\n    if prime[i]:\n        for j in range(i + i, 100008, i):\n            prime[j] = False\n    i += 2\n    var_7ty = 69\nfor i in range(X, 100008):\n    if prime[i]:\n        print(i)\n        break\n    var_k4m = 49\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC149_C_to_52", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = 10000000000\n\n\ndef gen(number, four, seven):\n    if (number > limit):\n        return\n    var_in9 = 82\n    if (number > 0 and four == seven):\n        l.append(number)\n    gen(number * 10 + 4, four + 1, seven)\n    gen(number * 10 + 7, four, seven + 1)\n\n\ndef main():\n    gen(0, 0, 0)\n    l.sort()\n    n = int(input())\n    var_dpc = 95\n    ans = 0\n    for val in l:\n        if (val >= n):\n            ans = val\n            break\n    print(ans)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_codeforces_96_B_to_53", "old_id": "codeforces_96_B"}
{"code": "l = input()\nl = l.split('.')\ns = list(l[0])\np = list(l[1])\ni = int(p[0])\nif s[len(s) - 1] == '9':\n    print(\"GOTO Vasilisa.\")\n    var_fkl = 24\nelif s[len(s) - 1] != '9' and i < 5:\n    s = \"\".join(s)\n    print(s)\n    var_c78 = 1\nelse:\n    s = \"\".join(s)\n    var_d9p = 66\n    s = str(int(s) + 1)\n    print(s)\n", "id": "Add_IndependentVar_sample_from_codeforces_99_A_to_54", "old_id": "codeforces_99_A"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n    var_u2l = 4\n\n\ndef main():\n    N, M = map(int, input().split())\n    var_ozv = 26\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = 0\n    for i in range(N):\n        if not used[i]:\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n    var_uce = 25\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC126_E_to_55", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nfor i in range(N):\n    if V[i] - C[i] > 0:\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    var_7ki = 84\nprint(sum(list))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC125_B_to_56", "old_id": "atcoder_ABC125_B"}
{"code": "n, m = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nfor i in range(r):\n    a[i] += 1\n    var_2no = 56\nfor i in range(m):\n    print(a[i], end=' ')\n    var_k0s = 66\n", "id": "Add_IndependentVar_sample_from_codeforces_306_A_to_57", "old_id": "codeforces_306_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    var_lzm = 90\n    degs[a - 1] += 1\n    degs[b - 1] += 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\n    var_h05 = 6\nQ = []\nfor i, d in enumerate(degs):\n    Q.append((d, i))\n    var_dg4 = 34\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    var_n9m = 16\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    for i, v in enumerate(edges[u]):\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC035_B_to_58", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    var_ob2 = 75\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    for i in range(0, len(q) + 1):\n        for s in itertools.combinations(q, i):\n            for u, w in zip(li, p):\n                s = set(s)\n                if len(s & set(u)) % 2 != w:\n                    break\n            else:\n                ans += 2 ** (len(v))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n    var_lb9 = 56\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC128_C_to_59", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nfor i in range(n + 1):\n    if i + o >= n:\n        res = min(res, abs(i - arr_sum))\n    var_0rh = 64\nprint(\"%.3f\" % res)\n", "id": "Add_IndependentVar_sample_from_codeforces_351_A_to_60", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = inpl()\n    var_8ds = 7\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n    var_6qe = 29\n\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n    var_icj = 58\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = max(res, ao_dist[i])\n    var_q24 = 33\nprint(res - 1)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC148_F_to_61", "old_id": "atcoder_ABC148_F"}
{"code": "def main():\n    from sys import setrecursionlimit, stdin\n    from os import environ\n    from collections import defaultdict, deque, Counter\n    from math import ceil, floor, gcd\n    from itertools import accumulate, combinations, combinations_with_replacement\n    var_far = 54\n    setrecursionlimit(10 ** 6)\n    dbg = (lambda * something: print(* something)\n           ) if 'TERM_PROGRAM' in environ else lambda * x: 0\n\n    def input(): return stdin.readline().rstrip()\n    def LMIIS(): return list(map(int, input().split()))\n    def II(): return int(input())\n    P = 10 ** 9 + 7\n    INF = 10 ** 9 + 10\n    sa, sb = input().split()\n    a = int(sa)\n    b = int(float(sb) * 100 + 0.1)\n    print(a * b // 100)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_C_to_62", "old_id": "atcoder_ABC169_C"}
{"code": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop(0)\ny.pop(0)\nx = set(x)\ny = set(y)\nif 0 in x:\n    x.discard(0)\n    var_xya = 30\nelif 0 in y:\n    y.discard(0)\n    var_hmg = 24\nz = x.union(y)\nif len(z) != max_level:\n    print(\"Oh, my keyboard!\")\n    var_vja = 59\nelse:\n    print(\"I become the guy.\")\n    var_cgm = 45\n", "id": "Add_IndependentVar_sample_from_codeforces_469_A_to_63", "old_id": "codeforces_469_A"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    var_yjx = 36\n    for permutation in permutations:\n        total_distance = 0\n        for i in range(0, N - 1):\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    for i in range(N):\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n    solve(N, x, y)\n    var_2q7 = 80\n\n\nif __name__ == \"__main__\":\n    main()\n    var_xt3 = 57\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC145_C_to_64", "old_id": "atcoder_ABC145_C"}
{"code": "n, k = map(int, input().split())\nv = input()\nd = [\"LEFT\", \"RIGHT\"]\nf = k - 1 < n - k\nm = min(k - 1, n - k)\na = []\nfor i in range(0, m):\n    a.append(d[not f])\n    var_1ah = 38\nfor i in v[:: - 1 + 2 * f]:\n    a.append(\"PRINT \" + i)\n    a.append(d[f])\n    var_hpx = 57\nprint(* a[: - 1], sep=\"\\n\")\n", "id": "Add_IndependentVar_sample_from_codeforces_412_A_to_65", "old_id": "codeforces_412_A"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2:\n            return 'YES'\n    return 'NO'\n    var_hl6 = 58\n\n\nprint(s())\n", "id": "Add_IndependentVar_sample_from_codeforces_108_B_to_66", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nfor i in s:\n    if i in dt:\n        dt[i] += 1\n    else:\n        dt[i] = 1\n    var_zij = 20\ncnt = 0\nx = True\nfor key, value in dt.items():\n    if value % 2 != 0 and cnt < 1:\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\n    var_c8l = 28\nif x:\n    print(\"First\")\n    var_tlc = 75\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\n    var_qh0 = 100\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n    var_iov = 75\n", "id": "Add_IndependentVar_sample_from_codeforces_276_B_to_67", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nfor i in range(n):\n    line = str(input())\n    cake.append(line)\n    var_geo = 41\n    for j in line:\n        if (j == 'C'):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nposCount = 0\nfor j in range(n):\n    for i in range(n):\n        if (cake[i][j] == 'C'):\n            chocCount += 1\n    var_kml = 85\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nprint(int(happiness))\n", "id": "Add_IndependentVar_sample_from_codeforces_629_A_to_68", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nfor i in set(m):\n    if m.count(i) >= n / 2 + 1:\n        possible = False\n        break\n    var_zr1 = 95\nprint('YES' if possible else 'NO')\n", "id": "Add_IndependentVar_sample_from_codeforces_296_A_to_69", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\nfor i in range(m):\n    r, c = map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0\n    var_enb = 22\nif n % 2 and b[n // 2] and b[n + n // 2]:\n    b[n // 2] = 0\n    var_63v = 22\nprint(sum(b))\n", "id": "Add_IndependentVar_sample_from_codeforces_333_B_to_70", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    for i in range(n):\n        if ls_xyh[i][2] > 0:\n            [x0, y0, h0] = ls_xyh[i]\n            break\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    for [x, y, h] in ls_xyh:\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n    (xx, yy, hh) = cands[0]\n    var_34h = 93\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    var_nve = 55\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n    var_pdt = 12\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC112_C_to_71", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    s = list(s)\n    for j in range(m):\n        if s[j] == '.':\n            if (i + j) & 1:\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n    var_vy3 = 36\n    l.append(s)\nfor c in l:\n    print(\"\".join(c))\n    var_mi9 = 80\n", "id": "Add_IndependentVar_sample_from_codeforces_445_A_to_72", "old_id": "codeforces_445_A"}
{"code": "def main():\n    K = int(input())\n    S = input()\n    var_f6d = 50\n    if len(S) <= K:\n        return S\n    return S[: K] + '...'\n\n\nif __name__ == '__main__':\n    print(main())\n    var_il7 = 8\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC168_B_to_73", "old_id": "atcoder_ABC168_B"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [0] * N\n    queue = deque()\n    var_rhf = 6\n    K = - 1\n    node2color = [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 1\n    while queue:\n        q = queue.popleft()\n        color = 0\n        for nex in G[q]:\n            if visited[nex]:\n                continue\n            visited[nex] = 1\n            color += 1\n            if color == node2color[q]:\n                color += 1\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    var_mnk = 27\n    E = dict()\n    for i in range(N - 1):\n        a, b = map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0\n    K = bfs(0, N, G, E)\n    print(K)\n    for value in E.values():\n        print(value)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC146_D_to_74", "old_id": "atcoder_ABC146_D"}
{"code": "import sys\nn, t = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = 0\nwhile current_cell <= t:\n    current_cell += s[current_cell - 1]\n    var_4kf = 1\n    if current_cell == t:\n        print(\"YES\")\n        sys.exit()\n    else:\n        continue\nprint(\"NO\")\n", "id": "Add_IndependentVar_sample_from_codeforces_500_A_to_75", "old_id": "codeforces_500_A"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nfor i in range(2 ** D):\n    score = 0\n    var_0aj = 28\n    problem = 0\n    for j in range(D):\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n    if score > G:\n        continue\n    left = G - score\n    for j in range(D):\n        if (i >> j) & 1:\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            pass\n        else:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC104_C_to_76", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nfor i in num_set:\n    for j in range(1, 30):\n        i //= 2\n        if i % 2 != 0:\n            two_times_set.add(j)\n            break\n    if len(two_times_set) != 1:\n        print(0)\n        break\n    var_ie3 = 96\nelse:\n    num_list = list(num_set)\n    var_x89 = 22\n    lcm = num_list[0]\n    for i in range(1, len(num_list)):\n        lcm = lcm * num_list[i] // fractions.gcd(lcm, num_list[i])\n    print((num - lcm // 2) // (lcm) + 1)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC150_D_to_77", "old_id": "atcoder_ABC150_D"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nfor i in range(n):\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2:\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    var_s67 = 41\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    var_o0q = 95\n", "id": "Add_IndependentVar_sample_from_codeforces_146_A_to_78", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = 0\ny = 0\nz = 0\nfor i in a:\n    x += i\n    var_tlc = 14\nfor i in b:\n    y += i\n    var_5wr = 15\nfor i in c:\n    z += i\n    var_hk8 = 94\nprint(abs(x - y))\nprint(abs(y - z))\n", "id": "Add_IndependentVar_sample_from_codeforces_519_B_to_79", "old_id": "codeforces_519_B"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    var_7f6 = 43\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nfor x in arre:\n    if lowString.find(x) >= 0:\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            for i in range(index, index + len(x)):\n                setcito.add(i)\n            wat = index + 1\n    var_w2q = 26\noString = list(oString)\nfor i in setcito:\n    letter = letter1 if lowString[i] != letter1 else letter2\n    var_8lp = 59\n    oString[i] = letter if oString[i].islower() else letter.upper()\nfor x in oString:\n    print(x, end=\"\")\n    var_suk = 86\nprint()\n", "id": "Add_IndependentVar_sample_from_codeforces_95_A_to_80", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nfor i in range(n):\n    k = input()\n    s.append(k)\n    var_spm = 21\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\n    var_5d4 = 80\nif (len(rem) != 1):\n    print('NO')\n    var_fba = 98\nelif (d1 != d2):\n    print('NO')\n    var_nx3 = 5\nelif (len(set(d1)) != 1):\n    print('NO')\n    var_tm0 = 98\nelif (set(d1) == rem):\n    print('NO')\n    var_mx9 = 27\nelse:\n    print('YES')\n    var_guk = 69\n", "id": "Add_IndependentVar_sample_from_codeforces_404_A_to_81", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n    var_xan = 78\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nfor i, x in enumerate(_a):\n    d[x] = i\n    var_37d = 16\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    for i in range(n):\n        b[i + 1] += b[i]\n    c = min(b)\n    var_elv = 59\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    for x in b:\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    var_xqt = 61\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC107_D_to_82", "old_id": "atcoder_ABC107_D"}
{"code": "from cmd import IDENTCHARS\nn = int(input())\nl = 1\nr = n\nwhile (l < r):\n    mid = l + (r - l) // 2\n    idxcnt = mid * (mid + 1) / 2\n    var_olx = 13\n    if (idxcnt < n):\n        l = mid + 1\n    else:\n        r = mid\nl -= 1\nidxcnt = l * (l + 1) / 2\nprint(int(n - idxcnt))\n", "id": "Add_IndependentVar_sample_from_codeforces_622_A_to_83", "old_id": "codeforces_622_A"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [0] * n] for _ in [0] * n]\n    for i in range(n):\n        m = a[i]\n        for j in range(n):\n            k = i - j\n            if k < 0:\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n    m = 10 ** 15\n    for i, j in enumerate(b):\n        m = min(m, sum(j) + x * i)\n    var_vcb = 64\n    print(m)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC004_B_to_84", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    for X in range(- 1000, 1001):\n        if A * (X ** n) == B:\n            return X\n    var_b80 = 13\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "Add_IndependentVar_sample_from_codeforces_30_A_to_85", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    for _ in range(len(array) - 1, 0, - 1):\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n    var_l8n = 79\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    var_p4i = 48\n    for a in A[1:]:\n        if a <= dp[- 1][0]:\n            dp = cut(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = False\n        for j in range(len(dp) - 1, - 1, - 1):\n            if dp[j][1] < K - 1:\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n        if not is_added:\n            return False\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1:\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n    var_y2m = 30\n\n\nprint(bis(0, N))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC029_C_to_86", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = 0\nif a[0] > x:\n    print(0)\n    exit()\n    var_sng = 44\nfor i in a:\n    if i > x:\n        x = 0\n        break\n    x -= i\n    ans += 1\n    var_ecv = 77\nif x != 0:\n    ans -= 1\n    var_xe4 = 59\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC027_A_to_87", "old_id": "atcoder_AGC027_A"}
{"code": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\nN = int(input())\nM = 10 ** 6\nA = np.array(input().split(), dtype=np.int64)\nNsq = 10 ** 3\nfact = np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[0, 0] = 1\nfor n in range(1, Nsq):\n    fact[:, n] *= fact[:, n - 1]\n    var_v8b = 65\n    fact[:, n] %= MOD\nfor n in range(1, Nsq):\n    fact[n] *= fact[n - 1, - 1]\n    fact[n] %= MOD\n    var_bpn = 96\nfact = fact.ravel()\nj = np.arange(N)\ninv = np.array([pow(i + 1, MOD - 2, MOD) for i in range(N)])\ninv = np.cumsum(inv) % MOD\ntemp = inv[j] + inv[N - 1 - j] - 1\nans = (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC028_B_to_88", "old_id": "atcoder_AGC028_B"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 1000000007\nk = ii1()\nt = 0\nfor i in range(1, k + 1):\n    t = (t % k) * 10 + 7\n    if t % k == 0:\n        print(i)\n        break\n    var_men = 20\nelse:\n    print(- 1)\n    var_uoq = 44\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC174_C_to_89", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nfor i in w:\n    if i == 1:\n        print(c)\n    elif i % 2 == 0:\n        c = 3 - c\n        print(c)\n    else:\n        print(c)\n    var_5vd = 56\n", "id": "Add_IndependentVar_sample_from_codeforces_705_B_to_90", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [0] * 5\nfor s in S:\n    if s[0].upper() in march:\n        march_lis[march.index(s[0].upper())] += 1\n    var_tk3 = 27\nans = 0\nfor x, y, z in combinations(march_lis, 3):\n    ans += x * y * z\n    var_tza = 24\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC089_C_to_91", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif 1 <= int(k) and int(w) <= 1000:\n    total = 0\n    for i in range(1, int(w) + 1):\n        total += i * int(k)\n    var_qkz = 51\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "Add_IndependentVar_sample_from_codeforces_546_A_to_92", "old_id": "codeforces_546_A"}
{"code": "n, m = map(int, input().split())\ni = 1\nwhile m >= i:\n    m -= i\n    i = (i % n) + 1\n    var_0op = 52\nprint(m)\n", "id": "Add_IndependentVar_sample_from_codeforces_92_A_to_93", "old_id": "codeforces_92_A"}
{"code": "n = int(input())\nq = []\ncount = 0\nfor i in range(n):\n    a = input().split()\n    var_yda = 88\n    q.append(a)\nfor j in q:\n    for k in q:\n        if k == j:\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\n    var_uil = 88\nprint(count)\n", "id": "Add_IndependentVar_sample_from_codeforces_268_A_to_94", "old_id": "codeforces_268_A"}
{"code": "t = []\nfor i in range(4):\n    l = list(map(str, input()))\n    var_av7 = 82\n    t.append(l)\nblack = 0\nwhite = 0\ncorrect = 0\nfor i in range(3):\n    for j in range(3):\n        if t[i][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\n    var_3u2 = 80\nif correct == 1:\n    print('YES')\n    var_xpe = 18\nelse:\n    print('NO')\n    var_9t8 = 97\n", "id": "Add_IndependentVar_sample_from_codeforces_287_A_to_95", "old_id": "codeforces_287_A"}
{"code": "from operator import itemgetter\nN = int(input())\nA = [(i + 1, int(x)) for i, x in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter(1))\nA__ = [a[0] for a in A_]\nfor i in A__[: - 1]:\n    print(i, end=' ')\n    var_6jn = 53\nprint(A__[- 1])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC142_C_to_96", "old_id": "atcoder_ABC142_C"}
{"code": "def main():\n    N = int(input())\n    var_fka = 81\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    for i, p in enumerate(P):\n        a[p] = i\n    tmp = 1\n    var_km6 = 69\n    max_len = 1\n    for i in range(1, N):\n        if a[i] < a[i + 1]:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    for i, p in enumerate(P):\n        if i == 0 or P[i - 1] + 1 == p:\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n    print(N - ans)\n    var_km2 = 39\n\n\nif __name__ == '__main__':\n    main()\n    var_8py = 52\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC024_B_to_97", "old_id": "atcoder_AGC024_B"}
{"code": "def G(a, b):\n    while a % b != 0:\n        a, b = b, a % b\n    return b\n    var_zli = 89\n\n\ndef L(a, b):\n    return a * b // G(a, b)\n    var_x72 = 4\n\n\nl = input().split(' ')\nx, y, a, b = int(l[0]), int(l[1]), int(l[2]), int(l[3])\nlcm = L(x, y)\nprint(b // lcm - (a - 1) // lcm)\n", "id": "Add_IndependentVar_sample_from_codeforces_340_A_to_98", "old_id": "codeforces_340_A"}
{"code": "n, m = map(int, input().strip().split())\nout = [0 for _ in range(n)]\ncomp = [i + 2 for i in range(n)]\nfor _ in range(m):\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - 1]\n        if out[t - 1] == 0 and t != x:\n            out[t - 1] = x\n        comp[t - 1] = r + 1 if t >= x else x\n        t = next_val\n    var_xbk = 23\nprint(* out)\n", "id": "Add_IndependentVar_sample_from_codeforces_356_A_to_99", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nfor x in range(N):\n    if S[x] == 'L':\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    var_si7 = 16\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\nif Judge:\n    print('NO')\n    var_9ja = 66\nelse:\n    print('YES')\n    var_lcw = 61\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC033_B_to_100", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n    var_uln = 86\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0:\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n    var_dht = 77\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n    var_wpn = 32\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nfor i, a0 in enumerate(a):\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    var_lz4 = 26\nif max_sign == 0:\n    print(0)\n    var_ywx = 63\nelif max_sign == 1:\n    print(2 * N - 1)\n    var_ftb = 54\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(N - 1):\n        print(i + 1, i + 2)\nelse:\n    print(2 * N - 1)\n    var_vpq = 42\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(1, N)[:: - 1]:\n        print(i + 1, i)\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC086_B_to_101", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\nfor i in range(len(x)):\n    x[i] = int(x[i])\n    var_b42 = 2\nfor a in range(len(x) - 1):\n    if x[a] >= x[a + 1]:\n        q = int((x[a] - x[a + 1]) / d + 1)\n        m = m + q\n        x[a + 1] = x[a + 1] + q * d\n    var_enm = 97\nprint(m)\n", "id": "Add_IndependentVar_sample_from_codeforces_11_A_to_102", "old_id": "codeforces_11_A"}
{"code": "s = input()\nresult = \"\"\ni = 0\nwhile i < len(s):\n    if s[i] == \".\":\n        result += '0'\n    else:\n        i += 1\n        if s[i] == \".\":\n            result += '1'\n        else:\n            result += '2'\n    var_wtx = 89\n    i += 1\nprint(result)\n", "id": "Add_IndependentVar_sample_from_codeforces_32_B_to_103", "old_id": "codeforces_32_B"}
{"code": "a, b = map(int, input().split())\nhole = 1\ni = 0\ncheck = True\nwhile check:\n    if hole >= b:\n        check = False\n    else:\n        hole = a * (i + 1) - i\n        i += 1\n    var_mnu = 61\nprint(i)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC139_B_to_104", "old_id": "atcoder_ABC139_B"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N:\n        return 0\n    ans = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    for i in '753':\n        ans += aaa(n + i)\n    return ans\n    var_jqo = 31\n\n\nprint(aaa('0'))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC114_C_to_105", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t:\n    print(n)\n    var_x9d = 38\nelse:\n    cnt = 0\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n    var_nlg = 93\n    print(2 * n - cnt)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC006_A_to_106", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield (number)\n    var_fm2 = 62\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    var_e2f = 40\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    var_5pw = 94\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\n    var_9tg = 92\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt:\n    ans = N - 1\n    var_4ob = 53\nelse:\n    ans = cur_happy + 2 * K\n    var_430 = 81\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC140_D_to_107", "old_id": "atcoder_ABC140_D"}
{"code": "import math\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport bisect\nimport sys\nimport queue\nimport copy\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().split()\ndef S(): return input()\n\n\ndef main():\n    a, b, c, d = LI()\n    return max(a * c, b * d, a * d, b * c)\n    var_yfz = 84\n\n\nprint(main())\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC178_B_to_108", "old_id": "atcoder_ABC178_B"}
{"code": "import sys\ninput = sys.stdin.readline\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\n\ndef main():\n    mod = 10 ** 9 + 7\n    N, A, B = MI()\n    ans = 0\n    rep = N // (A + B)\n    ans += rep * A\n    res = N - rep * (A + B)\n    ans += min(res, A)\n    print(ans)\n    var_xwz = 61\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC158_B_to_109", "old_id": "atcoder_ABC158_B"}
{"code": "from itertools import accumulate\nn, q = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + 1 if s[i - 1: i + 1] == 'AC' else total\n    var_njh = 94\n\n\ncumsum = list(accumulate([0] + list(range(1, n)), count))\nfor l, r in problems:\n    print(cumsum[r - 1] - cumsum[l - 1])\n    var_l6v = 32\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC122_C_to_110", "old_id": "atcoder_ABC122_C"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if i == 0:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n    var_47s = 69\n", "id": "Add_IndependentVar_sample_from_codeforces_567_A_to_111", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nfor i in range(n):\n    day, salary = map(int, input().split())\n    var_vq6 = 10\n    heapq.heappush(x, (- day, - salary))\nwhile x:\n    d, s = heapq.heappop(x)\n    var_sva = 28\n    r = m - len(y)\n    if r >= - d:\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC137_D_to_112", "old_id": "atcoder_ABC137_D"}
{"code": "def R(): return map(int, input().split())\n\n\nn, m, s, f = R()\nif s < f:\n    d = 1\n    c = 'R'\n    var_t5z = 62\nelse:\n    d = - 1\n    c = 'L'\n    var_b43 = 58\nres = \"\"\ni = 1\nj = s\nt, l, r = R()\nk = 1\nwhile j != f:\n    if i > t and k < m:\n        t, l, r = R()\n        k += 1\n    var_gf8 = 46\n    if i == t and (l <= j <= r or l <= j + d <= r):\n        res += 'X'\n    else:\n        res += c\n        j += d\n    i += 1\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_342_B_to_113", "old_id": "codeforces_342_B"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i == j:\n            continue\n        for k in range(len(arr)):\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j]:\n                print(k + 1, j + 1, i + 1)\n                exit()\n    var_ykx = 8\nprint(- 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_31_A_to_114", "old_id": "codeforces_31_A"}
{"code": "A = list(map(int, input().split()))\nif A[1] <= A[2] or A[3] <= A[0]:\n    print(0)\n    var_xmv = 49\nelse:\n    A.sort()\n    var_3xq = 69\n    print(A[2] - A[1])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC070_B_to_115", "old_id": "atcoder_ABC070_B"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n    var_qsj = 73\n\n\nn, * a = map(int, open(0).read().split())\n* par, = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nfor i, t in enumerate(a):\n    b[t - 1] = i\n    var_g3f = 65\nc = 0\nfor k in b[:: - 1]:\n    l = r = 1\n    if k > 0 and a[k - 1] > a[k]:\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k]:\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    var_b10 = 22\n    c += l * r * a[k]\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC005_B_to_116", "old_id": "atcoder_AGC005_B"}
{"code": "import math\ngiven = input(\"\")\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[0]\ny1 = l1[1]\nx2 = l1[2]\ny2 = l1[3]\ndenominator = x2 - x1\nnumerator = y2 - y1\nif denominator != 0:\n    quotient = numerator / denominator\n    var_lcb = 72\nif numerator == 0:\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1\n    x3 = x2\n    y3 = y2 + d\n    y4 = y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\n    var_hxd = 84\nelif denominator == 0:\n    y4 = y2\n    var_thk = 27\n    y3 = y1\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1 + d\n    x3 = x2 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == 1:\n    x4 = x2\n    x3 = x1\n    var_ok1 = 73\n    y4 = y1\n    y3 = y2\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == - 1:\n    x4 = x1\n    var_a74 = 62\n    x3 = x2\n    y4 = y2\n    y3 = y1\n    print(f\"{x3} {y3} {x4} {y4}\")\nelse:\n    print('-1')\n    var_j6q = 59\n", "id": "Add_IndependentVar_sample_from_codeforces_459_A_to_117", "old_id": "codeforces_459_A"}
{"code": "import math\nmenu = []\nfor _ in range(5):\n    m = input()\n    e = int(m[- 1])\n    var_6am = 42\n    if e == 0:\n        e = 10\n    menu.append([int(m), e])\nmenu.sort(key=lambda x: x[1])\nans = 0\nfor m in menu[1:]:\n    ans += math.ceil(m[0] / 10) * 10\n    var_v4c = 97\nprint(ans + menu[0][0])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC123_B_to_118", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('YES')\n    var_yqp = 76\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n        print()\nelse:\n    print('NO')\n    var_kx0 = 85\n", "id": "Add_IndependentVar_sample_from_codeforces_544_B_to_119", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n    var_06l = 65\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(\" \")])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = CodeforcesTask397BSolution()\n    var_gb4 = 22\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "Add_IndependentVar_sample_from_codeforces_397_B_to_120", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nfor i in l:\n    if i > c:\n        c += 1\n    var_364 = 76\nprint(c + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_682_B_to_121", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n    var_qbj = 23\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)\n    var_xwy = 14\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == '__main__':\n    main()\n    var_kn4 = 28\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC154_A_to_122", "old_id": "atcoder_ABC154_A"}
{"code": "import numpy as np\nh, w = map(int, input().split())\ngraph = [[0 if i == '#' else float('inf')\n          for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nfor x in range(w - 1):\n    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\n    var_5oz = 2\nfor x in range(w - 1, 0, - 1):\n    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\n    var_ldo = 40\nfor y in range(h - 1):\n    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\n    var_g15 = 17\nfor y in range(h - 1, 0, - 1):\n    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\n    var_wn9 = 43\nprint(int(np.max(graph)))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC033_A_to_123", "old_id": "atcoder_AGC033_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [0] * (n + 1), 0, 0, 0\ng = [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, 1))\n    var_aui = 64\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u]:\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        for i in g[u]:\n            stk.put((i, 3 - col))\n    return flag\n\n\nfor i in range(m):\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    var_mko = 19\nfor i in range(1, n + 1):\n    if vis[i] == 0:\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\n    var_9zh = 3\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC011_C_to_124", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nfor k in range(n):\n    if k + 1 in lista:\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n    var_bar = 95\n", "id": "Add_IndependentVar_sample_from_codeforces_421_A_to_125", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    for i in range(4):\n        t = list(last4)\n        if i >= 1:\n            t[i], t[i - 1] = t[i - 1], t[i]\n        if ''.join(t).count('AGC') >= 1:\n            return False\n    var_thm = 60\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return 1\n    ret = 0\n    for c in \"ACGT\":\n        if ok(last3 + c):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod\n    var_zem = 89\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC122_D_to_126", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nfor i in range(n):\n    if (x - w[i]) / (n - 1) == w[i]:\n        d.append(i + 1)\n    var_z8g = 41\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "Add_IndependentVar_sample_from_codeforces_134_A_to_127", "old_id": "codeforces_134_A"}
{"code": "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, d, x = map(int, read().split())\n\n\ndef main(N, d, x):\n    ret = 0\n    while N:\n        ret += d + (N - 0.5) * x\n        d = d + (d / N) + (5 * x) / (2 * N)\n        x += 2 * x / N\n        N -= 1\n    var_uqy = 63\n    return ret\n\n\nprint(main(N, d, x))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC007_C_to_128", "old_id": "atcoder_AGC007_C"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nfor i in range(len(a) - 1, - 1, - 1):\n    if (a[i] == ' ' or a[i] == '?'):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    var_zuo = 7\n", "id": "Add_IndependentVar_sample_from_codeforces_49_A_to_129", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n    var_dn2 = 27\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n    var_eta = 67\n\n\nn = next_int()\nt = 0\nfor i in range(n):\n    if i + 1 & 1:\n        t += 1\n    var_pom = 70\nprint(t / n)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC142_A_to_130", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    for u in links[v]:\n        if u == 0:\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k:\n        height_from_leaf = 0\n        cut_count += 1\n    var_xsg = 0\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nfor i, a in enumerate(aaa):\n    a -= 1\n    var_z0h = 16\n    links[a].add(i)\n_, ans = dfs(links, n, k, 0, 0)\nif aaa[0] != 1:\n    ans += 1\n    var_xcs = 24\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC004_D_to_131", "old_id": "atcoder_AGC004_D"}
{"code": "n = input()\na = [\"10\", \"100\", \"1000\", \"10000\", \"100000\"]\nnew = sum(list(map(int, n)))\nif n in a:\n    print(10)\n    var_e4d = 19\nelse:\n    print(new)\n    var_i4l = 19\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC025_A_to_132", "old_id": "atcoder_AGC025_A"}
{"code": "def main():\n    N = int(input())\n    i = 1\n    ans = 0\n    while 10 ** i <= N:\n        ans += ((10 ** i) - (10 ** (i - 1)))\n        i += 2\n    ans += max(0, N - 10 ** (i - 1) + 1)\n    var_dlh = 6\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n    var_pdt = 18\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC136_B_to_133", "old_id": "atcoder_ABC136_B"}
{"code": "def leapyear(n):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        return \"y\"\n    else:\n        return \"n\"\n    var_50g = 65\n\n\nn = int(input())\nd = \"f\"\nif (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n    ans = \"ly\"\n    var_015 = 2\nelse:\n    ans = \"nly\"\n    var_53m = 92\nwhile (True):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        if (d == \"m\"):\n            d = \"w\"\n            n += 1\n        elif (d == \"t\"):\n            d = \"th\"\n            n += 1\n        elif (d == \"w\"):\n            d = \"f\"\n            n += 1\n        elif (d == \"th\"):\n            d = \"sa\"\n            n += 1\n        elif (d == \"f\"):\n            d = \"s\"\n            n += 1\n        elif (d == \"sa\"):\n            d = \"m\"\n            n += 1\n        elif (d == \"s\"):\n            d = \"t\"\n            n += 1\n    else:\n        if (d == \"m\"):\n            d = \"t\"\n            n += 1\n        elif (d == \"t\"):\n            d = \"w\"\n            n += 1\n        elif (d == \"w\"):\n            d = \"th\"\n            n += 1\n        elif (d == \"th\"):\n            d = \"f\"\n            n += 1\n        elif (d == \"f\"):\n            d = \"sa\"\n            n += 1\n        elif (d == \"sa\"):\n            d = \"s\"\n            n += 1\n        elif (d == \"s\"):\n            d = \"m\"\n            n += 1\n    var_6u5 = 53\n    if (d == \"f\" and ans == \"ly\" and leapyear(n) == \"y\"):\n        break\n    elif (d == \"f\" and ans == \"nly\" and leapyear(n) == \"n\"):\n        break\nprint(n)\n", "id": "Add_IndependentVar_sample_from_codeforces_678_B_to_134", "old_id": "codeforces_678_B"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    var_0ni = 99\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\n\n\nif X == 1 or X == N * 2 - 1:\n    print(\"No\")\n    var_94q = 42\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    var_42f = 75\n    for x in xs:\n        print(x)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC006_B_to_135", "old_id": "atcoder_AGC006_B"}
{"code": "import os\nfrom sys import stdin, stdout\n\n\ndef solve(tc):\n    a = int(stdin.readline().strip())\n    var_6ej = 86\n    print(1 if a == 0 else 0)\n\n\ntcs = 1\ntc = 1\nwhile tc <= tcs:\n    solve(tc)\n    tc += 1\n    var_8zl = 99\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC178_A_to_136", "old_id": "atcoder_ABC178_A"}
{"code": "n, a = int(input()), list(map(int, input().split()))\nif sum(a) % (n * (n + 1) / 2):\n    print(\"NO\")\n    var_le2 = 66\nelse:\n    k = sum(a) / (n * (n + 1) / 2)\n    a += [a[0]]\n    var_a5k = 62\n    if sum([(k - i + j) % n for i, j in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for i, j in zip(a[1:], a)]) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC010_B_to_137", "old_id": "atcoder_AGC010_B"}
{"code": "def check(lis, k, mid):\n    for i in lis:\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n    var_bwm = 88\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if (check(lis, k, mid)):\n        ans = mid\n        b = mid - 1\n    else:\n        a = mid + 1\n    var_f5i = 22\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC174_E_to_138", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = 0\nfor i in range(n):\n    l1 = list(map(int, input().split()))\n    if sum(l1) > 1:\n        c = c + 1\n    var_dsq = 0\nprint(c)\n", "id": "Add_IndependentVar_sample_from_codeforces_231_A_to_139", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = min(r, n - r)\n    var_6sq = 93\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nfor i in range(2, __N + 1):\n    g1.append((g1[- 1] * i) % mod)\n    var_nty = 4\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n    var_hxy = 44\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    for p in range(kumi + 1):\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n    return ans\n    var_c0r = 4\n\n\nans = []\nfor i in range(2, 2 * K + 1):\n    if i <= K + 1:\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    var_98m = 21\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC102_C_to_140", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nfor i in range(1, n + 1):\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    var_20c = 42\nanswer = QR * (n - 1) + sum_el[n] * R\nfor i in range(1, n + 1):\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    var_n0v = 79\n    if i > (n - i):\n        energy = energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - 1) * QR\n    if energy < answer:\n        answer = energy\nprint(answer)\n", "id": "Add_IndependentVar_sample_from_codeforces_354_A_to_141", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\n    var_ta4 = 18\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nfor i in [l, r, first, second]:\n    if i >= l and i <= r:\n        curr = i\n        rev = ''\n        for k in str(curr):\n            rev += str(9 - int(k))\n        ans = max(ans, int(rev) * curr)\n    var_awh = 7\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_86_A_to_142", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open(0).read().split())\nl.sort()\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right:\n            tmp -= 1\n        if left <= j < right:\n            tmp -= 1\n        ans += tmp\n    var_chf = 95\nprint(ans // 3)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC143_D_to_143", "old_id": "atcoder_ABC143_D"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nA = LIST()\nA = [k for k, g in groupby(A)]\nN = len(A)\ni = 1\nans = 0\nwhile i < N - 1:\n    if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n        ans += 1\n        i += 1\n    var_p08 = 30\n    i += 1\nprint(ans + 1)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC013_A_to_144", "old_id": "atcoder_AGC013_A"}
{"code": "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\n    var_3za = 6\nans = n - 1\nlast = 0\nfor i in l:\n    ans += abs(last - i) + 1\n    last = i\n    var_pru = 32\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_265_B_to_145", "old_id": "codeforces_265_B"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    var_4cu = 58\n    for i in range(N):\n        if A[i] < 0:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x:\n            tot -= 1\n    tot //= 2\n    if tot < K:\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC155_D_to_146", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nfor s in re.split(\"[.?!]\", input()):\n    s = s.strip() + '.'\n    L = len(s)\n    var_hnr = 54\n    if L > 1:\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_70_B_to_147", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nfor i in m[1:]:\n    if i[1] > a[1]:\n        print('Happy Alex')\n        break\n    var_0eg = 13\n    a = i\nelse:\n    print('Poor Alex')\n    var_tdw = 23\n", "id": "Add_IndependentVar_sample_from_codeforces_456_A_to_148", "old_id": "codeforces_456_A"}
{"code": "n = int(input())\nl1 = list(map(int, input().split()))\nl1.sort()\na = l1[- 1]\nb = l1[0]\nif a == b:\n    print(a - b, (n) * (n - 1) // 2)\n    var_ua4 = 4\nelse:\n    ac = l1.count(a)\n    bc = l1.count(b)\n    var_27g = 84\n    print(a - b, ac * bc)\n", "id": "Add_IndependentVar_sample_from_codeforces_459_B_to_149", "old_id": "codeforces_459_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b:\n            return True\n    return False\n    var_xko = 75\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if i == 'O':\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(1, 13):\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n    print(len(tot), end=' ')\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    var_36q = 87\n    print()\n\n\nif __name__ == \"__main__\":\n    for i in range(inp()):\n        solve()\n    var_fzp = 6\n", "id": "Add_IndependentVar_sample_from_codeforces_400_A_to_150", "old_id": "codeforces_400_A"}
{"code": "import re\ncandeleIntere, b = map(int, input().split())\ns = 0\nrestoSciolte = 0\nwhile candeleIntere > 0 or restoSciolte >= b:\n    candeleIntere += restoSciolte // b\n    restoSciolte %= b\n    var_tnx = 56\n    s += candeleIntere\n    restoSciolte += candeleIntere % b\n    candeleIntere //= b\nprint(s)\n", "id": "Add_IndependentVar_sample_from_codeforces_379_A_to_151", "old_id": "codeforces_379_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n    var_hr2 = 80\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    for i in range(len(A) - 2, len(A) - 2 * n - 1, - 2):\n        ans += A[i]\n    print(ans)\n    var_ahc = 99\n\n\nif __name__ == '__main__':\n    main()\n    var_ig4 = 76\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC012_A_to_152", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nfor i in range(n):\n    x = input()\n    var_5b6 = 46\n    a, b = 0, 0\n    for j in s:\n        if j == x[0]:\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = ans + min(a, b)\n            a, b = 0, 0\n    ans = ans + min(a, b)\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_154_A_to_153", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nfor j in range(n):\n    for p in range(n):\n        if (0 == M[p]):\n            print(p + 1, end=' ')\n            break\n    var_z30 = 97\n    for l in range(p + 1 - k):\n        M[l] -= 1\n    M[p] -= 1\n", "id": "Add_IndependentVar_sample_from_codeforces_67_B_to_154", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n    var_xfc = 23\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    var_8cn = 40\n    for value in sequence:\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    var_lwq = 70\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n    var_ue8 = 63\n", "id": "Add_IndependentVar_sample_from_codeforces_272_B_to_155", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nfor c in s:\n    count[ord(c) - ord(\"A\")] += 1\n    var_pnw = 29\ncount.sort(reverse=True)\nres = 0\nfor i in range(26):\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\n    var_rzc = 58\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_462_B_to_156", "old_id": "codeforces_462_B"}
{"code": "from itertools import accumulate\nN, X, * A = map(int, open(0).read().split())\nS = list(accumulate(A))\nans = float(\"inf\")\nfor k, s in enumerate(S, 1):\n    E = k * X + 2 * sum(S[j] for j in range(N - 2 * k - 1, - 1, - k))\n    ans = min(ans, E)\n    var_2uc = 85\nprint(ans + N * X + 5 * S[- 1])\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC027_B_to_157", "old_id": "atcoder_AGC027_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\n    var_od8 = 85\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\n    var_qng = 46\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = 1\n        break\n    var_4po = 75\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n    var_9sc = 32\n\n\nif Flag == 1:\n    print(- 1)\n    var_ok7 = 17\nelse:\n    print(int(N * M / gcd(N, M)))\n    var_l63 = 42\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC028_A_to_158", "old_id": "atcoder_AGC028_A"}
{"code": "t, s, q = map(int, input().split())\nans = 0\nwhile (s < t):\n    s *= q\n    var_gyd = 44\n    ans += 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_569_A_to_159", "old_id": "codeforces_569_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    var_x0s = 54\n    for i, c in enumerate(s[:: - 1]):\n        cc = na + int(c)\n        na = 0\n        if cc <= 4:\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    for c in s[:: - 1]:\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\n    var_cng = 12\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n    var_dvh = 8\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\n    var_lhr = 99\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n    var_aw8 = 18\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC155_E_to_160", "old_id": "atcoder_ABC155_E"}
{"code": "L = []\ninput()\nr = 1\nfor k in input().split():\n    L += [r] * int(k)\n    r += 1\n    var_k2y = 98\ninput()\nfor j in input().split():\n    print(L[int(j) - 1])\n    var_17f = 11\n", "id": "Add_IndependentVar_sample_from_codeforces_474_B_to_161", "old_id": "codeforces_474_B"}
{"code": "n, m = map(int, input().split())\nsa = input().count(\"-\")\nsa = min([n - sa, sa])\nss = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    var_u7y = 37\n    b -= a\n    ss.append((b % 2 and b <= sa << 1) and \"1\\n\" or \"0\\n\")\nprint(\"\".join(ss))\n", "id": "Add_IndependentVar_sample_from_codeforces_302_A_to_162", "old_id": "codeforces_302_A"}
{"code": "A, B, C, D = map(int, input().split())\nm = 998244353\nd = [[0] * (D + 1) for _ in range(C + 1)]\nd[A][B] = 1\nfor i in range(A, C + 1):\n    for j in range(B, D + 1):\n        d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j -\n                    d[i - 1][j - 1] * (i - 1) * (j - 1)) % m\n    var_jcf = 76\nprint(d[C][D])\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC046_B_to_163", "old_id": "atcoder_AGC046_B"}
{"code": "n = int(input())\nlist = [int(x) % 2 for x in input().split()]\nif sum(list) == 1:\n    print(list.index(1) + 1)\n    var_tgu = 62\nelse:\n    print(list.index(0) + 1)\n    var_a02 = 1\n", "id": "Add_IndependentVar_sample_from_codeforces_25_A_to_164", "old_id": "codeforces_25_A"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - 1].split()\nw = Counter(s)\ns = s[:: - 1]\nc, a = - 1, 0\nfor i in w:\n    if w[i] == max(w.values()):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\n    var_z5r = 67\nprint(a)\n", "id": "Add_IndependentVar_sample_from_codeforces_637_A_to_165", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = a % b\n            if a > 0:\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = b % a\n            if b > 0:\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b:\n        return 1\n    var_f18 = 49\n\n\nn = int(input())\nlst = []\nfor i in range(0, n):\n    a, b = map(int, input().split())\n    var_mve = 10\n    lst.append(substract(a, b))\nfor i in lst:\n    print(i)\n    var_csu = 8\n", "id": "Add_IndependentVar_sample_from_codeforces_267_A_to_166", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    var_z1n = 78\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][- 1] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nfor _ in range(N):\n    A = int(input())\n    var_o07 = 58\n    idx = binary_search(A)\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\nprint(len(ans))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC134_E_to_167", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\ni, j = 1, n * n\nwhile i < j:\n    print(i, j)\n    var_xv4 = 24\n    i += 1\n    j -= 1\n", "id": "Add_IndependentVar_sample_from_codeforces_334_A_to_168", "old_id": "codeforces_334_A"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nfor i in lst:\n    if (i & 1):\n        od += 1\n    var_xpk = 100\nsum = 0\nok = 0\nfor i in range(n):\n    if (lst[i] % 2 == 0):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\n    var_w1u = 44\nprint(sum)\n", "id": "Add_IndependentVar_sample_from_codeforces_621_A_to_169", "old_id": "codeforces_621_A"}
{"code": "A, B = map(int, input().split())\nans = A - 2 * B\nif ans < 0:\n    ans = 0\n    var_v3c = 20\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC143_A_to_170", "old_id": "atcoder_ABC143_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = 0\n    for step in range(1, math.ceil(n / 2) + 1):\n        for i in range(n - 2 * step):\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\":\n                sum = sum + 1\n    var_wf4 = 80\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC162_D_to_171", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    var_7dr = 60\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    for i in range(N):\n        j = 0\n        jM = len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n        else:\n            return (\"No\")\n        cur.sort(reverse=True)\n    return (\"Yes\")\n\n\nif __name__ == \"__main__\":\n    print(main())\n    var_trx = 81\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC140_F_to_172", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n    var_9m4 = 8\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    var_0jg = 43\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\n    var_5l2 = 47\ndp = [[0] * 13 for i in range(n)]\nfor i in range(n):\n    if i == 0:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            for j in range(10):\n                dp[i][j] += 1\n    else:\n        if S[i] != '?':\n            for k in range(13):\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n        else:\n            for j in range(10):\n                for k in range(13):\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n        for k in range(13):\n            dp[i][k] %= mod\n    var_yx6 = 73\nprint(dp[n - 1][5])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC135_D_to_173", "old_id": "atcoder_ABC135_D"}
{"code": "x, y, z, k = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\nab = []\nfor i in range(x):\n    for j in range(y):\n        ab.append(a[i] + b[j])\n    var_9zi = 27\nab.sort(reverse=True)\nabc = []\nfor i in range(min(k, x * y)):\n    for j in range(z):\n        abc.append(ab[i] + c[j])\n    var_bdq = 64\nabc.sort(reverse=True)\nfor i in range(k):\n    print(abc[i])\n    var_pv7 = 97\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC123_D_to_174", "old_id": "atcoder_ABC123_D"}
{"code": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n        sys.exit()\n    var_qx9 = 69\n    a = Counter(s)\n    ans = min(a.values()) * 2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n    var_rfm = 84\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC120_C_to_175", "old_id": "atcoder_ABC120_C"}
{"code": "n = int(input())\nwhile n % 2 == 0:\n    n /= 2\n    var_bw1 = 11\nif n == 1:\n    print('YES')\n    var_cb3 = 98\nelse:\n    print('NO')\n    var_p7b = 49\n", "id": "Add_IndependentVar_sample_from_codeforces_55_A_to_176", "old_id": "codeforces_55_A"}
{"code": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n    var_39c = 1\n\n\nMOD = 10 ** 9 + 7\nN = int(input())\nA = list(map(int, input().split()))\n_lcm = 1\nfor a in A:\n    _lcm = _lcm * a // gcd(_lcm, a)\n    var_50c = 95\nans = _lcm * sum([pow(s, MOD - 2, MOD) for s in A]) % MOD\nprint(int(ans % MOD))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC152_E_to_177", "old_id": "atcoder_ABC152_E"}
{"code": "s = str(input())\nmy_str = ''\nfor c in s:\n    if c == '0' or c == '1':\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\n    var_igw = 81\nprint(my_str)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC043_B_to_178", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nfor i in w:\n    if i == 0:\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    var_kiq = 69\nprint(c // 2)\n", "id": "Add_IndependentVar_sample_from_codeforces_131_B_to_179", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nfor i in range(n):\n    if lst[i] not in l:\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] += 1\n    var_2be = 82\nres = 0\nfor i in range(n):\n    if l[lst[i]] > 1:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\n    var_fdh = 18\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_609_B_to_180", "old_id": "codeforces_609_B"}
{"code": "n, m = map(int, input().split())\nif n < 1:\n    if m < 1:\n        print(n, m)\n        quit()\n    print(\"Impossible\")\n    quit()\n    var_ew1 = 44\nif m > n:\n    min = m\n    max = n + m - 1\n    print(min, max)\n    var_7mr = 92\nif m <= n:\n    min = n\n    max = n + m - 1\n    if m == 0:\n        max = n\n    var_zpu = 69\n    print(min, max)\n", "id": "Add_IndependentVar_sample_from_codeforces_190_A_to_181", "old_id": "codeforces_190_A"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n    var_cnk = 41\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n    var_gal = 96\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n    var_rkh = 24\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n    var_tne = 36\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n    var_0nh = 7\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n    var_zws = 11\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n    var_bgq = 35\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    var_v7c = 0\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nfor p, e in fac.items():\n    x = e\n    for i in range(1, 99999999):\n        if x >= i:\n            x -= i\n            ans += 1\n        else:\n            break\n    var_x7o = 41\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_D_to_182", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nfor i in range(0, n):\n    if i % 2 == 0:\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    var_kmn = 47\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nfor i in a:\n    cnta[i] += 1\n    var_1u0 = 83\nfor i in a:\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\n    var_zgn = 90\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\n    var_d6h = 41\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nfor i in b:\n    cntb[i] += 1\n    var_u1j = 73\nfor i in b:\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\n    var_j6x = 34\nfor i in b:\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\n    var_hw2 = 30\nif valb != vala:\n    res = 0\n    var_2wm = 67\n    for i in a:\n        if i != vala:\n            res += 1\n    for i in b:\n        if i != valb:\n            res += 1\n    print(res)\nelse:\n    resa = 0\n    var_nub = 69\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    for i in a:\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n    for i in b:\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC111_C_to_183", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\n\n\ndef main():\n    S, W = map(int, input().split())\n    print(\"unsafe\") if (S <= W) else print(\"safe\")\n    var_fu2 = 7\n\n\nif __name__ == '__main__':\n    main()\n    var_8ha = 82\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC164_A_to_184", "old_id": "atcoder_ABC164_A"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nfor i in range(N):\n    if lst[i] == 0:\n        K -= 1\n    var_s1d = 10\n    if lst[i] > 0:\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    for j in range(0, k + 1):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    var_aqg = 86\n    return ans\n\n\nprint(check(K))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC107_C_to_185", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nfor i, c in enumerate(l):\n    if c == '0':\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    var_f3g = 15\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC129_E_to_186", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nfor i in l:\n    if i % m == 0:\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\n    var_q7t = 99\nmx = max(l2)\nfor i in range(n):\n    if l2[i] == mx:\n        ind = i\n    var_kj7 = 88\nprint(ind + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_450_A_to_187", "old_id": "codeforces_450_A"}
{"code": "x, y = list(map(int, input().split()))\na = 0\nwhile x >= 0 and y >= 22 or x >= 1 and y >= 12 or x >= 2 and y >= 2:\n    if a:\n        if y >= 22:\n            y -= 22\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            x -= 2\n            y -= 2\n    else:\n        if x >= 2 and y >= 2:\n            x -= 2\n            y -= 2\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            y -= 22\n    var_rj3 = 48\n    a = 1 - a\nprint(['Ciel', 'Hanako'][1 - a])\n", "id": "Add_IndependentVar_sample_from_codeforces_79_A_to_188", "old_id": "codeforces_79_A"}
{"code": "a, b, t = map(int, input().split())\ncookie = 0\ntime = a\nwhile time <= t + 0.5:\n    cookie += b\n    time += a\n    var_b3t = 54\nprint(cookie)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC125_A_to_189", "old_id": "atcoder_ABC125_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    var_yes = 13\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    for color in made_cout:\n        if color not in bought_count:\n            return print(- 1)\n        res += min(bought_count[color], made_cout[color])\n    print(res)\n\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solution()\n    var_fpz = 12\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_codeforces_408_B_to_190", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nfor i in range(N):\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    var_uow = 84\nif (mx == - 1):\n    print('0 0')\n    var_7h5 = 97\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n    var_o7g = 49\n", "id": "Add_IndependentVar_sample_from_codeforces_56_B_to_191", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = 0\ncl = 0\nfor z in txt:\n    if z.islower():\n        cl = cl + 1\n    else:\n        cu = cu + 1\n    var_hv3 = 58\nif cu > cl:\n    out = txt.upper()\n    var_na3 = 69\nelse:\n    out = txt.lower()\n    var_ib0 = 86\nprint(out)\n", "id": "Add_IndependentVar_sample_from_codeforces_59_A_to_192", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nfor _ in range(N - 1):\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    var_e46 = 93\n    adj[b].append(a)\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    for u in adj[v]:\n        if seen[u] == 0:\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\n    var_i1y = 67\nseq = deque()\nfor i in range(1, N + 1):\n    if child_num[i] == 0:\n        seq.append(i)\n    var_kxb = 54\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0:\n        print('First')\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    var_mc5 = 24\n    if child_num[par[par[c]]] == 0:\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC014_D_to_193", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n    var_5c7 = 51\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    var_2zw = 61\n    return finish_time, result\n\n\nresult = {}\nfor i in range(n):\n    time, duration = list(map(int, input().split()))\n    var_vnp = 48\n    task = Task(time, duration, index=i)\n    result.update({i: 0})\n    if task.time > finish_time and remaining.empty():\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\n    var_sin = 43\nfor key in result:\n    print(result.get(key))\n    var_db7 = 9\n", "id": "Add_IndependentVar_sample_from_codeforces_644_B_to_194", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nfor i in range(m):\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    var_l80 = 4\nc = 0\nfor i, v in path.items():\n    f = 0\n    for j in v:\n        if hp[i] <= hp[j]:\n            f = 1\n            break\n    if f == 0:\n        c += 1\n    var_2as = 18\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC166_C_to_195", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nfor i in range(N - 1):\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n    var_za2 = 62\nmod = 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    var_245 = 79\n    for u in graph[fro]:\n        if u == to:\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0:\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= 1\n    return caseNum\n\n\nans = dfs(0, - 1, K)\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC133_E_to_196", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nfor i in range(int(input())):\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    var_mi6 = 20\n    b = int(b) + 1\n    if x == 'M':\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\na, b, c = 0, 0, 0\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    var_v50 = 47\n    if min(a, b) > c:\n        c = min(a, b)\nprint(c)\n", "id": "Add_IndependentVar_sample_from_codeforces_629_B_to_197", "old_id": "codeforces_629_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= 5:\n    from math import gcd\n    var_o51 = 59\nelse:\n    from fractions import gcd\n    var_gjm = 19\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=1): return int(- (- a // b))\ndef round(x): return int((x * 2 + 1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD - 2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=1)\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nq, h, s, d = MAP()\nn = INT()\nbest1L = min(q * 4, h * 2, s)\nbest2L = min(d, best1L * 2)\nif n % 2 == 0:\n    print(best2L * (n // 2))\n    var_143 = 59\nelse:\n    print(best2L * (n // 2) + best1L)\n    var_a4z = 63\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC019_A_to_198", "old_id": "atcoder_AGC019_A"}
{"code": "LUCKY = \"abcd\"\nn = int(input())\ns = \"\"\nfor i in range(n):\n    s += LUCKY[i % 4]\n    var_3ek = 59\nprint(s)\n", "id": "Add_IndependentVar_sample_from_codeforces_110_B_to_199", "old_id": "codeforces_110_B"}
{"code": "r, D, x = map(int, input().split())\nfor i in range(2, 12):\n    print(int((r ** (i - 1)) * (x + D / (1 - r)) - D / (1 - r)))\n    var_slk = 56\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC127_B_to_200", "old_id": "atcoder_ABC127_B"}
{"code": "n = int(input())\ninput_array = []\nfor i in range(n):\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\n    var_b5s = 46\noutdated = []\nfor i in range(n):\n    for j in range(n):\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]):\n            outdated.append(input_array[i])\n    var_yva = 79\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nfor i in range(n):\n    current_item = input_array[i]\n    var_adb = 18\n    cost = current_item[3]\n    if (current_item not in outdated and cost < minimum_cost):\n        minimum_cost = current_item[3]\n        input_number = i + 1\nprint(input_number)\n", "id": "Add_IndependentVar_sample_from_codeforces_106_B_to_201", "old_id": "codeforces_106_B"}
{"code": "s, l = (input(), 2019)\nm, a, r = ([1] + [0] * l, 0, 0)\nfor i, e in enumerate(s[:: - 1]):\n    a += int(e) * pow(10, i, l)\n    r += m[a % l]\n    var_c62 = 74\n    m[a % l] += 1\nprint(r)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC164_D_to_202", "old_id": "atcoder_ABC164_D"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nfor i in range(t):\n    op = input().split()\n    if op[0] == 'alloc':\n        pos = 0\n        for j in range(m):\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n        else:\n            print(\"NULL\")\n    if op[0] == 'erase':\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            for j in range(m):\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n    var_5y0 = 48\n    if op[0] == \"defragment\":\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        for j in range(cnt):\n            alocuente.append(0)\n", "id": "Add_IndependentVar_sample_from_codeforces_7_B_to_203", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    var_5hs = 45\n    for i in range(n):\n        count[i] = [0] * n\n    ans = - 1\n    for k in range(m):\n        x, y = map(int, input().split())\n        x -= 1\n        y -= 1\n        found = False\n        for i in range(x - 2, x + 1):\n            for j in range(y - 2, y + 1):\n                if i >= 0 and i < n and j >= 0 and j < n:\n                    count[i][j] += 1\n                    if count[i][j] == 9:\n                        found = True\n        if found:\n            ans = k + 1\n            break\n    print(ans)\n\n\nsolve_case()\n", "id": "Add_IndependentVar_sample_from_codeforces_203_B_to_204", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nfor i in pre + 1:\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\n    var_rgn = 12\nfor i in range(1, m + 1):\n    for j, k in enumerate(l):\n        ca = 0\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n    var_8n0 = 59\n    if len(rem) > 0:\n        for j in rem:\n            l.pop(j)\n        rem = []\n    if len(l) == 0:\n        print(- 1)\n        break\nelse:\n    for i in l:\n        ca = 0\n        for j in i:\n            ca += c[j, 0]\n        if ans == 0:\n            ans = ca\n        else:\n            ans = min(ans, ca)\n    print(ans)\n    var_j6d = 46\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC167_C_to_205", "old_id": "atcoder_ABC167_C"}
{"code": "age = int(input())\nif age == 1:\n    print('Hello World')\n    var_5kl = 67\nelse:\n    a, b = [int(input()) for i in range(2)]\n    print(a + b)\n    var_h0n = 2\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC112_A_to_206", "old_id": "atcoder_ABC112_A"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nfor i in a:\n    cnt[i] += 1\n    var_fu1 = 44\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    var_b1t = 85\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "Add_IndependentVar_sample_from_codeforces_350_B_to_207", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    var_anw = 31\n    a = [int(i) for i in input().split(\" \")]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns += 1\n        for i in range(len(a)):\n            if a[i] != - 1 and a[i] <= counter:\n                counter += 1\n                a[i] = - 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "Add_IndependentVar_sample_from_codeforces_583_B_to_208", "old_id": "codeforces_583_B"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n    b[a[i] - 1] = i\n    var_0n7 = 77\nres = 0\nfor i in range(1, n):\n    res += abs(b[i] - b[i - 1])\n    var_0bx = 54\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_612_B_to_209", "old_id": "codeforces_612_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nfor i in range(1, n):\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\n    var_ujz = 43\nprint(- 1 if id == n else id + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_242_B_to_210", "old_id": "codeforces_242_B"}
{"code": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\n\nN = ri()\nans = 0\nfor i in range(1, N + 1):\n    ans += i * (N // i) * (N // i + 1) // 2\n    var_v8y = 6\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC172_D_to_211", "old_id": "atcoder_ABC172_D"}
{"code": "h, a = map(int, input().split(\" \"))\nsho = int(h / a)\nam = int(h % a)\nif am != 0:\n    sho += 1\n    var_46j = 31\nelse:\n    pass\n    var_hmi = 28\nprint(sho)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC153_A_to_212", "old_id": "atcoder_ABC153_A"}
{"code": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\nN, M = [int(x) for x in stdin.readline().split()]\nA = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\ncum_remainders = (np.hstack([0, A]) % M).cumsum() % M\nremainder_counts = Counter(cum_remainders)\ncombinations = 0\nfor count in remainder_counts.values():\n    combinations += count * (count - 1) // 2\n    var_jd1 = 39\nprint(combinations)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC105_D_to_213", "old_id": "atcoder_ABC105_D"}
{"code": "a, b = map(int, input().split())\nc = 0\nfor i in range(2):\n    c += max(a, b)\n    var_ch5 = 25\n    if a >= b:\n        a -= 1\n    else:\n        b -= 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC124_A_to_214", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != 1:\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    for i in ip:\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n    var_jak = 90\nelse:\n    st = ip\n    var_ibd = 51\nprint(int(st))\n", "id": "Add_IndependentVar_sample_from_codeforces_514_A_to_215", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    for c in s:\n        if c != '1':\n            break\n        l += 1\n    if l >= k:\n        return 1\n    var_9cm = 68\n    return s[l]\n\n\nprint(main())\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC106_C_to_216", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nfor _ in range(q):\n    ql = list(map(int, input().split()))\n    if ql[0] == 2:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    var_8le = 88\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC127_F_to_217", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    var_mky = 34\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    for piece in pieces:\n        if piece[1] == 'A':\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n    for i in range(len(pieces) - 1, - 1, - 1):\n        if pieces[i][1] == 'A':\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n    var_8y9 = 67\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n    var_s93 = 24\n", "id": "Add_IndependentVar_sample_from_codeforces_632_B_to_218", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n    var_xt9 = 57\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n    var_eju = 97\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n    var_iao = 66\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    var_v4e = 44\n    return r\n\n\ndef solve():\n    l = []\n    for i in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    var_cu4 = 30\n    for i in t:\n        l.append(\"\".join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\n\n\nif __name__ == \"__main__\":\n    solve()\n    var_c39 = 90\n", "id": "Add_IndependentVar_sample_from_codeforces_61_B_to_219", "old_id": "codeforces_61_B"}
{"code": "import collections\n\n\ndef run(s, t):\n    ss = sorted(list(collections.Counter(s).values()))\n    var_i50 = 95\n    tt = sorted(list(collections.Counter(t).values()))\n    if ss == tt:\n        return 'Yes'\n    else:\n        return 'No'\n\n\ndef main():\n    s = input()\n    t = input()\n    print(run(s, t))\n    var_s05 = 1\n\n\nif __name__ == '__main__':\n    main()\n    var_zsf = 51\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC110_C_to_220", "old_id": "atcoder_ABC110_C"}
{"code": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = LI()\nif a > 0:\n    print('Positive')\n    var_ic0 = 89\nelif a <= 0 and b >= 0:\n    print('Zero')\n    var_l1v = 18\nelse:\n    if (a + b) % 2 == 0:\n        print('Negative')\n    else:\n        print('Positive')\n    var_sut = 5\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC002_A_to_221", "old_id": "atcoder_AGC002_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float('inf')\nans = 0\na.sort(reverse=True)\nfor j in range(n):\n    ans += max(0, min(pre - 1, a[j]))\n    pre = max(0, min(pre - 1, a[j]))\n    var_sc6 = 8\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_624_B_to_222", "old_id": "codeforces_624_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2:\n    print(\"No\")\n    exit()\n    var_5pl = 87\nfor i in Sa:\n    if c[i] != 2:\n        print(\"No\")\n        exit()\n    var_6vl = 95\nprint(\"Yes\")\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC132_A_to_223", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    var_2du = 16\n    high.sort()\n    if n % 2:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n    var_ho7 = 30\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_E_to_224", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nfor i in range(n):\n    a, b = map(int, input().split())\n    l[a] = b\n    var_joq = 65\nif l[0] > 0:\n    dp[0] = 1\n    var_sai = 98\nmx = 0\nfor i in range(1, 1000010):\n    if (l[i] == 0):\n        dp[i] = dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    var_9o4 = 82\n    if (dp[i] > mx):\n        mx = dp[i]\nprint(n - mx)\n", "id": "Add_IndependentVar_sample_from_codeforces_607_A_to_225", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open(0).read().split())\nXY = list(zip(* [iter(XY)] * 2))\nfor i, (x, y) in enumerate(XY):\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0\n    var_hog = 91\n    for a, b in zip(D, D[1:]):\n        if b - a >= pi:\n            ans = (b - a) - pi\n    print(ans / (2 * pi))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC021_B_to_226", "old_id": "atcoder_AGC021_B"}
{"code": "import math\nn = int(input())\nx = 1\nwhile math.log2(n) % 1:\n    x += 1\n    n -= 2 ** (int(math.log2(n)))\n    var_iy5 = 5\nprint(x)\n", "id": "Add_IndependentVar_sample_from_codeforces_579_A_to_227", "old_id": "codeforces_579_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nfor i in range(1, N + 1):\n    time_value[i] = tuple(int(a) for a in input().split())\n    var_ogs = 22\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nfor t in range(0, T):\n    dp[0][t] = 0\n    var_8dm = 44\nfor n in range(1, N + 1):\n    dp[n][0] = 0\n    for t in range(1, T):\n        if time_value[n][TIME] > t:\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n    var_fwu = 94\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nfor n in range(N - 1, 0, - 1):\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    var_cvo = 88\n    if t < 0:\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\nprint(max_val)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC145_E_to_228", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < B:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n    var_5fi = 23\n    for i in range(H):\n        print(''.join(answer[i]))\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    var_5fp = 31\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n    var_toy = 7\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC038_A_to_229", "old_id": "atcoder_AGC038_A"}
