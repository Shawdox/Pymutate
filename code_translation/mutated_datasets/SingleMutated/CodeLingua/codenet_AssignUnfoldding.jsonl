{"code": "s = list(input())\nmods = [0]; mods = mods*(len(s))\ncountRemainder = [0]; countRemainder = countRemainder * 2019\ncnt = 0\n\n\nm = 1\nmod = 0\nfor i in range(len(s)):\n    mod += int(s[len(s) - i - 1]) * m\n\n    mod %= 2019\n    m *= 10\n    m %= 2019\n\n    countRemainder[mod] += 1\n\ncountRemainder[0] += 1\n\nfor i in range(2019):\n    cnt += int(countRemainder[i] * (countRemainder[i] - 1) / 2)\n\nprint(cnt)\n", "id": "AssignUnfoldding_sample_from_s752993784_to_0", "old_id": "s752993784"}
{"code": "N = int(input())\nA = []\nfor _ in range(2):\n    s = list(map(int, input().split()))\n    A.append(s)\n\n\nans = []\n\ncount = 0\nfor i in range(N):\n    baselis = A[0]\n    groundlis = A[1]\n    count = 0\n    count = count + sum(baselis[0:i+1]); count = count + sum(groundlis[i:N+1])\n    ans.append(count)\n\nprint(max(ans))\n", "id": "AssignUnfoldding_sample_from_s170274782_to_1", "old_id": "s170274782"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = 10; ans = ans ** 18\n\nfor i in range(1, int(n ** (1 / 2)) + 2):\n    if n % i != 0:\n        continue\n    j = n; j = j // i\n    ans = min(ans, i + j - 2)\n\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s662673721_to_2", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N; R = R - K\nmod = 10**9; mod = mod + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range(1, K+1):\n    if N - K + 1 < i:\n        ans = 0\n    else:\n        ans = fact(R+1, i); ans = ans*fact(K-1, i-1)\n    print(int(ans) % mod)\n", "id": "AssignUnfoldding_sample_from_s790754864_to_3", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = 10; ans = ans**6\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s636719275_to_4", "old_id": "s636719275"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-1)**i) for i in range(n)]) / 2)\n\nresult = str(m1)\n\nm = [None]; m = m * n\nm[0] = m1\nfor i in range(1, n):\n    m[i] = a[i-1]; m[i] = m[i] - m[i-1]\n\nprint(' '.join([str(x*2) for x in m]))\n", "id": "AssignUnfoldding_sample_from_s225615697_to_5", "old_id": "s225615697"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == 0:\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-1]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn); target = target-1\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "AssignUnfoldding_sample_from_s949655009_to_6", "old_id": "s949655009"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = [0]; B = B * N\n\nfor i in range(N - 1, -1, -1):\n    tmp_sum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        tmp_sum += B[j]\n        tmp_sum %= 2\n    B[i] = tmp_sum; B[i] = B[i] ^ A[i]\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "id": "AssignUnfoldding_sample_from_s103029464_to_7", "old_id": "s103029464"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d); end = end - 1\n    first = end - len(T); first = first + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "id": "AssignUnfoldding_sample_from_s826716211_to_8", "old_id": "s826716211"}
{"code": "X = int(input())\nh = X; h = h // 500\na = (X % 500); a = a // 5\ny = h * 1000; y = y + a * 5\nprint(y)\n", "id": "AssignUnfoldding_sample_from_s353603279_to_9", "old_id": "s353603279"}
{"code": "X, t = map(int, input().split())\n\nif X > t:\n    answer = X; answer = answer - t\nelif X <= t:\n    answer = 0\n\nprint(answer)\n", "id": "AssignUnfoldding_sample_from_s000375264_to_10", "old_id": "s000375264"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[0] == '1':\n        n = not n\n    if operation[0] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\ns = left+s; s = s+right\nprint(s[::-1] if n else s)\n", "id": "AssignUnfoldding_sample_from_s621701371_to_11", "old_id": "s621701371"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\n\n\ndef main():\n    A.sort()\n    ans = A[-1]; ans = ans - A[0]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "AssignUnfoldding_sample_from_s636592395_to_12", "old_id": "s636592395"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a; r = r % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "id": "AssignUnfoldding_sample_from_s137613418_to_13", "old_id": "s137613418"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt; ans = ans * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i; j = j + d\n        k = j; k = k + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s922746568_to_14", "old_id": "s922746568"}
{"code": "h, a = map(int, input().strip().split())\n\nans = h; ans = ans // a\nama = h; ama = ama % a\n\nif ama != 0:\n    ans += 1\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s267172486_to_15", "old_id": "s267172486"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\ns = A[0]; s = s ^ A[1]\nfor i in range(2, N):\n    s = s ^ A[i]\n\nB = [0]; B = B*N\nfor i in range(N):\n    B[i] = s; B[i] = B[i] ^ A[i]\n\nL = [str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "id": "AssignUnfoldding_sample_from_s761121328_to_16", "old_id": "s761121328"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa; cc = cc // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-1)\n        exit()\nprint(bb)\n", "id": "AssignUnfoldding_sample_from_s986062252_to_17", "old_id": "s986062252"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M; tmp = tmp // my_lcm\n\n\nans = (tmp + 1); ans = ans // 2\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s817205687_to_18", "old_id": "s817205687"}
{"code": "import numpy as np\n\nn, k = map(int, input().split())\n\nif n > k:\n    tmp = n; tmp = tmp % k\n    if tmp >= k - tmp:\n        ans = k; ans = ans - tmp\n    else:\n        ans = tmp\nelif n < k:\n    if n >= k - n:\n        ans = k; ans = ans - n\n    else:\n        ans = n\nelse:\n    ans = 0\n\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s058944700_to_19", "old_id": "s058944700"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2; self.size = self.size**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]; self.seg = self.seg*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1); k = k//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1); q = q//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "AssignUnfoldding_sample_from_s764169243_to_20", "old_id": "s764169243"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if i == S[-1] or i == S[0]:\n        ans += 1\n    else:\n        left = 0\n        right = n; right = right-1\n        while right-left > 1:\n            mid = (left+right); mid = mid//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s315467749_to_21", "old_id": "s315467749"}
{"code": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N:\n        return abs(A - a) + abs(B - b) + abs(C - c) - 30 if min(a, b, c) > 0 else 10 ** 9\n    no_add = dfs(cur + 1, a, b, c)\n    add_a = dfs(cur + 1, a + l[cur], b, c); add_a = add_a + 10\n    add_b = dfs(cur + 1, a, b + l[cur], c); add_b = add_b + 10\n    add_c = dfs(cur + 1, a, b, c + l[cur]); add_c = add_c + 10\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs(0, 0, 0, 0))\n", "id": "AssignUnfoldding_sample_from_s951065247_to_22", "old_id": "s951065247"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N; num_r = num_r - num_w\n\ncomp = \"R\"*num_r; comp = comp + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s031459110_to_23", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10; INF = INF ** 18\nMOD = 10 ** 9; MOD = MOD + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-1]:\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "id": "AssignUnfoldding_sample_from_s681105182_to_24", "old_id": "s681105182"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//2):\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0]:\n        ans = n-ce.most_common()[0][1]; ans = ans-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n; ans = ans-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]; ans = ans-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]; ans = ans-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "AssignUnfoldding_sample_from_s101447419_to_25", "old_id": "s101447419"}
{"code": "A, B = map(int, input().split())\n\nmin = B; min = min * 10\nmax = (B+1) * 10; max = max - 1\n\nans = -1\nfor i in range(min, max+1):\n    if int(i * 0.08) == A:\n        ans = i\n        break\n\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s764356857_to_26", "old_id": "s764356857"}
{"code": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = 1, 1, 1\n\nwhile x**2 + y**2 + z**2 + x*y + y*z + z*x <= n:\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n            i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z; i = i + z * x\n            A[i - 1] += 1\n            z += 1\n        z = 1\n        y += 1\n    y, z = 1, 1\n    x += 1\nfor i in range(n):\n    print(int(A[i]))\n", "id": "AssignUnfoldding_sample_from_s827462150_to_27", "old_id": "s827462150"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]); sum_A[i + 1] = sum_A[i + 1] % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "AssignUnfoldding_sample_from_s975943078_to_28", "old_id": "s975943078"}
{"code": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X; r = r // D\n    if abs(r) > K:\n        print(abs(X) - K * D)\n        exit()\n    a = X; a = a - r * D\n    if (K - r) % 2 == 0:\n        print(a)\n    else:\n        print(abs(D - a))\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AssignUnfoldding_sample_from_s814885508_to_29", "old_id": "s814885508"}
{"code": "H, W = map(int, input().split())\nh, w = map(int, input().split())\nans = H * W; ans = ans - (h * W + w * H - h * w)\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s043174379_to_30", "old_id": "s043174379"}
{"code": "N, A, B = map(int, input().split())\nans = A * (N//(A+B)); ans = ans + min(A, N % (A+B))\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s246930871_to_31", "old_id": "s246930871"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N):\n    tmp = a[i - 1]; tmp = tmp + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i]; a[i - 1] = a[i - 1] - x\n            a[i] = 0\n        else:\n            a[i] = a[i]; a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "id": "AssignUnfoldding_sample_from_s708549466_to_32", "old_id": "s708549466"}
{"code": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[1::2][::-1]; b = b+a[::2]\nif len(a) % 2 == 0:\n    print(' '.join(b))\nelse:\n    print(' '.join(b[::-1]))\n", "id": "AssignUnfoldding_sample_from_s735480710_to_33", "old_id": "s735480710"}
{"code": "import math\nMOD = 10**9; MOD = MOD+7\nf = math.factorial\nn, m = sorted(map(int, input().split()))\nprint(max(2 - m + n, 0)*f(n)*f(m) % MOD)\n", "id": "AssignUnfoldding_sample_from_s840967243_to_34", "old_id": "s840967243"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1]; v = v + accum[p-1][p-1]\n        print(v)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AssignUnfoldding_sample_from_s048491063_to_35", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]; self.rank = self.rank*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]; A = A*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]; A = A*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]; A[a] = A[a]*a\n        if (mod > 0):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num; x = x & (-num)\n    y = num; y = y+x\n    z = num; z = z & (~y)\n    z //= x\n    z = z >> 1\n    num = y; num = num | z\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]; A = A*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == \"bool\"):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "AssignUnfoldding_sample_from_s977408144_to_36", "old_id": "s977408144"}
{"code": "n, a, b = map(int, input().split())\nans = n//(a+b); ans = ans*a\nr = min(n % (a+b), a)\nans += r\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s615966179_to_37", "old_id": "s615966179"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if i == 0 or i == H+1:\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x]; dist[y][x+1] = dist[y][x+1] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x]; dist[y][x-1] = dist[y][x-1] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x]; dist[y+1][x] = dist[y+1][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x]; dist[y-1][x] = dist[y-1][x] + 1\n                    visited[y-1][x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s951169509_to_38", "old_id": "s951169509"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10; INF = INF ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "id": "AssignUnfoldding_sample_from_s344468705_to_39", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList); maxColor = maxColor + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "AssignUnfoldding_sample_from_s964794058_to_40", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10; ans = ans ** 10\n\n    for k in range(max(X, Y) + 1):\n        total = 2 * C * k + A * max(0, X - k); total = total + B * max(0, Y - k)\n        if total < ans:\n            ans = total\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "AssignUnfoldding_sample_from_s724326345_to_41", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9; MOD = MOD + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n\n    for i in range(1, N + 1):\n        if i in s:\n            ans = i\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AssignUnfoldding_sample_from_s878873709_to_42", "old_id": "s878873709"}
{"code": "I = input\ns = I(); s = s*2\nprint(['No', 'Yes'][I() in s])\n", "id": "AssignUnfoldding_sample_from_s592421258_to_43", "old_id": "s592421258"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9; MOD = MOD+7\ninf = float('inf')\nIINF = 10; IINF = IINF**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0]; s = s * N\n    t = [0]; t = t * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AssignUnfoldding_sample_from_s664563518_to_44", "old_id": "s664563518"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]; c = c*n\nfor i in range(1, n):\n    if a[i] == \"C\" and a[i-1] == \"A\":\n        c[i] = c[i-1]; c[i] = c[i]+1\n    else:\n        c[i] = c[i-1]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n", "id": "AssignUnfoldding_sample_from_s759499751_to_45", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c; nc = nc + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9; MOD = MOD + 7\nINF = 2; INF = INF**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "id": "AssignUnfoldding_sample_from_s124725275_to_46", "old_id": "s124725275"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a); s = s/(4*m)\nif a[m-1] >= s:\n    print('Yes')\nelse:\n    print('No')\n", "id": "AssignUnfoldding_sample_from_s777789287_to_47", "old_id": "s777789287"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\n\nfor i in range(1, 2**10):\n    tmp = 0\n    lst = [0]; lst = lst*n\n    for j in range(10):\n        if (i >> j) & 1:\n            for k in range(n):\n                lst[k] += F[k][j]\n    for k in range(n):\n        tmp += P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s906994739_to_48", "old_id": "s906994739"}
{"code": "N, M = map(int, input().split())\n\na = N * (N - 1); a = a // 2\nb = M * (M - 1); b = b // 2\n\nprint(a + b)\n", "id": "AssignUnfoldding_sample_from_s167793578_to_49", "old_id": "s167793578"}
{"code": "import numpy\nn = int(input())\na = []\nfor i in range(2):\n    a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nfor i in range(n):\n    check = res_0[i]; check = check + res_1[n-1-i]\n    ans = max(ans, check)\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s146553386_to_50", "old_id": "s146553386"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][0]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n\nused = []\nB = dp[N][T-1]\nj = T; j = j-1\nfor i in range(N-1, -1, -1):\n    if B == dp[i][j]:\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n\nans = dp[N][T-1]\nc = 0\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n\nprint(ans+c)\n", "id": "AssignUnfoldding_sample_from_s793709854_to_51", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = 10; ans = ans**10\nfor i in range(101):\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s246280701_to_52", "old_id": "s246280701"}
{"code": "import sys\nfrom collections import Counter, defaultdict\n\nINF = float('inf')\nMOD = 10 ** 9; MOD = MOD + 7\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return input()\n\n\ndef main():\n    n = II()\n    S = SI()\n    C = Counter(S)\n\n    return 'Yes' if C['R'] > n - C['R'] else 'No'\n\n\nprint(main())\n", "id": "AssignUnfoldding_sample_from_s007458552_to_53", "old_id": "s007458552"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-1])\nA = [0]+A; A = A+[0]\ndiff = [0 for x in range(N)]\nfor i in range(1, N+1):\n    dif = abs(A[i]-A[i-1])+abs(A[i]-A[i+1]); dif = dif-abs(A[i-1]-A[i+1])\n    ans += abs(A[i]-A[i-1])\n    diff[i-1] = dif\n\nfor i in range(N):\n    print(ans-diff[i])\n", "id": "AssignUnfoldding_sample_from_s242961129_to_54", "old_id": "s242961129"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku); sum_select = sum_select + sum(selected_only)\nans = cnt_type*cnt_type; ans = ans + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type; tmp = tmp + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "id": "AssignUnfoldding_sample_from_s804484425_to_55", "old_id": "s804484425"}
