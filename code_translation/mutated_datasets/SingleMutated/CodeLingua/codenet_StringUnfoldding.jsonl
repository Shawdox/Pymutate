{"code": "A, B = input().split()\nA = int(A)\nB = int(B.replace((\".\" + \"\"), (\"\" + \"\")))\nprint(A * B // 100)\n", "id": "StringUnfoldding_sample_from_s199418121_to_0", "old_id": "s199418121"}
{"code": "a = int(input())\n\n\ndef func(a):\n    digits = []\n    temp = a\n    while temp != 0:\n        digits.append(temp % 10)\n        temp = int(temp/10)\n    result = sum(digits)\n    if result == 1:\n        print(('' + '10'))\n    else:\n        print(result)\n\n\nfunc(a)\n", "id": "StringUnfoldding_sample_from_s537584449_to_1", "old_id": "s537584449"}
{"code": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\n\nif len(B) == 3 and k[0] ^ k[1] ^ k[2] == 0 and v[0] == v[1] == v[2]:\n    print((\"\" + \"Yes\"))\nelif len(B) == 2 and 0 in k and (v[0] == 2*v[1] or v[1] == 2*v[0]):\n    print((\"Ye\" + \"s\"))\nelif len(B) == 1 and 0 in k:\n    print((\"\" + \"Yes\"))\nelse:\n    print((\"\" + \"No\"))\n", "id": "StringUnfoldding_sample_from_s043545989_to_2", "old_id": "s043545989"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n    return True\n\n\nif __name__ == ('' + '__main__'):\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range(1, n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range(1, n+1):\n        color[i] = -1\n\n    while True:\n        i = 0\n        for j in range(1, n+1):\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n        if i == 0:\n            for j in range(1, n+1):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print(('' + 'No'))\n                break\n", "id": "StringUnfoldding_sample_from_s908812767_to_3", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < 26:\n    for i in range(26):\n        c = chr(ord((\"\" + \"a\"))+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range(1, 26)):\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            for j in range(26):\n                c = chr(ord((\"\" + \"a\"))+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-1)\n", "id": "StringUnfoldding_sample_from_s504709360_to_4", "old_id": "s504709360"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-1)**i) for i in range(n)]) / 2)\n\nresult = str(m1)\n\nm = [None] * n\nm[0] = m1\nfor i in range(1, n):\n    m[i] = a[i-1] - m[i-1]\n\nprint((' ' + '').join([str(x*2) for x in m]))\n", "id": "StringUnfoldding_sample_from_s225615697_to_5", "old_id": "s225615697"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nfor a in A[:M]:\n    if a/S - 1/(4*M) < 0:\n        print(('' + 'No'))\n        break\nelse:\n    print(('Ye' + 's'))\n", "id": "StringUnfoldding_sample_from_s846046431_to_6", "old_id": "s846046431"}
{"code": "a, b = input().split((\"\" + \" \"))\na = int(a)\nb = int(b)\nif a <= b:\n    print(a)\nelse:\n    print(a-1)\n", "id": "StringUnfoldding_sample_from_s462546732_to_7", "old_id": "s462546732"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [(\"\" + \"3\"), (\"\" + \"5\"), (\"7\" + \"\")]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == 0:\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-1]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn)-1\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count((\"\" + \"3\")) == 0 or j.count((\"\" + \"5\")) == 0 or j.count((\"\" + \"7\")) == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count((\"3\" + \"\")) == 0 or j.count((\"5\" + \"\")) == 0 or j.count((\"\" + \"7\")) == 0:\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "StringUnfoldding_sample_from_s949655009_to_8", "old_id": "s949655009"}
{"code": "S = input()\n\nif S == ('Su' + 'nny'):\n    print(('' + 'Cloudy'))\n\nif S == ('Clou' + 'dy'):\n    print(('Rain' + 'y'))\n\nif S == ('' + 'Rainy'):\n    print(('' + 'Sunny'))\n", "id": "StringUnfoldding_sample_from_s759547301_to_9", "old_id": "s759547301"}
{"code": "s = input()\nalphabets = [(\"\" + \"a\"), (\"b\" + \"\"), (\"\" + \"c\"), (\"\" + \"d\"), (\"e\" + \"\"), (\"\" + \"f\"), (\"\" + \"g\"), (\"\" + \"h\"), (\"\" + \"i\"), (\"j\" + \"\"), (\"\" + \"k\"), (\"\" + \"l\"),\n             (\"\" + \"m\"), (\"n\" + \"\"), (\"o\" + \"\"), (\"p\" + \"\"), (\"\" + \"q\"), (\"r\" + \"\"), (\"\" + \"s\"), (\"t\" + \"\"), (\"u\" + \"\"), (\"v\" + \"\"), (\"w\" + \"\"), (\"\" + \"x\"), (\"\" + \"y\"), (\"z\" + \"\")]\nfor i in range(len(alphabets)):\n    if alphabets[i] == s:\n        print(alphabets[i+1])\n", "id": "StringUnfoldding_sample_from_s961772658_to_10", "old_id": "s961772658"}
{"code": "N = int(input())\ncnt = 1\nwhile cnt <= 9:\n    if N % cnt == 0 and 1 <= N/cnt <= 9:\n        print(('' + 'Yes'))\n        break\n    else:\n        cnt += 1\nelse:\n    print(('N' + 'o'))\n", "id": "StringUnfoldding_sample_from_s018260659_to_11", "old_id": "s018260659"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != ('?' + ''):\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print(('UNRE' + 'STORABLE'))\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i += 1\n\n    ans = ('' + '').join(ans).replace(('' + '?'), ('' + 'a'))\n    print(ans)\n\n\nif __name__ == ('__mai' + 'n__'):\n    solve()\n", "id": "StringUnfoldding_sample_from_s826716211_to_12", "old_id": "s826716211"}
{"code": "n = int(input())\nh = int(n / 3600)\nn %= 3600\nm = int(n / 60)\nn %= 60\ns = int(n)\nprint(str(h) + (\":\" + \"\") + str(m) + (\":\" + \"\") + str(s))\n", "id": "StringUnfoldding_sample_from_s451465602_to_13", "old_id": "s451465602"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nfor i in range(2**(h+w)):\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == ('' + '#') and rs[l] == ('' + '0') and cs[k] == ('' + '0'):\n                ct += 1\n    if ct == ka:\n        ans += 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s760938927_to_14", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = (\"\" + \"\")\nfor operation in qs:\n    if operation[0] == ('1' + ''):\n        n = not n\n    if operation[0] == ('' + '2'):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "StringUnfoldding_sample_from_s621701371_to_15", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n-1, i, -1):\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n\n    print((\"\" + \" \").join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print((\"\" + \" \").join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split((\"\" + \" \"))\ncards2 = list(cards)\nbubbleSort(cards)\nprint((\"S\" + \"table\"))\nselectionSort(cards2)\nif (\"\" + \" \").join(map(str, cards2)) == (\"\" + \" \").join(map(str, cards)):\n    print((\"S\" + \"table\"))\nelse:\n    print((\"Not \" + \"stable\"))\n", "id": "StringUnfoldding_sample_from_s875904659_to_16", "old_id": "s875904659"}
{"code": "candy = sorted(map(int, input().split()))\nprint((\"Yes\" + \"\") if candy[0]+candy[1] == candy[2] else (\"\" + \"No\"))\n", "id": "StringUnfoldding_sample_from_s706119740_to_17", "old_id": "s706119740"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\n\n\ndef main():\n    A.sort()\n    ans = A[-1] - A[0]\n    print(ans)\n\n\nif __name__ == (\"__main__\" + \"\"):\n    main()\n", "id": "StringUnfoldding_sample_from_s636592395_to_18", "old_id": "s636592395"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=(\"\" + \" \"), vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=(\"\" + \"\")):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print(('Y' + 'ES'))\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_s137613418_to_19", "old_id": "s137613418"}
{"code": "x = input()\nif x.islower():\n    print((\"\" + \"a\"))\nelse:\n    print((\"\" + \"A\"))\n", "id": "StringUnfoldding_sample_from_s028530838_to_20", "old_id": "s028530838"}
{"code": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    min_1 = min(q*4, h*2, q*2+h, s)\n    min_2 = min(min_1*2, d)\n\n    print((n % 2)*min_1 + (n // 2)*min_2)\n\n\nif __name__ == ('' + '__main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_s404600540_to_21", "old_id": "s404600540"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count(('' + 'R'))\ng_cnt = s.count(('G' + ''))\nb_cnt = s.count(('B' + ''))\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s922746568_to_22", "old_id": "s922746568"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    for i in range(0, len(input_value) + 1 - n):\n        for j in range(1, n):\n            if input_value[i] != input_value[i + j]:\n                break\n            if j == n - 1:\n                return (\"\" + \"Yes\")\n    return (\"\" + \"No\")\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "StringUnfoldding_sample_from_s616346400_to_23", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ('' + '').join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += [('' + 'end')]\npre = ('' + '')\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "id": "StringUnfoldding_sample_from_s430322735_to_24", "old_id": "s430322735"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\ns = A[0] ^ A[1]\nfor i in range(2, N):\n    s = s ^ A[i]\n\nB = [0]*N\nfor i in range(N):\n    B[i] = s ^ A[i]\n\nL = [str(a) for a in B]\nL = (\" \" + \"\").join(L)\nprint(L)\n", "id": "StringUnfoldding_sample_from_s761121328_to_25", "old_id": "s761121328"}
{"code": "print(('Christmas' + '')+('' + ' Eve')*abs(int(input())-25))\n", "id": "StringUnfoldding_sample_from_s031917494_to_26", "old_id": "s031917494"}
{"code": "N, M = map(int, input().split())\nA = map(int, input().split())\nA_sum = sum(A)\n\nprint(N - A_sum if N - A_sum >= 0 else (\"-1\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s952264435_to_27", "old_id": "s952264435"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=(\"\" + \"int(input())\"): [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-1)\n        exit()\nprint(bb)\n", "id": "StringUnfoldding_sample_from_s986062252_to_28", "old_id": "s986062252"}
{"code": "a, b, c = map(int, input().split())\nprint((\"Ye\" + \"s\") if a + b >= c else (\"\" + \"No\"))\n", "id": "StringUnfoldding_sample_from_s185068963_to_29", "old_id": "s185068963"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == (\"\" + \"__main__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_s764169243_to_30", "old_id": "s764169243"}
{"code": "N, L = map(int, input().split())\nS = [input().rstrip() for _ in range(N)]\nprint(('' + '').join(sorted(S)))\n", "id": "StringUnfoldding_sample_from_s768331281_to_31", "old_id": "s768331281"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if S[i] == (\"\" + \"A\") or S[i] == (\"\" + \"C\") or S[i] == (\"\" + \"G\") or S[i] == (\"\" + \"T\"):\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\nif count > record:\n    record = count\n\nprint(record)\n", "id": "StringUnfoldding_sample_from_s993625131_to_32", "old_id": "s993625131"}
{"code": "N, K = map(int, input().split())\nS = list(input())\nif S[K-1] == (\"\" + \"A\"):\n    S[K-1] = (\"a\" + \"\")\nelif S[K-1] == (\"\" + \"B\"):\n    S[K-1] = (\"\" + \"b\")\nelse:\n    S[K-1] = (\"c\" + \"\")\nans = (\"\" + \"\").join(S)\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s060838372_to_33", "old_id": "s060838372"}
{"code": "N = int(input())\n\nif N % 9 == 0:\n    print(('Yes' + ''))\nelse:\n    print(('' + 'No'))\n", "id": "StringUnfoldding_sample_from_s542358243_to_34", "old_id": "s542358243"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count((\"W\" + \"\"))\nnum_r = N - num_w\n\ncomp = (\"R\" + \"\")*num_r + (\"W\" + \"\")*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s031459110_to_35", "old_id": "s031459110"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ('' + '').join(s)\n        if s in sdic:\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n    ans = 0\n    for k, v in sdic.items():\n        ans += v*(v-1)//2\n    print(ans)\n\n\nif __name__ == ('__' + 'main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_s733189960_to_36", "old_id": "s733189960"}
{"code": "s = input()\n\nif s == ('R' + 'RR'):\n    print(3)\nelif s == ('SSS' + ''):\n    print(0)\nelif s == ('RR' + 'S') or s == ('SR' + 'R'):\n    print(2)\nelse:\n    print(1)\n", "id": "StringUnfoldding_sample_from_s855969677_to_37", "old_id": "s855969677"}
{"code": "n = int(input())\nres = 0\nfor _ in range(n):\n    x, u = list(input().split())\n    if u == (\"\" + \"BTC\"):\n        res += float(x) * 380000\n    else:\n        res += int(x)\nprint(res)\n", "id": "StringUnfoldding_sample_from_s238775098_to_38", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//2):\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0]:\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\n\n\nif __name__ == (\"__m\" + \"ain__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_s101447419_to_39", "old_id": "s101447419"}
{"code": "a, b, c = input().strip().split()\n\nif a == b and b == c:\n    print((\"Yes\" + \"\"))\nelse:\n    print((\"No\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s960572618_to_40", "old_id": "s960572618"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == (\"__main\" + \"__\"):\n    solve()\n", "id": "StringUnfoldding_sample_from_s975943078_to_41", "old_id": "s975943078"}
{"code": "nums = list(map(int, input().split((\"\" + \" \"))))\nnums.sort(reverse=True)\nprint(nums[0]*10+nums[1]+nums[2])\n", "id": "StringUnfoldding_sample_from_s214672212_to_42", "old_id": "s214672212"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[i+1]-A[i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == ('__mai' + 'n__'):\n    main()\n", "id": "StringUnfoldding_sample_from_s267613210_to_43", "old_id": "s267613210"}
{"code": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\n\nfor i, char in enumerate(S):\n    char_lists.append(char)\n    char_lists.append(T[i])\n\nprint((\"\" + \"\").join(char_lists))\n", "id": "StringUnfoldding_sample_from_s813548165_to_44", "old_id": "s813548165"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[i])[-1] == (\"\" + \"0\"):\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "StringUnfoldding_sample_from_s575946485_to_45", "old_id": "s575946485"}
{"code": "N, M, X, Y = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nprint(('N' + 'o War') if max(max(x), X) < min(min(y), Y) else ('' + 'War'))\n", "id": "StringUnfoldding_sample_from_s747093551_to_46", "old_id": "s747093551"}
{"code": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X // D\n    if abs(r) > K:\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if (K - r) % 2 == 0:\n        print(a)\n    else:\n        print(abs(D - a))\n\n\nif __name__ == ('__ma' + 'in__'):\n    main()\n", "id": "StringUnfoldding_sample_from_s814885508_to_47", "old_id": "s814885508"}
{"code": "a, v = map(int, input().split())\nb, w = map(int, input().split())\nt = int(input())\nif a == b:\n    print(('' + 'YES'))\nelif v <= w:\n    print(('NO' + ''))\nelse:\n    if t < abs(a - b) / (v - w):\n        print(('' + 'NO'))\n    else:\n        print(('' + 'YES'))\n", "id": "StringUnfoldding_sample_from_s122565091_to_48", "old_id": "s122565091"}
{"code": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[1::2][::-1]+a[::2]\nif len(a) % 2 == 0:\n    print(('' + ' ').join(b))\nelse:\n    print((' ' + '').join(b[::-1]))\n", "id": "StringUnfoldding_sample_from_s735480710_to_49", "old_id": "s735480710"}
{"code": "N = int(input())\nm = []\nline = ('' + '')\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nfor i in range(N):\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n\nfor i in range(4):\n    for j in range(3):\n        for k in range(10):\n            line += (' {0' + '}').format(m[i][j][k])\n        print(line)\n        line = ('' + '')\n    if i < 3:\n        print(('#' + '')*20)\n", "id": "StringUnfoldding_sample_from_s067092519_to_50", "old_id": "s067092519"}
{"code": "a = input()\nprint((\"\" + \"Yes\") if ('' + '9') in a else (\"\" + \"No\"))\n", "id": "StringUnfoldding_sample_from_s485638370_to_51", "old_id": "s485638370"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n\n\nif __name__ == ('__main__' + ''):\n    main()\n", "id": "StringUnfoldding_sample_from_s048491063_to_52", "old_id": "s048491063"}
{"code": "A, B = map(int, input().split())\nif A == B:\n    print((\"Dra\" + \"w\"))\nelif A == 1:\n    print((\"A\" + \"lice\"))\nelif B == 1:\n    print((\"\" + \"Bob\"))\nelif A > B:\n    print((\"Alic\" + \"e\"))\nelse:\n    print((\"B\" + \"ob\"))\n", "id": "StringUnfoldding_sample_from_s040517919_to_53", "old_id": "s040517919"}
{"code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split(('' + '/'))\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print(('Heise' + 'i'))\nelse:\n    print(('TB' + 'D'))\n", "id": "StringUnfoldding_sample_from_s086522214_to_54", "old_id": "s086522214"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = (\"abcdefghijklmnopqrstu\" + \"vwxyz\")\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b:\n        print((\"\" + \"yes\"))\n    else:\n        print((\"no\" + \"\"))\n\n\ndef Yn(b):\n    if b:\n        print((\"Y\" + \"es\"))\n    else:\n        print((\"N\" + \"o\"))\n\n\ndef YN(b):\n    if b:\n        print((\"Y\" + \"ES\"))\n    else:\n        print((\"N\" + \"O\"))\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    for a in range(size):\n        if (num >> (size-a-1)) & 1 == 1:\n            A[a] = 1\n        else:\n            A[a] = 0\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    for a in range(2, len(A)):\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=(\"\" + \"int\")):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    for a in range(2, n+1):\n        if A[a]:\n            for b in range(a*2, n+1, a):\n                A[b] = False\n    if (type == (\"b\" + \"ool\")):\n        return A\n    B = []\n    for a in range(n+1):\n        if (A[a]):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=(\"\" + \" \")):\n    n = len(A)\n    A = list(map(str, A))\n    s = (\"\" + \"\")\n    for a in range(n):\n        s += A[a]\n        if (a < n-1):\n            s += c\n    return s\n\n\ndef factorize(n, type_=(\"dic\" + \"t\")):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if type_ == (\"dict\" + \"\"):\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n        return dic\n    elif type_ == (\"list\" + \"\"):\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print((\"\" + \"\").join(S))\n\n\nmain()\n", "id": "StringUnfoldding_sample_from_s977408144_to_55", "old_id": "s977408144"}
{"code": "a, b = map(int, input().split())\nif a <= 8 and b <= 8:\n    print((\"Yay!\" + \"\"))\nelse:\n    print((\"\" + \":(\"))\n", "id": "StringUnfoldding_sample_from_s453478465_to_56", "old_id": "s453478465"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if i == 0 or i == H+1:\n        G.append(('' + '#')*(W+2))\n    else:\n        G.append(('' + '#') + input() + ('#' + ''))\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[sy][sx] == ('.' + ''):\n            dist = [[-float(('i' + 'nf')) for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == ('.' + '') and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == ('' + '.') and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == ('' + '.') and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == ('.' + '') and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s951169509_to_57", "old_id": "s951169509"}
{"code": "s = input()\nt = input()\n\nif t[:-1] == s:\n    print(('Ye' + 's'))\nelse:\n    print(('' + 'No'))\n", "id": "StringUnfoldding_sample_from_s676839884_to_58", "old_id": "s676839884"}
{"code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = 0\nfor i in mo:\n    if i[1] == (\"J\" + \"PY\"):\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n\nprint(okz)\n", "id": "StringUnfoldding_sample_from_s554393427_to_59", "old_id": "s554393427"}
{"code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 7)\ns = sorted(readline().rstrip())\nt = sorted(readline().rstrip())[::-1]\nprint((\"Y\" + \"es\") if s < t else (\"No\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s441329208_to_60", "old_id": "s441329208"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == (\"__ma\" + \"in__\"):\n\n    solve()\n", "id": "StringUnfoldding_sample_from_s344468705_to_61", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + (\"\" + \" \") + str(maxColor))\n", "id": "StringUnfoldding_sample_from_s964794058_to_62", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n\n    for k in range(max(X, Y) + 1):\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans:\n            ans = total\n\n    print(ans)\n\n\nif __name__ == (\"__ma\" + \"in__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_s724326345_to_63", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float(('I' + 'NF'))\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n\n    for i in range(1, N + 1):\n        if i in s:\n            ans = i\n\n    print(ans)\n\n\nif __name__ == ('' + '__main__'):\n    main()\n", "id": "StringUnfoldding_sample_from_s878873709_to_64", "old_id": "s878873709"}
{"code": "n = input()\nn = int(n[-1])\n\nif n == 2 or n == 4 or n == 5 or n == 7 or n == 9:\n    print((\"\" + \"hon\"))\nelif n == 0 or n == 1 or n == 6 or n == 8:\n    print((\"pon\" + \"\"))\nelse:\n    print((\"bon\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s652791025_to_65", "old_id": "s652791025"}
{"code": "x = int(input())\nprint((\"ai133\" + \"3{}\").format((\"\" + \"3\")*(x // 100)))\n", "id": "StringUnfoldding_sample_from_s039768540_to_66", "old_id": "s039768540"}
{"code": "n = input()\nl = list(map(int, input().split()))\n\nb = max(l)\ns = sum(l)\n\nif b < s - b:\n    print(('Y' + 'es'))\nelse:\n    print(('N' + 'o'))\n", "id": "StringUnfoldding_sample_from_s893778513_to_67", "old_id": "s893778513"}
{"code": "I = input\ns = I()*2\nprint([('' + 'No'), ('' + 'Yes')][I() in s])\n", "id": "StringUnfoldding_sample_from_s592421258_to_68", "old_id": "s592421258"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro]:\n        print(('Yes' + ''))\n    else:\n        print(('' + 'No'))\n    mae += 1\n    usiro += 1\n", "id": "StringUnfoldding_sample_from_s182651529_to_69", "old_id": "s182651529"}
{"code": "N = str(input())\n\nprint((\"\" + \"ABC\")+N)\n", "id": "StringUnfoldding_sample_from_s681170949_to_70", "old_id": "s681170949"}
{"code": "import math\n\n\ndef keta(s):\n    if len(s) < 2:\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\n\ndef main():\n    N = input()\n\n    if keta(N) % 9 == 0:\n        print((\"Yes\" + \"\"))\n    else:\n        print((\"\" + \"No\"))\n\n\nif __name__ == (\"\" + \"__main__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_s486032847_to_71", "old_id": "s486032847"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = [('' + 'No'), ('' + 'Yes')]\nMOD = 10**9+7\ninf = float(('i' + 'nf'))\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = [('' + '1'), ('' + '2'), ('' + '3'), ('' + '4'), ('' + '5'), ('6' + ''), ('' + '7'), ('' + '8'), ('' + '9'), ('' + '10')]\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == ('__main_' + '_'):\n    main()\n", "id": "StringUnfoldding_sample_from_s664563518_to_72", "old_id": "s664563518"}
{"code": "n = int(input())\n\nif n >= 1000:\n    print(('A' + 'BD'))\nelse:\n    print(('AB' + 'C'))\n", "id": "StringUnfoldding_sample_from_s870744379_to_73", "old_id": "s870744379"}
{"code": "W, H, x, y, r = map(int, input().split())\n\nif x >= r and (W - r) >= x:\n    if y >= r and (H - r) >= y:\n        print(('Yes' + ''))\n    else:\n        print(('No' + ''))\nelse:\n    print(('' + 'No'))\n", "id": "StringUnfoldding_sample_from_s103354654_to_74", "old_id": "s103354654"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nfor i in range(10):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range(10):\n    if i == 1:\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight=('weig' + 'ht'))\n\ns = 0\nfor a in chain.from_iterable(A):\n    if a == -1 or a == 1:\n        continue\n    s += d[a]\nprint(s)\n", "id": "StringUnfoldding_sample_from_s749244504_to_75", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nfor i in range(1, n):\n    if a[i] == (\"C\" + \"\") and a[i-1] == (\"A\" + \"\"):\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n", "id": "StringUnfoldding_sample_from_s759499751_to_76", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={('' + '#'): 1, ('' + '.'): 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "id": "StringUnfoldding_sample_from_s124725275_to_77", "old_id": "s124725275"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/(4*m)\nif a[m-1] >= s:\n    print(('Ye' + 's'))\nelse:\n    print(('N' + 'o'))\n", "id": "StringUnfoldding_sample_from_s777789287_to_78", "old_id": "s777789287"}
{"code": "a, b = map(int, input().split())\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print(('' + 'Possible'))\nelse:\n    print(('Impos' + 'sible'))\n", "id": "StringUnfoldding_sample_from_s858647829_to_79", "old_id": "s858647829"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count += 1\n\nif count == 0 or count == 2:\n    print((\"Y\" + \"ES\"))\nelse:\n    print((\"NO\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s763097776_to_80", "old_id": "s763097776"}
{"code": "N = input()\nif N == 0:\n    print(('Ye' + 's'))\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print(('Ye' + 's'))\n    else:\n        print(('' + 'No'))\n", "id": "StringUnfoldding_sample_from_s557080041_to_81", "old_id": "s557080041"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float((\"\" + \"inf\"))\n\nfor bit in range(1 << d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n\n    for i in range(d):\n        if bit & (1 << i):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s591424993_to_82", "old_id": "s591424993"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if i == (\"\" + \")\"):\n        left += 1\n    else:\n        break\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if s[i] == (\"(\" + \"\"):\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n\nleft1 += left\nfor i in range(right1):\n    s += (\")\" + \"\")\nfor i in range(left1):\n    s = (\"\" + \"(\") + s\n\nprint(s)\n", "id": "StringUnfoldding_sample_from_s952876397_to_83", "old_id": "s952876397"}
{"code": "import sys\nfrom collections import Counter, defaultdict\n\nINF = float(('in' + 'f'))\nMOD = 10 ** 9 + 7\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return input()\n\n\ndef main():\n    n = II()\n    S = SI()\n    C = Counter(S)\n\n    return ('' + 'Yes') if C[('R' + '')] > n - C[('' + 'R')] else ('' + 'No')\n\n\nprint(main())\n", "id": "StringUnfoldding_sample_from_s007458552_to_84", "old_id": "s007458552"}
{"code": "input = list(map(str, input().split()))\nnum = ('' + '').join(input)\n\nif (int(num) % 4 == 0):\n    print(('YES' + ''))\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_s554858080_to_85", "old_id": "s554858080"}
{"code": "a, b = input().split()\nif a < b:\n    print((\"\" + \"<\"))\nelif a > b:\n    print((\">\" + \"\"))\nelse:\n    print((\"=\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s110149598_to_86", "old_id": "s110149598"}
{"code": "s = list(str(input()))\ns.sort()\nif s[0] == s[1] and s[0] != s[2] and s[2] == s[3]:\n    print((\"\" + \"Yes\"))\nelse:\n    print((\"\" + \"No\"))\n", "id": "StringUnfoldding_sample_from_s896397037_to_87", "old_id": "s896397037"}
{"code": "A, B = map(int, input().split())\n\nif (A+B) % 2 == 1:\n    print(('IMPOSSIBL' + 'E'))\nelse:\n    print((A+B)//2)\n", "id": "StringUnfoldding_sample_from_s423256012_to_88", "old_id": "s423256012"}
{"code": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = 0\n\nfor i in range(h):\n    for j in range(w):\n        if l[i][j] == (\"\" + \"#\"):\n            if j < tmp:\n                print((\"Impo\" + \"ssible\"))\n                exit()\n            else:\n                tmp = j\n\n\nprint((\"Possib\" + \"le\"))\n", "id": "StringUnfoldding_sample_from_s331817031_to_89", "old_id": "s331817031"}
{"code": "R = int(input())\n\nif R < 1200:\n    print((\"AB\" + \"C\"))\nelif R < 2800:\n    print((\"\" + \"ARC\"))\nelse:\n    print((\"AGC\" + \"\"))\n", "id": "StringUnfoldding_sample_from_s607161467_to_90", "old_id": "s607161467"}
{"code": "A, B = map(int, input().split())\nS = list(input())\nif S[A] == ('' + '-') and S.count(('-' + '')) == 1:\n    print((\"\" + \"Yes\"))\nelse:\n    print((\"\" + \"No\"))\n", "id": "StringUnfoldding_sample_from_s013976107_to_91", "old_id": "s013976107"}
