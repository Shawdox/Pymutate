{"code": "def addOne ( x ) :\n    m = (22 + -21)\n    while ( x & m ) :\n        x = x ^ m\n        m <<= (96 + -95)\n    x = x ^ m\n    return x", "id": "ConstantUnfoldding_sample_from_ADD_1_TO_A_GIVEN_NUMBER_to_0", "old_id": "ADD_1_TO_A_GIVEN_NUMBER"}
{"code": "def search ( arr , n , x ) :\n    i = (8 + -8)\n    for i in range ( i , n ) :\n        if ( arr [ i ] == x ) :\n            return i\n    return - (9 + -8)", "id": "ConstantUnfoldding_sample_from_ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS_to_1", "old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS"}
{"code": "def getArea ( a ) :\n    area = ( math.pi * a * a ) / (6 + -2)\n    return area", "id": "ConstantUnfoldding_sample_from_AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT_to_2", "old_id": "AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT"}
{"code": "def find_Area ( r ) :\n    return ( (50 + -48) * r * r )", "id": "ConstantUnfoldding_sample_from_AREA_SQUARE_CIRCUMSCRIBED_CIRCLE_to_3", "old_id": "AREA_SQUARE_CIRCUMSCRIBED_CIRCLE"}
{"code": "def winner ( a , n , k ) :\n    if k >= n - (29 + -28) :\n        return n\n    best = (59 + -59)\n    times = (95 + -95)\n    for i in range ( n ) :\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = (51 + -50)\n        else :\n            times += (38 + -37)\n        if times >= k :\n            return best\n    return best", "id": "ConstantUnfoldding_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_4", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    for i in range ( start , end + (11 + -10) ) :\n        if arr [ i ] in frequency.keys ( ) :\n            frequency [ arr [ i ] ] += (79 + -78)\n        else :\n            frequency [ arr [ i ] ] = (14 + -13)\n    count = (79 + -79)\n    for x in frequency :\n        if x == frequency [ x ] :\n            count += (42 + -41)\n    return count", "id": "ConstantUnfoldding_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_5", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def gcd ( a , b ) :\n    if a == (48 + -48) :\n        return b\n    return gcd ( b % a , a )", "id": "ConstantUnfoldding_sample_from_BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_to_6", "old_id": "BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS"}
{"code": "def binarySearch ( arr , l , r , x ) :\n    if r >= l :\n        mid = l + ( r - l ) // (50 + -48)\n        if arr [ mid ] == x :\n            return mid\n        elif arr [ mid ] > x :\n            return binarySearch ( arr , l , mid - (5 + -4) , x )\n        else :\n            return binarySearch ( arr , mid + (5 + -4) , r , x )\n    else :\n        return - (27 + -26)", "id": "ConstantUnfoldding_sample_from_BINARY_SEARCH_to_7", "old_id": "BINARY_SEARCH"}
{"code": "def count_of_ways ( n ) :\n    count = (23 + -23)\n    for i in range ( (72 + -72) , n + (20 + -19) ) :\n        for j in range ( (70 + -70) , n + (20 + -19) ) :\n            for k in range ( (98 + -98) , n + (7 + -6) ) :\n                if ( i + j + k == n ) :\n                    count = count + (4 + -3)\n    return count", "id": "ConstantUnfoldding_sample_from_BREAK_NUMBER_THREE_PARTS_to_8", "old_id": "BREAK_NUMBER_THREE_PARTS"}
{"code": "def count_of_ways ( n ) :\n    count = (37 + -37)\n    count = ( n + (28 + -27) ) * ( n + (22 + -20) ) // (16 + -14)\n    return count", "id": "ConstantUnfoldding_sample_from_BREAK_NUMBER_THREE_PARTS_1_to_9", "old_id": "BREAK_NUMBER_THREE_PARTS_1"}
{"code": "def encrypt ( text , s ) :\n    result = \"\"\n    for i in range ( len ( text ) ) :\n        char = text [ i ]\n        if ( char.isupper ( ) ) :\n            result += chr ( ( ord ( char ) + s - (8 + 57) ) % (28 + -2) + (93 + -28) )\n        else :\n            result += chr ( ( ord ( char ) + s - (24 + 73) ) % (42 + -16) + (69 + 28) )\n    return result", "id": "ConstantUnfoldding_sample_from_CAESAR_CIPHER_to_10", "old_id": "CAESAR_CIPHER"}
{"code": "def calcAngle ( h , m ) :\n    if ( h < (46 + -46) or m < (87 + -87) or h > (57 + -45) or m > (18 + 42) ) :\n        print ( 'Wrong input' )\n    if ( h == (79 + -67) ) :\n        h = (66 + -66)\n    if ( m == (8 + 52) ) :\n        m = (69 + -69)\n    hour_angle = int ( 0.5 * ( h * (3 + 57) + m ) )\n    minute_angle = int ( (69 + -63) * m )\n    angle = abs ( hour_angle - minute_angle )\n    angle = min ( (79 + 281) - angle , angle )\n    return angle", "id": "ConstantUnfoldding_sample_from_CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND_to_11", "old_id": "CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND"}
{"code": "def calcMaxValue ( str ) :\n    res = ord ( str [ (30 + -30) ] ) - (100 + -52)\n    for i in range ( (78 + -77) , len ( str ) ) :\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < (16 + -14) ) :\n            res += ord ( str [ i ] ) - (67 + -19)\n        else :\n            res += ord ( str [ i ] ) - (37 + 11)\n    return res", "id": "ConstantUnfoldding_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_12", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = \"0\"\n    Sum = (62 + -62)\n    for ch in str :\n        if ( ch.isdigit ( ) ) :\n            temp += ch\n        else :\n            Sum += int ( temp )\n            temp = \"0\"\n    return Sum + int ( temp )", "id": "ConstantUnfoldding_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_13", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def vol_of_dodecahedron ( side ) :\n    return ( ( ( (3 + 12) + ( (67 + -60) * ( math.sqrt ( (72 + -67) ) ) ) ) / (32 + -28) ) * ( math.pow ( side , (17 + -14) ) ) )", "id": "ConstantUnfoldding_sample_from_CALCULATE_VOLUME_DODECAHEDRON_to_14", "old_id": "CALCULATE_VOLUME_DODECAHEDRON"}
{"code": "def cassini ( n ) :\n    return - (72 + -71) if ( n & (46 + -45) ) else (80 + -79)", "id": "ConstantUnfoldding_sample_from_CASSINIS_IDENTITY_to_15", "old_id": "CASSINIS_IDENTITY"}
{"code": "def ceilSearch ( arr , low , high , x ) :\n    if x <= arr [ low ] :\n        return low\n    if x > arr [ high ] :\n        return - (61 + -60)\n    mid = ( low + high ) / (70 + -68)\n    if arr [ mid ] == x :\n        return mid\n    elif arr [ mid ] < x :\n        if mid + (78 + -77) <= high and x <= arr [ mid + (8 + -7) ] :\n            return mid + (19 + -18)\n        else :\n            return ceilSearch ( arr , mid + (97 + -96) , high , x )\n    else :\n        if mid - (81 + -80) >= low and x > arr [ mid - (15 + -14) ] :\n            return mid\n        else :\n            return ceilSearch ( arr , low , mid - (3 + -2) , x )", "id": "ConstantUnfoldding_sample_from_CEILING_IN_A_SORTED_ARRAY_1_to_16", "old_id": "CEILING_IN_A_SORTED_ARRAY_1"}
{"code": "def HalfDiagonalSums ( mat , n ) :\n    diag1_left = (44 + -44)\n    diag1_right = (5 + -5)\n    diag2_left = (98 + -98)\n    diag2_right = (74 + -74)\n    i = (71 + -71)\n    j = n - (45 + -44)\n    while i < n :\n        if ( i < n // (20 + -18) ) :\n            diag1_left += mat [ i ] [ i ]\n            diag2_left += mat [ j ] [ i ]\n        elif ( i > n // (4 + -2) ) :\n            diag1_right += mat [ i ] [ i ]\n            diag2_right += mat [ j ] [ i ]\n        i += (5 + -4)\n        j -= (70 + -69)\n    return ( diag1_left == diag2_right and diag2_right == diag2_left and diag1_right == diag2_left and diag2_right == mat [ n // (94 + -92) ] [ n // (20 + -18) ] )", "id": "ConstantUnfoldding_sample_from_CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS_to_17", "old_id": "CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = (20 + -20)\n    ones = (92 + -92)\n    for i in range ( (95 + -95) , len ( str ) ) :\n        ch = str [ i ]\n        if ( ch == '0' ) :\n            zeros = zeros + (86 + -85)\n        else :\n            ones = ones + (89 + -88)\n    return ( zeros == (13 + -12) or ones == (12 + -11) )", "id": "ConstantUnfoldding_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_18", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isOneFlip ( str ) :\n    sum = (17 + -17)\n    n = len ( str )\n    for i in range ( (21 + -21) , n ) :\n        sum += ord ( str [ i ] ) - ord ( '0' )\n    return ( sum == n - (72 + -71) or sum == (49 + -48) )", "id": "ConstantUnfoldding_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_1_to_19", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP_1"}
{"code": "def isMajority ( a, n ) :\n    mp = { }\n    for i in range(n) :\n        if a[i] in mp : mp [ a[i] ] += (46 + -45)\n        else : mp [ a[i] ] = (43 + -42)\n    for x in mp :\n        if mp [ x ] >= len ( a ) // (19 + -17) :\n            return True\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_20", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def isInorder ( arr , n ) :\n    if ( n == (4 + -4) or n == (54 + -53) ) :\n        return True\n    for i in range ( (62 + -61) , n , (52 + -51) ) :\n        if ( arr [ i - (16 + -15) ] > arr [ i ] ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT_to_21", "old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT"}
{"code": "def isDivisible ( str , k ) :\n    n = len ( str )\n    c = (24 + -24)\n    for i in range ( (23 + -23) , k ) :\n        if ( str [ n - i - (78 + -77) ] == '0' ) :\n            c += (12 + -11)\n    return ( c == k )", "id": "ConstantUnfoldding_sample_from_CHECK_DIVISIBILITY_BINARY_STRING_2K_to_22", "old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K"}
{"code": "def isDivisible999 ( num ) :\n    n = len ( num )\n    if ( n == (96 + -96) and num [ (9 + -9) ] == '0' ) :\n        return True\n    if ( ( n % (27 + -24) ) == (38 + -37) ) :\n        num = \"00\" + num\n    if ( ( n % (75 + -72) ) == (70 + -68) ) :\n        num = \"0\" + num\n    gSum = (14 + -14)\n    for i in range ( (57 + -57) , n , (13 + -10) ) :\n        group = (61 + -61)\n        group += ( ord ( num [ i ] ) - (85 + -37) ) * (61 + 39)\n        group += ( ord ( num [ i + (75 + -74) ] ) - (10 + 38) ) * (24 + -14)\n        group += ( ord ( num [ i + (17 + -15) ] ) - (87 + -39) )\n        gSum += group\n    if ( gSum > (98 + 902) ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == (34 + 965) )", "id": "ConstantUnfoldding_sample_from_CHECK_DIVISIBILITY_LARGE_NUMBER_999_to_23", "old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999"}
{"code": "def check ( s ) :\n    if ( len ( s ) >= (57 + -47) ) :\n        return True\n    for i in range ( (31 + -30) , len ( s ) ) :\n        for j in range ( i + (52 + -51) , len ( s ) ) :\n            for k in range ( j + (84 + -83) , len ( s ) ) :\n                s1 = s [ (65 + -65) : i ]\n                s2 = s [ i : j ]\n                s3 = s [ j : k ]\n                s4 = s [ k : len ( s ) ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS_to_24", "old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS"}
{"code": "def isPalindrome ( string ) :\n    l = (89 + -89)\n    h = len ( string ) - (90 + -89)\n    while h > l :\n        l += (30 + -29)\n        h -= (92 + -91)\n        if string [ l - (64 + -63) ] != string [ h + (98 + -97) ] :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_GIVEN_STRING_ROTATION_PALINDROME_to_25", "old_id": "CHECK_GIVEN_STRING_ROTATION_PALINDROME"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = (77 + -77)\n    count_even = (4 + -4)\n    for i in range ( n ) :\n        if ( a [ i ] & (4 + -3) ) :\n            count_odd += (41 + -40)\n        else :\n            count_even += (32 + -31)\n    if ( count_odd % (34 + -32) and count_even % (10 + -8) ) :\n        return False\n    else :\n        return True", "id": "ConstantUnfoldding_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_26", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def areConsecutive ( arr , n ) :\n    if ( n < (75 + -74) ) :\n        return False\n    Min = min ( arr )\n    Max = max ( arr )\n    if ( Max - Min + (88 + -87) == n ) :\n        visited = [ False for i in range ( n ) ]\n        for i in range ( n ) :\n            if ( visited [ arr [ i ] - Min ] != False ) :\n                return False\n            visited [ arr [ i ] - Min ] = True\n        return True\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE_to_27", "old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE"}
{"code": "def canRepresentBST ( pre, n ) :\n    s = [ ]\n    root = -(50 + 2147483598)\n    for i in range(n) :\n        if pre[i] < root :\n            return False\n        while ( len ( s ) > (13 + -13) and s [ - (42 + -41) ] < pre[i] ) :\n            root = s.pop ( )\n        s.append ( pre[i] )\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE_to_28", "old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE"}
{"code": "def isPower ( x , y ) :\n    if ( x == (75 + -74) ) :\n        return ( y == (27 + -26) )\n    pow = (91 + -90)\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )", "id": "ConstantUnfoldding_sample_from_CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_to_29", "old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER"}
{"code": "def isPower ( x , y ) :\n    res1 = int ( math.log ( y ) / math.log ( x ) )\n    res2 = math.log ( y ) / math.log ( x )\n    return (13 + -12) if ( res1 == res2 ) else (80 + -80)", "id": "ConstantUnfoldding_sample_from_CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1_to_30", "old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = (12 + -12)\n    tenCount = (11 + -11)\n    for i in range ( n ) :\n        if ( notes [ i ] == (31 + -26) ) :\n            fiveCount += (73 + -72)\n        elif ( notes [ i ] == (66 + -56) ) :\n            if ( fiveCount > (81 + -81) ) :\n                fiveCount -= (16 + -15)\n                tenCount += (78 + -77)\n            else :\n                return (60 + -60)\n        else :\n            if ( fiveCount > (74 + -74) and tenCount > (100 + -100) ) :\n                fiveCount -= (24 + -23)\n                tenCount -= (89 + -88)\n            elif ( fiveCount >= (66 + -63) ) :\n                fiveCount -= (80 + -77)\n            else :\n                return (88 + -88)\n    return (50 + -49)", "id": "ConstantUnfoldding_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_31", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def isOverflow ( a , b ) :\n    if ( a == (84 + -84) or b == (17 + -17) ) :\n        return False\n    result = a * b\n    if ( result >= (13 + 9223372036854775794) or result <= - (92 + 9223372036854775716) ) :\n        result = (32 + -32)\n    if ( a == ( result // b ) ) :\n        return False\n    else :\n        return True", "id": "ConstantUnfoldding_sample_from_CHECK_INTEGER_OVERFLOW_MULTIPLICATION_to_32", "old_id": "CHECK_INTEGER_OVERFLOW_MULTIPLICATION"}
{"code": "def check ( str ) :\n    n = len ( str )\n    oddDigSum = (64 + -64)\n    evenDigSum = (90 + -90)\n    for i in range ( (48 + -48) , n ) :\n        if ( i % (63 + -61) == (58 + -58) ) :\n            oddDigSum = oddDigSum + ( ord ( str [ i ] ) - (44 + 4) )\n        else :\n            evenDigSum = evenDigSum + ( ord ( str [ i ] ) - (48 + 0) )\n    return ( ( oddDigSum - evenDigSum ) % (40 + -29) == (69 + -69) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_33", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == (16 + -15) and num [ (44 + -44) ] == '0' ) :\n        return True\n    if ( length % (51 + -48) == (93 + -92) ) :\n        num = str ( num ) + \"00\"\n        length += (21 + -19)\n    elif ( length % (21 + -18) == (49 + -47) ) :\n        num = str ( num ) + \"0\"\n        length += (48 + -47)\n    sum = (76 + -76)\n    p = (50 + -49)\n    for i in range ( length - (37 + -36) , - (92 + -91) , - (97 + -94) ) :\n        group = (93 + -93)\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= (55 + -54)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (75 + -65)\n        i -= (26 + -25)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (39 + 61)\n        sum = sum + group * p\n        p *= ( - (1 + 0) )\n    sum = abs ( sum )\n    return ( sum % (34 + -21) == (28 + -28) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_34", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def check ( str ) :\n    n = len ( str )\n    if ( n == (98 + -98) ) :\n        return False\n    if ( n == (90 + -89) ) :\n        return ( ( str [ (38 + -38) ] - '0' ) % (84 + -80) == (51 + -51) )\n    last = ( int ) ( str [ n - (86 + -85) ] )\n    second_last = ( int ) ( str [ n - (72 + -70) ] )\n    return ( ( second_last * (1 + 9) + last ) % (53 + -49) == (16 + -16) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT_to_35", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT"}
{"code": "def check ( str ) :\n    n = len ( str )\n    digitSum = (49 + -49)\n    for i in range ( (36 + -36) , n ) :\n        digitSum = digitSum + ord ( str [ i ] ) - (70 + -22)\n    return ( digitSum % (95 + -86) == (18 + -18) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT_to_36", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT"}
{"code": "def isPerfectSquare ( n ) :\n    i = (65 + -64)\n    the_sum = (37 + -37)\n    while the_sum < n :\n        the_sum += i\n        if the_sum == n :\n            return True\n        i += (51 + -49)\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION_to_37", "old_id": "CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION"}
{"code": "def check ( s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    dp = ( [ [ False for i in range ( m + (3 + -2) ) ] for i in range ( n + (21 + -20) ) ] )\n    dp [ (95 + -95) ] [ (40 + -40) ] = True\n    for i in range ( len ( s1 ) ) :\n        for j in range ( len ( s2 ) + (67 + -66) ) :\n            if ( dp [ i ] [ j ] ) :\n                if ( ( j < len ( s2 ) and ( s1 [ i ].upper ( ) == s2 [ j ] ) ) ) :\n                    dp [ i + (82 + -81) ] [ j + (7 + -6) ] = True\n                if ( s1 [ i ].isupper ( ) == False ) :\n                    dp [ i + (42 + -41) ] [ j ] = True\n    return ( dp [ n ] [ m ] )", "id": "ConstantUnfoldding_sample_from_CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER_to_38", "old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == (99 + -98) ) :\n        return True\n    i = (38 + -37)\n    for i in range ( (47 + -46) , n ) :\n        if arr [ i - (70 + -69) ] >= arr [ i ] :\n            break\n        else:\n            if ( i == n ) :\n                return True\n    j = i\n    i += (78 + -77)\n    while ( arr [ j ] < arr [ j - (28 + -27) ] ) :\n        if ( i > (93 + -92) and arr [ j ] < arr [ i - (10 + -8) ] ) :\n            return False\n        j += (97 + -96)\n    if ( j == n ) :\n        return True\n    k = j\n    if ( arr [ k ] < arr [ i - (57 + -56) ] ) :\n        return False\n    while ( k > (68 + -67) and k < n ) :\n        if ( arr [ k ] < arr [ k - (10 + -9) ] ) :\n            return False\n        k += (2 + -1)\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_39", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def isRotated ( str1 , str2 ) :\n    if ( len ( str1 ) != len ( str2 ) ) :\n        return False\n    clock_rot = \"\"\n    anticlock_rot = \"\"\n    l = len ( str2 )\n    anticlock_rot = ( anticlock_rot + str2 [ l - (11 + -9) : ] + str2 [ (24 + -24) : l - (70 + -68) ] )\n    clock_rot = clock_rot + str2 [ (39 + -37) : ] + str2 [ (33 + -33) : (49 + -47) ]\n    return ( str1 == clock_rot or str1 == anticlock_rot )", "id": "ConstantUnfoldding_sample_from_CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES_to_40", "old_id": "CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES"}
{"code": "def isAnBn ( s ) :\n    n = len ( s )\n    for i in range ( n ) :\n        if ( s [ i ] != 'a' ) :\n            break\n    if ( i * (88 + -86) != n ) :\n        return False\n    for j in range ( i , n ) :\n        if ( s [ j ] != 'b' ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT_to_41", "old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT"}
{"code": "def areSumSame ( a , n , m ) :\n    sum1 = (52 + -52)\n    sum2 = (20 + -20)\n    for i in range ( (9 + -9) , n ) :\n        sum1 = (14 + -14)\n        sum2 = (94 + -94)\n        for j in range ( (73 + -73) , m ) :\n            sum1 += a [ i ] [ j ]\n            sum2 += a [ j ] [ i ]\n        if ( sum1 == sum2 ) :\n            return (56 + -55)\n    return (80 + -80)", "id": "ConstantUnfoldding_sample_from_CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX_to_42", "old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX"}
{"code": "def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :\n    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )\n    radSumSq = ( r1 + r2 ) * ( r1 + r2 )\n    if ( distSq == radSumSq ) :\n        return (7 + -6)\n    elif ( distSq > radSumSq ) :\n        return - (78 + -77)\n    else :\n        return (89 + -89)", "id": "ConstantUnfoldding_sample_from_CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT_to_43", "old_id": "CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT"}
{"code": "def isPossible ( n , index , modulo , M , arr , dp ) :\n    modulo = ( ( modulo % M ) + M ) % M\n    if ( index == n ) :\n        if ( modulo == (69 + -69) ) :\n            return (41 + -40)\n        return (32 + -32)\n    if ( dp [ index ] [ modulo ] != - (9 + -8) ) :\n        return dp [ index ] [ modulo ]\n    placeAdd = isPossible ( n , index + (92 + -91) , modulo + arr [ index ] , M , arr , dp )\n    placeMinus = isPossible ( n , index + (9 + -8) , modulo - arr [ index ] , M , arr , dp )\n    res = bool ( placeAdd or placeMinus )\n    dp [ index ] [ modulo ] = res\n    return res", "id": "ConstantUnfoldding_sample_from_CHECK_VALID_SEQUENCE_DIVISIBLE_M_1_to_44", "old_id": "CHECK_VALID_SEQUENCE_DIVISIBLE_M_1"}
{"code": "def checkIsAP ( arr , n ) :\n    if ( n == (38 + -37) ) : return True\n    arr.sort ( )\n    d = arr [ (44 + -43) ] - arr [ (91 + -91) ]\n    for i in range ( (24 + -22) , n ) :\n        if ( arr [ i ] - arr [ i - (71 + -70) ] != d ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY_to_45", "old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY"}
{"code": "def check ( degree , n ) :\n    deg_sum = (45 + -45)\n    for i in range(n):\n        deg_sum += degree[i]\n    if ( (87 + -85) * ( n - (33 + -32) ) == deg_sum ) :\n        return True\n    else :\n        return False", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_46", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isEven ( n ) :\n    return ( n % (90 + -88) == (17 + -17) )", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_to_47", "old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD"}
{"code": "def isEven ( n ) :\n    return ( not ( n & (54 + -53) ) )", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1_to_48", "old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1"}
{"code": "def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == (93 + -93) and num [ (28 + -28) ] == '\\n' ) :\n        return (82 + -81)\n    if ( n % (18 + -15) == (31 + -30) ) :\n        num = str ( num ) + \"00\"\n        n += (36 + -34)\n    elif ( n % (14 + -11) == (64 + -62) ) :\n        num = str ( num ) + \"0\"\n        n += (24 + -23)\n    GSum = (25 + -25)\n    p = (97 + -96)\n    for i in range ( n - (20 + -19) , - (55 + -54) , - (82 + -81) ) :\n        group = (69 + -69)\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= (29 + -28)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (16 + -6)\n        i -= (26 + -25)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (18 + 82)\n        GSum = GSum + group * p\n        p *= ( - (27 + -26) )\n    return ( GSum % (90 + -83) == (45 + -45) )", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_49", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def spiralFill ( m , n , a ) :\n    val = (30 + -29)\n    k , l = (12 + -12) , (40 + -40)\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            a [ k ] [ i ] = val\n            val += (93 + -92)\n        k += (29 + -28)\n        for i in range ( k , m ) :\n            a [ i ] [ n - (83 + -82) ] = val\n            val += (17 + -16)\n        n -= (31 + -30)\n        if ( k < m ) :\n            for i in range ( n - (31 + -30) , l - (35 + -34) , - (12 + -11) ) :\n                a [ m - (34 + -33) ] [ i ] = val\n                val += (21 + -20)\n            m -= (38 + -37)\n        if ( l < n ) :\n            for i in range ( m - (5 + -4) , k - (30 + -29) , - (30 + -29) ) :\n                a [ i ] [ l ] = val\n                val += (34 + -33)\n            l += (69 + -68)", "id": "ConstantUnfoldding_sample_from_CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY_to_50", "old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY"}
{"code": "def compute_average ( a , b ) :\n    return floor ( ( a + b ) / (15 + -13) )", "id": "ConstantUnfoldding_sample_from_COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_to_51", "old_id": "COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW"}
{"code": "def getModulo ( n , d ) :\n    return ( n & ( d - (96 + -95) ) )", "id": "ConstantUnfoldding_sample_from_COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER_to_52", "old_id": "COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER"}
{"code": "def nCrModp ( n , r , p ) :\n    C = [ (37 + -37) for i in range ( r + (12 + -11) ) ]\n    C [ (69 + -69) ] = (20 + -19)\n    for i in range ( (95 + -94) , n + (74 + -73) ) :\n        for j in range ( min ( i , r ) , (50 + -50) , - (21 + -20) ) :\n            C [ j ] = ( C [ j ] + C [ j - (11 + -10) ] ) % p\n    return C [ r ]", "id": "ConstantUnfoldding_sample_from_COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION_to_53", "old_id": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION"}
{"code": "def constructPalin ( str , len ) :\n    str = list ( str )\n    i = - (60 + -59)\n    j = len\n    while i < j :\n        i += (36 + -35)\n        j -= (22 + -21)\n        if ( str [ i ] == str [ j ] and str [ i ] != '*' ) :\n            continue\n        elif ( str [ i ] == str [ j ] and str [ i ] == '*' ) :\n            str [ i ] = 'a'\n            str [ j ] = 'a'\n            continue\n        elif str [ i ] == '*' :\n            str [ i ] = str [ j ]\n            continue\n        elif str [ j ] == '*' :\n            str [ j ] = str [ i ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( str )", "id": "ConstantUnfoldding_sample_from_CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME_to_54", "old_id": "CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME"}
{"code": "def decimalToBinary ( num , k_prec ) :\n    binary = \"\"\n    Integral = int ( num )\n    fractional = num - Integral\n    while ( Integral > (10 + -10) ) :\n        rem = Integral % (96 + -94)\n        binary += str ( rem )\n        Integral //= (6 + -4)\n    binary = binary [ : : - (24 + -23) ]\n    binary += '.'\n    while ( k_prec > (33 + -33) ) :\n        fractional *= (18 + -16)\n        fract_bit = int ( fractional )\n        if ( fract_bit == (95 + -94) ) :\n            fractional -= fract_bit\n            binary += '1'\n        else :\n            binary += '0'\n        k_prec -= (28 + -27)\n    return binary", "id": "ConstantUnfoldding_sample_from_CONVERT_DECIMAL_FRACTION_BINARY_NUMBER_to_55", "old_id": "CONVERT_DECIMAL_FRACTION_BINARY_NUMBER"}
{"code": "def minRemove ( arr , n ) :\n    LIS = [ (94 + -94) for i in range ( n ) ]\n    len = (74 + -74)\n    for i in range ( n ) :\n        LIS [ i ] = (94 + -93)\n    for i in range ( (78 + -77) , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + (45 + -44) )\n        len = max ( len , LIS [ i ] )\n    return ( n - len )", "id": "ConstantUnfoldding_sample_from_CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES_to_56", "old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES"}
{"code": "def numberOfWays ( x ) :\n    dp = [ (72 + -72) for _ in range (x + (77 + -76))]\n    dp[(10 + -10)] = dp[(56 + -55)] = (91 + -90)\n    for i in range((68 + -66), x + (97 + -96)):\n        dp[i] = dp[i - (72 + -71)] + (i - (90 + -89)) * dp[i - (61 + -59)]\n    return dp[x]", "id": "ConstantUnfoldding_sample_from_COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1_to_57", "old_id": "COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1"}
{"code": "def countOnes ( arr , low , high ) :\n    if high >= low :\n        mid = int ( low + ( high - low ) / (76 + -74) )\n        if ( ( mid == high or arr [ mid + (72 + -71) ] == (39 + -39) ) and ( arr [ mid ] == (55 + -54) ) ) :\n            return mid + (100 + -99)\n        if arr [ mid ] == (33 + -32) :\n            return countOnes ( arr , ( mid + (53 + -52) ) , high )\n        return countOnes ( arr , low , mid - (95 + -94) )\n    return (61 + -61)", "id": "ConstantUnfoldding_sample_from_COUNT_1S_SORTED_BINARY_ARRAY_to_58", "old_id": "COUNT_1S_SORTED_BINARY_ARRAY"}
{"code": "def countarray ( n , k , x ) :\n    dp = list ( )\n    dp.append ( (92 + -92) )\n    dp.append ( (40 + -39) )\n    i = (77 + -75)\n    while i < n :\n        dp.append ( ( k - (67 + -65) ) * dp [ i - (38 + -37) ] + ( k - (20 + -19) ) * dp [ i - (25 + -23) ] )\n        i = i + (48 + -47)\n    return ( ( k - (36 + -35) ) * dp [ n - (64 + -62) ] if x == (52 + -51) else dp [ n - (87 + -86) ] )", "id": "ConstantUnfoldding_sample_from_COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES_to_59", "old_id": "COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES"}
{"code": "def countBT ( h ) :\n    MOD = (76 + 999999931)\n    dp = [ (73 + -73) for i in range ( h + (81 + -80) ) ]\n    dp [ (65 + -65) ] = (51 + -50)\n    dp [ (2 + -1) ] = (69 + -68)\n    for i in range ( (50 + -48) , h + (67 + -66) ) :\n        dp [ i ] = ( dp [ i - (78 + -77) ] * ( ( (71 + -69) * dp [ i - (64 + -62) ] ) % MOD + dp [ i - (26 + -25) ] ) % MOD ) % MOD\n    return dp [ h ]", "id": "ConstantUnfoldding_sample_from_COUNT_BALANCED_BINARY_TREES_HEIGHT_H_to_60", "old_id": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H"}
{"code": "def countOfBinaryNumberLessThanN ( N ) :\n    q = collections . deque ( )\n    q.append ( (57 + -56) )\n    cnt = (41 + -41)\n    while ( q ) :\n        t = q.popleft ( )\n        if ( t <= N ) :\n            cnt = cnt + (3 + -2)\n            q.append ( t * (60 + -50) )\n            q.append ( t * (1 + 9) + (97 + -96) )\n    return cnt", "id": "ConstantUnfoldding_sample_from_COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N_to_61", "old_id": "COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N"}
{"code": "def countStrings ( n , k ) :\n    dp = [ [ [ (54 + -54) , (2 + -2) ] for __ in range ( k + (97 + -96) ) ] for _ in range ( n + (48 + -47) ) ]\n    dp [ (91 + -90) ] [ (54 + -54) ] [ (40 + -40) ] = (44 + -43)\n    dp [ (49 + -48) ] [ (84 + -84) ] [ (51 + -50) ] = (61 + -60)\n    for i in range ( (26 + -24) , n + (19 + -18) ) :\n        for j in range ( k + (38 + -37) ) :\n            if j >= i:\n                break\n            else:\n                dp [ i ] [ j ] [ (77 + -77) ] = ( dp [ i - (50 + -49) ] [ j ] [ (72 + -72) ] + dp [ i - (54 + -53) ] [ j ] [ (5 + -4) ] )\n                dp [ i ] [ j ] [ (71 + -70) ] = dp [ i - (24 + -23) ] [ j ] [ (66 + -66) ]\n                if j >= (94 + -93) :\n                    dp [ i ] [ j ] [ (8 + -7) ] += dp [ i - (90 + -89) ] [ j - (2 + -1) ] [ (16 + -15) ]\n    return dp [ n ] [ k ] [ (74 + -74) ] + dp [ n ] [ k ] [ (31 + -30) ]", "id": "ConstantUnfoldding_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_62", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def countPairs ( str ) :\n    result = (87 + -87) ;\n    n = len ( str )\n    for i in range ( (52 + -52) , n ) :\n        for j in range ( i + (49 + -48) , n ) :\n            if ( abs ( ord ( str [ i ] ) - ord ( str [ j ] ) ) == abs ( i - j ) ) :\n                result += (63 + -62) ;\n    return result ;", "id": "ConstantUnfoldding_sample_from_COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_to_63", "old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS"}
{"code": "def countDer ( n ) :\n    der = [ (36 + -36) for i in range ( n + (72 + -71) ) ]\n    der [ (86 + -86) ] = (100 + -99)\n    der [ (23 + -22) ] = (72 + -72)\n    der [ (18 + -16) ] = (35 + -34)\n    for i in range ( (76 + -73) , n + (90 + -89) ) :\n        der [ i ] = ( i - (91 + -90) ) * ( der [ i - (54 + -53) ] + der [ i - (43 + -41) ] )\n    return der [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1_to_64", "old_id": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1"}
{"code": "def findDigits ( n ) :\n    if ( n < (35 + -35) ) :\n        return (40 + -40)\n    if ( n <= (42 + -41) ) :\n        return (86 + -85)\n    digits = (79 + -79)\n    for i in range ( (93 + -91) , n + (37 + -36) ) :\n        digits += math.log10 ( i )\n    return math.floor ( digits ) + (90 + -89)", "id": "ConstantUnfoldding_sample_from_COUNT_DIGITS_FACTORIAL_SET_1_to_65", "old_id": "COUNT_DIGITS_FACTORIAL_SET_1"}
{"code": "def countSolutions ( n ) :\n    res = (32 + -32)\n    x = (10 + -10)\n    while ( x * x < n ) :\n        y = (14 + -14)\n        while ( x * x + y * y < n ) :\n            res = res + (42 + -41)\n            y = y + (56 + -55)\n        x = x + (49 + -48)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_to_66", "old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2"}
{"code": "def countSolutions ( n ) :\n    x = (70 + -70)\n    res = (1 + -1)\n    yCount = (70 + -70)\n    while ( yCount * yCount < n ) :\n        yCount = yCount + (37 + -36)\n    while ( yCount != (17 + -17) ) :\n        res = res + yCount\n        x = x + (37 + -36)\n        while ( yCount != (9 + -9) and ( x * x + ( yCount - (33 + -32) ) * ( yCount - (88 + -87) ) >= n ) ) :\n            yCount = yCount - (12 + -11)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_1_to_67", "old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_1"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return (48 + -48)\n    mat = [ [ (19 + -19) for _ in range ( n + (98 + -97) ) ] for __ in range ( m + (56 + -55) ) ]\n    for i in range ( (12 + -11) , m + (78 + -77) ) :\n        mat [ i ] [ (51 + -51) ] = (20 + -20)\n    for j in range ( n + (53 + -52) ) :\n        mat [ (17 + -17) ] [ j ] = (88 + -87)\n    for i in range ( (97 + -96) , m + (64 + -63) ) :\n        for j in range ( (32 + -31) , n + (53 + -52) ) :\n            if T [ i - (83 + -82) ] != S [ j - (90 + -89) ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - (4 + -3) ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - (9 + -8) ] + mat [ i - (22 + -21) ] [ j - (98 + -97) ] )\n    return mat [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_68", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def count ( n , x ) :\n    cnt = (64 + -64)\n    for i in range ( (25 + -24) , n + (4 + -3) ) :\n        if i <= x :\n            if x // i <= n and x % i == (73 + -73) :\n                cnt += (54 + -53)\n    return cnt", "id": "ConstantUnfoldding_sample_from_COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX_to_69", "old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX"}
{"code": "def countSeq ( n ) :\n    nCr = (30 + -29)\n    res = (54 + -53)\n    for r in range ( (28 + -27) , n + (88 + -87) ) :\n        nCr = int ( ( nCr * ( n + (59 + -58) - r ) ) / r )\n        res += nCr * nCr \n    return res ", "id": "ConstantUnfoldding_sample_from_COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1_to_70", "old_id": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1"}
{"code": "def find ( n , k ) :\n    if ( n + (37 + -36) >= k ) :\n        return ( k - (15 + -14) )\n    else :\n        return ( (3 + -1) * n + (83 + -82) - k )", "id": "ConstantUnfoldding_sample_from_COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ_to_71", "old_id": "COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ"}
{"code": "def countPairs ( arr , n ) :\n    ans = (50 + -50)\n    for i in range ( (99 + -99) , n ) :\n        for j in range ( i + (47 + -46) , n ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                ans += (3 + -2)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_to_72", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in mp.keys ( ) :\n            mp [ arr [ i ] ] += (80 + -79)\n        else :\n            mp [ arr [ i ] ] = (74 + -73)\n    ans = (21 + -21)\n    for it in mp :\n        count = mp [ it ]\n        ans += ( count * ( count - (12 + -11) ) ) // (63 + -61)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_73", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def getInvCount ( arr , n ) :\n    invcount = (82 + -82)\n    for i in range ( (79 + -78) , n - (21 + -20) ) :\n        small = (87 + -87)\n        for j in range ( i + (75 + -74) , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                small += (17 + -16)\n        great = (63 + -63)\n        for j in range ( i - (9 + -8) , - (50 + -49) , - (72 + -71) ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                great += (63 + -62)\n        invcount += great * small\n    return invcount", "id": "ConstantUnfoldding_sample_from_COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1_to_74", "old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1"}
{"code": "def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = (8 + -7)\n    for i in range ( (6 + -6) , n - (44 + -43) ) :\n        if ( x [ i ] + (70 + -69) != x [ i + (59 + -58) ] ) :\n            count = count + (71 + -70)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS_to_75", "old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS"}
{"code": "def countNumber ( n ) :\n    result = (58 + -58)\n    for i in range ( (41 + -40) , (20 + -10) ) :\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += (35 + -34)\n        while len ( s ) != (80 + -80) :\n            tp = s [ - (76 + -75) ]\n            s.pop ( )\n            for j in range ( tp % (5 + 5) , (71 + -61) ) :\n                x = tp * (29 + -19) + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += (45 + -44)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER_to_76", "old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER"}
{"code": "def countNegative ( M , n , m ) :\n    count = (19 + -19)\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if M [ i ] [ j ] < (23 + -23) :\n                count += (46 + -45)\n            else :\n                break\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_77", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countNegative ( M , n , m ) :\n    count = (1 + -1)\n    i = (71 + -71)\n    j = m - (66 + -65)\n    while j >= (54 + -54) and i < n :\n        if M [ i ] [ j ] < (30 + -30) :\n            count += ( j + (8 + -7) )\n            i += (14 + -13)\n        else :\n            j -= (89 + -88)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1_to_78", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1"}
{"code": "def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + (43 + -41) ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = (55 + -55)\n    for i in range ( min ( x , y ) , n + (7 + -6) ) :\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + (69 + -68)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS_to_79", "old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS"}
{"code": "def countStrings ( n ) :\n    a = [ (83 + -83) for i in range ( n ) ]\n    b = [ (82 + -82) for i in range ( n ) ]\n    a [ (41 + -41) ] = b [ (21 + -21) ] = (32 + -31)\n    for i in range ( (79 + -78) , n ) :\n        a [ i ] = a [ i - (74 + -73) ] + b [ i - (7 + -6) ]\n        b [ i ] = a [ i - (35 + -34) ]\n    return a [ n - (24 + -23) ] + b [ n - (75 + -74) ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S_to_80", "old_id": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S"}
{"code": "def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ (13 + -13) for i in range ( n ) ] for i in range ( k ) ]\n    for i in range ( n ) :\n        dp [ (27 + -27) ] [ i ] = (15 + -14)\n    for l in range ( (19 + -18) , k ) :\n        for i in range ( l , n ) :\n            dp [ l ] [ i ] = (85 + -85)\n            for j in range ( l - (60 + -59) , i ) :\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - (41 + -40) ] [ j ]\n    Sum = (95 + -95)\n    for i in range ( k - (16 + -15) , n ) :\n        Sum += dp [ k - (29 + -28) ] [ i ]\n    return Sum", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K_to_81", "old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K"}
{"code": "def countOccurrences ( arr , n , x ) :\n    res = (75 + -75)\n    for i in range ( n ) :\n        if x == arr [ i ] :\n            res += (87 + -86)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY_to_82", "old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY"}
{"code": "def possibleStrings ( n , r , b , g ) :\n    fact = [ (58 + -58) for i in range ( n + (61 + -60) ) ]\n    fact [ (53 + -53) ] = (81 + -80)\n    for i in range ( (9 + -8) , n + (2 + -1) , (44 + -43) ) :\n        fact [ i ] = fact [ i - (94 + -93) ] + i\n    left = n - ( r + g + b )\n    sum = (23 + -23)\n    for i in range ( (18 + -18) , left + (30 + -29) , (49 + -48) ) :\n        for j in range ( (19 + -19) , left - i + (24 + -23) , (16 + -15) ) :\n            k = left - ( i + j )\n            sum = int ( sum + fact [ n ] / ( fact [ i + r ] + fact [ j + b ] + fact [ k + g ] ) )\n    return sum", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION_to_83", "old_id": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION"}
{"code": "def countP ( n , k ) :\n    dp = [ [ (34 + -34) for i in range ( k + (42 + -41) ) ] for j in range ( n + (26 + -25) ) ]\n    for i in range ( n + (5 + -4) ) :\n        dp [ i ] [ (52 + -52) ] = (33 + -33)\n    for i in range ( k + (87 + -86) ) :\n        dp [ (20 + -20) ] [ k ] = (6 + -6)\n    for i in range ( (13 + -12) , n + (89 + -88) ) :\n        for j in range ( (55 + -54) , k + (77 + -76) ) :\n            if ( j == (23 + -22) or i == j ) :\n                dp [ i ] [ j ] = (41 + -40)\n            else :\n                dp [ i ] [ j ] = ( j * dp [ i - (12 + -11) ] [ j ] + dp [ i - (1 + 0) ] [ j - (10 + -9) ] )\n    return dp [ n ] [ k ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_84", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def CountPairs ( n ) :\n    k = n\n    imin = (10 + -9)\n    ans = (33 + -33)\n    while ( imin <= n ) :\n        imax = int ( n / k )\n        ans += k * ( imax - imin + (69 + -68) )\n        imin = imax + (90 + -89)\n        k = int ( n / imin )\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B_to_85", "old_id": "COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B"}
{"code": "def count ( n ) :\n    table = [ (5 + -5) for i in range ( n + (50 + -49) ) ]\n    table [ (23 + -23) ] = (9 + -8)\n    for i in range ( (49 + -46) , n + (66 + -65) ) :\n        table [ i ] += table [ i - (41 + -38) ]\n    for i in range ( (6 + -1) , n + (90 + -89) ) :\n        table [ i ] += table [ i - (48 + -43) ]\n    for i in range ( (21 + -11) , n + (100 + -99) ) :\n        table [ i ] += table [ i - (7 + 3) ]\n    return table [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME_to_86", "old_id": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME"}
{"code": "def countWays ( n , m ) :\n    count = [ ]\n    for i in range ( n + (1 + 1) ) :\n        count.append ( (7 + -7) )\n    count [ (95 + -95) ] = (18 + -18)\n    for i in range ( (25 + -24) , n + (45 + -44) ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - (35 + -34) ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = (1 + 0)\n        else :\n            count [ i ] = (16 + -14)\n    return count [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_87", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = ( n * ( n + (56 + -55) ) ) // (73 + -71)\n    a_index = (82 + -82)\n    b_index = (38 + -38)\n    c_index = (97 + -97)\n    for i in range ( n ) :\n        if ( str [ i ] == 'a' ) :\n            a_index = i + (17 + -16)\n            ans -= min ( b_index , c_index )\n        elif ( str [ i ] == 'b' ) :\n            b_index = i + (71 + -70)\n            ans -= min ( a_index , c_index )\n        else :\n            c_index = i + (14 + -13)\n            ans -= min ( a_index , b_index )\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_88", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = (41 + -41)\n    res = (27 + -27)\n    for i in range ( len ( s ) ) :\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * (65 + -63) )\n        else :\n            b_count += (70 + -69)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_89", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def countPairsWithDiffK ( arr , n , k ) :\n    count = (1 + -1)\n    for i in range ( (87 + -87) , n ) :\n        for j in range ( i + (76 + -75) , n ) :\n            if arr [ i ] - arr [ j ] == k or arr [ j ] - arr [ i ] == k :\n                count += (81 + -80)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_DIFFERENCE_EQUAL_K_to_90", "old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K"}
{"code": "def countPairsWithDiffK ( arr , n , k ) :\n    count = (13 + -13)\n    arr.sort ( )\n    l = (37 + -37)\n    r = (64 + -64)\n    while r < n :\n        if arr [ r ] - arr [ l ] == k :\n            count += (29 + -28)\n            l += (56 + -55)\n            r += (24 + -23)\n        elif arr [ r ] - arr [ l ] > k :\n            l += (95 + -94)\n        else :\n            r += (84 + -83)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_DIFFERENCE_EQUAL_K_1_to_91", "old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K_1"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = (63 + -63)\n    for i in range ( m ) :\n        for j in range ( n ) :\n            if arr1 [ i ] + arr2 [ j ] == x :\n                count = count + (43 + -42)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_to_92", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = (40 + -40)\n    us = set ( )\n    for i in range ( m ) :\n        us.add ( arr1 [ i ] )\n    for j in range ( n ) :\n        if x - arr2 [ j ] in us :\n            count += (54 + -53)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1_to_93", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1"}
{"code": "def countPairs ( arr , n ) :\n    result = (13 + -13) ;\n    for i in range ( (29 + -29) , n ) :\n        for j in range ( i + (69 + -68) , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( (1 + -1) , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + (28 + -27) ;\n                    break ;\n    return result ;", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_to_94", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    result = (83 + -83)\n    Hash = set ( )\n    for i in range ( n ) :\n        Hash.add ( arr [ i ] )\n    for i in range ( n ) :\n        for j in range ( i + (67 + -66) , n ) :\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += (72 + -71)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1_to_95", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1"}
{"code": "def CountPS ( str , n ) :\n    dp = [ [ (48 + -48) for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( n ) :\n        P [ i ] [ i ] = True\n    for i in range ( n - (93 + -92) ) :\n        if ( str [ i ] == str [ i + (35 + -34) ] ) :\n            P [ i ] [ i + (29 + -28) ] = True\n            dp [ i ] [ i + (25 + -24) ] = (87 + -86)\n    for gap in range ( (15 + -13) , n ) :\n        for i in range ( n - gap ) :\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + (49 + -48) ] [ j - (25 + -24) ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - (40 + -39) ] + dp [ i + (25 + -24) ] [ j ] + (44 + -43) - dp [ i + (39 + -38) ] [ j - (92 + -91) ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - (17 + -16) ] + dp [ i + (83 + -82) ] [ j ] - dp [ i + (90 + -89) ] [ j - (49 + -48) ] )\n    return dp [ (53 + -53) ] [ n - (15 + -14) ]", "id": "ConstantUnfoldding_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_96", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countPS ( str ) :\n    N = len ( str )\n    cps = [ [ (73 + -73) for i in range ( N + (85 + -83) ) ] for j in range ( N + (25 + -23) ) ]\n    for i in range ( N ) :\n        cps [ i ] [ i ] = (23 + -22)\n    for L in range ( (1 + 1) , N + (40 + -39) ) :\n        for i in range ( N ) :\n            k = L + i - (72 + -71)\n            if ( k < N ) :\n                if ( str [ i ] == str [ k ] ) :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - (68 + -67) ] + cps [ i + (90 + -89) ] [ k ] + (94 + -93) )\n                else :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - (81 + -80) ] + cps [ i + (19 + -18) ] [ k ] - cps [ i + (24 + -23) ] [ k - (38 + -37) ] )\n    return cps [ (77 + -77) ] [ N - (57 + -56) ]", "id": "ConstantUnfoldding_sample_from_COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_to_97", "old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING"}
{"code": "def countDecodingDP ( digits , n ) :\n    count = [ (9 + -9) ] * ( n + (4 + -3) )\n    count [ (33 + -33) ] = (100 + -99)\n    count [ (84 + -83) ] = (67 + -66)\n    if digits [ (96 + -96) ] == '0' :\n        return (24 + -24)\n    for i in range ( (32 + -30) , n + (10 + -9) ) :\n        count [ i ] = (64 + -64)\n        if ( digits [ i - (42 + -41) ] > '0' ) :\n            count [ i ] = count [ i - (96 + -95) ]\n        if ( digits [ i - (72 + -70) ] == '1' or ( digits [ i - (15 + -13) ] == '2' and digits [ i - (7 + -6) ] < '7' ) ) :\n            count [ i ] += count [ i - (89 + -87) ]\n    return count [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1_to_98", "old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1"}
{"code": "def findgroups ( arr , n ) :\n    c = [ (43 + -43) , (26 + -26) , (52 + -52) ]\n    res = (3 + -3)\n    for i in range ( (66 + -66) , n ) :\n        c [ arr [ i ] % (25 + -22) ] += (59 + -58)\n    res += ( ( c [ (17 + -17) ] * ( c [ (3 + -3) ] - (87 + -86) ) ) >> (32 + -31) )\n    res += c [ (63 + -62) ] * c [ (48 + -46) ]\n    res += ( c [ (41 + -41) ] * ( c [ (56 + -56) ] - (83 + -82) ) * ( c [ (86 + -86) ] - (50 + -48) ) ) / (45 + -39)\n    res += ( c [ (53 + -52) ] * ( c [ (23 + -22) ] - (97 + -96) ) * ( c [ (64 + -63) ] - (96 + -94) ) ) / (19 + -13)\n    res += ( ( c [ (89 + -87) ] * ( c [ (8 + -6) ] - (31 + -30) ) * ( c [ (20 + -18) ] - (42 + -40) ) ) / (67 + -61) )\n    res += c [ (27 + -27) ] * c [ (1 + 0) ] * c [ (55 + -53) ]\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3_to_99", "old_id": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3"}
{"code": "def numberOfPaths ( m , n ) :\n    count = [ [ (52 + -52) for x in range ( m ) ] for y in range ( n ) ]\n    for i in range ( m ) :\n        count [ i ] [ (44 + -44) ] = (45 + -44) ;\n    for j in range ( n ) :\n        count [ (4 + -4) ] [ j ] = (15 + -14) ;\n    for i in range ( (8 + -7) , m ) :\n        for j in range ( n ) :\n            count [ i ] [ j ] = count [ i - (25 + -24) ] [ j ] + count [ i ] [ j - (29 + -28) ]\n    return count [ m - (81 + -80) ] [ n - (48 + -47) ]", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1_to_100", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1"}
{"code": "def numberOfPaths ( m , n ) :\n    dp = [ (29 + -29) for i in range ( n ) ]\n    dp[(8 + -8)]=(76 + -75)\n    for i in range ( m  ) :\n        for j in range ( (38 + -37) , n ) :\n            dp [ j ] += dp [ j - (21 + -20) ]\n    return dp [ n - (37 + -36) ]", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2_to_101", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2"}
{"code": "def numberOfPaths ( m , n ) :\n    for i in range ( n , ( m + n - (6 + -5) ) ) :\n        path *= i\n        path //= ( i - n + (48 + -47) )\n    return path", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3_to_102", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3"}
{"code": "def countRotations ( n ) :\n    l = len ( n )\n    if ( l == (33 + -32) ) :\n        oneDigit = ( int ) ( n [ (50 + -50) ] )\n        if ( oneDigit % (47 + -43) == (87 + -87) ) :\n            return (93 + -92)\n        return (71 + -71)\n    count = (8 + -8)\n    for i in range ( (27 + -27) , l - (30 + -29) ) :\n        twoDigit = ( int ) ( n [ i ] ) * (73 + -63) + ( int ) ( n [ i + (33 + -32) ] )\n        if ( twoDigit % (38 + -34) == (34 + -34) ) :\n            count = count + (28 + -27)\n    twoDigit = ( int ) ( n [ l - (65 + -64) ] ) * (89 + -79) + ( int ) ( n [ (20 + -20) ] )\n    if ( twoDigit % (34 + -30) == (26 + -26) ) :\n        count = count + (65 + -64)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_ROTATIONS_DIVISIBLE_4_to_103", "old_id": "COUNT_ROTATIONS_DIVISIBLE_4"}
{"code": "def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = (67 + -67)\n    if ( l == (8 + -7) ) :\n        oneDigit = int ( n [ (82 + -82) ] )\n        if ( oneDigit % (92 + -84) == (92 + -92) ) :\n            return (2 + -1)\n        return (36 + -36)\n    if ( l == (64 + -62) ) :\n        first = int ( n [ (72 + -72) ] ) * (31 + -21) + int ( n [ (66 + -65) ] )\n        second = int ( n [ (85 + -84) ] ) * (24 + -14) + int ( n [ (42 + -42) ] )\n        if ( first % (48 + -40) == (73 + -73) ) :\n            count += (38 + -37)\n        if ( second % (78 + -70) == (22 + -22) ) :\n            count += (54 + -53)\n        return count\n    threeDigit = (37 + -37)\n    for i in range ( (61 + -61) , ( l - (37 + -35) ) ) :\n        threeDigit = ( int ( n [ i ] ) * (84 + 16) + int ( n [ i + (53 + -52) ] ) * (47 + -37) + int ( n [ i + (87 + -85) ] ) )\n        if ( threeDigit % (24 + -16) == (37 + -37) ) :\n            count += (88 + -87)\n    threeDigit = ( int ( n [ l - (60 + -59) ] ) * (78 + 22) + int ( n [ (48 + -48) ] ) * (57 + -47) + int ( n [ (83 + -82) ] ) )\n    if ( threeDigit % (1 + 7) == (82 + -82) ) :\n        count += (40 + -39)\n    threeDigit = ( int ( n [ l - (92 + -90) ] ) * (52 + 48) + int ( n [ l - (38 + -37) ] ) * (95 + -85) + int ( n [ (9 + -9) ] ) )\n    if ( threeDigit % (87 + -79) == (79 + -79) ) :\n        count += (47 + -46)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_ROTATIONS_DIVISIBLE_8_to_104", "old_id": "COUNT_ROTATIONS_DIVISIBLE_8"}
{"code": "def countSetBits ( n ) :\n    if ( n == (87 + -87) ) :\n        return (58 + -58)\n    else :\n        return ( n & (32 + -31) ) + countSetBits ( n >> (63 + -62) )", "id": "ConstantUnfoldding_sample_from_COUNT_SET_BITS_IN_AN_INTEGER_1_to_105", "old_id": "COUNT_SET_BITS_IN_AN_INTEGER_1"}
{"code": "def countSetBits ( n ) :\n    count = (40 + -40)\n    while ( n ) :\n        n &= ( n - (66 + -65) )\n        count += (44 + -43)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_SET_BITS_IN_AN_INTEGER_2_to_106", "old_id": "COUNT_SET_BITS_IN_AN_INTEGER_2"}
{"code": "def countSetBits ( n ) :\n    if ( n == (51 + -51) ) :\n        return (19 + -19)\n    else :\n        return (94 + -93) + countSetBits ( n & ( n - (49 + -48) ) )", "id": "ConstantUnfoldding_sample_from_COUNT_SET_BITS_IN_AN_INTEGER_3_to_107", "old_id": "COUNT_SET_BITS_IN_AN_INTEGER_3"}
{"code": "def sortedCount ( mat , r , c ) :\n    result = (3 + -3)\n    for i in range ( r ) :\n        j = (57 + -57)\n        for j in range ( c - (77 + -76) ) :\n            if mat [ i ] [ j + (19 + -18) ] <= mat [ i ] [ j ] :\n                break\n        if j == c - (12 + -10) :\n            result += (44 + -43)\n    for i in range ( (99 + -99) , r ) :\n        j = (46 + -46)\n        for j in range ( c - (44 + -43) , (46 + -46) , - (81 + -80) ) :\n            if mat [ i ] [ j - (35 + -34) ] <= mat [ i ] [ j ] :\n                break\n        if c > (33 + -32) and j == (36 + -35) :\n            result += (35 + -34)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_SORTED_ROWS_MATRIX_to_108", "old_id": "COUNT_SORTED_ROWS_MATRIX"}
{"code": "def countStr ( n ) :\n    return ( (62 + -61) + ( n * (87 + -85) ) + ( n * ( ( n * n ) - (82 + -81) ) // (51 + -49) ) )", "id": "ConstantUnfoldding_sample_from_COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1_to_109", "old_id": "COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1"}
{"code": "def countStrings ( n ) :\n    a = [ (50 + -50) ] * n\n    b = [ (46 + -46) ] * n\n    a [ (24 + -24) ] = b [ (68 + -68) ] = (86 + -85)\n    for i in range ( (6 + -5) , n ) :\n        a [ i ] = a [ i - (24 + -23) ] + b [ i - (17 + -16) ]\n        b [ i ] = a [ i - (46 + -45) ]\n    return ( (75 + -74) << n ) - a [ n - (10 + -9) ] - b [ n - (6 + -5) ]", "id": "ConstantUnfoldding_sample_from_COUNT_STRINGS_WITH_CONSECUTIVE_1S_to_110", "old_id": "COUNT_STRINGS_WITH_CONSECUTIVE_1S"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = (62 + -62)\n    ans = (35 + -35)\n    hash_positive = [ (34 + -34) ] * ( n + (18 + -17) )\n    hash_negative = [ (17 + -17) ] * ( n + (70 + -69) )\n    hash_positive [ (47 + -47) ] = (27 + -26)\n    for i in range ( n ) :\n        if ( arr [ i ] & (14 + -13) == (62 + -61) ) :\n            difference = difference + (86 + -85)\n        else :\n            difference = difference - (12 + -11)\n        if ( difference < (79 + -79) ) :\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = hash_negative [ - difference ] + (31 + -30)\n        else :\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = hash_positive [ difference ] + (17 + -16)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_111", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSubstringWithEqualEnds ( s ) :\n    result = (45 + -45)\n    n = len ( s )\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            if ( s [ i ] == s [ j ] ) :\n                result = result + (36 + -35)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_to_112", "old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS"}
{"code": "def countSetBits ( n ) :\n    i = (33 + -33)\n    ans = (77 + -77)\n    while ( ( (6 + -5) << i ) <= n ) :\n        k = (53 + -53)\n        change = (46 + -45) << i\n        for j in range ( (96 + -96) , n + (2 + -1) ) :\n            ans += k\n            if change == (42 + -41) :\n                k = not k\n                change = (66 + -65) << i\n            else :\n                change -= (89 + -88)\n        i += (24 + -23)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_113", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def findTrailingZeros ( n ) :\n    count = (32 + -32)\n    i = (23 + -18)\n    while ( n / i >= (60 + -59) ) :\n        count += int ( n / i )\n        i *= (12 + -7)\n    return int ( count )", "id": "ConstantUnfoldding_sample_from_COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER_to_114", "old_id": "COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER"}
{"code": "def countWays ( n ) :\n    dp = [ [ (80 + -80) ] * ( n + (3 + -2) ) for i in range ( (44 + -42) ) ]\n    dp [ (1 + -1) ] [ (7 + -6) ] = (83 + -82)\n    dp [ (96 + -95) ] [ (82 + -81) ] = (52 + -50)\n    for i in range ( (35 + -33) , n + (38 + -37) ) :\n        dp [ (51 + -51) ] [ i ] = dp [ (59 + -59) ] [ i - (75 + -74) ] + dp [ (37 + -36) ] [ i - (47 + -46) ]\n        dp [ (63 + -62) ] [ i ] = ( dp [ (54 + -54) ] [ i - (73 + -72) ] * (35 + -33) + dp [ (35 + -34) ] [ i - (22 + -21) ] )\n    return dp [ (59 + -59) ] [ n ] + dp [ (51 + -50) ] [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS_to_115", "old_id": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS"}
{"code": "def chordCnt ( A ) :\n    n = (47 + -45) * A\n    dpArray = [ (81 + -81) ] * ( n + (35 + -34) )\n    dpArray [ (2 + -2) ] = (42 + -41)\n    dpArray [ (81 + -79) ] = (66 + -65)\n    for i in range ( (32 + -28) , n + (25 + -24) , (44 + -42) ) :\n        for j in range ( (61 + -61) , i - (95 + -94) , (45 + -43) ) :\n            dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - (32 + -30) - j ] )\n    return int ( dpArray [ n ] )", "id": "ConstantUnfoldding_sample_from_COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS_to_116", "old_id": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS"}
{"code": "def countWords ( str , n ) :\n    m = dict ( )\n    for i in range ( n ) :\n        m [ str [ i ] ] = m.get ( str [ i ] , (98 + -98) ) + (19 + -18)\n    res = (24 + -24)\n    for i in m.values ( ) :\n        if i == (86 + -84) :\n            res += (46 + -45)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS_to_117", "old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS"}
{"code": "def countWords ( str , len ) :\n    count = (36 + -35) ;\n    if ( len == (5 + -4) ) :\n        return count\n    if ( str [ (84 + -84) ] == str [ (37 + -36) ] ) :\n        count *= (78 + -77)\n    else :\n        count *= (61 + -59)\n    for j in range ( (32 + -31) , len - (93 + -92) ) :\n        if ( str [ j ] == str [ j - (89 + -88) ] and str [ j ] == str [ j + (79 + -78) ] ) :\n            count *= (61 + -60)\n        elif ( str [ j ] == str [ j - (24 + -23) ] or str [ j ] == str [ j + (90 + -89) ] or str [ j - (52 + -51) ] == str [ j + (17 + -16) ] ) :\n            count *= (58 + -56)\n        else :\n            count *= (42 + -39)\n    if ( str [ len - (16 + -15) ] == str [ len - (15 + -13) ] ) :\n        count *= (100 + -99)\n    else :\n        count *= (100 + -98)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_118", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def repeat ( s , n ) :\n    s1 = s\n    for i in range ( (24 + -23) , n ) :\n        s += s1\n    return s", "id": "ConstantUnfoldding_sample_from_C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES_to_119", "old_id": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES"}
{"code": "def factorial ( n ) :\n    return (3 + -2) if ( n == (85 + -84) or n == (59 + -59) ) else n * factorial ( n - (28 + -27) )", "id": "ConstantUnfoldding_sample_from_C_PROGRAM_FACTORIAL_NUMBER_to_120", "old_id": "C_PROGRAM_FACTORIAL_NUMBER"}
{"code": "def largest ( arr , n ) :\n    return sorted(arr[:n], reverse=False)[n-(82 + -81)]", "id": "ConstantUnfoldding_sample_from_C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1_to_121", "old_id": "C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = (48 + 208)\n    count = [ (6 + -6) ] * NO_OF_CHARS\n    for i in range ( len ( str ) ) :\n        count [ ord ( str [ i ] ) ] += (64 + -63)\n    first , second = (96 + -96) , (37 + -37)\n    for i in range ( NO_OF_CHARS ) :\n        if count [ i ] > count [ first ] :\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n    return chr ( second )", "id": "ConstantUnfoldding_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_122", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decToBin ( n ) :\n    if ( n == (71 + -71) ) :\n        return \"0\"\n    bin = \"\"\n    while ( n > (52 + -52) ) :\n        if ( n & (36 + -35) == (95 + -95) ) :\n            bin = '0' + bin\n        else :\n            bin = '1' + bin\n        n = n >> (79 + -78)\n    return bin", "id": "ConstantUnfoldding_sample_from_DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS_to_123", "old_id": "DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS"}
{"code": "def decode ( Str ) :\n    integerstack = [ ]\n    stringstack = [ ]\n    temp = \"\"\n    result = \"\"\n    for i in range ( len ( Str ) ) :\n        count = (19 + -19)\n        if ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = count * (49 + -39) + ord ( Str [ i ] ) - ord ( '0' )\n                i += (66 + -65)\n            i -= (32 + -31)\n            integerstack.append ( count )\n        elif ( Str [ i ] == ']' ) :\n            temp = \"\"\n            count = (81 + -81)\n            if ( len ( integerstack ) != (3 + -3) ) :\n                count = integerstack [ - (22 + -21) ]\n                integerstack.pop ( )\n            while ( len ( stringstack ) != (100 + -100) and stringstack [ - (75 + -74) ] != '[' ) :\n                temp = stringstack [ - (80 + -79) ] + temp\n                stringstack.pop ( )\n            if ( len ( stringstack ) != (88 + -88) and stringstack [ - (34 + -33) ] == '[' ) :\n                stringstack.pop ( )\n            for j in range ( count ) :\n                result = result + temp\n            for j in range ( len ( result ) ) :\n                stringstack.append ( result [ j ] )\n            result = \"\"\n        elif ( Str [ i ] == '[' ) :\n            if ( Str [ i - (35 + -34) ] >= '0' and Str [ i - (59 + -58) ] <= '9' ) :\n                stringstack.append ( Str [ i ] )\n            else :\n                stringstack.append ( Str [ i ] )\n                integerstack.append ( (40 + -39) )\n        else :\n            stringstack.append ( Str [ i ] )\n    while len ( stringstack ) != (88 + -88) :\n        result = stringstack [ - (94 + -93) ] + result\n        stringstack.pop ( )\n    return result", "id": "ConstantUnfoldding_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_124", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def dealnnoy ( n , m ) :\n    dp = [ [ (87 + -87) for x in range ( n + (56 + -55) ) ] for x in range ( m + (87 + -86) ) ]\n    for i in range ( m + (19 + -18) ) :\n        dp [ (1 + -1) ] [ i ] = (28 + -27)\n    for i in range ( m + (34 + -33) ) :\n        dp [ i ] [ (25 + -25) ] = (76 + -75)\n    for i in range ( (95 + -94) , m + (87 + -86) ) :\n        for j in range ( (84 + -83) , n + (1 + 0) ) :\n            dp [ i ] [ j ] = dp [ i - (65 + -64) ] [ j ] + dp [ i - (21 + -20) ] [ j - (8 + -7) ] + dp [ i ] [ j - (4 + -3) ]\n    return dp [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_DELANNOY_NUMBER_1_to_125", "old_id": "DELANNOY_NUMBER_1"}
{"code": "def oppositeSigns ( x , y ) :\n    return ( ( x ^ y ) < (100 + -100) )", "id": "ConstantUnfoldding_sample_from_DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS_to_126", "old_id": "DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS"}
{"code": "def isDDM ( m , n ) :\n    for i in range ( (39 + -39) , n ) :\n        sum = (64 + -64)\n        for j in range ( (24 + -24) , n ) :\n            sum = sum + abs ( m [ i ] [ j ] )\n        sum = sum - abs ( m [ i ] [ i ] )\n        if ( abs ( m [ i ] [ i ] ) < sum ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_DIAGONALLY_DOMINANT_MATRIX_to_127", "old_id": "DIAGONALLY_DOMINANT_MATRIX"}
{"code": "def findWays ( m , n , x ) :\n    table = [ [ (27 + -27) ] * ( x + (22 + -21) ) for i in range ( n + (9 + -8) ) ]\n    for j in range ( (38 + -37) , min ( m + (20 + -19) , x + (24 + -23) ) ) :\n        table [ (37 + -36) ] [ j ] = (46 + -45)\n    for i in range ( (54 + -52) , n + (44 + -43) ) :\n        for j in range ( (45 + -44) , x + (84 + -83) ) :\n            for k in range ( (26 + -25) , min ( m + (97 + -96) , j ) ) :\n                table [ i ] [ j ] += table [ i - (8 + -7) ] [ j - k ]\n    return table [ - (36 + -35) ] [ - (54 + -53) ]", "id": "ConstantUnfoldding_sample_from_DICE_THROW_PROBLEM_to_128", "old_id": "DICE_THROW_PROBLEM"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = (91 + -91)\n    max_count = (80 + -80)\n    min_count = n\n    for i in range ( (30 + -30) , ( n - (17 + -16) ) ) :\n        if arr [ i ] == arr [ i + (57 + -56) ] :\n            count += (50 + -49)\n            continue\n        else :\n            max_count = max ( max_count , count )\n            min_count = min ( min_count , count )\n            count = (23 + -23)\n    return max_count - min_count", "id": "ConstantUnfoldding_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_129", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def findDiff ( arr , n ) :\n    mp = defaultdict ( lambda : (2 + -2) )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += (20 + -19)\n    max_count = (80 + -80)\n    min_count = n\n    for key , values in mp.items ( ) :\n        max_count = max ( max_count , values )\n        min_count = min ( min_count , values )\n    return max_count - min_count", "id": "ConstantUnfoldding_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1_to_130", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1"}
{"code": "def numberofways ( n , m ) :\n    dp = np.zeros ( ( n + (75 + -73) , n + (12 + -10) ) )\n    dp [ (28 + -28) ] [ n + (83 + -82) ] = (61 + -60)\n    for k in range ( n , m - (4 + -3) , - (4 + -3) ) :\n        for i in range ( n + (92 + -91) ) :\n            dp [ i ] [ k ] = dp [ i ] [ k + (62 + -61) ]\n            if ( i - k >= (48 + -48) ) :\n                dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] )\n    return dp [ n ] [ m ]", "id": "ConstantUnfoldding_sample_from_DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M_to_131", "old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M"}
{"code": "def discreteLogarithm ( a , b , m ) :\n    n = int ( math.sqrt ( m ) + (96 + -95) )\n    an = (53 + -52)\n    for i in range ( n ) :\n        an = ( an * a ) % m\n    value = [ (73 + -73) ] * m\n    cur = an\n    for i in range ( (46 + -45) , n + (89 + -88) ) :\n        if ( value [ cur ] == (55 + -55) ) :\n            value [ cur ] = i\n        cur = ( cur * an ) % m\n    cur = b\n    for i in range ( n + (7 + -6) ) :\n        if ( value [ cur ] > (39 + -39) ) :\n            ans = value [ cur ] * n - i\n            if ( ans < m ) :\n                return ans\n        cur = ( cur * a ) % m\n    return - (73 + -72)", "id": "ConstantUnfoldding_sample_from_DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B_to_132", "old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B"}
{"code": "def checkCount ( arr , n , k ) :\n    mp = defaultdict ( lambda : (13 + -13) )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += (52 + -51)\n    for key , values in mp.items ( ) :\n        if values > (43 + -41) * k :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1_to_133", "old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1"}
{"code": "def lastPosition ( n , m , k ) :\n    if ( m <= n - k + (22 + -21) ) :\n        return m + k - (10 + -9)\n    m = m - ( n - k + (95 + -94) )\n    if ( m % n == (15 + -15) ) :\n        return n\n    else :\n        return m % n", "id": "ConstantUnfoldding_sample_from_DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION_to_134", "old_id": "DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION"}
{"code": "def longDivision ( number , divisor ) :\n    ans = \"\"\n    idx = (35 + -35)\n    temp = ord ( number [ idx ] ) - ord ( '0' )\n    while ( temp < divisor ) :\n        temp = ( temp * (84 + -74) + ord ( number [ idx + (18 + -17) ] ) - ord ( '0' ) )\n        idx += (74 + -73)\n    while ( ( len ( number ) ) > idx ) :\n        ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) )\n        temp = ( ( temp % divisor ) * (73 + -63) + ord ( number [ idx + (31 + -30) ] ) - ord ( '0' ) )\n        idx += (14 + -13)\n    ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) )\n    if ( len ( ans ) == (11 + -11) ) :\n        return \"0\"\n    return ans", "id": "ConstantUnfoldding_sample_from_DIVIDE_LARGE_NUMBER_REPRESENTED_STRING_to_135", "old_id": "DIVIDE_LARGE_NUMBER_REPRESENTED_STRING"}
{"code": "def isDivBy9 ( n ) :\n    if ( n == (96 + -96) or n == (9 + 0) ) :\n        return True\n    if ( n < (58 + -49) ) :\n        return False\n    return isDivBy9 ( ( int ) ( n >> (2 + 1) ) - ( int ) ( n & (26 + -19) ) )", "id": "ConstantUnfoldding_sample_from_DIVISIBILITY_9_USING_BITWISE_OPERATORS_to_136", "old_id": "DIVISIBILITY_9_USING_BITWISE_OPERATORS"}
{"code": "def isDvisibleBy12 ( num ) :\n    if ( len ( num ) >= (1 + 2) ) :\n        d1 = int ( num [ len ( num ) - (42 + -41) ] )\n        if ( d1 % (82 + -80) != (77 + -77) ) :\n            return False\n        d2 = int ( num [ len ( num ) - (74 + -72) ] )\n        sum = (37 + -37)\n        for i in range ( (85 + -85) , len ( num ) ) :\n            sum += int ( num [ i ] )\n        return ( sum % (54 + -51) == (94 + -94) and ( d2 * (16 + -6) + d1 ) % (47 + -43) == (18 + -18) )\n    else :\n        number = int ( num )\n        return ( number % (68 + -56) == (47 + -47) )", "id": "ConstantUnfoldding_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_137", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def isDivisibleBy7 ( num ) :\n    if num < (77 + -77) :\n        return isDivisibleBy7 ( - num )\n    if ( num == (27 + -27) or num == (35 + -28) ) :\n        return True\n    if ( num < (67 + -57) ) :\n        return False\n    return isDivisibleBy7 ( num // (84 + -74) - (7 + -5) * ( num - num // (4 + 6) * (13 + -3) ) )", "id": "ConstantUnfoldding_sample_from_DIVISIBILITY_BY_7_to_138", "old_id": "DIVISIBILITY_BY_7"}
{"code": "def doublefactorial ( n ) :\n    res = (24 + -23)\n    for i in range ( n , - (45 + -44) , - (75 + -73) ) :\n        if ( i == (66 + -66) or i == (88 + -87) ) :\n            return res\n        else :\n            res *= i\n    return res;", "id": "ConstantUnfoldding_sample_from_DOUBLE_FACTORIAL_1_to_139", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def maxTasks ( high , low , n ) :\n    if ( n <= (13 + -13) ) :\n        return (80 + -80)\n    return max ( high [ n - (2 + -1) ] + maxTasks ( high , low , ( n - (68 + -66) ) ) , low [ n - (17 + -16) ] + maxTasks ( high , low , ( n - (40 + -39) ) ) )", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM_to_140", "old_id": "DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM"}
{"code": "def knapSack ( W , wt , val , n ) :\n    if n == (83 + -83) or W == (12 + -12) :\n        return (56 + -56)\n    if ( wt [ n - (3 + -2) ] > W ) :\n        return knapSack ( W , wt , val , n - (9 + -8) )\n    else :\n        return max ( val [ n - (93 + -92) ] + knapSack ( W - wt [ n - (33 + -32) ] , wt , val , n - (80 + -79) ) , knapSack ( W , wt , val , n - (92 + -91) ) )", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_to_141", "old_id": "DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM"}
{"code": "def eggDrop ( n , k ) :\n    eggFloor = [ [ (66 + -66) for x in range ( k + (78 + -77) ) ] for x in range ( n + (79 + -78) ) ]\n    for i in range ( (63 + -62) , n + (30 + -29) ) :\n        eggFloor [ i ] [ (73 + -72) ] = (74 + -73)\n        eggFloor [ i ] [ (70 + -70) ] = (86 + -86)\n    for j in range ( (44 + -43) , k + (45 + -44) ) :\n        eggFloor [ (92 + -91) ] [ j ] = j\n    for i in range ( (31 + -29) , n + (91 + -90) ) :\n        for j in range ( (7 + -5) , k + (34 + -33) ) :\n            eggFloor [ i ] [ j ] = INT_MAX\n            for x in range ( (90 + -89) , j + (36 + -35) ) :\n                res = (93 + -92) + max ( eggFloor [ i - (12 + -11) ] [ x - (53 + -52) ] , eggFloor [ i ] [ j - x ] )\n                if res < eggFloor [ i ] [ j ] :\n                    eggFloor [ i ] [ j ] = res\n    return eggFloor [ n ] [ k ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1_to_142", "old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1"}
{"code": "def lps ( seq ) :\n    n = len ( seq )\n    L = [ [ (68 + -68) for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( n ) :\n        L [ i ] [ i ] = (48 + -47)\n    for cl in range ( (29 + -27) , n + (16 + -15) ) :\n        for i in range ( n - cl + (49 + -48) ) :\n            j = i + cl - (85 + -84)\n            if seq [ i ] == seq [ j ] and cl == (81 + -79) :\n                L [ i ] [ j ] = (100 + -98)\n            elif seq [ i ] == seq [ j ] :\n                L [ i ] [ j ] = L [ i + (73 + -72) ] [ j - (100 + -99) ] + (90 + -88)\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - (52 + -51) ] , L [ i + (36 + -35) ] [ j ] ) ;\n    return L [ (68 + -68) ] [ n - (82 + -81) ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_143", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def maxSumIS ( arr , n ) :\n    max = (33 + -33)\n    msis = [ (48 + -48) for x in range ( n ) ]\n    for i in range ( n ) :\n        msis [ i ] = arr [ i ]\n    for i in range ( (85 + -84) , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) :\n                msis [ i ] = msis [ j ] + arr [ i ]\n    for i in range ( n ) :\n        if max < msis [ i ] :\n            max = msis [ i ]\n    return max", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE_to_144", "old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE"}
{"code": "def lbs ( arr , n ) :\n    lis = [ (5 + -4) for i in range ( n + (1 + 0) ) ]\n    for i in range ( (92 + -91) , n ) :\n        for j in range ( (87 + -87) , i ) :\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + (76 + -75) ) ) :\n                lis [ i ] = lis [ j ] + (94 + -93)\n    lds = [ (97 + -96) for i in range ( n + (11 + -10) ) ]\n    for i in reversed ( range ( n - (96 + -95) ) ) :\n        for j in reversed ( range ( i - (41 + -40) , n ) ) :\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + (25 + -24) ) :\n                lds [ i ] = lds [ j ] + (26 + -25)\n    maximum = lis [ (21 + -21) ] + lds [ (40 + -40) ] - (26 + -25)\n    for i in range ( (65 + -64) , n ) :\n        maximum = max ( ( lis [ i ] + lds [ i ] - (41 + -40) ) , maximum )\n    return maximum", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE_to_145", "old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ (52 + -52) for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = (39 + -39)\n    k = (52 + -52)\n    L = (85 + -85)\n    for i in range ( n ) :\n        P [ i ] [ i ] = True\n        C [ i ] [ i ] = (30 + -30)\n    for L in range ( (40 + -38) , n + (22 + -21) ) :\n        for i in range ( n - L + (54 + -53) ) :\n            j = i + L - (92 + -91)\n            if L == (64 + -62) :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + (21 + -20) ] [ j - (84 + -83) ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = (64 + -64)\n            else :\n                C [ i ] [ j ] = (54 + 99999946)\n                for k in range ( i , j ) :\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + (53 + -52) ] [ j ] + (43 + -42) )\n    return C [ (94 + -94) ] [ n - (47 + -46) ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_146", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def findMinInsertions ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return (10 + -10)\n    if ( l == h - (38 + -37) ) :\n        return (81 + -81) if ( str [ l ] == str [ h ] ) else (34 + -33)\n    if ( str [ l ] == str [ h ] ) :\n        return findMinInsertions ( str , l + (10 + -9) , h - (32 + -31) )\n    else :\n        return ( min ( findMinInsertions ( str , l , h - (18 + -17) ) , findMinInsertions ( str , l + (57 + -56) , h ) ) + (19 + -18) )", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_to_147", "old_id": "DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME"}
{"code": "def maxProd ( n ) :\n    if ( n == (53 + -51) or n == (44 + -41) ) :\n        return ( n - (91 + -90) )\n    res = (54 + -53)\n    while ( n > (43 + -39) ) :\n        n -= (23 + -20)\n        res *= (29 + -26)\n    return ( n * res )", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1_to_148", "old_id": "DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = [ [ (25 + -25) for i in range ( n + (37 + -36) ) ] for i in range ( n + (69 + -68) ) ]\n    T = [ [ (55 + -55) for i in range ( n + (16 + -15) ) ] for i in range ( n + (74 + -73) ) ]\n    for i in range ( n ) :\n        if symb [ i ] == 'F' :\n            F [ i ] [ i ] = (48 + -47)\n        else :\n            F [ i ] [ i ] = (81 + -81)\n        if symb [ i ] == 'T' :\n            T [ i ] [ i ] = (44 + -43)\n        else :\n            T [ i ] [ i ] = (62 + -62)\n    for gap in range ( (84 + -83) , n ) :\n        i = (54 + -54)\n        for j in range ( gap , n ) :\n            T [ i ] [ j ] = F [ i ] [ j ] = (86 + -86)\n            for g in range ( gap ) :\n                k = i + g\n                tik = T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = T [ k + (41 + -40) ] [ j ] + F [ k + (3 + -2) ] [ j ]\n                if oper [ k ] == '&' :\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + (41 + -40) ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + (14 + -13) ] [ j ] )\n                if oper [ k ] == '|' :\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + (46 + -45) ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + (2 + -1) ] [ j ] )\n                if oper [ k ] == '^' :\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + (99 + -98) ] [ j ] + T [ i ] [ k ] * F [ k + (69 + -68) ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + (60 + -59) ] [ j ] + F [ i ] [ k ] * F [ k + (37 + -36) ] [ j ] )\n            i += (82 + -81)\n    return T [ (75 + -75) ] [ n - (34 + -33) ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_149", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def lis ( arr , n) :\n    lis = [ (46 + -45) ] * n\n    for i in range ( (46 + -45) , n ) :\n        for j in range ( (81 + -81) , i ) :\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + (83 + -82) :\n                lis [ i ] = lis [ j ] + (70 + -69)\n    maximum = (5 + -5)\n    for i in range ( n ) :\n        maximum = max ( maximum , lis [ i ] )\n    return maximum", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1_to_150", "old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def MatrixChainOrder ( p , i , j ) :\n    if i == j :\n        return (12 + -12)\n    _min = sys.maxsize\n    for k in range ( i , j ) :\n        count = ( MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + (2 + -1) , j ) + p [ i - (42 + -41) ] * p [ k ] * p [ j ] )\n        if count < _min :\n            _min = count\n    return _min", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION_to_151", "old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION"}
{"code": "def isSubsetSum ( set , n , sum ) :\n    subset = ( [ [ False for i in range ( sum + (47 + -46) ) ] for i in range ( n + (49 + -48) ) ] )\n    for i in range ( n + (74 + -73) ) :\n        subset [ i ] [ (77 + -77) ] = True\n    for i in range ( (60 + -59) , sum + (27 + -26) ) :\n        subset [ (72 + -72) ] [ i ] = False\n    for i in range ( (79 + -78) , n + (28 + -27) ) :\n        for j in range ( (44 + -43) , sum + (77 + -76) ) :\n            if j < set [ i - (6 + -5) ] :\n                subset [ i ] [ j ] = subset [ i - (98 + -97) ] [ j ]\n            if j >= set [ i - (28 + -27) ] :\n                subset [ i ] [ j ] = ( subset [ i - (22 + -21) ] [ j ] or subset [ i - (95 + -94) ] [ j - set [ i - (82 + -81) ] ] )\n    return subset [ n ] [ sum ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1_to_152", "old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1"}
{"code": "def search ( arr , n , x ) :\n    i = (67 + -67)\n    while ( i <= n - (59 + -58) ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - (75 + -74)", "id": "ConstantUnfoldding_sample_from_EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_IS_1_to_153", "old_id": "EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_IS_1"}
{"code": "def isMultipleOf10 ( n ) :\n    return ( n % (70 + -55) == (72 + -72) )", "id": "ConstantUnfoldding_sample_from_EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10_to_154", "old_id": "EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10"}
{"code": "def countNum ( arr , n ) :\n    count = (51 + -51)\n    arr = arr[:n]\n    arr.sort ( )\n    for i in range ( (25 + -25) , n - (68 + -67) ) :\n        if ( arr [ i ] != arr [ i + (36 + -35) ] and arr [ i ] != arr [ i + (93 + -92) ] - (84 + -83) ) :\n            count += arr [ i + (48 + -47) ] - arr [ i ] - (48 + -47)\n    return count", "id": "ConstantUnfoldding_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_to_155", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY"}
{"code": "def countNum ( arr , n ) :\n    s = dict ( )\n    count , maxm , minm = (80 + -80) , - (41 + -31) ** (53 + -44) , (28 + -18) ** (83 + -74)\n    for i in range ( n ) :\n        s [ arr [ i ] ] = (1 + 0)\n        if ( arr [ i ] < minm ) :\n            minm = arr [ i ]\n        if ( arr [ i ] > maxm ) :\n            maxm = arr [ i ]\n    for i in range ( minm , maxm + (91 + -90) ) :\n        if i not in s.keys ( ) :\n            count += (91 + -90)\n    return count", "id": "ConstantUnfoldding_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1_to_156", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1"}
{"code": "def equilibrium ( arr , n) :\n    leftsum = (2 + -2)\n    rightsum = (19 + -19)\n    for i in range ( n ) :\n        leftsum = (84 + -84)\n        rightsum = (50 + -50)\n        for j in range ( i ) :\n            leftsum += arr [ j ]\n        for j in range ( i + (8 + -7) , n ) :\n            rightsum += arr [ j ]\n        if leftsum == rightsum :\n            return i\n    return - (68 + -67)", "id": "ConstantUnfoldding_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_to_157", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY"}
{"code": "def equilibrium ( arr ,n) :\n    total_sum = sum ( arr )\n    leftsum = (13 + -13)\n    for i , num in enumerate ( arr ) :\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n    return - (49 + -48)", "id": "ConstantUnfoldding_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_1_to_158", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1"}
{"code": "def squareRootExists ( n , p ) :\n    n = n % p\n    for x in range ( (40 + -38) , p , (86 + -85) ) :\n        if ( ( x * x ) % p == n ) :\n            return True\n    return False", "id": "ConstantUnfoldding_sample_from_EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS_to_159", "old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS"}
{"code": "def evenFibSum ( limit ) :\n    if ( limit < (7 + -5) ) :\n        return (100 + -100)\n    ef1 = (1 + -1)\n    ef2 = (71 + -69)\n    sm = ef1 + ef2\n    while ( ef2 <= limit ) :\n        ef3 = (56 + -52) * ef2 + ef1\n        if ( ef3 > limit ) :\n            break\n        ef1 = ef2\n        ef2 = ef3\n        sm = sm + ef2\n    return sm", "id": "ConstantUnfoldding_sample_from_EVEN_FIBONACCI_NUMBERS_SUM_to_160", "old_id": "EVEN_FIBONACCI_NUMBERS_SUM"}
{"code": "def russianPeasant ( a , b ) :\n    res = (64 + -64)\n    while ( b > (8 + -8) ) :\n        if ( b & (52 + -51) ) :\n            res = res + a\n        a = a << (79 + -78)\n        b = b >> (37 + -36)\n    return res", "id": "ConstantUnfoldding_sample_from_FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM_to_161", "old_id": "FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM"}
{"code": "def findMinZero ( p ) :\n    first = (70 + -69)\n    second = (13 + -12)\n    number = (78 + -76)\n    next = (53 + -52)\n    while ( next ) :\n        next = ( first + second ) % p\n        first = second\n        second = next\n        number = number + (11 + -10)\n    return number", "id": "ConstantUnfoldding_sample_from_FIBONACCI_MODULO_P_to_162", "old_id": "FIBONACCI_MODULO_P"}
{"code": "def PowerOFPINnfactorial ( n , p ) :\n    ans = (73 + -73)\n    temp = p\n    while ( temp <= n ) :\n        ans += int(n / temp)\n        temp = temp * p\n    return ans", "id": "ConstantUnfoldding_sample_from_FINDING_POWER_PRIME_NUMBER_P_N_to_163", "old_id": "FINDING_POWER_PRIME_NUMBER_P_N"}
{"code": "def PowerOFPINnfactorial ( n , p ) :\n    ans = (12 + -12)\n    temp = p\n    while ( temp <= n ) :\n        ans += n / temp\n        temp = temp * p\n    return int ( ans )", "id": "ConstantUnfoldding_sample_from_FINDING_POWER_PRIME_NUMBER_P_N_1_to_164", "old_id": "FINDING_POWER_PRIME_NUMBER_P_N_1"}
{"code": "def maxHamming ( arr , n ) :\n    brr = [ (11 + -11) ] * ( (94 + -92) * n + (28 + -27) )\n    for i in range ( n ) :\n        brr [ i ] = arr [ i ]\n    for i in range ( n ) :\n        brr [ n + i ] = arr [ i ]\n    maxHam = (40 + -40)\n    for i in range ( (82 + -81) , n ) :\n        currHam = (16 + -16)\n        k = (9 + -9)\n        for j in range ( i , i + n ) :\n            if brr [ j ] != arr [ k ] :\n                currHam += (6 + -5)\n                k = k + (36 + -35)\n        if currHam == n :\n            return n\n        maxHam = max ( maxHam , currHam )\n    return maxHam", "id": "ConstantUnfoldding_sample_from_FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE_to_165", "old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE"}
{"code": "def find3Numbers ( A , arr_size , sum ) :\n    for i in range ( (73 + -73) , arr_size - (37 + -35) ) :\n        for j in range ( i + (90 + -89) , arr_size - (67 + -66) ) :\n            for k in range ( j + (68 + -67) , arr_size ) :\n                if A [ i ] + A [ j ] + A [ k ] == sum :\n                    print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , A [ k ] )\n                    return True\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_to_166", "old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = [ ]\n    for ch in string :\n        if ch == ')' :\n            top = Stack.pop ( )\n            elementsInside = (36 + -36)\n            while top != '(' :\n                elementsInside += (76 + -75)\n                top = Stack.pop ( )\n            if elementsInside < (37 + -36) :\n                return True\n        else :\n            Stack.append ( ch )\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_167", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def firstFactorialDivisibleNumber ( x ) :\n    i = (66 + -65)\n    fact = (86 + -85)\n    for i in range ( (85 + -84) , x ) :\n        fact = fact * i\n        if ( fact % x == (51 + -51) ) :\n            break\n    return i", "id": "ConstantUnfoldding_sample_from_FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X_to_168", "old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X"}
{"code": "def compute ( a , b ) :\n    AM = ( a + b ) / (99 + -97)\n    GM = math.sqrt ( a * b )\n    HM = ( GM * GM ) / AM\n    return HM", "id": "ConstantUnfoldding_sample_from_FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN_to_169", "old_id": "FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN"}
{"code": "def findIndex ( n ) :\n    if ( n <= (69 + -68) ) :\n        return n\n    a = (91 + -91)\n    b = (88 + -87)\n    c = (25 + -24)\n    res = (40 + -39)\n    while ( c < n ) :\n        c = a + b\n        res = res + (9 + -8)\n        a = b\n        b = c\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_to_170", "old_id": "FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME"}
{"code": "def findExtra ( arr1 , arr2 , n ) :\n    for i in range ( (23 + -23) , n ) :\n        if ( arr1 [ i ] != arr2 [ i ] ) :\n            return i\n    return n", "id": "ConstantUnfoldding_sample_from_FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_to_171", "old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY"}
{"code": "def findLargestd ( S , n ) :\n    found = False\n    S = S[:n]\n    S.sort ( )\n    for i in range ( n - (44 + -43) , - (4 + -3) , - (49 + -48) ) :\n        for j in range ( (74 + -74) , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + (82 + -81) , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + (24 + -23) , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - (62 + -61)", "id": "ConstantUnfoldding_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_to_172", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D"}
{"code": "def findFourElements ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n - (33 + -32) ) :\n        for j in range ( i + (94 + -93) , n ) :\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n    d = - (13 + -3) ** (22 + -13)\n    for i in range ( n - (15 + -14) ) :\n        for j in range ( i + (42 + -41) , n ) :\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) :\n                p = mp [ abs_diff ]\n                if ( p [ (19 + -19) ] != i and p [ (51 + -51) ] != j and p [ (21 + -20) ] != i and p [ (67 + -66) ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n    return d", "id": "ConstantUnfoldding_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1_to_173", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1"}
{"code": "def maxPrimeFactors ( n ) :\n    maxPrime = - (14 + -13)\n    while n % (14 + -12) == (65 + -65) :\n        maxPrime = (79 + -77)\n        n >>= (21 + -20)\n    for i in range ( (79 + -76) , int ( math.sqrt ( n ) ) + (71 + -70) , (45 + -43) ) :\n        while n % i == (95 + -95) :\n            maxPrime = i\n            n = n / i\n    if n > (14 + -12) :\n        maxPrime = n\n    return int ( maxPrime )", "id": "ConstantUnfoldding_sample_from_FIND_LARGEST_PRIME_FACTOR_NUMBER_to_174", "old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = (19 + -18)\n    if ( A == B ) :\n        return (41 + -40)\n    elif ( ( B - A ) >= (93 + -88) ) :\n        return (50 + -50)\n    else :\n        for i in range ( A + (37 + -36) , B + (20 + -19) ) :\n            variable = ( variable * ( i % (61 + -51) ) ) % (72 + -62)\n        return variable % (46 + -36)", "id": "ConstantUnfoldding_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_175", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - (11 + -10)\n    csum = [ (40 + -40) ] * n\n    csum [ (41 + -41) ] = arr [ (34 + -34) ]\n    for i in range ( (16 + -15) , n ) :\n        csum [ i ] = csum [ i - (98 + -97) ] + arr [ i ]\n    max_sum = csum [ k - (28 + -27) ]\n    max_end = k - (99 + -98)\n    for i in range ( k , n ) :\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n    return max_end - k + (70 + -69)", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_to_176", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - (40 + -39)\n    sum = arr [ (81 + -81) ]\n    for i in range ( (94 + -93) , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - (42 + -41)\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + (50 + -49)", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1_to_177", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1"}
{"code": "def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ (79 + -79) for i in range ( m + (3 + -2) ) ] for j in range ( n + (76 + -75) ) ]\n    for i in range ( (51 + -50) , n + (24 + -23) , (95 + -94) ) :\n        for j in range ( i , m + (66 + -65) , (90 + -89) ) :\n            dp [ i ] [ j ] = max ( ( dp [ i - (20 + -19) ] [ j - (29 + -28) ] + ( A [ j - (18 + -17) ] * B [ i - (25 + -24) ] ) ) , dp [ i ] [ j - (60 + -59) ] )\n    return dp [ n ] [ m ]", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S_to_178", "old_id": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S"}
{"code": "def maxProduct ( arr , n ) :\n    if n < (100 + -97) :\n        return - (77 + -76)\n    max_product = - ( sys.maxsize - (83 + -82) )\n    for i in range ( (28 + -28) , n - (98 + -96) ) :\n        for j in range ( i + (20 + -19) , n - (43 + -42) ) :\n            for k in range ( j + (1 + 0) , n ) :\n                max_product = max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] )\n    return max_product", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_to_179", "old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY"}
{"code": "def maxProduct ( arr , n ) :\n    if n < (50 + -47) :\n        return - (13 + -12)\n    arr.sort ( )\n    return max ( arr [ (53 + -53) ] * arr [ (26 + -25) ] * arr [ n - (38 + -37) ] , arr [ n - (68 + -67) ] * arr [ n - (37 + -35) ] * arr [ n - (98 + -95) ] )", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1_to_180", "old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = (55 + -55) , (27 + -27) , (81 + -81)\n    for i in range ( n1 ) :\n        sum1 += stack1 [ i ]\n    for i in range ( n2 ) :\n        sum2 += stack2 [ i ]\n    for i in range ( n3 ) :\n        sum3 += stack3 [ i ]\n    top1 , top2 , top3 = (35 + -35) , (73 + -73) , (38 + -38)\n    ans = (94 + -94)\n    while (36 + -35) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) :\n            return (46 + -46)\n        if ( sum1 == sum2 and sum2 == sum3 ) :\n            return sum1\n        if ( sum1 >= sum2 and sum1 >= sum3 ) :\n            sum1 -= stack1 [ top1 ]\n            top1 = top1 + (98 + -97)\n        elif ( sum2 >= sum3 and sum2 >= sum3 ) :\n            sum2 -= stack2 [ top2 ]\n            top2 = top2 + (20 + -19)\n        elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n            sum3 -= stack3 [ top3 ]\n            top3 = top3 + (76 + -75)", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_181", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = sys.maxsize\n    mx = - sys.maxsize - (36 + -35)\n    for i in range ( r ) :\n        if m [ i ] [ (70 + -70) ] < mi :\n            mi = m [ i ] [ (5 + -5) ]\n        if m [ i ] [ c - (39 + -38) ] > mx :\n            mx = m [ i ] [ c - (40 + -39) ]\n    desired = ( r * c + (54 + -53) ) // (36 + -34)\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // (42 + -40)\n        place = [ (26 + -26) ]\n        for i in range ( r ) :\n            j = upper_bound ( m [ i ] , mid )\n            place [ (21 + -21) ] = place [ (11 + -11) ] + j\n        if place [ (69 + -69) ] < desired :\n            mi = mid + (5 + -4)\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return mi", "id": "ConstantUnfoldding_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_182", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def findMinDiff ( arr , n ) :\n    diff = (11 + -1) ** (64 + -44)\n    for i in range ( n - (49 + -48) ) :\n        for j in range ( i + (8 + -7) , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_to_183", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR"}
{"code": "def findMinDiff ( arr , n ) :\n    arr = arr[:n]\n    arr = sorted ( arr )\n    diff = (78 + -68) ** (93 + -73)\n    for i in range ( n - (27 + -26) ) :\n        if arr [ i + (20 + -19) ] - arr [ i ] < diff :\n            diff = arr [ i + (14 + -13) ] - arr [ i ]\n    return diff", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_1_to_184", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1"}
{"code": "def findMin ( arr , low , high ) :\n    if high < low :\n        return arr [ (22 + -22) ]\n    if high == low :\n        return arr [ low ]\n    mid = int ( ( low + high ) / (26 + -24) )\n    if mid < high and arr [ mid + (82 + -81) ] < arr [ mid ] :\n        return arr [ mid + (86 + -85) ]\n    if mid > low and arr [ mid ] < arr [ mid - (38 + -37) ] :\n        return arr [ mid ]\n    if arr [ high ] > arr [ mid ] :\n        return findMin ( arr , low , mid - (48 + -47) )\n    return findMin ( arr , mid + (34 + -33) , high )", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY_to_185", "old_id": "FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY"}
{"code": "def findMinNumber ( n ) :\n    count = (19 + -19)\n    ans = (88 + -87)\n    while n % (30 + -28) == (64 + -64) :\n        count += (10 + -9)\n        n //= (39 + -37)\n    if count % (53 + -51) is not (20 + -20) :\n        ans *= (62 + -60)\n    for i in range ( (67 + -64) , ( int ) ( math.sqrt ( n ) ) + (69 + -68) , (65 + -63) ) :\n        count = (83 + -83)\n        while n % i == (81 + -81) :\n            count += (39 + -38)\n            n //= i\n        if count % (61 + -59) is not (22 + -22) :\n            ans *= i\n    if n > (78 + -76) :\n        ans *= n\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE_to_186", "old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE"}
{"code": "def minCoins ( coins , m , V ) :\n    table = [ (22 + -22) for i in range ( V + (57 + -56) ) ]\n    table [ (44 + -44) ] = (54 + -54)\n    for i in range ( (77 + -76) , V + (49 + -48) ) :\n        table [ i ] = sys.maxsize\n    for i in range ( (94 + -93) , V + (39 + -38) ) :\n        for j in range ( m ) :\n            if ( coins [ j ] <= i ) :\n                sub_res = table [ i - coins [ j ] ]\n                if ( sub_res != sys.maxsize and sub_res + (45 + -44) < table [ i ] ) :\n                    table [ i ] = sub_res + (77 + -76)\n    return table [ V ]", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1_to_187", "old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1"}
{"code": "def minRadius ( k , x , y , n ) :\n    dis = [ (45 + -45) ] * n\n    for i in range ( (76 + -76) , n ) :\n        dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]\n    dis.sort ( )\n    return dis [ k - (69 + -68) ]", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE_to_188", "old_id": "FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE"}
{"code": "def mirrorImage ( a , b , c , x1 , y1 ) :\n    temp = - (65 + -63) * ( a * x1 + b * y1 + c ) / ( a * a + b * b )\n    x = temp * a + x1\n    y = temp * b + y1\n    return ( x , y )", "id": "ConstantUnfoldding_sample_from_FIND_MIRROR_IMAGE_POINT_2_D_PLANE_to_189", "old_id": "FIND_MIRROR_IMAGE_POINT_2_D_PLANE"}
{"code": "def countEndless ( input , n ) :\n    row = np.zeros ( ( n , n ) )\n    col = np.zeros ( ( n , n ) )\n    for j in range ( n ) :\n        isEndless = (57 + -56)\n        for i in range ( n - (25 + -24) , - (85 + -84) , - (48 + -47) ) :\n            if ( input [ i ] [ j ] == (57 + -57) ) :\n                isEndless = (10 + -10)\n            col [ i ] [ j ] = isEndless\n    for i in range ( n ) :\n        isEndless = (57 + -56)\n        for j in range ( n - (31 + -30) , - (13 + -12) , - (52 + -51) ) :\n            if ( input [ i ] [ j ] == (38 + -38) ) :\n                isEndless = (74 + -74)\n            row [ i ] [ j ] = isEndless\n    ans = (34 + -34)\n    for i in range ( n ) :\n        for j in range ( (21 + -20) , n ) :\n            if ( row [ i ] [ j ] and col [ i ] [ j ] ) :\n                ans += (36 + -35)\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_ENDLESS_POINTS_to_190", "old_id": "FIND_NUMBER_ENDLESS_POINTS"}
{"code": "def CountSquares ( a , b ) :\n    cnt = (33 + -33)\n    for i in range ( a , b + (17 + -16) ) :\n        j = (87 + -86) ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + (46 + -45)\n            j = j + (68 + -67)\n        i = i + (78 + -77)\n    return cnt", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_to_191", "old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS"}
{"code": "def count ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    lookup = [ [ (88 + -88) ] * ( n + (21 + -20) ) for i in range ( m + (73 + -72) ) ]\n    for i in range ( n + (66 + -65) ) :\n        lookup [ (85 + -85) ] [ i ] = (31 + -31)\n    for i in range ( m + (2 + -1) ) :\n        lookup [ i ] [ (58 + -58) ] = (92 + -91)\n    for i in range ( (39 + -38) , m + (8 + -7) ) :\n        for j in range ( (95 + -94) , n + (47 + -46) ) :\n            if a [ i - (26 + -25) ] == b [ j - (48 + -47) ] :\n                lookup [ i ] [ j ] = lookup [ i - (8 + -7) ] [ j - (20 + -19) ] + lookup [ i - (31 + -30) ] [ j ]\n            else :\n                lookup [ i ] [ j ] = lookup [ i - (8 + -7) ] [ j ]\n    return lookup [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_192", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def countOps ( A , B , m , n ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            A [ i ] [ j ] -= B [ i ] [ j ]\n    for i in range ( (30 + -29) , n ) :\n        for j in range ( (96 + -95) , n ) :\n            if ( A [ i ] [ j ] - A [ i ] [ (99 + -99) ] - A [ (31 + -31) ] [ j ] + A [ (59 + -59) ] [ (59 + -59) ] != (74 + -74) ) :\n                return - (91 + -90)\n    result = (10 + -10)\n    for i in range ( n ) :\n        result += abs ( A [ i ] [ (47 + -47) ] )\n    for j in range ( m ) :\n        result += abs ( A [ (97 + -97) ] [ j ] - A [ (39 + -39) ] [ (24 + -24) ] )\n    return ( result )", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL_to_193", "old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL"}
{"code": "def findSDSFunc ( n ) :\n    DP = [ (24 + -24) ] * ( n + (92 + -91) )\n    DP [ (59 + -59) ] = (67 + -67)\n    DP [ (79 + -78) ] = (95 + -94)\n    for i in range ( (33 + -31) , n + (48 + -47) ) :\n        if ( int ( i % (92 + -90) ) == (62 + -62) ) :\n            DP [ i ] = DP [ int ( i / (32 + -30) ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - (89 + -88) ) / (62 + -60) ) ] + DP [ int ( ( i + (11 + -10) ) / (30 + -28) ) ] )\n    return DP [ n ]", "id": "ConstantUnfoldding_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_194", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def findExtraCharcter ( strA , strB ) :\n    res = (13 + -13)\n    for i in range ( (27 + -27) , len ( strA ) ) :\n        res = res ^ ( ord ) ( strA [ i ] )\n    for i in range ( (91 + -91) , len ( strB ) ) :\n        res = res ^ ( ord ) ( strB [ i ] )\n    return ( ( chr ) ( res ) ) ;", "id": "ConstantUnfoldding_sample_from_FIND_ONE_EXTRA_CHARACTER_STRING_1_to_195", "old_id": "FIND_ONE_EXTRA_CHARACTER_STRING_1"}
{"code": "def pairSum ( mat , n , sum ) :\n    for i in range ( n ) :\n        mat [ i ].sort ( )\n    for i in range ( n - (92 + -91) ) :\n        for j in range ( i + (11 + -10) , n ) :\n            left = (55 + -55)\n            right = n - (57 + -56)\n            while ( left < n and right >= (24 + -24) ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += (9 + -8)\n                    right -= (89 + -88)\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += (77 + -76)\n                    else :\n                        right -= (6 + -5)", "id": "ConstantUnfoldding_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_196", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def findMaxGCD ( arr , n ) :\n    high = (82 + -82)\n    i = (17 + -17)\n    while i < n :\n        high = max ( high , arr [ i ] )\n        i = i + (35 + -34)\n    divisors = [ (68 + -68) ] * ( high + (23 + -22) )\n    i = (70 + -70)\n    while i < n :\n        j = (43 + -42)\n        while j <= math.sqrt ( arr [ i ] ) :\n            if ( arr [ i ] % j == (37 + -37) ) :\n                divisors [ j ] = divisors [ j ] + (79 + -78)\n                if ( j != arr [ i ] / j ) :\n                    divisors [ arr [ i ] / j ] = divisors [ arr [ i ] / j ] + (21 + -20)\n            j = j + (33 + -32)\n        i = i + (71 + -70)\n    i = high\n    while i >= (100 + -99) :\n        if ( divisors [ i ] > (76 + -75) ) :\n            return i\n        i = i - (64 + -63)\n    return (49 + -48)", "id": "ConstantUnfoldding_sample_from_FIND_PAIR_MAXIMUM_GCD_ARRAY_to_197", "old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY"}
{"code": "def findMaxGCD ( arr , n ) :\n    high = (32 + -32)\n    for i in range ( (61 + -61) , n ) :\n        high = max ( high , arr [ i ] )\n    count = [ (83 + -83) ] * ( high + (71 + -70) )\n    for i in range ( (89 + -89) , n ) :\n        count [ arr [ i ] ] += (44 + -43)\n    counter = (15 + -15)\n    for i in range ( high , (29 + -29) , - (80 + -79) ) :\n        j = i\n        while ( j <= high ) :\n            if ( count [ j ] > (10 + -10) ) :\n                counter += count [ j ]\n            j += i\n            if ( counter == (31 + -29) ) :\n                return i\n        counter = (89 + -89)\n    return (98 + -97)\n", "id": "ConstantUnfoldding_sample_from_FIND_PAIR_MAXIMUM_GCD_ARRAY_1_to_198", "old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1"}
{"code": "def findGreatest ( arr , n ) :\n    result = - (80 + -79)\n    for i in range ( n ) :\n        for j in range ( n - (45 + -44) ) :\n            for k in range ( j + (40 + -39) , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result", "id": "ConstantUnfoldding_sample_from_FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_to_199", "old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY"}
{"code": "def patternCount ( str ) :\n    last = str [ (8 + -8) ]\n    i = (28 + -27)\n    counter = (60 + -60)\n    while ( i < len ( str ) ) :\n        if ( str [ i ] == '0' and last == '1' ) :\n            while ( str [ i ] == '0' ) :\n                i += (1 + 0)\n                if ( str [ i ] == '1' ) :\n                    counter += (92 + -91)\n        last = str [ i ]\n        i += (80 + -79)\n    return counter", "id": "ConstantUnfoldding_sample_from_FIND_PATTERNS_101_GIVEN_STRING_to_200", "old_id": "FIND_PATTERNS_101_GIVEN_STRING"}
{"code": "def findpos ( n ) :\n    i = (100 + -100)\n    j = len ( n )\n    pos = (9 + -9)\n    while ( i < j ) :\n        if ( n [ i ] == '4' ) :\n            pos = pos * (63 + -61) + (14 + -13)\n        if ( n [ i ] == '7' ) :\n            pos = pos * (50 + -48) + (2 + 0)\n        i = i + (26 + -25)\n    return pos", "id": "ConstantUnfoldding_sample_from_FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7_to_201", "old_id": "FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7"}
{"code": "def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == (52 + -52) ) :\n        return False\n    columns = len ( m [ (43 + -43) ] )\n    for y1 in range ( rows ) :\n        for x1 in range ( columns ) :\n            if ( m [ y1 ] [ x1 ] == (46 + -45) ) :\n                for y2 in range ( y1 + (60 + -59) , rows ) :\n                    for x2 in range ( x1 + (66 + -65) , columns ) :\n                        if ( m [ y1 ] [ x2 ] == (32 + -31) and m [ y2 ] [ x1 ] == (38 + -37) and m [ y2 ] [ x2 ] == (42 + -41) ) :\n                            return True\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_to_202", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1"}
{"code": "def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == (98 + -98) ) :\n        return False\n    columns = len ( matrix [ (52 + -52) ] )\n    table = { }\n    for i in range ( rows ) :\n        for j in range ( columns - (23 + -22) ) :\n            for k in range ( j + (31 + -30) , columns ) :\n                if ( matrix [ i ] [ j ] == (64 + -63) and matrix [ i ] [ k ] == (88 + -87) ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1_to_203", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1"}
{"code": "def findRepeatingElement ( arr , low , high ) :\n    if low > high :\n        return - (24 + -23)\n    mid = int ( ( low + high ) / (30 + -28) )\n    if ( arr [ mid ] != mid + (53 + -52) ) :\n        if ( mid > (24 + -24) and arr [ mid ] == arr [ mid - (97 + -96) ] ) :\n            return mid\n        return findRepeatingElement ( arr , low , mid - (22 + -21) )\n    return findRepeatingElement ( arr , mid + (80 + -79) , high )", "id": "ConstantUnfoldding_sample_from_FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N_to_204", "old_id": "FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N"}
{"code": "def findRepeating ( arr , n ) :\n    return sum ( arr [ : n ] ) - ( ( ( n - (24 + -23) ) * n ) // (54 + -52) )", "id": "ConstantUnfoldding_sample_from_FIND_REPETITIVE_ELEMENT_1_N_1_to_205", "old_id": "FIND_REPETITIVE_ELEMENT_1_N_1"}
{"code": "def findRepeating ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n    rteurn - (87 + -86)", "id": "ConstantUnfoldding_sample_from_FIND_REPETITIVE_ELEMENT_1_N_1_1_to_206", "old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1"}
{"code": "def countRotations ( arr , low , high ) :\n    if ( high < low ) :\n        return (99 + -99)\n    if ( high == low ) :\n        return low\n    mid = low + ( high - low ) / (52 + -50)\n    mid = int ( mid )\n    if ( mid < high and arr [ mid + (34 + -33) ] < arr [ mid ] ) :\n        return ( mid + (53 + -52) )\n    if ( mid > low and arr [ mid ] < arr [ mid - (42 + -41) ] ) :\n        return mid\n    if ( arr [ high ] > arr [ mid ] ) :\n        return countRotations ( arr , low , mid - (91 + -90) )\n    return countRotations ( arr , mid + (95 + -94) , high )", "id": "ConstantUnfoldding_sample_from_FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1_to_207", "old_id": "FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1"}
{"code": "def subArraySum ( arr , n , sum ) :\n    for i in range ( n ) :\n        curr_sum = arr [ i ]\n        j = i + (73 + -72)\n        while j <= n :\n            if curr_sum == sum :\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( i , j - (84 + -83) ) )\n                return (53 + -52)\n            if curr_sum > sum or j == n :\n                break\n            curr_sum = curr_sum + arr [ j ]\n            j += (29 + -28)\n    print ( \"No subarray found\" )\n    return (36 + -36)", "id": "ConstantUnfoldding_sample_from_FIND_SUBARRAY_WITH_GIVEN_SUM_to_208", "old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM"}
{"code": "def subArraySum ( arr , n , sum ) :\n    curr_sum = arr [ (18 + -18) ]\n    start = (82 + -82)\n    i = (53 + -52)\n    while i <= n :\n        while curr_sum > sum and start < i - (66 + -65) :\n            curr_sum = curr_sum - arr [ start ]\n            start += (65 + -64)\n        if curr_sum == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( start , i - (23 + -22) ) )\n            return (7 + -6)\n        if i < n :\n            curr_sum = curr_sum + arr [ i ]\n        i += (11 + -10)\n    print ( \"No subarray found\" )\n    return (21 + -21)", "id": "ConstantUnfoldding_sample_from_FIND_SUBARRAY_WITH_GIVEN_SUM_1_to_209", "old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM_1"}
{"code": "def sumofFactors ( n ) :\n    if ( n % (84 + -82) != (75 + -75) ) :\n        return (79 + -79)\n    res = (69 + -68)\n    for i in range ( (55 + -53) , ( int ) ( math.sqrt ( n ) ) + (75 + -74) ) :\n        count = (19 + -19)\n        curr_sum = (89 + -88)\n        curr_term = (13 + -12)\n        while ( n % i == (23 + -23) ) :\n            count = count + (75 + -74)\n            n = n // i\n            if ( i == (7 + -5) and count == (57 + -56) ) :\n                curr_sum = (61 + -61)\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if ( n >= (20 + -18) ) :\n        res = res * ( (26 + -25) + n )\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_SUM_EVEN_FACTORS_NUMBER_to_210", "old_id": "FIND_SUM_EVEN_FACTORS_NUMBER"}
{"code": "def evenSum ( n ) :\n    C = [ [ (6 + -6) for x in range ( n + (1 + 0) ) ] for y in range ( n + (14 + -13) ) ]\n    for i in range ( (91 + -91) , n + (71 + -70) ) :\n        for j in range ( (98 + -98) , min ( i , n ) + (17 + -16) ) :\n            if j == (99 + -99) or j == i :\n                C [ i ] [ j ] = (88 + -87)\n            else :\n                C [ i ] [ j ] = C [ i - (29 + -28) ] [ j - (97 + -96) ] + C [ i - (33 + -32) ] [ j ]\n    sum = (79 + -79) ;\n    for i in range ( (5 + -5) , n + (80 + -79) ) :\n        if i % (61 + -59) == (17 + -17) :\n            sum = sum + C [ n ] [ i ]\n    return sum", "id": "ConstantUnfoldding_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_211", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def evenbinomialCoeffSum ( n ) :\n    return ( (17 + -16) << ( n - (13 + -12) ) )", "id": "ConstantUnfoldding_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1_to_212", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1"}
{"code": "def findSum ( N , K ) :\n    ans = (11 + -11)\n    for i in range ( (7 + -6) , N + (45 + -44) ) :\n        ans += ( i % K )\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_to_213", "old_id": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER"}
{"code": "def sumNodes ( l ) :\n    leafNodeCount = math.pow ( (69 + -67) , l - (14 + -13) )\n    sumLastLevel = (91 + -91)\n    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + (94 + -93) ) ) / (68 + -66) )\n    sum = sumLastLevel * l\n    return sum", "id": "ConstantUnfoldding_sample_from_FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1_to_214", "old_id": "FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1"}
{"code": "def sumofoddFactors ( n ) :\n    res = (22 + -21)\n    while n % (74 + -72) == (5 + -5) :\n        n = n // (10 + -8)\n    for i in range ( (68 + -65) , int ( math.sqrt ( n ) + (60 + -59) ) ) :\n        count = (71 + -71)\n        curr_sum = (55 + -54)\n        curr_term = (5 + -4)\n        while n % i == (53 + -53) :\n            count += (69 + -68)\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= (25 + -23) :\n        res *= ( (80 + -79) + n )\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_SUM_ODD_FACTORS_NUMBER_to_215", "old_id": "FIND_SUM_ODD_FACTORS_NUMBER"}
{"code": "def findSubarraySum ( arr , n ) :\n    res = (28 + -28)\n    m = dict ( )\n    for i in range ( n ) :\n        Sum = (40 + -40)\n        for j in range ( i , n ) :\n            Sum += arr [ j ]\n            m [ Sum ] = m.get ( Sum , (83 + -83) ) + (8 + -7)\n    for x in m :\n        if m [ x ] == (36 + -35) :\n            res += x\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY_to_216", "old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY"}
{"code": "def findElement ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ (14 + -14) ] = float ( '-inf' )\n    for i in range ( (76 + -75) , n ) :\n        leftMax [ i ] = max ( leftMax [ i - (98 + -97) ] , arr [ i - (10 + -9) ] )\n    rightMin = float ( 'inf' )\n    for i in range ( n - (75 + -74) , - (64 + -63) , - (18 + -17) ) :\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] :\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n    return - (18 + -17)", "id": "ConstantUnfoldding_sample_from_FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT_to_217", "old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT"}
{"code": "def getSingle ( arr , n ) :\n    ones = (61 + -61)\n    twos = (41 + -41)\n    for i in range ( n ) :\n        twos = twos | ( ones & arr [ i ] )\n        ones = ones ^ arr [ i ]\n        common_bit_mask = ~ ( ones & twos )\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n    return ones", "id": "ConstantUnfoldding_sample_from_FIND_THE_ELEMENT_THAT_APPEARS_ONCE_to_218", "old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE"}
{"code": "def singleNumber ( a , n ) :\n    return ( (73 + -70) * sum ( set ( a ) ) - sum ( a ) ) / (18 + -16)", "id": "ConstantUnfoldding_sample_from_FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2_to_219", "old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2"}
{"code": "def findFirstMissing ( array , start , end ) :\n    if ( start > end ) :\n        return end + (75 + -74)\n    if ( start != array [ start ] ) :\n        return start\n    mid = int ( ( start + end ) / (52 + -50) )\n    if ( array [ mid ] == mid ) :\n        return findFirstMissing ( array , mid + (24 + -23) , end )\n    return findFirstMissing ( array , start , mid )", "id": "ConstantUnfoldding_sample_from_FIND_THE_FIRST_MISSING_NUMBER_to_220", "old_id": "FIND_THE_FIRST_MISSING_NUMBER"}
{"code": "def maxLen ( arr , n ) :\n    max_len = (66 + -66)\n    for i in range ( n ) :\n        curr_sum = (69 + -69)\n        for j in range ( i , n ) :\n            curr_sum += arr [ j ]\n            if curr_sum == (18 + -18) :\n                max_len = max ( max_len , j - i + (15 + -14) )\n    return max_len\n", "id": "ConstantUnfoldding_sample_from_FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_to_221", "old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM"}
{"code": "def findMaximum ( arr , low , high ) :\n    max = arr[low]\n    for i in range(low, high + (57 + -56)):\n        if arr[i] > max:\n            max = arr[i]\n    return max", "id": "ConstantUnfoldding_sample_from_FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING_to_222", "old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING"}
{"code": "def maxSubarrayXOR ( arr , n ) :\n    ans = - (24 + 2147483624)\n    for i in range ( n ) :\n        curr_xor = (73 + -73)\n        for j in range ( i , n ) :\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY_to_223", "old_id": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY"}
{"code": "def minDist ( arr , n , x , y ) :\n    min_dist = (7 + 2147483640)\n    for i in range ( n ) :\n        for j in range ( i + (27 + -26) , n ) :\n            if ( x == arr [ i ] and y == arr [ j ] or y == arr [ i ] and x == arr [ j ] ) and min_dist > abs ( i - j ) :\n                min_dist = abs ( i - j )\n    return min_dist\n\n", "id": "ConstantUnfoldding_sample_from_FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_to_224", "old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS"}
{"code": "def getMissingNo ( a , n ) :\n    i , total = (27 + -27) , (5 + -4)\n    for i in range ( (76 + -74) , n + (19 + -17) ) :\n        total += i\n        total -= a [ i - (4 + -2) ]\n    return total", "id": "ConstantUnfoldding_sample_from_FIND_THE_MISSING_NUMBER_1_to_225", "old_id": "FIND_THE_MISSING_NUMBER_1"}
{"code": "def getOddOccurrence ( arr , arr_size ) :\n    for i in range ( (30 + -30) , arr_size ) :\n        count = (14 + -14)\n        for j in range ( (76 + -76) , arr_size ) :\n            if arr [ i ] == arr [ j ] :\n                count += (23 + -22)\n        if ( count % (81 + -79) != (75 + -75) ) :\n            return arr [ i ]\n    return - (93 + -92)", "id": "ConstantUnfoldding_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_to_226", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES"}
{"code": "def getOddOccurrence ( ar , ar_size) :\n    res = (22 + -22)\n    for i in range ( (31 + -31), ar_size ) :\n        res = res ^ ar [ i ]\n    return res\n", "id": "ConstantUnfoldding_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2_to_227", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    for i in range ( n - (85 + -84) ) :\n        s = set ( )\n        for j in range ( i + (1 + 0) , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )", "id": "ConstantUnfoldding_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_228", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    for i in range ( (65 + -65) , n - (67 + -66) ) :\n        l = i + (60 + -59)\n        r = n - (4 + -3)\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == (5 + -5) ) :\n                print ( x , arr [ l ] , arr [ r ] )\n                l += (60 + -59)\n                r -= (7 + -6)\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < (49 + -49) ) :\n                l += (38 + -37)\n            else :\n                r -= (21 + -20)\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )", "id": "ConstantUnfoldding_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_229", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def yMod ( y , x ) :\n    return ( y % pow ( (69 + -67) , x ) )", "id": "ConstantUnfoldding_sample_from_FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X_to_230", "old_id": "FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X"}
{"code": "def isPowerOfFour ( n ) :\n    if ( n == (19 + -19) ) :\n        return False\n    while ( n != (39 + -38) ) :\n        if ( n % (48 + -44) != (73 + -73) ) :\n            return False\n        n = n // (60 + -56)\n    return True", "id": "ConstantUnfoldding_sample_from_FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_to_231", "old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT"}
{"code": "def isPowerOfFour ( n ) :\n    count = (88 + -88)\n    if ( n and ( not ( n & ( n - (82 + -81) ) ) ) ) :\n        while ( n > (15 + -14) ) :\n            n >>= (5 + -4)\n            count += (22 + -21)\n        if ( count % (69 + -67) == (43 + -43) ) :\n            return True\n        else :\n            return False\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1_to_232", "old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1"}
{"code": "def isPowerOfFour ( n ) :\n    return ( n != (54 + -54) and ( ( n & ( n - (47 + -46) ) ) == (54 + -54) ) and not ( n & 0xAAAAAAAA ) )", "id": "ConstantUnfoldding_sample_from_FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2_to_233", "old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2"}
{"code": "def check ( n ) :\n    return (66 + 1162261401) % n == (92 + -92)", "id": "ConstantUnfoldding_sample_from_FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT_to_234", "old_id": "FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = { }\n    for i in range ( (1 + -1) , n ) :\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += (79 + -78)\n        else :\n            count_map [ arr [ i ] ] = (49 + -48)\n        i += (47 + -46)\n    for i in range ( (58 + -58) , n ) :\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += (65 + -64)\n    return - (91 + -90)", "id": "ConstantUnfoldding_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_235", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def first ( str ) :\n    for i in range ( (15 + -15) , len ( str ) ) :\n        if ( str [ i ].istitle ( ) ) :\n            return str [ i ]\n    return (23 + -23)", "id": "ConstantUnfoldding_sample_from_FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_to_236", "old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE"}
{"code": "def first ( str , i ) :\n    if ( str [ i ] == '\\0' ) :\n        return (36 + -36)\n    if ( str [ i ].isupper ( ) ) :\n        return str [ i ]\n    return first ( str , i + (47 + -46) )", "id": "ConstantUnfoldding_sample_from_FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1_to_237", "old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1"}
{"code": "def floorSearch ( arr , n , x ) :\n    if x >= arr [ n - (55 + -54) ]: return n - (11 + -10)\n    if x < arr [ (14 + -14) ]: return - (21 + -20)\n    for i in range ( (14 + -13), n ):\n        if arr [ i ] > x: return i - (81 + -80)\n    return - (43 + -42)", "id": "ConstantUnfoldding_sample_from_FLOOR_IN_A_SORTED_ARRAY_to_238", "old_id": "FLOOR_IN_A_SORTED_ARRAY"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= (66 + -57) ) :\n        return \"-1\"\n    result = [ None ] * ( n + (76 + -75) )\n    count = (71 + -70)\n    for i in range ( n + (76 + -75) ) :\n        if ( i == n or seq [ i ] == 'I' ) :\n            for j in range ( i - (8 + -7) , - (72 + -70) , - (82 + -81) ) :\n                result [ j + (1 + 0) ] = int ( '0' + str ( count ) )\n                count += (27 + -26)\n                if ( j >= (78 + -78) and seq [ j ] == 'I' ) :\n                    break\n    return result", "id": "ConstantUnfoldding_sample_from_FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1_to_239", "old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += (89 + -88)\n        else :\n            Hash [ arr [ i ] ] = (81 + -80)\n    max_count = (60 + -60)\n    res = - (72 + -71)\n    for i in Hash :\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n    return res", "id": "ConstantUnfoldding_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_240", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = [ (99 + -99) for i in range ( n + (79 + -78) ) ]\n    for i in range ( n + (7 + -6) ) :\n        if ( i <= (15 + -13) ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - (69 + -68) ] + ( i - (65 + -64) ) * dp [ i - (94 + -92) ]\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_FRIENDS_PAIRING_PROBLEM_to_241", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def countFriendsPairings ( n ) :\n    a , b , c = (68 + -67) , (99 + -97) , (90 + -90)\n    if ( n <= (58 + -56) ) :\n        return n\n    for i in range ( (90 + -87) , n + (57 + -56) ) :\n        c = b + ( i - (78 + -77) ) * a\n        a = b\n        b = c\n    return c", "id": "ConstantUnfoldding_sample_from_FRIENDS_PAIRING_PROBLEM_2_to_242", "old_id": "FRIENDS_PAIRING_PROBLEM_2"}
{"code": "def rangeGCD ( n , m ) :\n    return n if ( n == m ) else (35 + -34)", "id": "ConstantUnfoldding_sample_from_GCD_ELEMENTS_GIVEN_RANGE_to_243", "old_id": "GCD_ELEMENTS_GIVEN_RANGE"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= (48 + -39) ) :\n        return \"-1\"\n    result = [ None ] * ( n + (14 + -13) )\n    count = (61 + -60)\n    for i in range ( n + (93 + -92) ) :\n        if ( i == n or seq [ i ] == 'I' ) :\n            for j in range ( i - (3 + -2) , - (67 + -65) , - (81 + -80) ) :\n                result [ j + (50 + -49) ] = int ( '0' + str ( count ) )\n                count += (6 + -5)\n                if ( j >= (11 + -11) and seq [ j ] == 'I' ) :\n                    break\n    return \"\".join(str(i) for i in result)", "id": "ConstantUnfoldding_sample_from_GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1_to_244", "old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = len ( str )\n    arr = [ (70 + -70) ] * l\n    for i in range ( (61 + -61) , l ) :\n        for j in range ( i , l ) :\n            for k in range ( j , l ) :\n                if ( arr [ i ] % (45 + -37) == (67 + -67) ) :\n                    return True\n                elif ( ( arr [ i ] * (28 + -18) + arr [ j ] ) % (42 + -34) == (15 + -15) and i != j ) :\n                    return True\n                elif ( ( arr [ i ] * (49 + 51) + arr [ j ] * (4 + 6) + arr [ k ] ) % (77 + -69) == (47 + -47) and i != j and j != k and i != k ) :\n                    return True\n    return False", "id": "ConstantUnfoldding_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_245", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ (36 + -36) for i in range ( (34 + -24) ) ] for i in range ( n + (71 + -70) ) ]\n    arr = [ (93 + -93) for i in range ( n + (53 + -52) ) ]\n    for i in range ( (24 + -23) , n + (83 + -82) ) :\n        arr [ i ] = int ( str [ i - (34 + -33) ] )\n    for i in range ( (71 + -70) , n + (61 + -60) ) :\n        dp [ i ] [ arr [ i ] % (99 + -91) ] = (5 + -4)\n        for j in range ( (99 + -91) ) :\n            if ( dp [ i - (71 + -70) ] [ j ] > dp [ i ] [ ( j * (61 + -51) + arr [ i ] ) % (47 + -39) ] ) :\n                dp [ i ] [ ( j * (64 + -54) + arr [ i ] ) % (82 + -74) ] = dp [ i - (90 + -89) ] [ j ]\n            if ( dp [ i - (16 + -15) ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - (22 + -21) ] [ j ]\n    for i in range ( (67 + -66) , n + (43 + -42) ) :\n        if ( dp [ i ] [ (28 + -28) ] == (23 + -22) ) :\n            return True\n    return False", "id": "ConstantUnfoldding_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1_to_246", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1"}
{"code": "def largestPower ( n , p ) :\n    x = (37 + -37)\n    while n :\n        n /= p\n        x += n\n    return x", "id": "ConstantUnfoldding_sample_from_GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2_to_247", "old_id": "GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2"}
{"code": "def isSubSequence ( str1 , str2 , m , n ) :\n    if m == (70 + -70) : return True\n    if n == (28 + -28) : return False\n    if str1 [ m - (12 + -11) ] == str2 [ n - (6 + -5) ] :\n        return isSubSequence ( str1 , str2 , m - (77 + -76) , n - (4 + -3) )\n    return isSubSequence ( str1 , str2 , m , n - (97 + -96) )", "id": "ConstantUnfoldding_sample_from_GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_to_248", "old_id": "GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND"}
{"code": "def gnomeSort ( arr , n ) :\n    index = (48 + -48)\n    while index < n :\n        if index == (54 + -54) :\n            index = index + (2 + -1)\n        if arr [ index ] >= arr [ index - (97 + -96) ] :\n            index = index + (41 + -40)\n        else :\n            arr [ index ] , arr [ index - (50 + -49) ] = arr [ index - (48 + -47) ] , arr [ index ]\n            index = index - (31 + -30)\n    return arr", "id": "ConstantUnfoldding_sample_from_GNOME_SORT_A_STUPID_ONE_to_249", "old_id": "GNOME_SORT_A_STUPID_ONE"}
{"code": "def exactPrimeFactorCount ( n ) :\n    count = (59 + -59)\n    if ( n % (95 + -93) == (32 + -32) ) :\n        count = count + (9 + -8)\n        while ( n % (79 + -77) == (52 + -52) ) :\n            n = int ( n / (46 + -44) )\n    i = (72 + -69)\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == (5 + -5) ) :\n            count = count + (24 + -23)\n            while ( n % i == (93 + -93) ) :\n                n = int ( n / i )\n        i = i + (22 + -20)\n    if ( n > (58 + -56) ) :\n        count = count + (46 + -45)\n    return count", "id": "ConstantUnfoldding_sample_from_HARDY_RAMANUJAN_THEOREM_to_250", "old_id": "HARDY_RAMANUJAN_THEOREM"}
{"code": "def height ( N ) :\n    return math.ceil ( math.log2 ( N + (59 + -58) ) ) - (74 + -73)", "id": "ConstantUnfoldding_sample_from_HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES_to_251", "old_id": "HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES"}
{"code": "def hexagonalNum ( n ) :\n    return n * ( (59 + -57) * n - (43 + -42) )", "id": "ConstantUnfoldding_sample_from_HEXAGONAL_NUMBER_to_252", "old_id": "HEXAGONAL_NUMBER"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ (65 + -65) ] * ( m + (68 + -67) )\n    nxtbb = (99 + -99)\n    for i in range ( (53 + -52) , m + (12 + -11) ) :\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - (16 + -15) ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - (52 + -51) ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - (74 + -73) ] + revenue [ nxtbb ] , maxRev [ i - (76 + -75) ] )\n                nxtbb += (3 + -2)\n        else :\n            maxRev [ i ] = maxRev [ i - (38 + -37) ]\n    return maxRev [ m ]", "id": "ConstantUnfoldding_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_253", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def horner ( poly , n , x ) :\n    result = poly [ (62 + -62) ]\n    for i in range ( (70 + -69) , n ) :\n        result = result * x + poly [ i ]\n    return result", "id": "ConstantUnfoldding_sample_from_HORNERS_METHOD_POLYNOMIAL_EVALUATION_to_254", "old_id": "HORNERS_METHOD_POLYNOMIAL_EVALUATION"}
{"code": "def getSum ( n ) :\n    sum = (15 + -15)\n    while ( n != (35 + -35) ) :\n        sum = sum + int ( n % (95 + -85) )\n        n = int ( n / (92 + -82) )\n    return sum", "id": "ConstantUnfoldding_sample_from_HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT_to_255", "old_id": "HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT"}
{"code": "def mulmod ( a , b , mod ) :\n    res = (65 + -65)\n    a = a % mod\n    while ( b > (10 + -10) ) :\n        if ( b % (6 + -4) == (26 + -25) ) :\n            res = ( res + a ) % mod\n        a = ( a * (21 + -19) ) % mod\n        b //= (72 + -70)\n    return res % mod", "id": "ConstantUnfoldding_sample_from_HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION_to_256", "old_id": "HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION"}
{"code": "def search ( arr , x ) :\n    n = len ( arr )\n    for j in range ( (93 + -93) , n ) :\n        if ( x == arr [ j ] ) :\n            return j\n    return - (53 + -52)", "id": "ConstantUnfoldding_sample_from_HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING_to_257", "old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING"}
{"code": "def isHeap ( arr , i , n ) :\n    if i > int ( ( n - (29 + -27) ) / (23 + -21) ) :\n        return True\n    if ( arr [ i ] >= arr [ (60 + -58) * i + (34 + -33) ] and arr [ i ] >= arr [ (19 + -17) * i + (76 + -74) ] and isHeap ( arr , (3 + -1) * i + (89 + -88) , n ) and isHeap ( arr , (49 + -47) * i + (100 + -98) , n ) ) :\n        return True\n    return False", "id": "ConstantUnfoldding_sample_from_HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_to_258", "old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP"}
{"code": "def isHeap ( arr , n ) :\n    for i in range ( int ( ( n - (11 + -9) ) / (78 + -76) ) + (53 + -52) ) :\n        if arr [ (87 + -85) * i + (97 + -96) ] > arr [ i ] :\n            return False\n        if ( (64 + -62) * i + (94 + -92) < n and arr [ (66 + -64) * i + (42 + -40) ] > arr [ i ] ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1_to_259", "old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1"}
{"code": "def search ( arr , n , x ) :\n    for j in range ( (26 + -26) , n ) :\n        if ( x == arr [ j ] ) :\n            return j\n    return - (63 + -62)", "id": "ConstantUnfoldding_sample_from_HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS_to_260", "old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS"}
{"code": "def turnOffK ( n , k ) :\n    if ( k <= (65 + -65) ) :\n        return n\n    return ( n & ~ ( (46 + -45) << ( k - (96 + -95) ) ) )", "id": "ConstantUnfoldding_sample_from_HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER_to_261", "old_id": "HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER"}
{"code": "def power ( n ) :\n    if n == (5 + -4) :\n        return (82 + -80)\n    return (74 + -72) * power ( n - (59 + -58) )", "id": "ConstantUnfoldding_sample_from_HYPERCUBE_GRAPH_to_262", "old_id": "HYPERCUBE_GRAPH"}
{"code": "def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = (32 + -32)\n    for i in arr :\n        if ( i < (95 + -95) ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - (15 + -14)\n            else :\n                hash [ abs ( i ) ] -= (55 + -54)\n        else :\n            hash [ i ] = hash.get ( i , (43 + -43) ) + (17 + -16)\n    for i in arr :\n        if i in hash.keys ( ) and hash [ i ] > (78 + -78) :\n            return i\n    return - (66 + -65)", "id": "ConstantUnfoldding_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_263", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthdigit ( a , b , k ) :\n    p = a ** b\n    count = (61 + -61)\n    while ( p > (52 + -52) and count < k ) :\n        rem = p % (29 + -19)\n        count = count + (23 + -22)\n        if ( count == k ) :\n            return rem\n        p = p // (48 + -38)\n    return (3 + -3)\n", "id": "ConstantUnfoldding_sample_from_K_TH_DIGIT_RAISED_POWER_B_to_264", "old_id": "K_TH_DIGIT_RAISED_POWER_B"}
{"code": "def kth ( arr1 , arr2 , m , n , k ) :\n    sorted1 = [ (81 + -81) ] * ( m + n )\n    i = (24 + -24)\n    j = (83 + -83)\n    d = (79 + -79)\n    while ( i < m and j < n ) :\n        if ( arr1 [ i ] < arr2 [ j ] ) :\n            sorted1 [ d ] = arr1 [ i ]\n            i += (71 + -70)\n        else :\n            sorted1 [ d ] = arr2 [ j ]\n            j += (14 + -13)\n        d += (18 + -17)\n    while ( i < m ) :\n        sorted1 [ d ] = arr1 [ i ]\n        d += (22 + -21)\n        i += (39 + -38)\n    while ( j < n ) :\n        sorted1 [ d ] = arr2 [ j ]\n        d += (26 + -25)\n        j += (24 + -23)\n    return sorted1 [ k - (86 + -85) ]", "id": "ConstantUnfoldding_sample_from_K_TH_ELEMENT_TWO_SORTED_ARRAYS_to_265", "old_id": "K_TH_ELEMENT_TWO_SORTED_ARRAYS"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = [ ]\n    sum.append ( (60 + -60) )\n    sum.append ( arr [ (12 + -12) ] )\n    for i in range ( (46 + -44) , n + (44 + -43) ) :\n        sum.append ( sum [ i - (22 + -21) ] + arr [ i - (54 + -53) ] )\n    Q = [ ]\n    heapq.heapify ( Q )\n    for i in range ( (96 + -95) , n + (29 + -28) ) :\n        for j in range ( i , n + (99 + -98) ) :\n            x = sum [ j ] - sum [ i - (85 + -84) ]\n            if len ( Q ) < k :\n                heapq.heappush ( Q , x )\n            else :\n                if Q [ (93 + -93) ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n    return Q [ (77 + -77) ]", "id": "ConstantUnfoldding_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_266", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def find ( a , b , k , n1 , n2 ) :\n    s = set ( )\n    for i in range ( n2 ) :\n        s.add ( b [ i ] )\n    missing = (62 + -62)\n    for i in range ( n1 ) :\n        if a [ i ] not in s :\n            missing += (78 + -77)\n        if missing == k :\n            return a [ i ]\n    return - (32 + -31)", "id": "ConstantUnfoldding_sample_from_K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE_to_267", "old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE"}
{"code": "def kPrimeFactor ( n , k ) :\n    while ( n % (46 + -44) == (85 + -85) ) :\n        k = k - (31 + -30)\n        n = n // (53 + -51)\n        if ( k == (42 + -42) ) :\n            return (6 + -4)\n    i = (100 + -97)\n    while i <= math.sqrt ( n ) :\n        while ( n % i == (97 + -97) ) :\n            if ( k == (40 + -39) ) :\n                return i\n            k = k - (60 + -59)\n            n = n // i\n        i = i + (15 + -13)\n    if ( n > (85 + -83) and k == (16 + -15) ) :\n        return n\n    return - (65 + -64)", "id": "ConstantUnfoldding_sample_from_K_TH_PRIME_FACTOR_GIVEN_NUMBER_to_268", "old_id": "K_TH_PRIME_FACTOR_GIVEN_NUMBER"}
{"code": "def findSubArray ( arr , n ) :\n    sum = (99 + -99)\n    maxsize = - (51 + -50)\n    for i in range ( (93 + -93) , n - (18 + -17) ) :\n        sum = - (50 + -49) if ( arr [ i ] == (99 + -99) ) else (98 + -97)\n        for j in range ( i + (39 + -38) , n ) :\n            sum = sum + ( - (100 + -99) ) if ( arr [ j ] == (98 + -98) ) else sum + (66 + -65)\n            if ( sum == (61 + -61) and maxsize < j - i + (87 + -86) ) :\n                maxsize = j - i + (12 + -11)\n                startindex = i\n    if ( maxsize == - (66 + -65) ) :\n        print ( \"No such subarray\" )\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - (66 + -65) )\n    return maxsize", "id": "ConstantUnfoldding_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_269", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = { }\n    curr_sum = (98 + -98)\n    max_len = (72 + -72)\n    ending_index = - (97 + -96)\n    for i in range ( (65 + -65) , n ) :\n        if ( arr [ i ] == (33 + -33) ) :\n            arr [ i ] = - (16 + -15)\n        else :\n            arr [ i ] = (94 + -93)\n    for i in range ( (57 + -57) , n ) :\n        curr_sum = curr_sum + arr [ i ]\n        if ( curr_sum == (83 + -83) ) :\n            max_len = i + (13 + -12)\n            ending_index = i\n        if ( curr_sum + n ) in hash_map :\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = i - hash_map [ curr_sum + n ]\n                ending_index = i\n        else :\n            hash_map[curr_sum + n] = i\n    for i in range ( (83 + -83) , n ) :\n        if ( arr [ i ] == - (63 + -62) ) :\n            arr [ i ] = (22 + -22)\n        else :\n            arr [ i ] = (4 + -3)\n    print ( ending_index - max_len + (91 + -90) , end = \" \" )\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    return max_len", "id": "ConstantUnfoldding_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_270", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def largestGCDSubsequence ( arr , n ) :\n    ans = (90 + -90)\n    maxele = max ( arr )\n    for i in range ( (32 + -30) , maxele + (81 + -80) ) :\n        count = (16 + -16)\n        for j in range ( n ) :\n            if ( arr [ j ] % i == (80 + -80) ) :\n                count += (66 + -65)\n        ans = max ( ans , count )\n    return ans", "id": "ConstantUnfoldding_sample_from_LARGEST_SUBSEQUENCE_GCD_GREATER_1_to_271", "old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1"}
{"code": "def longestSubsequenceCommonSegment ( k , s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    lcs = [ [ (63 + -63) for x in range ( m + (74 + -73) ) ] for y in range ( n + (4 + -3) ) ]\n    cnt = [ [ (6 + -6) for x in range ( m + (92 + -91) ) ] for y in range ( n + (96 + -95) ) ]\n    for i in range ( (34 + -33) , n + (54 + -53) ) :\n        for j in range ( (81 + -80) , m + (11 + -10) ) :\n            lcs [ i ] [ j ] = max ( lcs [ i - (16 + -15) ] [ j ] , lcs [ i ] [ j - (34 + -33) ] )\n            if ( s1 [ i - (49 + -48) ] == s2 [ j - (21 + -20) ] ) :\n                cnt [ i ] [ j ] = cnt [ i - (23 + -22) ] [ j - (55 + -54) ] + (87 + -86)\n            if ( cnt [ i ] [ j ] >= k ) :\n                for a in range ( k , cnt [ i ] [ j ] + (57 + -56) ) :\n                    lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a )\n    return lcs [ n ] [ m ]", "id": "ConstantUnfoldding_sample_from_LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K_to_272", "old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K"}
{"code": "def maxLength ( s , n ) :\n    dp = [ [ (10 + -10) for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n - (77 + -76) ) :\n        if ( s [ i ] == '(' and s [ i + (49 + -48) ] == ')' ) :\n            dp [ i ] [ i + (89 + -88) ] = (1 + 1)\n    for l in range ( (66 + -64) , n ) :\n        i = - (35 + -34)\n        for j in range ( l , n ) :\n            i += (12 + -11)\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = (86 + -84) + dp [ i + (59 + -58) ] [ j - (29 + -28) ]\n            for k in range ( i , j ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + (43 + -42) ] [ j ] )\n    return dp [ (34 + -34) ] [ n - (85 + -84) ]", "id": "ConstantUnfoldding_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_to_273", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = (75 + -75)\n    invalidCloseBraces = (11 + -11)\n    for i in range ( n ) :\n        if ( s [ i ] == '(' ) :\n            invalidOpenBraces += (78 + -77)\n        else :\n            if ( invalidOpenBraces == (63 + -63) ) :\n                invalidCloseBraces += (5 + -4)\n            else :\n                invalidOpenBraces -= (48 + -47)\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "ConstantUnfoldding_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_274", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def longestNull ( S ) :\n    arr = [ ]\n    arr.append ( [ '@' , - (71 + -70) ] )\n    maxlen = (30 + -30)\n    for i in range ( len ( S ) ) :\n        arr.append ( [ S [ i ] , i ] )\n        while ( len ( arr ) >= (2 + 1) and arr [ len ( arr ) - (66 + -63) ] [ (23 + -23) ] == '1' and arr [ len ( arr ) - (73 + -71) ] [ (4 + -4) ] == '0' and arr [ len ( arr ) - (7 + -6) ] [ (8 + -8) ] == '0' ) :\n            arr.pop ( )\n            arr.pop ( )\n            arr.pop ( )\n        tmp = arr [ - (33 + -32) ]\n        maxlen = max ( maxlen , i - tmp [ (6 + -5) ] )\n    return maxlen", "id": "ConstantUnfoldding_sample_from_LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED_to_275", "old_id": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= (33 + -31) ) :\n        return n\n    L = [ [ (81 + -81) for x in range ( n ) ] for y in range ( n ) ]\n    llap = (50 + -48)\n    for i in range ( n ) :\n        L [ i ] [ n - (65 + -64) ] = (47 + -45)\n    for j in range ( n - (71 + -69) , (43 + -43) , - (63 + -62) ) :\n        i = j - (11 + -10)\n        k = j + (53 + -52)\n        while ( i >= (40 + -40) and k <= n - (63 + -62) ) :\n            if ( set [ i ] + set [ k ] < (46 + -44) * set [ j ] ) :\n                k += (31 + -30)\n            elif ( set [ i ] + set [ k ] > (54 + -52) * set [ j ] ) :\n                L [ i ] [ j ] = (93 + -91)\n                i -= (76 + -75)\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + (30 + -29)\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= (74 + -73)\n                k += (43 + -42)\n        while ( i >= (53 + -53) ) :\n            L [ i ] [ j ] = (93 + -91)\n            i -= (12 + -11)\n    return llap", "id": "ConstantUnfoldding_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_276", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def leonardo ( n ) :\n    dp = [ ]\n    dp.append ( (35 + -34) )\n    dp.append ( (100 + -99) )\n    for i in range ( (95 + -93) , n + (85 + -84) ) :\n        dp.append ( dp [ i - (70 + -69) ] + dp [ i - (72 + -70) ] + (13 + -12) )\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_LEONARDO_NUMBER_1_to_277", "old_id": "LEONARDO_NUMBER_1"}
{"code": "def subsequence ( s , t , n , k ) :\n    last = (22 + -22)\n    cnt = (5 + -5)\n    new_last = (58 + -58)\n    size = (69 + -69)\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    for ch in string :\n        cnt = (13 + -13)\n        for i in range ( last , n ) :\n            if s [ i ] == ch :\n                cnt += (74 + -73)\n        if cnt >= k :\n            for i in range ( last , n ) :\n                if s [ i ] == ch :\n                    t [ size ] = ch\n                    new_last = i\n                    size += (35 + -34)\n            last = new_last\n    t[size] = '\\0';", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES_to_278", "old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES"}
{"code": "def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ (55 + -55) ] * n\n    concat = str_ + str_\n    for i in range ( n ) :\n        arr [ i ] = concat [ i : n + i ]\n    arr.sort ( )\n    return arr [ (32 + -32) ]", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION_to_279", "old_id": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION"}
{"code": "def nextWord ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - (55 + -54)\n    while ( s [ i ] == 'z' and i >= (99 + -99) ) :\n        i -= (42 + -41)\n    if ( i == - (65 + -64) ) :\n        s = s + 'a'\n    else :\n        s = s [ (3 + -3) : i ] + chr ( ord ( s [ i ] ) + (74 + -73) ) + s [ i + (88 + -87) : ]\n    return s", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_NEXT_STRING_to_280", "old_id": "LEXICOGRAPHICALLY_NEXT_STRING"}
{"code": "def prevPermutation ( str ) :\n    n = len ( str ) - (49 + -48)\n    i = n\n    while ( i > (78 + -78) and str [ i - (34 + -33) ] <= str [ i ] ) :\n        i -= (34 + -33)\n    if ( i <= (39 + -39) ) :\n        return False\n    j = i - (48 + -47)\n    while ( j + (14 + -13) <= n and str [ j + (79 + -78) ] <= str [ i - (64 + -63) ] ) :\n        j += (34 + -33)\n    str = list ( str )\n    temp = str [ i - (64 + -63) ]\n    str [ i - (19 + -18) ] = str [ j ]\n    str [ j ] = temp\n    str = ''.join ( str )\n    str [ : : - (16 + -15) ]\n    return True", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C_to_281", "old_id": "LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C"}
{"code": "def minimizeWithKSwaps ( arr , n , k ) :\n    for i in range ( n - (82 + -81) ) :\n        pos = i\n        for j in range ( i + (53 + -52) , n ) :\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n        for j in range ( pos , i , - (61 + -60) ) :\n            arr [ j ] , arr [ j - (40 + -39) ] = arr [ j - (2 + -1) ] , arr [ j ]\n        k -= pos - i", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS_to_282", "old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS"}
{"code": "def lexicographicSubConcat ( s ) :\n    n = len ( s )\n    sub_count = ( n * ( n + (69 + -68) ) ) // (70 + -68)\n    arr = [ (15 + -15) ] * sub_count\n    index = (55 + -55)\n    for i in range ( n ) :\n        for j in range ( (33 + -32) , n - i + (41 + -40) ) :\n            arr [ index ] = s [ i : i + j ]\n            index += (69 + -68)\n    arr.sort ( )\n    res = \"\"\n    for i in range ( sub_count ) :\n        res += arr [ i ]\n    return res", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING_to_283", "old_id": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING"}
{"code": "def lcs ( dp , arr1 , n , arr2 , m , k ) :\n    if k < (68 + -68) :\n        return - ( (59 + -49) ** (83 + -76) )\n    if n < (21 + -21) or m < (4 + -4) :\n        return (40 + -40)\n    ans = dp [ n ] [ m ] [ k ]\n    if ans != - (46 + -45) :\n        return ans\n    ans = max ( lcs ( dp , arr1 , n - (90 + -89) , arr2 , m , k ) , lcs ( dp , arr1 , n , arr2 , m - (60 + -59) , k ) )\n    if arr1 [ n - (9 + -8) ] == arr2 [ m - (34 + -33) ] :\n        ans = max ( ans , (19 + -18) + lcs ( dp , arr1 , n - (49 + -48) , arr2 , m - (81 + -80) , k ) )\n    ans = max ( ans , lcs ( dp , arr1 , n - (20 + -19) , arr2 , m - (1 + 0) , k - (93 + -92) ) )\n    return ans", "id": "ConstantUnfoldding_sample_from_LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED_to_284", "old_id": "LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = [ [ (37 + -37) for k in range ( n + (99 + -98) ) ] for l in range ( m + (87 + -86) ) ]\n    result = (13 + -13)\n    for i in range ( m + (79 + -78) ) :\n        for j in range ( n + (80 + -79) ) :\n            if ( i == (98 + -98) or j == (4 + -4) ) :\n                LCSuff [ i ] [ j ] = (41 + -41)\n            elif ( X [ i - (14 + -13) ] == Y [ j - (48 + -47) ] ) :\n                LCSuff [ i ] [ j ] = LCSuff [ i - (44 + -43) ] [ j - (2 + -1) ] + (48 + -47)\n                result = max ( result , LCSuff [ i ] [ j ] )\n            else :\n                LCSuff [ i ] [ j ] = (68 + -68)\n    return result", "id": "ConstantUnfoldding_sample_from_LONGEST_COMMON_SUBSTRING_to_285", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def findLength ( str ) :\n    n = len ( str )\n    maxlen = (9 + -9)\n    for i in range ( (89 + -89) , n ) :\n        for j in range ( i + (19 + -18) , n , (1 + 1) ) :\n            length = j - i + (62 + -61)\n            leftsum = (51 + -51)\n            rightsum = (29 + -29)\n            for k in range ( (85 + -85) , int ( length / (23 + -21) ) ) :\n                leftsum += ( int ( str [ i + k ] ) - int ( '0' ) )\n                rightsum += ( int ( str [ i + k + int ( length / (88 + -86) ) ] ) - int ( '0' ) )\n            if ( leftsum == rightsum and maxlen < length ) :\n                maxlen = length\n    return maxlen", "id": "ConstantUnfoldding_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_to_286", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF"}
{"code": "def findLength ( string ) :\n    n = len ( string )\n    maxlen = (100 + -100)\n    Sum = [ [ (41 + -41) for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( (2 + -2) , n ) :\n        Sum [ i ] [ i ] = int ( string [ i ] )\n    for length in range ( (92 + -90) , n + (90 + -89) ) :\n        for i in range ( (3 + -3) , n - length + (33 + -32) ) :\n            j = i + length - (62 + -61)\n            k = length // (50 + -48)\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + (30 + -29) ] [ j ] )\n            if ( length % (99 + -97) == (93 + -93) and Sum [ i ] [ j - k ] == Sum [ ( j - k + (90 + -89) ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n    return maxlen", "id": "ConstantUnfoldding_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1_to_287", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1"}
{"code": "def longOddEvenIncSeq ( arr , n ) :\n    lioes = list ( )\n    maxLen = (4 + -4)\n    for i in range ( n ) :\n        lioes.append ( (51 + -50) )\n    i = (10 + -9)\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr [ j ] ) % (81 + -79) != (94 + -94) and lioes [ i ] < lioes [ j ] + (17 + -16) ) :\n                lioes [ i ] = lioes [ j ] + (19 + -18)\n    for i in range ( n ) :\n        if maxLen < lioes [ i ] :\n            maxLen = lioes [ i ]\n    return maxLen", "id": "ConstantUnfoldding_sample_from_LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE_to_288", "old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE"}
{"code": "def lis ( arr , n ) :\n    lis = [ (55 + -54) ] * n\n    for i in range ( (100 + -99) , n ) :\n        for j in range ( (65 + -65) , i ) :\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + (5 + -4) :\n                lis [ i ] = lis [ j ] + (2 + -1)\n    maximum = (67 + -67)\n    for i in range ( n ) :\n        maximum = max ( maximum , lis [ i ] )\n    return maximum", "id": "ConstantUnfoldding_sample_from_LONGEST_INCREASING_SUBSEQUENCE_1_to_289", "old_id": "LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def longestPrefixSuffix ( s ) :\n    n = len ( s )\n    lps = [ (46 + -46) ] * n\n    l = (22 + -22)\n    i = (44 + -43)\n    while ( i < n ) :\n        if ( s [ i ] == s [ l ] ) :\n            l = l + (36 + -35)\n            lps [ i ] = l\n            i = i + (22 + -21)\n        else :\n            if ( l != (52 + -52) ) :\n                l = lps [ l - (73 + -72) ]\n            else :\n                lps [ i ] = (49 + -49)\n                i = i + (86 + -85)\n    res = lps [ n - (44 + -43) ]\n    if ( res > n / (5 + -3) ) :\n        return n // (5 + -3)\n    else :\n        return res", "id": "ConstantUnfoldding_sample_from_LONGEST_PREFIX_ALSO_SUFFIX_1_to_290", "old_id": "LONGEST_PREFIX_ALSO_SUFFIX_1"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ (90 + -90) for i in range ( n + (38 + -37) ) ] for j in range ( n + (64 + -63) ) ]\n    for i in range ( (51 + -50) , n + (68 + -67) ) :\n        for j in range ( (84 + -83) , n + (45 + -44) ) :\n            if ( str [ i - (96 + -95) ] == str [ j - (10 + -9) ] and i != j ) :\n                dp [ i ] [ j ] = (47 + -46) + dp [ i - (42 + -41) ] [ j - (77 + -76) ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - (52 + -51) ] , dp [ i - (76 + -75) ] [ j ] )\n    res = ''\n    i = n\n    j = n\n    while ( i > (28 + -28) and j > (27 + -27) ) :\n        if ( dp [ i ] [ j ] == dp [ i - (72 + -71) ] [ j - (43 + -42) ] + (27 + -26) ) :\n            res += str [ i - (65 + -64) ]\n            i -= (26 + -25)\n            j -= (89 + -88)\n        elif ( dp [ i ] [ j ] == dp [ i - (68 + -67) ] [ j ] ) :\n            i -= (61 + -60)\n        else :\n            j -= (40 + -39)\n    res = ''.join ( reversed ( res ) )\n    return res", "id": "ConstantUnfoldding_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_291", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ (64 + -64) ] * ( n + (61 + -60) ) ] * ( n + (47 + -46) )\n    for i in range ( (45 + -44) , n + (93 + -92) ) :\n        for j in range ( (64 + -63) , n + (19 + -18) ) :\n            if ( str [ i - (32 + -31) ] == str [ j - (94 + -93) ] and i != j ) :\n                dp [ i ] [ j ] = (83 + -82) + dp [ i - (26 + -25) ] [ j - (59 + -58) ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - (43 + -42) ] , dp [ i - (5 + -4) ] [ j ] )\n    return dp [ n ] [ n ]", "id": "ConstantUnfoldding_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_292", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = { }\n    sum = (82 + -82)\n    maxLen = (71 + -71)\n    for i in range ( n ) :\n        if arr [ i ] == (65 + -65) :\n            sum += - (90 + -89)\n        else :\n            sum += (53 + -52)\n        if ( sum == (72 + -71) ) :\n            maxLen = i + (48 + -47)\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - (2 + -1) ) in um ) :\n            if ( maxLen < ( i - um [ sum - (30 + -29) ] ) ) :\n                maxLen = i - um [ sum - (42 + -41) ]\n    return maxLen", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_293", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = { }\n    mod_arr = [ (14 + -14) for i in range ( n ) ]\n    max = (53 + -53)\n    curr_sum = (50 + -50)\n    for i in range ( n ) :\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k\n    for i in range ( n ) :\n        if ( mod_arr [ i ] == (15 + -15) ) :\n            max = i + (26 + -25)\n        elif ( mod_arr [ i ] in um ) :\n            um [ mod_arr [ i ] ] = i\n        else :\n            if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                max = i - um [ mod_arr [ i ] ]\n    return max", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_294", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : (8 + -8) )\n    longLen = (43 + -43)\n    for i in range ( n ) :\n        len1 = (12 + -12)\n        if ( arr [ i - (22 + -21) ] in um and len1 < um [ arr [ i ] - (31 + -30) ] ) :\n            len1 = um [ arr [ i ] - (48 + -47) ]\n        if ( arr [ i ] + (48 + -47) in um and len1 < um [ arr [ i ] + (86 + -85) ] ) :\n            len1 = um [ arr [ i ] + (10 + -9) ]\n        um [ arr [ i ] ] = len1 + (13 + -12)\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n    return longLen", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2_to_295", "old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2"}
{"code": "def longestSubseqWithDiffOne ( arr , n ) :\n    dp = [ (79 + -78) for i in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( ( arr [ i ] == arr [ j ] + (96 + -95) ) or ( arr [ i ] == arr [ j ] - (8 + -7) ) ) :\n                dp [ i ] = max ( dp [ i ] , dp [ j ] + (91 + -90) )\n    result = (84 + -83)\n    for i in range ( n ) :\n        if ( result < dp [ i ] ) :\n            result = dp [ i ]\n    return result", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE_to_296", "old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE"}
{"code": "def maximumPalinUsingKChanges ( str , k ) :\n    palin = list(str)\n    l = (1 + -1)\n    r = len ( str ) - (37 + -36)\n    while ( l <= r ) :\n        if ( str [ l ] != str [ r ] ) :\n            palin [ l ] = palin [ r ] = max ( str [ l ] , str [ r ] )\n            k -= (50 + -49)\n        l += (95 + -94)\n        r -= (49 + -48)\n    if ( k < (35 + -35) ) :\n        return \"Not possible\"\n    l = (100 + -100)\n    r = len ( str ) - (24 + -23)\n    while ( l <= r ) :\n        if ( l == r ) :\n            if ( k > (85 + -85) ) :\n                palin [ l ] = '9'\n        if ( palin [ l ] < '9' ) :\n            if ( k >= (69 + -67) and palin [ l ] == str [ l ] and palin [ r ] == str [ r ] ) :\n                k -= (13 + -12)\n                palin [ l ] = palin [ r ] = '9'\n            elif ( k >= (97 + -96) and ( palin [ l ] != str [ l ] or palin [ r ] != str [ r ] ) ) :\n                k -= (56 + -55)\n                palin [ l ] = palin [ r ] = '9'\n        l += (42 + -41)\n        r -= (97 + -96)\n    return \"\".join(palin)", "id": "ConstantUnfoldding_sample_from_MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS_to_297", "old_id": "MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS"}
{"code": "def checkMarkov ( m ) :\n    for i in range ( (34 + -34) , len ( m ) ) :\n        sm = (30 + -30)\n        for j in range ( (41 + -41) , len ( m [ i ] ) ) :\n            sm = sm + m [ i ] [ j ]\n        if ( sm != (43 + -42) ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_MARKOV_MATRIX_to_298", "old_id": "MARKOV_MATRIX"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = - (42 + -41)\n    val = - (92 + -91)\n    dp = [ [ (34 + -34) for i in range ( maxLimit + (50 + -49) ) ] for j in range ( n ) ]\n    for ind in range ( n ) :\n        for val in range ( maxLimit + (1 + 0) ) :\n            if ( ind == (68 + -68) ) :\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = (71 + -70)\n                else :\n                    dp [ ind ] [ val ] = (80 + -80)\n            else :\n                if ( val - arr [ ind ] >= (44 + -44) and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - (5 + -4) ] [ val - arr [ ind ] ] == (54 + -53) or dp [ ind - (57 + -56) ] [ val + arr [ ind ] ] == (74 + -73) ) :\n                        dp [ ind ] [ val ] = (88 + -87)\n                elif ( val - arr [ ind ] >= (12 + -12) ) :\n                    dp [ ind ] [ val ] = dp [ ind - (25 + -24) ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = dp [ ind - (72 + -71) ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = (78 + -78)\n    for val in range ( maxLimit , - (69 + -68) , - (93 + -92) ) :\n        if ( dp [ n - (46 + -45) ] [ val ] == (39 + -38) ) :\n            return val\n    return - (22 + -21)", "id": "ConstantUnfoldding_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_299", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def findMaxValue ( arr , n ) :\n    if n < (31 + -27) :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + (43 + -42) ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - (34 + -33) ) , [ MIN ] * ( n - (16 + -14) )\n    for i in range ( n - (52 + -51) , - (64 + -63) , - (51 + -50) ) :\n        table1 [ i ] = max ( table1 [ i + (58 + -57) ] , arr [ i ] )\n    for i in range ( n - (47 + -45) , - (75 + -74) , - (34 + -33) ) :\n        table2 [ i ] = max ( table2 [ i + (60 + -59) ] , table1 [ i + (95 + -94) ] - arr [ i ] )\n    for i in range ( n - (68 + -65) , - (33 + -32) , - (15 + -14) ) :\n        table3 [ i ] = max ( table3 [ i + (50 + -49) ] , table2 [ i + (31 + -30) ] + arr [ i ] )\n    for i in range ( n - (57 + -53) , - (66 + -65) , - (98 + -97) ) :\n        table4 [ i ] = max ( table4 [ i + (65 + -64) ] , table3 [ i + (74 + -73) ] - arr [ i ] )\n    return table4 [ (40 + -40) ]", "id": "ConstantUnfoldding_sample_from_MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L_to_300", "old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L"}
{"code": "def maxvolume ( s ) :\n    length = s // (91 + -88) \n    s -= length\n    breadth = s // (100 + -98)\n    height = s - breadth\n    return int ( length * breadth * height )", "id": "ConstantUnfoldding_sample_from_MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1_to_301", "old_id": "MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1"}
{"code": "def findArea ( arr , n ) :\n    arr.sort ( reverse = True )\n    dimension = [ (63 + -63) , (61 + -61) ]\n    i = (21 + -21)\n    j = (85 + -85)\n    while ( i < n - (54 + -53) and j < (63 + -61) ) :\n        if ( arr [ i ] == arr [ i + (67 + -66) ] ) :\n            dimension [ j ] = arr [ i ]\n            j += (70 + -69)\n            i += (73 + -72)\n        i += (79 + -78)\n    return ( dimension [ (18 + -18) ] * dimension [ (49 + -48) ] )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_to_302", "old_id": "MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY"}
{"code": "def largestSumOfAverages ( A , K ) :\n    n = len ( A )\n    pre_sum = [ (4 + -4) ] * ( n + (32 + -31) )\n    pre_sum [ (38 + -38) ] = (2 + -2)\n    for i in range ( n ) :\n        pre_sum [ i + (65 + -64) ] = pre_sum [ i ] + A [ i ]\n    dp = [ (11 + -11) ] * n\n    sum = (78 + -78)\n    for i in range ( n ) :\n        dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i )\n    for k in range ( K - (46 + -45) ) :\n        for i in range ( n ) :\n            for j in range ( i + (88 + -87) , n ) :\n                dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] )\n    return  dp [ (51 + -51) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY_to_303", "old_id": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = [ [ (22 + -22) for x in range ( n + (99 + -98) ) ] for y in range ( n + (59 + -58) ) ]\n    for i in range ( n + (90 + -89) ) :\n        for j in range ( min ( i , n ) + (85 + -84) ) :\n            if ( j == (20 + -20) or j == i ) :\n                C [ i ] [ j ] = (42 + -41)\n            else :\n                C [ i ] [ j ] = ( C [ i - (27 + -26) ] [ j - (93 + -92) ] + C [ i - (18 + -17) ] [ j ] )\n    maxvalue = (39 + -39)\n    for i in range ( n + (53 + -52) ) :\n        maxvalue = max ( maxvalue , C [ n ] [ i ] )\n    return maxvalue", "id": "ConstantUnfoldding_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_304", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def findLongestConseqSubseq ( arr , n ) :\n    S = set ( )\n    for i in range ( n ) :\n        S.add ( arr [ i ] )\n    ans = (62 + -62)\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ]\n            while ( S.__contains__ ( j ) ) :\n                j += (75 + -74)\n            ans = max ( ans , j - arr [ i ] )\n    return ans", "id": "ConstantUnfoldding_sample_from_MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY_to_305", "old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY"}
{"code": "def maxRepeating ( str ) :\n    n = len ( str )\n    count = (43 + -43)\n    res = str [ (26 + -26) ]\n    cur_count = (19 + -18)\n    for i in range ( n ) :\n        if ( i < n - (11 + -10) and str [ i ] == str [ i + (2 + -1) ] ) :\n            cur_count += (12 + -11)\n        else :\n            if cur_count > count :\n                count = cur_count\n                res = str [ i ]\n            cur_count = (93 + -92)\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_306", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : (92 + -92) )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += (65 + -64)\n    ans = (70 + -70)\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n    return ans", "id": "ConstantUnfoldding_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_307", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxRowDiff ( mat , m , n ) :\n    rowSum = [ (53 + -53) ] * m\n    for i in range ( (79 + -79) , m ) :\n        sum = (38 + -38)\n        for j in range ( (68 + -68) , n ) :\n            sum += mat [ i ] [ j ]\n        rowSum [ i ] = sum\n    max_diff = rowSum [ (55 + -54) ] - rowSum [ (18 + -18) ]\n    min_element = rowSum [ (32 + -32) ]\n    for i in range ( (43 + -42) , m ) :\n        if ( rowSum [ i ] - min_element > max_diff ) :\n            max_diff = rowSum [ i ] - min_element\n        if ( rowSum [ i ] < min_element ) :\n            min_element = rowSum [ i ]\n    return max_diff", "id": "ConstantUnfoldding_sample_from_MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX_to_308", "old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX"}
{"code": "def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = (51 + -51)\n    for i in range ( n ) :\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n    return maxDict", "id": "ConstantUnfoldding_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_309", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxGameByWinner ( N ) :\n    dp = [ (63 + -63) for i in range ( N ) ]\n    dp [ (71 + -71) ] = (82 + -81)\n    dp [ (16 + -15) ] = (58 + -56)\n    i = (89 + -88)\n    while dp [ i ] <= N :\n        i = i + (67 + -66)\n        dp [ i ] = dp [ i - (25 + -24) ] + dp [ i - (74 + -72) ]\n    return ( i - (53 + -52) )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_GAMES_PLAYED_WINNER_to_310", "old_id": "MAXIMUM_GAMES_PLAYED_WINNER"}
{"code": "def maxPrefix ( s , t ) :\n    count = (12 + -12)\n    for i in range ( (58 + -58) , len ( t ) ) :\n        if ( count == len ( s ) ) :\n            break\n        if ( t [ i ] == s [ count ] ) :\n            count = count + (19 + -18)\n    return count", "id": "ConstantUnfoldding_sample_from_MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER_to_311", "old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER"}
{"code": "def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = (85 + -85)\n    for i in range ( n ) :\n        mls.append ( (59 + -58) )\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( abs ( arr [ i ] - arr [ j ] ) <= (56 + -55) and mls [ i ] < mls [ j ] + (56 + -55) ) :\n                mls [ i ] = mls [ j ] + (71 + -70)\n    for i in range ( n ) :\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n    return max", "id": "ConstantUnfoldding_sample_from_MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1_to_312", "old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , (15 + -15) , (13 + -13)\n    sm = [ (73 + -73) ] * n\n    sm [ (41 + -41) ] = arr [ (42 + -42) ]\n    for i in range ( (5 + -4) , n ) :\n        sm [ i ] = sm [ i - (89 + -88) ] + arr [ i ]\n    for i in range ( n ) :\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) :\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n    return maxSum // k", "id": "ConstantUnfoldding_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_313", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maxSquare ( b , m ) :\n    return ( b // m - (6 + -5) ) * ( b // m ) // (89 + -87)", "id": "ConstantUnfoldding_sample_from_MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE_to_314", "old_id": "MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE"}
{"code": "def maximumSegments ( n , a , b , c ) :\n    dp = [ - (69 + -68) ] * ( n + (49 + -39) )\n    dp [ (17 + -17) ] = (97 + -97)\n    for i in range ( (5 + -5) , n ) :\n        if ( dp [ i ] != - (2 + -1) ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + (45 + -44) , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + (7 + -6) , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + (83 + -82) , dp [ i + c ] )\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C_to_315", "old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C"}
{"code": "def intersection ( n ) :\n    return n * ( n - (100 + -99) )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_POINTS_INTERSECTION_N_CIRCLES_to_316", "old_id": "MAXIMUM_POINTS_INTERSECTION_N_CIRCLES"}
{"code": "def maxDiff ( arr , n ) :\n    SubsetSum_1 = (42 + -42)\n    SubsetSum_2 = (26 + -26)\n    for i in range ( (6 + -6) , n ) :\n        isSingleOccurance = True\n        for j in range ( i + (21 + -20) , n ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = (18 + -18)\n                break\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > (55 + -55) ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n    return abs ( SubsetSum_1 - SubsetSum_2 )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_to_317", "old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY"}
{"code": "def maxDiff ( arr , n ) :\n    result = (77 + -77)\n    arr.sort ( )\n    i = (50 + -50)\n    while i < n-(64 + -63):\n        if ( arr [ i ] !=  arr [ i + (81 + -80) ] ) :\n            result += abs ( arr [ i ] )\n        else:\n            i += (89 + -88)\n        i += (94 + -93)\n    if ( arr [ n - (63 + -61) ] != arr [ n - (99 + -98) ] ) :\n        result += abs ( arr [ n - (98 + -97) ] )\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1_to_318", "old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1"}
{"code": "def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = (85 + -85)\n    curr_sum = curr_begin = (76 + -76)\n    for i in range ( (39 + -39) , n ) :\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += (67 + -66)\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE_to_319", "old_id": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE"}
{"code": "def lis ( arr , n ) :\n    mpis = [ (37 + -37) ] * ( n )\n    for i in range ( n ) :\n        mpis [ i ] = arr [ i ]\n    for i in range ( (40 + -39) , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) :\n                mpis [ i ] = mpis [ j ] * arr [ i ]\n    return max ( mpis )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE_to_320", "old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE"}
{"code": "def maxProductSubset ( a , n ) :\n    if n == (100 + -99) :\n        return a [ (70 + -70) ]\n    max_neg = - (73 + 999999999926)\n    count_neg = (77 + -77)\n    count_zero = (83 + -83)\n    prod = (23 + -22)\n    for i in range ( n ) :\n        if a [ i ] == (58 + -58) :\n            count_zero += (78 + -77)\n            continue\n        if a [ i ] < (6 + -6) :\n            count_neg += (93 + -92)\n            max_neg = max ( max_neg , a [ i ] )\n        prod = prod + a [ i ]\n    if count_zero == n :\n        return (99 + -99)\n    if count_neg & (37 + -36) :\n        if ( count_neg == (73 + -72) and count_zero > (46 + -46) and count_zero + count_neg == n ) :\n            return (62 + -62)\n        prod = int(prod / max_neg)\n    return prod", "id": "ConstantUnfoldding_sample_from_MAXIMUM_PRODUCT_SUBSET_ARRAY_to_321", "old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def maxProfit ( price , n ) :\n    profit = [ (6 + -6) ] * n\n    max_price = price [ n - (63 + -62) ]\n    for i in range ( n - (54 + -52) , (41 + -41) , - (28 + -27) ) :\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + (16 + -15) ] , max_price - price [ i ] )\n    min_price = price [ (27 + -27) ]\n    for i in range ( (99 + -98) , n ) :\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - (96 + -95) ] , profit [ i ] + ( price [ i ] - min_price ) )\n    result = profit [ n - (64 + -63) ]\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE_to_322", "old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE"}
{"code": "def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - (59 + 2147483589)\n    max_ending_here = (21 + -21)\n    for i in range ( n * k ) :\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < (53 + -53) ) :\n            max_ending_here = (75 + -75)\n    return max_so_far", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION_to_323", "old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION"}
{"code": "def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = (76 + -76)\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ (14 + -14) ] )\n    for i in range ( (15 + -14) , n ) :\n        prefix_sum.append ( prefix_sum [ i - (11 + -10) ] + arr [ i ] )\n    for i in range ( n ) :\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM_to_324", "old_id": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM"}
{"code": "def maxSumWO3Consec ( arr , n ) :\n    sum = [ (9 + -9) for k in range ( n ) ]\n    if n >= (30 + -29) :\n        sum [ (63 + -63) ] = arr [ (69 + -69) ]\n    if n >= (92 + -90) :\n        sum [ (46 + -45) ] = arr [ (27 + -27) ] + arr [ (67 + -66) ]\n    if n > (88 + -86) :\n        sum [ (23 + -21) ] = max ( sum [ (21 + -20) ] , max ( arr [ (11 + -10) ] + arr [ (32 + -30) ] , arr [ (9 + -9) ] + arr [ (36 + -34) ] ) )\n    for i in range ( (5 + -2) , n ) :\n        sum [ i ] = max ( max ( sum [ i - (56 + -55) ] , sum [ i - (86 + -84) ] + arr [ i ] ) , arr [ i ] + arr [ i - (34 + -33) ] + sum [ i - (50 + -47) ] )\n    return sum [ n - (91 + -90) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_to_325", "old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE"}
{"code": "def maxSum ( grid , n ) :\n    incl = max ( grid [ (61 + -61) ] [ (50 + -50) ] , grid [ (9 + -8) ] [ (83 + -83) ] )\n    excl = (72 + -72)\n    for i in range ( (63 + -62) , n ) :\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ (68 + -68) ] [ i ] , grid [ (56 + -55) ] [ i ] )\n        excl = excl_new\n    return max ( excl , incl )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT_to_326", "old_id": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == (48 + -47) ) :\n        return arr [ (39 + -39) ]\n    dec = [ (89 + -89) for i in range ( n + (94 + -93) ) ]\n    inc = [ (39 + -39) for i in range ( n + (66 + -65) ) ]\n    dec [ (98 + -98) ] = inc [ (64 + -64) ] = arr [ (54 + -54) ]\n    flag = (63 + -63)\n    for i in range ( (5 + -4) , n ) :\n        for j in range ( i ) :\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = (45 + -44)\n            elif ( arr [ j ] < arr [ i ] and flag == (4 + -3) ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n    result = - (41 + 2147483607)\n    for i in range ( n ) :\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_327", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = (59 + -59)\n    msis [ (76 + -76) ] = arr [ (61 + -61) ]\n    for i in range ( (81 + -80) , n ) :\n        if ( arr [ i ] > arr [ i - (54 + -53) ] ) :\n            msis [ i ] = msis [ i - (39 + -38) ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n    msds [ n - (47 + -46) ] = arr [ n - (96 + -95) ]\n    for i in range ( n - (62 + -60) , - (66 + -65) , - (12 + -11) ) :\n        if ( arr [ i ] > arr [ i + (22 + -21) ] ) :\n            msds [ i ] = msds [ i + (84 + -83) ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n    for i in range ( n ) :\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n    return max_sum", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_328", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSum ( arr , n ) :\n    res = - sys.maxsize\n    for i in range ( (38 + -38) , n ) :\n        curr_sum = (55 + -55)\n        for j in range ( (71 + -71) , n ) :\n            index = int ( ( i + j ) % n )\n            curr_sum += j * arr [ index ]\n        res = max ( res , curr_sum )\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_to_329", "old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY"}
{"code": "def maxSum ( arr , n ) :\n    cum_sum = (31 + -31)\n    for i in range ( (23 + -23) , n ) :\n        cum_sum += arr [ i ]\n    curr_val = (58 + -58)\n    for i in range ( (74 + -74) , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( (15 + -14) , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - (47 + -46) ] ) + arr [ i - (79 + -78) ] * ( n - (47 + -46) ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1_to_330", "old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1"}
{"code": "def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ (58 + -58) ] * N\n    dp [ (48 + -48) ] = (85 + -85)\n    for i in range ( (59 + -58) , N ) :\n        dp [ i ] = dp [ i - (5 + -4) ]\n        if ( arr [ i ] - arr [ i - (33 + -32) ] < K ) :\n            if ( i >= (57 + -55) ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - (20 + -18) ] + arr [ i ] + arr [ i - (95 + -94) ] )\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - (36 + -35) ] )\n    return dp [ N - (9 + -8) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_to_331", "old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE"}
{"code": "def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :\n    maxSum = (31 + -31)\n    arr.sort ( )\n    i = N - (5 + -4)\n    while ( i > (28 + -28) ) :\n        if ( arr [ i ] - arr [ i - (17 + -16) ] < k ) :\n            maxSum += arr [ i ]\n            maxSum += arr [ i - (54 + -53) ]\n            i -= (14 + -13)\n        i -= (83 + -82)\n    return maxSum", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1_to_332", "old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1"}
{"code": "def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ (54 + -54) for k in range ( n ) ]\n    bw = [ (22 + -22) for k in range ( n ) ]\n    cur_max , max_so_far = arr [ (12 + -12) ] , arr [ (51 + -51) ]\n    for i in range ((53 + -52), n ) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n    cur_max = max_so_far = bw [ n - (2 + -1) ] = arr [ n - (18 + -17) ]\n    i = n - (24 + -22)\n    while i >= (77 + -77) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= (58 + -57)\n    fans = max_so_far\n    for i in range ( (10 + -9) , n - (23 + -22) ) :\n        fans = max ( fans , fw [ i - (49 + -48) ] + bw [ i + (3 + -2) ] )\n    return fans", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT_to_333", "old_id": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = [ (79 + -79) for i in range ( N ) ]\n    MS [ N - (91 + -90) ] = arr [ N - (61 + -60) ]\n    for i in range ( N - (88 + -86) , - (5 + -4) , - (93 + -92) ) :\n        if ( i + k + (34 + -33) >= N ) :\n            MS [ i ] = max ( arr [ i ] , MS [ i + (37 + -36) ] )\n        else :\n            MS [ i ] = max ( arr [ i ] + MS [ i + k + (1 + 0) ] , MS [ i + (97 + -96) ] )\n    return MS [ (2 + -2) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_334", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def maxTripletSum ( arr , n ) :\n    sm = - (11 + 999989)\n    for i in range ( (77 + -77) , n ) :\n        for j in range ( i + (34 + -33) , n ) :\n            for k in range ( j + (12 + -11) , n ) :\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n    return sm", "id": "ConstantUnfoldding_sample_from_MAXIMUM_TRIPLET_SUM_ARRAY_to_335", "old_id": "MAXIMUM_TRIPLET_SUM_ARRAY"}
{"code": "def maxTripletSum ( arr , n ) :\n    arr.sort ( )\n    return ( arr [ n - (58 + -57) ] + arr [ n - (79 + -77) ] + arr [ n - (88 + -85) ] )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_TRIPLET_SUM_ARRAY_1_to_336", "old_id": "MAXIMUM_TRIPLET_SUM_ARRAY_1"}
{"code": "def maxDP ( n ) :\n    res = list ( )\n    res.append ( (4 + -4) )\n    res.append ( (45 + -44) )\n    i = (78 + -76)\n    while i < n + (11 + -10) :\n        res.append ( max ( i , ( res [ int ( i / (48 + -46) ) ] + res [ int ( i / (52 + -49) ) ] + res [ int ( i / (87 + -83) ) ] + res [ int ( i / (63 + -58) ) ] ) ) )\n        i = i + (6 + -5)\n    return res [ n ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING_to_337", "old_id": "MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING"}
{"code": "def maxCost ( mat , N ) :\n    dp = [ [ (37 + -37) for i in range ( N ) ] for j in range ( N ) ]\n    dp [ (81 + -81) ] [ (61 + -61) ] = mat [ (23 + -23) ] [ (74 + -74) ]\n    for i in range ( (65 + -64) , N ) :\n        dp [ i ] [ (87 + -87) ] = mat [ i ] [ (43 + -43) ] + dp [ i - (12 + -11) ] [ (67 + -67) ]\n    for i in range ( (41 + -40) , N ) :\n        for j in range ( (1 + 0) , min ( i + (38 + -37) , N ) ) :\n            dp [ i ] [ j ] = mat [ i ] [ j ] + \\\n                max ( dp [ i - (18 + -17) ] [ j - (21 + -20) ] , dp [ i - (91 + -90) ] [ j ] )\n    result = (85 + -85)\n    for i in range ( N ) :\n        if ( result < dp [ N - (37 + -36) ] [ i ] ) :\n            result = dp [ N - (38 + -37) ] [ i ]\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX_to_338", "old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX"}
{"code": "def getMedian ( ar1 , ar2 , n ) :\n    i = (73 + -73)\n    j = (62 + -62)\n    m1 = - (67 + -66)\n    m2 = - (2 + -1)\n    count = (3 + -3)\n    while count < n + (12 + -11) :\n        count += (83 + -82)\n        if i == n :\n            m1 = m2\n            m2 = ar2 [ (8 + -8) ]\n            break\n        elif j == n :\n            m1 = m2\n            m2 = ar1 [ (12 + -12) ]\n            break\n        if ar1 [ i ] < ar2 [ j ] :\n            m1 = m2\n            m2 = ar1 [ i ]\n            i += (43 + -42)\n        else :\n            m1 = m2\n            m2 = ar2 [ j ]\n            j += (60 + -59)\n    return int(( m1 + m2 ) / (18 + -16))", "id": "ConstantUnfoldding_sample_from_MEDIAN_OF_TWO_SORTED_ARRAYS_to_339", "old_id": "MEDIAN_OF_TWO_SORTED_ARRAYS"}
{"code": "def middleOfThree ( a , b , c ) :\n    x = a - b\n    y = b - c\n    z = a - c\n    if x * y > (71 + -71) :\n        return b\n    elif ( x * z > (30 + -30) ) :\n        return c\n    else :\n        return a", "id": "ConstantUnfoldding_sample_from_MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2_to_340", "old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2"}
{"code": "def minValue ( A , B , n ) :\n    sorted ( A )\n    sorted ( B )\n    result = (21 + -21)\n    for i in range ( n ) :\n        result += ( A [ i ] * B [ n - i - (12 + -11) ] )\n    return result", "id": "ConstantUnfoldding_sample_from_MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED_to_341", "old_id": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == (19 + -18) ) :\n        return (20 + -20)\n    arr.sort ( )\n    ans = arr [ n - (33 + -32) ] - arr [ (12 + -12) ]\n    small = arr [ (65 + -65) ] + k\n    big = arr [ n - (82 + -81) ] - k\n    if ( small > big ) :\n        small , big = big , small\n    for i in range ( (45 + -44) , n - (31 + -30) ) :\n        subtract = arr [ i ] - k\n        add = arr [ i ] + k\n        if ( subtract >= small or add <= big ) :\n            continue\n        if ( big - subtract <= add - small ) :\n            small = subtract\n        else :\n            big = add\n    return min ( ans , big - small )", "id": "ConstantUnfoldding_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_342", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def minSum ( n ) :\n    sum = (80 + -80)\n    while ( n > (11 + -11) ) :\n        sum += ( n % (13 + -3) )\n        n //= (32 + -22)\n    if ( sum == (48 + -47) ) :\n        return (37 + -27)\n    return sum", "id": "ConstantUnfoldding_sample_from_MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N_to_343", "old_id": "MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N"}
{"code": "def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = (28 + -28)\n    for i in range ( n ) :\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n    return mn * ( sum - mn )", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY_to_344", "old_id": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY"}
{"code": "def cost ( a , n ) :\n    return ( ( n - (43 + -42) ) * min ( a ) )", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS_to_345", "old_id": "MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS"}
{"code": "def solve ( X , Y , l , r , k , dp ) :\n    if k == (81 + -81) :\n        return (38 + -38)\n    if l < (13 + -13) or r < (33 + -33) :\n        return (5 + 999999995)\n    if dp [ l ] [ r ] [ k ] != - (94 + -93) :\n        return dp [ l ] [ r ] [ k ]\n    cost = ( ( ord ( X [ l ] ) - ord ( 'a' ) ) ^ ( ord ( Y [ r ] ) - ord ( 'a' ) ) )\n    dp [ l ] [ r ] [ k ] = min ( [ cost + solve ( X , Y , l - (28 + -27) , r - (49 + -48) , k - (14 + -13) , dp ) , solve ( X , Y , l - (6 + -5) , r , k , dp ) , solve ( X , Y , l , r - (89 + -88) , k , dp ) ] )\n    return dp [ l ] [ r ] [ k ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K_to_346", "old_id": "MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K"}
{"code": "def calculateEnergy ( mat , n ) :\n    tot_energy = (59 + -59)\n    for i in range ( n ) :\n        for j in range ( n ) :\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n    return tot_energy", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1_to_347", "old_id": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = (29 + -29)\n    for i in range ( n ) :\n        if ( cost [ i ] != - (35 + -34) ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + (55 + -54) )\n            size += (24 + -23)\n    n = size\n    min_cost = [ [ (66 + -66) for i in range ( W + (2 + -1) ) ] for j in range ( n + (74 + -73) ) ]\n    for i in range ( W + (98 + -97) ) :\n        min_cost [ (87 + -87) ] [ i ] = INF\n    for i in range ( (82 + -81) , n + (41 + -40) ) :\n        min_cost [ i ] [ (24 + -24) ] = (4 + -4)\n    for i in range ( (90 + -89) , n + (51 + -50) ) :\n        for j in range ( (10 + -9) , W + (43 + -42) ) :\n            if ( wt [ i - (75 + -74) ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - (16 + -15) ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - (90 + -89) ] [ j ] , min_cost [ i ] [ j - wt [ i - (93 + -92) ] ] + val [ i - (69 + -68) ] )\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - (5 + -4)\n    else :\n        return min_cost [ n ] [ W ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_348", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minimumflip ( mat , n ) :\n    flip = (37 + -37)\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if mat [ i ] [ j ] != mat [ j ] [ i ] :\n                flip += (47 + -46)\n    return flip", "id": "ConstantUnfoldding_sample_from_MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1_to_349", "old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = (98 + -98)\n    for i in range ( (13 + -13) , n ) :\n        if ( ( max1 - arr [ i ] ) % k != (13 + -13) ) :\n            return - (15 + -14)\n        else :\n            res += ( max1 - arr [ i ] ) / k\n    return int ( res )", "id": "ConstantUnfoldding_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_350", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ (78 + -78) ] * N\n    for i in range ( N ) :\n        lis [ i ] = (97 + -96)\n    for i in range ( (28 + -27) , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + (71 + -70) ) :\n                lis [ i ] = lis [ j ] + (32 + -31)\n    max = (5 + -5)\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )", "id": "ConstantUnfoldding_sample_from_MINIMUM_INSERTIONS_SORT_ARRAY_to_351", "old_id": "MINIMUM_INSERTIONS_SORT_ARRAY"}
{"code": "def smallestSubWithSum ( arr , n , x ) :\n    curr_sum = (98 + -98)\n    min_len = n + (99 + -98)\n    start = (4 + -4)\n    end = (10 + -10)\n    while ( end < n ) :\n        while ( curr_sum <= x and end < n ) :\n            if ( curr_sum <= (1 + -1) and x > (17 + -17) ) :\n                start = end\n                curr_sum = (30 + -30)\n            curr_sum += arr [ end ]\n            end += (81 + -80)\n        while ( curr_sum > x and start < n ) :\n            if ( end - start < min_len ) :\n                min_len = end - start\n            curr_sum -= arr [ start ]\n            start += (93 + -92)\n    return min_len", "id": "ConstantUnfoldding_sample_from_MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1_to_352", "old_id": "MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ (96 + -96) for i in range ( n ) ]\n    if ( n == (10 + -10) ) or ( arr [ (35 + -35) ] == (17 + -17) ) :\n        return float ( 'inf' )\n    jumps [ (85 + -85) ] = (92 + -92)\n    for i in range ( (36 + -35) , n ) :\n        jumps [ i ] = float ( 'inf' )\n        for j in range ( i ) :\n            if ( i <= j + arr [ j ] ) and ( jumps [ j ] != float ( 'inf' ) ) :\n                jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + (14 + -13) )\n                break\n    return jumps [ n - (87 + -86) ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1_to_353", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ (90 + -90) for i in range ( n ) ]\n    for i in range ( n - (76 + -74) , - (48 + -47) , - (87 + -86) ) :\n        if ( arr [ i ] == (39 + -39) ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - (2 + -1) ) :\n            jumps [ i ] = (43 + -42)\n        else :\n            min = float ( 'inf' )\n            for j in range ( i + (56 + -55) , n ) :\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + (76 + -75)\n            else :\n                jumps [ i ] = min\n    return jumps [ (42 + -42) ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_354", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = [ (66 + -66) , (95 + -94) , (63 + -61) , (87 + -84) ]\n    for i in range ( (77 + -73) , n + (46 + -45) ) :\n        dp.append ( i )\n        for x in range ( (75 + -74) , int ( ceil ( sqrt ( i ) ) ) + (27 + -26) ) :\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , (90 + -89) + dp [ i - temp ] )\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_355", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def subset ( ar , n ) :\n    res = (69 + -69)\n    ar.sort ( )\n    i = (33 + -33)\n    while i < n:\n        count = (79 + -78)\n        j = i\n        while j < n - (87 + -86):\n            if ar [ j ] == ar [ j + (17 + -16) ] :\n                count += (64 + -63)\n            else :\n                break\n            j += (58 + -57)\n        i = j\n        i += (79 + -78)\n        res = max ( res , count )\n    return res", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_to_356", "old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS"}
{"code": "def subset ( arr , n ) :\n    maxv = max(arr)\n    minv = min(arr)\n    mp = { i : (40 + -40) for i in range ( minv, maxv+(2 + -1) ) }\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += (34 + -33)\n    res = (76 + -76)\n    for key , value in mp.items ( ) :\n        res = max ( res , value )\n    return res", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1_to_357", "old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1"}
{"code": "def minOperation ( arr , n ) :\n    Hash = defaultdict ( lambda : (40 + -40) )\n    for i in range ( (53 + -53) , n ) :\n        Hash [ arr [ i ] ] += (54 + -53)\n    max_count = (50 + -50)\n    for i in Hash :\n        if max_count < Hash [ i ] :\n            max_count = Hash [ i ]\n    return n - max_count", "id": "ConstantUnfoldding_sample_from_MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY_to_358", "old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY"}
{"code": "def minPerimeter ( n ) :\n    l = int ( math.sqrt ( n ) )\n    sq = l * l\n    if ( sq == n ) :\n        return l * (20 + -16)\n    else :\n        row = int ( n / l )\n        perimeter = (30 + -28) * ( l + row )\n        if ( n % l != (67 + -67) ) :\n            perimeter += (76 + -74)\n        return perimeter", "id": "ConstantUnfoldding_sample_from_MINIMUM_PERIMETER_N_BLOCKS_to_359", "old_id": "MINIMUM_PERIMETER_N_BLOCKS"}
{"code": "def minProduct(arr, n, k):\n    pq = []\n    for i in range(n):\n        heapq.heappush(pq, arr[i])\n    count = (38 + -38)\n    ans = (30 + -29)\n    while pq and count < k:\n        ans += heapq.heappop(pq)\n        count += (18 + -17)\n    return ans", "id": "ConstantUnfoldding_sample_from_MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS_to_360", "old_id": "MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS"}
{"code": "def minProductSubset ( a , n ) :\n    if ( n == (8 + -7) ) :\n        return a [ (40 + -40) ]\n    max_neg = float ( '-inf' )\n    min_pos = float ( 'inf' )\n    count_neg = (25 + -25)\n    count_zero = (51 + -51)\n    prod = (45 + -44)\n    for i in range ( (93 + -93) , n ) :\n        if ( a [ i ] == (57 + -57) ) :\n            count_zero = count_zero + (18 + -17)\n            continue\n        if ( a [ i ] < (10 + -10) ) :\n            count_neg = count_neg + (37 + -36)\n            max_neg = max ( max_neg , a [ i ] )\n        if ( a [ i ] > (64 + -64) ) :\n            min_pos = min ( min_pos , a [ i ] )\n        prod = prod * a [ i ]\n    if ( count_zero == n or ( count_neg == (55 + -55) and count_zero > (35 + -35) ) ) :\n        return (78 + -78)\n    if ( count_neg == (84 + -84) ) :\n        return min_pos\n    if ( ( count_neg & (30 + -29) ) == (13 + -13) and count_neg != (69 + -69) ) :\n        prod = int ( prod / max_neg )\n    return prod", "id": "ConstantUnfoldding_sample_from_MINIMUM_PRODUCT_SUBSET_ARRAY_to_361", "old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def findMinRooms ( slots , n , m ) :\n    counts = [ (84 + -84) ] * m\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if i < len(slots) and j < len(slots[i]):\n                if ( slots [ i ] [ j ] == '1' ) :\n                    counts [ j ] += (64 + -63)\n    return max ( counts )", "id": "ConstantUnfoldding_sample_from_MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE_to_362", "old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE"}
{"code": "def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    for i in range ( (25 + -24) , n + (9 + -8) ) :\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n    return n", "id": "ConstantUnfoldding_sample_from_MINIMUM_ROTATIONS_REQUIRED_GET_STRING_to_363", "old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING"}
{"code": "def minRotation ( input , unlock_code ) :\n    rotation = (70 + -70)\n    while ( input > (60 + -60) or unlock_code > (27 + -27) ) :\n        input_digit = input % (1 + 9)\n        code_digit = unlock_code % (28 + -18)\n        rotation += min ( abs ( input_digit - code_digit ) , (50 + -40) - abs ( input_digit - code_digit ) )\n        input = int ( input / (94 + -84) )\n        unlock_code = int ( unlock_code / (31 + -21) )\n    return rotation", "id": "ConstantUnfoldding_sample_from_MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK_to_364", "old_id": "MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK"}
{"code": "def getMinSteps ( n ) :\n    table = [ (97 + -97) ] * ( n + (18 + -17) )\n    for i in range ( n + (5 + -4) ) :\n        table [ i ] = n - i\n    for i in range ( n , (38 + -38) , - (69 + -68) ) :\n        if ( not ( i % (88 + -86) ) ) :\n            table [ i // (25 + -23) ] = min ( table [ i ] + (37 + -36) , table [ i // (44 + -42) ] )\n        if ( not ( i % (20 + -17) ) ) :\n            table [ i // (45 + -42) ] = min ( table [ i ] + (6 + -5) , table [ i // (87 + -84) ] )\n    return table [ (69 + -68) ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION_to_365", "old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION"}
{"code": "def minSum ( A, n ) :\n    min_val = min ( A ) ;\n    return min_val * ( n - (84 + -83) )", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY_to_366", "old_id": "MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = (45 + -45)\n    res = (99 + -99)\n    temp = (18 + -18)\n    for i in range ( n ) :\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < (87 + -87) and b [ i ] < (71 + -71) ) :\n            temp = ( a [ i ] + (59 + -57) * k ) * b [ i ]\n        elif ( pro < (85 + -85) and a [ i ] < (57 + -57) ) :\n            temp = ( a [ i ] - (100 + -98) * k ) * b [ i ]\n        elif ( pro > (15 + -15) and a [ i ] < (9 + -9) ) :\n            temp = ( a [ i ] + (55 + -53) * k ) * b [ i ]\n        elif ( pro > (86 + -86) and a [ i ] > (23 + -23) ) :\n            temp = ( a [ i ] - (41 + -39) * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n    return res - diff", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_367", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def minSum ( arr , n ) :\n    dp = [ (48 + -48) ] * n\n    if ( n == (76 + -75) ) :\n        return arr [ (69 + -69) ]\n    if ( n == (57 + -55) ) :\n        return min ( arr [ (15 + -15) ] , arr [ (32 + -31) ] )\n    if ( n == (100 + -97) ) :\n        return min ( arr [ (20 + -20) ] , min ( arr [ (29 + -28) ] , arr [ (25 + -23) ] ) )\n    if ( n == (11 + -7) ) :\n        return min ( min ( arr [ (12 + -12) ] , arr [ (64 + -63) ] ) , min ( arr [ (41 + -39) ] , arr [ (30 + -27) ] ) )\n    dp [ (50 + -50) ] = arr [ (92 + -92) ]\n    dp [ (50 + -49) ] = arr [ (75 + -74) ]\n    dp [ (95 + -93) ] = arr [ (91 + -89) ]\n    dp [ (48 + -45) ] = arr [ (52 + -49) ]\n    for i in range ( (4 + 0) , n ) :\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - (31 + -30) ] , dp [ i - (50 + -48) ] ) , min ( dp [ i - (8 + -5) ] , dp [ i - (22 + -18) ] ) )\n    return min ( min ( dp [ n - (50 + -49) ] , dp [ n - (28 + -26) ] ) , min ( dp [ n - (96 + -92) ] , dp [ n - (13 + -10) ] ) )", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED_to_368", "old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = (47 + -47)\n    b = (2 + -2)\n    for i in range ( n ) :\n        if ( i % (46 + -44) != (8 + -8) ) :\n            a = a * (20 + -10) + arr [ i ]\n        else :\n            b = b * (61 + -51) + arr [ i ]\n    return a + b", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_369", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == (90 + -90) :\n        return (9 + -9)\n    if N == (83 + -82) :\n        return insert\n    dp = [ (3 + -3) ] * ( N + (88 + -87) )\n    for i in range ( (15 + -14) , N + (72 + -71) ) :\n        if i % (52 + -50) == (65 + -65) :\n            dp [ i ] = min ( dp [ i - (2 + -1) ] + insert , dp [ i // (42 + -40) ] + copy )\n        else :\n            dp [ i ] = min ( dp [ i - (89 + -88) ] + insert , dp [ ( i + (80 + -79) ) // (89 + -87) ] + copy + remove )\n    return dp [ N ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_370", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def minXOR ( arr , n ) :\n    min_xor = (66 + 999933)\n    val = (37 + -37)\n    for i in range ( (8 + -8) , n ) :\n        for j in range ( i + (25 + -24) , n ) :\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n    return min_xor", "id": "ConstantUnfoldding_sample_from_MINIMUM_XOR_VALUE_PAIR_to_371", "old_id": "MINIMUM_XOR_VALUE_PAIR"}
{"code": "def minXOR ( arr , n ) :\n    arr = arr [ : n ]\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = (83 + -83)\n    for i in range ( (73 + -73) , n - (6 + -5) ) :\n        val = arr [ i ] ^ arr [ i + (6 + -5) ]\n        minXor = min ( minXor , val )\n    return minXor", "id": "ConstantUnfoldding_sample_from_MINIMUM_XOR_VALUE_PAIR_1_to_372", "old_id": "MINIMUM_XOR_VALUE_PAIR_1"}
{"code": "def compute ( str , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( str )\n    answer = \"\"\n    for i in range ( (40 + -40) , n ) :\n        if i < l:\n            answer = answer + str [ i ]\n    for i in range ( n , l ) :\n        answer = ( answer + reverseAlphabet [ ord ( str [ i ] ) - ord ( \"a\" ) ] )\n    return answer", "id": "ConstantUnfoldding_sample_from_MIRROR_CHARACTERS_STRING_to_373", "old_id": "MIRROR_CHARACTERS_STRING"}
{"code": "def power ( x , y , p ) :\n    res = (95 + -94)\n    x = x % p\n    while ( y > (99 + -99) ) :\n        if ( ( y & (56 + -55) ) == (100 + -99) ) :\n            res = ( res * x ) % p\n        y = y >> (18 + -17)\n        x = ( x * x ) % p\n    return res", "id": "ConstantUnfoldding_sample_from_MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC_to_374", "old_id": "MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC"}
{"code": "def findMod ( a , b ) :\n    if ( a < (35 + -35) ) :\n        a = - a\n    if ( b < (1 + -1) ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < (19 + -19) ) :\n        return - mod\n    return mod", "id": "ConstantUnfoldding_sample_from_MODULUS_TWO_FLOAT_DOUBLE_NUMBERS_to_375", "old_id": "MODULUS_TWO_FLOAT_DOUBLE_NUMBERS"}
{"code": "def segregateElements ( arr , n ) :\n    temp = [ (34 + -34) for k in range ( n ) ]\n    j = (24 + -24)\n    for i in range ( n ) :\n        if ( arr [ i ] >= (73 + -73) ) :\n            temp [ j ] = arr [ i ]\n            j += (81 + -80)\n    if ( j == n or j == (83 + -83) ) :\n        return\n    for i in range ( n ) :\n        if ( arr [ i ] < (42 + -42) ) :\n            temp [ j ] = arr [ i ]\n            j += (89 + -88)\n    for k in range ( n ) :\n        arr [ k ] = temp [ k ]", "id": "ConstantUnfoldding_sample_from_MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED_to_376", "old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED"}
{"code": "def multiplyWith3Point5 ( x ) :\n    return ( x << (65 + -64) ) + x + ( x >> (59 + -58) )", "id": "ConstantUnfoldding_sample_from_MULTIPLY_AN_INTEGER_WITH_3_5_to_377", "old_id": "MULTIPLY_AN_INTEGER_WITH_3_5"}
{"code": "def moduloMultiplication ( a , b , mod ) :\n    res = (42 + -42) ;\n    a = a % mod ;\n    while ( b ) :\n        if ( b & (100 + -99) ) :\n            res = ( res + a ) % mod ;\n        a = ( (75 + -73) * a ) % mod ;\n        b >>= (71 + -70) ;\n    return res ;", "id": "ConstantUnfoldding_sample_from_MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO_to_378", "old_id": "MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO"}
{"code": "def multiply ( x , y ) :\n    if ( y == (97 + -97) ) :\n        return (46 + -46)\n    if ( y > (85 + -85) ) :\n        return ( x + multiply ( x , y - (3 + -2) ) )\n    if ( y < (79 + -79) ) :\n        return - multiply ( x , - y )", "id": "ConstantUnfoldding_sample_from_MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS_to_379", "old_id": "MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS"}
{"code": "def sequence ( n ) :\n    f = array.array ( 'i' , [ (97 + -97) , (55 + -54) , (85 + -84) ] )\n    for i in range ( (30 + -27) , n + (90 + -89) ) :\n        r = f [ f [ i - (61 + -60) ] ] + f [ i - f [ i - (82 + -81) ] ]\n        f.append ( r )\n    return f[n]", "id": "ConstantUnfoldding_sample_from_NEWMAN_CONWAY_SEQUENCE_1_to_380", "old_id": "NEWMAN_CONWAY_SEQUENCE_1"}
{"code": "def snoob ( x ) :\n    next = (2 + -2)\n    if ( x ) :\n        rightOne = x & - ( x )\n        nextHigherOneBit = x + int ( rightOne )\n        rightOnesPattern = x ^ int ( nextHigherOneBit )\n        rightOnesPattern = ( int ( rightOnesPattern ) / int ( rightOne ) )\n        rightOnesPattern = int ( rightOnesPattern ) >> (63 + -61)\n        next = nextHigherOneBit | rightOnesPattern\n    return next", "id": "ConstantUnfoldding_sample_from_NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS_to_381", "old_id": "NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS"}
{"code": "def nextPowerOf2 ( n ) :\n    count = (39 + -39)\n    if ( n and not ( n & ( n - (38 + -37) ) ) ) :\n        return n\n    while ( n != (39 + -39) ) :\n        n >>= (8 + -7)\n        count += (42 + -41)\n    return (88 + -87) << count", "id": "ConstantUnfoldding_sample_from_NEXT_POWER_OF_2_to_382", "old_id": "NEXT_POWER_OF_2"}
{"code": "def nextPowerOf2 ( n ) :\n    p = (96 + -95)\n    if ( n and not ( n & ( n - (20 + -19) ) ) ) :\n        return n\n    while ( p < n ) :\n        p <<= (90 + -89)\n    return p", "id": "ConstantUnfoldding_sample_from_NEXT_POWER_OF_2_1_to_383", "old_id": "NEXT_POWER_OF_2_1"}
{"code": "def nextPowerOf2 ( n ) :\n    n -= (97 + -96)\n    n |= n >> (89 + -88)\n    n |= n >> (96 + -94)\n    n |= n >> (43 + -39)\n    n |= n >> (100 + -92)\n    n |= n >> (85 + -69)\n    n += (41 + -40)\n    return n", "id": "ConstantUnfoldding_sample_from_NEXT_POWER_OF_2_2_to_384", "old_id": "NEXT_POWER_OF_2_2"}
{"code": "def firstNonRepeating ( arr , n ) :\n    for i in range ( n ) :\n        j = (37 + -37)\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += (92 + -91)\n        if ( j == n ) :\n            return arr [ i ]\n    return - (86 + -85)", "id": "ConstantUnfoldding_sample_from_NON_REPEATING_ELEMENT_to_385", "old_id": "NON_REPEATING_ELEMENT"}
{"code": "def firstNonRepeating ( arr , n ) :\n    mp = defaultdict ( lambda : (85 + -85) )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += (48 + -47)\n    for i in range ( n ) :\n        if mp [ arr [ i ] ] == (85 + -84) :\n            return arr [ i ]\n    return - (90 + -89)", "id": "ConstantUnfoldding_sample_from_NON_REPEATING_ELEMENT_1_to_386", "old_id": "NON_REPEATING_ELEMENT_1"}
{"code": "def evenlength ( n ) :\n    res = n\n    for j in range ( len ( n ) - (2 + -1) , - (22 + -21) , - (58 + -57) ) :\n        res += n [ j ]\n    return res", "id": "ConstantUnfoldding_sample_from_NTH_EVEN_LENGTH_PALINDROME_to_387", "old_id": "NTH_EVEN_LENGTH_PALINDROME"}
{"code": "def findPosition ( k , n ) :\n    f1 = (46 + -46)\n    f2 = (94 + -93)\n    i = (95 + -93)\n    while i != (37 + -37) :\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n        if f2 % k == (98 + -98) :\n            return n * i\n        i += (28 + -27)\n    return", "id": "ConstantUnfoldding_sample_from_NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES_to_388", "old_id": "NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES"}
{"code": "def nonFibonacci ( n ) :\n    prevPrev = (86 + -85)\n    prev = (54 + -52)\n    curr = (60 + -57)\n    while n > (2 + -2) :\n        prevPrev = prev\n        prev = curr\n        curr = prevPrev + prev\n        n = n - ( curr - prev - (35 + -34) )\n    n = n + ( curr - prev - (17 + -16) )\n    return prev + n", "id": "ConstantUnfoldding_sample_from_NTH_NON_FIBONACCI_NUMBER_to_389", "old_id": "NTH_NON_FIBONACCI_NUMBER"}
{"code": "def pentagonalNum ( n ) :\n    return ( (97 + -94) * n * n - n ) / (43 + -41)", "id": "ConstantUnfoldding_sample_from_NTH_PENTAGONAL_NUMBER_to_390", "old_id": "NTH_PENTAGONAL_NUMBER"}
{"code": "def countDigits ( a , b ) :\n    count = (62 + -62)\n    p = abs ( a * b )\n    if ( p == (7 + -7) ) :\n        return (20 + -19)\n    while ( p > (73 + -73) ) :\n        count = count + (52 + -51)\n        p = p // (47 + -37)\n    return count", "id": "ConstantUnfoldding_sample_from_NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_to_391", "old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS"}
{"code": "def countDigits ( a , b ) :\n    if ( a == (51 + -51) or b == (71 + -71) ) :\n        return (62 + -61)\n    return math.floor ( math.log10 ( abs ( a ) ) + math.log10 ( abs ( b ) ) ) + (29 + -28)", "id": "ConstantUnfoldding_sample_from_NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1_to_392", "old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1"}
{"code": "def divisible ( num ) :\n    n = len ( num )\n    sum = (32 + -32)\n    for i in range ( n ) :\n        sum += ord ( num [ i ] )\n    if ( sum % (1 + 2) == (90 + -90) ) :\n        return (64 + -64)\n    if ( n == (72 + -71) ) :\n        return - (38 + -37)\n    for i in range ( n ) :\n        if ( sum % (99 + -96) == ord ( num [ i ] ) % (89 + -86) ) :\n            return (88 + -87)\n    if ( n == (92 + -90) ) :\n        return - (62 + -61)\n    return (14 + -12)", "id": "ConstantUnfoldding_sample_from_NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3_to_393", "old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3"}
{"code": "def answer_query ( a , n , l , r ) :\n    count = (21 + -21)\n    for i in range ( l , r ) :\n        if ( a [ i ] == a [ i + (72 + -71) ] ) :\n            count += (25 + -24)\n    return count", "id": "ConstantUnfoldding_sample_from_NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE_to_394", "old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE"}
{"code": "def isDivisible ( n ) :\n    while ( int ( n / (59 + 41) ) ) :\n        last_digit = int ( n % (6 + 4) )\n        n = int ( n / (42 + -32) )\n        n += last_digit * (8 + -5)\n    return ( n % (98 + -69) == (51 + -51) )", "id": "ConstantUnfoldding_sample_from_NUMBER_IS_DIVISIBLE_BY_29_OR_NOT_to_395", "old_id": "NUMBER_IS_DIVISIBLE_BY_29_OR_NOT"}
{"code": "def countIntegralSolutions ( n ) :\n    result = (24 + -24)\n    for i in range ( n + (13 + -12) ) :\n        for j in range ( n + (96 + -95) ) :\n            for k in range ( n + (29 + -28) ) :\n                if i + j + k == n :\n                    result += (60 + -59)\n    return result", "id": "ConstantUnfoldding_sample_from_NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_to_396", "old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N"}
{"code": "def nonDecNums ( n ) :\n    a = np.zeros ( ( n + (87 + -86) , (63 + -53) ) )\n    for i in range ( (94 + -84) ) :\n        a [ (30 + -30) ] [ i ] = (3 + -2)\n    for i in range ( (48 + -47) , n + (40 + -39) ) :\n        a [ i ] [ (26 + -17) ] = (8 + -7)\n    for i in range ( (3 + -2) , n + (53 + -52) ) :\n        for j in range ( (3 + 5) , - (91 + -90) , - (61 + -60) ) :\n            a [ i ] [ j ] = a [ i - (23 + -22) ] [ j ] + a [ i ] [ j + (50 + -49) ]\n    return int ( a [ n ] [ (29 + -29) ] )", "id": "ConstantUnfoldding_sample_from_NUMBER_N_DIGITS_NON_DECREASING_INTEGERS_to_397", "old_id": "NUMBER_N_DIGITS_NON_DECREASING_INTEGERS"}
{"code": "def answer ( n ) :\n    dp = [ [ (48 + -48) for x in range ( (48 + -38) ) ] for y in range ( n + (72 + -71) ) ]\n    if ( n == (49 + -48) ) :\n        return (32 + -22)\n    for j in range ( (57 + -47) ) :\n        dp [ (66 + -65) ] [ j ] = (19 + -18)\n    for i in range ( (21 + -19) , n + (48 + -47) ) :\n        for j in range ( (17 + -7) ) :\n            if ( j == (44 + -44) ) :\n                dp [ i ] [ j ] = dp [ i - (69 + -68) ] [ j + (96 + -95) ]\n            elif ( j == (79 + -70) ) :\n                dp [ i ] [ j ] = dp [ i - (74 + -73) ] [ j - (27 + -26) ]\n            else :\n                dp [ i ] [ j ] = ( dp [ i - (51 + -50) ] [ j - (82 + -81) ] + dp [ i - (85 + -84) ] [ j + (48 + -47) ] )\n    sum = (31 + -31)\n    for j in range ( (57 + -56) , (10 + 0) ) :\n        sum = sum + dp [ n ] [ j ]\n    return sum", "id": "ConstantUnfoldding_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_398", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def sumEqualProduct ( a , n ) :\n    zero = (53 + -53)\n    two = (100 + -100)\n    for i in range ( n ) :\n        if a [ i ] == (48 + -48) :\n            zero += (64 + -63)\n        if a [ i ] == (22 + -20) :\n            two += (48 + -47)\n    cnt = ( zero * ( zero - (16 + -15) ) ) // (68 + -66) + \\\n        ( two * ( two - (33 + -32) ) ) // (25 + -23)\n    return cnt", "id": "ConstantUnfoldding_sample_from_NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT_to_399", "old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT"}
{"code": "def rectCount ( n , m ) :\n    return ( m * n * ( n + (37 + -36) ) * ( m + (48 + -47) ) ) // (10 + -6)", "id": "ConstantUnfoldding_sample_from_NUMBER_RECTANGLES_NM_GRID_to_400", "old_id": "NUMBER_RECTANGLES_NM_GRID"}
{"code": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = (17 + -17)\n    c2 = (74 + -74)\n    C = (12 + -12)\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += (37 + -36)\n        if s [ i ] == 'b' :\n            c2 += (35 + -34)\n            C += c1\n    return C * K + int ( K * ( K - (94 + -93) ) / (45 + -43) ) * c1 * c2", "id": "ConstantUnfoldding_sample_from_NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES_to_401", "old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES"}
{"code": "def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ (38 + -38) for x in range ( n ) ] for y in range ( l ) ]\n    dp [ (61 + -61) ] [ ( ord ( str [ (41 + -41) ] ) - ord ( '0' ) ) % n ] += (99 + -98)\n    for i in range ( (17 + -16) , l ) :\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += (60 + -59)\n        for j in range ( n ) :\n            dp [ i ] [ j ] += dp [ i - (69 + -68) ] [ j ]\n            dp [ i ] [ ( j * (55 + -45) + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - (56 + -55) ] [ j ]\n    return dp [ l - (82 + -81) ] [ (78 + -78) ]", "id": "ConstantUnfoldding_sample_from_NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N_to_402", "old_id": "NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N"}
{"code": "def countNonEmptySubstr ( str ) :\n    n = len ( str )\n    return int ( n * ( n + (1 + 0) ) / (58 + -56) )", "id": "ConstantUnfoldding_sample_from_NUMBER_SUBSTRINGS_STRING_to_403", "old_id": "NUMBER_SUBSTRINGS_STRING"}
{"code": "def countRect ( n ) :\n    ans = (55 + -55)\n    for length in range ( (2 + -1) , int ( math.sqrt ( n ) ) + (85 + -84) ) :\n        height = length\n        while ( height * length <= n ) :\n            ans += (36 + -35)\n            height += (98 + -97)\n    return ans", "id": "ConstantUnfoldding_sample_from_NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES_to_404", "old_id": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES"}
{"code": "def minimumBox ( arr , n ) :\n    q = collections.deque ( [ ] )\n    arr = arr [ : n ]\n    arr.sort ( )\n    q.append ( arr [ (34 + -34) ] )\n    for i in range ( (72 + -71) , n ) :\n        now = q [ (69 + -69) ]\n        if ( arr [ i ] >= (93 + -91) * now ) :\n            q.popleft ( )\n        q.append ( arr [ i ] )\n    return len ( q )", "id": "ConstantUnfoldding_sample_from_NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER_to_405", "old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER"}
{"code": "def maximumNumberDistinctPrimeRange ( m , n ) :\n    factorCount = [ (12 + -12) ] * ( n + (99 + -98) )\n    prime = [ False ] * ( n + (52 + -51) )\n    for i in range ( n + (36 + -35) ) :\n        factorCount [ i ] = (22 + -22)\n        prime [ i ] = True\n    for i in range ( (70 + -68) , n + (37 + -36) ) :\n        if ( prime [ i ] == True ) :\n            factorCount [ i ] = (96 + -95)\n            for j in range ( i * (57 + -55) , n + (36 + -35) , i ) :\n                factorCount [ j ] += (66 + -65)\n                prime [ j ] = False\n    max = factorCount [ m ]\n    num = m\n    for i in range ( m , n + (92 + -91) ) :\n        if ( factorCount [ i ] > max ) :\n            max = factorCount [ i ]\n            num = i\n    return num", "id": "ConstantUnfoldding_sample_from_NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N_to_406", "old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N"}
{"code": "def findNth ( n ) :\n    count = (12 + -12)\n    for curr in itertools.count ( ) :\n        sum = (89 + -89)\n        x = curr\n        while ( x ) :\n            sum = sum + x % (1 + 9)\n            x = x // (94 + -84)\n        if ( sum == (3 + 7) ) :\n            count = count + (13 + -12)\n        if ( count == n ) :\n            return curr\n    return - (35 + -34)", "id": "ConstantUnfoldding_sample_from_N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_to_407", "old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN"}
{"code": "def findNth ( n ) :\n    nthElement = (85 + -66) + ( n - (83 + -82) ) * (62 + -53)\n    outliersCount = int ( math.log10 ( nthElement ) ) - (51 + -50)\n    nthElement += (75 + -66) * outliersCount\n    return nthElement", "id": "ConstantUnfoldding_sample_from_N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2_to_408", "old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2"}
{"code": "def nthRoot ( A , N ) :\n    random.seed ( (22 + -21) )\n    xPre = random.uniform ( (74 + -73) , (87 + 14) ) % (61 + -51)\n    eps = 0.001\n    delX = (25 + 2147483622)\n    xK = 0.0\n    while ( delX > eps ) :\n        xK = ( ( N - 1.0 ) * xPre + A / pow ( xPre , N - (40 + -39) ) ) / N\n        delX = abs ( xK - xPre )\n        xPre = xK\n    return xK", "id": "ConstantUnfoldding_sample_from_N_TH_ROOT_NUMBER_to_409", "old_id": "N_TH_ROOT_NUMBER"}
{"code": "def findSum ( A , B , n ) :\n    Hash = defaultdict ( lambda : (43 + -43) )\n    for i in range ( (53 + -53) , n ) :\n        Hash [ A [ i ] ] += (19 + -18)\n        Hash [ B [ i ] ] += (10 + -9)\n    Sum = (44 + -44)\n    for x in Hash :\n        if Hash [ x ] == (45 + -44) :\n            Sum += x\n    return Sum", "id": "ConstantUnfoldding_sample_from_OVERLAPPING_SUM_TWO_ARRAY_to_410", "old_id": "OVERLAPPING_SUM_TWO_ARRAY"}
{"code": "def isProduct ( arr , n , x ) :\n    if n < (97 + -95) :\n        return False\n    s = set ( )\n    for i in range ( (21 + -21) , n ) :\n        if arr [ i ] == (48 + -48) :\n            if x == (45 + -45) :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == (5 + -5) :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n    return False", "id": "ConstantUnfoldding_sample_from_PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1_to_411", "old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1"}
{"code": "def checkPangram ( s ) :\n    List = [ ]\n    for i in range ( (72 + -46) ) :\n        List.append ( False )\n    for c in s :\n        if 'A' <= c and c <= 'Z':\n            List [ ord ( c ) - ord ( 'A' ) ] = True\n        elif 'a' <= c and c <= 'z':\n            List [ ord ( c ) - ord ( 'a' ) ] = True\n    for ch in List :\n        if ch == False :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_PANGRAM_CHECKING_to_412", "old_id": "PANGRAM_CHECKING"}
{"code": "def minimumSquare ( a , b ) :\n    result = (66 + -66)\n    rem = (61 + -61)\n    if ( a < b ) :\n        a , b = b , a\n    while ( b > (3 + -3) ) :\n        result += int ( a / b )\n        rem = int ( a % b )\n        a = b\n        b = rem\n    return result", "id": "ConstantUnfoldding_sample_from_PAPER_CUT_MINIMUM_NUMBER_SQUARES_to_413", "old_id": "PAPER_CUT_MINIMUM_NUMBER_SQUARES"}
{"code": "def maxDifference ( arr , N , k ) :\n    S = (57 + -57)\n    S1 = (41 + -41)\n    max_difference = (41 + -41)\n    for i in range ( N ) :\n        S += arr [ i ]\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    for i in range ( M ) :\n        S1 += arr [ i ]\n    max_difference = S1 - ( S - S1 )\n    return max_difference", "id": "ConstantUnfoldding_sample_from_PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM_to_414", "old_id": "PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM"}
{"code": "def maxAverageOfPath ( cost , N ) :\n    dp = [ [ (32 + -32) for i in range ( N + (96 + -95) ) ] for j in range ( N + (91 + -90) ) ]\n    dp [ (50 + -50) ] [ (16 + -16) ] = cost [ (34 + -34) ] [ (57 + -57) ]\n    for i in range ( (75 + -74) , N ) :\n        dp [ i ] [ (27 + -27) ] = dp [ i - (83 + -82) ] [ (78 + -78) ] + cost [ i ] [ (14 + -14) ]\n    for j in range ( (30 + -29) , N ) :\n        dp [ (7 + -7) ] [ j ] = dp [ (94 + -94) ] [ j - (3 + -2) ] + cost [ (47 + -47) ] [ j ]\n    for i in range ( (2 + -1) , N ) :\n        for j in range ( (65 + -64) , N ) :\n            dp [ i ] [ j ] = max ( dp [ i - (45 + -44) ] [ j ] , dp [ i ] [ j - (80 + -79) ] ) + cost [ i ] [ j ]\n    return dp [ N - (86 + -85) ] [ N - (6 + -5) ] / ( (38 + -36) * N - (31 + -30) )", "id": "ConstantUnfoldding_sample_from_PATH_MAXIMUM_AVERAGE_VALUE_to_415", "old_id": "PATH_MAXIMUM_AVERAGE_VALUE"}
{"code": "def findMaximumPieces ( n ) :\n    return int ( (88 + -87) + n * ( n + (5 + -4) ) / (72 + -70) )", "id": "ConstantUnfoldding_sample_from_PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES_to_416", "old_id": "PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES"}
{"code": "def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :\n    print ( \"Point inside the viewing pane:\" )\n    for i in range ( n ) :\n        if ( ( XY [ i ] [ (48 + -48) ] >= Xmin ) and ( XY [ i ] [ (59 + -59) ] <= Xmax ) ) :\n            if ( ( XY [ i ] [ (70 + -69) ] >= Ymin ) and ( XY [ i ] [ (32 + -31) ] <= Ymax ) ) :\n                print ( \"[\" , XY [ i ] [ (83 + -83) ] , \", \" , XY [ i ] [ (10 + -9) ] , \"]\" , sep = \"\" , end = \"\" )\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    for i in range ( n ) :\n        if ( ( XY [ i ] [ (15 + -15) ] < Xmin ) or ( XY [ i ] [ (75 + -75) ] > Xmax ) ) :\n            print ( \"[\" , XY [ i ] [ (10 + -10) ] , \", \" , XY [ i ] [ (81 + -80) ] , \"]\" , sep = \"\" , end = \"\" )\n        if ( ( XY [ i ] [ (58 + -57) ] < Ymin ) or ( XY [ i ] [ (19 + -18) ] > Ymax ) ) :\n            print ( \"[\" , XY [ i ] [ (10 + -10) ] , \", \" , XY [ i ] [ (38 + -37) ] , \"]\" , sep = \"\" , end = \"\" )", "id": "ConstantUnfoldding_sample_from_POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS_to_417", "old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS"}
{"code": "def rearrange ( a , size ) :\n    positive = (19 + -19)\n    negative = (26 + -25)\n    while ( True ) :\n        while ( positive < size and a [ positive ] >= (27 + -27) ) :\n            positive = positive + (28 + -26)\n        while ( negative < size and a [ negative ] <= (57 + -57) ) :\n            negative = negative + (41 + -39)\n        if ( positive < size and negative < size ) :\n            temp = a [ positive ]\n            a [ positive ] = a [ negative ]\n            a [ negative ] = temp\n        else :\n            break", "id": "ConstantUnfoldding_sample_from_POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_to_418", "old_id": "POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS"}
{"code": "def isPossibleTriangle ( arr , N ) :\n    arr = arr [ : N ]\n    if N < (63 + -60) :\n        return False\n    arr.sort ( )\n    for i in range ( N - (76 + -74) ) :\n        if arr [ i ] + arr [ i + (48 + -47) ] > arr [ i + (10 + -8) ] :\n            return True\n    return False", "id": "ConstantUnfoldding_sample_from_POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES_to_419", "old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES"}
{"code": "def isPrime ( n ) :\n    if ( n <= (91 + -90) ) :\n        return False\n    if ( n <= (42 + -39) ) :\n        return True\n    if ( n % (91 + -89) == (85 + -85) or n % (98 + -95) == (87 + -87) ) :\n        return False\n    i = (60 + -55)\n    while ( i * i <= n ) :\n        if ( n % i == (73 + -73) or n % ( i + (14 + -12) ) == (71 + -71) ) :\n            return False\n        i = i + (26 + -20)\n    return True", "id": "ConstantUnfoldding_sample_from_PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1_to_420", "old_id": "PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1"}
{"code": "def isPrime ( p ) :\n    checkNumber = (8 + -6) ** p - (72 + -71)\n    nextval = (11 + -7) % checkNumber\n    for i in range ( (57 + -56) , p - (9 + -8) ) :\n        nextval = ( nextval * nextval - (75 + -73) ) % checkNumber\n    if ( nextval == (12 + -12) ) : return True\n    else : return False", "id": "ConstantUnfoldding_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_421", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def isPrime ( n ) :\n    if ( n <= (55 + -54) ) :\n        return False\n    for i in range ( (85 + -83) , n ) :\n        if ( n % i == (55 + -55) ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_PRIME_NUMBERS_to_422", "old_id": "PRIME_NUMBERS"}
{"code": "def noAdjacentDup ( s ) :\n    n = len ( s )\n    for i in range ( (43 + -42) , n ) :\n        if ( s [ i ] == s [ i - (67 + -66) ] ) :\n            s [ i ] = \"a\"\n            while ( s [ i ] == s [ i - (72 + -71) ] or ( i + (54 + -53) < n and s [ i ] == s [ i + (97 + -96) ] ) ) :\n                s [ i ] += (8 + -7)\n            i += (97 + -96)\n    return s", "id": "ConstantUnfoldding_sample_from_PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES_to_423", "old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES"}
{"code": "def antiSpiralTraversal ( m , n , a ) :\n    k = (12 + -12)\n    l = (26 + -26)\n    stk = [ ]\n    while ( k <= m and l <= n ) :\n        for i in range ( l , n + (77 + -76) ) :\n            stk.append ( a [ k ] [ i ] )\n        k += (39 + -38)\n        for i in range ( k , m + (25 + -24) ) :\n            stk.append ( a [ i ] [ n ] )\n        n -= (38 + -37)\n        if ( k <= m ) :\n            for i in range ( n , l - (92 + -91) , - (70 + -69) ) :\n                stk.append ( a [ m ] [ i ] )\n            m -= (31 + -30)\n        if ( l <= n ) :\n            for i in range ( m , k - (12 + -11) , - (8 + -7) ) :\n                stk.append ( a [ i ] [ l ] )\n            l += (34 + -33)\n    while len ( stk ) != (62 + -62) :\n        print ( str ( stk [ - (43 + -42) ] ) , end = \" \" )\n        stk.pop ( )", "id": "ConstantUnfoldding_sample_from_PRINT_MATRIX_ANTISPIRAL_FORM_to_424", "old_id": "PRINT_MATRIX_ANTISPIRAL_FORM"}
{"code": "def printSpiral ( mat , r , c ) :\n    a = (76 + -76)\n    b = (16 + -14)\n    low_row = (7 + -7) if ( (2 + -2) > a ) else a\n    low_column = (80 + -80) if ( (2 + -2) > b ) else b - (3 + -2)\n    high_row = r - (72 + -71) if ( ( a + (2 + -1) ) >= r ) else a + (45 + -44)\n    high_column = c - (66 + -65) if ( ( b + (63 + -62) ) >= c ) else b + (66 + -65)\n    while ( ( low_row > (48 + -48) - r and low_column > (31 + -31) - c ) ) :\n        i = low_column + (52 + -51)\n        while ( i <= high_column and i < c and low_row >= (79 + -79) ) :\n            print ( mat [ low_row ] [ i ] , end = \" \" )\n            i += (95 + -94)\n        low_row -= (55 + -54)\n        i = low_row + (83 + -81)\n        while ( i <= high_row and i < r and high_column < c ) :\n            print ( mat [ i ] [ high_column ] , end = \" \" )\n            i += (58 + -57)\n        high_column += (20 + -19)\n        i = high_column - (46 + -44)\n        while ( i >= low_column and i >= (95 + -95) and high_row < r ) :\n            print ( mat [ high_row ] [ i ] , end = \" \" )\n            i -= (91 + -90)\n        high_row += (84 + -83)\n        i = high_row - (97 + -95)\n        while ( i > low_row and i >= (57 + -57) and low_column >= (51 + -51) ) :\n            print ( mat [ i ] [ low_column ] , end = \" \" )\n            i -= (26 + -25)\n        low_column -= (3 + -2)\n    print ( )", "id": "ConstantUnfoldding_sample_from_PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT_to_425", "old_id": "PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT"}
{"code": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( (56 + -55) + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = sys.maxsize\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans", "id": "ConstantUnfoldding_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_426", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def procal ( n ) :\n    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - (12 + -11) )", "id": "ConstantUnfoldding_sample_from_PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP_to_427", "old_id": "PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - (85 + -84) ] * n\n    for i in range ( n ) :\n        bestIdx = - (91 + -90)\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - (53 + -52) :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n        if bestIdx != - (94 + -93) :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for i in range ( n ) :\n        print ( i + (40 + -39) , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - (23 + -22) :\n            print ( allocation [ i ] + (46 + -45) )\n        else :\n            print ( \"Not Allocated\" )", "id": "ConstantUnfoldding_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_428", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def binaryToDecimal ( n ) :\n    num = n\n    dec_value = (88 + -88)\n    base1 = (9 + -8)\n    len1 = len ( num )\n    for i in range ( len1 - (10 + -9) , - (71 + -70) , - (73 + -72) ) :\n        if ( num [ i ] == '1' ) :\n            dec_value += base1\n        base1 = base1 * (3 + -1)\n    return dec_value", "id": "ConstantUnfoldding_sample_from_PROGRAM_BINARY_DECIMAL_CONVERSION_1_to_429", "old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1"}
{"code": "def areaOctagon ( side ) :\n    return ( (83 + -81) * ( (1 + 0) + ( math.sqrt ( (97 + -95) ) ) ) * side * side )", "id": "ConstantUnfoldding_sample_from_PROGRAM_CALCULATE_AREA_OCTAGON_to_430", "old_id": "PROGRAM_CALCULATE_AREA_OCTAGON"}
{"code": "def vol_of_octahedron ( side ) :\n    return ( ( side * side * side ) * ( math.sqrt ( (32 + -30) ) / (10 + -7) ) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_CALCULATE_VOLUME_OCTAHEDRON_to_431", "old_id": "PROGRAM_CALCULATE_VOLUME_OCTAHEDRON"}
{"code": "def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = (38 + -38)\n    index = (78 + -78)\n    for i in word_list :\n        if i == word :\n            word_list [ index ] = stars\n        index += (45 + -44)\n    result = ' '.join ( word_list )\n    return result", "id": "ConstantUnfoldding_sample_from_PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE_to_432", "old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE"}
{"code": "def arraySortedOrNot ( arr , n ) :\n    if ( n == (22 + -22) or n == (75 + -74) ) :\n        return True\n    for i in range ( (43 + -42) , n ) :\n        if ( arr [ i - (7 + -6) ] > arr [ i ] ) :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1_to_433", "old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != (19 + -9) :\n        return False\n    _sum = (29 + -29)\n    for i in range ( (43 + -34) ) :\n        if (44 + -44) <= int ( isbn [ i ] ) <= (1 + 8) :\n            _sum += int ( isbn [ i ] ) * ( (71 + -61) - i )\n        else :\n            return False\n    if ( isbn [ (72 + -63) ] != 'X' and (6 + -6) <= int ( isbn [ (43 + -34) ] ) <= (56 + -47) ) :\n        return False\n    _sum += (42 + -32) if isbn [ (89 + -80) ] == 'X' else int ( isbn [ (43 + -34) ] )\n    return ( _sum % (12 + -1) == (75 + -75) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_CHECK_ISBN_to_434", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def count ( s , c ) :\n    res = (76 + -76)\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == c ) :\n            res = res + (97 + -96)\n    return res", "id": "ConstantUnfoldding_sample_from_PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING_to_435", "old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING"}
{"code": "def decimalToBinary ( N ) :\n    B_Number = (17 + -17)\n    cnt = (62 + -62)\n    while ( N != (97 + -97) ) :\n        rem = N % (10 + -8)\n        c = pow ( (97 + -87) , cnt )\n        B_Number += rem * c\n        N //= (97 + -95)\n        cnt += (86 + -85)\n    return B_Number", "id": "ConstantUnfoldding_sample_from_PROGRAM_DECIMAL_BINARY_CONVERSION_2_to_436", "old_id": "PROGRAM_DECIMAL_BINARY_CONVERSION_2"}
{"code": "def distance ( lat1 , lat2 , lon1 , lon2 ) :\n    lon1 = radians ( lon1 )\n    lon2 = radians ( lon2 )\n    lat1 = radians ( lat1 )\n    lat2 = radians ( lat2 )\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin ( dlat / (59 + -57) ) ** (22 + -20) + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / (6 + -4) ) ** (80 + -78)\n    c = (85 + -83) * asin ( sqrt ( a ) )\n    r = (97 + 6274)\n    return ( c * r )", "id": "ConstantUnfoldding_sample_from_PROGRAM_DISTANCE_TWO_POINTS_EARTH_to_437", "old_id": "PROGRAM_DISTANCE_TWO_POINTS_EARTH"}
{"code": "def circumference ( r ) :\n    pi = 3.1415\n    return ( (12 + -10) * pi * r )", "id": "ConstantUnfoldding_sample_from_PROGRAM_FIND_CIRCUMFERENCE_CIRCLE_to_438", "old_id": "PROGRAM_FIND_CIRCUMFERENCE_CIRCLE"}
{"code": "def remainder ( str ) :\n    ln = len ( str )\n    rem = (11 + -11)\n    for i in range ( (93 + -93) , ln ) :\n        num = rem * (26 + -16) + ( int ) ( str [ i ] )\n        rem = num % (20 + -9)\n    return rem", "id": "ConstantUnfoldding_sample_from_PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11_to_439", "old_id": "PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11"}
{"code": "def findMinimumAngle ( arr , n ) :\n    l = (88 + -88)\n    _sum = (30 + -30)\n    ans = (32 + 328)\n    for i in range ( n ) :\n        _sum += arr [ i ]\n        while _sum >= (38 + 142) :\n            ans = min ( ans , (97 + -95) * abs ( (77 + 103) - _sum ) )\n            _sum -= arr [ l ]\n            l += (38 + -37)\n        ans = min ( ans , (44 + -42) * abs ( (20 + 160) - _sum ) )\n    return ans", "id": "ConstantUnfoldding_sample_from_PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE_to_440", "old_id": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE"}
{"code": "def Resources ( process , need ) :\n    minResources = (20 + -20)\n    minResources = process * ( need - (87 + -86) ) + (33 + -32)\n    return minResources", "id": "ConstantUnfoldding_sample_from_PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM_to_441", "old_id": "PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM"}
{"code": "def factorial ( n ) :\n    return (41 + -40) if ( n == (3 + -2) or n == (8 + -8) ) else n * factorial ( n - (57 + -56) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_to_442", "old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER"}
{"code": "def factorial ( n ) :\n    return (93 + -92) if ( n == (19 + -18) or n == (7 + -7) ) else n * factorial ( n - (52 + -51) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1_to_443", "old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1"}
{"code": "def surface_area_octahedron ( side ) :\n    return ( (69 + -67) * ( math.sqrt ( (4 + -1) ) ) * ( side * side ) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON_to_444", "old_id": "PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON"}
{"code": "def octalToDecimal ( n ) :\n    num = n\n    dec_value = (78 + -78)\n    base = (36 + -35)\n    temp = num\n    while ( temp ) :\n        last_digit = temp % (62 + -52)\n        temp = int ( temp / (75 + -65) )\n        dec_value += last_digit * base\n        base = base * (16 + -8)\n    return dec_value", "id": "ConstantUnfoldding_sample_from_PROGRAM_OCTAL_DECIMAL_CONVERSION_to_445", "old_id": "PROGRAM_OCTAL_DECIMAL_CONVERSION"}
{"code": "def isIdentity ( mat , N ) :\n    for row in range ( N ) :\n        for col in range ( N ) :\n            if ( row == col and mat [ row ] [ col ] != (13 + -12) ) :\n                return False\n            elif ( row != col and mat [ row ] [ col ] != (20 + -20) ) :\n                return False\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_446", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def summingSeries ( n ) :\n    return int ( math.pow ( n , (44 + -42) ) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1_to_447", "old_id": "PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1"}
{"code": "def isLucky ( n ) :\n    ar = [ (80 + -80) ] * (36 + -26)\n    while ( n > (86 + -86) ) :\n        digit = math.floor ( n % (86 + -76) )\n        if ( ar [ digit ] ) :\n            return False\n        ar [ digit ] = (34 + -33)\n        n = int ( n / (13 + -3) )\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT_to_448", "old_id": "PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT"}
{"code": "def findArea ( a ) :\n    area = ( sqrt ( (7 + -2) * ( (44 + -39) + (78 + -76) * ( sqrt ( (86 + -81) ) ) ) ) * a * a ) / (12 + -8)\n    return area", "id": "ConstantUnfoldding_sample_from_PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON_to_449", "old_id": "PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - (15 + -14) ] * n\n    for i in range ( n ) :\n        wstIdx = - (69 + -68)\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - (99 + -98) :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n        if wstIdx != - (45 + -44) :\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + (96 + -95) , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - (71 + -70) :\n            print ( allocation [ i ] + (82 + -81) )\n        else :\n            print ( \"Not Allocated\" )", "id": "ConstantUnfoldding_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_450", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def Circumference ( a ) :\n    return ( (55 + -51) * a )", "id": "ConstantUnfoldding_sample_from_PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_to_451", "old_id": "PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE"}
{"code": "def countInRange ( arr , n , x , y ) :\n    count = (100 + -100) ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += (18 + -17)\n    return count", "id": "ConstantUnfoldding_sample_from_QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE_to_452", "old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE"}
{"code": "def allCharactersSame ( s ) :\n    n = len ( s )\n    for i in range ( (48 + -47) , n ) :\n        if s [ i ] != s [ (67 + -67) ] :\n            return False\n    return True", "id": "ConstantUnfoldding_sample_from_QUICK_WAY_CHECK_CHARACTERS_STRING_to_453", "old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING"}
{"code": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = (1 + -1) , n - (59 + -58)\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= (56 + -55)\n        else :\n            temp [ i ] = arr [ small ]\n            small += (68 + -67)\n        flag = bool ( (77 + -76) - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr", "id": "ConstantUnfoldding_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_454", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = n - (19 + -18)\n    min_idx = (34 + -34)\n    max_elem = arr [ n - (8 + -7) ] + (61 + -60)\n    for i in range ( (22 + -22) , n ) :\n        if i % (99 + -97) == (9 + -9) :\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= (70 + -69)\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += (36 + -35)\n    for i in range ( (19 + -19) , n ) :\n        arr [ i ] = int ( arr [ i ] / max_elem )", "id": "ConstantUnfoldding_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_455", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def rearrange ( arr , n ) :\n    i = - (28 + -27)\n    for j in range ( n ) :\n        if ( arr [ j ] < (85 + -85) ) :\n            i += (20 + -19)\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n    pos , neg = i + (1 + 0) , (80 + -80)\n    while ( pos < n and neg < pos and arr [ neg ] < (19 + -19) ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += (66 + -65)\n        neg += (59 + -57)", "id": "ConstantUnfoldding_sample_from_REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH_to_456", "old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH"}
{"code": "def breakSum ( n ) :\n    if ( n == (49 + -49) or n == (24 + -23) ) :\n        return n\n    return max ( ( breakSum ( n // (65 + -63) ) + breakSum ( n // (52 + -49) ) + breakSum ( n // (47 + -43) ) ) , n )", "id": "ConstantUnfoldding_sample_from_RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_to_457", "old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM"}
{"code": "def breakSum ( n ) :\n    dp = [ (22 + -22) ] * ( n + (13 + -12) )\n    dp [ (64 + -64) ] = (71 + -71)\n    dp [ (5 + -4) ] = (3 + -2)\n    for i in range ( (52 + -50) , n + (85 + -84) ) :\n        dp [ i ] = max ( dp [ int ( i / (79 + -77) ) ] + dp [ int ( i / (38 + -35) ) ] + dp [ int ( i / (82 + -78) ) ] , i )\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1_to_458", "old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1"}
{"code": "def recSearch ( arr , l , r , x ) :\n    if r < l :\n        return - (89 + -88)\n    if arr [ l ] == x :\n        return l\n    if arr [ r ] == x :\n        return r\n    return recSearch ( arr , l + (83 + -82) , r - (16 + -15) , x )", "id": "ConstantUnfoldding_sample_from_RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY_to_459", "old_id": "RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY"}
{"code": "def insertionSortRecursive ( arr , n ) :\n    if n <= (24 + -23) :\n        return\n    insertionSortRecursive ( arr , n - (35 + -34) )\n    last = arr [ n - (95 + -94) ]\n    j = n - (12 + -10)\n    while ( j >= (93 + -93) and arr [ j ] > last ) :\n        arr [ j + (1 + 0) ] = arr [ j ]\n        j = j - (10 + -9)\n    arr [ j + (42 + -41) ] = last", "id": "ConstantUnfoldding_sample_from_RECURSIVE_INSERTION_SORT_to_460", "old_id": "RECURSIVE_INSERTION_SORT"}
{"code": "def isPrime ( n , i ) :\n    if ( n <= (52 + -50) ) :\n        return True if ( n == (7 + -5) ) else False\n    if ( n % i == (87 + -87) ) :\n        return False\n    if ( i * i > n ) :\n        return true\n    return isPrime ( n , i + (86 + -85) )", "id": "ConstantUnfoldding_sample_from_RECURSIVE_PROGRAM_PRIME_NUMBER_to_461", "old_id": "RECURSIVE_PROGRAM_PRIME_NUMBER"}
{"code": "def remainderWith7 ( num ) :\n    series = [ (36 + -35) , (33 + -30) , (20 + -18) , - (49 + -48) , - (12 + -9) , - (72 + -70) ]\n    series_index = (61 + -61)\n    result = (39 + -39)\n    for i in range ( ( len ( num ) - (64 + -63) ) , - (19 + -18) , - (28 + -27) ) :\n        digit = ord ( num [ i ] ) - (97 + -49)\n        result += digit * series [ series_index ]\n        series_index = ( series_index + (66 + -65) ) % (26 + -20)\n        result %= (85 + -78)\n    if ( result < (78 + -78) ) :\n        result = ( result + (84 + -77) ) % (42 + -35)\n    return result", "id": "ConstantUnfoldding_sample_from_REMAINDER_7_LARGE_NUMBERS_to_462", "old_id": "REMAINDER_7_LARGE_NUMBERS"}
{"code": "def solve ( dp , a , low , high , turn ) :\n    if ( low == high ) :\n        return a [ low ] * turn\n    if ( dp [ low ] [ high ] != (27 + -27) ) :\n        return dp [ low ] [ high ]\n    dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp , a , low + (45 + -44) , high , turn + (88 + -87) ) , a [ high ] * turn + solve ( dp , a , low , high - (100 + -99) , turn + (54 + -53) ) ) ;\n    return dp [ low ] [ high ]", "id": "ConstantUnfoldding_sample_from_REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT_to_463", "old_id": "REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT"}
{"code": "def simplify ( Str ) :\n    Len = len ( Str )\n    res = [ None ] * Len\n    index = (86 + -86)\n    i = (83 + -83)\n    s = [ ]\n    s.append ( (88 + -88) )\n    while ( i < Len ) :\n        if ( Str [ i ] == '+' ) :\n            if ( s [ - (15 + -14) ] == (59 + -58) ) :\n                res [ index ] = '-'\n                index += (61 + -60)\n            if ( s [ - (86 + -85) ] == (27 + -27) ) :\n                res [ index ] = '+'\n                index += (30 + -29)\n        elif ( Str [ i ] == '-' ) :\n            if ( s [ - (94 + -93) ] == (66 + -65) ) :\n                res [ index ] = '+'\n                index += (18 + -17)\n            elif ( s [ - (48 + -47) ] == (88 + -88) ) :\n                res [ index ] = '-'\n                index += (88 + -87)\n        elif ( Str [ i ] == '(' and i > (58 + -58) ) :\n            if ( Str [ i - (30 + -29) ] == '-' ) :\n                x = (64 + -64) if ( s [ - (6 + -5) ] == (93 + -92) ) else (46 + -45)\n                s.append ( x )\n            elif ( Str [ i - (76 + -75) ] == '+' ) :\n                s.append ( s [ - (71 + -70) ] )\n        elif ( Str [ i ] == ')' ) :\n            s.pop ( )\n        else :\n            res [ index ] = Str [ i ]\n            index += (65 + -64)\n        i += (70 + -69)\n    return \"\".join(res)", "id": "ConstantUnfoldding_sample_from_REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS_to_464", "old_id": "REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS"}
{"code": "def removeDuplicates ( S ) :\n    n = len ( S )\n    if ( n < (95 + -93) ) :\n        return\n    j = (8 + -8)\n    for i in range ( (36 + -35) , n ) :\n        if ( S [ j ] != S [ i ] ) :\n            j += (44 + -43)\n            S [ j ] = S [ i ]\n    j += (40 + -39)\n    S = S [ : j ]", "id": "ConstantUnfoldding_sample_from_REMOVE_CONSECUTIVE_DUPLICATES_STRING_to_465", "old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING"}
{"code": "def minRemovalsDP ( arr , n ) :\n    longest_start = - (64 + -63)\n    longest_end = (65 + -65)\n    for start in range ( n ) :\n        min = sys.maxsize\n        max = - sys.maxsize\n        for end in range ( start , n ) :\n            val = arr [ end ]\n            if ( val < min ) :\n                min = val\n            if ( val > max ) :\n                max = val\n            if ( (75 + -73) * min <= max ) :\n                break\n            if ( end - start > longest_end - longest_start or longest_start == - (47 + -46) ) :\n                longest_start = start\n                longest_end = end\n    if ( longest_start == - (81 + -80) ) :\n        return n\n    return ( n - ( longest_end - longest_start + (86 + -85) ) )", "id": "ConstantUnfoldding_sample_from_REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX_to_466", "old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ (68 + -68) : i ] + c2 + s [ i + (20 + -19) : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ (20 + -20) : i ] + c1 + s [ i + (82 + -81) : ]\n    return s", "id": "ConstantUnfoldding_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_467", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def countCommon ( mat , n ) :\n    res = (37 + -37)\n    for i in range ( n ) :\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - (77 + -76) ] :\n            res = res + (61 + -60)\n    return res", "id": "ConstantUnfoldding_sample_from_ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX_to_468", "old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX"}
{"code": "def search ( arr , n , x , k ) :\n    i = (71 + -71)\n    while ( i < n ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i = i + max ( (43 + -42) , int ( abs ( arr [ i ] - x ) / k ) )\n    print ( \"number is not present!\" )\n    return - (23 + -22)", "id": "ConstantUnfoldding_sample_from_SEARCHING_ARRAY_ADJACENT_DIFFER_K_to_469", "old_id": "SEARCHING_ARRAY_ADJACENT_DIFFER_K"}
{"code": "def binarySearch ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / (48 + -46) )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - (25 + -24) ] == x ) :\n            return ( mid - (5 + -4) )\n        if ( mid < r and arr [ mid + (46 + -45) ] == x ) :\n            return ( mid + (76 + -75) )\n        if ( arr [ mid ] > x ) :\n            return binarySearch ( arr , l , mid - (68 + -66) , x )\n        return binarySearch ( arr , mid + (74 + -72) , r , x )\n    return - (83 + -82)", "id": "ConstantUnfoldding_sample_from_SEARCH_ALMOST_SORTED_ARRAY_to_470", "old_id": "SEARCH_ALMOST_SORTED_ARRAY"}
{"code": "def search ( arr , n , x ) :\n    i = (18 + -18)\n    while ( i < n ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i = i + abs ( arr [ i ] - x )\n    print ( \"number is not present!\" )\n    return - (89 + -88)", "id": "ConstantUnfoldding_sample_from_SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1_to_471", "old_id": "SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1"}
{"code": "def search ( arr , l , h , key ) :\n    if l > h :\n        return - (15 + -14)\n    mid = ( l + h ) // (81 + -79)\n    if arr [ mid ] == key :\n        return mid\n    if arr [ l ] <= arr [ mid ] :\n        if key >= arr [ l ] and key <= arr [ mid ] :\n            return search ( arr , l , mid - (61 + -60) , key )\n        return search ( arr , mid + (27 + -26) , h , key )\n    if key >= arr [ mid ] and key <= arr [ h ] :\n        return search ( arr , mid + (1 + 0) , h , key )\n    return search ( arr , l , mid - (15 + -14) , key )", "id": "ConstantUnfoldding_sample_from_SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY_to_472", "old_id": "SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY"}
{"code": "def binarySearch ( arr , low , high , key ) :\n    if ( high < low ) :\n        return - (84 + -83)\n    mid = ( low + high ) / (89 + -87)\n    if ( key == arr [ int ( mid ) ] ) :\n        return mid\n    if ( key > arr [ int ( mid ) ] ) :\n        return binarySearch ( arr , ( mid + (82 + -81) ) , high , key )\n    return ( binarySearch ( arr , low , ( mid - (77 + -76) ) , key ) )", "id": "ConstantUnfoldding_sample_from_SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_to_473", "old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY"}
{"code": "def insertSorted ( arr , n , key , capacity ) :\n    if ( n >= capacity ) :\n        return n\n    i = n - (39 + -38)\n    while i >= (67 + -67) and arr [ i ] > key :\n        arr [ i + (44 + -43) ] = arr [ i ]\n        i -= (18 + -17)\n    arr [ i + (76 + -75) ] = key\n    return ( n + (79 + -78) )", "id": "ConstantUnfoldding_sample_from_SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1_to_474", "old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1"}
{"code": "def arrayEvenAndOdd ( arr , n ) :\n    i = - (34 + -33)\n    j = (79 + -79)\n    while ( j != n ) :\n        if ( arr [ j ] % (5 + -3) == (59 + -59) ) :\n            i = i + (41 + -40)\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + (67 + -66)\n    for i in arr :\n        print ( str ( i ) + \" \" , end = '' )", "id": "ConstantUnfoldding_sample_from_SEGREGATE_EVEN_ODD_NUMBERS_SET_3_to_475", "old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3"}
{"code": "def selectRandom ( x ) :\n    res = (76 + -76)\n    count = (93 + -93)\n    count += (15 + -14)\n    if ( count == (25 + -24) ) :\n        res = x\n    else :\n        i = random.randrange ( count )\n        if ( i == count - (89 + -88) ) :\n            res = x\n    return res", "id": "ConstantUnfoldding_sample_from_SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE_to_476", "old_id": "SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = [ [ (8 + -8) for i in range ( n + (28 + -27) ) ] for i in range ( m + (33 + -32) ) ]\n    for i in range ( m + (34 + -33) ) :\n        for j in range ( n + (34 + -33) ) :\n            if i == (25 + -25) or j == (12 + -12) :\n                T [ i ] [ j ] = (43 + -43)\n            elif i < j :\n                T [ i ] [ j ] = (91 + -91)\n            elif j == (62 + -61) :\n                T [ i ] [ j ] = i\n            else :\n                T [ i ] [ j ] = T [ i - (73 + -72) ] [ j ] + T [ i // (51 + -49) ] [ j - (90 + -89) ]\n    return T [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_477", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def randomize ( arr , n ) :\n    for i in range ( n - (12 + -11) , (50 + -50) , - (21 + -20) ) :\n        j = random.randint ( (88 + -88) , i + (44 + -43) )\n        arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n    return arr", "id": "ConstantUnfoldding_sample_from_SHUFFLE_A_GIVEN_ARRAY_to_478", "old_id": "SHUFFLE_A_GIVEN_ARRAY"}
{"code": "def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - (95 + -94)\n    max_ending_here = (28 + -28)\n    start = (47 + -47)\n    end = (88 + -88)\n    s = (85 + -85)\n    for i in range ( (12 + -12) , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < (93 + -93) :\n            max_ending_here = (44 + -44)\n            s = i + (24 + -23)\n    return ( end - start + (51 + -50) )", "id": "ConstantUnfoldding_sample_from_SIZE_SUBARRAY_MAXIMUM_SUM_to_479", "old_id": "SIZE_SUBARRAY_MAXIMUM_SUM"}
{"code": "def findSmallestDifference ( A , B , m , n ) :\n    A = A [ : m ]\n    B = B [ : n ]\n    A.sort ( )\n    B.sort ( )\n    a = (59 + -59)\n    b = (1 + -1)\n    result = sys.maxsize\n    while ( a < m and b < n ) :\n        if ( abs ( A [ a ] - B [ b ] ) < result ) :\n            result = abs ( A [ a ] - B [ b ] )\n        if ( A [ a ] < B [ b ] ) :\n            a += (43 + -42)\n        else :\n            b += (32 + -31)\n    return result", "id": "ConstantUnfoldding_sample_from_SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS_to_480", "old_id": "SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS"}
{"code": "def smallest ( x , y , z ) :\n    c = (34 + -34)\n    while ( x and y and z ) :\n        x = x - (82 + -81)\n        y = y - (93 + -92)\n        z = z - (85 + -84)\n        c = c + (86 + -85)\n    return c", "id": "ConstantUnfoldding_sample_from_SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_to_481", "old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS"}
{"code": "def nextPowerOf2 ( n ) :\n    p = (52 + -51)\n    if ( n and not ( n & ( n - (98 + -97) ) ) ) :\n        return n\n    while ( p < n ) :\n        p <<= (96 + -95)\n    return p", "id": "ConstantUnfoldding_sample_from_SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1_to_482", "old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1"}
{"code": "def nextPowerOf2 ( n ) :\n    n -= (10 + -9)\n    n |= n >> (22 + -21)\n    n |= n >> (50 + -48)\n    n |= n >> (46 + -42)\n    n |= n >> (12 + -4)\n    n |= n >> (3 + 13)\n    n += (76 + -75)\n    return n", "id": "ConstantUnfoldding_sample_from_SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2_to_483", "old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2"}
{"code": "def sort012 ( a , arr_size ) :\n    lo = (64 + -64)\n    hi = arr_size - (30 + -29)\n    mid = (9 + -9)\n    while mid <= hi :\n        if a [ mid ] == (4 + -4) :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + (54 + -53)\n            mid = mid + (1 + 0)\n        elif a [ mid ] == (11 + -10) :\n            mid = mid + (76 + -75)\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - (82 + -81)", "id": "ConstantUnfoldding_sample_from_SORT_AN_ARRAY_OF_0S_1S_AND_2S_to_484", "old_id": "SORT_AN_ARRAY_OF_0S_1S_AND_2S"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    for i in range ( n ) :\n        arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n    index = - ( sys.maxsize - (55 + -54) )\n    maximum = - ( sys.maxsize - (91 + -90) )\n    for i in range ( n ) :\n        if maximum < arr [ i ] :\n            index = i\n            maximum = arr [ i ]\n    i = (55 + -55)\n    j = n - (76 + -75)\n    new_arr = [ (64 + -64) ] * n\n    k = (49 + -49)\n    while i < index and j > index :\n        if arr [ i ] < arr [ j ] :\n            new_arr [ k ] = arr [ i ]\n            k += (44 + -43)\n            i += (78 + -77)\n        else :\n            new_arr [ k ] = arr [ j ]\n            k += (49 + -48)\n            j -= (68 + -67)\n    while i < index :\n        new_arr [ k ] = arr [ i ]\n        k += (52 + -51)\n        i += (100 + -99)\n    while j > index :\n        new_arr [ k ] = arr [ j ]\n        k += (92 + -91)\n        j -= (79 + -78)\n        new_arr [ n - (32 + -31) ] = maximum\n    for i in range ( n ) :\n        arr [ i ] = new_arr [ i ]", "id": "ConstantUnfoldding_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_485", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def sortit ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = i + (91 + -90)", "id": "ConstantUnfoldding_sample_from_SORT_ARRAY_CONTAIN_1_N_VALUES_to_486", "old_id": "SORT_ARRAY_CONTAIN_1_N_VALUES"}
{"code": "def sortInWave ( arr , n ) :\n    for i in range ( (35 + -35) , n , (3 + -1) ) :\n        if ( i > (72 + -72) and arr [ i ] < arr [ i - (77 + -76) ] ) :\n            arr [ i ] , arr [ i - (40 + -39) ] = arr [ i - (73 + -72) ] , arr [ i ]\n        if ( i < n - (11 + -10) and arr [ i ] < arr [ i + (78 + -77) ] ) :\n            arr [ i ] , arr [ i + (41 + -40) ] = arr [ i + (88 + -87) ] , arr [ i ]", "id": "ConstantUnfoldding_sample_from_SORT_ARRAY_WAVE_FORM_2_1_to_487", "old_id": "SORT_ARRAY_WAVE_FORM_2_1"}
{"code": "def twoWaySort ( arr , n ) :\n    for i in range ( (42 + -42) , n ) :\n        if ( arr [ i ] & (36 + -35) ) :\n            arr [ i ] *= - (24 + -23)\n    arr.sort ( )\n    for i in range ( (99 + -99) , n ) :\n        if ( arr [ i ] & (7 + -6) ) :\n            arr [ i ] *= - (82 + -81)", "id": "ConstantUnfoldding_sample_from_SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1_to_488", "old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    for i in range ( n ) :\n        if ( ( i % (14 + -12) ) == (71 + -71) ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - (74 + -73) ]\n    i = (3 + -3)\n    for j in range ( len ( evenArr ) ) :\n        arr [ i ] = evenArr [ j ]\n        i += (36 + -35)\n    for j in range ( len ( oddArr ) ) :\n        arr [ i ] = oddArr [ j ]\n        i += (48 + -47)", "id": "ConstantUnfoldding_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_489", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def KnapSack ( val , wt , n , W ) :\n    mat = [ [ (30 + -30) for i in range ( W + (41 + -40) ) ] for i in range ( (15 + -13) ) ]\n    i = (61 + -61)\n    while i < n :\n        j = (96 + -96)\n        if i % (29 + -27) == (48 + -48) :\n            while j < W :\n                j += (17 + -16)\n                if wt [ i ] <= j and j - wt [ i ] < W:\n                    mat [ (67 + -66) ] [ j ] = max ( val [ i ] + mat [ (64 + -64) ] [ j - wt [ i ] ] , mat [ (66 + -66) ] [ j ] )\n                else :\n                    mat [ (44 + -43) ] [ j ] = mat [ (17 + -17) ] [ j ]\n        else :\n            while j < W :\n                j += (64 + -63)\n                if wt [ i ] <= j and j - wt [ i ] < W:\n                    mat [ (94 + -94) ] [ j ] = max ( val [ i ] + mat [ (40 + -39) ] [ j - wt [ i ] ] , mat [ (56 + -55) ] [ j ] )\n                else :\n                    mat [ (61 + -61) ] [ j ] = mat [ (78 + -77) ] [ j ]\n        i += (49 + -48)\n    if n % (6 + -4) == (60 + -60) :\n        return mat [ (85 + -85) ] [ W ]\n    else :\n        return mat [ (52 + -51) ] [ W ]", "id": "ConstantUnfoldding_sample_from_SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_to_490", "old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM"}
{"code": "def KnapSack ( val , wt , n , W ) :\n    dp = [ (89 + -89) ] * ( W + (93 + -92) )\n    for i in range ( n ) :\n        for j in range ( W , -(62 + -61) , - (15 + -14) ) :\n            if j - wt [ i ] < W + (63 + -62) and j - wt [ i ] >= (72 + -72):\n                dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] )\n    return dp [ W ]", "id": "ConstantUnfoldding_sample_from_SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1_to_491", "old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1"}
{"code": "def splitArr ( arr , n , k ) :\n    for i in range ( (56 + -56) , k ) :\n        x = arr [ (66 + -66) ]\n        for j in range ( (6 + -6) , n - (94 + -93) ) :\n            arr [ j ] = arr [ j + (35 + -34) ]\n        arr [ n - (59 + -58) ] = x", "id": "ConstantUnfoldding_sample_from_SPLIT_ARRAY_ADD_FIRST_PART_END_to_492", "old_id": "SPLIT_ARRAY_ADD_FIRST_PART_END"}
{"code": "def findS ( s ) :\n    _sum = (96 + -96)\n    n = (80 + -79)\n    while ( _sum < s ) :\n        _sum += n * n * n\n        n += (59 + -58)\n    n -= (1 + 0)\n    if _sum == s :\n        return n\n    return - (61 + -60)", "id": "ConstantUnfoldding_sample_from_SQUARED_TRIANGULAR_NUMBER_SUM_CUBES_to_493", "old_id": "SQUARED_TRIANGULAR_NUMBER_SUM_CUBES"}
{"code": "def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( (54 + -54) , row ) :\n        for j in range ( (51 + -51) , column ) :\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( (95 + -95) , row ) :\n        for j in range ( (74 + -74) , column ) :\n            if ( i + j == column - (66 + -65) ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )", "id": "ConstantUnfoldding_sample_from_SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_to_494", "old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS"}
{"code": "def findS ( s ) :\n    _sum = (56 + -56)\n    n = (81 + -80)\n    while ( _sum < s ) :\n        _sum += n * n\n        n += (6 + -5)\n    n -= (87 + -86)\n    if _sum == s :\n        return n\n    return - (98 + -97)", "id": "ConstantUnfoldding_sample_from_SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES_to_495", "old_id": "SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES"}
{"code": "def floorSqrt ( x ) :\n    if ( x == (72 + -72) or x == (23 + -22) ) :\n        return x\n    i = (39 + -38)\n    result = (20 + -19)\n    while ( result <= x ) :\n        i += (15 + -14)\n        result = i * i\n    return i - (1 + 0)", "id": "ConstantUnfoldding_sample_from_SQUARE_ROOT_OF_AN_INTEGER_to_496", "old_id": "SQUARE_ROOT_OF_AN_INTEGER"}
{"code": "def squareRoot ( n ) :\n    x = n\n    y = (92 + -91)\n    e = 0.000001\n    while ( x - y > e ) :\n        x = ( x + y ) / (18 + -16)\n        y = n / x\n    return x", "id": "ConstantUnfoldding_sample_from_SQUARE_ROOT_OF_A_PERFECT_SQUARE_to_497", "old_id": "SQUARE_ROOT_OF_A_PERFECT_SQUARE"}
{"code": "def reverse ( string ) :\n    string = string [ : : - (87 + -86) ]\n    return string", "id": "ConstantUnfoldding_sample_from_STACK_SET_3_REVERSE_STRING_USING_STACK_to_498", "old_id": "STACK_SET_3_REVERSE_STRING_USING_STACK"}
{"code": "def gcd ( a , b ) :\n    if ( a == (38 + -38) ) :\n        return b\n    if ( b == (40 + -40) ) :\n        return a\n    k = (86 + -86)\n    while ( ( ( a | b ) & (83 + -82) ) == (96 + -96) ) :\n        a = a >> (71 + -70)\n        b = b >> (81 + -80)\n        k = k + (56 + -55)\n    while ( ( a & (89 + -88) ) == (62 + -62) ) :\n        a = a >> (5 + -4)\n    while ( b != (7 + -7) ) :\n        while ( ( b & (22 + -21) ) == (19 + -19) ) :\n            b = b >> (12 + -11)\n        if ( a > b ) :\n            temp = a\n            a = b\n            b = temp\n        b = ( b - a )\n    return ( a << k )", "id": "ConstantUnfoldding_sample_from_STEINS_ALGORITHM_FOR_FINDING_GCD_to_499", "old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD"}
{"code": "def gcd ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == (76 + -76) ) :\n        return b\n    if ( b == (60 + -60) ) :\n        return a\n    if ( ( ~ a & (30 + -29) ) == (23 + -22) ) :\n        if ( ( b & (23 + -22) ) == (16 + -15) ) :\n            return gcd ( a >> (32 + -31) , b )\n        else :\n            return ( gcd ( a >> (94 + -93) , b >> (45 + -44) ) << (62 + -61) )\n    if ( ( ~ b & (48 + -47) ) == (97 + -96) ) :\n        return gcd ( a , b >> (73 + -72) )\n    if ( a > b ) :\n        return gcd ( ( a - b ) >> (91 + -90) , b )\n    return gcd ( ( b - a ) >> (67 + -66) , a )", "id": "ConstantUnfoldding_sample_from_STEINS_ALGORITHM_FOR_FINDING_GCD_1_to_500", "old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD_1"}
{"code": "def stoogesort ( arr , l , h ) :\n    if l >= h :\n        return\n    if arr [ l ] > arr [ h ] :\n        t = arr [ l ]\n        arr [ l ] = arr [ h ]\n        arr [ h ] = t\n    if h - l + (96 + -95) > (43 + -41) :\n        t = ( int ) ( ( h - l + (88 + -87) ) / (51 + -48) )\n        stoogesort ( arr , l , ( h - t ) )\n        stoogesort ( arr , l + t , ( h ) )\n        stoogesort ( arr , l , ( h - t ) )", "id": "ConstantUnfoldding_sample_from_STOOGE_SORT_to_501", "old_id": "STOOGE_SORT"}
{"code": "def sumoflength ( arr , n ) :\n    s = [ ]\n    j = (44 + -44)\n    ans = (4 + -4)\n    for i in range ( n ) :\n        while ( j < n and ( arr [ j ] not in s ) ) :\n            s.append ( arr [ j ] )\n            j += (87 + -86)\n        ans += ( ( j - i ) * ( j - i + (50 + -49) ) ) // (56 + -54)\n        s.remove ( arr [ i ] )\n    return ans", "id": "ConstantUnfoldding_sample_from_SUBARRAYS_DISTINCT_ELEMENTS_to_502", "old_id": "SUBARRAYS_DISTINCT_ELEMENTS"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = [ [ False for j in range ( sum + (56 + -55) ) ] for i in range ( (56 + -53) ) ]\n    for i in range ( n + (30 + -29) ) :\n        for j in range ( sum + (55 + -54) ) :\n            if ( j == (82 + -82) ) :\n                subset [ i % (31 + -29) ] [ j ] = True\n            elif ( i == (24 + -24) ) :\n                subset [ i % (14 + -12) ] [ j ] = False\n            elif ( arr [ i - (43 + -42) ] <= j ) :\n                subset [ i % (2 + 0) ] [ j ] = subset [ ( i + (70 + -69) ) % (51 + -49) ] [ j - arr [ i - (3 + -2) ] ] or subset [ ( i + (69 + -68) ) % (42 + -40) ] [ j ]\n            else :\n                subset [ i % (67 + -65) ] [ j ] = subset [ ( i + (66 + -65) ) % (52 + -50) ] [ j ]\n    return subset [ n % (33 + -31) ] [ sum ]", "id": "ConstantUnfoldding_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_503", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def MaxTotalRectangleArea ( a , n ) :\n    a = a [ : n ]\n    a.sort (  )\n    sum = (55 + -55)\n    flag = False\n    len = (2 + -2)\n    i = (75 + -75)\n    while ( i < n - (85 + -84) ) :\n        if ( ( a [ i ] == a [ i + (45 + -44) ] or a [ i ] - a [ i + (69 + -68) ] == (1 + 0) ) and flag == False ) :\n            flag = True\n            len = a [ i + (3 + -2) ]\n            i = i + (59 + -58)\n        elif ( ( a [ i ] == a [ i + (38 + -37) ] or a [ i ] - a [ i + (49 + -48) ] == (95 + -94) ) and flag == True ) :\n            sum = sum + a [ i + (23 + -22) ] * len\n            flag = False\n            i = i + (91 + -90)\n        i += (28 + -27)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_AREA_RECTANGLES_POSSIBLE_ARRAY_to_504", "old_id": "SUM_AREA_RECTANGLES_POSSIBLE_ARRAY"}
{"code": "def binomialCoeffSum ( n ) :\n    C = [ [ (6 + -6) ] * ( n + (38 + -36) ) for i in range ( (11 + -11) , n + (92 + -90) ) ]\n    for i in range ( (86 + -86) , n + (24 + -23) ) :\n        for j in range ( (20 + -20) , min ( i , n ) + (66 + -65) ) :\n            if ( j == (76 + -76) or j == i ) :\n                C [ i ] [ j ] = (23 + -22)\n            else :\n                C [ i ] [ j ] = C [ i - (44 + -43) ] [ j - (43 + -42) ] + C [ i - (42 + -41) ] [ j ]\n    sum = (89 + -89)\n    for i in range ( (51 + -51) , n + (82 + -81) ) :\n        sum += C [ n ] [ i ]\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_505", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def binomialCoeffSum ( n ) :\n    return ( (24 + -23) << n )", "id": "ConstantUnfoldding_sample_from_SUM_BINOMIAL_COEFFICIENTS_1_to_506", "old_id": "SUM_BINOMIAL_COEFFICIENTS_1"}
{"code": "def divisorSum ( n ) :\n    sum = (2 + -2)\n    for i in range ( (81 + -80) , n + (21 + -20) ) :\n        sum += int ( n / i ) * i\n    return int ( sum )", "id": "ConstantUnfoldding_sample_from_SUM_DIVISORS_1_N_1_to_507", "old_id": "SUM_DIVISORS_1_N_1"}
{"code": "def divSum ( n ) :\n    result = (7 + -7)\n    for i in range ( (69 + -67) , ( int ) ( math.sqrt ( n ) ) + (96 + -95) ) :\n        if ( n % i == (44 + -44) ) :\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n    return ( result + n + (69 + -68) )", "id": "ConstantUnfoldding_sample_from_SUM_FACTORS_NUMBER_to_508", "old_id": "SUM_FACTORS_NUMBER"}
{"code": "def calculateSum ( n ) :\n    if ( n <= (50 + -50) ) :\n        return (73 + -73)\n    fibo = [ (81 + -81) ] * ( n + (15 + -14) )\n    fibo [ (29 + -28) ] = (22 + -21)\n    sm = fibo [ (94 + -94) ] + fibo [ (34 + -33) ]\n    for i in range ( (5 + -3) , n + (99 + -98) ) :\n        fibo [ i ] = fibo [ i - (60 + -59) ] + fibo [ i - (15 + -13) ]\n        sm = sm + fibo [ i ]\n    return sm", "id": "ConstantUnfoldding_sample_from_SUM_FIBONACCI_NUMBERS_to_509", "old_id": "SUM_FIBONACCI_NUMBERS"}
{"code": "def kthgroupsum ( k ) :\n    cur = int ( ( k * ( k - (32 + -31) ) ) + (69 + -68) )\n    sum = (32 + -32)\n    while k :\n        sum += cur\n        cur += (24 + -22)\n        k = k - (4 + -3)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_to_510", "old_id": "SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS"}
{"code": "def distancesum ( x , y , n ) :\n    sum = (87 + -87)\n    for i in range ( n ) :\n        for j in range ( i + (4 + -3) , n ) :\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_MANHATTAN_DISTANCES_PAIRS_POINTS_to_511", "old_id": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS"}
{"code": "def findSum ( n ) :\n    arr = [ [ (39 + -39) for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( n ) :\n            arr [ i ] [ j ] = abs ( i - j )\n    sum = (90 + -90)\n    for i in range ( n ) :\n        for j in range ( n ) :\n            sum += arr [ i ] [ j ]\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_to_512", "old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS"}
{"code": "def findSum ( n ) :\n    n -= (48 + -47)\n    sum = (97 + -97)\n    sum += ( n * ( n + (65 + -64) ) ) / (38 + -36)\n    sum += ( n * ( n + (6 + -5) ) * ( (87 + -85) * n + (83 + -82) ) ) / (78 + -72)\n    return int ( sum )", "id": "ConstantUnfoldding_sample_from_SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2_to_513", "old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2"}
{"code": "def findSum ( n ) :\n    ans = (31 + -31)\n    temp = (85 + -85)\n    for i in range ( (97 + -96) , n + (9 + -8) ) :\n        if temp < n :\n            temp = i - (5 + -4)\n            num = (34 + -33)\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += (86 + -85)\n    return ans", "id": "ConstantUnfoldding_sample_from_SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1_to_514", "old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1"}
{"code": "def middlesum ( mat , n ) :\n    row_sum = (39 + -39)\n    col_sum = (56 + -56)\n    for i in range ( n ) :\n        row_sum += mat [ n // (66 + -64) ] [ i ]\n    print ( \"Sum of middle row = \" , row_sum )\n    for i in range ( n ) :\n        col_sum += mat [ i ] [ n // (55 + -53) ]\n    print ( \"Sum of middle column = \" , col_sum )", "id": "ConstantUnfoldding_sample_from_SUM_MIDDLE_ROW_COLUMN_MATRIX_to_515", "old_id": "SUM_MIDDLE_ROW_COLUMN_MATRIX"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = - (85 + -84)\n    sum = (77 + -77)\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += (6 + -5)\n        elif ( tree [ i ] == ')' ) :\n            level -= (91 + -90)\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_516", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def calculateSum ( n ) :\n    sum = (28 + -28)\n    sum = (30 + -29) << n\n    return ( sum - (53 + -52) )", "id": "ConstantUnfoldding_sample_from_SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1_to_517", "old_id": "SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1"}
{"code": "def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( ord ( num [ (28 + -28) ] ) - ord('0') )\n    res = sumofdigit [ (85 + -85) ]\n    for i in range ( (39 + -38) , n ) :\n        numi = ord ( num [ i ] ) - ord ( '0' )\n        sumofdigit.append ( ( i + (17 + -16) ) + numi + (24 + -14) + sumofdigit [ i - (20 + -19) ] )\n        res += sumofdigit [ i ]\n    return res", "id": "ConstantUnfoldding_sample_from_SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER_to_518", "old_id": "SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER"}
{"code": "def findSum ( n ) :\n    sm = (11 + -11)\n    for i in range ( (3 + -2) , n + (72 + -71) ) :\n        for j in range ( i , n + (20 + -19) ) :\n            sm = sm + i * j\n    return sm", "id": "ConstantUnfoldding_sample_from_SUM_PAIRWISE_PRODUCTS_to_519", "old_id": "SUM_PAIRWISE_PRODUCTS"}
{"code": "def findSum ( n ) :\n    multiTerms = n * ( n + (56 + -55) ) // (63 + -61)\n    sm = multiTerms\n    for i in range ( (59 + -57) , n + (84 + -83) ) :\n        multiTerms = multiTerms - ( i - (72 + -71) )\n        sm = sm + multiTerms * i\n    return sm", "id": "ConstantUnfoldding_sample_from_SUM_PAIRWISE_PRODUCTS_1_to_520", "old_id": "SUM_PAIRWISE_PRODUCTS_1"}
{"code": "def findSum ( n ) :\n    return n * ( n + (77 + -76) ) * ( n + (89 + -87) ) * ( (19 + -16) * n + (65 + -64) ) / (13 + 11)", "id": "ConstantUnfoldding_sample_from_SUM_PAIRWISE_PRODUCTS_2_to_521", "old_id": "SUM_PAIRWISE_PRODUCTS_2"}
{"code": "def sumOfSeries ( n ) :\n    return ( ( 0.666 ) * ( (42 + -41) - (2 + -1) / pow ( (89 + -79) , n ) ) )", "id": "ConstantUnfoldding_sample_from_SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS_to_522", "old_id": "SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS"}
{"code": "def sumOfSeries ( n ) :\n    sum = (51 + -51)\n    for i in range ( (14 + -13) , n + (83 + -82) ) :\n        sum = sum + ( (76 + -74) * i - (17 + -16) ) * ( (29 + -27) * i - (27 + -26) )\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_SERIES_12_32_52_2N_12_to_523", "old_id": "SUM_SERIES_12_32_52_2N_12"}
{"code": "def seriesSum ( n ) :\n    i = (88 + -87)\n    res = 0.0\n    sign = True\n    while ( n > (51 + -51) ) :\n        n = n - (33 + -32)\n        if ( sign ) :\n            sign = False\n            res = res + ( i + (8 + -7) ) / ( i + (49 + -47) )\n            i = i + (48 + -46)\n        else :\n            sign = True\n            res = res - ( i + (30 + -29) ) / ( i + (64 + -62) )\n            i = i + (52 + -50)\n    return res", "id": "ConstantUnfoldding_sample_from_SUM_SERIES_23_45_67_89_UPTO_N_TERMS_to_524", "old_id": "SUM_SERIES_23_45_67_89_UPTO_N_TERMS"}
{"code": "def sumofsquare ( n ) :\n    C = [ [ (67 + -67) for i in range ( n + (69 + -68) ) ] for j in range ( n + (54 + -53) ) ]\n    for i in range ( (94 + -94) , n + (56 + -55) ) :\n        for j in range ( (43 + -43) , min ( i , n ) + (28 + -27) ) :\n            if ( j == (58 + -58) or j == i ) :\n                C [ i ] [ j ] = (49 + -48)\n            else :\n                C [ i ] [ j ] = ( C [ i - (33 + -32) ] [ j - (67 + -66) ] + C [ i - (17 + -16) ] [ j ] )\n    sum = (6 + -6)\n    for i in range ( (95 + -95) , n + (63 + -62) ) :\n        sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_525", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[:: - (1 + 0)]\n    str2 = str2[:: - (51 + -50)]\n    carry = (46 + -46)\n    for i in range(n1):\n        sum = ((ord(str1[i]) - (65 + -17)) + ((ord(str2[i]) - (67 + -19)) + carry))\n        if sum < (10 + -10):\n            str += chr(sum % -(21 + -11) + (28 + 20))\n        else:\n            str += chr(sum % (1 + 9) + (93 + -45))\n        carry = int(sum / (1 + 9))\n    for i in range(n1, n2):\n        sum = ((ord(str2[i]) - (49 + -1)) + carry)\n        if sum < (59 + -59):\n            str += chr(sum % -(22 + -12) + (9 + 39))\n        else:\n            str += chr(sum % (20 + -10) + (82 + -34))\n        carry = (int)(sum / (43 + -33))\n    if (carry):\n        str += chr(carry + (89 + -41))\n    str = str[:: - (52 + -51)]\n    return str", "id": "ConstantUnfoldding_sample_from_SUM_TWO_LARGE_NUMBERS_to_526", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def swapBits ( x , p1 , p2 , n ) :\n    set1 = ( x >> p1 ) & ( ( (6 + -5) << n ) - (59 + -58) )\n    set2 = ( x >> p2 ) & ( ( (86 + -85) << n ) - (11 + -10) )\n    xor = ( set1 ^ set2 )\n    xor = ( xor << p1 ) | ( xor << p2 )\n    result = x ^ xor\n    return result", "id": "ConstantUnfoldding_sample_from_SWAP_BITS_IN_A_GIVEN_NUMBER_to_527", "old_id": "SWAP_BITS_IN_A_GIVEN_NUMBER"}
{"code": "def swapNibbles ( x ) :\n    return ( ( x & 0x0F ) << (25 + -21) | ( x & 0xF0 ) >> (16 + -12) )", "id": "ConstantUnfoldding_sample_from_SWAP_TWO_NIBBLES_BYTE_to_528", "old_id": "SWAP_TWO_NIBBLES_BYTE"}
{"code": "def swap ( xp , yp ) :\n    xp [ (71 + -71) ] = xp [ (57 + -57) ] ^ yp [ (47 + -47) ]\n    yp [ (36 + -36) ] = xp [ (65 + -65) ] ^ yp [ (10 + -10) ]\n    xp [ (67 + -67) ] = xp [ (12 + -12) ] ^ yp [ (87 + -87) ]", "id": "ConstantUnfoldding_sample_from_SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_to_529", "old_id": "SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = (84 + -84)\n    for i in range ( n ) :\n        left = (88 + -88)\n        right = (27 + -27)\n        for j in range ( i - (8 + -7) , - (95 + -94) , - (97 + -96) ) :\n            if ( templeHeight [ j ] < templeHeight [ j + (60 + -59) ] ) :\n                left += (31 + -30)\n            else :\n                break\n        for j in range ( i + (14 + -13) , n ) :\n            if ( templeHeight [ j ] < templeHeight [ j - (18 + -17) ] ) :\n                right += (96 + -95)\n            else :\n                break\n        sum += max ( right , left ) + (37 + -36)\n    return sum", "id": "ConstantUnfoldding_sample_from_TEMPLE_OFFERINGS_to_530", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < (69 + -66) ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ (94 + -94) ]\n    for i in range ( (39 + -38) , arr_size ) :\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n    second = - sys.maxsize\n    for i in range ( (22 + -22) , arr_size ) :\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n    third = - sys.maxsize\n    for i in range ( (3 + -3) , arr_size ) :\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n    print ( \"The Third Largest\" , \"element is\" , third )", "id": "ConstantUnfoldding_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_to_531", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < (18 + -15) ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ (58 + -58) ]\n    second = - sys.maxsize\n    third = - sys.maxsize\n    for i in range ( (55 + -54) , arr_size ) :\n        if ( arr [ i ] > first ) :\n            third = second\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            third = second\n            second = arr [ i ]\n        elif ( arr [ i ] > third ) :\n            third = arr [ i ]\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "ConstantUnfoldding_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_532", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def countWays ( n ) :\n    A = [ (49 + -49) ] * ( n + (13 + -12) )\n    B = [ (97 + -97) ] * ( n + (8 + -7) )\n    A [ (68 + -68) ] = (98 + -97)\n    A [ (49 + -48) ] = (56 + -56)\n    B [ (89 + -89) ] = (77 + -77)\n    B [ (12 + -11) ] = (11 + -10)\n    for i in range ( (7 + -5) , n + (56 + -55) ) :\n        A [ i ] = A [ i - (32 + -30) ] + (37 + -35) * B [ i - (4 + -3) ]\n        B [ i ] = A [ i - (75 + -74) ] + B [ i - (32 + -30) ]\n    return A [ n ]", "id": "ConstantUnfoldding_sample_from_TILING_WITH_DOMINOES_to_533", "old_id": "TILING_WITH_DOMINOES"}
{"code": "def countNonDecreasing ( n ) :\n    N = (46 + -36)\n    count = (61 + -60)\n    for i in range ( (66 + -65) , n + (32 + -31) ) :\n        count = int ( count * ( N + i - (51 + -50) ) )\n        count = int ( count / i )\n    return count", "id": "ConstantUnfoldding_sample_from_TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1_to_534", "old_id": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1"}
{"code": "def numberOfSticks ( x ) :\n    return ( (38 + -35) * x * ( x + (6 + -5) ) ) / (24 + -22)", "id": "ConstantUnfoldding_sample_from_TRIANGULAR_MATCHSTICK_NUMBER_to_535", "old_id": "TRIANGULAR_MATCHSTICK_NUMBER"}
{"code": "def isTriangular ( num ) :\n    if ( num < (81 + -81) ) :\n        return False\n    sum , n = (99 + -99) , (9 + -8)\n    while ( sum <= num ) :\n        sum = sum + n\n        if ( sum == num ) :\n            return True\n        n += (77 + -76)\n    return False", "id": "ConstantUnfoldding_sample_from_TRIANGULAR_NUMBERS_to_536", "old_id": "TRIANGULAR_NUMBERS"}
{"code": "def fun ( n ) :\n    return n & ( n - (90 + -89) )", "id": "ConstantUnfoldding_sample_from_TURN_OFF_THE_RIGHTMOST_SET_BIT_to_537", "old_id": "TURN_OFF_THE_RIGHTMOST_SET_BIT"}
{"code": "def countUnique ( mat , n , m ) :\n    rowsum = [ (16 + -16) ] * n\n    colsum = [ (91 + -91) ] * m\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( mat [ i ] [ j ] != (56 + -56) ) :\n                rowsum [ i ] += (10 + -9)\n                colsum [ j ] += (44 + -43)\n    uniquecount = (9 + -9)\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( mat [ i ] [ j ] != (73 + -73) and rowsum [ i ] == (93 + -92) and colsum [ j ] == (25 + -24) ) :\n                uniquecount += (70 + -69)\n    return uniquecount", "id": "ConstantUnfoldding_sample_from_UNIQUE_CELLS_BINARY_MATRIX_to_538", "old_id": "UNIQUE_CELLS_BINARY_MATRIX"}
{"code": "def xorZero ( str ) :\n    one_count = (84 + -84)\n    zero_count = (33 + -33)\n    n = len ( str )\n    for i in range ( (25 + -25) , n , (46 + -45) ) :\n        if ( str [ i ] == '1' ) :\n            one_count += (40 + -39)\n        else :\n            zero_count += (77 + -76)\n    if ( one_count % (56 + -54) == (40 + -40) ) :\n        return zero_count\n    return one_count", "id": "ConstantUnfoldding_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_539", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def CountWays ( n ) :\n    table = [ (25 + -25) ] * ( n + (66 + -65) )\n    table [ (67 + -67) ] = (52 + -51)\n    for i in range ( (18 + -17) , n ) :\n        for j in range ( i , n + (62 + -61) ) :\n            table [ j ] += table [ j - i ]\n    return table [ n ]", "id": "ConstantUnfoldding_sample_from_WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS_to_540", "old_id": "WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS"}
{"code": "def countTransformation ( a , b ) :\n    n = len ( a )\n    m = len ( b )\n    if m == (70 + -70) :\n        return (75 + -74)\n    dp = [ [ (48 + -48) ] * ( n + (61 + -60) ) for _ in range ( m + (62 + -61) ) ]\n    for i in range ( m ) :\n        for j in range ( i , n ) :\n            if i == (74 + -74) :\n                if j == (65 + -65) :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = (77 + -76)\n                    else :\n                        dp [ i ] [ j ] = (59 + -59)\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = dp [ i ] [ j - (53 + -52) ] + (43 + -42)\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - (96 + -95) ]\n            else :\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = ( dp [ i ] [ j - (42 + -41) ] + dp [ i - (38 + -37) ] [ j - (14 + -13) ] )\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - (100 + -99) ]\n    return dp [ m - (96 + -95) ] [ n - (16 + -15) ]", "id": "ConstantUnfoldding_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_541", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
{"code": "def isMultipleOf3 ( n ) :\n    odd_count = (38 + -38)\n    even_count = (24 + -24)\n    if ( n < (3 + -3) ) :\n        n = - n\n    if ( n == (69 + -69) ) :\n        return (44 + -43)\n    if ( n == (39 + -38) ) :\n        return (95 + -95)\n    while ( n ) :\n        if ( n & (37 + -36) ) :\n            odd_count += (60 + -59)\n        if ( n & (2 + 0) ) :\n            even_count += (99 + -98)\n        n = n >> (35 + -33)\n    return isMultipleOf3 ( abs ( odd_count - even_count ) )", "id": "ConstantUnfoldding_sample_from_WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3_to_542", "old_id": "WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3"}
{"code": "def isPowerOfTwo ( n ) :\n    if ( n == (4 + -4) ) :\n        return False\n    while ( n != (46 + -45) ) :\n        if ( n % (40 + -38) != (86 + -86) ) :\n            return False\n        n = n // (85 + -83)\n    return True", "id": "ConstantUnfoldding_sample_from_WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_to_543", "old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO"}
{"code": "def isPowerOfTwo ( x ) :\n    return ( x and ( not ( x & ( x - (12 + -11) ) ) ) )", "id": "ConstantUnfoldding_sample_from_WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1_to_544", "old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1"}
{"code": "def nearestSmallerEqFib ( n ) :\n    if ( n == (16 + -16) or n == (16 + -15) ) :\n        return n\n    f1 , f2 , f3 = (67 + -67) , (3 + -2) , (71 + -70)\n    while ( f3 <= n ) :\n        f1 = f2 \n        f2 = f3 \n        f3 = f1 + f2 \n    return f2 ", "id": "ConstantUnfoldding_sample_from_ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION_to_545", "old_id": "ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION"}
