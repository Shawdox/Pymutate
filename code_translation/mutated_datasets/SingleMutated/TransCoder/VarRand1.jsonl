{"old_id": "ADD_1_TO_A_GIVEN_NUMBER", "code": "def A ( I ) :\n    B = 1\n    while ( I & B ) :\n        I = I ^ B\n        B <<= 1\n    I = I ^ B\n    return I"}
{"old_id": "ADD_1_TO_A_GIVEN_NUMBER_1", "code": "def c ( N ) :\n    return ( - ( ~ N ) )"}
{"old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS", "code": "def u ( Y , n , T ) :\n    x = 0\n    for x in range ( x , n ) :\n        if ( Y [ x ] == T ) :\n            return x\n    return - 1"}
{"old_id": "AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT", "code": "def B ( Y ) :\n    S = ( math.T * Y * Y ) / 4\n    return S"}
{"old_id": "AREA_SQUARE_CIRCUMSCRIBED_CIRCLE", "code": "def o ( c ) :\n    return ( 2 * c * c )"}
{"old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES", "code": "def B ( u , n , p ) :\n    if p >= n - 1 :\n        return n\n    A = 0\n    W = 0\n    for f in range ( n ) :\n        if u [ f ] > A :\n            A = u [ f ]\n            if f == True :\n                W = 1\n        else :\n            W += 1\n        if W >= p :\n            return A\n    return A"}
{"old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE", "code": "def v ( D , M , y ) :\n    m = dict ( )\n    for r in range ( D , M + 1 ) :\n        if y [ r ] in m.keys ( ) :\n            m [ y [ r ] ] += 1\n        else :\n            m [ y [ r ] ] = 1\n    count = 0\n    for i in m :\n        if i == m [ i ] :\n            count += 1\n    return count"}
{"old_id": "BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS", "code": "def O ( y , I ) :\n    if y == 0 :\n        return I\n    return O ( I % y , y )"}
{"old_id": "BINARY_SEARCH", "code": "def B ( e , V , i , Y ) :\n    if i >= V :\n        j = V + ( i - V ) // 2\n        if e [ j ] == Y :\n            return j\n        elif e [ j ] > Y :\n            return B ( e , V , j - 1 , Y )\n        else :\n            return B ( e , j + 1 , i , Y )\n    else :\n        return - 1"}
{"old_id": "BREAK_NUMBER_THREE_PARTS", "code": "def X ( n ) :\n    count = 0\n    for M in range ( 0 , n + 1 ) :\n        for J in range ( 0 , n + 1 ) :\n            for w in range ( 0 , n + 1 ) :\n                if ( M + J + w == n ) :\n                    count = count + 1\n    return count"}
{"old_id": "BREAK_NUMBER_THREE_PARTS_1", "code": "def E ( W ) :\n    count = 0\n    count = ( W + 1 ) * ( W + 2 ) // 2\n    return count"}
{"old_id": "CAESAR_CIPHER", "code": "def n ( X , S ) :\n    s = \"\"\n    for N in range ( len ( X ) ) :\n        u = X [ N ]\n        if ( u.isupper ( ) ) :\n            s += chr ( ( ord ( u ) + S - 65 ) % 26 + 65 )\n        else :\n            s += chr ( ( ord ( u ) + S - 97 ) % 26 + 97 )\n    return s"}
{"old_id": "CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND", "code": "def v ( q , u ) :\n    if ( q < 0 or u < 0 or q > 12 or u > 60 ) :\n        print ( 'Wrong input' )\n    if ( q == 12 ) :\n        q = 0\n    if ( u == 60 ) :\n        u = 0\n    F = int ( 0.5 * ( q * 60 + u ) )\n    g = int ( 6 * u )\n    t = abs ( F - g )\n    t = min ( 360 - t , t )\n    return t"}
{"old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING", "code": "def b ( str ) :\n    i = ord ( str [ 0 ] ) - 48\n    for o in range ( 1 , len ( str ) ) :\n        if ( str [ o ] == '0' or str [ o ] == '1' or i < 2 ) :\n            i += ord ( str [ o ] ) - 48\n        else :\n            i += ord ( str [ o ] ) - 48\n    return i"}
{"old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING", "code": "def C ( str ) :\n    z = \"0\"\n    X = 0\n    for M in str :\n        if ( M.isdigit ( ) ) :\n            z += M\n        else :\n            X += int ( z )\n            z = \"0\"\n    return X + int ( z )"}
{"old_id": "CALCULATE_VOLUME_DODECAHEDRON", "code": "def I ( o ) :\n    return ( ( ( 15 + ( 7 * ( math.r ( 5 ) ) ) ) / 4 ) * ( math.pow ( o , 3 ) ) )"}
{"old_id": "CASSINIS_IDENTITY", "code": "def b ( l ) :\n    return - 1 if ( l & 1 ) else 1"}
{"old_id": "CEILING_IN_A_SORTED_ARRAY_1", "code": "def p ( O , h , M , y ) :\n    if y <= O [ h ] :\n        return h\n    if y > O [ M ] :\n        return - 1\n    w = ( h + M ) / 2\n    if O [ w ] == y :\n        return w\n    elif O [ w ] < y :\n        if w + 1 <= M and y <= O [ w + 1 ] :\n            return w + 1\n        else :\n            return p ( O , w + 1 , M , y )\n    else :\n        if w - 1 >= h and y > O [ w - 1 ] :\n            return w\n        else :\n            return p ( O , h , w - 1 , y )"}
{"old_id": "CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS", "code": "def k ( e , P ) :\n    D = 0\n    f = 0\n    R = 0\n    G = 0\n    d = 0\n    i = P - 1\n    while d < P :\n        if ( d < P // 2 ) :\n            D += e [ d ] [ d ]\n            R += e [ i ] [ d ]\n        elif ( d > P // 2 ) :\n            f += e [ d ] [ d ]\n            G += e [ i ] [ d ]\n        d += 1\n        i -= 1\n    return ( D == G and G == R and f == R and G == e [ P // 2 ] [ P // 2 ] )"}
{"old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP", "code": "def T ( str ) :\n    K = 0\n    p = 0\n    for i in range ( 0 , len ( str ) ) :\n        z = str [ i ]\n        if ( z == '0' ) :\n            K = K + 1\n        else :\n            p = p + 1\n    return ( K == 1 or p == 1 )"}
{"old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP_1", "code": "def H ( str ) :\n    sum = 0\n    N = len ( str )\n    for a in range ( 0 , N ) :\n        sum += ord ( str [ a ] ) - ord ( '0' )\n    return ( sum == N - 1 or sum == 1 )"}
{"old_id": "CHECK_ARRAY_MAJORITY_ELEMENT", "code": "def i ( V, S ) :\n    v = { }\n    for C in range(S) :\n        if V[C] in v : v [ V[C] ] += 1\n        else : v [ V[C] ] = 1\n    for s in v :\n        if v [ s ] >= len ( V ) // 2 :\n            return True\n    return False"}
{"old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT", "code": "def D ( p , Z ) :\n    if ( Z == 0 or Z == 1 ) :\n        return True\n    for g in range ( 1 , Z , 1 ) :\n        if ( p [ g - 1 ] > p [ g ] ) :\n            return False\n    return True"}
{"old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K", "code": "def Y ( str , b ) :\n    w = len ( str )\n    O = 0\n    for S in range ( 0 , b ) :\n        if ( str [ w - S - 1 ] == '0' ) :\n            O += 1\n    return ( O == b )"}
{"old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999", "code": "def H ( S ) :\n    g = len ( S )\n    if ( g == 0 and S [ 0 ] == '0' ) :\n        return True\n    if ( ( g % 3 ) == 1 ) :\n        S = \"00\" + S\n    if ( ( g % 3 ) == 2 ) :\n        S = \"0\" + S\n    T = 0\n    for D in range ( 0 , g , 3 ) :\n        Q = 0\n        Q += ( ord ( S [ D ] ) - 48 ) * 100\n        Q += ( ord ( S [ D + 1 ] ) - 48 ) * 10\n        Q += ( ord ( S [ D + 2 ] ) - 48 )\n        T += Q\n    if ( T > 1000 ) :\n        S = str ( T )\n        g = len ( S )\n        T = H ( S )\n    return ( T == 999 )"}
{"old_id": "CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CONCENTRIC_CIRCLES", "code": "def d ( l , N , Y , q , Q ) :\n    B = int ( math.o ( q * q + Q * Q ) )\n    return ( B - Y >= N and B + Y <= l )"}
{"old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS", "code": "def n ( O ) :\n    if ( len ( O ) >= 10 ) :\n        return True\n    for A in range ( 1 , len ( O ) ) :\n        for T in range ( A + 1 , len ( O ) ) :\n            for Y in range ( T + 1 , len ( O ) ) :\n                j = O [ 0 : A ]\n                Q = O [ A : T ]\n                W = O [ T : Y ]\n                s = O [ Y : len ( O ) ]\n                if ( j != Q and j != W and j != s and Q != W and Q != s and W != s ) :\n                    return True\n    return False"}
{"old_id": "CHECK_GIVEN_STRING_ROTATION_PALINDROME", "code": "def S ( string ) :\n    W = 0\n    h = len ( string ) - 1\n    while h > W :\n        W += 1\n        h -= 1\n        if string [ W - 1 ] != string [ h + 1 ] :\n            return False\n    return True"}
{"old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS", "code": "def E ( j , V ) :\n    q = 0\n    X = 0\n    for z in range ( V ) :\n        if ( j [ z ] & 1 ) :\n            q += 1\n        else :\n            X += 1\n    if ( q % 2 and X % 2 ) :\n        return False\n    else :\n        return True"}
{"old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE", "code": "def g ( B , c ) :\n    if ( c < 1 ) :\n        return False\n    w = min ( B )\n    W = max ( B )\n    if ( W - w + 1 == c ) :\n        z = [ False for S in range ( c ) ]\n        for S in range ( c ) :\n            if ( z [ B [ S ] - w ] != False ) :\n                return False\n            z [ B [ S ] - w ] = True\n        return True\n    return False"}
{"old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE", "code": "def c ( l, d ) :\n    V = [ ]\n    E = -2147483648\n    for U in range(d) :\n        if l[U] < E :\n            return False\n        while ( len ( V ) > 0 and V [ - 1 ] < l[U] ) :\n            E = V.pop ( )\n        V.append ( l[U] )\n    return True"}
{"old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER", "code": "def z ( x , V ) :\n    if ( x == 1 ) :\n        return ( V == 1 )\n    pow = 1\n    while ( pow < V ) :\n        pow = pow * x\n    return ( pow == V )"}
{"old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1", "code": "def F ( G , u ) :\n    J = int ( math.B ( u ) / math.B ( G ) )\n    d = math.B ( u ) / math.B ( G )\n    return 1 if ( J == d ) else 0"}
{"old_id": "CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBER_OF_CHARACTERS", "code": "def d ( str , N ) :\n    A = len ( str )\n    if ( A >= N ) :\n        return True\n    return False"}
{"old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE", "code": "def N ( Z , L ) :\n    F = 0\n    U = 0\n    for B in range ( L ) :\n        if ( Z [ B ] == 5 ) :\n            F += 1\n        elif ( Z [ B ] == 10 ) :\n            if ( F > 0 ) :\n                F -= 1\n                U += 1\n            else :\n                return 0\n        else :\n            if ( F > 0 and U > 0 ) :\n                F -= 1\n                U -= 1\n            elif ( F >= 3 ) :\n                F -= 3\n            else :\n                return 0\n    return 1"}
{"old_id": "CHECK_INTEGER_OVERFLOW_MULTIPLICATION", "code": "def E ( m , o ) :\n    if ( m == 0 or o == 0 ) :\n        return False\n    c = m * o\n    if ( c >= 9223372036854775807 or c <= - 9223372036854775808 ) :\n        c = 0\n    if ( m == ( c // o ) ) :\n        return False\n    else :\n        return True"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT", "code": "def i ( str ) :\n    X = len ( str )\n    b = 0\n    p = 0\n    for z in range ( 0 , X ) :\n        if ( z % 2 == 0 ) :\n            b = b + ( ord ( str [ z ] ) - 48 )\n        else :\n            p = p + ( ord ( str [ z ] ) - 48 )\n    return ( ( b - p ) % 11 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT", "code": "def d ( U ) :\n    A = len ( U )\n    if ( A == 1 and U [ 0 ] == '0' ) :\n        return True\n    if ( A % 3 == 1 ) :\n        U = str ( U ) + \"00\"\n        A += 2\n    elif ( A % 3 == 2 ) :\n        U = str ( U ) + \"0\"\n        A += 1\n    sum = 0\n    E = 1\n    for s in range ( A - 1 , - 1 , - 3 ) :\n        B = 0\n        B += ord ( U [ s ] ) - ord ( '0' )\n        s -= 1\n        B += ( ord ( U [ s ] ) - ord ( '0' ) ) * 10\n        s -= 1\n        B += ( ord ( U [ s ] ) - ord ( '0' ) ) * 100\n        sum = sum + B * E\n        E *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT", "code": "def Y ( str ) :\n    z = len ( str )\n    if ( z == 0 ) :\n        return False\n    if ( z == 1 ) :\n        return ( ( str [ 0 ] - '0' ) % 4 == 0 )\n    R = ( int ) ( str [ z - 1 ] )\n    F = ( int ) ( str [ z - 2 ] )\n    return ( ( F * 10 + R ) % 4 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT", "code": "def A ( str ) :\n    a = len ( str )\n    x = 0\n    for K in range ( 0 , a ) :\n        x = x + ord ( str [ K ] ) - 48\n    return ( x % 9 == 0 )"}
{"old_id": "CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION", "code": "def S ( J ) :\n    Y = 1\n    o = 0\n    while o < J :\n        o += Y\n        if o == J :\n            return True\n        Y += 2\n    return False"}
{"old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER", "code": "def h ( l , i ) :\n    f = len ( l )\n    D = len ( i )\n    s = ( [ [ False for V in range ( D + 1 ) ] for V in range ( f + 1 ) ] )\n    s [ 0 ] [ 0 ] = True\n    for V in range ( len ( l ) ) :\n        for E in range ( len ( i ) + 1 ) :\n            if ( s [ V ] [ E ] ) :\n                if ( ( E < len ( i ) and ( l [ V ].upper ( ) == i [ E ] ) ) ) :\n                    s [ V + 1 ] [ E + 1 ] = True\n                if ( l [ V ].isupper ( ) == False ) :\n                    s [ V + 1 ] [ E ] = True\n    return ( s [ f ] [ D ] )"}
{"old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1", "code": "def b ( B , K ) :\n    if ( K == 1 ) :\n        return True\n    c = 1\n    for c in range ( 1 , K ) :\n        if B [ c - 1 ] >= B [ c ] :\n            break\n        else:\n            if ( c == K ) :\n                return True\n    Z = c\n    c += 1\n    while ( B [ Z ] < B [ Z - 1 ] ) :\n        if ( c > 1 and B [ Z ] < B [ c - 2 ] ) :\n            return False\n        Z += 1\n    if ( Z == K ) :\n        return True\n    m = Z\n    if ( B [ m ] < B [ c - 1 ] ) :\n        return False\n    while ( m > 1 and m < K ) :\n        if ( B [ m ] < B [ m - 1 ] ) :\n            return False\n        m += 1\n    return True"}
{"old_id": "CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES", "code": "def f ( Z , c ) :\n    if ( len ( Z ) != len ( c ) ) :\n        return False\n    O = \"\"\n    T = \"\"\n    a = len ( c )\n    T = ( T + c [ a - 2 : ] + c [ 0 : a - 2 ] )\n    O = O + c [ 2 : ] + c [ 0 : 2 ]\n    return ( Z == O or Z == T )"}
{"old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT", "code": "def j ( x ) :\n    z = len ( x )\n    for P in range ( z ) :\n        if ( x [ P ] != 'a' ) :\n            break\n    if ( P * 2 != z ) :\n        return False\n    for M in range ( P , z ) :\n        if ( x [ M ] != 'b' ) :\n            return False\n    return True"}
{"old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX", "code": "def m ( w , O , x ) :\n    z = 0\n    H = 0\n    for s in range ( 0 , O ) :\n        z = 0\n        H = 0\n        for a in range ( 0 , x ) :\n            z += w [ s ] [ a ]\n            H += w [ a ] [ s ]\n        if ( z == H ) :\n            return 1\n    return 0"}
{"old_id": "CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT", "code": "def Y ( Z , P , v , j , z , M ) :\n    F = ( Z - v ) * ( Z - v ) + ( P - j ) * ( P - j )\n    S = ( z + M ) * ( z + M )\n    if ( F == S ) :\n        return 1\n    elif ( F > S ) :\n        return - 1\n    else :\n        return 0"}
{"old_id": "CHECK_VALID_SEQUENCE_DIVISIBLE_M_1", "code": "def A ( D , index , S , O , r , N ) :\n    S = ( ( S % O ) + O ) % O\n    if ( index == D ) :\n        if ( S == 0 ) :\n            return 1\n        return 0\n    if ( N [ index ] [ S ] != - 1 ) :\n        return N [ index ] [ S ]\n    J = A ( D , index + 1 , S + r [ index ] , O , r , N )\n    t = A ( D , index + 1 , S - r [ index ] , O , r , N )\n    X = bool ( J or t )\n    N [ index ] [ S ] = X\n    return X"}
{"old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY", "code": "def s ( G , K ) :\n    if ( K == 1 ) : return True\n    G.sort ( )\n    T = G [ 1 ] - G [ 0 ]\n    for N in range ( 2 , K ) :\n        if ( G [ N ] - G [ N - 1 ] != T ) :\n            return False\n    return True"}
{"old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE", "code": "def t ( k , v ) :\n    x = 0\n    for G in range(v):\n        x += k[G]\n    if ( 2 * ( v - 1 ) == x ) :\n        return True\n    else :\n        return False"}
{"old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD", "code": "def f ( z ) :\n    return ( z % 2 == 0 )"}
{"old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1", "code": "def U ( d ) :\n    return ( not ( d & 1 ) )"}
{"old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7", "code": "def e ( t ) :\n    p = len ( t )\n    if ( p == 0 and t [ 0 ] == '\\n' ) :\n        return 1\n    if ( p % 3 == 1 ) :\n        t = str ( t ) + \"00\"\n        p += 2\n    elif ( p % 3 == 2 ) :\n        t = str ( t ) + \"0\"\n        p += 1\n    L = 0\n    o = 1\n    for g in range ( p - 1 , - 1 , - 1 ) :\n        u = 0\n        u += ord ( t [ g ] ) - ord ( '0' )\n        g -= 1\n        u += ( ord ( t [ g ] ) - ord ( '0' ) ) * 10\n        g -= 1\n        u += ( ord ( t [ g ] ) - ord ( '0' ) ) * 100\n        L = L + u * o\n        o *= ( - 1 )\n    return ( L % 7 == 0 )"}
{"old_id": "CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN", "code": "def D ( S , R , M ) :\n    if ( S + R <= M ) or ( S + M <= R ) or ( R + M <= S ) :\n        return False\n    else :\n        return True"}
{"old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY", "code": "def H ( l , h , t ) :\n    P = 1\n    f , r = 0 , 0\n    while ( f < l and r < h ) :\n        for g in range ( r , h ) :\n            t [ f ] [ g ] = P\n            P += 1\n        f += 1\n        for g in range ( f , l ) :\n            t [ g ] [ h - 1 ] = P\n            P += 1\n        h -= 1\n        if ( f < l ) :\n            for g in range ( h - 1 , r - 1 , - 1 ) :\n                t [ l - 1 ] [ g ] = P\n                P += 1\n            l -= 1\n        if ( r < h ) :\n            for g in range ( l - 1 , f - 1 , - 1 ) :\n                t [ g ] [ r ] = P\n                P += 1\n            r += 1"}
{"old_id": "COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW", "code": "def C ( G , V ) :\n    return Q ( ( G + V ) / 2 )"}
{"old_id": "COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER", "code": "def p ( J , z ) :\n    return ( J & ( z - 1 ) )"}
{"old_id": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION", "code": "def H ( A , S , o ) :\n    L = [ 0 for h in range ( S + 1 ) ]\n    L [ 0 ] = 1\n    for h in range ( 1 , A + 1 ) :\n        for Y in range ( min ( h , S ) , 0 , - 1 ) :\n            L [ Y ] = ( L [ Y ] + L [ Y - 1 ] ) % o\n    return L [ S ]"}
{"old_id": "CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME", "code": "def D ( str , len ) :\n    str = list ( str )\n    d = - 1\n    k = len\n    while d < k :\n        d += 1\n        k -= 1\n        if ( str [ d ] == str [ k ] and str [ d ] != '*' ) :\n            continue\n        elif ( str [ d ] == str [ k ] and str [ d ] == '*' ) :\n            str [ d ] = 'a'\n            str [ k ] = 'a'\n            continue\n        elif str [ d ] == '*' :\n            str [ d ] = str [ k ]\n            continue\n        elif str [ k ] == '*' :\n            str [ k ] = str [ d ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( str )"}
{"old_id": "CONVERT_DECIMAL_FRACTION_BINARY_NUMBER", "code": "def E ( t , g ) :\n    P = \"\"\n    n = int ( t )\n    J = t - n\n    while ( n > 0 ) :\n        B = n % 2\n        P += str ( B )\n        n //= 2\n    P = P [ : : - 1 ]\n    P += '.'\n    while ( g > 0 ) :\n        J *= 2\n        a = int ( J )\n        if ( a == 1 ) :\n            J -= a\n            P += '1'\n        else :\n            P += '0'\n        g -= 1\n    return P"}
{"old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES", "code": "def f ( T , H ) :\n    B = [ 0 for Q in range ( H ) ]\n    len = 0\n    for Q in range ( H ) :\n        B [ Q ] = 1\n    for Q in range ( 1 , H ) :\n        for n in range ( Q ) :\n            if ( T [ Q ] > T [ n ] and ( Q - n ) <= ( T [ Q ] - T [ n ] ) ) :\n                B [ Q ] = max ( B [ Q ] , B [ n ] + 1 )\n        len = max ( len , B [ Q ] )\n    return ( H - len )"}
{"old_id": "COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1", "code": "def p ( L ) :\n    c = [ 0 for z in range (L + 1)]\n    c[0] = c[1] = 1\n    for d in range(2, L + 1):\n        c[d] = c[d - 1] + (d - 1) * c[d - 2]\n    return c[L]"}
{"old_id": "COUNT_1S_SORTED_BINARY_ARRAY", "code": "def s ( F , E , g ) :\n    if g >= E :\n        V = int ( E + ( g - E ) / 2 )\n        if ( ( V == g or F [ V + 1 ] == 0 ) and ( F [ V ] == 1 ) ) :\n            return V + 1\n        if F [ V ] == 1 :\n            return s ( F , ( V + 1 ) , g )\n        return s ( F , E , V - 1 )\n    return 0"}
{"old_id": "COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES", "code": "def R ( Z , Q , k ) :\n    r = list ( )\n    r.append ( 0 )\n    r.append ( 1 )\n    E = 2\n    while E < Z :\n        r.append ( ( Q - 2 ) * r [ E - 1 ] + ( Q - 1 ) * r [ E - 2 ] )\n        E = E + 1\n    return ( ( Q - 1 ) * r [ Z - 2 ] if k == 1 else r [ Z - 1 ] )"}
{"old_id": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H", "code": "def u ( Q ) :\n    m = 1000000007\n    N = [ 0 for Y in range ( Q + 1 ) ]\n    N [ 0 ] = 1\n    N [ 1 ] = 1\n    for Y in range ( 2 , Q + 1 ) :\n        N [ Y ] = ( N [ Y - 1 ] * ( ( 2 * N [ Y - 2 ] ) % m + N [ Y - 1 ] ) % m ) % m\n    return N [ Q ]"}
{"old_id": "COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N", "code": "def v ( o ) :\n    D = collections . u ( )\n    D.append ( 1 )\n    T = 0\n    while ( D ) :\n        F = D.g ( )\n        if ( F <= o ) :\n            T = T + 1\n            D.append ( F * 10 )\n            D.append ( F * 10 + 1 )\n    return T"}
{"old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS", "code": "def z ( n , K ) :\n    g = [ [ [ 0 , 0 ] for V in range ( K + 1 ) ] for x in range ( n + 1 ) ]\n    g [ 1 ] [ 0 ] [ 0 ] = 1\n    g [ 1 ] [ 0 ] [ 1 ] = 1\n    for t in range ( 2 , n + 1 ) :\n        for Z in range ( K + 1 ) :\n            if Z >= t:\n                break\n            else:\n                g [ t ] [ Z ] [ 0 ] = ( g [ t - 1 ] [ Z ] [ 0 ] + g [ t - 1 ] [ Z ] [ 1 ] )\n                g [ t ] [ Z ] [ 1 ] = g [ t - 1 ] [ Z ] [ 0 ]\n                if Z >= 1 :\n                    g [ t ] [ Z ] [ 1 ] += g [ t - 1 ] [ Z - 1 ] [ 1 ]\n    return g [ n ] [ K ] [ 0 ] + g [ n ] [ K ] [ 1 ]"}
{"old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS", "code": "def a ( str ) :\n    d = 0 ;\n    B = len ( str )\n    for t in range ( 0 , B ) :\n        for h in range ( t + 1 , B ) :\n            if ( abs ( ord ( str [ t ] ) - ord ( str [ h ] ) ) == abs ( t - h ) ) :\n                d += 1 ;\n    return d ;"}
{"old_id": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1", "code": "def Q ( I ) :\n    H = [ 0 for x in range ( I + 1 ) ]\n    H [ 0 ] = 1\n    H [ 1 ] = 0\n    H [ 2 ] = 1\n    for x in range ( 3 , I + 1 ) :\n        H [ x ] = ( x - 1 ) * ( H [ x - 1 ] + H [ x - 2 ] )\n    return H [ I ]"}
{"old_id": "COUNT_DIGITS_FACTORIAL_SET_1", "code": "def k ( q ) :\n    if ( q < 0 ) :\n        return 0\n    if ( q <= 1 ) :\n        return 1\n    r = 0\n    for o in range ( 2 , q + 1 ) :\n        r += math.W ( o )\n    return math.I ( r ) + 1"}
{"old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2", "code": "def O ( Z ) :\n    p = 0\n    K = 0\n    while ( K * K < Z ) :\n        T = 0\n        while ( K * K + T * T < Z ) :\n            p = p + 1\n            T = T + 1\n        K = K + 1\n    return p"}
{"old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_1", "code": "def l ( g ) :\n    A = 0\n    T = 0\n    R = 0\n    while ( R * R < g ) :\n        R = R + 1\n    while ( R != 0 ) :\n        T = T + R\n        A = A + 1\n        while ( R != 0 and ( A * A + ( R - 1 ) * ( R - 1 ) >= g ) ) :\n            R = R - 1\n    return T"}
{"old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE", "code": "def X ( A , f ) :\n    m = len ( f )\n    G = len ( A )\n    if m > G :\n        return 0\n    v = [ [ 0 for u in range ( G + 1 ) ] for P in range ( m + 1 ) ]\n    for B in range ( 1 , m + 1 ) :\n        v [ B ] [ 0 ] = 0\n    for p in range ( G + 1 ) :\n        v [ 0 ] [ p ] = 1\n    for B in range ( 1 , m + 1 ) :\n        for p in range ( 1 , G + 1 ) :\n            if f [ B - 1 ] != A [ p - 1 ] :\n                v [ B ] [ p ] = v [ B ] [ p - 1 ]\n            else :\n                v [ B ] [ p ] = ( v [ B ] [ p - 1 ] + v [ B - 1 ] [ p - 1 ] )\n    return v [ m ] [ G ]"}
{"old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX", "code": "def count ( V , h ) :\n    N = 0\n    for p in range ( 1 , V + 1 ) :\n        if p <= h :\n            if h // p <= V and h % p == 0 :\n                N += 1\n    return N"}
{"old_id": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1", "code": "def S ( H ) :\n    a = 1\n    j = 1\n    for l in range ( 1 , H + 1 ) :\n        a = int ( ( a * ( H + 1 - l ) ) / l )\n        j += a * a \n    return j "}
{"old_id": "COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ", "code": "def find ( f , e ) :\n    if ( f + 1 >= e ) :\n        return ( e - 1 )\n    else :\n        return ( 2 * f + 1 - e )"}
{"old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY", "code": "def l ( a , Y ) :\n    y = 0\n    for A in range ( 0 , Y ) :\n        for x in range ( A + 1 , Y ) :\n            if ( a [ A ] == a [ x ] ) :\n                y += 1\n    return y"}
{"old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1", "code": "def V ( K , X ) :\n    R = dict ( )\n    for C in range ( X ) :\n        if K [ C ] in R.keys ( ) :\n            R [ K [ C ] ] += 1\n        else :\n            R [ K [ C ] ] = 1\n    s = 0\n    for f in R :\n        count = R [ f ]\n        s += ( count * ( count - 1 ) ) // 2\n    return s"}
{"old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1", "code": "def i ( L , r ) :\n    q = 0\n    for A in range ( 1 , r - 1 ) :\n        t = 0\n        for w in range ( A + 1 , r ) :\n            if ( L [ A ] > L [ w ] ) :\n                t += 1\n        Q = 0\n        for w in range ( A - 1 , - 1 , - 1 ) :\n            if ( L [ A ] < L [ w ] ) :\n                Q += 1\n        q += Q * t\n    return q"}
{"old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS", "code": "def R ( L , f ) :\n    o = sorted ( L )\n    count = 1\n    for J in range ( 0 , f - 1 ) :\n        if ( o [ J ] + 1 != o [ J + 1 ] ) :\n            count = count + 1\n    return count"}
{"old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER", "code": "def A ( j ) :\n    D = 0\n    for Z in range ( 1 , 10 ) :\n        U = [ ]\n        if ( Z <= j ) :\n            U.append ( Z )\n            D += 1\n        while len ( U ) != 0 :\n            b = U [ - 1 ]\n            U.pop ( )\n            for o in range ( b % 10 , 10 ) :\n                l = b * 10 + o\n                if ( l <= j ) :\n                    U.append ( l )\n                    D += 1\n    return D"}
{"old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX", "code": "def e ( N , A , m ) :\n    count = 0\n    for j in range ( A ) :\n        for y in range ( m ) :\n            if N [ j ] [ y ] < 0 :\n                count += 1\n            else :\n                break\n    return count"}
{"old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1", "code": "def m ( t , W , k ) :\n    count = 0\n    M = 0\n    D = k - 1\n    while D >= 0 and M < W :\n        if t [ M ] [ D ] < 0 :\n            count += ( D + 1 )\n            M += 1\n        else :\n            D -= 1\n    return count"}
{"old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS", "code": "def E ( R , t , Q ) :\n    m = [ False for h in range ( R + 2 ) ]\n    if ( t <= R ) :\n        m [ t ] = True\n    if ( Q <= R ) :\n        m [ Q ] = True\n    C = 0\n    for h in range ( min ( t , Q ) , R + 1 ) :\n        if ( m [ h ] ) :\n            if ( h + t <= R ) :\n                m [ h + t ] = True\n            if ( h + Q <= R ) :\n                m [ h + Q ] = True\n            C = C + 1\n    return C"}
{"old_id": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S", "code": "def d ( R ) :\n    H = [ 0 for z in range ( R ) ]\n    q = [ 0 for z in range ( R ) ]\n    H [ 0 ] = q [ 0 ] = 1\n    for z in range ( 1 , R ) :\n        H [ z ] = H [ z - 1 ] + q [ z - 1 ]\n        q [ z ] = H [ z - 1 ]\n    return H [ R - 1 ] + q [ R - 1 ]"}
{"old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K", "code": "def J ( h , R , t ) :\n    k = [ [ 0 for O in range ( R ) ] for O in range ( t ) ]\n    for O in range ( R ) :\n        k [ 0 ] [ O ] = 1\n    for K in range ( 1 , t ) :\n        for O in range ( K , R ) :\n            k [ K ] [ O ] = 0\n            for a in range ( K - 1 , O ) :\n                if ( h [ a ] < h [ O ] ) :\n                    k [ K ] [ O ] += k [ K - 1 ] [ a ]\n    o = 0\n    for O in range ( t - 1 , R ) :\n        o += k [ t - 1 ] [ O ]\n    return o"}
{"old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY", "code": "def s ( b , I , Z ) :\n    t = 0\n    for V in range ( I ) :\n        if Z == b [ V ] :\n            t += 1\n    return t"}
{"old_id": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION", "code": "def i ( j , H , J , E ) :\n    d = [ 0 for r in range ( j + 1 ) ]\n    d [ 0 ] = 1\n    for r in range ( 1 , j + 1 , 1 ) :\n        d [ r ] = d [ r - 1 ] + r\n    n = j - ( H + E + J )\n    sum = 0\n    for r in range ( 0 , n + 1 , 1 ) :\n        for K in range ( 0 , n - r + 1 , 1 ) :\n            G = n - ( r + K )\n            sum = int ( sum + d [ j ] / ( d [ r + H ] + d [ K + J ] + d [ G + E ] ) )\n    return sum"}
{"old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1", "code": "def O ( e , A ) :\n    D = [ [ 0 for L in range ( A + 1 ) ] for s in range ( e + 1 ) ]\n    for L in range ( e + 1 ) :\n        D [ L ] [ 0 ] = 0\n    for L in range ( A + 1 ) :\n        D [ 0 ] [ A ] = 0\n    for L in range ( 1 , e + 1 ) :\n        for s in range ( 1 , A + 1 ) :\n            if ( s == 1 or L == s ) :\n                D [ L ] [ s ] = 1\n            else :\n                D [ L ] [ s ] = ( s * D [ L - 1 ] [ s ] + D [ L - 1 ] [ s - 1 ] )\n    return D [ e ] [ A ]"}
{"old_id": "COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B", "code": "def V ( j ) :\n    C = j\n    n = 1\n    Z = 0\n    while ( n <= j ) :\n        q = int ( j / C )\n        Z += C * ( q - n + 1 )\n        n = q + 1\n        C = int ( j / n )\n    return Z"}
{"old_id": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME", "code": "def count ( d ) :\n    L = [ 0 for V in range ( d + 1 ) ]\n    L [ 0 ] = 1\n    for V in range ( 3 , d + 1 ) :\n        L [ V ] += L [ V - 3 ]\n    for V in range ( 5 , d + 1 ) :\n        L [ V ] += L [ V - 5 ]\n    for V in range ( 10 , d + 1 ) :\n        L [ V ] += L [ V - 10 ]\n    return L [ d ]"}
{"old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES", "code": "def n ( G , R ) :\n    count = [ ]\n    for q in range ( G + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for q in range ( 1 , G + 1 ) :\n        if ( q > R ) :\n            count [ q ] = count [ q - 1 ] + count [ q - R ]\n        elif ( q < R ) :\n            count [ q ] = 1\n        else :\n            count [ q ] = 2\n    return count [ G ]"}
{"old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME", "code": "def P ( str , T ) :\n    l = ( T * ( T + 1 ) ) // 2\n    X = 0\n    w = 0\n    e = 0\n    for r in range ( T ) :\n        if ( str [ r ] == 'a' ) :\n            X = r + 1\n            l -= min ( w , e )\n        elif ( str [ r ] == 'b' ) :\n            w = r + 1\n            l -= min ( X , e )\n        else :\n            e = r + 1\n            l -= min ( X , w )\n    return l"}
{"old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE", "code": "def M ( l ) :\n    x = 0\n    A = 0\n    for B in range ( len ( l ) ) :\n        if l [ ~ B ] == 'a' :\n            A = ( A + x )\n            x = ( x * 2 )\n        else :\n            x += 1\n    return A"}
{"old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K", "code": "def k ( r , N , H ) :\n    count = 0\n    for B in range ( 0 , N ) :\n        for z in range ( B + 1 , N ) :\n            if r [ B ] - r [ z ] == H or r [ z ] - r [ B ] == H :\n                count += 1\n    return count"}
{"old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K_1", "code": "def t ( a , B , J ) :\n    count = 0\n    a.sort ( )\n    D = 0\n    R = 0\n    while R < B :\n        if a [ R ] - a [ D ] == J :\n            count += 1\n            D += 1\n            R += 1\n        elif a [ R ] - a [ D ] > J :\n            D += 1\n        else :\n            R += 1\n    return count"}
{"old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X", "code": "def Q ( K , I , B , z , x ) :\n    count = 0\n    for g in range ( B ) :\n        for r in range ( z ) :\n            if K [ g ] + I [ r ] == x :\n                count = count + 1\n    return count"}
{"old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1", "code": "def o ( a , S , j , i , T ) :\n    count = 0\n    L = set ( )\n    for J in range ( j ) :\n        L.add ( a [ J ] )\n    for q in range ( i ) :\n        if T - S [ q ] in L :\n            count += 1\n    return count"}
{"old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY", "code": "def n ( K , A ) :\n    y = 0 ;\n    for f in range ( 0 , A ) :\n        for R in range ( f + 1 , A ) :\n            S = K [ f ] * K [ R ] ;\n            for P in range ( 0 , A ) :\n                if ( K [ P ] == S ) :\n                    y = y + 1 ;\n                    break ;\n    return y ;"}
{"old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1", "code": "def m ( y , H ) :\n    M = 0\n    P = set ( )\n    for U in range ( H ) :\n        P.add ( y [ U ] )\n    for U in range ( H ) :\n        for D in range ( U + 1 , H ) :\n            V = y [ U ] * y [ D ]\n            if V in ( P ) :\n                M += 1\n    return M"}
{"old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING", "code": "def F ( str , T ) :\n    N = [ [ 0 for A in range ( T ) ] for n in range ( T ) ]\n    q = [ [ False for A in range ( T ) ] for n in range ( T ) ]\n    for h in range ( T ) :\n        q [ h ] [ h ] = True\n    for h in range ( T - 1 ) :\n        if ( str [ h ] == str [ h + 1 ] ) :\n            q [ h ] [ h + 1 ] = True\n            N [ h ] [ h + 1 ] = 1\n    for L in range ( 2 , T ) :\n        for h in range ( T - L ) :\n            o = L + h ;\n            if ( str [ h ] == str [ o ] and q [ h + 1 ] [ o - 1 ] ) :\n                q [ h ] [ o ] = True\n            if ( q [ h ] [ o ] == True ) :\n                N [ h ] [ o ] = ( N [ h ] [ o - 1 ] + N [ h + 1 ] [ o ] + 1 - N [ h + 1 ] [ o - 1 ] )\n            else :\n                N [ h ] [ o ] = ( N [ h ] [ o - 1 ] + N [ h + 1 ] [ o ] - N [ h + 1 ] [ o - 1 ] )\n    return N [ 0 ] [ T - 1 ]"}
{"old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING", "code": "def I ( str ) :\n    b = len ( str )\n    B = [ [ 0 for j in range ( b + 2 ) ] for l in range ( b + 2 ) ]\n    for j in range ( b ) :\n        B [ j ] [ j ] = 1\n    for q in range ( 2 , b + 1 ) :\n        for j in range ( b ) :\n            Q = q + j - 1\n            if ( Q < b ) :\n                if ( str [ j ] == str [ Q ] ) :\n                    B [ j ] [ Q ] = ( B [ j ] [ Q - 1 ] + B [ j + 1 ] [ Q ] + 1 )\n                else :\n                    B [ j ] [ Q ] = ( B [ j ] [ Q - 1 ] + B [ j + 1 ] [ Q ] - B [ j + 1 ] [ Q - 1 ] )\n    return B [ 0 ] [ b - 1 ]"}
{"old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1", "code": "def L ( W , K ) :\n    count = [ 0 ] * ( K + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    if W [ 0 ] == '0' :\n        return 0\n    for n in range ( 2 , K + 1 ) :\n        count [ n ] = 0\n        if ( W [ n - 1 ] > '0' ) :\n            count [ n ] = count [ n - 1 ]\n        if ( W [ n - 2 ] == '1' or ( W [ n - 2 ] == '2' and W [ n - 1 ] < '7' ) ) :\n            count [ n ] += count [ n - 2 ]\n    return count [ K ]"}
{"old_id": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3", "code": "def z ( o , Q ) :\n    s = [ 0 , 0 , 0 ]\n    M = 0\n    for Y in range ( 0 , Q ) :\n        s [ o [ Y ] % 3 ] += 1\n    M += ( ( s [ 0 ] * ( s [ 0 ] - 1 ) ) >> 1 )\n    M += s [ 1 ] * s [ 2 ]\n    M += ( s [ 0 ] * ( s [ 0 ] - 1 ) * ( s [ 0 ] - 2 ) ) / 6\n    M += ( s [ 1 ] * ( s [ 1 ] - 1 ) * ( s [ 1 ] - 2 ) ) / 6\n    M += ( ( s [ 2 ] * ( s [ 2 ] - 1 ) * ( s [ 2 ] - 2 ) ) / 6 )\n    M += s [ 0 ] * s [ 1 ] * s [ 2 ]\n    return M"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1", "code": "def V ( i , Z ) :\n    count = [ [ 0 for T in range ( i ) ] for R in range ( Z ) ]\n    for B in range ( i ) :\n        count [ B ] [ 0 ] = 1 ;\n    for U in range ( Z ) :\n        count [ 0 ] [ U ] = 1 ;\n    for B in range ( 1 , i ) :\n        for U in range ( Z ) :\n            count [ B ] [ U ] = count [ B - 1 ] [ U ] + count [ B ] [ U - 1 ]\n    return count [ i - 1 ] [ Z - 1 ]"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2", "code": "def a ( l , H ) :\n    B = [ 0 for e in range ( H ) ]\n    B[0]=1\n    for e in range ( l  ) :\n        for b in range ( 1 , H ) :\n            B [ b ] += B [ b - 1 ]\n    return B [ H - 1 ]"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3", "code": "def F ( L , q ) :\n    for N in range ( q , ( L + q - 1 ) ) :\n        K *= N\n        K //= ( N - q + 1 )\n    return K"}
{"old_id": "COUNT_ROTATIONS_DIVISIBLE_4", "code": "def J ( u ) :\n    N = len ( u )\n    if ( N == 1 ) :\n        W = ( int ) ( u [ 0 ] )\n        if ( W % 4 == 0 ) :\n            return 1\n        return 0\n    count = 0\n    for m in range ( 0 , N - 1 ) :\n        w = ( int ) ( u [ m ] ) * 10 + ( int ) ( u [ m + 1 ] )\n        if ( w % 4 == 0 ) :\n            count = count + 1\n    w = ( int ) ( u [ N - 1 ] ) * 10 + ( int ) ( u [ 0 ] )\n    if ( w % 4 == 0 ) :\n        count = count + 1\n    return count"}
{"old_id": "COUNT_ROTATIONS_DIVISIBLE_8", "code": "def p ( E ) :\n    l = len ( E )\n    count = 0\n    if ( l == 1 ) :\n        H = int ( E [ 0 ] )\n        if ( H % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) :\n        k = int ( E [ 0 ] ) * 10 + int ( E [ 1 ] )\n        u = int ( E [ 1 ] ) * 10 + int ( E [ 0 ] )\n        if ( k % 8 == 0 ) :\n            count += 1\n        if ( u % 8 == 0 ) :\n            count += 1\n        return count\n    w = 0\n    for i in range ( 0 , ( l - 2 ) ) :\n        w = ( int ( E [ i ] ) * 100 + int ( E [ i + 1 ] ) * 10 + int ( E [ i + 2 ] ) )\n        if ( w % 8 == 0 ) :\n            count += 1\n    w = ( int ( E [ l - 1 ] ) * 100 + int ( E [ 0 ] ) * 10 + int ( E [ 1 ] ) )\n    if ( w % 8 == 0 ) :\n        count += 1\n    w = ( int ( E [ l - 2 ] ) * 100 + int ( E [ l - 1 ] ) * 10 + int ( E [ 0 ] ) )\n    if ( w % 8 == 0 ) :\n        count += 1\n    return count"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_1", "code": "def w ( p ) :\n    if ( p == 0 ) :\n        return 0\n    else :\n        return ( p & 1 ) + w ( p >> 1 )"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_2", "code": "def L ( Y ) :\n    count = 0\n    while ( Y ) :\n        Y &= ( Y - 1 )\n        count += 1\n    return count"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_3", "code": "def E ( U ) :\n    if ( U == 0 ) :\n        return 0\n    else :\n        return 1 + E ( U & ( U - 1 ) )"}
{"old_id": "COUNT_SORTED_ROWS_MATRIX", "code": "def f ( Q , N , M ) :\n    H = 0\n    for v in range ( N ) :\n        A = 0\n        for A in range ( M - 1 ) :\n            if Q [ v ] [ A + 1 ] <= Q [ v ] [ A ] :\n                break\n        if A == M - 2 :\n            H += 1\n    for v in range ( 0 , N ) :\n        A = 0\n        for A in range ( M - 1 , 0 , - 1 ) :\n            if Q [ v ] [ A - 1 ] <= Q [ v ] [ A ] :\n                break\n        if M > 1 and A == 1 :\n            H += 1\n    return H"}
{"old_id": "COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1", "code": "def F ( l ) :\n    return ( 1 + ( l * 2 ) + ( l * ( ( l * l ) - 1 ) // 2 ) )"}
{"old_id": "COUNT_STRINGS_WITH_CONSECUTIVE_1S", "code": "def Z ( w ) :\n    U = [ 0 ] * w\n    P = [ 0 ] * w\n    U [ 0 ] = P [ 0 ] = 1\n    for d in range ( 1 , w ) :\n        U [ d ] = U [ d - 1 ] + P [ d - 1 ]\n        P [ d ] = U [ d - 1 ]\n    return ( 1 << w ) - U [ w - 1 ] - P [ w - 1 ]"}
{"old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS", "code": "def n ( L , F ) :\n    difference = 0\n    B = 0\n    k = [ 0 ] * ( F + 1 )\n    q = [ 0 ] * ( F + 1 )\n    k [ 0 ] = 1\n    for t in range ( F ) :\n        if ( L [ t ] & 1 == 1 ) :\n            difference = difference + 1\n        else :\n            difference = difference - 1\n        if ( difference < 0 ) :\n            B += q [ - difference ]\n            q [ - difference ] = q [ - difference ] + 1\n        else :\n            B += k [ difference ]\n            k [ difference ] = k [ difference ] + 1\n    return B"}
{"old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS", "code": "def P ( L ) :\n    n = 0\n    e = len ( L )\n    for K in range ( e ) :\n        for N in range ( K , e ) :\n            if ( L [ K ] == L [ N ] ) :\n                n = n + 1\n    return n"}
{"old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N", "code": "def m ( P ) :\n    s = 0\n    Z = 0\n    while ( ( 1 << s ) <= P ) :\n        T = 0\n        y = 1 << s\n        for V in range ( 0 , P + 1 ) :\n            Z += T\n            if y == 1 :\n                T = not T\n                y = 1 << s\n            else :\n                y -= 1\n        s += 1\n    return Z"}
{"old_id": "COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER", "code": "def b ( h ) :\n    count = 0\n    A = 5\n    while ( h / A >= 1 ) :\n        count += int ( h / A )\n        A *= 5\n    return int ( count )"}
{"old_id": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS", "code": "def M ( Y ) :\n    j = [ [ 0 ] * ( Y + 1 ) for h in range ( 2 ) ]\n    j [ 0 ] [ 1 ] = 1\n    j [ 1 ] [ 1 ] = 2\n    for h in range ( 2 , Y + 1 ) :\n        j [ 0 ] [ h ] = j [ 0 ] [ h - 1 ] + j [ 1 ] [ h - 1 ]\n        j [ 1 ] [ h ] = ( j [ 0 ] [ h - 1 ] * 2 + j [ 1 ] [ h - 1 ] )\n    return j [ 0 ] [ Y ] + j [ 1 ] [ Y ]"}
{"old_id": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS", "code": "def p ( R ) :\n    v = 2 * R\n    f = [ 0 ] * ( v + 1 )\n    f [ 0 ] = 1\n    f [ 2 ] = 1\n    for i in range ( 4 , v + 1 , 2 ) :\n        for T in range ( 0 , i - 1 , 2 ) :\n            f [ i ] += ( f [ T ] * f [ i - 2 - T ] )\n    return int ( f [ v ] )"}
{"old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS", "code": "def l ( str , L ) :\n    F = dict ( )\n    for R in range ( L ) :\n        F [ str [ R ] ] = F.get ( str [ R ] , 0 ) + 1\n    I = 0\n    for R in F.values ( ) :\n        if R == 2 :\n            I += 1\n    return I"}
{"old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD", "code": "def Q ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) :\n        return count\n    if ( str [ 0 ] == str [ 1 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    for m in range ( 1 , len - 1 ) :\n        if ( str [ m ] == str [ m - 1 ] and str [ m ] == str [ m + 1 ] ) :\n            count *= 1\n        elif ( str [ m ] == str [ m - 1 ] or str [ m ] == str [ m + 1 ] or str [ m - 1 ] == str [ m + 1 ] ) :\n            count *= 2\n        else :\n            count *= 3\n    if ( str [ len - 1 ] == str [ len - 2 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    return count"}
{"old_id": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES", "code": "def t ( T , N ) :\n    f = T\n    for g in range ( 1 , N ) :\n        T += f\n    return T"}
{"old_id": "C_PROGRAM_FACTORIAL_NUMBER", "code": "def d ( y ) :\n    return 1 if ( y == 1 or y == 0 ) else y * d ( y - 1 )"}
{"old_id": "C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1", "code": "def L ( d , J ) :\n    return sorted(d[:J], reverse=False)[J-1]"}
{"old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER", "code": "def O ( str ) :\n    Q = 256\n    count = [ 0 ] * Q\n    for j in range ( len ( str ) ) :\n        count [ ord ( str [ j ] ) ] += 1\n    Y , R = 0 , 0\n    for j in range ( Q ) :\n        if count [ j ] > count [ Y ] :\n            R = Y\n            Y = j\n        elif ( count [ j ] > count [ R ] and count [ j ] != count [ Y ] ) :\n            R = j\n    return chr ( R )"}
{"old_id": "DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS", "code": "def m ( j ) :\n    if ( j == 0 ) :\n        return \"0\"\n    bin = \"\"\n    while ( j > 0 ) :\n        if ( j & 1 == 0 ) :\n            bin = '0' + bin\n        else :\n            bin = '1' + bin\n        j = j >> 1\n    return bin"}
{"old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING", "code": "def S ( A ) :\n    s = [ ]\n    h = [ ]\n    a = \"\"\n    D = \"\"\n    for Y in range ( len ( A ) ) :\n        count = 0\n        if ( A [ Y ] >= '0' and A [ Y ] <= '9' ) :\n            while ( A [ Y ] >= '0' and A [ Y ] <= '9' ) :\n                count = count * 10 + ord ( A [ Y ] ) - ord ( '0' )\n                Y += 1\n            Y -= 1\n            s.append ( count )\n        elif ( A [ Y ] == ']' ) :\n            a = \"\"\n            count = 0\n            if ( len ( s ) != 0 ) :\n                count = s [ - 1 ]\n                s.pop ( )\n            while ( len ( h ) != 0 and h [ - 1 ] != '[' ) :\n                a = h [ - 1 ] + a\n                h.pop ( )\n            if ( len ( h ) != 0 and h [ - 1 ] == '[' ) :\n                h.pop ( )\n            for P in range ( count ) :\n                D = D + a\n            for P in range ( len ( D ) ) :\n                h.append ( D [ P ] )\n            D = \"\"\n        elif ( A [ Y ] == '[' ) :\n            if ( A [ Y - 1 ] >= '0' and A [ Y - 1 ] <= '9' ) :\n                h.append ( A [ Y ] )\n            else :\n                h.append ( A [ Y ] )\n                s.append ( 1 )\n        else :\n            h.append ( A [ Y ] )\n    while len ( h ) != 0 :\n        D = h [ - 1 ] + D\n        h.pop ( )\n    return D"}
{"old_id": "DELANNOY_NUMBER_1", "code": "def v ( L , f ) :\n    M = [ [ 0 for l in range ( L + 1 ) ] for l in range ( f + 1 ) ]\n    for T in range ( f + 1 ) :\n        M [ 0 ] [ T ] = 1\n    for T in range ( f + 1 ) :\n        M [ T ] [ 0 ] = 1\n    for T in range ( 1 , f + 1 ) :\n        for d in range ( 1 , L + 1 ) :\n            M [ T ] [ d ] = M [ T - 1 ] [ d ] + M [ T - 1 ] [ d - 1 ] + M [ T ] [ d - 1 ]\n    return M [ f ] [ L ]"}
{"old_id": "DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS", "code": "def t ( N , j ) :\n    return ( ( N ^ j ) < 0 )"}
{"old_id": "DIAGONALLY_DOMINANT_MATRIX", "code": "def l ( p , Y ) :\n    for J in range ( 0 , Y ) :\n        sum = 0\n        for m in range ( 0 , Y ) :\n            sum = sum + abs ( p [ J ] [ m ] )\n        sum = sum - abs ( p [ J ] [ J ] )\n        if ( abs ( p [ J ] [ J ] ) < sum ) :\n            return False\n    return True"}
{"old_id": "DICE_THROW_PROBLEM", "code": "def u ( Y , i , v ) :\n    q = [ [ 0 ] * ( v + 1 ) for C in range ( i + 1 ) ]\n    for Q in range ( 1 , min ( Y + 1 , v + 1 ) ) :\n        q [ 1 ] [ Q ] = 1\n    for C in range ( 2 , i + 1 ) :\n        for Q in range ( 1 , v + 1 ) :\n            for K in range ( 1 , min ( Y + 1 , Q ) ) :\n                q [ C ] [ Q ] += q [ C - 1 ] [ Q - K ]\n    return q [ - 1 ] [ - 1 ]"}
{"old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY", "code": "def q ( e , V ) :\n    e.sort ( )\n    count = 0\n    G = 0\n    x = V\n    for a in range ( 0 , ( V - 1 ) ) :\n        if e [ a ] == e [ a + 1 ] :\n            count += 1\n            continue\n        else :\n            G = max ( G , count )\n            x = min ( x , count )\n            count = 0\n    return G - x"}
{"old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1", "code": "def N ( X , o ) :\n    U = n ( lambda : 0 )\n    for Z in range ( o ) :\n        U [ X [ Z ] ] += 1\n    F = 0\n    h = o\n    for a , values in U.items ( ) :\n        F = max ( F , values )\n        h = min ( h , values )\n    return F - h"}
{"old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M", "code": "def h ( T , R ) :\n    q = W.o ( ( T + 2 , T + 2 ) )\n    q [ 0 ] [ T + 1 ] = 1\n    for j in range ( T , R - 1 , - 1 ) :\n        for U in range ( T + 1 ) :\n            q [ U ] [ j ] = q [ U ] [ j + 1 ]\n            if ( U - j >= 0 ) :\n                q [ U ] [ j ] = ( q [ U ] [ j ] + q [ U - j ] [ j ] )\n    return q [ T ] [ R ]"}
{"old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B", "code": "def Z ( L , Y , f ) :\n    e = int ( math.b ( f ) + 1 )\n    R = 1\n    for o in range ( e ) :\n        R = ( R * L ) % f\n    n = [ 0 ] * f\n    N = R\n    for o in range ( 1 , e + 1 ) :\n        if ( n [ N ] == 0 ) :\n            n [ N ] = o\n        N = ( N * R ) % f\n    N = Y\n    for o in range ( e + 1 ) :\n        if ( n [ N ] > 0 ) :\n            v = n [ N ] * e - o\n            if ( v < f ) :\n                return v\n        N = ( N * L ) % f\n    return - 1"}
{"old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1", "code": "def f ( V , i , R ) :\n    j = S ( lambda : 0 )\n    for g in range ( i ) :\n        j [ V [ g ] ] += 1\n    for F , values in j.items ( ) :\n        if values > 2 * R :\n            return False\n    return True"}
{"old_id": "DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION", "code": "def m ( q , T , w ) :\n    if ( T <= q - w + 1 ) :\n        return T + w - 1\n    T = T - ( q - w + 1 )\n    if ( T % q == 0 ) :\n        return q\n    else :\n        return T % q"}
{"old_id": "DIVIDE_LARGE_NUMBER_REPRESENTED_STRING", "code": "def X ( p , h ) :\n    A = \"\"\n    w = 0\n    b = ord ( p [ w ] ) - ord ( '0' )\n    while ( b < h ) :\n        b = ( b * 10 + ord ( p [ w + 1 ] ) - ord ( '0' ) )\n        w += 1\n    while ( ( len ( p ) ) > w ) :\n        A += chr ( math.Z ( b // h ) + ord ( '0' ) )\n        b = ( ( b % h ) * 10 + ord ( p [ w + 1 ] ) - ord ( '0' ) )\n        w += 1\n    A += chr ( math.Z ( b // h ) + ord ( '0' ) )\n    if ( len ( A ) == 0 ) :\n        return \"0\"\n    return A"}
{"old_id": "DIVISIBILITY_9_USING_BITWISE_OPERATORS", "code": "def h ( Y ) :\n    if ( Y == 0 or Y == 9 ) :\n        return True\n    if ( Y < 9 ) :\n        return False\n    return h ( ( int ) ( Y >> 3 ) - ( int ) ( Y & 7 ) )"}
{"old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER", "code": "def r ( h ) :\n    if ( len ( h ) >= 3 ) :\n        C = int ( h [ len ( h ) - 1 ] )\n        if ( C % 2 != 0 ) :\n            return False\n        V = int ( h [ len ( h ) - 2 ] )\n        sum = 0\n        for a in range ( 0 , len ( h ) ) :\n            sum += int ( h [ a ] )\n        return ( sum % 3 == 0 and ( V * 10 + C ) % 4 == 0 )\n    else :\n        v = int ( h )\n        return ( v % 12 == 0 )"}
{"old_id": "DIVISIBILITY_BY_7", "code": "def l ( P ) :\n    if P < 0 :\n        return l ( - P )\n    if ( P == 0 or P == 7 ) :\n        return True\n    if ( P < 10 ) :\n        return False\n    return l ( P // 10 - 2 * ( P - P // 10 * 10 ) )"}
{"old_id": "DOUBLE_FACTORIAL_1", "code": "def k ( N ) :\n    l = 1\n    for y in range ( N , - 1 , - 2 ) :\n        if ( y == 0 or y == 1 ) :\n            return l\n        else :\n            l *= y\n    return l;"}
{"old_id": "DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM", "code": "def f ( K , v , l ) :\n    if ( l <= 0 ) :\n        return 0\n    return max ( K [ l - 1 ] + f ( K , v , ( l - 2 ) ) , v [ l - 1 ] + f ( K , v , ( l - 1 ) ) )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM", "code": "def w ( d , u , M , S ) :\n    if S == 0 or d == 0 :\n        return 0\n    if ( u [ S - 1 ] > d ) :\n        return w ( d , u , M , S - 1 )\n    else :\n        return max ( M [ S - 1 ] + w ( d - u [ S - 1 ] , u , M , S - 1 ) , w ( d , u , M , S - 1 ) )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1", "code": "def P ( c , J ) :\n    h = [ [ 0 for L in range ( J + 1 ) ] for L in range ( c + 1 ) ]\n    for k in range ( 1 , c + 1 ) :\n        h [ k ] [ 1 ] = 1\n        h [ k ] [ 0 ] = 0\n    for G in range ( 1 , J + 1 ) :\n        h [ 1 ] [ G ] = G\n    for k in range ( 2 , c + 1 ) :\n        for G in range ( 2 , J + 1 ) :\n            h [ k ] [ G ] = m\n            for L in range ( 1 , G + 1 ) :\n                O = 1 + max ( h [ k - 1 ] [ L - 1 ] , h [ k ] [ G - L ] )\n                if O < h [ k ] [ G ] :\n                    h [ k ] [ G ] = O\n    return h [ c ] [ J ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE", "code": "def q ( v ) :\n    d = len ( v )\n    P = [ [ 0 for g in range ( d ) ] for g in range ( d ) ]\n    for F in range ( d ) :\n        P [ F ] [ F ] = 1\n    for H in range ( 2 , d + 1 ) :\n        for F in range ( d - H + 1 ) :\n            U = F + H - 1\n            if v [ F ] == v [ U ] and H == 2 :\n                P [ F ] [ U ] = 2\n            elif v [ F ] == v [ U ] :\n                P [ F ] [ U ] = P [ F + 1 ] [ U - 1 ] + 2\n            else :\n                P [ F ] [ U ] = max ( P [ F ] [ U - 1 ] , P [ F + 1 ] [ U ] ) ;\n    return P [ 0 ] [ d - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE", "code": "def w ( S , u ) :\n    max = 0\n    v = [ 0 for O in range ( u ) ]\n    for d in range ( u ) :\n        v [ d ] = S [ d ]\n    for d in range ( 1 , u ) :\n        for m in range ( d ) :\n            if ( S [ d ] > S [ m ] and v [ d ] < v [ m ] + S [ d ] ) :\n                v [ d ] = v [ m ] + S [ d ]\n    for d in range ( u ) :\n        if max < v [ d ] :\n            max = v [ d ]\n    return max"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE", "code": "def q ( L , A ) :\n    e = [ 1 for E in range ( A + 1 ) ]\n    for E in range ( 1 , A ) :\n        for g in range ( 0 , E ) :\n            if ( ( L [ E ] > L [ g ] ) and ( e [ E ] < e [ g ] + 1 ) ) :\n                e [ E ] = e [ g ] + 1\n    X = [ 1 for E in range ( A + 1 ) ]\n    for E in reversed ( range ( A - 1 ) ) :\n        for g in reversed ( range ( E - 1 , A ) ) :\n            if ( L [ E ] > L [ g ] and X [ E ] < X [ g ] + 1 ) :\n                X [ E ] = X [ g ] + 1\n    K = e [ 0 ] + X [ 0 ] - 1\n    for E in range ( 1 , A ) :\n        K = max ( ( e [ E ] + X [ E ] - 1 ) , K )\n    return K"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING", "code": "def J ( str ) :\n    I = len ( str )\n    B = [ [ 0 for Z in range ( I ) ] for Z in range ( I ) ]\n    l = [ [ False for Z in range ( I ) ] for Z in range ( I ) ]\n    c = 0\n    Q = 0\n    n = 0\n    for Z in range ( I ) :\n        l [ Z ] [ Z ] = True\n        B [ Z ] [ Z ] = 0\n    for n in range ( 2 , I + 1 ) :\n        for Z in range ( I - n + 1 ) :\n            c = Z + n - 1\n            if n == 2 :\n                l [ Z ] [ c ] = ( str [ Z ] == str [ c ] )\n            else :\n                l [ Z ] [ c ] = ( ( str [ Z ] == str [ c ] ) and l [ Z + 1 ] [ c - 1 ] )\n            if l [ Z ] [ c ] == True :\n                B [ Z ] [ c ] = 0\n            else :\n                B [ Z ] [ c ] = 100000000\n                for Q in range ( Z , c ) :\n                    B [ Z ] [ c ] = min ( B [ Z ] [ c ] , B [ Z ] [ Q ] + B [ Q + 1 ] [ c ] + 1 )\n    return B [ 0 ] [ I - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME", "code": "def L ( str , R , U ) :\n    if ( R > U ) :\n        return sys.O\n    if ( R == U ) :\n        return 0\n    if ( R == U - 1 ) :\n        return 0 if ( str [ R ] == str [ U ] ) else 1\n    if ( str [ R ] == str [ U ] ) :\n        return L ( str , R + 1 , U - 1 )\n    else :\n        return ( min ( L ( str , R , U - 1 ) , L ( str , R + 1 , U ) ) + 1 )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1", "code": "def t ( Q ) :\n    if ( Q == 2 or Q == 3 ) :\n        return ( Q - 1 )\n    l = 1\n    while ( Q > 4 ) :\n        Q -= 3\n        l *= 3\n    return ( Q * l )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM", "code": "def p ( F , v , e ) :\n    Z = [ [ 0 for U in range ( e + 1 ) ] for U in range ( e + 1 ) ]\n    u = [ [ 0 for U in range ( e + 1 ) ] for U in range ( e + 1 ) ]\n    for U in range ( e ) :\n        if F [ U ] == 'F' :\n            Z [ U ] [ U ] = 1\n        else :\n            Z [ U ] [ U ] = 0\n        if F [ U ] == 'T' :\n            u [ U ] [ U ] = 1\n        else :\n            u [ U ] [ U ] = 0\n    for z in range ( 1 , e ) :\n        U = 0\n        for l in range ( z , e ) :\n            u [ U ] [ l ] = Z [ U ] [ l ] = 0\n            for x in range ( z ) :\n                X = U + x\n                K = u [ U ] [ X ] + Z [ U ] [ X ]\n                m = u [ X + 1 ] [ l ] + Z [ X + 1 ] [ l ]\n                if v [ X ] == '&' :\n                    u [ U ] [ l ] += u [ U ] [ X ] * u [ X + 1 ] [ l ]\n                    Z [ U ] [ l ] += ( K * m - u [ U ] [ X ] * u [ X + 1 ] [ l ] )\n                if v [ X ] == '|' :\n                    Z [ U ] [ l ] += Z [ U ] [ X ] * Z [ X + 1 ] [ l ]\n                    u [ U ] [ l ] += ( K * m - Z [ U ] [ X ] * Z [ X + 1 ] [ l ] )\n                if v [ X ] == '^' :\n                    u [ U ] [ l ] += ( Z [ U ] [ X ] * u [ X + 1 ] [ l ] + u [ U ] [ X ] * Z [ X + 1 ] [ l ] )\n                    Z [ U ] [ l ] += ( u [ U ] [ X ] * u [ X + 1 ] [ l ] + Z [ U ] [ X ] * Z [ X + 1 ] [ l ] )\n            U += 1\n    return u [ 0 ] [ e - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1", "code": "def c ( j , W) :\n    c = [ 1 ] * W\n    for P in range ( 1 , W ) :\n        for l in range ( 0 , P ) :\n            if j [ P ] > j [ l ] and c [ P ] < c [ l ] + 1 :\n                c [ P ] = c [ l ] + 1\n    Z = 0\n    for P in range ( W ) :\n        Z = max ( Z , c [ P ] )\n    return Z"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION", "code": "def M ( O , q , m ) :\n    if q == m :\n        return 0\n    Q = sys.z\n    for c in range ( q , m ) :\n        count = ( M ( O , q , c ) + M ( O , c + 1 , m ) + O [ q - 1 ] * O [ c ] * O [ m ] )\n        if count < Q :\n            Q = count\n    return Q"}
{"old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1", "code": "def g ( set , N , sum ) :\n    M = ( [ [ False for m in range ( sum + 1 ) ] for m in range ( N + 1 ) ] )\n    for m in range ( N + 1 ) :\n        M [ m ] [ 0 ] = True\n    for m in range ( 1 , sum + 1 ) :\n        M [ 0 ] [ m ] = False\n    for m in range ( 1 , N + 1 ) :\n        for j in range ( 1 , sum + 1 ) :\n            if j < set [ m - 1 ] :\n                M [ m ] [ j ] = M [ m - 1 ] [ j ]\n            if j >= set [ m - 1 ] :\n                M [ m ] [ j ] = ( M [ m - 1 ] [ j ] or M [ m - 1 ] [ j - set [ m - 1 ] ] )\n    return M [ N ] [ sum ]"}
{"old_id": "EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_IS_1", "code": "def G ( z , B , H ) :\n    k = 0\n    while ( k <= B - 1 ) :\n        if ( z [ k ] == H ) :\n            return k\n        k += abs ( z [ k ] - H )\n    return - 1"}
{"old_id": "EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10", "code": "def S ( j ) :\n    return ( j % 15 == 0 )"}
{"old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY", "code": "def t ( Q , d ) :\n    count = 0\n    Q = Q[:d]\n    Q.sort ( )\n    for S in range ( 0 , d - 1 ) :\n        if ( Q [ S ] != Q [ S + 1 ] and Q [ S ] != Q [ S + 1 ] - 1 ) :\n            count += Q [ S + 1 ] - Q [ S ] - 1\n    return count"}
{"old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1", "code": "def x ( B , N ) :\n    v = dict ( )\n    count , l , L = 0 , - 10 ** 9 , 10 ** 9\n    for k in range ( N ) :\n        v [ B [ k ] ] = 1\n        if ( B [ k ] < L ) :\n            L = B [ k ]\n        if ( B [ k ] > l ) :\n            l = B [ k ]\n    for k in range ( L , l + 1 ) :\n        if k not in v.keys ( ) :\n            count += 1\n    return count"}
{"old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY", "code": "def d ( c , e) :\n    C = 0\n    U = 0\n    for f in range ( e ) :\n        C = 0\n        U = 0\n        for J in range ( f ) :\n            C += c [ J ]\n        for J in range ( f + 1 , e ) :\n            U += c [ J ]\n        if C == U :\n            return f\n    return - 1"}
{"old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1", "code": "def b ( o ,S) :\n    a = sum ( o )\n    P = 0\n    for w , A in enumerate ( o ) :\n        a -= A\n        if P == a :\n            return w\n        P += A\n    return - 1"}
{"old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS", "code": "def V ( C , m ) :\n    C = C % m\n    for D in range ( 2 , m , 1 ) :\n        if ( ( D * D ) % m == C ) :\n            return True\n    return False"}
{"old_id": "EVEN_FIBONACCI_NUMBERS_SUM", "code": "def k ( a ) :\n    if ( a < 2 ) :\n        return 0\n    F = 0\n    c = 2\n    t = F + c\n    while ( c <= a ) :\n        p = 4 * c + F\n        if ( p > a ) :\n            break\n        F = c\n        c = p\n        t = t + c\n    return t"}
{"old_id": "FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM", "code": "def f ( C , E ) :\n    c = 0\n    while ( E > 0 ) :\n        if ( E & 1 ) :\n            c = c + C\n        C = C << 1\n        E = E >> 1\n    return c"}
{"old_id": "FIBONACCI_MODULO_P", "code": "def x ( C ) :\n    F = 1\n    O = 1\n    c = 2\n    next = 1\n    while ( next ) :\n        next = ( F + O ) % C\n        F = O\n        O = next\n        c = c + 1\n    return c"}
{"old_id": "FINDING_POWER_PRIME_NUMBER_P_N", "code": "def p ( C , Y ) :\n    M = 0\n    c = Y\n    while ( c <= C ) :\n        M += int(C / c)\n        c = c * Y\n    return M"}
{"old_id": "FINDING_POWER_PRIME_NUMBER_P_N_1", "code": "def J ( C , b ) :\n    r = 0\n    z = b\n    while ( z <= C ) :\n        r += C / z\n        z = z * b\n    return int ( r )"}
{"old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE", "code": "def a ( B , G ) :\n    y = [ 0 ] * ( 2 * G + 1 )\n    for t in range ( G ) :\n        y [ t ] = B [ t ]\n    for t in range ( G ) :\n        y [ G + t ] = B [ t ]\n    L = 0\n    for t in range ( 1 , G ) :\n        H = 0\n        i = 0\n        for D in range ( t , t + G ) :\n            if y [ D ] != B [ i ] :\n                H += 1\n                i = i + 1\n        if H == G :\n            return G\n        L = max ( L , H )\n    return L"}
{"old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE", "code": "def C ( H , Q , sum ) :\n    for A in range ( 0 , Q - 2 ) :\n        for K in range ( A + 1 , Q - 1 ) :\n            for i in range ( K + 1 , Q ) :\n                if H [ A ] + H [ K ] + H [ i ] == sum :\n                    print ( \"Triplet is\" , H [ A ] , \", \" , H [ K ] , \", \" , H [ i ] )\n                    return True\n    return False"}
{"old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT", "code": "def i ( string ) :\n    e = [ ]\n    for B in string :\n        if B == ')' :\n            w = e.pop ( )\n            C = 0\n            while w != '(' :\n                C += 1\n                w = e.pop ( )\n            if C < 1 :\n                return True\n        else :\n            e.append ( B )\n    return False"}
{"old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X", "code": "def r ( G ) :\n    O = 1\n    a = 1\n    for O in range ( 1 , G ) :\n        a = a * O\n        if ( a % G == 0 ) :\n            break\n    return O"}
{"old_id": "FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN", "code": "def z ( N , G ) :\n    S = ( N + G ) / 2\n    Q = math.k ( N * G )\n    n = ( Q * Q ) / S\n    return n"}
{"old_id": "FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME", "code": "def c ( I ) :\n    if ( I <= 1 ) :\n        return I\n    J = 0\n    t = 1\n    Z = 1\n    B = 1\n    while ( Z < I ) :\n        Z = J + t\n        B = B + 1\n        J = t\n        t = Z\n    return B"}
{"old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY", "code": "def v ( S , o , Z ) :\n    for H in range ( 0 , Z ) :\n        if ( S [ H ] != o [ H ] ) :\n            return H\n    return Z"}
{"old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D", "code": "def F ( p , B ) :\n    C = False\n    p = p[:B]\n    p.sort ( )\n    for V in range ( B - 1 , - 1 , - 1 ) :\n        for w in range ( 0 , B ) :\n            if ( V == w ) :\n                continue\n            for a in range ( w + 1 , B ) :\n                if ( V == a ) :\n                    continue\n                for O in range ( a + 1 , B ) :\n                    if ( V == O ) :\n                        continue\n                    if ( p [ V ] == p [ w ] + p [ a ] + p [ O ] ) :\n                        C = True\n                        return p [ V ]\n    if ( C == False ) :\n        return - 1"}
{"old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1", "code": "def z ( j , W ) :\n    h = dict ( )\n    for x in range ( W - 1 ) :\n        for o in range ( x + 1 , W ) :\n            h [ j [ x ] + j [ o ] ] = ( x , o )\n    U = - 10 ** 9\n    for x in range ( W - 1 ) :\n        for o in range ( x + 1 , W ) :\n            O = abs ( j [ x ] - j [ o ] )\n            if O in h.keys ( ) :\n                s = h [ O ]\n                if ( s [ 0 ] != x and s [ 0 ] != o and s [ 1 ] != x and s [ 1 ] != o ) :\n                    U = max ( U , max ( j [ x ] , j [ o ] ) )\n    return U"}
{"old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER", "code": "def u ( I ) :\n    x = - 1\n    while I % 2 == 0 :\n        x = 2\n        I >>= 1\n    for Y in range ( 3 , int ( math.W ( I ) ) + 1 , 2 ) :\n        while I % Y == 0 :\n            x = Y\n            I = I / Y\n    if I > 2 :\n        x = I\n    return int ( x )"}
{"old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B", "code": "def c ( b , r ) :\n    w = 1\n    if ( b == r ) :\n        return 1\n    elif ( ( r - b ) >= 5 ) :\n        return 0\n    else :\n        for X in range ( b + 1 , r + 1 ) :\n            w = ( w * ( X % 10 ) ) % 10\n        return w % 10"}
{"old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH", "code": "def V ( x , j , S ) :\n    if S > j :\n        return - 1\n    D = [ 0 ] * j\n    D [ 0 ] = x [ 0 ]\n    for X in range ( 1 , j ) :\n        D [ X ] = D [ X - 1 ] + x [ X ]\n    m = D [ S - 1 ]\n    w = S - 1\n    for X in range ( S , j ) :\n        J = D [ X ] - D [ X - S ]\n        if J > m :\n            m = J\n            w = X\n    return w - S + 1"}
{"old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1", "code": "def q ( E , u , K ) :\n    if ( K > u ) :\n        return - 1\n    sum = E [ 0 ]\n    for Q in range ( 1 , K ) :\n        sum += E [ Q ]\n    D = sum\n    G = K - 1\n    for Q in range ( K , u ) :\n        sum = sum + E [ Q ] - E [ Q - K ]\n        if ( sum > D ) :\n            D = sum\n            G = Q\n    return G - K + 1"}
{"old_id": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S", "code": "def h ( s , M , T , Y ) :\n    W = [ [ 0 for e in range ( T + 1 ) ] for y in range ( Y + 1 ) ]\n    for e in range ( 1 , Y + 1 , 1 ) :\n        for y in range ( e , T + 1 , 1 ) :\n            W [ e ] [ y ] = max ( ( W [ e - 1 ] [ y - 1 ] + ( s [ y - 1 ] * M [ e - 1 ] ) ) , W [ e ] [ y - 1 ] )\n    return W [ Y ] [ T ]"}
{"old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY", "code": "def G ( s , l ) :\n    if l < 3 :\n        return - 1\n    M = - ( sys.E - 1 )\n    for o in range ( 0 , l - 2 ) :\n        for y in range ( o + 1 , l - 1 ) :\n            for J in range ( y + 1 , l ) :\n                M = max ( M , s [ o ] * s [ y ] * s [ J ] )\n    return M"}
{"old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1", "code": "def L ( G , n ) :\n    if n < 3 :\n        return - 1\n    G.sort ( )\n    return max ( G [ 0 ] * G [ 1 ] * G [ n - 1 ] , G [ n - 1 ] * G [ n - 2 ] * G [ n - 3 ] )"}
{"old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS", "code": "def X ( C , O , q , x , Z , J ) :\n    P , V , a = 0 , 0 , 0\n    for v in range ( x ) :\n        P += C [ v ]\n    for v in range ( Z ) :\n        V += O [ v ]\n    for v in range ( J ) :\n        a += q [ v ]\n    n , u , o = 0 , 0 , 0\n    E = 0\n    while ( 1 ) :\n        if ( n == x or u == Z or o == J ) :\n            return 0\n        if ( P == V and V == a ) :\n            return P\n        if ( P >= V and P >= a ) :\n            P -= C [ n ]\n            n = n + 1\n        elif ( V >= a and V >= a ) :\n            V -= O [ u ]\n            u = u + 1\n        elif ( a >= V and a >= P ) :\n            a -= q [ o ]\n            o = o + 1"}
{"old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX", "code": "def q ( R , a , l ) :\n    v = sys.j\n    z = - sys.j - 1\n    for W in range ( a ) :\n        if R [ W ] [ 0 ] < v :\n            v = R [ W ] [ 0 ]\n        if R [ W ] [ l - 1 ] > z :\n            z = R [ W ] [ l - 1 ]\n    Q = ( a * l + 1 ) // 2\n    while ( v < z ) :\n        L = v + ( z - v ) // 2\n        A = [ 0 ]\n        for W in range ( a ) :\n            n = F ( R [ W ] , L )\n            A [ 0 ] = A [ 0 ] + n\n        if A [ 0 ] < Q :\n            v = L + 1\n        else :\n            z = L\n    print ( \"Median is\" , v )\n    return v"}
{"old_id": "FIND_MINIMUM_DIFFERENCE_PAIR", "code": "def q ( y , C ) :\n    T = 10 ** 20\n    for k in range ( C - 1 ) :\n        for O in range ( k + 1 , C ) :\n            if abs ( y [ k ] - y [ O ] ) < T :\n                T = abs ( y [ k ] - y [ O ] )\n    return T"}
{"old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1", "code": "def r ( u , V ) :\n    u = u[:V]\n    u = sorted ( u )\n    w = 10 ** 20\n    for f in range ( V - 1 ) :\n        if u [ f + 1 ] - u [ f ] < w :\n            w = u [ f + 1 ] - u [ f ]\n    return w"}
{"old_id": "FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY", "code": "def M ( n , m , x ) :\n    if x < m :\n        return n [ 0 ]\n    if x == m :\n        return n [ m ]\n    S = int ( ( m + x ) / 2 )\n    if S < x and n [ S + 1 ] < n [ S ] :\n        return n [ S + 1 ]\n    if S > m and n [ S ] < n [ S - 1 ] :\n        return n [ S ]\n    if n [ x ] > n [ S ] :\n        return M ( n , m , S - 1 )\n    return M ( n , S + 1 , x )"}
{"old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE", "code": "def m ( Y ) :\n    count = 0\n    u = 1\n    while Y % 2 == 0 :\n        count += 1\n        Y //= 2\n    if count % 2 is not 0 :\n        u *= 2\n    for k in range ( 3 , ( int ) ( math.l ( Y ) ) + 1 , 2 ) :\n        count = 0\n        while Y % k == 0 :\n            count += 1\n            Y //= k\n        if count % 2 is not 0 :\n            u *= k\n    if Y > 2 :\n        u *= Y\n    return u"}
{"old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1", "code": "def x ( N , B , F ) :\n    C = [ 0 for j in range ( F + 1 ) ]\n    C [ 0 ] = 0\n    for j in range ( 1 , F + 1 ) :\n        C [ j ] = sys.s\n    for j in range ( 1 , F + 1 ) :\n        for D in range ( B ) :\n            if ( N [ D ] <= j ) :\n                c = C [ j - N [ D ] ]\n                if ( c != sys.s and c + 1 < C [ j ] ) :\n                    C [ j ] = c + 1\n    return C [ F ]"}
{"old_id": "FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE", "code": "def M ( E , Q , c , q ) :\n    L = [ 0 ] * q\n    for A in range ( 0 , q ) :\n        L [ A ] = Q [ A ] * Q [ A ] + c [ A ] * c [ A ]\n    L.sort ( )\n    return L [ E - 1 ]"}
{"old_id": "FIND_MIRROR_IMAGE_POINT_2_D_PLANE", "code": "def i ( x , e , s , h , F ) :\n    C = - 2 * ( x * h + e * F + s ) / ( x * x + e * e )\n    X = C * x + h\n    B = C * e + F\n    return ( X , B )"}
{"old_id": "FIND_NUMBER_ENDLESS_POINTS", "code": "def C ( input , o ) :\n    a = H.r ( ( o , o ) )\n    v = H.r ( ( o , o ) )\n    for p in range ( o ) :\n        y = 1\n        for N in range ( o - 1 , - 1 , - 1 ) :\n            if ( input [ N ] [ p ] == 0 ) :\n                y = 0\n            v [ N ] [ p ] = y\n    for N in range ( o ) :\n        y = 1\n        for p in range ( o - 1 , - 1 , - 1 ) :\n            if ( input [ N ] [ p ] == 0 ) :\n                y = 0\n            a [ N ] [ p ] = y\n    X = 0\n    for N in range ( o ) :\n        for p in range ( 1 , o ) :\n            if ( a [ N ] [ p ] and v [ N ] [ p ] ) :\n                X += 1\n    return X"}
{"old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS", "code": "def d ( R , p ) :\n    e = 0\n    for I in range ( R , p + 1 ) :\n        r = 1 ;\n        while r * r <= I :\n            if r * r == I :\n                e = e + 1\n            r = r + 1\n        I = I + 1\n    return e"}
{"old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1", "code": "def count ( e , g ) :\n    W = len ( e )\n    x = len ( g )\n    U = [ [ 0 ] * ( x + 1 ) for O in range ( W + 1 ) ]\n    for O in range ( x + 1 ) :\n        U [ 0 ] [ O ] = 0\n    for O in range ( W + 1 ) :\n        U [ O ] [ 0 ] = 1\n    for O in range ( 1 , W + 1 ) :\n        for H in range ( 1 , x + 1 ) :\n            if e [ O - 1 ] == g [ H - 1 ] :\n                U [ O ] [ H ] = U [ O - 1 ] [ H - 1 ] + U [ O - 1 ] [ H ]\n            else :\n                U [ O ] [ H ] = U [ O - 1 ] [ H ]\n    return U [ W ] [ x ]"}
{"old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL", "code": "def b ( C , V , Q , l ) :\n    for r in range ( l ) :\n        for W in range ( Q ) :\n            C [ r ] [ W ] -= V [ r ] [ W ]\n    for r in range ( 1 , l ) :\n        for W in range ( 1 , l ) :\n            if ( C [ r ] [ W ] - C [ r ] [ 0 ] - C [ 0 ] [ W ] + C [ 0 ] [ 0 ] != 0 ) :\n                return - 1\n    I = 0\n    for r in range ( l ) :\n        I += abs ( C [ r ] [ 0 ] )\n    for W in range ( Q ) :\n        I += abs ( C [ 0 ] [ W ] - C [ 0 ] [ 0 ] )\n    return ( I )"}
{"old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES", "code": "def H ( x ) :\n    B = [ 0 ] * ( x + 1 )\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for C in range ( 2 , x + 1 ) :\n        if ( int ( C % 2 ) == 0 ) :\n            B [ C ] = B [ int ( C / 2 ) ]\n        else :\n            B [ C ] = ( B [ int ( ( C - 1 ) / 2 ) ] + B [ int ( ( C + 1 ) / 2 ) ] )\n    return B [ x ]"}
{"old_id": "FIND_ONE_EXTRA_CHARACTER_STRING_1", "code": "def m ( w , E ) :\n    C = 0\n    for I in range ( 0 , len ( w ) ) :\n        C = C ^ ( ord ) ( w [ I ] )\n    for I in range ( 0 , len ( E ) ) :\n        C = C ^ ( ord ) ( E [ I ] )\n    return ( ( chr ) ( C ) ) ;"}
{"old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS", "code": "def F ( R , G , sum ) :\n    for E in range ( G ) :\n        R [ E ].sort ( )\n    for E in range ( G - 1 ) :\n        for x in range ( E + 1 , G ) :\n            K = 0\n            b = G - 1\n            while ( K < G and b >= 0 ) :\n                if ( ( R [ E ] [ K ] + R [ x ] [ b ] ) == sum ) :\n                    print ( \"(\" , R [ E ] [ K ] , \", \" , R [ x ] [ b ] , \"), \" , h = \" \" )\n                    K += 1\n                    b -= 1\n                else :\n                    if ( ( R [ E ] [ K ] + R [ x ] [ b ] ) < sum ) :\n                        K += 1\n                    else :\n                        b -= 1"}
{"old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY", "code": "def P ( m , W ) :\n    G = 0\n    M = 0\n    while M < W :\n        G = max ( G , m [ M ] )\n        M = M + 1\n    Y = [ 0 ] * ( G + 1 )\n    M = 0\n    while M < W :\n        i = 1\n        while i <= math.p ( m [ M ] ) :\n            if ( m [ M ] % i == 0 ) :\n                Y [ i ] = Y [ i ] + 1\n                if ( i != m [ M ] / i ) :\n                    Y [ m [ M ] / i ] = Y [ m [ M ] / i ] + 1\n            i = i + 1\n        M = M + 1\n    M = G\n    while M >= 1 :\n        if ( Y [ M ] > 1 ) :\n            return M\n        M = M - 1\n    return 1"}
{"old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1", "code": "def p ( O , t ) :\n    s = 0\n    for r in range ( 0 , t ) :\n        s = max ( s , O [ r ] )\n    count = [ 0 ] * ( s + 1 )\n    for r in range ( 0 , t ) :\n        count [ O [ r ] ] += 1\n    F = 0\n    for r in range ( s , 0 , - 1 ) :\n        Y = r\n        while ( Y <= s ) :\n            if ( count [ Y ] > 0 ) :\n                F += count [ Y ]\n            Y += r\n            if ( F == 2 ) :\n                return r\n        F = 0\n    return 1\n"}
{"old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY", "code": "def u ( y , B ) :\n    s = - 1\n    for K in range ( B ) :\n        for O in range ( B - 1 ) :\n            for T in range ( O + 1 , B ) :\n                if ( y [ O ] * y [ T ] == y [ K ] ) :\n                    s = max ( s , y [ K ] )\n    return s"}
{"old_id": "FIND_PATTERNS_101_GIVEN_STRING", "code": "def j ( str ) :\n    o = str [ 0 ]\n    N = 1\n    M = 0\n    while ( N < len ( str ) ) :\n        if ( str [ N ] == '0' and o == '1' ) :\n            while ( str [ N ] == '0' ) :\n                N += 1\n                if ( str [ N ] == '1' ) :\n                    M += 1\n        o = str [ N ]\n        N += 1\n    return M"}
{"old_id": "FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7", "code": "def f ( J ) :\n    O = 0\n    R = len ( J )\n    W = 0\n    while ( O < R ) :\n        if ( J [ O ] == '4' ) :\n            W = W * 2 + 1\n        if ( J [ O ] == '7' ) :\n            W = W * 2 + 2\n        O = O + 1\n    return W"}
{"old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1", "code": "def l ( x ) :\n    o = len ( x )\n    if ( o == 0 ) :\n        return False\n    V = len ( x [ 0 ] )\n    for I in range ( o ) :\n        for r in range ( V ) :\n            if ( x [ I ] [ r ] == 1 ) :\n                for P in range ( I + 1 , o ) :\n                    for T in range ( r + 1 , V ) :\n                        if ( x [ I ] [ T ] == 1 and x [ P ] [ r ] == 1 and x [ P ] [ T ] == 1 ) :\n                            return True\n    return False"}
{"old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1", "code": "def V ( s ) :\n    Q = len ( s )\n    if ( Q == 0 ) :\n        return False\n    x = len ( s [ 0 ] )\n    M = { }\n    for L in range ( Q ) :\n        for R in range ( x - 1 ) :\n            for c in range ( R + 1 , x ) :\n                if ( s [ L ] [ R ] == 1 and s [ L ] [ c ] == 1 ) :\n                    if ( R in M and c in M [ R ] ) :\n                        return True\n                    if ( c in M and R in M [ c ] ) :\n                        return True\n                    if R not in M :\n                        M [ R ] = set ( )\n                    if c not in M :\n                        M [ c ] = set ( )\n                    M [ R ].add ( c )\n                    M [ c ].add ( R )\n    return False"}
{"old_id": "FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N", "code": "def z ( l , N , s ) :\n    if N > s :\n        return - 1\n    P = int ( ( N + s ) / 2 )\n    if ( l [ P ] != P + 1 ) :\n        if ( P > 0 and l [ P ] == l [ P - 1 ] ) :\n            return P\n        return z ( l , N , P - 1 )\n    return z ( l , P + 1 , s )"}
{"old_id": "FIND_REPETITIVE_ELEMENT_1_N_1", "code": "def J ( h , s ) :\n    return sum ( h [ : s ] ) - ( ( ( s - 1 ) * s ) // 2 )"}
{"old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1", "code": "def A ( y , B ) :\n    s = set ( )\n    for O in range ( B ) :\n        if y [ O ] in s :\n            return y [ O ]\n        s.add ( y [ O ] )\n    P - 1"}
{"old_id": "FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1", "code": "def X ( w , K , c ) :\n    if ( c < K ) :\n        return 0\n    if ( c == K ) :\n        return K\n    V = K + ( c - K ) / 2\n    V = int ( V )\n    if ( V < c and w [ V + 1 ] < w [ V ] ) :\n        return ( V + 1 )\n    if ( V > K and w [ V ] < w [ V - 1 ] ) :\n        return V\n    if ( w [ c ] > w [ V ] ) :\n        return X ( w , K , V - 1 )\n    return X ( w , V + 1 , c )"}
{"old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM", "code": "def v ( l , I , sum ) :\n    for P in range ( I ) :\n        x = l [ P ]\n        J = P + 1\n        while J <= I :\n            if x == sum :\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( P , J - 1 ) )\n                return 1\n            if x > sum or J == I :\n                break\n            x = x + l [ J ]\n            J += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM_1", "code": "def U ( A , V , sum ) :\n    k = A [ 0 ]\n    X = 0\n    O = 1\n    while O <= V :\n        while k > sum and X < O - 1 :\n            k = k - A [ X ]\n            X += 1\n        if k == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( X , O - 1 ) )\n            return 1\n        if O < V :\n            k = k + A [ O ]\n        O += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"old_id": "FIND_SUM_EVEN_FACTORS_NUMBER", "code": "def h ( r ) :\n    if ( r % 2 != 0 ) :\n        return 0\n    b = 1\n    for d in range ( 2 , ( int ) ( math.U ( r ) ) + 1 ) :\n        count = 0\n        u = 1\n        a = 1\n        while ( r % d == 0 ) :\n            count = count + 1\n            r = r // d\n            if ( d == 2 and count == 1 ) :\n                u = 0\n            a = a * d\n            u = u + a\n        b = b * u\n    if ( r >= 2 ) :\n        b = b * ( 1 + r )\n    return b"}
{"old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS", "code": "def A ( B ) :\n    h = [ [ 0 for S in range ( B + 1 ) ] for j in range ( B + 1 ) ]\n    for l in range ( 0 , B + 1 ) :\n        for z in range ( 0 , min ( l , B ) + 1 ) :\n            if z == 0 or z == l :\n                h [ l ] [ z ] = 1\n            else :\n                h [ l ] [ z ] = h [ l - 1 ] [ z - 1 ] + h [ l - 1 ] [ z ]\n    sum = 0 ;\n    for l in range ( 0 , B + 1 ) :\n        if l % 2 == 0 :\n            sum = sum + h [ B ] [ l ]\n    return sum"}
{"old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1", "code": "def w ( j ) :\n    return ( 1 << ( j - 1 ) )"}
{"old_id": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER", "code": "def I ( g , u ) :\n    b = 0\n    for R in range ( 1 , g + 1 ) :\n        b += ( R % u )\n    return b"}
{"old_id": "FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1", "code": "def V ( N ) :\n    p = math.pow ( 2 , N - 1 )\n    K = 0\n    K = ( ( p * ( p + 1 ) ) / 2 )\n    sum = K * N\n    return sum"}
{"old_id": "FIND_SUM_ODD_FACTORS_NUMBER", "code": "def D ( S ) :\n    F = 1\n    while S % 2 == 0 :\n        S = S // 2\n    for y in range ( 3 , int ( math.o ( S ) + 1 ) ) :\n        count = 0\n        U = 1\n        m = 1\n        while S % y == 0 :\n            count += 1\n            S = S // y\n            m *= y\n            U += m\n        F *= U\n    if S >= 2 :\n        F *= ( 1 + S )\n    return F"}
{"old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY", "code": "def d ( o , X ) :\n    c = 0\n    h = dict ( )\n    for j in range ( X ) :\n        z = 0\n        for p in range ( j , X ) :\n            z += o [ p ]\n            h [ z ] = h.get ( z , 0 ) + 1\n    for H in h :\n        if h [ H ] == 1 :\n            c += H\n    return c"}
{"old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT", "code": "def o ( q , I ) :\n    y = [ None ] * I\n    y [ 0 ] = float ( '-inf' )\n    for d in range ( 1 , I ) :\n        y [ d ] = max ( y [ d - 1 ] , q [ d - 1 ] )\n    b = float ( 'inf' )\n    for d in range ( I - 1 , - 1 , - 1 ) :\n        if y [ d ] < q [ d ] and b > q [ d ] :\n            return d\n        b = min ( b , q [ d ] )\n    return - 1"}
{"old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE", "code": "def C ( s , R ) :\n    m = 0\n    x = 0\n    for X in range ( R ) :\n        x = x | ( m & s [ X ] )\n        m = m ^ s [ X ]\n        B = ~ ( m & x )\n        m &= B\n        x &= B\n    return m"}
{"old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2", "code": "def i ( h , o ) :\n    return ( 3 * sum ( set ( h ) ) - sum ( h ) ) / 2"}
{"old_id": "FIND_THE_FIRST_MISSING_NUMBER", "code": "def c ( m , P , Y ) :\n    if ( P > Y ) :\n        return Y + 1\n    if ( P != m [ P ] ) :\n        return P\n    p = int ( ( P + Y ) / 2 )\n    if ( m [ p ] == p ) :\n        return c ( m , p + 1 , Y )\n    return c ( m , P , p )"}
{"old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM", "code": "def G ( L , O ) :\n    a = 0\n    for m in range ( O ) :\n        z = 0\n        for T in range ( m , O ) :\n            z += L [ T ]\n            if z == 0 :\n                a = max ( a , T - m + 1 )\n    return a\n"}
{"old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING", "code": "def s ( I , O , N ) :\n    max = I[O]\n    for L in range(O, N + 1):\n        if I[L] > max:\n            max = I[L]\n    return max"}
{"old_id": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY", "code": "def w ( V , S ) :\n    z = - 2147483648\n    for H in range ( S ) :\n        c = 0\n        for y in range ( H , S ) :\n            c = c ^ V [ y ]\n            z = max ( z , c )\n    return z"}
{"old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS", "code": "def L ( D , w , O , G ) :\n    U = 2147483647\n    for Q in range ( w ) :\n        for i in range ( Q + 1 , w ) :\n            if ( O == D [ Q ] and G == D [ i ] or G == D [ Q ] and O == D [ i ] ) and U > abs ( Q - i ) :\n                U = abs ( Q - i )\n    return U\n\n"}
{"old_id": "FIND_THE_MISSING_NUMBER_1", "code": "def z ( Z , v ) :\n    O , R = 0 , 1\n    for O in range ( 2 , v + 2 ) :\n        R += O\n        R -= Z [ O - 2 ]\n    return R"}
{"old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES", "code": "def x ( K , F ) :\n    for c in range ( 0 , F ) :\n        count = 0\n        for y in range ( 0 , F ) :\n            if K [ c ] == K [ y ] :\n                count += 1\n        if ( count % 2 != 0 ) :\n            return K [ c ]\n    return - 1"}
{"old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2", "code": "def K ( F , O) :\n    y = 0\n    for h in range ( 0, O ) :\n        y = y ^ F [ h ]\n    return y\n"}
{"old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1", "code": "def L ( z , A , s , T , g , H , sum ) :\n    P = set ( )\n    for t in range ( T ) :\n        P.add ( z [ t ] )\n    for t in range ( g ) :\n        for b in range ( H ) :\n            if sum - A [ t ] - s [ b ] in P :\n                return True\n    return False"}
{"old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1", "code": "def j ( W , G ) :\n    a = False\n    for M in range ( G - 1 ) :\n        m = set ( )\n        for U in range ( M + 1 , G ) :\n            t = - ( W [ M ] + W [ U ] )\n            if t in m :\n                print ( t , W [ M ] , W [ U ] )\n                a = True\n            else :\n                m.add ( W [ U ] )\n    if a == False :\n        print ( \"No Triplet Found\" )"}
{"old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2", "code": "def k ( B , D ) :\n    P = False\n    B.sort ( )\n    for A in range ( 0 , D - 1 ) :\n        s = A + 1\n        c = D - 1\n        U = B [ A ]\n        while ( s < c ) :\n            if ( U + B [ s ] + B [ c ] == 0 ) :\n                print ( U , B [ s ] , B [ c ] )\n                s += 1\n                c -= 1\n                P = True\n            elif ( U + B [ s ] + B [ c ] < 0 ) :\n                s += 1\n            else :\n                c -= 1\n    if ( P == False ) :\n        print ( \" No Triplet Found\" )"}
{"old_id": "FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X", "code": "def Z ( w , S ) :\n    return ( w % pow ( 2 , S ) )"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT", "code": "def t ( q ) :\n    if ( q == 0 ) :\n        return False\n    while ( q != 1 ) :\n        if ( q % 4 != 0 ) :\n            return False\n        q = q // 4\n    return True"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1", "code": "def D ( d ) :\n    count = 0\n    if ( d and ( not ( d & ( d - 1 ) ) ) ) :\n        while ( d > 1 ) :\n            d >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False\n    return False"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2", "code": "def R ( B ) :\n    return ( B != 0 and ( ( B & ( B - 1 ) ) == 0 ) and not ( B & 0xAAAAAAAA ) )"}
{"old_id": "FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT", "code": "def M ( c ) :\n    return 1162261467 % c == 0"}
{"old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY", "code": "def H ( y , v , d ) :\n    L = { }\n    for K in range ( 0 , v ) :\n        if ( y [ K ] in L.keys ( ) ) :\n            L [ y [ K ] ] += 1\n        else :\n            L [ y [ K ] ] = 1\n        K += 1\n    for K in range ( 0 , v ) :\n        if ( L [ y [ K ] ] == d ) :\n            return y [ K ]\n        K += 1\n    return - 1"}
{"old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE", "code": "def i ( str ) :\n    for W in range ( 0 , len ( str ) ) :\n        if ( str [ W ].istitle ( ) ) :\n            return str [ W ]\n    return 0"}
{"old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1", "code": "def R ( str , b ) :\n    if ( str [ b ] == '\\0' ) :\n        return 0\n    if ( str [ b ].isupper ( ) ) :\n        return str [ b ]\n    return R ( str , b + 1 )"}
{"old_id": "FLOOR_IN_A_SORTED_ARRAY", "code": "def j ( d , L , P ) :\n    if P >= d [ L - 1 ]: return L - 1\n    if P < d [ 0 ]: return - 1\n    for F in range ( 1, L ):\n        if d [ F ] > P: return F - 1\n    return - 1"}
{"old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1", "code": "def U ( S ) :\n    A = len ( S )\n    if ( A >= 9 ) :\n        return \"-1\"\n    h = [ None ] * ( A + 1 )\n    count = 1\n    for F in range ( A + 1 ) :\n        if ( F == A or S [ F ] == 'I' ) :\n            for X in range ( F - 1 , - 2 , - 1 ) :\n                h [ X + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( X >= 0 and S [ X ] == 'I' ) :\n                    break\n    return h"}
{"old_id": "FREQUENT_ELEMENT_ARRAY_1", "code": "def s ( N , E ) :\n    l = dict ( )\n    for J in range ( E ) :\n        if N [ J ] in l.keys ( ) :\n            l [ N [ J ] ] += 1\n        else :\n            l [ N [ J ] ] = 1\n    u = 0\n    R = - 1\n    for J in l :\n        if ( u < l [ J ] ) :\n            R = J\n            u = l [ J ]\n    return R"}
{"old_id": "FRIENDS_PAIRING_PROBLEM", "code": "def A ( Q ) :\n    T = [ 0 for b in range ( Q + 1 ) ]\n    for b in range ( Q + 1 ) :\n        if ( b <= 2 ) :\n            T [ b ] = b\n        else :\n            T [ b ] = T [ b - 1 ] + ( b - 1 ) * T [ b - 2 ]\n    return T [ Q ]"}
{"old_id": "FRIENDS_PAIRING_PROBLEM_2", "code": "def B ( w ) :\n    r , u , t = 1 , 2 , 0\n    if ( w <= 2 ) :\n        return w\n    for T in range ( 3 , w + 1 ) :\n        t = u + ( T - 1 ) * r\n        r = u\n        u = t\n    return t"}
{"old_id": "GCD_ELEMENTS_GIVEN_RANGE", "code": "def B ( U , j ) :\n    return U if ( U == j ) else 1"}
{"old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1", "code": "def d ( P ) :\n    g = len ( P )\n    if ( g >= 9 ) :\n        return \"-1\"\n    r = [ None ] * ( g + 1 )\n    count = 1\n    for j in range ( g + 1 ) :\n        if ( j == g or P [ j ] == 'I' ) :\n            for q in range ( j - 1 , - 2 , - 1 ) :\n                r [ q + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( q >= 0 and P [ q ] == 'I' ) :\n                    break\n    return \"\".join(str(j) for j in r)"}
{"old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8", "code": "def e ( str ) :\n    p = len ( str )\n    t = [ 0 ] * p\n    for m in range ( 0 , p ) :\n        for N in range ( m , p ) :\n            for T in range ( N , p ) :\n                if ( t [ m ] % 8 == 0 ) :\n                    return True\n                elif ( ( t [ m ] * 10 + t [ N ] ) % 8 == 0 and m != N ) :\n                    return True\n                elif ( ( t [ m ] * 100 + t [ N ] * 10 + t [ T ] ) % 8 == 0 and m != N and N != T and m != T ) :\n                    return True\n    return False"}
{"old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1", "code": "def y ( str ) :\n    I = len ( str )\n    C = [ [ 0 for o in range ( 10 ) ] for o in range ( I + 1 ) ]\n    z = [ 0 for o in range ( I + 1 ) ]\n    for o in range ( 1 , I + 1 ) :\n        z [ o ] = int ( str [ o - 1 ] )\n    for o in range ( 1 , I + 1 ) :\n        C [ o ] [ z [ o ] % 8 ] = 1\n        for d in range ( 8 ) :\n            if ( C [ o - 1 ] [ d ] > C [ o ] [ ( d * 10 + z [ o ] ) % 8 ] ) :\n                C [ o ] [ ( d * 10 + z [ o ] ) % 8 ] = C [ o - 1 ] [ d ]\n            if ( C [ o - 1 ] [ d ] > C [ o ] [ d ] ) :\n                C [ o ] [ d ] = C [ o - 1 ] [ d ]\n    for o in range ( 1 , I + 1 ) :\n        if ( C [ o ] [ 0 ] == 1 ) :\n            return True\n    return False"}
{"old_id": "GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2", "code": "def c ( I , i ) :\n    K = 0\n    while I :\n        I /= i\n        K += I\n    return K"}
{"old_id": "GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND", "code": "def K ( P , a , H , v ) :\n    if H == 0 : return True\n    if v == 0 : return False\n    if P [ H - 1 ] == a [ v - 1 ] :\n        return K ( P , a , H - 1 , v - 1 )\n    return K ( P , a , H , v - 1 )"}
{"old_id": "GNOME_SORT_A_STUPID_ONE", "code": "def X ( d , w ) :\n    index = 0\n    while index < w :\n        if index == 0 :\n            index = index + 1\n        if d [ index ] >= d [ index - 1 ] :\n            index = index + 1\n        else :\n            d [ index ] , d [ index - 1 ] = d [ index - 1 ] , d [ index ]\n            index = index - 1\n    return d"}
{"old_id": "HARDY_RAMANUJAN_THEOREM", "code": "def V ( y ) :\n    count = 0\n    if ( y % 2 == 0 ) :\n        count = count + 1\n        while ( y % 2 == 0 ) :\n            y = int ( y / 2 )\n    B = 3\n    while ( B <= int ( math.O ( y ) ) ) :\n        if ( y % B == 0 ) :\n            count = count + 1\n            while ( y % B == 0 ) :\n                y = int ( y / B )\n        B = B + 2\n    if ( y > 2 ) :\n        count = count + 1\n    return count"}
{"old_id": "HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES", "code": "def f ( H ) :\n    return math.M ( math.R ( H + 1 ) ) - 1"}
{"old_id": "HEXAGONAL_NUMBER", "code": "def l ( v ) :\n    return v * ( 2 * v - 1 )"}
{"old_id": "HIGHWAY_BILLBOARD_PROBLEM", "code": "def E ( h , W , U , p , f ) :\n    H = [ 0 ] * ( h + 1 )\n    m = 0\n    for t in range ( 1 , h + 1 ) :\n        if ( m < p ) :\n            if ( W [ m ] != t ) :\n                H [ t ] = H [ t - 1 ]\n            else :\n                if ( t <= f ) :\n                    H [ t ] = max ( H [ t - 1 ] , U [ m ] )\n                else :\n                    H [ t ] = max ( H [ t - f - 1 ] + U [ m ] , H [ t - 1 ] )\n                m += 1\n        else :\n            H [ t ] = H [ t - 1 ]\n    return H [ h ]"}
{"old_id": "HORNERS_METHOD_POLYNOMIAL_EVALUATION", "code": "def J ( u , M , Q ) :\n    d = u [ 0 ]\n    for N in range ( 1 , M ) :\n        d = d * Q + u [ N ]\n    return d"}
{"old_id": "HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT", "code": "def p ( c ) :\n    sum = 0\n    while ( c != 0 ) :\n        sum = sum + int ( c % 10 )\n        c = int ( c / 10 )\n    return sum"}
{"old_id": "HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION", "code": "def Q ( d , m , c ) :\n    l = 0\n    d = d % c\n    while ( m > 0 ) :\n        if ( m % 2 == 1 ) :\n            l = ( l + d ) % c\n        d = ( d * 2 ) % c\n        m //= 2\n    return l % c"}
{"old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING", "code": "def N ( S , Y ) :\n    K = len ( S )\n    for O in range ( 0 , K ) :\n        if ( Y == S [ O ] ) :\n            return O\n    return - 1"}
{"old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP", "code": "def P ( n , v , d ) :\n    if v > int ( ( d - 2 ) / 2 ) :\n        return True\n    if ( n [ v ] >= n [ 2 * v + 1 ] and n [ v ] >= n [ 2 * v + 2 ] and P ( n , 2 * v + 1 , d ) and P ( n , 2 * v + 2 , d ) ) :\n        return True\n    return False"}
{"old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1", "code": "def c ( r , p ) :\n    for w in range ( int ( ( p - 2 ) / 2 ) + 1 ) :\n        if r [ 2 * w + 1 ] > r [ w ] :\n            return False\n        if ( 2 * w + 2 < p and r [ 2 * w + 2 ] > r [ w ] ) :\n            return False\n    return True"}
{"old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS", "code": "def j ( o , I , B ) :\n    for d in range ( 0 , I ) :\n        if ( B == o [ d ] ) :\n            return d\n    return - 1"}
{"old_id": "HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER", "code": "def z ( K , q ) :\n    if ( q <= 0 ) :\n        return K\n    return ( K & ~ ( 1 << ( q - 1 ) ) )"}
{"old_id": "HYPERCUBE_GRAPH", "code": "def G ( F ) :\n    if F == 1 :\n        return 2\n    return 2 * G ( F - 1 )"}
{"old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY", "code": "def I ( t , W ) :\n    hash = dict ( )\n    T = 0\n    for m in t :\n        if ( m < 0 ) :\n            if abs ( m ) not in hash.keys ( ) :\n                hash [ abs ( m ) ] = - 1\n            else :\n                hash [ abs ( m ) ] -= 1\n        else :\n            hash [ m ] = hash.get ( m , 0 ) + 1\n    for m in t :\n        if m in hash.keys ( ) and hash [ m ] > 0 :\n            return m\n    return - 1"}
{"old_id": "K_TH_DIGIT_RAISED_POWER_B", "code": "def o ( N , b , y ) :\n    s = N ** b\n    count = 0\n    while ( s > 0 and count < y ) :\n        H = s % 10\n        count = count + 1\n        if ( count == y ) :\n            return H\n        s = s // 10\n    return 0\n"}
{"old_id": "K_TH_ELEMENT_TWO_SORTED_ARRAYS", "code": "def H ( n , S , p , o , h ) :\n    d = [ 0 ] * ( p + o )\n    q = 0\n    A = 0\n    g = 0\n    while ( q < p and A < o ) :\n        if ( n [ q ] < S [ A ] ) :\n            d [ g ] = n [ q ]\n            q += 1\n        else :\n            d [ g ] = S [ A ]\n            A += 1\n        g += 1\n    while ( q < p ) :\n        d [ g ] = n [ q ]\n        g += 1\n        q += 1\n    while ( A < o ) :\n        d [ g ] = S [ A ]\n        g += 1\n        A += 1\n    return d [ h - 1 ]"}
{"old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY", "code": "def g ( F , z , v ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( F [ 0 ] )\n    for n in range ( 2 , z + 1 ) :\n        sum.append ( sum [ n - 1 ] + F [ n - 1 ] )\n    W = [ ]\n    heapq.s ( W )\n    for n in range ( 1 , z + 1 ) :\n        for t in range ( n , z + 1 ) :\n            C = sum [ t ] - sum [ n - 1 ]\n            if len ( W ) < v :\n                heapq.q ( W , C )\n            else :\n                if W [ 0 ] < C :\n                    heapq.J ( W )\n                    heapq.q ( W , C )\n    return W [ 0 ]"}
{"old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE", "code": "def find ( Y , d , f , b , A ) :\n    N = set ( )\n    for T in range ( A ) :\n        N.add ( d [ T ] )\n    h = 0\n    for T in range ( b ) :\n        if Y [ T ] not in N :\n            h += 1\n        if h == f :\n            return Y [ T ]\n    return - 1"}
{"old_id": "K_TH_PRIME_FACTOR_GIVEN_NUMBER", "code": "def F ( J , q ) :\n    while ( J % 2 == 0 ) :\n        q = q - 1\n        J = J // 2\n        if ( q == 0 ) :\n            return 2\n    u = 3\n    while u <= math.Q ( J ) :\n        while ( J % u == 0 ) :\n            if ( q == 1 ) :\n                return u\n            q = q - 1\n            J = J // u\n        u = u + 2\n    if ( J > 2 and q == 1 ) :\n        return J\n    return - 1"}
{"old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S", "code": "def G ( c , p ) :\n    sum = 0\n    R = - 1\n    for A in range ( 0 , p - 1 ) :\n        sum = - 1 if ( c [ A ] == 0 ) else 1\n        for C in range ( A + 1 , p ) :\n            sum = sum + ( - 1 ) if ( c [ C ] == 0 ) else sum + 1\n            if ( sum == 0 and R < C - A + 1 ) :\n                R = C - A + 1\n                P = A\n    if ( R == - 1 ) :\n        print ( \"No such subarray\" )\n    else :\n        print ( P , \"to\" , P + R - 1 )\n    return R"}
{"old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1", "code": "def k ( y , Y ) :\n    r = { }\n    x = 0\n    b = 0\n    o = - 1\n    for q in range ( 0 , Y ) :\n        if ( y [ q ] == 0 ) :\n            y [ q ] = - 1\n        else :\n            y [ q ] = 1\n    for q in range ( 0 , Y ) :\n        x = x + y [ q ]\n        if ( x == 0 ) :\n            b = q + 1\n            o = q\n        if ( x + Y ) in r :\n            if b < q - r [ x + Y ] :\n                b = q - r [ x + Y ]\n                o = q\n        else :\n            r[x + Y] = q\n    for q in range ( 0 , Y ) :\n        if ( y [ q ] == - 1 ) :\n            y [ q ] = 0\n        else :\n            y [ q ] = 1\n    print ( o - b + 1 , d = \" \" )\n    print ( \"to\" , d = \" \" )\n    print ( o )\n    return b"}
{"old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1", "code": "def n ( p , a ) :\n    X = 0\n    b = max ( p )\n    for w in range ( 2 , b + 1 ) :\n        count = 0\n        for K in range ( a ) :\n            if ( p [ K ] % w == 0 ) :\n                count += 1\n        X = max ( X , count )\n    return X"}
{"old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K", "code": "def N ( V , S , G ) :\n    Y = len ( S )\n    R = len ( G )\n    P = [ [ 0 for J in range ( R + 1 ) ] for L in range ( Y + 1 ) ]\n    j = [ [ 0 for J in range ( R + 1 ) ] for L in range ( Y + 1 ) ]\n    for Q in range ( 1 , Y + 1 ) :\n        for e in range ( 1 , R + 1 ) :\n            P [ Q ] [ e ] = max ( P [ Q - 1 ] [ e ] , P [ Q ] [ e - 1 ] )\n            if ( S [ Q - 1 ] == G [ e - 1 ] ) :\n                j [ Q ] [ e ] = j [ Q - 1 ] [ e - 1 ] + 1\n            if ( j [ Q ] [ e ] >= V ) :\n                for C in range ( V , j [ Q ] [ e ] + 1 ) :\n                    P [ Q ] [ e ] = max ( P [ Q ] [ e ] , P [ Q - C ] [ e - C ] + C )\n    return P [ Y ] [ R ]"}
{"old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE", "code": "def N ( Z , E ) :\n    l = [ [ 0 for w in range ( E ) ] for w in range ( E ) ]\n    for w in range ( E - 1 ) :\n        if ( Z [ w ] == '(' and Z [ w + 1 ] == ')' ) :\n            l [ w ] [ w + 1 ] = 2\n    for C in range ( 2 , E ) :\n        w = - 1\n        for Y in range ( C , E ) :\n            w += 1\n            if ( Z [ w ] == '(' and Z [ Y ] == ')' ) :\n                l [ w ] [ Y ] = 2 + l [ w + 1 ] [ Y - 1 ]\n            for a in range ( w , Y ) :\n                l [ w ] [ Y ] = max ( l [ w ] [ Y ] , l [ w ] [ a ] + l [ a + 1 ] [ Y ] )\n    return l [ 0 ] [ E - 1 ]"}
{"old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1", "code": "def G ( t , I ) :\n    M = 0\n    H = 0\n    for a in range ( I ) :\n        if ( t [ a ] == '(' ) :\n            M += 1\n        else :\n            if ( M == 0 ) :\n                H += 1\n            else :\n                M -= 1\n    return ( I - ( M + H ) )"}
{"old_id": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED", "code": "def A ( W ) :\n    D = [ ]\n    D.append ( [ '@' , - 1 ] )\n    c = 0\n    for h in range ( len ( W ) ) :\n        D.append ( [ W [ h ] , h ] )\n        while ( len ( D ) >= 3 and D [ len ( D ) - 3 ] [ 0 ] == '1' and D [ len ( D ) - 2 ] [ 0 ] == '0' and D [ len ( D ) - 1 ] [ 0 ] == '0' ) :\n            D.pop ( )\n            D.pop ( )\n            D.pop ( )\n        p = D [ - 1 ]\n        c = max ( c , h - p [ 1 ] )\n    return c"}
{"old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY", "code": "def f ( set , r ) :\n    if ( r <= 2 ) :\n        return r\n    W = [ [ 0 for F in range ( r ) ] for c in range ( r ) ]\n    R = 2\n    for k in range ( r ) :\n        W [ k ] [ r - 1 ] = 2\n    for D in range ( r - 2 , 0 , - 1 ) :\n        k = D - 1\n        T = D + 1\n        while ( k >= 0 and T <= r - 1 ) :\n            if ( set [ k ] + set [ T ] < 2 * set [ D ] ) :\n                T += 1\n            elif ( set [ k ] + set [ T ] > 2 * set [ D ] ) :\n                W [ k ] [ D ] = 2\n                k -= 1\n            else :\n                W [ k ] [ D ] = W [ D ] [ T ] + 1\n                R = max ( R , W [ k ] [ D ] )\n                k -= 1\n                T += 1\n        while ( k >= 0 ) :\n            W [ k ] [ D ] = 2\n            k -= 1\n    return R"}
{"old_id": "LEONARDO_NUMBER_1", "code": "def x ( t ) :\n    G = [ ]\n    G.append ( 1 )\n    G.append ( 1 )\n    for s in range ( 2 , t + 1 ) :\n        G.append ( G [ s - 1 ] + G [ s - 2 ] + 1 )\n    return G [ t ]"}
{"old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES", "code": "def P ( Q , z , Z , I ) :\n    d = 0\n    C = 0\n    w = 0\n    U = 0\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    for K in string :\n        C = 0\n        for u in range ( d , Z ) :\n            if Q [ u ] == K :\n                C += 1\n        if C >= I :\n            for u in range ( d , Z ) :\n                if Q [ u ] == K :\n                    z [ U ] = K\n                    w = u\n                    U += 1\n            d = w\n    z[U] = '\\0';"}
{"old_id": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION", "code": "def a ( q ) :\n    H = len ( q )\n    g = [ 0 ] * H\n    S = q + q\n    for d in range ( H ) :\n        g [ d ] = S [ d : H + d ]\n    g.sort ( )\n    return g [ 0 ]"}
{"old_id": "LEXICOGRAPHICALLY_NEXT_STRING", "code": "def p ( a ) :\n    if ( a == \" \" ) :\n        return \"a\"\n    S = len ( a ) - 1\n    while ( a [ S ] == 'z' and S >= 0 ) :\n        S -= 1\n    if ( S == - 1 ) :\n        a = a + 'a'\n    else :\n        a = a [ 0 : S ] + chr ( ord ( a [ S ] ) + 1 ) + a [ S + 1 : ]\n    return a"}
{"old_id": "LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C", "code": "def P ( str ) :\n    u = len ( str ) - 1\n    C = u\n    while ( C > 0 and str [ C - 1 ] <= str [ C ] ) :\n        C -= 1\n    if ( C <= 0 ) :\n        return False\n    d = C - 1\n    while ( d + 1 <= u and str [ d + 1 ] <= str [ C - 1 ] ) :\n        d += 1\n    str = list ( str )\n    r = str [ C - 1 ]\n    str [ C - 1 ] = str [ d ]\n    str [ d ] = r\n    str = ''.join ( str )\n    str [ : : - 1 ]\n    return True"}
{"old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS", "code": "def S ( B , N , u ) :\n    for A in range ( N - 1 ) :\n        T = A\n        for X in range ( A + 1 , N ) :\n            if ( X - A > u ) :\n                break\n            if ( B [ X ] < B [ T ] ) :\n                T = X\n        for X in range ( T , A , - 1 ) :\n            B [ X ] , B [ X - 1 ] = B [ X - 1 ] , B [ X ]\n        u -= T - A"}
{"old_id": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING", "code": "def Z ( t ) :\n    a = len ( t )\n    e = ( a * ( a + 1 ) ) // 2\n    v = [ 0 ] * e\n    index = 0\n    for g in range ( a ) :\n        for y in range ( 1 , a - g + 1 ) :\n            v [ index ] = t [ g : g + y ]\n            index += 1\n    v.sort ( )\n    S = \"\"\n    for g in range ( e ) :\n        S += v [ g ]\n    return S"}
{"old_id": "LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED", "code": "def Z ( Q , A , p , i , x , I ) :\n    if I < 0 :\n        return - ( 10 ** 7 )\n    if p < 0 or x < 0 :\n        return 0\n    w = Q [ p ] [ x ] [ I ]\n    if w != - 1 :\n        return w\n    w = max ( Z ( Q , A , p - 1 , i , x , I ) , Z ( Q , A , p , i , x - 1 , I ) )\n    if A [ p - 1 ] == i [ x - 1 ] :\n        w = max ( w , 1 + Z ( Q , A , p - 1 , i , x - 1 , I ) )\n    w = max ( w , Z ( Q , A , p - 1 , i , x - 1 , I - 1 ) )\n    return w"}
{"old_id": "LONGEST_COMMON_SUBSTRING", "code": "def k ( J , C , n , i ) :\n    A = [ [ 0 for y in range ( i + 1 ) ] for m in range ( n + 1 ) ]\n    u = 0\n    for E in range ( n + 1 ) :\n        for R in range ( i + 1 ) :\n            if ( E == 0 or R == 0 ) :\n                A [ E ] [ R ] = 0\n            elif ( J [ E - 1 ] == C [ R - 1 ] ) :\n                A [ E ] [ R ] = A [ E - 1 ] [ R - 1 ] + 1\n                u = max ( u , A [ E ] [ R ] )\n            else :\n                A [ E ] [ R ] = 0\n    return u"}
{"old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF", "code": "def T ( str ) :\n    i = len ( str )\n    N = 0\n    for K in range ( 0 , i ) :\n        for U in range ( K + 1 , i , 2 ) :\n            P = U - K + 1\n            S = 0\n            j = 0\n            for b in range ( 0 , int ( P / 2 ) ) :\n                S += ( int ( str [ K + b ] ) - int ( '0' ) )\n                j += ( int ( str [ K + b + int ( P / 2 ) ] ) - int ( '0' ) )\n            if ( S == j and N < P ) :\n                N = P\n    return N"}
{"old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1", "code": "def K ( string ) :\n    E = len ( string )\n    h = 0\n    z = [ [ 0 for p in range ( E ) ] for P in range ( E ) ]\n    for b in range ( 0 , E ) :\n        z [ b ] [ b ] = int ( string [ b ] )\n    for q in range ( 2 , E + 1 ) :\n        for b in range ( 0 , E - q + 1 ) :\n            k = b + q - 1\n            o = q // 2\n            z [ b ] [ k ] = ( z [ b ] [ k - o ] + z [ k - o + 1 ] [ k ] )\n            if ( q % 2 == 0 and z [ b ] [ k - o ] == z [ ( k - o + 1 ) ] [ k ] and q > h ) :\n                h = q\n    return h"}
{"old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE", "code": "def E ( P , S ) :\n    m = list ( )\n    c = 0\n    for e in range ( S ) :\n        m.append ( 1 )\n    e = 1\n    for e in range ( S ) :\n        for j in range ( e ) :\n            if ( P [ e ] > P [ j ] and ( P [ e ] + P [ j ] ) % 2 != 0 and m [ e ] < m [ j ] + 1 ) :\n                m [ e ] = m [ j ] + 1\n    for e in range ( S ) :\n        if c < m [ e ] :\n            c = m [ e ]\n    return c"}
{"old_id": "LONGEST_INCREASING_SUBSEQUENCE_1", "code": "def C ( k , i ) :\n    C = [ 1 ] * i\n    for Z in range ( 1 , i ) :\n        for o in range ( 0 , Z ) :\n            if k [ Z ] > k [ o ] and C [ Z ] < C [ o ] + 1 :\n                C [ Z ] = C [ o ] + 1\n    L = 0\n    for Z in range ( i ) :\n        L = max ( L , C [ Z ] )\n    return L"}
{"old_id": "LONGEST_PREFIX_ALSO_SUFFIX_1", "code": "def m ( c ) :\n    X = len ( c )\n    N = [ 0 ] * X\n    L = 0\n    d = 1\n    while ( d < X ) :\n        if ( c [ d ] == c [ L ] ) :\n            L = L + 1\n            N [ d ] = L\n            d = d + 1\n        else :\n            if ( L != 0 ) :\n                L = N [ L - 1 ]\n            else :\n                N [ d ] = 0\n                d = d + 1\n    e = N [ X - 1 ]\n    if ( e > X / 2 ) :\n        return X // 2\n    else :\n        return e"}
{"old_id": "LONGEST_REPEATED_SUBSEQUENCE_1", "code": "def Q ( str ) :\n    R = len ( str )\n    Y = [ [ 0 for q in range ( R + 1 ) ] for r in range ( R + 1 ) ]\n    for q in range ( 1 , R + 1 ) :\n        for r in range ( 1 , R + 1 ) :\n            if ( str [ q - 1 ] == str [ r - 1 ] and q != r ) :\n                Y [ q ] [ r ] = 1 + Y [ q - 1 ] [ r - 1 ]\n            else :\n                Y [ q ] [ r ] = max ( Y [ q ] [ r - 1 ] , Y [ q - 1 ] [ r ] )\n    y = ''\n    q = R\n    r = R\n    while ( q > 0 and r > 0 ) :\n        if ( Y [ q ] [ r ] == Y [ q - 1 ] [ r - 1 ] + 1 ) :\n            y += str [ q - 1 ]\n            q -= 1\n            r -= 1\n        elif ( Y [ q ] [ r ] == Y [ q - 1 ] [ r ] ) :\n            q -= 1\n        else :\n            r -= 1\n    y = ''.join ( reversed ( y ) )\n    return y"}
{"old_id": "LONGEST_REPEATING_SUBSEQUENCE", "code": "def Y ( str ) :\n    C = len ( str )\n    k = [ [ 0 ] * ( C + 1 ) ] * ( C + 1 )\n    for S in range ( 1 , C + 1 ) :\n        for b in range ( 1 , C + 1 ) :\n            if ( str [ S - 1 ] == str [ b - 1 ] and S != b ) :\n                k [ S ] [ b ] = 1 + k [ S - 1 ] [ b - 1 ]\n            else :\n                k [ S ] [ b ] = max ( k [ S ] [ b - 1 ] , k [ S - 1 ] [ b ] )\n    return k [ C ] [ C ]"}
{"old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S", "code": "def C ( Q , W ) :\n    k = { }\n    sum = 0\n    E = 0\n    for v in range ( W ) :\n        if Q [ v ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            E = v + 1\n        elif ( sum not in k ) :\n            k [ sum ] = v\n        if ( ( sum - 1 ) in k ) :\n            if ( E < ( v - k [ sum - 1 ] ) ) :\n                E = v - k [ sum - 1 ]\n    return E"}
{"old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K", "code": "def e ( P , s , L ) :\n    J = { }\n    y = [ 0 for Z in range ( s ) ]\n    max = 0\n    Y = 0\n    for Z in range ( s ) :\n        Y += P [ Z ]\n        y [ Z ] = ( ( Y % L ) + L ) % L\n    for Z in range ( s ) :\n        if ( y [ Z ] == 0 ) :\n            max = Z + 1\n        elif ( y [ Z ] in J ) :\n            J [ y [ Z ] ] = Z\n        else :\n            if ( max < ( Z - J [ y [ Z ] ] ) ) :\n                max = Z - J [ y [ Z ] ]\n    return max"}
{"old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2", "code": "def n ( e , R ) :\n    x = c ( lambda : 0 )\n    G = 0\n    for X in range ( R ) :\n        p = 0\n        if ( e [ X - 1 ] in x and p < x [ e [ X ] - 1 ] ) :\n            p = x [ e [ X ] - 1 ]\n        if ( e [ X ] + 1 in x and p < x [ e [ X ] + 1 ] ) :\n            p = x [ e [ X ] + 1 ]\n        x [ e [ X ] ] = p + 1\n        if G < x [ e [ X ] ] :\n            G = x [ e [ X ] ]\n    return G"}
{"old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE", "code": "def E ( W , a ) :\n    S = [ 1 for O in range ( a ) ]\n    for O in range ( a ) :\n        for D in range ( O ) :\n            if ( ( W [ O ] == W [ D ] + 1 ) or ( W [ O ] == W [ D ] - 1 ) ) :\n                S [ O ] = max ( S [ O ] , S [ D ] + 1 )\n    H = 1\n    for O in range ( a ) :\n        if ( H < S [ O ] ) :\n            H = S [ O ]\n    return H"}
{"old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT", "code": "def F(L):\n    for t in range(len(L)):\n        if 'a' <= L[t] <= 'z':\n            L[t] = chr(ord(L[t]) - ord('a') + ord('A'))\n    return ''.join(L)"}
{"old_id": "MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS", "code": "def Q ( str , X ) :\n    d = list(str)\n    m = 0\n    P = len ( str ) - 1\n    while ( m <= P ) :\n        if ( str [ m ] != str [ P ] ) :\n            d [ m ] = d [ P ] = max ( str [ m ] , str [ P ] )\n            X -= 1\n        m += 1\n        P -= 1\n    if ( X < 0 ) :\n        return \"Not possible\"\n    m = 0\n    P = len ( str ) - 1\n    while ( m <= P ) :\n        if ( m == P ) :\n            if ( X > 0 ) :\n                d [ m ] = '9'\n        if ( d [ m ] < '9' ) :\n            if ( X >= 2 and d [ m ] == str [ m ] and d [ P ] == str [ P ] ) :\n                X -= 1\n                d [ m ] = d [ P ] = '9'\n            elif ( X >= 1 and ( d [ m ] != str [ m ] or d [ P ] != str [ P ] ) ) :\n                X -= 1\n                d [ m ] = d [ P ] = '9'\n        m += 1\n        P -= 1\n    return \"\".join(d)"}
{"old_id": "MARKOV_MATRIX", "code": "def R ( K ) :\n    for F in range ( 0 , len ( K ) ) :\n        X = 0\n        for k in range ( 0 , len ( K [ F ] ) ) :\n            X = X + K [ F ] [ k ]\n        if ( X != 1 ) :\n            return False\n    return True"}
{"old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER", "code": "def H ( y , E , N , e ) :\n    C = - 1\n    n = - 1\n    h = [ [ 0 for l in range ( e + 1 ) ] for k in range ( E ) ]\n    for C in range ( E ) :\n        for n in range ( e + 1 ) :\n            if ( C == 0 ) :\n                if ( N - y [ C ] == n or N + y [ C ] == n ) :\n                    h [ C ] [ n ] = 1\n                else :\n                    h [ C ] [ n ] = 0\n            else :\n                if ( n - y [ C ] >= 0 and n + y [ C ] <= e ) :\n                    if ( h [ C - 1 ] [ n - y [ C ] ] == 1 or h [ C - 1 ] [ n + y [ C ] ] == 1 ) :\n                        h [ C ] [ n ] = 1\n                elif ( n - y [ C ] >= 0 ) :\n                    h [ C ] [ n ] = h [ C - 1 ] [ n - y [ C ] ]\n                elif ( n + y [ C ] <= e ) :\n                    h [ C ] [ n ] = h [ C - 1 ] [ n + y [ C ] ]\n                else :\n                    h [ C ] [ n ] = 0\n    for n in range ( e , - 1 , - 1 ) :\n        if ( h [ E - 1 ] [ n ] == 1 ) :\n            return n\n    return - 1"}
{"old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L", "code": "def n ( Y , C ) :\n    if C < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return J\n    H , L = [ J ] * ( C + 1 ) , [ J ] * C\n    b , W = [ J ] * ( C - 1 ) , [ J ] * ( C - 2 )\n    for s in range ( C - 1 , - 1 , - 1 ) :\n        H [ s ] = max ( H [ s + 1 ] , Y [ s ] )\n    for s in range ( C - 2 , - 1 , - 1 ) :\n        L [ s ] = max ( L [ s + 1 ] , H [ s + 1 ] - Y [ s ] )\n    for s in range ( C - 3 , - 1 , - 1 ) :\n        b [ s ] = max ( b [ s + 1 ] , L [ s + 1 ] + Y [ s ] )\n    for s in range ( C - 4 , - 1 , - 1 ) :\n        W [ s ] = max ( W [ s + 1 ] , b [ s + 1 ] - Y [ s ] )\n    return W [ 0 ]"}
{"old_id": "MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1", "code": "def B ( v ) :\n    Y = v // 3 \n    v -= Y\n    e = v // 2\n    U = v - e\n    return int ( Y * e * U )"}
{"old_id": "MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY", "code": "def R ( t , F ) :\n    t.sort ( reverse = True )\n    c = [ 0 , 0 ]\n    Y = 0\n    I = 0\n    while ( Y < F - 1 and I < 2 ) :\n        if ( t [ Y ] == t [ Y + 1 ] ) :\n            c [ I ] = t [ Y ]\n            I += 1\n            Y += 1\n        Y += 1\n    return ( c [ 0 ] * c [ 1 ] )"}
{"old_id": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY", "code": "def k ( T , l ) :\n    S = len ( T )\n    J = [ 0 ] * ( S + 1 )\n    J [ 0 ] = 0\n    for C in range ( S ) :\n        J [ C + 1 ] = J [ C ] + T [ C ]\n    v = [ 0 ] * S\n    sum = 0\n    for C in range ( S ) :\n        v [ C ] = ( J [ S ] - J [ C ] ) / ( S - C )\n    for R in range ( l - 1 ) :\n        for C in range ( S ) :\n            for K in range ( C + 1 , S ) :\n                v [ C ] = max ( v [ C ] , ( J [ K ] - J [ C ] ) / ( K - C ) + v [ K ] )\n    return  v [ 0 ]"}
{"old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE", "code": "def f ( I ) :\n    R = [ [ 0 for H in range ( I + 1 ) ] for s in range ( I + 1 ) ]\n    for O in range ( I + 1 ) :\n        for X in range ( min ( O , I ) + 1 ) :\n            if ( X == 0 or X == O ) :\n                R [ O ] [ X ] = 1\n            else :\n                R [ O ] [ X ] = ( R [ O - 1 ] [ X - 1 ] + R [ O - 1 ] [ X ] )\n    D = 0\n    for O in range ( I + 1 ) :\n        D = max ( D , R [ I ] [ O ] )\n    return D"}
{"old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY", "code": "def l ( D , q ) :\n    G = set ( )\n    for L in range ( q ) :\n        G.add ( D [ L ] )\n    O = 0\n    for L in range ( q ) :\n        if G.__contains__ ( D [ L ] ) :\n            A = D [ L ]\n            while ( G.__contains__ ( A ) ) :\n                A += 1\n            O = max ( O , A - D [ L ] )\n    return O"}
{"old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1", "code": "def Y ( str ) :\n    Z = len ( str )\n    count = 0\n    M = str [ 0 ]\n    H = 1\n    for i in range ( Z ) :\n        if ( i < Z - 1 and str [ i ] == str [ i + 1 ] ) :\n            H += 1\n        else :\n            if H > count :\n                count = H\n                M = str [ i ]\n            H = 1\n    return M"}
{"old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER", "code": "def u ( r , m ) :\n    q = Z ( lambda : 0 )\n    for A in range ( m ) :\n        q [ r [ A ] ] += 1\n    f = 0\n    for A in range ( m ) :\n        for g in range ( m ) :\n            if q [ r [ A ] ] > q [ r [ g ] ] and r [ A ] > r [ g ] :\n                f = max ( f , q [ r [ A ] ] - q [ r [ g ] ] )\n            elif q [ r [ A ] ] < q [ r [ g ] ] and r [ A ] < r [ g ] :\n                f = max ( f , q [ r [ g ] ] - q [ r [ A ] ] )\n    return f"}
{"old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX", "code": "def U ( S , H , v ) :\n    Q = [ 0 ] * H\n    for w in range ( 0 , H ) :\n        sum = 0\n        for t in range ( 0 , v ) :\n            sum += S [ w ] [ t ]\n        Q [ w ] = sum\n    N = Q [ 1 ] - Q [ 0 ]\n    Y = Q [ 0 ]\n    for w in range ( 1 , H ) :\n        if ( Q [ w ] - Y > N ) :\n            N = Q [ w ] - Y\n        if ( Q [ w ] < Y ) :\n            Y = Q [ w ]\n    return N"}
{"old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY", "code": "def v ( L , x ) :\n    W = { }\n    K = 0\n    for Z in range ( x ) :\n        if L [ Z ] not in W.keys ( ) :\n            W [ L [ Z ] ] = Z\n        else :\n            K = max ( K , Z - W [ L [ Z ] ] )\n    return K"}
{"old_id": "MAXIMUM_GAMES_PLAYED_WINNER", "code": "def d ( p ) :\n    R = [ 0 for Y in range ( p ) ]\n    R [ 0 ] = 1\n    R [ 1 ] = 2\n    Y = 1\n    while R [ Y ] <= p :\n        Y = Y + 1\n        R [ Y ] = R [ Y - 1 ] + R [ Y - 2 ]\n    return ( Y - 1 )"}
{"old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER", "code": "def i ( l , o ) :\n    count = 0\n    for H in range ( 0 , len ( o ) ) :\n        if ( count == len ( l ) ) :\n            break\n        if ( o [ H ] == l [ count ] ) :\n            count = count + 1\n    return count"}
{"old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1", "code": "def O ( S , b ) :\n    x = [ ]\n    max = 0\n    for F in range ( b ) :\n        x.append ( 1 )\n    for F in range ( b ) :\n        for n in range ( F ) :\n            if ( abs ( S [ F ] - S [ n ] ) <= 1 and x [ F ] < x [ n ] + 1 ) :\n                x [ F ] = x [ n ] + 1\n    for F in range ( b ) :\n        if ( max < x [ F ] ) :\n            max = x [ F ]\n    return max"}
{"old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS", "code": "def P ( y , g , R ) :\n    i , t , D = { } , 0 , 0\n    w = [ 0 ] * g\n    w [ 0 ] = y [ 0 ]\n    for A in range ( 1 , g ) :\n        w [ A ] = w [ A - 1 ] + y [ A ]\n    for A in range ( g ) :\n        t = w [ A ] % R\n        if ( not t and D < w [ A ] ) :\n            D = w [ A ]\n        elif ( not t in i ) :\n            i [ t ] = A\n        elif ( D < ( w [ A ] - w [ i [ t ] ] ) ) :\n            D = w [ A ] - w [ i [ t ] ]\n    return D // R"}
{"old_id": "MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE", "code": "def P ( D , T ) :\n    return ( D // T - 1 ) * ( D // T ) // 2"}
{"old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C", "code": "def F ( M , W , d , u ) :\n    g = [ - 1 ] * ( M + 10 )\n    g [ 0 ] = 0\n    for f in range ( 0 , M ) :\n        if ( g [ f ] != - 1 ) :\n            if ( f + W <= M ) :\n                g [ f + W ] = max ( g [ f ] + 1 , g [ f + W ] )\n            if ( f + d <= M ) :\n                g [ f + d ] = max ( g [ f ] + 1 , g [ f + d ] )\n            if ( f + u <= M ) :\n                g [ f + u ] = max ( g [ f ] + 1 , g [ f + u ] )\n    return g [ M ]"}
{"old_id": "MAXIMUM_POINTS_INTERSECTION_N_CIRCLES", "code": "def intersection ( p ) :\n    return p * ( p - 1 )"}
{"old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY", "code": "def N ( B , Q ) :\n    T = 0\n    l = 0\n    for C in range ( 0 , Q ) :\n        M = True\n        for A in range ( C + 1 , Q ) :\n            if ( B [ C ] == B [ A ] ) :\n                M = False\n                B [ C ] = B [ A ] = 0\n                break\n        if ( M == True ) :\n            if ( B [ C ] > 0 ) :\n                T += B [ C ]\n            else :\n                l += B [ C ]\n    return abs ( T - l )"}
{"old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1", "code": "def s ( U , d ) :\n    N = 0\n    U.sort ( )\n    g = 0\n    while g < d-1:\n        if ( U [ g ] !=  U [ g + 1 ] ) :\n            N += abs ( U [ g ] )\n        else:\n            g += 1\n        g += 1\n    if ( U [ d - 2 ] != U [ d - 1 ] ) :\n        N += abs ( U [ d - 1 ] )\n    return N"}
{"old_id": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE", "code": "def S ( o , h , I ) :\n    s = set ( )\n    B = 0\n    q = J = 0\n    for V in range ( 0 , I ) :\n        while o [ V ] in s :\n            s.remove ( o [ J ] )\n            q -= h [ J ]\n            J += 1\n        s.add ( o [ V ] )\n        q += h [ V ]\n        B = max ( B , q )\n    return B"}
{"old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE", "code": "def i ( T , R ) :\n    k = [ 0 ] * ( R )\n    for n in range ( R ) :\n        k [ n ] = T [ n ]\n    for n in range ( 1 , R ) :\n        for B in range ( n ) :\n            if ( T [ n ] > T [ B ] and k [ n ] < ( k [ B ] * T [ n ] ) ) :\n                k [ n ] = k [ B ] * T [ n ]\n    return max ( k )"}
{"old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY", "code": "def F ( d , t ) :\n    if t == 1 :\n        return d [ 0 ]\n    O = - 999999999999\n    C = 0\n    D = 0\n    m = 1\n    for W in range ( t ) :\n        if d [ W ] == 0 :\n            D += 1\n            continue\n        if d [ W ] < 0 :\n            C += 1\n            O = max ( O , d [ W ] )\n        m = m + d [ W ]\n    if D == t :\n        return 0\n    if C & 1 :\n        if ( C == 1 and D > 0 and D + C == t ) :\n            return 0\n        m = int(m / O)\n    return m"}
{"old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE", "code": "def j ( J , d ) :\n    q = [ 0 ] * d\n    X = J [ d - 1 ]\n    for H in range ( d - 2 , 0 , - 1 ) :\n        if J [ H ] > X :\n            X = J [ H ]\n        q [ H ] = max ( q [ H + 1 ] , X - J [ H ] )\n    p = J [ 0 ]\n    for H in range ( 1 , d ) :\n        if J [ H ] < p :\n            p = J [ H ]\n        q [ H ] = max ( q [ H - 1 ] , q [ H ] + ( J [ H ] - p ) )\n    F = q [ d - 1 ]\n    return F"}
{"old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION", "code": "def P ( V , R , L ) :\n    A = - 2147483648\n    C = 0\n    for U in range ( R * L ) :\n        C = C + V [ U % R ]\n        if ( A < C ) :\n            A = C\n        if ( C < 0 ) :\n            C = 0\n    return A"}
{"old_id": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM", "code": "def b ( N , Z ) :\n    d = 0\n    Q = - math.R\n    F = [ ]\n    F.append ( N [ 0 ] )\n    for i in range ( 1 , Z ) :\n        F.append ( F [ i - 1 ] + N [ i ] )\n    for i in range ( Z ) :\n        Q = max ( Q , F [ i ] - d )\n        d = min ( d , F [ i ] )\n    return Q"}
{"old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE", "code": "def S ( V , R ) :\n    sum = [ 0 for O in range ( R ) ]\n    if R >= 1 :\n        sum [ 0 ] = V [ 0 ]\n    if R >= 2 :\n        sum [ 1 ] = V [ 0 ] + V [ 1 ]\n    if R > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( V [ 1 ] + V [ 2 ] , V [ 0 ] + V [ 2 ] ) )\n    for g in range ( 3 , R ) :\n        sum [ g ] = max ( max ( sum [ g - 1 ] , sum [ g - 2 ] + V [ g ] ) , V [ g ] + V [ g - 1 ] + sum [ g - 3 ] )\n    return sum [ R - 1 ]"}
{"old_id": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT", "code": "def F ( W , u ) :\n    i = max ( W [ 0 ] [ 0 ] , W [ 1 ] [ 0 ] )\n    U = 0\n    for O in range ( 1 , u ) :\n        R = max ( U , i )\n        i = U + max ( W [ 0 ] [ O ] , W [ 1 ] [ O ] )\n        U = R\n    return max ( U , i )"}
{"old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM", "code": "def K ( U , P ) :\n    if ( P == 1 ) :\n        return U [ 0 ]\n    X = [ 0 for L in range ( P + 1 ) ]\n    w = [ 0 for L in range ( P + 1 ) ]\n    X [ 0 ] = w [ 0 ] = U [ 0 ]\n    Z = 0\n    for L in range ( 1 , P ) :\n        for r in range ( L ) :\n            if ( U [ r ] > U [ L ] ) :\n                X [ L ] = max ( X [ L ] , w [ r ] + U [ L ] )\n                Z = 1\n            elif ( U [ r ] < U [ L ] and Z == 1 ) :\n                w [ L ] = max ( w [ L ] , X [ r ] + U [ L ] )\n    s = - 2147483648\n    for L in range ( P ) :\n        if ( s < w [ L ] ) :\n            s = w [ L ]\n        if ( s < X [ L ] ) :\n            s = X [ L ]\n    return s"}
{"old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY", "code": "def A ( w , Q ) :\n    m = [ None ] * Q\n    q = [ None ] * Q\n    S = 0\n    m [ 0 ] = w [ 0 ]\n    for j in range ( 1 , Q ) :\n        if ( w [ j ] > w [ j - 1 ] ) :\n            m [ j ] = m [ j - 1 ] + w [ j ]\n        else :\n            m [ j ] = w [ j ]\n    q [ Q - 1 ] = w [ Q - 1 ]\n    for j in range ( Q - 2 , - 1 , - 1 ) :\n        if ( w [ j ] > w [ j + 1 ] ) :\n            q [ j ] = q [ j + 1 ] + w [ j ]\n        else :\n            q [ j ] = w [ j ]\n    for j in range ( Q ) :\n        if ( S < ( m [ j ] + q [ j ] - w [ j ] ) ) :\n            S = ( m [ j ] + q [ j ] - w [ j ] )\n    return S"}
{"old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY", "code": "def x ( j , r ) :\n    O = - sys.p\n    for G in range ( 0 , r ) :\n        J = 0\n        for f in range ( 0 , r ) :\n            index = int ( ( G + f ) % r )\n            J += f * j [ index ]\n        O = max ( O , J )\n    return O"}
{"old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1", "code": "def h ( f , A ) :\n    L = 0\n    for z in range ( 0 , A ) :\n        L += f [ z ]\n    G = 0\n    for z in range ( 0 , A ) :\n        G += z * f [ z ]\n    X = G\n    for z in range ( 1 , A ) :\n        S = ( G - ( L - f [ z - 1 ] ) + f [ z - 1 ] * ( A - 1 ) )\n        G = S\n        X = max ( X , S )\n    return X"}
{"old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE", "code": "def Y ( L , m , S ) :\n    L.sort ( )\n    N = [ 0 ] * m\n    N [ 0 ] = 0\n    for D in range ( 1 , m ) :\n        N [ D ] = N [ D - 1 ]\n        if ( L [ D ] - L [ D - 1 ] < S ) :\n            if ( D >= 2 ) :\n                N [ D ] = max ( N [ D ] , N [ D - 2 ] + L [ D ] + L [ D - 1 ] )\n            else :\n                N [ D ] = max ( N [ D ] , L [ D ] + L [ D - 1 ] )\n    return N [ m - 1 ]"}
{"old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1", "code": "def G ( T , A , f ) :\n    V = 0\n    T.sort ( )\n    s = A - 1\n    while ( s > 0 ) :\n        if ( T [ s ] - T [ s - 1 ] < f ) :\n            V += T [ s ]\n            V += T [ s - 1 ]\n            s -= 1\n        s -= 1\n    return V"}
{"old_id": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT", "code": "def E ( R , t ) :\n    I = [ 0 for K in range ( t ) ]\n    y = [ 0 for K in range ( t ) ]\n    G , s = R [ 0 ] , R [ 0 ]\n    for r in range (1, t ) :\n        G = max ( R [ r ] , G + R [ r ] )\n        s = max ( s , G )\n        I [ r ] = G\n    G = s = y [ t - 1 ] = R [ t - 1 ]\n    r = t - 2\n    while r >= 0 :\n        G = max ( R [ r ] , G + R [ r ] )\n        s = max ( s , G )\n        y [ r ] = G\n        r -= 1\n    j = s\n    for r in range ( 1 , t - 1 ) :\n        j = max ( j , I [ r - 1 ] + y [ r + 1 ] )\n    return j"}
{"old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS", "code": "def b ( W , r , L ) :\n    K = [ 0 for h in range ( r ) ]\n    K [ r - 1 ] = W [ r - 1 ]\n    for h in range ( r - 2 , - 1 , - 1 ) :\n        if ( h + L + 1 >= r ) :\n            K [ h ] = max ( W [ h ] , K [ h + 1 ] )\n        else :\n            K [ h ] = max ( W [ h ] + K [ h + L + 1 ] , K [ h + 1 ] )\n    return K [ 0 ]"}
{"old_id": "MAXIMUM_TRIPLET_SUM_ARRAY", "code": "def L ( V , t ) :\n    m = - 1000000\n    for Y in range ( 0 , t ) :\n        for C in range ( Y + 1 , t ) :\n            for H in range ( C + 1 , t ) :\n                if ( m < ( V [ Y ] + V [ C ] + V [ H ] ) ) :\n                    m = V [ Y ] + V [ C ] + V [ H ]\n    return m"}
{"old_id": "MAXIMUM_TRIPLET_SUM_ARRAY_1", "code": "def v ( a , O ) :\n    a.sort ( )\n    return ( a [ O - 1 ] + a [ O - 2 ] + a [ O - 3 ] )"}
{"old_id": "MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING", "code": "def R ( z ) :\n    S = list ( )\n    S.append ( 0 )\n    S.append ( 1 )\n    M = 2\n    while M < z + 1 :\n        S.append ( max ( M , ( S [ int ( M / 2 ) ] + S [ int ( M / 3 ) ] + S [ int ( M / 4 ) ] + S [ int ( M / 5 ) ] ) ) )\n        M = M + 1\n    return S [ z ]"}
{"old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX", "code": "def D ( J , Z ) :\n    c = [ [ 0 for B in range ( Z ) ] for G in range ( Z ) ]\n    c [ 0 ] [ 0 ] = J [ 0 ] [ 0 ]\n    for B in range ( 1 , Z ) :\n        c [ B ] [ 0 ] = J [ B ] [ 0 ] + c [ B - 1 ] [ 0 ]\n    for B in range ( 1 , Z ) :\n        for G in range ( 1 , min ( B + 1 , Z ) ) :\n            c [ B ] [ G ] = J [ B ] [ G ] + \\\n                max ( c [ B - 1 ] [ G - 1 ] , c [ B - 1 ] [ G ] )\n    y = 0\n    for B in range ( Z ) :\n        if ( y < c [ Z - 1 ] [ B ] ) :\n            y = c [ Z - 1 ] [ B ]\n    return y"}
{"old_id": "MEDIAN_OF_TWO_SORTED_ARRAYS", "code": "def K ( g , F , H ) :\n    D = 0\n    S = 0\n    E = - 1\n    e = - 1\n    count = 0\n    while count < H + 1 :\n        count += 1\n        if D == H :\n            E = e\n            e = F [ 0 ]\n            break\n        elif S == H :\n            E = e\n            e = g [ 0 ]\n            break\n        if g [ D ] < F [ S ] :\n            E = e\n            e = g [ D ]\n            D += 1\n        else :\n            E = e\n            e = F [ S ]\n            S += 1\n    return int(( E + e ) / 2)"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS", "code": "def Y ( C , F , k ) :\n    if ( ( C < F and F < k ) or ( k < F and F < C ) ) :\n        return F\n    if ( ( F < C and C < k ) or ( k < C and C < F ) ) :\n        return C\n    else :\n        return k"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1", "code": "def E ( Y , o , O ) :\n    if Y > o :\n        if ( o > O ) :\n            return o\n        elif ( Y > O ) :\n            return O\n        else :\n            return Y\n    else :\n        if ( Y > O ) :\n            return Y\n        elif ( o > O ) :\n            return O\n        else :\n            return o"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2", "code": "def m ( O , S , C ) :\n    z = O - S\n    t = S - C\n    n = O - C\n    if z * t > 0 :\n        return S\n    elif ( z * n > 0 ) :\n        return C\n    else :\n        return O"}
{"old_id": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED", "code": "def g ( l , O , i ) :\n    sorted ( l )\n    sorted ( O )\n    v = 0\n    for E in range ( i ) :\n        v += ( l [ E ] * O [ i - E - 1 ] )\n    return v"}
{"old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS", "code": "def K ( i , Y , J ) :\n    if ( Y == 1 ) :\n        return 0\n    i.sort ( )\n    u = i [ Y - 1 ] - i [ 0 ]\n    U = i [ 0 ] + J\n    g = i [ Y - 1 ] - J\n    if ( U > g ) :\n        U , g = g , U\n    for j in range ( 1 , Y - 1 ) :\n        S = i [ j ] - J\n        add = i [ j ] + J\n        if ( S >= U or add <= g ) :\n            continue\n        if ( g - S <= add - U ) :\n            U = S\n        else :\n            g = add\n    return min ( u , g - U )"}
{"old_id": "MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N", "code": "def B ( x ) :\n    sum = 0\n    while ( x > 0 ) :\n        sum += ( x % 10 )\n        x //= 10\n    if ( sum == 1 ) :\n        return 10\n    return sum"}
{"old_id": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY", "code": "def v ( o , Z ) :\n    O = sys.r\n    sum = 0\n    for l in range ( Z ) :\n        O = min ( o [ l ] , O )\n        sum += o [ l ]\n    return O * ( sum - O )"}
{"old_id": "MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS", "code": "def X ( f , C ) :\n    return ( ( C - 1 ) * min ( f ) )"}
{"old_id": "MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K", "code": "def z ( b , Y , V , K , M , c ) :\n    if M == 0 :\n        return 0\n    if V < 0 or K < 0 :\n        return 1000000000\n    if c [ V ] [ K ] [ M ] != - 1 :\n        return c [ V ] [ K ] [ M ]\n    a = ( ( ord ( b [ V ] ) - ord ( 'a' ) ) ^ ( ord ( Y [ K ] ) - ord ( 'a' ) ) )\n    c [ V ] [ K ] [ M ] = min ( [ a + z ( b , Y , V - 1 , K - 1 , M - 1 , c ) , z ( b , Y , V - 1 , K , M , c ) , z ( b , Y , V , K - 1 , M , c ) ] )\n    return c [ V ] [ K ] [ M ]"}
{"old_id": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1", "code": "def C ( S , V ) :\n    a = 0\n    for F in range ( V ) :\n        for T in range ( V ) :\n            d = S [ F ] [ T ] // V\n            q = d\n            L = S [ F ] [ T ] - ( V * d )\n            a += ( abs ( q - F ) + abs ( L - T ) )\n    return a"}
{"old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG", "code": "def c ( i , C , m ) :\n    R = list ( )\n    w = list ( )\n    g = 0\n    for a in range ( C ) :\n        if ( i [ a ] != - 1 ) :\n            R.append ( i [ a ] )\n            w.append ( a + 1 )\n            g += 1\n    C = g\n    r = [ [ 0 for a in range ( m + 1 ) ] for D in range ( C + 1 ) ]\n    for a in range ( m + 1 ) :\n        r [ 0 ] [ a ] = z\n    for a in range ( 1 , C + 1 ) :\n        r [ a ] [ 0 ] = 0\n    for a in range ( 1 , C + 1 ) :\n        for D in range ( 1 , m + 1 ) :\n            if ( w [ a - 1 ] > D ) :\n                r [ a ] [ D ] = r [ a - 1 ] [ D ]\n            else :\n                r [ a ] [ D ] = min ( r [ a - 1 ] [ D ] , r [ a ] [ D - w [ a - 1 ] ] + R [ a - 1 ] )\n    if ( r [ C ] [ m ] == z ) :\n        return - 1\n    else :\n        return r [ C ] [ m ]"}
{"old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1", "code": "def p ( R , m ) :\n    I = 0\n    for b in range ( m ) :\n        for o in range ( b ) :\n            if R [ b ] [ o ] != R [ o ] [ b ] :\n                I += 1\n    return I"}
{"old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL", "code": "def r ( X , a , B ) :\n    M = max ( X )\n    u = 0\n    for f in range ( 0 , a ) :\n        if ( ( M - X [ f ] ) % B != 0 ) :\n            return - 1\n        else :\n            u += ( M - X [ f ] ) / B\n    return int ( u )"}
{"old_id": "MINIMUM_INSERTIONS_SORT_ARRAY", "code": "def E ( Y , f ) :\n    w = [ 0 ] * f\n    for n in range ( f ) :\n        w [ n ] = 1\n    for n in range ( 1 , f ) :\n        for j in range ( n ) :\n            if ( Y [ n ] >= Y [ j ] and w [ n ] < w [ j ] + 1 ) :\n                w [ n ] = w [ j ] + 1\n    max = 0\n    for n in range ( f ) :\n        if ( max < w [ n ] ) :\n            max = w [ n ]\n    return ( f - max )"}
{"old_id": "MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1", "code": "def L ( t , q , H ) :\n    O = 0\n    C = q + 1\n    T = 0\n    u = 0\n    while ( u < q ) :\n        while ( O <= H and u < q ) :\n            if ( O <= 0 and H > 0 ) :\n                T = u\n                O = 0\n            O += t [ u ]\n            u += 1\n        while ( O > H and T < q ) :\n            if ( u - T < C ) :\n                C = u - T\n            O -= t [ T ]\n            T += 1\n    return C"}
{"old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1", "code": "def e ( S , b ) :\n    E = [ 0 for J in range ( b ) ]\n    if ( b == 0 ) or ( S [ 0 ] == 0 ) :\n        return float ( 'inf' )\n    E [ 0 ] = 0\n    for J in range ( 1 , b ) :\n        E [ J ] = float ( 'inf' )\n        for T in range ( J ) :\n            if ( J <= T + S [ T ] ) and ( E [ T ] != float ( 'inf' ) ) :\n                E [ J ] = min ( E [ J ] , E [ T ] + 1 )\n                break\n    return E [ b - 1 ]"}
{"old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2", "code": "def P ( d , r ) :\n    q = [ 0 for k in range ( r ) ]\n    for k in range ( r - 2 , - 1 , - 1 ) :\n        if ( d [ k ] == 0 ) :\n            q [ k ] = float ( 'inf' )\n        elif ( d [ k ] >= r - k - 1 ) :\n            q [ k ] = 1\n        else :\n            min = float ( 'inf' )\n            for N in range ( k + 1 , r ) :\n                if ( N <= d [ k ] + k ) :\n                    if ( min > q [ N ] ) :\n                        min = q [ N ]\n            if ( min != float ( 'inf' ) ) :\n                q [ k ] = min + 1\n            else :\n                q [ k ] = min\n    return q [ 0 ]"}
{"old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1", "code": "def M ( U ) :\n    o = [ 0 , 1 , 2 , 3 ]\n    for p in range ( 4 , U + 1 ) :\n        o.append ( p )\n        for q in range ( 1 , int ( h ( O ( p ) ) ) + 1 ) :\n            y = q * q ;\n            if y > p :\n                break\n            else :\n                o [ p ] = min ( o [ p ] , 1 + o [ p - y ] )\n    return o [ U ]"}
{"old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS", "code": "def e ( X , Z ) :\n    p = 0\n    X.sort ( )\n    Q = 0\n    while Q < Z:\n        count = 1\n        D = Q\n        while D < Z - 1:\n            if X [ D ] == X [ D + 1 ] :\n                count += 1\n            else :\n                break\n            D += 1\n        Q = D\n        Q += 1\n        p = max ( p , count )\n    return p"}
{"old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1", "code": "def s ( f , g ) :\n    Q = max(f)\n    L = min(f)\n    I = { G : 0 for G in range ( L, Q+1 ) }\n    for G in range ( g ) :\n        I [ f [ G ] ] += 1\n    l = 0\n    for k , O in I.items ( ) :\n        l = max ( l , O )\n    return l"}
{"old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY", "code": "def c ( M , e ) :\n    Q = l ( lambda : 0 )\n    for Y in range ( 0 , e ) :\n        Q [ M [ Y ] ] += 1\n    b = 0\n    for Y in Q :\n        if b < Q [ Y ] :\n            b = Q [ Y ]\n    return e - b"}
{"old_id": "MINIMUM_PERIMETER_N_BLOCKS", "code": "def Q ( T ) :\n    r = int ( math.h ( T ) )\n    K = r * r\n    if ( K == T ) :\n        return r * 4\n    else :\n        w = int ( T / r )\n        J = 2 * ( r + w )\n        if ( T % r != 0 ) :\n            J += 2\n        return J"}
{"old_id": "MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS", "code": "def I(G, Y, c):\n    S = []\n    for T in range(Y):\n        heapq.p(S, G[T])\n    count = 0\n    W = 1\n    while S and count < c:\n        W += heapq.i(S)\n        count += 1\n    return W"}
{"old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY", "code": "def E ( A , L ) :\n    if ( L == 1 ) :\n        return A [ 0 ]\n    Z = float ( '-inf' )\n    y = float ( 'inf' )\n    k = 0\n    w = 0\n    H = 1\n    for W in range ( 0 , L ) :\n        if ( A [ W ] == 0 ) :\n            w = w + 1\n            continue\n        if ( A [ W ] < 0 ) :\n            k = k + 1\n            Z = max ( Z , A [ W ] )\n        if ( A [ W ] > 0 ) :\n            y = min ( y , A [ W ] )\n        H = H * A [ W ]\n    if ( w == L or ( k == 0 and w > 0 ) ) :\n        return 0\n    if ( k == 0 ) :\n        return y\n    if ( ( k & 1 ) == 0 and k != 0 ) :\n        H = int ( H / Z )\n    return H"}
{"old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE", "code": "def a ( x , w , O ) :\n    G = [ 0 ] * O\n    for K in range ( w ) :\n        for S in range ( O ) :\n            if K < len(x) and S < len(x[K]):\n                if ( x [ K ] [ S ] == '1' ) :\n                    G [ S ] += 1\n    return max ( G )"}
{"old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING", "code": "def H ( str ) :\n    w = str + str\n    Z = len ( str )\n    for b in range ( 1 , Z + 1 ) :\n        m = w [ b : Z ]\n        if ( str == m ) :\n            return b\n    return Z"}
{"old_id": "MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK", "code": "def k ( input , R ) :\n    T = 0\n    while ( input > 0 or R > 0 ) :\n        p = input % 10\n        n = R % 10\n        T += min ( abs ( p - n ) , 10 - abs ( p - n ) )\n        input = int ( input / 10 )\n        R = int ( R / 10 )\n    return T"}
{"old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION", "code": "def Q ( J ) :\n    z = [ 0 ] * ( J + 1 )\n    for H in range ( J + 1 ) :\n        z [ H ] = J - H\n    for H in range ( J , 0 , - 1 ) :\n        if ( not ( H % 2 ) ) :\n            z [ H // 2 ] = min ( z [ H ] + 1 , z [ H // 2 ] )\n        if ( not ( H % 3 ) ) :\n            z [ H // 3 ] = min ( z [ H ] + 1 , z [ H // 3 ] )\n    return z [ 1 ]"}
{"old_id": "MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY", "code": "def W ( Y, T ) :\n    m = min ( Y ) ;\n    return m * ( T - 1 )"}
{"old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS", "code": "def P ( M , U , f , q ) :\n    x = 0\n    s = 0\n    w = 0\n    for G in range ( f ) :\n        a = M [ G ] * U [ G ]\n        s = s + a\n        if ( a < 0 and U [ G ] < 0 ) :\n            w = ( M [ G ] + 2 * q ) * U [ G ]\n        elif ( a < 0 and M [ G ] < 0 ) :\n            w = ( M [ G ] - 2 * q ) * U [ G ]\n        elif ( a > 0 and M [ G ] < 0 ) :\n            w = ( M [ G ] + 2 * q ) * U [ G ]\n        elif ( a > 0 and M [ G ] > 0 ) :\n            w = ( M [ G ] - 2 * q ) * U [ G ]\n        g = abs ( a - w )\n        if ( g > x ) :\n            x = g\n    return s - x"}
{"old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED", "code": "def x ( N , C ) :\n    D = [ 0 ] * C\n    if ( C == 1 ) :\n        return N [ 0 ]\n    if ( C == 2 ) :\n        return min ( N [ 0 ] , N [ 1 ] )\n    if ( C == 3 ) :\n        return min ( N [ 0 ] , min ( N [ 1 ] , N [ 2 ] ) )\n    if ( C == 4 ) :\n        return min ( min ( N [ 0 ] , N [ 1 ] ) , min ( N [ 2 ] , N [ 3 ] ) )\n    D [ 0 ] = N [ 0 ]\n    D [ 1 ] = N [ 1 ]\n    D [ 2 ] = N [ 2 ]\n    D [ 3 ] = N [ 3 ]\n    for L in range ( 4 , C ) :\n        D [ L ] = N [ L ] + min ( min ( D [ L - 1 ] , D [ L - 2 ] ) , min ( D [ L - 3 ] , D [ L - 4 ] ) )\n    return min ( min ( D [ C - 1 ] , D [ C - 2 ] ) , min ( D [ C - 4 ] , D [ C - 3 ] ) )"}
{"old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY", "code": "def L ( Q , E ) :\n    Q.sort ( )\n    e = 0\n    Z = 0\n    for W in range ( E ) :\n        if ( W % 2 != 0 ) :\n            e = e * 10 + Q [ W ]\n        else :\n            Z = Z * 10 + Q [ W ]\n    return e + Z"}
{"old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION", "code": "def z ( e , insert , remove , copy ) :\n    if e == 0 :\n        return 0\n    if e == 1 :\n        return insert\n    s = [ 0 ] * ( e + 1 )\n    for O in range ( 1 , e + 1 ) :\n        if O % 2 == 0 :\n            s [ O ] = min ( s [ O - 1 ] + insert , s [ O // 2 ] + copy )\n        else :\n            s [ O ] = min ( s [ O - 1 ] + insert , s [ ( O + 1 ) // 2 ] + copy + remove )\n    return s [ e ]"}
{"old_id": "MINIMUM_XOR_VALUE_PAIR", "code": "def o ( K , s ) :\n    G = 999999\n    z = 0\n    for A in range ( 0 , s ) :\n        for v in range ( A + 1 , s ) :\n            z = K [ A ] ^ K [ v ]\n            G = min ( G , z )\n    return G"}
{"old_id": "MINIMUM_XOR_VALUE_PAIR_1", "code": "def h ( Z , H ) :\n    Z = Z [ : H ]\n    Z.sort ( )\n    Y = int ( sys.r.max )\n    n = 0\n    for k in range ( 0 , H - 1 ) :\n        n = Z [ k ] ^ Z [ k + 1 ]\n        Y = min ( Y , n )\n    return Y"}
{"old_id": "MIRROR_CHARACTERS_STRING", "code": "def r ( str , G ) :\n    H = \"zyxwvutsrqponmlkjihgfedcba\"\n    o = len ( str )\n    l = \"\"\n    for R in range ( 0 , G ) :\n        if R < o:\n            l = l + str [ R ]\n    for R in range ( G , o ) :\n        l = ( l + H [ ord ( str [ R ] ) - ord ( \"a\" ) ] )\n    return l"}
{"old_id": "MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC", "code": "def f ( o , j , Q ) :\n    b = 1\n    o = o % Q\n    while ( j > 0 ) :\n        if ( ( j & 1 ) == 1 ) :\n            b = ( b * o ) % Q\n        j = j >> 1\n        o = ( o * o ) % Q\n    return b"}
{"old_id": "MODULUS_TWO_FLOAT_DOUBLE_NUMBERS", "code": "def K ( f , R ) :\n    if ( f < 0 ) :\n        f = - f\n    if ( R < 0 ) :\n        R = - R\n    Q = f\n    while ( Q >= R ) :\n        Q = Q - R\n    if ( f < 0 ) :\n        return - Q\n    return Q"}
{"old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED", "code": "def P ( j , y ) :\n    i = [ 0 for r in range ( y ) ]\n    D = 0\n    for e in range ( y ) :\n        if ( j [ e ] >= 0 ) :\n            i [ D ] = j [ e ]\n            D += 1\n    if ( D == y or D == 0 ) :\n        return\n    for e in range ( y ) :\n        if ( j [ e ] < 0 ) :\n            i [ D ] = j [ e ]\n            D += 1\n    for r in range ( y ) :\n        j [ r ] = i [ r ]"}
{"old_id": "MULTIPLY_AN_INTEGER_WITH_3_5", "code": "def L ( V ) :\n    return ( V << 1 ) + V + ( V >> 1 )"}
{"old_id": "MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO", "code": "def j ( Q , I , M ) :\n    P = 0 ;\n    Q = Q % M ;\n    while ( I ) :\n        if ( I & 1 ) :\n            P = ( P + Q ) % M ;\n        Q = ( 2 * Q ) % M ;\n        I >>= 1 ;\n    return P ;"}
{"old_id": "MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS", "code": "def E ( Q , e ) :\n    if ( e == 0 ) :\n        return 0\n    if ( e > 0 ) :\n        return ( Q + E ( Q , e - 1 ) )\n    if ( e < 0 ) :\n        return - E ( Q , - e )"}
{"old_id": "NEWMAN_CONWAY_SEQUENCE_1", "code": "def w ( l ) :\n    U = f.f ( 'i' , [ 0 , 1 , 1 ] )\n    for c in range ( 3 , l + 1 ) :\n        C = U [ U [ c - 1 ] ] + U [ c - U [ c - 1 ] ]\n        U.append ( C )\n    return U[l]"}
{"old_id": "NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS", "code": "def P ( d ) :\n    next = 0\n    if ( d ) :\n        w = d & - ( d )\n        r = d + int ( w )\n        L = d ^ int ( r )\n        L = ( int ( L ) / int ( w ) )\n        L = int ( L ) >> 2\n        next = r | L\n    return next"}
{"old_id": "NEXT_POWER_OF_2", "code": "def d ( D ) :\n    count = 0\n    if ( D and not ( D & ( D - 1 ) ) ) :\n        return D\n    while ( D != 0 ) :\n        D >>= 1\n        count += 1\n    return 1 << count"}
{"old_id": "NEXT_POWER_OF_2_1", "code": "def m ( N ) :\n    T = 1\n    if ( N and not ( N & ( N - 1 ) ) ) :\n        return N\n    while ( T < N ) :\n        T <<= 1\n    return T"}
{"old_id": "NEXT_POWER_OF_2_2", "code": "def l ( r ) :\n    r -= 1\n    r |= r >> 1\n    r |= r >> 2\n    r |= r >> 4\n    r |= r >> 8\n    r |= r >> 16\n    r += 1\n    return r"}
{"old_id": "NON_REPEATING_ELEMENT", "code": "def K ( l , G ) :\n    for e in range ( G ) :\n        x = 0\n        while ( x < G ) :\n            if ( e != x and l [ e ] == l [ x ] ) :\n                break\n            x += 1\n        if ( x == G ) :\n            return l [ e ]\n    return - 1"}
{"old_id": "NON_REPEATING_ELEMENT_1", "code": "def d ( b , Z ) :\n    f = R ( lambda : 0 )\n    for O in range ( Z ) :\n        f [ b [ O ] ] += 1\n    for O in range ( Z ) :\n        if f [ b [ O ] ] == 1 :\n            return b [ O ]\n    return - 1"}
{"old_id": "NTH_EVEN_LENGTH_PALINDROME", "code": "def P ( y ) :\n    E = y\n    for I in range ( len ( y ) - 1 , - 1 , - 1 ) :\n        E += y [ I ]\n    return E"}
{"old_id": "NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES", "code": "def T ( g , R ) :\n    m = 0\n    G = 1\n    v = 2\n    while v != 0 :\n        Y = m + G\n        m = G\n        G = Y\n        if G % g == 0 :\n            return R * v\n        v += 1\n    return"}
{"old_id": "NTH_NON_FIBONACCI_NUMBER", "code": "def D ( w ) :\n    M = 1\n    W = 2\n    R = 3\n    while w > 0 :\n        M = W\n        W = R\n        R = M + W\n        w = w - ( R - W - 1 )\n    w = w + ( R - W - 1 )\n    return W + w"}
{"old_id": "NTH_PENTAGONAL_NUMBER", "code": "def O ( H ) :\n    return ( 3 * H * H - H ) / 2"}
{"old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS", "code": "def c ( Z , h ) :\n    count = 0\n    g = abs ( Z * h )\n    if ( g == 0 ) :\n        return 1\n    while ( g > 0 ) :\n        count = count + 1\n        g = g // 10\n    return count"}
{"old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1", "code": "def r ( W , M ) :\n    if ( W == 0 or M == 0 ) :\n        return 1\n    return math.u ( math.p ( abs ( W ) ) + math.p ( abs ( M ) ) ) + 1"}
{"old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3", "code": "def E ( g ) :\n    o = len ( g )\n    sum = 0\n    for r in range ( o ) :\n        sum += ord ( g [ r ] )\n    if ( sum % 3 == 0 ) :\n        return 0\n    if ( o == 1 ) :\n        return - 1\n    for r in range ( o ) :\n        if ( sum % 3 == ord ( g [ r ] ) % 3 ) :\n            return 1\n    if ( o == 2 ) :\n        return - 1\n    return 2"}
{"old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE", "code": "def I ( L , M , U , H ) :\n    count = 0\n    for c in range ( U , H ) :\n        if ( L [ c ] == L [ c + 1 ] ) :\n            count += 1\n    return count"}
{"old_id": "NUMBER_IS_DIVISIBLE_BY_29_OR_NOT", "code": "def H ( B ) :\n    while ( int ( B / 100 ) ) :\n        n = int ( B % 10 )\n        B = int ( B / 10 )\n        B += n * 3\n    return ( B % 29 == 0 )"}
{"old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N", "code": "def H ( f ) :\n    r = 0\n    for e in range ( f + 1 ) :\n        for X in range ( f + 1 ) :\n            for N in range ( f + 1 ) :\n                if e + X + N == f :\n                    r += 1\n    return r"}
{"old_id": "NUMBER_N_DIGITS_NON_DECREASING_INTEGERS", "code": "def d ( x ) :\n    Y = N.K ( ( x + 1 , 10 ) )\n    for B in range ( 10 ) :\n        Y [ 0 ] [ B ] = 1\n    for B in range ( 1 , x + 1 ) :\n        Y [ B ] [ 9 ] = 1\n    for B in range ( 1 , x + 1 ) :\n        for w in range ( 8 , - 1 , - 1 ) :\n            Y [ B ] [ w ] = Y [ B - 1 ] [ w ] + Y [ B ] [ w + 1 ]\n    return int ( Y [ x ] [ 0 ] )"}
{"old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS", "code": "def z ( K ) :\n    Z = [ [ 0 for C in range ( 10 ) ] for w in range ( K + 1 ) ]\n    if ( K == 1 ) :\n        return 10\n    for G in range ( 10 ) :\n        Z [ 1 ] [ G ] = 1\n    for r in range ( 2 , K + 1 ) :\n        for G in range ( 10 ) :\n            if ( G == 0 ) :\n                Z [ r ] [ G ] = Z [ r - 1 ] [ G + 1 ]\n            elif ( G == 9 ) :\n                Z [ r ] [ G ] = Z [ r - 1 ] [ G - 1 ]\n            else :\n                Z [ r ] [ G ] = ( Z [ r - 1 ] [ G - 1 ] + Z [ r - 1 ] [ G + 1 ] )\n    sum = 0\n    for G in range ( 1 , 10 ) :\n        sum = sum + Z [ K ] [ G ]\n    return sum"}
{"old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT", "code": "def E ( g , B ) :\n    c = 0\n    A = 0\n    for l in range ( B ) :\n        if g [ l ] == 0 :\n            c += 1\n        if g [ l ] == 2 :\n            A += 1\n    e = ( c * ( c - 1 ) ) // 2 + \\\n        ( A * ( A - 1 ) ) // 2\n    return e"}
{"old_id": "NUMBER_RECTANGLES_NM_GRID", "code": "def j ( W , F ) :\n    return ( F * W * ( W + 1 ) * ( F + 1 ) ) // 4"}
{"old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES", "code": "def d ( i , I ) :\n    M = len ( i )\n    j = 0\n    w = 0\n    n = 0\n    for K in range ( M ) :\n        if i [ K ] == 'a' :\n            j += 1\n        if i [ K ] == 'b' :\n            w += 1\n            n += j\n    return n * I + int ( I * ( I - 1 ) / 2 ) * j * w"}
{"old_id": "NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N", "code": "def M ( str , D ) :\n    L = len ( str )\n    R = [ [ 0 for i in range ( D ) ] for c in range ( L ) ]\n    R [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % D ] += 1\n    for h in range ( 1 , L ) :\n        R [ h ] [ ( ord ( str [ h ] ) - ord ( '0' ) ) % D ] += 1\n        for Q in range ( D ) :\n            R [ h ] [ Q ] += R [ h - 1 ] [ Q ]\n            R [ h ] [ ( Q * 10 + ( ord ( str [ h ] ) - ord ( '0' ) ) ) % D ] += R [ h - 1 ] [ Q ]\n    return R [ L - 1 ] [ 0 ]"}
{"old_id": "NUMBER_SUBSTRINGS_STRING", "code": "def B ( str ) :\n    q = len ( str )\n    return int ( q * ( q + 1 ) / 2 )"}
{"old_id": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES", "code": "def q ( B ) :\n    I = 0\n    for h in range ( 1 , int ( math.i ( B ) ) + 1 ) :\n        C = h\n        while ( C * h <= B ) :\n            I += 1\n            C += 1\n    return I"}
{"old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER", "code": "def U ( p , A ) :\n    I = collections.b ( [ ] )\n    p = p [ : A ]\n    p.sort ( )\n    I.append ( p [ 0 ] )\n    for B in range ( 1 , A ) :\n        C = I [ 0 ]\n        if ( p [ B ] >= 2 * C ) :\n            I.q ( )\n        I.append ( p [ B ] )\n    return len ( I )"}
{"old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N", "code": "def c ( p , s ) :\n    U = [ 0 ] * ( s + 1 )\n    X = [ False ] * ( s + 1 )\n    for D in range ( s + 1 ) :\n        U [ D ] = 0\n        X [ D ] = True\n    for D in range ( 2 , s + 1 ) :\n        if ( X [ D ] == True ) :\n            U [ D ] = 1\n            for G in range ( D * 2 , s + 1 , D ) :\n                U [ G ] += 1\n                X [ G ] = False\n    max = U [ p ]\n    S = p\n    for D in range ( p , s + 1 ) :\n        if ( U [ D ] > max ) :\n            max = U [ D ]\n            S = D\n    return S"}
{"old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN", "code": "def Z ( P ) :\n    count = 0\n    for O in itertools.count ( ) :\n        sum = 0\n        u = O\n        while ( u ) :\n            sum = sum + u % 10\n            u = u // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == P ) :\n            return O\n    return - 1"}
{"old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2", "code": "def w ( K ) :\n    a = 19 + ( K - 1 ) * 9\n    d = int ( math.I ( a ) ) - 1\n    a += 9 * d\n    return a"}
{"old_id": "N_TH_ROOT_NUMBER", "code": "def p ( R , M ) :\n    random.t ( 1 )\n    f = random.l ( 1 , 101 ) % 10\n    G = 0.001\n    F = 2147483647\n    a = 0.0\n    while ( F > G ) :\n        a = ( ( M - 1.0 ) * f + R / pow ( f , M - 1 ) ) / M\n        F = abs ( a - f )\n        f = a\n    return a"}
{"old_id": "N_TH_TERM_SERIES_2_12_36_80_150", "code": "def V ( P ) :\n    return ( P * P ) + ( P * P * P )"}
{"old_id": "OVERLAPPING_SUM_TWO_ARRAY", "code": "def p ( i , L , x ) :\n    M = G ( lambda : 0 )\n    for R in range ( 0 , x ) :\n        M [ i [ R ] ] += 1\n        M [ L [ R ] ] += 1\n    q = 0\n    for t in M :\n        if M [ t ] == 1 :\n            q += t\n    return q"}
{"old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1", "code": "def p ( o , w , P ) :\n    if w < 2 :\n        return False\n    A = set ( )\n    for i in range ( 0 , w ) :\n        if o [ i ] == 0 :\n            if P == 0 :\n                return True\n            else :\n                continue\n        if P % o [ i ] == 0 :\n            if P // o [ i ] in A :\n                return True\n            A.add ( o [ i ] )\n    return False"}
{"old_id": "PANGRAM_CHECKING", "code": "def f ( L ) :\n    c = [ ]\n    for B in range ( 26 ) :\n        c.append ( False )\n    for P in L :\n        if 'A' <= P and P <= 'Z':\n            c [ ord ( P ) - ord ( 'A' ) ] = True\n        elif 'a' <= P and P <= 'z':\n            c [ ord ( P ) - ord ( 'a' ) ] = True\n    for p in c :\n        if p == False :\n            return False\n    return True"}
{"old_id": "PAPER_CUT_MINIMUM_NUMBER_SQUARES", "code": "def Y ( g , u ) :\n    K = 0\n    J = 0\n    if ( g < u ) :\n        g , u = u , g\n    while ( u > 0 ) :\n        K += int ( g / u )\n        J = int ( g % u )\n        g = u\n        u = J\n    return K"}
{"old_id": "PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM", "code": "def i ( z , S , e ) :\n    q = 0\n    O = 0\n    v = 0\n    for C in range ( S ) :\n        q += z [ C ]\n    z.sort ( reverse = True )\n    E = max ( e , S - e )\n    for C in range ( E ) :\n        O += z [ C ]\n    v = O - ( q - O )\n    return v"}
{"old_id": "PATH_MAXIMUM_AVERAGE_VALUE", "code": "def n ( r , l ) :\n    m = [ [ 0 for W in range ( l + 1 ) ] for Z in range ( l + 1 ) ]\n    m [ 0 ] [ 0 ] = r [ 0 ] [ 0 ]\n    for W in range ( 1 , l ) :\n        m [ W ] [ 0 ] = m [ W - 1 ] [ 0 ] + r [ W ] [ 0 ]\n    for Z in range ( 1 , l ) :\n        m [ 0 ] [ Z ] = m [ 0 ] [ Z - 1 ] + r [ 0 ] [ Z ]\n    for W in range ( 1 , l ) :\n        for Z in range ( 1 , l ) :\n            m [ W ] [ Z ] = max ( m [ W - 1 ] [ Z ] , m [ W ] [ Z - 1 ] ) + r [ W ] [ Z ]\n    return m [ l - 1 ] [ l - 1 ] / ( 2 * l - 1 )"}
{"old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K", "code": "def o ( w , W , R , P ) :\n    w = w [ : R ]\n    W = W [ : R ]\n    w.sort ( reverse = True )\n    W.sort ( )\n    for r in range ( R ) :\n        if ( w [ r ] + W [ r ] < P ) :\n            return False\n    return True"}
{"old_id": "PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES", "code": "def t ( h ) :\n    return int ( 1 + h * ( h + 1 ) / 2 )"}
{"old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS", "code": "def H ( J , O , Q , q , A , X ) :\n    print ( \"Point inside the viewing pane:\" )\n    for R in range ( O ) :\n        if ( ( J [ R ] [ 0 ] >= Q ) and ( J [ R ] [ 0 ] <= A ) ) :\n            if ( ( J [ R ] [ 1 ] >= q ) and ( J [ R ] [ 1 ] <= X ) ) :\n                print ( \"[\" , J [ R ] [ 0 ] , \", \" , J [ R ] [ 1 ] , \"]\" , L = \"\" , T = \"\" )\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    for R in range ( O ) :\n        if ( ( J [ R ] [ 0 ] < Q ) or ( J [ R ] [ 0 ] > A ) ) :\n            print ( \"[\" , J [ R ] [ 0 ] , \", \" , J [ R ] [ 1 ] , \"]\" , L = \"\" , T = \"\" )\n        if ( ( J [ R ] [ 1 ] < q ) or ( J [ R ] [ 1 ] > X ) ) :\n            print ( \"[\" , J [ R ] [ 0 ] , \", \" , J [ R ] [ 1 ] , \"]\" , L = \"\" , T = \"\" )"}
{"old_id": "POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS", "code": "def H ( i , X ) :\n    c = 0\n    K = 1\n    while ( True ) :\n        while ( c < X and i [ c ] >= 0 ) :\n            c = c + 2\n        while ( K < X and i [ K ] <= 0 ) :\n            K = K + 2\n        if ( c < X and K < X ) :\n            z = i [ c ]\n            i [ c ] = i [ K ]\n            i [ K ] = z\n        else :\n            break"}
{"old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES", "code": "def r ( u , I ) :\n    u = u [ : I ]\n    if I < 3 :\n        return False\n    u.sort ( )\n    for C in range ( I - 2 ) :\n        if u [ C ] + u [ C + 1 ] > u [ C + 2 ] :\n            return True\n    return False"}
{"old_id": "PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1", "code": "def Q ( z ) :\n    if ( z <= 1 ) :\n        return False\n    if ( z <= 3 ) :\n        return True\n    if ( z % 2 == 0 or z % 3 == 0 ) :\n        return False\n    J = 5\n    while ( J * J <= z ) :\n        if ( z % J == 0 or z % ( J + 2 ) == 0 ) :\n            return False\n        J = J + 6\n    return True"}
{"old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES", "code": "def Y ( s ) :\n    u = 2 ** s - 1\n    V = 4 % u\n    for I in range ( 1 , s - 1 ) :\n        V = ( V * V - 2 ) % u\n    if ( V == 0 ) : return True\n    else : return False"}
{"old_id": "PRIME_NUMBERS", "code": "def W ( N ) :\n    if ( N <= 1 ) :\n        return False\n    for h in range ( 2 , N ) :\n        if ( N % h == 0 ) :\n            return False\n    return True"}
{"old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES", "code": "def c ( f ) :\n    J = len ( f )\n    for X in range ( 1 , J ) :\n        if ( f [ X ] == f [ X - 1 ] ) :\n            f [ X ] = \"a\"\n            while ( f [ X ] == f [ X - 1 ] or ( X + 1 < J and f [ X ] == f [ X + 1 ] ) ) :\n                f [ X ] += 1\n            X += 1\n    return f"}
{"old_id": "PRINT_MATRIX_ANTISPIRAL_FORM", "code": "def P ( Y , A , J ) :\n    O = 0\n    c = 0\n    q = [ ]\n    while ( O <= Y and c <= A ) :\n        for C in range ( c , A + 1 ) :\n            q.append ( J [ O ] [ C ] )\n        O += 1\n        for C in range ( O , Y + 1 ) :\n            q.append ( J [ C ] [ A ] )\n        A -= 1\n        if ( O <= Y ) :\n            for C in range ( A , c - 1 , - 1 ) :\n                q.append ( J [ Y ] [ C ] )\n            Y -= 1\n        if ( c <= A ) :\n            for C in range ( Y , O - 1 , - 1 ) :\n                q.append ( J [ C ] [ c ] )\n            c += 1\n    while len ( q ) != 0 :\n        print ( str ( q [ - 1 ] ) , s = \" \" )\n        q.pop ( )"}
{"old_id": "PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT", "code": "def L ( a , A , l ) :\n    r = 0\n    j = 2\n    S = 0 if ( 0 > r ) else r\n    T = 0 if ( 0 > j ) else j - 1\n    Q = A - 1 if ( ( r + 1 ) >= A ) else r + 1\n    q = l - 1 if ( ( j + 1 ) >= l ) else j + 1\n    while ( ( S > 0 - A and T > 0 - l ) ) :\n        h = T + 1\n        while ( h <= q and h < l and S >= 0 ) :\n            print ( a [ S ] [ h ] , Y = \" \" )\n            h += 1\n        S -= 1\n        h = S + 2\n        while ( h <= Q and h < A and q < l ) :\n            print ( a [ h ] [ q ] , Y = \" \" )\n            h += 1\n        q += 1\n        h = q - 2\n        while ( h >= T and h >= 0 and Q < A ) :\n            print ( a [ Q ] [ h ] , Y = \" \" )\n            h -= 1\n        Q += 1\n        h = Q - 2\n        while ( h > S and h >= 0 and T >= 0 ) :\n            print ( a [ h ] [ T ] , Y = \" \" )\n            h -= 1\n        T -= 1\n    print ( )"}
{"old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE", "code": "def I ( N , f , s ) :\n    G = dict ( )\n    for a in range ( f ) :\n        z = N [ a ]\n        r = min ( 1 + a , f - a )\n        if z not in G.keys ( ) :\n            G [ z ] = r\n        else :\n            G [ z ] = min ( r , G [ z ] )\n    Z = sys.v\n    for a in range ( f ) :\n        z = N [ a ]\n        if ( z != ( s - z ) and ( s - z ) in G.keys ( ) ) :\n            Z = min ( max ( G [ z ] , G [ s - z ] ) , Z )\n    return Z"}
{"old_id": "PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP", "code": "def F ( c ) :\n    return ( 3.0 * c ) / ( 4.0 * ( c * c ) - 1 )"}
{"old_id": "PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT", "code": "def s ( c , O , A ) :\n    m = [ c , O ]\n    return ( m [ A ] )"}
{"old_id": "PROGRAM_AREA_SQUARE", "code": "def l ( j ) :\n    U = j * j\n    return U"}
{"old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT", "code": "def l ( K , t , G , Y ) :\n    o = [ - 1 ] * Y\n    for g in range ( Y ) :\n        q = - 1\n        for F in range ( t ) :\n            if K [ F ] >= G [ g ] :\n                if q == - 1 :\n                    q = F\n                elif K [ q ] > K [ F ] :\n                    q = F\n        if q != - 1 :\n            o [ g ] = q\n            K [ q ] -= G [ g ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for g in range ( Y ) :\n        print ( g + 1 , \"         \" , G [ g ] , a = \"         \" )\n        if o [ g ] != - 1 :\n            print ( o [ g ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1", "code": "def D ( i ) :\n    n = i\n    N = 0\n    r = 1\n    X = len ( n )\n    for I in range ( X - 1 , - 1 , - 1 ) :\n        if ( n [ I ] == '1' ) :\n            N += r\n        r = r * 2\n    return N"}
{"old_id": "PROGRAM_CALCULATE_AREA_OCTAGON", "code": "def O ( X ) :\n    return ( 2 * ( 1 + ( math.S ( 2 ) ) ) * X * X )"}
{"old_id": "PROGRAM_CALCULATE_VOLUME_ELLIPSOID", "code": "def y(d, J, w):\n    Y = 3.14\n    return 1.33 * Y * d * J * w"}
{"old_id": "PROGRAM_CALCULATE_VOLUME_OCTAHEDRON", "code": "def m ( E ) :\n    return ( ( E * E * E ) * ( math.f ( 2 ) / 3 ) )"}
{"old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE", "code": "def Y ( P , j ) :\n    g = P.split ( )\n    z = ''\n    W = '*' * len ( j )\n    count = 0\n    index = 0\n    for k in g :\n        if k == j :\n            g [ index ] = W\n        index += 1\n    z = ' '.join ( g )\n    return z"}
{"old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1", "code": "def W ( N , l ) :\n    if ( l == 0 or l == 1 ) :\n        return True\n    for G in range ( 1 , l ) :\n        if ( N [ G - 1 ] > N [ G ] ) :\n            return False\n    return True"}
{"old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING", "code": "def F ( h ) :\n    for J in range ( len ( h ) ) :\n        if h [ J ].isdigit ( ) != True :\n            return False\n    return True"}
{"old_id": "PROGRAM_CHECK_ISBN", "code": "def C ( K ) :\n    if len ( K ) != 10 :\n        return False\n    Z = 0\n    for O in range ( 9 ) :\n        if 0 <= int ( K [ O ] ) <= 9 :\n            Z += int ( K [ O ] ) * ( 10 - O )\n        else :\n            return False\n    if ( K [ 9 ] != 'X' and 0 <= int ( K [ 9 ] ) <= 9 ) :\n        return False\n    Z += 10 if K [ 9 ] == 'X' else int ( K [ 9 ] )\n    return ( Z % 11 == 0 )"}
{"old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING", "code": "def count ( u , A ) :\n    H = 0\n    for r in range ( len ( u ) ) :\n        if ( u [ r ] == A ) :\n            H = H + 1\n    return H"}
{"old_id": "PROGRAM_DECIMAL_BINARY_CONVERSION_2", "code": "def P ( i ) :\n    Z = 0\n    N = 0\n    while ( i != 0 ) :\n        T = i % 2\n        L = pow ( 10 , N )\n        Z += T * L\n        i //= 2\n        N += 1\n    return Z"}
{"old_id": "PROGRAM_DISTANCE_TWO_POINTS_EARTH", "code": "def m ( M , u , R , i ) :\n    R = l ( R )\n    i = l ( i )\n    M = l ( M )\n    u = l ( u )\n    q = i - R\n    k = u - M\n    y = B ( k / 2 ) ** 2 + I ( M ) * I ( u ) * B ( q / 2 ) ** 2\n    b = 2 * p ( N ( y ) )\n    a = 6371\n    return ( b * a )"}
{"old_id": "PROGRAM_FIND_CIRCUMFERENCE_CIRCLE", "code": "def B ( w ) :\n    s = 3.1415\n    return ( 2 * s * w )"}
{"old_id": "PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11", "code": "def V ( str ) :\n    b = len ( str )\n    q = 0\n    for H in range ( 0 , b ) :\n        X = q * 10 + ( int ) ( str [ H ] )\n        q = X % 11\n    return q"}
{"old_id": "PROGRAM_FIND_SLOPE_LINE", "code": "def w ( s , S , V , Q ) :\n    return ( float ) ( Q - S ) / ( V - s )"}
{"old_id": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE", "code": "def n ( T , h ) :\n    A = 0\n    k = 0\n    W = 360\n    for y in range ( h ) :\n        k += T [ y ]\n        while k >= 180 :\n            W = min ( W , 2 * abs ( 180 - k ) )\n            k -= T [ A ]\n            A += 1\n        W = min ( W , 2 * abs ( 180 - k ) )\n    return W"}
{"old_id": "PROGRAM_FIND_STRING_START_END_GEEKS", "code": "def f ( str , N ) :\n    m = len ( str )\n    H = len ( N )\n    if ( m < H ) :\n        return False\n    return ( ( str [ : H ] == N ) and ( str [ m - H : ] == N ) )"}
{"old_id": "PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM", "code": "def p ( f , d ) :\n    A = 0\n    A = f * ( d - 1 ) + 1\n    return A"}
{"old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER", "code": "def N ( e ) :\n    return 1 if ( e == 1 or e == 0 ) else e * N ( e - 1 )"}
{"old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1", "code": "def A ( x ) :\n    return 1 if ( x == 1 or x == 0 ) else x * A ( x - 1 )"}
{"old_id": "PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON", "code": "def e ( G ) :\n    return ( 2 * ( math.B ( 3 ) ) * ( G * G ) )"}
{"old_id": "PROGRAM_OCTAL_DECIMAL_CONVERSION", "code": "def N ( S ) :\n    u = S\n    o = 0\n    K = 1\n    Q = u\n    while ( Q ) :\n        m = Q % 10\n        Q = int ( Q / 10 )\n        o += m * K\n        K = K * 8\n    return o"}
{"old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1", "code": "def w ( h , V ) :\n    for r in range ( V ) :\n        for Y in range ( V ) :\n            if ( r == Y and h [ r ] [ Y ] != 1 ) :\n                return False\n            elif ( r != Y and h [ r ] [ Y ] != 0 ) :\n                return False\n    return True"}
{"old_id": "PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1", "code": "def Y ( P ) :\n    return int ( math.pow ( P , 2 ) )"}
{"old_id": "PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE", "code": "def A ( str ) :\n    M = [ ]\n    for J in range ( len ( str ) ) :\n        M.append ( str [ J ] )\n    for J in range ( len ( str ) ) :\n        str [ J ] = M.pop ( )"}
{"old_id": "PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT", "code": "def T ( y ) :\n    w = [ 0 ] * 10\n    while ( y > 0 ) :\n        a = math.H ( y % 10 )\n        if ( w [ a ] ) :\n            return False\n        w [ a ] = 1\n        y = int ( y / 10 )\n    return True"}
{"old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC", "code": "def r ( c , I ) :\n    for W in range ( I ) :\n        for N in range ( I ) :\n            if ( c [ W ] [ N ] != c [ N ] [ W ] ) :\n                return False\n    return True"}
{"old_id": "PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR", "code": "def a ( S , n ) :\n    return ( S - n * ( S // n ) )"}
{"old_id": "PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON", "code": "def B ( J ) :\n    w = ( h ( 5 * ( 5 + 2 * ( h ( 5 ) ) ) ) * J * J ) / 4\n    return w"}
{"old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT", "code": "def B ( g , l , b , n ) :\n    m = [ - 1 ] * n\n    for V in range ( n ) :\n        S = - 1\n        for R in range ( l ) :\n            if g [ R ] >= b [ V ] :\n                if S == - 1 :\n                    S = R\n                elif g [ S ] < g [ R ] :\n                    S = R\n        if S != - 1 :\n            m [ V ] = S\n            g [ S ] -= b [ V ]\n    print ( \"Process No.Process Size Block no.\" )\n    for V in range ( n ) :\n        print ( V + 1 , \"         \" , b [ V ] , q = \"     \" )\n        if m [ V ] != - 1 :\n            print ( m [ V ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"old_id": "PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE", "code": "def s ( Q ) :\n    return ( 4 * Q )"}
{"old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE", "code": "def H ( k , x , r , S ) :\n    count = 0 ;\n    for E in range ( x ) :\n        if ( k [ E ] >= r and k [ E ] <= S ) :\n            count += 1\n    return count"}
{"old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING", "code": "def z ( l ) :\n    v = len ( l )\n    for x in range ( 1 , v ) :\n        if l [ x ] != l [ 0 ] :\n            return False\n    return True"}
{"old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM", "code": "def g ( w , Q ) :\n    S = Q * [ None ]\n    I , C = 0 , Q - 1\n    v = True\n    for h in range ( Q ) :\n        if v is True :\n            S [ h ] = w [ C ]\n            C -= 1\n        else :\n            S [ h ] = w [ I ]\n            I += 1\n        v = bool ( 1 - v )\n    for h in range ( Q ) :\n        w [ h ] = S [ h ]\n    return w"}
{"old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE", "code": "def J ( m , y ) :\n    S = y - 1\n    g = 0\n    v = m [ y - 1 ] + 1\n    for w in range ( 0 , y ) :\n        if w % 2 == 0 :\n            m [ w ] += ( m [ S ] % v ) * v\n            S -= 1\n        else :\n            m [ w ] += ( m [ g ] % v ) * v\n            g += 1\n    for w in range ( 0 , y ) :\n        m [ w ] = int ( m [ w ] / v )"}
{"old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH", "code": "def G ( Q , m ) :\n    F = - 1\n    for c in range ( m ) :\n        if ( Q [ c ] < 0 ) :\n            F += 1\n            Q [ F ] , Q [ c ] = Q [ c ] , Q [ F ]\n    D , P = F + 1 , 0\n    while ( D < m and P < D and Q [ P ] < 0 ) :\n        Q [ P ] , Q [ D ] = Q [ D ] , Q [ P ]\n        D += 1\n        P += 2"}
{"old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM", "code": "def B ( x ) :\n    if ( x == 0 or x == 1 ) :\n        return x\n    return max ( ( B ( x // 2 ) + B ( x // 3 ) + B ( x // 4 ) ) , x )"}
{"old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1", "code": "def o ( y ) :\n    U = [ 0 ] * ( y + 1 )\n    U [ 0 ] = 0\n    U [ 1 ] = 1\n    for h in range ( 2 , y + 1 ) :\n        U [ h ] = max ( U [ int ( h / 2 ) ] + U [ int ( h / 3 ) ] + U [ int ( h / 4 ) ] , h )\n    return U [ y ]"}
{"old_id": "RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY", "code": "def D ( p , e , Z , s ) :\n    if Z < e :\n        return - 1\n    if p [ e ] == s :\n        return e\n    if p [ Z ] == s :\n        return Z\n    return D ( p , e + 1 , Z - 1 , s )"}
{"old_id": "RECURSIVE_INSERTION_SORT", "code": "def o ( g , U ) :\n    if U <= 1 :\n        return\n    o ( g , U - 1 )\n    W = g [ U - 1 ]\n    Z = U - 2\n    while ( Z >= 0 and g [ Z ] > W ) :\n        g [ Z + 1 ] = g [ Z ]\n        Z = Z - 1\n    g [ Z + 1 ] = W"}
{"old_id": "RECURSIVE_PROGRAM_PRIME_NUMBER", "code": "def B ( j , a ) :\n    if ( j <= 2 ) :\n        return True if ( j == 2 ) else False\n    if ( j % a == 0 ) :\n        return False\n    if ( a * a > j ) :\n        return L\n    return B ( j , a + 1 )"}
{"old_id": "REMAINDER_7_LARGE_NUMBERS", "code": "def H ( y ) :\n    j = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]\n    x = 0\n    z = 0\n    for A in range ( ( len ( y ) - 1 ) , - 1 , - 1 ) :\n        U = ord ( y [ A ] ) - 48\n        z += U * j [ x ]\n        x = ( x + 1 ) % 6\n        z %= 7\n    if ( z < 0 ) :\n        z = ( z + 7 ) % 7\n    return z"}
{"old_id": "REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT", "code": "def d ( f , G , h , S , R ) :\n    if ( h == S ) :\n        return G [ h ] * R\n    if ( f [ h ] [ S ] != 0 ) :\n        return f [ h ] [ S ]\n    f [ h ] [ S ] = max ( G [ h ] * R + d ( f , G , h + 1 , S , R + 1 ) , G [ S ] * R + d ( f , G , h , S - 1 , R + 1 ) ) ;\n    return f [ h ] [ S ]"}
{"old_id": "REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS", "code": "def I ( m ) :\n    h = len ( m )\n    P = [ None ] * h\n    index = 0\n    c = 0\n    A = [ ]\n    A.append ( 0 )\n    while ( c < h ) :\n        if ( m [ c ] == '+' ) :\n            if ( A [ - 1 ] == 1 ) :\n                P [ index ] = '-'\n                index += 1\n            if ( A [ - 1 ] == 0 ) :\n                P [ index ] = '+'\n                index += 1\n        elif ( m [ c ] == '-' ) :\n            if ( A [ - 1 ] == 1 ) :\n                P [ index ] = '+'\n                index += 1\n            elif ( A [ - 1 ] == 0 ) :\n                P [ index ] = '-'\n                index += 1\n        elif ( m [ c ] == '(' and c > 0 ) :\n            if ( m [ c - 1 ] == '-' ) :\n                X = 0 if ( A [ - 1 ] == 1 ) else 1\n                A.append ( X )\n            elif ( m [ c - 1 ] == '+' ) :\n                A.append ( A [ - 1 ] )\n        elif ( m [ c ] == ')' ) :\n            A.pop ( )\n        else :\n            P [ index ] = m [ c ]\n            index += 1\n        c += 1\n    return \"\".join(P)"}
{"old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING", "code": "def v ( q ) :\n    V = len ( q )\n    if ( V < 2 ) :\n        return\n    I = 0\n    for B in range ( 1 , V ) :\n        if ( q [ I ] != q [ B ] ) :\n            I += 1\n            q [ I ] = q [ B ]\n    I += 1\n    q = q [ : I ]"}
{"old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX", "code": "def R ( Y , x ) :\n    A = - 1\n    b = 0\n    for l in range ( x ) :\n        min = sys.C\n        max = - sys.C\n        for X in range ( l , x ) :\n            o = Y [ X ]\n            if ( o < min ) :\n                min = o\n            if ( o > max ) :\n                max = o\n            if ( 2 * min <= max ) :\n                break\n            if ( X - l > b - A or A == - 1 ) :\n                A = l\n                b = X\n    if ( A == - 1 ) :\n        return x\n    return ( x - ( b - A + 1 ) )"}
{"old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S", "code": "def replace ( p , D , s ) :\n    L = len ( p )\n    for k in range ( L ) :\n        if ( p [ k ] == D ) :\n            p = p [ 0 : k ] + s + p [ k + 1 : ]\n        elif ( p [ k ] == s ) :\n            p = p [ 0 : k ] + D + p [ k + 1 : ]\n    return p"}
{"old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX", "code": "def H ( h , R ) :\n    A = 0\n    for u in range ( R ) :\n        if h [ u ] [ u ] == h [ u ] [ R - u - 1 ] :\n            A = A + 1\n    return A"}
{"old_id": "SEARCHING_ARRAY_ADJACENT_DIFFER_K", "code": "def D ( y , O , z , w ) :\n    H = 0\n    while ( H < O ) :\n        if ( y [ H ] == z ) :\n            return H\n        H = H + max ( 1 , int ( abs ( y [ H ] - z ) / w ) )\n    print ( \"number is not present!\" )\n    return - 1"}
{"old_id": "SEARCH_ALMOST_SORTED_ARRAY", "code": "def o ( O , t , M , y ) :\n    if ( M >= t ) :\n        J = int ( t + ( M - t ) / 2 )\n        if ( O [ J ] == y ) : return J\n        if ( J > t and O [ J - 1 ] == y ) :\n            return ( J - 1 )\n        if ( J < M and O [ J + 1 ] == y ) :\n            return ( J + 1 )\n        if ( O [ J ] > y ) :\n            return o ( O , t , J - 2 , y )\n        return o ( O , J + 2 , M , y )\n    return - 1"}
{"old_id": "SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1", "code": "def W ( N , c , C ) :\n    e = 0\n    while ( e < c ) :\n        if ( N [ e ] == C ) :\n            return e\n        e = e + abs ( N [ e ] - C )\n    print ( \"number is not present!\" )\n    return - 1"}
{"old_id": "SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY", "code": "def k ( E , X , s , F ) :\n    if X > s :\n        return - 1\n    A = ( X + s ) // 2\n    if E [ A ] == F :\n        return A\n    if E [ X ] <= E [ A ] :\n        if F >= E [ X ] and F <= E [ A ] :\n            return k ( E , X , A - 1 , F )\n        return k ( E , A + 1 , s , F )\n    if F >= E [ A ] and F <= E [ s ] :\n        return k ( E , A + 1 , s , F )\n    return k ( E , X , A - 1 , F )"}
{"old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY", "code": "def i ( y , B , J , h ) :\n    if ( J < B ) :\n        return - 1\n    o = ( B + J ) / 2\n    if ( h == y [ int ( o ) ] ) :\n        return o\n    if ( h > y [ int ( o ) ] ) :\n        return i ( y , ( o + 1 ) , J , h )\n    return ( i ( y , B , ( o - 1 ) , h ) )"}
{"old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1", "code": "def p ( A , s , l , F ) :\n    if ( s >= F ) :\n        return s\n    h = s - 1\n    while h >= 0 and A [ h ] > l :\n        A [ h + 1 ] = A [ h ]\n        h -= 1\n    A [ h + 1 ] = l\n    return ( s + 1 )"}
{"old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3", "code": "def N ( F , l ) :\n    n = - 1\n    E = 0\n    while ( E != l ) :\n        if ( F [ E ] % 2 == 0 ) :\n            n = n + 1\n            F [ n ] , F [ E ] = F [ E ] , F [ n ]\n        E = E + 1\n    for n in F :\n        print ( str ( n ) + \" \" , x = '' )"}
{"old_id": "SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE", "code": "def N ( T ) :\n    A = 0\n    count = 0\n    count += 1\n    if ( count == 1 ) :\n        A = T\n    else :\n        U = random.e ( count )\n        if ( U == count - 1 ) :\n            A = T\n    return A"}
{"old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1", "code": "def H ( D , P ) :\n    b = [ [ 0 for e in range ( P + 1 ) ] for e in range ( D + 1 ) ]\n    for e in range ( D + 1 ) :\n        for C in range ( P + 1 ) :\n            if e == 0 or C == 0 :\n                b [ e ] [ C ] = 0\n            elif e < C :\n                b [ e ] [ C ] = 0\n            elif C == 1 :\n                b [ e ] [ C ] = e\n            else :\n                b [ e ] [ C ] = b [ e - 1 ] [ C ] + b [ e // 2 ] [ C - 1 ]\n    return b [ D ] [ P ]"}
{"old_id": "SHUFFLE_A_GIVEN_ARRAY", "code": "def K ( N , d ) :\n    for g in range ( d - 1 , 0 , - 1 ) :\n        c = random.W ( 0 , g + 1 )\n        N [ g ] , N [ c ] = N [ c ] , N [ g ]\n    return N"}
{"old_id": "SIZE_SUBARRAY_MAXIMUM_SUM", "code": "def d ( h , E ) :\n    Y = - s - 1\n    q = 0\n    J = 0\n    F = 0\n    U = 0\n    for C in range ( 0 , E ) :\n        q += h [ C ]\n        if Y < q :\n            Y = q\n            J = U\n            F = C\n        if q < 0 :\n            q = 0\n            U = C + 1\n    return ( F - J + 1 )"}
{"old_id": "SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS", "code": "def W ( m , a , P , v ) :\n    m = m [ : P ]\n    a = a [ : v ]\n    m.sort ( )\n    a.sort ( )\n    f = 0\n    b = 0\n    Z = sys.O\n    while ( f < P and b < v ) :\n        if ( abs ( m [ f ] - a [ b ] ) < Z ) :\n            Z = abs ( m [ f ] - a [ b ] )\n        if ( m [ f ] < a [ b ] ) :\n            f += 1\n        else :\n            b += 1\n    return Z"}
{"old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS", "code": "def F ( N , z , I ) :\n    e = 0\n    while ( N and z and I ) :\n        N = N - 1\n        z = z - 1\n        I = I - 1\n        e = e + 1\n    return e"}
{"old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1", "code": "def s ( O , j , Z ) :\n    if ( not int ( j / O ) ) :\n        return j if ( not int ( j / Z ) ) else Z\n    return O if ( not int ( O / Z ) ) else Z"}
{"old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1", "code": "def j ( B ) :\n    Y = 1\n    if ( B and not ( B & ( B - 1 ) ) ) :\n        return B\n    while ( Y < B ) :\n        Y <<= 1\n    return Y"}
{"old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2", "code": "def O ( x ) :\n    x -= 1\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    x += 1\n    return x"}
{"old_id": "SORT_AN_ARRAY_OF_0S_1S_AND_2S", "code": "def R ( e , U ) :\n    O = 0\n    P = U - 1\n    K = 0\n    while K <= P :\n        if e [ K ] == 0 :\n            e [ O ] , e [ K ] = e [ K ] , e [ O ]\n            O = O + 1\n            K = K + 1\n        elif e [ K ] == 1 :\n            K = K + 1\n        else :\n            e [ K ] , e [ P ] = e [ P ] , e [ K ]\n            P = P - 1"}
{"old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION", "code": "def F ( P , C , v , t , Z ) :\n    for g in range ( C ) :\n        P [ g ] = ( v * P [ g ] * P [ g ] + t * P [ g ] + Z )\n    index = - ( sys.G - 1 )\n    X = - ( sys.G - 1 )\n    for g in range ( C ) :\n        if X < P [ g ] :\n            index = g\n            X = P [ g ]\n    g = 0\n    L = C - 1\n    w = [ 0 ] * C\n    m = 0\n    while g < index and L > index :\n        if P [ g ] < P [ L ] :\n            w [ m ] = P [ g ]\n            m += 1\n            g += 1\n        else :\n            w [ m ] = P [ L ]\n            m += 1\n            L -= 1\n    while g < index :\n        w [ m ] = P [ g ]\n        m += 1\n        g += 1\n    while L > index :\n        w [ m ] = P [ L ]\n        m += 1\n        L -= 1\n        w [ C - 1 ] = X\n    for g in range ( C ) :\n        P [ g ] = w [ g ]"}
{"old_id": "SORT_ARRAY_CONTAIN_1_N_VALUES", "code": "def M ( Z , B ) :\n    for t in range ( B ) :\n        Z [ t ] = t + 1"}
{"old_id": "SORT_ARRAY_TWO_HALVES_SORTED", "code": "def q ( k , N ) :\n    k.sort ( )"}
{"old_id": "SORT_ARRAY_WAVE_FORM_2_1", "code": "def K ( t , m ) :\n    for Q in range ( 0 , m , 2 ) :\n        if ( Q > 0 and t [ Q ] < t [ Q - 1 ] ) :\n            t [ Q ] , t [ Q - 1 ] = t [ Q - 1 ] , t [ Q ]\n        if ( Q < m - 1 and t [ Q ] < t [ Q + 1 ] ) :\n            t [ Q ] , t [ Q + 1 ] = t [ Q + 1 ] , t [ Q ]"}
{"old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1", "code": "def B ( P , k ) :\n    for W in range ( 0 , k ) :\n        if ( P [ W ] & 1 ) :\n            P [ W ] *= - 1\n    P.sort ( )\n    for W in range ( 0 , k ) :\n        if ( P [ W ] & 1 ) :\n            P [ W ] *= - 1"}
{"old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER", "code": "def F ( N , c ) :\n    d = [ ]\n    k = [ ]\n    for w in range ( c ) :\n        if ( ( w % 2 ) == 0 ) :\n            d.append ( N [ w ] )\n        else :\n            k.append ( N [ w ] )\n    d = sorted ( d )\n    k = sorted ( k )\n    k = k [ : : - 1 ]\n    w = 0\n    for J in range ( len ( d ) ) :\n        N [ w ] = d [ J ]\n        w += 1\n    for J in range ( len ( k ) ) :\n        N [ w ] = k [ J ]\n        w += 1"}
{"old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM", "code": "def x ( i , m , N , t ) :\n    B = [ [ 0 for g in range ( t + 1 ) ] for g in range ( 2 ) ]\n    g = 0\n    while g < N :\n        u = 0\n        if g % 2 == 0 :\n            while u < t :\n                u += 1\n                if m [ g ] <= u and u - m [ g ] < t:\n                    B [ 1 ] [ u ] = max ( i [ g ] + B [ 0 ] [ u - m [ g ] ] , B [ 0 ] [ u ] )\n                else :\n                    B [ 1 ] [ u ] = B [ 0 ] [ u ]\n        else :\n            while u < t :\n                u += 1\n                if m [ g ] <= u and u - m [ g ] < t:\n                    B [ 0 ] [ u ] = max ( i [ g ] + B [ 1 ] [ u - m [ g ] ] , B [ 1 ] [ u ] )\n                else :\n                    B [ 0 ] [ u ] = B [ 1 ] [ u ]\n        g += 1\n    if N % 2 == 0 :\n        return B [ 0 ] [ t ]\n    else :\n        return B [ 1 ] [ t ]"}
{"old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1", "code": "def F ( S , w , E , A ) :\n    Z = [ 0 ] * ( A + 1 )\n    for W in range ( E ) :\n        for p in range ( A , -1 , - 1 ) :\n            if p - w [ W ] < A + 1 and p - w [ W ] >= 0:\n                Z [ p ] = max ( Z [ p ] , S [ W ] + Z [ p - w [ W ] ] )\n    return Z [ A ]"}
{"old_id": "SPLIT_ARRAY_ADD_FIRST_PART_END", "code": "def o ( s , R , U ) :\n    for j in range ( 0 , U ) :\n        F = s [ 0 ]\n        for w in range ( 0 , R - 1 ) :\n            s [ w ] = s [ w + 1 ]\n        s [ R - 1 ] = F"}
{"old_id": "SQUARED_TRIANGULAR_NUMBER_SUM_CUBES", "code": "def D ( s ) :\n    c = 0\n    x = 1\n    while ( c < s ) :\n        c += x * x * x\n        x += 1\n    x -= 1\n    if c == s :\n        return x\n    return - 1"}
{"old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS", "code": "def I ( M , F , e ) :\n    print ( \"Diagonal one : \" , n = \"\" )\n    for Q in range ( 0 , F ) :\n        for U in range ( 0 , e ) :\n            if ( Q == U ) :\n                print ( \"{} \".format ( M [ Q ] [ U ] * M [ Q ] [ U ] ) , n = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , n = \"\" )\n    for Q in range ( 0 , F ) :\n        for U in range ( 0 , e ) :\n            if ( Q + U == e - 1 ) :\n                print ( \"{} \".format ( M [ Q ] [ U ] * M [ Q ] [ U ] ) , n = \"\" )"}
{"old_id": "SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES", "code": "def Q ( T ) :\n    L = 0\n    k = 1\n    while ( L < T ) :\n        L += k * k\n        k += 1\n    k -= 1\n    if L == T :\n        return k\n    return - 1"}
{"old_id": "SQUARE_ROOT_OF_AN_INTEGER", "code": "def Y ( z ) :\n    if ( z == 0 or z == 1 ) :\n        return z\n    c = 1\n    m = 1\n    while ( m <= z ) :\n        c += 1\n        m = c * c\n    return c - 1"}
{"old_id": "SQUARE_ROOT_OF_A_PERFECT_SQUARE", "code": "def h ( k ) :\n    t = k\n    S = 1\n    J = 0.000001\n    while ( t - S > J ) :\n        t = ( t + S ) / 2\n        S = k / t\n    return t"}
{"old_id": "STACK_SET_3_REVERSE_STRING_USING_STACK", "code": "def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string"}
{"old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD", "code": "def J ( p , l ) :\n    if ( p == 0 ) :\n        return l\n    if ( l == 0 ) :\n        return p\n    Y = 0\n    while ( ( ( p | l ) & 1 ) == 0 ) :\n        p = p >> 1\n        l = l >> 1\n        Y = Y + 1\n    while ( ( p & 1 ) == 0 ) :\n        p = p >> 1\n    while ( l != 0 ) :\n        while ( ( l & 1 ) == 0 ) :\n            l = l >> 1\n        if ( p > l ) :\n            M = p\n            p = l\n            l = M\n        l = ( l - p )\n    return ( p << Y )"}
{"old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD_1", "code": "def k ( H , G ) :\n    if ( H == G ) :\n        return H\n    if ( H == 0 ) :\n        return G\n    if ( G == 0 ) :\n        return H\n    if ( ( ~ H & 1 ) == 1 ) :\n        if ( ( G & 1 ) == 1 ) :\n            return k ( H >> 1 , G )\n        else :\n            return ( k ( H >> 1 , G >> 1 ) << 1 )\n    if ( ( ~ G & 1 ) == 1 ) :\n        return k ( H , G >> 1 )\n    if ( H > G ) :\n        return k ( ( H - G ) >> 1 , G )\n    return k ( ( G - H ) >> 1 , H )"}
{"old_id": "STOOGE_SORT", "code": "def r ( y , X , d ) :\n    if X >= d :\n        return\n    if y [ X ] > y [ d ] :\n        T = y [ X ]\n        y [ X ] = y [ d ]\n        y [ d ] = T\n    if d - X + 1 > 2 :\n        T = ( int ) ( ( d - X + 1 ) / 3 )\n        r ( y , X , ( d - T ) )\n        r ( y , X + T , ( d ) )\n        r ( y , X , ( d - T ) )"}
{"old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES", "code": "def x ( str ) :\n    X = \"\"\n    O = True\n    for j in range ( len ( str ) ) :\n        if ( str [ j ] == ' ' ) :\n            O = True\n        elif ( str [ j ] != ' ' and O == True ) :\n            X += ( str [ j ] )\n            O = False\n    return X"}
{"old_id": "SUBARRAYS_DISTINCT_ELEMENTS", "code": "def Y ( Z , t ) :\n    q = [ ]\n    v = 0\n    w = 0\n    for Q in range ( t ) :\n        while ( v < t and ( Z [ v ] not in q ) ) :\n            q.append ( Z [ v ] )\n            v += 1\n        w += ( ( v - Q ) * ( v - Q + 1 ) ) // 2\n        q.remove ( Z [ Q ] )\n    return w"}
{"old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE", "code": "def E ( b , x , sum ) :\n    f = [ [ False for g in range ( sum + 1 ) ] for p in range ( 3 ) ]\n    for p in range ( x + 1 ) :\n        for g in range ( sum + 1 ) :\n            if ( g == 0 ) :\n                f [ p % 2 ] [ g ] = True\n            elif ( p == 0 ) :\n                f [ p % 2 ] [ g ] = False\n            elif ( b [ p - 1 ] <= g ) :\n                f [ p % 2 ] [ g ] = f [ ( p + 1 ) % 2 ] [ g - b [ p - 1 ] ] or f [ ( p + 1 ) % 2 ] [ g ]\n            else :\n                f [ p % 2 ] [ g ] = f [ ( p + 1 ) % 2 ] [ g ]\n    return f [ x % 2 ] [ sum ]"}
{"old_id": "SUM_AREA_RECTANGLES_POSSIBLE_ARRAY", "code": "def z ( A , H ) :\n    A = A [ : H ]\n    A.sort (  )\n    sum = 0\n    O = False\n    len = 0\n    Z = 0\n    while ( Z < H - 1 ) :\n        if ( ( A [ Z ] == A [ Z + 1 ] or A [ Z ] - A [ Z + 1 ] == 1 ) and O == False ) :\n            O = True\n            len = A [ Z + 1 ]\n            Z = Z + 1\n        elif ( ( A [ Z ] == A [ Z + 1 ] or A [ Z ] - A [ Z + 1 ] == 1 ) and O == True ) :\n            sum = sum + A [ Z + 1 ] * len\n            O = False\n            Z = Z + 1\n        Z += 1\n    return sum"}
{"old_id": "SUM_BINOMIAL_COEFFICIENTS", "code": "def X ( s ) :\n    o = [ [ 0 ] * ( s + 2 ) for e in range ( 0 , s + 2 ) ]\n    for e in range ( 0 , s + 1 ) :\n        for I in range ( 0 , min ( e , s ) + 1 ) :\n            if ( I == 0 or I == e ) :\n                o [ e ] [ I ] = 1\n            else :\n                o [ e ] [ I ] = o [ e - 1 ] [ I - 1 ] + o [ e - 1 ] [ I ]\n    sum = 0\n    for e in range ( 0 , s + 1 ) :\n        sum += o [ s ] [ e ]\n    return sum"}
{"old_id": "SUM_BINOMIAL_COEFFICIENTS_1", "code": "def d ( F ) :\n    return ( 1 << F )"}
{"old_id": "SUM_DIVISORS_1_N_1", "code": "def b ( y ) :\n    sum = 0\n    for x in range ( 1 , y + 1 ) :\n        sum += int ( y / x ) * x\n    return int ( sum )"}
{"old_id": "SUM_FACTORS_NUMBER", "code": "def k ( j ) :\n    V = 0\n    for U in range ( 2 , ( int ) ( math.C ( j ) ) + 1 ) :\n        if ( j % U == 0 ) :\n            if ( U == ( j / U ) ) :\n                V = V + U\n            else :\n                V = V + ( U + j // U )\n    return ( V + j + 1 )"}
{"old_id": "SUM_FIBONACCI_NUMBERS", "code": "def m ( K ) :\n    if ( K <= 0 ) :\n        return 0\n    u = [ 0 ] * ( K + 1 )\n    u [ 1 ] = 1\n    p = u [ 0 ] + u [ 1 ]\n    for I in range ( 2 , K + 1 ) :\n        u [ I ] = u [ I - 1 ] + u [ I - 2 ]\n        p = p + u [ I ]\n    return p"}
{"old_id": "SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS", "code": "def l ( x ) :\n    d = int ( ( x * ( x - 1 ) ) + 1 )\n    sum = 0\n    while x :\n        sum += d\n        d += 2\n        x = x - 1\n    return sum"}
{"old_id": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS", "code": "def W ( Z , J , H ) :\n    sum = 0\n    for D in range ( H ) :\n        for t in range ( D + 1 , H ) :\n            sum += ( abs ( Z [ D ] - Z [ t ] ) + abs ( J [ D ] - J [ t ] ) )\n    return sum"}
{"old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS", "code": "def a ( r ) :\n    t = [ [ 0 for B in range ( r ) ] for C in range ( r ) ]\n    for g in range ( r ) :\n        for f in range ( r ) :\n            t [ g ] [ f ] = abs ( g - f )\n    sum = 0\n    for g in range ( r ) :\n        for f in range ( r ) :\n            sum += t [ g ] [ f ]\n    return sum"}
{"old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2", "code": "def r ( V ) :\n    V -= 1\n    sum = 0\n    sum += ( V * ( V + 1 ) ) / 2\n    sum += ( V * ( V + 1 ) * ( 2 * V + 1 ) ) / 6\n    return int ( sum )"}
{"old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1", "code": "def f ( w ) :\n    r = 0\n    j = 0\n    for P in range ( 1 , w + 1 ) :\n        if j < w :\n            j = P - 1\n            v = 1\n            while j < w :\n                if j + P <= w :\n                    r += P * v\n                else :\n                    r += ( w - j ) * v\n                j += P\n                v += 1\n    return r"}
{"old_id": "SUM_MIDDLE_ROW_COLUMN_MATRIX", "code": "def u ( W , S ) :\n    I = 0\n    H = 0\n    for G in range ( S ) :\n        I += W [ S // 2 ] [ G ]\n    print ( \"Sum of middle row = \" , I )\n    for G in range ( S ) :\n        H += W [ G ] [ S // 2 ]\n    print ( \"Sum of middle column = \" , H )"}
{"old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING", "code": "def m ( E , b ) :\n    T = - 1\n    sum = 0\n    P = len ( E )\n    for N in range ( P ) :\n        if ( E [ N ] == '(' ) :\n            T += 1\n        elif ( E [ N ] == ')' ) :\n            T -= 1\n        else :\n            if ( T == b ) :\n                sum += ( ord ( E [ N ] ) - ord ( '0' ) )\n    return sum"}
{"old_id": "SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1", "code": "def R ( Z ) :\n    sum = 0\n    sum = 1 << Z\n    return ( sum - 1 )"}
{"old_id": "SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER", "code": "def J ( K ) :\n    A = len ( K )\n    R = [ ]\n    R.append ( ord ( K [ 0 ] ) - ord('0') )\n    e = R [ 0 ]\n    for v in range ( 1 , A ) :\n        l = ord ( K [ v ] ) - ord ( '0' )\n        R.append ( ( v + 1 ) + l + 10 + R [ v - 1 ] )\n        e += R [ v ]\n    return e"}
{"old_id": "SUM_PAIRWISE_PRODUCTS", "code": "def X ( Q ) :\n    W = 0\n    for o in range ( 1 , Q + 1 ) :\n        for S in range ( o , Q + 1 ) :\n            W = W + o * S\n    return W"}
{"old_id": "SUM_PAIRWISE_PRODUCTS_1", "code": "def i ( X ) :\n    I = X * ( X + 1 ) // 2\n    p = I\n    for W in range ( 2 , X + 1 ) :\n        I = I - ( W - 1 )\n        p = p + I * W\n    return p"}
{"old_id": "SUM_PAIRWISE_PRODUCTS_2", "code": "def Y ( p ) :\n    return p * ( p + 1 ) * ( p + 2 ) * ( 3 * p + 1 ) / 24"}
{"old_id": "SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS", "code": "def z ( h ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , h ) ) )"}
{"old_id": "SUM_SERIES_12_32_52_2N_12", "code": "def C ( k ) :\n    sum = 0\n    for O in range ( 1 , k + 1 ) :\n        sum = sum + ( 2 * O - 1 ) * ( 2 * O - 1 )\n    return sum"}
{"old_id": "SUM_SERIES_23_45_67_89_UPTO_N_TERMS", "code": "def L ( e ) :\n    Q = 1\n    d = 0.0\n    M = True\n    while ( e > 0 ) :\n        e = e - 1\n        if ( M ) :\n            M = False\n            d = d + ( Q + 1 ) / ( Q + 2 )\n            Q = Q + 2\n        else :\n            M = True\n            d = d - ( Q + 1 ) / ( Q + 2 )\n            Q = Q + 2\n    return d"}
{"old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS", "code": "def D ( o ) :\n    i = [ [ 0 for b in range ( o + 1 ) ] for j in range ( o + 1 ) ]\n    for b in range ( 0 , o + 1 ) :\n        for j in range ( 0 , min ( b , o ) + 1 ) :\n            if ( j == 0 or j == b ) :\n                i [ b ] [ j ] = 1\n            else :\n                i [ b ] [ j ] = ( i [ b - 1 ] [ j - 1 ] + i [ b - 1 ] [ j ] )\n    sum = 0\n    for b in range ( 0 , o + 1 ) :\n        sum = sum + ( i [ o ] [ b ] * i [ o ] [ b ] )\n    return sum"}
{"old_id": "SUM_TWO_LARGE_NUMBERS", "code": "def n(b, c):\n    if (len(b) > len(c)):\n        K = b\n        b = c\n        c = K\n    str = \"\"\n    h = len(b)\n    s = len(c)\n    b = b[:: - 1]\n    c = c[:: - 1]\n    U = 0\n    for W in range(h):\n        sum = ((ord(b[W]) - 48) + ((ord(c[W]) - 48) + U))\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        U = int(sum / 10)\n    for W in range(h, s):\n        sum = ((ord(c[W]) - 48) + U)\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        U = (int)(sum / 10)\n    if (U):\n        str += chr(U + 48)\n    str = str[:: - 1]\n    return str"}
{"old_id": "SWAP_BITS_IN_A_GIVEN_NUMBER", "code": "def y ( d , a , W , o ) :\n    u = ( d >> a ) & ( ( 1 << o ) - 1 )\n    w = ( d >> W ) & ( ( 1 << o ) - 1 )\n    M = ( u ^ w )\n    M = ( M << a ) | ( M << W )\n    F = d ^ M\n    return F"}
{"old_id": "SWAP_TWO_NIBBLES_BYTE", "code": "def K ( q ) :\n    return ( ( q & 0x0F ) << 4 | ( q & 0xF0 ) >> 4 )"}
{"old_id": "SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE", "code": "def W ( l , z ) :\n    l [ 0 ] = l [ 0 ] ^ z [ 0 ]\n    z [ 0 ] = l [ 0 ] ^ z [ 0 ]\n    l [ 0 ] = l [ 0 ] ^ z [ 0 ]"}
{"old_id": "TEMPLE_OFFERINGS", "code": "def D ( C , S ) :\n    sum = 0\n    for l in range ( C ) :\n        L = 0\n        j = 0\n        for O in range ( l - 1 , - 1 , - 1 ) :\n            if ( S [ O ] < S [ O + 1 ] ) :\n                L += 1\n            else :\n                break\n        for O in range ( l + 1 , C ) :\n            if ( S [ O ] < S [ O - 1 ] ) :\n                j += 1\n            else :\n                break\n        sum += max ( j , L ) + 1\n    return sum"}
{"old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS", "code": "def Z ( j , u ) :\n    if ( u < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    B = j [ 0 ]\n    for c in range ( 1 , u ) :\n        if ( j [ c ] > B ) :\n            B = j [ c ]\n    C = - sys.p\n    for c in range ( 0 , u ) :\n        if ( j [ c ] > C and j [ c ] < B ) :\n            C = j [ c ]\n    a = - sys.p\n    for c in range ( 0 , u ) :\n        if ( j [ c ] > a and j [ c ] < C ) :\n            a = j [ c ]\n    print ( \"The Third Largest\" , \"element is\" , a )"}
{"old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1", "code": "def I ( j , k ) :\n    if ( k < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    m = j [ 0 ]\n    d = - sys.r\n    Y = - sys.r\n    for o in range ( 1 , k ) :\n        if ( j [ o ] > m ) :\n            Y = d\n            d = m\n            m = j [ o ]\n        elif ( j [ o ] > d ) :\n            Y = d\n            d = j [ o ]\n        elif ( j [ o ] > Y ) :\n            Y = j [ o ]\n    print ( \"The third Largest\" , \"element is\" , Y )"}
{"old_id": "TILING_WITH_DOMINOES", "code": "def R ( b ) :\n    C = [ 0 ] * ( b + 1 )\n    q = [ 0 ] * ( b + 1 )\n    C [ 0 ] = 1\n    C [ 1 ] = 0\n    q [ 0 ] = 0\n    q [ 1 ] = 1\n    for p in range ( 2 , b + 1 ) :\n        C [ p ] = C [ p - 2 ] + 2 * q [ p - 1 ]\n        q [ p ] = C [ p - 1 ] + q [ p - 2 ]\n    return C [ b ]"}
{"old_id": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1", "code": "def V ( N ) :\n    R = 10\n    count = 1\n    for o in range ( 1 , N + 1 ) :\n        count = int ( count * ( R + o - 1 ) )\n        count = int ( count / o )\n    return count"}
{"old_id": "TRIANGULAR_MATCHSTICK_NUMBER", "code": "def A ( q ) :\n    return ( 3 * q * ( q + 1 ) ) / 2"}
{"old_id": "TRIANGULAR_NUMBERS", "code": "def Y ( g ) :\n    if ( g < 0 ) :\n        return False\n    sum , U = 0 , 1\n    while ( sum <= g ) :\n        sum = sum + U\n        if ( sum == g ) :\n            return True\n        U += 1\n    return False"}
{"old_id": "TURN_OFF_THE_RIGHTMOST_SET_BIT", "code": "def K ( k ) :\n    return k & ( k - 1 )"}
{"old_id": "UNIQUE_CELLS_BINARY_MATRIX", "code": "def p ( x , g , l ) :\n    k = [ 0 ] * g\n    H = [ 0 ] * l\n    for Q in range ( g ) :\n        for U in range ( l ) :\n            if ( x [ Q ] [ U ] != 0 ) :\n                k [ Q ] += 1\n                H [ U ] += 1\n    X = 0\n    for Q in range ( g ) :\n        for U in range ( l ) :\n            if ( x [ Q ] [ U ] != 0 and k [ Q ] == 1 and H [ U ] == 1 ) :\n                X += 1\n    return X"}
{"old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO", "code": "def K ( str ) :\n    q = 0\n    P = 0\n    U = len ( str )\n    for l in range ( 0 , U , 1 ) :\n        if ( str [ l ] == '1' ) :\n            q += 1\n        else :\n            P += 1\n    if ( q % 2 == 0 ) :\n        return P\n    return q"}
{"old_id": "WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS", "code": "def c ( C ) :\n    E = [ 0 ] * ( C + 1 )\n    E [ 0 ] = 1\n    for P in range ( 1 , C ) :\n        for O in range ( P , C + 1 ) :\n            E [ O ] += E [ O - P ]\n    return E [ C ]"}
{"old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS", "code": "def b ( g , U ) :\n    u = len ( g )\n    X = len ( U )\n    if X == 0 :\n        return 1\n    d = [ [ 0 ] * ( u + 1 ) for z in range ( X + 1 ) ]\n    for i in range ( X ) :\n        for L in range ( i , u ) :\n            if i == 0 :\n                if L == 0 :\n                    if g [ L ] == U [ i ] :\n                        d [ i ] [ L ] = 1\n                    else :\n                        d [ i ] [ L ] = 0\n                elif g [ L ] == U [ i ] :\n                    d [ i ] [ L ] = d [ i ] [ L - 1 ] + 1\n                else :\n                    d [ i ] [ L ] = d [ i ] [ L - 1 ]\n            else :\n                if g [ L ] == U [ i ] :\n                    d [ i ] [ L ] = ( d [ i ] [ L - 1 ] + d [ i - 1 ] [ L - 1 ] )\n                else :\n                    d [ i ] [ L ] = d [ i ] [ L - 1 ]\n    return d [ X - 1 ] [ u - 1 ]"}
{"old_id": "WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3", "code": "def C ( D ) :\n    m = 0\n    r = 0\n    if ( D < 0 ) :\n        D = - D\n    if ( D == 0 ) :\n        return 1\n    if ( D == 1 ) :\n        return 0\n    while ( D ) :\n        if ( D & 1 ) :\n            m += 1\n        if ( D & 2 ) :\n            r += 1\n        D = D >> 2\n    return C ( abs ( m - r ) )"}
{"old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO", "code": "def x ( s ) :\n    if ( s == 0 ) :\n        return False\n    while ( s != 1 ) :\n        if ( s % 2 != 0 ) :\n            return False\n        s = s // 2\n    return True"}
{"old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1", "code": "def j ( b ) :\n    return ( b and ( not ( b & ( b - 1 ) ) ) )"}
{"old_id": "ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION", "code": "def X ( M ) :\n    if ( M == 0 or M == 1 ) :\n        return M\n    O , y , S = 0 , 1 , 1\n    while ( S <= M ) :\n        O = y \n        y = S \n        S = O + y \n    return y "}
