{"old_id": "ADD_1_TO_A_GIVEN_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = 1\n    while ( var2 & var3 ) :\n        var2 = var2 ^ var3\n        var3 <<= 1\n    var2 = var2 ^ var3\n    return var2"}
{"old_id": "ADD_1_TO_A_GIVEN_NUMBER_1", "code": "def var1 ( var2 ) :\n    return ( - ( ~ var2 ) )"}
{"old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    for var5 in range ( var5 , var3 ) :\n        if ( var2 [ var5 ] == var4 ) :\n            return var5\n    return - 1"}
{"old_id": "AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT", "code": "def var1 ( var2 ) :\n    var3 = ( math.var4 * var2 * var2 ) / 4\n    return var3"}
{"old_id": "AREA_SQUARE_CIRCUMSCRIBED_CIRCLE", "code": "def var1 ( var2 ) :\n    return ( 2 * var2 * var2 )"}
{"old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var4 >= var3 - 1 :\n        return var3\n    var5 = 0\n    var6 = 0\n    for var7 in range ( var3 ) :\n        if var2 [ var7 ] > var5 :\n            var5 = var2 [ var7 ]\n            if var7 == True :\n                var6 = 1\n        else :\n            var6 += 1\n        if var6 >= var4 :\n            return var5\n    return var5"}
{"old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = dict ( )\n    for var6 in range ( var2 , var3 + 1 ) :\n        if var4 [ var6 ] in var5.keys ( ) :\n            var5 [ var4 [ var6 ] ] += 1\n        else :\n            var5 [ var4 [ var6 ] ] = 1\n    count = 0\n    for var7 in var5 :\n        if var7 == var5 [ var7 ] :\n            count += 1\n    return count"}
{"old_id": "BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS", "code": "def var1 ( var2 , var3 ) :\n    if var2 == 0 :\n        return var3\n    return var1 ( var3 % var2 , var2 )"}
{"old_id": "BINARY_SEARCH", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if var4 >= var3 :\n        var6 = var3 + ( var4 - var3 ) // 2\n        if var2 [ var6 ] == var5 :\n            return var6\n        elif var2 [ var6 ] > var5 :\n            return var1 ( var2 , var3 , var6 - 1 , var5 )\n        else :\n            return var1 ( var2 , var6 + 1 , var4 , var5 )\n    else :\n        return - 1"}
{"old_id": "BREAK_NUMBER_THREE_PARTS", "code": "def var1 ( var2 ) :\n    count = 0\n    for var3 in range ( 0 , var2 + 1 ) :\n        for var4 in range ( 0 , var2 + 1 ) :\n            for var5 in range ( 0 , var2 + 1 ) :\n                if ( var3 + var4 + var5 == var2 ) :\n                    count = count + 1\n    return count"}
{"old_id": "BREAK_NUMBER_THREE_PARTS_1", "code": "def var1 ( var2 ) :\n    count = 0\n    count = ( var2 + 1 ) * ( var2 + 2 ) // 2\n    return count"}
{"old_id": "CAESAR_CIPHER", "code": "def var1 ( var2 , var3 ) :\n    var4 = \"\"\n    for var5 in range ( len ( var2 ) ) :\n        var6 = var2 [ var5 ]\n        if ( var6.isupper ( ) ) :\n            var4 += chr ( ( ord ( var6 ) + var3 - 65 ) % 26 + 65 )\n        else :\n            var4 += chr ( ( ord ( var6 ) + var3 - 97 ) % 26 + 97 )\n    return var4"}
{"old_id": "CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 < 0 or var3 < 0 or var2 > 12 or var3 > 60 ) :\n        print ( 'Wrong input' )\n    if ( var2 == 12 ) :\n        var2 = 0\n    if ( var3 == 60 ) :\n        var3 = 0\n    var4 = int ( 0.5 * ( var2 * 60 + var3 ) )\n    var5 = int ( 6 * var3 )\n    var6 = abs ( var4 - var5 )\n    var6 = min ( 360 - var6 , var6 )\n    return var6"}
{"old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING", "code": "def var1 ( str ) :\n    var2 = ord ( str [ 0 ] ) - 48\n    for var3 in range ( 1 , len ( str ) ) :\n        if ( str [ var3 ] == '0' or str [ var3 ] == '1' or var2 < 2 ) :\n            var2 += ord ( str [ var3 ] ) - 48\n        else :\n            var2 += ord ( str [ var3 ] ) - 48\n    return var2"}
{"old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING", "code": "def var1 ( str ) :\n    var2 = \"0\"\n    var3 = 0\n    for var4 in str :\n        if ( var4.isdigit ( ) ) :\n            var2 += var4\n        else :\n            var3 += int ( var2 )\n            var2 = \"0\"\n    return var3 + int ( var2 )"}
{"old_id": "CALCULATE_VOLUME_DODECAHEDRON", "code": "def var1 ( var2 ) :\n    return ( ( ( 15 + ( 7 * ( math.var3 ( 5 ) ) ) ) / 4 ) * ( math.pow ( var2 , 3 ) ) )"}
{"old_id": "CASSINIS_IDENTITY", "code": "def var1 ( var2 ) :\n    return - 1 if ( var2 & 1 ) else 1"}
{"old_id": "CEILING_IN_A_SORTED_ARRAY_1", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if var5 <= var2 [ var3 ] :\n        return var3\n    if var5 > var2 [ var4 ] :\n        return - 1\n    var6 = ( var3 + var4 ) / 2\n    if var2 [ var6 ] == var5 :\n        return var6\n    elif var2 [ var6 ] < var5 :\n        if var6 + 1 <= var4 and var5 <= var2 [ var6 + 1 ] :\n            return var6 + 1\n        else :\n            return var1 ( var2 , var6 + 1 , var4 , var5 )\n    else :\n        if var6 - 1 >= var3 and var5 > var2 [ var6 - 1 ] :\n            return var6\n        else :\n            return var1 ( var2 , var3 , var6 - 1 , var5 )"}
{"old_id": "CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    var6 = 0\n    var7 = 0\n    var8 = 0\n    var9 = var3 - 1\n    while var8 < var3 :\n        if ( var8 < var3 // 2 ) :\n            var4 += var2 [ var8 ] [ var8 ]\n            var6 += var2 [ var9 ] [ var8 ]\n        elif ( var8 > var3 // 2 ) :\n            var5 += var2 [ var8 ] [ var8 ]\n            var7 += var2 [ var9 ] [ var8 ]\n        var8 += 1\n        var9 -= 1\n    return ( var4 == var7 and var7 == var6 and var5 == var6 and var7 == var2 [ var3 // 2 ] [ var3 // 2 ] )"}
{"old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP", "code": "def var1 ( str ) :\n    var2 = 0\n    var3 = 0\n    for var4 in range ( 0 , len ( str ) ) :\n        var5 = str [ var4 ]\n        if ( var5 == '0' ) :\n            var2 = var2 + 1\n        else :\n            var3 = var3 + 1\n    return ( var2 == 1 or var3 == 1 )"}
{"old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP_1", "code": "def var1 ( str ) :\n    sum = 0\n    var2 = len ( str )\n    for var3 in range ( 0 , var2 ) :\n        sum += ord ( str [ var3 ] ) - ord ( '0' )\n    return ( sum == var2 - 1 or sum == 1 )"}
{"old_id": "CHECK_ARRAY_MAJORITY_ELEMENT", "code": "def var1 ( var2, var3 ) :\n    var4 = { }\n    for var5 in range(var3) :\n        if var2[var5] in var4 : var4 [ var2[var5] ] += 1\n        else : var4 [ var2[var5] ] = 1\n    for var6 in var4 :\n        if var4 [ var6 ] >= len ( var2 ) // 2 :\n            return True\n    return False"}
{"old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 0 or var3 == 1 ) :\n        return True\n    for var4 in range ( 1 , var3 , 1 ) :\n        if ( var2 [ var4 - 1 ] > var2 [ var4 ] ) :\n            return False\n    return True"}
{"old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K", "code": "def var1 ( str , var2 ) :\n    var3 = len ( str )\n    var4 = 0\n    for var5 in range ( 0 , var2 ) :\n        if ( str [ var3 - var5 - 1 ] == '0' ) :\n            var4 += 1\n    return ( var4 == var2 )"}
{"old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 == 0 and var2 [ 0 ] == '0' ) :\n        return True\n    if ( ( var3 % 3 ) == 1 ) :\n        var2 = \"00\" + var2\n    if ( ( var3 % 3 ) == 2 ) :\n        var2 = \"0\" + var2\n    var4 = 0\n    for var5 in range ( 0 , var3 , 3 ) :\n        var6 = 0\n        var6 += ( ord ( var2 [ var5 ] ) - 48 ) * 100\n        var6 += ( ord ( var2 [ var5 + 1 ] ) - 48 ) * 10\n        var6 += ( ord ( var2 [ var5 + 2 ] ) - 48 )\n        var4 += var6\n    if ( var4 > 1000 ) :\n        var2 = str ( var4 )\n        var3 = len ( var2 )\n        var4 = var1 ( var2 )\n    return ( var4 == 999 )"}
{"old_id": "CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CONCENTRIC_CIRCLES", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    var7 = int ( math.var8 ( var5 * var5 + var6 * var6 ) )\n    return ( var7 - var4 >= var3 and var7 + var4 <= var2 )"}
{"old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS", "code": "def var1 ( var2 ) :\n    if ( len ( var2 ) >= 10 ) :\n        return True\n    for var3 in range ( 1 , len ( var2 ) ) :\n        for var4 in range ( var3 + 1 , len ( var2 ) ) :\n            for var5 in range ( var4 + 1 , len ( var2 ) ) :\n                var6 = var2 [ 0 : var3 ]\n                var7 = var2 [ var3 : var4 ]\n                var8 = var2 [ var4 : var5 ]\n                var9 = var2 [ var5 : len ( var2 ) ]\n                if ( var6 != var7 and var6 != var8 and var6 != var9 and var7 != var8 and var7 != var9 and var8 != var9 ) :\n                    return True\n    return False"}
{"old_id": "CHECK_GIVEN_STRING_ROTATION_PALINDROME", "code": "def var1 ( string ) :\n    var2 = 0\n    var3 = len ( string ) - 1\n    while var3 > var2 :\n        var2 += 1\n        var3 -= 1\n        if string [ var2 - 1 ] != string [ var3 + 1 ] :\n            return False\n    return True"}
{"old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if ( var2 [ var6 ] & 1 ) :\n            var4 += 1\n        else :\n            var5 += 1\n    if ( var4 % 2 and var5 % 2 ) :\n        return False\n    else :\n        return True"}
{"old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 < 1 ) :\n        return False\n    var4 = min ( var2 )\n    var5 = max ( var2 )\n    if ( var5 - var4 + 1 == var3 ) :\n        var6 = [ False for var7 in range ( var3 ) ]\n        for var7 in range ( var3 ) :\n            if ( var6 [ var2 [ var7 ] - var4 ] != False ) :\n                return False\n            var6 [ var2 [ var7 ] - var4 ] = True\n        return True\n    return False"}
{"old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE", "code": "def var1 ( var2, var3 ) :\n    var4 = [ ]\n    var5 = -2147483648\n    for var6 in range(var3) :\n        if var2[var6] < var5 :\n            return False\n        while ( len ( var4 ) > 0 and var4 [ - 1 ] < var2[var6] ) :\n            var5 = var4.pop ( )\n        var4.append ( var2[var6] )\n    return True"}
{"old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 == 1 ) :\n        return ( var3 == 1 )\n    pow = 1\n    while ( pow < var3 ) :\n        pow = pow * var2\n    return ( pow == var3 )"}
{"old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = int ( math.var5 ( var3 ) / math.var5 ( var2 ) )\n    var6 = math.var5 ( var3 ) / math.var5 ( var2 )\n    return 1 if ( var4 == var6 ) else 0"}
{"old_id": "CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBER_OF_CHARACTERS", "code": "def var1 ( str , var2 ) :\n    var3 = len ( str )\n    if ( var3 >= var2 ) :\n        return True\n    return False"}
{"old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if ( var2 [ var6 ] == 5 ) :\n            var4 += 1\n        elif ( var2 [ var6 ] == 10 ) :\n            if ( var4 > 0 ) :\n                var4 -= 1\n                var5 += 1\n            else :\n                return 0\n        else :\n            if ( var4 > 0 and var5 > 0 ) :\n                var4 -= 1\n                var5 -= 1\n            elif ( var4 >= 3 ) :\n                var4 -= 3\n            else :\n                return 0\n    return 1"}
{"old_id": "CHECK_INTEGER_OVERFLOW_MULTIPLICATION", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 == 0 or var3 == 0 ) :\n        return False\n    var4 = var2 * var3\n    if ( var4 >= 9223372036854775807 or var4 <= - 9223372036854775808 ) :\n        var4 = 0\n    if ( var2 == ( var4 // var3 ) ) :\n        return False\n    else :\n        return True"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = 0\n    var4 = 0\n    for var5 in range ( 0 , var2 ) :\n        if ( var5 % 2 == 0 ) :\n            var3 = var3 + ( ord ( str [ var5 ] ) - 48 )\n        else :\n            var4 = var4 + ( ord ( str [ var5 ] ) - 48 )\n    return ( ( var3 - var4 ) % 11 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 == 1 and var2 [ 0 ] == '0' ) :\n        return True\n    if ( var3 % 3 == 1 ) :\n        var2 = str ( var2 ) + \"00\"\n        var3 += 2\n    elif ( var3 % 3 == 2 ) :\n        var2 = str ( var2 ) + \"0\"\n        var3 += 1\n    sum = 0\n    var4 = 1\n    for var5 in range ( var3 - 1 , - 1 , - 3 ) :\n        var6 = 0\n        var6 += ord ( var2 [ var5 ] ) - ord ( '0' )\n        var5 -= 1\n        var6 += ( ord ( var2 [ var5 ] ) - ord ( '0' ) ) * 10\n        var5 -= 1\n        var6 += ( ord ( var2 [ var5 ] ) - ord ( '0' ) ) * 100\n        sum = sum + var6 * var4\n        var4 *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    if ( var2 == 0 ) :\n        return False\n    if ( var2 == 1 ) :\n        return ( ( str [ 0 ] - '0' ) % 4 == 0 )\n    var3 = ( int ) ( str [ var2 - 1 ] )\n    var4 = ( int ) ( str [ var2 - 2 ] )\n    return ( ( var4 * 10 + var3 ) % 4 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = 0\n    for var4 in range ( 0 , var2 ) :\n        var3 = var3 + ord ( str [ var4 ] ) - 48\n    return ( var3 % 9 == 0 )"}
{"old_id": "CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION", "code": "def var1 ( var2 ) :\n    var3 = 1\n    var4 = 0\n    while var4 < var2 :\n        var4 += var3\n        if var4 == var2 :\n            return True\n        var3 += 2\n    return False"}
{"old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER", "code": "def var1 ( var2 , var3 ) :\n    var4 = len ( var2 )\n    var5 = len ( var3 )\n    var6 = ( [ [ False for var7 in range ( var5 + 1 ) ] for var7 in range ( var4 + 1 ) ] )\n    var6 [ 0 ] [ 0 ] = True\n    for var7 in range ( len ( var2 ) ) :\n        for var8 in range ( len ( var3 ) + 1 ) :\n            if ( var6 [ var7 ] [ var8 ] ) :\n                if ( ( var8 < len ( var3 ) and ( var2 [ var7 ].upper ( ) == var3 [ var8 ] ) ) ) :\n                    var6 [ var7 + 1 ] [ var8 + 1 ] = True\n                if ( var2 [ var7 ].isupper ( ) == False ) :\n                    var6 [ var7 + 1 ] [ var8 ] = True\n    return ( var6 [ var4 ] [ var5 ] )"}
{"old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 1 ) :\n        return True\n    var4 = 1\n    for var4 in range ( 1 , var3 ) :\n        if var2 [ var4 - 1 ] >= var2 [ var4 ] :\n            break\n        else:\n            if ( var4 == var3 ) :\n                return True\n    var5 = var4\n    var4 += 1\n    while ( var2 [ var5 ] < var2 [ var5 - 1 ] ) :\n        if ( var4 > 1 and var2 [ var5 ] < var2 [ var4 - 2 ] ) :\n            return False\n        var5 += 1\n    if ( var5 == var3 ) :\n        return True\n    var6 = var5\n    if ( var2 [ var6 ] < var2 [ var4 - 1 ] ) :\n        return False\n    while ( var6 > 1 and var6 < var3 ) :\n        if ( var2 [ var6 ] < var2 [ var6 - 1 ] ) :\n            return False\n        var6 += 1\n    return True"}
{"old_id": "CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES", "code": "def var1 ( var2 , var3 ) :\n    if ( len ( var2 ) != len ( var3 ) ) :\n        return False\n    var4 = \"\"\n    var5 = \"\"\n    var6 = len ( var3 )\n    var5 = ( var5 + var3 [ var6 - 2 : ] + var3 [ 0 : var6 - 2 ] )\n    var4 = var4 + var3 [ 2 : ] + var3 [ 0 : 2 ]\n    return ( var2 == var4 or var2 == var5 )"}
{"old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    for var4 in range ( var3 ) :\n        if ( var2 [ var4 ] != 'a' ) :\n            break\n    if ( var4 * 2 != var3 ) :\n        return False\n    for var5 in range ( var4 , var3 ) :\n        if ( var2 [ var5 ] != 'b' ) :\n            return False\n    return True"}
{"old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var6 = 0\n    for var7 in range ( 0 , var3 ) :\n        var5 = 0\n        var6 = 0\n        for var8 in range ( 0 , var4 ) :\n            var5 += var2 [ var7 ] [ var8 ]\n            var6 += var2 [ var8 ] [ var7 ]\n        if ( var5 == var6 ) :\n            return 1\n    return 0"}
{"old_id": "CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 , var7 ) :\n    var8 = ( var2 - var4 ) * ( var2 - var4 ) + ( var3 - var5 ) * ( var3 - var5 )\n    var9 = ( var6 + var7 ) * ( var6 + var7 )\n    if ( var8 == var9 ) :\n        return 1\n    elif ( var8 > var9 ) :\n        return - 1\n    else :\n        return 0"}
{"old_id": "CHECK_VALID_SEQUENCE_DIVISIBLE_M_1", "code": "def var1 ( var2 , index , var3 , var4 , var5 , var6 ) :\n    var3 = ( ( var3 % var4 ) + var4 ) % var4\n    if ( index == var2 ) :\n        if ( var3 == 0 ) :\n            return 1\n        return 0\n    if ( var6 [ index ] [ var3 ] != - 1 ) :\n        return var6 [ index ] [ var3 ]\n    var7 = var1 ( var2 , index + 1 , var3 + var5 [ index ] , var4 , var5 , var6 )\n    var8 = var1 ( var2 , index + 1 , var3 - var5 [ index ] , var4 , var5 , var6 )\n    var9 = bool ( var7 or var8 )\n    var6 [ index ] [ var3 ] = var9\n    return var9"}
{"old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 1 ) : return True\n    var2.sort ( )\n    var4 = var2 [ 1 ] - var2 [ 0 ]\n    for var5 in range ( 2 , var3 ) :\n        if ( var2 [ var5 ] - var2 [ var5 - 1 ] != var4 ) :\n            return False\n    return True"}
{"old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range(var3):\n        var4 += var2[var5]\n    if ( 2 * ( var3 - 1 ) == var4 ) :\n        return True\n    else :\n        return False"}
{"old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD", "code": "def var1 ( var2 ) :\n    return ( var2 % 2 == 0 )"}
{"old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1", "code": "def var1 ( var2 ) :\n    return ( not ( var2 & 1 ) )"}
{"old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 == 0 and var2 [ 0 ] == '\\n' ) :\n        return 1\n    if ( var3 % 3 == 1 ) :\n        var2 = str ( var2 ) + \"00\"\n        var3 += 2\n    elif ( var3 % 3 == 2 ) :\n        var2 = str ( var2 ) + \"0\"\n        var3 += 1\n    var4 = 0\n    var5 = 1\n    for var6 in range ( var3 - 1 , - 1 , - 1 ) :\n        var7 = 0\n        var7 += ord ( var2 [ var6 ] ) - ord ( '0' )\n        var6 -= 1\n        var7 += ( ord ( var2 [ var6 ] ) - ord ( '0' ) ) * 10\n        var6 -= 1\n        var7 += ( ord ( var2 [ var6 ] ) - ord ( '0' ) ) * 100\n        var4 = var4 + var7 * var5\n        var5 *= ( - 1 )\n    return ( var4 % 7 == 0 )"}
{"old_id": "CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var2 + var3 <= var4 ) or ( var2 + var4 <= var3 ) or ( var3 + var4 <= var2 ) :\n        return False\n    else :\n        return True"}
{"old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 1\n    var6 , var7 = 0 , 0\n    while ( var6 < var2 and var7 < var3 ) :\n        for var8 in range ( var7 , var3 ) :\n            var4 [ var6 ] [ var8 ] = var5\n            var5 += 1\n        var6 += 1\n        for var8 in range ( var6 , var2 ) :\n            var4 [ var8 ] [ var3 - 1 ] = var5\n            var5 += 1\n        var3 -= 1\n        if ( var6 < var2 ) :\n            for var8 in range ( var3 - 1 , var7 - 1 , - 1 ) :\n                var4 [ var2 - 1 ] [ var8 ] = var5\n                var5 += 1\n            var2 -= 1\n        if ( var7 < var3 ) :\n            for var8 in range ( var2 - 1 , var6 - 1 , - 1 ) :\n                var4 [ var8 ] [ var7 ] = var5\n                var5 += 1\n            var7 += 1"}
{"old_id": "COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW", "code": "def var1 ( var2 , var3 ) :\n    return var4 ( ( var2 + var3 ) / 2 )"}
{"old_id": "COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    return ( var2 & ( var3 - 1 ) )"}
{"old_id": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ 0 for var6 in range ( var3 + 1 ) ]\n    var5 [ 0 ] = 1\n    for var6 in range ( 1 , var2 + 1 ) :\n        for var7 in range ( min ( var6 , var3 ) , 0 , - 1 ) :\n            var5 [ var7 ] = ( var5 [ var7 ] + var5 [ var7 - 1 ] ) % var4\n    return var5 [ var3 ]"}
{"old_id": "CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME", "code": "def var1 ( str , len ) :\n    str = list ( str )\n    var2 = - 1\n    var3 = len\n    while var2 < var3 :\n        var2 += 1\n        var3 -= 1\n        if ( str [ var2 ] == str [ var3 ] and str [ var2 ] != '*' ) :\n            continue\n        elif ( str [ var2 ] == str [ var3 ] and str [ var2 ] == '*' ) :\n            str [ var2 ] = 'a'\n            str [ var3 ] = 'a'\n            continue\n        elif str [ var2 ] == '*' :\n            str [ var2 ] = str [ var3 ]\n            continue\n        elif str [ var3 ] == '*' :\n            str [ var3 ] = str [ var2 ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( str )"}
{"old_id": "CONVERT_DECIMAL_FRACTION_BINARY_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    var4 = \"\"\n    var5 = int ( var2 )\n    var6 = var2 - var5\n    while ( var5 > 0 ) :\n        var7 = var5 % 2\n        var4 += str ( var7 )\n        var5 //= 2\n    var4 = var4 [ : : - 1 ]\n    var4 += '.'\n    while ( var3 > 0 ) :\n        var6 *= 2\n        var8 = int ( var6 )\n        if ( var8 == 1 ) :\n            var6 -= var8\n            var4 += '1'\n        else :\n            var4 += '0'\n        var3 -= 1\n    return var4"}
{"old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    len = 0\n    for var5 in range ( var3 ) :\n        var4 [ var5 ] = 1\n    for var5 in range ( 1 , var3 ) :\n        for var6 in range ( var5 ) :\n            if ( var2 [ var5 ] > var2 [ var6 ] and ( var5 - var6 ) <= ( var2 [ var5 ] - var2 [ var6 ] ) ) :\n                var4 [ var5 ] = max ( var4 [ var5 ] , var4 [ var6 ] + 1 )\n        len = max ( len , var4 [ var5 ] )\n    return ( var3 - len )"}
{"old_id": "COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1", "code": "def var1 ( var2 ) :\n    var3 = [ 0 for var4 in range (var2 + 1)]\n    var3[0] = var3[1] = 1\n    for var5 in range(2, var2 + 1):\n        var3[var5] = var3[var5 - 1] + (var5 - 1) * var3[var5 - 2]\n    return var3[var2]"}
{"old_id": "COUNT_1S_SORTED_BINARY_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var4 >= var3 :\n        var5 = int ( var3 + ( var4 - var3 ) / 2 )\n        if ( ( var5 == var4 or var2 [ var5 + 1 ] == 0 ) and ( var2 [ var5 ] == 1 ) ) :\n            return var5 + 1\n        if var2 [ var5 ] == 1 :\n            return var1 ( var2 , ( var5 + 1 ) , var4 )\n        return var1 ( var2 , var3 , var5 - 1 )\n    return 0"}
{"old_id": "COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = list ( )\n    var5.append ( 0 )\n    var5.append ( 1 )\n    var6 = 2\n    while var6 < var2 :\n        var5.append ( ( var3 - 2 ) * var5 [ var6 - 1 ] + ( var3 - 1 ) * var5 [ var6 - 2 ] )\n        var6 = var6 + 1\n    return ( ( var3 - 1 ) * var5 [ var2 - 2 ] if var4 == 1 else var5 [ var2 - 1 ] )"}
{"old_id": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H", "code": "def var1 ( var2 ) :\n    var3 = 1000000007\n    var4 = [ 0 for var5 in range ( var2 + 1 ) ]\n    var4 [ 0 ] = 1\n    var4 [ 1 ] = 1\n    for var5 in range ( 2 , var2 + 1 ) :\n        var4 [ var5 ] = ( var4 [ var5 - 1 ] * ( ( 2 * var4 [ var5 - 2 ] ) % var3 + var4 [ var5 - 1 ] ) % var3 ) % var3\n    return var4 [ var2 ]"}
{"old_id": "COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N", "code": "def var1 ( var2 ) :\n    var3 = collections . var4 ( )\n    var3.append ( 1 )\n    var5 = 0\n    while ( var3 ) :\n        var6 = var3.var7 ( )\n        if ( var6 <= var2 ) :\n            var5 = var5 + 1\n            var3.append ( var6 * 10 )\n            var3.append ( var6 * 10 + 1 )\n    return var5"}
{"old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ [ 0 , 0 ] for var5 in range ( var3 + 1 ) ] for var6 in range ( var2 + 1 ) ]\n    var4 [ 1 ] [ 0 ] [ 0 ] = 1\n    var4 [ 1 ] [ 0 ] [ 1 ] = 1\n    for var7 in range ( 2 , var2 + 1 ) :\n        for var8 in range ( var3 + 1 ) :\n            if var8 >= var7:\n                break\n            else:\n                var4 [ var7 ] [ var8 ] [ 0 ] = ( var4 [ var7 - 1 ] [ var8 ] [ 0 ] + var4 [ var7 - 1 ] [ var8 ] [ 1 ] )\n                var4 [ var7 ] [ var8 ] [ 1 ] = var4 [ var7 - 1 ] [ var8 ] [ 0 ]\n                if var8 >= 1 :\n                    var4 [ var7 ] [ var8 ] [ 1 ] += var4 [ var7 - 1 ] [ var8 - 1 ] [ 1 ]\n    return var4 [ var2 ] [ var3 ] [ 0 ] + var4 [ var2 ] [ var3 ] [ 1 ]"}
{"old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS", "code": "def var1 ( str ) :\n    var2 = 0 ;\n    var3 = len ( str )\n    for var4 in range ( 0 , var3 ) :\n        for var5 in range ( var4 + 1 , var3 ) :\n            if ( abs ( ord ( str [ var4 ] ) - ord ( str [ var5 ] ) ) == abs ( var4 - var5 ) ) :\n                var2 += 1 ;\n    return var2 ;"}
{"old_id": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1", "code": "def var1 ( var2 ) :\n    var3 = [ 0 for var4 in range ( var2 + 1 ) ]\n    var3 [ 0 ] = 1\n    var3 [ 1 ] = 0\n    var3 [ 2 ] = 1\n    for var4 in range ( 3 , var2 + 1 ) :\n        var3 [ var4 ] = ( var4 - 1 ) * ( var3 [ var4 - 1 ] + var3 [ var4 - 2 ] )\n    return var3 [ var2 ]"}
{"old_id": "COUNT_DIGITS_FACTORIAL_SET_1", "code": "def var1 ( var2 ) :\n    if ( var2 < 0 ) :\n        return 0\n    if ( var2 <= 1 ) :\n        return 1\n    var3 = 0\n    for var4 in range ( 2 , var2 + 1 ) :\n        var3 += math.var5 ( var4 )\n    return math.var6 ( var3 ) + 1"}
{"old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    while ( var4 * var4 < var2 ) :\n        var5 = 0\n        while ( var4 * var4 + var5 * var5 < var2 ) :\n            var3 = var3 + 1\n            var5 = var5 + 1\n        var4 = var4 + 1\n    return var3"}
{"old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_1", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    var5 = 0\n    while ( var5 * var5 < var2 ) :\n        var5 = var5 + 1\n    while ( var5 != 0 ) :\n        var4 = var4 + var5\n        var3 = var3 + 1\n        while ( var5 != 0 and ( var3 * var3 + ( var5 - 1 ) * ( var5 - 1 ) >= var2 ) ) :\n            var5 = var5 - 1\n    return var4"}
{"old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = len ( var3 )\n    var5 = len ( var2 )\n    if var4 > var5 :\n        return 0\n    var6 = [ [ 0 for var7 in range ( var5 + 1 ) ] for var8 in range ( var4 + 1 ) ]\n    for var9 in range ( 1 , var4 + 1 ) :\n        var6 [ var9 ] [ 0 ] = 0\n    for var10 in range ( var5 + 1 ) :\n        var6 [ 0 ] [ var10 ] = 1\n    for var9 in range ( 1 , var4 + 1 ) :\n        for var10 in range ( 1 , var5 + 1 ) :\n            if var3 [ var9 - 1 ] != var2 [ var10 - 1 ] :\n                var6 [ var9 ] [ var10 ] = var6 [ var9 ] [ var10 - 1 ]\n            else :\n                var6 [ var9 ] [ var10 ] = ( var6 [ var9 ] [ var10 - 1 ] + var6 [ var9 - 1 ] [ var10 - 1 ] )\n    return var6 [ var4 ] [ var5 ]"}
{"old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX", "code": "def count ( var1 , var2 ) :\n    var3 = 0\n    for var4 in range ( 1 , var1 + 1 ) :\n        if var4 <= var2 :\n            if var2 // var4 <= var1 and var2 % var4 == 0 :\n                var3 += 1\n    return var3"}
{"old_id": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1", "code": "def var1 ( var2 ) :\n    var3 = 1\n    var4 = 1\n    for var5 in range ( 1 , var2 + 1 ) :\n        var3 = int ( ( var3 * ( var2 + 1 - var5 ) ) / var5 )\n        var4 += var3 * var3 \n    return var4 "}
{"old_id": "COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ", "code": "def find ( var1 , var2 ) :\n    if ( var1 + 1 >= var2 ) :\n        return ( var2 - 1 )\n    else :\n        return ( 2 * var1 + 1 - var2 )"}
{"old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( 0 , var3 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            if ( var2 [ var5 ] == var2 [ var6 ] ) :\n                var4 += 1\n    return var4"}
{"old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = dict ( )\n    for var5 in range ( var3 ) :\n        if var2 [ var5 ] in var4.keys ( ) :\n            var4 [ var2 [ var5 ] ] += 1\n        else :\n            var4 [ var2 [ var5 ] ] = 1\n    var6 = 0\n    for var7 in var4 :\n        count = var4 [ var7 ]\n        var6 += ( count * ( count - 1 ) ) // 2\n    return var6"}
{"old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( 1 , var3 - 1 ) :\n        var6 = 0\n        for var7 in range ( var5 + 1 , var3 ) :\n            if ( var2 [ var5 ] > var2 [ var7 ] ) :\n                var6 += 1\n        var8 = 0\n        for var7 in range ( var5 - 1 , - 1 , - 1 ) :\n            if ( var2 [ var5 ] < var2 [ var7 ] ) :\n                var8 += 1\n        var4 += var8 * var6\n    return var4"}
{"old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS", "code": "def var1 ( var2 , var3 ) :\n    var4 = sorted ( var2 )\n    count = 1\n    for var5 in range ( 0 , var3 - 1 ) :\n        if ( var4 [ var5 ] + 1 != var4 [ var5 + 1 ] ) :\n            count = count + 1\n    return count"}
{"old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = 0\n    for var4 in range ( 1 , 10 ) :\n        var5 = [ ]\n        if ( var4 <= var2 ) :\n            var5.append ( var4 )\n            var3 += 1\n        while len ( var5 ) != 0 :\n            var6 = var5 [ - 1 ]\n            var5.pop ( )\n            for var7 in range ( var6 % 10 , 10 ) :\n                var8 = var6 * 10 + var7\n                if ( var8 <= var2 ) :\n                    var5.append ( var8 )\n                    var3 += 1\n    return var3"}
{"old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX", "code": "def var1 ( var2 , var3 , var4 ) :\n    count = 0\n    for var5 in range ( var3 ) :\n        for var6 in range ( var4 ) :\n            if var2 [ var5 ] [ var6 ] < 0 :\n                count += 1\n            else :\n                break\n    return count"}
{"old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    count = 0\n    var5 = 0\n    var6 = var4 - 1\n    while var6 >= 0 and var5 < var3 :\n        if var2 [ var5 ] [ var6 ] < 0 :\n            count += ( var6 + 1 )\n            var5 += 1\n        else :\n            var6 -= 1\n    return count"}
{"old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ False for var6 in range ( var2 + 2 ) ]\n    if ( var3 <= var2 ) :\n        var5 [ var3 ] = True\n    if ( var4 <= var2 ) :\n        var5 [ var4 ] = True\n    var7 = 0\n    for var6 in range ( min ( var3 , var4 ) , var2 + 1 ) :\n        if ( var5 [ var6 ] ) :\n            if ( var6 + var3 <= var2 ) :\n                var5 [ var6 + var3 ] = True\n            if ( var6 + var4 <= var2 ) :\n                var5 [ var6 + var4 ] = True\n            var7 = var7 + 1\n    return var7"}
{"old_id": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S", "code": "def var1 ( var2 ) :\n    var3 = [ 0 for var4 in range ( var2 ) ]\n    var5 = [ 0 for var4 in range ( var2 ) ]\n    var3 [ 0 ] = var5 [ 0 ] = 1\n    for var4 in range ( 1 , var2 ) :\n        var3 [ var4 ] = var3 [ var4 - 1 ] + var5 [ var4 - 1 ]\n        var5 [ var4 ] = var3 [ var4 - 1 ]\n    return var3 [ var2 - 1 ] + var5 [ var2 - 1 ]"}
{"old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ [ 0 for var6 in range ( var3 ) ] for var6 in range ( var4 ) ]\n    for var6 in range ( var3 ) :\n        var5 [ 0 ] [ var6 ] = 1\n    for var7 in range ( 1 , var4 ) :\n        for var6 in range ( var7 , var3 ) :\n            var5 [ var7 ] [ var6 ] = 0\n            for var8 in range ( var7 - 1 , var6 ) :\n                if ( var2 [ var8 ] < var2 [ var6 ] ) :\n                    var5 [ var7 ] [ var6 ] += var5 [ var7 - 1 ] [ var8 ]\n    var9 = 0\n    for var6 in range ( var4 - 1 , var3 ) :\n        var9 += var5 [ var4 - 1 ] [ var6 ]\n    return var9"}
{"old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if var4 == var2 [ var6 ] :\n            var5 += 1\n    return var5"}
{"old_id": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ 0 for var7 in range ( var2 + 1 ) ]\n    var6 [ 0 ] = 1\n    for var7 in range ( 1 , var2 + 1 , 1 ) :\n        var6 [ var7 ] = var6 [ var7 - 1 ] + var7\n    var8 = var2 - ( var3 + var5 + var4 )\n    sum = 0\n    for var7 in range ( 0 , var8 + 1 , 1 ) :\n        for var9 in range ( 0 , var8 - var7 + 1 , 1 ) :\n            var10 = var8 - ( var7 + var9 )\n            sum = int ( sum + var6 [ var2 ] / ( var6 [ var7 + var3 ] + var6 [ var9 + var4 ] + var6 [ var10 + var5 ] ) )\n    return sum"}
{"old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var3 + 1 ) ] for var6 in range ( var2 + 1 ) ]\n    for var5 in range ( var2 + 1 ) :\n        var4 [ var5 ] [ 0 ] = 0\n    for var5 in range ( var3 + 1 ) :\n        var4 [ 0 ] [ var3 ] = 0\n    for var5 in range ( 1 , var2 + 1 ) :\n        for var6 in range ( 1 , var3 + 1 ) :\n            if ( var6 == 1 or var5 == var6 ) :\n                var4 [ var5 ] [ var6 ] = 1\n            else :\n                var4 [ var5 ] [ var6 ] = ( var6 * var4 [ var5 - 1 ] [ var6 ] + var4 [ var5 - 1 ] [ var6 - 1 ] )\n    return var4 [ var2 ] [ var3 ]"}
{"old_id": "COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B", "code": "def var1 ( var2 ) :\n    var3 = var2\n    var4 = 1\n    var5 = 0\n    while ( var4 <= var2 ) :\n        var6 = int ( var2 / var3 )\n        var5 += var3 * ( var6 - var4 + 1 )\n        var4 = var6 + 1\n        var3 = int ( var2 / var4 )\n    return var5"}
{"old_id": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME", "code": "def count ( var1 ) :\n    var2 = [ 0 for var3 in range ( var1 + 1 ) ]\n    var2 [ 0 ] = 1\n    for var3 in range ( 3 , var1 + 1 ) :\n        var2 [ var3 ] += var2 [ var3 - 3 ]\n    for var3 in range ( 5 , var1 + 1 ) :\n        var2 [ var3 ] += var2 [ var3 - 5 ]\n    for var3 in range ( 10 , var1 + 1 ) :\n        var2 [ var3 ] += var2 [ var3 - 10 ]\n    return var2 [ var1 ]"}
{"old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES", "code": "def var1 ( var2 , var3 ) :\n    count = [ ]\n    for var4 in range ( var2 + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for var4 in range ( 1 , var2 + 1 ) :\n        if ( var4 > var3 ) :\n            count [ var4 ] = count [ var4 - 1 ] + count [ var4 - var3 ]\n        elif ( var4 < var3 ) :\n            count [ var4 ] = 1\n        else :\n            count [ var4 ] = 2\n    return count [ var2 ]"}
{"old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME", "code": "def var1 ( str , var2 ) :\n    var3 = ( var2 * ( var2 + 1 ) ) // 2\n    var4 = 0\n    var5 = 0\n    var6 = 0\n    for var7 in range ( var2 ) :\n        if ( str [ var7 ] == 'a' ) :\n            var4 = var7 + 1\n            var3 -= min ( var5 , var6 )\n        elif ( str [ var7 ] == 'b' ) :\n            var5 = var7 + 1\n            var3 -= min ( var4 , var6 )\n        else :\n            var6 = var7 + 1\n            var3 -= min ( var4 , var5 )\n    return var3"}
{"old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    for var5 in range ( len ( var2 ) ) :\n        if var2 [ ~ var5 ] == 'a' :\n            var4 = ( var4 + var3 )\n            var3 = ( var3 * 2 )\n        else :\n            var3 += 1\n    return var4"}
{"old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K", "code": "def var1 ( var2 , var3 , var4 ) :\n    count = 0\n    for var5 in range ( 0 , var3 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            if var2 [ var5 ] - var2 [ var6 ] == var4 or var2 [ var6 ] - var2 [ var5 ] == var4 :\n                count += 1\n    return count"}
{"old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    count = 0\n    var2.sort ( )\n    var5 = 0\n    var6 = 0\n    while var6 < var3 :\n        if var2 [ var6 ] - var2 [ var5 ] == var4 :\n            count += 1\n            var5 += 1\n            var6 += 1\n        elif var2 [ var6 ] - var2 [ var5 ] > var4 :\n            var5 += 1\n        else :\n            var6 += 1\n    return count"}
{"old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    count = 0\n    for var7 in range ( var4 ) :\n        for var8 in range ( var5 ) :\n            if var2 [ var7 ] + var3 [ var8 ] == var6 :\n                count = count + 1\n    return count"}
{"old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    count = 0\n    var7 = set ( )\n    for var8 in range ( var4 ) :\n        var7.add ( var2 [ var8 ] )\n    for var9 in range ( var5 ) :\n        if var6 - var3 [ var9 ] in var7 :\n            count += 1\n    return count"}
{"old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0 ;\n    for var5 in range ( 0 , var3 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            var7 = var2 [ var5 ] * var2 [ var6 ] ;\n            for var8 in range ( 0 , var3 ) :\n                if ( var2 [ var8 ] == var7 ) :\n                    var4 = var4 + 1 ;\n                    break ;\n    return var4 ;"}
{"old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = set ( )\n    for var6 in range ( var3 ) :\n        var5.add ( var2 [ var6 ] )\n    for var6 in range ( var3 ) :\n        for var7 in range ( var6 + 1 , var3 ) :\n            var8 = var2 [ var6 ] * var2 [ var7 ]\n            if var8 in ( var5 ) :\n                var4 += 1\n    return var4"}
{"old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING", "code": "def var1 ( str , var2 ) :\n    var3 = [ [ 0 for var4 in range ( var2 ) ] for var5 in range ( var2 ) ]\n    var6 = [ [ False for var4 in range ( var2 ) ] for var5 in range ( var2 ) ]\n    for var7 in range ( var2 ) :\n        var6 [ var7 ] [ var7 ] = True\n    for var7 in range ( var2 - 1 ) :\n        if ( str [ var7 ] == str [ var7 + 1 ] ) :\n            var6 [ var7 ] [ var7 + 1 ] = True\n            var3 [ var7 ] [ var7 + 1 ] = 1\n    for var8 in range ( 2 , var2 ) :\n        for var7 in range ( var2 - var8 ) :\n            var9 = var8 + var7 ;\n            if ( str [ var7 ] == str [ var9 ] and var6 [ var7 + 1 ] [ var9 - 1 ] ) :\n                var6 [ var7 ] [ var9 ] = True\n            if ( var6 [ var7 ] [ var9 ] == True ) :\n                var3 [ var7 ] [ var9 ] = ( var3 [ var7 ] [ var9 - 1 ] + var3 [ var7 + 1 ] [ var9 ] + 1 - var3 [ var7 + 1 ] [ var9 - 1 ] )\n            else :\n                var3 [ var7 ] [ var9 ] = ( var3 [ var7 ] [ var9 - 1 ] + var3 [ var7 + 1 ] [ var9 ] - var3 [ var7 + 1 ] [ var9 - 1 ] )\n    return var3 [ 0 ] [ var2 - 1 ]"}
{"old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = [ [ 0 for var4 in range ( var2 + 2 ) ] for var5 in range ( var2 + 2 ) ]\n    for var4 in range ( var2 ) :\n        var3 [ var4 ] [ var4 ] = 1\n    for var6 in range ( 2 , var2 + 1 ) :\n        for var4 in range ( var2 ) :\n            var7 = var6 + var4 - 1\n            if ( var7 < var2 ) :\n                if ( str [ var4 ] == str [ var7 ] ) :\n                    var3 [ var4 ] [ var7 ] = ( var3 [ var4 ] [ var7 - 1 ] + var3 [ var4 + 1 ] [ var7 ] + 1 )\n                else :\n                    var3 [ var4 ] [ var7 ] = ( var3 [ var4 ] [ var7 - 1 ] + var3 [ var4 + 1 ] [ var7 ] - var3 [ var4 + 1 ] [ var7 - 1 ] )\n    return var3 [ 0 ] [ var2 - 1 ]"}
{"old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1", "code": "def var1 ( var2 , var3 ) :\n    count = [ 0 ] * ( var3 + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    if var2 [ 0 ] == '0' :\n        return 0\n    for var4 in range ( 2 , var3 + 1 ) :\n        count [ var4 ] = 0\n        if ( var2 [ var4 - 1 ] > '0' ) :\n            count [ var4 ] = count [ var4 - 1 ]\n        if ( var2 [ var4 - 2 ] == '1' or ( var2 [ var4 - 2 ] == '2' and var2 [ var4 - 1 ] < '7' ) ) :\n            count [ var4 ] += count [ var4 - 2 ]\n    return count [ var3 ]"}
{"old_id": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 , 0 , 0 ]\n    var5 = 0\n    for var6 in range ( 0 , var3 ) :\n        var4 [ var2 [ var6 ] % 3 ] += 1\n    var5 += ( ( var4 [ 0 ] * ( var4 [ 0 ] - 1 ) ) >> 1 )\n    var5 += var4 [ 1 ] * var4 [ 2 ]\n    var5 += ( var4 [ 0 ] * ( var4 [ 0 ] - 1 ) * ( var4 [ 0 ] - 2 ) ) / 6\n    var5 += ( var4 [ 1 ] * ( var4 [ 1 ] - 1 ) * ( var4 [ 1 ] - 2 ) ) / 6\n    var5 += ( ( var4 [ 2 ] * ( var4 [ 2 ] - 1 ) * ( var4 [ 2 ] - 2 ) ) / 6 )\n    var5 += var4 [ 0 ] * var4 [ 1 ] * var4 [ 2 ]\n    return var5"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1", "code": "def var1 ( var2 , var3 ) :\n    count = [ [ 0 for var4 in range ( var2 ) ] for var5 in range ( var3 ) ]\n    for var6 in range ( var2 ) :\n        count [ var6 ] [ 0 ] = 1 ;\n    for var7 in range ( var3 ) :\n        count [ 0 ] [ var7 ] = 1 ;\n    for var6 in range ( 1 , var2 ) :\n        for var7 in range ( var3 ) :\n            count [ var6 ] [ var7 ] = count [ var6 - 1 ] [ var7 ] + count [ var6 ] [ var7 - 1 ]\n    return count [ var2 - 1 ] [ var3 - 1 ]"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    var4[0]=1\n    for var5 in range ( var2  ) :\n        for var6 in range ( 1 , var3 ) :\n            var4 [ var6 ] += var4 [ var6 - 1 ]\n    return var4 [ var3 - 1 ]"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( var3 , ( var2 + var3 - 1 ) ) :\n        var5 *= var4\n        var5 //= ( var4 - var3 + 1 )\n    return var5"}
{"old_id": "COUNT_ROTATIONS_DIVISIBLE_4", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 == 1 ) :\n        var4 = ( int ) ( var2 [ 0 ] )\n        if ( var4 % 4 == 0 ) :\n            return 1\n        return 0\n    count = 0\n    for var5 in range ( 0 , var3 - 1 ) :\n        var6 = ( int ) ( var2 [ var5 ] ) * 10 + ( int ) ( var2 [ var5 + 1 ] )\n        if ( var6 % 4 == 0 ) :\n            count = count + 1\n    var6 = ( int ) ( var2 [ var3 - 1 ] ) * 10 + ( int ) ( var2 [ 0 ] )\n    if ( var6 % 4 == 0 ) :\n        count = count + 1\n    return count"}
{"old_id": "COUNT_ROTATIONS_DIVISIBLE_8", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    count = 0\n    if ( var3 == 1 ) :\n        var4 = int ( var2 [ 0 ] )\n        if ( var4 % 8 == 0 ) :\n            return 1\n        return 0\n    if ( var3 == 2 ) :\n        var5 = int ( var2 [ 0 ] ) * 10 + int ( var2 [ 1 ] )\n        var6 = int ( var2 [ 1 ] ) * 10 + int ( var2 [ 0 ] )\n        if ( var5 % 8 == 0 ) :\n            count += 1\n        if ( var6 % 8 == 0 ) :\n            count += 1\n        return count\n    var7 = 0\n    for var8 in range ( 0 , ( var3 - 2 ) ) :\n        var7 = ( int ( var2 [ var8 ] ) * 100 + int ( var2 [ var8 + 1 ] ) * 10 + int ( var2 [ var8 + 2 ] ) )\n        if ( var7 % 8 == 0 ) :\n            count += 1\n    var7 = ( int ( var2 [ var3 - 1 ] ) * 100 + int ( var2 [ 0 ] ) * 10 + int ( var2 [ 1 ] ) )\n    if ( var7 % 8 == 0 ) :\n        count += 1\n    var7 = ( int ( var2 [ var3 - 2 ] ) * 100 + int ( var2 [ var3 - 1 ] ) * 10 + int ( var2 [ 0 ] ) )\n    if ( var7 % 8 == 0 ) :\n        count += 1\n    return count"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_1", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 ) :\n        return 0\n    else :\n        return ( var2 & 1 ) + var1 ( var2 >> 1 )"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_2", "code": "def var1 ( var2 ) :\n    count = 0\n    while ( var2 ) :\n        var2 &= ( var2 - 1 )\n        count += 1\n    return count"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_3", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 ) :\n        return 0\n    else :\n        return 1 + var1 ( var2 & ( var2 - 1 ) )"}
{"old_id": "COUNT_SORTED_ROWS_MATRIX", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    for var6 in range ( var3 ) :\n        var7 = 0\n        for var7 in range ( var4 - 1 ) :\n            if var2 [ var6 ] [ var7 + 1 ] <= var2 [ var6 ] [ var7 ] :\n                break\n        if var7 == var4 - 2 :\n            var5 += 1\n    for var6 in range ( 0 , var3 ) :\n        var7 = 0\n        for var7 in range ( var4 - 1 , 0 , - 1 ) :\n            if var2 [ var6 ] [ var7 - 1 ] <= var2 [ var6 ] [ var7 ] :\n                break\n        if var4 > 1 and var7 == 1 :\n            var5 += 1\n    return var5"}
{"old_id": "COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1", "code": "def var1 ( var2 ) :\n    return ( 1 + ( var2 * 2 ) + ( var2 * ( ( var2 * var2 ) - 1 ) // 2 ) )"}
{"old_id": "COUNT_STRINGS_WITH_CONSECUTIVE_1S", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * var2\n    var4 = [ 0 ] * var2\n    var3 [ 0 ] = var4 [ 0 ] = 1\n    for var5 in range ( 1 , var2 ) :\n        var3 [ var5 ] = var3 [ var5 - 1 ] + var4 [ var5 - 1 ]\n        var4 [ var5 ] = var3 [ var5 - 1 ]\n    return ( 1 << var2 ) - var3 [ var2 - 1 ] - var4 [ var2 - 1 ]"}
{"old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS", "code": "def var1 ( var2 , var3 ) :\n    difference = 0\n    var4 = 0\n    var5 = [ 0 ] * ( var3 + 1 )\n    var6 = [ 0 ] * ( var3 + 1 )\n    var5 [ 0 ] = 1\n    for var7 in range ( var3 ) :\n        if ( var2 [ var7 ] & 1 == 1 ) :\n            difference = difference + 1\n        else :\n            difference = difference - 1\n        if ( difference < 0 ) :\n            var4 += var6 [ - difference ]\n            var6 [ - difference ] = var6 [ - difference ] + 1\n        else :\n            var4 += var5 [ difference ]\n            var5 [ difference ] = var5 [ difference ] + 1\n    return var4"}
{"old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = len ( var2 )\n    for var5 in range ( var4 ) :\n        for var6 in range ( var5 , var4 ) :\n            if ( var2 [ var5 ] == var2 [ var6 ] ) :\n                var3 = var3 + 1\n    return var3"}
{"old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    while ( ( 1 << var3 ) <= var2 ) :\n        var5 = 0\n        var6 = 1 << var3\n        for var7 in range ( 0 , var2 + 1 ) :\n            var4 += var5\n            if var6 == 1 :\n                var5 = not var5\n                var6 = 1 << var3\n            else :\n                var6 -= 1\n        var3 += 1\n    return var4"}
{"old_id": "COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER", "code": "def var1 ( var2 ) :\n    count = 0\n    var3 = 5\n    while ( var2 / var3 >= 1 ) :\n        count += int ( var2 / var3 )\n        var3 *= 5\n    return int ( count )"}
{"old_id": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 ] * ( var2 + 1 ) for var4 in range ( 2 ) ]\n    var3 [ 0 ] [ 1 ] = 1\n    var3 [ 1 ] [ 1 ] = 2\n    for var4 in range ( 2 , var2 + 1 ) :\n        var3 [ 0 ] [ var4 ] = var3 [ 0 ] [ var4 - 1 ] + var3 [ 1 ] [ var4 - 1 ]\n        var3 [ 1 ] [ var4 ] = ( var3 [ 0 ] [ var4 - 1 ] * 2 + var3 [ 1 ] [ var4 - 1 ] )\n    return var3 [ 0 ] [ var2 ] + var3 [ 1 ] [ var2 ]"}
{"old_id": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS", "code": "def var1 ( var2 ) :\n    var3 = 2 * var2\n    var4 = [ 0 ] * ( var3 + 1 )\n    var4 [ 0 ] = 1\n    var4 [ 2 ] = 1\n    for var5 in range ( 4 , var3 + 1 , 2 ) :\n        for var6 in range ( 0 , var5 - 1 , 2 ) :\n            var4 [ var5 ] += ( var4 [ var6 ] * var4 [ var5 - 2 - var6 ] )\n    return int ( var4 [ var3 ] )"}
{"old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS", "code": "def var1 ( str , var2 ) :\n    var3 = dict ( )\n    for var4 in range ( var2 ) :\n        var3 [ str [ var4 ] ] = var3.get ( str [ var4 ] , 0 ) + 1\n    var5 = 0\n    for var4 in var3.values ( ) :\n        if var4 == 2 :\n            var5 += 1\n    return var5"}
{"old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD", "code": "def var1 ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) :\n        return count\n    if ( str [ 0 ] == str [ 1 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    for var2 in range ( 1 , len - 1 ) :\n        if ( str [ var2 ] == str [ var2 - 1 ] and str [ var2 ] == str [ var2 + 1 ] ) :\n            count *= 1\n        elif ( str [ var2 ] == str [ var2 - 1 ] or str [ var2 ] == str [ var2 + 1 ] or str [ var2 - 1 ] == str [ var2 + 1 ] ) :\n            count *= 2\n        else :\n            count *= 3\n    if ( str [ len - 1 ] == str [ len - 2 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    return count"}
{"old_id": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES", "code": "def var1 ( var2 , var3 ) :\n    var4 = var2\n    for var5 in range ( 1 , var3 ) :\n        var2 += var4\n    return var2"}
{"old_id": "C_PROGRAM_FACTORIAL_NUMBER", "code": "def var1 ( var2 ) :\n    return 1 if ( var2 == 1 or var2 == 0 ) else var2 * var1 ( var2 - 1 )"}
{"old_id": "C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    return sorted(var2[:var3], reverse=False)[var3-1]"}
{"old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER", "code": "def var1 ( str ) :\n    var2 = 256\n    count = [ 0 ] * var2\n    for var3 in range ( len ( str ) ) :\n        count [ ord ( str [ var3 ] ) ] += 1\n    var4 , var5 = 0 , 0\n    for var3 in range ( var2 ) :\n        if count [ var3 ] > count [ var4 ] :\n            var5 = var4\n            var4 = var3\n        elif ( count [ var3 ] > count [ var5 ] and count [ var3 ] != count [ var4 ] ) :\n            var5 = var3\n    return chr ( var5 )"}
{"old_id": "DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 ) :\n        return \"0\"\n    bin = \"\"\n    while ( var2 > 0 ) :\n        if ( var2 & 1 == 0 ) :\n            bin = '0' + bin\n        else :\n            bin = '1' + bin\n        var2 = var2 >> 1\n    return bin"}
{"old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING", "code": "def var1 ( var2 ) :\n    var3 = [ ]\n    var4 = [ ]\n    var5 = \"\"\n    var6 = \"\"\n    for var7 in range ( len ( var2 ) ) :\n        count = 0\n        if ( var2 [ var7 ] >= '0' and var2 [ var7 ] <= '9' ) :\n            while ( var2 [ var7 ] >= '0' and var2 [ var7 ] <= '9' ) :\n                count = count * 10 + ord ( var2 [ var7 ] ) - ord ( '0' )\n                var7 += 1\n            var7 -= 1\n            var3.append ( count )\n        elif ( var2 [ var7 ] == ']' ) :\n            var5 = \"\"\n            count = 0\n            if ( len ( var3 ) != 0 ) :\n                count = var3 [ - 1 ]\n                var3.pop ( )\n            while ( len ( var4 ) != 0 and var4 [ - 1 ] != '[' ) :\n                var5 = var4 [ - 1 ] + var5\n                var4.pop ( )\n            if ( len ( var4 ) != 0 and var4 [ - 1 ] == '[' ) :\n                var4.pop ( )\n            for var8 in range ( count ) :\n                var6 = var6 + var5\n            for var8 in range ( len ( var6 ) ) :\n                var4.append ( var6 [ var8 ] )\n            var6 = \"\"\n        elif ( var2 [ var7 ] == '[' ) :\n            if ( var2 [ var7 - 1 ] >= '0' and var2 [ var7 - 1 ] <= '9' ) :\n                var4.append ( var2 [ var7 ] )\n            else :\n                var4.append ( var2 [ var7 ] )\n                var3.append ( 1 )\n        else :\n            var4.append ( var2 [ var7 ] )\n    while len ( var4 ) != 0 :\n        var6 = var4 [ - 1 ] + var6\n        var4.pop ( )\n    return var6"}
{"old_id": "DELANNOY_NUMBER_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var2 + 1 ) ] for var5 in range ( var3 + 1 ) ]\n    for var6 in range ( var3 + 1 ) :\n        var4 [ 0 ] [ var6 ] = 1\n    for var6 in range ( var3 + 1 ) :\n        var4 [ var6 ] [ 0 ] = 1\n    for var6 in range ( 1 , var3 + 1 ) :\n        for var7 in range ( 1 , var2 + 1 ) :\n            var4 [ var6 ] [ var7 ] = var4 [ var6 - 1 ] [ var7 ] + var4 [ var6 - 1 ] [ var7 - 1 ] + var4 [ var6 ] [ var7 - 1 ]\n    return var4 [ var3 ] [ var2 ]"}
{"old_id": "DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS", "code": "def var1 ( var2 , var3 ) :\n    return ( ( var2 ^ var3 ) < 0 )"}
{"old_id": "DIAGONALLY_DOMINANT_MATRIX", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( 0 , var3 ) :\n        sum = 0\n        for var5 in range ( 0 , var3 ) :\n            sum = sum + abs ( var2 [ var4 ] [ var5 ] )\n        sum = sum - abs ( var2 [ var4 ] [ var4 ] )\n        if ( abs ( var2 [ var4 ] [ var4 ] ) < sum ) :\n            return False\n    return True"}
{"old_id": "DICE_THROW_PROBLEM", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ [ 0 ] * ( var4 + 1 ) for var6 in range ( var3 + 1 ) ]\n    for var7 in range ( 1 , min ( var2 + 1 , var4 + 1 ) ) :\n        var5 [ 1 ] [ var7 ] = 1\n    for var6 in range ( 2 , var3 + 1 ) :\n        for var7 in range ( 1 , var4 + 1 ) :\n            for var8 in range ( 1 , min ( var2 + 1 , var7 ) ) :\n                var5 [ var6 ] [ var7 ] += var5 [ var6 - 1 ] [ var7 - var8 ]\n    return var5 [ - 1 ] [ - 1 ]"}
{"old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var2.sort ( )\n    count = 0\n    var4 = 0\n    var5 = var3\n    for var6 in range ( 0 , ( var3 - 1 ) ) :\n        if var2 [ var6 ] == var2 [ var6 + 1 ] :\n            count += 1\n            continue\n        else :\n            var4 = max ( var4 , count )\n            var5 = min ( var5 , count )\n            count = 0\n    return var4 - var5"}
{"old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = var5 ( lambda : 0 )\n    for var6 in range ( var3 ) :\n        var4 [ var2 [ var6 ] ] += 1\n    var7 = 0\n    var8 = var3\n    for var9 , values in var4.items ( ) :\n        var7 = max ( var7 , values )\n        var8 = min ( var8 , values )\n    return var7 - var8"}
{"old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M", "code": "def var1 ( var2 , var3 ) :\n    var4 = var5.var6 ( ( var2 + 2 , var2 + 2 ) )\n    var4 [ 0 ] [ var2 + 1 ] = 1\n    for var7 in range ( var2 , var3 - 1 , - 1 ) :\n        for var8 in range ( var2 + 1 ) :\n            var4 [ var8 ] [ var7 ] = var4 [ var8 ] [ var7 + 1 ]\n            if ( var8 - var7 >= 0 ) :\n                var4 [ var8 ] [ var7 ] = ( var4 [ var8 ] [ var7 ] + var4 [ var8 - var7 ] [ var7 ] )\n    return var4 [ var2 ] [ var3 ]"}
{"old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = int ( math.var6 ( var4 ) + 1 )\n    var7 = 1\n    for var8 in range ( var5 ) :\n        var7 = ( var7 * var2 ) % var4\n    var9 = [ 0 ] * var4\n    var10 = var7\n    for var8 in range ( 1 , var5 + 1 ) :\n        if ( var9 [ var10 ] == 0 ) :\n            var9 [ var10 ] = var8\n        var10 = ( var10 * var7 ) % var4\n    var10 = var3\n    for var8 in range ( var5 + 1 ) :\n        if ( var9 [ var10 ] > 0 ) :\n            var11 = var9 [ var10 ] * var5 - var8\n            if ( var11 < var4 ) :\n                return var11\n        var10 = ( var10 * var2 ) % var4\n    return - 1"}
{"old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = var6 ( lambda : 0 )\n    for var7 in range ( var3 ) :\n        var5 [ var2 [ var7 ] ] += 1\n    for var8 , values in var5.items ( ) :\n        if values > 2 * var4 :\n            return False\n    return True"}
{"old_id": "DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var3 <= var2 - var4 + 1 ) :\n        return var3 + var4 - 1\n    var3 = var3 - ( var2 - var4 + 1 )\n    if ( var3 % var2 == 0 ) :\n        return var2\n    else :\n        return var3 % var2"}
{"old_id": "DIVIDE_LARGE_NUMBER_REPRESENTED_STRING", "code": "def var1 ( var2 , var3 ) :\n    var4 = \"\"\n    var5 = 0\n    var6 = ord ( var2 [ var5 ] ) - ord ( '0' )\n    while ( var6 < var3 ) :\n        var6 = ( var6 * 10 + ord ( var2 [ var5 + 1 ] ) - ord ( '0' ) )\n        var5 += 1\n    while ( ( len ( var2 ) ) > var5 ) :\n        var4 += chr ( math.var7 ( var6 // var3 ) + ord ( '0' ) )\n        var6 = ( ( var6 % var3 ) * 10 + ord ( var2 [ var5 + 1 ] ) - ord ( '0' ) )\n        var5 += 1\n    var4 += chr ( math.var7 ( var6 // var3 ) + ord ( '0' ) )\n    if ( len ( var4 ) == 0 ) :\n        return \"0\"\n    return var4"}
{"old_id": "DIVISIBILITY_9_USING_BITWISE_OPERATORS", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 or var2 == 9 ) :\n        return True\n    if ( var2 < 9 ) :\n        return False\n    return var1 ( ( int ) ( var2 >> 3 ) - ( int ) ( var2 & 7 ) )"}
{"old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER", "code": "def var1 ( var2 ) :\n    if ( len ( var2 ) >= 3 ) :\n        var3 = int ( var2 [ len ( var2 ) - 1 ] )\n        if ( var3 % 2 != 0 ) :\n            return False\n        var4 = int ( var2 [ len ( var2 ) - 2 ] )\n        sum = 0\n        for var5 in range ( 0 , len ( var2 ) ) :\n            sum += int ( var2 [ var5 ] )\n        return ( sum % 3 == 0 and ( var4 * 10 + var3 ) % 4 == 0 )\n    else :\n        var6 = int ( var2 )\n        return ( var6 % 12 == 0 )"}
{"old_id": "DIVISIBILITY_BY_7", "code": "def var1 ( var2 ) :\n    if var2 < 0 :\n        return var1 ( - var2 )\n    if ( var2 == 0 or var2 == 7 ) :\n        return True\n    if ( var2 < 10 ) :\n        return False\n    return var1 ( var2 // 10 - 2 * ( var2 - var2 // 10 * 10 ) )"}
{"old_id": "DOUBLE_FACTORIAL_1", "code": "def var1 ( var2 ) :\n    var3 = 1\n    for var4 in range ( var2 , - 1 , - 2 ) :\n        if ( var4 == 0 or var4 == 1 ) :\n            return var3\n        else :\n            var3 *= var4\n    return var3;"}
{"old_id": "DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var4 <= 0 ) :\n        return 0\n    return max ( var2 [ var4 - 1 ] + var1 ( var2 , var3 , ( var4 - 2 ) ) , var3 [ var4 - 1 ] + var1 ( var2 , var3 , ( var4 - 1 ) ) )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if var5 == 0 or var2 == 0 :\n        return 0\n    if ( var3 [ var5 - 1 ] > var2 ) :\n        return var1 ( var2 , var3 , var4 , var5 - 1 )\n    else :\n        return max ( var4 [ var5 - 1 ] + var1 ( var2 - var3 [ var5 - 1 ] , var3 , var4 , var5 - 1 ) , var1 ( var2 , var3 , var4 , var5 - 1 ) )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var3 + 1 ) ] for var5 in range ( var2 + 1 ) ]\n    for var6 in range ( 1 , var2 + 1 ) :\n        var4 [ var6 ] [ 1 ] = 1\n        var4 [ var6 ] [ 0 ] = 0\n    for var7 in range ( 1 , var3 + 1 ) :\n        var4 [ 1 ] [ var7 ] = var7\n    for var6 in range ( 2 , var2 + 1 ) :\n        for var7 in range ( 2 , var3 + 1 ) :\n            var4 [ var6 ] [ var7 ] = var8\n            for var5 in range ( 1 , var7 + 1 ) :\n                var9 = 1 + max ( var4 [ var6 - 1 ] [ var5 - 1 ] , var4 [ var6 ] [ var7 - var5 ] )\n                if var9 < var4 [ var6 ] [ var7 ] :\n                    var4 [ var6 ] [ var7 ] = var9\n    return var4 [ var2 ] [ var3 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    var4 = [ [ 0 for var5 in range ( var3 ) ] for var5 in range ( var3 ) ]\n    for var6 in range ( var3 ) :\n        var4 [ var6 ] [ var6 ] = 1\n    for var7 in range ( 2 , var3 + 1 ) :\n        for var6 in range ( var3 - var7 + 1 ) :\n            var8 = var6 + var7 - 1\n            if var2 [ var6 ] == var2 [ var8 ] and var7 == 2 :\n                var4 [ var6 ] [ var8 ] = 2\n            elif var2 [ var6 ] == var2 [ var8 ] :\n                var4 [ var6 ] [ var8 ] = var4 [ var6 + 1 ] [ var8 - 1 ] + 2\n            else :\n                var4 [ var6 ] [ var8 ] = max ( var4 [ var6 ] [ var8 - 1 ] , var4 [ var6 + 1 ] [ var8 ] ) ;\n    return var4 [ 0 ] [ var3 - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE", "code": "def var1 ( var2 , var3 ) :\n    max = 0\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    for var6 in range ( var3 ) :\n        var4 [ var6 ] = var2 [ var6 ]\n    for var6 in range ( 1 , var3 ) :\n        for var7 in range ( var6 ) :\n            if ( var2 [ var6 ] > var2 [ var7 ] and var4 [ var6 ] < var4 [ var7 ] + var2 [ var6 ] ) :\n                var4 [ var6 ] = var4 [ var7 ] + var2 [ var6 ]\n    for var6 in range ( var3 ) :\n        if max < var4 [ var6 ] :\n            max = var4 [ var6 ]\n    return max"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 1 for var5 in range ( var3 + 1 ) ]\n    for var5 in range ( 1 , var3 ) :\n        for var6 in range ( 0 , var5 ) :\n            if ( ( var2 [ var5 ] > var2 [ var6 ] ) and ( var4 [ var5 ] < var4 [ var6 ] + 1 ) ) :\n                var4 [ var5 ] = var4 [ var6 ] + 1\n    var7 = [ 1 for var5 in range ( var3 + 1 ) ]\n    for var5 in reversed ( range ( var3 - 1 ) ) :\n        for var6 in reversed ( range ( var5 - 1 , var3 ) ) :\n            if ( var2 [ var5 ] > var2 [ var6 ] and var7 [ var5 ] < var7 [ var6 ] + 1 ) :\n                var7 [ var5 ] = var7 [ var6 ] + 1\n    var8 = var4 [ 0 ] + var7 [ 0 ] - 1\n    for var5 in range ( 1 , var3 ) :\n        var8 = max ( ( var4 [ var5 ] + var7 [ var5 ] - 1 ) , var8 )\n    return var8"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = [ [ 0 for var4 in range ( var2 ) ] for var4 in range ( var2 ) ]\n    var5 = [ [ False for var4 in range ( var2 ) ] for var4 in range ( var2 ) ]\n    var6 = 0\n    var7 = 0\n    var8 = 0\n    for var4 in range ( var2 ) :\n        var5 [ var4 ] [ var4 ] = True\n        var3 [ var4 ] [ var4 ] = 0\n    for var8 in range ( 2 , var2 + 1 ) :\n        for var4 in range ( var2 - var8 + 1 ) :\n            var6 = var4 + var8 - 1\n            if var8 == 2 :\n                var5 [ var4 ] [ var6 ] = ( str [ var4 ] == str [ var6 ] )\n            else :\n                var5 [ var4 ] [ var6 ] = ( ( str [ var4 ] == str [ var6 ] ) and var5 [ var4 + 1 ] [ var6 - 1 ] )\n            if var5 [ var4 ] [ var6 ] == True :\n                var3 [ var4 ] [ var6 ] = 0\n            else :\n                var3 [ var4 ] [ var6 ] = 100000000\n                for var7 in range ( var4 , var6 ) :\n                    var3 [ var4 ] [ var6 ] = min ( var3 [ var4 ] [ var6 ] , var3 [ var4 ] [ var7 ] + var3 [ var7 + 1 ] [ var6 ] + 1 )\n    return var3 [ 0 ] [ var2 - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME", "code": "def var1 ( str , var2 , var3 ) :\n    if ( var2 > var3 ) :\n        return sys.var4\n    if ( var2 == var3 ) :\n        return 0\n    if ( var2 == var3 - 1 ) :\n        return 0 if ( str [ var2 ] == str [ var3 ] ) else 1\n    if ( str [ var2 ] == str [ var3 ] ) :\n        return var1 ( str , var2 + 1 , var3 - 1 )\n    else :\n        return ( min ( var1 ( str , var2 , var3 - 1 ) , var1 ( str , var2 + 1 , var3 ) ) + 1 )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1", "code": "def var1 ( var2 ) :\n    if ( var2 == 2 or var2 == 3 ) :\n        return ( var2 - 1 )\n    var3 = 1\n    while ( var2 > 4 ) :\n        var2 -= 3\n        var3 *= 3\n    return ( var2 * var3 )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ [ 0 for var6 in range ( var4 + 1 ) ] for var6 in range ( var4 + 1 ) ]\n    var7 = [ [ 0 for var6 in range ( var4 + 1 ) ] for var6 in range ( var4 + 1 ) ]\n    for var6 in range ( var4 ) :\n        if var2 [ var6 ] == 'F' :\n            var5 [ var6 ] [ var6 ] = 1\n        else :\n            var5 [ var6 ] [ var6 ] = 0\n        if var2 [ var6 ] == 'T' :\n            var7 [ var6 ] [ var6 ] = 1\n        else :\n            var7 [ var6 ] [ var6 ] = 0\n    for var8 in range ( 1 , var4 ) :\n        var6 = 0\n        for var9 in range ( var8 , var4 ) :\n            var7 [ var6 ] [ var9 ] = var5 [ var6 ] [ var9 ] = 0\n            for var10 in range ( var8 ) :\n                var11 = var6 + var10\n                var12 = var7 [ var6 ] [ var11 ] + var5 [ var6 ] [ var11 ]\n                var13 = var7 [ var11 + 1 ] [ var9 ] + var5 [ var11 + 1 ] [ var9 ]\n                if var3 [ var11 ] == '&' :\n                    var7 [ var6 ] [ var9 ] += var7 [ var6 ] [ var11 ] * var7 [ var11 + 1 ] [ var9 ]\n                    var5 [ var6 ] [ var9 ] += ( var12 * var13 - var7 [ var6 ] [ var11 ] * var7 [ var11 + 1 ] [ var9 ] )\n                if var3 [ var11 ] == '|' :\n                    var5 [ var6 ] [ var9 ] += var5 [ var6 ] [ var11 ] * var5 [ var11 + 1 ] [ var9 ]\n                    var7 [ var6 ] [ var9 ] += ( var12 * var13 - var5 [ var6 ] [ var11 ] * var5 [ var11 + 1 ] [ var9 ] )\n                if var3 [ var11 ] == '^' :\n                    var7 [ var6 ] [ var9 ] += ( var5 [ var6 ] [ var11 ] * var7 [ var11 + 1 ] [ var9 ] + var7 [ var6 ] [ var11 ] * var5 [ var11 + 1 ] [ var9 ] )\n                    var5 [ var6 ] [ var9 ] += ( var7 [ var6 ] [ var11 ] * var7 [ var11 + 1 ] [ var9 ] + var5 [ var6 ] [ var11 ] * var5 [ var11 + 1 ] [ var9 ] )\n            var6 += 1\n    return var7 [ 0 ] [ var4 - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1", "code": "def var1 ( var2 , var3) :\n    var1 = [ 1 ] * var3\n    for var4 in range ( 1 , var3 ) :\n        for var5 in range ( 0 , var4 ) :\n            if var2 [ var4 ] > var2 [ var5 ] and var1 [ var4 ] < var1 [ var5 ] + 1 :\n                var1 [ var4 ] = var1 [ var5 ] + 1\n    var6 = 0\n    for var4 in range ( var3 ) :\n        var6 = max ( var6 , var1 [ var4 ] )\n    return var6"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var3 == var4 :\n        return 0\n    var5 = sys.var6\n    for var7 in range ( var3 , var4 ) :\n        count = ( var1 ( var2 , var3 , var7 ) + var1 ( var2 , var7 + 1 , var4 ) + var2 [ var3 - 1 ] * var2 [ var7 ] * var2 [ var4 ] )\n        if count < var5 :\n            var5 = count\n    return var5"}
{"old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1", "code": "def var1 ( set , var2 , sum ) :\n    var3 = ( [ [ False for var4 in range ( sum + 1 ) ] for var4 in range ( var2 + 1 ) ] )\n    for var4 in range ( var2 + 1 ) :\n        var3 [ var4 ] [ 0 ] = True\n    for var4 in range ( 1 , sum + 1 ) :\n        var3 [ 0 ] [ var4 ] = False\n    for var4 in range ( 1 , var2 + 1 ) :\n        for var5 in range ( 1 , sum + 1 ) :\n            if var5 < set [ var4 - 1 ] :\n                var3 [ var4 ] [ var5 ] = var3 [ var4 - 1 ] [ var5 ]\n            if var5 >= set [ var4 - 1 ] :\n                var3 [ var4 ] [ var5 ] = ( var3 [ var4 - 1 ] [ var5 ] or var3 [ var4 - 1 ] [ var5 - set [ var4 - 1 ] ] )\n    return var3 [ var2 ] [ sum ]"}
{"old_id": "EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_IS_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    while ( var5 <= var3 - 1 ) :\n        if ( var2 [ var5 ] == var4 ) :\n            return var5\n        var5 += abs ( var2 [ var5 ] - var4 )\n    return - 1"}
{"old_id": "EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10", "code": "def var1 ( var2 ) :\n    return ( var2 % 15 == 0 )"}
{"old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    count = 0\n    var2 = var2[:var3]\n    var2.sort ( )\n    for var4 in range ( 0 , var3 - 1 ) :\n        if ( var2 [ var4 ] != var2 [ var4 + 1 ] and var2 [ var4 ] != var2 [ var4 + 1 ] - 1 ) :\n            count += var2 [ var4 + 1 ] - var2 [ var4 ] - 1\n    return count"}
{"old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = dict ( )\n    count , var5 , var6 = 0 , - 10 ** 9 , 10 ** 9\n    for var7 in range ( var3 ) :\n        var4 [ var2 [ var7 ] ] = 1\n        if ( var2 [ var7 ] < var6 ) :\n            var6 = var2 [ var7 ]\n        if ( var2 [ var7 ] > var5 ) :\n            var5 = var2 [ var7 ]\n    for var7 in range ( var6 , var5 + 1 ) :\n        if var7 not in var4.keys ( ) :\n            count += 1\n    return count"}
{"old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY", "code": "def var1 ( var2 , var3) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        var4 = 0\n        var5 = 0\n        for var7 in range ( var6 ) :\n            var4 += var2 [ var7 ]\n        for var7 in range ( var6 + 1 , var3 ) :\n            var5 += var2 [ var7 ]\n        if var4 == var5 :\n            return var6\n    return - 1"}
{"old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1", "code": "def var1 ( var2 ,var3) :\n    var4 = sum ( var2 )\n    var5 = 0\n    for var6 , var7 in enumerate ( var2 ) :\n        var4 -= var7\n        if var5 == var4 :\n            return var6\n        var5 += var7\n    return - 1"}
{"old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS", "code": "def var1 ( var2 , var3 ) :\n    var2 = var2 % var3\n    for var4 in range ( 2 , var3 , 1 ) :\n        if ( ( var4 * var4 ) % var3 == var2 ) :\n            return True\n    return False"}
{"old_id": "EVEN_FIBONACCI_NUMBERS_SUM", "code": "def var1 ( var2 ) :\n    if ( var2 < 2 ) :\n        return 0\n    var3 = 0\n    var4 = 2\n    var5 = var3 + var4\n    while ( var4 <= var2 ) :\n        var6 = 4 * var4 + var3\n        if ( var6 > var2 ) :\n            break\n        var3 = var4\n        var4 = var6\n        var5 = var5 + var4\n    return var5"}
{"old_id": "FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    while ( var3 > 0 ) :\n        if ( var3 & 1 ) :\n            var4 = var4 + var2\n        var2 = var2 << 1\n        var3 = var3 >> 1\n    return var4"}
{"old_id": "FIBONACCI_MODULO_P", "code": "def var1 ( var2 ) :\n    var3 = 1\n    var4 = 1\n    var5 = 2\n    next = 1\n    while ( next ) :\n        next = ( var3 + var4 ) % var2\n        var3 = var4\n        var4 = next\n        var5 = var5 + 1\n    return var5"}
{"old_id": "FINDING_POWER_PRIME_NUMBER_P_N", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = var3\n    while ( var5 <= var2 ) :\n        var4 += int(var2 / var5)\n        var5 = var5 * var3\n    return var4"}
{"old_id": "FINDING_POWER_PRIME_NUMBER_P_N_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = var3\n    while ( var5 <= var2 ) :\n        var4 += var2 / var5\n        var5 = var5 * var3\n    return int ( var4 )"}
{"old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 ] * ( 2 * var3 + 1 )\n    for var5 in range ( var3 ) :\n        var4 [ var5 ] = var2 [ var5 ]\n    for var5 in range ( var3 ) :\n        var4 [ var3 + var5 ] = var2 [ var5 ]\n    var6 = 0\n    for var5 in range ( 1 , var3 ) :\n        var7 = 0\n        var8 = 0\n        for var9 in range ( var5 , var5 + var3 ) :\n            if var4 [ var9 ] != var2 [ var8 ] :\n                var7 += 1\n                var8 = var8 + 1\n        if var7 == var3 :\n            return var3\n        var6 = max ( var6 , var7 )\n    return var6"}
{"old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE", "code": "def var1 ( var2 , var3 , sum ) :\n    for var4 in range ( 0 , var3 - 2 ) :\n        for var5 in range ( var4 + 1 , var3 - 1 ) :\n            for var6 in range ( var5 + 1 , var3 ) :\n                if var2 [ var4 ] + var2 [ var5 ] + var2 [ var6 ] == sum :\n                    print ( \"Triplet is\" , var2 [ var4 ] , \", \" , var2 [ var5 ] , \", \" , var2 [ var6 ] )\n                    return True\n    return False"}
{"old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT", "code": "def var1 ( string ) :\n    var2 = [ ]\n    for var3 in string :\n        if var3 == ')' :\n            var4 = var2.pop ( )\n            var5 = 0\n            while var4 != '(' :\n                var5 += 1\n                var4 = var2.pop ( )\n            if var5 < 1 :\n                return True\n        else :\n            var2.append ( var3 )\n    return False"}
{"old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X", "code": "def var1 ( var2 ) :\n    var3 = 1\n    var4 = 1\n    for var3 in range ( 1 , var2 ) :\n        var4 = var4 * var3\n        if ( var4 % var2 == 0 ) :\n            break\n    return var3"}
{"old_id": "FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN", "code": "def var1 ( var2 , var3 ) :\n    var4 = ( var2 + var3 ) / 2\n    var5 = math.var6 ( var2 * var3 )\n    var7 = ( var5 * var5 ) / var4\n    return var7"}
{"old_id": "FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME", "code": "def var1 ( var2 ) :\n    if ( var2 <= 1 ) :\n        return var2\n    var3 = 0\n    var4 = 1\n    var5 = 1\n    var6 = 1\n    while ( var5 < var2 ) :\n        var5 = var3 + var4\n        var6 = var6 + 1\n        var3 = var4\n        var4 = var5\n    return var6"}
{"old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    for var5 in range ( 0 , var4 ) :\n        if ( var2 [ var5 ] != var3 [ var5 ] ) :\n            return var5\n    return var4"}
{"old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D", "code": "def var1 ( var2 , var3 ) :\n    var4 = False\n    var2 = var2[:var3]\n    var2.sort ( )\n    for var5 in range ( var3 - 1 , - 1 , - 1 ) :\n        for var6 in range ( 0 , var3 ) :\n            if ( var5 == var6 ) :\n                continue\n            for var7 in range ( var6 + 1 , var3 ) :\n                if ( var5 == var7 ) :\n                    continue\n                for var8 in range ( var7 + 1 , var3 ) :\n                    if ( var5 == var8 ) :\n                        continue\n                    if ( var2 [ var5 ] == var2 [ var6 ] + var2 [ var7 ] + var2 [ var8 ] ) :\n                        var4 = True\n                        return var2 [ var5 ]\n    if ( var4 == False ) :\n        return - 1"}
{"old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = dict ( )\n    for var5 in range ( var3 - 1 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            var4 [ var2 [ var5 ] + var2 [ var6 ] ] = ( var5 , var6 )\n    var7 = - 10 ** 9\n    for var5 in range ( var3 - 1 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            var8 = abs ( var2 [ var5 ] - var2 [ var6 ] )\n            if var8 in var4.keys ( ) :\n                var9 = var4 [ var8 ]\n                if ( var9 [ 0 ] != var5 and var9 [ 0 ] != var6 and var9 [ 1 ] != var5 and var9 [ 1 ] != var6 ) :\n                    var7 = max ( var7 , max ( var2 [ var5 ] , var2 [ var6 ] ) )\n    return var7"}
{"old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = - 1\n    while var2 % 2 == 0 :\n        var3 = 2\n        var2 >>= 1\n    for var4 in range ( 3 , int ( math.var5 ( var2 ) ) + 1 , 2 ) :\n        while var2 % var4 == 0 :\n            var3 = var4\n            var2 = var2 / var4\n    if var2 > 2 :\n        var3 = var2\n    return int ( var3 )"}
{"old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B", "code": "def var1 ( var2 , var3 ) :\n    var4 = 1\n    if ( var2 == var3 ) :\n        return 1\n    elif ( ( var3 - var2 ) >= 5 ) :\n        return 0\n    else :\n        for var5 in range ( var2 + 1 , var3 + 1 ) :\n            var4 = ( var4 * ( var5 % 10 ) ) % 10\n        return var4 % 10"}
{"old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var4 > var3 :\n        return - 1\n    var5 = [ 0 ] * var3\n    var5 [ 0 ] = var2 [ 0 ]\n    for var6 in range ( 1 , var3 ) :\n        var5 [ var6 ] = var5 [ var6 - 1 ] + var2 [ var6 ]\n    var7 = var5 [ var4 - 1 ]\n    var8 = var4 - 1\n    for var6 in range ( var4 , var3 ) :\n        var9 = var5 [ var6 ] - var5 [ var6 - var4 ]\n        if var9 > var7 :\n            var7 = var9\n            var8 = var6\n    return var8 - var4 + 1"}
{"old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var4 > var3 ) :\n        return - 1\n    sum = var2 [ 0 ]\n    for var5 in range ( 1 , var4 ) :\n        sum += var2 [ var5 ]\n    var6 = sum\n    var7 = var4 - 1\n    for var5 in range ( var4 , var3 ) :\n        sum = sum + var2 [ var5 ] - var2 [ var5 - var4 ]\n        if ( sum > var6 ) :\n            var6 = sum\n            var7 = var5\n    return var7 - var4 + 1"}
{"old_id": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ [ 0 for var7 in range ( var4 + 1 ) ] for var8 in range ( var5 + 1 ) ]\n    for var7 in range ( 1 , var5 + 1 , 1 ) :\n        for var8 in range ( var7 , var4 + 1 , 1 ) :\n            var6 [ var7 ] [ var8 ] = max ( ( var6 [ var7 - 1 ] [ var8 - 1 ] + ( var2 [ var8 - 1 ] * var3 [ var7 - 1 ] ) ) , var6 [ var7 ] [ var8 - 1 ] )\n    return var6 [ var5 ] [ var4 ]"}
{"old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    if var3 < 3 :\n        return - 1\n    var4 = - ( sys.var5 - 1 )\n    for var6 in range ( 0 , var3 - 2 ) :\n        for var7 in range ( var6 + 1 , var3 - 1 ) :\n            for var8 in range ( var7 + 1 , var3 ) :\n                var4 = max ( var4 , var2 [ var6 ] * var2 [ var7 ] * var2 [ var8 ] )\n    return var4"}
{"old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    if var3 < 3 :\n        return - 1\n    var2.sort ( )\n    return max ( var2 [ 0 ] * var2 [ 1 ] * var2 [ var3 - 1 ] , var2 [ var3 - 1 ] * var2 [ var3 - 2 ] * var2 [ var3 - 3 ] )"}
{"old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 , var7 ) :\n    var8 , var9 , var10 = 0 , 0 , 0\n    for var11 in range ( var5 ) :\n        var8 += var2 [ var11 ]\n    for var11 in range ( var6 ) :\n        var9 += var3 [ var11 ]\n    for var11 in range ( var7 ) :\n        var10 += var4 [ var11 ]\n    var12 , var13 , var14 = 0 , 0 , 0\n    var15 = 0\n    while ( 1 ) :\n        if ( var12 == var5 or var13 == var6 or var14 == var7 ) :\n            return 0\n        if ( var8 == var9 and var9 == var10 ) :\n            return var8\n        if ( var8 >= var9 and var8 >= var10 ) :\n            var8 -= var2 [ var12 ]\n            var12 = var12 + 1\n        elif ( var9 >= var10 and var9 >= var10 ) :\n            var9 -= var3 [ var13 ]\n            var13 = var13 + 1\n        elif ( var10 >= var9 and var10 >= var8 ) :\n            var10 -= var4 [ var14 ]\n            var14 = var14 + 1"}
{"old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = sys.var6\n    var7 = - sys.var6 - 1\n    for var8 in range ( var3 ) :\n        if var2 [ var8 ] [ 0 ] < var5 :\n            var5 = var2 [ var8 ] [ 0 ]\n        if var2 [ var8 ] [ var4 - 1 ] > var7 :\n            var7 = var2 [ var8 ] [ var4 - 1 ]\n    var9 = ( var3 * var4 + 1 ) // 2\n    while ( var5 < var7 ) :\n        var10 = var5 + ( var7 - var5 ) // 2\n        var11 = [ 0 ]\n        for var8 in range ( var3 ) :\n            var12 = var13 ( var2 [ var8 ] , var10 )\n            var11 [ 0 ] = var11 [ 0 ] + var12\n        if var11 [ 0 ] < var9 :\n            var5 = var10 + 1\n        else :\n            var7 = var10\n    print ( \"Median is\" , var5 )\n    return var5"}
{"old_id": "FIND_MINIMUM_DIFFERENCE_PAIR", "code": "def var1 ( var2 , var3 ) :\n    var4 = 10 ** 20\n    for var5 in range ( var3 - 1 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            if abs ( var2 [ var5 ] - var2 [ var6 ] ) < var4 :\n                var4 = abs ( var2 [ var5 ] - var2 [ var6 ] )\n    return var4"}
{"old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1", "code": "def var1 ( var2 , var3 ) :\n    var2 = var2[:var3]\n    var2 = sorted ( var2 )\n    var4 = 10 ** 20\n    for var5 in range ( var3 - 1 ) :\n        if var2 [ var5 + 1 ] - var2 [ var5 ] < var4 :\n            var4 = var2 [ var5 + 1 ] - var2 [ var5 ]\n    return var4"}
{"old_id": "FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var4 < var3 :\n        return var2 [ 0 ]\n    if var4 == var3 :\n        return var2 [ var3 ]\n    var5 = int ( ( var3 + var4 ) / 2 )\n    if var5 < var4 and var2 [ var5 + 1 ] < var2 [ var5 ] :\n        return var2 [ var5 + 1 ]\n    if var5 > var3 and var2 [ var5 ] < var2 [ var5 - 1 ] :\n        return var2 [ var5 ]\n    if var2 [ var4 ] > var2 [ var5 ] :\n        return var1 ( var2 , var3 , var5 - 1 )\n    return var1 ( var2 , var5 + 1 , var4 )"}
{"old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE", "code": "def var1 ( var2 ) :\n    count = 0\n    var3 = 1\n    while var2 % 2 == 0 :\n        count += 1\n        var2 //= 2\n    if count % 2 is not 0 :\n        var3 *= 2\n    for var4 in range ( 3 , ( int ) ( math.var5 ( var2 ) ) + 1 , 2 ) :\n        count = 0\n        while var2 % var4 == 0 :\n            count += 1\n            var2 //= var4\n        if count % 2 is not 0 :\n            var3 *= var4\n    if var2 > 2 :\n        var3 *= var2\n    return var3"}
{"old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ 0 for var6 in range ( var4 + 1 ) ]\n    var5 [ 0 ] = 0\n    for var6 in range ( 1 , var4 + 1 ) :\n        var5 [ var6 ] = sys.var7\n    for var6 in range ( 1 , var4 + 1 ) :\n        for var8 in range ( var3 ) :\n            if ( var2 [ var8 ] <= var6 ) :\n                var9 = var5 [ var6 - var2 [ var8 ] ]\n                if ( var9 != sys.var7 and var9 + 1 < var5 [ var6 ] ) :\n                    var5 [ var6 ] = var9 + 1\n    return var5 [ var4 ]"}
{"old_id": "FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ 0 ] * var5\n    for var7 in range ( 0 , var5 ) :\n        var6 [ var7 ] = var3 [ var7 ] * var3 [ var7 ] + var4 [ var7 ] * var4 [ var7 ]\n    var6.sort ( )\n    return var6 [ var2 - 1 ]"}
{"old_id": "FIND_MIRROR_IMAGE_POINT_2_D_PLANE", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    var7 = - 2 * ( var2 * var5 + var3 * var6 + var4 ) / ( var2 * var2 + var3 * var3 )\n    var8 = var7 * var2 + var5\n    var9 = var7 * var3 + var6\n    return ( var8 , var9 )"}
{"old_id": "FIND_NUMBER_ENDLESS_POINTS", "code": "def var1 ( input , var2 ) :\n    var3 = var4.var5 ( ( var2 , var2 ) )\n    var6 = var4.var5 ( ( var2 , var2 ) )\n    for var7 in range ( var2 ) :\n        var8 = 1\n        for var9 in range ( var2 - 1 , - 1 , - 1 ) :\n            if ( input [ var9 ] [ var7 ] == 0 ) :\n                var8 = 0\n            var6 [ var9 ] [ var7 ] = var8\n    for var9 in range ( var2 ) :\n        var8 = 1\n        for var7 in range ( var2 - 1 , - 1 , - 1 ) :\n            if ( input [ var9 ] [ var7 ] == 0 ) :\n                var8 = 0\n            var3 [ var9 ] [ var7 ] = var8\n    var10 = 0\n    for var9 in range ( var2 ) :\n        for var7 in range ( 1 , var2 ) :\n            if ( var3 [ var9 ] [ var7 ] and var6 [ var9 ] [ var7 ] ) :\n                var10 += 1\n    return var10"}
{"old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( var2 , var3 + 1 ) :\n        var6 = 1 ;\n        while var6 * var6 <= var5 :\n            if var6 * var6 == var5 :\n                var4 = var4 + 1\n            var6 = var6 + 1\n        var5 = var5 + 1\n    return var4"}
{"old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1", "code": "def count ( var1 , var2 ) :\n    var3 = len ( var1 )\n    var4 = len ( var2 )\n    var5 = [ [ 0 ] * ( var4 + 1 ) for var6 in range ( var3 + 1 ) ]\n    for var6 in range ( var4 + 1 ) :\n        var5 [ 0 ] [ var6 ] = 0\n    for var6 in range ( var3 + 1 ) :\n        var5 [ var6 ] [ 0 ] = 1\n    for var6 in range ( 1 , var3 + 1 ) :\n        for var7 in range ( 1 , var4 + 1 ) :\n            if var1 [ var6 - 1 ] == var2 [ var7 - 1 ] :\n                var5 [ var6 ] [ var7 ] = var5 [ var6 - 1 ] [ var7 - 1 ] + var5 [ var6 - 1 ] [ var7 ]\n            else :\n                var5 [ var6 ] [ var7 ] = var5 [ var6 - 1 ] [ var7 ]\n    return var5 [ var3 ] [ var4 ]"}
{"old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    for var6 in range ( var5 ) :\n        for var7 in range ( var4 ) :\n            var2 [ var6 ] [ var7 ] -= var3 [ var6 ] [ var7 ]\n    for var6 in range ( 1 , var5 ) :\n        for var7 in range ( 1 , var5 ) :\n            if ( var2 [ var6 ] [ var7 ] - var2 [ var6 ] [ 0 ] - var2 [ 0 ] [ var7 ] + var2 [ 0 ] [ 0 ] != 0 ) :\n                return - 1\n    var8 = 0\n    for var6 in range ( var5 ) :\n        var8 += abs ( var2 [ var6 ] [ 0 ] )\n    for var7 in range ( var4 ) :\n        var8 += abs ( var2 [ 0 ] [ var7 ] - var2 [ 0 ] [ 0 ] )\n    return ( var8 )"}
{"old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * ( var2 + 1 )\n    var3 [ 0 ] = 0\n    var3 [ 1 ] = 1\n    for var4 in range ( 2 , var2 + 1 ) :\n        if ( int ( var4 % 2 ) == 0 ) :\n            var3 [ var4 ] = var3 [ int ( var4 / 2 ) ]\n        else :\n            var3 [ var4 ] = ( var3 [ int ( ( var4 - 1 ) / 2 ) ] + var3 [ int ( ( var4 + 1 ) / 2 ) ] )\n    return var3 [ var2 ]"}
{"old_id": "FIND_ONE_EXTRA_CHARACTER_STRING_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( 0 , len ( var2 ) ) :\n        var4 = var4 ^ ( ord ) ( var2 [ var5 ] )\n    for var5 in range ( 0 , len ( var3 ) ) :\n        var4 = var4 ^ ( ord ) ( var3 [ var5 ] )\n    return ( ( chr ) ( var4 ) ) ;"}
{"old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS", "code": "def var1 ( var2 , var3 , sum ) :\n    for var4 in range ( var3 ) :\n        var2 [ var4 ].sort ( )\n    for var4 in range ( var3 - 1 ) :\n        for var5 in range ( var4 + 1 , var3 ) :\n            var6 = 0\n            var7 = var3 - 1\n            while ( var6 < var3 and var7 >= 0 ) :\n                if ( ( var2 [ var4 ] [ var6 ] + var2 [ var5 ] [ var7 ] ) == sum ) :\n                    print ( \"(\" , var2 [ var4 ] [ var6 ] , \", \" , var2 [ var5 ] [ var7 ] , \"), \" , var8 = \" \" )\n                    var6 += 1\n                    var7 -= 1\n                else :\n                    if ( ( var2 [ var4 ] [ var6 ] + var2 [ var5 ] [ var7 ] ) < sum ) :\n                        var6 += 1\n                    else :\n                        var7 -= 1"}
{"old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    while var5 < var3 :\n        var4 = max ( var4 , var2 [ var5 ] )\n        var5 = var5 + 1\n    var6 = [ 0 ] * ( var4 + 1 )\n    var5 = 0\n    while var5 < var3 :\n        var7 = 1\n        while var7 <= math.var8 ( var2 [ var5 ] ) :\n            if ( var2 [ var5 ] % var7 == 0 ) :\n                var6 [ var7 ] = var6 [ var7 ] + 1\n                if ( var7 != var2 [ var5 ] / var7 ) :\n                    var6 [ var2 [ var5 ] / var7 ] = var6 [ var2 [ var5 ] / var7 ] + 1\n            var7 = var7 + 1\n        var5 = var5 + 1\n    var5 = var4\n    while var5 >= 1 :\n        if ( var6 [ var5 ] > 1 ) :\n            return var5\n        var5 = var5 - 1\n    return 1"}
{"old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( 0 , var3 ) :\n        var4 = max ( var4 , var2 [ var5 ] )\n    count = [ 0 ] * ( var4 + 1 )\n    for var5 in range ( 0 , var3 ) :\n        count [ var2 [ var5 ] ] += 1\n    var6 = 0\n    for var5 in range ( var4 , 0 , - 1 ) :\n        var7 = var5\n        while ( var7 <= var4 ) :\n            if ( count [ var7 ] > 0 ) :\n                var6 += count [ var7 ]\n            var7 += var5\n            if ( var6 == 2 ) :\n                return var5\n        var6 = 0\n    return 1\n"}
{"old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 1\n    for var5 in range ( var3 ) :\n        for var6 in range ( var3 - 1 ) :\n            for var7 in range ( var6 + 1 , var3 ) :\n                if ( var2 [ var6 ] * var2 [ var7 ] == var2 [ var5 ] ) :\n                    var4 = max ( var4 , var2 [ var5 ] )\n    return var4"}
{"old_id": "FIND_PATTERNS_101_GIVEN_STRING", "code": "def var1 ( str ) :\n    var2 = str [ 0 ]\n    var3 = 1\n    var4 = 0\n    while ( var3 < len ( str ) ) :\n        if ( str [ var3 ] == '0' and var2 == '1' ) :\n            while ( str [ var3 ] == '0' ) :\n                var3 += 1\n                if ( str [ var3 ] == '1' ) :\n                    var4 += 1\n        var2 = str [ var3 ]\n        var3 += 1\n    return var4"}
{"old_id": "FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = len ( var2 )\n    var5 = 0\n    while ( var3 < var4 ) :\n        if ( var2 [ var3 ] == '4' ) :\n            var5 = var5 * 2 + 1\n        if ( var2 [ var3 ] == '7' ) :\n            var5 = var5 * 2 + 2\n        var3 = var3 + 1\n    return var5"}
{"old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 == 0 ) :\n        return False\n    var4 = len ( var2 [ 0 ] )\n    for var5 in range ( var3 ) :\n        for var6 in range ( var4 ) :\n            if ( var2 [ var5 ] [ var6 ] == 1 ) :\n                for var7 in range ( var5 + 1 , var3 ) :\n                    for var8 in range ( var6 + 1 , var4 ) :\n                        if ( var2 [ var5 ] [ var8 ] == 1 and var2 [ var7 ] [ var6 ] == 1 and var2 [ var7 ] [ var8 ] == 1 ) :\n                            return True\n    return False"}
{"old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 == 0 ) :\n        return False\n    var4 = len ( var2 [ 0 ] )\n    var5 = { }\n    for var6 in range ( var3 ) :\n        for var7 in range ( var4 - 1 ) :\n            for var8 in range ( var7 + 1 , var4 ) :\n                if ( var2 [ var6 ] [ var7 ] == 1 and var2 [ var6 ] [ var8 ] == 1 ) :\n                    if ( var7 in var5 and var8 in var5 [ var7 ] ) :\n                        return True\n                    if ( var8 in var5 and var7 in var5 [ var8 ] ) :\n                        return True\n                    if var7 not in var5 :\n                        var5 [ var7 ] = set ( )\n                    if var8 not in var5 :\n                        var5 [ var8 ] = set ( )\n                    var5 [ var7 ].add ( var8 )\n                    var5 [ var8 ].add ( var7 )\n    return False"}
{"old_id": "FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var3 > var4 :\n        return - 1\n    var5 = int ( ( var3 + var4 ) / 2 )\n    if ( var2 [ var5 ] != var5 + 1 ) :\n        if ( var5 > 0 and var2 [ var5 ] == var2 [ var5 - 1 ] ) :\n            return var5\n        return var1 ( var2 , var3 , var5 - 1 )\n    return var1 ( var2 , var5 + 1 , var4 )"}
{"old_id": "FIND_REPETITIVE_ELEMENT_1_N_1", "code": "def var1 ( var2 , var3 ) :\n    return sum ( var2 [ : var3 ] ) - ( ( ( var3 - 1 ) * var3 ) // 2 )"}
{"old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = set ( )\n    for var5 in range ( var3 ) :\n        if var2 [ var5 ] in var4 :\n            return var2 [ var5 ]\n        var4.add ( var2 [ var5 ] )\n    var6 - 1"}
{"old_id": "FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var4 < var3 ) :\n        return 0\n    if ( var4 == var3 ) :\n        return var3\n    var5 = var3 + ( var4 - var3 ) / 2\n    var5 = int ( var5 )\n    if ( var5 < var4 and var2 [ var5 + 1 ] < var2 [ var5 ] ) :\n        return ( var5 + 1 )\n    if ( var5 > var3 and var2 [ var5 ] < var2 [ var5 - 1 ] ) :\n        return var5\n    if ( var2 [ var4 ] > var2 [ var5 ] ) :\n        return var1 ( var2 , var3 , var5 - 1 )\n    return var1 ( var2 , var5 + 1 , var4 )"}
{"old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM", "code": "def var1 ( var2 , var3 , sum ) :\n    for var4 in range ( var3 ) :\n        var5 = var2 [ var4 ]\n        var6 = var4 + 1\n        while var6 <= var3 :\n            if var5 == sum :\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( var4 , var6 - 1 ) )\n                return 1\n            if var5 > sum or var6 == var3 :\n                break\n            var5 = var5 + var2 [ var6 ]\n            var6 += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM_1", "code": "def var1 ( var2 , var3 , sum ) :\n    var4 = var2 [ 0 ]\n    var5 = 0\n    var6 = 1\n    while var6 <= var3 :\n        while var4 > sum and var5 < var6 - 1 :\n            var4 = var4 - var2 [ var5 ]\n            var5 += 1\n        if var4 == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( var5 , var6 - 1 ) )\n            return 1\n        if var6 < var3 :\n            var4 = var4 + var2 [ var6 ]\n        var6 += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"old_id": "FIND_SUM_EVEN_FACTORS_NUMBER", "code": "def var1 ( var2 ) :\n    if ( var2 % 2 != 0 ) :\n        return 0\n    var3 = 1\n    for var4 in range ( 2 , ( int ) ( math.var5 ( var2 ) ) + 1 ) :\n        count = 0\n        var6 = 1\n        var7 = 1\n        while ( var2 % var4 == 0 ) :\n            count = count + 1\n            var2 = var2 // var4\n            if ( var4 == 2 and count == 1 ) :\n                var6 = 0\n            var7 = var7 * var4\n            var6 = var6 + var7\n        var3 = var3 * var6\n    if ( var2 >= 2 ) :\n        var3 = var3 * ( 1 + var2 )\n    return var3"}
{"old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 for var4 in range ( var2 + 1 ) ] for var5 in range ( var2 + 1 ) ]\n    for var6 in range ( 0 , var2 + 1 ) :\n        for var7 in range ( 0 , min ( var6 , var2 ) + 1 ) :\n            if var7 == 0 or var7 == var6 :\n                var3 [ var6 ] [ var7 ] = 1\n            else :\n                var3 [ var6 ] [ var7 ] = var3 [ var6 - 1 ] [ var7 - 1 ] + var3 [ var6 - 1 ] [ var7 ]\n    sum = 0 ;\n    for var6 in range ( 0 , var2 + 1 ) :\n        if var6 % 2 == 0 :\n            sum = sum + var3 [ var2 ] [ var6 ]\n    return sum"}
{"old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1", "code": "def var1 ( var2 ) :\n    return ( 1 << ( var2 - 1 ) )"}
{"old_id": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( 1 , var2 + 1 ) :\n        var4 += ( var5 % var3 )\n    return var4"}
{"old_id": "FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1", "code": "def var1 ( var2 ) :\n    var3 = math.pow ( 2 , var2 - 1 )\n    var4 = 0\n    var4 = ( ( var3 * ( var3 + 1 ) ) / 2 )\n    sum = var4 * var2\n    return sum"}
{"old_id": "FIND_SUM_ODD_FACTORS_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = 1\n    while var2 % 2 == 0 :\n        var2 = var2 // 2\n    for var4 in range ( 3 , int ( math.var5 ( var2 ) + 1 ) ) :\n        count = 0\n        var6 = 1\n        var7 = 1\n        while var2 % var4 == 0 :\n            count += 1\n            var2 = var2 // var4\n            var7 *= var4\n            var6 += var7\n        var3 *= var6\n    if var2 >= 2 :\n        var3 *= ( 1 + var2 )\n    return var3"}
{"old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = dict ( )\n    for var6 in range ( var3 ) :\n        var7 = 0\n        for var8 in range ( var6 , var3 ) :\n            var7 += var2 [ var8 ]\n            var5 [ var7 ] = var5.get ( var7 , 0 ) + 1\n    for var9 in var5 :\n        if var5 [ var9 ] == 1 :\n            var4 += var9\n    return var4"}
{"old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ None ] * var3\n    var4 [ 0 ] = float ( '-inf' )\n    for var5 in range ( 1 , var3 ) :\n        var4 [ var5 ] = max ( var4 [ var5 - 1 ] , var2 [ var5 - 1 ] )\n    var6 = float ( 'inf' )\n    for var5 in range ( var3 - 1 , - 1 , - 1 ) :\n        if var4 [ var5 ] < var2 [ var5 ] and var6 > var2 [ var5 ] :\n            return var5\n        var6 = min ( var6 , var2 [ var5 ] )\n    return - 1"}
{"old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        var5 = var5 | ( var4 & var2 [ var6 ] )\n        var4 = var4 ^ var2 [ var6 ]\n        var7 = ~ ( var4 & var5 )\n        var4 &= var7\n        var5 &= var7\n    return var4"}
{"old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2", "code": "def var1 ( var2 , var3 ) :\n    return ( 3 * sum ( set ( var2 ) ) - sum ( var2 ) ) / 2"}
{"old_id": "FIND_THE_FIRST_MISSING_NUMBER", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var3 > var4 ) :\n        return var4 + 1\n    if ( var3 != var2 [ var3 ] ) :\n        return var3\n    var5 = int ( ( var3 + var4 ) / 2 )\n    if ( var2 [ var5 ] == var5 ) :\n        return var1 ( var2 , var5 + 1 , var4 )\n    return var1 ( var2 , var3 , var5 )"}
{"old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( var3 ) :\n        var6 = 0\n        for var7 in range ( var5 , var3 ) :\n            var6 += var2 [ var7 ]\n            if var6 == 0 :\n                var4 = max ( var4 , var7 - var5 + 1 )\n    return var4\n"}
{"old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING", "code": "def var1 ( var2 , var3 , var4 ) :\n    max = var2[var3]\n    for var5 in range(var3, var4 + 1):\n        if var2[var5] > max:\n            max = var2[var5]\n    return max"}
{"old_id": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 2147483648\n    for var5 in range ( var3 ) :\n        var6 = 0\n        for var7 in range ( var5 , var3 ) :\n            var6 = var6 ^ var2 [ var7 ]\n            var4 = max ( var4 , var6 )\n    return var4"}
{"old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = 2147483647\n    for var7 in range ( var3 ) :\n        for var8 in range ( var7 + 1 , var3 ) :\n            if ( var4 == var2 [ var7 ] and var5 == var2 [ var8 ] or var5 == var2 [ var7 ] and var4 == var2 [ var8 ] ) and var6 > abs ( var7 - var8 ) :\n                var6 = abs ( var7 - var8 )\n    return var6\n\n"}
{"old_id": "FIND_THE_MISSING_NUMBER_1", "code": "def var1 ( var2 , var3 ) :\n    var4 , var5 = 0 , 1\n    for var4 in range ( 2 , var3 + 2 ) :\n        var5 += var4\n        var5 -= var2 [ var4 - 2 ]\n    return var5"}
{"old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( 0 , var3 ) :\n        count = 0\n        for var5 in range ( 0 , var3 ) :\n            if var2 [ var4 ] == var2 [ var5 ] :\n                count += 1\n        if ( count % 2 != 0 ) :\n            return var2 [ var4 ]\n    return - 1"}
{"old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2", "code": "def var1 ( var2 , var3) :\n    var4 = 0\n    for var5 in range ( 0, var3 ) :\n        var4 = var4 ^ var2 [ var5 ]\n    return var4\n"}
{"old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 , var7 , sum ) :\n    var8 = set ( )\n    for var9 in range ( var5 ) :\n        var8.add ( var2 [ var9 ] )\n    for var9 in range ( var6 ) :\n        for var10 in range ( var7 ) :\n            if sum - var3 [ var9 ] - var4 [ var10 ] in var8 :\n                return True\n    return False"}
{"old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = False\n    for var5 in range ( var3 - 1 ) :\n        var6 = set ( )\n        for var7 in range ( var5 + 1 , var3 ) :\n            var8 = - ( var2 [ var5 ] + var2 [ var7 ] )\n            if var8 in var6 :\n                print ( var8 , var2 [ var5 ] , var2 [ var7 ] )\n                var4 = True\n            else :\n                var6.add ( var2 [ var7 ] )\n    if var4 == False :\n        print ( \"No Triplet Found\" )"}
{"old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2", "code": "def var1 ( var2 , var3 ) :\n    var4 = False\n    var2.sort ( )\n    for var5 in range ( 0 , var3 - 1 ) :\n        var6 = var5 + 1\n        var7 = var3 - 1\n        var8 = var2 [ var5 ]\n        while ( var6 < var7 ) :\n            if ( var8 + var2 [ var6 ] + var2 [ var7 ] == 0 ) :\n                print ( var8 , var2 [ var6 ] , var2 [ var7 ] )\n                var6 += 1\n                var7 -= 1\n                var4 = True\n            elif ( var8 + var2 [ var6 ] + var2 [ var7 ] < 0 ) :\n                var6 += 1\n            else :\n                var7 -= 1\n    if ( var4 == False ) :\n        print ( \" No Triplet Found\" )"}
{"old_id": "FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X", "code": "def var1 ( var2 , var3 ) :\n    return ( var2 % pow ( 2 , var3 ) )"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 ) :\n        return False\n    while ( var2 != 1 ) :\n        if ( var2 % 4 != 0 ) :\n            return False\n        var2 = var2 // 4\n    return True"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1", "code": "def var1 ( var2 ) :\n    count = 0\n    if ( var2 and ( not ( var2 & ( var2 - 1 ) ) ) ) :\n        while ( var2 > 1 ) :\n            var2 >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False\n    return False"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2", "code": "def var1 ( var2 ) :\n    return ( var2 != 0 and ( ( var2 & ( var2 - 1 ) ) == 0 ) and not ( var2 & 0xAAAAAAAA ) )"}
{"old_id": "FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT", "code": "def var1 ( var2 ) :\n    return 1162261467 % var2 == 0"}
{"old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = { }\n    for var6 in range ( 0 , var3 ) :\n        if ( var2 [ var6 ] in var5.keys ( ) ) :\n            var5 [ var2 [ var6 ] ] += 1\n        else :\n            var5 [ var2 [ var6 ] ] = 1\n        var6 += 1\n    for var6 in range ( 0 , var3 ) :\n        if ( var5 [ var2 [ var6 ] ] == var4 ) :\n            return var2 [ var6 ]\n        var6 += 1\n    return - 1"}
{"old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE", "code": "def var1 ( str ) :\n    for var2 in range ( 0 , len ( str ) ) :\n        if ( str [ var2 ].istitle ( ) ) :\n            return str [ var2 ]\n    return 0"}
{"old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1", "code": "def var1 ( str , var2 ) :\n    if ( str [ var2 ] == '\\0' ) :\n        return 0\n    if ( str [ var2 ].isupper ( ) ) :\n        return str [ var2 ]\n    return var1 ( str , var2 + 1 )"}
{"old_id": "FLOOR_IN_A_SORTED_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var4 >= var2 [ var3 - 1 ]: return var3 - 1\n    if var4 < var2 [ 0 ]: return - 1\n    for var5 in range ( 1, var3 ):\n        if var2 [ var5 ] > var4: return var5 - 1\n    return - 1"}
{"old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 >= 9 ) :\n        return \"-1\"\n    var4 = [ None ] * ( var3 + 1 )\n    count = 1\n    for var5 in range ( var3 + 1 ) :\n        if ( var5 == var3 or var2 [ var5 ] == 'I' ) :\n            for var6 in range ( var5 - 1 , - 2 , - 1 ) :\n                var4 [ var6 + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( var6 >= 0 and var2 [ var6 ] == 'I' ) :\n                    break\n    return var4"}
{"old_id": "FREQUENT_ELEMENT_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = dict ( )\n    for var5 in range ( var3 ) :\n        if var2 [ var5 ] in var4.keys ( ) :\n            var4 [ var2 [ var5 ] ] += 1\n        else :\n            var4 [ var2 [ var5 ] ] = 1\n    var6 = 0\n    var7 = - 1\n    for var5 in var4 :\n        if ( var6 < var4 [ var5 ] ) :\n            var7 = var5\n            var6 = var4 [ var5 ]\n    return var7"}
{"old_id": "FRIENDS_PAIRING_PROBLEM", "code": "def var1 ( var2 ) :\n    var3 = [ 0 for var4 in range ( var2 + 1 ) ]\n    for var4 in range ( var2 + 1 ) :\n        if ( var4 <= 2 ) :\n            var3 [ var4 ] = var4\n        else :\n            var3 [ var4 ] = var3 [ var4 - 1 ] + ( var4 - 1 ) * var3 [ var4 - 2 ]\n    return var3 [ var2 ]"}
{"old_id": "FRIENDS_PAIRING_PROBLEM_2", "code": "def var1 ( var2 ) :\n    var3 , var4 , var5 = 1 , 2 , 0\n    if ( var2 <= 2 ) :\n        return var2\n    for var6 in range ( 3 , var2 + 1 ) :\n        var5 = var4 + ( var6 - 1 ) * var3\n        var3 = var4\n        var4 = var5\n    return var5"}
{"old_id": "GCD_ELEMENTS_GIVEN_RANGE", "code": "def var1 ( var2 , var3 ) :\n    return var2 if ( var2 == var3 ) else 1"}
{"old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 >= 9 ) :\n        return \"-1\"\n    var4 = [ None ] * ( var3 + 1 )\n    count = 1\n    for var5 in range ( var3 + 1 ) :\n        if ( var5 == var3 or var2 [ var5 ] == 'I' ) :\n            for var6 in range ( var5 - 1 , - 2 , - 1 ) :\n                var4 [ var6 + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( var6 >= 0 and var2 [ var6 ] == 'I' ) :\n                    break\n    return \"\".join(str(var5) for var5 in var4)"}
{"old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = [ 0 ] * var2\n    for var4 in range ( 0 , var2 ) :\n        for var5 in range ( var4 , var2 ) :\n            for var6 in range ( var5 , var2 ) :\n                if ( var3 [ var4 ] % 8 == 0 ) :\n                    return True\n                elif ( ( var3 [ var4 ] * 10 + var3 [ var5 ] ) % 8 == 0 and var4 != var5 ) :\n                    return True\n                elif ( ( var3 [ var4 ] * 100 + var3 [ var5 ] * 10 + var3 [ var6 ] ) % 8 == 0 and var4 != var5 and var5 != var6 and var4 != var6 ) :\n                    return True\n    return False"}
{"old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = [ [ 0 for var4 in range ( 10 ) ] for var4 in range ( var2 + 1 ) ]\n    var5 = [ 0 for var4 in range ( var2 + 1 ) ]\n    for var4 in range ( 1 , var2 + 1 ) :\n        var5 [ var4 ] = int ( str [ var4 - 1 ] )\n    for var4 in range ( 1 , var2 + 1 ) :\n        var3 [ var4 ] [ var5 [ var4 ] % 8 ] = 1\n        for var6 in range ( 8 ) :\n            if ( var3 [ var4 - 1 ] [ var6 ] > var3 [ var4 ] [ ( var6 * 10 + var5 [ var4 ] ) % 8 ] ) :\n                var3 [ var4 ] [ ( var6 * 10 + var5 [ var4 ] ) % 8 ] = var3 [ var4 - 1 ] [ var6 ]\n            if ( var3 [ var4 - 1 ] [ var6 ] > var3 [ var4 ] [ var6 ] ) :\n                var3 [ var4 ] [ var6 ] = var3 [ var4 - 1 ] [ var6 ]\n    for var4 in range ( 1 , var2 + 1 ) :\n        if ( var3 [ var4 ] [ 0 ] == 1 ) :\n            return True\n    return False"}
{"old_id": "GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    while var2 :\n        var2 /= var3\n        var4 += var2\n    return var4"}
{"old_id": "GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if var4 == 0 : return True\n    if var5 == 0 : return False\n    if var2 [ var4 - 1 ] == var3 [ var5 - 1 ] :\n        return var1 ( var2 , var3 , var4 - 1 , var5 - 1 )\n    return var1 ( var2 , var3 , var4 , var5 - 1 )"}
{"old_id": "GNOME_SORT_A_STUPID_ONE", "code": "def var1 ( var2 , var3 ) :\n    index = 0\n    while index < var3 :\n        if index == 0 :\n            index = index + 1\n        if var2 [ index ] >= var2 [ index - 1 ] :\n            index = index + 1\n        else :\n            var2 [ index ] , var2 [ index - 1 ] = var2 [ index - 1 ] , var2 [ index ]\n            index = index - 1\n    return var2"}
{"old_id": "HARDY_RAMANUJAN_THEOREM", "code": "def var1 ( var2 ) :\n    count = 0\n    if ( var2 % 2 == 0 ) :\n        count = count + 1\n        while ( var2 % 2 == 0 ) :\n            var2 = int ( var2 / 2 )\n    var3 = 3\n    while ( var3 <= int ( math.var4 ( var2 ) ) ) :\n        if ( var2 % var3 == 0 ) :\n            count = count + 1\n            while ( var2 % var3 == 0 ) :\n                var2 = int ( var2 / var3 )\n        var3 = var3 + 2\n    if ( var2 > 2 ) :\n        count = count + 1\n    return count"}
{"old_id": "HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES", "code": "def var1 ( var2 ) :\n    return math.var3 ( math.var4 ( var2 + 1 ) ) - 1"}
{"old_id": "HEXAGONAL_NUMBER", "code": "def var1 ( var2 ) :\n    return var2 * ( 2 * var2 - 1 )"}
{"old_id": "HIGHWAY_BILLBOARD_PROBLEM", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    var7 = [ 0 ] * ( var2 + 1 )\n    var8 = 0\n    for var9 in range ( 1 , var2 + 1 ) :\n        if ( var8 < var5 ) :\n            if ( var3 [ var8 ] != var9 ) :\n                var7 [ var9 ] = var7 [ var9 - 1 ]\n            else :\n                if ( var9 <= var6 ) :\n                    var7 [ var9 ] = max ( var7 [ var9 - 1 ] , var4 [ var8 ] )\n                else :\n                    var7 [ var9 ] = max ( var7 [ var9 - var6 - 1 ] + var4 [ var8 ] , var7 [ var9 - 1 ] )\n                var8 += 1\n        else :\n            var7 [ var9 ] = var7 [ var9 - 1 ]\n    return var7 [ var2 ]"}
{"old_id": "HORNERS_METHOD_POLYNOMIAL_EVALUATION", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = var2 [ 0 ]\n    for var6 in range ( 1 , var3 ) :\n        var5 = var5 * var4 + var2 [ var6 ]\n    return var5"}
{"old_id": "HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT", "code": "def var1 ( var2 ) :\n    sum = 0\n    while ( var2 != 0 ) :\n        sum = sum + int ( var2 % 10 )\n        var2 = int ( var2 / 10 )\n    return sum"}
{"old_id": "HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var2 = var2 % var4\n    while ( var3 > 0 ) :\n        if ( var3 % 2 == 1 ) :\n            var5 = ( var5 + var2 ) % var4\n        var2 = ( var2 * 2 ) % var4\n        var3 //= 2\n    return var5 % var4"}
{"old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING", "code": "def var1 ( var2 , var3 ) :\n    var4 = len ( var2 )\n    for var5 in range ( 0 , var4 ) :\n        if ( var3 == var2 [ var5 ] ) :\n            return var5\n    return - 1"}
{"old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var3 > int ( ( var4 - 2 ) / 2 ) :\n        return True\n    if ( var2 [ var3 ] >= var2 [ 2 * var3 + 1 ] and var2 [ var3 ] >= var2 [ 2 * var3 + 2 ] and var1 ( var2 , 2 * var3 + 1 , var4 ) and var1 ( var2 , 2 * var3 + 2 , var4 ) ) :\n        return True\n    return False"}
{"old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( int ( ( var3 - 2 ) / 2 ) + 1 ) :\n        if var2 [ 2 * var4 + 1 ] > var2 [ var4 ] :\n            return False\n        if ( 2 * var4 + 2 < var3 and var2 [ 2 * var4 + 2 ] > var2 [ var4 ] ) :\n            return False\n    return True"}
{"old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS", "code": "def var1 ( var2 , var3 , var4 ) :\n    for var5 in range ( 0 , var3 ) :\n        if ( var4 == var2 [ var5 ] ) :\n            return var5\n    return - 1"}
{"old_id": "HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 <= 0 ) :\n        return var2\n    return ( var2 & ~ ( 1 << ( var3 - 1 ) ) )"}
{"old_id": "HYPERCUBE_GRAPH", "code": "def var1 ( var2 ) :\n    if var2 == 1 :\n        return 2\n    return 2 * var1 ( var2 - 1 )"}
{"old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    hash = dict ( )\n    var4 = 0\n    for var5 in var2 :\n        if ( var5 < 0 ) :\n            if abs ( var5 ) not in hash.keys ( ) :\n                hash [ abs ( var5 ) ] = - 1\n            else :\n                hash [ abs ( var5 ) ] -= 1\n        else :\n            hash [ var5 ] = hash.get ( var5 , 0 ) + 1\n    for var5 in var2 :\n        if var5 in hash.keys ( ) and hash [ var5 ] > 0 :\n            return var5\n    return - 1"}
{"old_id": "K_TH_DIGIT_RAISED_POWER_B", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = var2 ** var3\n    count = 0\n    while ( var5 > 0 and count < var4 ) :\n        var6 = var5 % 10\n        count = count + 1\n        if ( count == var4 ) :\n            return var6\n        var5 = var5 // 10\n    return 0\n"}
{"old_id": "K_TH_ELEMENT_TWO_SORTED_ARRAYS", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    var7 = [ 0 ] * ( var4 + var5 )\n    var8 = 0\n    var9 = 0\n    var10 = 0\n    while ( var8 < var4 and var9 < var5 ) :\n        if ( var2 [ var8 ] < var3 [ var9 ] ) :\n            var7 [ var10 ] = var2 [ var8 ]\n            var8 += 1\n        else :\n            var7 [ var10 ] = var3 [ var9 ]\n            var9 += 1\n        var10 += 1\n    while ( var8 < var4 ) :\n        var7 [ var10 ] = var2 [ var8 ]\n        var10 += 1\n        var8 += 1\n    while ( var9 < var5 ) :\n        var7 [ var10 ] = var3 [ var9 ]\n        var10 += 1\n        var9 += 1\n    return var7 [ var6 - 1 ]"}
{"old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( var2 [ 0 ] )\n    for var5 in range ( 2 , var3 + 1 ) :\n        sum.append ( sum [ var5 - 1 ] + var2 [ var5 - 1 ] )\n    var6 = [ ]\n    heapq.var7 ( var6 )\n    for var5 in range ( 1 , var3 + 1 ) :\n        for var8 in range ( var5 , var3 + 1 ) :\n            var9 = sum [ var8 ] - sum [ var5 - 1 ]\n            if len ( var6 ) < var4 :\n                heapq.var10 ( var6 , var9 )\n            else :\n                if var6 [ 0 ] < var9 :\n                    heapq.var11 ( var6 )\n                    heapq.var10 ( var6 , var9 )\n    return var6 [ 0 ]"}
{"old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE", "code": "def find ( var1 , var2 , var3 , var4 , var5 ) :\n    var6 = set ( )\n    for var7 in range ( var5 ) :\n        var6.add ( var2 [ var7 ] )\n    var8 = 0\n    for var7 in range ( var4 ) :\n        if var1 [ var7 ] not in var6 :\n            var8 += 1\n        if var8 == var3 :\n            return var1 [ var7 ]\n    return - 1"}
{"old_id": "K_TH_PRIME_FACTOR_GIVEN_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    while ( var2 % 2 == 0 ) :\n        var3 = var3 - 1\n        var2 = var2 // 2\n        if ( var3 == 0 ) :\n            return 2\n    var4 = 3\n    while var4 <= math.var5 ( var2 ) :\n        while ( var2 % var4 == 0 ) :\n            if ( var3 == 1 ) :\n                return var4\n            var3 = var3 - 1\n            var2 = var2 // var4\n        var4 = var4 + 2\n    if ( var2 > 2 and var3 == 1 ) :\n        return var2\n    return - 1"}
{"old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S", "code": "def var1 ( var2 , var3 ) :\n    sum = 0\n    var4 = - 1\n    for var5 in range ( 0 , var3 - 1 ) :\n        sum = - 1 if ( var2 [ var5 ] == 0 ) else 1\n        for var6 in range ( var5 + 1 , var3 ) :\n            sum = sum + ( - 1 ) if ( var2 [ var6 ] == 0 ) else sum + 1\n            if ( sum == 0 and var4 < var6 - var5 + 1 ) :\n                var4 = var6 - var5 + 1\n                var7 = var5\n    if ( var4 == - 1 ) :\n        print ( \"No such subarray\" )\n    else :\n        print ( var7 , \"to\" , var7 + var4 - 1 )\n    return var4"}
{"old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = { }\n    var5 = 0\n    var6 = 0\n    var7 = - 1\n    for var8 in range ( 0 , var3 ) :\n        if ( var2 [ var8 ] == 0 ) :\n            var2 [ var8 ] = - 1\n        else :\n            var2 [ var8 ] = 1\n    for var8 in range ( 0 , var3 ) :\n        var5 = var5 + var2 [ var8 ]\n        if ( var5 == 0 ) :\n            var6 = var8 + 1\n            var7 = var8\n        if ( var5 + var3 ) in var4 :\n            if var6 < var8 - var4 [ var5 + var3 ] :\n                var6 = var8 - var4 [ var5 + var3 ]\n                var7 = var8\n        else :\n            var4[var5 + var3] = var8\n    for var8 in range ( 0 , var3 ) :\n        if ( var2 [ var8 ] == - 1 ) :\n            var2 [ var8 ] = 0\n        else :\n            var2 [ var8 ] = 1\n    print ( var7 - var6 + 1 , var9 = \" \" )\n    print ( \"to\" , var9 = \" \" )\n    print ( var7 )\n    return var6"}
{"old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = max ( var2 )\n    for var6 in range ( 2 , var5 + 1 ) :\n        count = 0\n        for var7 in range ( var3 ) :\n            if ( var2 [ var7 ] % var6 == 0 ) :\n                count += 1\n        var4 = max ( var4 , count )\n    return var4"}
{"old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = len ( var3 )\n    var6 = len ( var4 )\n    var7 = [ [ 0 for var8 in range ( var6 + 1 ) ] for var9 in range ( var5 + 1 ) ]\n    var10 = [ [ 0 for var8 in range ( var6 + 1 ) ] for var9 in range ( var5 + 1 ) ]\n    for var11 in range ( 1 , var5 + 1 ) :\n        for var12 in range ( 1 , var6 + 1 ) :\n            var7 [ var11 ] [ var12 ] = max ( var7 [ var11 - 1 ] [ var12 ] , var7 [ var11 ] [ var12 - 1 ] )\n            if ( var3 [ var11 - 1 ] == var4 [ var12 - 1 ] ) :\n                var10 [ var11 ] [ var12 ] = var10 [ var11 - 1 ] [ var12 - 1 ] + 1\n            if ( var10 [ var11 ] [ var12 ] >= var2 ) :\n                for var13 in range ( var2 , var10 [ var11 ] [ var12 ] + 1 ) :\n                    var7 [ var11 ] [ var12 ] = max ( var7 [ var11 ] [ var12 ] , var7 [ var11 - var13 ] [ var12 - var13 ] + var13 )\n    return var7 [ var5 ] [ var6 ]"}
{"old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var3 ) ] for var5 in range ( var3 ) ]\n    for var5 in range ( var3 - 1 ) :\n        if ( var2 [ var5 ] == '(' and var2 [ var5 + 1 ] == ')' ) :\n            var4 [ var5 ] [ var5 + 1 ] = 2\n    for var6 in range ( 2 , var3 ) :\n        var5 = - 1\n        for var7 in range ( var6 , var3 ) :\n            var5 += 1\n            if ( var2 [ var5 ] == '(' and var2 [ var7 ] == ')' ) :\n                var4 [ var5 ] [ var7 ] = 2 + var4 [ var5 + 1 ] [ var7 - 1 ]\n            for var8 in range ( var5 , var7 ) :\n                var4 [ var5 ] [ var7 ] = max ( var4 [ var5 ] [ var7 ] , var4 [ var5 ] [ var8 ] + var4 [ var8 + 1 ] [ var7 ] )\n    return var4 [ 0 ] [ var3 - 1 ]"}
{"old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if ( var2 [ var6 ] == '(' ) :\n            var4 += 1\n        else :\n            if ( var4 == 0 ) :\n                var5 += 1\n            else :\n                var4 -= 1\n    return ( var3 - ( var4 + var5 ) )"}
{"old_id": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED", "code": "def var1 ( var2 ) :\n    var3 = [ ]\n    var3.append ( [ '@' , - 1 ] )\n    var4 = 0\n    for var5 in range ( len ( var2 ) ) :\n        var3.append ( [ var2 [ var5 ] , var5 ] )\n        while ( len ( var3 ) >= 3 and var3 [ len ( var3 ) - 3 ] [ 0 ] == '1' and var3 [ len ( var3 ) - 2 ] [ 0 ] == '0' and var3 [ len ( var3 ) - 1 ] [ 0 ] == '0' ) :\n            var3.pop ( )\n            var3.pop ( )\n            var3.pop ( )\n        var6 = var3 [ - 1 ]\n        var4 = max ( var4 , var5 - var6 [ 1 ] )\n    return var4"}
{"old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY", "code": "def var1 ( set , var2 ) :\n    if ( var2 <= 2 ) :\n        return var2\n    var3 = [ [ 0 for var4 in range ( var2 ) ] for var5 in range ( var2 ) ]\n    var6 = 2\n    for var7 in range ( var2 ) :\n        var3 [ var7 ] [ var2 - 1 ] = 2\n    for var8 in range ( var2 - 2 , 0 , - 1 ) :\n        var7 = var8 - 1\n        var9 = var8 + 1\n        while ( var7 >= 0 and var9 <= var2 - 1 ) :\n            if ( set [ var7 ] + set [ var9 ] < 2 * set [ var8 ] ) :\n                var9 += 1\n            elif ( set [ var7 ] + set [ var9 ] > 2 * set [ var8 ] ) :\n                var3 [ var7 ] [ var8 ] = 2\n                var7 -= 1\n            else :\n                var3 [ var7 ] [ var8 ] = var3 [ var8 ] [ var9 ] + 1\n                var6 = max ( var6 , var3 [ var7 ] [ var8 ] )\n                var7 -= 1\n                var9 += 1\n        while ( var7 >= 0 ) :\n            var3 [ var7 ] [ var8 ] = 2\n            var7 -= 1\n    return var6"}
{"old_id": "LEONARDO_NUMBER_1", "code": "def var1 ( var2 ) :\n    var3 = [ ]\n    var3.append ( 1 )\n    var3.append ( 1 )\n    for var4 in range ( 2 , var2 + 1 ) :\n        var3.append ( var3 [ var4 - 1 ] + var3 [ var4 - 2 ] + 1 )\n    return var3 [ var2 ]"}
{"old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = 0\n    var7 = 0\n    var8 = 0\n    var9 = 0\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    for var10 in string :\n        var7 = 0\n        for var11 in range ( var6 , var4 ) :\n            if var2 [ var11 ] == var10 :\n                var7 += 1\n        if var7 >= var5 :\n            for var11 in range ( var6 , var4 ) :\n                if var2 [ var11 ] == var10 :\n                    var3 [ var9 ] = var10\n                    var8 = var11\n                    var9 += 1\n            var6 = var8\n    var3[var9] = '\\0';"}
{"old_id": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    var4 = [ 0 ] * var3\n    var5 = var2 + var2\n    for var6 in range ( var3 ) :\n        var4 [ var6 ] = var5 [ var6 : var3 + var6 ]\n    var4.sort ( )\n    return var4 [ 0 ]"}
{"old_id": "LEXICOGRAPHICALLY_NEXT_STRING", "code": "def var1 ( var2 ) :\n    if ( var2 == \" \" ) :\n        return \"a\"\n    var3 = len ( var2 ) - 1\n    while ( var2 [ var3 ] == 'z' and var3 >= 0 ) :\n        var3 -= 1\n    if ( var3 == - 1 ) :\n        var2 = var2 + 'a'\n    else :\n        var2 = var2 [ 0 : var3 ] + chr ( ord ( var2 [ var3 ] ) + 1 ) + var2 [ var3 + 1 : ]\n    return var2"}
{"old_id": "LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C", "code": "def var1 ( str ) :\n    var2 = len ( str ) - 1\n    var3 = var2\n    while ( var3 > 0 and str [ var3 - 1 ] <= str [ var3 ] ) :\n        var3 -= 1\n    if ( var3 <= 0 ) :\n        return False\n    var4 = var3 - 1\n    while ( var4 + 1 <= var2 and str [ var4 + 1 ] <= str [ var3 - 1 ] ) :\n        var4 += 1\n    str = list ( str )\n    var5 = str [ var3 - 1 ]\n    str [ var3 - 1 ] = str [ var4 ]\n    str [ var4 ] = var5\n    str = ''.join ( str )\n    str [ : : - 1 ]\n    return True"}
{"old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS", "code": "def var1 ( var2 , var3 , var4 ) :\n    for var5 in range ( var3 - 1 ) :\n        var6 = var5\n        for var7 in range ( var5 + 1 , var3 ) :\n            if ( var7 - var5 > var4 ) :\n                break\n            if ( var2 [ var7 ] < var2 [ var6 ] ) :\n                var6 = var7\n        for var7 in range ( var6 , var5 , - 1 ) :\n            var2 [ var7 ] , var2 [ var7 - 1 ] = var2 [ var7 - 1 ] , var2 [ var7 ]\n        var4 -= var6 - var5"}
{"old_id": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    var4 = ( var3 * ( var3 + 1 ) ) // 2\n    var5 = [ 0 ] * var4\n    index = 0\n    for var6 in range ( var3 ) :\n        for var7 in range ( 1 , var3 - var6 + 1 ) :\n            var5 [ index ] = var2 [ var6 : var6 + var7 ]\n            index += 1\n    var5.sort ( )\n    var8 = \"\"\n    for var6 in range ( var4 ) :\n        var8 += var5 [ var6 ]\n    return var8"}
{"old_id": "LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 , var7 ) :\n    if var7 < 0 :\n        return - ( 10 ** 7 )\n    if var4 < 0 or var6 < 0 :\n        return 0\n    var8 = var2 [ var4 ] [ var6 ] [ var7 ]\n    if var8 != - 1 :\n        return var8\n    var8 = max ( var1 ( var2 , var3 , var4 - 1 , var5 , var6 , var7 ) , var1 ( var2 , var3 , var4 , var5 , var6 - 1 , var7 ) )\n    if var3 [ var4 - 1 ] == var5 [ var6 - 1 ] :\n        var8 = max ( var8 , 1 + var1 ( var2 , var3 , var4 - 1 , var5 , var6 - 1 , var7 ) )\n    var8 = max ( var8 , var1 ( var2 , var3 , var4 - 1 , var5 , var6 - 1 , var7 - 1 ) )\n    return var8"}
{"old_id": "LONGEST_COMMON_SUBSTRING", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ [ 0 for var7 in range ( var5 + 1 ) ] for var8 in range ( var4 + 1 ) ]\n    var9 = 0\n    for var10 in range ( var4 + 1 ) :\n        for var11 in range ( var5 + 1 ) :\n            if ( var10 == 0 or var11 == 0 ) :\n                var6 [ var10 ] [ var11 ] = 0\n            elif ( var2 [ var10 - 1 ] == var3 [ var11 - 1 ] ) :\n                var6 [ var10 ] [ var11 ] = var6 [ var10 - 1 ] [ var11 - 1 ] + 1\n                var9 = max ( var9 , var6 [ var10 ] [ var11 ] )\n            else :\n                var6 [ var10 ] [ var11 ] = 0\n    return var9"}
{"old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = 0\n    for var4 in range ( 0 , var2 ) :\n        for var5 in range ( var4 + 1 , var2 , 2 ) :\n            var6 = var5 - var4 + 1\n            var7 = 0\n            var8 = 0\n            for var9 in range ( 0 , int ( var6 / 2 ) ) :\n                var7 += ( int ( str [ var4 + var9 ] ) - int ( '0' ) )\n                var8 += ( int ( str [ var4 + var9 + int ( var6 / 2 ) ] ) - int ( '0' ) )\n            if ( var7 == var8 and var3 < var6 ) :\n                var3 = var6\n    return var3"}
{"old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1", "code": "def var1 ( string ) :\n    var2 = len ( string )\n    var3 = 0\n    var4 = [ [ 0 for var5 in range ( var2 ) ] for var6 in range ( var2 ) ]\n    for var7 in range ( 0 , var2 ) :\n        var4 [ var7 ] [ var7 ] = int ( string [ var7 ] )\n    for var8 in range ( 2 , var2 + 1 ) :\n        for var7 in range ( 0 , var2 - var8 + 1 ) :\n            var9 = var7 + var8 - 1\n            var10 = var8 // 2\n            var4 [ var7 ] [ var9 ] = ( var4 [ var7 ] [ var9 - var10 ] + var4 [ var9 - var10 + 1 ] [ var9 ] )\n            if ( var8 % 2 == 0 and var4 [ var7 ] [ var9 - var10 ] == var4 [ ( var9 - var10 + 1 ) ] [ var9 ] and var8 > var3 ) :\n                var3 = var8\n    return var3"}
{"old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = list ( )\n    var5 = 0\n    for var6 in range ( var3 ) :\n        var4.append ( 1 )\n    var6 = 1\n    for var6 in range ( var3 ) :\n        for var7 in range ( var6 ) :\n            if ( var2 [ var6 ] > var2 [ var7 ] and ( var2 [ var6 ] + var2 [ var7 ] ) % 2 != 0 and var4 [ var6 ] < var4 [ var7 ] + 1 ) :\n                var4 [ var6 ] = var4 [ var7 ] + 1\n    for var6 in range ( var3 ) :\n        if var5 < var4 [ var6 ] :\n            var5 = var4 [ var6 ]\n    return var5"}
{"old_id": "LONGEST_INCREASING_SUBSEQUENCE_1", "code": "def var1 ( var2 , var3 ) :\n    var1 = [ 1 ] * var3\n    for var4 in range ( 1 , var3 ) :\n        for var5 in range ( 0 , var4 ) :\n            if var2 [ var4 ] > var2 [ var5 ] and var1 [ var4 ] < var1 [ var5 ] + 1 :\n                var1 [ var4 ] = var1 [ var5 ] + 1\n    var6 = 0\n    for var4 in range ( var3 ) :\n        var6 = max ( var6 , var1 [ var4 ] )\n    return var6"}
{"old_id": "LONGEST_PREFIX_ALSO_SUFFIX_1", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    var4 = [ 0 ] * var3\n    var5 = 0\n    var6 = 1\n    while ( var6 < var3 ) :\n        if ( var2 [ var6 ] == var2 [ var5 ] ) :\n            var5 = var5 + 1\n            var4 [ var6 ] = var5\n            var6 = var6 + 1\n        else :\n            if ( var5 != 0 ) :\n                var5 = var4 [ var5 - 1 ]\n            else :\n                var4 [ var6 ] = 0\n                var6 = var6 + 1\n    var7 = var4 [ var3 - 1 ]\n    if ( var7 > var3 / 2 ) :\n        return var3 // 2\n    else :\n        return var7"}
{"old_id": "LONGEST_REPEATED_SUBSEQUENCE_1", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = [ [ 0 for var4 in range ( var2 + 1 ) ] for var5 in range ( var2 + 1 ) ]\n    for var4 in range ( 1 , var2 + 1 ) :\n        for var5 in range ( 1 , var2 + 1 ) :\n            if ( str [ var4 - 1 ] == str [ var5 - 1 ] and var4 != var5 ) :\n                var3 [ var4 ] [ var5 ] = 1 + var3 [ var4 - 1 ] [ var5 - 1 ]\n            else :\n                var3 [ var4 ] [ var5 ] = max ( var3 [ var4 ] [ var5 - 1 ] , var3 [ var4 - 1 ] [ var5 ] )\n    var6 = ''\n    var4 = var2\n    var5 = var2\n    while ( var4 > 0 and var5 > 0 ) :\n        if ( var3 [ var4 ] [ var5 ] == var3 [ var4 - 1 ] [ var5 - 1 ] + 1 ) :\n            var6 += str [ var4 - 1 ]\n            var4 -= 1\n            var5 -= 1\n        elif ( var3 [ var4 ] [ var5 ] == var3 [ var4 - 1 ] [ var5 ] ) :\n            var4 -= 1\n        else :\n            var5 -= 1\n    var6 = ''.join ( reversed ( var6 ) )\n    return var6"}
{"old_id": "LONGEST_REPEATING_SUBSEQUENCE", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = [ [ 0 ] * ( var2 + 1 ) ] * ( var2 + 1 )\n    for var4 in range ( 1 , var2 + 1 ) :\n        for var5 in range ( 1 , var2 + 1 ) :\n            if ( str [ var4 - 1 ] == str [ var5 - 1 ] and var4 != var5 ) :\n                var3 [ var4 ] [ var5 ] = 1 + var3 [ var4 - 1 ] [ var5 - 1 ]\n            else :\n                var3 [ var4 ] [ var5 ] = max ( var3 [ var4 ] [ var5 - 1 ] , var3 [ var4 - 1 ] [ var5 ] )\n    return var3 [ var2 ] [ var2 ]"}
{"old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S", "code": "def var1 ( var2 , var3 ) :\n    var4 = { }\n    sum = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if var2 [ var6 ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            var5 = var6 + 1\n        elif ( sum not in var4 ) :\n            var4 [ sum ] = var6\n        if ( ( sum - 1 ) in var4 ) :\n            if ( var5 < ( var6 - var4 [ sum - 1 ] ) ) :\n                var5 = var6 - var4 [ sum - 1 ]\n    return var5"}
{"old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = { }\n    var6 = [ 0 for var7 in range ( var3 ) ]\n    max = 0\n    var8 = 0\n    for var7 in range ( var3 ) :\n        var8 += var2 [ var7 ]\n        var6 [ var7 ] = ( ( var8 % var4 ) + var4 ) % var4\n    for var7 in range ( var3 ) :\n        if ( var6 [ var7 ] == 0 ) :\n            max = var7 + 1\n        elif ( var6 [ var7 ] in var5 ) :\n            var5 [ var6 [ var7 ] ] = var7\n        else :\n            if ( max < ( var7 - var5 [ var6 [ var7 ] ] ) ) :\n                max = var7 - var5 [ var6 [ var7 ] ]\n    return max"}
{"old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2", "code": "def var1 ( var2 , var3 ) :\n    var4 = var5 ( lambda : 0 )\n    var6 = 0\n    for var7 in range ( var3 ) :\n        var8 = 0\n        if ( var2 [ var7 - 1 ] in var4 and var8 < var4 [ var2 [ var7 ] - 1 ] ) :\n            var8 = var4 [ var2 [ var7 ] - 1 ]\n        if ( var2 [ var7 ] + 1 in var4 and var8 < var4 [ var2 [ var7 ] + 1 ] ) :\n            var8 = var4 [ var2 [ var7 ] + 1 ]\n        var4 [ var2 [ var7 ] ] = var8 + 1\n        if var6 < var4 [ var2 [ var7 ] ] :\n            var6 = var4 [ var2 [ var7 ] ]\n    return var6"}
{"old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 1 for var5 in range ( var3 ) ]\n    for var5 in range ( var3 ) :\n        for var6 in range ( var5 ) :\n            if ( ( var2 [ var5 ] == var2 [ var6 ] + 1 ) or ( var2 [ var5 ] == var2 [ var6 ] - 1 ) ) :\n                var4 [ var5 ] = max ( var4 [ var5 ] , var4 [ var6 ] + 1 )\n    var7 = 1\n    for var5 in range ( var3 ) :\n        if ( var7 < var4 [ var5 ] ) :\n            var7 = var4 [ var5 ]\n    return var7"}
{"old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT", "code": "def var1(var2):\n    for var3 in range(len(var2)):\n        if 'a' <= var2[var3] <= 'z':\n            var2[var3] = chr(ord(var2[var3]) - ord('a') + ord('A'))\n    return ''.join(var2)"}
{"old_id": "MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS", "code": "def var1 ( str , var2 ) :\n    var3 = list(str)\n    var4 = 0\n    var5 = len ( str ) - 1\n    while ( var4 <= var5 ) :\n        if ( str [ var4 ] != str [ var5 ] ) :\n            var3 [ var4 ] = var3 [ var5 ] = max ( str [ var4 ] , str [ var5 ] )\n            var2 -= 1\n        var4 += 1\n        var5 -= 1\n    if ( var2 < 0 ) :\n        return \"Not possible\"\n    var4 = 0\n    var5 = len ( str ) - 1\n    while ( var4 <= var5 ) :\n        if ( var4 == var5 ) :\n            if ( var2 > 0 ) :\n                var3 [ var4 ] = '9'\n        if ( var3 [ var4 ] < '9' ) :\n            if ( var2 >= 2 and var3 [ var4 ] == str [ var4 ] and var3 [ var5 ] == str [ var5 ] ) :\n                var2 -= 1\n                var3 [ var4 ] = var3 [ var5 ] = '9'\n            elif ( var2 >= 1 and ( var3 [ var4 ] != str [ var4 ] or var3 [ var5 ] != str [ var5 ] ) ) :\n                var2 -= 1\n                var3 [ var4 ] = var3 [ var5 ] = '9'\n        var4 += 1\n        var5 -= 1\n    return \"\".join(var3)"}
{"old_id": "MARKOV_MATRIX", "code": "def var1 ( var2 ) :\n    for var3 in range ( 0 , len ( var2 ) ) :\n        var4 = 0\n        for var5 in range ( 0 , len ( var2 [ var3 ] ) ) :\n            var4 = var4 + var2 [ var3 ] [ var5 ]\n        if ( var4 != 1 ) :\n            return False\n    return True"}
{"old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = - 1\n    var7 = - 1\n    var8 = [ [ 0 for var9 in range ( var5 + 1 ) ] for var10 in range ( var3 ) ]\n    for var6 in range ( var3 ) :\n        for var7 in range ( var5 + 1 ) :\n            if ( var6 == 0 ) :\n                if ( var4 - var2 [ var6 ] == var7 or var4 + var2 [ var6 ] == var7 ) :\n                    var8 [ var6 ] [ var7 ] = 1\n                else :\n                    var8 [ var6 ] [ var7 ] = 0\n            else :\n                if ( var7 - var2 [ var6 ] >= 0 and var7 + var2 [ var6 ] <= var5 ) :\n                    if ( var8 [ var6 - 1 ] [ var7 - var2 [ var6 ] ] == 1 or var8 [ var6 - 1 ] [ var7 + var2 [ var6 ] ] == 1 ) :\n                        var8 [ var6 ] [ var7 ] = 1\n                elif ( var7 - var2 [ var6 ] >= 0 ) :\n                    var8 [ var6 ] [ var7 ] = var8 [ var6 - 1 ] [ var7 - var2 [ var6 ] ]\n                elif ( var7 + var2 [ var6 ] <= var5 ) :\n                    var8 [ var6 ] [ var7 ] = var8 [ var6 - 1 ] [ var7 + var2 [ var6 ] ]\n                else :\n                    var8 [ var6 ] [ var7 ] = 0\n    for var7 in range ( var5 , - 1 , - 1 ) :\n        if ( var8 [ var3 - 1 ] [ var7 ] == 1 ) :\n            return var7\n    return - 1"}
{"old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L", "code": "def var1 ( var2 , var3 ) :\n    if var3 < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return var4\n    var5 , var6 = [ var4 ] * ( var3 + 1 ) , [ var4 ] * var3\n    var7 , var8 = [ var4 ] * ( var3 - 1 ) , [ var4 ] * ( var3 - 2 )\n    for var9 in range ( var3 - 1 , - 1 , - 1 ) :\n        var5 [ var9 ] = max ( var5 [ var9 + 1 ] , var2 [ var9 ] )\n    for var9 in range ( var3 - 2 , - 1 , - 1 ) :\n        var6 [ var9 ] = max ( var6 [ var9 + 1 ] , var5 [ var9 + 1 ] - var2 [ var9 ] )\n    for var9 in range ( var3 - 3 , - 1 , - 1 ) :\n        var7 [ var9 ] = max ( var7 [ var9 + 1 ] , var6 [ var9 + 1 ] + var2 [ var9 ] )\n    for var9 in range ( var3 - 4 , - 1 , - 1 ) :\n        var8 [ var9 ] = max ( var8 [ var9 + 1 ] , var7 [ var9 + 1 ] - var2 [ var9 ] )\n    return var8 [ 0 ]"}
{"old_id": "MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1", "code": "def var1 ( var2 ) :\n    var3 = var2 // 3 \n    var2 -= var3\n    var4 = var2 // 2\n    var5 = var2 - var4\n    return int ( var3 * var4 * var5 )"}
{"old_id": "MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var2.sort ( reverse = True )\n    var4 = [ 0 , 0 ]\n    var5 = 0\n    var6 = 0\n    while ( var5 < var3 - 1 and var6 < 2 ) :\n        if ( var2 [ var5 ] == var2 [ var5 + 1 ] ) :\n            var4 [ var6 ] = var2 [ var5 ]\n            var6 += 1\n            var5 += 1\n        var5 += 1\n    return ( var4 [ 0 ] * var4 [ 1 ] )"}
{"old_id": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = len ( var2 )\n    var5 = [ 0 ] * ( var4 + 1 )\n    var5 [ 0 ] = 0\n    for var6 in range ( var4 ) :\n        var5 [ var6 + 1 ] = var5 [ var6 ] + var2 [ var6 ]\n    var7 = [ 0 ] * var4\n    sum = 0\n    for var6 in range ( var4 ) :\n        var7 [ var6 ] = ( var5 [ var4 ] - var5 [ var6 ] ) / ( var4 - var6 )\n    for var8 in range ( var3 - 1 ) :\n        for var6 in range ( var4 ) :\n            for var9 in range ( var6 + 1 , var4 ) :\n                var7 [ var6 ] = max ( var7 [ var6 ] , ( var5 [ var9 ] - var5 [ var6 ] ) / ( var9 - var6 ) + var7 [ var9 ] )\n    return  var7 [ 0 ]"}
{"old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 for var4 in range ( var2 + 1 ) ] for var5 in range ( var2 + 1 ) ]\n    for var6 in range ( var2 + 1 ) :\n        for var7 in range ( min ( var6 , var2 ) + 1 ) :\n            if ( var7 == 0 or var7 == var6 ) :\n                var3 [ var6 ] [ var7 ] = 1\n            else :\n                var3 [ var6 ] [ var7 ] = ( var3 [ var6 - 1 ] [ var7 - 1 ] + var3 [ var6 - 1 ] [ var7 ] )\n    var8 = 0\n    for var6 in range ( var2 + 1 ) :\n        var8 = max ( var8 , var3 [ var2 ] [ var6 ] )\n    return var8"}
{"old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = set ( )\n    for var5 in range ( var3 ) :\n        var4.add ( var2 [ var5 ] )\n    var6 = 0\n    for var5 in range ( var3 ) :\n        if var4.__contains__ ( var2 [ var5 ] ) :\n            var7 = var2 [ var5 ]\n            while ( var4.__contains__ ( var7 ) ) :\n                var7 += 1\n            var6 = max ( var6 , var7 - var2 [ var5 ] )\n    return var6"}
{"old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    count = 0\n    var3 = str [ 0 ]\n    var4 = 1\n    for var5 in range ( var2 ) :\n        if ( var5 < var2 - 1 and str [ var5 ] == str [ var5 + 1 ] ) :\n            var4 += 1\n        else :\n            if var4 > count :\n                count = var4\n                var3 = str [ var5 ]\n            var4 = 1\n    return var3"}
{"old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER", "code": "def var1 ( var2 , var3 ) :\n    var4 = var5 ( lambda : 0 )\n    for var6 in range ( var3 ) :\n        var4 [ var2 [ var6 ] ] += 1\n    var7 = 0\n    for var6 in range ( var3 ) :\n        for var8 in range ( var3 ) :\n            if var4 [ var2 [ var6 ] ] > var4 [ var2 [ var8 ] ] and var2 [ var6 ] > var2 [ var8 ] :\n                var7 = max ( var7 , var4 [ var2 [ var6 ] ] - var4 [ var2 [ var8 ] ] )\n            elif var4 [ var2 [ var6 ] ] < var4 [ var2 [ var8 ] ] and var2 [ var6 ] < var2 [ var8 ] :\n                var7 = max ( var7 , var4 [ var2 [ var8 ] ] - var4 [ var2 [ var6 ] ] )\n    return var7"}
{"old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ 0 ] * var3\n    for var6 in range ( 0 , var3 ) :\n        sum = 0\n        for var7 in range ( 0 , var4 ) :\n            sum += var2 [ var6 ] [ var7 ]\n        var5 [ var6 ] = sum\n    var8 = var5 [ 1 ] - var5 [ 0 ]\n    var9 = var5 [ 0 ]\n    for var6 in range ( 1 , var3 ) :\n        if ( var5 [ var6 ] - var9 > var8 ) :\n            var8 = var5 [ var6 ] - var9\n        if ( var5 [ var6 ] < var9 ) :\n            var9 = var5 [ var6 ]\n    return var8"}
{"old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = { }\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if var2 [ var6 ] not in var4.keys ( ) :\n            var4 [ var2 [ var6 ] ] = var6\n        else :\n            var5 = max ( var5 , var6 - var4 [ var2 [ var6 ] ] )\n    return var5"}
{"old_id": "MAXIMUM_GAMES_PLAYED_WINNER", "code": "def var1 ( var2 ) :\n    var3 = [ 0 for var4 in range ( var2 ) ]\n    var3 [ 0 ] = 1\n    var3 [ 1 ] = 2\n    var4 = 1\n    while var3 [ var4 ] <= var2 :\n        var4 = var4 + 1\n        var3 [ var4 ] = var3 [ var4 - 1 ] + var3 [ var4 - 2 ]\n    return ( var4 - 1 )"}
{"old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER", "code": "def var1 ( var2 , var3 ) :\n    count = 0\n    for var4 in range ( 0 , len ( var3 ) ) :\n        if ( count == len ( var2 ) ) :\n            break\n        if ( var3 [ var4 ] == var2 [ count ] ) :\n            count = count + 1\n    return count"}
{"old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ ]\n    max = 0\n    for var5 in range ( var3 ) :\n        var4.append ( 1 )\n    for var5 in range ( var3 ) :\n        for var6 in range ( var5 ) :\n            if ( abs ( var2 [ var5 ] - var2 [ var6 ] ) <= 1 and var4 [ var5 ] < var4 [ var6 ] + 1 ) :\n                var4 [ var5 ] = var4 [ var6 ] + 1\n    for var5 in range ( var3 ) :\n        if ( max < var4 [ var5 ] ) :\n            max = var4 [ var5 ]\n    return max"}
{"old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 , var6 , var7 = { } , 0 , 0\n    var8 = [ 0 ] * var3\n    var8 [ 0 ] = var2 [ 0 ]\n    for var9 in range ( 1 , var3 ) :\n        var8 [ var9 ] = var8 [ var9 - 1 ] + var2 [ var9 ]\n    for var9 in range ( var3 ) :\n        var6 = var8 [ var9 ] % var4\n        if ( not var6 and var7 < var8 [ var9 ] ) :\n            var7 = var8 [ var9 ]\n        elif ( not var6 in var5 ) :\n            var5 [ var6 ] = var9\n        elif ( var7 < ( var8 [ var9 ] - var8 [ var5 [ var6 ] ] ) ) :\n            var7 = var8 [ var9 ] - var8 [ var5 [ var6 ] ]\n    return var7 // var4"}
{"old_id": "MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE", "code": "def var1 ( var2 , var3 ) :\n    return ( var2 // var3 - 1 ) * ( var2 // var3 ) // 2"}
{"old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ - 1 ] * ( var2 + 10 )\n    var6 [ 0 ] = 0\n    for var7 in range ( 0 , var2 ) :\n        if ( var6 [ var7 ] != - 1 ) :\n            if ( var7 + var3 <= var2 ) :\n                var6 [ var7 + var3 ] = max ( var6 [ var7 ] + 1 , var6 [ var7 + var3 ] )\n            if ( var7 + var4 <= var2 ) :\n                var6 [ var7 + var4 ] = max ( var6 [ var7 ] + 1 , var6 [ var7 + var4 ] )\n            if ( var7 + var5 <= var2 ) :\n                var6 [ var7 + var5 ] = max ( var6 [ var7 ] + 1 , var6 [ var7 + var5 ] )\n    return var6 [ var2 ]"}
{"old_id": "MAXIMUM_POINTS_INTERSECTION_N_CIRCLES", "code": "def intersection ( var1 ) :\n    return var1 * ( var1 - 1 )"}
{"old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( 0 , var3 ) :\n        var7 = True\n        for var8 in range ( var6 + 1 , var3 ) :\n            if ( var2 [ var6 ] == var2 [ var8 ] ) :\n                var7 = False\n                var2 [ var6 ] = var2 [ var8 ] = 0\n                break\n        if ( var7 == True ) :\n            if ( var2 [ var6 ] > 0 ) :\n                var4 += var2 [ var6 ]\n            else :\n                var5 += var2 [ var6 ]\n    return abs ( var4 - var5 )"}
{"old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var2.sort ( )\n    var5 = 0\n    while var5 < var3-1:\n        if ( var2 [ var5 ] !=  var2 [ var5 + 1 ] ) :\n            var4 += abs ( var2 [ var5 ] )\n        else:\n            var5 += 1\n        var5 += 1\n    if ( var2 [ var3 - 2 ] != var2 [ var3 - 1 ] ) :\n        var4 += abs ( var2 [ var3 - 1 ] )\n    return var4"}
{"old_id": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = set ( )\n    var6 = 0\n    var7 = var8 = 0\n    for var9 in range ( 0 , var4 ) :\n        while var2 [ var9 ] in var5 :\n            var5.remove ( var2 [ var8 ] )\n            var7 -= var3 [ var8 ]\n            var8 += 1\n        var5.add ( var2 [ var9 ] )\n        var7 += var3 [ var9 ]\n        var6 = max ( var6 , var7 )\n    return var6"}
{"old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 ] * ( var3 )\n    for var5 in range ( var3 ) :\n        var4 [ var5 ] = var2 [ var5 ]\n    for var5 in range ( 1 , var3 ) :\n        for var6 in range ( var5 ) :\n            if ( var2 [ var5 ] > var2 [ var6 ] and var4 [ var5 ] < ( var4 [ var6 ] * var2 [ var5 ] ) ) :\n                var4 [ var5 ] = var4 [ var6 ] * var2 [ var5 ]\n    return max ( var4 )"}
{"old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    if var3 == 1 :\n        return var2 [ 0 ]\n    var4 = - 999999999999\n    var5 = 0\n    var6 = 0\n    var7 = 1\n    for var8 in range ( var3 ) :\n        if var2 [ var8 ] == 0 :\n            var6 += 1\n            continue\n        if var2 [ var8 ] < 0 :\n            var5 += 1\n            var4 = max ( var4 , var2 [ var8 ] )\n        var7 = var7 + var2 [ var8 ]\n    if var6 == var3 :\n        return 0\n    if var5 & 1 :\n        if ( var5 == 1 and var6 > 0 and var6 + var5 == var3 ) :\n            return 0\n        var7 = int(var7 / var4)\n    return var7"}
{"old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 ] * var3\n    var5 = var2 [ var3 - 1 ]\n    for var6 in range ( var3 - 2 , 0 , - 1 ) :\n        if var2 [ var6 ] > var5 :\n            var5 = var2 [ var6 ]\n        var4 [ var6 ] = max ( var4 [ var6 + 1 ] , var5 - var2 [ var6 ] )\n    var7 = var2 [ 0 ]\n    for var6 in range ( 1 , var3 ) :\n        if var2 [ var6 ] < var7 :\n            var7 = var2 [ var6 ]\n        var4 [ var6 ] = max ( var4 [ var6 - 1 ] , var4 [ var6 ] + ( var2 [ var6 ] - var7 ) )\n    var8 = var4 [ var3 - 1 ]\n    return var8"}
{"old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = - 2147483648\n    var6 = 0\n    for var7 in range ( var3 * var4 ) :\n        var6 = var6 + var2 [ var7 % var3 ]\n        if ( var5 < var6 ) :\n            var5 = var6\n        if ( var6 < 0 ) :\n            var6 = 0\n    return var5"}
{"old_id": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = - math.var6\n    var7 = [ ]\n    var7.append ( var2 [ 0 ] )\n    for var8 in range ( 1 , var3 ) :\n        var7.append ( var7 [ var8 - 1 ] + var2 [ var8 ] )\n    for var8 in range ( var3 ) :\n        var5 = max ( var5 , var7 [ var8 ] - var4 )\n        var4 = min ( var4 , var7 [ var8 ] )\n    return var5"}
{"old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE", "code": "def var1 ( var2 , var3 ) :\n    sum = [ 0 for var4 in range ( var3 ) ]\n    if var3 >= 1 :\n        sum [ 0 ] = var2 [ 0 ]\n    if var3 >= 2 :\n        sum [ 1 ] = var2 [ 0 ] + var2 [ 1 ]\n    if var3 > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( var2 [ 1 ] + var2 [ 2 ] , var2 [ 0 ] + var2 [ 2 ] ) )\n    for var5 in range ( 3 , var3 ) :\n        sum [ var5 ] = max ( max ( sum [ var5 - 1 ] , sum [ var5 - 2 ] + var2 [ var5 ] ) , var2 [ var5 ] + var2 [ var5 - 1 ] + sum [ var5 - 3 ] )\n    return sum [ var3 - 1 ]"}
{"old_id": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT", "code": "def var1 ( var2 , var3 ) :\n    var4 = max ( var2 [ 0 ] [ 0 ] , var2 [ 1 ] [ 0 ] )\n    var5 = 0\n    for var6 in range ( 1 , var3 ) :\n        var7 = max ( var5 , var4 )\n        var4 = var5 + max ( var2 [ 0 ] [ var6 ] , var2 [ 1 ] [ var6 ] )\n        var5 = var7\n    return max ( var5 , var4 )"}
{"old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 1 ) :\n        return var2 [ 0 ]\n    var4 = [ 0 for var5 in range ( var3 + 1 ) ]\n    var6 = [ 0 for var5 in range ( var3 + 1 ) ]\n    var4 [ 0 ] = var6 [ 0 ] = var2 [ 0 ]\n    var7 = 0\n    for var5 in range ( 1 , var3 ) :\n        for var8 in range ( var5 ) :\n            if ( var2 [ var8 ] > var2 [ var5 ] ) :\n                var4 [ var5 ] = max ( var4 [ var5 ] , var6 [ var8 ] + var2 [ var5 ] )\n                var7 = 1\n            elif ( var2 [ var8 ] < var2 [ var5 ] and var7 == 1 ) :\n                var6 [ var5 ] = max ( var6 [ var5 ] , var4 [ var8 ] + var2 [ var5 ] )\n    var9 = - 2147483648\n    for var5 in range ( var3 ) :\n        if ( var9 < var6 [ var5 ] ) :\n            var9 = var6 [ var5 ]\n        if ( var9 < var4 [ var5 ] ) :\n            var9 = var4 [ var5 ]\n    return var9"}
{"old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ None ] * var3\n    var5 = [ None ] * var3\n    var6 = 0\n    var4 [ 0 ] = var2 [ 0 ]\n    for var7 in range ( 1 , var3 ) :\n        if ( var2 [ var7 ] > var2 [ var7 - 1 ] ) :\n            var4 [ var7 ] = var4 [ var7 - 1 ] + var2 [ var7 ]\n        else :\n            var4 [ var7 ] = var2 [ var7 ]\n    var5 [ var3 - 1 ] = var2 [ var3 - 1 ]\n    for var7 in range ( var3 - 2 , - 1 , - 1 ) :\n        if ( var2 [ var7 ] > var2 [ var7 + 1 ] ) :\n            var5 [ var7 ] = var5 [ var7 + 1 ] + var2 [ var7 ]\n        else :\n            var5 [ var7 ] = var2 [ var7 ]\n    for var7 in range ( var3 ) :\n        if ( var6 < ( var4 [ var7 ] + var5 [ var7 ] - var2 [ var7 ] ) ) :\n            var6 = ( var4 [ var7 ] + var5 [ var7 ] - var2 [ var7 ] )\n    return var6"}
{"old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = - sys.var5\n    for var6 in range ( 0 , var3 ) :\n        var7 = 0\n        for var8 in range ( 0 , var3 ) :\n            index = int ( ( var6 + var8 ) % var3 )\n            var7 += var8 * var2 [ index ]\n        var4 = max ( var4 , var7 )\n    return var4"}
{"old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( 0 , var3 ) :\n        var4 += var2 [ var5 ]\n    var6 = 0\n    for var5 in range ( 0 , var3 ) :\n        var6 += var5 * var2 [ var5 ]\n    var7 = var6\n    for var5 in range ( 1 , var3 ) :\n        var8 = ( var6 - ( var4 - var2 [ var5 - 1 ] ) + var2 [ var5 - 1 ] * ( var3 - 1 ) )\n        var6 = var8\n        var7 = max ( var7 , var8 )\n    return var7"}
{"old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE", "code": "def var1 ( var2 , var3 , var4 ) :\n    var2.sort ( )\n    var5 = [ 0 ] * var3\n    var5 [ 0 ] = 0\n    for var6 in range ( 1 , var3 ) :\n        var5 [ var6 ] = var5 [ var6 - 1 ]\n        if ( var2 [ var6 ] - var2 [ var6 - 1 ] < var4 ) :\n            if ( var6 >= 2 ) :\n                var5 [ var6 ] = max ( var5 [ var6 ] , var5 [ var6 - 2 ] + var2 [ var6 ] + var2 [ var6 - 1 ] )\n            else :\n                var5 [ var6 ] = max ( var5 [ var6 ] , var2 [ var6 ] + var2 [ var6 - 1 ] )\n    return var5 [ var3 - 1 ]"}
{"old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var2.sort ( )\n    var6 = var3 - 1\n    while ( var6 > 0 ) :\n        if ( var2 [ var6 ] - var2 [ var6 - 1 ] < var4 ) :\n            var5 += var2 [ var6 ]\n            var5 += var2 [ var6 - 1 ]\n            var6 -= 1\n        var6 -= 1\n    return var5"}
{"old_id": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    var6 = [ 0 for var5 in range ( var3 ) ]\n    var7 , var8 = var2 [ 0 ] , var2 [ 0 ]\n    for var9 in range (1, var3 ) :\n        var7 = max ( var2 [ var9 ] , var7 + var2 [ var9 ] )\n        var8 = max ( var8 , var7 )\n        var4 [ var9 ] = var7\n    var7 = var8 = var6 [ var3 - 1 ] = var2 [ var3 - 1 ]\n    var9 = var3 - 2\n    while var9 >= 0 :\n        var7 = max ( var2 [ var9 ] , var7 + var2 [ var9 ] )\n        var8 = max ( var8 , var7 )\n        var6 [ var9 ] = var7\n        var9 -= 1\n    var10 = var8\n    for var9 in range ( 1 , var3 - 1 ) :\n        var10 = max ( var10 , var4 [ var9 - 1 ] + var6 [ var9 + 1 ] )\n    return var10"}
{"old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ 0 for var6 in range ( var3 ) ]\n    var5 [ var3 - 1 ] = var2 [ var3 - 1 ]\n    for var6 in range ( var3 - 2 , - 1 , - 1 ) :\n        if ( var6 + var4 + 1 >= var3 ) :\n            var5 [ var6 ] = max ( var2 [ var6 ] , var5 [ var6 + 1 ] )\n        else :\n            var5 [ var6 ] = max ( var2 [ var6 ] + var5 [ var6 + var4 + 1 ] , var5 [ var6 + 1 ] )\n    return var5 [ 0 ]"}
{"old_id": "MAXIMUM_TRIPLET_SUM_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 1000000\n    for var5 in range ( 0 , var3 ) :\n        for var6 in range ( var5 + 1 , var3 ) :\n            for var7 in range ( var6 + 1 , var3 ) :\n                if ( var4 < ( var2 [ var5 ] + var2 [ var6 ] + var2 [ var7 ] ) ) :\n                    var4 = var2 [ var5 ] + var2 [ var6 ] + var2 [ var7 ]\n    return var4"}
{"old_id": "MAXIMUM_TRIPLET_SUM_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var2.sort ( )\n    return ( var2 [ var3 - 1 ] + var2 [ var3 - 2 ] + var2 [ var3 - 3 ] )"}
{"old_id": "MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING", "code": "def var1 ( var2 ) :\n    var3 = list ( )\n    var3.append ( 0 )\n    var3.append ( 1 )\n    var4 = 2\n    while var4 < var2 + 1 :\n        var3.append ( max ( var4 , ( var3 [ int ( var4 / 2 ) ] + var3 [ int ( var4 / 3 ) ] + var3 [ int ( var4 / 4 ) ] + var3 [ int ( var4 / 5 ) ] ) ) )\n        var4 = var4 + 1\n    return var3 [ var2 ]"}
{"old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var3 ) ] for var6 in range ( var3 ) ]\n    var4 [ 0 ] [ 0 ] = var2 [ 0 ] [ 0 ]\n    for var5 in range ( 1 , var3 ) :\n        var4 [ var5 ] [ 0 ] = var2 [ var5 ] [ 0 ] + var4 [ var5 - 1 ] [ 0 ]\n    for var5 in range ( 1 , var3 ) :\n        for var6 in range ( 1 , min ( var5 + 1 , var3 ) ) :\n            var4 [ var5 ] [ var6 ] = var2 [ var5 ] [ var6 ] + \\\n                max ( var4 [ var5 - 1 ] [ var6 - 1 ] , var4 [ var5 - 1 ] [ var6 ] )\n    var7 = 0\n    for var5 in range ( var3 ) :\n        if ( var7 < var4 [ var3 - 1 ] [ var5 ] ) :\n            var7 = var4 [ var3 - 1 ] [ var5 ]\n    return var7"}
{"old_id": "MEDIAN_OF_TWO_SORTED_ARRAYS", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var6 = 0\n    var7 = - 1\n    var8 = - 1\n    count = 0\n    while count < var4 + 1 :\n        count += 1\n        if var5 == var4 :\n            var7 = var8\n            var8 = var3 [ 0 ]\n            break\n        elif var6 == var4 :\n            var7 = var8\n            var8 = var2 [ 0 ]\n            break\n        if var2 [ var5 ] < var3 [ var6 ] :\n            var7 = var8\n            var8 = var2 [ var5 ]\n            var5 += 1\n        else :\n            var7 = var8\n            var8 = var3 [ var6 ]\n            var6 += 1\n    return int(( var7 + var8 ) / 2)"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( ( var2 < var3 and var3 < var4 ) or ( var4 < var3 and var3 < var2 ) ) :\n        return var3\n    if ( ( var3 < var2 and var2 < var4 ) or ( var4 < var2 and var2 < var3 ) ) :\n        return var2\n    else :\n        return var4"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var2 > var3 :\n        if ( var3 > var4 ) :\n            return var3\n        elif ( var2 > var4 ) :\n            return var4\n        else :\n            return var2\n    else :\n        if ( var2 > var4 ) :\n            return var2\n        elif ( var3 > var4 ) :\n            return var4\n        else :\n            return var3"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = var2 - var3\n    var6 = var3 - var4\n    var7 = var2 - var4\n    if var5 * var6 > 0 :\n        return var3\n    elif ( var5 * var7 > 0 ) :\n        return var4\n    else :\n        return var2"}
{"old_id": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED", "code": "def var1 ( var2 , var3 , var4 ) :\n    sorted ( var2 )\n    sorted ( var3 )\n    var5 = 0\n    for var6 in range ( var4 ) :\n        var5 += ( var2 [ var6 ] * var3 [ var4 - var6 - 1 ] )\n    return var5"}
{"old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( var3 == 1 ) :\n        return 0\n    var2.sort ( )\n    var5 = var2 [ var3 - 1 ] - var2 [ 0 ]\n    var6 = var2 [ 0 ] + var4\n    var7 = var2 [ var3 - 1 ] - var4\n    if ( var6 > var7 ) :\n        var6 , var7 = var7 , var6\n    for var8 in range ( 1 , var3 - 1 ) :\n        var9 = var2 [ var8 ] - var4\n        add = var2 [ var8 ] + var4\n        if ( var9 >= var6 or add <= var7 ) :\n            continue\n        if ( var7 - var9 <= add - var6 ) :\n            var6 = var9\n        else :\n            var7 = add\n    return min ( var5 , var7 - var6 )"}
{"old_id": "MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N", "code": "def var1 ( var2 ) :\n    sum = 0\n    while ( var2 > 0 ) :\n        sum += ( var2 % 10 )\n        var2 //= 10\n    if ( sum == 1 ) :\n        return 10\n    return sum"}
{"old_id": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = sys.var5\n    sum = 0\n    for var6 in range ( var3 ) :\n        var4 = min ( var2 [ var6 ] , var4 )\n        sum += var2 [ var6 ]\n    return var4 * ( sum - var4 )"}
{"old_id": "MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS", "code": "def var1 ( var2 , var3 ) :\n    return ( ( var3 - 1 ) * min ( var2 ) )"}
{"old_id": "MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 , var7 ) :\n    if var6 == 0 :\n        return 0\n    if var4 < 0 or var5 < 0 :\n        return 1000000000\n    if var7 [ var4 ] [ var5 ] [ var6 ] != - 1 :\n        return var7 [ var4 ] [ var5 ] [ var6 ]\n    var8 = ( ( ord ( var2 [ var4 ] ) - ord ( 'a' ) ) ^ ( ord ( var3 [ var5 ] ) - ord ( 'a' ) ) )\n    var7 [ var4 ] [ var5 ] [ var6 ] = min ( [ var8 + var1 ( var2 , var3 , var4 - 1 , var5 - 1 , var6 - 1 , var7 ) , var1 ( var2 , var3 , var4 - 1 , var5 , var6 , var7 ) , var1 ( var2 , var3 , var4 , var5 - 1 , var6 , var7 ) ] )\n    return var7 [ var4 ] [ var5 ] [ var6 ]"}
{"old_id": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( var3 ) :\n        for var6 in range ( var3 ) :\n            var7 = var2 [ var5 ] [ var6 ] // var3\n            var8 = var7\n            var9 = var2 [ var5 ] [ var6 ] - ( var3 * var7 )\n            var4 += ( abs ( var8 - var5 ) + abs ( var9 - var6 ) )\n    return var4"}
{"old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = list ( )\n    var6 = list ( )\n    var7 = 0\n    for var8 in range ( var3 ) :\n        if ( var2 [ var8 ] != - 1 ) :\n            var5.append ( var2 [ var8 ] )\n            var6.append ( var8 + 1 )\n            var7 += 1\n    var3 = var7\n    var9 = [ [ 0 for var8 in range ( var4 + 1 ) ] for var10 in range ( var3 + 1 ) ]\n    for var8 in range ( var4 + 1 ) :\n        var9 [ 0 ] [ var8 ] = var11\n    for var8 in range ( 1 , var3 + 1 ) :\n        var9 [ var8 ] [ 0 ] = 0\n    for var8 in range ( 1 , var3 + 1 ) :\n        for var10 in range ( 1 , var4 + 1 ) :\n            if ( var6 [ var8 - 1 ] > var10 ) :\n                var9 [ var8 ] [ var10 ] = var9 [ var8 - 1 ] [ var10 ]\n            else :\n                var9 [ var8 ] [ var10 ] = min ( var9 [ var8 - 1 ] [ var10 ] , var9 [ var8 ] [ var10 - var6 [ var8 - 1 ] ] + var5 [ var8 - 1 ] )\n    if ( var9 [ var3 ] [ var4 ] == var11 ) :\n        return - 1\n    else :\n        return var9 [ var3 ] [ var4 ]"}
{"old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( var3 ) :\n        for var6 in range ( var5 ) :\n            if var2 [ var5 ] [ var6 ] != var2 [ var6 ] [ var5 ] :\n                var4 += 1\n    return var4"}
{"old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = max ( var2 )\n    var6 = 0\n    for var7 in range ( 0 , var3 ) :\n        if ( ( var5 - var2 [ var7 ] ) % var4 != 0 ) :\n            return - 1\n        else :\n            var6 += ( var5 - var2 [ var7 ] ) / var4\n    return int ( var6 )"}
{"old_id": "MINIMUM_INSERTIONS_SORT_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 ] * var3\n    for var5 in range ( var3 ) :\n        var4 [ var5 ] = 1\n    for var5 in range ( 1 , var3 ) :\n        for var6 in range ( var5 ) :\n            if ( var2 [ var5 ] >= var2 [ var6 ] and var4 [ var5 ] < var4 [ var6 ] + 1 ) :\n                var4 [ var5 ] = var4 [ var6 ] + 1\n    max = 0\n    for var5 in range ( var3 ) :\n        if ( max < var4 [ var5 ] ) :\n            max = var4 [ var5 ]\n    return ( var3 - max )"}
{"old_id": "MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var6 = var3 + 1\n    var7 = 0\n    var8 = 0\n    while ( var8 < var3 ) :\n        while ( var5 <= var4 and var8 < var3 ) :\n            if ( var5 <= 0 and var4 > 0 ) :\n                var7 = var8\n                var5 = 0\n            var5 += var2 [ var8 ]\n            var8 += 1\n        while ( var5 > var4 and var7 < var3 ) :\n            if ( var8 - var7 < var6 ) :\n                var6 = var8 - var7\n            var5 -= var2 [ var7 ]\n            var7 += 1\n    return var6"}
{"old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    if ( var3 == 0 ) or ( var2 [ 0 ] == 0 ) :\n        return float ( 'inf' )\n    var4 [ 0 ] = 0\n    for var5 in range ( 1 , var3 ) :\n        var4 [ var5 ] = float ( 'inf' )\n        for var6 in range ( var5 ) :\n            if ( var5 <= var6 + var2 [ var6 ] ) and ( var4 [ var6 ] != float ( 'inf' ) ) :\n                var4 [ var5 ] = min ( var4 [ var5 ] , var4 [ var6 ] + 1 )\n                break\n    return var4 [ var3 - 1 ]"}
{"old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    for var5 in range ( var3 - 2 , - 1 , - 1 ) :\n        if ( var2 [ var5 ] == 0 ) :\n            var4 [ var5 ] = float ( 'inf' )\n        elif ( var2 [ var5 ] >= var3 - var5 - 1 ) :\n            var4 [ var5 ] = 1\n        else :\n            min = float ( 'inf' )\n            for var6 in range ( var5 + 1 , var3 ) :\n                if ( var6 <= var2 [ var5 ] + var5 ) :\n                    if ( min > var4 [ var6 ] ) :\n                        min = var4 [ var6 ]\n            if ( min != float ( 'inf' ) ) :\n                var4 [ var5 ] = min + 1\n            else :\n                var4 [ var5 ] = min\n    return var4 [ 0 ]"}
{"old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1", "code": "def var1 ( var2 ) :\n    var3 = [ 0 , 1 , 2 , 3 ]\n    for var4 in range ( 4 , var2 + 1 ) :\n        var3.append ( var4 )\n        for var5 in range ( 1 , int ( var6 ( var7 ( var4 ) ) ) + 1 ) :\n            var8 = var5 * var5 ;\n            if var8 > var4 :\n                break\n            else :\n                var3 [ var4 ] = min ( var3 [ var4 ] , 1 + var3 [ var4 - var8 ] )\n    return var3 [ var2 ]"}
{"old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var2.sort ( )\n    var5 = 0\n    while var5 < var3:\n        count = 1\n        var6 = var5\n        while var6 < var3 - 1:\n            if var2 [ var6 ] == var2 [ var6 + 1 ] :\n                count += 1\n            else :\n                break\n            var6 += 1\n        var5 = var6\n        var5 += 1\n        var4 = max ( var4 , count )\n    return var4"}
{"old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = max(var2)\n    var5 = min(var2)\n    var6 = { var7 : 0 for var7 in range ( var5, var4+1 ) }\n    for var7 in range ( var3 ) :\n        var6 [ var2 [ var7 ] ] += 1\n    var8 = 0\n    for var9 , var10 in var6.items ( ) :\n        var8 = max ( var8 , var10 )\n    return var8"}
{"old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var4 = var5 ( lambda : 0 )\n    for var6 in range ( 0 , var3 ) :\n        var4 [ var2 [ var6 ] ] += 1\n    var7 = 0\n    for var6 in var4 :\n        if var7 < var4 [ var6 ] :\n            var7 = var4 [ var6 ]\n    return var3 - var7"}
{"old_id": "MINIMUM_PERIMETER_N_BLOCKS", "code": "def var1 ( var2 ) :\n    var3 = int ( math.var4 ( var2 ) )\n    var5 = var3 * var3\n    if ( var5 == var2 ) :\n        return var3 * 4\n    else :\n        var6 = int ( var2 / var3 )\n        var7 = 2 * ( var3 + var6 )\n        if ( var2 % var3 != 0 ) :\n            var7 += 2\n        return var7"}
{"old_id": "MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS", "code": "def var1(var2, var3, var4):\n    var5 = []\n    for var6 in range(var3):\n        heapq.var7(var5, var2[var6])\n    count = 0\n    var8 = 1\n    while var5 and count < var4:\n        var8 += heapq.var9(var5)\n        count += 1\n    return var8"}
{"old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 1 ) :\n        return var2 [ 0 ]\n    var4 = float ( '-inf' )\n    var5 = float ( 'inf' )\n    var6 = 0\n    var7 = 0\n    var8 = 1\n    for var9 in range ( 0 , var3 ) :\n        if ( var2 [ var9 ] == 0 ) :\n            var7 = var7 + 1\n            continue\n        if ( var2 [ var9 ] < 0 ) :\n            var6 = var6 + 1\n            var4 = max ( var4 , var2 [ var9 ] )\n        if ( var2 [ var9 ] > 0 ) :\n            var5 = min ( var5 , var2 [ var9 ] )\n        var8 = var8 * var2 [ var9 ]\n    if ( var7 == var3 or ( var6 == 0 and var7 > 0 ) ) :\n        return 0\n    if ( var6 == 0 ) :\n        return var5\n    if ( ( var6 & 1 ) == 0 and var6 != 0 ) :\n        var8 = int ( var8 / var4 )\n    return var8"}
{"old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ 0 ] * var4\n    for var6 in range ( var3 ) :\n        for var7 in range ( var4 ) :\n            if var6 < len(var2) and var7 < len(var2[var6]):\n                if ( var2 [ var6 ] [ var7 ] == '1' ) :\n                    var5 [ var7 ] += 1\n    return max ( var5 )"}
{"old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING", "code": "def var1 ( str ) :\n    var2 = str + str\n    var3 = len ( str )\n    for var4 in range ( 1 , var3 + 1 ) :\n        var5 = var2 [ var4 : var3 ]\n        if ( str == var5 ) :\n            return var4\n    return var3"}
{"old_id": "MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK", "code": "def var1 ( input , var2 ) :\n    var3 = 0\n    while ( input > 0 or var2 > 0 ) :\n        var4 = input % 10\n        var5 = var2 % 10\n        var3 += min ( abs ( var4 - var5 ) , 10 - abs ( var4 - var5 ) )\n        input = int ( input / 10 )\n        var2 = int ( var2 / 10 )\n    return var3"}
{"old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * ( var2 + 1 )\n    for var4 in range ( var2 + 1 ) :\n        var3 [ var4 ] = var2 - var4\n    for var4 in range ( var2 , 0 , - 1 ) :\n        if ( not ( var4 % 2 ) ) :\n            var3 [ var4 // 2 ] = min ( var3 [ var4 ] + 1 , var3 [ var4 // 2 ] )\n        if ( not ( var4 % 3 ) ) :\n            var3 [ var4 // 3 ] = min ( var3 [ var4 ] + 1 , var3 [ var4 // 3 ] )\n    return var3 [ 1 ]"}
{"old_id": "MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY", "code": "def var1 ( var2, var3 ) :\n    var4 = min ( var2 ) ;\n    return var4 * ( var3 - 1 )"}
{"old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = 0\n    var7 = 0\n    var8 = 0\n    for var9 in range ( var4 ) :\n        var10 = var2 [ var9 ] * var3 [ var9 ]\n        var7 = var7 + var10\n        if ( var10 < 0 and var3 [ var9 ] < 0 ) :\n            var8 = ( var2 [ var9 ] + 2 * var5 ) * var3 [ var9 ]\n        elif ( var10 < 0 and var2 [ var9 ] < 0 ) :\n            var8 = ( var2 [ var9 ] - 2 * var5 ) * var3 [ var9 ]\n        elif ( var10 > 0 and var2 [ var9 ] < 0 ) :\n            var8 = ( var2 [ var9 ] + 2 * var5 ) * var3 [ var9 ]\n        elif ( var10 > 0 and var2 [ var9 ] > 0 ) :\n            var8 = ( var2 [ var9 ] - 2 * var5 ) * var3 [ var9 ]\n        var11 = abs ( var10 - var8 )\n        if ( var11 > var6 ) :\n            var6 = var11\n    return var7 - var6"}
{"old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 ] * var3\n    if ( var3 == 1 ) :\n        return var2 [ 0 ]\n    if ( var3 == 2 ) :\n        return min ( var2 [ 0 ] , var2 [ 1 ] )\n    if ( var3 == 3 ) :\n        return min ( var2 [ 0 ] , min ( var2 [ 1 ] , var2 [ 2 ] ) )\n    if ( var3 == 4 ) :\n        return min ( min ( var2 [ 0 ] , var2 [ 1 ] ) , min ( var2 [ 2 ] , var2 [ 3 ] ) )\n    var4 [ 0 ] = var2 [ 0 ]\n    var4 [ 1 ] = var2 [ 1 ]\n    var4 [ 2 ] = var2 [ 2 ]\n    var4 [ 3 ] = var2 [ 3 ]\n    for var5 in range ( 4 , var3 ) :\n        var4 [ var5 ] = var2 [ var5 ] + min ( min ( var4 [ var5 - 1 ] , var4 [ var5 - 2 ] ) , min ( var4 [ var5 - 3 ] , var4 [ var5 - 4 ] ) )\n    return min ( min ( var4 [ var3 - 1 ] , var4 [ var3 - 2 ] ) , min ( var4 [ var3 - 4 ] , var4 [ var3 - 3 ] ) )"}
{"old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var2.sort ( )\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if ( var6 % 2 != 0 ) :\n            var4 = var4 * 10 + var2 [ var6 ]\n        else :\n            var5 = var5 * 10 + var2 [ var6 ]\n    return var4 + var5"}
{"old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION", "code": "def var1 ( var2 , insert , remove , copy ) :\n    if var2 == 0 :\n        return 0\n    if var2 == 1 :\n        return insert\n    var3 = [ 0 ] * ( var2 + 1 )\n    for var4 in range ( 1 , var2 + 1 ) :\n        if var4 % 2 == 0 :\n            var3 [ var4 ] = min ( var3 [ var4 - 1 ] + insert , var3 [ var4 // 2 ] + copy )\n        else :\n            var3 [ var4 ] = min ( var3 [ var4 - 1 ] + insert , var3 [ ( var4 + 1 ) // 2 ] + copy + remove )\n    return var3 [ var2 ]"}
{"old_id": "MINIMUM_XOR_VALUE_PAIR", "code": "def var1 ( var2 , var3 ) :\n    var4 = 999999\n    var5 = 0\n    for var6 in range ( 0 , var3 ) :\n        for var7 in range ( var6 + 1 , var3 ) :\n            var5 = var2 [ var6 ] ^ var2 [ var7 ]\n            var4 = min ( var4 , var5 )\n    return var4"}
{"old_id": "MINIMUM_XOR_VALUE_PAIR_1", "code": "def var1 ( var2 , var3 ) :\n    var2 = var2 [ : var3 ]\n    var2.sort ( )\n    var4 = int ( sys.var5.max )\n    var6 = 0\n    for var7 in range ( 0 , var3 - 1 ) :\n        var6 = var2 [ var7 ] ^ var2 [ var7 + 1 ]\n        var4 = min ( var4 , var6 )\n    return var4"}
{"old_id": "MIRROR_CHARACTERS_STRING", "code": "def var1 ( str , var2 ) :\n    var3 = \"zyxwvutsrqponmlkjihgfedcba\"\n    var4 = len ( str )\n    var5 = \"\"\n    for var6 in range ( 0 , var2 ) :\n        if var6 < var4:\n            var5 = var5 + str [ var6 ]\n    for var6 in range ( var2 , var4 ) :\n        var5 = ( var5 + var3 [ ord ( str [ var6 ] ) - ord ( \"a\" ) ] )\n    return var5"}
{"old_id": "MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 1\n    var2 = var2 % var4\n    while ( var3 > 0 ) :\n        if ( ( var3 & 1 ) == 1 ) :\n            var5 = ( var5 * var2 ) % var4\n        var3 = var3 >> 1\n        var2 = ( var2 * var2 ) % var4\n    return var5"}
{"old_id": "MODULUS_TWO_FLOAT_DOUBLE_NUMBERS", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 < 0 ) :\n        var2 = - var2\n    if ( var3 < 0 ) :\n        var3 = - var3\n    var4 = var2\n    while ( var4 >= var3 ) :\n        var4 = var4 - var3\n    if ( var2 < 0 ) :\n        return - var4\n    return var4"}
{"old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 for var5 in range ( var3 ) ]\n    var6 = 0\n    for var7 in range ( var3 ) :\n        if ( var2 [ var7 ] >= 0 ) :\n            var4 [ var6 ] = var2 [ var7 ]\n            var6 += 1\n    if ( var6 == var3 or var6 == 0 ) :\n        return\n    for var7 in range ( var3 ) :\n        if ( var2 [ var7 ] < 0 ) :\n            var4 [ var6 ] = var2 [ var7 ]\n            var6 += 1\n    for var5 in range ( var3 ) :\n        var2 [ var5 ] = var4 [ var5 ]"}
{"old_id": "MULTIPLY_AN_INTEGER_WITH_3_5", "code": "def var1 ( var2 ) :\n    return ( var2 << 1 ) + var2 + ( var2 >> 1 )"}
{"old_id": "MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0 ;\n    var2 = var2 % var4 ;\n    while ( var3 ) :\n        if ( var3 & 1 ) :\n            var5 = ( var5 + var2 ) % var4 ;\n        var2 = ( 2 * var2 ) % var4 ;\n        var3 >>= 1 ;\n    return var5 ;"}
{"old_id": "MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 0 ) :\n        return 0\n    if ( var3 > 0 ) :\n        return ( var2 + var1 ( var2 , var3 - 1 ) )\n    if ( var3 < 0 ) :\n        return - var1 ( var2 , - var3 )"}
{"old_id": "NEWMAN_CONWAY_SEQUENCE_1", "code": "def var1 ( var2 ) :\n    f = var3.var3 ( 'i' , [ 0 , 1 , 1 ] )\n    for var4 in range ( 3 , var2 + 1 ) :\n        var5 = f [ f [ var4 - 1 ] ] + f [ var4 - f [ var4 - 1 ] ]\n        f.append ( var5 )\n    return f[var2]"}
{"old_id": "NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS", "code": "def var1 ( var2 ) :\n    next = 0\n    if ( var2 ) :\n        var3 = var2 & - ( var2 )\n        var4 = var2 + int ( var3 )\n        var5 = var2 ^ int ( var4 )\n        var5 = ( int ( var5 ) / int ( var3 ) )\n        var5 = int ( var5 ) >> 2\n        next = var4 | var5\n    return next"}
{"old_id": "NEXT_POWER_OF_2", "code": "def var1 ( var2 ) :\n    count = 0\n    if ( var2 and not ( var2 & ( var2 - 1 ) ) ) :\n        return var2\n    while ( var2 != 0 ) :\n        var2 >>= 1\n        count += 1\n    return 1 << count"}
{"old_id": "NEXT_POWER_OF_2_1", "code": "def var1 ( var2 ) :\n    var3 = 1\n    if ( var2 and not ( var2 & ( var2 - 1 ) ) ) :\n        return var2\n    while ( var3 < var2 ) :\n        var3 <<= 1\n    return var3"}
{"old_id": "NEXT_POWER_OF_2_2", "code": "def var1 ( var2 ) :\n    var2 -= 1\n    var2 |= var2 >> 1\n    var2 |= var2 >> 2\n    var2 |= var2 >> 4\n    var2 |= var2 >> 8\n    var2 |= var2 >> 16\n    var2 += 1\n    return var2"}
{"old_id": "NON_REPEATING_ELEMENT", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( var3 ) :\n        var5 = 0\n        while ( var5 < var3 ) :\n            if ( var4 != var5 and var2 [ var4 ] == var2 [ var5 ] ) :\n                break\n            var5 += 1\n        if ( var5 == var3 ) :\n            return var2 [ var4 ]\n    return - 1"}
{"old_id": "NON_REPEATING_ELEMENT_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = var5 ( lambda : 0 )\n    for var6 in range ( var3 ) :\n        var4 [ var2 [ var6 ] ] += 1\n    for var6 in range ( var3 ) :\n        if var4 [ var2 [ var6 ] ] == 1 :\n            return var2 [ var6 ]\n    return - 1"}
{"old_id": "NTH_EVEN_LENGTH_PALINDROME", "code": "def var1 ( var2 ) :\n    var3 = var2\n    for var4 in range ( len ( var2 ) - 1 , - 1 , - 1 ) :\n        var3 += var2 [ var4 ]\n    return var3"}
{"old_id": "NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 1\n    var6 = 2\n    while var6 != 0 :\n        var7 = var4 + var5\n        var4 = var5\n        var5 = var7\n        if var5 % var2 == 0 :\n            return var3 * var6\n        var6 += 1\n    return"}
{"old_id": "NTH_NON_FIBONACCI_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = 1\n    var4 = 2\n    var5 = 3\n    while var2 > 0 :\n        var3 = var4\n        var4 = var5\n        var5 = var3 + var4\n        var2 = var2 - ( var5 - var4 - 1 )\n    var2 = var2 + ( var5 - var4 - 1 )\n    return var4 + var2"}
{"old_id": "NTH_PENTAGONAL_NUMBER", "code": "def var1 ( var2 ) :\n    return ( 3 * var2 * var2 - var2 ) / 2"}
{"old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS", "code": "def var1 ( var2 , var3 ) :\n    count = 0\n    var4 = abs ( var2 * var3 )\n    if ( var4 == 0 ) :\n        return 1\n    while ( var4 > 0 ) :\n        count = count + 1\n        var4 = var4 // 10\n    return count"}
{"old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 == 0 or var3 == 0 ) :\n        return 1\n    return math.var4 ( math.var5 ( abs ( var2 ) ) + math.var5 ( abs ( var3 ) ) ) + 1"}
{"old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    sum = 0\n    for var4 in range ( var3 ) :\n        sum += ord ( var2 [ var4 ] )\n    if ( sum % 3 == 0 ) :\n        return 0\n    if ( var3 == 1 ) :\n        return - 1\n    for var4 in range ( var3 ) :\n        if ( sum % 3 == ord ( var2 [ var4 ] ) % 3 ) :\n            return 1\n    if ( var3 == 2 ) :\n        return - 1\n    return 2"}
{"old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    count = 0\n    for var6 in range ( var4 , var5 ) :\n        if ( var2 [ var6 ] == var2 [ var6 + 1 ] ) :\n            count += 1\n    return count"}
{"old_id": "NUMBER_IS_DIVISIBLE_BY_29_OR_NOT", "code": "def var1 ( var2 ) :\n    while ( int ( var2 / 100 ) ) :\n        var3 = int ( var2 % 10 )\n        var2 = int ( var2 / 10 )\n        var2 += var3 * 3\n    return ( var2 % 29 == 0 )"}
{"old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N", "code": "def var1 ( var2 ) :\n    var3 = 0\n    for var4 in range ( var2 + 1 ) :\n        for var5 in range ( var2 + 1 ) :\n            for var6 in range ( var2 + 1 ) :\n                if var4 + var5 + var6 == var2 :\n                    var3 += 1\n    return var3"}
{"old_id": "NUMBER_N_DIGITS_NON_DECREASING_INTEGERS", "code": "def var1 ( var2 ) :\n    var3 = var4.var5 ( ( var2 + 1 , 10 ) )\n    for var6 in range ( 10 ) :\n        var3 [ 0 ] [ var6 ] = 1\n    for var6 in range ( 1 , var2 + 1 ) :\n        var3 [ var6 ] [ 9 ] = 1\n    for var6 in range ( 1 , var2 + 1 ) :\n        for var7 in range ( 8 , - 1 , - 1 ) :\n            var3 [ var6 ] [ var7 ] = var3 [ var6 - 1 ] [ var7 ] + var3 [ var6 ] [ var7 + 1 ]\n    return int ( var3 [ var2 ] [ 0 ] )"}
{"old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 for var4 in range ( 10 ) ] for var5 in range ( var2 + 1 ) ]\n    if ( var2 == 1 ) :\n        return 10\n    for var6 in range ( 10 ) :\n        var3 [ 1 ] [ var6 ] = 1\n    for var7 in range ( 2 , var2 + 1 ) :\n        for var6 in range ( 10 ) :\n            if ( var6 == 0 ) :\n                var3 [ var7 ] [ var6 ] = var3 [ var7 - 1 ] [ var6 + 1 ]\n            elif ( var6 == 9 ) :\n                var3 [ var7 ] [ var6 ] = var3 [ var7 - 1 ] [ var6 - 1 ]\n            else :\n                var3 [ var7 ] [ var6 ] = ( var3 [ var7 - 1 ] [ var6 - 1 ] + var3 [ var7 - 1 ] [ var6 + 1 ] )\n    sum = 0\n    for var6 in range ( 1 , 10 ) :\n        sum = sum + var3 [ var2 ] [ var6 ]\n    return sum"}
{"old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        if var2 [ var6 ] == 0 :\n            var4 += 1\n        if var2 [ var6 ] == 2 :\n            var5 += 1\n    var7 = ( var4 * ( var4 - 1 ) ) // 2 + \\\n        ( var5 * ( var5 - 1 ) ) // 2\n    return var7"}
{"old_id": "NUMBER_RECTANGLES_NM_GRID", "code": "def var1 ( var2 , var3 ) :\n    return ( var3 * var2 * ( var2 + 1 ) * ( var3 + 1 ) ) // 4"}
{"old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES", "code": "def var1 ( var2 , var3 ) :\n    var4 = len ( var2 )\n    var5 = 0\n    var6 = 0\n    var7 = 0\n    for var8 in range ( var4 ) :\n        if var2 [ var8 ] == 'a' :\n            var5 += 1\n        if var2 [ var8 ] == 'b' :\n            var6 += 1\n            var7 += var5\n    return var7 * var3 + int ( var3 * ( var3 - 1 ) / 2 ) * var5 * var6"}
{"old_id": "NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N", "code": "def var1 ( str , var2 ) :\n    var3 = len ( str )\n    var4 = [ [ 0 for var5 in range ( var2 ) ] for var6 in range ( var3 ) ]\n    var4 [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % var2 ] += 1\n    for var7 in range ( 1 , var3 ) :\n        var4 [ var7 ] [ ( ord ( str [ var7 ] ) - ord ( '0' ) ) % var2 ] += 1\n        for var8 in range ( var2 ) :\n            var4 [ var7 ] [ var8 ] += var4 [ var7 - 1 ] [ var8 ]\n            var4 [ var7 ] [ ( var8 * 10 + ( ord ( str [ var7 ] ) - ord ( '0' ) ) ) % var2 ] += var4 [ var7 - 1 ] [ var8 ]\n    return var4 [ var3 - 1 ] [ 0 ]"}
{"old_id": "NUMBER_SUBSTRINGS_STRING", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    return int ( var2 * ( var2 + 1 ) / 2 )"}
{"old_id": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES", "code": "def var1 ( var2 ) :\n    var3 = 0\n    for var4 in range ( 1 , int ( math.var5 ( var2 ) ) + 1 ) :\n        var6 = var4\n        while ( var6 * var4 <= var2 ) :\n            var3 += 1\n            var6 += 1\n    return var3"}
{"old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER", "code": "def var1 ( var2 , var3 ) :\n    var4 = collections.var5 ( [ ] )\n    var2 = var2 [ : var3 ]\n    var2.sort ( )\n    var4.append ( var2 [ 0 ] )\n    for var6 in range ( 1 , var3 ) :\n        var7 = var4 [ 0 ]\n        if ( var2 [ var6 ] >= 2 * var7 ) :\n            var4.var8 ( )\n        var4.append ( var2 [ var6 ] )\n    return len ( var4 )"}
{"old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ 0 ] * ( var3 + 1 )\n    var5 = [ False ] * ( var3 + 1 )\n    for var6 in range ( var3 + 1 ) :\n        var4 [ var6 ] = 0\n        var5 [ var6 ] = True\n    for var6 in range ( 2 , var3 + 1 ) :\n        if ( var5 [ var6 ] == True ) :\n            var4 [ var6 ] = 1\n            for var7 in range ( var6 * 2 , var3 + 1 , var6 ) :\n                var4 [ var7 ] += 1\n                var5 [ var7 ] = False\n    max = var4 [ var2 ]\n    var8 = var2\n    for var6 in range ( var2 , var3 + 1 ) :\n        if ( var4 [ var6 ] > max ) :\n            max = var4 [ var6 ]\n            var8 = var6\n    return var8"}
{"old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN", "code": "def var1 ( var2 ) :\n    count = 0\n    for var3 in itertools.count ( ) :\n        sum = 0\n        var4 = var3\n        while ( var4 ) :\n            sum = sum + var4 % 10\n            var4 = var4 // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == var2 ) :\n            return var3\n    return - 1"}
{"old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2", "code": "def var1 ( var2 ) :\n    var3 = 19 + ( var2 - 1 ) * 9\n    var4 = int ( math.var5 ( var3 ) ) - 1\n    var3 += 9 * var4\n    return var3"}
{"old_id": "N_TH_ROOT_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    random.var4 ( 1 )\n    var5 = random.var6 ( 1 , 101 ) % 10\n    var7 = 0.001\n    var8 = 2147483647\n    var9 = 0.0\n    while ( var8 > var7 ) :\n        var9 = ( ( var3 - 1.0 ) * var5 + var2 / pow ( var5 , var3 - 1 ) ) / var3\n        var8 = abs ( var9 - var5 )\n        var5 = var9\n    return var9"}
{"old_id": "N_TH_TERM_SERIES_2_12_36_80_150", "code": "def var1 ( var2 ) :\n    return ( var2 * var2 ) + ( var2 * var2 * var2 )"}
{"old_id": "OVERLAPPING_SUM_TWO_ARRAY", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = var6 ( lambda : 0 )\n    for var7 in range ( 0 , var4 ) :\n        var5 [ var2 [ var7 ] ] += 1\n        var5 [ var3 [ var7 ] ] += 1\n    var8 = 0\n    for var9 in var5 :\n        if var5 [ var9 ] == 1 :\n            var8 += var9\n    return var8"}
{"old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var3 < 2 :\n        return False\n    var5 = set ( )\n    for var6 in range ( 0 , var3 ) :\n        if var2 [ var6 ] == 0 :\n            if var4 == 0 :\n                return True\n            else :\n                continue\n        if var4 % var2 [ var6 ] == 0 :\n            if var4 // var2 [ var6 ] in var5 :\n                return True\n            var5.add ( var2 [ var6 ] )\n    return False"}
{"old_id": "PANGRAM_CHECKING", "code": "def var1 ( var2 ) :\n    var3 = [ ]\n    for var4 in range ( 26 ) :\n        var3.append ( False )\n    for var5 in var2 :\n        if 'A' <= var5 and var5 <= 'Z':\n            var3 [ ord ( var5 ) - ord ( 'A' ) ] = True\n        elif 'a' <= var5 and var5 <= 'z':\n            var3 [ ord ( var5 ) - ord ( 'a' ) ] = True\n    for var6 in var3 :\n        if var6 == False :\n            return False\n    return True"}
{"old_id": "PAPER_CUT_MINIMUM_NUMBER_SQUARES", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    if ( var2 < var3 ) :\n        var2 , var3 = var3 , var2\n    while ( var3 > 0 ) :\n        var4 += int ( var2 / var3 )\n        var5 = int ( var2 % var3 )\n        var2 = var3\n        var3 = var5\n    return var4"}
{"old_id": "PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var6 = 0\n    var7 = 0\n    for var8 in range ( var3 ) :\n        var5 += var2 [ var8 ]\n    var2.sort ( reverse = True )\n    var9 = max ( var4 , var3 - var4 )\n    for var8 in range ( var9 ) :\n        var6 += var2 [ var8 ]\n    var7 = var6 - ( var5 - var6 )\n    return var7"}
{"old_id": "PATH_MAXIMUM_AVERAGE_VALUE", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var3 + 1 ) ] for var6 in range ( var3 + 1 ) ]\n    var4 [ 0 ] [ 0 ] = var2 [ 0 ] [ 0 ]\n    for var5 in range ( 1 , var3 ) :\n        var4 [ var5 ] [ 0 ] = var4 [ var5 - 1 ] [ 0 ] + var2 [ var5 ] [ 0 ]\n    for var6 in range ( 1 , var3 ) :\n        var4 [ 0 ] [ var6 ] = var4 [ 0 ] [ var6 - 1 ] + var2 [ 0 ] [ var6 ]\n    for var5 in range ( 1 , var3 ) :\n        for var6 in range ( 1 , var3 ) :\n            var4 [ var5 ] [ var6 ] = max ( var4 [ var5 - 1 ] [ var6 ] , var4 [ var5 ] [ var6 - 1 ] ) + var2 [ var5 ] [ var6 ]\n    return var4 [ var3 - 1 ] [ var3 - 1 ] / ( 2 * var3 - 1 )"}
{"old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var2 = var2 [ : var4 ]\n    var3 = var3 [ : var4 ]\n    var2.sort ( reverse = True )\n    var3.sort ( )\n    for var6 in range ( var4 ) :\n        if ( var2 [ var6 ] + var3 [ var6 ] < var5 ) :\n            return False\n    return True"}
{"old_id": "PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES", "code": "def var1 ( var2 ) :\n    return int ( 1 + var2 * ( var2 + 1 ) / 2 )"}
{"old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 , var7 ) :\n    print ( \"Point inside the viewing pane:\" )\n    for var8 in range ( var3 ) :\n        if ( ( var2 [ var8 ] [ 0 ] >= var4 ) and ( var2 [ var8 ] [ 0 ] <= var6 ) ) :\n            if ( ( var2 [ var8 ] [ 1 ] >= var5 ) and ( var2 [ var8 ] [ 1 ] <= var7 ) ) :\n                print ( \"[\" , var2 [ var8 ] [ 0 ] , \", \" , var2 [ var8 ] [ 1 ] , \"]\" , var9 = \"\" , var10 = \"\" )\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    for var8 in range ( var3 ) :\n        if ( ( var2 [ var8 ] [ 0 ] < var4 ) or ( var2 [ var8 ] [ 0 ] > var6 ) ) :\n            print ( \"[\" , var2 [ var8 ] [ 0 ] , \", \" , var2 [ var8 ] [ 1 ] , \"]\" , var9 = \"\" , var10 = \"\" )\n        if ( ( var2 [ var8 ] [ 1 ] < var5 ) or ( var2 [ var8 ] [ 1 ] > var7 ) ) :\n            print ( \"[\" , var2 [ var8 ] [ 0 ] , \", \" , var2 [ var8 ] [ 1 ] , \"]\" , var9 = \"\" , var10 = \"\" )"}
{"old_id": "POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 1\n    while ( True ) :\n        while ( var4 < var3 and var2 [ var4 ] >= 0 ) :\n            var4 = var4 + 2\n        while ( var5 < var3 and var2 [ var5 ] <= 0 ) :\n            var5 = var5 + 2\n        if ( var4 < var3 and var5 < var3 ) :\n            var6 = var2 [ var4 ]\n            var2 [ var4 ] = var2 [ var5 ]\n            var2 [ var5 ] = var6\n        else :\n            break"}
{"old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES", "code": "def var1 ( var2 , var3 ) :\n    var2 = var2 [ : var3 ]\n    if var3 < 3 :\n        return False\n    var2.sort ( )\n    for var4 in range ( var3 - 2 ) :\n        if var2 [ var4 ] + var2 [ var4 + 1 ] > var2 [ var4 + 2 ] :\n            return True\n    return False"}
{"old_id": "PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1", "code": "def var1 ( var2 ) :\n    if ( var2 <= 1 ) :\n        return False\n    if ( var2 <= 3 ) :\n        return True\n    if ( var2 % 2 == 0 or var2 % 3 == 0 ) :\n        return False\n    var3 = 5\n    while ( var3 * var3 <= var2 ) :\n        if ( var2 % var3 == 0 or var2 % ( var3 + 2 ) == 0 ) :\n            return False\n        var3 = var3 + 6\n    return True"}
{"old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES", "code": "def var1 ( var2 ) :\n    var3 = 2 ** var2 - 1\n    var4 = 4 % var3\n    for var5 in range ( 1 , var2 - 1 ) :\n        var4 = ( var4 * var4 - 2 ) % var3\n    if ( var4 == 0 ) : return True\n    else : return False"}
{"old_id": "PRIME_NUMBERS", "code": "def var1 ( var2 ) :\n    if ( var2 <= 1 ) :\n        return False\n    for var3 in range ( 2 , var2 ) :\n        if ( var2 % var3 == 0 ) :\n            return False\n    return True"}
{"old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    for var4 in range ( 1 , var3 ) :\n        if ( var2 [ var4 ] == var2 [ var4 - 1 ] ) :\n            var2 [ var4 ] = \"a\"\n            while ( var2 [ var4 ] == var2 [ var4 - 1 ] or ( var4 + 1 < var3 and var2 [ var4 ] == var2 [ var4 + 1 ] ) ) :\n                var2 [ var4 ] += 1\n            var4 += 1\n    return var2"}
{"old_id": "PRINT_MATRIX_ANTISPIRAL_FORM", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var6 = 0\n    var7 = [ ]\n    while ( var5 <= var2 and var6 <= var3 ) :\n        for var8 in range ( var6 , var3 + 1 ) :\n            var7.append ( var4 [ var5 ] [ var8 ] )\n        var5 += 1\n        for var8 in range ( var5 , var2 + 1 ) :\n            var7.append ( var4 [ var8 ] [ var3 ] )\n        var3 -= 1\n        if ( var5 <= var2 ) :\n            for var8 in range ( var3 , var6 - 1 , - 1 ) :\n                var7.append ( var4 [ var2 ] [ var8 ] )\n            var2 -= 1\n        if ( var6 <= var3 ) :\n            for var8 in range ( var2 , var5 - 1 , - 1 ) :\n                var7.append ( var4 [ var8 ] [ var6 ] )\n            var6 += 1\n    while len ( var7 ) != 0 :\n        print ( str ( var7 [ - 1 ] ) , var9 = \" \" )\n        var7.pop ( )"}
{"old_id": "PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    var6 = 2\n    var7 = 0 if ( 0 > var5 ) else var5\n    var8 = 0 if ( 0 > var6 ) else var6 - 1\n    var9 = var3 - 1 if ( ( var5 + 1 ) >= var3 ) else var5 + 1\n    var10 = var4 - 1 if ( ( var6 + 1 ) >= var4 ) else var6 + 1\n    while ( ( var7 > 0 - var3 and var8 > 0 - var4 ) ) :\n        var11 = var8 + 1\n        while ( var11 <= var10 and var11 < var4 and var7 >= 0 ) :\n            print ( var2 [ var7 ] [ var11 ] , var12 = \" \" )\n            var11 += 1\n        var7 -= 1\n        var11 = var7 + 2\n        while ( var11 <= var9 and var11 < var3 and var10 < var4 ) :\n            print ( var2 [ var11 ] [ var10 ] , var12 = \" \" )\n            var11 += 1\n        var10 += 1\n        var11 = var10 - 2\n        while ( var11 >= var8 and var11 >= 0 and var9 < var3 ) :\n            print ( var2 [ var9 ] [ var11 ] , var12 = \" \" )\n            var11 -= 1\n        var9 += 1\n        var11 = var9 - 2\n        while ( var11 > var7 and var11 >= 0 and var8 >= 0 ) :\n            print ( var2 [ var11 ] [ var8 ] , var12 = \" \" )\n            var11 -= 1\n        var8 -= 1\n    print ( )"}
{"old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = dict ( )\n    for var6 in range ( var3 ) :\n        var7 = var2 [ var6 ]\n        var8 = min ( 1 + var6 , var3 - var6 )\n        if var7 not in var5.keys ( ) :\n            var5 [ var7 ] = var8\n        else :\n            var5 [ var7 ] = min ( var8 , var5 [ var7 ] )\n    var9 = sys.var10\n    for var6 in range ( var3 ) :\n        var7 = var2 [ var6 ]\n        if ( var7 != ( var4 - var7 ) and ( var4 - var7 ) in var5.keys ( ) ) :\n            var9 = min ( max ( var5 [ var7 ] , var5 [ var4 - var7 ] ) , var9 )\n    return var9"}
{"old_id": "PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP", "code": "def var1 ( var2 ) :\n    return ( 3.0 * var2 ) / ( 4.0 * ( var2 * var2 ) - 1 )"}
{"old_id": "PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ var2 , var3 ]\n    return ( var5 [ var4 ] )"}
{"old_id": "PROGRAM_AREA_SQUARE", "code": "def var1 ( var2 ) :\n    var3 = var2 * var2\n    return var3"}
{"old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ - 1 ] * var5\n    for var7 in range ( var5 ) :\n        var8 = - 1\n        for var9 in range ( var3 ) :\n            if var2 [ var9 ] >= var4 [ var7 ] :\n                if var8 == - 1 :\n                    var8 = var9\n                elif var2 [ var8 ] > var2 [ var9 ] :\n                    var8 = var9\n        if var8 != - 1 :\n            var6 [ var7 ] = var8\n            var2 [ var8 ] -= var4 [ var7 ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for var7 in range ( var5 ) :\n        print ( var7 + 1 , \"         \" , var4 [ var7 ] , var10 = \"         \" )\n        if var6 [ var7 ] != - 1 :\n            print ( var6 [ var7 ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1", "code": "def var1 ( var2 ) :\n    var3 = var2\n    var4 = 0\n    var5 = 1\n    var6 = len ( var3 )\n    for var7 in range ( var6 - 1 , - 1 , - 1 ) :\n        if ( var3 [ var7 ] == '1' ) :\n            var4 += var5\n        var5 = var5 * 2\n    return var4"}
{"old_id": "PROGRAM_CALCULATE_AREA_OCTAGON", "code": "def var1 ( var2 ) :\n    return ( 2 * ( 1 + ( math.var3 ( 2 ) ) ) * var2 * var2 )"}
{"old_id": "PROGRAM_CALCULATE_VOLUME_ELLIPSOID", "code": "def var1(var2, var3, var4):\n    var5 = 3.14\n    return 1.33 * var5 * var2 * var3 * var4"}
{"old_id": "PROGRAM_CALCULATE_VOLUME_OCTAHEDRON", "code": "def var1 ( var2 ) :\n    return ( ( var2 * var2 * var2 ) * ( math.var3 ( 2 ) / 3 ) )"}
{"old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE", "code": "def var1 ( var2 , var3 ) :\n    var4 = var2.split ( )\n    var5 = ''\n    var6 = '*' * len ( var3 )\n    count = 0\n    index = 0\n    for var7 in var4 :\n        if var7 == var3 :\n            var4 [ index ] = var6\n        index += 1\n    var5 = ' '.join ( var4 )\n    return var5"}
{"old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 == 0 or var3 == 1 ) :\n        return True\n    for var4 in range ( 1 , var3 ) :\n        if ( var2 [ var4 - 1 ] > var2 [ var4 ] ) :\n            return False\n    return True"}
{"old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING", "code": "def var1 ( var2 ) :\n    for var3 in range ( len ( var2 ) ) :\n        if var2 [ var3 ].isdigit ( ) != True :\n            return False\n    return True"}
{"old_id": "PROGRAM_CHECK_ISBN", "code": "def var1 ( var2 ) :\n    if len ( var2 ) != 10 :\n        return False\n    var3 = 0\n    for var4 in range ( 9 ) :\n        if 0 <= int ( var2 [ var4 ] ) <= 9 :\n            var3 += int ( var2 [ var4 ] ) * ( 10 - var4 )\n        else :\n            return False\n    if ( var2 [ 9 ] != 'X' and 0 <= int ( var2 [ 9 ] ) <= 9 ) :\n        return False\n    var3 += 10 if var2 [ 9 ] == 'X' else int ( var2 [ 9 ] )\n    return ( var3 % 11 == 0 )"}
{"old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING", "code": "def count ( var1 , var2 ) :\n    var3 = 0\n    for var4 in range ( len ( var1 ) ) :\n        if ( var1 [ var4 ] == var2 ) :\n            var3 = var3 + 1\n    return var3"}
{"old_id": "PROGRAM_DECIMAL_BINARY_CONVERSION_2", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    while ( var2 != 0 ) :\n        var5 = var2 % 2\n        var6 = pow ( 10 , var4 )\n        var3 += var5 * var6\n        var2 //= 2\n        var4 += 1\n    return var3"}
{"old_id": "PROGRAM_DISTANCE_TWO_POINTS_EARTH", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var4 = var6 ( var4 )\n    var5 = var6 ( var5 )\n    var2 = var6 ( var2 )\n    var3 = var6 ( var3 )\n    var7 = var5 - var4\n    var8 = var3 - var2\n    var9 = var10 ( var8 / 2 ) ** 2 + var11 ( var2 ) * var11 ( var3 ) * var10 ( var7 / 2 ) ** 2\n    var12 = 2 * var13 ( var14 ( var9 ) )\n    var15 = 6371\n    return ( var12 * var15 )"}
{"old_id": "PROGRAM_FIND_CIRCUMFERENCE_CIRCLE", "code": "def var1 ( var2 ) :\n    var3 = 3.1415\n    return ( 2 * var3 * var2 )"}
{"old_id": "PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11", "code": "def var1 ( str ) :\n    var2 = len ( str )\n    var3 = 0\n    for var4 in range ( 0 , var2 ) :\n        var5 = var3 * 10 + ( int ) ( str [ var4 ] )\n        var3 = var5 % 11\n    return var3"}
{"old_id": "PROGRAM_FIND_SLOPE_LINE", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    return ( float ) ( var5 - var3 ) / ( var4 - var2 )"}
{"old_id": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    var6 = 360\n    for var7 in range ( var3 ) :\n        var5 += var2 [ var7 ]\n        while var5 >= 180 :\n            var6 = min ( var6 , 2 * abs ( 180 - var5 ) )\n            var5 -= var2 [ var4 ]\n            var4 += 1\n        var6 = min ( var6 , 2 * abs ( 180 - var5 ) )\n    return var6"}
{"old_id": "PROGRAM_FIND_STRING_START_END_GEEKS", "code": "def var1 ( str , var2 ) :\n    var3 = len ( str )\n    var4 = len ( var2 )\n    if ( var3 < var4 ) :\n        return False\n    return ( ( str [ : var4 ] == var2 ) and ( str [ var3 - var4 : ] == var2 ) )"}
{"old_id": "PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var4 = var2 * ( var3 - 1 ) + 1\n    return var4"}
{"old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER", "code": "def var1 ( var2 ) :\n    return 1 if ( var2 == 1 or var2 == 0 ) else var2 * var1 ( var2 - 1 )"}
{"old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1", "code": "def var1 ( var2 ) :\n    return 1 if ( var2 == 1 or var2 == 0 ) else var2 * var1 ( var2 - 1 )"}
{"old_id": "PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON", "code": "def var1 ( var2 ) :\n    return ( 2 * ( math.var3 ( 3 ) ) * ( var2 * var2 ) )"}
{"old_id": "PROGRAM_OCTAL_DECIMAL_CONVERSION", "code": "def var1 ( var2 ) :\n    var3 = var2\n    var4 = 0\n    var5 = 1\n    var6 = var3\n    while ( var6 ) :\n        var7 = var6 % 10\n        var6 = int ( var6 / 10 )\n        var4 += var7 * var5\n        var5 = var5 * 8\n    return var4"}
{"old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( var3 ) :\n        for var5 in range ( var3 ) :\n            if ( var4 == var5 and var2 [ var4 ] [ var5 ] != 1 ) :\n                return False\n            elif ( var4 != var5 and var2 [ var4 ] [ var5 ] != 0 ) :\n                return False\n    return True"}
{"old_id": "PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1", "code": "def var1 ( var2 ) :\n    return int ( math.pow ( var2 , 2 ) )"}
{"old_id": "PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE", "code": "def var1 ( str ) :\n    var2 = [ ]\n    for var3 in range ( len ( str ) ) :\n        var2.append ( str [ var3 ] )\n    for var3 in range ( len ( str ) ) :\n        str [ var3 ] = var2.pop ( )"}
{"old_id": "PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * 10\n    while ( var2 > 0 ) :\n        var4 = math.var5 ( var2 % 10 )\n        if ( var3 [ var4 ] ) :\n            return False\n        var3 [ var4 ] = 1\n        var2 = int ( var2 / 10 )\n    return True"}
{"old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( var3 ) :\n        for var5 in range ( var3 ) :\n            if ( var2 [ var4 ] [ var5 ] != var2 [ var5 ] [ var4 ] ) :\n                return False\n    return True"}
{"old_id": "PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR", "code": "def var1 ( var2 , var3 ) :\n    return ( var2 - var3 * ( var2 // var3 ) )"}
{"old_id": "PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON", "code": "def var1 ( var2 ) :\n    var3 = ( var4 ( 5 * ( 5 + 2 * ( var4 ( 5 ) ) ) ) * var2 * var2 ) / 4\n    return var3"}
{"old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ - 1 ] * var5\n    for var7 in range ( var5 ) :\n        var8 = - 1\n        for var9 in range ( var3 ) :\n            if var2 [ var9 ] >= var4 [ var7 ] :\n                if var8 == - 1 :\n                    var8 = var9\n                elif var2 [ var8 ] < var2 [ var9 ] :\n                    var8 = var9\n        if var8 != - 1 :\n            var6 [ var7 ] = var8\n            var2 [ var8 ] -= var4 [ var7 ]\n    print ( \"Process No.Process Size Block no.\" )\n    for var7 in range ( var5 ) :\n        print ( var7 + 1 , \"         \" , var4 [ var7 ] , var10 = \"     \" )\n        if var6 [ var7 ] != - 1 :\n            print ( var6 [ var7 ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"old_id": "PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE", "code": "def var1 ( var2 ) :\n    return ( 4 * var2 )"}
{"old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    count = 0 ;\n    for var6 in range ( var3 ) :\n        if ( var2 [ var6 ] >= var4 and var2 [ var6 ] <= var5 ) :\n            count += 1\n    return count"}
{"old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    for var4 in range ( 1 , var3 ) :\n        if var2 [ var4 ] != var2 [ 0 ] :\n            return False\n    return True"}
{"old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM", "code": "def var1 ( var2 , var3 ) :\n    var4 = var3 * [ None ]\n    var5 , var6 = 0 , var3 - 1\n    var7 = True\n    for var8 in range ( var3 ) :\n        if var7 is True :\n            var4 [ var8 ] = var2 [ var6 ]\n            var6 -= 1\n        else :\n            var4 [ var8 ] = var2 [ var5 ]\n            var5 += 1\n        var7 = bool ( 1 - var7 )\n    for var8 in range ( var3 ) :\n        var2 [ var8 ] = var4 [ var8 ]\n    return var2"}
{"old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE", "code": "def var1 ( var2 , var3 ) :\n    var4 = var3 - 1\n    var5 = 0\n    var6 = var2 [ var3 - 1 ] + 1\n    for var7 in range ( 0 , var3 ) :\n        if var7 % 2 == 0 :\n            var2 [ var7 ] += ( var2 [ var4 ] % var6 ) * var6\n            var4 -= 1\n        else :\n            var2 [ var7 ] += ( var2 [ var5 ] % var6 ) * var6\n            var5 += 1\n    for var7 in range ( 0 , var3 ) :\n        var2 [ var7 ] = int ( var2 [ var7 ] / var6 )"}
{"old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 1\n    for var5 in range ( var3 ) :\n        if ( var2 [ var5 ] < 0 ) :\n            var4 += 1\n            var2 [ var4 ] , var2 [ var5 ] = var2 [ var5 ] , var2 [ var4 ]\n    var6 , var7 = var4 + 1 , 0\n    while ( var6 < var3 and var7 < var6 and var2 [ var7 ] < 0 ) :\n        var2 [ var7 ] , var2 [ var6 ] = var2 [ var6 ] , var2 [ var7 ]\n        var6 += 1\n        var7 += 2"}
{"old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 or var2 == 1 ) :\n        return var2\n    return max ( ( var1 ( var2 // 2 ) + var1 ( var2 // 3 ) + var1 ( var2 // 4 ) ) , var2 )"}
{"old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * ( var2 + 1 )\n    var3 [ 0 ] = 0\n    var3 [ 1 ] = 1\n    for var4 in range ( 2 , var2 + 1 ) :\n        var3 [ var4 ] = max ( var3 [ int ( var4 / 2 ) ] + var3 [ int ( var4 / 3 ) ] + var3 [ int ( var4 / 4 ) ] , var4 )\n    return var3 [ var2 ]"}
{"old_id": "RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if var4 < var3 :\n        return - 1\n    if var2 [ var3 ] == var5 :\n        return var3\n    if var2 [ var4 ] == var5 :\n        return var4\n    return var1 ( var2 , var3 + 1 , var4 - 1 , var5 )"}
{"old_id": "RECURSIVE_INSERTION_SORT", "code": "def var1 ( var2 , var3 ) :\n    if var3 <= 1 :\n        return\n    var1 ( var2 , var3 - 1 )\n    var4 = var2 [ var3 - 1 ]\n    var5 = var3 - 2\n    while ( var5 >= 0 and var2 [ var5 ] > var4 ) :\n        var2 [ var5 + 1 ] = var2 [ var5 ]\n        var5 = var5 - 1\n    var2 [ var5 + 1 ] = var4"}
{"old_id": "RECURSIVE_PROGRAM_PRIME_NUMBER", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 <= 2 ) :\n        return True if ( var2 == 2 ) else False\n    if ( var2 % var3 == 0 ) :\n        return False\n    if ( var3 * var3 > var2 ) :\n        return var4\n    return var1 ( var2 , var3 + 1 )"}
{"old_id": "REMAINDER_7_LARGE_NUMBERS", "code": "def var1 ( var2 ) :\n    var3 = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]\n    var4 = 0\n    var5 = 0\n    for var6 in range ( ( len ( var2 ) - 1 ) , - 1 , - 1 ) :\n        var7 = ord ( var2 [ var6 ] ) - 48\n        var5 += var7 * var3 [ var4 ]\n        var4 = ( var4 + 1 ) % 6\n        var5 %= 7\n    if ( var5 < 0 ) :\n        var5 = ( var5 + 7 ) % 7\n    return var5"}
{"old_id": "REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    if ( var4 == var5 ) :\n        return var3 [ var4 ] * var6\n    if ( var2 [ var4 ] [ var5 ] != 0 ) :\n        return var2 [ var4 ] [ var5 ]\n    var2 [ var4 ] [ var5 ] = max ( var3 [ var4 ] * var6 + var1 ( var2 , var3 , var4 + 1 , var5 , var6 + 1 ) , var3 [ var5 ] * var6 + var1 ( var2 , var3 , var4 , var5 - 1 , var6 + 1 ) ) ;\n    return var2 [ var4 ] [ var5 ]"}
{"old_id": "REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    var4 = [ None ] * var3\n    index = 0\n    var5 = 0\n    var6 = [ ]\n    var6.append ( 0 )\n    while ( var5 < var3 ) :\n        if ( var2 [ var5 ] == '+' ) :\n            if ( var6 [ - 1 ] == 1 ) :\n                var4 [ index ] = '-'\n                index += 1\n            if ( var6 [ - 1 ] == 0 ) :\n                var4 [ index ] = '+'\n                index += 1\n        elif ( var2 [ var5 ] == '-' ) :\n            if ( var6 [ - 1 ] == 1 ) :\n                var4 [ index ] = '+'\n                index += 1\n            elif ( var6 [ - 1 ] == 0 ) :\n                var4 [ index ] = '-'\n                index += 1\n        elif ( var2 [ var5 ] == '(' and var5 > 0 ) :\n            if ( var2 [ var5 - 1 ] == '-' ) :\n                var7 = 0 if ( var6 [ - 1 ] == 1 ) else 1\n                var6.append ( var7 )\n            elif ( var2 [ var5 - 1 ] == '+' ) :\n                var6.append ( var6 [ - 1 ] )\n        elif ( var2 [ var5 ] == ')' ) :\n            var6.pop ( )\n        else :\n            var4 [ index ] = var2 [ var5 ]\n            index += 1\n        var5 += 1\n    return \"\".join(var4)"}
{"old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    if ( var3 < 2 ) :\n        return\n    var4 = 0\n    for var5 in range ( 1 , var3 ) :\n        if ( var2 [ var4 ] != var2 [ var5 ] ) :\n            var4 += 1\n            var2 [ var4 ] = var2 [ var5 ]\n    var4 += 1\n    var2 = var2 [ : var4 ]"}
{"old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 1\n    var5 = 0\n    for var6 in range ( var3 ) :\n        min = sys.var7\n        max = - sys.var7\n        for var8 in range ( var6 , var3 ) :\n            var9 = var2 [ var8 ]\n            if ( var9 < min ) :\n                min = var9\n            if ( var9 > max ) :\n                max = var9\n            if ( 2 * min <= max ) :\n                break\n            if ( var8 - var6 > var5 - var4 or var4 == - 1 ) :\n                var4 = var6\n                var5 = var8\n    if ( var4 == - 1 ) :\n        return var3\n    return ( var3 - ( var5 - var4 + 1 ) )"}
{"old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S", "code": "def replace ( var1 , var2 , var3 ) :\n    var4 = len ( var1 )\n    for var5 in range ( var4 ) :\n        if ( var1 [ var5 ] == var2 ) :\n            var1 = var1 [ 0 : var5 ] + var3 + var1 [ var5 + 1 : ]\n        elif ( var1 [ var5 ] == var3 ) :\n            var1 = var1 [ 0 : var5 ] + var2 + var1 [ var5 + 1 : ]\n    return var1"}
{"old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    for var5 in range ( var3 ) :\n        if var2 [ var5 ] [ var5 ] == var2 [ var5 ] [ var3 - var5 - 1 ] :\n            var4 = var4 + 1\n    return var4"}
{"old_id": "SEARCHING_ARRAY_ADJACENT_DIFFER_K", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = 0\n    while ( var6 < var3 ) :\n        if ( var2 [ var6 ] == var4 ) :\n            return var6\n        var6 = var6 + max ( 1 , int ( abs ( var2 [ var6 ] - var4 ) / var5 ) )\n    print ( \"number is not present!\" )\n    return - 1"}
{"old_id": "SEARCH_ALMOST_SORTED_ARRAY", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if ( var4 >= var3 ) :\n        var6 = int ( var3 + ( var4 - var3 ) / 2 )\n        if ( var2 [ var6 ] == var5 ) : return var6\n        if ( var6 > var3 and var2 [ var6 - 1 ] == var5 ) :\n            return ( var6 - 1 )\n        if ( var6 < var4 and var2 [ var6 + 1 ] == var5 ) :\n            return ( var6 + 1 )\n        if ( var2 [ var6 ] > var5 ) :\n            return var1 ( var2 , var3 , var6 - 2 , var5 )\n        return var1 ( var2 , var6 + 2 , var4 , var5 )\n    return - 1"}
{"old_id": "SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    while ( var5 < var3 ) :\n        if ( var2 [ var5 ] == var4 ) :\n            return var5\n        var5 = var5 + abs ( var2 [ var5 ] - var4 )\n    print ( \"number is not present!\" )\n    return - 1"}
{"old_id": "SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if var3 > var4 :\n        return - 1\n    var6 = ( var3 + var4 ) // 2\n    if var2 [ var6 ] == var5 :\n        return var6\n    if var2 [ var3 ] <= var2 [ var6 ] :\n        if var5 >= var2 [ var3 ] and var5 <= var2 [ var6 ] :\n            return var1 ( var2 , var3 , var6 - 1 , var5 )\n        return var1 ( var2 , var6 + 1 , var4 , var5 )\n    if var5 >= var2 [ var6 ] and var5 <= var2 [ var4 ] :\n        return var1 ( var2 , var6 + 1 , var4 , var5 )\n    return var1 ( var2 , var3 , var6 - 1 , var5 )"}
{"old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if ( var4 < var3 ) :\n        return - 1\n    var6 = ( var3 + var4 ) / 2\n    if ( var5 == var2 [ int ( var6 ) ] ) :\n        return var6\n    if ( var5 > var2 [ int ( var6 ) ] ) :\n        return var1 ( var2 , ( var6 + 1 ) , var4 , var5 )\n    return ( var1 ( var2 , var3 , ( var6 - 1 ) , var5 ) )"}
{"old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    if ( var3 >= var5 ) :\n        return var3\n    var6 = var3 - 1\n    while var6 >= 0 and var2 [ var6 ] > var4 :\n        var2 [ var6 + 1 ] = var2 [ var6 ]\n        var6 -= 1\n    var2 [ var6 + 1 ] = var4\n    return ( var3 + 1 )"}
{"old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 1\n    var5 = 0\n    while ( var5 != var3 ) :\n        if ( var2 [ var5 ] % 2 == 0 ) :\n            var4 = var4 + 1\n            var2 [ var4 ] , var2 [ var5 ] = var2 [ var5 ] , var2 [ var4 ]\n        var5 = var5 + 1\n    for var4 in var2 :\n        print ( str ( var4 ) + \" \" , var6 = '' )"}
{"old_id": "SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE", "code": "def var1 ( var2 ) :\n    var3 = 0\n    count = 0\n    count += 1\n    if ( count == 1 ) :\n        var3 = var2\n    else :\n        var4 = random.var5 ( count )\n        if ( var4 == count - 1 ) :\n            var3 = var2\n    return var3"}
{"old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ [ 0 for var5 in range ( var3 + 1 ) ] for var5 in range ( var2 + 1 ) ]\n    for var5 in range ( var2 + 1 ) :\n        for var6 in range ( var3 + 1 ) :\n            if var5 == 0 or var6 == 0 :\n                var4 [ var5 ] [ var6 ] = 0\n            elif var5 < var6 :\n                var4 [ var5 ] [ var6 ] = 0\n            elif var6 == 1 :\n                var4 [ var5 ] [ var6 ] = var5\n            else :\n                var4 [ var5 ] [ var6 ] = var4 [ var5 - 1 ] [ var6 ] + var4 [ var5 // 2 ] [ var6 - 1 ]\n    return var4 [ var2 ] [ var3 ]"}
{"old_id": "SHUFFLE_A_GIVEN_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( var3 - 1 , 0 , - 1 ) :\n        var5 = random.var6 ( 0 , var4 + 1 )\n        var2 [ var4 ] , var2 [ var5 ] = var2 [ var5 ] , var2 [ var4 ]\n    return var2"}
{"old_id": "SIZE_SUBARRAY_MAXIMUM_SUM", "code": "def var1 ( var2 , var3 ) :\n    var4 = - var5 - 1\n    var6 = 0\n    var7 = 0\n    var8 = 0\n    var9 = 0\n    for var10 in range ( 0 , var3 ) :\n        var6 += var2 [ var10 ]\n        if var4 < var6 :\n            var4 = var6\n            var7 = var9\n            var8 = var10\n        if var6 < 0 :\n            var6 = 0\n            var9 = var10 + 1\n    return ( var8 - var7 + 1 )"}
{"old_id": "SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var2 = var2 [ : var4 ]\n    var3 = var3 [ : var5 ]\n    var2.sort ( )\n    var3.sort ( )\n    var6 = 0\n    var7 = 0\n    var8 = sys.var9\n    while ( var6 < var4 and var7 < var5 ) :\n        if ( abs ( var2 [ var6 ] - var3 [ var7 ] ) < var8 ) :\n            var8 = abs ( var2 [ var6 ] - var3 [ var7 ] )\n        if ( var2 [ var6 ] < var3 [ var7 ] ) :\n            var6 += 1\n        else :\n            var7 += 1\n    return var8"}
{"old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = 0\n    while ( var2 and var3 and var4 ) :\n        var2 = var2 - 1\n        var3 = var3 - 1\n        var4 = var4 - 1\n        var5 = var5 + 1\n    return var5"}
{"old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1", "code": "def var1 ( var2 , var3 , var4 ) :\n    if ( not int ( var3 / var2 ) ) :\n        return var3 if ( not int ( var3 / var4 ) ) else var4\n    return var2 if ( not int ( var2 / var4 ) ) else var4"}
{"old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1", "code": "def var1 ( var2 ) :\n    var3 = 1\n    if ( var2 and not ( var2 & ( var2 - 1 ) ) ) :\n        return var2\n    while ( var3 < var2 ) :\n        var3 <<= 1\n    return var3"}
{"old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2", "code": "def var1 ( var2 ) :\n    var2 -= 1\n    var2 |= var2 >> 1\n    var2 |= var2 >> 2\n    var2 |= var2 >> 4\n    var2 |= var2 >> 8\n    var2 |= var2 >> 16\n    var2 += 1\n    return var2"}
{"old_id": "SORT_AN_ARRAY_OF_0S_1S_AND_2S", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = var3 - 1\n    var6 = 0\n    while var6 <= var5 :\n        if var2 [ var6 ] == 0 :\n            var2 [ var4 ] , var2 [ var6 ] = var2 [ var6 ] , var2 [ var4 ]\n            var4 = var4 + 1\n            var6 = var6 + 1\n        elif var2 [ var6 ] == 1 :\n            var6 = var6 + 1\n        else :\n            var2 [ var6 ] , var2 [ var5 ] = var2 [ var5 ] , var2 [ var6 ]\n            var5 = var5 - 1"}
{"old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION", "code": "def var1 ( var2 , var3 , var4 , var5 , var6 ) :\n    for var7 in range ( var3 ) :\n        var2 [ var7 ] = ( var4 * var2 [ var7 ] * var2 [ var7 ] + var5 * var2 [ var7 ] + var6 )\n    index = - ( sys.var8 - 1 )\n    var9 = - ( sys.var8 - 1 )\n    for var7 in range ( var3 ) :\n        if var9 < var2 [ var7 ] :\n            index = var7\n            var9 = var2 [ var7 ]\n    var7 = 0\n    var10 = var3 - 1\n    var11 = [ 0 ] * var3\n    var12 = 0\n    while var7 < index and var10 > index :\n        if var2 [ var7 ] < var2 [ var10 ] :\n            var11 [ var12 ] = var2 [ var7 ]\n            var12 += 1\n            var7 += 1\n        else :\n            var11 [ var12 ] = var2 [ var10 ]\n            var12 += 1\n            var10 -= 1\n    while var7 < index :\n        var11 [ var12 ] = var2 [ var7 ]\n        var12 += 1\n        var7 += 1\n    while var10 > index :\n        var11 [ var12 ] = var2 [ var10 ]\n        var12 += 1\n        var10 -= 1\n        var11 [ var3 - 1 ] = var9\n    for var7 in range ( var3 ) :\n        var2 [ var7 ] = var11 [ var7 ]"}
{"old_id": "SORT_ARRAY_CONTAIN_1_N_VALUES", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( var3 ) :\n        var2 [ var4 ] = var4 + 1"}
{"old_id": "SORT_ARRAY_TWO_HALVES_SORTED", "code": "def var1 ( var2 , var3 ) :\n    var2.sort ( )"}
{"old_id": "SORT_ARRAY_WAVE_FORM_2_1", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( 0 , var3 , 2 ) :\n        if ( var4 > 0 and var2 [ var4 ] < var2 [ var4 - 1 ] ) :\n            var2 [ var4 ] , var2 [ var4 - 1 ] = var2 [ var4 - 1 ] , var2 [ var4 ]\n        if ( var4 < var3 - 1 and var2 [ var4 ] < var2 [ var4 + 1 ] ) :\n            var2 [ var4 ] , var2 [ var4 + 1 ] = var2 [ var4 + 1 ] , var2 [ var4 ]"}
{"old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1", "code": "def var1 ( var2 , var3 ) :\n    for var4 in range ( 0 , var3 ) :\n        if ( var2 [ var4 ] & 1 ) :\n            var2 [ var4 ] *= - 1\n    var2.sort ( )\n    for var4 in range ( 0 , var3 ) :\n        if ( var2 [ var4 ] & 1 ) :\n            var2 [ var4 ] *= - 1"}
{"old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ ]\n    var5 = [ ]\n    for var6 in range ( var3 ) :\n        if ( ( var6 % 2 ) == 0 ) :\n            var4.append ( var2 [ var6 ] )\n        else :\n            var5.append ( var2 [ var6 ] )\n    var4 = sorted ( var4 )\n    var5 = sorted ( var5 )\n    var5 = var5 [ : : - 1 ]\n    var6 = 0\n    for var7 in range ( len ( var4 ) ) :\n        var2 [ var6 ] = var4 [ var7 ]\n        var6 += 1\n    for var7 in range ( len ( var5 ) ) :\n        var2 [ var6 ] = var5 [ var7 ]\n        var6 += 1"}
{"old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ [ 0 for var7 in range ( var5 + 1 ) ] for var7 in range ( 2 ) ]\n    var7 = 0\n    while var7 < var4 :\n        var8 = 0\n        if var7 % 2 == 0 :\n            while var8 < var5 :\n                var8 += 1\n                if var3 [ var7 ] <= var8 and var8 - var3 [ var7 ] < var5:\n                    var6 [ 1 ] [ var8 ] = max ( var2 [ var7 ] + var6 [ 0 ] [ var8 - var3 [ var7 ] ] , var6 [ 0 ] [ var8 ] )\n                else :\n                    var6 [ 1 ] [ var8 ] = var6 [ 0 ] [ var8 ]\n        else :\n            while var8 < var5 :\n                var8 += 1\n                if var3 [ var7 ] <= var8 and var8 - var3 [ var7 ] < var5:\n                    var6 [ 0 ] [ var8 ] = max ( var2 [ var7 ] + var6 [ 1 ] [ var8 - var3 [ var7 ] ] , var6 [ 1 ] [ var8 ] )\n                else :\n                    var6 [ 0 ] [ var8 ] = var6 [ 1 ] [ var8 ]\n        var7 += 1\n    if var4 % 2 == 0 :\n        return var6 [ 0 ] [ var5 ]\n    else :\n        return var6 [ 1 ] [ var5 ]"}
{"old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = [ 0 ] * ( var5 + 1 )\n    for var7 in range ( var4 ) :\n        for var8 in range ( var5 , -1 , - 1 ) :\n            if var8 - var3 [ var7 ] < var5 + 1 and var8 - var3 [ var7 ] >= 0:\n                var6 [ var8 ] = max ( var6 [ var8 ] , var2 [ var7 ] + var6 [ var8 - var3 [ var7 ] ] )\n    return var6 [ var5 ]"}
{"old_id": "SPLIT_ARRAY_ADD_FIRST_PART_END", "code": "def var1 ( var2 , var3 , var4 ) :\n    for var5 in range ( 0 , var4 ) :\n        var6 = var2 [ 0 ]\n        for var7 in range ( 0 , var3 - 1 ) :\n            var2 [ var7 ] = var2 [ var7 + 1 ]\n        var2 [ var3 - 1 ] = var6"}
{"old_id": "SQUARED_TRIANGULAR_NUMBER_SUM_CUBES", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 1\n    while ( var3 < var2 ) :\n        var3 += var4 * var4 * var4\n        var4 += 1\n    var4 -= 1\n    if var3 == var2 :\n        return var4\n    return - 1"}
{"old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS", "code": "def var1 ( var2 , var3 , var4 ) :\n    print ( \"Diagonal one : \" , var5 = \"\" )\n    for var6 in range ( 0 , var3 ) :\n        for var7 in range ( 0 , var4 ) :\n            if ( var6 == var7 ) :\n                print ( \"{} \".format ( var2 [ var6 ] [ var7 ] * var2 [ var6 ] [ var7 ] ) , var5 = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , var5 = \"\" )\n    for var6 in range ( 0 , var3 ) :\n        for var7 in range ( 0 , var4 ) :\n            if ( var6 + var7 == var4 - 1 ) :\n                print ( \"{} \".format ( var2 [ var6 ] [ var7 ] * var2 [ var6 ] [ var7 ] ) , var5 = \"\" )"}
{"old_id": "SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 1\n    while ( var3 < var2 ) :\n        var3 += var4 * var4\n        var4 += 1\n    var4 -= 1\n    if var3 == var2 :\n        return var4\n    return - 1"}
{"old_id": "SQUARE_ROOT_OF_AN_INTEGER", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 or var2 == 1 ) :\n        return var2\n    var3 = 1\n    var4 = 1\n    while ( var4 <= var2 ) :\n        var3 += 1\n        var4 = var3 * var3\n    return var3 - 1"}
{"old_id": "SQUARE_ROOT_OF_A_PERFECT_SQUARE", "code": "def var1 ( var2 ) :\n    var3 = var2\n    var4 = 1\n    var5 = 0.000001\n    while ( var3 - var4 > var5 ) :\n        var3 = ( var3 + var4 ) / 2\n        var4 = var2 / var3\n    return var3"}
{"old_id": "STACK_SET_3_REVERSE_STRING_USING_STACK", "code": "def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string"}
{"old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 == 0 ) :\n        return var3\n    if ( var3 == 0 ) :\n        return var2\n    var4 = 0\n    while ( ( ( var2 | var3 ) & 1 ) == 0 ) :\n        var2 = var2 >> 1\n        var3 = var3 >> 1\n        var4 = var4 + 1\n    while ( ( var2 & 1 ) == 0 ) :\n        var2 = var2 >> 1\n    while ( var3 != 0 ) :\n        while ( ( var3 & 1 ) == 0 ) :\n            var3 = var3 >> 1\n        if ( var2 > var3 ) :\n            var5 = var2\n            var2 = var3\n            var3 = var5\n        var3 = ( var3 - var2 )\n    return ( var2 << var4 )"}
{"old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD_1", "code": "def var1 ( var2 , var3 ) :\n    if ( var2 == var3 ) :\n        return var2\n    if ( var2 == 0 ) :\n        return var3\n    if ( var3 == 0 ) :\n        return var2\n    if ( ( ~ var2 & 1 ) == 1 ) :\n        if ( ( var3 & 1 ) == 1 ) :\n            return var1 ( var2 >> 1 , var3 )\n        else :\n            return ( var1 ( var2 >> 1 , var3 >> 1 ) << 1 )\n    if ( ( ~ var3 & 1 ) == 1 ) :\n        return var1 ( var2 , var3 >> 1 )\n    if ( var2 > var3 ) :\n        return var1 ( ( var2 - var3 ) >> 1 , var3 )\n    return var1 ( ( var3 - var2 ) >> 1 , var2 )"}
{"old_id": "STOOGE_SORT", "code": "def var1 ( var2 , var3 , var4 ) :\n    if var3 >= var4 :\n        return\n    if var2 [ var3 ] > var2 [ var4 ] :\n        var5 = var2 [ var3 ]\n        var2 [ var3 ] = var2 [ var4 ]\n        var2 [ var4 ] = var5\n    if var4 - var3 + 1 > 2 :\n        var5 = ( int ) ( ( var4 - var3 + 1 ) / 3 )\n        var1 ( var2 , var3 , ( var4 - var5 ) )\n        var1 ( var2 , var3 + var5 , ( var4 ) )\n        var1 ( var2 , var3 , ( var4 - var5 ) )"}
{"old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES", "code": "def var1 ( str ) :\n    var2 = \"\"\n    var3 = True\n    for var4 in range ( len ( str ) ) :\n        if ( str [ var4 ] == ' ' ) :\n            var3 = True\n        elif ( str [ var4 ] != ' ' and var3 == True ) :\n            var2 += ( str [ var4 ] )\n            var3 = False\n    return var2"}
{"old_id": "SUBARRAYS_DISTINCT_ELEMENTS", "code": "def var1 ( var2 , var3 ) :\n    var4 = [ ]\n    var5 = 0\n    var6 = 0\n    for var7 in range ( var3 ) :\n        while ( var5 < var3 and ( var2 [ var5 ] not in var4 ) ) :\n            var4.append ( var2 [ var5 ] )\n            var5 += 1\n        var6 += ( ( var5 - var7 ) * ( var5 - var7 + 1 ) ) // 2\n        var4.remove ( var2 [ var7 ] )\n    return var6"}
{"old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE", "code": "def var1 ( var2 , var3 , sum ) :\n    var4 = [ [ False for var5 in range ( sum + 1 ) ] for var6 in range ( 3 ) ]\n    for var6 in range ( var3 + 1 ) :\n        for var5 in range ( sum + 1 ) :\n            if ( var5 == 0 ) :\n                var4 [ var6 % 2 ] [ var5 ] = True\n            elif ( var6 == 0 ) :\n                var4 [ var6 % 2 ] [ var5 ] = False\n            elif ( var2 [ var6 - 1 ] <= var5 ) :\n                var4 [ var6 % 2 ] [ var5 ] = var4 [ ( var6 + 1 ) % 2 ] [ var5 - var2 [ var6 - 1 ] ] or var4 [ ( var6 + 1 ) % 2 ] [ var5 ]\n            else :\n                var4 [ var6 % 2 ] [ var5 ] = var4 [ ( var6 + 1 ) % 2 ] [ var5 ]\n    return var4 [ var3 % 2 ] [ sum ]"}
{"old_id": "SUM_AREA_RECTANGLES_POSSIBLE_ARRAY", "code": "def var1 ( var2 , var3 ) :\n    var2 = var2 [ : var3 ]\n    var2.sort (  )\n    sum = 0\n    var4 = False\n    len = 0\n    var5 = 0\n    while ( var5 < var3 - 1 ) :\n        if ( ( var2 [ var5 ] == var2 [ var5 + 1 ] or var2 [ var5 ] - var2 [ var5 + 1 ] == 1 ) and var4 == False ) :\n            var4 = True\n            len = var2 [ var5 + 1 ]\n            var5 = var5 + 1\n        elif ( ( var2 [ var5 ] == var2 [ var5 + 1 ] or var2 [ var5 ] - var2 [ var5 + 1 ] == 1 ) and var4 == True ) :\n            sum = sum + var2 [ var5 + 1 ] * len\n            var4 = False\n            var5 = var5 + 1\n        var5 += 1\n    return sum"}
{"old_id": "SUM_BINOMIAL_COEFFICIENTS", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 ] * ( var2 + 2 ) for var4 in range ( 0 , var2 + 2 ) ]\n    for var4 in range ( 0 , var2 + 1 ) :\n        for var5 in range ( 0 , min ( var4 , var2 ) + 1 ) :\n            if ( var5 == 0 or var5 == var4 ) :\n                var3 [ var4 ] [ var5 ] = 1\n            else :\n                var3 [ var4 ] [ var5 ] = var3 [ var4 - 1 ] [ var5 - 1 ] + var3 [ var4 - 1 ] [ var5 ]\n    sum = 0\n    for var4 in range ( 0 , var2 + 1 ) :\n        sum += var3 [ var2 ] [ var4 ]\n    return sum"}
{"old_id": "SUM_BINOMIAL_COEFFICIENTS_1", "code": "def var1 ( var2 ) :\n    return ( 1 << var2 )"}
{"old_id": "SUM_DIVISORS_1_N_1", "code": "def var1 ( var2 ) :\n    sum = 0\n    for var3 in range ( 1 , var2 + 1 ) :\n        sum += int ( var2 / var3 ) * var3\n    return int ( sum )"}
{"old_id": "SUM_FACTORS_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = 0\n    for var4 in range ( 2 , ( int ) ( math.var5 ( var2 ) ) + 1 ) :\n        if ( var2 % var4 == 0 ) :\n            if ( var4 == ( var2 / var4 ) ) :\n                var3 = var3 + var4\n            else :\n                var3 = var3 + ( var4 + var2 // var4 )\n    return ( var3 + var2 + 1 )"}
{"old_id": "SUM_FIBONACCI_NUMBERS", "code": "def var1 ( var2 ) :\n    if ( var2 <= 0 ) :\n        return 0\n    var3 = [ 0 ] * ( var2 + 1 )\n    var3 [ 1 ] = 1\n    var4 = var3 [ 0 ] + var3 [ 1 ]\n    for var5 in range ( 2 , var2 + 1 ) :\n        var3 [ var5 ] = var3 [ var5 - 1 ] + var3 [ var5 - 2 ]\n        var4 = var4 + var3 [ var5 ]\n    return var4"}
{"old_id": "SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS", "code": "def var1 ( var2 ) :\n    var3 = int ( ( var2 * ( var2 - 1 ) ) + 1 )\n    sum = 0\n    while var2 :\n        sum += var3\n        var3 += 2\n        var2 = var2 - 1\n    return sum"}
{"old_id": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS", "code": "def var1 ( var2 , var3 , var4 ) :\n    sum = 0\n    for var5 in range ( var4 ) :\n        for var6 in range ( var5 + 1 , var4 ) :\n            sum += ( abs ( var2 [ var5 ] - var2 [ var6 ] ) + abs ( var3 [ var5 ] - var3 [ var6 ] ) )\n    return sum"}
{"old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 for var4 in range ( var2 ) ] for var5 in range ( var2 ) ]\n    for var6 in range ( var2 ) :\n        for var7 in range ( var2 ) :\n            var3 [ var6 ] [ var7 ] = abs ( var6 - var7 )\n    sum = 0\n    for var6 in range ( var2 ) :\n        for var7 in range ( var2 ) :\n            sum += var3 [ var6 ] [ var7 ]\n    return sum"}
{"old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2", "code": "def var1 ( var2 ) :\n    var2 -= 1\n    sum = 0\n    sum += ( var2 * ( var2 + 1 ) ) / 2\n    sum += ( var2 * ( var2 + 1 ) * ( 2 * var2 + 1 ) ) / 6\n    return int ( sum )"}
{"old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    for var5 in range ( 1 , var2 + 1 ) :\n        if var4 < var2 :\n            var4 = var5 - 1\n            var6 = 1\n            while var4 < var2 :\n                if var4 + var5 <= var2 :\n                    var3 += var5 * var6\n                else :\n                    var3 += ( var2 - var4 ) * var6\n                var4 += var5\n                var6 += 1\n    return var3"}
{"old_id": "SUM_MIDDLE_ROW_COLUMN_MATRIX", "code": "def var1 ( var2 , var3 ) :\n    var4 = 0\n    var5 = 0\n    for var6 in range ( var3 ) :\n        var4 += var2 [ var3 // 2 ] [ var6 ]\n    print ( \"Sum of middle row = \" , var4 )\n    for var6 in range ( var3 ) :\n        var5 += var2 [ var6 ] [ var3 // 2 ]\n    print ( \"Sum of middle column = \" , var5 )"}
{"old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING", "code": "def var1 ( var2 , var3 ) :\n    var4 = - 1\n    sum = 0\n    var5 = len ( var2 )\n    for var6 in range ( var5 ) :\n        if ( var2 [ var6 ] == '(' ) :\n            var4 += 1\n        elif ( var2 [ var6 ] == ')' ) :\n            var4 -= 1\n        else :\n            if ( var4 == var3 ) :\n                sum += ( ord ( var2 [ var6 ] ) - ord ( '0' ) )\n    return sum"}
{"old_id": "SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1", "code": "def var1 ( var2 ) :\n    sum = 0\n    sum = 1 << var2\n    return ( sum - 1 )"}
{"old_id": "SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER", "code": "def var1 ( var2 ) :\n    var3 = len ( var2 )\n    var4 = [ ]\n    var4.append ( ord ( var2 [ 0 ] ) - ord('0') )\n    var5 = var4 [ 0 ]\n    for var6 in range ( 1 , var3 ) :\n        var7 = ord ( var2 [ var6 ] ) - ord ( '0' )\n        var4.append ( ( var6 + 1 ) + var7 + 10 + var4 [ var6 - 1 ] )\n        var5 += var4 [ var6 ]\n    return var5"}
{"old_id": "SUM_PAIRWISE_PRODUCTS", "code": "def var1 ( var2 ) :\n    var3 = 0\n    for var4 in range ( 1 , var2 + 1 ) :\n        for var5 in range ( var4 , var2 + 1 ) :\n            var3 = var3 + var4 * var5\n    return var3"}
{"old_id": "SUM_PAIRWISE_PRODUCTS_1", "code": "def var1 ( var2 ) :\n    var3 = var2 * ( var2 + 1 ) // 2\n    var4 = var3\n    for var5 in range ( 2 , var2 + 1 ) :\n        var3 = var3 - ( var5 - 1 )\n        var4 = var4 + var3 * var5\n    return var4"}
{"old_id": "SUM_PAIRWISE_PRODUCTS_2", "code": "def var1 ( var2 ) :\n    return var2 * ( var2 + 1 ) * ( var2 + 2 ) * ( 3 * var2 + 1 ) / 24"}
{"old_id": "SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS", "code": "def var1 ( var2 ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , var2 ) ) )"}
{"old_id": "SUM_SERIES_12_32_52_2N_12", "code": "def var1 ( var2 ) :\n    sum = 0\n    for var3 in range ( 1 , var2 + 1 ) :\n        sum = sum + ( 2 * var3 - 1 ) * ( 2 * var3 - 1 )\n    return sum"}
{"old_id": "SUM_SERIES_23_45_67_89_UPTO_N_TERMS", "code": "def var1 ( var2 ) :\n    var3 = 1\n    var4 = 0.0\n    var5 = True\n    while ( var2 > 0 ) :\n        var2 = var2 - 1\n        if ( var5 ) :\n            var5 = False\n            var4 = var4 + ( var3 + 1 ) / ( var3 + 2 )\n            var3 = var3 + 2\n        else :\n            var5 = True\n            var4 = var4 - ( var3 + 1 ) / ( var3 + 2 )\n            var3 = var3 + 2\n    return var4"}
{"old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS", "code": "def var1 ( var2 ) :\n    var3 = [ [ 0 for var4 in range ( var2 + 1 ) ] for var5 in range ( var2 + 1 ) ]\n    for var4 in range ( 0 , var2 + 1 ) :\n        for var5 in range ( 0 , min ( var4 , var2 ) + 1 ) :\n            if ( var5 == 0 or var5 == var4 ) :\n                var3 [ var4 ] [ var5 ] = 1\n            else :\n                var3 [ var4 ] [ var5 ] = ( var3 [ var4 - 1 ] [ var5 - 1 ] + var3 [ var4 - 1 ] [ var5 ] )\n    sum = 0\n    for var4 in range ( 0 , var2 + 1 ) :\n        sum = sum + ( var3 [ var2 ] [ var4 ] * var3 [ var2 ] [ var4 ] )\n    return sum"}
{"old_id": "SUM_TWO_LARGE_NUMBERS", "code": "def var1(var2, var3):\n    if (len(var2) > len(var3)):\n        var4 = var2\n        var2 = var3\n        var3 = var4\n    str = \"\"\n    var5 = len(var2)\n    var6 = len(var3)\n    var2 = var2[:: - 1]\n    var3 = var3[:: - 1]\n    var7 = 0\n    for var8 in range(var5):\n        sum = ((ord(var2[var8]) - 48) + ((ord(var3[var8]) - 48) + var7))\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        var7 = int(sum / 10)\n    for var8 in range(var5, var6):\n        sum = ((ord(var3[var8]) - 48) + var7)\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        var7 = (int)(sum / 10)\n    if (var7):\n        str += chr(var7 + 48)\n    str = str[:: - 1]\n    return str"}
{"old_id": "SWAP_BITS_IN_A_GIVEN_NUMBER", "code": "def var1 ( var2 , var3 , var4 , var5 ) :\n    var6 = ( var2 >> var3 ) & ( ( 1 << var5 ) - 1 )\n    var7 = ( var2 >> var4 ) & ( ( 1 << var5 ) - 1 )\n    var8 = ( var6 ^ var7 )\n    var8 = ( var8 << var3 ) | ( var8 << var4 )\n    var9 = var2 ^ var8\n    return var9"}
{"old_id": "SWAP_TWO_NIBBLES_BYTE", "code": "def var1 ( var2 ) :\n    return ( ( var2 & 0x0F ) << 4 | ( var2 & 0xF0 ) >> 4 )"}
{"old_id": "SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE", "code": "def var1 ( var2 , var3 ) :\n    var2 [ 0 ] = var2 [ 0 ] ^ var3 [ 0 ]\n    var3 [ 0 ] = var2 [ 0 ] ^ var3 [ 0 ]\n    var2 [ 0 ] = var2 [ 0 ] ^ var3 [ 0 ]"}
{"old_id": "TEMPLE_OFFERINGS", "code": "def var1 ( var2 , var3 ) :\n    sum = 0\n    for var4 in range ( var2 ) :\n        var5 = 0\n        var6 = 0\n        for var7 in range ( var4 - 1 , - 1 , - 1 ) :\n            if ( var3 [ var7 ] < var3 [ var7 + 1 ] ) :\n                var5 += 1\n            else :\n                break\n        for var7 in range ( var4 + 1 , var2 ) :\n            if ( var3 [ var7 ] < var3 [ var7 - 1 ] ) :\n                var6 += 1\n            else :\n                break\n        sum += max ( var6 , var5 ) + 1\n    return sum"}
{"old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    var4 = var2 [ 0 ]\n    for var5 in range ( 1 , var3 ) :\n        if ( var2 [ var5 ] > var4 ) :\n            var4 = var2 [ var5 ]\n    var6 = - sys.var7\n    for var5 in range ( 0 , var3 ) :\n        if ( var2 [ var5 ] > var6 and var2 [ var5 ] < var4 ) :\n            var6 = var2 [ var5 ]\n    var8 = - sys.var7\n    for var5 in range ( 0 , var3 ) :\n        if ( var2 [ var5 ] > var8 and var2 [ var5 ] < var6 ) :\n            var8 = var2 [ var5 ]\n    print ( \"The Third Largest\" , \"element is\" , var8 )"}
{"old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1", "code": "def var1 ( var2 , var3 ) :\n    if ( var3 < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    var4 = var2 [ 0 ]\n    var5 = - sys.var6\n    var7 = - sys.var6\n    for var8 in range ( 1 , var3 ) :\n        if ( var2 [ var8 ] > var4 ) :\n            var7 = var5\n            var5 = var4\n            var4 = var2 [ var8 ]\n        elif ( var2 [ var8 ] > var5 ) :\n            var7 = var5\n            var5 = var2 [ var8 ]\n        elif ( var2 [ var8 ] > var7 ) :\n            var7 = var2 [ var8 ]\n    print ( \"The third Largest\" , \"element is\" , var7 )"}
{"old_id": "TILING_WITH_DOMINOES", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * ( var2 + 1 )\n    var4 = [ 0 ] * ( var2 + 1 )\n    var3 [ 0 ] = 1\n    var3 [ 1 ] = 0\n    var4 [ 0 ] = 0\n    var4 [ 1 ] = 1\n    for var5 in range ( 2 , var2 + 1 ) :\n        var3 [ var5 ] = var3 [ var5 - 2 ] + 2 * var4 [ var5 - 1 ]\n        var4 [ var5 ] = var3 [ var5 - 1 ] + var4 [ var5 - 2 ]\n    return var3 [ var2 ]"}
{"old_id": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1", "code": "def var1 ( var2 ) :\n    var3 = 10\n    count = 1\n    for var4 in range ( 1 , var2 + 1 ) :\n        count = int ( count * ( var3 + var4 - 1 ) )\n        count = int ( count / var4 )\n    return count"}
{"old_id": "TRIANGULAR_MATCHSTICK_NUMBER", "code": "def var1 ( var2 ) :\n    return ( 3 * var2 * ( var2 + 1 ) ) / 2"}
{"old_id": "TRIANGULAR_NUMBERS", "code": "def var1 ( var2 ) :\n    if ( var2 < 0 ) :\n        return False\n    sum , var3 = 0 , 1\n    while ( sum <= var2 ) :\n        sum = sum + var3\n        if ( sum == var2 ) :\n            return True\n        var3 += 1\n    return False"}
{"old_id": "TURN_OFF_THE_RIGHTMOST_SET_BIT", "code": "def var1 ( var2 ) :\n    return var2 & ( var2 - 1 )"}
{"old_id": "UNIQUE_CELLS_BINARY_MATRIX", "code": "def var1 ( var2 , var3 , var4 ) :\n    var5 = [ 0 ] * var3\n    var6 = [ 0 ] * var4\n    for var7 in range ( var3 ) :\n        for var8 in range ( var4 ) :\n            if ( var2 [ var7 ] [ var8 ] != 0 ) :\n                var5 [ var7 ] += 1\n                var6 [ var8 ] += 1\n    var9 = 0\n    for var7 in range ( var3 ) :\n        for var8 in range ( var4 ) :\n            if ( var2 [ var7 ] [ var8 ] != 0 and var5 [ var7 ] == 1 and var6 [ var8 ] == 1 ) :\n                var9 += 1\n    return var9"}
{"old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO", "code": "def var1 ( str ) :\n    var2 = 0\n    var3 = 0\n    var4 = len ( str )\n    for var5 in range ( 0 , var4 , 1 ) :\n        if ( str [ var5 ] == '1' ) :\n            var2 += 1\n        else :\n            var3 += 1\n    if ( var2 % 2 == 0 ) :\n        return var3\n    return var2"}
{"old_id": "WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS", "code": "def var1 ( var2 ) :\n    var3 = [ 0 ] * ( var2 + 1 )\n    var3 [ 0 ] = 1\n    for var4 in range ( 1 , var2 ) :\n        for var5 in range ( var4 , var2 + 1 ) :\n            var3 [ var5 ] += var3 [ var5 - var4 ]\n    return var3 [ var2 ]"}
{"old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS", "code": "def var1 ( var2 , var3 ) :\n    var4 = len ( var2 )\n    var5 = len ( var3 )\n    if var5 == 0 :\n        return 1\n    var6 = [ [ 0 ] * ( var4 + 1 ) for var7 in range ( var5 + 1 ) ]\n    for var8 in range ( var5 ) :\n        for var9 in range ( var8 , var4 ) :\n            if var8 == 0 :\n                if var9 == 0 :\n                    if var2 [ var9 ] == var3 [ var8 ] :\n                        var6 [ var8 ] [ var9 ] = 1\n                    else :\n                        var6 [ var8 ] [ var9 ] = 0\n                elif var2 [ var9 ] == var3 [ var8 ] :\n                    var6 [ var8 ] [ var9 ] = var6 [ var8 ] [ var9 - 1 ] + 1\n                else :\n                    var6 [ var8 ] [ var9 ] = var6 [ var8 ] [ var9 - 1 ]\n            else :\n                if var2 [ var9 ] == var3 [ var8 ] :\n                    var6 [ var8 ] [ var9 ] = ( var6 [ var8 ] [ var9 - 1 ] + var6 [ var8 - 1 ] [ var9 - 1 ] )\n                else :\n                    var6 [ var8 ] [ var9 ] = var6 [ var8 ] [ var9 - 1 ]\n    return var6 [ var5 - 1 ] [ var4 - 1 ]"}
{"old_id": "WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3", "code": "def var1 ( var2 ) :\n    var3 = 0\n    var4 = 0\n    if ( var2 < 0 ) :\n        var2 = - var2\n    if ( var2 == 0 ) :\n        return 1\n    if ( var2 == 1 ) :\n        return 0\n    while ( var2 ) :\n        if ( var2 & 1 ) :\n            var3 += 1\n        if ( var2 & 2 ) :\n            var4 += 1\n        var2 = var2 >> 2\n    return var1 ( abs ( var3 - var4 ) )"}
{"old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 ) :\n        return False\n    while ( var2 != 1 ) :\n        if ( var2 % 2 != 0 ) :\n            return False\n        var2 = var2 // 2\n    return True"}
{"old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1", "code": "def var1 ( var2 ) :\n    return ( var2 and ( not ( var2 & ( var2 - 1 ) ) ) )"}
{"old_id": "ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION", "code": "def var1 ( var2 ) :\n    if ( var2 == 0 or var2 == 1 ) :\n        return var2\n    var3 , var4 , var5 = 0 , 1 , 1\n    while ( var5 <= var2 ) :\n        var3 = var4 \n        var4 = var5 \n        var5 = var3 + var4 \n    return var4 "}
