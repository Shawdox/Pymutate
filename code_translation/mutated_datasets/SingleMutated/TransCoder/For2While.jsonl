{"code": "def search ( arr , n , x ) :\n    i = 0\n    idx_mfkl = 0\n    list_1kid = range ( i , n )\n    while idx_mfkl < len(list_1kid):\n        i = list_1kid[idx_mfkl]\n        if ( arr [ i ] == x ) :\n            return i\n        idx_mfkl = idx_mfkl + 1\n    return - 1", "id": "For2While_sample_from_ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS_to_0", "old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS"}
{"code": "def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0\n    times = 0\n    idx_7w4o = 0\n    list_jv60 = range ( n )\n    while idx_7w4o < len(list_jv60):\n        i = list_jv60[idx_7w4o]\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k :\n            return best\n        idx_7w4o = idx_7w4o + 1\n    return best", "id": "For2While_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_1", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    idx_qj3r = 0\n    list_u69y = range ( start , end + 1 )\n    while idx_qj3r < len(list_u69y):\n        i = list_u69y[idx_qj3r]\n        if arr [ i ] in frequency.keys ( ) :\n            frequency [ arr [ i ] ] += 1\n        else :\n            frequency [ arr [ i ] ] = 1\n        idx_qj3r = idx_qj3r + 1\n    count = 0\n    idx_8w2j = 0\n    list_0x7q = frequency\n    while idx_8w2j < len(list_0x7q):\n        x = list_0x7q[idx_8w2j]\n        if x == frequency [ x ] :\n            count += 1\n        idx_8w2j = idx_8w2j + 1\n    return count", "id": "For2While_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_2", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def count_of_ways ( n ) :\n    count = 0\n    idx_01cz = 0\n    list_9olj = range ( 0 , n + 1 )\n    while idx_01cz < len(list_9olj):\n        i = list_9olj[idx_01cz]\n        idx_p0ys = 0\n        list_9liz = range ( 0 , n + 1 )\n        while idx_p0ys < len(list_9liz):\n            j = list_9liz[idx_p0ys]\n            idx_c3ei = 0\n            list_8ct3 = range ( 0 , n + 1 )\n            while idx_c3ei < len(list_8ct3):\n                k = list_8ct3[idx_c3ei]\n                if ( i + j + k == n ) :\n                    count = count + 1\n                idx_c3ei = idx_c3ei + 1\n            idx_p0ys = idx_p0ys + 1\n        idx_01cz = idx_01cz + 1\n    return count", "id": "For2While_sample_from_BREAK_NUMBER_THREE_PARTS_to_3", "old_id": "BREAK_NUMBER_THREE_PARTS"}
{"code": "def encrypt ( text , s ) :\n    result = \"\"\n    idx_rhwk = 0\n    list_am05 = range ( len ( text ) )\n    while idx_rhwk < len(list_am05):\n        i = list_am05[idx_rhwk]\n        char = text [ i ]\n        if ( char.isupper ( ) ) :\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        else :\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n        idx_rhwk = idx_rhwk + 1\n    return result", "id": "For2While_sample_from_CAESAR_CIPHER_to_4", "old_id": "CAESAR_CIPHER"}
{"code": "def calcMaxValue ( str ) :\n    res = ord ( str [ 0 ] ) - 48\n    idx_086s = 0\n    list_rk0s = range ( 1 , len ( str ) )\n    while idx_086s < len(list_rk0s):\n        i = list_rk0s[idx_086s]\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ) :\n            res += ord ( str [ i ] ) - 48\n        else :\n            res += ord ( str [ i ] ) - 48\n        idx_086s = idx_086s + 1\n    return res", "id": "For2While_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_5", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = \"0\"\n    Sum = 0\n    idx_6q7k = 0\n    list_tnx8 = str\n    while idx_6q7k < len(list_tnx8):\n        ch = list_tnx8[idx_6q7k]\n        if ( ch.isdigit ( ) ) :\n            temp += ch\n        else :\n            Sum += int ( temp )\n            temp = \"0\"\n        idx_6q7k = idx_6q7k + 1\n    return Sum + int ( temp )", "id": "For2While_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_6", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = 0\n    ones = 0\n    idx_jnci = 0\n    list_l4mk = range ( 0 , len ( str ) )\n    while idx_jnci < len(list_l4mk):\n        i = list_l4mk[idx_jnci]\n        ch = str [ i ]\n        if ( ch == '0' ) :\n            zeros = zeros + 1\n        else :\n            ones = ones + 1\n        idx_jnci = idx_jnci + 1\n    return ( zeros == 1 or ones == 1 )", "id": "For2While_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_7", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isOneFlip ( str ) :\n    sum = 0\n    n = len ( str )\n    idx_0ca4 = 0\n    list_63fz = range ( 0 , n )\n    while idx_0ca4 < len(list_63fz):\n        i = list_63fz[idx_0ca4]\n        sum += ord ( str [ i ] ) - ord ( '0' )\n        idx_0ca4 = idx_0ca4 + 1\n    return ( sum == n - 1 or sum == 1 )", "id": "For2While_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_1_to_8", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP_1"}
{"code": "def isMajority ( a, n ) :\n    mp = { }\n    idx_ucgf = 0\n    list_4g23 = range(n)\n    while idx_ucgf < len(list_4g23):\n        i = list_4g23[idx_ucgf]\n        if a[i] in mp : mp [ a[i] ] += 1\n        else : mp [ a[i] ] = 1\n        idx_ucgf = idx_ucgf + 1\n    idx_qpxo = 0\n    list_qxcs = mp\n    while idx_qpxo < len(list_qxcs):\n        x = list_qxcs[idx_qpxo]\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n        idx_qpxo = idx_qpxo + 1\n    return False", "id": "For2While_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_9", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def isInorder ( arr , n ) :\n    if ( n == 0 or n == 1 ) :\n        return True\n    idx_d3lb = 0\n    list_znkg = range ( 1 , n , 1 )\n    while idx_d3lb < len(list_znkg):\n        i = list_znkg[idx_d3lb]\n        if ( arr [ i - 1 ] > arr [ i ] ) :\n            return False\n        idx_d3lb = idx_d3lb + 1\n    return True", "id": "For2While_sample_from_CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT_to_10", "old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT"}
{"code": "def isDivisible ( str , k ) :\n    n = len ( str )\n    c = 0\n    idx_ac38 = 0\n    list_ib50 = range ( 0 , k )\n    while idx_ac38 < len(list_ib50):\n        i = list_ib50[idx_ac38]\n        if ( str [ n - i - 1 ] == '0' ) :\n            c += 1\n        idx_ac38 = idx_ac38 + 1\n    return ( c == k )", "id": "For2While_sample_from_CHECK_DIVISIBILITY_BINARY_STRING_2K_to_11", "old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K"}
{"code": "def isDivisible999 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '0' ) :\n        return True\n    if ( ( n % 3 ) == 1 ) :\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) :\n        num = \"0\" + num\n    gSum = 0\n    idx_17ob = 0\n    list_9pqu = range ( 0 , n , 3 )\n    while idx_17ob < len(list_9pqu):\n        i = list_9pqu[idx_17ob]\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n        idx_17ob = idx_17ob + 1\n    if ( gSum > 1000 ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )", "id": "For2While_sample_from_CHECK_DIVISIBILITY_LARGE_NUMBER_999_to_12", "old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999"}
{"code": "def check ( s ) :\n    if ( len ( s ) >= 10 ) :\n        return True\n    idx_72tw = 0\n    list_l2nk = range ( 1 , len ( s ) )\n    while idx_72tw < len(list_l2nk):\n        i = list_l2nk[idx_72tw]\n        idx_het2 = 0\n        list_ykma = range ( i + 1 , len ( s ) )\n        while idx_het2 < len(list_ykma):\n            j = list_ykma[idx_het2]\n            idx_2psm = 0\n            list_u94s = range ( j + 1 , len ( s ) )\n            while idx_2psm < len(list_u94s):\n                k = list_u94s[idx_2psm]\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j ]\n                s3 = s [ j : k ]\n                s4 = s [ k : len ( s ) ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n                idx_2psm = idx_2psm + 1\n            idx_het2 = idx_het2 + 1\n        idx_72tw = idx_72tw + 1\n    return False", "id": "For2While_sample_from_CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS_to_13", "old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = 0\n    count_even = 0\n    idx_n7ev = 0\n    list_eny3 = range ( n )\n    while idx_n7ev < len(list_eny3):\n        i = list_eny3[idx_n7ev]\n        if ( a [ i ] & 1 ) :\n            count_odd += 1\n        else :\n            count_even += 1\n        idx_n7ev = idx_n7ev + 1\n    if ( count_odd % 2 and count_even % 2 ) :\n        return False\n    else :\n        return True", "id": "For2While_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_14", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def areConsecutive ( arr , n ) :\n    if ( n < 1 ) :\n        return False\n    Min = min ( arr )\n    Max = max ( arr )\n    if ( Max - Min + 1 == n ) :\n        visited = [ False for i in range ( n ) ]\n        idx_vfd5 = 0\n        list_nwc4 = range ( n )\n        while idx_vfd5 < len(list_nwc4):\n            i = list_nwc4[idx_vfd5]\n            if ( visited [ arr [ i ] - Min ] != False ) :\n                return False\n            visited [ arr [ i ] - Min ] = True\n            idx_vfd5 = idx_vfd5 + 1\n        return True\n    return False", "id": "For2While_sample_from_CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE_to_15", "old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE"}
{"code": "def canRepresentBST ( pre, n ) :\n    s = [ ]\n    root = -2147483648\n    idx_hw20 = 0\n    list_tu9c = range(n)\n    while idx_hw20 < len(list_tu9c):\n        i = list_tu9c[idx_hw20]\n        if pre[i] < root :\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < pre[i] ) :\n            root = s.pop ( )\n        s.append ( pre[i] )\n        idx_hw20 = idx_hw20 + 1\n    return True", "id": "For2While_sample_from_CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE_to_16", "old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = 0\n    tenCount = 0\n    idx_1nos = 0\n    list_7xpt = range ( n )\n    while idx_1nos < len(list_7xpt):\n        i = list_7xpt[idx_1nos]\n        if ( notes [ i ] == 5 ) :\n            fiveCount += 1\n        elif ( notes [ i ] == 10 ) :\n            if ( fiveCount > 0 ) :\n                fiveCount -= 1\n                tenCount += 1\n            else :\n                return 0\n        else :\n            if ( fiveCount > 0 and tenCount > 0 ) :\n                fiveCount -= 1\n                tenCount -= 1\n            elif ( fiveCount >= 3 ) :\n                fiveCount -= 3\n            else :\n                return 0\n        idx_1nos = idx_1nos + 1\n    return 1", "id": "For2While_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_17", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def check ( str ) :\n    n = len ( str )\n    oddDigSum = 0\n    evenDigSum = 0\n    idx_usvk = 0\n    list_zi78 = range ( 0 , n )\n    while idx_usvk < len(list_zi78):\n        i = list_zi78[idx_usvk]\n        if ( i % 2 == 0 ) :\n            oddDigSum = oddDigSum + ( ord ( str [ i ] ) - 48 )\n        else :\n            evenDigSum = evenDigSum + ( ord ( str [ i ] ) - 48 )\n        idx_usvk = idx_usvk + 1\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "id": "For2While_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_18", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if ( length % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    idx_7efg = 0\n    list_rs2l = range ( length - 1 , - 1 , - 3 )\n    while idx_7efg < len(list_rs2l):\n        i = list_rs2l[idx_7efg]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n        idx_7efg = idx_7efg + 1\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )", "id": "For2While_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_19", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def check ( str ) :\n    n = len ( str )\n    digitSum = 0\n    idx_rip0 = 0\n    list_bd4v = range ( 0 , n )\n    while idx_rip0 < len(list_bd4v):\n        i = list_bd4v[idx_rip0]\n        digitSum = digitSum + ord ( str [ i ] ) - 48\n        idx_rip0 = idx_rip0 + 1\n    return ( digitSum % 9 == 0 )", "id": "For2While_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT_to_20", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT"}
{"code": "def check ( s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    dp = ( [ [ False for i in range ( m + 1 ) ] for i in range ( n + 1 ) ] )\n    dp [ 0 ] [ 0 ] = True\n    idx_cv9i = 0\n    list_q52g = range ( len ( s1 ) )\n    while idx_cv9i < len(list_q52g):\n        i = list_q52g[idx_cv9i]\n        idx_chfv = 0\n        list_f6iq = range ( len ( s2 ) + 1 )\n        while idx_chfv < len(list_f6iq):\n            j = list_f6iq[idx_chfv]\n            if ( dp [ i ] [ j ] ) :\n                if ( ( j < len ( s2 ) and ( s1 [ i ].upper ( ) == s2 [ j ] ) ) ) :\n                    dp [ i + 1 ] [ j + 1 ] = True\n                if ( s1 [ i ].isupper ( ) == False ) :\n                    dp [ i + 1 ] [ j ] = True\n            idx_chfv = idx_chfv + 1\n        idx_cv9i = idx_cv9i + 1\n    return ( dp [ n ] [ m ] )", "id": "For2While_sample_from_CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER_to_21", "old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == 1 ) :\n        return True\n    i = 1\n    idx_uxq6 = 0\n    list_4uxa = range ( 1 , n )\n    while idx_uxq6 < len(list_4uxa):\n        i = list_4uxa[idx_uxq6]\n        if arr [ i - 1 ] >= arr [ i ] :\n            break\n        else:\n            if ( i == n ) :\n                return True\n        idx_uxq6 = idx_uxq6 + 1\n    j = i\n    i += 1\n    while ( arr [ j ] < arr [ j - 1 ] ) :\n        if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) :\n            return False\n        j += 1\n    if ( j == n ) :\n        return True\n    k = j\n    if ( arr [ k ] < arr [ i - 1 ] ) :\n        return False\n    while ( k > 1 and k < n ) :\n        if ( arr [ k ] < arr [ k - 1 ] ) :\n            return False\n        k += 1\n    return True", "id": "For2While_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_22", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def isAnBn ( s ) :\n    n = len ( s )\n    idx_5cth = 0\n    list_mqkt = range ( n )\n    while idx_5cth < len(list_mqkt):\n        i = list_mqkt[idx_5cth]\n        if ( s [ i ] != 'a' ) :\n            break\n        idx_5cth = idx_5cth + 1\n    if ( i * 2 != n ) :\n        return False\n    idx_emr1 = 0\n    list_n45c = range ( i , n )\n    while idx_emr1 < len(list_n45c):\n        j = list_n45c[idx_emr1]\n        if ( s [ j ] != 'b' ) :\n            return False\n        idx_emr1 = idx_emr1 + 1\n    return True", "id": "For2While_sample_from_CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT_to_23", "old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT"}
{"code": "def areSumSame ( a , n , m ) :\n    sum1 = 0\n    sum2 = 0\n    idx_f3wa = 0\n    list_31tf = range ( 0 , n )\n    while idx_f3wa < len(list_31tf):\n        i = list_31tf[idx_f3wa]\n        sum1 = 0\n        sum2 = 0\n        idx_mhe8 = 0\n        list_rod6 = range ( 0 , m )\n        while idx_mhe8 < len(list_rod6):\n            j = list_rod6[idx_mhe8]\n            sum1 += a [ i ] [ j ]\n            sum2 += a [ j ] [ i ]\n            idx_mhe8 = idx_mhe8 + 1\n        if ( sum1 == sum2 ) :\n            return 1\n        idx_f3wa = idx_f3wa + 1\n    return 0", "id": "For2While_sample_from_CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX_to_24", "old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX"}
{"code": "def checkIsAP ( arr , n ) :\n    if ( n == 1 ) : return True\n    arr.sort ( )\n    d = arr [ 1 ] - arr [ 0 ]\n    idx_zgos = 0\n    list_wouv = range ( 2 , n )\n    while idx_zgos < len(list_wouv):\n        i = list_wouv[idx_zgos]\n        if ( arr [ i ] - arr [ i - 1 ] != d ) :\n            return False\n        idx_zgos = idx_zgos + 1\n    return True", "id": "For2While_sample_from_CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY_to_25", "old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY"}
{"code": "def check ( degree , n ) :\n    deg_sum = 0\n    idx_5iw4 = 0\n    list_whbk = range(n)\n    while idx_5iw4 < len(list_whbk):\n        i = list_whbk[idx_5iw4]\n        deg_sum += degree[i]\n        idx_5iw4 = idx_5iw4 + 1\n    if ( 2 * ( n - 1 ) == deg_sum ) :\n        return True\n    else :\n        return False", "id": "For2While_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_26", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if ( n % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    p = 1\n    idx_5413 = 0\n    list_09kv = range ( n - 1 , - 1 , - 1 )\n    while idx_5413 < len(list_09kv):\n        i = list_09kv[idx_5413]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n        idx_5413 = idx_5413 + 1\n    return ( GSum % 7 == 0 )", "id": "For2While_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_27", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        idx_uwjv = 0\n        list_tl12 = range ( l , n )\n        while idx_uwjv < len(list_tl12):\n            i = list_tl12[idx_uwjv]\n            a [ k ] [ i ] = val\n            val += 1\n            idx_uwjv = idx_uwjv + 1\n        k += 1\n        idx_ub76 = 0\n        list_ibg2 = range ( k , m )\n        while idx_ub76 < len(list_ibg2):\n            i = list_ibg2[idx_ub76]\n            a [ i ] [ n - 1 ] = val\n            val += 1\n            idx_ub76 = idx_ub76 + 1\n        n -= 1\n        if ( k < m ) :\n            idx_bmu0 = 0\n            list_4rmn = range ( n - 1 , l - 1 , - 1 )\n            while idx_bmu0 < len(list_4rmn):\n                i = list_4rmn[idx_bmu0]\n                a [ m - 1 ] [ i ] = val\n                val += 1\n                idx_bmu0 = idx_bmu0 + 1\n            m -= 1\n        if ( l < n ) :\n            idx_rqyb = 0\n            list_58pd = range ( m - 1 , k - 1 , - 1 )\n            while idx_rqyb < len(list_58pd):\n                i = list_58pd[idx_rqyb]\n                a [ i ] [ l ] = val\n                val += 1\n                idx_rqyb = idx_rqyb + 1\n            l += 1", "id": "For2While_sample_from_CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY_to_28", "old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY"}
{"code": "def nCrModp ( n , r , p ) :\n    C = [ 0 for i in range ( r + 1 ) ]\n    C [ 0 ] = 1\n    idx_9rbl = 0\n    list_nsw3 = range ( 1 , n + 1 )\n    while idx_9rbl < len(list_nsw3):\n        i = list_nsw3[idx_9rbl]\n        idx_i81a = 0\n        list_iw61 = range ( min ( i , r ) , 0 , - 1 )\n        while idx_i81a < len(list_iw61):\n            j = list_iw61[idx_i81a]\n            C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p\n            idx_i81a = idx_i81a + 1\n        idx_9rbl = idx_9rbl + 1\n    return C [ r ]", "id": "For2While_sample_from_COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION_to_29", "old_id": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION"}
{"code": "def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    idx_rusy = 0\n    list_vjkp = range ( n )\n    while idx_rusy < len(list_vjkp):\n        i = list_vjkp[idx_rusy]\n        LIS [ i ] = 1\n        idx_rusy = idx_rusy + 1\n    idx_zlyr = 0\n    list_k2uv = range ( 1 , n )\n    while idx_zlyr < len(list_k2uv):\n        i = list_k2uv[idx_zlyr]\n        idx_4wor = 0\n        list_8tqb = range ( i )\n        while idx_4wor < len(list_8tqb):\n            j = list_8tqb[idx_4wor]\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n            idx_4wor = idx_4wor + 1\n        len = max ( len , LIS [ i ] )\n        idx_zlyr = idx_zlyr + 1\n    return ( n - len )", "id": "For2While_sample_from_CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES_to_30", "old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES"}
{"code": "def numberOfWays ( x ) :\n    dp = [ 0 for _ in range (x + 1)]\n    dp[0] = dp[1] = 1\n    idx_i59v = 0\n    list_rqws = range(2, x + 1)\n    while idx_i59v < len(list_rqws):\n        i = list_rqws[idx_i59v]\n        dp[i] = dp[i - 1] + (i - 1) * dp[i - 2]\n        idx_i59v = idx_i59v + 1\n    return dp[x]", "id": "For2While_sample_from_COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1_to_31", "old_id": "COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1"}
{"code": "def countBT ( h ) :\n    MOD = 1000000007\n    dp = [ 0 for i in range ( h + 1 ) ]\n    dp [ 0 ] = 1\n    dp [ 1 ] = 1\n    idx_n4my = 0\n    list_xheq = range ( 2 , h + 1 )\n    while idx_n4my < len(list_xheq):\n        i = list_xheq[idx_n4my]\n        dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD\n        idx_n4my = idx_n4my + 1\n    return dp [ h ]", "id": "For2While_sample_from_COUNT_BALANCED_BINARY_TREES_HEIGHT_H_to_32", "old_id": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H"}
{"code": "def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    idx_5uv4 = 0\n    list_524s = range ( 2 , n + 1 )\n    while idx_5uv4 < len(list_524s):\n        i = list_524s[idx_5uv4]\n        idx_a8p2 = 0\n        list_3y4z = range ( k + 1 )\n        while idx_a8p2 < len(list_3y4z):\n            j = list_3y4z[idx_a8p2]\n            if j >= i:\n                break\n            else:\n                dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n                dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n                if j >= 1 :\n                    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n            idx_a8p2 = idx_a8p2 + 1\n        idx_5uv4 = idx_5uv4 + 1\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "id": "For2While_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_33", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def countPairs ( str ) :\n    result = 0 ;\n    n = len ( str )\n    idx_jswx = 0\n    list_kohm = range ( 0 , n )\n    while idx_jswx < len(list_kohm):\n        i = list_kohm[idx_jswx]\n        idx_bp8c = 0\n        list_m4ca = range ( i + 1 , n )\n        while idx_bp8c < len(list_m4ca):\n            j = list_m4ca[idx_bp8c]\n            if ( abs ( ord ( str [ i ] ) - ord ( str [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n            idx_bp8c = idx_bp8c + 1\n        idx_jswx = idx_jswx + 1\n    return result ;", "id": "For2While_sample_from_COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_to_34", "old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS"}
{"code": "def countDer ( n ) :\n    der = [ 0 for i in range ( n + 1 ) ]\n    der [ 0 ] = 1\n    der [ 1 ] = 0\n    der [ 2 ] = 1\n    idx_wnls = 0\n    list_w7p5 = range ( 3 , n + 1 )\n    while idx_wnls < len(list_w7p5):\n        i = list_w7p5[idx_wnls]\n        der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] )\n        idx_wnls = idx_wnls + 1\n    return der [ n ]", "id": "For2While_sample_from_COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1_to_35", "old_id": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1"}
{"code": "def findDigits ( n ) :\n    if ( n < 0 ) :\n        return 0\n    if ( n <= 1 ) :\n        return 1\n    digits = 0\n    idx_xthi = 0\n    list_pic8 = range ( 2 , n + 1 )\n    while idx_xthi < len(list_pic8):\n        i = list_pic8[idx_xthi]\n        digits += math.log10 ( i )\n        idx_xthi = idx_xthi + 1\n    return math.floor ( digits ) + 1", "id": "For2While_sample_from_COUNT_DIGITS_FACTORIAL_SET_1_to_36", "old_id": "COUNT_DIGITS_FACTORIAL_SET_1"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    idx_q9fb = 0\n    list_f1o8 = range ( 1 , m + 1 )\n    while idx_q9fb < len(list_f1o8):\n        i = list_f1o8[idx_q9fb]\n        mat [ i ] [ 0 ] = 0\n        idx_q9fb = idx_q9fb + 1\n    idx_93et = 0\n    list_a7ne = range ( n + 1 )\n    while idx_93et < len(list_a7ne):\n        j = list_a7ne[idx_93et]\n        mat [ 0 ] [ j ] = 1\n        idx_93et = idx_93et + 1\n    idx_s6wx = 0\n    list_xeg3 = range ( 1 , m + 1 )\n    while idx_s6wx < len(list_xeg3):\n        i = list_xeg3[idx_s6wx]\n        idx_ke70 = 0\n        list_2mos = range ( 1 , n + 1 )\n        while idx_ke70 < len(list_2mos):\n            j = list_2mos[idx_ke70]\n            if T [ i - 1 ] != S [ j - 1 ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n            idx_ke70 = idx_ke70 + 1\n        idx_s6wx = idx_s6wx + 1\n    return mat [ m ] [ n ]", "id": "For2While_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_37", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def count ( n , x ) :\n    cnt = 0\n    idx_18lg = 0\n    list_4js5 = range ( 1 , n + 1 )\n    while idx_18lg < len(list_4js5):\n        i = list_4js5[idx_18lg]\n        if i <= x :\n            if x // i <= n and x % i == 0 :\n                cnt += 1\n        idx_18lg = idx_18lg + 1\n    return cnt", "id": "For2While_sample_from_COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX_to_38", "old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX"}
{"code": "def countSeq ( n ) :\n    nCr = 1\n    res = 1\n    idx_nwtr = 0\n    list_52hr = range ( 1 , n + 1 )\n    while idx_nwtr < len(list_52hr):\n        r = list_52hr[idx_nwtr]\n        nCr = int ( ( nCr * ( n + 1 - r ) ) / r )\n        res += nCr * nCr \n        idx_nwtr = idx_nwtr + 1\n    return res ", "id": "For2While_sample_from_COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1_to_39", "old_id": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1"}
{"code": "def countPairs ( arr , n ) :\n    ans = 0\n    idx_jf25 = 0\n    list_46jr = range ( 0 , n )\n    while idx_jf25 < len(list_46jr):\n        i = list_46jr[idx_jf25]\n        idx_3ryl = 0\n        list_5lta = range ( i + 1 , n )\n        while idx_3ryl < len(list_5lta):\n            j = list_5lta[idx_3ryl]\n            if ( arr [ i ] == arr [ j ] ) :\n                ans += 1\n            idx_3ryl = idx_3ryl + 1\n        idx_jf25 = idx_jf25 + 1\n    return ans", "id": "For2While_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_to_40", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    idx_xyeb = 0\n    list_i0ts = range ( n )\n    while idx_xyeb < len(list_i0ts):\n        i = list_i0ts[idx_xyeb]\n        if arr [ i ] in mp.keys ( ) :\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n        idx_xyeb = idx_xyeb + 1\n    ans = 0\n    idx_0r2k = 0\n    list_qvcz = mp\n    while idx_0r2k < len(list_qvcz):\n        it = list_qvcz[idx_0r2k]\n        count = mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n        idx_0r2k = idx_0r2k + 1\n    return ans", "id": "For2While_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_41", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def getInvCount ( arr , n ) :\n    invcount = 0\n    idx_0en6 = 0\n    list_h7q5 = range ( 1 , n - 1 )\n    while idx_0en6 < len(list_h7q5):\n        i = list_h7q5[idx_0en6]\n        small = 0\n        idx_2fv4 = 0\n        list_zau0 = range ( i + 1 , n )\n        while idx_2fv4 < len(list_zau0):\n            j = list_zau0[idx_2fv4]\n            if ( arr [ i ] > arr [ j ] ) :\n                small += 1\n            idx_2fv4 = idx_2fv4 + 1\n        great = 0\n        idx_3ml1 = 0\n        list_9v6p = range ( i - 1 , - 1 , - 1 )\n        while idx_3ml1 < len(list_9v6p):\n            j = list_9v6p[idx_3ml1]\n            if ( arr [ i ] < arr [ j ] ) :\n                great += 1\n            idx_3ml1 = idx_3ml1 + 1\n        invcount += great * small\n        idx_0en6 = idx_0en6 + 1\n    return invcount", "id": "For2While_sample_from_COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1_to_42", "old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1"}
{"code": "def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    idx_qwz8 = 0\n    list_z95i = range ( 0 , n - 1 )\n    while idx_qwz8 < len(list_z95i):\n        i = list_z95i[idx_qwz8]\n        if ( x [ i ] + 1 != x [ i + 1 ] ) :\n            count = count + 1\n        idx_qwz8 = idx_qwz8 + 1\n    return count", "id": "For2While_sample_from_COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS_to_43", "old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS"}
{"code": "def countNumber ( n ) :\n    result = 0\n    idx_eyw0 = 0\n    list_l97r = range ( 1 , 10 )\n    while idx_eyw0 < len(list_l97r):\n        i = list_l97r[idx_eyw0]\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            idx_qloy = 0\n            list_1aq2 = range ( tp % 10 , 10 )\n            while idx_qloy < len(list_1aq2):\n                j = list_1aq2[idx_qloy]\n                x = tp * 10 + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += 1\n                idx_qloy = idx_qloy + 1\n        idx_eyw0 = idx_eyw0 + 1\n    return result", "id": "For2While_sample_from_COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER_to_44", "old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER"}
{"code": "def countNegative ( M , n , m ) :\n    count = 0\n    idx_axed = 0\n    list_tk2h = range ( n )\n    while idx_axed < len(list_tk2h):\n        i = list_tk2h[idx_axed]\n        idx_d21f = 0\n        list_slmz = range ( m )\n        while idx_d21f < len(list_slmz):\n            j = list_slmz[idx_d21f]\n            if M [ i ] [ j ] < 0 :\n                count += 1\n            else :\n                break\n            idx_d21f = idx_d21f + 1\n        idx_axed = idx_axed + 1\n    return count", "id": "For2While_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_45", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = 0\n    idx_9vbi = 0\n    list_nbqe = range ( min ( x , y ) , n + 1 )\n    while idx_9vbi < len(list_nbqe):\n        i = list_nbqe[idx_9vbi]\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n        idx_9vbi = idx_9vbi + 1\n    return result", "id": "For2While_sample_from_COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS_to_46", "old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS"}
{"code": "def countStrings ( n ) :\n    a = [ 0 for i in range ( n ) ]\n    b = [ 0 for i in range ( n ) ]\n    a [ 0 ] = b [ 0 ] = 1\n    idx_mp14 = 0\n    list_7m0b = range ( 1 , n )\n    while idx_mp14 < len(list_7m0b):\n        i = list_7m0b[idx_mp14]\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n        idx_mp14 = idx_mp14 + 1\n    return a [ n - 1 ] + b [ n - 1 ]", "id": "For2While_sample_from_COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S_to_47", "old_id": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S"}
{"code": "def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    idx_zht5 = 0\n    list_803v = range ( n )\n    while idx_zht5 < len(list_803v):\n        i = list_803v[idx_zht5]\n        dp [ 0 ] [ i ] = 1\n        idx_zht5 = idx_zht5 + 1\n    idx_2lgf = 0\n    list_3o4s = range ( 1 , k )\n    while idx_2lgf < len(list_3o4s):\n        l = list_3o4s[idx_2lgf]\n        idx_nu71 = 0\n        list_6y3h = range ( l , n )\n        while idx_nu71 < len(list_6y3h):\n            i = list_6y3h[idx_nu71]\n            dp [ l ] [ i ] = 0\n            idx_2u6h = 0\n            list_bgxq = range ( l - 1 , i )\n            while idx_2u6h < len(list_bgxq):\n                j = list_bgxq[idx_2u6h]\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n                idx_2u6h = idx_2u6h + 1\n            idx_nu71 = idx_nu71 + 1\n        idx_2lgf = idx_2lgf + 1\n    Sum = 0\n    idx_i3zu = 0\n    list_bdq3 = range ( k - 1 , n )\n    while idx_i3zu < len(list_bdq3):\n        i = list_bdq3[idx_i3zu]\n        Sum += dp [ k - 1 ] [ i ]\n        idx_i3zu = idx_i3zu + 1\n    return Sum", "id": "For2While_sample_from_COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K_to_48", "old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K"}
{"code": "def countOccurrences ( arr , n , x ) :\n    res = 0\n    idx_4tc7 = 0\n    list_pfud = range ( n )\n    while idx_4tc7 < len(list_pfud):\n        i = list_pfud[idx_4tc7]\n        if x == arr [ i ] :\n            res += 1\n        idx_4tc7 = idx_4tc7 + 1\n    return res", "id": "For2While_sample_from_COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY_to_49", "old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY"}
{"code": "def possibleStrings ( n , r , b , g ) :\n    fact = [ 0 for i in range ( n + 1 ) ]\n    fact [ 0 ] = 1\n    idx_m1ue = 0\n    list_gn12 = range ( 1 , n + 1 , 1 )\n    while idx_m1ue < len(list_gn12):\n        i = list_gn12[idx_m1ue]\n        fact [ i ] = fact [ i - 1 ] + i\n        idx_m1ue = idx_m1ue + 1\n    left = n - ( r + g + b )\n    sum = 0\n    idx_nojm = 0\n    list_ugas = range ( 0 , left + 1 , 1 )\n    while idx_nojm < len(list_ugas):\n        i = list_ugas[idx_nojm]\n        idx_9gqd = 0\n        list_cd43 = range ( 0 , left - i + 1 , 1 )\n        while idx_9gqd < len(list_cd43):\n            j = list_cd43[idx_9gqd]\n            k = left - ( i + j )\n            sum = int ( sum + fact [ n ] / ( fact [ i + r ] + fact [ j + b ] + fact [ k + g ] ) )\n            idx_9gqd = idx_9gqd + 1\n        idx_nojm = idx_nojm + 1\n    return sum", "id": "For2While_sample_from_COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION_to_50", "old_id": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION"}
{"code": "def countP ( n , k ) :\n    dp = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ]\n    idx_tsx4 = 0\n    list_yjn2 = range ( n + 1 )\n    while idx_tsx4 < len(list_yjn2):\n        i = list_yjn2[idx_tsx4]\n        dp [ i ] [ 0 ] = 0\n        idx_tsx4 = idx_tsx4 + 1\n    idx_y0os = 0\n    list_8aie = range ( k + 1 )\n    while idx_y0os < len(list_8aie):\n        i = list_8aie[idx_y0os]\n        dp [ 0 ] [ k ] = 0\n        idx_y0os = idx_y0os + 1\n    idx_kexb = 0\n    list_xzn1 = range ( 1 , n + 1 )\n    while idx_kexb < len(list_xzn1):\n        i = list_xzn1[idx_kexb]\n        idx_fuv1 = 0\n        list_iad2 = range ( 1 , k + 1 )\n        while idx_fuv1 < len(list_iad2):\n            j = list_iad2[idx_fuv1]\n            if ( j == 1 or i == j ) :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] )\n            idx_fuv1 = idx_fuv1 + 1\n        idx_kexb = idx_kexb + 1\n    return dp [ n ] [ k ]", "id": "For2While_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_51", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def count ( n ) :\n    table = [ 0 for i in range ( n + 1 ) ]\n    table [ 0 ] = 1\n    idx_7cy1 = 0\n    list_dbaw = range ( 3 , n + 1 )\n    while idx_7cy1 < len(list_dbaw):\n        i = list_dbaw[idx_7cy1]\n        table [ i ] += table [ i - 3 ]\n        idx_7cy1 = idx_7cy1 + 1\n    idx_4kdi = 0\n    list_8z71 = range ( 5 , n + 1 )\n    while idx_4kdi < len(list_8z71):\n        i = list_8z71[idx_4kdi]\n        table [ i ] += table [ i - 5 ]\n        idx_4kdi = idx_4kdi + 1\n    idx_i5m2 = 0\n    list_bv2m = range ( 10 , n + 1 )\n    while idx_i5m2 < len(list_bv2m):\n        i = list_bv2m[idx_i5m2]\n        table [ i ] += table [ i - 10 ]\n        idx_i5m2 = idx_i5m2 + 1\n    return table [ n ]", "id": "For2While_sample_from_COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME_to_52", "old_id": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME"}
{"code": "def countWays ( n , m ) :\n    count = [ ]\n    idx_9bdi = 0\n    list_pmky = range ( n + 2 )\n    while idx_9bdi < len(list_pmky):\n        i = list_pmky[idx_9bdi]\n        count.append ( 0 )\n        idx_9bdi = idx_9bdi + 1\n    count [ 0 ] = 0\n    idx_k145 = 0\n    list_j4du = range ( 1 , n + 1 )\n    while idx_k145 < len(list_j4du):\n        i = list_j4du[idx_k145]\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n        idx_k145 = idx_k145 + 1\n    return count [ n ]", "id": "For2While_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_53", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = ( n * ( n + 1 ) ) // 2\n    a_index = 0\n    b_index = 0\n    c_index = 0\n    idx_27pu = 0\n    list_bqn5 = range ( n )\n    while idx_27pu < len(list_bqn5):\n        i = list_bqn5[idx_27pu]\n        if ( str [ i ] == 'a' ) :\n            a_index = i + 1\n            ans -= min ( b_index , c_index )\n        elif ( str [ i ] == 'b' ) :\n            b_index = i + 1\n            ans -= min ( a_index , c_index )\n        else :\n            c_index = i + 1\n            ans -= min ( a_index , b_index )\n        idx_27pu = idx_27pu + 1\n    return ans", "id": "For2While_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_54", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = 0\n    res = 0\n    idx_lb1j = 0\n    list_otgr = range ( len ( s ) )\n    while idx_lb1j < len(list_otgr):\n        i = list_otgr[idx_lb1j]\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n        idx_lb1j = idx_lb1j + 1\n    return res", "id": "For2While_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_55", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    idx_x9mo = 0\n    list_e290 = range ( 0 , n )\n    while idx_x9mo < len(list_e290):\n        i = list_e290[idx_x9mo]\n        idx_30qv = 0\n        list_1izk = range ( i + 1 , n )\n        while idx_30qv < len(list_1izk):\n            j = list_1izk[idx_30qv]\n            if arr [ i ] - arr [ j ] == k or arr [ j ] - arr [ i ] == k :\n                count += 1\n            idx_30qv = idx_30qv + 1\n        idx_x9mo = idx_x9mo + 1\n    return count", "id": "For2While_sample_from_COUNT_PAIRS_DIFFERENCE_EQUAL_K_to_56", "old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    idx_dfwz = 0\n    list_9iha = range ( m )\n    while idx_dfwz < len(list_9iha):\n        i = list_9iha[idx_dfwz]\n        idx_zunk = 0\n        list_3b0w = range ( n )\n        while idx_zunk < len(list_3b0w):\n            j = list_3b0w[idx_zunk]\n            if arr1 [ i ] + arr2 [ j ] == x :\n                count = count + 1\n            idx_zunk = idx_zunk + 1\n        idx_dfwz = idx_dfwz + 1\n    return count", "id": "For2While_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_to_57", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    idx_ir7h = 0\n    list_p2rt = range ( m )\n    while idx_ir7h < len(list_p2rt):\n        i = list_p2rt[idx_ir7h]\n        us.add ( arr1 [ i ] )\n        idx_ir7h = idx_ir7h + 1\n    idx_srqy = 0\n    list_stnp = range ( n )\n    while idx_srqy < len(list_stnp):\n        j = list_stnp[idx_srqy]\n        if x - arr2 [ j ] in us :\n            count += 1\n        idx_srqy = idx_srqy + 1\n    return count", "id": "For2While_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1_to_58", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1"}
{"code": "def countPairs ( arr , n ) :\n    result = 0 ;\n    idx_mcfi = 0\n    list_gvd8 = range ( 0 , n )\n    while idx_mcfi < len(list_gvd8):\n        i = list_gvd8[idx_mcfi]\n        idx_4i3l = 0\n        list_k0dv = range ( i + 1 , n )\n        while idx_4i3l < len(list_k0dv):\n            j = list_k0dv[idx_4i3l]\n            product = arr [ i ] * arr [ j ] ;\n            idx_uqyp = 0\n            list_flqs = range ( 0 , n )\n            while idx_uqyp < len(list_flqs):\n                k = list_flqs[idx_uqyp]\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n                idx_uqyp = idx_uqyp + 1\n            idx_4i3l = idx_4i3l + 1\n        idx_mcfi = idx_mcfi + 1\n    return result ;", "id": "For2While_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_to_59", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    idx_htqx = 0\n    list_ng8d = range ( n )\n    while idx_htqx < len(list_ng8d):\n        i = list_ng8d[idx_htqx]\n        Hash.add ( arr [ i ] )\n        idx_htqx = idx_htqx + 1\n    idx_fltx = 0\n    list_5am8 = range ( n )\n    while idx_fltx < len(list_5am8):\n        i = list_5am8[idx_fltx]\n        idx_xheu = 0\n        list_46vq = range ( i + 1 , n )\n        while idx_xheu < len(list_46vq):\n            j = list_46vq[idx_xheu]\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += 1\n            idx_xheu = idx_xheu + 1\n        idx_fltx = idx_fltx + 1\n    return result", "id": "For2While_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1_to_60", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1"}
{"code": "def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    idx_0opr = 0\n    list_l05w = range ( n )\n    while idx_0opr < len(list_l05w):\n        i = list_l05w[idx_0opr]\n        P [ i ] [ i ] = True\n        idx_0opr = idx_0opr + 1\n    idx_wn60 = 0\n    list_if3b = range ( n - 1 )\n    while idx_wn60 < len(list_if3b):\n        i = list_if3b[idx_wn60]\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n        idx_wn60 = idx_wn60 + 1\n    idx_nyjg = 0\n    list_zq2r = range ( 2 , n )\n    while idx_nyjg < len(list_zq2r):\n        gap = list_zq2r[idx_nyjg]\n        idx_stld = 0\n        list_ocef = range ( n - gap )\n        while idx_stld < len(list_ocef):\n            i = list_ocef[idx_stld]\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n            idx_stld = idx_stld + 1\n        idx_nyjg = idx_nyjg + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_61", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countPS ( str ) :\n    N = len ( str )\n    cps = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N + 2 ) ]\n    idx_arqy = 0\n    list_emrn = range ( N )\n    while idx_arqy < len(list_emrn):\n        i = list_emrn[idx_arqy]\n        cps [ i ] [ i ] = 1\n        idx_arqy = idx_arqy + 1\n    idx_b7tw = 0\n    list_ifrm = range ( 2 , N + 1 )\n    while idx_b7tw < len(list_ifrm):\n        L = list_ifrm[idx_b7tw]\n        idx_alhb = 0\n        list_3e0q = range ( N )\n        while idx_alhb < len(list_3e0q):\n            i = list_3e0q[idx_alhb]\n            k = L + i - 1\n            if ( k < N ) :\n                if ( str [ i ] == str [ k ] ) :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] + 1 )\n                else :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] - cps [ i + 1 ] [ k - 1 ] )\n            idx_alhb = idx_alhb + 1\n        idx_b7tw = idx_b7tw + 1\n    return cps [ 0 ] [ N - 1 ]", "id": "For2While_sample_from_COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_to_62", "old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING"}
{"code": "def countDecodingDP ( digits , n ) :\n    count = [ 0 ] * ( n + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    if digits [ 0 ] == '0' :\n        return 0\n    idx_twpz = 0\n    list_90xb = range ( 2 , n + 1 )\n    while idx_twpz < len(list_90xb):\n        i = list_90xb[idx_twpz]\n        count [ i ] = 0\n        if ( digits [ i - 1 ] > '0' ) :\n            count [ i ] = count [ i - 1 ]\n        if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == '2' and digits [ i - 1 ] < '7' ) ) :\n            count [ i ] += count [ i - 2 ]\n        idx_twpz = idx_twpz + 1\n    return count [ n ]", "id": "For2While_sample_from_COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1_to_63", "old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1"}
{"code": "def findgroups ( arr , n ) :\n    c = [ 0 , 0 , 0 ]\n    res = 0\n    idx_a601 = 0\n    list_qbvf = range ( 0 , n )\n    while idx_a601 < len(list_qbvf):\n        i = list_qbvf[idx_a601]\n        c [ arr [ i ] % 3 ] += 1\n        idx_a601 = idx_a601 + 1\n    res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 )\n    res += c [ 1 ] * c [ 2 ]\n    res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) / 6\n    res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) / 6\n    res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) ) / 6 )\n    res += c [ 0 ] * c [ 1 ] * c [ 2 ]\n    return res", "id": "For2While_sample_from_COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3_to_64", "old_id": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3"}
{"code": "def numberOfPaths ( m , n ) :\n    count = [ [ 0 for x in range ( m ) ] for y in range ( n ) ]\n    idx_qf78 = 0\n    list_7j2x = range ( m )\n    while idx_qf78 < len(list_7j2x):\n        i = list_7j2x[idx_qf78]\n        count [ i ] [ 0 ] = 1 ;\n        idx_qf78 = idx_qf78 + 1\n    idx_eqdi = 0\n    list_v1u3 = range ( n )\n    while idx_eqdi < len(list_v1u3):\n        j = list_v1u3[idx_eqdi]\n        count [ 0 ] [ j ] = 1 ;\n        idx_eqdi = idx_eqdi + 1\n    idx_drgo = 0\n    list_8mq2 = range ( 1 , m )\n    while idx_drgo < len(list_8mq2):\n        i = list_8mq2[idx_drgo]\n        idx_oda3 = 0\n        list_p8b7 = range ( n )\n        while idx_oda3 < len(list_p8b7):\n            j = list_p8b7[idx_oda3]\n            count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ]\n            idx_oda3 = idx_oda3 + 1\n        idx_drgo = idx_drgo + 1\n    return count [ m - 1 ] [ n - 1 ]", "id": "For2While_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1_to_65", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1"}
{"code": "def numberOfPaths ( m , n ) :\n    dp = [ 0 for i in range ( n ) ]\n    dp[0]=1\n    idx_6g8w = 0\n    list_6r0k = range ( m  )\n    while idx_6g8w < len(list_6r0k):\n        i = list_6r0k[idx_6g8w]\n        idx_4ykn = 0\n        list_mfon = range ( 1 , n )\n        while idx_4ykn < len(list_mfon):\n            j = list_mfon[idx_4ykn]\n            dp [ j ] += dp [ j - 1 ]\n            idx_4ykn = idx_4ykn + 1\n        idx_6g8w = idx_6g8w + 1\n    return dp [ n - 1 ]", "id": "For2While_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2_to_66", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2"}
{"code": "def numberOfPaths ( m , n ) :\n    idx_ioqd = 0\n    list_aywn = range ( n , ( m + n - 1 ) )\n    while idx_ioqd < len(list_aywn):\n        i = list_aywn[idx_ioqd]\n        path *= i\n        path //= ( i - n + 1 )\n        idx_ioqd = idx_ioqd + 1\n    return path", "id": "For2While_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3_to_67", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3"}
{"code": "def countRotations ( n ) :\n    l = len ( n )\n    if ( l == 1 ) :\n        oneDigit = ( int ) ( n [ 0 ] )\n        if ( oneDigit % 4 == 0 ) :\n            return 1\n        return 0\n    count = 0\n    idx_r06l = 0\n    list_tv2f = range ( 0 , l - 1 )\n    while idx_r06l < len(list_tv2f):\n        i = list_tv2f[idx_r06l]\n        twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i + 1 ] )\n        if ( twoDigit % 4 == 0 ) :\n            count = count + 1\n        idx_r06l = idx_r06l + 1\n    twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 ] )\n    if ( twoDigit % 4 == 0 ) :\n        count = count + 1\n    return count", "id": "For2While_sample_from_COUNT_ROTATIONS_DIVISIBLE_4_to_68", "old_id": "COUNT_ROTATIONS_DIVISIBLE_4"}
{"code": "def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) :\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) :\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    threeDigit = 0\n    idx_4dyn = 0\n    list_i0br = range ( 0 , ( l - 2 ) )\n    while idx_4dyn < len(list_i0br):\n        i = list_i0br[idx_4dyn]\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) :\n            count += 1\n        idx_4dyn = idx_4dyn + 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    return count", "id": "For2While_sample_from_COUNT_ROTATIONS_DIVISIBLE_8_to_69", "old_id": "COUNT_ROTATIONS_DIVISIBLE_8"}
{"code": "def sortedCount ( mat , r , c ) :\n    result = 0\n    idx_1bac = 0\n    list_l028 = range ( r )\n    while idx_1bac < len(list_l028):\n        i = list_l028[idx_1bac]\n        j = 0\n        idx_dph6 = 0\n        list_1rjc = range ( c - 1 )\n        while idx_dph6 < len(list_1rjc):\n            j = list_1rjc[idx_dph6]\n            if mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] :\n                break\n            idx_dph6 = idx_dph6 + 1\n        if j == c - 2 :\n            result += 1\n        idx_1bac = idx_1bac + 1\n    idx_82dz = 0\n    list_7bdj = range ( 0 , r )\n    while idx_82dz < len(list_7bdj):\n        i = list_7bdj[idx_82dz]\n        j = 0\n        idx_pa6b = 0\n        list_tb40 = range ( c - 1 , 0 , - 1 )\n        while idx_pa6b < len(list_tb40):\n            j = list_tb40[idx_pa6b]\n            if mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] :\n                break\n            idx_pa6b = idx_pa6b + 1\n        if c > 1 and j == 1 :\n            result += 1\n        idx_82dz = idx_82dz + 1\n    return result", "id": "For2While_sample_from_COUNT_SORTED_ROWS_MATRIX_to_70", "old_id": "COUNT_SORTED_ROWS_MATRIX"}
{"code": "def countStrings ( n ) :\n    a = [ 0 ] * n\n    b = [ 0 ] * n\n    a [ 0 ] = b [ 0 ] = 1\n    idx_vj86 = 0\n    list_nktl = range ( 1 , n )\n    while idx_vj86 < len(list_nktl):\n        i = list_nktl[idx_vj86]\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n        idx_vj86 = idx_vj86 + 1\n    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]", "id": "For2While_sample_from_COUNT_STRINGS_WITH_CONSECUTIVE_1S_to_71", "old_id": "COUNT_STRINGS_WITH_CONSECUTIVE_1S"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = 0\n    ans = 0\n    hash_positive = [ 0 ] * ( n + 1 )\n    hash_negative = [ 0 ] * ( n + 1 )\n    hash_positive [ 0 ] = 1\n    idx_w4ar = 0\n    list_mpk4 = range ( n )\n    while idx_w4ar < len(list_mpk4):\n        i = list_mpk4[idx_w4ar]\n        if ( arr [ i ] & 1 == 1 ) :\n            difference = difference + 1\n        else :\n            difference = difference - 1\n        if ( difference < 0 ) :\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = hash_negative [ - difference ] + 1\n        else :\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = hash_positive [ difference ] + 1\n        idx_w4ar = idx_w4ar + 1\n    return ans", "id": "For2While_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_72", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSubstringWithEqualEnds ( s ) :\n    result = 0\n    n = len ( s )\n    idx_mso1 = 0\n    list_opmx = range ( n )\n    while idx_mso1 < len(list_opmx):\n        i = list_opmx[idx_mso1]\n        idx_8kx4 = 0\n        list_paqu = range ( i , n )\n        while idx_8kx4 < len(list_paqu):\n            j = list_paqu[idx_8kx4]\n            if ( s [ i ] == s [ j ] ) :\n                result = result + 1\n            idx_8kx4 = idx_8kx4 + 1\n        idx_mso1 = idx_mso1 + 1\n    return result", "id": "For2While_sample_from_COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_to_73", "old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS"}
{"code": "def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        idx_e284 = 0\n        list_aehn = range ( 0 , n + 1 )\n        while idx_e284 < len(list_aehn):\n            j = list_aehn[idx_e284]\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n            idx_e284 = idx_e284 + 1\n        i += 1\n    return ans", "id": "For2While_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_74", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def countWays ( n ) :\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( 2 ) ]\n    dp [ 0 ] [ 1 ] = 1\n    dp [ 1 ] [ 1 ] = 2\n    idx_7uxy = 0\n    list_nv9p = range ( 2 , n + 1 )\n    while idx_7uxy < len(list_nv9p):\n        i = list_nv9p[idx_7uxy]\n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]\n        dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] )\n        idx_7uxy = idx_7uxy + 1\n    return dp [ 0 ] [ n ] + dp [ 1 ] [ n ]", "id": "For2While_sample_from_COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS_to_75", "old_id": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS"}
{"code": "def chordCnt ( A ) :\n    n = 2 * A\n    dpArray = [ 0 ] * ( n + 1 )\n    dpArray [ 0 ] = 1\n    dpArray [ 2 ] = 1\n    idx_akrj = 0\n    list_f8h0 = range ( 4 , n + 1 , 2 )\n    while idx_akrj < len(list_f8h0):\n        i = list_f8h0[idx_akrj]\n        idx_k1i2 = 0\n        list_6d9e = range ( 0 , i - 1 , 2 )\n        while idx_k1i2 < len(list_6d9e):\n            j = list_6d9e[idx_k1i2]\n            dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j ] )\n            idx_k1i2 = idx_k1i2 + 1\n        idx_akrj = idx_akrj + 1\n    return int ( dpArray [ n ] )", "id": "For2While_sample_from_COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS_to_76", "old_id": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS"}
{"code": "def countWords ( str , n ) :\n    m = dict ( )\n    idx_i2ag = 0\n    list_5ebd = range ( n )\n    while idx_i2ag < len(list_5ebd):\n        i = list_5ebd[idx_i2ag]\n        m [ str [ i ] ] = m.get ( str [ i ] , 0 ) + 1\n        idx_i2ag = idx_i2ag + 1\n    res = 0\n    idx_x40g = 0\n    list_t9p0 = m.values ( )\n    while idx_x40g < len(list_t9p0):\n        i = list_t9p0[idx_x40g]\n        if i == 2 :\n            res += 1\n        idx_x40g = idx_x40g + 1\n    return res", "id": "For2While_sample_from_COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS_to_77", "old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS"}
{"code": "def countWords ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) :\n        return count\n    if ( str [ 0 ] == str [ 1 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    idx_46eq = 0\n    list_p4wv = range ( 1 , len - 1 )\n    while idx_46eq < len(list_p4wv):\n        j = list_p4wv[idx_46eq]\n        if ( str [ j ] == str [ j - 1 ] and str [ j ] == str [ j + 1 ] ) :\n            count *= 1\n        elif ( str [ j ] == str [ j - 1 ] or str [ j ] == str [ j + 1 ] or str [ j - 1 ] == str [ j + 1 ] ) :\n            count *= 2\n        else :\n            count *= 3\n        idx_46eq = idx_46eq + 1\n    if ( str [ len - 1 ] == str [ len - 2 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    return count", "id": "For2While_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_78", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def repeat ( s , n ) :\n    s1 = s\n    idx_6ybc = 0\n    list_v8ka = range ( 1 , n )\n    while idx_6ybc < len(list_v8ka):\n        i = list_v8ka[idx_6ybc]\n        s += s1\n        idx_6ybc = idx_6ybc + 1\n    return s", "id": "For2While_sample_from_C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES_to_79", "old_id": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = 256\n    count = [ 0 ] * NO_OF_CHARS\n    idx_2n5s = 0\n    list_gzpy = range ( len ( str ) )\n    while idx_2n5s < len(list_gzpy):\n        i = list_gzpy[idx_2n5s]\n        count [ ord ( str [ i ] ) ] += 1\n        idx_2n5s = idx_2n5s + 1\n    first , second = 0 , 0\n    idx_y8oi = 0\n    list_ipx2 = range ( NO_OF_CHARS )\n    while idx_y8oi < len(list_ipx2):\n        i = list_ipx2[idx_y8oi]\n        if count [ i ] > count [ first ] :\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n        idx_y8oi = idx_y8oi + 1\n    return chr ( second )", "id": "For2While_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_80", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decode ( Str ) :\n    integerstack = [ ]\n    stringstack = [ ]\n    temp = \"\"\n    result = \"\"\n    idx_g13f = 0\n    list_enis = range ( len ( Str ) )\n    while idx_g13f < len(list_enis):\n        i = list_enis[idx_g13f]\n        count = 0\n        if ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = count * 10 + ord ( Str [ i ] ) - ord ( '0' )\n                i += 1\n            i -= 1\n            integerstack.append ( count )\n        elif ( Str [ i ] == ']' ) :\n            temp = \"\"\n            count = 0\n            if ( len ( integerstack ) != 0 ) :\n                count = integerstack [ - 1 ]\n                integerstack.pop ( )\n            while ( len ( stringstack ) != 0 and stringstack [ - 1 ] != '[' ) :\n                temp = stringstack [ - 1 ] + temp\n                stringstack.pop ( )\n            if ( len ( stringstack ) != 0 and stringstack [ - 1 ] == '[' ) :\n                stringstack.pop ( )\n            idx_bylv = 0\n            list_2cmq = range ( count )\n            while idx_bylv < len(list_2cmq):\n                j = list_2cmq[idx_bylv]\n                result = result + temp\n                idx_bylv = idx_bylv + 1\n            idx_hsn1 = 0\n            list_405a = range ( len ( result ) )\n            while idx_hsn1 < len(list_405a):\n                j = list_405a[idx_hsn1]\n                stringstack.append ( result [ j ] )\n                idx_hsn1 = idx_hsn1 + 1\n            result = \"\"\n        elif ( Str [ i ] == '[' ) :\n            if ( Str [ i - 1 ] >= '0' and Str [ i - 1 ] <= '9' ) :\n                stringstack.append ( Str [ i ] )\n            else :\n                stringstack.append ( Str [ i ] )\n                integerstack.append ( 1 )\n        else :\n            stringstack.append ( Str [ i ] )\n        idx_g13f = idx_g13f + 1\n    while len ( stringstack ) != 0 :\n        result = stringstack [ - 1 ] + result\n        stringstack.pop ( )\n    return result", "id": "For2While_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_81", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def dealnnoy ( n , m ) :\n    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m + 1 ) ]\n    idx_b7ri = 0\n    list_egoq = range ( m + 1 )\n    while idx_b7ri < len(list_egoq):\n        i = list_egoq[idx_b7ri]\n        dp [ 0 ] [ i ] = 1\n        idx_b7ri = idx_b7ri + 1\n    idx_vp84 = 0\n    list_5re7 = range ( m + 1 )\n    while idx_vp84 < len(list_5re7):\n        i = list_5re7[idx_vp84]\n        dp [ i ] [ 0 ] = 1\n        idx_vp84 = idx_vp84 + 1\n    idx_ng5l = 0\n    list_i3mo = range ( 1 , m + 1 )\n    while idx_ng5l < len(list_i3mo):\n        i = list_i3mo[idx_ng5l]\n        idx_a0fp = 0\n        list_arcd = range ( 1 , n + 1 )\n        while idx_a0fp < len(list_arcd):\n            j = list_arcd[idx_a0fp]\n            dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] + dp [ i ] [ j - 1 ]\n            idx_a0fp = idx_a0fp + 1\n        idx_ng5l = idx_ng5l + 1\n    return dp [ m ] [ n ]", "id": "For2While_sample_from_DELANNOY_NUMBER_1_to_82", "old_id": "DELANNOY_NUMBER_1"}
{"code": "def isDDM ( m , n ) :\n    idx_q128 = 0\n    list_2brg = range ( 0 , n )\n    while idx_q128 < len(list_2brg):\n        i = list_2brg[idx_q128]\n        sum = 0\n        idx_mfvr = 0\n        list_oysv = range ( 0 , n )\n        while idx_mfvr < len(list_oysv):\n            j = list_oysv[idx_mfvr]\n            sum = sum + abs ( m [ i ] [ j ] )\n            idx_mfvr = idx_mfvr + 1\n        sum = sum - abs ( m [ i ] [ i ] )\n        if ( abs ( m [ i ] [ i ] ) < sum ) :\n            return False\n        idx_q128 = idx_q128 + 1\n    return True", "id": "For2While_sample_from_DIAGONALLY_DOMINANT_MATRIX_to_83", "old_id": "DIAGONALLY_DOMINANT_MATRIX"}
{"code": "def findWays ( m , n , x ) :\n    table = [ [ 0 ] * ( x + 1 ) for i in range ( n + 1 ) ]\n    idx_nx6u = 0\n    list_z70r = range ( 1 , min ( m + 1 , x + 1 ) )\n    while idx_nx6u < len(list_z70r):\n        j = list_z70r[idx_nx6u]\n        table [ 1 ] [ j ] = 1\n        idx_nx6u = idx_nx6u + 1\n    idx_bk06 = 0\n    list_uvxz = range ( 2 , n + 1 )\n    while idx_bk06 < len(list_uvxz):\n        i = list_uvxz[idx_bk06]\n        idx_zb0e = 0\n        list_nz6w = range ( 1 , x + 1 )\n        while idx_zb0e < len(list_nz6w):\n            j = list_nz6w[idx_zb0e]\n            idx_b2j9 = 0\n            list_tnud = range ( 1 , min ( m + 1 , j ) )\n            while idx_b2j9 < len(list_tnud):\n                k = list_tnud[idx_b2j9]\n                table [ i ] [ j ] += table [ i - 1 ] [ j - k ]\n                idx_b2j9 = idx_b2j9 + 1\n            idx_zb0e = idx_zb0e + 1\n        idx_bk06 = idx_bk06 + 1\n    return table [ - 1 ] [ - 1 ]", "id": "For2While_sample_from_DICE_THROW_PROBLEM_to_84", "old_id": "DICE_THROW_PROBLEM"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = 0\n    max_count = 0\n    min_count = n\n    idx_032b = 0\n    list_nxk9 = range ( 0 , ( n - 1 ) )\n    while idx_032b < len(list_nxk9):\n        i = list_nxk9[idx_032b]\n        if arr [ i ] == arr [ i + 1 ] :\n            count += 1\n            continue\n        else :\n            max_count = max ( max_count , count )\n            min_count = min ( min_count , count )\n            count = 0\n        idx_032b = idx_032b + 1\n    return max_count - min_count", "id": "For2While_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_85", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def findDiff ( arr , n ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_xmhr = 0\n    list_9zbj = range ( n )\n    while idx_xmhr < len(list_9zbj):\n        i = list_9zbj[idx_xmhr]\n        mp [ arr [ i ] ] += 1\n        idx_xmhr = idx_xmhr + 1\n    max_count = 0\n    min_count = n\n    idx_gbv7 = 0\n    list_1pqc = list(mp.items ( ))\n    while idx_gbv7 < len(list_1pqc):\n        key , values = list_1pqc[idx_gbv7]\n        max_count = max ( max_count , values )\n        min_count = min ( min_count , values )\n        idx_gbv7 = idx_gbv7 + 1\n    return max_count - min_count", "id": "For2While_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1_to_86", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1"}
{"code": "def numberofways ( n , m ) :\n    dp = np.zeros ( ( n + 2 , n + 2 ) )\n    dp [ 0 ] [ n + 1 ] = 1\n    idx_vwuy = 0\n    list_ek3p = range ( n , m - 1 , - 1 )\n    while idx_vwuy < len(list_ek3p):\n        k = list_ek3p[idx_vwuy]\n        idx_y9ik = 0\n        list_1kf8 = range ( n + 1 )\n        while idx_y9ik < len(list_1kf8):\n            i = list_1kf8[idx_y9ik]\n            dp [ i ] [ k ] = dp [ i ] [ k + 1 ]\n            if ( i - k >= 0 ) :\n                dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] )\n            idx_y9ik = idx_y9ik + 1\n        idx_vwuy = idx_vwuy + 1\n    return dp [ n ] [ m ]", "id": "For2While_sample_from_DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M_to_87", "old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M"}
{"code": "def discreteLogarithm ( a , b , m ) :\n    n = int ( math.sqrt ( m ) + 1 )\n    an = 1\n    idx_518o = 0\n    list_nkdv = range ( n )\n    while idx_518o < len(list_nkdv):\n        i = list_nkdv[idx_518o]\n        an = ( an * a ) % m\n        idx_518o = idx_518o + 1\n    value = [ 0 ] * m\n    cur = an\n    idx_1g8e = 0\n    list_osdg = range ( 1 , n + 1 )\n    while idx_1g8e < len(list_osdg):\n        i = list_osdg[idx_1g8e]\n        if ( value [ cur ] == 0 ) :\n            value [ cur ] = i\n        cur = ( cur * an ) % m\n        idx_1g8e = idx_1g8e + 1\n    cur = b\n    idx_45fg = 0\n    list_4ouc = range ( n + 1 )\n    while idx_45fg < len(list_4ouc):\n        i = list_4ouc[idx_45fg]\n        if ( value [ cur ] > 0 ) :\n            ans = value [ cur ] * n - i\n            if ( ans < m ) :\n                return ans\n        cur = ( cur * a ) % m\n        idx_45fg = idx_45fg + 1\n    return - 1", "id": "For2While_sample_from_DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B_to_88", "old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B"}
{"code": "def checkCount ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_2hky = 0\n    list_s69d = range ( n )\n    while idx_2hky < len(list_s69d):\n        i = list_s69d[idx_2hky]\n        mp [ arr [ i ] ] += 1\n        idx_2hky = idx_2hky + 1\n    idx_tyhp = 0\n    list_wa6r = list(mp.items ( ))\n    while idx_tyhp < len(list_wa6r):\n        key , values = list_wa6r[idx_tyhp]\n        if values > 2 * k :\n            return False\n        idx_tyhp = idx_tyhp + 1\n    return True", "id": "For2While_sample_from_DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1_to_89", "old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1"}
{"code": "def isDvisibleBy12 ( num ) :\n    if ( len ( num ) >= 3 ) :\n        d1 = int ( num [ len ( num ) - 1 ] )\n        if ( d1 % 2 != 0 ) :\n            return False\n        d2 = int ( num [ len ( num ) - 2 ] )\n        sum = 0\n        idx_aowg = 0\n        list_g4nq = range ( 0 , len ( num ) )\n        while idx_aowg < len(list_g4nq):\n            i = list_g4nq[idx_aowg]\n            sum += int ( num [ i ] )\n            idx_aowg = idx_aowg + 1\n        return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 )\n    else :\n        number = int ( num )\n        return ( number % 12 == 0 )", "id": "For2While_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_90", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def doublefactorial ( n ) :\n    res = 1\n    idx_xamr = 0\n    list_o5n7 = range ( n , - 1 , - 2 )\n    while idx_xamr < len(list_o5n7):\n        i = list_o5n7[idx_xamr]\n        if ( i == 0 or i == 1 ) :\n            return res\n        else :\n            res *= i\n        idx_xamr = idx_xamr + 1\n    return res;", "id": "For2While_sample_from_DOUBLE_FACTORIAL_1_to_91", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def eggDrop ( n , k ) :\n    eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in range ( n + 1 ) ]\n    idx_npz4 = 0\n    list_keg8 = range ( 1 , n + 1 )\n    while idx_npz4 < len(list_keg8):\n        i = list_keg8[idx_npz4]\n        eggFloor [ i ] [ 1 ] = 1\n        eggFloor [ i ] [ 0 ] = 0\n        idx_npz4 = idx_npz4 + 1\n    idx_slrq = 0\n    list_6kv1 = range ( 1 , k + 1 )\n    while idx_slrq < len(list_6kv1):\n        j = list_6kv1[idx_slrq]\n        eggFloor [ 1 ] [ j ] = j\n        idx_slrq = idx_slrq + 1\n    idx_1ejq = 0\n    list_nu4w = range ( 2 , n + 1 )\n    while idx_1ejq < len(list_nu4w):\n        i = list_nu4w[idx_1ejq]\n        idx_kbgj = 0\n        list_0aqw = range ( 2 , k + 1 )\n        while idx_kbgj < len(list_0aqw):\n            j = list_0aqw[idx_kbgj]\n            eggFloor [ i ] [ j ] = INT_MAX\n            idx_keg7 = 0\n            list_kjl5 = range ( 1 , j + 1 )\n            while idx_keg7 < len(list_kjl5):\n                x = list_kjl5[idx_keg7]\n                res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] )\n                if res < eggFloor [ i ] [ j ] :\n                    eggFloor [ i ] [ j ] = res\n                idx_keg7 = idx_keg7 + 1\n            idx_kbgj = idx_kbgj + 1\n        idx_1ejq = idx_1ejq + 1\n    return eggFloor [ n ] [ k ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1_to_92", "old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1"}
{"code": "def lps ( seq ) :\n    n = len ( seq )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    idx_fp8a = 0\n    list_exs0 = range ( n )\n    while idx_fp8a < len(list_exs0):\n        i = list_exs0[idx_fp8a]\n        L [ i ] [ i ] = 1\n        idx_fp8a = idx_fp8a + 1\n    idx_iha0 = 0\n    list_1ynz = range ( 2 , n + 1 )\n    while idx_iha0 < len(list_1ynz):\n        cl = list_1ynz[idx_iha0]\n        idx_mcj9 = 0\n        list_hua1 = range ( n - cl + 1 )\n        while idx_mcj9 < len(list_hua1):\n            i = list_hua1[idx_mcj9]\n            j = i + cl - 1\n            if seq [ i ] == seq [ j ] and cl == 2 :\n                L [ i ] [ j ] = 2\n            elif seq [ i ] == seq [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n            idx_mcj9 = idx_mcj9 + 1\n        idx_iha0 = idx_iha0 + 1\n    return L [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_93", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def maxSumIS ( arr , n ) :\n    max = 0\n    msis = [ 0 for x in range ( n ) ]\n    idx_bwoe = 0\n    list_dgh9 = range ( n )\n    while idx_bwoe < len(list_dgh9):\n        i = list_dgh9[idx_bwoe]\n        msis [ i ] = arr [ i ]\n        idx_bwoe = idx_bwoe + 1\n    idx_qxw1 = 0\n    list_kugo = range ( 1 , n )\n    while idx_qxw1 < len(list_kugo):\n        i = list_kugo[idx_qxw1]\n        idx_mvdf = 0\n        list_a6gr = range ( i )\n        while idx_mvdf < len(list_a6gr):\n            j = list_a6gr[idx_mvdf]\n            if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) :\n                msis [ i ] = msis [ j ] + arr [ i ]\n            idx_mvdf = idx_mvdf + 1\n        idx_qxw1 = idx_qxw1 + 1\n    idx_8qjx = 0\n    list_lcbr = range ( n )\n    while idx_8qjx < len(list_lcbr):\n        i = list_lcbr[idx_8qjx]\n        if max < msis [ i ] :\n            max = msis [ i ]\n        idx_8qjx = idx_8qjx + 1\n    return max", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE_to_94", "old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE"}
{"code": "def lbs ( arr , n ) :\n    lis = [ 1 for i in range ( n + 1 ) ]\n    idx_copb = 0\n    list_qe2m = range ( 1 , n )\n    while idx_copb < len(list_qe2m):\n        i = list_qe2m[idx_copb]\n        idx_6t2s = 0\n        list_f1nu = range ( 0 , i )\n        while idx_6t2s < len(list_f1nu):\n            j = list_f1nu[idx_6t2s]\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) :\n                lis [ i ] = lis [ j ] + 1\n            idx_6t2s = idx_6t2s + 1\n        idx_copb = idx_copb + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    idx_w03q = 0\n    list_axb2 = reversed ( range ( n - 1 ) )\n    while idx_w03q < len(list_axb2):\n        i = list_axb2[idx_w03q]\n        idx_j4ft = 0\n        list_6bmy = reversed ( range ( i - 1 , n ) )\n        while idx_j4ft < len(list_6bmy):\n            j = list_6bmy[idx_j4ft]\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) :\n                lds [ i ] = lds [ j ] + 1\n            idx_j4ft = idx_j4ft + 1\n        idx_w03q = idx_w03q + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    idx_r9oz = 0\n    list_bzwy = range ( 1 , n )\n    while idx_r9oz < len(list_bzwy):\n        i = list_bzwy[idx_r9oz]\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n        idx_r9oz = idx_r9oz + 1\n    return maximum", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE_to_95", "old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    idx_pjba = 0\n    list_je23 = range ( n )\n    while idx_pjba < len(list_je23):\n        i = list_je23[idx_pjba]\n        P [ i ] [ i ] = True\n        C [ i ] [ i ] = 0\n        idx_pjba = idx_pjba + 1\n    idx_1t9l = 0\n    list_akqu = range ( 2 , n + 1 )\n    while idx_1t9l < len(list_akqu):\n        L = list_akqu[idx_1t9l]\n        idx_28bj = 0\n        list_hxkb = range ( n - L + 1 )\n        while idx_28bj < len(list_hxkb):\n            i = list_hxkb[idx_28bj]\n            j = i + L - 1\n            if L == 2 :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                idx_bo8q = 0\n                list_7tlc = range ( i , j )\n                while idx_bo8q < len(list_7tlc):\n                    k = list_7tlc[idx_bo8q]\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n                    idx_bo8q = idx_bo8q + 1\n            idx_28bj = idx_28bj + 1\n        idx_1t9l = idx_1t9l + 1\n    return C [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_96", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    idx_2tow = 0\n    list_um6n = range ( n )\n    while idx_2tow < len(list_um6n):\n        i = list_um6n[idx_2tow]\n        if symb [ i ] == 'F' :\n            F [ i ] [ i ] = 1\n        else :\n            F [ i ] [ i ] = 0\n        if symb [ i ] == 'T' :\n            T [ i ] [ i ] = 1\n        else :\n            T [ i ] [ i ] = 0\n        idx_2tow = idx_2tow + 1\n    idx_n4pj = 0\n    list_pc9j = range ( 1 , n )\n    while idx_n4pj < len(list_pc9j):\n        gap = list_pc9j[idx_n4pj]\n        i = 0\n        idx_agyu = 0\n        list_bp17 = range ( gap , n )\n        while idx_agyu < len(list_bp17):\n            j = list_bp17[idx_agyu]\n            T [ i ] [ j ] = F [ i ] [ j ] = 0\n            idx_kcop = 0\n            list_d7xr = range ( gap )\n            while idx_kcop < len(list_d7xr):\n                g = list_d7xr[idx_kcop]\n                k = i + g\n                tik = T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ]\n                if oper [ k ] == '&' :\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] )\n                if oper [ k ] == '|' :\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                if oper [ k ] == '^' :\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + 1 ] [ j ] + T [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + 1 ] [ j ] + F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                idx_kcop = idx_kcop + 1\n            i += 1\n            idx_agyu = idx_agyu + 1\n        idx_n4pj = idx_n4pj + 1\n    return T [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_97", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def lis ( arr , n) :\n    lis = [ 1 ] * n\n    idx_rmtv = 0\n    list_80c2 = range ( 1 , n )\n    while idx_rmtv < len(list_80c2):\n        i = list_80c2[idx_rmtv]\n        idx_9q3s = 0\n        list_s6jd = range ( 0 , i )\n        while idx_9q3s < len(list_s6jd):\n            j = list_s6jd[idx_9q3s]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 :\n                lis [ i ] = lis [ j ] + 1\n            idx_9q3s = idx_9q3s + 1\n        idx_rmtv = idx_rmtv + 1\n    maximum = 0\n    idx_inc8 = 0\n    list_wpti = range ( n )\n    while idx_inc8 < len(list_wpti):\n        i = list_wpti[idx_inc8]\n        maximum = max ( maximum , lis [ i ] )\n        idx_inc8 = idx_inc8 + 1\n    return maximum", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1_to_98", "old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def MatrixChainOrder ( p , i , j ) :\n    if i == j :\n        return 0\n    _min = sys.maxsize\n    idx_epji = 0\n    list_esxg = range ( i , j )\n    while idx_epji < len(list_esxg):\n        k = list_esxg[idx_epji]\n        count = ( MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] )\n        if count < _min :\n            _min = count\n        idx_epji = idx_epji + 1\n    return _min", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION_to_99", "old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION"}
{"code": "def isSubsetSum ( set , n , sum ) :\n    subset = ( [ [ False for i in range ( sum + 1 ) ] for i in range ( n + 1 ) ] )\n    idx_w19v = 0\n    list_mfq7 = range ( n + 1 )\n    while idx_w19v < len(list_mfq7):\n        i = list_mfq7[idx_w19v]\n        subset [ i ] [ 0 ] = True\n        idx_w19v = idx_w19v + 1\n    idx_bwc4 = 0\n    list_mdb3 = range ( 1 , sum + 1 )\n    while idx_bwc4 < len(list_mdb3):\n        i = list_mdb3[idx_bwc4]\n        subset [ 0 ] [ i ] = False\n        idx_bwc4 = idx_bwc4 + 1\n    idx_02dg = 0\n    list_0yus = range ( 1 , n + 1 )\n    while idx_02dg < len(list_0yus):\n        i = list_0yus[idx_02dg]\n        idx_wo9k = 0\n        list_5kvy = range ( 1 , sum + 1 )\n        while idx_wo9k < len(list_5kvy):\n            j = list_5kvy[idx_wo9k]\n            if j < set [ i - 1 ] :\n                subset [ i ] [ j ] = subset [ i - 1 ] [ j ]\n            if j >= set [ i - 1 ] :\n                subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] or subset [ i - 1 ] [ j - set [ i - 1 ] ] )\n            idx_wo9k = idx_wo9k + 1\n        idx_02dg = idx_02dg + 1\n    return subset [ n ] [ sum ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1_to_100", "old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1"}
{"code": "def countNum ( arr , n ) :\n    count = 0\n    arr = arr[:n]\n    arr.sort ( )\n    idx_htp8 = 0\n    list_rh5d = range ( 0 , n - 1 )\n    while idx_htp8 < len(list_rh5d):\n        i = list_rh5d[idx_htp8]\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1\n        idx_htp8 = idx_htp8 + 1\n    return count", "id": "For2While_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_to_101", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY"}
{"code": "def countNum ( arr , n ) :\n    s = dict ( )\n    count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9\n    idx_g9rc = 0\n    list_lo01 = range ( n )\n    while idx_g9rc < len(list_lo01):\n        i = list_lo01[idx_g9rc]\n        s [ arr [ i ] ] = 1\n        if ( arr [ i ] < minm ) :\n            minm = arr [ i ]\n        if ( arr [ i ] > maxm ) :\n            maxm = arr [ i ]\n        idx_g9rc = idx_g9rc + 1\n    idx_aym1 = 0\n    list_khuj = range ( minm , maxm + 1 )\n    while idx_aym1 < len(list_khuj):\n        i = list_khuj[idx_aym1]\n        if i not in s.keys ( ) :\n            count += 1\n        idx_aym1 = idx_aym1 + 1\n    return count", "id": "For2While_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1_to_102", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1"}
{"code": "def equilibrium ( arr , n) :\n    leftsum = 0\n    rightsum = 0\n    idx_r1bp = 0\n    list_jf1l = range ( n )\n    while idx_r1bp < len(list_jf1l):\n        i = list_jf1l[idx_r1bp]\n        leftsum = 0\n        rightsum = 0\n        idx_da4g = 0\n        list_odfh = range ( i )\n        while idx_da4g < len(list_odfh):\n            j = list_odfh[idx_da4g]\n            leftsum += arr [ j ]\n            idx_da4g = idx_da4g + 1\n        idx_kesd = 0\n        list_xnv9 = range ( i + 1 , n )\n        while idx_kesd < len(list_xnv9):\n            j = list_xnv9[idx_kesd]\n            rightsum += arr [ j ]\n            idx_kesd = idx_kesd + 1\n        if leftsum == rightsum :\n            return i\n        idx_r1bp = idx_r1bp + 1\n    return - 1", "id": "For2While_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_to_103", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY"}
{"code": "def equilibrium ( arr ,n) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    idx_6c49 = 0\n    list_qj26 = list(enumerate ( arr ))\n    while idx_6c49 < len(list_qj26):\n        i , num = list_qj26[idx_6c49]\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n        idx_6c49 = idx_6c49 + 1\n    return - 1", "id": "For2While_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_1_to_104", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1"}
{"code": "def squareRootExists ( n , p ) :\n    n = n % p\n    idx_wpi7 = 0\n    list_0k1q = range ( 2 , p , 1 )\n    while idx_wpi7 < len(list_0k1q):\n        x = list_0k1q[idx_wpi7]\n        if ( ( x * x ) % p == n ) :\n            return True\n        idx_wpi7 = idx_wpi7 + 1\n    return False", "id": "For2While_sample_from_EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS_to_105", "old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS"}
{"code": "def maxHamming ( arr , n ) :\n    brr = [ 0 ] * ( 2 * n + 1 )\n    idx_982n = 0\n    list_htaq = range ( n )\n    while idx_982n < len(list_htaq):\n        i = list_htaq[idx_982n]\n        brr [ i ] = arr [ i ]\n        idx_982n = idx_982n + 1\n    idx_fyqc = 0\n    list_fc31 = range ( n )\n    while idx_fyqc < len(list_fc31):\n        i = list_fc31[idx_fyqc]\n        brr [ n + i ] = arr [ i ]\n        idx_fyqc = idx_fyqc + 1\n    maxHam = 0\n    idx_z5kq = 0\n    list_10cp = range ( 1 , n )\n    while idx_z5kq < len(list_10cp):\n        i = list_10cp[idx_z5kq]\n        currHam = 0\n        k = 0\n        idx_fm9n = 0\n        list_v6oz = range ( i , i + n )\n        while idx_fm9n < len(list_v6oz):\n            j = list_v6oz[idx_fm9n]\n            if brr [ j ] != arr [ k ] :\n                currHam += 1\n                k = k + 1\n            idx_fm9n = idx_fm9n + 1\n        if currHam == n :\n            return n\n        maxHam = max ( maxHam , currHam )\n        idx_z5kq = idx_z5kq + 1\n    return maxHam", "id": "For2While_sample_from_FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE_to_106", "old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE"}
{"code": "def find3Numbers ( A , arr_size , sum ) :\n    idx_d0ha = 0\n    list_stwx = range ( 0 , arr_size - 2 )\n    while idx_d0ha < len(list_stwx):\n        i = list_stwx[idx_d0ha]\n        idx_uia4 = 0\n        list_v51e = range ( i + 1 , arr_size - 1 )\n        while idx_uia4 < len(list_v51e):\n            j = list_v51e[idx_uia4]\n            idx_fls9 = 0\n            list_ftn8 = range ( j + 1 , arr_size )\n            while idx_fls9 < len(list_ftn8):\n                k = list_ftn8[idx_fls9]\n                if A [ i ] + A [ j ] + A [ k ] == sum :\n                    print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , A [ k ] )\n                    return True\n                idx_fls9 = idx_fls9 + 1\n            idx_uia4 = idx_uia4 + 1\n        idx_d0ha = idx_d0ha + 1\n    return False", "id": "For2While_sample_from_FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_to_107", "old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = [ ]\n    idx_shiu = 0\n    list_xtvk = string\n    while idx_shiu < len(list_xtvk):\n        ch = list_xtvk[idx_shiu]\n        if ch == ')' :\n            top = Stack.pop ( )\n            elementsInside = 0\n            while top != '(' :\n                elementsInside += 1\n                top = Stack.pop ( )\n            if elementsInside < 1 :\n                return True\n        else :\n            Stack.append ( ch )\n        idx_shiu = idx_shiu + 1\n    return False", "id": "For2While_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_108", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def firstFactorialDivisibleNumber ( x ) :\n    i = 1\n    fact = 1\n    idx_40dy = 0\n    list_i9ka = range ( 1 , x )\n    while idx_40dy < len(list_i9ka):\n        i = list_i9ka[idx_40dy]\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n        idx_40dy = idx_40dy + 1\n    return i", "id": "For2While_sample_from_FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X_to_109", "old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X"}
{"code": "def findExtra ( arr1 , arr2 , n ) :\n    idx_j4t2 = 0\n    list_bxh3 = range ( 0 , n )\n    while idx_j4t2 < len(list_bxh3):\n        i = list_bxh3[idx_j4t2]\n        if ( arr1 [ i ] != arr2 [ i ] ) :\n            return i\n        idx_j4t2 = idx_j4t2 + 1\n    return n", "id": "For2While_sample_from_FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_to_110", "old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY"}
{"code": "def findLargestd ( S , n ) :\n    found = False\n    S = S[:n]\n    S.sort ( )\n    idx_quyf = 0\n    list_6o1y = range ( n - 1 , - 1 , - 1 )\n    while idx_quyf < len(list_6o1y):\n        i = list_6o1y[idx_quyf]\n        idx_42qp = 0\n        list_trou = range ( 0 , n )\n        while idx_42qp < len(list_trou):\n            j = list_trou[idx_42qp]\n            if ( i == j ) :\n                continue\n            idx_k4b1 = 0\n            list_5moj = range ( j + 1 , n )\n            while idx_k4b1 < len(list_5moj):\n                k = list_5moj[idx_k4b1]\n                if ( i == k ) :\n                    continue\n                idx_5suz = 0\n                list_ahju = range ( k + 1 , n )\n                while idx_5suz < len(list_ahju):\n                    l = list_ahju[idx_5suz]\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n                    idx_5suz = idx_5suz + 1\n                idx_k4b1 = idx_k4b1 + 1\n            idx_42qp = idx_42qp + 1\n        idx_quyf = idx_quyf + 1\n    if ( found == False ) :\n        return - 1", "id": "For2While_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_to_111", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D"}
{"code": "def findFourElements ( arr , n ) :\n    mp = dict ( )\n    idx_6wv0 = 0\n    list_2lv1 = range ( n - 1 )\n    while idx_6wv0 < len(list_2lv1):\n        i = list_2lv1[idx_6wv0]\n        idx_ne6g = 0\n        list_bsfv = range ( i + 1 , n )\n        while idx_ne6g < len(list_bsfv):\n            j = list_bsfv[idx_ne6g]\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n            idx_ne6g = idx_ne6g + 1\n        idx_6wv0 = idx_6wv0 + 1\n    d = - 10 ** 9\n    idx_qr2w = 0\n    list_9mvp = range ( n - 1 )\n    while idx_qr2w < len(list_9mvp):\n        i = list_9mvp[idx_qr2w]\n        idx_ldba = 0\n        list_xylw = range ( i + 1 , n )\n        while idx_ldba < len(list_xylw):\n            j = list_xylw[idx_ldba]\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) :\n                p = mp [ abs_diff ]\n                if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1 ] != i and p [ 1 ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n            idx_ldba = idx_ldba + 1\n        idx_qr2w = idx_qr2w + 1\n    return d", "id": "For2While_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1_to_112", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1"}
{"code": "def maxPrimeFactors ( n ) :\n    maxPrime = - 1\n    while n % 2 == 0 :\n        maxPrime = 2\n        n >>= 1\n    idx_otl9 = 0\n    list_24hj = range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 )\n    while idx_otl9 < len(list_24hj):\n        i = list_24hj[idx_otl9]\n        while n % i == 0 :\n            maxPrime = i\n            n = n / i\n        idx_otl9 = idx_otl9 + 1\n    if n > 2 :\n        maxPrime = n\n    return int ( maxPrime )", "id": "For2While_sample_from_FIND_LARGEST_PRIME_FACTOR_NUMBER_to_113", "old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = 1\n    if ( A == B ) :\n        return 1\n    elif ( ( B - A ) >= 5 ) :\n        return 0\n    else :\n        idx_wo0m = 0\n        list_cohl = range ( A + 1 , B + 1 )\n        while idx_wo0m < len(list_cohl):\n            i = list_cohl[idx_wo0m]\n            variable = ( variable * ( i % 10 ) ) % 10\n            idx_wo0m = idx_wo0m + 1\n        return variable % 10", "id": "For2While_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_114", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - 1\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    idx_048r = 0\n    list_0hyv = range ( 1 , n )\n    while idx_048r < len(list_0hyv):\n        i = list_0hyv[idx_048r]\n        csum [ i ] = csum [ i - 1 ] + arr [ i ]\n        idx_048r = idx_048r + 1\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    idx_jvfd = 0\n    list_4hr9 = range ( k , n )\n    while idx_jvfd < len(list_4hr9):\n        i = list_4hr9[idx_jvfd]\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n        idx_jvfd = idx_jvfd + 1\n    return max_end - k + 1", "id": "For2While_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_to_115", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    idx_7a41 = 0\n    list_0w3c = range ( 1 , k )\n    while idx_7a41 < len(list_0w3c):\n        i = list_0w3c[idx_7a41]\n        sum += arr [ i ]\n        idx_7a41 = idx_7a41 + 1\n    max_sum = sum\n    max_end = k - 1\n    idx_mzd8 = 0\n    list_u7yw = range ( k , n )\n    while idx_mzd8 < len(list_u7yw):\n        i = list_u7yw[idx_mzd8]\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n        idx_mzd8 = idx_mzd8 + 1\n    return max_end - k + 1", "id": "For2While_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1_to_116", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1"}
{"code": "def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    idx_s6mf = 0\n    list_nxtg = range ( 1 , n + 1 , 1 )\n    while idx_s6mf < len(list_nxtg):\n        i = list_nxtg[idx_s6mf]\n        idx_tur8 = 0\n        list_tv4d = range ( i , m + 1 , 1 )\n        while idx_tur8 < len(list_tv4d):\n            j = list_tv4d[idx_tur8]\n            dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] )\n            idx_tur8 = idx_tur8 + 1\n        idx_s6mf = idx_s6mf + 1\n    return dp [ n ] [ m ]", "id": "For2While_sample_from_FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S_to_117", "old_id": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S"}
{"code": "def maxProduct ( arr , n ) :\n    if n < 3 :\n        return - 1\n    max_product = - ( sys.maxsize - 1 )\n    idx_e50v = 0\n    list_ut32 = range ( 0 , n - 2 )\n    while idx_e50v < len(list_ut32):\n        i = list_ut32[idx_e50v]\n        idx_tr59 = 0\n        list_xjde = range ( i + 1 , n - 1 )\n        while idx_tr59 < len(list_xjde):\n            j = list_xjde[idx_tr59]\n            idx_3xlk = 0\n            list_is74 = range ( j + 1 , n )\n            while idx_3xlk < len(list_is74):\n                k = list_is74[idx_3xlk]\n                max_product = max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] )\n                idx_3xlk = idx_3xlk + 1\n            idx_tr59 = idx_tr59 + 1\n        idx_e50v = idx_e50v + 1\n    return max_product", "id": "For2While_sample_from_FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_to_118", "old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = 0 , 0 , 0\n    idx_eu3v = 0\n    list_q95r = range ( n1 )\n    while idx_eu3v < len(list_q95r):\n        i = list_q95r[idx_eu3v]\n        sum1 += stack1 [ i ]\n        idx_eu3v = idx_eu3v + 1\n    idx_xf39 = 0\n    list_lp37 = range ( n2 )\n    while idx_xf39 < len(list_lp37):\n        i = list_lp37[idx_xf39]\n        sum2 += stack2 [ i ]\n        idx_xf39 = idx_xf39 + 1\n    idx_jz2x = 0\n    list_6bfy = range ( n3 )\n    while idx_jz2x < len(list_6bfy):\n        i = list_6bfy[idx_jz2x]\n        sum3 += stack3 [ i ]\n        idx_jz2x = idx_jz2x + 1\n    top1 , top2 , top3 = 0 , 0 , 0\n    ans = 0\n    while ( 1 ) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) :\n            return 0\n        if ( sum1 == sum2 and sum2 == sum3 ) :\n            return sum1\n        if ( sum1 >= sum2 and sum1 >= sum3 ) :\n            sum1 -= stack1 [ top1 ]\n            top1 = top1 + 1\n        elif ( sum2 >= sum3 and sum2 >= sum3 ) :\n            sum2 -= stack2 [ top2 ]\n            top2 = top2 + 1\n        elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n            sum3 -= stack3 [ top3 ]\n            top3 = top3 + 1", "id": "For2While_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_119", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = sys.maxsize\n    mx = - sys.maxsize - 1\n    idx_wj2i = 0\n    list_bk3j = range ( r )\n    while idx_wj2i < len(list_bk3j):\n        i = list_bk3j[idx_wj2i]\n        if m [ i ] [ 0 ] < mi :\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ c - 1 ] > mx :\n            mx = m [ i ] [ c - 1 ]\n        idx_wj2i = idx_wj2i + 1\n    desired = ( r * c + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ]\n        idx_42ys = 0\n        list_bdym = range ( r )\n        while idx_42ys < len(list_bdym):\n            i = list_bdym[idx_42ys]\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n            idx_42ys = idx_42ys + 1\n        if place [ 0 ] < desired :\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return mi", "id": "For2While_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_120", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    idx_0zwc = 0\n    list_57cj = range ( n - 1 )\n    while idx_0zwc < len(list_57cj):\n        i = list_57cj[idx_0zwc]\n        idx_1nla = 0\n        list_dmsr = range ( i + 1 , n )\n        while idx_1nla < len(list_dmsr):\n            j = list_dmsr[idx_1nla]\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n            idx_1nla = idx_1nla + 1\n        idx_0zwc = idx_0zwc + 1\n    return diff", "id": "For2While_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_to_121", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR"}
{"code": "def findMinDiff ( arr , n ) :\n    arr = arr[:n]\n    arr = sorted ( arr )\n    diff = 10 ** 20\n    idx_9lao = 0\n    list_m2to = range ( n - 1 )\n    while idx_9lao < len(list_m2to):\n        i = list_m2to[idx_9lao]\n        if arr [ i + 1 ] - arr [ i ] < diff :\n            diff = arr [ i + 1 ] - arr [ i ]\n        idx_9lao = idx_9lao + 1\n    return diff", "id": "For2While_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_1_to_122", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1"}
{"code": "def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    idx_bmws = 0\n    list_7hb0 = range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 )\n    while idx_bmws < len(list_7hb0):\n        i = list_7hb0[idx_bmws]\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n        idx_bmws = idx_bmws + 1\n    if n > 2 :\n        ans *= n\n    return ans", "id": "For2While_sample_from_FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE_to_123", "old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE"}
{"code": "def minCoins ( coins , m , V ) :\n    table = [ 0 for i in range ( V + 1 ) ]\n    table [ 0 ] = 0\n    idx_c90f = 0\n    list_szm9 = range ( 1 , V + 1 )\n    while idx_c90f < len(list_szm9):\n        i = list_szm9[idx_c90f]\n        table [ i ] = sys.maxsize\n        idx_c90f = idx_c90f + 1\n    idx_9mpb = 0\n    list_78uc = range ( 1 , V + 1 )\n    while idx_9mpb < len(list_78uc):\n        i = list_78uc[idx_9mpb]\n        idx_9hvr = 0\n        list_p9ba = range ( m )\n        while idx_9hvr < len(list_p9ba):\n            j = list_p9ba[idx_9hvr]\n            if ( coins [ j ] <= i ) :\n                sub_res = table [ i - coins [ j ] ]\n                if ( sub_res != sys.maxsize and sub_res + 1 < table [ i ] ) :\n                    table [ i ] = sub_res + 1\n            idx_9hvr = idx_9hvr + 1\n        idx_9mpb = idx_9mpb + 1\n    return table [ V ]", "id": "For2While_sample_from_FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1_to_124", "old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1"}
{"code": "def minRadius ( k , x , y , n ) :\n    dis = [ 0 ] * n\n    idx_mad9 = 0\n    list_m5au = range ( 0 , n )\n    while idx_mad9 < len(list_m5au):\n        i = list_m5au[idx_mad9]\n        dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]\n        idx_mad9 = idx_mad9 + 1\n    dis.sort ( )\n    return dis [ k - 1 ]", "id": "For2While_sample_from_FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE_to_125", "old_id": "FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE"}
{"code": "def countEndless ( input , n ) :\n    row = np.zeros ( ( n , n ) )\n    col = np.zeros ( ( n , n ) )\n    idx_x0a4 = 0\n    list_jx5e = range ( n )\n    while idx_x0a4 < len(list_jx5e):\n        j = list_jx5e[idx_x0a4]\n        isEndless = 1\n        idx_h0xi = 0\n        list_p0r1 = range ( n - 1 , - 1 , - 1 )\n        while idx_h0xi < len(list_p0r1):\n            i = list_p0r1[idx_h0xi]\n            if ( input [ i ] [ j ] == 0 ) :\n                isEndless = 0\n            col [ i ] [ j ] = isEndless\n            idx_h0xi = idx_h0xi + 1\n        idx_x0a4 = idx_x0a4 + 1\n    idx_hn38 = 0\n    list_b9sl = range ( n )\n    while idx_hn38 < len(list_b9sl):\n        i = list_b9sl[idx_hn38]\n        isEndless = 1\n        idx_0lw8 = 0\n        list_t6hb = range ( n - 1 , - 1 , - 1 )\n        while idx_0lw8 < len(list_t6hb):\n            j = list_t6hb[idx_0lw8]\n            if ( input [ i ] [ j ] == 0 ) :\n                isEndless = 0\n            row [ i ] [ j ] = isEndless\n            idx_0lw8 = idx_0lw8 + 1\n        idx_hn38 = idx_hn38 + 1\n    ans = 0\n    idx_xgz5 = 0\n    list_y9vs = range ( n )\n    while idx_xgz5 < len(list_y9vs):\n        i = list_y9vs[idx_xgz5]\n        idx_z4bq = 0\n        list_rnsz = range ( 1 , n )\n        while idx_z4bq < len(list_rnsz):\n            j = list_rnsz[idx_z4bq]\n            if ( row [ i ] [ j ] and col [ i ] [ j ] ) :\n                ans += 1\n            idx_z4bq = idx_z4bq + 1\n        idx_xgz5 = idx_xgz5 + 1\n    return ans", "id": "For2While_sample_from_FIND_NUMBER_ENDLESS_POINTS_to_126", "old_id": "FIND_NUMBER_ENDLESS_POINTS"}
{"code": "def CountSquares ( a , b ) :\n    cnt = 0\n    idx_jzuo = 0\n    list_7xbe = range ( a , b + 1 )\n    while idx_jzuo < len(list_7xbe):\n        i = list_7xbe[idx_jzuo]\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n        idx_jzuo = idx_jzuo + 1\n    return cnt", "id": "For2While_sample_from_FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_to_127", "old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS"}
{"code": "def count ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    lookup = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    idx_avyn = 0\n    list_jyam = range ( n + 1 )\n    while idx_avyn < len(list_jyam):\n        i = list_jyam[idx_avyn]\n        lookup [ 0 ] [ i ] = 0\n        idx_avyn = idx_avyn + 1\n    idx_yk4x = 0\n    list_mfct = range ( m + 1 )\n    while idx_yk4x < len(list_mfct):\n        i = list_mfct[idx_yk4x]\n        lookup [ i ] [ 0 ] = 1\n        idx_yk4x = idx_yk4x + 1\n    idx_jobf = 0\n    list_iyze = range ( 1 , m + 1 )\n    while idx_jobf < len(list_iyze):\n        i = list_iyze[idx_jobf]\n        idx_41ek = 0\n        list_zl2p = range ( 1 , n + 1 )\n        while idx_41ek < len(list_zl2p):\n            j = list_zl2p[idx_41ek]\n            if a [ i - 1 ] == b [ j - 1 ] :\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ]\n            else :\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ]\n            idx_41ek = idx_41ek + 1\n        idx_jobf = idx_jobf + 1\n    return lookup [ m ] [ n ]", "id": "For2While_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_128", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def countOps ( A , B , m , n ) :\n    idx_4b9l = 0\n    list_fnl5 = range ( n )\n    while idx_4b9l < len(list_fnl5):\n        i = list_fnl5[idx_4b9l]\n        idx_vdte = 0\n        list_096w = range ( m )\n        while idx_vdte < len(list_096w):\n            j = list_096w[idx_vdte]\n            A [ i ] [ j ] -= B [ i ] [ j ]\n            idx_vdte = idx_vdte + 1\n        idx_4b9l = idx_4b9l + 1\n    idx_0aw6 = 0\n    list_06pj = range ( 1 , n )\n    while idx_0aw6 < len(list_06pj):\n        i = list_06pj[idx_0aw6]\n        idx_cl9q = 0\n        list_pqdi = range ( 1 , n )\n        while idx_cl9q < len(list_pqdi):\n            j = list_pqdi[idx_cl9q]\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) :\n                return - 1\n            idx_cl9q = idx_cl9q + 1\n        idx_0aw6 = idx_0aw6 + 1\n    result = 0\n    idx_b03z = 0\n    list_vrel = range ( n )\n    while idx_b03z < len(list_vrel):\n        i = list_vrel[idx_b03z]\n        result += abs ( A [ i ] [ 0 ] )\n        idx_b03z = idx_b03z + 1\n    idx_mrb2 = 0\n    list_2rhi = range ( m )\n    while idx_mrb2 < len(list_2rhi):\n        j = list_2rhi[idx_mrb2]\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] )\n        idx_mrb2 = idx_mrb2 + 1\n    return ( result )", "id": "For2While_sample_from_FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL_to_129", "old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL"}
{"code": "def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    idx_oj38 = 0\n    list_slgc = range ( 2 , n + 1 )\n    while idx_oj38 < len(list_slgc):\n        i = list_slgc[idx_oj38]\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n        idx_oj38 = idx_oj38 + 1\n    return DP [ n ]", "id": "For2While_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_130", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def findExtraCharcter ( strA , strB ) :\n    res = 0\n    idx_xj4e = 0\n    list_ryle = range ( 0 , len ( strA ) )\n    while idx_xj4e < len(list_ryle):\n        i = list_ryle[idx_xj4e]\n        res = res ^ ( ord ) ( strA [ i ] )\n        idx_xj4e = idx_xj4e + 1\n    idx_wfeg = 0\n    list_73jh = range ( 0 , len ( strB ) )\n    while idx_wfeg < len(list_73jh):\n        i = list_73jh[idx_wfeg]\n        res = res ^ ( ord ) ( strB [ i ] )\n        idx_wfeg = idx_wfeg + 1\n    return ( ( chr ) ( res ) ) ;", "id": "For2While_sample_from_FIND_ONE_EXTRA_CHARACTER_STRING_1_to_131", "old_id": "FIND_ONE_EXTRA_CHARACTER_STRING_1"}
{"code": "def pairSum ( mat , n , sum ) :\n    idx_4gc1 = 0\n    list_cgzp = range ( n )\n    while idx_4gc1 < len(list_cgzp):\n        i = list_cgzp[idx_4gc1]\n        mat [ i ].sort ( )\n        idx_4gc1 = idx_4gc1 + 1\n    idx_upv5 = 0\n    list_1taw = range ( n - 1 )\n    while idx_upv5 < len(list_1taw):\n        i = list_1taw[idx_upv5]\n        idx_rjp4 = 0\n        list_nchv = range ( i + 1 , n )\n        while idx_rjp4 < len(list_nchv):\n            j = list_nchv[idx_rjp4]\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1\n            idx_rjp4 = idx_rjp4 + 1\n        idx_upv5 = idx_upv5 + 1", "id": "For2While_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_132", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def findMaxGCD ( arr , n ) :\n    high = 0\n    idx_avyc = 0\n    list_e2za = range ( 0 , n )\n    while idx_avyc < len(list_e2za):\n        i = list_e2za[idx_avyc]\n        high = max ( high , arr [ i ] )\n        idx_avyc = idx_avyc + 1\n    count = [ 0 ] * ( high + 1 )\n    idx_zo34 = 0\n    list_fkod = range ( 0 , n )\n    while idx_zo34 < len(list_fkod):\n        i = list_fkod[idx_zo34]\n        count [ arr [ i ] ] += 1\n        idx_zo34 = idx_zo34 + 1\n    counter = 0\n    idx_afu8 = 0\n    list_euho = range ( high , 0 , - 1 )\n    while idx_afu8 < len(list_euho):\n        i = list_euho[idx_afu8]\n        j = i\n        while ( j <= high ) :\n            if ( count [ j ] > 0 ) :\n                counter += count [ j ]\n            j += i\n            if ( counter == 2 ) :\n                return i\n        counter = 0\n        idx_afu8 = idx_afu8 + 1\n    return 1\n", "id": "For2While_sample_from_FIND_PAIR_MAXIMUM_GCD_ARRAY_1_to_133", "old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1"}
{"code": "def findGreatest ( arr , n ) :\n    result = - 1\n    idx_j5kz = 0\n    list_vpr5 = range ( n )\n    while idx_j5kz < len(list_vpr5):\n        i = list_vpr5[idx_j5kz]\n        idx_rizq = 0\n        list_ovur = range ( n - 1 )\n        while idx_rizq < len(list_ovur):\n            j = list_ovur[idx_rizq]\n            idx_8m74 = 0\n            list_jdhr = range ( j + 1 , n )\n            while idx_8m74 < len(list_jdhr):\n                k = list_jdhr[idx_8m74]\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n                idx_8m74 = idx_8m74 + 1\n            idx_rizq = idx_rizq + 1\n        idx_j5kz = idx_j5kz + 1\n    return result", "id": "For2While_sample_from_FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_to_134", "old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY"}
{"code": "def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( m [ 0 ] )\n    idx_sq2u = 0\n    list_39c8 = range ( rows )\n    while idx_sq2u < len(list_39c8):\n        y1 = list_39c8[idx_sq2u]\n        idx_8r7o = 0\n        list_9v5f = range ( columns )\n        while idx_8r7o < len(list_9v5f):\n            x1 = list_9v5f[idx_8r7o]\n            if ( m [ y1 ] [ x1 ] == 1 ) :\n                idx_i5eu = 0\n                list_uq9m = range ( y1 + 1 , rows )\n                while idx_i5eu < len(list_uq9m):\n                    y2 = list_uq9m[idx_i5eu]\n                    idx_w9oc = 0\n                    list_enax = range ( x1 + 1 , columns )\n                    while idx_w9oc < len(list_enax):\n                        x2 = list_enax[idx_w9oc]\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n                        idx_w9oc = idx_w9oc + 1\n                    idx_i5eu = idx_i5eu + 1\n            idx_8r7o = idx_8r7o + 1\n        idx_sq2u = idx_sq2u + 1\n    return False", "id": "For2While_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_to_135", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1"}
{"code": "def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    idx_s4hr = 0\n    list_5qk1 = range ( rows )\n    while idx_s4hr < len(list_5qk1):\n        i = list_5qk1[idx_s4hr]\n        idx_tgb5 = 0\n        list_hkm8 = range ( columns - 1 )\n        while idx_tgb5 < len(list_hkm8):\n            j = list_hkm8[idx_tgb5]\n            idx_wijy = 0\n            list_w8po = range ( j + 1 , columns )\n            while idx_wijy < len(list_w8po):\n                k = list_w8po[idx_wijy]\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n                idx_wijy = idx_wijy + 1\n            idx_tgb5 = idx_tgb5 + 1\n        idx_s4hr = idx_s4hr + 1\n    return False", "id": "For2While_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1_to_136", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1"}
{"code": "def findRepeating ( arr , n ) :\n    s = set ( )\n    idx_rlwk = 0\n    list_swm7 = range ( n )\n    while idx_rlwk < len(list_swm7):\n        i = list_swm7[idx_rlwk]\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n        idx_rlwk = idx_rlwk + 1\n    rteurn - 1", "id": "For2While_sample_from_FIND_REPETITIVE_ELEMENT_1_N_1_1_to_137", "old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1"}
{"code": "def subArraySum ( arr , n , sum ) :\n    idx_qieo = 0\n    list_efmj = range ( n )\n    while idx_qieo < len(list_efmj):\n        i = list_efmj[idx_qieo]\n        curr_sum = arr [ i ]\n        j = i + 1\n        while j <= n :\n            if curr_sum == sum :\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( i , j - 1 ) )\n                return 1\n            if curr_sum > sum or j == n :\n                break\n            curr_sum = curr_sum + arr [ j ]\n            j += 1\n        idx_qieo = idx_qieo + 1\n    print ( \"No subarray found\" )\n    return 0", "id": "For2While_sample_from_FIND_SUBARRAY_WITH_GIVEN_SUM_to_138", "old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM"}
{"code": "def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) :\n        return 0\n    res = 1\n    idx_xi83 = 0\n    list_lfq9 = range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 )\n    while idx_xi83 < len(list_lfq9):\n        i = list_lfq9[idx_xi83]\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) :\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n        idx_xi83 = idx_xi83 + 1\n    if ( n >= 2 ) :\n        res = res * ( 1 + n )\n    return res", "id": "For2While_sample_from_FIND_SUM_EVEN_FACTORS_NUMBER_to_139", "old_id": "FIND_SUM_EVEN_FACTORS_NUMBER"}
{"code": "def evenSum ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_pe4z = 0\n    list_mqud = range ( 0 , n + 1 )\n    while idx_pe4z < len(list_mqud):\n        i = list_mqud[idx_pe4z]\n        idx_eh7p = 0\n        list_jiyh = range ( 0 , min ( i , n ) + 1 )\n        while idx_eh7p < len(list_jiyh):\n            j = list_jiyh[idx_eh7p]\n            if j == 0 or j == i :\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            idx_eh7p = idx_eh7p + 1\n        idx_pe4z = idx_pe4z + 1\n    sum = 0 ;\n    idx_jzt1 = 0\n    list_ludy = range ( 0 , n + 1 )\n    while idx_jzt1 < len(list_ludy):\n        i = list_ludy[idx_jzt1]\n        if i % 2 == 0 :\n            sum = sum + C [ n ] [ i ]\n        idx_jzt1 = idx_jzt1 + 1\n    return sum", "id": "For2While_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_140", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum ( N , K ) :\n    ans = 0\n    idx_domh = 0\n    list_cir7 = range ( 1 , N + 1 )\n    while idx_domh < len(list_cir7):\n        i = list_cir7[idx_domh]\n        ans += ( i % K )\n        idx_domh = idx_domh + 1\n    return ans", "id": "For2While_sample_from_FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_to_141", "old_id": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER"}
{"code": "def sumofoddFactors ( n ) :\n    res = 1\n    while n % 2 == 0 :\n        n = n // 2\n    idx_uf1w = 0\n    list_08om = range ( 3 , int ( math.sqrt ( n ) + 1 ) )\n    while idx_uf1w < len(list_08om):\n        i = list_08om[idx_uf1w]\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n        idx_uf1w = idx_uf1w + 1\n    if n >= 2 :\n        res *= ( 1 + n )\n    return res", "id": "For2While_sample_from_FIND_SUM_ODD_FACTORS_NUMBER_to_142", "old_id": "FIND_SUM_ODD_FACTORS_NUMBER"}
{"code": "def findSubarraySum ( arr , n ) :\n    res = 0\n    m = dict ( )\n    idx_p7jf = 0\n    list_92pi = range ( n )\n    while idx_p7jf < len(list_92pi):\n        i = list_92pi[idx_p7jf]\n        Sum = 0\n        idx_toex = 0\n        list_qaxi = range ( i , n )\n        while idx_toex < len(list_qaxi):\n            j = list_qaxi[idx_toex]\n            Sum += arr [ j ]\n            m [ Sum ] = m.get ( Sum , 0 ) + 1\n            idx_toex = idx_toex + 1\n        idx_p7jf = idx_p7jf + 1\n    idx_nidk = 0\n    list_runz = m\n    while idx_nidk < len(list_runz):\n        x = list_runz[idx_nidk]\n        if m [ x ] == 1 :\n            res += x\n        idx_nidk = idx_nidk + 1\n    return res", "id": "For2While_sample_from_FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY_to_143", "old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY"}
{"code": "def findElement ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ 0 ] = float ( '-inf' )\n    idx_0xik = 0\n    list_76d2 = range ( 1 , n )\n    while idx_0xik < len(list_76d2):\n        i = list_76d2[idx_0xik]\n        leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] )\n        idx_0xik = idx_0xik + 1\n    rightMin = float ( 'inf' )\n    idx_4tbc = 0\n    list_0zhj = range ( n - 1 , - 1 , - 1 )\n    while idx_4tbc < len(list_0zhj):\n        i = list_0zhj[idx_4tbc]\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] :\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n        idx_4tbc = idx_4tbc + 1\n    return - 1", "id": "For2While_sample_from_FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT_to_144", "old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT"}
{"code": "def getSingle ( arr , n ) :\n    ones = 0\n    twos = 0\n    idx_x6dg = 0\n    list_twqk = range ( n )\n    while idx_x6dg < len(list_twqk):\n        i = list_twqk[idx_x6dg]\n        twos = twos | ( ones & arr [ i ] )\n        ones = ones ^ arr [ i ]\n        common_bit_mask = ~ ( ones & twos )\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n        idx_x6dg = idx_x6dg + 1\n    return ones", "id": "For2While_sample_from_FIND_THE_ELEMENT_THAT_APPEARS_ONCE_to_145", "old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE"}
{"code": "def maxLen ( arr , n ) :\n    max_len = 0\n    idx_p0cd = 0\n    list_95ki = range ( n )\n    while idx_p0cd < len(list_95ki):\n        i = list_95ki[idx_p0cd]\n        curr_sum = 0\n        idx_2gts = 0\n        list_o6xu = range ( i , n )\n        while idx_2gts < len(list_o6xu):\n            j = list_o6xu[idx_2gts]\n            curr_sum += arr [ j ]\n            if curr_sum == 0 :\n                max_len = max ( max_len , j - i + 1 )\n            idx_2gts = idx_2gts + 1\n        idx_p0cd = idx_p0cd + 1\n    return max_len\n", "id": "For2While_sample_from_FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_to_146", "old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM"}
{"code": "def findMaximum ( arr , low , high ) :\n    max = arr[low]\n    idx_xurf = 0\n    list_r4jt = range(low, high + 1)\n    while idx_xurf < len(list_r4jt):\n        i = list_r4jt[idx_xurf]\n        if arr[i] > max:\n            max = arr[i]\n        idx_xurf = idx_xurf + 1\n    return max", "id": "For2While_sample_from_FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING_to_147", "old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING"}
{"code": "def maxSubarrayXOR ( arr , n ) :\n    ans = - 2147483648\n    idx_1tm2 = 0\n    list_lmr6 = range ( n )\n    while idx_1tm2 < len(list_lmr6):\n        i = list_lmr6[idx_1tm2]\n        curr_xor = 0\n        idx_9q4o = 0\n        list_h8y6 = range ( i , n )\n        while idx_9q4o < len(list_h8y6):\n            j = list_h8y6[idx_9q4o]\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n            idx_9q4o = idx_9q4o + 1\n        idx_1tm2 = idx_1tm2 + 1\n    return ans", "id": "For2While_sample_from_FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY_to_148", "old_id": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY"}
{"code": "def minDist ( arr , n , x , y ) :\n    min_dist = 2147483647\n    idx_dysf = 0\n    list_torc = range ( n )\n    while idx_dysf < len(list_torc):\n        i = list_torc[idx_dysf]\n        idx_yv75 = 0\n        list_2wpd = range ( i + 1 , n )\n        while idx_yv75 < len(list_2wpd):\n            j = list_2wpd[idx_yv75]\n            if ( x == arr [ i ] and y == arr [ j ] or y == arr [ i ] and x == arr [ j ] ) and min_dist > abs ( i - j ) :\n                min_dist = abs ( i - j )\n            idx_yv75 = idx_yv75 + 1\n        idx_dysf = idx_dysf + 1\n    return min_dist\n\n", "id": "For2While_sample_from_FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_to_149", "old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS"}
{"code": "def getMissingNo ( a , n ) :\n    i , total = 0 , 1\n    idx_fwjr = 0\n    list_levu = range ( 2 , n + 2 )\n    while idx_fwjr < len(list_levu):\n        i = list_levu[idx_fwjr]\n        total += i\n        total -= a [ i - 2 ]\n        idx_fwjr = idx_fwjr + 1\n    return total", "id": "For2While_sample_from_FIND_THE_MISSING_NUMBER_1_to_150", "old_id": "FIND_THE_MISSING_NUMBER_1"}
{"code": "def getOddOccurrence ( arr , arr_size ) :\n    idx_jw8z = 0\n    list_jrfv = range ( 0 , arr_size )\n    while idx_jw8z < len(list_jrfv):\n        i = list_jrfv[idx_jw8z]\n        count = 0\n        idx_ac2b = 0\n        list_uqj9 = range ( 0 , arr_size )\n        while idx_ac2b < len(list_uqj9):\n            j = list_uqj9[idx_ac2b]\n            if arr [ i ] == arr [ j ] :\n                count += 1\n            idx_ac2b = idx_ac2b + 1\n        if ( count % 2 != 0 ) :\n            return arr [ i ]\n        idx_jw8z = idx_jw8z + 1\n    return - 1", "id": "For2While_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_to_151", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES"}
{"code": "def getOddOccurrence ( ar , ar_size) :\n    res = 0\n    idx_e5yv = 0\n    list_qg86 = range ( 0, ar_size )\n    while idx_e5yv < len(list_qg86):\n        i = list_qg86[idx_e5yv]\n        res = res ^ ar [ i ]\n        idx_e5yv = idx_e5yv + 1\n    return res\n", "id": "For2While_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2_to_152", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2"}
{"code": "def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    idx_sc3l = 0\n    list_vx47 = range ( n1 )\n    while idx_sc3l < len(list_vx47):\n        i = list_vx47[idx_sc3l]\n        s.add ( a1 [ i ] )\n        idx_sc3l = idx_sc3l + 1\n    idx_w6gz = 0\n    list_wp1y = range ( n2 )\n    while idx_w6gz < len(list_wp1y):\n        i = list_wp1y[idx_w6gz]\n        idx_3huo = 0\n        list_ljfg = range ( n3 )\n        while idx_3huo < len(list_ljfg):\n            j = list_ljfg[idx_3huo]\n            if sum - a2 [ i ] - a3 [ j ] in s :\n                return True\n            idx_3huo = idx_3huo + 1\n        idx_w6gz = idx_w6gz + 1\n    return False", "id": "For2While_sample_from_FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1_to_153", "old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    idx_sdwc = 0\n    list_biga = range ( n - 1 )\n    while idx_sdwc < len(list_biga):\n        i = list_biga[idx_sdwc]\n        s = set ( )\n        idx_c6f4 = 0\n        list_jre1 = range ( i + 1 , n )\n        while idx_c6f4 < len(list_jre1):\n            j = list_jre1[idx_c6f4]\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n            idx_c6f4 = idx_c6f4 + 1\n        idx_sdwc = idx_sdwc + 1\n    if found == False :\n        print ( \"No Triplet Found\" )", "id": "For2While_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_154", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    idx_ba7m = 0\n    list_m0ed = range ( 0 , n - 1 )\n    while idx_ba7m < len(list_m0ed):\n        i = list_m0ed[idx_ba7m]\n        l = i + 1\n        r = n - 1\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == 0 ) :\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < 0 ) :\n                l += 1\n            else :\n                r -= 1\n        idx_ba7m = idx_ba7m + 1\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )", "id": "For2While_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_155", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = { }\n    idx_ki9f = 0\n    list_dyl9 = range ( 0 , n )\n    while idx_ki9f < len(list_dyl9):\n        i = list_dyl9[idx_ki9f]\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n        idx_ki9f = idx_ki9f + 1\n    idx_b4eo = 0\n    list_cqot = range ( 0 , n )\n    while idx_b4eo < len(list_cqot):\n        i = list_cqot[idx_b4eo]\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n        idx_b4eo = idx_b4eo + 1\n    return - 1", "id": "For2While_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_156", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def first ( str ) :\n    idx_h5vt = 0\n    list_gk6b = range ( 0 , len ( str ) )\n    while idx_h5vt < len(list_gk6b):\n        i = list_gk6b[idx_h5vt]\n        if ( str [ i ].istitle ( ) ) :\n            return str [ i ]\n        idx_h5vt = idx_h5vt + 1\n    return 0", "id": "For2While_sample_from_FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_to_157", "old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE"}
{"code": "def floorSearch ( arr , n , x ) :\n    if x >= arr [ n - 1 ]: return n - 1\n    if x < arr [ 0 ]: return - 1\n    idx_giw4 = 0\n    list_q2zv = range ( 1, n )\n    while idx_giw4 < len(list_q2zv):\n        i = list_q2zv[idx_giw4]\n        if arr [ i ] > x: return i - 1\n        idx_giw4 = idx_giw4 + 1\n    return - 1", "id": "For2While_sample_from_FLOOR_IN_A_SORTED_ARRAY_to_158", "old_id": "FLOOR_IN_A_SORTED_ARRAY"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) :\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    idx_f3dh = 0\n    list_9hj1 = range ( n + 1 )\n    while idx_f3dh < len(list_9hj1):\n        i = list_9hj1[idx_f3dh]\n        if ( i == n or seq [ i ] == 'I' ) :\n            idx_gc6s = 0\n            list_2908 = range ( i - 1 , - 2 , - 1 )\n            while idx_gc6s < len(list_2908):\n                j = list_2908[idx_gc6s]\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n                idx_gc6s = idx_gc6s + 1\n        idx_f3dh = idx_f3dh + 1\n    return result", "id": "For2While_sample_from_FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1_to_159", "old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    idx_n65r = 0\n    list_w0dl = range ( n )\n    while idx_n65r < len(list_w0dl):\n        i = list_w0dl[idx_n65r]\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n        idx_n65r = idx_n65r + 1\n    max_count = 0\n    res = - 1\n    idx_1pjl = 0\n    list_l0xf = Hash\n    while idx_1pjl < len(list_l0xf):\n        i = list_l0xf[idx_1pjl]\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n        idx_1pjl = idx_1pjl + 1\n    return res", "id": "For2While_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_160", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    idx_m91d = 0\n    list_qh0m = range ( n + 1 )\n    while idx_m91d < len(list_qh0m):\n        i = list_qh0m[idx_m91d]\n        if ( i <= 2 ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n        idx_m91d = idx_m91d + 1\n    return dp [ n ]", "id": "For2While_sample_from_FRIENDS_PAIRING_PROBLEM_to_161", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0\n    if ( n <= 2 ) :\n        return n\n    idx_4iy6 = 0\n    list_ag6y = range ( 3 , n + 1 )\n    while idx_4iy6 < len(list_ag6y):\n        i = list_ag6y[idx_4iy6]\n        c = b + ( i - 1 ) * a\n        a = b\n        b = c\n        idx_4iy6 = idx_4iy6 + 1\n    return c", "id": "For2While_sample_from_FRIENDS_PAIRING_PROBLEM_2_to_162", "old_id": "FRIENDS_PAIRING_PROBLEM_2"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) :\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    idx_xmkd = 0\n    list_qz2e = range ( n + 1 )\n    while idx_xmkd < len(list_qz2e):\n        i = list_qz2e[idx_xmkd]\n        if ( i == n or seq [ i ] == 'I' ) :\n            idx_utwm = 0\n            list_ci8z = range ( i - 1 , - 2 , - 1 )\n            while idx_utwm < len(list_ci8z):\n                j = list_ci8z[idx_utwm]\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n                idx_utwm = idx_utwm + 1\n        idx_xmkd = idx_xmkd + 1\n    return \"\".join(str(i) for i in result)", "id": "For2While_sample_from_GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1_to_163", "old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = len ( str )\n    arr = [ 0 ] * l\n    idx_gq73 = 0\n    list_07mh = range ( 0 , l )\n    while idx_gq73 < len(list_07mh):\n        i = list_07mh[idx_gq73]\n        idx_mls9 = 0\n        list_n5c1 = range ( i , l )\n        while idx_mls9 < len(list_n5c1):\n            j = list_n5c1[idx_mls9]\n            idx_7rmu = 0\n            list_bp5h = range ( j , l )\n            while idx_7rmu < len(list_bp5h):\n                k = list_bp5h[idx_7rmu]\n                if ( arr [ i ] % 8 == 0 ) :\n                    return True\n                elif ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 and i != j ) :\n                    return True\n                elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 and i != j and j != k and i != k ) :\n                    return True\n                idx_7rmu = idx_7rmu + 1\n            idx_mls9 = idx_mls9 + 1\n        idx_gq73 = idx_gq73 + 1\n    return False", "id": "For2While_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_164", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    idx_92f7 = 0\n    list_19j8 = range ( 1 , n + 1 )\n    while idx_92f7 < len(list_19j8):\n        i = list_19j8[idx_92f7]\n        arr [ i ] = int ( str [ i - 1 ] )\n        idx_92f7 = idx_92f7 + 1\n    idx_8r3n = 0\n    list_12k8 = range ( 1 , n + 1 )\n    while idx_8r3n < len(list_12k8):\n        i = list_12k8[idx_8r3n]\n        dp [ i ] [ arr [ i ] % 8 ] = 1\n        idx_lrzu = 0\n        list_j9ad = range ( 8 )\n        while idx_lrzu < len(list_j9ad):\n            j = list_j9ad[idx_lrzu]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) :\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n            idx_lrzu = idx_lrzu + 1\n        idx_8r3n = idx_8r3n + 1\n    idx_lera = 0\n    list_ior8 = range ( 1 , n + 1 )\n    while idx_lera < len(list_ior8):\n        i = list_ior8[idx_lera]\n        if ( dp [ i ] [ 0 ] == 1 ) :\n            return True\n        idx_lera = idx_lera + 1\n    return False", "id": "For2While_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1_to_165", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0\n    idx_b4ou = 0\n    list_f3r2 = range ( 1 , m + 1 )\n    while idx_b4ou < len(list_f3r2):\n        i = list_f3r2[idx_b4ou]\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] )\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n        idx_b4ou = idx_b4ou + 1\n    return maxRev [ m ]", "id": "For2While_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_166", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def horner ( poly , n , x ) :\n    result = poly [ 0 ]\n    idx_41fy = 0\n    list_5e1r = range ( 1 , n )\n    while idx_41fy < len(list_5e1r):\n        i = list_5e1r[idx_41fy]\n        result = result * x + poly [ i ]\n        idx_41fy = idx_41fy + 1\n    return result", "id": "For2While_sample_from_HORNERS_METHOD_POLYNOMIAL_EVALUATION_to_167", "old_id": "HORNERS_METHOD_POLYNOMIAL_EVALUATION"}
{"code": "def search ( arr , x ) :\n    n = len ( arr )\n    idx_yab3 = 0\n    list_5407 = range ( 0 , n )\n    while idx_yab3 < len(list_5407):\n        j = list_5407[idx_yab3]\n        if ( x == arr [ j ] ) :\n            return j\n        idx_yab3 = idx_yab3 + 1\n    return - 1", "id": "For2While_sample_from_HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING_to_168", "old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING"}
{"code": "def isHeap ( arr , n ) :\n    idx_kjbx = 0\n    list_7a8q = range ( int ( ( n - 2 ) / 2 ) + 1 )\n    while idx_kjbx < len(list_7a8q):\n        i = list_7a8q[idx_kjbx]\n        if arr [ 2 * i + 1 ] > arr [ i ] :\n            return False\n        if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] ) :\n            return False\n        idx_kjbx = idx_kjbx + 1\n    return True", "id": "For2While_sample_from_HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1_to_169", "old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1"}
{"code": "def search ( arr , n , x ) :\n    idx_j5b0 = 0\n    list_ycgf = range ( 0 , n )\n    while idx_j5b0 < len(list_ycgf):\n        j = list_ycgf[idx_j5b0]\n        if ( x == arr [ j ] ) :\n            return j\n        idx_j5b0 = idx_j5b0 + 1\n    return - 1", "id": "For2While_sample_from_HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS_to_170", "old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS"}
{"code": "def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    idx_bvk8 = 0\n    list_owgj = arr\n    while idx_bvk8 < len(list_owgj):\n        i = list_owgj[idx_bvk8]\n        if ( i < 0 ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n        idx_bvk8 = idx_bvk8 + 1\n    idx_b857 = 0\n    list_27y6 = arr\n    while idx_b857 < len(list_27y6):\n        i = list_27y6[idx_b857]\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n        idx_b857 = idx_b857 + 1\n    return - 1", "id": "For2While_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_171", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( arr [ 0 ] )\n    idx_vxya = 0\n    list_nwse = range ( 2 , n + 1 )\n    while idx_vxya < len(list_nwse):\n        i = list_nwse[idx_vxya]\n        sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )\n        idx_vxya = idx_vxya + 1\n    Q = [ ]\n    heapq.heapify ( Q )\n    idx_wok5 = 0\n    list_akpr = range ( 1 , n + 1 )\n    while idx_wok5 < len(list_akpr):\n        i = list_akpr[idx_wok5]\n        idx_yk7f = 0\n        list_rgnb = range ( i , n + 1 )\n        while idx_yk7f < len(list_rgnb):\n            j = list_rgnb[idx_yk7f]\n            x = sum [ j ] - sum [ i - 1 ]\n            if len ( Q ) < k :\n                heapq.heappush ( Q , x )\n            else :\n                if Q [ 0 ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n            idx_yk7f = idx_yk7f + 1\n        idx_wok5 = idx_wok5 + 1\n    return Q [ 0 ]", "id": "For2While_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_172", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def find ( a , b , k , n1 , n2 ) :\n    s = set ( )\n    idx_bu7g = 0\n    list_895v = range ( n2 )\n    while idx_bu7g < len(list_895v):\n        i = list_895v[idx_bu7g]\n        s.add ( b [ i ] )\n        idx_bu7g = idx_bu7g + 1\n    missing = 0\n    idx_9gs1 = 0\n    list_0e4l = range ( n1 )\n    while idx_9gs1 < len(list_0e4l):\n        i = list_0e4l[idx_9gs1]\n        if a [ i ] not in s :\n            missing += 1\n        if missing == k :\n            return a [ i ]\n        idx_9gs1 = idx_9gs1 + 1\n    return - 1", "id": "For2While_sample_from_K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE_to_173", "old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE"}
{"code": "def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    idx_mbls = 0\n    list_f62t = range ( 0 , n - 1 )\n    while idx_mbls < len(list_f62t):\n        i = list_f62t[idx_mbls]\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        idx_hfzt = 0\n        list_w7jt = range ( i + 1 , n )\n        while idx_hfzt < len(list_w7jt):\n            j = list_w7jt[idx_hfzt]\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = j - i + 1\n                startindex = i\n            idx_hfzt = idx_hfzt + 1\n        idx_mbls = idx_mbls + 1\n    if ( maxsize == - 1 ) :\n        print ( \"No such subarray\" )\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 )\n    return maxsize", "id": "For2While_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_174", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = { }\n    curr_sum = 0\n    max_len = 0\n    ending_index = - 1\n    idx_02pv = 0\n    list_2370 = range ( 0 , n )\n    while idx_02pv < len(list_2370):\n        i = list_2370[idx_02pv]\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1\n        else :\n            arr [ i ] = 1\n        idx_02pv = idx_02pv + 1\n    idx_q8ef = 0\n    list_s0ip = range ( 0 , n )\n    while idx_q8ef < len(list_s0ip):\n        i = list_s0ip[idx_q8ef]\n        curr_sum = curr_sum + arr [ i ]\n        if ( curr_sum == 0 ) :\n            max_len = i + 1\n            ending_index = i\n        if ( curr_sum + n ) in hash_map :\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = i - hash_map [ curr_sum + n ]\n                ending_index = i\n        else :\n            hash_map[curr_sum + n] = i\n        idx_q8ef = idx_q8ef + 1\n    idx_fcxj = 0\n    list_gavd = range ( 0 , n )\n    while idx_fcxj < len(list_gavd):\n        i = list_gavd[idx_fcxj]\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0\n        else :\n            arr [ i ] = 1\n        idx_fcxj = idx_fcxj + 1\n    print ( ending_index - max_len + 1 , end = \" \" )\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    return max_len", "id": "For2While_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_175", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    idx_d3nb = 0\n    list_onxd = range ( 2 , maxele + 1 )\n    while idx_d3nb < len(list_onxd):\n        i = list_onxd[idx_d3nb]\n        count = 0\n        idx_gz6q = 0\n        list_4ext = range ( n )\n        while idx_gz6q < len(list_4ext):\n            j = list_4ext[idx_gz6q]\n            if ( arr [ j ] % i == 0 ) :\n                count += 1\n            idx_gz6q = idx_gz6q + 1\n        ans = max ( ans , count )\n        idx_d3nb = idx_d3nb + 1\n    return ans", "id": "For2While_sample_from_LARGEST_SUBSEQUENCE_GCD_GREATER_1_to_176", "old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1"}
{"code": "def longestSubsequenceCommonSegment ( k , s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    lcs = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    cnt = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    idx_4b1u = 0\n    list_z16q = range ( 1 , n + 1 )\n    while idx_4b1u < len(list_z16q):\n        i = list_z16q[idx_4b1u]\n        idx_z6b7 = 0\n        list_fkdj = range ( 1 , m + 1 )\n        while idx_z6b7 < len(list_fkdj):\n            j = list_fkdj[idx_z6b7]\n            lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs [ i ] [ j - 1 ] )\n            if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) :\n                cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1\n            if ( cnt [ i ] [ j ] >= k ) :\n                idx_37tu = 0\n                list_z4p7 = range ( k , cnt [ i ] [ j ] + 1 )\n                while idx_37tu < len(list_z4p7):\n                    a = list_z4p7[idx_37tu]\n                    lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a )\n                    idx_37tu = idx_37tu + 1\n            idx_z6b7 = idx_z6b7 + 1\n        idx_4b1u = idx_4b1u + 1\n    return lcs [ n ] [ m ]", "id": "For2While_sample_from_LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K_to_177", "old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K"}
{"code": "def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    idx_xet0 = 0\n    list_hyu5 = range ( n - 1 )\n    while idx_xet0 < len(list_hyu5):\n        i = list_hyu5[idx_xet0]\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) :\n            dp [ i ] [ i + 1 ] = 2\n        idx_xet0 = idx_xet0 + 1\n    idx_gojh = 0\n    list_e8rs = range ( 2 , n )\n    while idx_gojh < len(list_e8rs):\n        l = list_e8rs[idx_gojh]\n        i = - 1\n        idx_q3a7 = 0\n        list_vm0z = range ( l , n )\n        while idx_q3a7 < len(list_vm0z):\n            j = list_vm0z[idx_q3a7]\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            idx_1nut = 0\n            list_et4r = range ( i , j )\n            while idx_1nut < len(list_et4r):\n                k = list_et4r[idx_1nut]\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n                idx_1nut = idx_1nut + 1\n            idx_q3a7 = idx_q3a7 + 1\n        idx_gojh = idx_gojh + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_to_178", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = 0\n    invalidCloseBraces = 0\n    idx_42va = 0\n    list_uv94 = range ( n )\n    while idx_42va < len(list_uv94):\n        i = list_uv94[idx_42va]\n        if ( s [ i ] == '(' ) :\n            invalidOpenBraces += 1\n        else :\n            if ( invalidOpenBraces == 0 ) :\n                invalidCloseBraces += 1\n            else :\n                invalidOpenBraces -= 1\n        idx_42va = idx_42va + 1\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "For2While_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_179", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def longestNull ( S ) :\n    arr = [ ]\n    arr.append ( [ '@' , - 1 ] )\n    maxlen = 0\n    idx_dur7 = 0\n    list_xc6w = range ( len ( S ) )\n    while idx_dur7 < len(list_xc6w):\n        i = list_xc6w[idx_dur7]\n        arr.append ( [ S [ i ] , i ] )\n        while ( len ( arr ) >= 3 and arr [ len ( arr ) - 3 ] [ 0 ] == '1' and arr [ len ( arr ) - 2 ] [ 0 ] == '0' and arr [ len ( arr ) - 1 ] [ 0 ] == '0' ) :\n            arr.pop ( )\n            arr.pop ( )\n            arr.pop ( )\n        tmp = arr [ - 1 ]\n        maxlen = max ( maxlen , i - tmp [ 1 ] )\n        idx_dur7 = idx_dur7 + 1\n    return maxlen", "id": "For2While_sample_from_LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED_to_180", "old_id": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    idx_ytxs = 0\n    list_sj1r = range ( n )\n    while idx_ytxs < len(list_sj1r):\n        i = list_sj1r[idx_ytxs]\n        L [ i ] [ n - 1 ] = 2\n        idx_ytxs = idx_ytxs + 1\n    idx_n6cl = 0\n    list_qk7z = range ( n - 2 , 0 , - 1 )\n    while idx_n6cl < len(list_qk7z):\n        j = list_qk7z[idx_n6cl]\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) :\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n        while ( i >= 0 ) :\n            L [ i ] [ j ] = 2\n            i -= 1\n        idx_n6cl = idx_n6cl + 1\n    return llap", "id": "For2While_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_181", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def leonardo ( n ) :\n    dp = [ ]\n    dp.append ( 1 )\n    dp.append ( 1 )\n    idx_volq = 0\n    list_5zm9 = range ( 2 , n + 1 )\n    while idx_volq < len(list_5zm9):\n        i = list_5zm9[idx_volq]\n        dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 )\n        idx_volq = idx_volq + 1\n    return dp [ n ]", "id": "For2While_sample_from_LEONARDO_NUMBER_1_to_182", "old_id": "LEONARDO_NUMBER_1"}
{"code": "def subsequence ( s , t , n , k ) :\n    last = 0\n    cnt = 0\n    new_last = 0\n    size = 0\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    idx_9tca = 0\n    list_072r = string\n    while idx_9tca < len(list_072r):\n        ch = list_072r[idx_9tca]\n        cnt = 0\n        idx_yhj9 = 0\n        list_bdi7 = range ( last , n )\n        while idx_yhj9 < len(list_bdi7):\n            i = list_bdi7[idx_yhj9]\n            if s [ i ] == ch :\n                cnt += 1\n            idx_yhj9 = idx_yhj9 + 1\n        if cnt >= k :\n            idx_wb4d = 0\n            list_c8yj = range ( last , n )\n            while idx_wb4d < len(list_c8yj):\n                i = list_c8yj[idx_wb4d]\n                if s [ i ] == ch :\n                    t [ size ] = ch\n                    new_last = i\n                    size += 1\n                idx_wb4d = idx_wb4d + 1\n            last = new_last\n        idx_9tca = idx_9tca + 1\n    t[size] = '\\0';", "id": "For2While_sample_from_LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES_to_183", "old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES"}
{"code": "def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ 0 ] * n\n    concat = str_ + str_\n    idx_j7yt = 0\n    list_hrgo = range ( n )\n    while idx_j7yt < len(list_hrgo):\n        i = list_hrgo[idx_j7yt]\n        arr [ i ] = concat [ i : n + i ]\n        idx_j7yt = idx_j7yt + 1\n    arr.sort ( )\n    return arr [ 0 ]", "id": "For2While_sample_from_LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION_to_184", "old_id": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION"}
{"code": "def minimizeWithKSwaps ( arr , n , k ) :\n    idx_orcf = 0\n    list_8s1d = range ( n - 1 )\n    while idx_orcf < len(list_8s1d):\n        i = list_8s1d[idx_orcf]\n        pos = i\n        idx_87an = 0\n        list_mg9i = range ( i + 1 , n )\n        while idx_87an < len(list_mg9i):\n            j = list_mg9i[idx_87an]\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n            idx_87an = idx_87an + 1\n        idx_dyvz = 0\n        list_pzmj = range ( pos , i , - 1 )\n        while idx_dyvz < len(list_pzmj):\n            j = list_pzmj[idx_dyvz]\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n            idx_dyvz = idx_dyvz + 1\n        k -= pos - i\n        idx_orcf = idx_orcf + 1", "id": "For2While_sample_from_LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS_to_185", "old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS"}
{"code": "def lexicographicSubConcat ( s ) :\n    n = len ( s )\n    sub_count = ( n * ( n + 1 ) ) // 2\n    arr = [ 0 ] * sub_count\n    index = 0\n    idx_cska = 0\n    list_ms93 = range ( n )\n    while idx_cska < len(list_ms93):\n        i = list_ms93[idx_cska]\n        idx_3bz6 = 0\n        list_67ti = range ( 1 , n - i + 1 )\n        while idx_3bz6 < len(list_67ti):\n            j = list_67ti[idx_3bz6]\n            arr [ index ] = s [ i : i + j ]\n            index += 1\n            idx_3bz6 = idx_3bz6 + 1\n        idx_cska = idx_cska + 1\n    arr.sort ( )\n    res = \"\"\n    idx_i70v = 0\n    list_b3el = range ( sub_count )\n    while idx_i70v < len(list_b3el):\n        i = list_b3el[idx_i70v]\n        res += arr [ i ]\n        idx_i70v = idx_i70v + 1\n    return res", "id": "For2While_sample_from_LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING_to_186", "old_id": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = [ [ 0 for k in range ( n + 1 ) ] for l in range ( m + 1 ) ]\n    result = 0\n    idx_blgk = 0\n    list_qlv4 = range ( m + 1 )\n    while idx_blgk < len(list_qlv4):\n        i = list_qlv4[idx_blgk]\n        idx_51rh = 0\n        list_g3l8 = range ( n + 1 )\n        while idx_51rh < len(list_g3l8):\n            j = list_g3l8[idx_51rh]\n            if ( i == 0 or j == 0 ) :\n                LCSuff [ i ] [ j ] = 0\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1\n                result = max ( result , LCSuff [ i ] [ j ] )\n            else :\n                LCSuff [ i ] [ j ] = 0\n            idx_51rh = idx_51rh + 1\n        idx_blgk = idx_blgk + 1\n    return result", "id": "For2While_sample_from_LONGEST_COMMON_SUBSTRING_to_187", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def findLength ( str ) :\n    n = len ( str )\n    maxlen = 0\n    idx_rh6n = 0\n    list_odkp = range ( 0 , n )\n    while idx_rh6n < len(list_odkp):\n        i = list_odkp[idx_rh6n]\n        idx_ryqh = 0\n        list_d3hq = range ( i + 1 , n , 2 )\n        while idx_ryqh < len(list_d3hq):\n            j = list_d3hq[idx_ryqh]\n            length = j - i + 1\n            leftsum = 0\n            rightsum = 0\n            idx_v6fo = 0\n            list_57sp = range ( 0 , int ( length / 2 ) )\n            while idx_v6fo < len(list_57sp):\n                k = list_57sp[idx_v6fo]\n                leftsum += ( int ( str [ i + k ] ) - int ( '0' ) )\n                rightsum += ( int ( str [ i + k + int ( length / 2 ) ] ) - int ( '0' ) )\n                idx_v6fo = idx_v6fo + 1\n            if ( leftsum == rightsum and maxlen < length ) :\n                maxlen = length\n            idx_ryqh = idx_ryqh + 1\n        idx_rh6n = idx_rh6n + 1\n    return maxlen", "id": "For2While_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_to_188", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF"}
{"code": "def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    idx_vubz = 0\n    list_vo8b = range ( 0 , n )\n    while idx_vubz < len(list_vo8b):\n        i = list_vo8b[idx_vubz]\n        Sum [ i ] [ i ] = int ( string [ i ] )\n        idx_vubz = idx_vubz + 1\n    idx_c5hz = 0\n    list_iv3f = range ( 2 , n + 1 )\n    while idx_c5hz < len(list_iv3f):\n        length = list_iv3f[idx_c5hz]\n        idx_9i08 = 0\n        list_dgpz = range ( 0 , n - length + 1 )\n        while idx_9i08 < len(list_dgpz):\n            i = list_dgpz[idx_9i08]\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n            idx_9i08 = idx_9i08 + 1\n        idx_c5hz = idx_c5hz + 1\n    return maxlen", "id": "For2While_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1_to_189", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1"}
{"code": "def longOddEvenIncSeq ( arr , n ) :\n    lioes = list ( )\n    maxLen = 0\n    idx_h7zu = 0\n    list_12rx = range ( n )\n    while idx_h7zu < len(list_12rx):\n        i = list_12rx[idx_h7zu]\n        lioes.append ( 1 )\n        idx_h7zu = idx_h7zu + 1\n    i = 1\n    idx_nvyi = 0\n    list_hfb9 = range ( n )\n    while idx_nvyi < len(list_hfb9):\n        i = list_hfb9[idx_nvyi]\n        idx_rmhn = 0\n        list_87ix = range ( i )\n        while idx_rmhn < len(list_87ix):\n            j = list_87ix[idx_rmhn]\n            if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr [ j ] ) % 2 != 0 and lioes [ i ] < lioes [ j ] + 1 ) :\n                lioes [ i ] = lioes [ j ] + 1\n            idx_rmhn = idx_rmhn + 1\n        idx_nvyi = idx_nvyi + 1\n    idx_zbnv = 0\n    list_o3ne = range ( n )\n    while idx_zbnv < len(list_o3ne):\n        i = list_o3ne[idx_zbnv]\n        if maxLen < lioes [ i ] :\n            maxLen = lioes [ i ]\n        idx_zbnv = idx_zbnv + 1\n    return maxLen", "id": "For2While_sample_from_LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE_to_190", "old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE"}
{"code": "def lis ( arr , n ) :\n    lis = [ 1 ] * n\n    idx_3xr0 = 0\n    list_5nyj = range ( 1 , n )\n    while idx_3xr0 < len(list_5nyj):\n        i = list_5nyj[idx_3xr0]\n        idx_45ao = 0\n        list_p8zh = range ( 0 , i )\n        while idx_45ao < len(list_p8zh):\n            j = list_p8zh[idx_45ao]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 :\n                lis [ i ] = lis [ j ] + 1\n            idx_45ao = idx_45ao + 1\n        idx_3xr0 = idx_3xr0 + 1\n    maximum = 0\n    idx_gnxl = 0\n    list_l4eh = range ( n )\n    while idx_gnxl < len(list_l4eh):\n        i = list_l4eh[idx_gnxl]\n        maximum = max ( maximum , lis [ i ] )\n        idx_gnxl = idx_gnxl + 1\n    return maximum", "id": "For2While_sample_from_LONGEST_INCREASING_SUBSEQUENCE_1_to_191", "old_id": "LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_tfx5 = 0\n    list_2pur = range ( 1 , n + 1 )\n    while idx_tfx5 < len(list_2pur):\n        i = list_2pur[idx_tfx5]\n        idx_samn = 0\n        list_13sp = range ( 1 , n + 1 )\n        while idx_samn < len(list_13sp):\n            j = list_13sp[idx_samn]\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_samn = idx_samn + 1\n        idx_tfx5 = idx_tfx5 + 1\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) :\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res", "id": "For2While_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_192", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    idx_v98l = 0\n    list_kqe5 = range ( 1 , n + 1 )\n    while idx_v98l < len(list_kqe5):\n        i = list_kqe5[idx_v98l]\n        idx_xftb = 0\n        list_0l91 = range ( 1 , n + 1 )\n        while idx_xftb < len(list_0l91):\n            j = list_0l91[idx_xftb]\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_xftb = idx_xftb + 1\n        idx_v98l = idx_v98l + 1\n    return dp [ n ] [ n ]", "id": "For2While_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_193", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = { }\n    sum = 0\n    maxLen = 0\n    idx_2f81 = 0\n    list_kh65 = range ( n )\n    while idx_2f81 < len(list_kh65):\n        i = list_kh65[idx_2f81]\n        if arr [ i ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n        idx_2f81 = idx_2f81 + 1\n    return maxLen", "id": "For2While_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_194", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = { }\n    mod_arr = [ 0 for i in range ( n ) ]\n    max = 0\n    curr_sum = 0\n    idx_3rzn = 0\n    list_ntws = range ( n )\n    while idx_3rzn < len(list_ntws):\n        i = list_ntws[idx_3rzn]\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k\n        idx_3rzn = idx_3rzn + 1\n    idx_7a9n = 0\n    list_iuzd = range ( n )\n    while idx_7a9n < len(list_iuzd):\n        i = list_iuzd[idx_7a9n]\n        if ( mod_arr [ i ] == 0 ) :\n            max = i + 1\n        elif ( mod_arr [ i ] in um ) :\n            um [ mod_arr [ i ] ] = i\n        else :\n            if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                max = i - um [ mod_arr [ i ] ]\n        idx_7a9n = idx_7a9n + 1\n    return max", "id": "For2While_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_195", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    idx_p13g = 0\n    list_ox8k = range ( n )\n    while idx_p13g < len(list_ox8k):\n        i = list_ox8k[idx_p13g]\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) :\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) :\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n        idx_p13g = idx_p13g + 1\n    return longLen", "id": "For2While_sample_from_LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2_to_196", "old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2"}
{"code": "def longestSubseqWithDiffOne ( arr , n ) :\n    dp = [ 1 for i in range ( n ) ]\n    idx_r27x = 0\n    list_b9oa = range ( n )\n    while idx_r27x < len(list_b9oa):\n        i = list_b9oa[idx_r27x]\n        idx_hn3m = 0\n        list_q6yt = range ( i )\n        while idx_hn3m < len(list_q6yt):\n            j = list_q6yt[idx_hn3m]\n            if ( ( arr [ i ] == arr [ j ] + 1 ) or ( arr [ i ] == arr [ j ] - 1 ) ) :\n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 )\n            idx_hn3m = idx_hn3m + 1\n        idx_r27x = idx_r27x + 1\n    result = 1\n    idx_a7tr = 0\n    list_th8z = range ( n )\n    while idx_a7tr < len(list_th8z):\n        i = list_th8z[idx_a7tr]\n        if ( result < dp [ i ] ) :\n            result = dp [ i ]\n        idx_a7tr = idx_a7tr + 1\n    return result", "id": "For2While_sample_from_LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE_to_197", "old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE"}
{"code": "def to_upper(in_list):\n    idx_if7r = 0\n    list_4aeg = range(len(in_list))\n    while idx_if7r < len(list_4aeg):\n        i = list_4aeg[idx_if7r]\n        if 'a' <= in_list[i] <= 'z':\n            in_list[i] = chr(ord(in_list[i]) - ord('a') + ord('A'))\n        idx_if7r = idx_if7r + 1\n    return ''.join(in_list)", "id": "For2While_sample_from_LOWER_CASE_UPPER_CASE_INTERESTING_FACT_to_198", "old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT"}
{"code": "def checkMarkov ( m ) :\n    idx_vgwx = 0\n    list_50nj = range ( 0 , len ( m ) )\n    while idx_vgwx < len(list_50nj):\n        i = list_50nj[idx_vgwx]\n        sm = 0\n        idx_rl8o = 0\n        list_s2fn = range ( 0 , len ( m [ i ] ) )\n        while idx_rl8o < len(list_s2fn):\n            j = list_s2fn[idx_rl8o]\n            sm = sm + m [ i ] [ j ]\n            idx_rl8o = idx_rl8o + 1\n        if ( sm != 1 ) :\n            return False\n        idx_vgwx = idx_vgwx + 1\n    return True", "id": "For2While_sample_from_MARKOV_MATRIX_to_199", "old_id": "MARKOV_MATRIX"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = - 1\n    val = - 1\n    dp = [ [ 0 for i in range ( maxLimit + 1 ) ] for j in range ( n ) ]\n    idx_0me5 = 0\n    list_azwi = range ( n )\n    while idx_0me5 < len(list_azwi):\n        ind = list_azwi[idx_0me5]\n        idx_snpz = 0\n        list_i689 = range ( maxLimit + 1 )\n        while idx_snpz < len(list_i689):\n            val = list_i689[idx_snpz]\n            if ( ind == 0 ) :\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = 1\n                else :\n                    dp [ ind ] [ val ] = 0\n            else :\n                if ( val - arr [ ind ] >= 0 and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 or dp [ ind - 1 ] [ val + arr [ ind ] ] == 1 ) :\n                        dp [ ind ] [ val ] = 1\n                elif ( val - arr [ ind ] >= 0 ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = 0\n            idx_snpz = idx_snpz + 1\n        idx_0me5 = idx_0me5 + 1\n    idx_zpdj = 0\n    list_tfqj = range ( maxLimit , - 1 , - 1 )\n    while idx_zpdj < len(list_tfqj):\n        val = list_tfqj[idx_zpdj]\n        if ( dp [ n - 1 ] [ val ] == 1 ) :\n            return val\n        idx_zpdj = idx_zpdj + 1\n    return - 1", "id": "For2While_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_200", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def findMaxValue ( arr , n ) :\n    if n < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    idx_lmk2 = 0\n    list_tlek = range ( n - 1 , - 1 , - 1 )\n    while idx_lmk2 < len(list_tlek):\n        i = list_tlek[idx_lmk2]\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n        idx_lmk2 = idx_lmk2 + 1\n    idx_q13i = 0\n    list_c4rb = range ( n - 2 , - 1 , - 1 )\n    while idx_q13i < len(list_c4rb):\n        i = list_c4rb[idx_q13i]\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n        idx_q13i = idx_q13i + 1\n    idx_9daz = 0\n    list_8rd0 = range ( n - 3 , - 1 , - 1 )\n    while idx_9daz < len(list_8rd0):\n        i = list_8rd0[idx_9daz]\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n        idx_9daz = idx_9daz + 1\n    idx_q8um = 0\n    list_6y1v = range ( n - 4 , - 1 , - 1 )\n    while idx_q8um < len(list_6y1v):\n        i = list_6y1v[idx_q8um]\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n        idx_q8um = idx_q8um + 1\n    return table4 [ 0 ]", "id": "For2While_sample_from_MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L_to_201", "old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L"}
{"code": "def largestSumOfAverages ( A , K ) :\n    n = len ( A )\n    pre_sum = [ 0 ] * ( n + 1 )\n    pre_sum [ 0 ] = 0\n    idx_nby3 = 0\n    list_04k7 = range ( n )\n    while idx_nby3 < len(list_04k7):\n        i = list_04k7[idx_nby3]\n        pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ]\n        idx_nby3 = idx_nby3 + 1\n    dp = [ 0 ] * n\n    sum = 0\n    idx_02hi = 0\n    list_a65u = range ( n )\n    while idx_02hi < len(list_a65u):\n        i = list_a65u[idx_02hi]\n        dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i )\n        idx_02hi = idx_02hi + 1\n    idx_fsc5 = 0\n    list_wtrs = range ( K - 1 )\n    while idx_fsc5 < len(list_wtrs):\n        k = list_wtrs[idx_fsc5]\n        idx_u642 = 0\n        list_g3p8 = range ( n )\n        while idx_u642 < len(list_g3p8):\n            i = list_g3p8[idx_u642]\n            idx_87vt = 0\n            list_3iaq = range ( i + 1 , n )\n            while idx_87vt < len(list_3iaq):\n                j = list_3iaq[idx_87vt]\n                dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] )\n                idx_87vt = idx_87vt + 1\n            idx_u642 = idx_u642 + 1\n        idx_fsc5 = idx_fsc5 + 1\n    return  dp [ 0 ]", "id": "For2While_sample_from_MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY_to_202", "old_id": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_puxa = 0\n    list_x1sd = range ( n + 1 )\n    while idx_puxa < len(list_x1sd):\n        i = list_x1sd[idx_puxa]\n        idx_9nh7 = 0\n        list_bepi = range ( min ( i , n ) + 1 )\n        while idx_9nh7 < len(list_bepi):\n            j = list_bepi[idx_9nh7]\n            if ( j == 0 or j == i ) :\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            idx_9nh7 = idx_9nh7 + 1\n        idx_puxa = idx_puxa + 1\n    maxvalue = 0\n    idx_24yp = 0\n    list_lfra = range ( n + 1 )\n    while idx_24yp < len(list_lfra):\n        i = list_lfra[idx_24yp]\n        maxvalue = max ( maxvalue , C [ n ] [ i ] )\n        idx_24yp = idx_24yp + 1\n    return maxvalue", "id": "For2While_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_203", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def findLongestConseqSubseq ( arr , n ) :\n    S = set ( )\n    idx_ke5j = 0\n    list_o1vb = range ( n )\n    while idx_ke5j < len(list_o1vb):\n        i = list_o1vb[idx_ke5j]\n        S.add ( arr [ i ] )\n        idx_ke5j = idx_ke5j + 1\n    ans = 0\n    idx_py91 = 0\n    list_txcz = range ( n )\n    while idx_py91 < len(list_txcz):\n        i = list_txcz[idx_py91]\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ]\n            while ( S.__contains__ ( j ) ) :\n                j += 1\n            ans = max ( ans , j - arr [ i ] )\n        idx_py91 = idx_py91 + 1\n    return ans", "id": "For2While_sample_from_MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY_to_204", "old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY"}
{"code": "def maxRepeating ( str ) :\n    n = len ( str )\n    count = 0\n    res = str [ 0 ]\n    cur_count = 1\n    idx_781u = 0\n    list_5rco = range ( n )\n    while idx_781u < len(list_5rco):\n        i = list_5rco[idx_781u]\n        if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) :\n            cur_count += 1\n        else :\n            if cur_count > count :\n                count = cur_count\n                res = str [ i ]\n            cur_count = 1\n        idx_781u = idx_781u + 1\n    return res", "id": "For2While_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_205", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    idx_gmpo = 0\n    list_rtja = range ( n )\n    while idx_gmpo < len(list_rtja):\n        i = list_rtja[idx_gmpo]\n        freq [ arr [ i ] ] += 1\n        idx_gmpo = idx_gmpo + 1\n    ans = 0\n    idx_abms = 0\n    list_shtx = range ( n )\n    while idx_abms < len(list_shtx):\n        i = list_shtx[idx_abms]\n        idx_dufc = 0\n        list_b5kd = range ( n )\n        while idx_dufc < len(list_b5kd):\n            j = list_b5kd[idx_dufc]\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n            idx_dufc = idx_dufc + 1\n        idx_abms = idx_abms + 1\n    return ans", "id": "For2While_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_206", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxRowDiff ( mat , m , n ) :\n    rowSum = [ 0 ] * m\n    idx_51lp = 0\n    list_gk2q = range ( 0 , m )\n    while idx_51lp < len(list_gk2q):\n        i = list_gk2q[idx_51lp]\n        sum = 0\n        idx_8wen = 0\n        list_ubzg = range ( 0 , n )\n        while idx_8wen < len(list_ubzg):\n            j = list_ubzg[idx_8wen]\n            sum += mat [ i ] [ j ]\n            idx_8wen = idx_8wen + 1\n        rowSum [ i ] = sum\n        idx_51lp = idx_51lp + 1\n    max_diff = rowSum [ 1 ] - rowSum [ 0 ]\n    min_element = rowSum [ 0 ]\n    idx_pmzn = 0\n    list_18so = range ( 1 , m )\n    while idx_pmzn < len(list_18so):\n        i = list_18so[idx_pmzn]\n        if ( rowSum [ i ] - min_element > max_diff ) :\n            max_diff = rowSum [ i ] - min_element\n        if ( rowSum [ i ] < min_element ) :\n            min_element = rowSum [ i ]\n        idx_pmzn = idx_pmzn + 1\n    return max_diff", "id": "For2While_sample_from_MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX_to_207", "old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX"}
{"code": "def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    idx_yvpj = 0\n    list_u45z = range ( n )\n    while idx_yvpj < len(list_u45z):\n        i = list_u45z[idx_yvpj]\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n        idx_yvpj = idx_yvpj + 1\n    return maxDict", "id": "For2While_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_208", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxPrefix ( s , t ) :\n    count = 0\n    idx_5rit = 0\n    list_gmta = range ( 0 , len ( t ) )\n    while idx_5rit < len(list_gmta):\n        i = list_gmta[idx_5rit]\n        if ( count == len ( s ) ) :\n            break\n        if ( t [ i ] == s [ count ] ) :\n            count = count + 1\n        idx_5rit = idx_5rit + 1\n    return count", "id": "For2While_sample_from_MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER_to_209", "old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER"}
{"code": "def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    idx_u7ib = 0\n    list_phcn = range ( n )\n    while idx_u7ib < len(list_phcn):\n        i = list_phcn[idx_u7ib]\n        mls.append ( 1 )\n        idx_u7ib = idx_u7ib + 1\n    idx_65t2 = 0\n    list_8hyq = range ( n )\n    while idx_65t2 < len(list_8hyq):\n        i = list_8hyq[idx_65t2]\n        idx_5cvt = 0\n        list_4ojq = range ( i )\n        while idx_5cvt < len(list_4ojq):\n            j = list_4ojq[idx_5cvt]\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) :\n                mls [ i ] = mls [ j ] + 1\n            idx_5cvt = idx_5cvt + 1\n        idx_65t2 = idx_65t2 + 1\n    idx_zj4o = 0\n    list_rxap = range ( n )\n    while idx_zj4o < len(list_rxap):\n        i = list_rxap[idx_zj4o]\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n        idx_zj4o = idx_zj4o + 1\n    return max", "id": "For2While_sample_from_MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1_to_210", "old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , 0 , 0\n    sm = [ 0 ] * n\n    sm [ 0 ] = arr [ 0 ]\n    idx_h479 = 0\n    list_pret = range ( 1 , n )\n    while idx_h479 < len(list_pret):\n        i = list_pret[idx_h479]\n        sm [ i ] = sm [ i - 1 ] + arr [ i ]\n        idx_h479 = idx_h479 + 1\n    idx_rdet = 0\n    list_4zr7 = range ( n )\n    while idx_rdet < len(list_4zr7):\n        i = list_4zr7[idx_rdet]\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) :\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n        idx_rdet = idx_rdet + 1\n    return maxSum // k", "id": "For2While_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_211", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    idx_vat3 = 0\n    list_4j6q = range ( 0 , n )\n    while idx_vat3 < len(list_4j6q):\n        i = list_4j6q[idx_vat3]\n        if ( dp [ i ] != - 1 ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n        idx_vat3 = idx_vat3 + 1\n    return dp [ n ]", "id": "For2While_sample_from_MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C_to_212", "old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C"}
{"code": "def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    idx_b8ix = 0\n    list_lsf2 = range ( 0 , n )\n    while idx_b8ix < len(list_lsf2):\n        i = list_lsf2[idx_b8ix]\n        isSingleOccurance = True\n        idx_52ck = 0\n        list_k0pj = range ( i + 1 , n )\n        while idx_52ck < len(list_k0pj):\n            j = list_k0pj[idx_52ck]\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n            idx_52ck = idx_52ck + 1\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n        idx_b8ix = idx_b8ix + 1\n    return abs ( SubsetSum_1 - SubsetSum_2 )", "id": "For2While_sample_from_MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_to_213", "old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY"}
{"code": "def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = 0\n    curr_sum = curr_begin = 0\n    idx_pnro = 0\n    list_5nua = range ( 0 , n )\n    while idx_pnro < len(list_5nua):\n        i = list_5nua[idx_pnro]\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += 1\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n        idx_pnro = idx_pnro + 1\n    return result", "id": "For2While_sample_from_MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE_to_214", "old_id": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE"}
{"code": "def lis ( arr , n ) :\n    mpis = [ 0 ] * ( n )\n    idx_3o9u = 0\n    list_fknr = range ( n )\n    while idx_3o9u < len(list_fknr):\n        i = list_fknr[idx_3o9u]\n        mpis [ i ] = arr [ i ]\n        idx_3o9u = idx_3o9u + 1\n    idx_gcr3 = 0\n    list_r3qf = range ( 1 , n )\n    while idx_gcr3 < len(list_r3qf):\n        i = list_r3qf[idx_gcr3]\n        idx_9v8y = 0\n        list_8syd = range ( i )\n        while idx_9v8y < len(list_8syd):\n            j = list_8syd[idx_9v8y]\n            if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) :\n                mpis [ i ] = mpis [ j ] * arr [ i ]\n            idx_9v8y = idx_9v8y + 1\n        idx_gcr3 = idx_gcr3 + 1\n    return max ( mpis )", "id": "For2While_sample_from_MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE_to_215", "old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE"}
{"code": "def maxProductSubset ( a , n ) :\n    if n == 1 :\n        return a [ 0 ]\n    max_neg = - 999999999999\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    idx_ejgl = 0\n    list_2l0a = range ( n )\n    while idx_ejgl < len(list_2l0a):\n        i = list_2l0a[idx_ejgl]\n        if a [ i ] == 0 :\n            count_zero += 1\n            continue\n        if a [ i ] < 0 :\n            count_neg += 1\n            max_neg = max ( max_neg , a [ i ] )\n        prod = prod + a [ i ]\n        idx_ejgl = idx_ejgl + 1\n    if count_zero == n :\n        return 0\n    if count_neg & 1 :\n        if ( count_neg == 1 and count_zero > 0 and count_zero + count_neg == n ) :\n            return 0\n        prod = int(prod / max_neg)\n    return prod", "id": "For2While_sample_from_MAXIMUM_PRODUCT_SUBSET_ARRAY_to_216", "old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    idx_w3si = 0\n    list_hqv6 = range ( n - 2 , 0 , - 1 )\n    while idx_w3si < len(list_hqv6):\n        i = list_hqv6[idx_w3si]\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n        idx_w3si = idx_w3si + 1\n    min_price = price [ 0 ]\n    idx_jd30 = 0\n    list_ydir = range ( 1 , n )\n    while idx_jd30 < len(list_ydir):\n        i = list_ydir[idx_jd30]\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n        idx_jd30 = idx_jd30 + 1\n    result = profit [ n - 1 ]\n    return result", "id": "For2While_sample_from_MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE_to_217", "old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE"}
{"code": "def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    idx_qxpm = 0\n    list_ixo1 = range ( n * k )\n    while idx_qxpm < len(list_ixo1):\n        i = list_ixo1[idx_qxpm]\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) :\n            max_ending_here = 0\n        idx_qxpm = idx_qxpm + 1\n    return max_so_far", "id": "For2While_sample_from_MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION_to_218", "old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION"}
{"code": "def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = 0\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ 0 ] )\n    idx_xwbc = 0\n    list_rz7u = range ( 1 , n )\n    while idx_xwbc < len(list_rz7u):\n        i = list_rz7u[idx_xwbc]\n        prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ] )\n        idx_xwbc = idx_xwbc + 1\n    idx_pvm4 = 0\n    list_b7af = range ( n )\n    while idx_pvm4 < len(list_b7af):\n        i = list_b7af[idx_pvm4]\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n        idx_pvm4 = idx_pvm4 + 1\n    return res", "id": "For2While_sample_from_MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM_to_219", "old_id": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM"}
{"code": "def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 :\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 :\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    idx_usjg = 0\n    list_wgfa = range ( 3 , n )\n    while idx_usjg < len(list_wgfa):\n        i = list_wgfa[idx_usjg]\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n        idx_usjg = idx_usjg + 1\n    return sum [ n - 1 ]", "id": "For2While_sample_from_MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_to_220", "old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE"}
{"code": "def maxSum ( grid , n ) :\n    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )\n    excl = 0\n    idx_86op = 0\n    list_k9mq = range ( 1 , n )\n    while idx_86op < len(list_k9mq):\n        i = list_k9mq[idx_86op]\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] )\n        excl = excl_new\n        idx_86op = idx_86op + 1\n    return max ( excl , incl )", "id": "For2While_sample_from_MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT_to_221", "old_id": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    idx_1z6l = 0\n    list_2sxi = range ( 1 , n )\n    while idx_1z6l < len(list_2sxi):\n        i = list_2sxi[idx_1z6l]\n        idx_po94 = 0\n        list_3kan = range ( i )\n        while idx_po94 < len(list_3kan):\n            j = list_3kan[idx_po94]\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n            idx_po94 = idx_po94 + 1\n        idx_1z6l = idx_1z6l + 1\n    result = - 2147483648\n    idx_c6ki = 0\n    list_d0jk = range ( n )\n    while idx_c6ki < len(list_d0jk):\n        i = list_d0jk[idx_c6ki]\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n        idx_c6ki = idx_c6ki + 1\n    return result", "id": "For2While_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_222", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    idx_6ofm = 0\n    list_bu1x = range ( 1 , n )\n    while idx_6ofm < len(list_bu1x):\n        i = list_bu1x[idx_6ofm]\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n        idx_6ofm = idx_6ofm + 1\n    msds [ n - 1 ] = arr [ n - 1 ]\n    idx_i5uo = 0\n    list_2zid = range ( n - 2 , - 1 , - 1 )\n    while idx_i5uo < len(list_2zid):\n        i = list_2zid[idx_i5uo]\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n        idx_i5uo = idx_i5uo + 1\n    idx_5gjx = 0\n    list_qlvm = range ( n )\n    while idx_5gjx < len(list_qlvm):\n        i = list_qlvm[idx_5gjx]\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n        idx_5gjx = idx_5gjx + 1\n    return max_sum", "id": "For2While_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_223", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSum ( arr , n ) :\n    res = - sys.maxsize\n    idx_5n0v = 0\n    list_f4k2 = range ( 0 , n )\n    while idx_5n0v < len(list_f4k2):\n        i = list_f4k2[idx_5n0v]\n        curr_sum = 0\n        idx_5pzj = 0\n        list_np78 = range ( 0 , n )\n        while idx_5pzj < len(list_np78):\n            j = list_np78[idx_5pzj]\n            index = int ( ( i + j ) % n )\n            curr_sum += j * arr [ index ]\n            idx_5pzj = idx_5pzj + 1\n        res = max ( res , curr_sum )\n        idx_5n0v = idx_5n0v + 1\n    return res", "id": "For2While_sample_from_MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_to_224", "old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY"}
{"code": "def maxSum ( arr , n ) :\n    cum_sum = 0\n    idx_l3u7 = 0\n    list_p9ls = range ( 0 , n )\n    while idx_l3u7 < len(list_p9ls):\n        i = list_p9ls[idx_l3u7]\n        cum_sum += arr [ i ]\n        idx_l3u7 = idx_l3u7 + 1\n    curr_val = 0\n    idx_na0e = 0\n    list_tkyz = range ( 0 , n )\n    while idx_na0e < len(list_tkyz):\n        i = list_tkyz[idx_na0e]\n        curr_val += i * arr [ i ]\n        idx_na0e = idx_na0e + 1\n    res = curr_val\n    idx_qxis = 0\n    list_6isr = range ( 1 , n )\n    while idx_qxis < len(list_6isr):\n        i = list_6isr[idx_qxis]\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n        idx_qxis = idx_qxis + 1\n    return res", "id": "For2While_sample_from_MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1_to_225", "old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1"}
{"code": "def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    idx_rqgh = 0\n    list_wble = range ( 1 , N )\n    while idx_rqgh < len(list_wble):\n        i = list_wble[idx_rqgh]\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] )\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] )\n        idx_rqgh = idx_rqgh + 1\n    return dp [ N - 1 ]", "id": "For2While_sample_from_MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_to_226", "old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE"}
{"code": "def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ 0 for k in range ( n ) ]\n    bw = [ 0 for k in range ( n ) ]\n    cur_max , max_so_far = arr [ 0 ] , arr [ 0 ]\n    idx_8y69 = 0\n    list_y28h = range (1, n )\n    while idx_8y69 < len(list_y28h):\n        i = list_y28h[idx_8y69]\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n        idx_8y69 = idx_8y69 + 1\n    cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ]\n    i = n - 2\n    while i >= 0 :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= 1\n    fans = max_so_far\n    idx_pzuf = 0\n    list_w2gj = range ( 1 , n - 1 )\n    while idx_pzuf < len(list_w2gj):\n        i = list_w2gj[idx_pzuf]\n        fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )\n        idx_pzuf = idx_pzuf + 1\n    return fans", "id": "For2While_sample_from_MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT_to_227", "old_id": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = [ 0 for i in range ( N ) ]\n    MS [ N - 1 ] = arr [ N - 1 ]\n    idx_e659 = 0\n    list_vy7j = range ( N - 2 , - 1 , - 1 )\n    while idx_e659 < len(list_vy7j):\n        i = list_vy7j[idx_e659]\n        if ( i + k + 1 >= N ) :\n            MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] )\n        else :\n            MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] )\n        idx_e659 = idx_e659 + 1\n    return MS [ 0 ]", "id": "For2While_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_228", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    idx_0f2v = 0\n    list_s0xh = range ( 0 , n )\n    while idx_0f2v < len(list_s0xh):\n        i = list_s0xh[idx_0f2v]\n        idx_x0u5 = 0\n        list_4e02 = range ( i + 1 , n )\n        while idx_x0u5 < len(list_4e02):\n            j = list_4e02[idx_x0u5]\n            idx_misk = 0\n            list_6guv = range ( j + 1 , n )\n            while idx_misk < len(list_6guv):\n                k = list_6guv[idx_misk]\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n                idx_misk = idx_misk + 1\n            idx_x0u5 = idx_x0u5 + 1\n        idx_0f2v = idx_0f2v + 1\n    return sm", "id": "For2While_sample_from_MAXIMUM_TRIPLET_SUM_ARRAY_to_229", "old_id": "MAXIMUM_TRIPLET_SUM_ARRAY"}
{"code": "def maxCost ( mat , N ) :\n    dp = [ [ 0 for i in range ( N ) ] for j in range ( N ) ]\n    dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ]\n    idx_slho = 0\n    list_7vb3 = range ( 1 , N )\n    while idx_slho < len(list_7vb3):\n        i = list_7vb3[idx_slho]\n        dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ]\n        idx_slho = idx_slho + 1\n    idx_d2w4 = 0\n    list_4fgu = range ( 1 , N )\n    while idx_d2w4 < len(list_4fgu):\n        i = list_4fgu[idx_d2w4]\n        idx_koeq = 0\n        list_1ze9 = range ( 1 , min ( i + 1 , N ) )\n        while idx_koeq < len(list_1ze9):\n            j = list_1ze9[idx_koeq]\n            dp [ i ] [ j ] = mat [ i ] [ j ] + \\\n                max ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_koeq = idx_koeq + 1\n        idx_d2w4 = idx_d2w4 + 1\n    result = 0\n    idx_x0zt = 0\n    list_kbn1 = range ( N )\n    while idx_x0zt < len(list_kbn1):\n        i = list_kbn1[idx_x0zt]\n        if ( result < dp [ N - 1 ] [ i ] ) :\n            result = dp [ N - 1 ] [ i ]\n        idx_x0zt = idx_x0zt + 1\n    return result", "id": "For2While_sample_from_MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX_to_230", "old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX"}
{"code": "def minValue ( A , B , n ) :\n    sorted ( A )\n    sorted ( B )\n    result = 0\n    idx_46ft = 0\n    list_om5f = range ( n )\n    while idx_46ft < len(list_om5f):\n        i = list_om5f[idx_46ft]\n        result += ( A [ i ] * B [ n - i - 1 ] )\n        idx_46ft = idx_46ft + 1\n    return result", "id": "For2While_sample_from_MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED_to_231", "old_id": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == 1 ) :\n        return 0\n    arr.sort ( )\n    ans = arr [ n - 1 ] - arr [ 0 ]\n    small = arr [ 0 ] + k\n    big = arr [ n - 1 ] - k\n    if ( small > big ) :\n        small , big = big , small\n    idx_647y = 0\n    list_3x4e = range ( 1 , n - 1 )\n    while idx_647y < len(list_3x4e):\n        i = list_3x4e[idx_647y]\n        subtract = arr [ i ] - k\n        add = arr [ i ] + k\n        if ( subtract >= small or add <= big ) :\n            continue\n        if ( big - subtract <= add - small ) :\n            small = subtract\n        else :\n            big = add\n        idx_647y = idx_647y + 1\n    return min ( ans , big - small )", "id": "For2While_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_232", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = 0\n    idx_7qtg = 0\n    list_38xa = range ( n )\n    while idx_7qtg < len(list_38xa):\n        i = list_38xa[idx_7qtg]\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n        idx_7qtg = idx_7qtg + 1\n    return mn * ( sum - mn )", "id": "For2While_sample_from_MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY_to_233", "old_id": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY"}
{"code": "def calculateEnergy ( mat , n ) :\n    tot_energy = 0\n    idx_9s80 = 0\n    list_6mo8 = range ( n )\n    while idx_9s80 < len(list_6mo8):\n        i = list_6mo8[idx_9s80]\n        idx_k74b = 0\n        list_h6ir = range ( n )\n        while idx_k74b < len(list_h6ir):\n            j = list_h6ir[idx_k74b]\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n            idx_k74b = idx_k74b + 1\n        idx_9s80 = idx_9s80 + 1\n    return tot_energy", "id": "For2While_sample_from_MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1_to_234", "old_id": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    idx_2849 = 0\n    list_t5zx = range ( n )\n    while idx_2849 < len(list_t5zx):\n        i = list_t5zx[idx_2849]\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n        idx_2849 = idx_2849 + 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    idx_hj5c = 0\n    list_1hg2 = range ( W + 1 )\n    while idx_hj5c < len(list_1hg2):\n        i = list_1hg2[idx_hj5c]\n        min_cost [ 0 ] [ i ] = INF\n        idx_hj5c = idx_hj5c + 1\n    idx_6ui4 = 0\n    list_zlfk = range ( 1 , n + 1 )\n    while idx_6ui4 < len(list_zlfk):\n        i = list_zlfk[idx_6ui4]\n        min_cost [ i ] [ 0 ] = 0\n        idx_6ui4 = idx_6ui4 + 1\n    idx_gb4c = 0\n    list_hc5x = range ( 1 , n + 1 )\n    while idx_gb4c < len(list_hc5x):\n        i = list_hc5x[idx_gb4c]\n        idx_zqut = 0\n        list_n9tl = range ( 1 , W + 1 )\n        while idx_zqut < len(list_n9tl):\n            j = list_n9tl[idx_zqut]\n            if ( wt [ i - 1 ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n            idx_zqut = idx_zqut + 1\n        idx_gb4c = idx_gb4c + 1\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]", "id": "For2While_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_235", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minimumflip ( mat , n ) :\n    flip = 0\n    idx_1xvy = 0\n    list_0atp = range ( n )\n    while idx_1xvy < len(list_0atp):\n        i = list_0atp[idx_1xvy]\n        idx_30qs = 0\n        list_5hts = range ( i )\n        while idx_30qs < len(list_5hts):\n            j = list_5hts[idx_30qs]\n            if mat [ i ] [ j ] != mat [ j ] [ i ] :\n                flip += 1\n            idx_30qs = idx_30qs + 1\n        idx_1xvy = idx_1xvy + 1\n    return flip", "id": "For2While_sample_from_MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1_to_236", "old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = 0\n    idx_lh2u = 0\n    list_1m5f = range ( 0 , n )\n    while idx_lh2u < len(list_1m5f):\n        i = list_1m5f[idx_lh2u]\n        if ( ( max1 - arr [ i ] ) % k != 0 ) :\n            return - 1\n        else :\n            res += ( max1 - arr [ i ] ) / k\n        idx_lh2u = idx_lh2u + 1\n    return int ( res )", "id": "For2While_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_237", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    idx_gw6r = 0\n    list_nyxk = range ( N )\n    while idx_gw6r < len(list_nyxk):\n        i = list_nyxk[idx_gw6r]\n        lis [ i ] = 1\n        idx_gw6r = idx_gw6r + 1\n    idx_80dw = 0\n    list_yk3x = range ( 1 , N )\n    while idx_80dw < len(list_yk3x):\n        i = list_yk3x[idx_80dw]\n        idx_20ue = 0\n        list_bor8 = range ( i )\n        while idx_20ue < len(list_bor8):\n            j = list_bor8[idx_20ue]\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n            idx_20ue = idx_20ue + 1\n        idx_80dw = idx_80dw + 1\n    max = 0\n    idx_en62 = 0\n    list_ujyo = range ( N )\n    while idx_en62 < len(list_ujyo):\n        i = list_ujyo[idx_en62]\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n        idx_en62 = idx_en62 + 1\n    return ( N - max )", "id": "For2While_sample_from_MINIMUM_INSERTIONS_SORT_ARRAY_to_238", "old_id": "MINIMUM_INSERTIONS_SORT_ARRAY"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    if ( n == 0 ) or ( arr [ 0 ] == 0 ) :\n        return float ( 'inf' )\n    jumps [ 0 ] = 0\n    idx_6b2h = 0\n    list_6c1t = range ( 1 , n )\n    while idx_6b2h < len(list_6c1t):\n        i = list_6c1t[idx_6b2h]\n        jumps [ i ] = float ( 'inf' )\n        idx_0vey = 0\n        list_j9a1 = range ( i )\n        while idx_0vey < len(list_j9a1):\n            j = list_j9a1[idx_0vey]\n            if ( i <= j + arr [ j ] ) and ( jumps [ j ] != float ( 'inf' ) ) :\n                jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 )\n                break\n            idx_0vey = idx_0vey + 1\n        idx_6b2h = idx_6b2h + 1\n    return jumps [ n - 1 ]", "id": "For2While_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1_to_239", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    idx_6a2x = 0\n    list_mvhn = range ( n - 2 , - 1 , - 1 )\n    while idx_6a2x < len(list_mvhn):\n        i = list_mvhn[idx_6a2x]\n        if ( arr [ i ] == 0 ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            idx_w5gm = 0\n            list_0xm3 = range ( i + 1 , n )\n            while idx_w5gm < len(list_0xm3):\n                j = list_0xm3[idx_w5gm]\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n                idx_w5gm = idx_w5gm + 1\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n        idx_6a2x = idx_6a2x + 1\n    return jumps [ 0 ]", "id": "For2While_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_240", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    idx_z9mr = 0\n    list_2c8h = range ( 4 , n + 1 )\n    while idx_z9mr < len(list_2c8h):\n        i = list_2c8h[idx_z9mr]\n        dp.append ( i )\n        idx_1dey = 0\n        list_z3rf = range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 )\n        while idx_1dey < len(list_z3rf):\n            x = list_z3rf[idx_1dey]\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n            idx_1dey = idx_1dey + 1\n        idx_z9mr = idx_z9mr + 1\n    return dp [ n ]", "id": "For2While_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_241", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def subset ( arr , n ) :\n    maxv = max(arr)\n    minv = min(arr)\n    mp = { i : 0 for i in range ( minv, maxv+1 ) }\n    idx_rasi = 0\n    list_zy0a = range ( n )\n    while idx_rasi < len(list_zy0a):\n        i = list_zy0a[idx_rasi]\n        mp [ arr [ i ] ] += 1\n        idx_rasi = idx_rasi + 1\n    res = 0\n    idx_ogqm = 0\n    list_dsfp = list(mp.items ( ))\n    while idx_ogqm < len(list_dsfp):\n        key , value = list_dsfp[idx_ogqm]\n        res = max ( res , value )\n        idx_ogqm = idx_ogqm + 1\n    return res", "id": "For2While_sample_from_MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1_to_242", "old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1"}
{"code": "def minOperation ( arr , n ) :\n    Hash = defaultdict ( lambda : 0 )\n    idx_qyo6 = 0\n    list_f14l = range ( 0 , n )\n    while idx_qyo6 < len(list_f14l):\n        i = list_f14l[idx_qyo6]\n        Hash [ arr [ i ] ] += 1\n        idx_qyo6 = idx_qyo6 + 1\n    max_count = 0\n    idx_6uy9 = 0\n    list_o2u7 = Hash\n    while idx_6uy9 < len(list_o2u7):\n        i = list_o2u7[idx_6uy9]\n        if max_count < Hash [ i ] :\n            max_count = Hash [ i ]\n        idx_6uy9 = idx_6uy9 + 1\n    return n - max_count", "id": "For2While_sample_from_MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY_to_243", "old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY"}
{"code": "def minProduct(arr, n, k):\n    pq = []\n    idx_g671 = 0\n    list_cnpq = range(n)\n    while idx_g671 < len(list_cnpq):\n        i = list_cnpq[idx_g671]\n        heapq.heappush(pq, arr[i])\n        idx_g671 = idx_g671 + 1\n    count = 0\n    ans = 1\n    while pq and count < k:\n        ans += heapq.heappop(pq)\n        count += 1\n    return ans", "id": "For2While_sample_from_MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS_to_244", "old_id": "MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS"}
{"code": "def minProductSubset ( a , n ) :\n    if ( n == 1 ) :\n        return a [ 0 ]\n    max_neg = float ( '-inf' )\n    min_pos = float ( 'inf' )\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    idx_7oip = 0\n    list_2ekf = range ( 0 , n )\n    while idx_7oip < len(list_2ekf):\n        i = list_2ekf[idx_7oip]\n        if ( a [ i ] == 0 ) :\n            count_zero = count_zero + 1\n            continue\n        if ( a [ i ] < 0 ) :\n            count_neg = count_neg + 1\n            max_neg = max ( max_neg , a [ i ] )\n        if ( a [ i ] > 0 ) :\n            min_pos = min ( min_pos , a [ i ] )\n        prod = prod * a [ i ]\n        idx_7oip = idx_7oip + 1\n    if ( count_zero == n or ( count_neg == 0 and count_zero > 0 ) ) :\n        return 0\n    if ( count_neg == 0 ) :\n        return min_pos\n    if ( ( count_neg & 1 ) == 0 and count_neg != 0 ) :\n        prod = int ( prod / max_neg )\n    return prod", "id": "For2While_sample_from_MINIMUM_PRODUCT_SUBSET_ARRAY_to_245", "old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def findMinRooms ( slots , n , m ) :\n    counts = [ 0 ] * m\n    idx_4xgr = 0\n    list_8yem = range ( n )\n    while idx_4xgr < len(list_8yem):\n        i = list_8yem[idx_4xgr]\n        idx_opc2 = 0\n        list_2he1 = range ( m )\n        while idx_opc2 < len(list_2he1):\n            j = list_2he1[idx_opc2]\n            if i < len(slots) and j < len(slots[i]):\n                if ( slots [ i ] [ j ] == '1' ) :\n                    counts [ j ] += 1\n            idx_opc2 = idx_opc2 + 1\n        idx_4xgr = idx_4xgr + 1\n    return max ( counts )", "id": "For2While_sample_from_MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE_to_246", "old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE"}
{"code": "def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    idx_i6yp = 0\n    list_3zvs = range ( 1 , n + 1 )\n    while idx_i6yp < len(list_3zvs):\n        i = list_3zvs[idx_i6yp]\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n        idx_i6yp = idx_i6yp + 1\n    return n", "id": "For2While_sample_from_MINIMUM_ROTATIONS_REQUIRED_GET_STRING_to_247", "old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING"}
{"code": "def getMinSteps ( n ) :\n    table = [ 0 ] * ( n + 1 )\n    idx_vwaq = 0\n    list_7s49 = range ( n + 1 )\n    while idx_vwaq < len(list_7s49):\n        i = list_7s49[idx_vwaq]\n        table [ i ] = n - i\n        idx_vwaq = idx_vwaq + 1\n    idx_6f02 = 0\n    list_vije = range ( n , 0 , - 1 )\n    while idx_6f02 < len(list_vije):\n        i = list_vije[idx_6f02]\n        if ( not ( i % 2 ) ) :\n            table [ i // 2 ] = min ( table [ i ] + 1 , table [ i // 2 ] )\n        if ( not ( i % 3 ) ) :\n            table [ i // 3 ] = min ( table [ i ] + 1 , table [ i // 3 ] )\n        idx_6f02 = idx_6f02 + 1\n    return table [ 1 ]", "id": "For2While_sample_from_MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION_to_248", "old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    temp = 0\n    idx_7ikg = 0\n    list_0wrm = range ( n )\n    while idx_7ikg < len(list_0wrm):\n        i = list_0wrm[idx_7ikg]\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n        idx_7ikg = idx_7ikg + 1\n    return res - diff", "id": "For2While_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_249", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    if ( n == 2 ) :\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) :\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) :\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    idx_fpvj = 0\n    list_uqze = range ( 4 , n )\n    while idx_fpvj < len(list_uqze):\n        i = list_uqze[idx_fpvj]\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n        idx_fpvj = idx_fpvj + 1\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )", "id": "For2While_sample_from_MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED_to_250", "old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0\n    b = 0\n    idx_fb52 = 0\n    list_islk = range ( n )\n    while idx_fb52 < len(list_islk):\n        i = list_islk[idx_fb52]\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n        idx_fb52 = idx_fb52 + 1\n    return a + b", "id": "For2While_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_251", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == 0 :\n        return 0\n    if N == 1 :\n        return insert\n    dp = [ 0 ] * ( N + 1 )\n    idx_j0u2 = 0\n    list_cpev = range ( 1 , N + 1 )\n    while idx_j0u2 < len(list_cpev):\n        i = list_cpev[idx_j0u2]\n        if i % 2 == 0 :\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ i // 2 ] + copy )\n        else :\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ ( i + 1 ) // 2 ] + copy + remove )\n        idx_j0u2 = idx_j0u2 + 1\n    return dp [ N ]", "id": "For2While_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_252", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def minXOR ( arr , n ) :\n    min_xor = 999999\n    val = 0\n    idx_93ry = 0\n    list_ktb8 = range ( 0 , n )\n    while idx_93ry < len(list_ktb8):\n        i = list_ktb8[idx_93ry]\n        idx_vb34 = 0\n        list_mktj = range ( i + 1 , n )\n        while idx_vb34 < len(list_mktj):\n            j = list_mktj[idx_vb34]\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n            idx_vb34 = idx_vb34 + 1\n        idx_93ry = idx_93ry + 1\n    return min_xor", "id": "For2While_sample_from_MINIMUM_XOR_VALUE_PAIR_to_253", "old_id": "MINIMUM_XOR_VALUE_PAIR"}
{"code": "def minXOR ( arr , n ) :\n    arr = arr [ : n ]\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    idx_ylbq = 0\n    list_2w8f = range ( 0 , n - 1 )\n    while idx_ylbq < len(list_2w8f):\n        i = list_2w8f[idx_ylbq]\n        val = arr [ i ] ^ arr [ i + 1 ]\n        minXor = min ( minXor , val )\n        idx_ylbq = idx_ylbq + 1\n    return minXor", "id": "For2While_sample_from_MINIMUM_XOR_VALUE_PAIR_1_to_254", "old_id": "MINIMUM_XOR_VALUE_PAIR_1"}
{"code": "def compute ( str , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( str )\n    answer = \"\"\n    idx_3udn = 0\n    list_i816 = range ( 0 , n )\n    while idx_3udn < len(list_i816):\n        i = list_i816[idx_3udn]\n        if i < l:\n            answer = answer + str [ i ]\n        idx_3udn = idx_3udn + 1\n    idx_nets = 0\n    list_2u9v = range ( n , l )\n    while idx_nets < len(list_2u9v):\n        i = list_2u9v[idx_nets]\n        answer = ( answer + reverseAlphabet [ ord ( str [ i ] ) - ord ( \"a\" ) ] )\n        idx_nets = idx_nets + 1\n    return answer", "id": "For2While_sample_from_MIRROR_CHARACTERS_STRING_to_255", "old_id": "MIRROR_CHARACTERS_STRING"}
{"code": "def segregateElements ( arr , n ) :\n    temp = [ 0 for k in range ( n ) ]\n    j = 0\n    idx_h0io = 0\n    list_73r8 = range ( n )\n    while idx_h0io < len(list_73r8):\n        i = list_73r8[idx_h0io]\n        if ( arr [ i ] >= 0 ) :\n            temp [ j ] = arr [ i ]\n            j += 1\n        idx_h0io = idx_h0io + 1\n    if ( j == n or j == 0 ) :\n        return\n    idx_uskn = 0\n    list_wc26 = range ( n )\n    while idx_uskn < len(list_wc26):\n        i = list_wc26[idx_uskn]\n        if ( arr [ i ] < 0 ) :\n            temp [ j ] = arr [ i ]\n            j += 1\n        idx_uskn = idx_uskn + 1\n    idx_ey51 = 0\n    list_6wmp = range ( n )\n    while idx_ey51 < len(list_6wmp):\n        k = list_6wmp[idx_ey51]\n        arr [ k ] = temp [ k ]\n        idx_ey51 = idx_ey51 + 1", "id": "For2While_sample_from_MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED_to_256", "old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED"}
{"code": "def sequence ( n ) :\n    f = array.array ( 'i' , [ 0 , 1 , 1 ] )\n    idx_r0pw = 0\n    list_ljsn = range ( 3 , n + 1 )\n    while idx_r0pw < len(list_ljsn):\n        i = list_ljsn[idx_r0pw]\n        r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]\n        f.append ( r )\n        idx_r0pw = idx_r0pw + 1\n    return f[n]", "id": "For2While_sample_from_NEWMAN_CONWAY_SEQUENCE_1_to_257", "old_id": "NEWMAN_CONWAY_SEQUENCE_1"}
{"code": "def firstNonRepeating ( arr , n ) :\n    idx_zw9l = 0\n    list_r8xl = range ( n )\n    while idx_zw9l < len(list_r8xl):\n        i = list_r8xl[idx_zw9l]\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            return arr [ i ]\n        idx_zw9l = idx_zw9l + 1\n    return - 1", "id": "For2While_sample_from_NON_REPEATING_ELEMENT_to_258", "old_id": "NON_REPEATING_ELEMENT"}
{"code": "def firstNonRepeating ( arr , n ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_1btr = 0\n    list_y67r = range ( n )\n    while idx_1btr < len(list_y67r):\n        i = list_y67r[idx_1btr]\n        mp [ arr [ i ] ] += 1\n        idx_1btr = idx_1btr + 1\n    idx_6ix8 = 0\n    list_f1dr = range ( n )\n    while idx_6ix8 < len(list_f1dr):\n        i = list_f1dr[idx_6ix8]\n        if mp [ arr [ i ] ] == 1 :\n            return arr [ i ]\n        idx_6ix8 = idx_6ix8 + 1\n    return - 1", "id": "For2While_sample_from_NON_REPEATING_ELEMENT_1_to_259", "old_id": "NON_REPEATING_ELEMENT_1"}
{"code": "def evenlength ( n ) :\n    res = n\n    idx_dg1b = 0\n    list_6rvs = range ( len ( n ) - 1 , - 1 , - 1 )\n    while idx_dg1b < len(list_6rvs):\n        j = list_6rvs[idx_dg1b]\n        res += n [ j ]\n        idx_dg1b = idx_dg1b + 1\n    return res", "id": "For2While_sample_from_NTH_EVEN_LENGTH_PALINDROME_to_260", "old_id": "NTH_EVEN_LENGTH_PALINDROME"}
{"code": "def divisible ( num ) :\n    n = len ( num )\n    sum = 0\n    idx_yi0g = 0\n    list_pibz = range ( n )\n    while idx_yi0g < len(list_pibz):\n        i = list_pibz[idx_yi0g]\n        sum += ord ( num [ i ] )\n        idx_yi0g = idx_yi0g + 1\n    if ( sum % 3 == 0 ) :\n        return 0\n    if ( n == 1 ) :\n        return - 1\n    idx_34ir = 0\n    list_tdmb = range ( n )\n    while idx_34ir < len(list_tdmb):\n        i = list_tdmb[idx_34ir]\n        if ( sum % 3 == ord ( num [ i ] ) % 3 ) :\n            return 1\n        idx_34ir = idx_34ir + 1\n    if ( n == 2 ) :\n        return - 1\n    return 2", "id": "For2While_sample_from_NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3_to_261", "old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3"}
{"code": "def answer_query ( a , n , l , r ) :\n    count = 0\n    idx_m13k = 0\n    list_8dya = range ( l , r )\n    while idx_m13k < len(list_8dya):\n        i = list_8dya[idx_m13k]\n        if ( a [ i ] == a [ i + 1 ] ) :\n            count += 1\n        idx_m13k = idx_m13k + 1\n    return count", "id": "For2While_sample_from_NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE_to_262", "old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE"}
{"code": "def countIntegralSolutions ( n ) :\n    result = 0\n    idx_w53e = 0\n    list_hro5 = range ( n + 1 )\n    while idx_w53e < len(list_hro5):\n        i = list_hro5[idx_w53e]\n        idx_5emp = 0\n        list_fib6 = range ( n + 1 )\n        while idx_5emp < len(list_fib6):\n            j = list_fib6[idx_5emp]\n            idx_qbi5 = 0\n            list_r5k0 = range ( n + 1 )\n            while idx_qbi5 < len(list_r5k0):\n                k = list_r5k0[idx_qbi5]\n                if i + j + k == n :\n                    result += 1\n                idx_qbi5 = idx_qbi5 + 1\n            idx_5emp = idx_5emp + 1\n        idx_w53e = idx_w53e + 1\n    return result", "id": "For2While_sample_from_NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_to_263", "old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N"}
{"code": "def nonDecNums ( n ) :\n    a = np.zeros ( ( n + 1 , 10 ) )\n    idx_gj0s = 0\n    list_zi16 = range ( 10 )\n    while idx_gj0s < len(list_zi16):\n        i = list_zi16[idx_gj0s]\n        a [ 0 ] [ i ] = 1\n        idx_gj0s = idx_gj0s + 1\n    idx_ke9o = 0\n    list_2lku = range ( 1 , n + 1 )\n    while idx_ke9o < len(list_2lku):\n        i = list_2lku[idx_ke9o]\n        a [ i ] [ 9 ] = 1\n        idx_ke9o = idx_ke9o + 1\n    idx_gok9 = 0\n    list_gey1 = range ( 1 , n + 1 )\n    while idx_gok9 < len(list_gey1):\n        i = list_gey1[idx_gok9]\n        idx_oiuy = 0\n        list_usy1 = range ( 8 , - 1 , - 1 )\n        while idx_oiuy < len(list_usy1):\n            j = list_usy1[idx_oiuy]\n            a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ]\n            idx_oiuy = idx_oiuy + 1\n        idx_gok9 = idx_gok9 + 1\n    return int ( a [ n ] [ 0 ] )", "id": "For2While_sample_from_NUMBER_N_DIGITS_NON_DECREASING_INTEGERS_to_264", "old_id": "NUMBER_N_DIGITS_NON_DECREASING_INTEGERS"}
{"code": "def answer ( n ) :\n    dp = [ [ 0 for x in range ( 10 ) ] for y in range ( n + 1 ) ]\n    if ( n == 1 ) :\n        return 10\n    idx_43nb = 0\n    list_743h = range ( 10 )\n    while idx_43nb < len(list_743h):\n        j = list_743h[idx_43nb]\n        dp [ 1 ] [ j ] = 1\n        idx_43nb = idx_43nb + 1\n    idx_ln9d = 0\n    list_c9b1 = range ( 2 , n + 1 )\n    while idx_ln9d < len(list_c9b1):\n        i = list_c9b1[idx_ln9d]\n        idx_9xz0 = 0\n        list_dxe4 = range ( 10 )\n        while idx_9xz0 < len(list_dxe4):\n            j = list_dxe4[idx_9xz0]\n            if ( j == 0 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ]\n            elif ( j == 9 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n            idx_9xz0 = idx_9xz0 + 1\n        idx_ln9d = idx_ln9d + 1\n    sum = 0\n    idx_fsti = 0\n    list_3rwm = range ( 1 , 10 )\n    while idx_fsti < len(list_3rwm):\n        j = list_3rwm[idx_fsti]\n        sum = sum + dp [ n ] [ j ]\n        idx_fsti = idx_fsti + 1\n    return sum", "id": "For2While_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_265", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    idx_tnkv = 0\n    list_kfjl = range ( n )\n    while idx_tnkv < len(list_kfjl):\n        i = list_kfjl[idx_tnkv]\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n        idx_tnkv = idx_tnkv + 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt", "id": "For2While_sample_from_NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT_to_266", "old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT"}
{"code": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    idx_b8r9 = 0\n    list_7lac = range ( n )\n    while idx_b8r9 < len(list_7lac):\n        i = list_7lac[idx_b8r9]\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n        idx_b8r9 = idx_b8r9 + 1\n    return C * K + int ( K * ( K - 1 ) / 2 ) * c1 * c2", "id": "For2While_sample_from_NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES_to_267", "old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES"}
{"code": "def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( l ) ]\n    dp [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % n ] += 1\n    idx_0sjp = 0\n    list_n30e = range ( 1 , l )\n    while idx_0sjp < len(list_n30e):\n        i = list_n30e[idx_0sjp]\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += 1\n        idx_r0gx = 0\n        list_jz71 = range ( n )\n        while idx_r0gx < len(list_jz71):\n            j = list_jz71[idx_r0gx]\n            dp [ i ] [ j ] += dp [ i - 1 ] [ j ]\n            dp [ i ] [ ( j * 10 + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - 1 ] [ j ]\n            idx_r0gx = idx_r0gx + 1\n        idx_0sjp = idx_0sjp + 1\n    return dp [ l - 1 ] [ 0 ]", "id": "For2While_sample_from_NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N_to_268", "old_id": "NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N"}
{"code": "def countRect ( n ) :\n    ans = 0\n    idx_0u1j = 0\n    list_0ntx = range ( 1 , int ( math.sqrt ( n ) ) + 1 )\n    while idx_0u1j < len(list_0ntx):\n        length = list_0ntx[idx_0u1j]\n        height = length\n        while ( height * length <= n ) :\n            ans += 1\n            height += 1\n        idx_0u1j = idx_0u1j + 1\n    return ans", "id": "For2While_sample_from_NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES_to_269", "old_id": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES"}
{"code": "def minimumBox ( arr , n ) :\n    q = collections.deque ( [ ] )\n    arr = arr [ : n ]\n    arr.sort ( )\n    q.append ( arr [ 0 ] )\n    idx_34ga = 0\n    list_c0ae = range ( 1 , n )\n    while idx_34ga < len(list_c0ae):\n        i = list_c0ae[idx_34ga]\n        now = q [ 0 ]\n        if ( arr [ i ] >= 2 * now ) :\n            q.popleft ( )\n        q.append ( arr [ i ] )\n        idx_34ga = idx_34ga + 1\n    return len ( q )", "id": "For2While_sample_from_NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER_to_270", "old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER"}
{"code": "def maximumNumberDistinctPrimeRange ( m , n ) :\n    factorCount = [ 0 ] * ( n + 1 )\n    prime = [ False ] * ( n + 1 )\n    idx_yuih = 0\n    list_slon = range ( n + 1 )\n    while idx_yuih < len(list_slon):\n        i = list_slon[idx_yuih]\n        factorCount [ i ] = 0\n        prime [ i ] = True\n        idx_yuih = idx_yuih + 1\n    idx_lrnw = 0\n    list_knpv = range ( 2 , n + 1 )\n    while idx_lrnw < len(list_knpv):\n        i = list_knpv[idx_lrnw]\n        if ( prime [ i ] == True ) :\n            factorCount [ i ] = 1\n            idx_5flo = 0\n            list_6p70 = range ( i * 2 , n + 1 , i )\n            while idx_5flo < len(list_6p70):\n                j = list_6p70[idx_5flo]\n                factorCount [ j ] += 1\n                prime [ j ] = False\n                idx_5flo = idx_5flo + 1\n        idx_lrnw = idx_lrnw + 1\n    max = factorCount [ m ]\n    num = m\n    idx_bq9g = 0\n    list_rtk0 = range ( m , n + 1 )\n    while idx_bq9g < len(list_rtk0):\n        i = list_rtk0[idx_bq9g]\n        if ( factorCount [ i ] > max ) :\n            max = factorCount [ i ]\n            num = i\n        idx_bq9g = idx_bq9g + 1\n    return num", "id": "For2While_sample_from_NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N_to_271", "old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N"}
{"code": "def findNth ( n ) :\n    count = 0\n    idx_4p63 = 0\n    list_2rv8 = itertools.count ( )\n    while idx_4p63 < len(list_2rv8):\n        curr = list_2rv8[idx_4p63]\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n        idx_4p63 = idx_4p63 + 1\n    return - 1", "id": "For2While_sample_from_N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_to_272", "old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN"}
{"code": "def findSum ( A , B , n ) :\n    Hash = defaultdict ( lambda : 0 )\n    idx_axwc = 0\n    list_ez2a = range ( 0 , n )\n    while idx_axwc < len(list_ez2a):\n        i = list_ez2a[idx_axwc]\n        Hash [ A [ i ] ] += 1\n        Hash [ B [ i ] ] += 1\n        idx_axwc = idx_axwc + 1\n    Sum = 0\n    idx_rjf7 = 0\n    list_sog2 = Hash\n    while idx_rjf7 < len(list_sog2):\n        x = list_sog2[idx_rjf7]\n        if Hash [ x ] == 1 :\n            Sum += x\n        idx_rjf7 = idx_rjf7 + 1\n    return Sum", "id": "For2While_sample_from_OVERLAPPING_SUM_TWO_ARRAY_to_273", "old_id": "OVERLAPPING_SUM_TWO_ARRAY"}
{"code": "def isProduct ( arr , n , x ) :\n    if n < 2 :\n        return False\n    s = set ( )\n    idx_x6zs = 0\n    list_fwg6 = range ( 0 , n )\n    while idx_x6zs < len(list_fwg6):\n        i = list_fwg6[idx_x6zs]\n        if arr [ i ] == 0 :\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n        idx_x6zs = idx_x6zs + 1\n    return False", "id": "For2While_sample_from_PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1_to_274", "old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1"}
{"code": "def checkPangram ( s ) :\n    List = [ ]\n    idx_n97j = 0\n    list_ij7z = range ( 26 )\n    while idx_n97j < len(list_ij7z):\n        i = list_ij7z[idx_n97j]\n        List.append ( False )\n        idx_n97j = idx_n97j + 1\n    idx_9qsr = 0\n    list_2jqc = s\n    while idx_9qsr < len(list_2jqc):\n        c = list_2jqc[idx_9qsr]\n        if 'A' <= c and c <= 'Z':\n            List [ ord ( c ) - ord ( 'A' ) ] = True\n        elif 'a' <= c and c <= 'z':\n            List [ ord ( c ) - ord ( 'a' ) ] = True\n        idx_9qsr = idx_9qsr + 1\n    idx_dq12 = 0\n    list_qxof = List\n    while idx_dq12 < len(list_qxof):\n        ch = list_qxof[idx_dq12]\n        if ch == False :\n            return False\n        idx_dq12 = idx_dq12 + 1\n    return True", "id": "For2While_sample_from_PANGRAM_CHECKING_to_275", "old_id": "PANGRAM_CHECKING"}
{"code": "def maxDifference ( arr , N , k ) :\n    S = 0\n    S1 = 0\n    max_difference = 0\n    idx_vy20 = 0\n    list_slrn = range ( N )\n    while idx_vy20 < len(list_slrn):\n        i = list_slrn[idx_vy20]\n        S += arr [ i ]\n        idx_vy20 = idx_vy20 + 1\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    idx_lch1 = 0\n    list_rlmz = range ( M )\n    while idx_lch1 < len(list_rlmz):\n        i = list_rlmz[idx_lch1]\n        S1 += arr [ i ]\n        idx_lch1 = idx_lch1 + 1\n    max_difference = S1 - ( S - S1 )\n    return max_difference", "id": "For2While_sample_from_PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM_to_276", "old_id": "PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM"}
{"code": "def maxAverageOfPath ( cost , N ) :\n    dp = [ [ 0 for i in range ( N + 1 ) ] for j in range ( N + 1 ) ]\n    dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]\n    idx_ix0e = 0\n    list_iejd = range ( 1 , N )\n    while idx_ix0e < len(list_iejd):\n        i = list_iejd[idx_ix0e]\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ]\n        idx_ix0e = idx_ix0e + 1\n    idx_p9vx = 0\n    list_n6ce = range ( 1 , N )\n    while idx_p9vx < len(list_n6ce):\n        j = list_n6ce[idx_p9vx]\n        dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ]\n        idx_p9vx = idx_p9vx + 1\n    idx_f1dm = 0\n    list_5r9e = range ( 1 , N )\n    while idx_f1dm < len(list_5r9e):\n        i = list_5r9e[idx_f1dm]\n        idx_r6j5 = 0\n        list_oh65 = range ( 1 , N )\n        while idx_r6j5 < len(list_oh65):\n            j = list_oh65[idx_r6j5]\n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ]\n            idx_r6j5 = idx_r6j5 + 1\n        idx_f1dm = idx_f1dm + 1\n    return dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 )", "id": "For2While_sample_from_PATH_MAXIMUM_AVERAGE_VALUE_to_277", "old_id": "PATH_MAXIMUM_AVERAGE_VALUE"}
{"code": "def isPossible ( a , b , n , k ) :\n    a = a [ : n ]\n    b = b [ : n ]\n    a.sort ( reverse = True )\n    b.sort ( )\n    idx_9ok3 = 0\n    list_xkm3 = range ( n )\n    while idx_9ok3 < len(list_xkm3):\n        i = list_xkm3[idx_9ok3]\n        if ( a [ i ] + b [ i ] < k ) :\n            return False\n        idx_9ok3 = idx_9ok3 + 1\n    return True", "id": "For2While_sample_from_PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K_to_278", "old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K"}
{"code": "def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :\n    print ( \"Point inside the viewing pane:\" )\n    idx_rp91 = 0\n    list_90n1 = range ( n )\n    while idx_rp91 < len(list_90n1):\n        i = list_90n1[idx_rp91]\n        if ( ( XY [ i ] [ 0 ] >= Xmin ) and ( XY [ i ] [ 0 ] <= Xmax ) ) :\n            if ( ( XY [ i ] [ 1 ] >= Ymin ) and ( XY [ i ] [ 1 ] <= Ymax ) ) :\n                print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_rp91 = idx_rp91 + 1\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    idx_21i9 = 0\n    list_qjlb = range ( n )\n    while idx_21i9 < len(list_qjlb):\n        i = list_qjlb[idx_21i9]\n        if ( ( XY [ i ] [ 0 ] < Xmin ) or ( XY [ i ] [ 0 ] > Xmax ) ) :\n            print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        if ( ( XY [ i ] [ 1 ] < Ymin ) or ( XY [ i ] [ 1 ] > Ymax ) ) :\n            print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_21i9 = idx_21i9 + 1", "id": "For2While_sample_from_POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS_to_279", "old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS"}
{"code": "def isPossibleTriangle ( arr , N ) :\n    arr = arr [ : N ]\n    if N < 3 :\n        return False\n    arr.sort ( )\n    idx_1cok = 0\n    list_vmp4 = range ( N - 2 )\n    while idx_1cok < len(list_vmp4):\n        i = list_vmp4[idx_1cok]\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :\n            return True\n        idx_1cok = idx_1cok + 1\n    return False", "id": "For2While_sample_from_POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES_to_280", "old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES"}
{"code": "def isPrime ( p ) :\n    checkNumber = 2 ** p - 1\n    nextval = 4 % checkNumber\n    idx_rwch = 0\n    list_1ec2 = range ( 1 , p - 1 )\n    while idx_rwch < len(list_1ec2):\n        i = list_1ec2[idx_rwch]\n        nextval = ( nextval * nextval - 2 ) % checkNumber\n        idx_rwch = idx_rwch + 1\n    if ( nextval == 0 ) : return True\n    else : return False", "id": "For2While_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_281", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def isPrime ( n ) :\n    if ( n <= 1 ) :\n        return False\n    idx_g0fu = 0\n    list_a291 = range ( 2 , n )\n    while idx_g0fu < len(list_a291):\n        i = list_a291[idx_g0fu]\n        if ( n % i == 0 ) :\n            return False\n        idx_g0fu = idx_g0fu + 1\n    return True", "id": "For2While_sample_from_PRIME_NUMBERS_to_282", "old_id": "PRIME_NUMBERS"}
{"code": "def noAdjacentDup ( s ) :\n    n = len ( s )\n    idx_5gkm = 0\n    list_kwry = range ( 1 , n )\n    while idx_5gkm < len(list_kwry):\n        i = list_kwry[idx_5gkm]\n        if ( s [ i ] == s [ i - 1 ] ) :\n            s [ i ] = \"a\"\n            while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and s [ i ] == s [ i + 1 ] ) ) :\n                s [ i ] += 1\n            i += 1\n        idx_5gkm = idx_5gkm + 1\n    return s", "id": "For2While_sample_from_PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES_to_283", "old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES"}
{"code": "def antiSpiralTraversal ( m , n , a ) :\n    k = 0\n    l = 0\n    stk = [ ]\n    while ( k <= m and l <= n ) :\n        idx_p10n = 0\n        list_x7by = range ( l , n + 1 )\n        while idx_p10n < len(list_x7by):\n            i = list_x7by[idx_p10n]\n            stk.append ( a [ k ] [ i ] )\n            idx_p10n = idx_p10n + 1\n        k += 1\n        idx_jveb = 0\n        list_fdns = range ( k , m + 1 )\n        while idx_jveb < len(list_fdns):\n            i = list_fdns[idx_jveb]\n            stk.append ( a [ i ] [ n ] )\n            idx_jveb = idx_jveb + 1\n        n -= 1\n        if ( k <= m ) :\n            idx_mufv = 0\n            list_apwe = range ( n , l - 1 , - 1 )\n            while idx_mufv < len(list_apwe):\n                i = list_apwe[idx_mufv]\n                stk.append ( a [ m ] [ i ] )\n                idx_mufv = idx_mufv + 1\n            m -= 1\n        if ( l <= n ) :\n            idx_bxig = 0\n            list_d65t = range ( m , k - 1 , - 1 )\n            while idx_bxig < len(list_d65t):\n                i = list_d65t[idx_bxig]\n                stk.append ( a [ i ] [ l ] )\n                idx_bxig = idx_bxig + 1\n            l += 1\n    while len ( stk ) != 0 :\n        print ( str ( stk [ - 1 ] ) , end = \" \" )\n        stk.pop ( )", "id": "For2While_sample_from_PRINT_MATRIX_ANTISPIRAL_FORM_to_284", "old_id": "PRINT_MATRIX_ANTISPIRAL_FORM"}
{"code": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    idx_51k0 = 0\n    list_0l14 = range ( n )\n    while idx_51k0 < len(list_0l14):\n        i = list_0l14[idx_51k0]\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n        idx_51k0 = idx_51k0 + 1\n    ans = sys.maxsize\n    idx_fxka = 0\n    list_n895 = range ( n )\n    while idx_fxka < len(list_n895):\n        i = list_n895[idx_fxka]\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n        idx_fxka = idx_fxka + 1\n    return ans", "id": "For2While_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_285", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    idx_mvq9 = 0\n    list_y1kg = range ( n )\n    while idx_mvq9 < len(list_y1kg):\n        i = list_y1kg[idx_mvq9]\n        bestIdx = - 1\n        idx_mawj = 0\n        list_321i = range ( m )\n        while idx_mawj < len(list_321i):\n            j = list_321i[idx_mawj]\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n            idx_mawj = idx_mawj + 1\n        if bestIdx != - 1 :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n        idx_mvq9 = idx_mvq9 + 1\n    print ( \"Process No.Process Size     Block no.\" )\n    idx_vs5i = 0\n    list_b9nq = range ( n )\n    while idx_vs5i < len(list_b9nq):\n        i = list_b9nq[idx_vs5i]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n        idx_vs5i = idx_vs5i + 1", "id": "For2While_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_286", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def binaryToDecimal ( n ) :\n    num = n\n    dec_value = 0\n    base1 = 1\n    len1 = len ( num )\n    idx_io9r = 0\n    list_zqtl = range ( len1 - 1 , - 1 , - 1 )\n    while idx_io9r < len(list_zqtl):\n        i = list_zqtl[idx_io9r]\n        if ( num [ i ] == '1' ) :\n            dec_value += base1\n        base1 = base1 * 2\n        idx_io9r = idx_io9r + 1\n    return dec_value", "id": "For2While_sample_from_PROGRAM_BINARY_DECIMAL_CONVERSION_1_to_287", "old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1"}
{"code": "def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    index = 0\n    idx_90gu = 0\n    list_01b9 = word_list\n    while idx_90gu < len(list_01b9):\n        i = list_01b9[idx_90gu]\n        if i == word :\n            word_list [ index ] = stars\n        index += 1\n        idx_90gu = idx_90gu + 1\n    result = ' '.join ( word_list )\n    return result", "id": "For2While_sample_from_PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE_to_288", "old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE"}
{"code": "def arraySortedOrNot ( arr , n ) :\n    if ( n == 0 or n == 1 ) :\n        return True\n    idx_9rmb = 0\n    list_cmsw = range ( 1 , n )\n    while idx_9rmb < len(list_cmsw):\n        i = list_cmsw[idx_9rmb]\n        if ( arr [ i - 1 ] > arr [ i ] ) :\n            return False\n        idx_9rmb = idx_9rmb + 1\n    return True", "id": "For2While_sample_from_PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1_to_289", "old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1"}
{"code": "def isNumber ( s ) :\n    idx_azwr = 0\n    list_3j8a = range ( len ( s ) )\n    while idx_azwr < len(list_3j8a):\n        i = list_3j8a[idx_azwr]\n        if s [ i ].isdigit ( ) != True :\n            return False\n        idx_azwr = idx_azwr + 1\n    return True", "id": "For2While_sample_from_PROGRAM_CHECK_INPUT_INTEGER_STRING_to_290", "old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != 10 :\n        return False\n    _sum = 0\n    idx_duoj = 0\n    list_wgt3 = range ( 9 )\n    while idx_duoj < len(list_wgt3):\n        i = list_wgt3[idx_duoj]\n        if 0 <= int ( isbn [ i ] ) <= 9 :\n            _sum += int ( isbn [ i ] ) * ( 10 - i )\n        else :\n            return False\n        idx_duoj = idx_duoj + 1\n    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) :\n        return False\n    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )\n    return ( _sum % 11 == 0 )", "id": "For2While_sample_from_PROGRAM_CHECK_ISBN_to_291", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def count ( s , c ) :\n    res = 0\n    idx_lyv8 = 0\n    list_vq3x = range ( len ( s ) )\n    while idx_lyv8 < len(list_vq3x):\n        i = list_vq3x[idx_lyv8]\n        if ( s [ i ] == c ) :\n            res = res + 1\n        idx_lyv8 = idx_lyv8 + 1\n    return res", "id": "For2While_sample_from_PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING_to_292", "old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING"}
{"code": "def remainder ( str ) :\n    ln = len ( str )\n    rem = 0\n    idx_u1m2 = 0\n    list_tszj = range ( 0 , ln )\n    while idx_u1m2 < len(list_tszj):\n        i = list_tszj[idx_u1m2]\n        num = rem * 10 + ( int ) ( str [ i ] )\n        rem = num % 11\n        idx_u1m2 = idx_u1m2 + 1\n    return rem", "id": "For2While_sample_from_PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11_to_293", "old_id": "PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11"}
{"code": "def findMinimumAngle ( arr , n ) :\n    l = 0\n    _sum = 0\n    ans = 360\n    idx_hpkl = 0\n    list_tks5 = range ( n )\n    while idx_hpkl < len(list_tks5):\n        i = list_tks5[idx_hpkl]\n        _sum += arr [ i ]\n        while _sum >= 180 :\n            ans = min ( ans , 2 * abs ( 180 - _sum ) )\n            _sum -= arr [ l ]\n            l += 1\n        ans = min ( ans , 2 * abs ( 180 - _sum ) )\n        idx_hpkl = idx_hpkl + 1\n    return ans", "id": "For2While_sample_from_PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE_to_294", "old_id": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE"}
{"code": "def isIdentity ( mat , N ) :\n    idx_wrb8 = 0\n    list_yhtg = range ( N )\n    while idx_wrb8 < len(list_yhtg):\n        row = list_yhtg[idx_wrb8]\n        idx_6dn9 = 0\n        list_rwks = range ( N )\n        while idx_6dn9 < len(list_rwks):\n            col = list_rwks[idx_6dn9]\n            if ( row == col and mat [ row ] [ col ] != 1 ) :\n                return False\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False\n            idx_6dn9 = idx_6dn9 + 1\n        idx_wrb8 = idx_wrb8 + 1\n    return True", "id": "For2While_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_295", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def recursiveReverse ( str ) :\n    stack = [ ]\n    idx_6pj7 = 0\n    list_268b = range ( len ( str ) )\n    while idx_6pj7 < len(list_268b):\n        i = list_268b[idx_6pj7]\n        stack.append ( str [ i ] )\n        idx_6pj7 = idx_6pj7 + 1\n    idx_r7sw = 0\n    list_98wo = range ( len ( str ) )\n    while idx_r7sw < len(list_98wo):\n        i = list_98wo[idx_r7sw]\n        str [ i ] = stack.pop ( )\n        idx_r7sw = idx_r7sw + 1", "id": "For2While_sample_from_PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_to_296", "old_id": "PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE"}
{"code": "def isSymmetric ( mat , N ) :\n    idx_gjmb = 0\n    list_cq6n = range ( N )\n    while idx_gjmb < len(list_cq6n):\n        i = list_cq6n[idx_gjmb]\n        idx_x7du = 0\n        list_4y3b = range ( N )\n        while idx_x7du < len(list_4y3b):\n            j = list_4y3b[idx_x7du]\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :\n                return False\n            idx_x7du = idx_x7du + 1\n        idx_gjmb = idx_gjmb + 1\n    return True", "id": "For2While_sample_from_PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC_to_297", "old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    idx_24wh = 0\n    list_0c41 = range ( n )\n    while idx_24wh < len(list_0c41):\n        i = list_0c41[idx_24wh]\n        wstIdx = - 1\n        idx_3wvp = 0\n        list_li78 = range ( m )\n        while idx_3wvp < len(list_li78):\n            j = list_li78[idx_3wvp]\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - 1 :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n            idx_3wvp = idx_3wvp + 1\n        if wstIdx != - 1 :\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n        idx_24wh = idx_24wh + 1\n    print ( \"Process No.Process Size Block no.\" )\n    idx_4a2y = 0\n    list_fjd7 = range ( n )\n    while idx_4a2y < len(list_fjd7):\n        i = list_fjd7[idx_4a2y]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n        idx_4a2y = idx_4a2y + 1", "id": "For2While_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_298", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    idx_tqoa = 0\n    list_4j5u = range ( n )\n    while idx_tqoa < len(list_4j5u):\n        i = list_4j5u[idx_tqoa]\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n        idx_tqoa = idx_tqoa + 1\n    return count", "id": "For2While_sample_from_QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE_to_299", "old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE"}
{"code": "def allCharactersSame ( s ) :\n    n = len ( s )\n    idx_5vpx = 0\n    list_imqr = range ( 1 , n )\n    while idx_5vpx < len(list_imqr):\n        i = list_imqr[idx_5vpx]\n        if s [ i ] != s [ 0 ] :\n            return False\n        idx_5vpx = idx_5vpx + 1\n    return True", "id": "For2While_sample_from_QUICK_WAY_CHECK_CHARACTERS_STRING_to_300", "old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING"}
{"code": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    idx_5itm = 0\n    list_2wct = range ( n )\n    while idx_5itm < len(list_2wct):\n        i = list_2wct[idx_5itm]\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n        idx_5itm = idx_5itm + 1\n    idx_cp8z = 0\n    list_70i8 = range ( n )\n    while idx_cp8z < len(list_70i8):\n        i = list_70i8[idx_cp8z]\n        arr [ i ] = temp [ i ]\n        idx_cp8z = idx_cp8z + 1\n    return arr", "id": "For2While_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_301", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = n - 1\n    min_idx = 0\n    max_elem = arr [ n - 1 ] + 1\n    idx_ygha = 0\n    list_31ps = range ( 0 , n )\n    while idx_ygha < len(list_31ps):\n        i = list_31ps[idx_ygha]\n        if i % 2 == 0 :\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n        idx_ygha = idx_ygha + 1\n    idx_fhd4 = 0\n    list_rman = range ( 0 , n )\n    while idx_fhd4 < len(list_rman):\n        i = list_rman[idx_fhd4]\n        arr [ i ] = int ( arr [ i ] / max_elem )\n        idx_fhd4 = idx_fhd4 + 1", "id": "For2While_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_302", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def rearrange ( arr , n ) :\n    i = - 1\n    idx_ftlh = 0\n    list_gzbc = range ( n )\n    while idx_ftlh < len(list_gzbc):\n        j = list_gzbc[idx_ftlh]\n        if ( arr [ j ] < 0 ) :\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        idx_ftlh = idx_ftlh + 1\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2", "id": "For2While_sample_from_REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH_to_303", "old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH"}
{"code": "def breakSum ( n ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 0\n    dp [ 1 ] = 1\n    idx_rq4y = 0\n    list_6l7t = range ( 2 , n + 1 )\n    while idx_rq4y < len(list_6l7t):\n        i = list_6l7t[idx_rq4y]\n        dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i / 3 ) ] + dp [ int ( i / 4 ) ] , i )\n        idx_rq4y = idx_rq4y + 1\n    return dp [ n ]", "id": "For2While_sample_from_RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1_to_304", "old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1"}
{"code": "def remainderWith7 ( num ) :\n    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]\n    series_index = 0\n    result = 0\n    idx_bk1v = 0\n    list_y65p = range ( ( len ( num ) - 1 ) , - 1 , - 1 )\n    while idx_bk1v < len(list_y65p):\n        i = list_y65p[idx_bk1v]\n        digit = ord ( num [ i ] ) - 48\n        result += digit * series [ series_index ]\n        series_index = ( series_index + 1 ) % 6\n        result %= 7\n        idx_bk1v = idx_bk1v + 1\n    if ( result < 0 ) :\n        result = ( result + 7 ) % 7\n    return result", "id": "For2While_sample_from_REMAINDER_7_LARGE_NUMBERS_to_305", "old_id": "REMAINDER_7_LARGE_NUMBERS"}
{"code": "def removeDuplicates ( S ) :\n    n = len ( S )\n    if ( n < 2 ) :\n        return\n    j = 0\n    idx_09gt = 0\n    list_9rs1 = range ( 1 , n )\n    while idx_09gt < len(list_9rs1):\n        i = list_9rs1[idx_09gt]\n        if ( S [ j ] != S [ i ] ) :\n            j += 1\n            S [ j ] = S [ i ]\n        idx_09gt = idx_09gt + 1\n    j += 1\n    S = S [ : j ]", "id": "For2While_sample_from_REMOVE_CONSECUTIVE_DUPLICATES_STRING_to_306", "old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING"}
{"code": "def minRemovalsDP ( arr , n ) :\n    longest_start = - 1\n    longest_end = 0\n    idx_y4fj = 0\n    list_ifnu = range ( n )\n    while idx_y4fj < len(list_ifnu):\n        start = list_ifnu[idx_y4fj]\n        min = sys.maxsize\n        max = - sys.maxsize\n        idx_1vzn = 0\n        list_pcm3 = range ( start , n )\n        while idx_1vzn < len(list_pcm3):\n            end = list_pcm3[idx_1vzn]\n            val = arr [ end ]\n            if ( val < min ) :\n                min = val\n            if ( val > max ) :\n                max = val\n            if ( 2 * min <= max ) :\n                break\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) :\n                longest_start = start\n                longest_end = end\n            idx_1vzn = idx_1vzn + 1\n        idx_y4fj = idx_y4fj + 1\n    if ( longest_start == - 1 ) :\n        return n\n    return ( n - ( longest_end - longest_start + 1 ) )", "id": "For2While_sample_from_REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX_to_307", "old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    idx_c1jq = 0\n    list_b9ui = range ( l )\n    while idx_c1jq < len(list_b9ui):\n        i = list_b9ui[idx_c1jq]\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n        idx_c1jq = idx_c1jq + 1\n    return s", "id": "For2While_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_308", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def countCommon ( mat , n ) :\n    res = 0\n    idx_obv6 = 0\n    list_4lm3 = range ( n )\n    while idx_obv6 < len(list_4lm3):\n        i = list_4lm3[idx_obv6]\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :\n            res = res + 1\n        idx_obv6 = idx_obv6 + 1\n    return res", "id": "For2While_sample_from_ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX_to_309", "old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX"}
{"code": "def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) :\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    idx_r1pd = 0\n    list_53ai = arr\n    while idx_r1pd < len(list_53ai):\n        i = list_53ai[idx_r1pd]\n        print ( str ( i ) + \" \" , end = '' )\n        idx_r1pd = idx_r1pd + 1", "id": "For2While_sample_from_SEGREGATE_EVEN_ODD_NUMBERS_SET_3_to_310", "old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 1 ) ]\n    idx_d49c = 0\n    list_eorn = range ( m + 1 )\n    while idx_d49c < len(list_eorn):\n        i = list_eorn[idx_d49c]\n        idx_9xyk = 0\n        list_2tgp = range ( n + 1 )\n        while idx_9xyk < len(list_2tgp):\n            j = list_2tgp[idx_9xyk]\n            if i == 0 or j == 0 :\n                T [ i ] [ j ] = 0\n            elif i < j :\n                T [ i ] [ j ] = 0\n            elif j == 1 :\n                T [ i ] [ j ] = i\n            else :\n                T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i // 2 ] [ j - 1 ]\n            idx_9xyk = idx_9xyk + 1\n        idx_d49c = idx_d49c + 1\n    return T [ m ] [ n ]", "id": "For2While_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_311", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def randomize ( arr , n ) :\n    idx_du2c = 0\n    list_thfd = range ( n - 1 , 0 , - 1 )\n    while idx_du2c < len(list_thfd):\n        i = list_thfd[idx_du2c]\n        j = random.randint ( 0 , i + 1 )\n        arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        idx_du2c = idx_du2c + 1\n    return arr", "id": "For2While_sample_from_SHUFFLE_A_GIVEN_ARRAY_to_312", "old_id": "SHUFFLE_A_GIVEN_ARRAY"}
{"code": "def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    idx_4jdu = 0\n    list_mh2x = range ( 0 , size )\n    while idx_4jdu < len(list_mh2x):\n        i = list_mh2x[idx_4jdu]\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n        idx_4jdu = idx_4jdu + 1\n    return ( end - start + 1 )", "id": "For2While_sample_from_SIZE_SUBARRAY_MAXIMUM_SUM_to_313", "old_id": "SIZE_SUBARRAY_MAXIMUM_SUM"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    idx_i13b = 0\n    list_4t63 = range ( n )\n    while idx_i13b < len(list_4t63):\n        i = list_4t63[idx_i13b]\n        arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n        idx_i13b = idx_i13b + 1\n    index = - ( sys.maxsize - 1 )\n    maximum = - ( sys.maxsize - 1 )\n    idx_69w8 = 0\n    list_ycik = range ( n )\n    while idx_69w8 < len(list_ycik):\n        i = list_ycik[idx_69w8]\n        if maximum < arr [ i ] :\n            index = i\n            maximum = arr [ i ]\n        idx_69w8 = idx_69w8 + 1\n    i = 0\n    j = n - 1\n    new_arr = [ 0 ] * n\n    k = 0\n    while i < index and j > index :\n        if arr [ i ] < arr [ j ] :\n            new_arr [ k ] = arr [ i ]\n            k += 1\n            i += 1\n        else :\n            new_arr [ k ] = arr [ j ]\n            k += 1\n            j -= 1\n    while i < index :\n        new_arr [ k ] = arr [ i ]\n        k += 1\n        i += 1\n    while j > index :\n        new_arr [ k ] = arr [ j ]\n        k += 1\n        j -= 1\n        new_arr [ n - 1 ] = maximum\n    idx_p2x7 = 0\n    list_3lvt = range ( n )\n    while idx_p2x7 < len(list_3lvt):\n        i = list_3lvt[idx_p2x7]\n        arr [ i ] = new_arr [ i ]\n        idx_p2x7 = idx_p2x7 + 1", "id": "For2While_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_314", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def sortit ( arr , n ) :\n    idx_paoi = 0\n    list_t6nh = range ( n )\n    while idx_paoi < len(list_t6nh):\n        i = list_t6nh[idx_paoi]\n        arr [ i ] = i + 1\n        idx_paoi = idx_paoi + 1", "id": "For2While_sample_from_SORT_ARRAY_CONTAIN_1_N_VALUES_to_315", "old_id": "SORT_ARRAY_CONTAIN_1_N_VALUES"}
{"code": "def sortInWave ( arr , n ) :\n    idx_rjio = 0\n    list_kv09 = range ( 0 , n , 2 )\n    while idx_rjio < len(list_kv09):\n        i = list_kv09[idx_rjio]\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n        idx_rjio = idx_rjio + 1", "id": "For2While_sample_from_SORT_ARRAY_WAVE_FORM_2_1_to_316", "old_id": "SORT_ARRAY_WAVE_FORM_2_1"}
{"code": "def twoWaySort ( arr , n ) :\n    idx_rb54 = 0\n    list_dcpk = range ( 0 , n )\n    while idx_rb54 < len(list_dcpk):\n        i = list_dcpk[idx_rb54]\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] *= - 1\n        idx_rb54 = idx_rb54 + 1\n    arr.sort ( )\n    idx_9ynt = 0\n    list_d5vy = range ( 0 , n )\n    while idx_9ynt < len(list_d5vy):\n        i = list_d5vy[idx_9ynt]\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] *= - 1\n        idx_9ynt = idx_9ynt + 1", "id": "For2While_sample_from_SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1_to_317", "old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    idx_zi26 = 0\n    list_xj60 = range ( n )\n    while idx_zi26 < len(list_xj60):\n        i = list_xj60[idx_zi26]\n        if ( ( i % 2 ) == 0 ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n        idx_zi26 = idx_zi26 + 1\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    idx_s3nh = 0\n    list_ilso = range ( len ( evenArr ) )\n    while idx_s3nh < len(list_ilso):\n        j = list_ilso[idx_s3nh]\n        arr [ i ] = evenArr [ j ]\n        i += 1\n        idx_s3nh = idx_s3nh + 1\n    idx_l726 = 0\n    list_mawn = range ( len ( oddArr ) )\n    while idx_l726 < len(list_mawn):\n        j = list_mawn[idx_l726]\n        arr [ i ] = oddArr [ j ]\n        i += 1\n        idx_l726 = idx_l726 + 1", "id": "For2While_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_318", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 )\n    idx_1q34 = 0\n    list_arvb = range ( n )\n    while idx_1q34 < len(list_arvb):\n        i = list_arvb[idx_1q34]\n        idx_p61v = 0\n        list_78d5 = range ( W , -1 , - 1 )\n        while idx_p61v < len(list_78d5):\n            j = list_78d5[idx_p61v]\n            if j - wt [ i ] < W + 1 and j - wt [ i ] >= 0:\n                dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] )\n            idx_p61v = idx_p61v + 1\n        idx_1q34 = idx_1q34 + 1\n    return dp [ W ]", "id": "For2While_sample_from_SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1_to_319", "old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1"}
{"code": "def splitArr ( arr , n , k ) :\n    idx_sxk4 = 0\n    list_jm49 = range ( 0 , k )\n    while idx_sxk4 < len(list_jm49):\n        i = list_jm49[idx_sxk4]\n        x = arr [ 0 ]\n        idx_1pf0 = 0\n        list_4kld = range ( 0 , n - 1 )\n        while idx_1pf0 < len(list_4kld):\n            j = list_4kld[idx_1pf0]\n            arr [ j ] = arr [ j + 1 ]\n            idx_1pf0 = idx_1pf0 + 1\n        arr [ n - 1 ] = x\n        idx_sxk4 = idx_sxk4 + 1", "id": "For2While_sample_from_SPLIT_ARRAY_ADD_FIRST_PART_END_to_320", "old_id": "SPLIT_ARRAY_ADD_FIRST_PART_END"}
{"code": "def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    idx_4szy = 0\n    list_obyf = range ( 0 , row )\n    while idx_4szy < len(list_obyf):\n        i = list_obyf[idx_4szy]\n        idx_qkjn = 0\n        list_492k = range ( 0 , column )\n        while idx_qkjn < len(list_492k):\n            j = list_492k[idx_qkjn]\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_qkjn = idx_qkjn + 1\n        idx_4szy = idx_4szy + 1\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    idx_7d4e = 0\n    list_up8k = range ( 0 , row )\n    while idx_7d4e < len(list_up8k):\n        i = list_up8k[idx_7d4e]\n        idx_lmaz = 0\n        list_2mu3 = range ( 0 , column )\n        while idx_lmaz < len(list_2mu3):\n            j = list_2mu3[idx_lmaz]\n            if ( i + j == column - 1 ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_lmaz = idx_lmaz + 1\n        idx_7d4e = idx_7d4e + 1", "id": "For2While_sample_from_SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_to_321", "old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS"}
{"code": "def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    idx_5uk6 = 0\n    list_kfsu = range ( len ( str ) )\n    while idx_5uk6 < len(list_kfsu):\n        i = list_kfsu[idx_5uk6]\n        if ( str [ i ] == ' ' ) :\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n        idx_5uk6 = idx_5uk6 + 1\n    return result", "id": "For2While_sample_from_STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES_to_322", "old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"}
{"code": "def sumoflength ( arr , n ) :\n    s = [ ]\n    j = 0\n    ans = 0\n    idx_0i6l = 0\n    list_0udn = range ( n )\n    while idx_0i6l < len(list_0udn):\n        i = list_0udn[idx_0i6l]\n        while ( j < n and ( arr [ j ] not in s ) ) :\n            s.append ( arr [ j ] )\n            j += 1\n        ans += ( ( j - i ) * ( j - i + 1 ) ) // 2\n        s.remove ( arr [ i ] )\n        idx_0i6l = idx_0i6l + 1\n    return ans", "id": "For2While_sample_from_SUBARRAYS_DISTINCT_ELEMENTS_to_323", "old_id": "SUBARRAYS_DISTINCT_ELEMENTS"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ]\n    idx_wdrl = 0\n    list_wnra = range ( n + 1 )\n    while idx_wdrl < len(list_wnra):\n        i = list_wnra[idx_wdrl]\n        idx_h8y2 = 0\n        list_mwtb = range ( sum + 1 )\n        while idx_h8y2 < len(list_mwtb):\n            j = list_mwtb[idx_h8y2]\n            if ( j == 0 ) :\n                subset [ i % 2 ] [ j ] = True\n            elif ( i == 0 ) :\n                subset [ i % 2 ] [ j ] = False\n            elif ( arr [ i - 1 ] <= j ) :\n                subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ]\n            else :\n                subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ]\n            idx_h8y2 = idx_h8y2 + 1\n        idx_wdrl = idx_wdrl + 1\n    return subset [ n % 2 ] [ sum ]", "id": "For2While_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_324", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def binomialCoeffSum ( n ) :\n    C = [ [ 0 ] * ( n + 2 ) for i in range ( 0 , n + 2 ) ]\n    idx_91e0 = 0\n    list_ih5p = range ( 0 , n + 1 )\n    while idx_91e0 < len(list_ih5p):\n        i = list_ih5p[idx_91e0]\n        idx_uwib = 0\n        list_nrwb = range ( 0 , min ( i , n ) + 1 )\n        while idx_uwib < len(list_nrwb):\n            j = list_nrwb[idx_uwib]\n            if ( j == 0 or j == i ) :\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            idx_uwib = idx_uwib + 1\n        idx_91e0 = idx_91e0 + 1\n    sum = 0\n    idx_19o3 = 0\n    list_akpt = range ( 0 , n + 1 )\n    while idx_19o3 < len(list_akpt):\n        i = list_akpt[idx_19o3]\n        sum += C [ n ] [ i ]\n        idx_19o3 = idx_19o3 + 1\n    return sum", "id": "For2While_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_325", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def divisorSum ( n ) :\n    sum = 0\n    idx_6a43 = 0\n    list_x0ov = range ( 1 , n + 1 )\n    while idx_6a43 < len(list_x0ov):\n        i = list_x0ov[idx_6a43]\n        sum += int ( n / i ) * i\n        idx_6a43 = idx_6a43 + 1\n    return int ( sum )", "id": "For2While_sample_from_SUM_DIVISORS_1_N_1_to_326", "old_id": "SUM_DIVISORS_1_N_1"}
{"code": "def divSum ( n ) :\n    result = 0\n    idx_yvqo = 0\n    list_nj3i = range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 )\n    while idx_yvqo < len(list_nj3i):\n        i = list_nj3i[idx_yvqo]\n        if ( n % i == 0 ) :\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n        idx_yvqo = idx_yvqo + 1\n    return ( result + n + 1 )", "id": "For2While_sample_from_SUM_FACTORS_NUMBER_to_327", "old_id": "SUM_FACTORS_NUMBER"}
{"code": "def calculateSum ( n ) :\n    if ( n <= 0 ) :\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    idx_qdxy = 0\n    list_r3yd = range ( 2 , n + 1 )\n    while idx_qdxy < len(list_r3yd):\n        i = list_r3yd[idx_qdxy]\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n        idx_qdxy = idx_qdxy + 1\n    return sm", "id": "For2While_sample_from_SUM_FIBONACCI_NUMBERS_to_328", "old_id": "SUM_FIBONACCI_NUMBERS"}
{"code": "def distancesum ( x , y , n ) :\n    sum = 0\n    idx_pfb0 = 0\n    list_45wz = range ( n )\n    while idx_pfb0 < len(list_45wz):\n        i = list_45wz[idx_pfb0]\n        idx_sr6o = 0\n        list_yvh0 = range ( i + 1 , n )\n        while idx_sr6o < len(list_yvh0):\n            j = list_yvh0[idx_sr6o]\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n            idx_sr6o = idx_sr6o + 1\n        idx_pfb0 = idx_pfb0 + 1\n    return sum", "id": "For2While_sample_from_SUM_MANHATTAN_DISTANCES_PAIRS_POINTS_to_329", "old_id": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS"}
{"code": "def findSum ( n ) :\n    arr = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    idx_g25z = 0\n    list_kyqa = range ( n )\n    while idx_g25z < len(list_kyqa):\n        i = list_kyqa[idx_g25z]\n        idx_j62s = 0\n        list_bnl4 = range ( n )\n        while idx_j62s < len(list_bnl4):\n            j = list_bnl4[idx_j62s]\n            arr [ i ] [ j ] = abs ( i - j )\n            idx_j62s = idx_j62s + 1\n        idx_g25z = idx_g25z + 1\n    sum = 0\n    idx_z309 = 0\n    list_nqz0 = range ( n )\n    while idx_z309 < len(list_nqz0):\n        i = list_nqz0[idx_z309]\n        idx_avqy = 0\n        list_zhq3 = range ( n )\n        while idx_avqy < len(list_zhq3):\n            j = list_zhq3[idx_avqy]\n            sum += arr [ i ] [ j ]\n            idx_avqy = idx_avqy + 1\n        idx_z309 = idx_z309 + 1\n    return sum", "id": "For2While_sample_from_SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_to_330", "old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS"}
{"code": "def findSum ( n ) :\n    ans = 0\n    temp = 0\n    idx_tgc5 = 0\n    list_aq9c = range ( 1 , n + 1 )\n    while idx_tgc5 < len(list_aq9c):\n        i = list_aq9c[idx_tgc5]\n        if temp < n :\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n        idx_tgc5 = idx_tgc5 + 1\n    return ans", "id": "For2While_sample_from_SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1_to_331", "old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1"}
{"code": "def middlesum ( mat , n ) :\n    row_sum = 0\n    col_sum = 0\n    idx_uxsp = 0\n    list_fl7m = range ( n )\n    while idx_uxsp < len(list_fl7m):\n        i = list_fl7m[idx_uxsp]\n        row_sum += mat [ n // 2 ] [ i ]\n        idx_uxsp = idx_uxsp + 1\n    print ( \"Sum of middle row = \" , row_sum )\n    idx_s0h6 = 0\n    list_q7kz = range ( n )\n    while idx_s0h6 < len(list_q7kz):\n        i = list_q7kz[idx_s0h6]\n        col_sum += mat [ i ] [ n // 2 ]\n        idx_s0h6 = idx_s0h6 + 1\n    print ( \"Sum of middle column = \" , col_sum )", "id": "For2While_sample_from_SUM_MIDDLE_ROW_COLUMN_MATRIX_to_332", "old_id": "SUM_MIDDLE_ROW_COLUMN_MATRIX"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    idx_nr0v = 0\n    list_kt9f = range ( n )\n    while idx_nr0v < len(list_kt9f):\n        i = list_kt9f[idx_nr0v]\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n        idx_nr0v = idx_nr0v + 1\n    return sum", "id": "For2While_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_333", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( ord ( num [ 0 ] ) - ord('0') )\n    res = sumofdigit [ 0 ]\n    idx_d4hc = 0\n    list_j217 = range ( 1 , n )\n    while idx_d4hc < len(list_j217):\n        i = list_j217[idx_d4hc]\n        numi = ord ( num [ i ] ) - ord ( '0' )\n        sumofdigit.append ( ( i + 1 ) + numi + 10 + sumofdigit [ i - 1 ] )\n        res += sumofdigit [ i ]\n        idx_d4hc = idx_d4hc + 1\n    return res", "id": "For2While_sample_from_SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER_to_334", "old_id": "SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER"}
{"code": "def findSum ( n ) :\n    sm = 0\n    idx_p9to = 0\n    list_h57l = range ( 1 , n + 1 )\n    while idx_p9to < len(list_h57l):\n        i = list_h57l[idx_p9to]\n        idx_rigc = 0\n        list_3cp7 = range ( i , n + 1 )\n        while idx_rigc < len(list_3cp7):\n            j = list_3cp7[idx_rigc]\n            sm = sm + i * j\n            idx_rigc = idx_rigc + 1\n        idx_p9to = idx_p9to + 1\n    return sm", "id": "For2While_sample_from_SUM_PAIRWISE_PRODUCTS_to_335", "old_id": "SUM_PAIRWISE_PRODUCTS"}
{"code": "def findSum ( n ) :\n    multiTerms = n * ( n + 1 ) // 2\n    sm = multiTerms\n    idx_z58j = 0\n    list_wvia = range ( 2 , n + 1 )\n    while idx_z58j < len(list_wvia):\n        i = list_wvia[idx_z58j]\n        multiTerms = multiTerms - ( i - 1 )\n        sm = sm + multiTerms * i\n        idx_z58j = idx_z58j + 1\n    return sm", "id": "For2While_sample_from_SUM_PAIRWISE_PRODUCTS_1_to_336", "old_id": "SUM_PAIRWISE_PRODUCTS_1"}
{"code": "def sumOfSeries ( n ) :\n    sum = 0\n    idx_63pa = 0\n    list_ymh7 = range ( 1 , n + 1 )\n    while idx_63pa < len(list_ymh7):\n        i = list_ymh7[idx_63pa]\n        sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )\n        idx_63pa = idx_63pa + 1\n    return sum", "id": "For2While_sample_from_SUM_SERIES_12_32_52_2N_12_to_337", "old_id": "SUM_SERIES_12_32_52_2N_12"}
{"code": "def sumofsquare ( n ) :\n    C = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_hty4 = 0\n    list_9izd = range ( 0 , n + 1 )\n    while idx_hty4 < len(list_9izd):\n        i = list_9izd[idx_hty4]\n        idx_crka = 0\n        list_1wjp = range ( 0 , min ( i , n ) + 1 )\n        while idx_crka < len(list_1wjp):\n            j = list_1wjp[idx_crka]\n            if ( j == 0 or j == i ) :\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            idx_crka = idx_crka + 1\n        idx_hty4 = idx_hty4 + 1\n    sum = 0\n    idx_026o = 0\n    list_otvx = range ( 0 , n + 1 )\n    while idx_026o < len(list_otvx):\n        i = list_otvx[idx_026o]\n        sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n        idx_026o = idx_026o + 1\n    return sum", "id": "For2While_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_338", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[:: - 1]\n    str2 = str2[:: - 1]\n    carry = 0\n    idx_chmo = 0\n    list_o1e2 = range(n1)\n    while idx_chmo < len(list_o1e2):\n        i = list_o1e2[idx_chmo]\n        sum = ((ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry))\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        carry = int(sum / 10)\n        idx_chmo = idx_chmo + 1\n    idx_vomn = 0\n    list_9d2s = range(n1, n2)\n    while idx_vomn < len(list_9d2s):\n        i = list_9d2s[idx_vomn]\n        sum = ((ord(str2[i]) - 48) + carry)\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        carry = (int)(sum / 10)\n        idx_vomn = idx_vomn + 1\n    if (carry):\n        str += chr(carry + 48)\n    str = str[:: - 1]\n    return str", "id": "For2While_sample_from_SUM_TWO_LARGE_NUMBERS_to_339", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = 0\n    idx_7unv = 0\n    list_5gbz = range ( n )\n    while idx_7unv < len(list_5gbz):\n        i = list_5gbz[idx_7unv]\n        left = 0\n        right = 0\n        idx_p8nc = 0\n        list_o1i9 = range ( i - 1 , - 1 , - 1 )\n        while idx_p8nc < len(list_o1i9):\n            j = list_o1i9[idx_p8nc]\n            if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) :\n                left += 1\n            else :\n                break\n            idx_p8nc = idx_p8nc + 1\n        idx_vbcp = 0\n        list_2ckh = range ( i + 1 , n )\n        while idx_vbcp < len(list_2ckh):\n            j = list_2ckh[idx_vbcp]\n            if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) :\n                right += 1\n            else :\n                break\n            idx_vbcp = idx_vbcp + 1\n        sum += max ( right , left ) + 1\n        idx_7unv = idx_7unv + 1\n    return sum", "id": "For2While_sample_from_TEMPLE_OFFERINGS_to_340", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    idx_0m2j = 0\n    list_r34q = range ( 1 , arr_size )\n    while idx_0m2j < len(list_r34q):\n        i = list_r34q[idx_0m2j]\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n        idx_0m2j = idx_0m2j + 1\n    second = - sys.maxsize\n    idx_5cxs = 0\n    list_26li = range ( 0 , arr_size )\n    while idx_5cxs < len(list_26li):\n        i = list_26li[idx_5cxs]\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n        idx_5cxs = idx_5cxs + 1\n    third = - sys.maxsize\n    idx_3sdi = 0\n    list_4znc = range ( 0 , arr_size )\n    while idx_3sdi < len(list_4znc):\n        i = list_4znc[idx_3sdi]\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n        idx_3sdi = idx_3sdi + 1\n    print ( \"The Third Largest\" , \"element is\" , third )", "id": "For2While_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_to_341", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    second = - sys.maxsize\n    third = - sys.maxsize\n    idx_682t = 0\n    list_wmk6 = range ( 1 , arr_size )\n    while idx_682t < len(list_wmk6):\n        i = list_wmk6[idx_682t]\n        if ( arr [ i ] > first ) :\n            third = second\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            third = second\n            second = arr [ i ]\n        elif ( arr [ i ] > third ) :\n            third = arr [ i ]\n        idx_682t = idx_682t + 1\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "For2While_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_342", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def countWays ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    idx_ry8m = 0\n    list_fw6j = range ( 2 , n + 1 )\n    while idx_ry8m < len(list_fw6j):\n        i = list_fw6j[idx_ry8m]\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n        idx_ry8m = idx_ry8m + 1\n    return A [ n ]", "id": "For2While_sample_from_TILING_WITH_DOMINOES_to_343", "old_id": "TILING_WITH_DOMINOES"}
{"code": "def countNonDecreasing ( n ) :\n    N = 10\n    count = 1\n    idx_l0ua = 0\n    list_5le3 = range ( 1 , n + 1 )\n    while idx_l0ua < len(list_5le3):\n        i = list_5le3[idx_l0ua]\n        count = int ( count * ( N + i - 1 ) )\n        count = int ( count / i )\n        idx_l0ua = idx_l0ua + 1\n    return count", "id": "For2While_sample_from_TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1_to_344", "old_id": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1"}
{"code": "def countUnique ( mat , n , m ) :\n    rowsum = [ 0 ] * n\n    colsum = [ 0 ] * m\n    idx_1kzm = 0\n    list_x21k = range ( n )\n    while idx_1kzm < len(list_x21k):\n        i = list_x21k[idx_1kzm]\n        idx_qwcu = 0\n        list_pqag = range ( m )\n        while idx_qwcu < len(list_pqag):\n            j = list_pqag[idx_qwcu]\n            if ( mat [ i ] [ j ] != 0 ) :\n                rowsum [ i ] += 1\n                colsum [ j ] += 1\n            idx_qwcu = idx_qwcu + 1\n        idx_1kzm = idx_1kzm + 1\n    uniquecount = 0\n    idx_zupr = 0\n    list_2s90 = range ( n )\n    while idx_zupr < len(list_2s90):\n        i = list_2s90[idx_zupr]\n        idx_qlxu = 0\n        list_2yl8 = range ( m )\n        while idx_qlxu < len(list_2yl8):\n            j = list_2yl8[idx_qlxu]\n            if ( mat [ i ] [ j ] != 0 and rowsum [ i ] == 1 and colsum [ j ] == 1 ) :\n                uniquecount += 1\n            idx_qlxu = idx_qlxu + 1\n        idx_zupr = idx_zupr + 1\n    return uniquecount", "id": "For2While_sample_from_UNIQUE_CELLS_BINARY_MATRIX_to_345", "old_id": "UNIQUE_CELLS_BINARY_MATRIX"}
{"code": "def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    idx_pkdq = 0\n    list_4f6b = range ( 0 , n , 1 )\n    while idx_pkdq < len(list_4f6b):\n        i = list_4f6b[idx_pkdq]\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n        idx_pkdq = idx_pkdq + 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count", "id": "For2While_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_346", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def CountWays ( n ) :\n    table = [ 0 ] * ( n + 1 )\n    table [ 0 ] = 1\n    idx_4lgq = 0\n    list_yd5r = range ( 1 , n )\n    while idx_4lgq < len(list_yd5r):\n        i = list_yd5r[idx_4lgq]\n        idx_hmqg = 0\n        list_zyig = range ( i , n + 1 )\n        while idx_hmqg < len(list_zyig):\n            j = list_zyig[idx_hmqg]\n            table [ j ] += table [ j - i ]\n            idx_hmqg = idx_hmqg + 1\n        idx_4lgq = idx_4lgq + 1\n    return table [ n ]", "id": "For2While_sample_from_WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS_to_347", "old_id": "WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS"}
{"code": "def countTransformation ( a , b ) :\n    n = len ( a )\n    m = len ( b )\n    if m == 0 :\n        return 1\n    dp = [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ]\n    idx_lugf = 0\n    list_w5ag = range ( m )\n    while idx_lugf < len(list_w5ag):\n        i = list_w5ag[idx_lugf]\n        idx_axqz = 0\n        list_y6mr = range ( i , n )\n        while idx_axqz < len(list_y6mr):\n            j = list_y6mr[idx_axqz]\n            if i == 0 :\n                if j == 0 :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = 1\n                    else :\n                        dp [ i ] [ j ] = 0\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            else :\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] )\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            idx_axqz = idx_axqz + 1\n        idx_lugf = idx_lugf + 1\n    return dp [ m - 1 ] [ n - 1 ]", "id": "For2While_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_348", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
