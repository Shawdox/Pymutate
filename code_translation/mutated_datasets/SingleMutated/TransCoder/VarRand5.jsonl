{"old_id": "ADD_1_TO_A_GIVEN_NUMBER", "code": "def YTIRQ ( NmyAq ) :\n    KVrFv = 1\n    while ( NmyAq & KVrFv ) :\n        NmyAq = NmyAq ^ KVrFv\n        KVrFv <<= 1\n    NmyAq = NmyAq ^ KVrFv\n    return NmyAq"}
{"old_id": "ADD_1_TO_A_GIVEN_NUMBER_1", "code": "def jFNwK ( soXZO ) :\n    return ( - ( ~ soXZO ) )"}
{"old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS", "code": "def Rhseu ( jCPkP , EpCdh , ToVWP ) :\n    Tethw = 0\n    for Tethw in range ( Tethw , EpCdh ) :\n        if ( jCPkP [ Tethw ] == ToVWP ) :\n            return Tethw\n    return - 1"}
{"old_id": "AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT", "code": "def ZZrXw ( QslaG ) :\n    ejeEP = ( math.cHmsS * QslaG * QslaG ) / 4\n    return ejeEP"}
{"old_id": "AREA_SQUARE_CIRCUMSCRIBED_CIRCLE", "code": "def xfqgq ( kKCTw ) :\n    return ( 2 * kKCTw * kKCTw )"}
{"old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES", "code": "def MfZBb ( NXaOV , JJUFx , TOSzH ) :\n    if TOSzH >= JJUFx - 1 :\n        return JJUFx\n    TjvLR = 0\n    PSkqE = 0\n    for akOlG in range ( JJUFx ) :\n        if NXaOV [ akOlG ] > TjvLR :\n            TjvLR = NXaOV [ akOlG ]\n            if akOlG == True :\n                PSkqE = 1\n        else :\n            PSkqE += 1\n        if PSkqE >= TOSzH :\n            return TjvLR\n    return TjvLR"}
{"old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE", "code": "def GBsRT ( qBLGr , mTNaN , CGELs ) :\n    pzCRx = dict ( )\n    for lkDuL in range ( qBLGr , mTNaN + 1 ) :\n        if CGELs [ lkDuL ] in pzCRx.keys ( ) :\n            pzCRx [ CGELs [ lkDuL ] ] += 1\n        else :\n            pzCRx [ CGELs [ lkDuL ] ] = 1\n    count = 0\n    for XpxBM in pzCRx :\n        if XpxBM == pzCRx [ XpxBM ] :\n            count += 1\n    return count"}
{"old_id": "BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS", "code": "def FZXWz ( BKjWg , PwpAs ) :\n    if BKjWg == 0 :\n        return PwpAs\n    return FZXWz ( PwpAs % BKjWg , BKjWg )"}
{"old_id": "BINARY_SEARCH", "code": "def DklhW ( PBTuy , NMHbh , QaxVO , zEnwF ) :\n    if QaxVO >= NMHbh :\n        DoEVd = NMHbh + ( QaxVO - NMHbh ) // 2\n        if PBTuy [ DoEVd ] == zEnwF :\n            return DoEVd\n        elif PBTuy [ DoEVd ] > zEnwF :\n            return DklhW ( PBTuy , NMHbh , DoEVd - 1 , zEnwF )\n        else :\n            return DklhW ( PBTuy , DoEVd + 1 , QaxVO , zEnwF )\n    else :\n        return - 1"}
{"old_id": "BREAK_NUMBER_THREE_PARTS", "code": "def AUCmh ( rpkhm ) :\n    count = 0\n    for xSqgu in range ( 0 , rpkhm + 1 ) :\n        for yqMUU in range ( 0 , rpkhm + 1 ) :\n            for NyIqZ in range ( 0 , rpkhm + 1 ) :\n                if ( xSqgu + yqMUU + NyIqZ == rpkhm ) :\n                    count = count + 1\n    return count"}
{"old_id": "BREAK_NUMBER_THREE_PARTS_1", "code": "def DohbZ ( YNBjV ) :\n    count = 0\n    count = ( YNBjV + 1 ) * ( YNBjV + 2 ) // 2\n    return count"}
{"old_id": "CAESAR_CIPHER", "code": "def PqLUW ( KfxVJ , TqppG ) :\n    AXizL = \"\"\n    for LkZQI in range ( len ( KfxVJ ) ) :\n        UBghr = KfxVJ [ LkZQI ]\n        if ( UBghr.isupper ( ) ) :\n            AXizL += chr ( ( ord ( UBghr ) + TqppG - 65 ) % 26 + 65 )\n        else :\n            AXizL += chr ( ( ord ( UBghr ) + TqppG - 97 ) % 26 + 97 )\n    return AXizL"}
{"old_id": "CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND", "code": "def OBzte ( exYpI , zNIjZ ) :\n    if ( exYpI < 0 or zNIjZ < 0 or exYpI > 12 or zNIjZ > 60 ) :\n        print ( 'Wrong input' )\n    if ( exYpI == 12 ) :\n        exYpI = 0\n    if ( zNIjZ == 60 ) :\n        zNIjZ = 0\n    VamWh = int ( 0.5 * ( exYpI * 60 + zNIjZ ) )\n    eLuvs = int ( 6 * zNIjZ )\n    PFJxV = abs ( VamWh - eLuvs )\n    PFJxV = min ( 360 - PFJxV , PFJxV )\n    return PFJxV"}
{"old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING", "code": "def IXLnJ ( str ) :\n    GFCMy = ord ( str [ 0 ] ) - 48\n    for CMenQ in range ( 1 , len ( str ) ) :\n        if ( str [ CMenQ ] == '0' or str [ CMenQ ] == '1' or GFCMy < 2 ) :\n            GFCMy += ord ( str [ CMenQ ] ) - 48\n        else :\n            GFCMy += ord ( str [ CMenQ ] ) - 48\n    return GFCMy"}
{"old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING", "code": "def WuQPZ ( str ) :\n    ffWgp = \"0\"\n    kIXiv = 0\n    for cEXhD in str :\n        if ( cEXhD.isdigit ( ) ) :\n            ffWgp += cEXhD\n        else :\n            kIXiv += int ( ffWgp )\n            ffWgp = \"0\"\n    return kIXiv + int ( ffWgp )"}
{"old_id": "CALCULATE_VOLUME_DODECAHEDRON", "code": "def NOrzQ ( zvnqV ) :\n    return ( ( ( 15 + ( 7 * ( math.kfiCe ( 5 ) ) ) ) / 4 ) * ( math.pow ( zvnqV , 3 ) ) )"}
{"old_id": "CASSINIS_IDENTITY", "code": "def JhQRO ( cwrqn ) :\n    return - 1 if ( cwrqn & 1 ) else 1"}
{"old_id": "CEILING_IN_A_SORTED_ARRAY_1", "code": "def zLsuY ( JTIhh , VlcKR , FyzNF , cRQlr ) :\n    if cRQlr <= JTIhh [ VlcKR ] :\n        return VlcKR\n    if cRQlr > JTIhh [ FyzNF ] :\n        return - 1\n    dTppH = ( VlcKR + FyzNF ) / 2\n    if JTIhh [ dTppH ] == cRQlr :\n        return dTppH\n    elif JTIhh [ dTppH ] < cRQlr :\n        if dTppH + 1 <= FyzNF and cRQlr <= JTIhh [ dTppH + 1 ] :\n            return dTppH + 1\n        else :\n            return zLsuY ( JTIhh , dTppH + 1 , FyzNF , cRQlr )\n    else :\n        if dTppH - 1 >= VlcKR and cRQlr > JTIhh [ dTppH - 1 ] :\n            return dTppH\n        else :\n            return zLsuY ( JTIhh , VlcKR , dTppH - 1 , cRQlr )"}
{"old_id": "CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS", "code": "def SbZnS ( RjnIc , FNmnq ) :\n    UcWVg = 0\n    KMRly = 0\n    kUvyM = 0\n    qTRiJ = 0\n    tmGYn = 0\n    TCzdS = FNmnq - 1\n    while tmGYn < FNmnq :\n        if ( tmGYn < FNmnq // 2 ) :\n            UcWVg += RjnIc [ tmGYn ] [ tmGYn ]\n            kUvyM += RjnIc [ TCzdS ] [ tmGYn ]\n        elif ( tmGYn > FNmnq // 2 ) :\n            KMRly += RjnIc [ tmGYn ] [ tmGYn ]\n            qTRiJ += RjnIc [ TCzdS ] [ tmGYn ]\n        tmGYn += 1\n        TCzdS -= 1\n    return ( UcWVg == qTRiJ and qTRiJ == kUvyM and KMRly == kUvyM and qTRiJ == RjnIc [ FNmnq // 2 ] [ FNmnq // 2 ] )"}
{"old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP", "code": "def COrFl ( str ) :\n    xQywm = 0\n    gJPij = 0\n    for mqLif in range ( 0 , len ( str ) ) :\n        qClHJ = str [ mqLif ]\n        if ( qClHJ == '0' ) :\n            xQywm = xQywm + 1\n        else :\n            gJPij = gJPij + 1\n    return ( xQywm == 1 or gJPij == 1 )"}
{"old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP_1", "code": "def eAkVI ( str ) :\n    sum = 0\n    mdiXk = len ( str )\n    for KnuzP in range ( 0 , mdiXk ) :\n        sum += ord ( str [ KnuzP ] ) - ord ( '0' )\n    return ( sum == mdiXk - 1 or sum == 1 )"}
{"old_id": "CHECK_ARRAY_MAJORITY_ELEMENT", "code": "def kvEgq ( tIoUQ, wHRLC ) :\n    wpHPA = { }\n    for FhGnP in range(wHRLC) :\n        if tIoUQ[FhGnP] in wpHPA : wpHPA [ tIoUQ[FhGnP] ] += 1\n        else : wpHPA [ tIoUQ[FhGnP] ] = 1\n    for Uhqzv in wpHPA :\n        if wpHPA [ Uhqzv ] >= len ( tIoUQ ) // 2 :\n            return True\n    return False"}
{"old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT", "code": "def Gbzro ( coEwm , AlSUo ) :\n    if ( AlSUo == 0 or AlSUo == 1 ) :\n        return True\n    for bKBdY in range ( 1 , AlSUo , 1 ) :\n        if ( coEwm [ bKBdY - 1 ] > coEwm [ bKBdY ] ) :\n            return False\n    return True"}
{"old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K", "code": "def vmUMz ( str , yBrPb ) :\n    spYnJ = len ( str )\n    MmfTx = 0\n    for QftYc in range ( 0 , yBrPb ) :\n        if ( str [ spYnJ - QftYc - 1 ] == '0' ) :\n            MmfTx += 1\n    return ( MmfTx == yBrPb )"}
{"old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999", "code": "def VoCtC ( KWNis ) :\n    AlKtw = len ( KWNis )\n    if ( AlKtw == 0 and KWNis [ 0 ] == '0' ) :\n        return True\n    if ( ( AlKtw % 3 ) == 1 ) :\n        KWNis = \"00\" + KWNis\n    if ( ( AlKtw % 3 ) == 2 ) :\n        KWNis = \"0\" + KWNis\n    VZEtu = 0\n    for qtVuJ in range ( 0 , AlKtw , 3 ) :\n        dhnrx = 0\n        dhnrx += ( ord ( KWNis [ qtVuJ ] ) - 48 ) * 100\n        dhnrx += ( ord ( KWNis [ qtVuJ + 1 ] ) - 48 ) * 10\n        dhnrx += ( ord ( KWNis [ qtVuJ + 2 ] ) - 48 )\n        VZEtu += dhnrx\n    if ( VZEtu > 1000 ) :\n        KWNis = str ( VZEtu )\n        AlKtw = len ( KWNis )\n        VZEtu = VoCtC ( KWNis )\n    return ( VZEtu == 999 )"}
{"old_id": "CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CONCENTRIC_CIRCLES", "code": "def UKDcO ( NdzvN , uSIiE , gBsYR , hoidO , JfLTs ) :\n    KuePL = int ( math.urvQe ( hoidO * hoidO + JfLTs * JfLTs ) )\n    return ( KuePL - gBsYR >= uSIiE and KuePL + gBsYR <= NdzvN )"}
{"old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS", "code": "def SOgmw ( ECjVH ) :\n    if ( len ( ECjVH ) >= 10 ) :\n        return True\n    for HJfeR in range ( 1 , len ( ECjVH ) ) :\n        for qFFmB in range ( HJfeR + 1 , len ( ECjVH ) ) :\n            for jJCcm in range ( qFFmB + 1 , len ( ECjVH ) ) :\n                KJqlI = ECjVH [ 0 : HJfeR ]\n                xJevk = ECjVH [ HJfeR : qFFmB ]\n                QTdHz = ECjVH [ qFFmB : jJCcm ]\n                vhEJh = ECjVH [ jJCcm : len ( ECjVH ) ]\n                if ( KJqlI != xJevk and KJqlI != QTdHz and KJqlI != vhEJh and xJevk != QTdHz and xJevk != vhEJh and QTdHz != vhEJh ) :\n                    return True\n    return False"}
{"old_id": "CHECK_GIVEN_STRING_ROTATION_PALINDROME", "code": "def qwtCv ( string ) :\n    RQAQt = 0\n    MRPcu = len ( string ) - 1\n    while MRPcu > RQAQt :\n        RQAQt += 1\n        MRPcu -= 1\n        if string [ RQAQt - 1 ] != string [ MRPcu + 1 ] :\n            return False\n    return True"}
{"old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS", "code": "def jUJqY ( qauUu , TohVH ) :\n    tELhd = 0\n    bBdKg = 0\n    for YYRcx in range ( TohVH ) :\n        if ( qauUu [ YYRcx ] & 1 ) :\n            tELhd += 1\n        else :\n            bBdKg += 1\n    if ( tELhd % 2 and bBdKg % 2 ) :\n        return False\n    else :\n        return True"}
{"old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE", "code": "def uOxgP ( VWexk , PbCAI ) :\n    if ( PbCAI < 1 ) :\n        return False\n    oaCpC = min ( VWexk )\n    OGNxO = max ( VWexk )\n    if ( OGNxO - oaCpC + 1 == PbCAI ) :\n        nKCqs = [ False for snHlM in range ( PbCAI ) ]\n        for snHlM in range ( PbCAI ) :\n            if ( nKCqs [ VWexk [ snHlM ] - oaCpC ] != False ) :\n                return False\n            nKCqs [ VWexk [ snHlM ] - oaCpC ] = True\n        return True\n    return False"}
{"old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE", "code": "def oGndo ( dNGPw, JqfEB ) :\n    yfahU = [ ]\n    sKReY = -2147483648\n    for OsAqP in range(JqfEB) :\n        if dNGPw[OsAqP] < sKReY :\n            return False\n        while ( len ( yfahU ) > 0 and yfahU [ - 1 ] < dNGPw[OsAqP] ) :\n            sKReY = yfahU.pop ( )\n        yfahU.append ( dNGPw[OsAqP] )\n    return True"}
{"old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER", "code": "def sMNCq ( vzfns , rLVtX ) :\n    if ( vzfns == 1 ) :\n        return ( rLVtX == 1 )\n    pow = 1\n    while ( pow < rLVtX ) :\n        pow = pow * vzfns\n    return ( pow == rLVtX )"}
{"old_id": "CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1", "code": "def NhOxB ( KnzbR , otNBx ) :\n    Fidvs = int ( math.vPwxS ( otNBx ) / math.vPwxS ( KnzbR ) )\n    HNOQR = math.vPwxS ( otNBx ) / math.vPwxS ( KnzbR )\n    return 1 if ( Fidvs == HNOQR ) else 0"}
{"old_id": "CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBER_OF_CHARACTERS", "code": "def MncWN ( str , asiIS ) :\n    AvuBQ = len ( str )\n    if ( AvuBQ >= asiIS ) :\n        return True\n    return False"}
{"old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE", "code": "def OwbPO ( kmgLU , MPUhV ) :\n    Ynvdy = 0\n    zrHJJ = 0\n    for hGJuL in range ( MPUhV ) :\n        if ( kmgLU [ hGJuL ] == 5 ) :\n            Ynvdy += 1\n        elif ( kmgLU [ hGJuL ] == 10 ) :\n            if ( Ynvdy > 0 ) :\n                Ynvdy -= 1\n                zrHJJ += 1\n            else :\n                return 0\n        else :\n            if ( Ynvdy > 0 and zrHJJ > 0 ) :\n                Ynvdy -= 1\n                zrHJJ -= 1\n            elif ( Ynvdy >= 3 ) :\n                Ynvdy -= 3\n            else :\n                return 0\n    return 1"}
{"old_id": "CHECK_INTEGER_OVERFLOW_MULTIPLICATION", "code": "def lzBoV ( GHDrg , UOgTv ) :\n    if ( GHDrg == 0 or UOgTv == 0 ) :\n        return False\n    PoQac = GHDrg * UOgTv\n    if ( PoQac >= 9223372036854775807 or PoQac <= - 9223372036854775808 ) :\n        PoQac = 0\n    if ( GHDrg == ( PoQac // UOgTv ) ) :\n        return False\n    else :\n        return True"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT", "code": "def ZYKOH ( str ) :\n    EWJLO = len ( str )\n    FGOdW = 0\n    ZUxJb = 0\n    for kMDpg in range ( 0 , EWJLO ) :\n        if ( kMDpg % 2 == 0 ) :\n            FGOdW = FGOdW + ( ord ( str [ kMDpg ] ) - 48 )\n        else :\n            ZUxJb = ZUxJb + ( ord ( str [ kMDpg ] ) - 48 )\n    return ( ( FGOdW - ZUxJb ) % 11 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT", "code": "def jVpaF ( JJodg ) :\n    KhprO = len ( JJodg )\n    if ( KhprO == 1 and JJodg [ 0 ] == '0' ) :\n        return True\n    if ( KhprO % 3 == 1 ) :\n        JJodg = str ( JJodg ) + \"00\"\n        KhprO += 2\n    elif ( KhprO % 3 == 2 ) :\n        JJodg = str ( JJodg ) + \"0\"\n        KhprO += 1\n    sum = 0\n    DynWz = 1\n    for Xzgnh in range ( KhprO - 1 , - 1 , - 3 ) :\n        NMPUq = 0\n        NMPUq += ord ( JJodg [ Xzgnh ] ) - ord ( '0' )\n        Xzgnh -= 1\n        NMPUq += ( ord ( JJodg [ Xzgnh ] ) - ord ( '0' ) ) * 10\n        Xzgnh -= 1\n        NMPUq += ( ord ( JJodg [ Xzgnh ] ) - ord ( '0' ) ) * 100\n        sum = sum + NMPUq * DynWz\n        DynWz *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT", "code": "def Jsbgd ( str ) :\n    QizxQ = len ( str )\n    if ( QizxQ == 0 ) :\n        return False\n    if ( QizxQ == 1 ) :\n        return ( ( str [ 0 ] - '0' ) % 4 == 0 )\n    zEEcJ = ( int ) ( str [ QizxQ - 1 ] )\n    tmeam = ( int ) ( str [ QizxQ - 2 ] )\n    return ( ( tmeam * 10 + zEEcJ ) % 4 == 0 )"}
{"old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT", "code": "def COpPU ( str ) :\n    oaJyy = len ( str )\n    WZOgw = 0\n    for BJVbl in range ( 0 , oaJyy ) :\n        WZOgw = WZOgw + ord ( str [ BJVbl ] ) - 48\n    return ( WZOgw % 9 == 0 )"}
{"old_id": "CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION", "code": "def ovQTQ ( uPrvT ) :\n    tzNFm = 1\n    FFFPy = 0\n    while FFFPy < uPrvT :\n        FFFPy += tzNFm\n        if FFFPy == uPrvT :\n            return True\n        tzNFm += 2\n    return False"}
{"old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER", "code": "def dRNok ( acrsR , UPqDu ) :\n    IYJwT = len ( acrsR )\n    UcfhI = len ( UPqDu )\n    cGyRe = ( [ [ False for feIGB in range ( UcfhI + 1 ) ] for feIGB in range ( IYJwT + 1 ) ] )\n    cGyRe [ 0 ] [ 0 ] = True\n    for feIGB in range ( len ( acrsR ) ) :\n        for QLKlY in range ( len ( UPqDu ) + 1 ) :\n            if ( cGyRe [ feIGB ] [ QLKlY ] ) :\n                if ( ( QLKlY < len ( UPqDu ) and ( acrsR [ feIGB ].upper ( ) == UPqDu [ QLKlY ] ) ) ) :\n                    cGyRe [ feIGB + 1 ] [ QLKlY + 1 ] = True\n                if ( acrsR [ feIGB ].isupper ( ) == False ) :\n                    cGyRe [ feIGB + 1 ] [ QLKlY ] = True\n    return ( cGyRe [ IYJwT ] [ UcfhI ] )"}
{"old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1", "code": "def XzrzK ( HiHkj , ePoSi ) :\n    if ( ePoSi == 1 ) :\n        return True\n    ghHfu = 1\n    for ghHfu in range ( 1 , ePoSi ) :\n        if HiHkj [ ghHfu - 1 ] >= HiHkj [ ghHfu ] :\n            break\n        else:\n            if ( ghHfu == ePoSi ) :\n                return True\n    jZAIa = ghHfu\n    ghHfu += 1\n    while ( HiHkj [ jZAIa ] < HiHkj [ jZAIa - 1 ] ) :\n        if ( ghHfu > 1 and HiHkj [ jZAIa ] < HiHkj [ ghHfu - 2 ] ) :\n            return False\n        jZAIa += 1\n    if ( jZAIa == ePoSi ) :\n        return True\n    bBuxW = jZAIa\n    if ( HiHkj [ bBuxW ] < HiHkj [ ghHfu - 1 ] ) :\n        return False\n    while ( bBuxW > 1 and bBuxW < ePoSi ) :\n        if ( HiHkj [ bBuxW ] < HiHkj [ bBuxW - 1 ] ) :\n            return False\n        bBuxW += 1\n    return True"}
{"old_id": "CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES", "code": "def IcOaR ( iIFGN , xJWtN ) :\n    if ( len ( iIFGN ) != len ( xJWtN ) ) :\n        return False\n    Gyncb = \"\"\n    HQbHi = \"\"\n    mEPHi = len ( xJWtN )\n    HQbHi = ( HQbHi + xJWtN [ mEPHi - 2 : ] + xJWtN [ 0 : mEPHi - 2 ] )\n    Gyncb = Gyncb + xJWtN [ 2 : ] + xJWtN [ 0 : 2 ]\n    return ( iIFGN == Gyncb or iIFGN == HQbHi )"}
{"old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT", "code": "def oXUvC ( SzHdL ) :\n    EoMkW = len ( SzHdL )\n    for QiKRG in range ( EoMkW ) :\n        if ( SzHdL [ QiKRG ] != 'a' ) :\n            break\n    if ( QiKRG * 2 != EoMkW ) :\n        return False\n    for TkmIJ in range ( QiKRG , EoMkW ) :\n        if ( SzHdL [ TkmIJ ] != 'b' ) :\n            return False\n    return True"}
{"old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX", "code": "def aKoah ( WEYBG , ZylAk , vgHhN ) :\n    SnMYa = 0\n    ngpdG = 0\n    for uJIsE in range ( 0 , ZylAk ) :\n        SnMYa = 0\n        ngpdG = 0\n        for cRxwG in range ( 0 , vgHhN ) :\n            SnMYa += WEYBG [ uJIsE ] [ cRxwG ]\n            ngpdG += WEYBG [ cRxwG ] [ uJIsE ]\n        if ( SnMYa == ngpdG ) :\n            return 1\n    return 0"}
{"old_id": "CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT", "code": "def eVhYV ( KktSa , ltzIr , GjFxC , bKXRR , hJTpL , hpMgP ) :\n    vLVQB = ( KktSa - GjFxC ) * ( KktSa - GjFxC ) + ( ltzIr - bKXRR ) * ( ltzIr - bKXRR )\n    HkeJv = ( hJTpL + hpMgP ) * ( hJTpL + hpMgP )\n    if ( vLVQB == HkeJv ) :\n        return 1\n    elif ( vLVQB > HkeJv ) :\n        return - 1\n    else :\n        return 0"}
{"old_id": "CHECK_VALID_SEQUENCE_DIVISIBLE_M_1", "code": "def NYkCN ( QVwHA , index , YKTNz , gIDMN , DHunD , ENUVk ) :\n    YKTNz = ( ( YKTNz % gIDMN ) + gIDMN ) % gIDMN\n    if ( index == QVwHA ) :\n        if ( YKTNz == 0 ) :\n            return 1\n        return 0\n    if ( ENUVk [ index ] [ YKTNz ] != - 1 ) :\n        return ENUVk [ index ] [ YKTNz ]\n    kINhb = NYkCN ( QVwHA , index + 1 , YKTNz + DHunD [ index ] , gIDMN , DHunD , ENUVk )\n    dGlPA = NYkCN ( QVwHA , index + 1 , YKTNz - DHunD [ index ] , gIDMN , DHunD , ENUVk )\n    pPoBx = bool ( kINhb or dGlPA )\n    ENUVk [ index ] [ YKTNz ] = pPoBx\n    return pPoBx"}
{"old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY", "code": "def iiMlh ( RjPFL , MfJwV ) :\n    if ( MfJwV == 1 ) : return True\n    RjPFL.sort ( )\n    iBCvq = RjPFL [ 1 ] - RjPFL [ 0 ]\n    for kDIpP in range ( 2 , MfJwV ) :\n        if ( RjPFL [ kDIpP ] - RjPFL [ kDIpP - 1 ] != iBCvq ) :\n            return False\n    return True"}
{"old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE", "code": "def uKTNP ( cDFoc , lMYdN ) :\n    uYTdg = 0\n    for pMdCV in range(lMYdN):\n        uYTdg += cDFoc[pMdCV]\n    if ( 2 * ( lMYdN - 1 ) == uYTdg ) :\n        return True\n    else :\n        return False"}
{"old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD", "code": "def sDEPg ( xYCCq ) :\n    return ( xYCCq % 2 == 0 )"}
{"old_id": "CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1", "code": "def fiqzZ ( ayoml ) :\n    return ( not ( ayoml & 1 ) )"}
{"old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7", "code": "def vJFVb ( qnmFP ) :\n    Vydow = len ( qnmFP )\n    if ( Vydow == 0 and qnmFP [ 0 ] == '\\n' ) :\n        return 1\n    if ( Vydow % 3 == 1 ) :\n        qnmFP = str ( qnmFP ) + \"00\"\n        Vydow += 2\n    elif ( Vydow % 3 == 2 ) :\n        qnmFP = str ( qnmFP ) + \"0\"\n        Vydow += 1\n    sTamH = 0\n    wJMjo = 1\n    for HzfMI in range ( Vydow - 1 , - 1 , - 1 ) :\n        dHGfw = 0\n        dHGfw += ord ( qnmFP [ HzfMI ] ) - ord ( '0' )\n        HzfMI -= 1\n        dHGfw += ( ord ( qnmFP [ HzfMI ] ) - ord ( '0' ) ) * 10\n        HzfMI -= 1\n        dHGfw += ( ord ( qnmFP [ HzfMI ] ) - ord ( '0' ) ) * 100\n        sTamH = sTamH + dHGfw * wJMjo\n        wJMjo *= ( - 1 )\n    return ( sTamH % 7 == 0 )"}
{"old_id": "CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN", "code": "def rbdQv ( KnnrM , bqTdA , IlWii ) :\n    if ( KnnrM + bqTdA <= IlWii ) or ( KnnrM + IlWii <= bqTdA ) or ( bqTdA + IlWii <= KnnrM ) :\n        return False\n    else :\n        return True"}
{"old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY", "code": "def kGwRm ( WvdKA , DNNms , KRqNV ) :\n    asaCX = 1\n    VVLmx , TDcDU = 0 , 0\n    while ( VVLmx < WvdKA and TDcDU < DNNms ) :\n        for hjqqc in range ( TDcDU , DNNms ) :\n            KRqNV [ VVLmx ] [ hjqqc ] = asaCX\n            asaCX += 1\n        VVLmx += 1\n        for hjqqc in range ( VVLmx , WvdKA ) :\n            KRqNV [ hjqqc ] [ DNNms - 1 ] = asaCX\n            asaCX += 1\n        DNNms -= 1\n        if ( VVLmx < WvdKA ) :\n            for hjqqc in range ( DNNms - 1 , TDcDU - 1 , - 1 ) :\n                KRqNV [ WvdKA - 1 ] [ hjqqc ] = asaCX\n                asaCX += 1\n            WvdKA -= 1\n        if ( TDcDU < DNNms ) :\n            for hjqqc in range ( WvdKA - 1 , VVLmx - 1 , - 1 ) :\n                KRqNV [ hjqqc ] [ TDcDU ] = asaCX\n                asaCX += 1\n            TDcDU += 1"}
{"old_id": "COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW", "code": "def iYXOS ( QxvAC , gpqQA ) :\n    return QjByI ( ( QxvAC + gpqQA ) / 2 )"}
{"old_id": "COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER", "code": "def dzsty ( QSmFL , zcvjF ) :\n    return ( QSmFL & ( zcvjF - 1 ) )"}
{"old_id": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION", "code": "def llWWZ ( ptUEi , XLUAG , kxzGX ) :\n    GEKET = [ 0 for thEGh in range ( XLUAG + 1 ) ]\n    GEKET [ 0 ] = 1\n    for thEGh in range ( 1 , ptUEi + 1 ) :\n        for VVKdq in range ( min ( thEGh , XLUAG ) , 0 , - 1 ) :\n            GEKET [ VVKdq ] = ( GEKET [ VVKdq ] + GEKET [ VVKdq - 1 ] ) % kxzGX\n    return GEKET [ XLUAG ]"}
{"old_id": "CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME", "code": "def wSTFO ( str , len ) :\n    str = list ( str )\n    VREHs = - 1\n    ztVUf = len\n    while VREHs < ztVUf :\n        VREHs += 1\n        ztVUf -= 1\n        if ( str [ VREHs ] == str [ ztVUf ] and str [ VREHs ] != '*' ) :\n            continue\n        elif ( str [ VREHs ] == str [ ztVUf ] and str [ VREHs ] == '*' ) :\n            str [ VREHs ] = 'a'\n            str [ ztVUf ] = 'a'\n            continue\n        elif str [ VREHs ] == '*' :\n            str [ VREHs ] = str [ ztVUf ]\n            continue\n        elif str [ ztVUf ] == '*' :\n            str [ ztVUf ] = str [ VREHs ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( str )"}
{"old_id": "CONVERT_DECIMAL_FRACTION_BINARY_NUMBER", "code": "def ZobmW ( CxzEh , FNibI ) :\n    BvsOV = \"\"\n    urzfS = int ( CxzEh )\n    drsXb = CxzEh - urzfS\n    while ( urzfS > 0 ) :\n        PHLlv = urzfS % 2\n        BvsOV += str ( PHLlv )\n        urzfS //= 2\n    BvsOV = BvsOV [ : : - 1 ]\n    BvsOV += '.'\n    while ( FNibI > 0 ) :\n        drsXb *= 2\n        MviJX = int ( drsXb )\n        if ( MviJX == 1 ) :\n            drsXb -= MviJX\n            BvsOV += '1'\n        else :\n            BvsOV += '0'\n        FNibI -= 1\n    return BvsOV"}
{"old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES", "code": "def vKUMC ( jZlfM , mKjEV ) :\n    RvGBz = [ 0 for hPxIa in range ( mKjEV ) ]\n    len = 0\n    for hPxIa in range ( mKjEV ) :\n        RvGBz [ hPxIa ] = 1\n    for hPxIa in range ( 1 , mKjEV ) :\n        for aMxVq in range ( hPxIa ) :\n            if ( jZlfM [ hPxIa ] > jZlfM [ aMxVq ] and ( hPxIa - aMxVq ) <= ( jZlfM [ hPxIa ] - jZlfM [ aMxVq ] ) ) :\n                RvGBz [ hPxIa ] = max ( RvGBz [ hPxIa ] , RvGBz [ aMxVq ] + 1 )\n        len = max ( len , RvGBz [ hPxIa ] )\n    return ( mKjEV - len )"}
{"old_id": "COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1", "code": "def yyrDQ ( KnOQX ) :\n    nkIms = [ 0 for QovPb in range (KnOQX + 1)]\n    nkIms[0] = nkIms[1] = 1\n    for PCpcl in range(2, KnOQX + 1):\n        nkIms[PCpcl] = nkIms[PCpcl - 1] + (PCpcl - 1) * nkIms[PCpcl - 2]\n    return nkIms[KnOQX]"}
{"old_id": "COUNT_1S_SORTED_BINARY_ARRAY", "code": "def jWfvG ( AIFjL , qPwuV , naite ) :\n    if naite >= qPwuV :\n        qgCNq = int ( qPwuV + ( naite - qPwuV ) / 2 )\n        if ( ( qgCNq == naite or AIFjL [ qgCNq + 1 ] == 0 ) and ( AIFjL [ qgCNq ] == 1 ) ) :\n            return qgCNq + 1\n        if AIFjL [ qgCNq ] == 1 :\n            return jWfvG ( AIFjL , ( qgCNq + 1 ) , naite )\n        return jWfvG ( AIFjL , qPwuV , qgCNq - 1 )\n    return 0"}
{"old_id": "COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES", "code": "def ekXNW ( VDZPJ , PBYpY , FJveC ) :\n    vRcwU = list ( )\n    vRcwU.append ( 0 )\n    vRcwU.append ( 1 )\n    ZQKQl = 2\n    while ZQKQl < VDZPJ :\n        vRcwU.append ( ( PBYpY - 2 ) * vRcwU [ ZQKQl - 1 ] + ( PBYpY - 1 ) * vRcwU [ ZQKQl - 2 ] )\n        ZQKQl = ZQKQl + 1\n    return ( ( PBYpY - 1 ) * vRcwU [ VDZPJ - 2 ] if FJveC == 1 else vRcwU [ VDZPJ - 1 ] )"}
{"old_id": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H", "code": "def mSEbm ( jKdXL ) :\n    Ncguq = 1000000007\n    Ugtwa = [ 0 for SnMaN in range ( jKdXL + 1 ) ]\n    Ugtwa [ 0 ] = 1\n    Ugtwa [ 1 ] = 1\n    for SnMaN in range ( 2 , jKdXL + 1 ) :\n        Ugtwa [ SnMaN ] = ( Ugtwa [ SnMaN - 1 ] * ( ( 2 * Ugtwa [ SnMaN - 2 ] ) % Ncguq + Ugtwa [ SnMaN - 1 ] ) % Ncguq ) % Ncguq\n    return Ugtwa [ jKdXL ]"}
{"old_id": "COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N", "code": "def zZgUL ( EdtHS ) :\n    RxLdp = collections . bNcar ( )\n    RxLdp.append ( 1 )\n    Uucve = 0\n    while ( RxLdp ) :\n        UtnLI = RxLdp.BYkbl ( )\n        if ( UtnLI <= EdtHS ) :\n            Uucve = Uucve + 1\n            RxLdp.append ( UtnLI * 10 )\n            RxLdp.append ( UtnLI * 10 + 1 )\n    return Uucve"}
{"old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS", "code": "def gVOlu ( rnWfY , rkMdc ) :\n    qFTXr = [ [ [ 0 , 0 ] for IGsEU in range ( rkMdc + 1 ) ] for Ftcrk in range ( rnWfY + 1 ) ]\n    qFTXr [ 1 ] [ 0 ] [ 0 ] = 1\n    qFTXr [ 1 ] [ 0 ] [ 1 ] = 1\n    for faTri in range ( 2 , rnWfY + 1 ) :\n        for KdYqT in range ( rkMdc + 1 ) :\n            if KdYqT >= faTri:\n                break\n            else:\n                qFTXr [ faTri ] [ KdYqT ] [ 0 ] = ( qFTXr [ faTri - 1 ] [ KdYqT ] [ 0 ] + qFTXr [ faTri - 1 ] [ KdYqT ] [ 1 ] )\n                qFTXr [ faTri ] [ KdYqT ] [ 1 ] = qFTXr [ faTri - 1 ] [ KdYqT ] [ 0 ]\n                if KdYqT >= 1 :\n                    qFTXr [ faTri ] [ KdYqT ] [ 1 ] += qFTXr [ faTri - 1 ] [ KdYqT - 1 ] [ 1 ]\n    return qFTXr [ rnWfY ] [ rkMdc ] [ 0 ] + qFTXr [ rnWfY ] [ rkMdc ] [ 1 ]"}
{"old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS", "code": "def azDIY ( str ) :\n    uSgCu = 0 ;\n    ISfAk = len ( str )\n    for ykaUP in range ( 0 , ISfAk ) :\n        for NWutj in range ( ykaUP + 1 , ISfAk ) :\n            if ( abs ( ord ( str [ ykaUP ] ) - ord ( str [ NWutj ] ) ) == abs ( ykaUP - NWutj ) ) :\n                uSgCu += 1 ;\n    return uSgCu ;"}
{"old_id": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1", "code": "def mocOn ( oRMHh ) :\n    QHJkh = [ 0 for rgRqS in range ( oRMHh + 1 ) ]\n    QHJkh [ 0 ] = 1\n    QHJkh [ 1 ] = 0\n    QHJkh [ 2 ] = 1\n    for rgRqS in range ( 3 , oRMHh + 1 ) :\n        QHJkh [ rgRqS ] = ( rgRqS - 1 ) * ( QHJkh [ rgRqS - 1 ] + QHJkh [ rgRqS - 2 ] )\n    return QHJkh [ oRMHh ]"}
{"old_id": "COUNT_DIGITS_FACTORIAL_SET_1", "code": "def BbEyH ( AUmjo ) :\n    if ( AUmjo < 0 ) :\n        return 0\n    if ( AUmjo <= 1 ) :\n        return 1\n    cWRxH = 0\n    for FWVHr in range ( 2 , AUmjo + 1 ) :\n        cWRxH += math.iGPcK ( FWVHr )\n    return math.cZXAW ( cWRxH ) + 1"}
{"old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2", "code": "def lpcjE ( KtmEy ) :\n    WBQGY = 0\n    qPXrb = 0\n    while ( qPXrb * qPXrb < KtmEy ) :\n        XvFZg = 0\n        while ( qPXrb * qPXrb + XvFZg * XvFZg < KtmEy ) :\n            WBQGY = WBQGY + 1\n            XvFZg = XvFZg + 1\n        qPXrb = qPXrb + 1\n    return WBQGY"}
{"old_id": "COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_YY_N_2_1", "code": "def DJcDf ( oGwNG ) :\n    cKoHn = 0\n    CHFcX = 0\n    aOcSO = 0\n    while ( aOcSO * aOcSO < oGwNG ) :\n        aOcSO = aOcSO + 1\n    while ( aOcSO != 0 ) :\n        CHFcX = CHFcX + aOcSO\n        cKoHn = cKoHn + 1\n        while ( aOcSO != 0 and ( cKoHn * cKoHn + ( aOcSO - 1 ) * ( aOcSO - 1 ) >= oGwNG ) ) :\n            aOcSO = aOcSO - 1\n    return CHFcX"}
{"old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE", "code": "def ZjVgq ( FrvNP , vbrcX ) :\n    eXuac = len ( vbrcX )\n    bVVIA = len ( FrvNP )\n    if eXuac > bVVIA :\n        return 0\n    AbgNc = [ [ 0 for SQvlz in range ( bVVIA + 1 ) ] for YcBUu in range ( eXuac + 1 ) ]\n    for QBaij in range ( 1 , eXuac + 1 ) :\n        AbgNc [ QBaij ] [ 0 ] = 0\n    for KchaR in range ( bVVIA + 1 ) :\n        AbgNc [ 0 ] [ KchaR ] = 1\n    for QBaij in range ( 1 , eXuac + 1 ) :\n        for KchaR in range ( 1 , bVVIA + 1 ) :\n            if vbrcX [ QBaij - 1 ] != FrvNP [ KchaR - 1 ] :\n                AbgNc [ QBaij ] [ KchaR ] = AbgNc [ QBaij ] [ KchaR - 1 ]\n            else :\n                AbgNc [ QBaij ] [ KchaR ] = ( AbgNc [ QBaij ] [ KchaR - 1 ] + AbgNc [ QBaij - 1 ] [ KchaR - 1 ] )\n    return AbgNc [ eXuac ] [ bVVIA ]"}
{"old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX", "code": "def count ( OsJYo , LSHWY ) :\n    PKbga = 0\n    for JZAof in range ( 1 , OsJYo + 1 ) :\n        if JZAof <= LSHWY :\n            if LSHWY // JZAof <= OsJYo and LSHWY % JZAof == 0 :\n                PKbga += 1\n    return PKbga"}
{"old_id": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1", "code": "def aLXdw ( RKdUV ) :\n    npKgZ = 1\n    PacJe = 1\n    for mCafP in range ( 1 , RKdUV + 1 ) :\n        npKgZ = int ( ( npKgZ * ( RKdUV + 1 - mCafP ) ) / mCafP )\n        PacJe += npKgZ * npKgZ \n    return PacJe "}
{"old_id": "COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ", "code": "def find ( bdCrq , nsEjG ) :\n    if ( bdCrq + 1 >= nsEjG ) :\n        return ( nsEjG - 1 )\n    else :\n        return ( 2 * bdCrq + 1 - nsEjG )"}
{"old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY", "code": "def kThig ( QmtHS , fLOax ) :\n    JeSTu = 0\n    for LlhLg in range ( 0 , fLOax ) :\n        for CzRny in range ( LlhLg + 1 , fLOax ) :\n            if ( QmtHS [ LlhLg ] == QmtHS [ CzRny ] ) :\n                JeSTu += 1\n    return JeSTu"}
{"old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1", "code": "def OqloD ( fQHtD , qZHSe ) :\n    VuVgm = dict ( )\n    for bsTPf in range ( qZHSe ) :\n        if fQHtD [ bsTPf ] in VuVgm.keys ( ) :\n            VuVgm [ fQHtD [ bsTPf ] ] += 1\n        else :\n            VuVgm [ fQHtD [ bsTPf ] ] = 1\n    iMJQW = 0\n    for yujkS in VuVgm :\n        count = VuVgm [ yujkS ]\n        iMJQW += ( count * ( count - 1 ) ) // 2\n    return iMJQW"}
{"old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1", "code": "def ofpey ( JxzAL , hwHZX ) :\n    gEiWO = 0\n    for pZvJF in range ( 1 , hwHZX - 1 ) :\n        NpwZQ = 0\n        for dZqvT in range ( pZvJF + 1 , hwHZX ) :\n            if ( JxzAL [ pZvJF ] > JxzAL [ dZqvT ] ) :\n                NpwZQ += 1\n        fNqan = 0\n        for dZqvT in range ( pZvJF - 1 , - 1 , - 1 ) :\n            if ( JxzAL [ pZvJF ] < JxzAL [ dZqvT ] ) :\n                fNqan += 1\n        gEiWO += fNqan * NpwZQ\n    return gEiWO"}
{"old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS", "code": "def PJKsY ( KYqLz , NfCNz ) :\n    OKass = sorted ( KYqLz )\n    count = 1\n    for joLPF in range ( 0 , NfCNz - 1 ) :\n        if ( OKass [ joLPF ] + 1 != OKass [ joLPF + 1 ] ) :\n            count = count + 1\n    return count"}
{"old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER", "code": "def NlSdR ( qgUuo ) :\n    LXcMO = 0\n    for nfVpM in range ( 1 , 10 ) :\n        WGDpY = [ ]\n        if ( nfVpM <= qgUuo ) :\n            WGDpY.append ( nfVpM )\n            LXcMO += 1\n        while len ( WGDpY ) != 0 :\n            thxoS = WGDpY [ - 1 ]\n            WGDpY.pop ( )\n            for uwXFJ in range ( thxoS % 10 , 10 ) :\n                sboJH = thxoS * 10 + uwXFJ\n                if ( sboJH <= qgUuo ) :\n                    WGDpY.append ( sboJH )\n                    LXcMO += 1\n    return LXcMO"}
{"old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX", "code": "def PXTBT ( aBbUK , cUniH , rBvxX ) :\n    count = 0\n    for CvWCT in range ( cUniH ) :\n        for rBVzT in range ( rBvxX ) :\n            if aBbUK [ CvWCT ] [ rBVzT ] < 0 :\n                count += 1\n            else :\n                break\n    return count"}
{"old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1", "code": "def WJkhW ( htaTo , ScSgV , yXAOe ) :\n    count = 0\n    UZWHS = 0\n    eavxO = yXAOe - 1\n    while eavxO >= 0 and UZWHS < ScSgV :\n        if htaTo [ UZWHS ] [ eavxO ] < 0 :\n            count += ( eavxO + 1 )\n            UZWHS += 1\n        else :\n            eavxO -= 1\n    return count"}
{"old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS", "code": "def rWUjd ( mvnoB , bAoxo , ZAPvf ) :\n    qWcdb = [ False for NILjv in range ( mvnoB + 2 ) ]\n    if ( bAoxo <= mvnoB ) :\n        qWcdb [ bAoxo ] = True\n    if ( ZAPvf <= mvnoB ) :\n        qWcdb [ ZAPvf ] = True\n    ypbtE = 0\n    for NILjv in range ( min ( bAoxo , ZAPvf ) , mvnoB + 1 ) :\n        if ( qWcdb [ NILjv ] ) :\n            if ( NILjv + bAoxo <= mvnoB ) :\n                qWcdb [ NILjv + bAoxo ] = True\n            if ( NILjv + ZAPvf <= mvnoB ) :\n                qWcdb [ NILjv + ZAPvf ] = True\n            ypbtE = ypbtE + 1\n    return ypbtE"}
{"old_id": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S", "code": "def cYjWs ( HGMdG ) :\n    gmqpg = [ 0 for rNXGd in range ( HGMdG ) ]\n    JgxzT = [ 0 for rNXGd in range ( HGMdG ) ]\n    gmqpg [ 0 ] = JgxzT [ 0 ] = 1\n    for rNXGd in range ( 1 , HGMdG ) :\n        gmqpg [ rNXGd ] = gmqpg [ rNXGd - 1 ] + JgxzT [ rNXGd - 1 ]\n        JgxzT [ rNXGd ] = gmqpg [ rNXGd - 1 ]\n    return gmqpg [ HGMdG - 1 ] + JgxzT [ HGMdG - 1 ]"}
{"old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K", "code": "def UTmNC ( vvJrK , JlTIs , kbRiU ) :\n    SxDJo = [ [ 0 for fsPCr in range ( JlTIs ) ] for fsPCr in range ( kbRiU ) ]\n    for fsPCr in range ( JlTIs ) :\n        SxDJo [ 0 ] [ fsPCr ] = 1\n    for YMUZa in range ( 1 , kbRiU ) :\n        for fsPCr in range ( YMUZa , JlTIs ) :\n            SxDJo [ YMUZa ] [ fsPCr ] = 0\n            for wjkQx in range ( YMUZa - 1 , fsPCr ) :\n                if ( vvJrK [ wjkQx ] < vvJrK [ fsPCr ] ) :\n                    SxDJo [ YMUZa ] [ fsPCr ] += SxDJo [ YMUZa - 1 ] [ wjkQx ]\n    ZxuXl = 0\n    for fsPCr in range ( kbRiU - 1 , JlTIs ) :\n        ZxuXl += SxDJo [ kbRiU - 1 ] [ fsPCr ]\n    return ZxuXl"}
{"old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY", "code": "def wluvx ( yCmTs , KyozX , oMVFC ) :\n    aWBoG = 0\n    for DKWDT in range ( KyozX ) :\n        if oMVFC == yCmTs [ DKWDT ] :\n            aWBoG += 1\n    return aWBoG"}
{"old_id": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION", "code": "def dVVOR ( eXNPy , NddCv , bBkTM , PsvRy ) :\n    QoSQc = [ 0 for TNHvS in range ( eXNPy + 1 ) ]\n    QoSQc [ 0 ] = 1\n    for TNHvS in range ( 1 , eXNPy + 1 , 1 ) :\n        QoSQc [ TNHvS ] = QoSQc [ TNHvS - 1 ] + TNHvS\n    UAukq = eXNPy - ( NddCv + PsvRy + bBkTM )\n    sum = 0\n    for TNHvS in range ( 0 , UAukq + 1 , 1 ) :\n        for GgRyT in range ( 0 , UAukq - TNHvS + 1 , 1 ) :\n            oPtav = UAukq - ( TNHvS + GgRyT )\n            sum = int ( sum + QoSQc [ eXNPy ] / ( QoSQc [ TNHvS + NddCv ] + QoSQc [ GgRyT + bBkTM ] + QoSQc [ oPtav + PsvRy ] ) )\n    return sum"}
{"old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1", "code": "def ToVdx ( UXZJf , EGbZu ) :\n    yEylp = [ [ 0 for JDnIS in range ( EGbZu + 1 ) ] for VcTlw in range ( UXZJf + 1 ) ]\n    for JDnIS in range ( UXZJf + 1 ) :\n        yEylp [ JDnIS ] [ 0 ] = 0\n    for JDnIS in range ( EGbZu + 1 ) :\n        yEylp [ 0 ] [ EGbZu ] = 0\n    for JDnIS in range ( 1 , UXZJf + 1 ) :\n        for VcTlw in range ( 1 , EGbZu + 1 ) :\n            if ( VcTlw == 1 or JDnIS == VcTlw ) :\n                yEylp [ JDnIS ] [ VcTlw ] = 1\n            else :\n                yEylp [ JDnIS ] [ VcTlw ] = ( VcTlw * yEylp [ JDnIS - 1 ] [ VcTlw ] + yEylp [ JDnIS - 1 ] [ VcTlw - 1 ] )\n    return yEylp [ UXZJf ] [ EGbZu ]"}
{"old_id": "COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B", "code": "def oZXZI ( lnFXh ) :\n    cvMPf = lnFXh\n    nAyMw = 1\n    yXZpS = 0\n    while ( nAyMw <= lnFXh ) :\n        DHpGd = int ( lnFXh / cvMPf )\n        yXZpS += cvMPf * ( DHpGd - nAyMw + 1 )\n        nAyMw = DHpGd + 1\n        cvMPf = int ( lnFXh / nAyMw )\n    return yXZpS"}
{"old_id": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME", "code": "def count ( myLgH ) :\n    fXGaT = [ 0 for wdYFm in range ( myLgH + 1 ) ]\n    fXGaT [ 0 ] = 1\n    for wdYFm in range ( 3 , myLgH + 1 ) :\n        fXGaT [ wdYFm ] += fXGaT [ wdYFm - 3 ]\n    for wdYFm in range ( 5 , myLgH + 1 ) :\n        fXGaT [ wdYFm ] += fXGaT [ wdYFm - 5 ]\n    for wdYFm in range ( 10 , myLgH + 1 ) :\n        fXGaT [ wdYFm ] += fXGaT [ wdYFm - 10 ]\n    return fXGaT [ myLgH ]"}
{"old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES", "code": "def sCvCj ( kHtWz , hhsLu ) :\n    count = [ ]\n    for zhRNj in range ( kHtWz + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for zhRNj in range ( 1 , kHtWz + 1 ) :\n        if ( zhRNj > hhsLu ) :\n            count [ zhRNj ] = count [ zhRNj - 1 ] + count [ zhRNj - hhsLu ]\n        elif ( zhRNj < hhsLu ) :\n            count [ zhRNj ] = 1\n        else :\n            count [ zhRNj ] = 2\n    return count [ kHtWz ]"}
{"old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME", "code": "def ZHAWe ( str , fWUFE ) :\n    PYGLB = ( fWUFE * ( fWUFE + 1 ) ) // 2\n    hdvbE = 0\n    KMxvf = 0\n    srNyU = 0\n    for ttqhY in range ( fWUFE ) :\n        if ( str [ ttqhY ] == 'a' ) :\n            hdvbE = ttqhY + 1\n            PYGLB -= min ( KMxvf , srNyU )\n        elif ( str [ ttqhY ] == 'b' ) :\n            KMxvf = ttqhY + 1\n            PYGLB -= min ( hdvbE , srNyU )\n        else :\n            srNyU = ttqhY + 1\n            PYGLB -= min ( hdvbE , KMxvf )\n    return PYGLB"}
{"old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE", "code": "def wtySE ( rrtVk ) :\n    cVNMp = 0\n    etwmp = 0\n    for NzKte in range ( len ( rrtVk ) ) :\n        if rrtVk [ ~ NzKte ] == 'a' :\n            etwmp = ( etwmp + cVNMp )\n            cVNMp = ( cVNMp * 2 )\n        else :\n            cVNMp += 1\n    return etwmp"}
{"old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K", "code": "def coMWe ( oGOcx , bVHhE , ceoxE ) :\n    count = 0\n    for AEbUG in range ( 0 , bVHhE ) :\n        for jkviE in range ( AEbUG + 1 , bVHhE ) :\n            if oGOcx [ AEbUG ] - oGOcx [ jkviE ] == ceoxE or oGOcx [ jkviE ] - oGOcx [ AEbUG ] == ceoxE :\n                count += 1\n    return count"}
{"old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K_1", "code": "def IqwqR ( cRiFc , jMuDu , atgFe ) :\n    count = 0\n    cRiFc.sort ( )\n    BHIYd = 0\n    XfoKB = 0\n    while XfoKB < jMuDu :\n        if cRiFc [ XfoKB ] - cRiFc [ BHIYd ] == atgFe :\n            count += 1\n            BHIYd += 1\n            XfoKB += 1\n        elif cRiFc [ XfoKB ] - cRiFc [ BHIYd ] > atgFe :\n            BHIYd += 1\n        else :\n            XfoKB += 1\n    return count"}
{"old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X", "code": "def nUWwM ( ZLtPA , WRshf , WhZZz , deJFA , GVEgq ) :\n    count = 0\n    for ytjlR in range ( WhZZz ) :\n        for zpdYn in range ( deJFA ) :\n            if ZLtPA [ ytjlR ] + WRshf [ zpdYn ] == GVEgq :\n                count = count + 1\n    return count"}
{"old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1", "code": "def DdYBW ( ogWhe , TBVSX , tdZfD , HxaJp , qmZkQ ) :\n    count = 0\n    JapVJ = set ( )\n    for kuDfU in range ( tdZfD ) :\n        JapVJ.add ( ogWhe [ kuDfU ] )\n    for SdjqD in range ( HxaJp ) :\n        if qmZkQ - TBVSX [ SdjqD ] in JapVJ :\n            count += 1\n    return count"}
{"old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY", "code": "def lqMWD ( zhfSu , HyMPB ) :\n    qGBKB = 0 ;\n    for HBNQw in range ( 0 , HyMPB ) :\n        for SWOkZ in range ( HBNQw + 1 , HyMPB ) :\n            jrocO = zhfSu [ HBNQw ] * zhfSu [ SWOkZ ] ;\n            for ZkNXr in range ( 0 , HyMPB ) :\n                if ( zhfSu [ ZkNXr ] == jrocO ) :\n                    qGBKB = qGBKB + 1 ;\n                    break ;\n    return qGBKB ;"}
{"old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1", "code": "def bQGXb ( wkpmy , vKokQ ) :\n    KTIgu = 0\n    nMplW = set ( )\n    for VVEVF in range ( vKokQ ) :\n        nMplW.add ( wkpmy [ VVEVF ] )\n    for VVEVF in range ( vKokQ ) :\n        for hXfAC in range ( VVEVF + 1 , vKokQ ) :\n            xugng = wkpmy [ VVEVF ] * wkpmy [ hXfAC ]\n            if xugng in ( nMplW ) :\n                KTIgu += 1\n    return KTIgu"}
{"old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING", "code": "def sziDv ( str , Hmnnr ) :\n    PTlUq = [ [ 0 for UYqHn in range ( Hmnnr ) ] for jlmIJ in range ( Hmnnr ) ]\n    btmRA = [ [ False for UYqHn in range ( Hmnnr ) ] for jlmIJ in range ( Hmnnr ) ]\n    for IRJVH in range ( Hmnnr ) :\n        btmRA [ IRJVH ] [ IRJVH ] = True\n    for IRJVH in range ( Hmnnr - 1 ) :\n        if ( str [ IRJVH ] == str [ IRJVH + 1 ] ) :\n            btmRA [ IRJVH ] [ IRJVH + 1 ] = True\n            PTlUq [ IRJVH ] [ IRJVH + 1 ] = 1\n    for esZxv in range ( 2 , Hmnnr ) :\n        for IRJVH in range ( Hmnnr - esZxv ) :\n            cCZGG = esZxv + IRJVH ;\n            if ( str [ IRJVH ] == str [ cCZGG ] and btmRA [ IRJVH + 1 ] [ cCZGG - 1 ] ) :\n                btmRA [ IRJVH ] [ cCZGG ] = True\n            if ( btmRA [ IRJVH ] [ cCZGG ] == True ) :\n                PTlUq [ IRJVH ] [ cCZGG ] = ( PTlUq [ IRJVH ] [ cCZGG - 1 ] + PTlUq [ IRJVH + 1 ] [ cCZGG ] + 1 - PTlUq [ IRJVH + 1 ] [ cCZGG - 1 ] )\n            else :\n                PTlUq [ IRJVH ] [ cCZGG ] = ( PTlUq [ IRJVH ] [ cCZGG - 1 ] + PTlUq [ IRJVH + 1 ] [ cCZGG ] - PTlUq [ IRJVH + 1 ] [ cCZGG - 1 ] )\n    return PTlUq [ 0 ] [ Hmnnr - 1 ]"}
{"old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING", "code": "def jItRs ( str ) :\n    LKafB = len ( str )\n    QmVDn = [ [ 0 for lvCVN in range ( LKafB + 2 ) ] for gWrvi in range ( LKafB + 2 ) ]\n    for lvCVN in range ( LKafB ) :\n        QmVDn [ lvCVN ] [ lvCVN ] = 1\n    for pokPu in range ( 2 , LKafB + 1 ) :\n        for lvCVN in range ( LKafB ) :\n            gegta = pokPu + lvCVN - 1\n            if ( gegta < LKafB ) :\n                if ( str [ lvCVN ] == str [ gegta ] ) :\n                    QmVDn [ lvCVN ] [ gegta ] = ( QmVDn [ lvCVN ] [ gegta - 1 ] + QmVDn [ lvCVN + 1 ] [ gegta ] + 1 )\n                else :\n                    QmVDn [ lvCVN ] [ gegta ] = ( QmVDn [ lvCVN ] [ gegta - 1 ] + QmVDn [ lvCVN + 1 ] [ gegta ] - QmVDn [ lvCVN + 1 ] [ gegta - 1 ] )\n    return QmVDn [ 0 ] [ LKafB - 1 ]"}
{"old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1", "code": "def VVHXg ( Bklep , JCQie ) :\n    count = [ 0 ] * ( JCQie + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    if Bklep [ 0 ] == '0' :\n        return 0\n    for bWpfh in range ( 2 , JCQie + 1 ) :\n        count [ bWpfh ] = 0\n        if ( Bklep [ bWpfh - 1 ] > '0' ) :\n            count [ bWpfh ] = count [ bWpfh - 1 ]\n        if ( Bklep [ bWpfh - 2 ] == '1' or ( Bklep [ bWpfh - 2 ] == '2' and Bklep [ bWpfh - 1 ] < '7' ) ) :\n            count [ bWpfh ] += count [ bWpfh - 2 ]\n    return count [ JCQie ]"}
{"old_id": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3", "code": "def bEzbV ( rtYJN , rEqVx ) :\n    GRGMz = [ 0 , 0 , 0 ]\n    QCTdX = 0\n    for rRhBm in range ( 0 , rEqVx ) :\n        GRGMz [ rtYJN [ rRhBm ] % 3 ] += 1\n    QCTdX += ( ( GRGMz [ 0 ] * ( GRGMz [ 0 ] - 1 ) ) >> 1 )\n    QCTdX += GRGMz [ 1 ] * GRGMz [ 2 ]\n    QCTdX += ( GRGMz [ 0 ] * ( GRGMz [ 0 ] - 1 ) * ( GRGMz [ 0 ] - 2 ) ) / 6\n    QCTdX += ( GRGMz [ 1 ] * ( GRGMz [ 1 ] - 1 ) * ( GRGMz [ 1 ] - 2 ) ) / 6\n    QCTdX += ( ( GRGMz [ 2 ] * ( GRGMz [ 2 ] - 1 ) * ( GRGMz [ 2 ] - 2 ) ) / 6 )\n    QCTdX += GRGMz [ 0 ] * GRGMz [ 1 ] * GRGMz [ 2 ]\n    return QCTdX"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1", "code": "def NYnEh ( sLouC , yNQFH ) :\n    count = [ [ 0 for VjPiX in range ( sLouC ) ] for DRhJz in range ( yNQFH ) ]\n    for ctODN in range ( sLouC ) :\n        count [ ctODN ] [ 0 ] = 1 ;\n    for xITaU in range ( yNQFH ) :\n        count [ 0 ] [ xITaU ] = 1 ;\n    for ctODN in range ( 1 , sLouC ) :\n        for xITaU in range ( yNQFH ) :\n            count [ ctODN ] [ xITaU ] = count [ ctODN - 1 ] [ xITaU ] + count [ ctODN ] [ xITaU - 1 ]\n    return count [ sLouC - 1 ] [ yNQFH - 1 ]"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2", "code": "def XBYZA ( SkdGx , TvANz ) :\n    TBQme = [ 0 for KDZVq in range ( TvANz ) ]\n    TBQme[0]=1\n    for KDZVq in range ( SkdGx  ) :\n        for AAcFl in range ( 1 , TvANz ) :\n            TBQme [ AAcFl ] += TBQme [ AAcFl - 1 ]\n    return TBQme [ TvANz - 1 ]"}
{"old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3", "code": "def pWnIC ( RESyf , ovdpr ) :\n    for ZxaZz in range ( ovdpr , ( RESyf + ovdpr - 1 ) ) :\n        svWCj *= ZxaZz\n        svWCj //= ( ZxaZz - ovdpr + 1 )\n    return svWCj"}
{"old_id": "COUNT_ROTATIONS_DIVISIBLE_4", "code": "def FxWkC ( UhRjd ) :\n    nQZcR = len ( UhRjd )\n    if ( nQZcR == 1 ) :\n        ANdVJ = ( int ) ( UhRjd [ 0 ] )\n        if ( ANdVJ % 4 == 0 ) :\n            return 1\n        return 0\n    count = 0\n    for mYBga in range ( 0 , nQZcR - 1 ) :\n        qeEIL = ( int ) ( UhRjd [ mYBga ] ) * 10 + ( int ) ( UhRjd [ mYBga + 1 ] )\n        if ( qeEIL % 4 == 0 ) :\n            count = count + 1\n    qeEIL = ( int ) ( UhRjd [ nQZcR - 1 ] ) * 10 + ( int ) ( UhRjd [ 0 ] )\n    if ( qeEIL % 4 == 0 ) :\n        count = count + 1\n    return count"}
{"old_id": "COUNT_ROTATIONS_DIVISIBLE_8", "code": "def HGDjz ( AzGeY ) :\n    jGque = len ( AzGeY )\n    count = 0\n    if ( jGque == 1 ) :\n        vyQnu = int ( AzGeY [ 0 ] )\n        if ( vyQnu % 8 == 0 ) :\n            return 1\n        return 0\n    if ( jGque == 2 ) :\n        aWINI = int ( AzGeY [ 0 ] ) * 10 + int ( AzGeY [ 1 ] )\n        hEmvL = int ( AzGeY [ 1 ] ) * 10 + int ( AzGeY [ 0 ] )\n        if ( aWINI % 8 == 0 ) :\n            count += 1\n        if ( hEmvL % 8 == 0 ) :\n            count += 1\n        return count\n    IkdOc = 0\n    for FLfUD in range ( 0 , ( jGque - 2 ) ) :\n        IkdOc = ( int ( AzGeY [ FLfUD ] ) * 100 + int ( AzGeY [ FLfUD + 1 ] ) * 10 + int ( AzGeY [ FLfUD + 2 ] ) )\n        if ( IkdOc % 8 == 0 ) :\n            count += 1\n    IkdOc = ( int ( AzGeY [ jGque - 1 ] ) * 100 + int ( AzGeY [ 0 ] ) * 10 + int ( AzGeY [ 1 ] ) )\n    if ( IkdOc % 8 == 0 ) :\n        count += 1\n    IkdOc = ( int ( AzGeY [ jGque - 2 ] ) * 100 + int ( AzGeY [ jGque - 1 ] ) * 10 + int ( AzGeY [ 0 ] ) )\n    if ( IkdOc % 8 == 0 ) :\n        count += 1\n    return count"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_1", "code": "def SNbzn ( oHzfx ) :\n    if ( oHzfx == 0 ) :\n        return 0\n    else :\n        return ( oHzfx & 1 ) + SNbzn ( oHzfx >> 1 )"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_2", "code": "def uKIcC ( oaFRk ) :\n    count = 0\n    while ( oaFRk ) :\n        oaFRk &= ( oaFRk - 1 )\n        count += 1\n    return count"}
{"old_id": "COUNT_SET_BITS_IN_AN_INTEGER_3", "code": "def uqnDr ( dTIED ) :\n    if ( dTIED == 0 ) :\n        return 0\n    else :\n        return 1 + uqnDr ( dTIED & ( dTIED - 1 ) )"}
{"old_id": "COUNT_SORTED_ROWS_MATRIX", "code": "def QMivo ( DlFvJ , FdtRj , dVKHB ) :\n    UKEwu = 0\n    for LVxAn in range ( FdtRj ) :\n        hxtvg = 0\n        for hxtvg in range ( dVKHB - 1 ) :\n            if DlFvJ [ LVxAn ] [ hxtvg + 1 ] <= DlFvJ [ LVxAn ] [ hxtvg ] :\n                break\n        if hxtvg == dVKHB - 2 :\n            UKEwu += 1\n    for LVxAn in range ( 0 , FdtRj ) :\n        hxtvg = 0\n        for hxtvg in range ( dVKHB - 1 , 0 , - 1 ) :\n            if DlFvJ [ LVxAn ] [ hxtvg - 1 ] <= DlFvJ [ LVxAn ] [ hxtvg ] :\n                break\n        if dVKHB > 1 and hxtvg == 1 :\n            UKEwu += 1\n    return UKEwu"}
{"old_id": "COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1", "code": "def SVADM ( HONxP ) :\n    return ( 1 + ( HONxP * 2 ) + ( HONxP * ( ( HONxP * HONxP ) - 1 ) // 2 ) )"}
{"old_id": "COUNT_STRINGS_WITH_CONSECUTIVE_1S", "code": "def Rwdmr ( pcaDt ) :\n    SWIXS = [ 0 ] * pcaDt\n    rVueg = [ 0 ] * pcaDt\n    SWIXS [ 0 ] = rVueg [ 0 ] = 1\n    for KgfdC in range ( 1 , pcaDt ) :\n        SWIXS [ KgfdC ] = SWIXS [ KgfdC - 1 ] + rVueg [ KgfdC - 1 ]\n        rVueg [ KgfdC ] = SWIXS [ KgfdC - 1 ]\n    return ( 1 << pcaDt ) - SWIXS [ pcaDt - 1 ] - rVueg [ pcaDt - 1 ]"}
{"old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS", "code": "def JvRGC ( LfWSr , Djycg ) :\n    difference = 0\n    VhnwS = 0\n    WiJdQ = [ 0 ] * ( Djycg + 1 )\n    DWteG = [ 0 ] * ( Djycg + 1 )\n    WiJdQ [ 0 ] = 1\n    for zJbMk in range ( Djycg ) :\n        if ( LfWSr [ zJbMk ] & 1 == 1 ) :\n            difference = difference + 1\n        else :\n            difference = difference - 1\n        if ( difference < 0 ) :\n            VhnwS += DWteG [ - difference ]\n            DWteG [ - difference ] = DWteG [ - difference ] + 1\n        else :\n            VhnwS += WiJdQ [ difference ]\n            WiJdQ [ difference ] = WiJdQ [ difference ] + 1\n    return VhnwS"}
{"old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS", "code": "def bfMUL ( KTMBQ ) :\n    FCtuG = 0\n    TNbKT = len ( KTMBQ )\n    for uHDkE in range ( TNbKT ) :\n        for MiFHT in range ( uHDkE , TNbKT ) :\n            if ( KTMBQ [ uHDkE ] == KTMBQ [ MiFHT ] ) :\n                FCtuG = FCtuG + 1\n    return FCtuG"}
{"old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N", "code": "def wsOMe ( CIcbK ) :\n    cKELt = 0\n    jZhJj = 0\n    while ( ( 1 << cKELt ) <= CIcbK ) :\n        yingM = 0\n        jdrSZ = 1 << cKELt\n        for QemVz in range ( 0 , CIcbK + 1 ) :\n            jZhJj += yingM\n            if jdrSZ == 1 :\n                yingM = not yingM\n                jdrSZ = 1 << cKELt\n            else :\n                jdrSZ -= 1\n        cKELt += 1\n    return jZhJj"}
{"old_id": "COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER", "code": "def VeDBn ( sxkBZ ) :\n    count = 0\n    SNRgY = 5\n    while ( sxkBZ / SNRgY >= 1 ) :\n        count += int ( sxkBZ / SNRgY )\n        SNRgY *= 5\n    return int ( count )"}
{"old_id": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS", "code": "def CLTNL ( UyXey ) :\n    JAOvT = [ [ 0 ] * ( UyXey + 1 ) for QFyLv in range ( 2 ) ]\n    JAOvT [ 0 ] [ 1 ] = 1\n    JAOvT [ 1 ] [ 1 ] = 2\n    for QFyLv in range ( 2 , UyXey + 1 ) :\n        JAOvT [ 0 ] [ QFyLv ] = JAOvT [ 0 ] [ QFyLv - 1 ] + JAOvT [ 1 ] [ QFyLv - 1 ]\n        JAOvT [ 1 ] [ QFyLv ] = ( JAOvT [ 0 ] [ QFyLv - 1 ] * 2 + JAOvT [ 1 ] [ QFyLv - 1 ] )\n    return JAOvT [ 0 ] [ UyXey ] + JAOvT [ 1 ] [ UyXey ]"}
{"old_id": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS", "code": "def dlIXb ( WFGGJ ) :\n    aTKGC = 2 * WFGGJ\n    NNLPA = [ 0 ] * ( aTKGC + 1 )\n    NNLPA [ 0 ] = 1\n    NNLPA [ 2 ] = 1\n    for AXDBE in range ( 4 , aTKGC + 1 , 2 ) :\n        for vynRp in range ( 0 , AXDBE - 1 , 2 ) :\n            NNLPA [ AXDBE ] += ( NNLPA [ vynRp ] * NNLPA [ AXDBE - 2 - vynRp ] )\n    return int ( NNLPA [ aTKGC ] )"}
{"old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS", "code": "def ULOvc ( str , AjDYx ) :\n    Htkxf = dict ( )\n    for IxHPx in range ( AjDYx ) :\n        Htkxf [ str [ IxHPx ] ] = Htkxf.get ( str [ IxHPx ] , 0 ) + 1\n    BEEMU = 0\n    for IxHPx in Htkxf.values ( ) :\n        if IxHPx == 2 :\n            BEEMU += 1\n    return BEEMU"}
{"old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD", "code": "def oBZjJ ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) :\n        return count\n    if ( str [ 0 ] == str [ 1 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    for NCHoq in range ( 1 , len - 1 ) :\n        if ( str [ NCHoq ] == str [ NCHoq - 1 ] and str [ NCHoq ] == str [ NCHoq + 1 ] ) :\n            count *= 1\n        elif ( str [ NCHoq ] == str [ NCHoq - 1 ] or str [ NCHoq ] == str [ NCHoq + 1 ] or str [ NCHoq - 1 ] == str [ NCHoq + 1 ] ) :\n            count *= 2\n        else :\n            count *= 3\n    if ( str [ len - 1 ] == str [ len - 2 ] ) :\n        count *= 1\n    else :\n        count *= 2\n    return count"}
{"old_id": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES", "code": "def RoTPf ( lqAWU , YvZix ) :\n    dCPNM = lqAWU\n    for urTDb in range ( 1 , YvZix ) :\n        lqAWU += dCPNM\n    return lqAWU"}
{"old_id": "C_PROGRAM_FACTORIAL_NUMBER", "code": "def NKmnB ( udwyX ) :\n    return 1 if ( udwyX == 1 or udwyX == 0 ) else udwyX * NKmnB ( udwyX - 1 )"}
{"old_id": "C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1", "code": "def GqvuM ( tfeWL , CvZDr ) :\n    return sorted(tfeWL[:CvZDr], reverse=False)[CvZDr-1]"}
{"old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER", "code": "def ZIJSq ( str ) :\n    MosOi = 256\n    count = [ 0 ] * MosOi\n    for YXHLS in range ( len ( str ) ) :\n        count [ ord ( str [ YXHLS ] ) ] += 1\n    fEPQL , AjMut = 0 , 0\n    for YXHLS in range ( MosOi ) :\n        if count [ YXHLS ] > count [ fEPQL ] :\n            AjMut = fEPQL\n            fEPQL = YXHLS\n        elif ( count [ YXHLS ] > count [ AjMut ] and count [ YXHLS ] != count [ fEPQL ] ) :\n            AjMut = YXHLS\n    return chr ( AjMut )"}
{"old_id": "DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS", "code": "def glWjI ( XVUYg ) :\n    if ( XVUYg == 0 ) :\n        return \"0\"\n    bin = \"\"\n    while ( XVUYg > 0 ) :\n        if ( XVUYg & 1 == 0 ) :\n            bin = '0' + bin\n        else :\n            bin = '1' + bin\n        XVUYg = XVUYg >> 1\n    return bin"}
{"old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING", "code": "def eqMxn ( USwkQ ) :\n    hpxZS = [ ]\n    LvoZF = [ ]\n    guukH = \"\"\n    KJjxh = \"\"\n    for HfUoH in range ( len ( USwkQ ) ) :\n        count = 0\n        if ( USwkQ [ HfUoH ] >= '0' and USwkQ [ HfUoH ] <= '9' ) :\n            while ( USwkQ [ HfUoH ] >= '0' and USwkQ [ HfUoH ] <= '9' ) :\n                count = count * 10 + ord ( USwkQ [ HfUoH ] ) - ord ( '0' )\n                HfUoH += 1\n            HfUoH -= 1\n            hpxZS.append ( count )\n        elif ( USwkQ [ HfUoH ] == ']' ) :\n            guukH = \"\"\n            count = 0\n            if ( len ( hpxZS ) != 0 ) :\n                count = hpxZS [ - 1 ]\n                hpxZS.pop ( )\n            while ( len ( LvoZF ) != 0 and LvoZF [ - 1 ] != '[' ) :\n                guukH = LvoZF [ - 1 ] + guukH\n                LvoZF.pop ( )\n            if ( len ( LvoZF ) != 0 and LvoZF [ - 1 ] == '[' ) :\n                LvoZF.pop ( )\n            for ZOjLF in range ( count ) :\n                KJjxh = KJjxh + guukH\n            for ZOjLF in range ( len ( KJjxh ) ) :\n                LvoZF.append ( KJjxh [ ZOjLF ] )\n            KJjxh = \"\"\n        elif ( USwkQ [ HfUoH ] == '[' ) :\n            if ( USwkQ [ HfUoH - 1 ] >= '0' and USwkQ [ HfUoH - 1 ] <= '9' ) :\n                LvoZF.append ( USwkQ [ HfUoH ] )\n            else :\n                LvoZF.append ( USwkQ [ HfUoH ] )\n                hpxZS.append ( 1 )\n        else :\n            LvoZF.append ( USwkQ [ HfUoH ] )\n    while len ( LvoZF ) != 0 :\n        KJjxh = LvoZF [ - 1 ] + KJjxh\n        LvoZF.pop ( )\n    return KJjxh"}
{"old_id": "DELANNOY_NUMBER_1", "code": "def BRwYe ( sKXZj , NgCGl ) :\n    YTBmZ = [ [ 0 for eqAqM in range ( sKXZj + 1 ) ] for eqAqM in range ( NgCGl + 1 ) ]\n    for cpJOU in range ( NgCGl + 1 ) :\n        YTBmZ [ 0 ] [ cpJOU ] = 1\n    for cpJOU in range ( NgCGl + 1 ) :\n        YTBmZ [ cpJOU ] [ 0 ] = 1\n    for cpJOU in range ( 1 , NgCGl + 1 ) :\n        for lAywP in range ( 1 , sKXZj + 1 ) :\n            YTBmZ [ cpJOU ] [ lAywP ] = YTBmZ [ cpJOU - 1 ] [ lAywP ] + YTBmZ [ cpJOU - 1 ] [ lAywP - 1 ] + YTBmZ [ cpJOU ] [ lAywP - 1 ]\n    return YTBmZ [ NgCGl ] [ sKXZj ]"}
{"old_id": "DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS", "code": "def wktMC ( HZJWJ , Ozmpb ) :\n    return ( ( HZJWJ ^ Ozmpb ) < 0 )"}
{"old_id": "DIAGONALLY_DOMINANT_MATRIX", "code": "def YdjOz ( tGJVU , HoNcJ ) :\n    for WaEkL in range ( 0 , HoNcJ ) :\n        sum = 0\n        for yHZYA in range ( 0 , HoNcJ ) :\n            sum = sum + abs ( tGJVU [ WaEkL ] [ yHZYA ] )\n        sum = sum - abs ( tGJVU [ WaEkL ] [ WaEkL ] )\n        if ( abs ( tGJVU [ WaEkL ] [ WaEkL ] ) < sum ) :\n            return False\n    return True"}
{"old_id": "DICE_THROW_PROBLEM", "code": "def AMEpJ ( OrGuP , sfvJF , rUxyD ) :\n    LaYjA = [ [ 0 ] * ( rUxyD + 1 ) for DtzYB in range ( sfvJF + 1 ) ]\n    for ZFjNq in range ( 1 , min ( OrGuP + 1 , rUxyD + 1 ) ) :\n        LaYjA [ 1 ] [ ZFjNq ] = 1\n    for DtzYB in range ( 2 , sfvJF + 1 ) :\n        for ZFjNq in range ( 1 , rUxyD + 1 ) :\n            for Dzpfs in range ( 1 , min ( OrGuP + 1 , ZFjNq ) ) :\n                LaYjA [ DtzYB ] [ ZFjNq ] += LaYjA [ DtzYB - 1 ] [ ZFjNq - Dzpfs ]\n    return LaYjA [ - 1 ] [ - 1 ]"}
{"old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY", "code": "def GgRFz ( lKipx , BGYcX ) :\n    lKipx.sort ( )\n    count = 0\n    CbgdA = 0\n    YzNRg = BGYcX\n    for RLlfw in range ( 0 , ( BGYcX - 1 ) ) :\n        if lKipx [ RLlfw ] == lKipx [ RLlfw + 1 ] :\n            count += 1\n            continue\n        else :\n            CbgdA = max ( CbgdA , count )\n            YzNRg = min ( YzNRg , count )\n            count = 0\n    return CbgdA - YzNRg"}
{"old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1", "code": "def ZnLCy ( PosIJ , bsKAw ) :\n    rDzFm = LmzdP ( lambda : 0 )\n    for COppX in range ( bsKAw ) :\n        rDzFm [ PosIJ [ COppX ] ] += 1\n    bOofl = 0\n    qoCFG = bsKAw\n    for vQqTS , values in rDzFm.items ( ) :\n        bOofl = max ( bOofl , values )\n        qoCFG = min ( qoCFG , values )\n    return bOofl - qoCFG"}
{"old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M", "code": "def Qpurd ( IkglU , pexaw ) :\n    JzjPx = DVvXn.YsKtL ( ( IkglU + 2 , IkglU + 2 ) )\n    JzjPx [ 0 ] [ IkglU + 1 ] = 1\n    for jMFDo in range ( IkglU , pexaw - 1 , - 1 ) :\n        for OWfQK in range ( IkglU + 1 ) :\n            JzjPx [ OWfQK ] [ jMFDo ] = JzjPx [ OWfQK ] [ jMFDo + 1 ]\n            if ( OWfQK - jMFDo >= 0 ) :\n                JzjPx [ OWfQK ] [ jMFDo ] = ( JzjPx [ OWfQK ] [ jMFDo ] + JzjPx [ OWfQK - jMFDo ] [ jMFDo ] )\n    return JzjPx [ IkglU ] [ pexaw ]"}
{"old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B", "code": "def UefPg ( yBjhp , fEXWt , MyWvC ) :\n    GnwDe = int ( math.NrpbB ( MyWvC ) + 1 )\n    DBFMH = 1\n    for otExB in range ( GnwDe ) :\n        DBFMH = ( DBFMH * yBjhp ) % MyWvC\n    iTMkc = [ 0 ] * MyWvC\n    PbQwI = DBFMH\n    for otExB in range ( 1 , GnwDe + 1 ) :\n        if ( iTMkc [ PbQwI ] == 0 ) :\n            iTMkc [ PbQwI ] = otExB\n        PbQwI = ( PbQwI * DBFMH ) % MyWvC\n    PbQwI = fEXWt\n    for otExB in range ( GnwDe + 1 ) :\n        if ( iTMkc [ PbQwI ] > 0 ) :\n            GCdbH = iTMkc [ PbQwI ] * GnwDe - otExB\n            if ( GCdbH < MyWvC ) :\n                return GCdbH\n        PbQwI = ( PbQwI * yBjhp ) % MyWvC\n    return - 1"}
{"old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1", "code": "def MnyVN ( WkzqX , jCXhZ , dtjgM ) :\n    eEZAe = qYjFD ( lambda : 0 )\n    for oovwh in range ( jCXhZ ) :\n        eEZAe [ WkzqX [ oovwh ] ] += 1\n    for QeuUP , values in eEZAe.items ( ) :\n        if values > 2 * dtjgM :\n            return False\n    return True"}
{"old_id": "DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION", "code": "def UwynL ( TGNoS , qtMps , ytBUh ) :\n    if ( qtMps <= TGNoS - ytBUh + 1 ) :\n        return qtMps + ytBUh - 1\n    qtMps = qtMps - ( TGNoS - ytBUh + 1 )\n    if ( qtMps % TGNoS == 0 ) :\n        return TGNoS\n    else :\n        return qtMps % TGNoS"}
{"old_id": "DIVIDE_LARGE_NUMBER_REPRESENTED_STRING", "code": "def JubWS ( Wjahr , HgLao ) :\n    rmSVz = \"\"\n    buBCf = 0\n    ZWmwF = ord ( Wjahr [ buBCf ] ) - ord ( '0' )\n    while ( ZWmwF < HgLao ) :\n        ZWmwF = ( ZWmwF * 10 + ord ( Wjahr [ buBCf + 1 ] ) - ord ( '0' ) )\n        buBCf += 1\n    while ( ( len ( Wjahr ) ) > buBCf ) :\n        rmSVz += chr ( math.YAFcj ( ZWmwF // HgLao ) + ord ( '0' ) )\n        ZWmwF = ( ( ZWmwF % HgLao ) * 10 + ord ( Wjahr [ buBCf + 1 ] ) - ord ( '0' ) )\n        buBCf += 1\n    rmSVz += chr ( math.YAFcj ( ZWmwF // HgLao ) + ord ( '0' ) )\n    if ( len ( rmSVz ) == 0 ) :\n        return \"0\"\n    return rmSVz"}
{"old_id": "DIVISIBILITY_9_USING_BITWISE_OPERATORS", "code": "def QiSlV ( mJOsJ ) :\n    if ( mJOsJ == 0 or mJOsJ == 9 ) :\n        return True\n    if ( mJOsJ < 9 ) :\n        return False\n    return QiSlV ( ( int ) ( mJOsJ >> 3 ) - ( int ) ( mJOsJ & 7 ) )"}
{"old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER", "code": "def lpgSy ( HCanZ ) :\n    if ( len ( HCanZ ) >= 3 ) :\n        kjooT = int ( HCanZ [ len ( HCanZ ) - 1 ] )\n        if ( kjooT % 2 != 0 ) :\n            return False\n        cfdlp = int ( HCanZ [ len ( HCanZ ) - 2 ] )\n        sum = 0\n        for iJOML in range ( 0 , len ( HCanZ ) ) :\n            sum += int ( HCanZ [ iJOML ] )\n        return ( sum % 3 == 0 and ( cfdlp * 10 + kjooT ) % 4 == 0 )\n    else :\n        GFqyk = int ( HCanZ )\n        return ( GFqyk % 12 == 0 )"}
{"old_id": "DIVISIBILITY_BY_7", "code": "def bREOG ( gYqhp ) :\n    if gYqhp < 0 :\n        return bREOG ( - gYqhp )\n    if ( gYqhp == 0 or gYqhp == 7 ) :\n        return True\n    if ( gYqhp < 10 ) :\n        return False\n    return bREOG ( gYqhp // 10 - 2 * ( gYqhp - gYqhp // 10 * 10 ) )"}
{"old_id": "DOUBLE_FACTORIAL_1", "code": "def ECIkp ( ofgro ) :\n    ZThrj = 1\n    for wFwIC in range ( ofgro , - 1 , - 2 ) :\n        if ( wFwIC == 0 or wFwIC == 1 ) :\n            return ZThrj\n        else :\n            ZThrj *= wFwIC\n    return ZThrj;"}
{"old_id": "DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM", "code": "def iPiHs ( xjivs , UNTYF , cfjQd ) :\n    if ( cfjQd <= 0 ) :\n        return 0\n    return max ( xjivs [ cfjQd - 1 ] + iPiHs ( xjivs , UNTYF , ( cfjQd - 2 ) ) , UNTYF [ cfjQd - 1 ] + iPiHs ( xjivs , UNTYF , ( cfjQd - 1 ) ) )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM", "code": "def GCoBF ( BhmMx , DcubA , enkvK , JnoGm ) :\n    if JnoGm == 0 or BhmMx == 0 :\n        return 0\n    if ( DcubA [ JnoGm - 1 ] > BhmMx ) :\n        return GCoBF ( BhmMx , DcubA , enkvK , JnoGm - 1 )\n    else :\n        return max ( enkvK [ JnoGm - 1 ] + GCoBF ( BhmMx - DcubA [ JnoGm - 1 ] , DcubA , enkvK , JnoGm - 1 ) , GCoBF ( BhmMx , DcubA , enkvK , JnoGm - 1 ) )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1", "code": "def usCGM ( aGTEe , dozFj ) :\n    qJlZP = [ [ 0 for rsUqI in range ( dozFj + 1 ) ] for rsUqI in range ( aGTEe + 1 ) ]\n    for ftwIc in range ( 1 , aGTEe + 1 ) :\n        qJlZP [ ftwIc ] [ 1 ] = 1\n        qJlZP [ ftwIc ] [ 0 ] = 0\n    for AQIIT in range ( 1 , dozFj + 1 ) :\n        qJlZP [ 1 ] [ AQIIT ] = AQIIT\n    for ftwIc in range ( 2 , aGTEe + 1 ) :\n        for AQIIT in range ( 2 , dozFj + 1 ) :\n            qJlZP [ ftwIc ] [ AQIIT ] = YjGwu\n            for rsUqI in range ( 1 , AQIIT + 1 ) :\n                PPhHP = 1 + max ( qJlZP [ ftwIc - 1 ] [ rsUqI - 1 ] , qJlZP [ ftwIc ] [ AQIIT - rsUqI ] )\n                if PPhHP < qJlZP [ ftwIc ] [ AQIIT ] :\n                    qJlZP [ ftwIc ] [ AQIIT ] = PPhHP\n    return qJlZP [ aGTEe ] [ dozFj ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE", "code": "def AfsjS ( bYraw ) :\n    KctUJ = len ( bYraw )\n    OASFv = [ [ 0 for TgJDb in range ( KctUJ ) ] for TgJDb in range ( KctUJ ) ]\n    for RYFzy in range ( KctUJ ) :\n        OASFv [ RYFzy ] [ RYFzy ] = 1\n    for EAtCG in range ( 2 , KctUJ + 1 ) :\n        for RYFzy in range ( KctUJ - EAtCG + 1 ) :\n            LXVKz = RYFzy + EAtCG - 1\n            if bYraw [ RYFzy ] == bYraw [ LXVKz ] and EAtCG == 2 :\n                OASFv [ RYFzy ] [ LXVKz ] = 2\n            elif bYraw [ RYFzy ] == bYraw [ LXVKz ] :\n                OASFv [ RYFzy ] [ LXVKz ] = OASFv [ RYFzy + 1 ] [ LXVKz - 1 ] + 2\n            else :\n                OASFv [ RYFzy ] [ LXVKz ] = max ( OASFv [ RYFzy ] [ LXVKz - 1 ] , OASFv [ RYFzy + 1 ] [ LXVKz ] ) ;\n    return OASFv [ 0 ] [ KctUJ - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE", "code": "def KItcC ( IwViw , piwwW ) :\n    max = 0\n    hkWfw = [ 0 for hLrHW in range ( piwwW ) ]\n    for RBtTM in range ( piwwW ) :\n        hkWfw [ RBtTM ] = IwViw [ RBtTM ]\n    for RBtTM in range ( 1 , piwwW ) :\n        for ZeDsc in range ( RBtTM ) :\n            if ( IwViw [ RBtTM ] > IwViw [ ZeDsc ] and hkWfw [ RBtTM ] < hkWfw [ ZeDsc ] + IwViw [ RBtTM ] ) :\n                hkWfw [ RBtTM ] = hkWfw [ ZeDsc ] + IwViw [ RBtTM ]\n    for RBtTM in range ( piwwW ) :\n        if max < hkWfw [ RBtTM ] :\n            max = hkWfw [ RBtTM ]\n    return max"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE", "code": "def hujpS ( TNegC , IFCUy ) :\n    WDdkn = [ 1 for YFOmp in range ( IFCUy + 1 ) ]\n    for YFOmp in range ( 1 , IFCUy ) :\n        for RnbQr in range ( 0 , YFOmp ) :\n            if ( ( TNegC [ YFOmp ] > TNegC [ RnbQr ] ) and ( WDdkn [ YFOmp ] < WDdkn [ RnbQr ] + 1 ) ) :\n                WDdkn [ YFOmp ] = WDdkn [ RnbQr ] + 1\n    CXSle = [ 1 for YFOmp in range ( IFCUy + 1 ) ]\n    for YFOmp in reversed ( range ( IFCUy - 1 ) ) :\n        for RnbQr in reversed ( range ( YFOmp - 1 , IFCUy ) ) :\n            if ( TNegC [ YFOmp ] > TNegC [ RnbQr ] and CXSle [ YFOmp ] < CXSle [ RnbQr ] + 1 ) :\n                CXSle [ YFOmp ] = CXSle [ RnbQr ] + 1\n    XVusX = WDdkn [ 0 ] + CXSle [ 0 ] - 1\n    for YFOmp in range ( 1 , IFCUy ) :\n        XVusX = max ( ( WDdkn [ YFOmp ] + CXSle [ YFOmp ] - 1 ) , XVusX )\n    return XVusX"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING", "code": "def zGGbZ ( str ) :\n    mLZwV = len ( str )\n    QcVzB = [ [ 0 for qIPoH in range ( mLZwV ) ] for qIPoH in range ( mLZwV ) ]\n    VxnIH = [ [ False for qIPoH in range ( mLZwV ) ] for qIPoH in range ( mLZwV ) ]\n    XuZsr = 0\n    tiDXE = 0\n    AEfpK = 0\n    for qIPoH in range ( mLZwV ) :\n        VxnIH [ qIPoH ] [ qIPoH ] = True\n        QcVzB [ qIPoH ] [ qIPoH ] = 0\n    for AEfpK in range ( 2 , mLZwV + 1 ) :\n        for qIPoH in range ( mLZwV - AEfpK + 1 ) :\n            XuZsr = qIPoH + AEfpK - 1\n            if AEfpK == 2 :\n                VxnIH [ qIPoH ] [ XuZsr ] = ( str [ qIPoH ] == str [ XuZsr ] )\n            else :\n                VxnIH [ qIPoH ] [ XuZsr ] = ( ( str [ qIPoH ] == str [ XuZsr ] ) and VxnIH [ qIPoH + 1 ] [ XuZsr - 1 ] )\n            if VxnIH [ qIPoH ] [ XuZsr ] == True :\n                QcVzB [ qIPoH ] [ XuZsr ] = 0\n            else :\n                QcVzB [ qIPoH ] [ XuZsr ] = 100000000\n                for tiDXE in range ( qIPoH , XuZsr ) :\n                    QcVzB [ qIPoH ] [ XuZsr ] = min ( QcVzB [ qIPoH ] [ XuZsr ] , QcVzB [ qIPoH ] [ tiDXE ] + QcVzB [ tiDXE + 1 ] [ XuZsr ] + 1 )\n    return QcVzB [ 0 ] [ mLZwV - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME", "code": "def lSnft ( str , eJpdJ , MCjoI ) :\n    if ( eJpdJ > MCjoI ) :\n        return sys.VuRxV\n    if ( eJpdJ == MCjoI ) :\n        return 0\n    if ( eJpdJ == MCjoI - 1 ) :\n        return 0 if ( str [ eJpdJ ] == str [ MCjoI ] ) else 1\n    if ( str [ eJpdJ ] == str [ MCjoI ] ) :\n        return lSnft ( str , eJpdJ + 1 , MCjoI - 1 )\n    else :\n        return ( min ( lSnft ( str , eJpdJ , MCjoI - 1 ) , lSnft ( str , eJpdJ + 1 , MCjoI ) ) + 1 )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1", "code": "def JiKmX ( BFmRu ) :\n    if ( BFmRu == 2 or BFmRu == 3 ) :\n        return ( BFmRu - 1 )\n    ZcKge = 1\n    while ( BFmRu > 4 ) :\n        BFmRu -= 3\n        ZcKge *= 3\n    return ( BFmRu * ZcKge )"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM", "code": "def BXnIX ( QRObQ , rpxhg , IxiBO ) :\n    swgqH = [ [ 0 for pybBb in range ( IxiBO + 1 ) ] for pybBb in range ( IxiBO + 1 ) ]\n    lMrea = [ [ 0 for pybBb in range ( IxiBO + 1 ) ] for pybBb in range ( IxiBO + 1 ) ]\n    for pybBb in range ( IxiBO ) :\n        if QRObQ [ pybBb ] == 'F' :\n            swgqH [ pybBb ] [ pybBb ] = 1\n        else :\n            swgqH [ pybBb ] [ pybBb ] = 0\n        if QRObQ [ pybBb ] == 'T' :\n            lMrea [ pybBb ] [ pybBb ] = 1\n        else :\n            lMrea [ pybBb ] [ pybBb ] = 0\n    for GXbvJ in range ( 1 , IxiBO ) :\n        pybBb = 0\n        for rBYsw in range ( GXbvJ , IxiBO ) :\n            lMrea [ pybBb ] [ rBYsw ] = swgqH [ pybBb ] [ rBYsw ] = 0\n            for AUZpy in range ( GXbvJ ) :\n                PjBdi = pybBb + AUZpy\n                mhaYr = lMrea [ pybBb ] [ PjBdi ] + swgqH [ pybBb ] [ PjBdi ]\n                LNtOb = lMrea [ PjBdi + 1 ] [ rBYsw ] + swgqH [ PjBdi + 1 ] [ rBYsw ]\n                if rpxhg [ PjBdi ] == '&' :\n                    lMrea [ pybBb ] [ rBYsw ] += lMrea [ pybBb ] [ PjBdi ] * lMrea [ PjBdi + 1 ] [ rBYsw ]\n                    swgqH [ pybBb ] [ rBYsw ] += ( mhaYr * LNtOb - lMrea [ pybBb ] [ PjBdi ] * lMrea [ PjBdi + 1 ] [ rBYsw ] )\n                if rpxhg [ PjBdi ] == '|' :\n                    swgqH [ pybBb ] [ rBYsw ] += swgqH [ pybBb ] [ PjBdi ] * swgqH [ PjBdi + 1 ] [ rBYsw ]\n                    lMrea [ pybBb ] [ rBYsw ] += ( mhaYr * LNtOb - swgqH [ pybBb ] [ PjBdi ] * swgqH [ PjBdi + 1 ] [ rBYsw ] )\n                if rpxhg [ PjBdi ] == '^' :\n                    lMrea [ pybBb ] [ rBYsw ] += ( swgqH [ pybBb ] [ PjBdi ] * lMrea [ PjBdi + 1 ] [ rBYsw ] + lMrea [ pybBb ] [ PjBdi ] * swgqH [ PjBdi + 1 ] [ rBYsw ] )\n                    swgqH [ pybBb ] [ rBYsw ] += ( lMrea [ pybBb ] [ PjBdi ] * lMrea [ PjBdi + 1 ] [ rBYsw ] + swgqH [ pybBb ] [ PjBdi ] * swgqH [ PjBdi + 1 ] [ rBYsw ] )\n            pybBb += 1\n    return lMrea [ 0 ] [ IxiBO - 1 ]"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1", "code": "def dKCrv ( vibxN , WWxKO) :\n    dKCrv = [ 1 ] * WWxKO\n    for wZQnc in range ( 1 , WWxKO ) :\n        for TxMhx in range ( 0 , wZQnc ) :\n            if vibxN [ wZQnc ] > vibxN [ TxMhx ] and dKCrv [ wZQnc ] < dKCrv [ TxMhx ] + 1 :\n                dKCrv [ wZQnc ] = dKCrv [ TxMhx ] + 1\n    taUYS = 0\n    for wZQnc in range ( WWxKO ) :\n        taUYS = max ( taUYS , dKCrv [ wZQnc ] )\n    return taUYS"}
{"old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION", "code": "def dveps ( qEkAS , GuGqg , UXbZq ) :\n    if GuGqg == UXbZq :\n        return 0\n    mULZw = sys.OQoNl\n    for ugdvH in range ( GuGqg , UXbZq ) :\n        count = ( dveps ( qEkAS , GuGqg , ugdvH ) + dveps ( qEkAS , ugdvH + 1 , UXbZq ) + qEkAS [ GuGqg - 1 ] * qEkAS [ ugdvH ] * qEkAS [ UXbZq ] )\n        if count < mULZw :\n            mULZw = count\n    return mULZw"}
{"old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1", "code": "def wJoLO ( set , CyqAx , sum ) :\n    grPgM = ( [ [ False for rYAUU in range ( sum + 1 ) ] for rYAUU in range ( CyqAx + 1 ) ] )\n    for rYAUU in range ( CyqAx + 1 ) :\n        grPgM [ rYAUU ] [ 0 ] = True\n    for rYAUU in range ( 1 , sum + 1 ) :\n        grPgM [ 0 ] [ rYAUU ] = False\n    for rYAUU in range ( 1 , CyqAx + 1 ) :\n        for oEpum in range ( 1 , sum + 1 ) :\n            if oEpum < set [ rYAUU - 1 ] :\n                grPgM [ rYAUU ] [ oEpum ] = grPgM [ rYAUU - 1 ] [ oEpum ]\n            if oEpum >= set [ rYAUU - 1 ] :\n                grPgM [ rYAUU ] [ oEpum ] = ( grPgM [ rYAUU - 1 ] [ oEpum ] or grPgM [ rYAUU - 1 ] [ oEpum - set [ rYAUU - 1 ] ] )\n    return grPgM [ CyqAx ] [ sum ]"}
{"old_id": "EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_IS_1", "code": "def fecfU ( rSNlL , IJnVM , vaxyK ) :\n    uSaIr = 0\n    while ( uSaIr <= IJnVM - 1 ) :\n        if ( rSNlL [ uSaIr ] == vaxyK ) :\n            return uSaIr\n        uSaIr += abs ( rSNlL [ uSaIr ] - vaxyK )\n    return - 1"}
{"old_id": "EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10", "code": "def TNNdN ( ducjI ) :\n    return ( ducjI % 15 == 0 )"}
{"old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY", "code": "def ycfjU ( UKnyI , Wldpk ) :\n    count = 0\n    UKnyI = UKnyI[:Wldpk]\n    UKnyI.sort ( )\n    for OuyqO in range ( 0 , Wldpk - 1 ) :\n        if ( UKnyI [ OuyqO ] != UKnyI [ OuyqO + 1 ] and UKnyI [ OuyqO ] != UKnyI [ OuyqO + 1 ] - 1 ) :\n            count += UKnyI [ OuyqO + 1 ] - UKnyI [ OuyqO ] - 1\n    return count"}
{"old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1", "code": "def tjxIy ( eSXfs , FynOD ) :\n    EfJBD = dict ( )\n    count , mvLMS , puzvO = 0 , - 10 ** 9 , 10 ** 9\n    for oDZLl in range ( FynOD ) :\n        EfJBD [ eSXfs [ oDZLl ] ] = 1\n        if ( eSXfs [ oDZLl ] < puzvO ) :\n            puzvO = eSXfs [ oDZLl ]\n        if ( eSXfs [ oDZLl ] > mvLMS ) :\n            mvLMS = eSXfs [ oDZLl ]\n    for oDZLl in range ( puzvO , mvLMS + 1 ) :\n        if oDZLl not in EfJBD.keys ( ) :\n            count += 1\n    return count"}
{"old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY", "code": "def GVLfq ( Blszt , jWtZK) :\n    ULLal = 0\n    SpwCu = 0\n    for uAcqa in range ( jWtZK ) :\n        ULLal = 0\n        SpwCu = 0\n        for jcZkW in range ( uAcqa ) :\n            ULLal += Blszt [ jcZkW ]\n        for jcZkW in range ( uAcqa + 1 , jWtZK ) :\n            SpwCu += Blszt [ jcZkW ]\n        if ULLal == SpwCu :\n            return uAcqa\n    return - 1"}
{"old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1", "code": "def GYIva ( DLnJG ,MRMLw) :\n    rvidM = sum ( DLnJG )\n    iOlRz = 0\n    for VIvOP , oKsWE in enumerate ( DLnJG ) :\n        rvidM -= oKsWE\n        if iOlRz == rvidM :\n            return VIvOP\n        iOlRz += oKsWE\n    return - 1"}
{"old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS", "code": "def ldgFD ( FZUYj , OyTCN ) :\n    FZUYj = FZUYj % OyTCN\n    for bNXGP in range ( 2 , OyTCN , 1 ) :\n        if ( ( bNXGP * bNXGP ) % OyTCN == FZUYj ) :\n            return True\n    return False"}
{"old_id": "EVEN_FIBONACCI_NUMBERS_SUM", "code": "def taIQe ( pOKOR ) :\n    if ( pOKOR < 2 ) :\n        return 0\n    Qqhtj = 0\n    jwmBc = 2\n    jLLlx = Qqhtj + jwmBc\n    while ( jwmBc <= pOKOR ) :\n        oZvXT = 4 * jwmBc + Qqhtj\n        if ( oZvXT > pOKOR ) :\n            break\n        Qqhtj = jwmBc\n        jwmBc = oZvXT\n        jLLlx = jLLlx + jwmBc\n    return jLLlx"}
{"old_id": "FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM", "code": "def jsuEa ( SqPUd , HGtuv ) :\n    dVvom = 0\n    while ( HGtuv > 0 ) :\n        if ( HGtuv & 1 ) :\n            dVvom = dVvom + SqPUd\n        SqPUd = SqPUd << 1\n        HGtuv = HGtuv >> 1\n    return dVvom"}
{"old_id": "FIBONACCI_MODULO_P", "code": "def mlerB ( CPiks ) :\n    WFuYP = 1\n    Kyxsx = 1\n    UQAlw = 2\n    next = 1\n    while ( next ) :\n        next = ( WFuYP + Kyxsx ) % CPiks\n        WFuYP = Kyxsx\n        Kyxsx = next\n        UQAlw = UQAlw + 1\n    return UQAlw"}
{"old_id": "FINDING_POWER_PRIME_NUMBER_P_N", "code": "def haffZ ( jXEdE , BchNr ) :\n    NNTnj = 0\n    qPOYD = BchNr\n    while ( qPOYD <= jXEdE ) :\n        NNTnj += int(jXEdE / qPOYD)\n        qPOYD = qPOYD * BchNr\n    return NNTnj"}
{"old_id": "FINDING_POWER_PRIME_NUMBER_P_N_1", "code": "def lzhGd ( JROVK , aXncq ) :\n    QzqTV = 0\n    jLFuQ = aXncq\n    while ( jLFuQ <= JROVK ) :\n        QzqTV += JROVK / jLFuQ\n        jLFuQ = jLFuQ * aXncq\n    return int ( QzqTV )"}
{"old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE", "code": "def wRllT ( PJsSQ , vevwA ) :\n    OHOhc = [ 0 ] * ( 2 * vevwA + 1 )\n    for LtUEV in range ( vevwA ) :\n        OHOhc [ LtUEV ] = PJsSQ [ LtUEV ]\n    for LtUEV in range ( vevwA ) :\n        OHOhc [ vevwA + LtUEV ] = PJsSQ [ LtUEV ]\n    ahlHd = 0\n    for LtUEV in range ( 1 , vevwA ) :\n        pFQKo = 0\n        rwkoA = 0\n        for aNepa in range ( LtUEV , LtUEV + vevwA ) :\n            if OHOhc [ aNepa ] != PJsSQ [ rwkoA ] :\n                pFQKo += 1\n                rwkoA = rwkoA + 1\n        if pFQKo == vevwA :\n            return vevwA\n        ahlHd = max ( ahlHd , pFQKo )\n    return ahlHd"}
{"old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE", "code": "def QXgkd ( EPAFb , UVFPp , sum ) :\n    for srxwR in range ( 0 , UVFPp - 2 ) :\n        for lGygQ in range ( srxwR + 1 , UVFPp - 1 ) :\n            for yuwEn in range ( lGygQ + 1 , UVFPp ) :\n                if EPAFb [ srxwR ] + EPAFb [ lGygQ ] + EPAFb [ yuwEn ] == sum :\n                    print ( \"Triplet is\" , EPAFb [ srxwR ] , \", \" , EPAFb [ lGygQ ] , \", \" , EPAFb [ yuwEn ] )\n                    return True\n    return False"}
{"old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT", "code": "def nnzQN ( string ) :\n    EpPob = [ ]\n    for nOpzp in string :\n        if nOpzp == ')' :\n            BFhlZ = EpPob.pop ( )\n            LmEOx = 0\n            while BFhlZ != '(' :\n                LmEOx += 1\n                BFhlZ = EpPob.pop ( )\n            if LmEOx < 1 :\n                return True\n        else :\n            EpPob.append ( nOpzp )\n    return False"}
{"old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X", "code": "def gXrTv ( PuFHg ) :\n    MHBQY = 1\n    IhdSx = 1\n    for MHBQY in range ( 1 , PuFHg ) :\n        IhdSx = IhdSx * MHBQY\n        if ( IhdSx % PuFHg == 0 ) :\n            break\n    return MHBQY"}
{"old_id": "FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN", "code": "def dEwwr ( UOWbJ , IbolF ) :\n    yedTn = ( UOWbJ + IbolF ) / 2\n    hDEZQ = math.NQKDw ( UOWbJ * IbolF )\n    ukpnx = ( hDEZQ * hDEZQ ) / yedTn\n    return ukpnx"}
{"old_id": "FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME", "code": "def oobmy ( dlgQC ) :\n    if ( dlgQC <= 1 ) :\n        return dlgQC\n    lLaLD = 0\n    YVptw = 1\n    EQfgs = 1\n    JUwzw = 1\n    while ( EQfgs < dlgQC ) :\n        EQfgs = lLaLD + YVptw\n        JUwzw = JUwzw + 1\n        lLaLD = YVptw\n        YVptw = EQfgs\n    return JUwzw"}
{"old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY", "code": "def gqjVw ( msfEJ , waLkq , QKTJa ) :\n    for MEdWp in range ( 0 , QKTJa ) :\n        if ( msfEJ [ MEdWp ] != waLkq [ MEdWp ] ) :\n            return MEdWp\n    return QKTJa"}
{"old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D", "code": "def NuubN ( iYMCj , gwvFj ) :\n    peplF = False\n    iYMCj = iYMCj[:gwvFj]\n    iYMCj.sort ( )\n    for qWcDQ in range ( gwvFj - 1 , - 1 , - 1 ) :\n        for VKROA in range ( 0 , gwvFj ) :\n            if ( qWcDQ == VKROA ) :\n                continue\n            for eHsGi in range ( VKROA + 1 , gwvFj ) :\n                if ( qWcDQ == eHsGi ) :\n                    continue\n                for CJkSC in range ( eHsGi + 1 , gwvFj ) :\n                    if ( qWcDQ == CJkSC ) :\n                        continue\n                    if ( iYMCj [ qWcDQ ] == iYMCj [ VKROA ] + iYMCj [ eHsGi ] + iYMCj [ CJkSC ] ) :\n                        peplF = True\n                        return iYMCj [ qWcDQ ]\n    if ( peplF == False ) :\n        return - 1"}
{"old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1", "code": "def MfSYZ ( eviwE , lTayk ) :\n    vbjOs = dict ( )\n    for PTBIF in range ( lTayk - 1 ) :\n        for tabRj in range ( PTBIF + 1 , lTayk ) :\n            vbjOs [ eviwE [ PTBIF ] + eviwE [ tabRj ] ] = ( PTBIF , tabRj )\n    NnVNK = - 10 ** 9\n    for PTBIF in range ( lTayk - 1 ) :\n        for tabRj in range ( PTBIF + 1 , lTayk ) :\n            IGcZh = abs ( eviwE [ PTBIF ] - eviwE [ tabRj ] )\n            if IGcZh in vbjOs.keys ( ) :\n                bBJrq = vbjOs [ IGcZh ]\n                if ( bBJrq [ 0 ] != PTBIF and bBJrq [ 0 ] != tabRj and bBJrq [ 1 ] != PTBIF and bBJrq [ 1 ] != tabRj ) :\n                    NnVNK = max ( NnVNK , max ( eviwE [ PTBIF ] , eviwE [ tabRj ] ) )\n    return NnVNK"}
{"old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER", "code": "def BtDzG ( mtLJv ) :\n    oJhZI = - 1\n    while mtLJv % 2 == 0 :\n        oJhZI = 2\n        mtLJv >>= 1\n    for GRRXY in range ( 3 , int ( math.wTanp ( mtLJv ) ) + 1 , 2 ) :\n        while mtLJv % GRRXY == 0 :\n            oJhZI = GRRXY\n            mtLJv = mtLJv / GRRXY\n    if mtLJv > 2 :\n        oJhZI = mtLJv\n    return int ( oJhZI )"}
{"old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B", "code": "def njEQg ( DTZMo , xHmxr ) :\n    JrePC = 1\n    if ( DTZMo == xHmxr ) :\n        return 1\n    elif ( ( xHmxr - DTZMo ) >= 5 ) :\n        return 0\n    else :\n        for fClaC in range ( DTZMo + 1 , xHmxr + 1 ) :\n            JrePC = ( JrePC * ( fClaC % 10 ) ) % 10\n        return JrePC % 10"}
{"old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH", "code": "def hEJDc ( xrgIn , mynek , OghVd ) :\n    if OghVd > mynek :\n        return - 1\n    tJxNu = [ 0 ] * mynek\n    tJxNu [ 0 ] = xrgIn [ 0 ]\n    for OmMLj in range ( 1 , mynek ) :\n        tJxNu [ OmMLj ] = tJxNu [ OmMLj - 1 ] + xrgIn [ OmMLj ]\n    mlakJ = tJxNu [ OghVd - 1 ]\n    MOUyd = OghVd - 1\n    for OmMLj in range ( OghVd , mynek ) :\n        VGxZt = tJxNu [ OmMLj ] - tJxNu [ OmMLj - OghVd ]\n        if VGxZt > mlakJ :\n            mlakJ = VGxZt\n            MOUyd = OmMLj\n    return MOUyd - OghVd + 1"}
{"old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1", "code": "def PVIwa ( VWazi , XlvWL , kqfHz ) :\n    if ( kqfHz > XlvWL ) :\n        return - 1\n    sum = VWazi [ 0 ]\n    for CatOe in range ( 1 , kqfHz ) :\n        sum += VWazi [ CatOe ]\n    EARby = sum\n    LoDpZ = kqfHz - 1\n    for CatOe in range ( kqfHz , XlvWL ) :\n        sum = sum + VWazi [ CatOe ] - VWazi [ CatOe - kqfHz ]\n        if ( sum > EARby ) :\n            EARby = sum\n            LoDpZ = CatOe\n    return LoDpZ - kqfHz + 1"}
{"old_id": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S", "code": "def czJRw ( GvDRe , mJnAo , vGcAQ , xAaji ) :\n    gzkMw = [ [ 0 for ypLvW in range ( vGcAQ + 1 ) ] for LDmoZ in range ( xAaji + 1 ) ]\n    for ypLvW in range ( 1 , xAaji + 1 , 1 ) :\n        for LDmoZ in range ( ypLvW , vGcAQ + 1 , 1 ) :\n            gzkMw [ ypLvW ] [ LDmoZ ] = max ( ( gzkMw [ ypLvW - 1 ] [ LDmoZ - 1 ] + ( GvDRe [ LDmoZ - 1 ] * mJnAo [ ypLvW - 1 ] ) ) , gzkMw [ ypLvW ] [ LDmoZ - 1 ] )\n    return gzkMw [ xAaji ] [ vGcAQ ]"}
{"old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY", "code": "def qFZpT ( LtQQq , shVRM ) :\n    if shVRM < 3 :\n        return - 1\n    HLKtl = - ( sys.lZxqh - 1 )\n    for tLKsO in range ( 0 , shVRM - 2 ) :\n        for nKafM in range ( tLKsO + 1 , shVRM - 1 ) :\n            for nGOsZ in range ( nKafM + 1 , shVRM ) :\n                HLKtl = max ( HLKtl , LtQQq [ tLKsO ] * LtQQq [ nKafM ] * LtQQq [ nGOsZ ] )\n    return HLKtl"}
{"old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1", "code": "def ArWwP ( mmfmB , MFXRv ) :\n    if MFXRv < 3 :\n        return - 1\n    mmfmB.sort ( )\n    return max ( mmfmB [ 0 ] * mmfmB [ 1 ] * mmfmB [ MFXRv - 1 ] , mmfmB [ MFXRv - 1 ] * mmfmB [ MFXRv - 2 ] * mmfmB [ MFXRv - 3 ] )"}
{"old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS", "code": "def RBeQY ( ZipLG , mbdIS , pGMvh , QsHTz , KyGwp , MtYJs ) :\n    Kzrbm , YUlRy , PIcXg = 0 , 0 , 0\n    for rhTzd in range ( QsHTz ) :\n        Kzrbm += ZipLG [ rhTzd ]\n    for rhTzd in range ( KyGwp ) :\n        YUlRy += mbdIS [ rhTzd ]\n    for rhTzd in range ( MtYJs ) :\n        PIcXg += pGMvh [ rhTzd ]\n    dsNdQ , IvQeg , KHELj = 0 , 0 , 0\n    WMOAR = 0\n    while ( 1 ) :\n        if ( dsNdQ == QsHTz or IvQeg == KyGwp or KHELj == MtYJs ) :\n            return 0\n        if ( Kzrbm == YUlRy and YUlRy == PIcXg ) :\n            return Kzrbm\n        if ( Kzrbm >= YUlRy and Kzrbm >= PIcXg ) :\n            Kzrbm -= ZipLG [ dsNdQ ]\n            dsNdQ = dsNdQ + 1\n        elif ( YUlRy >= PIcXg and YUlRy >= PIcXg ) :\n            YUlRy -= mbdIS [ IvQeg ]\n            IvQeg = IvQeg + 1\n        elif ( PIcXg >= YUlRy and PIcXg >= Kzrbm ) :\n            PIcXg -= pGMvh [ KHELj ]\n            KHELj = KHELj + 1"}
{"old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX", "code": "def kvEnk ( UClbn , nOmpO , eSFuZ ) :\n    EHiAv = sys.IqcIP\n    AIHKU = - sys.IqcIP - 1\n    for BLHZu in range ( nOmpO ) :\n        if UClbn [ BLHZu ] [ 0 ] < EHiAv :\n            EHiAv = UClbn [ BLHZu ] [ 0 ]\n        if UClbn [ BLHZu ] [ eSFuZ - 1 ] > AIHKU :\n            AIHKU = UClbn [ BLHZu ] [ eSFuZ - 1 ]\n    eeuvQ = ( nOmpO * eSFuZ + 1 ) // 2\n    while ( EHiAv < AIHKU ) :\n        JbyTh = EHiAv + ( AIHKU - EHiAv ) // 2\n        jdFun = [ 0 ]\n        for BLHZu in range ( nOmpO ) :\n            FimXX = yaOqr ( UClbn [ BLHZu ] , JbyTh )\n            jdFun [ 0 ] = jdFun [ 0 ] + FimXX\n        if jdFun [ 0 ] < eeuvQ :\n            EHiAv = JbyTh + 1\n        else :\n            AIHKU = JbyTh\n    print ( \"Median is\" , EHiAv )\n    return EHiAv"}
{"old_id": "FIND_MINIMUM_DIFFERENCE_PAIR", "code": "def zAHrZ ( aXQse , wZUIv ) :\n    eFqLa = 10 ** 20\n    for NdnLS in range ( wZUIv - 1 ) :\n        for FvJIv in range ( NdnLS + 1 , wZUIv ) :\n            if abs ( aXQse [ NdnLS ] - aXQse [ FvJIv ] ) < eFqLa :\n                eFqLa = abs ( aXQse [ NdnLS ] - aXQse [ FvJIv ] )\n    return eFqLa"}
{"old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1", "code": "def hoKja ( HncTD , XBsXA ) :\n    HncTD = HncTD[:XBsXA]\n    HncTD = sorted ( HncTD )\n    DrIuC = 10 ** 20\n    for urAtC in range ( XBsXA - 1 ) :\n        if HncTD [ urAtC + 1 ] - HncTD [ urAtC ] < DrIuC :\n            DrIuC = HncTD [ urAtC + 1 ] - HncTD [ urAtC ]\n    return DrIuC"}
{"old_id": "FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY", "code": "def oUNbn ( CzqOF , Opqee , yUWxG ) :\n    if yUWxG < Opqee :\n        return CzqOF [ 0 ]\n    if yUWxG == Opqee :\n        return CzqOF [ Opqee ]\n    Zpccy = int ( ( Opqee + yUWxG ) / 2 )\n    if Zpccy < yUWxG and CzqOF [ Zpccy + 1 ] < CzqOF [ Zpccy ] :\n        return CzqOF [ Zpccy + 1 ]\n    if Zpccy > Opqee and CzqOF [ Zpccy ] < CzqOF [ Zpccy - 1 ] :\n        return CzqOF [ Zpccy ]\n    if CzqOF [ yUWxG ] > CzqOF [ Zpccy ] :\n        return oUNbn ( CzqOF , Opqee , Zpccy - 1 )\n    return oUNbn ( CzqOF , Zpccy + 1 , yUWxG )"}
{"old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE", "code": "def BScCA ( DczWY ) :\n    count = 0\n    UqGBa = 1\n    while DczWY % 2 == 0 :\n        count += 1\n        DczWY //= 2\n    if count % 2 is not 0 :\n        UqGBa *= 2\n    for jRfrM in range ( 3 , ( int ) ( math.Tclnn ( DczWY ) ) + 1 , 2 ) :\n        count = 0\n        while DczWY % jRfrM == 0 :\n            count += 1\n            DczWY //= jRfrM\n        if count % 2 is not 0 :\n            UqGBa *= jRfrM\n    if DczWY > 2 :\n        UqGBa *= DczWY\n    return UqGBa"}
{"old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1", "code": "def NnRfI ( BuwzV , KpUrr , YEHeC ) :\n    nrnbj = [ 0 for Utech in range ( YEHeC + 1 ) ]\n    nrnbj [ 0 ] = 0\n    for Utech in range ( 1 , YEHeC + 1 ) :\n        nrnbj [ Utech ] = sys.QUSVX\n    for Utech in range ( 1 , YEHeC + 1 ) :\n        for BfFZs in range ( KpUrr ) :\n            if ( BuwzV [ BfFZs ] <= Utech ) :\n                bAxIC = nrnbj [ Utech - BuwzV [ BfFZs ] ]\n                if ( bAxIC != sys.QUSVX and bAxIC + 1 < nrnbj [ Utech ] ) :\n                    nrnbj [ Utech ] = bAxIC + 1\n    return nrnbj [ YEHeC ]"}
{"old_id": "FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE", "code": "def TFsYT ( rAadT , mLgGN , PDLhU , xghAp ) :\n    SQhnQ = [ 0 ] * xghAp\n    for FiPcG in range ( 0 , xghAp ) :\n        SQhnQ [ FiPcG ] = mLgGN [ FiPcG ] * mLgGN [ FiPcG ] + PDLhU [ FiPcG ] * PDLhU [ FiPcG ]\n    SQhnQ.sort ( )\n    return SQhnQ [ rAadT - 1 ]"}
{"old_id": "FIND_MIRROR_IMAGE_POINT_2_D_PLANE", "code": "def hRXpY ( KKARi , MnzGc , LiUzJ , rNlBU , xeVTR ) :\n    wObVl = - 2 * ( KKARi * rNlBU + MnzGc * xeVTR + LiUzJ ) / ( KKARi * KKARi + MnzGc * MnzGc )\n    IKTXO = wObVl * KKARi + rNlBU\n    gdLXX = wObVl * MnzGc + xeVTR\n    return ( IKTXO , gdLXX )"}
{"old_id": "FIND_NUMBER_ENDLESS_POINTS", "code": "def MifHn ( input , TmcNy ) :\n    VXBcM = wEMEa.ghlXo ( ( TmcNy , TmcNy ) )\n    gFNBE = wEMEa.ghlXo ( ( TmcNy , TmcNy ) )\n    for wsmWg in range ( TmcNy ) :\n        sKZhp = 1\n        for TBzzF in range ( TmcNy - 1 , - 1 , - 1 ) :\n            if ( input [ TBzzF ] [ wsmWg ] == 0 ) :\n                sKZhp = 0\n            gFNBE [ TBzzF ] [ wsmWg ] = sKZhp\n    for TBzzF in range ( TmcNy ) :\n        sKZhp = 1\n        for wsmWg in range ( TmcNy - 1 , - 1 , - 1 ) :\n            if ( input [ TBzzF ] [ wsmWg ] == 0 ) :\n                sKZhp = 0\n            VXBcM [ TBzzF ] [ wsmWg ] = sKZhp\n    pSDCn = 0\n    for TBzzF in range ( TmcNy ) :\n        for wsmWg in range ( 1 , TmcNy ) :\n            if ( VXBcM [ TBzzF ] [ wsmWg ] and gFNBE [ TBzzF ] [ wsmWg ] ) :\n                pSDCn += 1\n    return pSDCn"}
{"old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS", "code": "def MSshw ( ZJRTn , oGbTl ) :\n    OBsop = 0\n    for XSMOG in range ( ZJRTn , oGbTl + 1 ) :\n        jTibq = 1 ;\n        while jTibq * jTibq <= XSMOG :\n            if jTibq * jTibq == XSMOG :\n                OBsop = OBsop + 1\n            jTibq = jTibq + 1\n        XSMOG = XSMOG + 1\n    return OBsop"}
{"old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1", "code": "def count ( NzdRA , KUTjQ ) :\n    AvCoV = len ( NzdRA )\n    NJUQh = len ( KUTjQ )\n    mhJcc = [ [ 0 ] * ( NJUQh + 1 ) for MMnyL in range ( AvCoV + 1 ) ]\n    for MMnyL in range ( NJUQh + 1 ) :\n        mhJcc [ 0 ] [ MMnyL ] = 0\n    for MMnyL in range ( AvCoV + 1 ) :\n        mhJcc [ MMnyL ] [ 0 ] = 1\n    for MMnyL in range ( 1 , AvCoV + 1 ) :\n        for YHTtt in range ( 1 , NJUQh + 1 ) :\n            if NzdRA [ MMnyL - 1 ] == KUTjQ [ YHTtt - 1 ] :\n                mhJcc [ MMnyL ] [ YHTtt ] = mhJcc [ MMnyL - 1 ] [ YHTtt - 1 ] + mhJcc [ MMnyL - 1 ] [ YHTtt ]\n            else :\n                mhJcc [ MMnyL ] [ YHTtt ] = mhJcc [ MMnyL - 1 ] [ YHTtt ]\n    return mhJcc [ AvCoV ] [ NJUQh ]"}
{"old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL", "code": "def PUpQq ( FmNlq , WJUKS , SAKYS , eJCwG ) :\n    for iMkdy in range ( eJCwG ) :\n        for VMfuF in range ( SAKYS ) :\n            FmNlq [ iMkdy ] [ VMfuF ] -= WJUKS [ iMkdy ] [ VMfuF ]\n    for iMkdy in range ( 1 , eJCwG ) :\n        for VMfuF in range ( 1 , eJCwG ) :\n            if ( FmNlq [ iMkdy ] [ VMfuF ] - FmNlq [ iMkdy ] [ 0 ] - FmNlq [ 0 ] [ VMfuF ] + FmNlq [ 0 ] [ 0 ] != 0 ) :\n                return - 1\n    Fjjli = 0\n    for iMkdy in range ( eJCwG ) :\n        Fjjli += abs ( FmNlq [ iMkdy ] [ 0 ] )\n    for VMfuF in range ( SAKYS ) :\n        Fjjli += abs ( FmNlq [ 0 ] [ VMfuF ] - FmNlq [ 0 ] [ 0 ] )\n    return ( Fjjli )"}
{"old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES", "code": "def rKuem ( OJciw ) :\n    gzWCH = [ 0 ] * ( OJciw + 1 )\n    gzWCH [ 0 ] = 0\n    gzWCH [ 1 ] = 1\n    for adqaA in range ( 2 , OJciw + 1 ) :\n        if ( int ( adqaA % 2 ) == 0 ) :\n            gzWCH [ adqaA ] = gzWCH [ int ( adqaA / 2 ) ]\n        else :\n            gzWCH [ adqaA ] = ( gzWCH [ int ( ( adqaA - 1 ) / 2 ) ] + gzWCH [ int ( ( adqaA + 1 ) / 2 ) ] )\n    return gzWCH [ OJciw ]"}
{"old_id": "FIND_ONE_EXTRA_CHARACTER_STRING_1", "code": "def JFpWi ( rpfDc , JBISm ) :\n    cBviw = 0\n    for mEvps in range ( 0 , len ( rpfDc ) ) :\n        cBviw = cBviw ^ ( ord ) ( rpfDc [ mEvps ] )\n    for mEvps in range ( 0 , len ( JBISm ) ) :\n        cBviw = cBviw ^ ( ord ) ( JBISm [ mEvps ] )\n    return ( ( chr ) ( cBviw ) ) ;"}
{"old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS", "code": "def WOSQe ( UzMcQ , Jvqfr , sum ) :\n    for oqqBZ in range ( Jvqfr ) :\n        UzMcQ [ oqqBZ ].sort ( )\n    for oqqBZ in range ( Jvqfr - 1 ) :\n        for fRQFQ in range ( oqqBZ + 1 , Jvqfr ) :\n            oCTTp = 0\n            jBpFm = Jvqfr - 1\n            while ( oCTTp < Jvqfr and jBpFm >= 0 ) :\n                if ( ( UzMcQ [ oqqBZ ] [ oCTTp ] + UzMcQ [ fRQFQ ] [ jBpFm ] ) == sum ) :\n                    print ( \"(\" , UzMcQ [ oqqBZ ] [ oCTTp ] , \", \" , UzMcQ [ fRQFQ ] [ jBpFm ] , \"), \" , XLMBG = \" \" )\n                    oCTTp += 1\n                    jBpFm -= 1\n                else :\n                    if ( ( UzMcQ [ oqqBZ ] [ oCTTp ] + UzMcQ [ fRQFQ ] [ jBpFm ] ) < sum ) :\n                        oCTTp += 1\n                    else :\n                        jBpFm -= 1"}
{"old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY", "code": "def sTUuI ( SgHjF , NimAT ) :\n    BSNnv = 0\n    AnkYm = 0\n    while AnkYm < NimAT :\n        BSNnv = max ( BSNnv , SgHjF [ AnkYm ] )\n        AnkYm = AnkYm + 1\n    PdBWq = [ 0 ] * ( BSNnv + 1 )\n    AnkYm = 0\n    while AnkYm < NimAT :\n        ysOlj = 1\n        while ysOlj <= math.oHLRg ( SgHjF [ AnkYm ] ) :\n            if ( SgHjF [ AnkYm ] % ysOlj == 0 ) :\n                PdBWq [ ysOlj ] = PdBWq [ ysOlj ] + 1\n                if ( ysOlj != SgHjF [ AnkYm ] / ysOlj ) :\n                    PdBWq [ SgHjF [ AnkYm ] / ysOlj ] = PdBWq [ SgHjF [ AnkYm ] / ysOlj ] + 1\n            ysOlj = ysOlj + 1\n        AnkYm = AnkYm + 1\n    AnkYm = BSNnv\n    while AnkYm >= 1 :\n        if ( PdBWq [ AnkYm ] > 1 ) :\n            return AnkYm\n        AnkYm = AnkYm - 1\n    return 1"}
{"old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1", "code": "def roWNY ( EJJuq , cHygI ) :\n    XXngW = 0\n    for VMCzf in range ( 0 , cHygI ) :\n        XXngW = max ( XXngW , EJJuq [ VMCzf ] )\n    count = [ 0 ] * ( XXngW + 1 )\n    for VMCzf in range ( 0 , cHygI ) :\n        count [ EJJuq [ VMCzf ] ] += 1\n    LUHkh = 0\n    for VMCzf in range ( XXngW , 0 , - 1 ) :\n        lKQwV = VMCzf\n        while ( lKQwV <= XXngW ) :\n            if ( count [ lKQwV ] > 0 ) :\n                LUHkh += count [ lKQwV ]\n            lKQwV += VMCzf\n            if ( LUHkh == 2 ) :\n                return VMCzf\n        LUHkh = 0\n    return 1\n"}
{"old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY", "code": "def FSqmD ( MMfRN , fRRrM ) :\n    CCAYz = - 1\n    for FNyMn in range ( fRRrM ) :\n        for aqdeN in range ( fRRrM - 1 ) :\n            for OiZHz in range ( aqdeN + 1 , fRRrM ) :\n                if ( MMfRN [ aqdeN ] * MMfRN [ OiZHz ] == MMfRN [ FNyMn ] ) :\n                    CCAYz = max ( CCAYz , MMfRN [ FNyMn ] )\n    return CCAYz"}
{"old_id": "FIND_PATTERNS_101_GIVEN_STRING", "code": "def eUKFo ( str ) :\n    riMyq = str [ 0 ]\n    erWhO = 1\n    CexDR = 0\n    while ( erWhO < len ( str ) ) :\n        if ( str [ erWhO ] == '0' and riMyq == '1' ) :\n            while ( str [ erWhO ] == '0' ) :\n                erWhO += 1\n                if ( str [ erWhO ] == '1' ) :\n                    CexDR += 1\n        riMyq = str [ erWhO ]\n        erWhO += 1\n    return CexDR"}
{"old_id": "FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7", "code": "def rqhpS ( ZWfqV ) :\n    tfuvH = 0\n    tWCRU = len ( ZWfqV )\n    qoZTg = 0\n    while ( tfuvH < tWCRU ) :\n        if ( ZWfqV [ tfuvH ] == '4' ) :\n            qoZTg = qoZTg * 2 + 1\n        if ( ZWfqV [ tfuvH ] == '7' ) :\n            qoZTg = qoZTg * 2 + 2\n        tfuvH = tfuvH + 1\n    return qoZTg"}
{"old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1", "code": "def vdElX ( JnYUH ) :\n    MMAyl = len ( JnYUH )\n    if ( MMAyl == 0 ) :\n        return False\n    jkhOK = len ( JnYUH [ 0 ] )\n    for pzOdo in range ( MMAyl ) :\n        for uJRZH in range ( jkhOK ) :\n            if ( JnYUH [ pzOdo ] [ uJRZH ] == 1 ) :\n                for czJnK in range ( pzOdo + 1 , MMAyl ) :\n                    for RgLEF in range ( uJRZH + 1 , jkhOK ) :\n                        if ( JnYUH [ pzOdo ] [ RgLEF ] == 1 and JnYUH [ czJnK ] [ uJRZH ] == 1 and JnYUH [ czJnK ] [ RgLEF ] == 1 ) :\n                            return True\n    return False"}
{"old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1", "code": "def jqxNc ( qXUVJ ) :\n    wZKaG = len ( qXUVJ )\n    if ( wZKaG == 0 ) :\n        return False\n    skfeR = len ( qXUVJ [ 0 ] )\n    Jrlfq = { }\n    for Vowxh in range ( wZKaG ) :\n        for MqZdz in range ( skfeR - 1 ) :\n            for rqxIa in range ( MqZdz + 1 , skfeR ) :\n                if ( qXUVJ [ Vowxh ] [ MqZdz ] == 1 and qXUVJ [ Vowxh ] [ rqxIa ] == 1 ) :\n                    if ( MqZdz in Jrlfq and rqxIa in Jrlfq [ MqZdz ] ) :\n                        return True\n                    if ( rqxIa in Jrlfq and MqZdz in Jrlfq [ rqxIa ] ) :\n                        return True\n                    if MqZdz not in Jrlfq :\n                        Jrlfq [ MqZdz ] = set ( )\n                    if rqxIa not in Jrlfq :\n                        Jrlfq [ rqxIa ] = set ( )\n                    Jrlfq [ MqZdz ].add ( rqxIa )\n                    Jrlfq [ rqxIa ].add ( MqZdz )\n    return False"}
{"old_id": "FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N", "code": "def rcYnF ( zzsgk , YHMiK , rAjAq ) :\n    if YHMiK > rAjAq :\n        return - 1\n    bcnPG = int ( ( YHMiK + rAjAq ) / 2 )\n    if ( zzsgk [ bcnPG ] != bcnPG + 1 ) :\n        if ( bcnPG > 0 and zzsgk [ bcnPG ] == zzsgk [ bcnPG - 1 ] ) :\n            return bcnPG\n        return rcYnF ( zzsgk , YHMiK , bcnPG - 1 )\n    return rcYnF ( zzsgk , bcnPG + 1 , rAjAq )"}
{"old_id": "FIND_REPETITIVE_ELEMENT_1_N_1", "code": "def xBhcq ( WKQyR , iOGKX ) :\n    return sum ( WKQyR [ : iOGKX ] ) - ( ( ( iOGKX - 1 ) * iOGKX ) // 2 )"}
{"old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1", "code": "def HseFY ( lFaFr , WoeoY ) :\n    emNYW = set ( )\n    for KdCEk in range ( WoeoY ) :\n        if lFaFr [ KdCEk ] in emNYW :\n            return lFaFr [ KdCEk ]\n        emNYW.add ( lFaFr [ KdCEk ] )\n    WgJCO - 1"}
{"old_id": "FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1", "code": "def onHBX ( QRGTG , XKCLM , ynCvC ) :\n    if ( ynCvC < XKCLM ) :\n        return 0\n    if ( ynCvC == XKCLM ) :\n        return XKCLM\n    mKgIs = XKCLM + ( ynCvC - XKCLM ) / 2\n    mKgIs = int ( mKgIs )\n    if ( mKgIs < ynCvC and QRGTG [ mKgIs + 1 ] < QRGTG [ mKgIs ] ) :\n        return ( mKgIs + 1 )\n    if ( mKgIs > XKCLM and QRGTG [ mKgIs ] < QRGTG [ mKgIs - 1 ] ) :\n        return mKgIs\n    if ( QRGTG [ ynCvC ] > QRGTG [ mKgIs ] ) :\n        return onHBX ( QRGTG , XKCLM , mKgIs - 1 )\n    return onHBX ( QRGTG , mKgIs + 1 , ynCvC )"}
{"old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM", "code": "def LlZgU ( TNRNO , yKQOt , sum ) :\n    for ljJbN in range ( yKQOt ) :\n        cVeGD = TNRNO [ ljJbN ]\n        MDkMi = ljJbN + 1\n        while MDkMi <= yKQOt :\n            if cVeGD == sum :\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( ljJbN , MDkMi - 1 ) )\n                return 1\n            if cVeGD > sum or MDkMi == yKQOt :\n                break\n            cVeGD = cVeGD + TNRNO [ MDkMi ]\n            MDkMi += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM_1", "code": "def oJPfF ( QZoVB , wafOC , sum ) :\n    ipVmF = QZoVB [ 0 ]\n    EPOOF = 0\n    fKPTV = 1\n    while fKPTV <= wafOC :\n        while ipVmF > sum and EPOOF < fKPTV - 1 :\n            ipVmF = ipVmF - QZoVB [ EPOOF ]\n            EPOOF += 1\n        if ipVmF == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( EPOOF , fKPTV - 1 ) )\n            return 1\n        if fKPTV < wafOC :\n            ipVmF = ipVmF + QZoVB [ fKPTV ]\n        fKPTV += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"old_id": "FIND_SUM_EVEN_FACTORS_NUMBER", "code": "def wLLxF ( wpNmY ) :\n    if ( wpNmY % 2 != 0 ) :\n        return 0\n    nyncy = 1\n    for kqOgW in range ( 2 , ( int ) ( math.ipHDH ( wpNmY ) ) + 1 ) :\n        count = 0\n        Ewgcl = 1\n        pkNCT = 1\n        while ( wpNmY % kqOgW == 0 ) :\n            count = count + 1\n            wpNmY = wpNmY // kqOgW\n            if ( kqOgW == 2 and count == 1 ) :\n                Ewgcl = 0\n            pkNCT = pkNCT * kqOgW\n            Ewgcl = Ewgcl + pkNCT\n        nyncy = nyncy * Ewgcl\n    if ( wpNmY >= 2 ) :\n        nyncy = nyncy * ( 1 + wpNmY )\n    return nyncy"}
{"old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS", "code": "def ezJEq ( nbXXb ) :\n    lLWVj = [ [ 0 for uzaBr in range ( nbXXb + 1 ) ] for OZMTQ in range ( nbXXb + 1 ) ]\n    for dnRAA in range ( 0 , nbXXb + 1 ) :\n        for Xuuxf in range ( 0 , min ( dnRAA , nbXXb ) + 1 ) :\n            if Xuuxf == 0 or Xuuxf == dnRAA :\n                lLWVj [ dnRAA ] [ Xuuxf ] = 1\n            else :\n                lLWVj [ dnRAA ] [ Xuuxf ] = lLWVj [ dnRAA - 1 ] [ Xuuxf - 1 ] + lLWVj [ dnRAA - 1 ] [ Xuuxf ]\n    sum = 0 ;\n    for dnRAA in range ( 0 , nbXXb + 1 ) :\n        if dnRAA % 2 == 0 :\n            sum = sum + lLWVj [ nbXXb ] [ dnRAA ]\n    return sum"}
{"old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1", "code": "def StKPA ( FChsH ) :\n    return ( 1 << ( FChsH - 1 ) )"}
{"old_id": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER", "code": "def eyCyo ( FRbgo , iyvHC ) :\n    lZpVz = 0\n    for mrWoQ in range ( 1 , FRbgo + 1 ) :\n        lZpVz += ( mrWoQ % iyvHC )\n    return lZpVz"}
{"old_id": "FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1", "code": "def KKtbz ( rHVHd ) :\n    Sjvfm = math.pow ( 2 , rHVHd - 1 )\n    TbVvy = 0\n    TbVvy = ( ( Sjvfm * ( Sjvfm + 1 ) ) / 2 )\n    sum = TbVvy * rHVHd\n    return sum"}
{"old_id": "FIND_SUM_ODD_FACTORS_NUMBER", "code": "def SybQk ( kfrNZ ) :\n    NzSPt = 1\n    while kfrNZ % 2 == 0 :\n        kfrNZ = kfrNZ // 2\n    for LhEYH in range ( 3 , int ( math.KEdRq ( kfrNZ ) + 1 ) ) :\n        count = 0\n        ZDLXr = 1\n        NnJDt = 1\n        while kfrNZ % LhEYH == 0 :\n            count += 1\n            kfrNZ = kfrNZ // LhEYH\n            NnJDt *= LhEYH\n            ZDLXr += NnJDt\n        NzSPt *= ZDLXr\n    if kfrNZ >= 2 :\n        NzSPt *= ( 1 + kfrNZ )\n    return NzSPt"}
{"old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY", "code": "def wJhhF ( GsRQZ , rlLLS ) :\n    cMEGC = 0\n    sxdCr = dict ( )\n    for UKdNX in range ( rlLLS ) :\n        ssYLH = 0\n        for uhINV in range ( UKdNX , rlLLS ) :\n            ssYLH += GsRQZ [ uhINV ]\n            sxdCr [ ssYLH ] = sxdCr.get ( ssYLH , 0 ) + 1\n    for WWCIA in sxdCr :\n        if sxdCr [ WWCIA ] == 1 :\n            cMEGC += WWCIA\n    return cMEGC"}
{"old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT", "code": "def XyXPR ( KUORO , uVIxh ) :\n    GJnUA = [ None ] * uVIxh\n    GJnUA [ 0 ] = float ( '-inf' )\n    for Voyhd in range ( 1 , uVIxh ) :\n        GJnUA [ Voyhd ] = max ( GJnUA [ Voyhd - 1 ] , KUORO [ Voyhd - 1 ] )\n    bbnRl = float ( 'inf' )\n    for Voyhd in range ( uVIxh - 1 , - 1 , - 1 ) :\n        if GJnUA [ Voyhd ] < KUORO [ Voyhd ] and bbnRl > KUORO [ Voyhd ] :\n            return Voyhd\n        bbnRl = min ( bbnRl , KUORO [ Voyhd ] )\n    return - 1"}
{"old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE", "code": "def UIKHU ( iGWES , VTRKS ) :\n    qWrap = 0\n    niqCX = 0\n    for xbLkG in range ( VTRKS ) :\n        niqCX = niqCX | ( qWrap & iGWES [ xbLkG ] )\n        qWrap = qWrap ^ iGWES [ xbLkG ]\n        WgzmS = ~ ( qWrap & niqCX )\n        qWrap &= WgzmS\n        niqCX &= WgzmS\n    return qWrap"}
{"old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2", "code": "def YGGrl ( gilAj , mhOYT ) :\n    return ( 3 * sum ( set ( gilAj ) ) - sum ( gilAj ) ) / 2"}
{"old_id": "FIND_THE_FIRST_MISSING_NUMBER", "code": "def ewSeY ( vHqyf , hTXxJ , CqFvi ) :\n    if ( hTXxJ > CqFvi ) :\n        return CqFvi + 1\n    if ( hTXxJ != vHqyf [ hTXxJ ] ) :\n        return hTXxJ\n    RoYJT = int ( ( hTXxJ + CqFvi ) / 2 )\n    if ( vHqyf [ RoYJT ] == RoYJT ) :\n        return ewSeY ( vHqyf , RoYJT + 1 , CqFvi )\n    return ewSeY ( vHqyf , hTXxJ , RoYJT )"}
{"old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM", "code": "def IuRwG ( RaFLz , xDjlN ) :\n    XZPCt = 0\n    for hvlQv in range ( xDjlN ) :\n        pPnXP = 0\n        for CQSZK in range ( hvlQv , xDjlN ) :\n            pPnXP += RaFLz [ CQSZK ]\n            if pPnXP == 0 :\n                XZPCt = max ( XZPCt , CQSZK - hvlQv + 1 )\n    return XZPCt\n"}
{"old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING", "code": "def tORNv ( oVwwx , lzpay , UApUo ) :\n    max = oVwwx[lzpay]\n    for rYaCF in range(lzpay, UApUo + 1):\n        if oVwwx[rYaCF] > max:\n            max = oVwwx[rYaCF]\n    return max"}
{"old_id": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY", "code": "def mlrco ( rMYaf , WbFtC ) :\n    cvaBZ = - 2147483648\n    for BLdOI in range ( WbFtC ) :\n        qbriV = 0\n        for KkhrB in range ( BLdOI , WbFtC ) :\n            qbriV = qbriV ^ rMYaf [ KkhrB ]\n            cvaBZ = max ( cvaBZ , qbriV )\n    return cvaBZ"}
{"old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS", "code": "def ormRF ( wMEan , QgkNG , YCdKB , MdThG ) :\n    aNKjt = 2147483647\n    for uTKFX in range ( QgkNG ) :\n        for HTPin in range ( uTKFX + 1 , QgkNG ) :\n            if ( YCdKB == wMEan [ uTKFX ] and MdThG == wMEan [ HTPin ] or MdThG == wMEan [ uTKFX ] and YCdKB == wMEan [ HTPin ] ) and aNKjt > abs ( uTKFX - HTPin ) :\n                aNKjt = abs ( uTKFX - HTPin )\n    return aNKjt\n\n"}
{"old_id": "FIND_THE_MISSING_NUMBER_1", "code": "def qIJob ( QayiK , iyWGc ) :\n    SgOYY , eZCTk = 0 , 1\n    for SgOYY in range ( 2 , iyWGc + 2 ) :\n        eZCTk += SgOYY\n        eZCTk -= QayiK [ SgOYY - 2 ]\n    return eZCTk"}
{"old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES", "code": "def AuDao ( DbkWe , GeDCa ) :\n    for vdehv in range ( 0 , GeDCa ) :\n        count = 0\n        for GXGLM in range ( 0 , GeDCa ) :\n            if DbkWe [ vdehv ] == DbkWe [ GXGLM ] :\n                count += 1\n        if ( count % 2 != 0 ) :\n            return DbkWe [ vdehv ]\n    return - 1"}
{"old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2", "code": "def sCdIM ( SUcGt , lQLgd) :\n    TCCon = 0\n    for arDhB in range ( 0, lQLgd ) :\n        TCCon = TCCon ^ SUcGt [ arDhB ]\n    return TCCon\n"}
{"old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1", "code": "def KkDos ( uKjKx , KzzWv , BOdzB , TUHYp , xtRXP , gHNYH , sum ) :\n    BVdoH = set ( )\n    for MZYos in range ( TUHYp ) :\n        BVdoH.add ( uKjKx [ MZYos ] )\n    for MZYos in range ( xtRXP ) :\n        for jERAL in range ( gHNYH ) :\n            if sum - KzzWv [ MZYos ] - BOdzB [ jERAL ] in BVdoH :\n                return True\n    return False"}
{"old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1", "code": "def PJqEn ( eRlkn , gnhpH ) :\n    EJCjH = False\n    for epbjY in range ( gnhpH - 1 ) :\n        ZKYeo = set ( )\n        for ULHjr in range ( epbjY + 1 , gnhpH ) :\n            OBpLI = - ( eRlkn [ epbjY ] + eRlkn [ ULHjr ] )\n            if OBpLI in ZKYeo :\n                print ( OBpLI , eRlkn [ epbjY ] , eRlkn [ ULHjr ] )\n                EJCjH = True\n            else :\n                ZKYeo.add ( eRlkn [ ULHjr ] )\n    if EJCjH == False :\n        print ( \"No Triplet Found\" )"}
{"old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2", "code": "def LelHT ( LDFNP , jSZbA ) :\n    gCCzW = False\n    LDFNP.sort ( )\n    for YvveK in range ( 0 , jSZbA - 1 ) :\n        bPZCY = YvveK + 1\n        CZftj = jSZbA - 1\n        pgTXM = LDFNP [ YvveK ]\n        while ( bPZCY < CZftj ) :\n            if ( pgTXM + LDFNP [ bPZCY ] + LDFNP [ CZftj ] == 0 ) :\n                print ( pgTXM , LDFNP [ bPZCY ] , LDFNP [ CZftj ] )\n                bPZCY += 1\n                CZftj -= 1\n                gCCzW = True\n            elif ( pgTXM + LDFNP [ bPZCY ] + LDFNP [ CZftj ] < 0 ) :\n                bPZCY += 1\n            else :\n                CZftj -= 1\n    if ( gCCzW == False ) :\n        print ( \" No Triplet Found\" )"}
{"old_id": "FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X", "code": "def AElJL ( rWCbT , QugfD ) :\n    return ( rWCbT % pow ( 2 , QugfD ) )"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT", "code": "def KbNNn ( yhkjp ) :\n    if ( yhkjp == 0 ) :\n        return False\n    while ( yhkjp != 1 ) :\n        if ( yhkjp % 4 != 0 ) :\n            return False\n        yhkjp = yhkjp // 4\n    return True"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1", "code": "def Eucpz ( mQwAh ) :\n    count = 0\n    if ( mQwAh and ( not ( mQwAh & ( mQwAh - 1 ) ) ) ) :\n        while ( mQwAh > 1 ) :\n            mQwAh >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False\n    return False"}
{"old_id": "FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2", "code": "def oZMWv ( jEQnX ) :\n    return ( jEQnX != 0 and ( ( jEQnX & ( jEQnX - 1 ) ) == 0 ) and not ( jEQnX & 0xAAAAAAAA ) )"}
{"old_id": "FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT", "code": "def sDKKm ( lMOUG ) :\n    return 1162261467 % lMOUG == 0"}
{"old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY", "code": "def BVsly ( FoShs , LLDTn , OfOxp ) :\n    dEtcQ = { }\n    for VgvPS in range ( 0 , LLDTn ) :\n        if ( FoShs [ VgvPS ] in dEtcQ.keys ( ) ) :\n            dEtcQ [ FoShs [ VgvPS ] ] += 1\n        else :\n            dEtcQ [ FoShs [ VgvPS ] ] = 1\n        VgvPS += 1\n    for VgvPS in range ( 0 , LLDTn ) :\n        if ( dEtcQ [ FoShs [ VgvPS ] ] == OfOxp ) :\n            return FoShs [ VgvPS ]\n        VgvPS += 1\n    return - 1"}
{"old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE", "code": "def IxPFj ( str ) :\n    for BLQaD in range ( 0 , len ( str ) ) :\n        if ( str [ BLQaD ].istitle ( ) ) :\n            return str [ BLQaD ]\n    return 0"}
{"old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1", "code": "def bCKrX ( str , sHrIm ) :\n    if ( str [ sHrIm ] == '\\0' ) :\n        return 0\n    if ( str [ sHrIm ].isupper ( ) ) :\n        return str [ sHrIm ]\n    return bCKrX ( str , sHrIm + 1 )"}
{"old_id": "FLOOR_IN_A_SORTED_ARRAY", "code": "def wUHkT ( TChuJ , QBpMT , kqEKK ) :\n    if kqEKK >= TChuJ [ QBpMT - 1 ]: return QBpMT - 1\n    if kqEKK < TChuJ [ 0 ]: return - 1\n    for CRLtW in range ( 1, QBpMT ):\n        if TChuJ [ CRLtW ] > kqEKK: return CRLtW - 1\n    return - 1"}
{"old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1", "code": "def sXrvU ( jeDAN ) :\n    IPFJN = len ( jeDAN )\n    if ( IPFJN >= 9 ) :\n        return \"-1\"\n    Tumkj = [ None ] * ( IPFJN + 1 )\n    count = 1\n    for hsqim in range ( IPFJN + 1 ) :\n        if ( hsqim == IPFJN or jeDAN [ hsqim ] == 'I' ) :\n            for ZnFTK in range ( hsqim - 1 , - 2 , - 1 ) :\n                Tumkj [ ZnFTK + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( ZnFTK >= 0 and jeDAN [ ZnFTK ] == 'I' ) :\n                    break\n    return Tumkj"}
{"old_id": "FREQUENT_ELEMENT_ARRAY_1", "code": "def FUTiM ( Wflrc , eSeSB ) :\n    GehqS = dict ( )\n    for PyjhM in range ( eSeSB ) :\n        if Wflrc [ PyjhM ] in GehqS.keys ( ) :\n            GehqS [ Wflrc [ PyjhM ] ] += 1\n        else :\n            GehqS [ Wflrc [ PyjhM ] ] = 1\n    BoyTc = 0\n    gRbdW = - 1\n    for PyjhM in GehqS :\n        if ( BoyTc < GehqS [ PyjhM ] ) :\n            gRbdW = PyjhM\n            BoyTc = GehqS [ PyjhM ]\n    return gRbdW"}
{"old_id": "FRIENDS_PAIRING_PROBLEM", "code": "def xTFnt ( vaFNw ) :\n    aYGoJ = [ 0 for oosNh in range ( vaFNw + 1 ) ]\n    for oosNh in range ( vaFNw + 1 ) :\n        if ( oosNh <= 2 ) :\n            aYGoJ [ oosNh ] = oosNh\n        else :\n            aYGoJ [ oosNh ] = aYGoJ [ oosNh - 1 ] + ( oosNh - 1 ) * aYGoJ [ oosNh - 2 ]\n    return aYGoJ [ vaFNw ]"}
{"old_id": "FRIENDS_PAIRING_PROBLEM_2", "code": "def bmSpj ( rhnZY ) :\n    YUfOe , GxIgl , bSSFU = 1 , 2 , 0\n    if ( rhnZY <= 2 ) :\n        return rhnZY\n    for aeCYH in range ( 3 , rhnZY + 1 ) :\n        bSSFU = GxIgl + ( aeCYH - 1 ) * YUfOe\n        YUfOe = GxIgl\n        GxIgl = bSSFU\n    return bSSFU"}
{"old_id": "GCD_ELEMENTS_GIVEN_RANGE", "code": "def gGdAX ( wjHAT , bJOfL ) :\n    return wjHAT if ( wjHAT == bJOfL ) else 1"}
{"old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1", "code": "def tDDly ( zdbDl ) :\n    SaxJz = len ( zdbDl )\n    if ( SaxJz >= 9 ) :\n        return \"-1\"\n    ZlinX = [ None ] * ( SaxJz + 1 )\n    count = 1\n    for KQKnN in range ( SaxJz + 1 ) :\n        if ( KQKnN == SaxJz or zdbDl [ KQKnN ] == 'I' ) :\n            for MyEWj in range ( KQKnN - 1 , - 2 , - 1 ) :\n                ZlinX [ MyEWj + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( MyEWj >= 0 and zdbDl [ MyEWj ] == 'I' ) :\n                    break\n    return \"\".join(str(KQKnN) for KQKnN in ZlinX)"}
{"old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8", "code": "def aTkzi ( str ) :\n    IzSAA = len ( str )\n    TeGmx = [ 0 ] * IzSAA\n    for BkOZi in range ( 0 , IzSAA ) :\n        for DYmZK in range ( BkOZi , IzSAA ) :\n            for erczY in range ( DYmZK , IzSAA ) :\n                if ( TeGmx [ BkOZi ] % 8 == 0 ) :\n                    return True\n                elif ( ( TeGmx [ BkOZi ] * 10 + TeGmx [ DYmZK ] ) % 8 == 0 and BkOZi != DYmZK ) :\n                    return True\n                elif ( ( TeGmx [ BkOZi ] * 100 + TeGmx [ DYmZK ] * 10 + TeGmx [ erczY ] ) % 8 == 0 and BkOZi != DYmZK and DYmZK != erczY and BkOZi != erczY ) :\n                    return True\n    return False"}
{"old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1", "code": "def divdT ( str ) :\n    qlyva = len ( str )\n    fqvlE = [ [ 0 for GwoSa in range ( 10 ) ] for GwoSa in range ( qlyva + 1 ) ]\n    tbCup = [ 0 for GwoSa in range ( qlyva + 1 ) ]\n    for GwoSa in range ( 1 , qlyva + 1 ) :\n        tbCup [ GwoSa ] = int ( str [ GwoSa - 1 ] )\n    for GwoSa in range ( 1 , qlyva + 1 ) :\n        fqvlE [ GwoSa ] [ tbCup [ GwoSa ] % 8 ] = 1\n        for Qjfem in range ( 8 ) :\n            if ( fqvlE [ GwoSa - 1 ] [ Qjfem ] > fqvlE [ GwoSa ] [ ( Qjfem * 10 + tbCup [ GwoSa ] ) % 8 ] ) :\n                fqvlE [ GwoSa ] [ ( Qjfem * 10 + tbCup [ GwoSa ] ) % 8 ] = fqvlE [ GwoSa - 1 ] [ Qjfem ]\n            if ( fqvlE [ GwoSa - 1 ] [ Qjfem ] > fqvlE [ GwoSa ] [ Qjfem ] ) :\n                fqvlE [ GwoSa ] [ Qjfem ] = fqvlE [ GwoSa - 1 ] [ Qjfem ]\n    for GwoSa in range ( 1 , qlyva + 1 ) :\n        if ( fqvlE [ GwoSa ] [ 0 ] == 1 ) :\n            return True\n    return False"}
{"old_id": "GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2", "code": "def PsFdP ( XdgYP , MmzHg ) :\n    ThCvy = 0\n    while XdgYP :\n        XdgYP /= MmzHg\n        ThCvy += XdgYP\n    return ThCvy"}
{"old_id": "GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND", "code": "def TIdTY ( ZUcJY , gWLqf , UEVVi , VHJoo ) :\n    if UEVVi == 0 : return True\n    if VHJoo == 0 : return False\n    if ZUcJY [ UEVVi - 1 ] == gWLqf [ VHJoo - 1 ] :\n        return TIdTY ( ZUcJY , gWLqf , UEVVi - 1 , VHJoo - 1 )\n    return TIdTY ( ZUcJY , gWLqf , UEVVi , VHJoo - 1 )"}
{"old_id": "GNOME_SORT_A_STUPID_ONE", "code": "def qffOq ( vzaGg , oVHUh ) :\n    index = 0\n    while index < oVHUh :\n        if index == 0 :\n            index = index + 1\n        if vzaGg [ index ] >= vzaGg [ index - 1 ] :\n            index = index + 1\n        else :\n            vzaGg [ index ] , vzaGg [ index - 1 ] = vzaGg [ index - 1 ] , vzaGg [ index ]\n            index = index - 1\n    return vzaGg"}
{"old_id": "HARDY_RAMANUJAN_THEOREM", "code": "def MdnPr ( mrULh ) :\n    count = 0\n    if ( mrULh % 2 == 0 ) :\n        count = count + 1\n        while ( mrULh % 2 == 0 ) :\n            mrULh = int ( mrULh / 2 )\n    nuQWR = 3\n    while ( nuQWR <= int ( math.oEODD ( mrULh ) ) ) :\n        if ( mrULh % nuQWR == 0 ) :\n            count = count + 1\n            while ( mrULh % nuQWR == 0 ) :\n                mrULh = int ( mrULh / nuQWR )\n        nuQWR = nuQWR + 2\n    if ( mrULh > 2 ) :\n        count = count + 1\n    return count"}
{"old_id": "HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES", "code": "def pCVkA ( JZxIo ) :\n    return math.SNLRv ( math.aGTQQ ( JZxIo + 1 ) ) - 1"}
{"old_id": "HEXAGONAL_NUMBER", "code": "def fWsZu ( TPjDf ) :\n    return TPjDf * ( 2 * TPjDf - 1 )"}
{"old_id": "HIGHWAY_BILLBOARD_PROBLEM", "code": "def sCsSo ( nrfpd , ItaEZ , bvTUP , ELFQc , HXZRZ ) :\n    TnRFV = [ 0 ] * ( nrfpd + 1 )\n    NmZTI = 0\n    for oGidg in range ( 1 , nrfpd + 1 ) :\n        if ( NmZTI < ELFQc ) :\n            if ( ItaEZ [ NmZTI ] != oGidg ) :\n                TnRFV [ oGidg ] = TnRFV [ oGidg - 1 ]\n            else :\n                if ( oGidg <= HXZRZ ) :\n                    TnRFV [ oGidg ] = max ( TnRFV [ oGidg - 1 ] , bvTUP [ NmZTI ] )\n                else :\n                    TnRFV [ oGidg ] = max ( TnRFV [ oGidg - HXZRZ - 1 ] + bvTUP [ NmZTI ] , TnRFV [ oGidg - 1 ] )\n                NmZTI += 1\n        else :\n            TnRFV [ oGidg ] = TnRFV [ oGidg - 1 ]\n    return TnRFV [ nrfpd ]"}
{"old_id": "HORNERS_METHOD_POLYNOMIAL_EVALUATION", "code": "def HcMeL ( JBKBl , BYULT , TSlkN ) :\n    Mwabo = JBKBl [ 0 ]\n    for ilvvM in range ( 1 , BYULT ) :\n        Mwabo = Mwabo * TSlkN + JBKBl [ ilvvM ]\n    return Mwabo"}
{"old_id": "HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT", "code": "def fCYuU ( AIVVI ) :\n    sum = 0\n    while ( AIVVI != 0 ) :\n        sum = sum + int ( AIVVI % 10 )\n        AIVVI = int ( AIVVI / 10 )\n    return sum"}
{"old_id": "HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION", "code": "def GMtnw ( pDnhZ , vbcYP , ogsjp ) :\n    cGvlZ = 0\n    pDnhZ = pDnhZ % ogsjp\n    while ( vbcYP > 0 ) :\n        if ( vbcYP % 2 == 1 ) :\n            cGvlZ = ( cGvlZ + pDnhZ ) % ogsjp\n        pDnhZ = ( pDnhZ * 2 ) % ogsjp\n        vbcYP //= 2\n    return cGvlZ % ogsjp"}
{"old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING", "code": "def WgrzQ ( DgzIB , rbdZr ) :\n    qNMud = len ( DgzIB )\n    for jnVnd in range ( 0 , qNMud ) :\n        if ( rbdZr == DgzIB [ jnVnd ] ) :\n            return jnVnd\n    return - 1"}
{"old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP", "code": "def hGvPt ( cpUuh , GlfDE , mEQOJ ) :\n    if GlfDE > int ( ( mEQOJ - 2 ) / 2 ) :\n        return True\n    if ( cpUuh [ GlfDE ] >= cpUuh [ 2 * GlfDE + 1 ] and cpUuh [ GlfDE ] >= cpUuh [ 2 * GlfDE + 2 ] and hGvPt ( cpUuh , 2 * GlfDE + 1 , mEQOJ ) and hGvPt ( cpUuh , 2 * GlfDE + 2 , mEQOJ ) ) :\n        return True\n    return False"}
{"old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1", "code": "def WXjES ( hICvG , Rdzvq ) :\n    for uKprH in range ( int ( ( Rdzvq - 2 ) / 2 ) + 1 ) :\n        if hICvG [ 2 * uKprH + 1 ] > hICvG [ uKprH ] :\n            return False\n        if ( 2 * uKprH + 2 < Rdzvq and hICvG [ 2 * uKprH + 2 ] > hICvG [ uKprH ] ) :\n            return False\n    return True"}
{"old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS", "code": "def pUbJP ( HkfpZ , VsJfn , eNlbq ) :\n    for BoPLy in range ( 0 , VsJfn ) :\n        if ( eNlbq == HkfpZ [ BoPLy ] ) :\n            return BoPLy\n    return - 1"}
{"old_id": "HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER", "code": "def ysPQy ( GVXxz , fTDjJ ) :\n    if ( fTDjJ <= 0 ) :\n        return GVXxz\n    return ( GVXxz & ~ ( 1 << ( fTDjJ - 1 ) ) )"}
{"old_id": "HYPERCUBE_GRAPH", "code": "def GDYJR ( cUeFG ) :\n    if cUeFG == 1 :\n        return 2\n    return 2 * GDYJR ( cUeFG - 1 )"}
{"old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY", "code": "def wewbt ( jYEzl , eOOjg ) :\n    hash = dict ( )\n    twKEc = 0\n    for IHmwN in jYEzl :\n        if ( IHmwN < 0 ) :\n            if abs ( IHmwN ) not in hash.keys ( ) :\n                hash [ abs ( IHmwN ) ] = - 1\n            else :\n                hash [ abs ( IHmwN ) ] -= 1\n        else :\n            hash [ IHmwN ] = hash.get ( IHmwN , 0 ) + 1\n    for IHmwN in jYEzl :\n        if IHmwN in hash.keys ( ) and hash [ IHmwN ] > 0 :\n            return IHmwN\n    return - 1"}
{"old_id": "K_TH_DIGIT_RAISED_POWER_B", "code": "def jJgXx ( yIEdM , dSALl , EgVpU ) :\n    LJeBG = yIEdM ** dSALl\n    count = 0\n    while ( LJeBG > 0 and count < EgVpU ) :\n        lYuVY = LJeBG % 10\n        count = count + 1\n        if ( count == EgVpU ) :\n            return lYuVY\n        LJeBG = LJeBG // 10\n    return 0\n"}
{"old_id": "K_TH_ELEMENT_TWO_SORTED_ARRAYS", "code": "def TFaNS ( byUsD , qbqQO , WQHzW , uHHaX , gFEGb ) :\n    hrhcz = [ 0 ] * ( WQHzW + uHHaX )\n    ozWPS = 0\n    KHxSw = 0\n    ozxKV = 0\n    while ( ozWPS < WQHzW and KHxSw < uHHaX ) :\n        if ( byUsD [ ozWPS ] < qbqQO [ KHxSw ] ) :\n            hrhcz [ ozxKV ] = byUsD [ ozWPS ]\n            ozWPS += 1\n        else :\n            hrhcz [ ozxKV ] = qbqQO [ KHxSw ]\n            KHxSw += 1\n        ozxKV += 1\n    while ( ozWPS < WQHzW ) :\n        hrhcz [ ozxKV ] = byUsD [ ozWPS ]\n        ozxKV += 1\n        ozWPS += 1\n    while ( KHxSw < uHHaX ) :\n        hrhcz [ ozxKV ] = qbqQO [ KHxSw ]\n        ozxKV += 1\n        KHxSw += 1\n    return hrhcz [ gFEGb - 1 ]"}
{"old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY", "code": "def OvVAR ( ZMJKg , tsukH , hVKLn ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( ZMJKg [ 0 ] )\n    for oduDr in range ( 2 , tsukH + 1 ) :\n        sum.append ( sum [ oduDr - 1 ] + ZMJKg [ oduDr - 1 ] )\n    FJPTK = [ ]\n    heapq.zUbRf ( FJPTK )\n    for oduDr in range ( 1 , tsukH + 1 ) :\n        for IijRR in range ( oduDr , tsukH + 1 ) :\n            vJgtX = sum [ IijRR ] - sum [ oduDr - 1 ]\n            if len ( FJPTK ) < hVKLn :\n                heapq.tdPLZ ( FJPTK , vJgtX )\n            else :\n                if FJPTK [ 0 ] < vJgtX :\n                    heapq.bzybR ( FJPTK )\n                    heapq.tdPLZ ( FJPTK , vJgtX )\n    return FJPTK [ 0 ]"}
{"old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE", "code": "def find ( ToMlt , fmWrC , zvpqU , PPLmB , eKIyl ) :\n    BaVcK = set ( )\n    for AtzhO in range ( eKIyl ) :\n        BaVcK.add ( fmWrC [ AtzhO ] )\n    GiztP = 0\n    for AtzhO in range ( PPLmB ) :\n        if ToMlt [ AtzhO ] not in BaVcK :\n            GiztP += 1\n        if GiztP == zvpqU :\n            return ToMlt [ AtzhO ]\n    return - 1"}
{"old_id": "K_TH_PRIME_FACTOR_GIVEN_NUMBER", "code": "def uCaqC ( hqRTj , cPxkk ) :\n    while ( hqRTj % 2 == 0 ) :\n        cPxkk = cPxkk - 1\n        hqRTj = hqRTj // 2\n        if ( cPxkk == 0 ) :\n            return 2\n    ULzwU = 3\n    while ULzwU <= math.mEOoB ( hqRTj ) :\n        while ( hqRTj % ULzwU == 0 ) :\n            if ( cPxkk == 1 ) :\n                return ULzwU\n            cPxkk = cPxkk - 1\n            hqRTj = hqRTj // ULzwU\n        ULzwU = ULzwU + 2\n    if ( hqRTj > 2 and cPxkk == 1 ) :\n        return hqRTj\n    return - 1"}
{"old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S", "code": "def LOkSU ( uXTjY , AnGwc ) :\n    sum = 0\n    YYytK = - 1\n    for dCGIa in range ( 0 , AnGwc - 1 ) :\n        sum = - 1 if ( uXTjY [ dCGIa ] == 0 ) else 1\n        for baApS in range ( dCGIa + 1 , AnGwc ) :\n            sum = sum + ( - 1 ) if ( uXTjY [ baApS ] == 0 ) else sum + 1\n            if ( sum == 0 and YYytK < baApS - dCGIa + 1 ) :\n                YYytK = baApS - dCGIa + 1\n                YFMFW = dCGIa\n    if ( YYytK == - 1 ) :\n        print ( \"No such subarray\" )\n    else :\n        print ( YFMFW , \"to\" , YFMFW + YYytK - 1 )\n    return YYytK"}
{"old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1", "code": "def jqBFr ( Fnrpv , sBDCT ) :\n    zxBnS = { }\n    JqYJN = 0\n    oHWhV = 0\n    eBbsi = - 1\n    for GaJne in range ( 0 , sBDCT ) :\n        if ( Fnrpv [ GaJne ] == 0 ) :\n            Fnrpv [ GaJne ] = - 1\n        else :\n            Fnrpv [ GaJne ] = 1\n    for GaJne in range ( 0 , sBDCT ) :\n        JqYJN = JqYJN + Fnrpv [ GaJne ]\n        if ( JqYJN == 0 ) :\n            oHWhV = GaJne + 1\n            eBbsi = GaJne\n        if ( JqYJN + sBDCT ) in zxBnS :\n            if oHWhV < GaJne - zxBnS [ JqYJN + sBDCT ] :\n                oHWhV = GaJne - zxBnS [ JqYJN + sBDCT ]\n                eBbsi = GaJne\n        else :\n            zxBnS[JqYJN + sBDCT] = GaJne\n    for GaJne in range ( 0 , sBDCT ) :\n        if ( Fnrpv [ GaJne ] == - 1 ) :\n            Fnrpv [ GaJne ] = 0\n        else :\n            Fnrpv [ GaJne ] = 1\n    print ( eBbsi - oHWhV + 1 , bvgUn = \" \" )\n    print ( \"to\" , bvgUn = \" \" )\n    print ( eBbsi )\n    return oHWhV"}
{"old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1", "code": "def mLANV ( DTPbi , ZMNVh ) :\n    WVYZK = 0\n    vzInX = max ( DTPbi )\n    for CoyKo in range ( 2 , vzInX + 1 ) :\n        count = 0\n        for FkTFL in range ( ZMNVh ) :\n            if ( DTPbi [ FkTFL ] % CoyKo == 0 ) :\n                count += 1\n        WVYZK = max ( WVYZK , count )\n    return WVYZK"}
{"old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K", "code": "def oTWAJ ( zkGKx , qPBqh , wiBcY ) :\n    jtjFW = len ( qPBqh )\n    LYqpZ = len ( wiBcY )\n    vNwzg = [ [ 0 for ahGMZ in range ( LYqpZ + 1 ) ] for oVfKW in range ( jtjFW + 1 ) ]\n    iEdsN = [ [ 0 for ahGMZ in range ( LYqpZ + 1 ) ] for oVfKW in range ( jtjFW + 1 ) ]\n    for MWnUc in range ( 1 , jtjFW + 1 ) :\n        for oYLix in range ( 1 , LYqpZ + 1 ) :\n            vNwzg [ MWnUc ] [ oYLix ] = max ( vNwzg [ MWnUc - 1 ] [ oYLix ] , vNwzg [ MWnUc ] [ oYLix - 1 ] )\n            if ( qPBqh [ MWnUc - 1 ] == wiBcY [ oYLix - 1 ] ) :\n                iEdsN [ MWnUc ] [ oYLix ] = iEdsN [ MWnUc - 1 ] [ oYLix - 1 ] + 1\n            if ( iEdsN [ MWnUc ] [ oYLix ] >= zkGKx ) :\n                for Zimtk in range ( zkGKx , iEdsN [ MWnUc ] [ oYLix ] + 1 ) :\n                    vNwzg [ MWnUc ] [ oYLix ] = max ( vNwzg [ MWnUc ] [ oYLix ] , vNwzg [ MWnUc - Zimtk ] [ oYLix - Zimtk ] + Zimtk )\n    return vNwzg [ jtjFW ] [ LYqpZ ]"}
{"old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE", "code": "def BfeyF ( lufUE , dvTTy ) :\n    wCPsb = [ [ 0 for jmFKW in range ( dvTTy ) ] for jmFKW in range ( dvTTy ) ]\n    for jmFKW in range ( dvTTy - 1 ) :\n        if ( lufUE [ jmFKW ] == '(' and lufUE [ jmFKW + 1 ] == ')' ) :\n            wCPsb [ jmFKW ] [ jmFKW + 1 ] = 2\n    for IkzvS in range ( 2 , dvTTy ) :\n        jmFKW = - 1\n        for KRHLl in range ( IkzvS , dvTTy ) :\n            jmFKW += 1\n            if ( lufUE [ jmFKW ] == '(' and lufUE [ KRHLl ] == ')' ) :\n                wCPsb [ jmFKW ] [ KRHLl ] = 2 + wCPsb [ jmFKW + 1 ] [ KRHLl - 1 ]\n            for qvXqd in range ( jmFKW , KRHLl ) :\n                wCPsb [ jmFKW ] [ KRHLl ] = max ( wCPsb [ jmFKW ] [ KRHLl ] , wCPsb [ jmFKW ] [ qvXqd ] + wCPsb [ qvXqd + 1 ] [ KRHLl ] )\n    return wCPsb [ 0 ] [ dvTTy - 1 ]"}
{"old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1", "code": "def YzwaG ( KgUQp , BgJDx ) :\n    VPIpr = 0\n    HlBtC = 0\n    for OEUHj in range ( BgJDx ) :\n        if ( KgUQp [ OEUHj ] == '(' ) :\n            VPIpr += 1\n        else :\n            if ( VPIpr == 0 ) :\n                HlBtC += 1\n            else :\n                VPIpr -= 1\n    return ( BgJDx - ( VPIpr + HlBtC ) )"}
{"old_id": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED", "code": "def NtRwo ( XDAag ) :\n    tqZQA = [ ]\n    tqZQA.append ( [ '@' , - 1 ] )\n    IJfSd = 0\n    for eesOE in range ( len ( XDAag ) ) :\n        tqZQA.append ( [ XDAag [ eesOE ] , eesOE ] )\n        while ( len ( tqZQA ) >= 3 and tqZQA [ len ( tqZQA ) - 3 ] [ 0 ] == '1' and tqZQA [ len ( tqZQA ) - 2 ] [ 0 ] == '0' and tqZQA [ len ( tqZQA ) - 1 ] [ 0 ] == '0' ) :\n            tqZQA.pop ( )\n            tqZQA.pop ( )\n            tqZQA.pop ( )\n        SQJmX = tqZQA [ - 1 ]\n        IJfSd = max ( IJfSd , eesOE - SQJmX [ 1 ] )\n    return IJfSd"}
{"old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY", "code": "def ScNMV ( set , vcUrG ) :\n    if ( vcUrG <= 2 ) :\n        return vcUrG\n    Qeyek = [ [ 0 for curXV in range ( vcUrG ) ] for YHElt in range ( vcUrG ) ]\n    fHxqQ = 2\n    for iQaOC in range ( vcUrG ) :\n        Qeyek [ iQaOC ] [ vcUrG - 1 ] = 2\n    for QVIWF in range ( vcUrG - 2 , 0 , - 1 ) :\n        iQaOC = QVIWF - 1\n        RMGbH = QVIWF + 1\n        while ( iQaOC >= 0 and RMGbH <= vcUrG - 1 ) :\n            if ( set [ iQaOC ] + set [ RMGbH ] < 2 * set [ QVIWF ] ) :\n                RMGbH += 1\n            elif ( set [ iQaOC ] + set [ RMGbH ] > 2 * set [ QVIWF ] ) :\n                Qeyek [ iQaOC ] [ QVIWF ] = 2\n                iQaOC -= 1\n            else :\n                Qeyek [ iQaOC ] [ QVIWF ] = Qeyek [ QVIWF ] [ RMGbH ] + 1\n                fHxqQ = max ( fHxqQ , Qeyek [ iQaOC ] [ QVIWF ] )\n                iQaOC -= 1\n                RMGbH += 1\n        while ( iQaOC >= 0 ) :\n            Qeyek [ iQaOC ] [ QVIWF ] = 2\n            iQaOC -= 1\n    return fHxqQ"}
{"old_id": "LEONARDO_NUMBER_1", "code": "def ASuDk ( caRsb ) :\n    leIvI = [ ]\n    leIvI.append ( 1 )\n    leIvI.append ( 1 )\n    for QFFPt in range ( 2 , caRsb + 1 ) :\n        leIvI.append ( leIvI [ QFFPt - 1 ] + leIvI [ QFFPt - 2 ] + 1 )\n    return leIvI [ caRsb ]"}
{"old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES", "code": "def HagOT ( xslFE , QoRFR , nKtBh , gacap ) :\n    pYUHc = 0\n    cYMJO = 0\n    WjVjH = 0\n    QcXxj = 0\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    for TaHBp in string :\n        cYMJO = 0\n        for PwFup in range ( pYUHc , nKtBh ) :\n            if xslFE [ PwFup ] == TaHBp :\n                cYMJO += 1\n        if cYMJO >= gacap :\n            for PwFup in range ( pYUHc , nKtBh ) :\n                if xslFE [ PwFup ] == TaHBp :\n                    QoRFR [ QcXxj ] = TaHBp\n                    WjVjH = PwFup\n                    QcXxj += 1\n            pYUHc = WjVjH\n    QoRFR[QcXxj] = '\\0';"}
{"old_id": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION", "code": "def PdvrC ( yzmsm ) :\n    oGJkD = len ( yzmsm )\n    HzWVB = [ 0 ] * oGJkD\n    XIPoP = yzmsm + yzmsm\n    for Tjzyo in range ( oGJkD ) :\n        HzWVB [ Tjzyo ] = XIPoP [ Tjzyo : oGJkD + Tjzyo ]\n    HzWVB.sort ( )\n    return HzWVB [ 0 ]"}
{"old_id": "LEXICOGRAPHICALLY_NEXT_STRING", "code": "def uYJkr ( Ytnyw ) :\n    if ( Ytnyw == \" \" ) :\n        return \"a\"\n    pTDFP = len ( Ytnyw ) - 1\n    while ( Ytnyw [ pTDFP ] == 'z' and pTDFP >= 0 ) :\n        pTDFP -= 1\n    if ( pTDFP == - 1 ) :\n        Ytnyw = Ytnyw + 'a'\n    else :\n        Ytnyw = Ytnyw [ 0 : pTDFP ] + chr ( ord ( Ytnyw [ pTDFP ] ) + 1 ) + Ytnyw [ pTDFP + 1 : ]\n    return Ytnyw"}
{"old_id": "LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C", "code": "def WVAPq ( str ) :\n    LWNEr = len ( str ) - 1\n    DMqpg = LWNEr\n    while ( DMqpg > 0 and str [ DMqpg - 1 ] <= str [ DMqpg ] ) :\n        DMqpg -= 1\n    if ( DMqpg <= 0 ) :\n        return False\n    JJMBf = DMqpg - 1\n    while ( JJMBf + 1 <= LWNEr and str [ JJMBf + 1 ] <= str [ DMqpg - 1 ] ) :\n        JJMBf += 1\n    str = list ( str )\n    sFZyw = str [ DMqpg - 1 ]\n    str [ DMqpg - 1 ] = str [ JJMBf ]\n    str [ JJMBf ] = sFZyw\n    str = ''.join ( str )\n    str [ : : - 1 ]\n    return True"}
{"old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS", "code": "def McCUh ( aZjVS , mFdaQ , VXJdP ) :\n    for AUFTi in range ( mFdaQ - 1 ) :\n        CBcaE = AUFTi\n        for IyiWF in range ( AUFTi + 1 , mFdaQ ) :\n            if ( IyiWF - AUFTi > VXJdP ) :\n                break\n            if ( aZjVS [ IyiWF ] < aZjVS [ CBcaE ] ) :\n                CBcaE = IyiWF\n        for IyiWF in range ( CBcaE , AUFTi , - 1 ) :\n            aZjVS [ IyiWF ] , aZjVS [ IyiWF - 1 ] = aZjVS [ IyiWF - 1 ] , aZjVS [ IyiWF ]\n        VXJdP -= CBcaE - AUFTi"}
{"old_id": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING", "code": "def LwLhS ( AnTMj ) :\n    LfDMY = len ( AnTMj )\n    sryWD = ( LfDMY * ( LfDMY + 1 ) ) // 2\n    iuzSG = [ 0 ] * sryWD\n    index = 0\n    for vCFnF in range ( LfDMY ) :\n        for xeguX in range ( 1 , LfDMY - vCFnF + 1 ) :\n            iuzSG [ index ] = AnTMj [ vCFnF : vCFnF + xeguX ]\n            index += 1\n    iuzSG.sort ( )\n    PKWlE = \"\"\n    for vCFnF in range ( sryWD ) :\n        PKWlE += iuzSG [ vCFnF ]\n    return PKWlE"}
{"old_id": "LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED", "code": "def WgcaQ ( FRPgi , Otrji , wEHlM , TmNnm , TPRda , nawPU ) :\n    if nawPU < 0 :\n        return - ( 10 ** 7 )\n    if wEHlM < 0 or TPRda < 0 :\n        return 0\n    JeWro = FRPgi [ wEHlM ] [ TPRda ] [ nawPU ]\n    if JeWro != - 1 :\n        return JeWro\n    JeWro = max ( WgcaQ ( FRPgi , Otrji , wEHlM - 1 , TmNnm , TPRda , nawPU ) , WgcaQ ( FRPgi , Otrji , wEHlM , TmNnm , TPRda - 1 , nawPU ) )\n    if Otrji [ wEHlM - 1 ] == TmNnm [ TPRda - 1 ] :\n        JeWro = max ( JeWro , 1 + WgcaQ ( FRPgi , Otrji , wEHlM - 1 , TmNnm , TPRda - 1 , nawPU ) )\n    JeWro = max ( JeWro , WgcaQ ( FRPgi , Otrji , wEHlM - 1 , TmNnm , TPRda - 1 , nawPU - 1 ) )\n    return JeWro"}
{"old_id": "LONGEST_COMMON_SUBSTRING", "code": "def nEFVG ( ANWHX , dvpHN , YxQYV , ngtDY ) :\n    jKSxU = [ [ 0 for IzLaA in range ( ngtDY + 1 ) ] for AaZJb in range ( YxQYV + 1 ) ]\n    yctgv = 0\n    for kQrpY in range ( YxQYV + 1 ) :\n        for Cccsw in range ( ngtDY + 1 ) :\n            if ( kQrpY == 0 or Cccsw == 0 ) :\n                jKSxU [ kQrpY ] [ Cccsw ] = 0\n            elif ( ANWHX [ kQrpY - 1 ] == dvpHN [ Cccsw - 1 ] ) :\n                jKSxU [ kQrpY ] [ Cccsw ] = jKSxU [ kQrpY - 1 ] [ Cccsw - 1 ] + 1\n                yctgv = max ( yctgv , jKSxU [ kQrpY ] [ Cccsw ] )\n            else :\n                jKSxU [ kQrpY ] [ Cccsw ] = 0\n    return yctgv"}
{"old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF", "code": "def hWFsw ( str ) :\n    DbkQl = len ( str )\n    hUFrI = 0\n    for YFVpk in range ( 0 , DbkQl ) :\n        for bxezx in range ( YFVpk + 1 , DbkQl , 2 ) :\n            upKct = bxezx - YFVpk + 1\n            VJlpH = 0\n            sTOUU = 0\n            for lTKHC in range ( 0 , int ( upKct / 2 ) ) :\n                VJlpH += ( int ( str [ YFVpk + lTKHC ] ) - int ( '0' ) )\n                sTOUU += ( int ( str [ YFVpk + lTKHC + int ( upKct / 2 ) ] ) - int ( '0' ) )\n            if ( VJlpH == sTOUU and hUFrI < upKct ) :\n                hUFrI = upKct\n    return hUFrI"}
{"old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1", "code": "def DGdUC ( string ) :\n    ZKybg = len ( string )\n    HuRmZ = 0\n    RWPfp = [ [ 0 for USGRr in range ( ZKybg ) ] for pIUPP in range ( ZKybg ) ]\n    for gxDFf in range ( 0 , ZKybg ) :\n        RWPfp [ gxDFf ] [ gxDFf ] = int ( string [ gxDFf ] )\n    for PiDHM in range ( 2 , ZKybg + 1 ) :\n        for gxDFf in range ( 0 , ZKybg - PiDHM + 1 ) :\n            SFLhx = gxDFf + PiDHM - 1\n            QZvBP = PiDHM // 2\n            RWPfp [ gxDFf ] [ SFLhx ] = ( RWPfp [ gxDFf ] [ SFLhx - QZvBP ] + RWPfp [ SFLhx - QZvBP + 1 ] [ SFLhx ] )\n            if ( PiDHM % 2 == 0 and RWPfp [ gxDFf ] [ SFLhx - QZvBP ] == RWPfp [ ( SFLhx - QZvBP + 1 ) ] [ SFLhx ] and PiDHM > HuRmZ ) :\n                HuRmZ = PiDHM\n    return HuRmZ"}
{"old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE", "code": "def XncOp ( JJEyM , TbmrT ) :\n    DlTFW = list ( )\n    jZwMl = 0\n    for KvPUl in range ( TbmrT ) :\n        DlTFW.append ( 1 )\n    KvPUl = 1\n    for KvPUl in range ( TbmrT ) :\n        for vNtOD in range ( KvPUl ) :\n            if ( JJEyM [ KvPUl ] > JJEyM [ vNtOD ] and ( JJEyM [ KvPUl ] + JJEyM [ vNtOD ] ) % 2 != 0 and DlTFW [ KvPUl ] < DlTFW [ vNtOD ] + 1 ) :\n                DlTFW [ KvPUl ] = DlTFW [ vNtOD ] + 1\n    for KvPUl in range ( TbmrT ) :\n        if jZwMl < DlTFW [ KvPUl ] :\n            jZwMl = DlTFW [ KvPUl ]\n    return jZwMl"}
{"old_id": "LONGEST_INCREASING_SUBSEQUENCE_1", "code": "def KkDKN ( iabPw , FpMdA ) :\n    KkDKN = [ 1 ] * FpMdA\n    for SKGlI in range ( 1 , FpMdA ) :\n        for yhBHH in range ( 0 , SKGlI ) :\n            if iabPw [ SKGlI ] > iabPw [ yhBHH ] and KkDKN [ SKGlI ] < KkDKN [ yhBHH ] + 1 :\n                KkDKN [ SKGlI ] = KkDKN [ yhBHH ] + 1\n    kMvqA = 0\n    for SKGlI in range ( FpMdA ) :\n        kMvqA = max ( kMvqA , KkDKN [ SKGlI ] )\n    return kMvqA"}
{"old_id": "LONGEST_PREFIX_ALSO_SUFFIX_1", "code": "def jyhaQ ( Htbdr ) :\n    imGPQ = len ( Htbdr )\n    gRceD = [ 0 ] * imGPQ\n    eJGKs = 0\n    xjXOY = 1\n    while ( xjXOY < imGPQ ) :\n        if ( Htbdr [ xjXOY ] == Htbdr [ eJGKs ] ) :\n            eJGKs = eJGKs + 1\n            gRceD [ xjXOY ] = eJGKs\n            xjXOY = xjXOY + 1\n        else :\n            if ( eJGKs != 0 ) :\n                eJGKs = gRceD [ eJGKs - 1 ]\n            else :\n                gRceD [ xjXOY ] = 0\n                xjXOY = xjXOY + 1\n    BUdeM = gRceD [ imGPQ - 1 ]\n    if ( BUdeM > imGPQ / 2 ) :\n        return imGPQ // 2\n    else :\n        return BUdeM"}
{"old_id": "LONGEST_REPEATED_SUBSEQUENCE_1", "code": "def advyc ( str ) :\n    VVEKN = len ( str )\n    tpKMJ = [ [ 0 for csDeT in range ( VVEKN + 1 ) ] for XLcJk in range ( VVEKN + 1 ) ]\n    for csDeT in range ( 1 , VVEKN + 1 ) :\n        for XLcJk in range ( 1 , VVEKN + 1 ) :\n            if ( str [ csDeT - 1 ] == str [ XLcJk - 1 ] and csDeT != XLcJk ) :\n                tpKMJ [ csDeT ] [ XLcJk ] = 1 + tpKMJ [ csDeT - 1 ] [ XLcJk - 1 ]\n            else :\n                tpKMJ [ csDeT ] [ XLcJk ] = max ( tpKMJ [ csDeT ] [ XLcJk - 1 ] , tpKMJ [ csDeT - 1 ] [ XLcJk ] )\n    qWIJk = ''\n    csDeT = VVEKN\n    XLcJk = VVEKN\n    while ( csDeT > 0 and XLcJk > 0 ) :\n        if ( tpKMJ [ csDeT ] [ XLcJk ] == tpKMJ [ csDeT - 1 ] [ XLcJk - 1 ] + 1 ) :\n            qWIJk += str [ csDeT - 1 ]\n            csDeT -= 1\n            XLcJk -= 1\n        elif ( tpKMJ [ csDeT ] [ XLcJk ] == tpKMJ [ csDeT - 1 ] [ XLcJk ] ) :\n            csDeT -= 1\n        else :\n            XLcJk -= 1\n    qWIJk = ''.join ( reversed ( qWIJk ) )\n    return qWIJk"}
{"old_id": "LONGEST_REPEATING_SUBSEQUENCE", "code": "def LEbvH ( str ) :\n    ZkVxu = len ( str )\n    YbukP = [ [ 0 ] * ( ZkVxu + 1 ) ] * ( ZkVxu + 1 )\n    for JNsNS in range ( 1 , ZkVxu + 1 ) :\n        for FTFJw in range ( 1 , ZkVxu + 1 ) :\n            if ( str [ JNsNS - 1 ] == str [ FTFJw - 1 ] and JNsNS != FTFJw ) :\n                YbukP [ JNsNS ] [ FTFJw ] = 1 + YbukP [ JNsNS - 1 ] [ FTFJw - 1 ]\n            else :\n                YbukP [ JNsNS ] [ FTFJw ] = max ( YbukP [ JNsNS ] [ FTFJw - 1 ] , YbukP [ JNsNS - 1 ] [ FTFJw ] )\n    return YbukP [ ZkVxu ] [ ZkVxu ]"}
{"old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S", "code": "def NQwLz ( BULYX , zCJbC ) :\n    IrnSa = { }\n    sum = 0\n    sUzoM = 0\n    for EbRDj in range ( zCJbC ) :\n        if BULYX [ EbRDj ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            sUzoM = EbRDj + 1\n        elif ( sum not in IrnSa ) :\n            IrnSa [ sum ] = EbRDj\n        if ( ( sum - 1 ) in IrnSa ) :\n            if ( sUzoM < ( EbRDj - IrnSa [ sum - 1 ] ) ) :\n                sUzoM = EbRDj - IrnSa [ sum - 1 ]\n    return sUzoM"}
{"old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K", "code": "def PyUlG ( hfXni , XjdbT , SFYvI ) :\n    mdLOq = { }\n    qzMWH = [ 0 for udoGX in range ( XjdbT ) ]\n    max = 0\n    miqQy = 0\n    for udoGX in range ( XjdbT ) :\n        miqQy += hfXni [ udoGX ]\n        qzMWH [ udoGX ] = ( ( miqQy % SFYvI ) + SFYvI ) % SFYvI\n    for udoGX in range ( XjdbT ) :\n        if ( qzMWH [ udoGX ] == 0 ) :\n            max = udoGX + 1\n        elif ( qzMWH [ udoGX ] in mdLOq ) :\n            mdLOq [ qzMWH [ udoGX ] ] = udoGX\n        else :\n            if ( max < ( udoGX - mdLOq [ qzMWH [ udoGX ] ] ) ) :\n                max = udoGX - mdLOq [ qzMWH [ udoGX ] ]\n    return max"}
{"old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2", "code": "def xYUCx ( GxCOf , yOnpK ) :\n    bNrBZ = RszaX ( lambda : 0 )\n    WJWoq = 0\n    for oBOLB in range ( yOnpK ) :\n        aKJOJ = 0\n        if ( GxCOf [ oBOLB - 1 ] in bNrBZ and aKJOJ < bNrBZ [ GxCOf [ oBOLB ] - 1 ] ) :\n            aKJOJ = bNrBZ [ GxCOf [ oBOLB ] - 1 ]\n        if ( GxCOf [ oBOLB ] + 1 in bNrBZ and aKJOJ < bNrBZ [ GxCOf [ oBOLB ] + 1 ] ) :\n            aKJOJ = bNrBZ [ GxCOf [ oBOLB ] + 1 ]\n        bNrBZ [ GxCOf [ oBOLB ] ] = aKJOJ + 1\n        if WJWoq < bNrBZ [ GxCOf [ oBOLB ] ] :\n            WJWoq = bNrBZ [ GxCOf [ oBOLB ] ]\n    return WJWoq"}
{"old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE", "code": "def YXLVh ( rFHzF , gyBnN ) :\n    voKFy = [ 1 for WnMKB in range ( gyBnN ) ]\n    for WnMKB in range ( gyBnN ) :\n        for UyHwp in range ( WnMKB ) :\n            if ( ( rFHzF [ WnMKB ] == rFHzF [ UyHwp ] + 1 ) or ( rFHzF [ WnMKB ] == rFHzF [ UyHwp ] - 1 ) ) :\n                voKFy [ WnMKB ] = max ( voKFy [ WnMKB ] , voKFy [ UyHwp ] + 1 )\n    YTMcL = 1\n    for WnMKB in range ( gyBnN ) :\n        if ( YTMcL < voKFy [ WnMKB ] ) :\n            YTMcL = voKFy [ WnMKB ]\n    return YTMcL"}
{"old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT", "code": "def mojKe(WtUDs):\n    for UmRxm in range(len(WtUDs)):\n        if 'a' <= WtUDs[UmRxm] <= 'z':\n            WtUDs[UmRxm] = chr(ord(WtUDs[UmRxm]) - ord('a') + ord('A'))\n    return ''.join(WtUDs)"}
{"old_id": "MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS", "code": "def XxKZu ( str , fYTSM ) :\n    SgtsG = list(str)\n    Dljxd = 0\n    iHreK = len ( str ) - 1\n    while ( Dljxd <= iHreK ) :\n        if ( str [ Dljxd ] != str [ iHreK ] ) :\n            SgtsG [ Dljxd ] = SgtsG [ iHreK ] = max ( str [ Dljxd ] , str [ iHreK ] )\n            fYTSM -= 1\n        Dljxd += 1\n        iHreK -= 1\n    if ( fYTSM < 0 ) :\n        return \"Not possible\"\n    Dljxd = 0\n    iHreK = len ( str ) - 1\n    while ( Dljxd <= iHreK ) :\n        if ( Dljxd == iHreK ) :\n            if ( fYTSM > 0 ) :\n                SgtsG [ Dljxd ] = '9'\n        if ( SgtsG [ Dljxd ] < '9' ) :\n            if ( fYTSM >= 2 and SgtsG [ Dljxd ] == str [ Dljxd ] and SgtsG [ iHreK ] == str [ iHreK ] ) :\n                fYTSM -= 1\n                SgtsG [ Dljxd ] = SgtsG [ iHreK ] = '9'\n            elif ( fYTSM >= 1 and ( SgtsG [ Dljxd ] != str [ Dljxd ] or SgtsG [ iHreK ] != str [ iHreK ] ) ) :\n                fYTSM -= 1\n                SgtsG [ Dljxd ] = SgtsG [ iHreK ] = '9'\n        Dljxd += 1\n        iHreK -= 1\n    return \"\".join(SgtsG)"}
{"old_id": "MARKOV_MATRIX", "code": "def krAMk ( idzgY ) :\n    for GCACG in range ( 0 , len ( idzgY ) ) :\n        wTvGG = 0\n        for IPNdG in range ( 0 , len ( idzgY [ GCACG ] ) ) :\n            wTvGG = wTvGG + idzgY [ GCACG ] [ IPNdG ]\n        if ( wTvGG != 1 ) :\n            return False\n    return True"}
{"old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER", "code": "def kpVGY ( HlUpx , xxjDt , czDUn , XVXue ) :\n    mVaNc = - 1\n    OGbYf = - 1\n    KHMdu = [ [ 0 for SZRnh in range ( XVXue + 1 ) ] for UEDym in range ( xxjDt ) ]\n    for mVaNc in range ( xxjDt ) :\n        for OGbYf in range ( XVXue + 1 ) :\n            if ( mVaNc == 0 ) :\n                if ( czDUn - HlUpx [ mVaNc ] == OGbYf or czDUn + HlUpx [ mVaNc ] == OGbYf ) :\n                    KHMdu [ mVaNc ] [ OGbYf ] = 1\n                else :\n                    KHMdu [ mVaNc ] [ OGbYf ] = 0\n            else :\n                if ( OGbYf - HlUpx [ mVaNc ] >= 0 and OGbYf + HlUpx [ mVaNc ] <= XVXue ) :\n                    if ( KHMdu [ mVaNc - 1 ] [ OGbYf - HlUpx [ mVaNc ] ] == 1 or KHMdu [ mVaNc - 1 ] [ OGbYf + HlUpx [ mVaNc ] ] == 1 ) :\n                        KHMdu [ mVaNc ] [ OGbYf ] = 1\n                elif ( OGbYf - HlUpx [ mVaNc ] >= 0 ) :\n                    KHMdu [ mVaNc ] [ OGbYf ] = KHMdu [ mVaNc - 1 ] [ OGbYf - HlUpx [ mVaNc ] ]\n                elif ( OGbYf + HlUpx [ mVaNc ] <= XVXue ) :\n                    KHMdu [ mVaNc ] [ OGbYf ] = KHMdu [ mVaNc - 1 ] [ OGbYf + HlUpx [ mVaNc ] ]\n                else :\n                    KHMdu [ mVaNc ] [ OGbYf ] = 0\n    for OGbYf in range ( XVXue , - 1 , - 1 ) :\n        if ( KHMdu [ xxjDt - 1 ] [ OGbYf ] == 1 ) :\n            return OGbYf\n    return - 1"}
{"old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L", "code": "def rBovL ( AXerV , TzFZG ) :\n    if TzFZG < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return lArZj\n    OQlTk , JYkuX = [ lArZj ] * ( TzFZG + 1 ) , [ lArZj ] * TzFZG\n    WovrN , CdFHF = [ lArZj ] * ( TzFZG - 1 ) , [ lArZj ] * ( TzFZG - 2 )\n    for OmYDy in range ( TzFZG - 1 , - 1 , - 1 ) :\n        OQlTk [ OmYDy ] = max ( OQlTk [ OmYDy + 1 ] , AXerV [ OmYDy ] )\n    for OmYDy in range ( TzFZG - 2 , - 1 , - 1 ) :\n        JYkuX [ OmYDy ] = max ( JYkuX [ OmYDy + 1 ] , OQlTk [ OmYDy + 1 ] - AXerV [ OmYDy ] )\n    for OmYDy in range ( TzFZG - 3 , - 1 , - 1 ) :\n        WovrN [ OmYDy ] = max ( WovrN [ OmYDy + 1 ] , JYkuX [ OmYDy + 1 ] + AXerV [ OmYDy ] )\n    for OmYDy in range ( TzFZG - 4 , - 1 , - 1 ) :\n        CdFHF [ OmYDy ] = max ( CdFHF [ OmYDy + 1 ] , WovrN [ OmYDy + 1 ] - AXerV [ OmYDy ] )\n    return CdFHF [ 0 ]"}
{"old_id": "MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1", "code": "def xMZSe ( KbNnf ) :\n    QuYAz = KbNnf // 3 \n    KbNnf -= QuYAz\n    usvBk = KbNnf // 2\n    YSlzY = KbNnf - usvBk\n    return int ( QuYAz * usvBk * YSlzY )"}
{"old_id": "MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY", "code": "def mUigl ( nFfzP , swZJx ) :\n    nFfzP.sort ( reverse = True )\n    lHVvt = [ 0 , 0 ]\n    THbfI = 0\n    GrQNu = 0\n    while ( THbfI < swZJx - 1 and GrQNu < 2 ) :\n        if ( nFfzP [ THbfI ] == nFfzP [ THbfI + 1 ] ) :\n            lHVvt [ GrQNu ] = nFfzP [ THbfI ]\n            GrQNu += 1\n            THbfI += 1\n        THbfI += 1\n    return ( lHVvt [ 0 ] * lHVvt [ 1 ] )"}
{"old_id": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY", "code": "def IhelP ( ijoYg , UjxIP ) :\n    RPaPw = len ( ijoYg )\n    UUUuY = [ 0 ] * ( RPaPw + 1 )\n    UUUuY [ 0 ] = 0\n    for KreQK in range ( RPaPw ) :\n        UUUuY [ KreQK + 1 ] = UUUuY [ KreQK ] + ijoYg [ KreQK ]\n    OLzKo = [ 0 ] * RPaPw\n    sum = 0\n    for KreQK in range ( RPaPw ) :\n        OLzKo [ KreQK ] = ( UUUuY [ RPaPw ] - UUUuY [ KreQK ] ) / ( RPaPw - KreQK )\n    for jduVr in range ( UjxIP - 1 ) :\n        for KreQK in range ( RPaPw ) :\n            for PZNXs in range ( KreQK + 1 , RPaPw ) :\n                OLzKo [ KreQK ] = max ( OLzKo [ KreQK ] , ( UUUuY [ PZNXs ] - UUUuY [ KreQK ] ) / ( PZNXs - KreQK ) + OLzKo [ PZNXs ] )\n    return  OLzKo [ 0 ]"}
{"old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE", "code": "def XuaxA ( hFNXx ) :\n    kQmGy = [ [ 0 for cscUz in range ( hFNXx + 1 ) ] for sUZnd in range ( hFNXx + 1 ) ]\n    for dxuTx in range ( hFNXx + 1 ) :\n        for zdQUF in range ( min ( dxuTx , hFNXx ) + 1 ) :\n            if ( zdQUF == 0 or zdQUF == dxuTx ) :\n                kQmGy [ dxuTx ] [ zdQUF ] = 1\n            else :\n                kQmGy [ dxuTx ] [ zdQUF ] = ( kQmGy [ dxuTx - 1 ] [ zdQUF - 1 ] + kQmGy [ dxuTx - 1 ] [ zdQUF ] )\n    RJkZP = 0\n    for dxuTx in range ( hFNXx + 1 ) :\n        RJkZP = max ( RJkZP , kQmGy [ hFNXx ] [ dxuTx ] )\n    return RJkZP"}
{"old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY", "code": "def zeskw ( OcOSQ , RODWD ) :\n    ycTuu = set ( )\n    for YmoDp in range ( RODWD ) :\n        ycTuu.add ( OcOSQ [ YmoDp ] )\n    ZKBTv = 0\n    for YmoDp in range ( RODWD ) :\n        if ycTuu.__contains__ ( OcOSQ [ YmoDp ] ) :\n            qoiVK = OcOSQ [ YmoDp ]\n            while ( ycTuu.__contains__ ( qoiVK ) ) :\n                qoiVK += 1\n            ZKBTv = max ( ZKBTv , qoiVK - OcOSQ [ YmoDp ] )\n    return ZKBTv"}
{"old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1", "code": "def cxJjW ( str ) :\n    UiNQa = len ( str )\n    count = 0\n    IHJKy = str [ 0 ]\n    Upcsy = 1\n    for KvvSW in range ( UiNQa ) :\n        if ( KvvSW < UiNQa - 1 and str [ KvvSW ] == str [ KvvSW + 1 ] ) :\n            Upcsy += 1\n        else :\n            if Upcsy > count :\n                count = Upcsy\n                IHJKy = str [ KvvSW ]\n            Upcsy = 1\n    return IHJKy"}
{"old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER", "code": "def IlIXd ( iCJCi , rVXqv ) :\n    pGxMS = eBVpJ ( lambda : 0 )\n    for LPKtw in range ( rVXqv ) :\n        pGxMS [ iCJCi [ LPKtw ] ] += 1\n    IgNCo = 0\n    for LPKtw in range ( rVXqv ) :\n        for cHous in range ( rVXqv ) :\n            if pGxMS [ iCJCi [ LPKtw ] ] > pGxMS [ iCJCi [ cHous ] ] and iCJCi [ LPKtw ] > iCJCi [ cHous ] :\n                IgNCo = max ( IgNCo , pGxMS [ iCJCi [ LPKtw ] ] - pGxMS [ iCJCi [ cHous ] ] )\n            elif pGxMS [ iCJCi [ LPKtw ] ] < pGxMS [ iCJCi [ cHous ] ] and iCJCi [ LPKtw ] < iCJCi [ cHous ] :\n                IgNCo = max ( IgNCo , pGxMS [ iCJCi [ cHous ] ] - pGxMS [ iCJCi [ LPKtw ] ] )\n    return IgNCo"}
{"old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX", "code": "def CUxpB ( zXflt , sVOJI , MAuTj ) :\n    gvBgN = [ 0 ] * sVOJI\n    for RBWfb in range ( 0 , sVOJI ) :\n        sum = 0\n        for RdxTr in range ( 0 , MAuTj ) :\n            sum += zXflt [ RBWfb ] [ RdxTr ]\n        gvBgN [ RBWfb ] = sum\n    ZdqhZ = gvBgN [ 1 ] - gvBgN [ 0 ]\n    RWyzZ = gvBgN [ 0 ]\n    for RBWfb in range ( 1 , sVOJI ) :\n        if ( gvBgN [ RBWfb ] - RWyzZ > ZdqhZ ) :\n            ZdqhZ = gvBgN [ RBWfb ] - RWyzZ\n        if ( gvBgN [ RBWfb ] < RWyzZ ) :\n            RWyzZ = gvBgN [ RBWfb ]\n    return ZdqhZ"}
{"old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY", "code": "def AOTHt ( IHUsp , ipxGF ) :\n    ghCHS = { }\n    EJEmW = 0\n    for xVBFA in range ( ipxGF ) :\n        if IHUsp [ xVBFA ] not in ghCHS.keys ( ) :\n            ghCHS [ IHUsp [ xVBFA ] ] = xVBFA\n        else :\n            EJEmW = max ( EJEmW , xVBFA - ghCHS [ IHUsp [ xVBFA ] ] )\n    return EJEmW"}
{"old_id": "MAXIMUM_GAMES_PLAYED_WINNER", "code": "def pkYhO ( EvZJi ) :\n    LfiWj = [ 0 for fEFDP in range ( EvZJi ) ]\n    LfiWj [ 0 ] = 1\n    LfiWj [ 1 ] = 2\n    fEFDP = 1\n    while LfiWj [ fEFDP ] <= EvZJi :\n        fEFDP = fEFDP + 1\n        LfiWj [ fEFDP ] = LfiWj [ fEFDP - 1 ] + LfiWj [ fEFDP - 2 ]\n    return ( fEFDP - 1 )"}
{"old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER", "code": "def asfCZ ( mwvAt , nxAgX ) :\n    count = 0\n    for mIdOw in range ( 0 , len ( nxAgX ) ) :\n        if ( count == len ( mwvAt ) ) :\n            break\n        if ( nxAgX [ mIdOw ] == mwvAt [ count ] ) :\n            count = count + 1\n    return count"}
{"old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1", "code": "def ecCmu ( WMJkr , JdHTL ) :\n    QGTso = [ ]\n    max = 0\n    for EpVaZ in range ( JdHTL ) :\n        QGTso.append ( 1 )\n    for EpVaZ in range ( JdHTL ) :\n        for lyFVH in range ( EpVaZ ) :\n            if ( abs ( WMJkr [ EpVaZ ] - WMJkr [ lyFVH ] ) <= 1 and QGTso [ EpVaZ ] < QGTso [ lyFVH ] + 1 ) :\n                QGTso [ EpVaZ ] = QGTso [ lyFVH ] + 1\n    for EpVaZ in range ( JdHTL ) :\n        if ( max < QGTso [ EpVaZ ] ) :\n            max = QGTso [ EpVaZ ]\n    return max"}
{"old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS", "code": "def zINrk ( NBNmS , FCTNZ , dmiRA ) :\n    UtkRb , pWUNO , xuxQr = { } , 0 , 0\n    oWhdp = [ 0 ] * FCTNZ\n    oWhdp [ 0 ] = NBNmS [ 0 ]\n    for YBuJC in range ( 1 , FCTNZ ) :\n        oWhdp [ YBuJC ] = oWhdp [ YBuJC - 1 ] + NBNmS [ YBuJC ]\n    for YBuJC in range ( FCTNZ ) :\n        pWUNO = oWhdp [ YBuJC ] % dmiRA\n        if ( not pWUNO and xuxQr < oWhdp [ YBuJC ] ) :\n            xuxQr = oWhdp [ YBuJC ]\n        elif ( not pWUNO in UtkRb ) :\n            UtkRb [ pWUNO ] = YBuJC\n        elif ( xuxQr < ( oWhdp [ YBuJC ] - oWhdp [ UtkRb [ pWUNO ] ] ) ) :\n            xuxQr = oWhdp [ YBuJC ] - oWhdp [ UtkRb [ pWUNO ] ]\n    return xuxQr // dmiRA"}
{"old_id": "MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE", "code": "def vYUZQ ( znnDn , giYCt ) :\n    return ( znnDn // giYCt - 1 ) * ( znnDn // giYCt ) // 2"}
{"old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C", "code": "def ChrlU ( sdBnr , FTzea , gdcEW , egjjG ) :\n    kvdSi = [ - 1 ] * ( sdBnr + 10 )\n    kvdSi [ 0 ] = 0\n    for OpiZi in range ( 0 , sdBnr ) :\n        if ( kvdSi [ OpiZi ] != - 1 ) :\n            if ( OpiZi + FTzea <= sdBnr ) :\n                kvdSi [ OpiZi + FTzea ] = max ( kvdSi [ OpiZi ] + 1 , kvdSi [ OpiZi + FTzea ] )\n            if ( OpiZi + gdcEW <= sdBnr ) :\n                kvdSi [ OpiZi + gdcEW ] = max ( kvdSi [ OpiZi ] + 1 , kvdSi [ OpiZi + gdcEW ] )\n            if ( OpiZi + egjjG <= sdBnr ) :\n                kvdSi [ OpiZi + egjjG ] = max ( kvdSi [ OpiZi ] + 1 , kvdSi [ OpiZi + egjjG ] )\n    return kvdSi [ sdBnr ]"}
{"old_id": "MAXIMUM_POINTS_INTERSECTION_N_CIRCLES", "code": "def intersection ( wOAjq ) :\n    return wOAjq * ( wOAjq - 1 )"}
{"old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY", "code": "def tCwBz ( NLxQx , QuJVV ) :\n    mAOhO = 0\n    rXmsR = 0\n    for yipeF in range ( 0 , QuJVV ) :\n        DHtKR = True\n        for CNRiJ in range ( yipeF + 1 , QuJVV ) :\n            if ( NLxQx [ yipeF ] == NLxQx [ CNRiJ ] ) :\n                DHtKR = False\n                NLxQx [ yipeF ] = NLxQx [ CNRiJ ] = 0\n                break\n        if ( DHtKR == True ) :\n            if ( NLxQx [ yipeF ] > 0 ) :\n                mAOhO += NLxQx [ yipeF ]\n            else :\n                rXmsR += NLxQx [ yipeF ]\n    return abs ( mAOhO - rXmsR )"}
{"old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1", "code": "def BTDHo ( lTZGM , eGlzb ) :\n    pzMMh = 0\n    lTZGM.sort ( )\n    HlKhb = 0\n    while HlKhb < eGlzb-1:\n        if ( lTZGM [ HlKhb ] !=  lTZGM [ HlKhb + 1 ] ) :\n            pzMMh += abs ( lTZGM [ HlKhb ] )\n        else:\n            HlKhb += 1\n        HlKhb += 1\n    if ( lTZGM [ eGlzb - 2 ] != lTZGM [ eGlzb - 1 ] ) :\n        pzMMh += abs ( lTZGM [ eGlzb - 1 ] )\n    return pzMMh"}
{"old_id": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE", "code": "def NCtet ( XDpbo , YsYse , aZeLy ) :\n    jUOnR = set ( )\n    xpELz = 0\n    NgbmH = okAra = 0\n    for FzZCL in range ( 0 , aZeLy ) :\n        while XDpbo [ FzZCL ] in jUOnR :\n            jUOnR.remove ( XDpbo [ okAra ] )\n            NgbmH -= YsYse [ okAra ]\n            okAra += 1\n        jUOnR.add ( XDpbo [ FzZCL ] )\n        NgbmH += YsYse [ FzZCL ]\n        xpELz = max ( xpELz , NgbmH )\n    return xpELz"}
{"old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE", "code": "def BXMGl ( LNXMJ , XaKAT ) :\n    VVDSs = [ 0 ] * ( XaKAT )\n    for ZEPvG in range ( XaKAT ) :\n        VVDSs [ ZEPvG ] = LNXMJ [ ZEPvG ]\n    for ZEPvG in range ( 1 , XaKAT ) :\n        for dBTyO in range ( ZEPvG ) :\n            if ( LNXMJ [ ZEPvG ] > LNXMJ [ dBTyO ] and VVDSs [ ZEPvG ] < ( VVDSs [ dBTyO ] * LNXMJ [ ZEPvG ] ) ) :\n                VVDSs [ ZEPvG ] = VVDSs [ dBTyO ] * LNXMJ [ ZEPvG ]\n    return max ( VVDSs )"}
{"old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY", "code": "def aCzMt ( DhNoQ , cNrpf ) :\n    if cNrpf == 1 :\n        return DhNoQ [ 0 ]\n    szdtk = - 999999999999\n    mBoDY = 0\n    MntZT = 0\n    UUBmV = 1\n    for FcmgU in range ( cNrpf ) :\n        if DhNoQ [ FcmgU ] == 0 :\n            MntZT += 1\n            continue\n        if DhNoQ [ FcmgU ] < 0 :\n            mBoDY += 1\n            szdtk = max ( szdtk , DhNoQ [ FcmgU ] )\n        UUBmV = UUBmV + DhNoQ [ FcmgU ]\n    if MntZT == cNrpf :\n        return 0\n    if mBoDY & 1 :\n        if ( mBoDY == 1 and MntZT > 0 and MntZT + mBoDY == cNrpf ) :\n            return 0\n        UUBmV = int(UUBmV / szdtk)\n    return UUBmV"}
{"old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE", "code": "def UkjUd ( wMwUL , eCquc ) :\n    CBWLQ = [ 0 ] * eCquc\n    dIZZT = wMwUL [ eCquc - 1 ]\n    for mzthK in range ( eCquc - 2 , 0 , - 1 ) :\n        if wMwUL [ mzthK ] > dIZZT :\n            dIZZT = wMwUL [ mzthK ]\n        CBWLQ [ mzthK ] = max ( CBWLQ [ mzthK + 1 ] , dIZZT - wMwUL [ mzthK ] )\n    bKwXw = wMwUL [ 0 ]\n    for mzthK in range ( 1 , eCquc ) :\n        if wMwUL [ mzthK ] < bKwXw :\n            bKwXw = wMwUL [ mzthK ]\n        CBWLQ [ mzthK ] = max ( CBWLQ [ mzthK - 1 ] , CBWLQ [ mzthK ] + ( wMwUL [ mzthK ] - bKwXw ) )\n    MgWsV = CBWLQ [ eCquc - 1 ]\n    return MgWsV"}
{"old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION", "code": "def gcuty ( VVrCl , VCJSj , XEaJL ) :\n    lzeLM = - 2147483648\n    bLdfX = 0\n    for bNtJx in range ( VCJSj * XEaJL ) :\n        bLdfX = bLdfX + VVrCl [ bNtJx % VCJSj ]\n        if ( lzeLM < bLdfX ) :\n            lzeLM = bLdfX\n        if ( bLdfX < 0 ) :\n            bLdfX = 0\n    return lzeLM"}
{"old_id": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM", "code": "def TqkNM ( JJbsV , VaeHs ) :\n    RFpBf = 0\n    bBCWd = - math.OLdYy\n    LaMGQ = [ ]\n    LaMGQ.append ( JJbsV [ 0 ] )\n    for sefuM in range ( 1 , VaeHs ) :\n        LaMGQ.append ( LaMGQ [ sefuM - 1 ] + JJbsV [ sefuM ] )\n    for sefuM in range ( VaeHs ) :\n        bBCWd = max ( bBCWd , LaMGQ [ sefuM ] - RFpBf )\n        RFpBf = min ( RFpBf , LaMGQ [ sefuM ] )\n    return bBCWd"}
{"old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE", "code": "def InuSg ( ahAzZ , hfRap ) :\n    sum = [ 0 for cecMw in range ( hfRap ) ]\n    if hfRap >= 1 :\n        sum [ 0 ] = ahAzZ [ 0 ]\n    if hfRap >= 2 :\n        sum [ 1 ] = ahAzZ [ 0 ] + ahAzZ [ 1 ]\n    if hfRap > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( ahAzZ [ 1 ] + ahAzZ [ 2 ] , ahAzZ [ 0 ] + ahAzZ [ 2 ] ) )\n    for EiOnN in range ( 3 , hfRap ) :\n        sum [ EiOnN ] = max ( max ( sum [ EiOnN - 1 ] , sum [ EiOnN - 2 ] + ahAzZ [ EiOnN ] ) , ahAzZ [ EiOnN ] + ahAzZ [ EiOnN - 1 ] + sum [ EiOnN - 3 ] )\n    return sum [ hfRap - 1 ]"}
{"old_id": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT", "code": "def ZMGkF ( xZfCF , FvWOK ) :\n    GvgPy = max ( xZfCF [ 0 ] [ 0 ] , xZfCF [ 1 ] [ 0 ] )\n    kXEmH = 0\n    for MEoAD in range ( 1 , FvWOK ) :\n        mCiCF = max ( kXEmH , GvgPy )\n        GvgPy = kXEmH + max ( xZfCF [ 0 ] [ MEoAD ] , xZfCF [ 1 ] [ MEoAD ] )\n        kXEmH = mCiCF\n    return max ( kXEmH , GvgPy )"}
{"old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM", "code": "def OSmAR ( IKeTm , ejNOz ) :\n    if ( ejNOz == 1 ) :\n        return IKeTm [ 0 ]\n    jSlym = [ 0 for UDlbE in range ( ejNOz + 1 ) ]\n    kLDXv = [ 0 for UDlbE in range ( ejNOz + 1 ) ]\n    jSlym [ 0 ] = kLDXv [ 0 ] = IKeTm [ 0 ]\n    XCHxU = 0\n    for UDlbE in range ( 1 , ejNOz ) :\n        for sgYDM in range ( UDlbE ) :\n            if ( IKeTm [ sgYDM ] > IKeTm [ UDlbE ] ) :\n                jSlym [ UDlbE ] = max ( jSlym [ UDlbE ] , kLDXv [ sgYDM ] + IKeTm [ UDlbE ] )\n                XCHxU = 1\n            elif ( IKeTm [ sgYDM ] < IKeTm [ UDlbE ] and XCHxU == 1 ) :\n                kLDXv [ UDlbE ] = max ( kLDXv [ UDlbE ] , jSlym [ sgYDM ] + IKeTm [ UDlbE ] )\n    pAaKY = - 2147483648\n    for UDlbE in range ( ejNOz ) :\n        if ( pAaKY < kLDXv [ UDlbE ] ) :\n            pAaKY = kLDXv [ UDlbE ]\n        if ( pAaKY < jSlym [ UDlbE ] ) :\n            pAaKY = jSlym [ UDlbE ]\n    return pAaKY"}
{"old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY", "code": "def XPDHk ( MoIZT , fBknF ) :\n    amvog = [ None ] * fBknF\n    JXXFh = [ None ] * fBknF\n    XyzZt = 0\n    amvog [ 0 ] = MoIZT [ 0 ]\n    for HVGfo in range ( 1 , fBknF ) :\n        if ( MoIZT [ HVGfo ] > MoIZT [ HVGfo - 1 ] ) :\n            amvog [ HVGfo ] = amvog [ HVGfo - 1 ] + MoIZT [ HVGfo ]\n        else :\n            amvog [ HVGfo ] = MoIZT [ HVGfo ]\n    JXXFh [ fBknF - 1 ] = MoIZT [ fBknF - 1 ]\n    for HVGfo in range ( fBknF - 2 , - 1 , - 1 ) :\n        if ( MoIZT [ HVGfo ] > MoIZT [ HVGfo + 1 ] ) :\n            JXXFh [ HVGfo ] = JXXFh [ HVGfo + 1 ] + MoIZT [ HVGfo ]\n        else :\n            JXXFh [ HVGfo ] = MoIZT [ HVGfo ]\n    for HVGfo in range ( fBknF ) :\n        if ( XyzZt < ( amvog [ HVGfo ] + JXXFh [ HVGfo ] - MoIZT [ HVGfo ] ) ) :\n            XyzZt = ( amvog [ HVGfo ] + JXXFh [ HVGfo ] - MoIZT [ HVGfo ] )\n    return XyzZt"}
{"old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY", "code": "def uKHgC ( mCkDZ , oZAcf ) :\n    EcVvT = - sys.yFXap\n    for pNZJs in range ( 0 , oZAcf ) :\n        NCXke = 0\n        for SiqYZ in range ( 0 , oZAcf ) :\n            index = int ( ( pNZJs + SiqYZ ) % oZAcf )\n            NCXke += SiqYZ * mCkDZ [ index ]\n        EcVvT = max ( EcVvT , NCXke )\n    return EcVvT"}
{"old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1", "code": "def RGNUh ( WKFLX , gUCiz ) :\n    wCrry = 0\n    for rRuBW in range ( 0 , gUCiz ) :\n        wCrry += WKFLX [ rRuBW ]\n    JTzTE = 0\n    for rRuBW in range ( 0 , gUCiz ) :\n        JTzTE += rRuBW * WKFLX [ rRuBW ]\n    XJQwd = JTzTE\n    for rRuBW in range ( 1 , gUCiz ) :\n        WGGbU = ( JTzTE - ( wCrry - WKFLX [ rRuBW - 1 ] ) + WKFLX [ rRuBW - 1 ] * ( gUCiz - 1 ) )\n        JTzTE = WGGbU\n        XJQwd = max ( XJQwd , WGGbU )\n    return XJQwd"}
{"old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE", "code": "def Nnoly ( Focti , OdqsM , NwNam ) :\n    Focti.sort ( )\n    OmITZ = [ 0 ] * OdqsM\n    OmITZ [ 0 ] = 0\n    for CiaGE in range ( 1 , OdqsM ) :\n        OmITZ [ CiaGE ] = OmITZ [ CiaGE - 1 ]\n        if ( Focti [ CiaGE ] - Focti [ CiaGE - 1 ] < NwNam ) :\n            if ( CiaGE >= 2 ) :\n                OmITZ [ CiaGE ] = max ( OmITZ [ CiaGE ] , OmITZ [ CiaGE - 2 ] + Focti [ CiaGE ] + Focti [ CiaGE - 1 ] )\n            else :\n                OmITZ [ CiaGE ] = max ( OmITZ [ CiaGE ] , Focti [ CiaGE ] + Focti [ CiaGE - 1 ] )\n    return OmITZ [ OdqsM - 1 ]"}
{"old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1", "code": "def Oyqou ( arrOZ , UIohY , YNYdb ) :\n    wJorZ = 0\n    arrOZ.sort ( )\n    bqnzS = UIohY - 1\n    while ( bqnzS > 0 ) :\n        if ( arrOZ [ bqnzS ] - arrOZ [ bqnzS - 1 ] < YNYdb ) :\n            wJorZ += arrOZ [ bqnzS ]\n            wJorZ += arrOZ [ bqnzS - 1 ]\n            bqnzS -= 1\n        bqnzS -= 1\n    return wJorZ"}
{"old_id": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT", "code": "def SQHDl ( ycgYU , FUFtF ) :\n    DaWOf = [ 0 for xiODQ in range ( FUFtF ) ]\n    zPmon = [ 0 for xiODQ in range ( FUFtF ) ]\n    DcYVz , Ywnjl = ycgYU [ 0 ] , ycgYU [ 0 ]\n    for hSDMm in range (1, FUFtF ) :\n        DcYVz = max ( ycgYU [ hSDMm ] , DcYVz + ycgYU [ hSDMm ] )\n        Ywnjl = max ( Ywnjl , DcYVz )\n        DaWOf [ hSDMm ] = DcYVz\n    DcYVz = Ywnjl = zPmon [ FUFtF - 1 ] = ycgYU [ FUFtF - 1 ]\n    hSDMm = FUFtF - 2\n    while hSDMm >= 0 :\n        DcYVz = max ( ycgYU [ hSDMm ] , DcYVz + ycgYU [ hSDMm ] )\n        Ywnjl = max ( Ywnjl , DcYVz )\n        zPmon [ hSDMm ] = DcYVz\n        hSDMm -= 1\n    VNTPz = Ywnjl\n    for hSDMm in range ( 1 , FUFtF - 1 ) :\n        VNTPz = max ( VNTPz , DaWOf [ hSDMm - 1 ] + zPmon [ hSDMm + 1 ] )\n    return VNTPz"}
{"old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS", "code": "def miYxS ( kzyPJ , UaVAH , NkEof ) :\n    bggNt = [ 0 for MbTAv in range ( UaVAH ) ]\n    bggNt [ UaVAH - 1 ] = kzyPJ [ UaVAH - 1 ]\n    for MbTAv in range ( UaVAH - 2 , - 1 , - 1 ) :\n        if ( MbTAv + NkEof + 1 >= UaVAH ) :\n            bggNt [ MbTAv ] = max ( kzyPJ [ MbTAv ] , bggNt [ MbTAv + 1 ] )\n        else :\n            bggNt [ MbTAv ] = max ( kzyPJ [ MbTAv ] + bggNt [ MbTAv + NkEof + 1 ] , bggNt [ MbTAv + 1 ] )\n    return bggNt [ 0 ]"}
{"old_id": "MAXIMUM_TRIPLET_SUM_ARRAY", "code": "def utTWQ ( wDmov , KyvwK ) :\n    mGzZl = - 1000000\n    for HhZMD in range ( 0 , KyvwK ) :\n        for lPNXL in range ( HhZMD + 1 , KyvwK ) :\n            for LFupC in range ( lPNXL + 1 , KyvwK ) :\n                if ( mGzZl < ( wDmov [ HhZMD ] + wDmov [ lPNXL ] + wDmov [ LFupC ] ) ) :\n                    mGzZl = wDmov [ HhZMD ] + wDmov [ lPNXL ] + wDmov [ LFupC ]\n    return mGzZl"}
{"old_id": "MAXIMUM_TRIPLET_SUM_ARRAY_1", "code": "def TbrkK ( rEWwu , iyCVA ) :\n    rEWwu.sort ( )\n    return ( rEWwu [ iyCVA - 1 ] + rEWwu [ iyCVA - 2 ] + rEWwu [ iyCVA - 3 ] )"}
{"old_id": "MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING", "code": "def rTHDk ( EPuJl ) :\n    BPwOL = list ( )\n    BPwOL.append ( 0 )\n    BPwOL.append ( 1 )\n    ZFaoz = 2\n    while ZFaoz < EPuJl + 1 :\n        BPwOL.append ( max ( ZFaoz , ( BPwOL [ int ( ZFaoz / 2 ) ] + BPwOL [ int ( ZFaoz / 3 ) ] + BPwOL [ int ( ZFaoz / 4 ) ] + BPwOL [ int ( ZFaoz / 5 ) ] ) ) )\n        ZFaoz = ZFaoz + 1\n    return BPwOL [ EPuJl ]"}
{"old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX", "code": "def pKrdM ( TIepo , XOOqw ) :\n    KLMtF = [ [ 0 for NlwPE in range ( XOOqw ) ] for mjxhY in range ( XOOqw ) ]\n    KLMtF [ 0 ] [ 0 ] = TIepo [ 0 ] [ 0 ]\n    for NlwPE in range ( 1 , XOOqw ) :\n        KLMtF [ NlwPE ] [ 0 ] = TIepo [ NlwPE ] [ 0 ] + KLMtF [ NlwPE - 1 ] [ 0 ]\n    for NlwPE in range ( 1 , XOOqw ) :\n        for mjxhY in range ( 1 , min ( NlwPE + 1 , XOOqw ) ) :\n            KLMtF [ NlwPE ] [ mjxhY ] = TIepo [ NlwPE ] [ mjxhY ] + \\\n                max ( KLMtF [ NlwPE - 1 ] [ mjxhY - 1 ] , KLMtF [ NlwPE - 1 ] [ mjxhY ] )\n    jcfrA = 0\n    for NlwPE in range ( XOOqw ) :\n        if ( jcfrA < KLMtF [ XOOqw - 1 ] [ NlwPE ] ) :\n            jcfrA = KLMtF [ XOOqw - 1 ] [ NlwPE ]\n    return jcfrA"}
{"old_id": "MEDIAN_OF_TWO_SORTED_ARRAYS", "code": "def DdWgZ ( ijWaf , UBMfX , UJwvh ) :\n    hhhbs = 0\n    WGakQ = 0\n    SsDqq = - 1\n    LwXNr = - 1\n    count = 0\n    while count < UJwvh + 1 :\n        count += 1\n        if hhhbs == UJwvh :\n            SsDqq = LwXNr\n            LwXNr = UBMfX [ 0 ]\n            break\n        elif WGakQ == UJwvh :\n            SsDqq = LwXNr\n            LwXNr = ijWaf [ 0 ]\n            break\n        if ijWaf [ hhhbs ] < UBMfX [ WGakQ ] :\n            SsDqq = LwXNr\n            LwXNr = ijWaf [ hhhbs ]\n            hhhbs += 1\n        else :\n            SsDqq = LwXNr\n            LwXNr = UBMfX [ WGakQ ]\n            WGakQ += 1\n    return int(( SsDqq + LwXNr ) / 2)"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS", "code": "def NvVPS ( nqhwD , wykVC , HEWwM ) :\n    if ( ( nqhwD < wykVC and wykVC < HEWwM ) or ( HEWwM < wykVC and wykVC < nqhwD ) ) :\n        return wykVC\n    if ( ( wykVC < nqhwD and nqhwD < HEWwM ) or ( HEWwM < nqhwD and nqhwD < wykVC ) ) :\n        return nqhwD\n    else :\n        return HEWwM"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1", "code": "def GbTCN ( cAChA , QBNIj , cJVln ) :\n    if cAChA > QBNIj :\n        if ( QBNIj > cJVln ) :\n            return QBNIj\n        elif ( cAChA > cJVln ) :\n            return cJVln\n        else :\n            return cAChA\n    else :\n        if ( cAChA > cJVln ) :\n            return cAChA\n        elif ( QBNIj > cJVln ) :\n            return cJVln\n        else :\n            return QBNIj"}
{"old_id": "MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2", "code": "def yfkLl ( EoueW , sydMu , vbnTR ) :\n    YkLyy = EoueW - sydMu\n    UOtFp = sydMu - vbnTR\n    OcOdG = EoueW - vbnTR\n    if YkLyy * UOtFp > 0 :\n        return sydMu\n    elif ( YkLyy * OcOdG > 0 ) :\n        return vbnTR\n    else :\n        return EoueW"}
{"old_id": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED", "code": "def wszYJ ( nHoXy , MceSa , VzBAj ) :\n    sorted ( nHoXy )\n    sorted ( MceSa )\n    kiJZF = 0\n    for REPLa in range ( VzBAj ) :\n        kiJZF += ( nHoXy [ REPLa ] * MceSa [ VzBAj - REPLa - 1 ] )\n    return kiJZF"}
{"old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS", "code": "def TjrAj ( yntVq , IDlkY , brIPc ) :\n    if ( IDlkY == 1 ) :\n        return 0\n    yntVq.sort ( )\n    TxmxF = yntVq [ IDlkY - 1 ] - yntVq [ 0 ]\n    aWTvY = yntVq [ 0 ] + brIPc\n    tqBZO = yntVq [ IDlkY - 1 ] - brIPc\n    if ( aWTvY > tqBZO ) :\n        aWTvY , tqBZO = tqBZO , aWTvY\n    for WICUC in range ( 1 , IDlkY - 1 ) :\n        ASXVz = yntVq [ WICUC ] - brIPc\n        add = yntVq [ WICUC ] + brIPc\n        if ( ASXVz >= aWTvY or add <= tqBZO ) :\n            continue\n        if ( tqBZO - ASXVz <= add - aWTvY ) :\n            aWTvY = ASXVz\n        else :\n            tqBZO = add\n    return min ( TxmxF , tqBZO - aWTvY )"}
{"old_id": "MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N", "code": "def osmvH ( cCTOB ) :\n    sum = 0\n    while ( cCTOB > 0 ) :\n        sum += ( cCTOB % 10 )\n        cCTOB //= 10\n    if ( sum == 1 ) :\n        return 10\n    return sum"}
{"old_id": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY", "code": "def NXBDu ( ULmrZ , fjrQx ) :\n    wuSgd = sys.EZMnX\n    sum = 0\n    for uVGMO in range ( fjrQx ) :\n        wuSgd = min ( ULmrZ [ uVGMO ] , wuSgd )\n        sum += ULmrZ [ uVGMO ]\n    return wuSgd * ( sum - wuSgd )"}
{"old_id": "MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS", "code": "def HxVDJ ( PpKqc , jZjge ) :\n    return ( ( jZjge - 1 ) * min ( PpKqc ) )"}
{"old_id": "MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K", "code": "def nkITb ( soGXQ , mNHBI , bdgdf , YbdRc , XpVcn , KxunF ) :\n    if XpVcn == 0 :\n        return 0\n    if bdgdf < 0 or YbdRc < 0 :\n        return 1000000000\n    if KxunF [ bdgdf ] [ YbdRc ] [ XpVcn ] != - 1 :\n        return KxunF [ bdgdf ] [ YbdRc ] [ XpVcn ]\n    IUcmt = ( ( ord ( soGXQ [ bdgdf ] ) - ord ( 'a' ) ) ^ ( ord ( mNHBI [ YbdRc ] ) - ord ( 'a' ) ) )\n    KxunF [ bdgdf ] [ YbdRc ] [ XpVcn ] = min ( [ IUcmt + nkITb ( soGXQ , mNHBI , bdgdf - 1 , YbdRc - 1 , XpVcn - 1 , KxunF ) , nkITb ( soGXQ , mNHBI , bdgdf - 1 , YbdRc , XpVcn , KxunF ) , nkITb ( soGXQ , mNHBI , bdgdf , YbdRc - 1 , XpVcn , KxunF ) ] )\n    return KxunF [ bdgdf ] [ YbdRc ] [ XpVcn ]"}
{"old_id": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1", "code": "def VhxcA ( mVZKm , LNGhX ) :\n    flKdB = 0\n    for nYYXF in range ( LNGhX ) :\n        for SYLhp in range ( LNGhX ) :\n            QbuXX = mVZKm [ nYYXF ] [ SYLhp ] // LNGhX\n            TIKOT = QbuXX\n            IYhwE = mVZKm [ nYYXF ] [ SYLhp ] - ( LNGhX * QbuXX )\n            flKdB += ( abs ( TIKOT - nYYXF ) + abs ( IYhwE - SYLhp ) )\n    return flKdB"}
{"old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG", "code": "def VcvNB ( zLmNn , VuGYF , gYxxN ) :\n    oNCFP = list ( )\n    mCNHK = list ( )\n    KOgVn = 0\n    for dEBxG in range ( VuGYF ) :\n        if ( zLmNn [ dEBxG ] != - 1 ) :\n            oNCFP.append ( zLmNn [ dEBxG ] )\n            mCNHK.append ( dEBxG + 1 )\n            KOgVn += 1\n    VuGYF = KOgVn\n    RCabb = [ [ 0 for dEBxG in range ( gYxxN + 1 ) ] for YPbrd in range ( VuGYF + 1 ) ]\n    for dEBxG in range ( gYxxN + 1 ) :\n        RCabb [ 0 ] [ dEBxG ] = wFTDZ\n    for dEBxG in range ( 1 , VuGYF + 1 ) :\n        RCabb [ dEBxG ] [ 0 ] = 0\n    for dEBxG in range ( 1 , VuGYF + 1 ) :\n        for YPbrd in range ( 1 , gYxxN + 1 ) :\n            if ( mCNHK [ dEBxG - 1 ] > YPbrd ) :\n                RCabb [ dEBxG ] [ YPbrd ] = RCabb [ dEBxG - 1 ] [ YPbrd ]\n            else :\n                RCabb [ dEBxG ] [ YPbrd ] = min ( RCabb [ dEBxG - 1 ] [ YPbrd ] , RCabb [ dEBxG ] [ YPbrd - mCNHK [ dEBxG - 1 ] ] + oNCFP [ dEBxG - 1 ] )\n    if ( RCabb [ VuGYF ] [ gYxxN ] == wFTDZ ) :\n        return - 1\n    else :\n        return RCabb [ VuGYF ] [ gYxxN ]"}
{"old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1", "code": "def FGRxU ( glgkb , nGEnk ) :\n    Ahghu = 0\n    for YnUTd in range ( nGEnk ) :\n        for amaue in range ( YnUTd ) :\n            if glgkb [ YnUTd ] [ amaue ] != glgkb [ amaue ] [ YnUTd ] :\n                Ahghu += 1\n    return Ahghu"}
{"old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL", "code": "def orSva ( aNvXp , YYJgA , oPeoV ) :\n    yHbSh = max ( aNvXp )\n    EipMJ = 0\n    for krIcg in range ( 0 , YYJgA ) :\n        if ( ( yHbSh - aNvXp [ krIcg ] ) % oPeoV != 0 ) :\n            return - 1\n        else :\n            EipMJ += ( yHbSh - aNvXp [ krIcg ] ) / oPeoV\n    return int ( EipMJ )"}
{"old_id": "MINIMUM_INSERTIONS_SORT_ARRAY", "code": "def zphaf ( urMkO , hbojo ) :\n    eGTpn = [ 0 ] * hbojo\n    for shQNh in range ( hbojo ) :\n        eGTpn [ shQNh ] = 1\n    for shQNh in range ( 1 , hbojo ) :\n        for xKpKl in range ( shQNh ) :\n            if ( urMkO [ shQNh ] >= urMkO [ xKpKl ] and eGTpn [ shQNh ] < eGTpn [ xKpKl ] + 1 ) :\n                eGTpn [ shQNh ] = eGTpn [ xKpKl ] + 1\n    max = 0\n    for shQNh in range ( hbojo ) :\n        if ( max < eGTpn [ shQNh ] ) :\n            max = eGTpn [ shQNh ]\n    return ( hbojo - max )"}
{"old_id": "MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1", "code": "def ZzoNj ( FfDen , rryLR , pJjYM ) :\n    zXCQX = 0\n    rfhLC = rryLR + 1\n    yvwVN = 0\n    SyZTY = 0\n    while ( SyZTY < rryLR ) :\n        while ( zXCQX <= pJjYM and SyZTY < rryLR ) :\n            if ( zXCQX <= 0 and pJjYM > 0 ) :\n                yvwVN = SyZTY\n                zXCQX = 0\n            zXCQX += FfDen [ SyZTY ]\n            SyZTY += 1\n        while ( zXCQX > pJjYM and yvwVN < rryLR ) :\n            if ( SyZTY - yvwVN < rfhLC ) :\n                rfhLC = SyZTY - yvwVN\n            zXCQX -= FfDen [ yvwVN ]\n            yvwVN += 1\n    return rfhLC"}
{"old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1", "code": "def DyBFL ( UAsqR , qACLS ) :\n    MHAdx = [ 0 for swXaa in range ( qACLS ) ]\n    if ( qACLS == 0 ) or ( UAsqR [ 0 ] == 0 ) :\n        return float ( 'inf' )\n    MHAdx [ 0 ] = 0\n    for swXaa in range ( 1 , qACLS ) :\n        MHAdx [ swXaa ] = float ( 'inf' )\n        for doHQI in range ( swXaa ) :\n            if ( swXaa <= doHQI + UAsqR [ doHQI ] ) and ( MHAdx [ doHQI ] != float ( 'inf' ) ) :\n                MHAdx [ swXaa ] = min ( MHAdx [ swXaa ] , MHAdx [ doHQI ] + 1 )\n                break\n    return MHAdx [ qACLS - 1 ]"}
{"old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2", "code": "def rbVsP ( NvAdX , RbDkp ) :\n    MyBJj = [ 0 for etsMe in range ( RbDkp ) ]\n    for etsMe in range ( RbDkp - 2 , - 1 , - 1 ) :\n        if ( NvAdX [ etsMe ] == 0 ) :\n            MyBJj [ etsMe ] = float ( 'inf' )\n        elif ( NvAdX [ etsMe ] >= RbDkp - etsMe - 1 ) :\n            MyBJj [ etsMe ] = 1\n        else :\n            min = float ( 'inf' )\n            for BWoMd in range ( etsMe + 1 , RbDkp ) :\n                if ( BWoMd <= NvAdX [ etsMe ] + etsMe ) :\n                    if ( min > MyBJj [ BWoMd ] ) :\n                        min = MyBJj [ BWoMd ]\n            if ( min != float ( 'inf' ) ) :\n                MyBJj [ etsMe ] = min + 1\n            else :\n                MyBJj [ etsMe ] = min\n    return MyBJj [ 0 ]"}
{"old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1", "code": "def hEmpS ( gJXHZ ) :\n    NwkvI = [ 0 , 1 , 2 , 3 ]\n    for PSeaX in range ( 4 , gJXHZ + 1 ) :\n        NwkvI.append ( PSeaX )\n        for tDuIj in range ( 1 , int ( rckrX ( mQrlq ( PSeaX ) ) ) + 1 ) :\n            KunDT = tDuIj * tDuIj ;\n            if KunDT > PSeaX :\n                break\n            else :\n                NwkvI [ PSeaX ] = min ( NwkvI [ PSeaX ] , 1 + NwkvI [ PSeaX - KunDT ] )\n    return NwkvI [ gJXHZ ]"}
{"old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS", "code": "def iNbgr ( vUIHt , xVHmj ) :\n    yAzsA = 0\n    vUIHt.sort ( )\n    HDeLj = 0\n    while HDeLj < xVHmj:\n        count = 1\n        pjJYx = HDeLj\n        while pjJYx < xVHmj - 1:\n            if vUIHt [ pjJYx ] == vUIHt [ pjJYx + 1 ] :\n                count += 1\n            else :\n                break\n            pjJYx += 1\n        HDeLj = pjJYx\n        HDeLj += 1\n        yAzsA = max ( yAzsA , count )\n    return yAzsA"}
{"old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1", "code": "def tBzjV ( FUqNE , mbBjR ) :\n    yYQlu = max(FUqNE)\n    sGBNO = min(FUqNE)\n    hVnFA = { iAEEr : 0 for iAEEr in range ( sGBNO, yYQlu+1 ) }\n    for iAEEr in range ( mbBjR ) :\n        hVnFA [ FUqNE [ iAEEr ] ] += 1\n    eQTbJ = 0\n    for nCUBO , YYSxc in hVnFA.items ( ) :\n        eQTbJ = max ( eQTbJ , YYSxc )\n    return eQTbJ"}
{"old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY", "code": "def CZvdS ( rsTMr , AnvrR ) :\n    zqBVt = HWyQr ( lambda : 0 )\n    for tfzAx in range ( 0 , AnvrR ) :\n        zqBVt [ rsTMr [ tfzAx ] ] += 1\n    riKci = 0\n    for tfzAx in zqBVt :\n        if riKci < zqBVt [ tfzAx ] :\n            riKci = zqBVt [ tfzAx ]\n    return AnvrR - riKci"}
{"old_id": "MINIMUM_PERIMETER_N_BLOCKS", "code": "def lnmBa ( Hceij ) :\n    bznEd = int ( math.vsJht ( Hceij ) )\n    oOzpi = bznEd * bznEd\n    if ( oOzpi == Hceij ) :\n        return bznEd * 4\n    else :\n        DxTno = int ( Hceij / bznEd )\n        uBRDc = 2 * ( bznEd + DxTno )\n        if ( Hceij % bznEd != 0 ) :\n            uBRDc += 2\n        return uBRDc"}
{"old_id": "MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS", "code": "def lnlai(xTKBQ, SPMCD, eZYud):\n    MQzZB = []\n    for ZAAax in range(SPMCD):\n        heapq.FNgdv(MQzZB, xTKBQ[ZAAax])\n    count = 0\n    uncfU = 1\n    while MQzZB and count < eZYud:\n        uncfU += heapq.wVFBx(MQzZB)\n        count += 1\n    return uncfU"}
{"old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY", "code": "def gjdgH ( owDKr , PZEZQ ) :\n    if ( PZEZQ == 1 ) :\n        return owDKr [ 0 ]\n    vrEDM = float ( '-inf' )\n    wBuiB = float ( 'inf' )\n    TQJCP = 0\n    KDZlp = 0\n    OCeFN = 1\n    for YtCsk in range ( 0 , PZEZQ ) :\n        if ( owDKr [ YtCsk ] == 0 ) :\n            KDZlp = KDZlp + 1\n            continue\n        if ( owDKr [ YtCsk ] < 0 ) :\n            TQJCP = TQJCP + 1\n            vrEDM = max ( vrEDM , owDKr [ YtCsk ] )\n        if ( owDKr [ YtCsk ] > 0 ) :\n            wBuiB = min ( wBuiB , owDKr [ YtCsk ] )\n        OCeFN = OCeFN * owDKr [ YtCsk ]\n    if ( KDZlp == PZEZQ or ( TQJCP == 0 and KDZlp > 0 ) ) :\n        return 0\n    if ( TQJCP == 0 ) :\n        return wBuiB\n    if ( ( TQJCP & 1 ) == 0 and TQJCP != 0 ) :\n        OCeFN = int ( OCeFN / vrEDM )\n    return OCeFN"}
{"old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE", "code": "def yfpBZ ( cVMoR , Wplum , EgKey ) :\n    MNiVo = [ 0 ] * EgKey\n    for tqAxj in range ( Wplum ) :\n        for wowAK in range ( EgKey ) :\n            if tqAxj < len(cVMoR) and wowAK < len(cVMoR[tqAxj]):\n                if ( cVMoR [ tqAxj ] [ wowAK ] == '1' ) :\n                    MNiVo [ wowAK ] += 1\n    return max ( MNiVo )"}
{"old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING", "code": "def GbXlX ( str ) :\n    ZamqX = str + str\n    cmMRU = len ( str )\n    for JvXIs in range ( 1 , cmMRU + 1 ) :\n        rzefY = ZamqX [ JvXIs : cmMRU ]\n        if ( str == rzefY ) :\n            return JvXIs\n    return cmMRU"}
{"old_id": "MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK", "code": "def QfmeL ( input , erDsg ) :\n    PYEPV = 0\n    while ( input > 0 or erDsg > 0 ) :\n        TjUQa = input % 10\n        dpyzI = erDsg % 10\n        PYEPV += min ( abs ( TjUQa - dpyzI ) , 10 - abs ( TjUQa - dpyzI ) )\n        input = int ( input / 10 )\n        erDsg = int ( erDsg / 10 )\n    return PYEPV"}
{"old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION", "code": "def ozWwp ( xxhfR ) :\n    Rpffq = [ 0 ] * ( xxhfR + 1 )\n    for eAOhR in range ( xxhfR + 1 ) :\n        Rpffq [ eAOhR ] = xxhfR - eAOhR\n    for eAOhR in range ( xxhfR , 0 , - 1 ) :\n        if ( not ( eAOhR % 2 ) ) :\n            Rpffq [ eAOhR // 2 ] = min ( Rpffq [ eAOhR ] + 1 , Rpffq [ eAOhR // 2 ] )\n        if ( not ( eAOhR % 3 ) ) :\n            Rpffq [ eAOhR // 3 ] = min ( Rpffq [ eAOhR ] + 1 , Rpffq [ eAOhR // 3 ] )\n    return Rpffq [ 1 ]"}
{"old_id": "MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY", "code": "def QzooL ( UluKt, oIrtd ) :\n    vfimn = min ( UluKt ) ;\n    return vfimn * ( oIrtd - 1 )"}
{"old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS", "code": "def kLJjG ( vlUTG , XeMhM , IMAUo , PzhBf ) :\n    LPjlS = 0\n    htskF = 0\n    wqBlJ = 0\n    for FLRQu in range ( IMAUo ) :\n        Hmilv = vlUTG [ FLRQu ] * XeMhM [ FLRQu ]\n        htskF = htskF + Hmilv\n        if ( Hmilv < 0 and XeMhM [ FLRQu ] < 0 ) :\n            wqBlJ = ( vlUTG [ FLRQu ] + 2 * PzhBf ) * XeMhM [ FLRQu ]\n        elif ( Hmilv < 0 and vlUTG [ FLRQu ] < 0 ) :\n            wqBlJ = ( vlUTG [ FLRQu ] - 2 * PzhBf ) * XeMhM [ FLRQu ]\n        elif ( Hmilv > 0 and vlUTG [ FLRQu ] < 0 ) :\n            wqBlJ = ( vlUTG [ FLRQu ] + 2 * PzhBf ) * XeMhM [ FLRQu ]\n        elif ( Hmilv > 0 and vlUTG [ FLRQu ] > 0 ) :\n            wqBlJ = ( vlUTG [ FLRQu ] - 2 * PzhBf ) * XeMhM [ FLRQu ]\n        LTtDm = abs ( Hmilv - wqBlJ )\n        if ( LTtDm > LPjlS ) :\n            LPjlS = LTtDm\n    return htskF - LPjlS"}
{"old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED", "code": "def NsGxy ( ePVYn , ZAjOs ) :\n    FhBDg = [ 0 ] * ZAjOs\n    if ( ZAjOs == 1 ) :\n        return ePVYn [ 0 ]\n    if ( ZAjOs == 2 ) :\n        return min ( ePVYn [ 0 ] , ePVYn [ 1 ] )\n    if ( ZAjOs == 3 ) :\n        return min ( ePVYn [ 0 ] , min ( ePVYn [ 1 ] , ePVYn [ 2 ] ) )\n    if ( ZAjOs == 4 ) :\n        return min ( min ( ePVYn [ 0 ] , ePVYn [ 1 ] ) , min ( ePVYn [ 2 ] , ePVYn [ 3 ] ) )\n    FhBDg [ 0 ] = ePVYn [ 0 ]\n    FhBDg [ 1 ] = ePVYn [ 1 ]\n    FhBDg [ 2 ] = ePVYn [ 2 ]\n    FhBDg [ 3 ] = ePVYn [ 3 ]\n    for UoVjr in range ( 4 , ZAjOs ) :\n        FhBDg [ UoVjr ] = ePVYn [ UoVjr ] + min ( min ( FhBDg [ UoVjr - 1 ] , FhBDg [ UoVjr - 2 ] ) , min ( FhBDg [ UoVjr - 3 ] , FhBDg [ UoVjr - 4 ] ) )\n    return min ( min ( FhBDg [ ZAjOs - 1 ] , FhBDg [ ZAjOs - 2 ] ) , min ( FhBDg [ ZAjOs - 4 ] , FhBDg [ ZAjOs - 3 ] ) )"}
{"old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY", "code": "def evsAi ( wRPBA , lKvAl ) :\n    wRPBA.sort ( )\n    rDdod = 0\n    LFmxw = 0\n    for uafpE in range ( lKvAl ) :\n        if ( uafpE % 2 != 0 ) :\n            rDdod = rDdod * 10 + wRPBA [ uafpE ]\n        else :\n            LFmxw = LFmxw * 10 + wRPBA [ uafpE ]\n    return rDdod + LFmxw"}
{"old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION", "code": "def eSGWE ( HfyKz , insert , remove , copy ) :\n    if HfyKz == 0 :\n        return 0\n    if HfyKz == 1 :\n        return insert\n    QibsH = [ 0 ] * ( HfyKz + 1 )\n    for STYoF in range ( 1 , HfyKz + 1 ) :\n        if STYoF % 2 == 0 :\n            QibsH [ STYoF ] = min ( QibsH [ STYoF - 1 ] + insert , QibsH [ STYoF // 2 ] + copy )\n        else :\n            QibsH [ STYoF ] = min ( QibsH [ STYoF - 1 ] + insert , QibsH [ ( STYoF + 1 ) // 2 ] + copy + remove )\n    return QibsH [ HfyKz ]"}
{"old_id": "MINIMUM_XOR_VALUE_PAIR", "code": "def XFYBO ( JRtsa , eLQxw ) :\n    vLVhU = 999999\n    ITGPw = 0\n    for SoZPF in range ( 0 , eLQxw ) :\n        for QUMEw in range ( SoZPF + 1 , eLQxw ) :\n            ITGPw = JRtsa [ SoZPF ] ^ JRtsa [ QUMEw ]\n            vLVhU = min ( vLVhU , ITGPw )\n    return vLVhU"}
{"old_id": "MINIMUM_XOR_VALUE_PAIR_1", "code": "def FlxWD ( gqcZy , YslYz ) :\n    gqcZy = gqcZy [ : YslYz ]\n    gqcZy.sort ( )\n    FkSyO = int ( sys.PfSxn.max )\n    DccAz = 0\n    for WcXzc in range ( 0 , YslYz - 1 ) :\n        DccAz = gqcZy [ WcXzc ] ^ gqcZy [ WcXzc + 1 ]\n        FkSyO = min ( FkSyO , DccAz )\n    return FkSyO"}
{"old_id": "MIRROR_CHARACTERS_STRING", "code": "def wPWSx ( str , HORCC ) :\n    EDwWv = \"zyxwvutsrqponmlkjihgfedcba\"\n    zcokS = len ( str )\n    PUjtd = \"\"\n    for imNVB in range ( 0 , HORCC ) :\n        if imNVB < zcokS:\n            PUjtd = PUjtd + str [ imNVB ]\n    for imNVB in range ( HORCC , zcokS ) :\n        PUjtd = ( PUjtd + EDwWv [ ord ( str [ imNVB ] ) - ord ( \"a\" ) ] )\n    return PUjtd"}
{"old_id": "MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC", "code": "def ezBMM ( FAHlD , llpQj , DEEey ) :\n    TXVRd = 1\n    FAHlD = FAHlD % DEEey\n    while ( llpQj > 0 ) :\n        if ( ( llpQj & 1 ) == 1 ) :\n            TXVRd = ( TXVRd * FAHlD ) % DEEey\n        llpQj = llpQj >> 1\n        FAHlD = ( FAHlD * FAHlD ) % DEEey\n    return TXVRd"}
{"old_id": "MODULUS_TWO_FLOAT_DOUBLE_NUMBERS", "code": "def zlmXq ( ujvgH , fQsBq ) :\n    if ( ujvgH < 0 ) :\n        ujvgH = - ujvgH\n    if ( fQsBq < 0 ) :\n        fQsBq = - fQsBq\n    xCqFj = ujvgH\n    while ( xCqFj >= fQsBq ) :\n        xCqFj = xCqFj - fQsBq\n    if ( ujvgH < 0 ) :\n        return - xCqFj\n    return xCqFj"}
{"old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED", "code": "def eYMZU ( xZWtp , eFIhS ) :\n    CjIpQ = [ 0 for ymsiv in range ( eFIhS ) ]\n    CRjsD = 0\n    for hgAcn in range ( eFIhS ) :\n        if ( xZWtp [ hgAcn ] >= 0 ) :\n            CjIpQ [ CRjsD ] = xZWtp [ hgAcn ]\n            CRjsD += 1\n    if ( CRjsD == eFIhS or CRjsD == 0 ) :\n        return\n    for hgAcn in range ( eFIhS ) :\n        if ( xZWtp [ hgAcn ] < 0 ) :\n            CjIpQ [ CRjsD ] = xZWtp [ hgAcn ]\n            CRjsD += 1\n    for ymsiv in range ( eFIhS ) :\n        xZWtp [ ymsiv ] = CjIpQ [ ymsiv ]"}
{"old_id": "MULTIPLY_AN_INTEGER_WITH_3_5", "code": "def Lnhlm ( HPvAx ) :\n    return ( HPvAx << 1 ) + HPvAx + ( HPvAx >> 1 )"}
{"old_id": "MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO", "code": "def jgLJE ( DwnVJ , PGCnu , CYlWm ) :\n    DIwtY = 0 ;\n    DwnVJ = DwnVJ % CYlWm ;\n    while ( PGCnu ) :\n        if ( PGCnu & 1 ) :\n            DIwtY = ( DIwtY + DwnVJ ) % CYlWm ;\n        DwnVJ = ( 2 * DwnVJ ) % CYlWm ;\n        PGCnu >>= 1 ;\n    return DIwtY ;"}
{"old_id": "MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS", "code": "def EvuGn ( kiGfI , QelGS ) :\n    if ( QelGS == 0 ) :\n        return 0\n    if ( QelGS > 0 ) :\n        return ( kiGfI + EvuGn ( kiGfI , QelGS - 1 ) )\n    if ( QelGS < 0 ) :\n        return - EvuGn ( kiGfI , - QelGS )"}
{"old_id": "NEWMAN_CONWAY_SEQUENCE_1", "code": "def nLvAo ( yKgjl ) :\n    HVuDm = UyiXh.UyiXh ( 'i' , [ 0 , 1 , 1 ] )\n    for ieTdl in range ( 3 , yKgjl + 1 ) :\n        WVoUH = HVuDm [ HVuDm [ ieTdl - 1 ] ] + HVuDm [ ieTdl - HVuDm [ ieTdl - 1 ] ]\n        HVuDm.append ( WVoUH )\n    return HVuDm[yKgjl]"}
{"old_id": "NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS", "code": "def sZiaH ( BcNfK ) :\n    next = 0\n    if ( BcNfK ) :\n        mxuwT = BcNfK & - ( BcNfK )\n        kafLj = BcNfK + int ( mxuwT )\n        CCPhW = BcNfK ^ int ( kafLj )\n        CCPhW = ( int ( CCPhW ) / int ( mxuwT ) )\n        CCPhW = int ( CCPhW ) >> 2\n        next = kafLj | CCPhW\n    return next"}
{"old_id": "NEXT_POWER_OF_2", "code": "def MtHeu ( AfBMS ) :\n    count = 0\n    if ( AfBMS and not ( AfBMS & ( AfBMS - 1 ) ) ) :\n        return AfBMS\n    while ( AfBMS != 0 ) :\n        AfBMS >>= 1\n        count += 1\n    return 1 << count"}
{"old_id": "NEXT_POWER_OF_2_1", "code": "def fPBSw ( EtrGF ) :\n    pZTfU = 1\n    if ( EtrGF and not ( EtrGF & ( EtrGF - 1 ) ) ) :\n        return EtrGF\n    while ( pZTfU < EtrGF ) :\n        pZTfU <<= 1\n    return pZTfU"}
{"old_id": "NEXT_POWER_OF_2_2", "code": "def GACxq ( KcOur ) :\n    KcOur -= 1\n    KcOur |= KcOur >> 1\n    KcOur |= KcOur >> 2\n    KcOur |= KcOur >> 4\n    KcOur |= KcOur >> 8\n    KcOur |= KcOur >> 16\n    KcOur += 1\n    return KcOur"}
{"old_id": "NON_REPEATING_ELEMENT", "code": "def GtXox ( fFCOg , Mbqpz ) :\n    for UvICb in range ( Mbqpz ) :\n        IgQZz = 0\n        while ( IgQZz < Mbqpz ) :\n            if ( UvICb != IgQZz and fFCOg [ UvICb ] == fFCOg [ IgQZz ] ) :\n                break\n            IgQZz += 1\n        if ( IgQZz == Mbqpz ) :\n            return fFCOg [ UvICb ]\n    return - 1"}
{"old_id": "NON_REPEATING_ELEMENT_1", "code": "def oJpGw ( fHPZd , IkJVf ) :\n    XuhXY = SRoVX ( lambda : 0 )\n    for IZVvu in range ( IkJVf ) :\n        XuhXY [ fHPZd [ IZVvu ] ] += 1\n    for IZVvu in range ( IkJVf ) :\n        if XuhXY [ fHPZd [ IZVvu ] ] == 1 :\n            return fHPZd [ IZVvu ]\n    return - 1"}
{"old_id": "NTH_EVEN_LENGTH_PALINDROME", "code": "def cfpwW ( rrFBb ) :\n    jIoFC = rrFBb\n    for qYbYu in range ( len ( rrFBb ) - 1 , - 1 , - 1 ) :\n        jIoFC += rrFBb [ qYbYu ]\n    return jIoFC"}
{"old_id": "NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES", "code": "def HNPMA ( YoArU , KwbME ) :\n    flftn = 0\n    IdiTU = 1\n    sHIko = 2\n    while sHIko != 0 :\n        TtQGM = flftn + IdiTU\n        flftn = IdiTU\n        IdiTU = TtQGM\n        if IdiTU % YoArU == 0 :\n            return KwbME * sHIko\n        sHIko += 1\n    return"}
{"old_id": "NTH_NON_FIBONACCI_NUMBER", "code": "def JBmdM ( Updse ) :\n    aFdzk = 1\n    IPezO = 2\n    JqTYn = 3\n    while Updse > 0 :\n        aFdzk = IPezO\n        IPezO = JqTYn\n        JqTYn = aFdzk + IPezO\n        Updse = Updse - ( JqTYn - IPezO - 1 )\n    Updse = Updse + ( JqTYn - IPezO - 1 )\n    return IPezO + Updse"}
{"old_id": "NTH_PENTAGONAL_NUMBER", "code": "def RryVJ ( kEVDo ) :\n    return ( 3 * kEVDo * kEVDo - kEVDo ) / 2"}
{"old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS", "code": "def cpzpx ( FlofQ , szMgt ) :\n    count = 0\n    ptRdO = abs ( FlofQ * szMgt )\n    if ( ptRdO == 0 ) :\n        return 1\n    while ( ptRdO > 0 ) :\n        count = count + 1\n        ptRdO = ptRdO // 10\n    return count"}
{"old_id": "NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1", "code": "def BzURM ( xLZnI , jEdKJ ) :\n    if ( xLZnI == 0 or jEdKJ == 0 ) :\n        return 1\n    return math.oYcsm ( math.iSqAG ( abs ( xLZnI ) ) + math.iSqAG ( abs ( jEdKJ ) ) ) + 1"}
{"old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3", "code": "def GOXDV ( PQifc ) :\n    xFXPa = len ( PQifc )\n    sum = 0\n    for gAfxm in range ( xFXPa ) :\n        sum += ord ( PQifc [ gAfxm ] )\n    if ( sum % 3 == 0 ) :\n        return 0\n    if ( xFXPa == 1 ) :\n        return - 1\n    for gAfxm in range ( xFXPa ) :\n        if ( sum % 3 == ord ( PQifc [ gAfxm ] ) % 3 ) :\n            return 1\n    if ( xFXPa == 2 ) :\n        return - 1\n    return 2"}
{"old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE", "code": "def MKnOC ( VvsKs , BOqKt , kaCwB , Zugkf ) :\n    count = 0\n    for hPhdU in range ( kaCwB , Zugkf ) :\n        if ( VvsKs [ hPhdU ] == VvsKs [ hPhdU + 1 ] ) :\n            count += 1\n    return count"}
{"old_id": "NUMBER_IS_DIVISIBLE_BY_29_OR_NOT", "code": "def NYIEp ( YLVyv ) :\n    while ( int ( YLVyv / 100 ) ) :\n        ctilV = int ( YLVyv % 10 )\n        YLVyv = int ( YLVyv / 10 )\n        YLVyv += ctilV * 3\n    return ( YLVyv % 29 == 0 )"}
{"old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N", "code": "def oUfPX ( csxhf ) :\n    DxKHt = 0\n    for UMyHt in range ( csxhf + 1 ) :\n        for voHkV in range ( csxhf + 1 ) :\n            for VOaVr in range ( csxhf + 1 ) :\n                if UMyHt + voHkV + VOaVr == csxhf :\n                    DxKHt += 1\n    return DxKHt"}
{"old_id": "NUMBER_N_DIGITS_NON_DECREASING_INTEGERS", "code": "def MXXVN ( vOsCC ) :\n    LDqco = KRVqh.BgsXU ( ( vOsCC + 1 , 10 ) )\n    for GExZA in range ( 10 ) :\n        LDqco [ 0 ] [ GExZA ] = 1\n    for GExZA in range ( 1 , vOsCC + 1 ) :\n        LDqco [ GExZA ] [ 9 ] = 1\n    for GExZA in range ( 1 , vOsCC + 1 ) :\n        for IkhxK in range ( 8 , - 1 , - 1 ) :\n            LDqco [ GExZA ] [ IkhxK ] = LDqco [ GExZA - 1 ] [ IkhxK ] + LDqco [ GExZA ] [ IkhxK + 1 ]\n    return int ( LDqco [ vOsCC ] [ 0 ] )"}
{"old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS", "code": "def GUowX ( PALtV ) :\n    KcYlH = [ [ 0 for TsAkr in range ( 10 ) ] for Dqrke in range ( PALtV + 1 ) ]\n    if ( PALtV == 1 ) :\n        return 10\n    for YeXZJ in range ( 10 ) :\n        KcYlH [ 1 ] [ YeXZJ ] = 1\n    for KnoRB in range ( 2 , PALtV + 1 ) :\n        for YeXZJ in range ( 10 ) :\n            if ( YeXZJ == 0 ) :\n                KcYlH [ KnoRB ] [ YeXZJ ] = KcYlH [ KnoRB - 1 ] [ YeXZJ + 1 ]\n            elif ( YeXZJ == 9 ) :\n                KcYlH [ KnoRB ] [ YeXZJ ] = KcYlH [ KnoRB - 1 ] [ YeXZJ - 1 ]\n            else :\n                KcYlH [ KnoRB ] [ YeXZJ ] = ( KcYlH [ KnoRB - 1 ] [ YeXZJ - 1 ] + KcYlH [ KnoRB - 1 ] [ YeXZJ + 1 ] )\n    sum = 0\n    for YeXZJ in range ( 1 , 10 ) :\n        sum = sum + KcYlH [ PALtV ] [ YeXZJ ]\n    return sum"}
{"old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT", "code": "def VWtJS ( Qtcyj , wcfkI ) :\n    fBFVW = 0\n    fMsOT = 0\n    for ZGcJM in range ( wcfkI ) :\n        if Qtcyj [ ZGcJM ] == 0 :\n            fBFVW += 1\n        if Qtcyj [ ZGcJM ] == 2 :\n            fMsOT += 1\n    CNNAR = ( fBFVW * ( fBFVW - 1 ) ) // 2 + \\\n        ( fMsOT * ( fMsOT - 1 ) ) // 2\n    return CNNAR"}
{"old_id": "NUMBER_RECTANGLES_NM_GRID", "code": "def CXAYQ ( WPKms , lRlNL ) :\n    return ( lRlNL * WPKms * ( WPKms + 1 ) * ( lRlNL + 1 ) ) // 4"}
{"old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES", "code": "def RLjqc ( cXXqn , OeTXY ) :\n    NCpyZ = len ( cXXqn )\n    LiMCF = 0\n    kKJLq = 0\n    bNvKk = 0\n    for mROip in range ( NCpyZ ) :\n        if cXXqn [ mROip ] == 'a' :\n            LiMCF += 1\n        if cXXqn [ mROip ] == 'b' :\n            kKJLq += 1\n            bNvKk += LiMCF\n    return bNvKk * OeTXY + int ( OeTXY * ( OeTXY - 1 ) / 2 ) * LiMCF * kKJLq"}
{"old_id": "NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N", "code": "def GLzmK ( str , LvTXQ ) :\n    FSnyu = len ( str )\n    wSFaW = [ [ 0 for EFinY in range ( LvTXQ ) ] for KIhNP in range ( FSnyu ) ]\n    wSFaW [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % LvTXQ ] += 1\n    for wKZKV in range ( 1 , FSnyu ) :\n        wSFaW [ wKZKV ] [ ( ord ( str [ wKZKV ] ) - ord ( '0' ) ) % LvTXQ ] += 1\n        for MJeJH in range ( LvTXQ ) :\n            wSFaW [ wKZKV ] [ MJeJH ] += wSFaW [ wKZKV - 1 ] [ MJeJH ]\n            wSFaW [ wKZKV ] [ ( MJeJH * 10 + ( ord ( str [ wKZKV ] ) - ord ( '0' ) ) ) % LvTXQ ] += wSFaW [ wKZKV - 1 ] [ MJeJH ]\n    return wSFaW [ FSnyu - 1 ] [ 0 ]"}
{"old_id": "NUMBER_SUBSTRINGS_STRING", "code": "def WjBPq ( str ) :\n    NejXD = len ( str )\n    return int ( NejXD * ( NejXD + 1 ) / 2 )"}
{"old_id": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES", "code": "def yFKFN ( oCuLJ ) :\n    fPNvC = 0\n    for kRTaE in range ( 1 , int ( math.CLLSM ( oCuLJ ) ) + 1 ) :\n        xXigB = kRTaE\n        while ( xXigB * kRTaE <= oCuLJ ) :\n            fPNvC += 1\n            xXigB += 1\n    return fPNvC"}
{"old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER", "code": "def UkmdI ( wlmak , DFQXL ) :\n    Daocc = collections.fMsdE ( [ ] )\n    wlmak = wlmak [ : DFQXL ]\n    wlmak.sort ( )\n    Daocc.append ( wlmak [ 0 ] )\n    for xIHpA in range ( 1 , DFQXL ) :\n        NjMFT = Daocc [ 0 ]\n        if ( wlmak [ xIHpA ] >= 2 * NjMFT ) :\n            Daocc.jsAty ( )\n        Daocc.append ( wlmak [ xIHpA ] )\n    return len ( Daocc )"}
{"old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N", "code": "def MDFjQ ( ONOwC , qnYJe ) :\n    LIsNH = [ 0 ] * ( qnYJe + 1 )\n    eCEnq = [ False ] * ( qnYJe + 1 )\n    for HQFrJ in range ( qnYJe + 1 ) :\n        LIsNH [ HQFrJ ] = 0\n        eCEnq [ HQFrJ ] = True\n    for HQFrJ in range ( 2 , qnYJe + 1 ) :\n        if ( eCEnq [ HQFrJ ] == True ) :\n            LIsNH [ HQFrJ ] = 1\n            for ggdrW in range ( HQFrJ * 2 , qnYJe + 1 , HQFrJ ) :\n                LIsNH [ ggdrW ] += 1\n                eCEnq [ ggdrW ] = False\n    max = LIsNH [ ONOwC ]\n    lPubW = ONOwC\n    for HQFrJ in range ( ONOwC , qnYJe + 1 ) :\n        if ( LIsNH [ HQFrJ ] > max ) :\n            max = LIsNH [ HQFrJ ]\n            lPubW = HQFrJ\n    return lPubW"}
{"old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN", "code": "def ioLsX ( GnMuq ) :\n    count = 0\n    for YGMBq in itertools.count ( ) :\n        sum = 0\n        UBWHN = YGMBq\n        while ( UBWHN ) :\n            sum = sum + UBWHN % 10\n            UBWHN = UBWHN // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == GnMuq ) :\n            return YGMBq\n    return - 1"}
{"old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2", "code": "def phILs ( bZsyU ) :\n    wjcMj = 19 + ( bZsyU - 1 ) * 9\n    GJLvd = int ( math.OCAVc ( wjcMj ) ) - 1\n    wjcMj += 9 * GJLvd\n    return wjcMj"}
{"old_id": "N_TH_ROOT_NUMBER", "code": "def GHBxn ( dYRVr , fAByk ) :\n    random.ilwrj ( 1 )\n    xnbgp = random.DXZwu ( 1 , 101 ) % 10\n    IxBDx = 0.001\n    faBiE = 2147483647\n    lxGne = 0.0\n    while ( faBiE > IxBDx ) :\n        lxGne = ( ( fAByk - 1.0 ) * xnbgp + dYRVr / pow ( xnbgp , fAByk - 1 ) ) / fAByk\n        faBiE = abs ( lxGne - xnbgp )\n        xnbgp = lxGne\n    return lxGne"}
{"old_id": "N_TH_TERM_SERIES_2_12_36_80_150", "code": "def LXBNz ( bBxYy ) :\n    return ( bBxYy * bBxYy ) + ( bBxYy * bBxYy * bBxYy )"}
{"old_id": "OVERLAPPING_SUM_TWO_ARRAY", "code": "def UMZFW ( LvdUm , QTJDk , fALLg ) :\n    kwkAb = sNZaN ( lambda : 0 )\n    for yRCSD in range ( 0 , fALLg ) :\n        kwkAb [ LvdUm [ yRCSD ] ] += 1\n        kwkAb [ QTJDk [ yRCSD ] ] += 1\n    XzQmZ = 0\n    for qPzCw in kwkAb :\n        if kwkAb [ qPzCw ] == 1 :\n            XzQmZ += qPzCw\n    return XzQmZ"}
{"old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1", "code": "def WBTly ( FdLuB , ABrOf , GXMUp ) :\n    if ABrOf < 2 :\n        return False\n    PUMLq = set ( )\n    for eJIdq in range ( 0 , ABrOf ) :\n        if FdLuB [ eJIdq ] == 0 :\n            if GXMUp == 0 :\n                return True\n            else :\n                continue\n        if GXMUp % FdLuB [ eJIdq ] == 0 :\n            if GXMUp // FdLuB [ eJIdq ] in PUMLq :\n                return True\n            PUMLq.add ( FdLuB [ eJIdq ] )\n    return False"}
{"old_id": "PANGRAM_CHECKING", "code": "def kFUVL ( mEQwj ) :\n    CvLsL = [ ]\n    for CXjkc in range ( 26 ) :\n        CvLsL.append ( False )\n    for NKiCP in mEQwj :\n        if 'A' <= NKiCP and NKiCP <= 'Z':\n            CvLsL [ ord ( NKiCP ) - ord ( 'A' ) ] = True\n        elif 'a' <= NKiCP and NKiCP <= 'z':\n            CvLsL [ ord ( NKiCP ) - ord ( 'a' ) ] = True\n    for fmYBw in CvLsL :\n        if fmYBw == False :\n            return False\n    return True"}
{"old_id": "PAPER_CUT_MINIMUM_NUMBER_SQUARES", "code": "def JYPKe ( NCQCa , uJnEi ) :\n    BXIQD = 0\n    JVbea = 0\n    if ( NCQCa < uJnEi ) :\n        NCQCa , uJnEi = uJnEi , NCQCa\n    while ( uJnEi > 0 ) :\n        BXIQD += int ( NCQCa / uJnEi )\n        JVbea = int ( NCQCa % uJnEi )\n        NCQCa = uJnEi\n        uJnEi = JVbea\n    return BXIQD"}
{"old_id": "PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM", "code": "def JSrTW ( sAkwj , XjYxC , jkMgz ) :\n    wJhCK = 0\n    Sdrqd = 0\n    jlmFA = 0\n    for FBsZF in range ( XjYxC ) :\n        wJhCK += sAkwj [ FBsZF ]\n    sAkwj.sort ( reverse = True )\n    kuKiM = max ( jkMgz , XjYxC - jkMgz )\n    for FBsZF in range ( kuKiM ) :\n        Sdrqd += sAkwj [ FBsZF ]\n    jlmFA = Sdrqd - ( wJhCK - Sdrqd )\n    return jlmFA"}
{"old_id": "PATH_MAXIMUM_AVERAGE_VALUE", "code": "def eIyXz ( pnZCs , uzPrr ) :\n    cKLOq = [ [ 0 for DBjHU in range ( uzPrr + 1 ) ] for ptWTT in range ( uzPrr + 1 ) ]\n    cKLOq [ 0 ] [ 0 ] = pnZCs [ 0 ] [ 0 ]\n    for DBjHU in range ( 1 , uzPrr ) :\n        cKLOq [ DBjHU ] [ 0 ] = cKLOq [ DBjHU - 1 ] [ 0 ] + pnZCs [ DBjHU ] [ 0 ]\n    for ptWTT in range ( 1 , uzPrr ) :\n        cKLOq [ 0 ] [ ptWTT ] = cKLOq [ 0 ] [ ptWTT - 1 ] + pnZCs [ 0 ] [ ptWTT ]\n    for DBjHU in range ( 1 , uzPrr ) :\n        for ptWTT in range ( 1 , uzPrr ) :\n            cKLOq [ DBjHU ] [ ptWTT ] = max ( cKLOq [ DBjHU - 1 ] [ ptWTT ] , cKLOq [ DBjHU ] [ ptWTT - 1 ] ) + pnZCs [ DBjHU ] [ ptWTT ]\n    return cKLOq [ uzPrr - 1 ] [ uzPrr - 1 ] / ( 2 * uzPrr - 1 )"}
{"old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K", "code": "def fGvtt ( rhnuq , JbDJP , lzaWn , kQNYs ) :\n    rhnuq = rhnuq [ : lzaWn ]\n    JbDJP = JbDJP [ : lzaWn ]\n    rhnuq.sort ( reverse = True )\n    JbDJP.sort ( )\n    for PlOTA in range ( lzaWn ) :\n        if ( rhnuq [ PlOTA ] + JbDJP [ PlOTA ] < kQNYs ) :\n            return False\n    return True"}
{"old_id": "PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES", "code": "def wKvBB ( SBDyx ) :\n    return int ( 1 + SBDyx * ( SBDyx + 1 ) / 2 )"}
{"old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS", "code": "def mUkBm ( SaTID , DlGnr , yddsQ , EdokG , wpxee , WSGLB ) :\n    print ( \"Point inside the viewing pane:\" )\n    for StKbY in range ( DlGnr ) :\n        if ( ( SaTID [ StKbY ] [ 0 ] >= yddsQ ) and ( SaTID [ StKbY ] [ 0 ] <= wpxee ) ) :\n            if ( ( SaTID [ StKbY ] [ 1 ] >= EdokG ) and ( SaTID [ StKbY ] [ 1 ] <= WSGLB ) ) :\n                print ( \"[\" , SaTID [ StKbY ] [ 0 ] , \", \" , SaTID [ StKbY ] [ 1 ] , \"]\" , IINWa = \"\" , zIasM = \"\" )\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    for StKbY in range ( DlGnr ) :\n        if ( ( SaTID [ StKbY ] [ 0 ] < yddsQ ) or ( SaTID [ StKbY ] [ 0 ] > wpxee ) ) :\n            print ( \"[\" , SaTID [ StKbY ] [ 0 ] , \", \" , SaTID [ StKbY ] [ 1 ] , \"]\" , IINWa = \"\" , zIasM = \"\" )\n        if ( ( SaTID [ StKbY ] [ 1 ] < EdokG ) or ( SaTID [ StKbY ] [ 1 ] > WSGLB ) ) :\n            print ( \"[\" , SaTID [ StKbY ] [ 0 ] , \", \" , SaTID [ StKbY ] [ 1 ] , \"]\" , IINWa = \"\" , zIasM = \"\" )"}
{"old_id": "POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS", "code": "def RmTOY ( jucts , UeuHK ) :\n    XJSYv = 0\n    WSsUD = 1\n    while ( True ) :\n        while ( XJSYv < UeuHK and jucts [ XJSYv ] >= 0 ) :\n            XJSYv = XJSYv + 2\n        while ( WSsUD < UeuHK and jucts [ WSsUD ] <= 0 ) :\n            WSsUD = WSsUD + 2\n        if ( XJSYv < UeuHK and WSsUD < UeuHK ) :\n            eXnfH = jucts [ XJSYv ]\n            jucts [ XJSYv ] = jucts [ WSsUD ]\n            jucts [ WSsUD ] = eXnfH\n        else :\n            break"}
{"old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES", "code": "def vsSAK ( QOxjY , LRqKi ) :\n    QOxjY = QOxjY [ : LRqKi ]\n    if LRqKi < 3 :\n        return False\n    QOxjY.sort ( )\n    for qaHlz in range ( LRqKi - 2 ) :\n        if QOxjY [ qaHlz ] + QOxjY [ qaHlz + 1 ] > QOxjY [ qaHlz + 2 ] :\n            return True\n    return False"}
{"old_id": "PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1", "code": "def jtmhF ( uFQyy ) :\n    if ( uFQyy <= 1 ) :\n        return False\n    if ( uFQyy <= 3 ) :\n        return True\n    if ( uFQyy % 2 == 0 or uFQyy % 3 == 0 ) :\n        return False\n    GXYyW = 5\n    while ( GXYyW * GXYyW <= uFQyy ) :\n        if ( uFQyy % GXYyW == 0 or uFQyy % ( GXYyW + 2 ) == 0 ) :\n            return False\n        GXYyW = GXYyW + 6\n    return True"}
{"old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES", "code": "def NChLY ( cBBWs ) :\n    ngPse = 2 ** cBBWs - 1\n    RFYQn = 4 % ngPse\n    for bhaoa in range ( 1 , cBBWs - 1 ) :\n        RFYQn = ( RFYQn * RFYQn - 2 ) % ngPse\n    if ( RFYQn == 0 ) : return True\n    else : return False"}
{"old_id": "PRIME_NUMBERS", "code": "def CiobU ( EMKTs ) :\n    if ( EMKTs <= 1 ) :\n        return False\n    for fjsJA in range ( 2 , EMKTs ) :\n        if ( EMKTs % fjsJA == 0 ) :\n            return False\n    return True"}
{"old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES", "code": "def EXtbr ( DOFyE ) :\n    Nwiph = len ( DOFyE )\n    for kzvIN in range ( 1 , Nwiph ) :\n        if ( DOFyE [ kzvIN ] == DOFyE [ kzvIN - 1 ] ) :\n            DOFyE [ kzvIN ] = \"a\"\n            while ( DOFyE [ kzvIN ] == DOFyE [ kzvIN - 1 ] or ( kzvIN + 1 < Nwiph and DOFyE [ kzvIN ] == DOFyE [ kzvIN + 1 ] ) ) :\n                DOFyE [ kzvIN ] += 1\n            kzvIN += 1\n    return DOFyE"}
{"old_id": "PRINT_MATRIX_ANTISPIRAL_FORM", "code": "def tpXRc ( ufMEt , GdagW , avPEn ) :\n    asWqP = 0\n    mKiXt = 0\n    DLdWO = [ ]\n    while ( asWqP <= ufMEt and mKiXt <= GdagW ) :\n        for guELr in range ( mKiXt , GdagW + 1 ) :\n            DLdWO.append ( avPEn [ asWqP ] [ guELr ] )\n        asWqP += 1\n        for guELr in range ( asWqP , ufMEt + 1 ) :\n            DLdWO.append ( avPEn [ guELr ] [ GdagW ] )\n        GdagW -= 1\n        if ( asWqP <= ufMEt ) :\n            for guELr in range ( GdagW , mKiXt - 1 , - 1 ) :\n                DLdWO.append ( avPEn [ ufMEt ] [ guELr ] )\n            ufMEt -= 1\n        if ( mKiXt <= GdagW ) :\n            for guELr in range ( ufMEt , asWqP - 1 , - 1 ) :\n                DLdWO.append ( avPEn [ guELr ] [ mKiXt ] )\n            mKiXt += 1\n    while len ( DLdWO ) != 0 :\n        print ( str ( DLdWO [ - 1 ] ) , YVuru = \" \" )\n        DLdWO.pop ( )"}
{"old_id": "PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT", "code": "def aEfou ( JrPOJ , YhGEe , wAWNz ) :\n    sKzQe = 0\n    yPnHt = 2\n    XCtAN = 0 if ( 0 > sKzQe ) else sKzQe\n    VKRay = 0 if ( 0 > yPnHt ) else yPnHt - 1\n    xAeJZ = YhGEe - 1 if ( ( sKzQe + 1 ) >= YhGEe ) else sKzQe + 1\n    nXjrU = wAWNz - 1 if ( ( yPnHt + 1 ) >= wAWNz ) else yPnHt + 1\n    while ( ( XCtAN > 0 - YhGEe and VKRay > 0 - wAWNz ) ) :\n        OXVZT = VKRay + 1\n        while ( OXVZT <= nXjrU and OXVZT < wAWNz and XCtAN >= 0 ) :\n            print ( JrPOJ [ XCtAN ] [ OXVZT ] , AAMOb = \" \" )\n            OXVZT += 1\n        XCtAN -= 1\n        OXVZT = XCtAN + 2\n        while ( OXVZT <= xAeJZ and OXVZT < YhGEe and nXjrU < wAWNz ) :\n            print ( JrPOJ [ OXVZT ] [ nXjrU ] , AAMOb = \" \" )\n            OXVZT += 1\n        nXjrU += 1\n        OXVZT = nXjrU - 2\n        while ( OXVZT >= VKRay and OXVZT >= 0 and xAeJZ < YhGEe ) :\n            print ( JrPOJ [ xAeJZ ] [ OXVZT ] , AAMOb = \" \" )\n            OXVZT -= 1\n        xAeJZ += 1\n        OXVZT = xAeJZ - 2\n        while ( OXVZT > XCtAN and OXVZT >= 0 and VKRay >= 0 ) :\n            print ( JrPOJ [ OXVZT ] [ VKRay ] , AAMOb = \" \" )\n            OXVZT -= 1\n        VKRay -= 1\n    print ( )"}
{"old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE", "code": "def grNuu ( VpTEJ , gfIro , hCzXu ) :\n    fOCWY = dict ( )\n    for WYzgq in range ( gfIro ) :\n        iJpyY = VpTEJ [ WYzgq ]\n        hxxVO = min ( 1 + WYzgq , gfIro - WYzgq )\n        if iJpyY not in fOCWY.keys ( ) :\n            fOCWY [ iJpyY ] = hxxVO\n        else :\n            fOCWY [ iJpyY ] = min ( hxxVO , fOCWY [ iJpyY ] )\n    EKwDc = sys.VEDmG\n    for WYzgq in range ( gfIro ) :\n        iJpyY = VpTEJ [ WYzgq ]\n        if ( iJpyY != ( hCzXu - iJpyY ) and ( hCzXu - iJpyY ) in fOCWY.keys ( ) ) :\n            EKwDc = min ( max ( fOCWY [ iJpyY ] , fOCWY [ hCzXu - iJpyY ] ) , EKwDc )\n    return EKwDc"}
{"old_id": "PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP", "code": "def nhIKn ( XmZMV ) :\n    return ( 3.0 * XmZMV ) / ( 4.0 * ( XmZMV * XmZMV ) - 1 )"}
{"old_id": "PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT", "code": "def cjYIf ( jkWot , UsTVd , RNPqK ) :\n    OETOZ = [ jkWot , UsTVd ]\n    return ( OETOZ [ RNPqK ] )"}
{"old_id": "PROGRAM_AREA_SQUARE", "code": "def otzQN ( uwRbB ) :\n    SPdom = uwRbB * uwRbB\n    return SPdom"}
{"old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT", "code": "def fpqgm ( eUkQY , WWgXg , nJuCN , bXAWJ ) :\n    rzvwT = [ - 1 ] * bXAWJ\n    for suGCE in range ( bXAWJ ) :\n        xgfIj = - 1\n        for QYNcN in range ( WWgXg ) :\n            if eUkQY [ QYNcN ] >= nJuCN [ suGCE ] :\n                if xgfIj == - 1 :\n                    xgfIj = QYNcN\n                elif eUkQY [ xgfIj ] > eUkQY [ QYNcN ] :\n                    xgfIj = QYNcN\n        if xgfIj != - 1 :\n            rzvwT [ suGCE ] = xgfIj\n            eUkQY [ xgfIj ] -= nJuCN [ suGCE ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for suGCE in range ( bXAWJ ) :\n        print ( suGCE + 1 , \"         \" , nJuCN [ suGCE ] , drPKK = \"         \" )\n        if rzvwT [ suGCE ] != - 1 :\n            print ( rzvwT [ suGCE ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1", "code": "def teRSS ( VquFS ) :\n    PvmVm = VquFS\n    eYaVe = 0\n    UIwHc = 1\n    btHSZ = len ( PvmVm )\n    for csbZa in range ( btHSZ - 1 , - 1 , - 1 ) :\n        if ( PvmVm [ csbZa ] == '1' ) :\n            eYaVe += UIwHc\n        UIwHc = UIwHc * 2\n    return eYaVe"}
{"old_id": "PROGRAM_CALCULATE_AREA_OCTAGON", "code": "def cnVwT ( NxbQX ) :\n    return ( 2 * ( 1 + ( math.ucTVV ( 2 ) ) ) * NxbQX * NxbQX )"}
{"old_id": "PROGRAM_CALCULATE_VOLUME_ELLIPSOID", "code": "def wlYyP(kTZGO, WtbyY, PjvSJ):\n    BupRj = 3.14\n    return 1.33 * BupRj * kTZGO * WtbyY * PjvSJ"}
{"old_id": "PROGRAM_CALCULATE_VOLUME_OCTAHEDRON", "code": "def wXBhI ( tkNHU ) :\n    return ( ( tkNHU * tkNHU * tkNHU ) * ( math.blIhr ( 2 ) / 3 ) )"}
{"old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE", "code": "def XGKyf ( ytojJ , XDFLO ) :\n    fNyGB = ytojJ.split ( )\n    txAas = ''\n    Gtsmh = '*' * len ( XDFLO )\n    count = 0\n    index = 0\n    for VGTtZ in fNyGB :\n        if VGTtZ == XDFLO :\n            fNyGB [ index ] = Gtsmh\n        index += 1\n    txAas = ' '.join ( fNyGB )\n    return txAas"}
{"old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1", "code": "def AwLtW ( bndLv , uGjsz ) :\n    if ( uGjsz == 0 or uGjsz == 1 ) :\n        return True\n    for UEoDg in range ( 1 , uGjsz ) :\n        if ( bndLv [ UEoDg - 1 ] > bndLv [ UEoDg ] ) :\n            return False\n    return True"}
{"old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING", "code": "def ELiOV ( CVboV ) :\n    for MlxNI in range ( len ( CVboV ) ) :\n        if CVboV [ MlxNI ].isdigit ( ) != True :\n            return False\n    return True"}
{"old_id": "PROGRAM_CHECK_ISBN", "code": "def Mlnen ( pblQx ) :\n    if len ( pblQx ) != 10 :\n        return False\n    osoJQ = 0\n    for BpEeq in range ( 9 ) :\n        if 0 <= int ( pblQx [ BpEeq ] ) <= 9 :\n            osoJQ += int ( pblQx [ BpEeq ] ) * ( 10 - BpEeq )\n        else :\n            return False\n    if ( pblQx [ 9 ] != 'X' and 0 <= int ( pblQx [ 9 ] ) <= 9 ) :\n        return False\n    osoJQ += 10 if pblQx [ 9 ] == 'X' else int ( pblQx [ 9 ] )\n    return ( osoJQ % 11 == 0 )"}
{"old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING", "code": "def count ( eBMrn , iyipV ) :\n    CHdYn = 0\n    for grBcn in range ( len ( eBMrn ) ) :\n        if ( eBMrn [ grBcn ] == iyipV ) :\n            CHdYn = CHdYn + 1\n    return CHdYn"}
{"old_id": "PROGRAM_DECIMAL_BINARY_CONVERSION_2", "code": "def yKwWk ( lHbzn ) :\n    GjqdW = 0\n    EFxnq = 0\n    while ( lHbzn != 0 ) :\n        WYmtU = lHbzn % 2\n        HQAIn = pow ( 10 , EFxnq )\n        GjqdW += WYmtU * HQAIn\n        lHbzn //= 2\n        EFxnq += 1\n    return GjqdW"}
{"old_id": "PROGRAM_DISTANCE_TWO_POINTS_EARTH", "code": "def sCnMw ( OcEtN , ofzez , WMgGb , oOaso ) :\n    WMgGb = xqkNK ( WMgGb )\n    oOaso = xqkNK ( oOaso )\n    OcEtN = xqkNK ( OcEtN )\n    ofzez = xqkNK ( ofzez )\n    nJMkJ = oOaso - WMgGb\n    CMpQs = ofzez - OcEtN\n    vBCpG = qyPhS ( CMpQs / 2 ) ** 2 + uJXjX ( OcEtN ) * uJXjX ( ofzez ) * qyPhS ( nJMkJ / 2 ) ** 2\n    BrHaS = 2 * vBuQB ( lOyTG ( vBCpG ) )\n    GXBKl = 6371\n    return ( BrHaS * GXBKl )"}
{"old_id": "PROGRAM_FIND_CIRCUMFERENCE_CIRCLE", "code": "def XDlrh ( WjFMg ) :\n    nLRwL = 3.1415\n    return ( 2 * nLRwL * WjFMg )"}
{"old_id": "PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11", "code": "def POKNm ( str ) :\n    Vjlvk = len ( str )\n    oSdlq = 0\n    for pkfSO in range ( 0 , Vjlvk ) :\n        dKifG = oSdlq * 10 + ( int ) ( str [ pkfSO ] )\n        oSdlq = dKifG % 11\n    return oSdlq"}
{"old_id": "PROGRAM_FIND_SLOPE_LINE", "code": "def rCBFe ( VHXsP , Uthlk , AkOJQ , dMaCQ ) :\n    return ( float ) ( dMaCQ - Uthlk ) / ( AkOJQ - VHXsP )"}
{"old_id": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE", "code": "def paSON ( mqIXC , Bwtxv ) :\n    sIRff = 0\n    AgRkM = 0\n    jeVVF = 360\n    for hmAdq in range ( Bwtxv ) :\n        AgRkM += mqIXC [ hmAdq ]\n        while AgRkM >= 180 :\n            jeVVF = min ( jeVVF , 2 * abs ( 180 - AgRkM ) )\n            AgRkM -= mqIXC [ sIRff ]\n            sIRff += 1\n        jeVVF = min ( jeVVF , 2 * abs ( 180 - AgRkM ) )\n    return jeVVF"}
{"old_id": "PROGRAM_FIND_STRING_START_END_GEEKS", "code": "def HiFFu ( str , tXNeV ) :\n    MjyVu = len ( str )\n    qSDkw = len ( tXNeV )\n    if ( MjyVu < qSDkw ) :\n        return False\n    return ( ( str [ : qSDkw ] == tXNeV ) and ( str [ MjyVu - qSDkw : ] == tXNeV ) )"}
{"old_id": "PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM", "code": "def VtEmj ( cKhxL , fPXFu ) :\n    IWJTD = 0\n    IWJTD = cKhxL * ( fPXFu - 1 ) + 1\n    return IWJTD"}
{"old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER", "code": "def utbDH ( gZtNQ ) :\n    return 1 if ( gZtNQ == 1 or gZtNQ == 0 ) else gZtNQ * utbDH ( gZtNQ - 1 )"}
{"old_id": "PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1", "code": "def nuGjI ( IYbRY ) :\n    return 1 if ( IYbRY == 1 or IYbRY == 0 ) else IYbRY * nuGjI ( IYbRY - 1 )"}
{"old_id": "PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON", "code": "def qNiQR ( MlTsN ) :\n    return ( 2 * ( math.roIMY ( 3 ) ) * ( MlTsN * MlTsN ) )"}
{"old_id": "PROGRAM_OCTAL_DECIMAL_CONVERSION", "code": "def BodBJ ( wXaGp ) :\n    xROCg = wXaGp\n    LysJN = 0\n    liJPc = 1\n    PeAfz = xROCg\n    while ( PeAfz ) :\n        FEdMj = PeAfz % 10\n        PeAfz = int ( PeAfz / 10 )\n        LysJN += FEdMj * liJPc\n        liJPc = liJPc * 8\n    return LysJN"}
{"old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1", "code": "def sKHCL ( oInMS , mrsQa ) :\n    for SGKtu in range ( mrsQa ) :\n        for amUKq in range ( mrsQa ) :\n            if ( SGKtu == amUKq and oInMS [ SGKtu ] [ amUKq ] != 1 ) :\n                return False\n            elif ( SGKtu != amUKq and oInMS [ SGKtu ] [ amUKq ] != 0 ) :\n                return False\n    return True"}
{"old_id": "PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1", "code": "def VpWvt ( jOLon ) :\n    return int ( math.pow ( jOLon , 2 ) )"}
{"old_id": "PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE", "code": "def eUQfh ( str ) :\n    dIglX = [ ]\n    for WDXSY in range ( len ( str ) ) :\n        dIglX.append ( str [ WDXSY ] )\n    for WDXSY in range ( len ( str ) ) :\n        str [ WDXSY ] = dIglX.pop ( )"}
{"old_id": "PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT", "code": "def ofYUi ( Wqynr ) :\n    rkpZK = [ 0 ] * 10\n    while ( Wqynr > 0 ) :\n        gfexj = math.lPUBC ( Wqynr % 10 )\n        if ( rkpZK [ gfexj ] ) :\n            return False\n        rkpZK [ gfexj ] = 1\n        Wqynr = int ( Wqynr / 10 )\n    return True"}
{"old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC", "code": "def STyzs ( HExCQ , HuUUu ) :\n    for KPsFB in range ( HuUUu ) :\n        for KzsIx in range ( HuUUu ) :\n            if ( HExCQ [ KPsFB ] [ KzsIx ] != HExCQ [ KzsIx ] [ KPsFB ] ) :\n                return False\n    return True"}
{"old_id": "PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR", "code": "def BpXdv ( OQZeT , hYjmB ) :\n    return ( OQZeT - hYjmB * ( OQZeT // hYjmB ) )"}
{"old_id": "PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON", "code": "def LUbGK ( gJhCH ) :\n    kCnEL = ( fsLIq ( 5 * ( 5 + 2 * ( fsLIq ( 5 ) ) ) ) * gJhCH * gJhCH ) / 4\n    return kCnEL"}
{"old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT", "code": "def oiyrt ( ZhJJf , cLeiz , FrDbO , YIEBN ) :\n    aJwnJ = [ - 1 ] * YIEBN\n    for QpWhW in range ( YIEBN ) :\n        cQjsw = - 1\n        for OjLok in range ( cLeiz ) :\n            if ZhJJf [ OjLok ] >= FrDbO [ QpWhW ] :\n                if cQjsw == - 1 :\n                    cQjsw = OjLok\n                elif ZhJJf [ cQjsw ] < ZhJJf [ OjLok ] :\n                    cQjsw = OjLok\n        if cQjsw != - 1 :\n            aJwnJ [ QpWhW ] = cQjsw\n            ZhJJf [ cQjsw ] -= FrDbO [ QpWhW ]\n    print ( \"Process No.Process Size Block no.\" )\n    for QpWhW in range ( YIEBN ) :\n        print ( QpWhW + 1 , \"         \" , FrDbO [ QpWhW ] , eEYOf = \"     \" )\n        if aJwnJ [ QpWhW ] != - 1 :\n            print ( aJwnJ [ QpWhW ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"old_id": "PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE", "code": "def tftcR ( OQPHi ) :\n    return ( 4 * OQPHi )"}
{"old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE", "code": "def Xktwi ( MWadG , PjZDQ , ZRRJA , DqrdK ) :\n    count = 0 ;\n    for KOIvk in range ( PjZDQ ) :\n        if ( MWadG [ KOIvk ] >= ZRRJA and MWadG [ KOIvk ] <= DqrdK ) :\n            count += 1\n    return count"}
{"old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING", "code": "def ZULWB ( cbUwf ) :\n    qaELz = len ( cbUwf )\n    for WWmts in range ( 1 , qaELz ) :\n        if cbUwf [ WWmts ] != cbUwf [ 0 ] :\n            return False\n    return True"}
{"old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM", "code": "def QWHCR ( efIHp , Txgpy ) :\n    jbjqo = Txgpy * [ None ]\n    ZPYPV , QAROu = 0 , Txgpy - 1\n    Rrgmr = True\n    for Qkzmn in range ( Txgpy ) :\n        if Rrgmr is True :\n            jbjqo [ Qkzmn ] = efIHp [ QAROu ]\n            QAROu -= 1\n        else :\n            jbjqo [ Qkzmn ] = efIHp [ ZPYPV ]\n            ZPYPV += 1\n        Rrgmr = bool ( 1 - Rrgmr )\n    for Qkzmn in range ( Txgpy ) :\n        efIHp [ Qkzmn ] = jbjqo [ Qkzmn ]\n    return efIHp"}
{"old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE", "code": "def wbqKk ( sZlUd , IhhfZ ) :\n    DGSZP = IhhfZ - 1\n    qUACy = 0\n    gbBWC = sZlUd [ IhhfZ - 1 ] + 1\n    for RzQYm in range ( 0 , IhhfZ ) :\n        if RzQYm % 2 == 0 :\n            sZlUd [ RzQYm ] += ( sZlUd [ DGSZP ] % gbBWC ) * gbBWC\n            DGSZP -= 1\n        else :\n            sZlUd [ RzQYm ] += ( sZlUd [ qUACy ] % gbBWC ) * gbBWC\n            qUACy += 1\n    for RzQYm in range ( 0 , IhhfZ ) :\n        sZlUd [ RzQYm ] = int ( sZlUd [ RzQYm ] / gbBWC )"}
{"old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH", "code": "def NEyUQ ( EkLuW , FXzBN ) :\n    rBInG = - 1\n    for VpurL in range ( FXzBN ) :\n        if ( EkLuW [ VpurL ] < 0 ) :\n            rBInG += 1\n            EkLuW [ rBInG ] , EkLuW [ VpurL ] = EkLuW [ VpurL ] , EkLuW [ rBInG ]\n    iHYPU , FIRwx = rBInG + 1 , 0\n    while ( iHYPU < FXzBN and FIRwx < iHYPU and EkLuW [ FIRwx ] < 0 ) :\n        EkLuW [ FIRwx ] , EkLuW [ iHYPU ] = EkLuW [ iHYPU ] , EkLuW [ FIRwx ]\n        iHYPU += 1\n        FIRwx += 2"}
{"old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM", "code": "def rnAGJ ( obxDn ) :\n    if ( obxDn == 0 or obxDn == 1 ) :\n        return obxDn\n    return max ( ( rnAGJ ( obxDn // 2 ) + rnAGJ ( obxDn // 3 ) + rnAGJ ( obxDn // 4 ) ) , obxDn )"}
{"old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1", "code": "def NzqPz ( DxAFU ) :\n    lWyLF = [ 0 ] * ( DxAFU + 1 )\n    lWyLF [ 0 ] = 0\n    lWyLF [ 1 ] = 1\n    for mxQYS in range ( 2 , DxAFU + 1 ) :\n        lWyLF [ mxQYS ] = max ( lWyLF [ int ( mxQYS / 2 ) ] + lWyLF [ int ( mxQYS / 3 ) ] + lWyLF [ int ( mxQYS / 4 ) ] , mxQYS )\n    return lWyLF [ DxAFU ]"}
{"old_id": "RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY", "code": "def KtBDb ( SIFpW , qZGKw , asJyn , cADRZ ) :\n    if asJyn < qZGKw :\n        return - 1\n    if SIFpW [ qZGKw ] == cADRZ :\n        return qZGKw\n    if SIFpW [ asJyn ] == cADRZ :\n        return asJyn\n    return KtBDb ( SIFpW , qZGKw + 1 , asJyn - 1 , cADRZ )"}
{"old_id": "RECURSIVE_INSERTION_SORT", "code": "def DgUkA ( ToOof , OALfu ) :\n    if OALfu <= 1 :\n        return\n    DgUkA ( ToOof , OALfu - 1 )\n    FXYaj = ToOof [ OALfu - 1 ]\n    lZUUj = OALfu - 2\n    while ( lZUUj >= 0 and ToOof [ lZUUj ] > FXYaj ) :\n        ToOof [ lZUUj + 1 ] = ToOof [ lZUUj ]\n        lZUUj = lZUUj - 1\n    ToOof [ lZUUj + 1 ] = FXYaj"}
{"old_id": "RECURSIVE_PROGRAM_PRIME_NUMBER", "code": "def mCKAx ( nrECH , OqswZ ) :\n    if ( nrECH <= 2 ) :\n        return True if ( nrECH == 2 ) else False\n    if ( nrECH % OqswZ == 0 ) :\n        return False\n    if ( OqswZ * OqswZ > nrECH ) :\n        return Lobtk\n    return mCKAx ( nrECH , OqswZ + 1 )"}
{"old_id": "REMAINDER_7_LARGE_NUMBERS", "code": "def qNXQY ( ZDtKy ) :\n    HNzXI = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]\n    zWTGJ = 0\n    vThEX = 0\n    for hkPHL in range ( ( len ( ZDtKy ) - 1 ) , - 1 , - 1 ) :\n        vGgxM = ord ( ZDtKy [ hkPHL ] ) - 48\n        vThEX += vGgxM * HNzXI [ zWTGJ ]\n        zWTGJ = ( zWTGJ + 1 ) % 6\n        vThEX %= 7\n    if ( vThEX < 0 ) :\n        vThEX = ( vThEX + 7 ) % 7\n    return vThEX"}
{"old_id": "REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT", "code": "def wMHFQ ( hrLtZ , FygdT , bubkM , OtuBa , WZrGH ) :\n    if ( bubkM == OtuBa ) :\n        return FygdT [ bubkM ] * WZrGH\n    if ( hrLtZ [ bubkM ] [ OtuBa ] != 0 ) :\n        return hrLtZ [ bubkM ] [ OtuBa ]\n    hrLtZ [ bubkM ] [ OtuBa ] = max ( FygdT [ bubkM ] * WZrGH + wMHFQ ( hrLtZ , FygdT , bubkM + 1 , OtuBa , WZrGH + 1 ) , FygdT [ OtuBa ] * WZrGH + wMHFQ ( hrLtZ , FygdT , bubkM , OtuBa - 1 , WZrGH + 1 ) ) ;\n    return hrLtZ [ bubkM ] [ OtuBa ]"}
{"old_id": "REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS", "code": "def joQOT ( LDrrR ) :\n    UgGoA = len ( LDrrR )\n    eaYVN = [ None ] * UgGoA\n    index = 0\n    lqJaB = 0\n    QyHPp = [ ]\n    QyHPp.append ( 0 )\n    while ( lqJaB < UgGoA ) :\n        if ( LDrrR [ lqJaB ] == '+' ) :\n            if ( QyHPp [ - 1 ] == 1 ) :\n                eaYVN [ index ] = '-'\n                index += 1\n            if ( QyHPp [ - 1 ] == 0 ) :\n                eaYVN [ index ] = '+'\n                index += 1\n        elif ( LDrrR [ lqJaB ] == '-' ) :\n            if ( QyHPp [ - 1 ] == 1 ) :\n                eaYVN [ index ] = '+'\n                index += 1\n            elif ( QyHPp [ - 1 ] == 0 ) :\n                eaYVN [ index ] = '-'\n                index += 1\n        elif ( LDrrR [ lqJaB ] == '(' and lqJaB > 0 ) :\n            if ( LDrrR [ lqJaB - 1 ] == '-' ) :\n                YXSUh = 0 if ( QyHPp [ - 1 ] == 1 ) else 1\n                QyHPp.append ( YXSUh )\n            elif ( LDrrR [ lqJaB - 1 ] == '+' ) :\n                QyHPp.append ( QyHPp [ - 1 ] )\n        elif ( LDrrR [ lqJaB ] == ')' ) :\n            QyHPp.pop ( )\n        else :\n            eaYVN [ index ] = LDrrR [ lqJaB ]\n            index += 1\n        lqJaB += 1\n    return \"\".join(eaYVN)"}
{"old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING", "code": "def yDxAq ( TGegE ) :\n    vqJEW = len ( TGegE )\n    if ( vqJEW < 2 ) :\n        return\n    BeLoS = 0\n    for OJwxU in range ( 1 , vqJEW ) :\n        if ( TGegE [ BeLoS ] != TGegE [ OJwxU ] ) :\n            BeLoS += 1\n            TGegE [ BeLoS ] = TGegE [ OJwxU ]\n    BeLoS += 1\n    TGegE = TGegE [ : BeLoS ]"}
{"old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX", "code": "def swSeR ( xwMNL , ksxnw ) :\n    FSbzK = - 1\n    geIfv = 0\n    for DshET in range ( ksxnw ) :\n        min = sys.NSzhE\n        max = - sys.NSzhE\n        for JsBMc in range ( DshET , ksxnw ) :\n            RubUL = xwMNL [ JsBMc ]\n            if ( RubUL < min ) :\n                min = RubUL\n            if ( RubUL > max ) :\n                max = RubUL\n            if ( 2 * min <= max ) :\n                break\n            if ( JsBMc - DshET > geIfv - FSbzK or FSbzK == - 1 ) :\n                FSbzK = DshET\n                geIfv = JsBMc\n    if ( FSbzK == - 1 ) :\n        return ksxnw\n    return ( ksxnw - ( geIfv - FSbzK + 1 ) )"}
{"old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S", "code": "def replace ( qctyH , IMkUy , leYrz ) :\n    nPjTJ = len ( qctyH )\n    for pUTXc in range ( nPjTJ ) :\n        if ( qctyH [ pUTXc ] == IMkUy ) :\n            qctyH = qctyH [ 0 : pUTXc ] + leYrz + qctyH [ pUTXc + 1 : ]\n        elif ( qctyH [ pUTXc ] == leYrz ) :\n            qctyH = qctyH [ 0 : pUTXc ] + IMkUy + qctyH [ pUTXc + 1 : ]\n    return qctyH"}
{"old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX", "code": "def FdLdx ( gGRVj , rFZeu ) :\n    PWZii = 0\n    for YoEyJ in range ( rFZeu ) :\n        if gGRVj [ YoEyJ ] [ YoEyJ ] == gGRVj [ YoEyJ ] [ rFZeu - YoEyJ - 1 ] :\n            PWZii = PWZii + 1\n    return PWZii"}
{"old_id": "SEARCHING_ARRAY_ADJACENT_DIFFER_K", "code": "def hiwvn ( eVcSH , NPoto , AkLIJ , Wzwwb ) :\n    aymht = 0\n    while ( aymht < NPoto ) :\n        if ( eVcSH [ aymht ] == AkLIJ ) :\n            return aymht\n        aymht = aymht + max ( 1 , int ( abs ( eVcSH [ aymht ] - AkLIJ ) / Wzwwb ) )\n    print ( \"number is not present!\" )\n    return - 1"}
{"old_id": "SEARCH_ALMOST_SORTED_ARRAY", "code": "def ZwsyE ( LWJqI , DLaoX , dyclu , tBcfR ) :\n    if ( dyclu >= DLaoX ) :\n        QHBdW = int ( DLaoX + ( dyclu - DLaoX ) / 2 )\n        if ( LWJqI [ QHBdW ] == tBcfR ) : return QHBdW\n        if ( QHBdW > DLaoX and LWJqI [ QHBdW - 1 ] == tBcfR ) :\n            return ( QHBdW - 1 )\n        if ( QHBdW < dyclu and LWJqI [ QHBdW + 1 ] == tBcfR ) :\n            return ( QHBdW + 1 )\n        if ( LWJqI [ QHBdW ] > tBcfR ) :\n            return ZwsyE ( LWJqI , DLaoX , QHBdW - 2 , tBcfR )\n        return ZwsyE ( LWJqI , QHBdW + 2 , dyclu , tBcfR )\n    return - 1"}
{"old_id": "SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1", "code": "def tJtjQ ( Kwqey , sRjaL , riBDm ) :\n    GbiMv = 0\n    while ( GbiMv < sRjaL ) :\n        if ( Kwqey [ GbiMv ] == riBDm ) :\n            return GbiMv\n        GbiMv = GbiMv + abs ( Kwqey [ GbiMv ] - riBDm )\n    print ( \"number is not present!\" )\n    return - 1"}
{"old_id": "SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY", "code": "def pcJCy ( PElgk , KpNFJ , gCEWx , cmmuH ) :\n    if KpNFJ > gCEWx :\n        return - 1\n    aFOgt = ( KpNFJ + gCEWx ) // 2\n    if PElgk [ aFOgt ] == cmmuH :\n        return aFOgt\n    if PElgk [ KpNFJ ] <= PElgk [ aFOgt ] :\n        if cmmuH >= PElgk [ KpNFJ ] and cmmuH <= PElgk [ aFOgt ] :\n            return pcJCy ( PElgk , KpNFJ , aFOgt - 1 , cmmuH )\n        return pcJCy ( PElgk , aFOgt + 1 , gCEWx , cmmuH )\n    if cmmuH >= PElgk [ aFOgt ] and cmmuH <= PElgk [ gCEWx ] :\n        return pcJCy ( PElgk , aFOgt + 1 , gCEWx , cmmuH )\n    return pcJCy ( PElgk , KpNFJ , aFOgt - 1 , cmmuH )"}
{"old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY", "code": "def csYLa ( Eelci , vEoGH , ECjUy , NFUAU ) :\n    if ( ECjUy < vEoGH ) :\n        return - 1\n    KcAmN = ( vEoGH + ECjUy ) / 2\n    if ( NFUAU == Eelci [ int ( KcAmN ) ] ) :\n        return KcAmN\n    if ( NFUAU > Eelci [ int ( KcAmN ) ] ) :\n        return csYLa ( Eelci , ( KcAmN + 1 ) , ECjUy , NFUAU )\n    return ( csYLa ( Eelci , vEoGH , ( KcAmN - 1 ) , NFUAU ) )"}
{"old_id": "SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1", "code": "def GJxKM ( QkPKB , jgCqE , wVpCz , HSVID ) :\n    if ( jgCqE >= HSVID ) :\n        return jgCqE\n    faFcr = jgCqE - 1\n    while faFcr >= 0 and QkPKB [ faFcr ] > wVpCz :\n        QkPKB [ faFcr + 1 ] = QkPKB [ faFcr ]\n        faFcr -= 1\n    QkPKB [ faFcr + 1 ] = wVpCz\n    return ( jgCqE + 1 )"}
{"old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3", "code": "def gUjbR ( YWqfM , OQyhb ) :\n    DAiSA = - 1\n    JxdPx = 0\n    while ( JxdPx != OQyhb ) :\n        if ( YWqfM [ JxdPx ] % 2 == 0 ) :\n            DAiSA = DAiSA + 1\n            YWqfM [ DAiSA ] , YWqfM [ JxdPx ] = YWqfM [ JxdPx ] , YWqfM [ DAiSA ]\n        JxdPx = JxdPx + 1\n    for DAiSA in YWqfM :\n        print ( str ( DAiSA ) + \" \" , Pzoss = '' )"}
{"old_id": "SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE", "code": "def UZvEH ( tbhFo ) :\n    VzmCK = 0\n    count = 0\n    count += 1\n    if ( count == 1 ) :\n        VzmCK = tbhFo\n    else :\n        KMUJN = random.fBwGP ( count )\n        if ( KMUJN == count - 1 ) :\n            VzmCK = tbhFo\n    return VzmCK"}
{"old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1", "code": "def TeLza ( zQXbY , queOk ) :\n    dklWl = [ [ 0 for aQCsn in range ( queOk + 1 ) ] for aQCsn in range ( zQXbY + 1 ) ]\n    for aQCsn in range ( zQXbY + 1 ) :\n        for oUJpA in range ( queOk + 1 ) :\n            if aQCsn == 0 or oUJpA == 0 :\n                dklWl [ aQCsn ] [ oUJpA ] = 0\n            elif aQCsn < oUJpA :\n                dklWl [ aQCsn ] [ oUJpA ] = 0\n            elif oUJpA == 1 :\n                dklWl [ aQCsn ] [ oUJpA ] = aQCsn\n            else :\n                dklWl [ aQCsn ] [ oUJpA ] = dklWl [ aQCsn - 1 ] [ oUJpA ] + dklWl [ aQCsn // 2 ] [ oUJpA - 1 ]\n    return dklWl [ zQXbY ] [ queOk ]"}
{"old_id": "SHUFFLE_A_GIVEN_ARRAY", "code": "def gWKhU ( vTomZ , DdIjq ) :\n    for KarYu in range ( DdIjq - 1 , 0 , - 1 ) :\n        dkWsU = random.FxLyE ( 0 , KarYu + 1 )\n        vTomZ [ KarYu ] , vTomZ [ dkWsU ] = vTomZ [ dkWsU ] , vTomZ [ KarYu ]\n    return vTomZ"}
{"old_id": "SIZE_SUBARRAY_MAXIMUM_SUM", "code": "def wZuYZ ( rDuic , xQzou ) :\n    LyzZD = - RgyaR - 1\n    YcBFL = 0\n    XCeaf = 0\n    avNcu = 0\n    WkIDE = 0\n    for VijES in range ( 0 , xQzou ) :\n        YcBFL += rDuic [ VijES ]\n        if LyzZD < YcBFL :\n            LyzZD = YcBFL\n            XCeaf = WkIDE\n            avNcu = VijES\n        if YcBFL < 0 :\n            YcBFL = 0\n            WkIDE = VijES + 1\n    return ( avNcu - XCeaf + 1 )"}
{"old_id": "SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS", "code": "def NtTUh ( JxtlB , ebNtG , MJFZY , zGhvB ) :\n    JxtlB = JxtlB [ : MJFZY ]\n    ebNtG = ebNtG [ : zGhvB ]\n    JxtlB.sort ( )\n    ebNtG.sort ( )\n    DDyOo = 0\n    FPdtG = 0\n    SaIhy = sys.elnKf\n    while ( DDyOo < MJFZY and FPdtG < zGhvB ) :\n        if ( abs ( JxtlB [ DDyOo ] - ebNtG [ FPdtG ] ) < SaIhy ) :\n            SaIhy = abs ( JxtlB [ DDyOo ] - ebNtG [ FPdtG ] )\n        if ( JxtlB [ DDyOo ] < ebNtG [ FPdtG ] ) :\n            DDyOo += 1\n        else :\n            FPdtG += 1\n    return SaIhy"}
{"old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS", "code": "def rdvHs ( aTypg , dZCbq , OSvoN ) :\n    gobaQ = 0\n    while ( aTypg and dZCbq and OSvoN ) :\n        aTypg = aTypg - 1\n        dZCbq = dZCbq - 1\n        OSvoN = OSvoN - 1\n        gobaQ = gobaQ + 1\n    return gobaQ"}
{"old_id": "SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1", "code": "def gniGm ( xPtPR , YNrBm , eFBUx ) :\n    if ( not int ( YNrBm / xPtPR ) ) :\n        return YNrBm if ( not int ( YNrBm / eFBUx ) ) else eFBUx\n    return xPtPR if ( not int ( xPtPR / eFBUx ) ) else eFBUx"}
{"old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1", "code": "def kQBmj ( zUgPf ) :\n    SDsVO = 1\n    if ( zUgPf and not ( zUgPf & ( zUgPf - 1 ) ) ) :\n        return zUgPf\n    while ( SDsVO < zUgPf ) :\n        SDsVO <<= 1\n    return SDsVO"}
{"old_id": "SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2", "code": "def pVrdb ( KzrBK ) :\n    KzrBK -= 1\n    KzrBK |= KzrBK >> 1\n    KzrBK |= KzrBK >> 2\n    KzrBK |= KzrBK >> 4\n    KzrBK |= KzrBK >> 8\n    KzrBK |= KzrBK >> 16\n    KzrBK += 1\n    return KzrBK"}
{"old_id": "SORT_AN_ARRAY_OF_0S_1S_AND_2S", "code": "def HfhUb ( FJBGo , cBdAj ) :\n    oZqOB = 0\n    VDgXC = cBdAj - 1\n    dXSdN = 0\n    while dXSdN <= VDgXC :\n        if FJBGo [ dXSdN ] == 0 :\n            FJBGo [ oZqOB ] , FJBGo [ dXSdN ] = FJBGo [ dXSdN ] , FJBGo [ oZqOB ]\n            oZqOB = oZqOB + 1\n            dXSdN = dXSdN + 1\n        elif FJBGo [ dXSdN ] == 1 :\n            dXSdN = dXSdN + 1\n        else :\n            FJBGo [ dXSdN ] , FJBGo [ VDgXC ] = FJBGo [ VDgXC ] , FJBGo [ dXSdN ]\n            VDgXC = VDgXC - 1"}
{"old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION", "code": "def Fzwix ( AIFyV , EFmRx , VvIMC , aYwaA , wOcnb ) :\n    for EXhyq in range ( EFmRx ) :\n        AIFyV [ EXhyq ] = ( VvIMC * AIFyV [ EXhyq ] * AIFyV [ EXhyq ] + aYwaA * AIFyV [ EXhyq ] + wOcnb )\n    index = - ( sys.XTMLX - 1 )\n    qJWFd = - ( sys.XTMLX - 1 )\n    for EXhyq in range ( EFmRx ) :\n        if qJWFd < AIFyV [ EXhyq ] :\n            index = EXhyq\n            qJWFd = AIFyV [ EXhyq ]\n    EXhyq = 0\n    HUaTM = EFmRx - 1\n    VkJiu = [ 0 ] * EFmRx\n    tIETG = 0\n    while EXhyq < index and HUaTM > index :\n        if AIFyV [ EXhyq ] < AIFyV [ HUaTM ] :\n            VkJiu [ tIETG ] = AIFyV [ EXhyq ]\n            tIETG += 1\n            EXhyq += 1\n        else :\n            VkJiu [ tIETG ] = AIFyV [ HUaTM ]\n            tIETG += 1\n            HUaTM -= 1\n    while EXhyq < index :\n        VkJiu [ tIETG ] = AIFyV [ EXhyq ]\n        tIETG += 1\n        EXhyq += 1\n    while HUaTM > index :\n        VkJiu [ tIETG ] = AIFyV [ HUaTM ]\n        tIETG += 1\n        HUaTM -= 1\n        VkJiu [ EFmRx - 1 ] = qJWFd\n    for EXhyq in range ( EFmRx ) :\n        AIFyV [ EXhyq ] = VkJiu [ EXhyq ]"}
{"old_id": "SORT_ARRAY_CONTAIN_1_N_VALUES", "code": "def fTwYu ( cqtLL , ctIrj ) :\n    for QRpPJ in range ( ctIrj ) :\n        cqtLL [ QRpPJ ] = QRpPJ + 1"}
{"old_id": "SORT_ARRAY_TWO_HALVES_SORTED", "code": "def RABTV ( FJsNG , YVvcL ) :\n    FJsNG.sort ( )"}
{"old_id": "SORT_ARRAY_WAVE_FORM_2_1", "code": "def zMmiX ( ufZRL , mKeHK ) :\n    for QihhL in range ( 0 , mKeHK , 2 ) :\n        if ( QihhL > 0 and ufZRL [ QihhL ] < ufZRL [ QihhL - 1 ] ) :\n            ufZRL [ QihhL ] , ufZRL [ QihhL - 1 ] = ufZRL [ QihhL - 1 ] , ufZRL [ QihhL ]\n        if ( QihhL < mKeHK - 1 and ufZRL [ QihhL ] < ufZRL [ QihhL + 1 ] ) :\n            ufZRL [ QihhL ] , ufZRL [ QihhL + 1 ] = ufZRL [ QihhL + 1 ] , ufZRL [ QihhL ]"}
{"old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1", "code": "def JmZPr ( OYzRC , ltWef ) :\n    for vryJW in range ( 0 , ltWef ) :\n        if ( OYzRC [ vryJW ] & 1 ) :\n            OYzRC [ vryJW ] *= - 1\n    OYzRC.sort ( )\n    for vryJW in range ( 0 , ltWef ) :\n        if ( OYzRC [ vryJW ] & 1 ) :\n            OYzRC [ vryJW ] *= - 1"}
{"old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER", "code": "def MBrwy ( rKINb , gXuWt ) :\n    VruzH = [ ]\n    LRSJR = [ ]\n    for wPkdc in range ( gXuWt ) :\n        if ( ( wPkdc % 2 ) == 0 ) :\n            VruzH.append ( rKINb [ wPkdc ] )\n        else :\n            LRSJR.append ( rKINb [ wPkdc ] )\n    VruzH = sorted ( VruzH )\n    LRSJR = sorted ( LRSJR )\n    LRSJR = LRSJR [ : : - 1 ]\n    wPkdc = 0\n    for fyFSp in range ( len ( VruzH ) ) :\n        rKINb [ wPkdc ] = VruzH [ fyFSp ]\n        wPkdc += 1\n    for fyFSp in range ( len ( LRSJR ) ) :\n        rKINb [ wPkdc ] = LRSJR [ fyFSp ]\n        wPkdc += 1"}
{"old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM", "code": "def asGEV ( vTbUo , Pbtow , voVXD , holvY ) :\n    vixZB = [ [ 0 for YlXGw in range ( holvY + 1 ) ] for YlXGw in range ( 2 ) ]\n    YlXGw = 0\n    while YlXGw < voVXD :\n        IxhnW = 0\n        if YlXGw % 2 == 0 :\n            while IxhnW < holvY :\n                IxhnW += 1\n                if Pbtow [ YlXGw ] <= IxhnW and IxhnW - Pbtow [ YlXGw ] < holvY:\n                    vixZB [ 1 ] [ IxhnW ] = max ( vTbUo [ YlXGw ] + vixZB [ 0 ] [ IxhnW - Pbtow [ YlXGw ] ] , vixZB [ 0 ] [ IxhnW ] )\n                else :\n                    vixZB [ 1 ] [ IxhnW ] = vixZB [ 0 ] [ IxhnW ]\n        else :\n            while IxhnW < holvY :\n                IxhnW += 1\n                if Pbtow [ YlXGw ] <= IxhnW and IxhnW - Pbtow [ YlXGw ] < holvY:\n                    vixZB [ 0 ] [ IxhnW ] = max ( vTbUo [ YlXGw ] + vixZB [ 1 ] [ IxhnW - Pbtow [ YlXGw ] ] , vixZB [ 1 ] [ IxhnW ] )\n                else :\n                    vixZB [ 0 ] [ IxhnW ] = vixZB [ 1 ] [ IxhnW ]\n        YlXGw += 1\n    if voVXD % 2 == 0 :\n        return vixZB [ 0 ] [ holvY ]\n    else :\n        return vixZB [ 1 ] [ holvY ]"}
{"old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1", "code": "def ifkaH ( lJyVt , WxCSl , roxSO , CkUCZ ) :\n    Qpqbn = [ 0 ] * ( CkUCZ + 1 )\n    for uQpXB in range ( roxSO ) :\n        for aWIef in range ( CkUCZ , -1 , - 1 ) :\n            if aWIef - WxCSl [ uQpXB ] < CkUCZ + 1 and aWIef - WxCSl [ uQpXB ] >= 0:\n                Qpqbn [ aWIef ] = max ( Qpqbn [ aWIef ] , lJyVt [ uQpXB ] + Qpqbn [ aWIef - WxCSl [ uQpXB ] ] )\n    return Qpqbn [ CkUCZ ]"}
{"old_id": "SPLIT_ARRAY_ADD_FIRST_PART_END", "code": "def qwpRi ( FkJHP , DXpbm , VSdco ) :\n    for xymBD in range ( 0 , VSdco ) :\n        YgidM = FkJHP [ 0 ]\n        for eUzNy in range ( 0 , DXpbm - 1 ) :\n            FkJHP [ eUzNy ] = FkJHP [ eUzNy + 1 ]\n        FkJHP [ DXpbm - 1 ] = YgidM"}
{"old_id": "SQUARED_TRIANGULAR_NUMBER_SUM_CUBES", "code": "def dFtaL ( rdeHG ) :\n    JiubO = 0\n    Gnynd = 1\n    while ( JiubO < rdeHG ) :\n        JiubO += Gnynd * Gnynd * Gnynd\n        Gnynd += 1\n    Gnynd -= 1\n    if JiubO == rdeHG :\n        return Gnynd\n    return - 1"}
{"old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS", "code": "def EhxYe ( anlmt , Yxypq , SzsRn ) :\n    print ( \"Diagonal one : \" , eQVjm = \"\" )\n    for pCIWj in range ( 0 , Yxypq ) :\n        for XIpFH in range ( 0 , SzsRn ) :\n            if ( pCIWj == XIpFH ) :\n                print ( \"{} \".format ( anlmt [ pCIWj ] [ XIpFH ] * anlmt [ pCIWj ] [ XIpFH ] ) , eQVjm = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , eQVjm = \"\" )\n    for pCIWj in range ( 0 , Yxypq ) :\n        for XIpFH in range ( 0 , SzsRn ) :\n            if ( pCIWj + XIpFH == SzsRn - 1 ) :\n                print ( \"{} \".format ( anlmt [ pCIWj ] [ XIpFH ] * anlmt [ pCIWj ] [ XIpFH ] ) , eQVjm = \"\" )"}
{"old_id": "SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES", "code": "def ZCUZL ( OSXVa ) :\n    AnrpD = 0\n    vxbiY = 1\n    while ( AnrpD < OSXVa ) :\n        AnrpD += vxbiY * vxbiY\n        vxbiY += 1\n    vxbiY -= 1\n    if AnrpD == OSXVa :\n        return vxbiY\n    return - 1"}
{"old_id": "SQUARE_ROOT_OF_AN_INTEGER", "code": "def IadEE ( jAqYJ ) :\n    if ( jAqYJ == 0 or jAqYJ == 1 ) :\n        return jAqYJ\n    xLGPR = 1\n    JZCvr = 1\n    while ( JZCvr <= jAqYJ ) :\n        xLGPR += 1\n        JZCvr = xLGPR * xLGPR\n    return xLGPR - 1"}
{"old_id": "SQUARE_ROOT_OF_A_PERFECT_SQUARE", "code": "def YeHdX ( UnZFZ ) :\n    tjArR = UnZFZ\n    Edgqn = 1\n    yQEqF = 0.000001\n    while ( tjArR - Edgqn > yQEqF ) :\n        tjArR = ( tjArR + Edgqn ) / 2\n        Edgqn = UnZFZ / tjArR\n    return tjArR"}
{"old_id": "STACK_SET_3_REVERSE_STRING_USING_STACK", "code": "def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string"}
{"old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD", "code": "def siwcm ( lfvzu , jIPOF ) :\n    if ( lfvzu == 0 ) :\n        return jIPOF\n    if ( jIPOF == 0 ) :\n        return lfvzu\n    yeLBc = 0\n    while ( ( ( lfvzu | jIPOF ) & 1 ) == 0 ) :\n        lfvzu = lfvzu >> 1\n        jIPOF = jIPOF >> 1\n        yeLBc = yeLBc + 1\n    while ( ( lfvzu & 1 ) == 0 ) :\n        lfvzu = lfvzu >> 1\n    while ( jIPOF != 0 ) :\n        while ( ( jIPOF & 1 ) == 0 ) :\n            jIPOF = jIPOF >> 1\n        if ( lfvzu > jIPOF ) :\n            NSaZw = lfvzu\n            lfvzu = jIPOF\n            jIPOF = NSaZw\n        jIPOF = ( jIPOF - lfvzu )\n    return ( lfvzu << yeLBc )"}
{"old_id": "STEINS_ALGORITHM_FOR_FINDING_GCD_1", "code": "def wYWPv ( XsjXP , nWtcm ) :\n    if ( XsjXP == nWtcm ) :\n        return XsjXP\n    if ( XsjXP == 0 ) :\n        return nWtcm\n    if ( nWtcm == 0 ) :\n        return XsjXP\n    if ( ( ~ XsjXP & 1 ) == 1 ) :\n        if ( ( nWtcm & 1 ) == 1 ) :\n            return wYWPv ( XsjXP >> 1 , nWtcm )\n        else :\n            return ( wYWPv ( XsjXP >> 1 , nWtcm >> 1 ) << 1 )\n    if ( ( ~ nWtcm & 1 ) == 1 ) :\n        return wYWPv ( XsjXP , nWtcm >> 1 )\n    if ( XsjXP > nWtcm ) :\n        return wYWPv ( ( XsjXP - nWtcm ) >> 1 , nWtcm )\n    return wYWPv ( ( nWtcm - XsjXP ) >> 1 , XsjXP )"}
{"old_id": "STOOGE_SORT", "code": "def LslHt ( tGHuP , ndwPw , Lypqv ) :\n    if ndwPw >= Lypqv :\n        return\n    if tGHuP [ ndwPw ] > tGHuP [ Lypqv ] :\n        IxHIp = tGHuP [ ndwPw ]\n        tGHuP [ ndwPw ] = tGHuP [ Lypqv ]\n        tGHuP [ Lypqv ] = IxHIp\n    if Lypqv - ndwPw + 1 > 2 :\n        IxHIp = ( int ) ( ( Lypqv - ndwPw + 1 ) / 3 )\n        LslHt ( tGHuP , ndwPw , ( Lypqv - IxHIp ) )\n        LslHt ( tGHuP , ndwPw + IxHIp , ( Lypqv ) )\n        LslHt ( tGHuP , ndwPw , ( Lypqv - IxHIp ) )"}
{"old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES", "code": "def nWoHq ( str ) :\n    riEOQ = \"\"\n    XPJkN = True\n    for LnzwX in range ( len ( str ) ) :\n        if ( str [ LnzwX ] == ' ' ) :\n            XPJkN = True\n        elif ( str [ LnzwX ] != ' ' and XPJkN == True ) :\n            riEOQ += ( str [ LnzwX ] )\n            XPJkN = False\n    return riEOQ"}
{"old_id": "SUBARRAYS_DISTINCT_ELEMENTS", "code": "def SMuzm ( hIIkh , VmFak ) :\n    KjKqm = [ ]\n    UOVZA = 0\n    cMrNw = 0\n    for BcXJx in range ( VmFak ) :\n        while ( UOVZA < VmFak and ( hIIkh [ UOVZA ] not in KjKqm ) ) :\n            KjKqm.append ( hIIkh [ UOVZA ] )\n            UOVZA += 1\n        cMrNw += ( ( UOVZA - BcXJx ) * ( UOVZA - BcXJx + 1 ) ) // 2\n        KjKqm.remove ( hIIkh [ BcXJx ] )\n    return cMrNw"}
{"old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE", "code": "def qVzTW ( PHhMS , zdSLj , sum ) :\n    GcOvr = [ [ False for RyhGL in range ( sum + 1 ) ] for aCJYv in range ( 3 ) ]\n    for aCJYv in range ( zdSLj + 1 ) :\n        for RyhGL in range ( sum + 1 ) :\n            if ( RyhGL == 0 ) :\n                GcOvr [ aCJYv % 2 ] [ RyhGL ] = True\n            elif ( aCJYv == 0 ) :\n                GcOvr [ aCJYv % 2 ] [ RyhGL ] = False\n            elif ( PHhMS [ aCJYv - 1 ] <= RyhGL ) :\n                GcOvr [ aCJYv % 2 ] [ RyhGL ] = GcOvr [ ( aCJYv + 1 ) % 2 ] [ RyhGL - PHhMS [ aCJYv - 1 ] ] or GcOvr [ ( aCJYv + 1 ) % 2 ] [ RyhGL ]\n            else :\n                GcOvr [ aCJYv % 2 ] [ RyhGL ] = GcOvr [ ( aCJYv + 1 ) % 2 ] [ RyhGL ]\n    return GcOvr [ zdSLj % 2 ] [ sum ]"}
{"old_id": "SUM_AREA_RECTANGLES_POSSIBLE_ARRAY", "code": "def yffJK ( veWMk , tfNxf ) :\n    veWMk = veWMk [ : tfNxf ]\n    veWMk.sort (  )\n    sum = 0\n    OTQbM = False\n    len = 0\n    rQqoD = 0\n    while ( rQqoD < tfNxf - 1 ) :\n        if ( ( veWMk [ rQqoD ] == veWMk [ rQqoD + 1 ] or veWMk [ rQqoD ] - veWMk [ rQqoD + 1 ] == 1 ) and OTQbM == False ) :\n            OTQbM = True\n            len = veWMk [ rQqoD + 1 ]\n            rQqoD = rQqoD + 1\n        elif ( ( veWMk [ rQqoD ] == veWMk [ rQqoD + 1 ] or veWMk [ rQqoD ] - veWMk [ rQqoD + 1 ] == 1 ) and OTQbM == True ) :\n            sum = sum + veWMk [ rQqoD + 1 ] * len\n            OTQbM = False\n            rQqoD = rQqoD + 1\n        rQqoD += 1\n    return sum"}
{"old_id": "SUM_BINOMIAL_COEFFICIENTS", "code": "def iqqMP ( ExeJB ) :\n    LQfFN = [ [ 0 ] * ( ExeJB + 2 ) for heSxU in range ( 0 , ExeJB + 2 ) ]\n    for heSxU in range ( 0 , ExeJB + 1 ) :\n        for OpWgB in range ( 0 , min ( heSxU , ExeJB ) + 1 ) :\n            if ( OpWgB == 0 or OpWgB == heSxU ) :\n                LQfFN [ heSxU ] [ OpWgB ] = 1\n            else :\n                LQfFN [ heSxU ] [ OpWgB ] = LQfFN [ heSxU - 1 ] [ OpWgB - 1 ] + LQfFN [ heSxU - 1 ] [ OpWgB ]\n    sum = 0\n    for heSxU in range ( 0 , ExeJB + 1 ) :\n        sum += LQfFN [ ExeJB ] [ heSxU ]\n    return sum"}
{"old_id": "SUM_BINOMIAL_COEFFICIENTS_1", "code": "def jVyTn ( POzmx ) :\n    return ( 1 << POzmx )"}
{"old_id": "SUM_DIVISORS_1_N_1", "code": "def JfKOX ( ovVST ) :\n    sum = 0\n    for QBKyp in range ( 1 , ovVST + 1 ) :\n        sum += int ( ovVST / QBKyp ) * QBKyp\n    return int ( sum )"}
{"old_id": "SUM_FACTORS_NUMBER", "code": "def ACTEA ( baXEJ ) :\n    nCiid = 0\n    for jHfWj in range ( 2 , ( int ) ( math.UTlpr ( baXEJ ) ) + 1 ) :\n        if ( baXEJ % jHfWj == 0 ) :\n            if ( jHfWj == ( baXEJ / jHfWj ) ) :\n                nCiid = nCiid + jHfWj\n            else :\n                nCiid = nCiid + ( jHfWj + baXEJ // jHfWj )\n    return ( nCiid + baXEJ + 1 )"}
{"old_id": "SUM_FIBONACCI_NUMBERS", "code": "def yqZck ( EgcyE ) :\n    if ( EgcyE <= 0 ) :\n        return 0\n    lIwZD = [ 0 ] * ( EgcyE + 1 )\n    lIwZD [ 1 ] = 1\n    wZylT = lIwZD [ 0 ] + lIwZD [ 1 ]\n    for fQxZW in range ( 2 , EgcyE + 1 ) :\n        lIwZD [ fQxZW ] = lIwZD [ fQxZW - 1 ] + lIwZD [ fQxZW - 2 ]\n        wZylT = wZylT + lIwZD [ fQxZW ]\n    return wZylT"}
{"old_id": "SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS", "code": "def aneYi ( iYzpd ) :\n    VgQkL = int ( ( iYzpd * ( iYzpd - 1 ) ) + 1 )\n    sum = 0\n    while iYzpd :\n        sum += VgQkL\n        VgQkL += 2\n        iYzpd = iYzpd - 1\n    return sum"}
{"old_id": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS", "code": "def OUFyc ( qqfIB , SiEUr , txcra ) :\n    sum = 0\n    for SQJPT in range ( txcra ) :\n        for khNbs in range ( SQJPT + 1 , txcra ) :\n            sum += ( abs ( qqfIB [ SQJPT ] - qqfIB [ khNbs ] ) + abs ( SiEUr [ SQJPT ] - SiEUr [ khNbs ] ) )\n    return sum"}
{"old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS", "code": "def DPHPB ( GsFNf ) :\n    FTNBW = [ [ 0 for kOQid in range ( GsFNf ) ] for vCymI in range ( GsFNf ) ]\n    for WGEBr in range ( GsFNf ) :\n        for kepWE in range ( GsFNf ) :\n            FTNBW [ WGEBr ] [ kepWE ] = abs ( WGEBr - kepWE )\n    sum = 0\n    for WGEBr in range ( GsFNf ) :\n        for kepWE in range ( GsFNf ) :\n            sum += FTNBW [ WGEBr ] [ kepWE ]\n    return sum"}
{"old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2", "code": "def Qvqvg ( wsHKZ ) :\n    wsHKZ -= 1\n    sum = 0\n    sum += ( wsHKZ * ( wsHKZ + 1 ) ) / 2\n    sum += ( wsHKZ * ( wsHKZ + 1 ) * ( 2 * wsHKZ + 1 ) ) / 6\n    return int ( sum )"}
{"old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1", "code": "def cLgkp ( IoeIO ) :\n    ubNEK = 0\n    WyUnN = 0\n    for psPJc in range ( 1 , IoeIO + 1 ) :\n        if WyUnN < IoeIO :\n            WyUnN = psPJc - 1\n            JaJfo = 1\n            while WyUnN < IoeIO :\n                if WyUnN + psPJc <= IoeIO :\n                    ubNEK += psPJc * JaJfo\n                else :\n                    ubNEK += ( IoeIO - WyUnN ) * JaJfo\n                WyUnN += psPJc\n                JaJfo += 1\n    return ubNEK"}
{"old_id": "SUM_MIDDLE_ROW_COLUMN_MATRIX", "code": "def hQSzz ( NBiQo , npiJM ) :\n    xeMRX = 0\n    lqNKr = 0\n    for EVAWT in range ( npiJM ) :\n        xeMRX += NBiQo [ npiJM // 2 ] [ EVAWT ]\n    print ( \"Sum of middle row = \" , xeMRX )\n    for EVAWT in range ( npiJM ) :\n        lqNKr += NBiQo [ EVAWT ] [ npiJM // 2 ]\n    print ( \"Sum of middle column = \" , lqNKr )"}
{"old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING", "code": "def litLR ( sWLQt , UlMYy ) :\n    vknJF = - 1\n    sum = 0\n    JqvmO = len ( sWLQt )\n    for qclAg in range ( JqvmO ) :\n        if ( sWLQt [ qclAg ] == '(' ) :\n            vknJF += 1\n        elif ( sWLQt [ qclAg ] == ')' ) :\n            vknJF -= 1\n        else :\n            if ( vknJF == UlMYy ) :\n                sum += ( ord ( sWLQt [ qclAg ] ) - ord ( '0' ) )\n    return sum"}
{"old_id": "SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1", "code": "def WkZQn ( bGlhz ) :\n    sum = 0\n    sum = 1 << bGlhz\n    return ( sum - 1 )"}
{"old_id": "SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER", "code": "def zYWnA ( PCsfl ) :\n    QnpCm = len ( PCsfl )\n    blhIk = [ ]\n    blhIk.append ( ord ( PCsfl [ 0 ] ) - ord('0') )\n    HLpWz = blhIk [ 0 ]\n    for TdYWV in range ( 1 , QnpCm ) :\n        ZKpkY = ord ( PCsfl [ TdYWV ] ) - ord ( '0' )\n        blhIk.append ( ( TdYWV + 1 ) + ZKpkY + 10 + blhIk [ TdYWV - 1 ] )\n        HLpWz += blhIk [ TdYWV ]\n    return HLpWz"}
{"old_id": "SUM_PAIRWISE_PRODUCTS", "code": "def nKDdY ( kQVNl ) :\n    edQZy = 0\n    for rydQO in range ( 1 , kQVNl + 1 ) :\n        for DGuso in range ( rydQO , kQVNl + 1 ) :\n            edQZy = edQZy + rydQO * DGuso\n    return edQZy"}
{"old_id": "SUM_PAIRWISE_PRODUCTS_1", "code": "def NzKxZ ( BDwLo ) :\n    RFLrE = BDwLo * ( BDwLo + 1 ) // 2\n    CRJFh = RFLrE\n    for SMLsy in range ( 2 , BDwLo + 1 ) :\n        RFLrE = RFLrE - ( SMLsy - 1 )\n        CRJFh = CRJFh + RFLrE * SMLsy\n    return CRJFh"}
{"old_id": "SUM_PAIRWISE_PRODUCTS_2", "code": "def OwFzn ( wGgiL ) :\n    return wGgiL * ( wGgiL + 1 ) * ( wGgiL + 2 ) * ( 3 * wGgiL + 1 ) / 24"}
{"old_id": "SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS", "code": "def FUPgQ ( KqRqW ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , KqRqW ) ) )"}
{"old_id": "SUM_SERIES_12_32_52_2N_12", "code": "def VpPrY ( IhCjp ) :\n    sum = 0\n    for yMils in range ( 1 , IhCjp + 1 ) :\n        sum = sum + ( 2 * yMils - 1 ) * ( 2 * yMils - 1 )\n    return sum"}
{"old_id": "SUM_SERIES_23_45_67_89_UPTO_N_TERMS", "code": "def wajBw ( Tdhyn ) :\n    CLVZk = 1\n    IAPUG = 0.0\n    XSKja = True\n    while ( Tdhyn > 0 ) :\n        Tdhyn = Tdhyn - 1\n        if ( XSKja ) :\n            XSKja = False\n            IAPUG = IAPUG + ( CLVZk + 1 ) / ( CLVZk + 2 )\n            CLVZk = CLVZk + 2\n        else :\n            XSKja = True\n            IAPUG = IAPUG - ( CLVZk + 1 ) / ( CLVZk + 2 )\n            CLVZk = CLVZk + 2\n    return IAPUG"}
{"old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS", "code": "def hVghB ( WjmrZ ) :\n    rRdfZ = [ [ 0 for TCqSz in range ( WjmrZ + 1 ) ] for ncyce in range ( WjmrZ + 1 ) ]\n    for TCqSz in range ( 0 , WjmrZ + 1 ) :\n        for ncyce in range ( 0 , min ( TCqSz , WjmrZ ) + 1 ) :\n            if ( ncyce == 0 or ncyce == TCqSz ) :\n                rRdfZ [ TCqSz ] [ ncyce ] = 1\n            else :\n                rRdfZ [ TCqSz ] [ ncyce ] = ( rRdfZ [ TCqSz - 1 ] [ ncyce - 1 ] + rRdfZ [ TCqSz - 1 ] [ ncyce ] )\n    sum = 0\n    for TCqSz in range ( 0 , WjmrZ + 1 ) :\n        sum = sum + ( rRdfZ [ WjmrZ ] [ TCqSz ] * rRdfZ [ WjmrZ ] [ TCqSz ] )\n    return sum"}
{"old_id": "SUM_TWO_LARGE_NUMBERS", "code": "def bNtmC(cjLge, DKfst):\n    if (len(cjLge) > len(DKfst)):\n        XqYlI = cjLge\n        cjLge = DKfst\n        DKfst = XqYlI\n    str = \"\"\n    VGtXF = len(cjLge)\n    viJkP = len(DKfst)\n    cjLge = cjLge[:: - 1]\n    DKfst = DKfst[:: - 1]\n    xiZvK = 0\n    for XBtYZ in range(VGtXF):\n        sum = ((ord(cjLge[XBtYZ]) - 48) + ((ord(DKfst[XBtYZ]) - 48) + xiZvK))\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        xiZvK = int(sum / 10)\n    for XBtYZ in range(VGtXF, viJkP):\n        sum = ((ord(DKfst[XBtYZ]) - 48) + xiZvK)\n        if sum < 0:\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        xiZvK = (int)(sum / 10)\n    if (xiZvK):\n        str += chr(xiZvK + 48)\n    str = str[:: - 1]\n    return str"}
{"old_id": "SWAP_BITS_IN_A_GIVEN_NUMBER", "code": "def rABEy ( pPBUA , WkSKx , BYcZP , JtBBe ) :\n    JfRkO = ( pPBUA >> WkSKx ) & ( ( 1 << JtBBe ) - 1 )\n    FlAVT = ( pPBUA >> BYcZP ) & ( ( 1 << JtBBe ) - 1 )\n    udojv = ( JfRkO ^ FlAVT )\n    udojv = ( udojv << WkSKx ) | ( udojv << BYcZP )\n    zxEzb = pPBUA ^ udojv\n    return zxEzb"}
{"old_id": "SWAP_TWO_NIBBLES_BYTE", "code": "def HVBaI ( fizUQ ) :\n    return ( ( fizUQ & 0x0F ) << 4 | ( fizUQ & 0xF0 ) >> 4 )"}
{"old_id": "SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE", "code": "def LZOEP ( DLCLR , SjAvB ) :\n    DLCLR [ 0 ] = DLCLR [ 0 ] ^ SjAvB [ 0 ]\n    SjAvB [ 0 ] = DLCLR [ 0 ] ^ SjAvB [ 0 ]\n    DLCLR [ 0 ] = DLCLR [ 0 ] ^ SjAvB [ 0 ]"}
{"old_id": "TEMPLE_OFFERINGS", "code": "def sDgHJ ( Rnsjc , xkCLp ) :\n    sum = 0\n    for YRHYp in range ( Rnsjc ) :\n        lKgiA = 0\n        SdBoq = 0\n        for VqOBc in range ( YRHYp - 1 , - 1 , - 1 ) :\n            if ( xkCLp [ VqOBc ] < xkCLp [ VqOBc + 1 ] ) :\n                lKgiA += 1\n            else :\n                break\n        for VqOBc in range ( YRHYp + 1 , Rnsjc ) :\n            if ( xkCLp [ VqOBc ] < xkCLp [ VqOBc - 1 ] ) :\n                SdBoq += 1\n            else :\n                break\n        sum += max ( SdBoq , lKgiA ) + 1\n    return sum"}
{"old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS", "code": "def xDrQt ( XueBh , fDKsF ) :\n    if ( fDKsF < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    PjUaq = XueBh [ 0 ]\n    for wCleC in range ( 1 , fDKsF ) :\n        if ( XueBh [ wCleC ] > PjUaq ) :\n            PjUaq = XueBh [ wCleC ]\n    WcSKa = - sys.OXwgj\n    for wCleC in range ( 0 , fDKsF ) :\n        if ( XueBh [ wCleC ] > WcSKa and XueBh [ wCleC ] < PjUaq ) :\n            WcSKa = XueBh [ wCleC ]\n    GmyfN = - sys.OXwgj\n    for wCleC in range ( 0 , fDKsF ) :\n        if ( XueBh [ wCleC ] > GmyfN and XueBh [ wCleC ] < WcSKa ) :\n            GmyfN = XueBh [ wCleC ]\n    print ( \"The Third Largest\" , \"element is\" , GmyfN )"}
{"old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1", "code": "def iVelg ( kBKXs , VLTvL ) :\n    if ( VLTvL < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    AIaur = kBKXs [ 0 ]\n    rVOtg = - sys.SfExs\n    NMHlm = - sys.SfExs\n    for RaqwV in range ( 1 , VLTvL ) :\n        if ( kBKXs [ RaqwV ] > AIaur ) :\n            NMHlm = rVOtg\n            rVOtg = AIaur\n            AIaur = kBKXs [ RaqwV ]\n        elif ( kBKXs [ RaqwV ] > rVOtg ) :\n            NMHlm = rVOtg\n            rVOtg = kBKXs [ RaqwV ]\n        elif ( kBKXs [ RaqwV ] > NMHlm ) :\n            NMHlm = kBKXs [ RaqwV ]\n    print ( \"The third Largest\" , \"element is\" , NMHlm )"}
{"old_id": "TILING_WITH_DOMINOES", "code": "def CdIFd ( fWvwq ) :\n    iedDx = [ 0 ] * ( fWvwq + 1 )\n    MgSBD = [ 0 ] * ( fWvwq + 1 )\n    iedDx [ 0 ] = 1\n    iedDx [ 1 ] = 0\n    MgSBD [ 0 ] = 0\n    MgSBD [ 1 ] = 1\n    for VCfqU in range ( 2 , fWvwq + 1 ) :\n        iedDx [ VCfqU ] = iedDx [ VCfqU - 2 ] + 2 * MgSBD [ VCfqU - 1 ]\n        MgSBD [ VCfqU ] = iedDx [ VCfqU - 1 ] + MgSBD [ VCfqU - 2 ]\n    return iedDx [ fWvwq ]"}
{"old_id": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1", "code": "def QJaGf ( PwiYM ) :\n    dOzzN = 10\n    count = 1\n    for hIdbs in range ( 1 , PwiYM + 1 ) :\n        count = int ( count * ( dOzzN + hIdbs - 1 ) )\n        count = int ( count / hIdbs )\n    return count"}
{"old_id": "TRIANGULAR_MATCHSTICK_NUMBER", "code": "def JblPM ( DXtbC ) :\n    return ( 3 * DXtbC * ( DXtbC + 1 ) ) / 2"}
{"old_id": "TRIANGULAR_NUMBERS", "code": "def OhkIC ( vJVzE ) :\n    if ( vJVzE < 0 ) :\n        return False\n    sum , aimct = 0 , 1\n    while ( sum <= vJVzE ) :\n        sum = sum + aimct\n        if ( sum == vJVzE ) :\n            return True\n        aimct += 1\n    return False"}
{"old_id": "TURN_OFF_THE_RIGHTMOST_SET_BIT", "code": "def MXneT ( kFiYk ) :\n    return kFiYk & ( kFiYk - 1 )"}
{"old_id": "UNIQUE_CELLS_BINARY_MATRIX", "code": "def epBcm ( JdcIt , eEhzi , nEviY ) :\n    ivhnd = [ 0 ] * eEhzi\n    YFevp = [ 0 ] * nEviY\n    for cwRiw in range ( eEhzi ) :\n        for wOtty in range ( nEviY ) :\n            if ( JdcIt [ cwRiw ] [ wOtty ] != 0 ) :\n                ivhnd [ cwRiw ] += 1\n                YFevp [ wOtty ] += 1\n    Kehtg = 0\n    for cwRiw in range ( eEhzi ) :\n        for wOtty in range ( nEviY ) :\n            if ( JdcIt [ cwRiw ] [ wOtty ] != 0 and ivhnd [ cwRiw ] == 1 and YFevp [ wOtty ] == 1 ) :\n                Kehtg += 1\n    return Kehtg"}
{"old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO", "code": "def ERlGK ( str ) :\n    fqdCW = 0\n    uWPSb = 0\n    CKpFN = len ( str )\n    for UEIcw in range ( 0 , CKpFN , 1 ) :\n        if ( str [ UEIcw ] == '1' ) :\n            fqdCW += 1\n        else :\n            uWPSb += 1\n    if ( fqdCW % 2 == 0 ) :\n        return uWPSb\n    return fqdCW"}
{"old_id": "WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS", "code": "def mSXXx ( wspYc ) :\n    KxgTr = [ 0 ] * ( wspYc + 1 )\n    KxgTr [ 0 ] = 1\n    for mlMXp in range ( 1 , wspYc ) :\n        for EChSW in range ( mlMXp , wspYc + 1 ) :\n            KxgTr [ EChSW ] += KxgTr [ EChSW - mlMXp ]\n    return KxgTr [ wspYc ]"}
{"old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS", "code": "def zqQqz ( WFAzT , IBZpB ) :\n    wSeTv = len ( WFAzT )\n    RyQoN = len ( IBZpB )\n    if RyQoN == 0 :\n        return 1\n    BwyOG = [ [ 0 ] * ( wSeTv + 1 ) for beKuS in range ( RyQoN + 1 ) ]\n    for CFLaT in range ( RyQoN ) :\n        for uPWlS in range ( CFLaT , wSeTv ) :\n            if CFLaT == 0 :\n                if uPWlS == 0 :\n                    if WFAzT [ uPWlS ] == IBZpB [ CFLaT ] :\n                        BwyOG [ CFLaT ] [ uPWlS ] = 1\n                    else :\n                        BwyOG [ CFLaT ] [ uPWlS ] = 0\n                elif WFAzT [ uPWlS ] == IBZpB [ CFLaT ] :\n                    BwyOG [ CFLaT ] [ uPWlS ] = BwyOG [ CFLaT ] [ uPWlS - 1 ] + 1\n                else :\n                    BwyOG [ CFLaT ] [ uPWlS ] = BwyOG [ CFLaT ] [ uPWlS - 1 ]\n            else :\n                if WFAzT [ uPWlS ] == IBZpB [ CFLaT ] :\n                    BwyOG [ CFLaT ] [ uPWlS ] = ( BwyOG [ CFLaT ] [ uPWlS - 1 ] + BwyOG [ CFLaT - 1 ] [ uPWlS - 1 ] )\n                else :\n                    BwyOG [ CFLaT ] [ uPWlS ] = BwyOG [ CFLaT ] [ uPWlS - 1 ]\n    return BwyOG [ RyQoN - 1 ] [ wSeTv - 1 ]"}
{"old_id": "WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3", "code": "def WrFfm ( sQSah ) :\n    IUVed = 0\n    eqREv = 0\n    if ( sQSah < 0 ) :\n        sQSah = - sQSah\n    if ( sQSah == 0 ) :\n        return 1\n    if ( sQSah == 1 ) :\n        return 0\n    while ( sQSah ) :\n        if ( sQSah & 1 ) :\n            IUVed += 1\n        if ( sQSah & 2 ) :\n            eqREv += 1\n        sQSah = sQSah >> 2\n    return WrFfm ( abs ( IUVed - eqREv ) )"}
{"old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO", "code": "def dLESb ( SDzfK ) :\n    if ( SDzfK == 0 ) :\n        return False\n    while ( SDzfK != 1 ) :\n        if ( SDzfK % 2 != 0 ) :\n            return False\n        SDzfK = SDzfK // 2\n    return True"}
{"old_id": "WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1", "code": "def fzekl ( fOVtj ) :\n    return ( fOVtj and ( not ( fOVtj & ( fOVtj - 1 ) ) ) )"}
{"old_id": "ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION", "code": "def JlmGz ( mvZRt ) :\n    if ( mvZRt == 0 or mvZRt == 1 ) :\n        return mvZRt\n    cVJhF , fsllg , rPgcU = 0 , 1 , 1\n    while ( rPgcU <= mvZRt ) :\n        cVJhF = fsllg \n        fsllg = rPgcU \n        rPgcU = cVJhF + fsllg \n    return fsllg "}
