{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_2xnr = 0\nlist_8ijc = range(len(s))\nwhile idx_2xnr < len(list_8ijc):\n    i = list_8ijc[idx_2xnr]\n    if not i >= 1:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    else:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    idx_2xnr = idx_2xnr + 1\n    var_s80 = 81\nprint(''.join(res))\n", "id": "Add_IndependentVar_sample_from_codeforces_147_A_to_0", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nidx_1mdz = 0\nlist_txg7 = s\nwhile idx_1mdz < len(list_txg7):\n    letra = list_txg7[idx_1mdz]\n    var_igh = 79\n    if not letra in freqs:\n        freqs[letra] = 1\n    else:\n        freqs[letra] += 1\n    idx_1mdz = idx_1mdz + 1\nidx_yio5 = 0\nlist_cf8l = t\nwhile idx_yio5 < len(list_cf8l):\n    letra = list_cf8l[idx_yio5]\n    var_qzp = 23\n    if not letra in freqt:\n        freqt[letra] = 1\n    else:\n        freqt[letra] += 1\n    idx_yio5 = idx_yio5 + 1\nidx_kcsn = 0\nlist_vxhz = freqs.keys()\nwhile idx_kcsn < len(list_vxhz):\n    letra = list_vxhz[idx_kcsn]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    var_y7p = 24\n    idx_kcsn = idx_kcsn + 1\nidx_myxu = 0\nlist_p2lg = freqs.keys()\nwhile idx_myxu < len(list_p2lg):\n    letra = list_p2lg[idx_myxu]\n    var_0nz = 33\n    while (freqs[letra] > 0):\n        if not letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            if letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n                whoops += 1\n                freqs[letra] -= 1\n                freqt[letra.lower()] -= 1\n            else:\n                break\n        else:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n    idx_myxu = idx_myxu + 1\nprint(yay, whoops)\n", "id": "Add_IndependentVar_sample_from_codeforces_518_B_to_1", "old_id": "codeforces_518_B"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nidx_trq6 = 0\nlist_ozri = record_of_movements\nwhile idx_trq6 < len(list_ozri):\n    move = list_ozri[idx_trq6]\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if not (x, y) not in d:\n        bug = True\n    else:\n        idx_msh6 = 0\n        list_gw72 = d_movement\n        while idx_msh6 < len(list_gw72):\n            step = list_gw72[idx_msh6]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_msh6 = idx_msh6 + 1\n    var_42g = 83\n    if bug:\n        break\n    d[x, y] = ''\n    idx_trq6 = idx_trq6 + 1\nif not bug:\n    print('OK')\n    var_m1n = 37\nelse:\n    print('BUG')\n    var_gtc = 90\n", "id": "Add_IndependentVar_sample_from_codeforces_8_B_to_2", "old_id": "codeforces_8_B"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif not K >= 15:\n    if 2 ** K >= N:\n        aaaa = True\n    var_oq8 = 11\nelse:\n    aaaa = True\n    var_jtw = 2\nif aaaa:\n    print(min(S) * N)\n    exit()\n    var_oxy = 73\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    var_a3j = 40\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_6n3f = 0\n    var_23w = 2\n    list_t1ib = range(N)\n    while idx_6n3f < len(list_t1ib):\n        i = list_t1ib[idx_6n3f]\n        if not u[pointer1 + i] > u[pointer2 + i]:\n            if u[pointer1 + i] < u[pointer2 + i]:\n                return False\n        else:\n            return True\n        idx_6n3f = idx_6n3f + 1\n    return False\n\n\nS = get_last_dict(S)\nif not K == 1:\n    count = 0\n    idx_l1m0 = 0\n    list_sevt = S\n    while idx_l1m0 < len(list_sevt):\n        c = list_sevt[idx_l1m0]\n        if c == S[0]:\n            count += 1\n        else:\n            break\n        idx_l1m0 = idx_l1m0 + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n    var_uto = 19\nelse:\n    print(S)\n    var_07e = 13\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC037_E_to_3", "old_id": "atcoder_AGC037_E"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    var_r74 = 8\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if not s[i] == \"A\":\n            if s[i] == \"B\":\n                if i < len(s) - 1:\n                    if s[i + 1] == \"C\":\n                        t += \"D\"\n                        i += 2\n                    else:\n                        t += \"X\"\n                        i += 1\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"A\"\n            i += 1\n    total = 0\n    numA = 0\n    idx_89tr = 0\n    list_c8y5 = range(len(t))\n    while idx_89tr < len(list_c8y5):\n        i = list_c8y5[idx_89tr]\n        if not t[i] == \"X\":\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        else:\n            numA = 0\n        idx_89tr = idx_89tr + 1\n    var_qno = 10\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n    var_izv = 75\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC034_B_to_4", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_r68a = 0\nlist_npux = range(a, x + 1)\nwhile idx_r68a < len(list_npux):\n    i = list_npux[idx_r68a]\n    if not (i <= b):\n        idx_cz4s = 0\n        list_i1re = range(b, y + 1)\n        while idx_cz4s < len(list_i1re):\n            j = list_i1re[idx_cz4s]\n            if i > j:\n                games.append((i, j))\n            idx_cz4s = idx_cz4s + 1\n    else:\n        continue\n    idx_r68a = idx_r68a + 1\n    var_84a = 87\nprint(len(games))\nidx_ofjs = 0\nlist_5sgk = games\nwhile idx_ofjs < len(list_5sgk):\n    i = list_5sgk[idx_ofjs]\n    print(f\"{i[0]} {i[1]}\")\n    idx_ofjs = idx_ofjs + 1\n    var_0g2 = 74\n", "id": "Add_IndependentVar_sample_from_codeforces_242_A_to_5", "old_id": "codeforces_242_A"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_xo54 = 0\nlist_7oqn = range(firstline)\nwhile idx_xo54 < len(list_7oqn):\n    x = list_7oqn[idx_xo54]\n    A, G = list(map(int, input().split()))\n    if not total + A <= 500:\n        total -= G\n        memory.append(\"G\")\n    else:\n        total += A\n        memory.append(\"A\")\n    idx_xo54 = idx_xo54 + 1\n    var_vr8 = 54\nprint(\"\".join(memory))\n", "id": "Add_IndependentVar_sample_from_codeforces_282_B_to_6", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_rj2i = 0\nlist_gdrp = range(M)\nwhile idx_rj2i < len(list_gdrp):\n    _ = list_gdrp[idx_rj2i]\n    var_5tj = 97\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if not w_x >= 1 and r_x >= 1:\n        if w_x == 0:\n            balls[x - 1][1] -= 1\n            balls[y - 1][1] += 1\n        else:\n            balls[x - 1][0] -= 1\n            balls[y - 1][0] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    idx_rj2i = idx_rj2i + 1\nans = 0\nidx_uc82 = 0\nlist_to2k = range(N)\nwhile idx_uc82 < len(list_to2k):\n    i = list_to2k[idx_uc82]\n    var_hxp = 6\n    if balls[i][1]:\n        ans += 1\n    idx_uc82 = idx_uc82 + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC002_B_to_7", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif not arr[0] > 15:\n    idx_ut9n = 0\n    list_pnfi = range(1, len(arr))\n    var_k9y = 28\n    while idx_ut9n < len(list_pnfi):\n        i = list_pnfi[idx_ut9n]\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n        idx_ut9n = idx_ut9n + 1\nelse:\n    print(15)\n    var_uf7 = 99\n", "id": "Add_IndependentVar_sample_from_codeforces_673_A_to_8", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nidx_h95r = 0\nlist_egdz = range(x)\nwhile idx_h95r < len(list_egdz):\n    i = list_egdz[idx_h95r]\n    var_nmo = 26\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if not d > 9:\n        s += str(d)\n        c = 0\n    else:\n        s += str(d)[1]\n        c = 1\n    idx_h95r = idx_h95r + 1\nif c == 1:\n    s += '1'\n    var_467 = 47\nprint(int(s[:: - 1]))\n", "id": "Add_IndependentVar_sample_from_codeforces_171_A_to_9", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nidx_b3rl = 0\nlist_6co4 = range(N + 1)\nwhile idx_b3rl < len(list_6co4):\n    i = list_6co4[idx_b3rl]\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = ind\n    x = ne\n    idx_b3rl = idx_b3rl + 1\n    var_ea5 = 73\nif not flag == True:\n    print(path[K - 1])\n    var_b80 = 100\nelse:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\n    var_q8b = 26\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC167_D_to_10", "old_id": "atcoder_ABC167_D"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_fg4t = 0\nlist_ohve = s\nwhile idx_fg4t < len(list_ohve):\n    x = list_ohve[idx_fg4t]\n    var_jrp = 48\n    if not x == 'g':\n        if x == 'p':\n            if num_g - num_p > 0:\n                score = score\n                num_p += 1\n            else:\n                score -= 1\n                num_g += 1\n    else:\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    idx_fg4t = idx_fg4t + 1\nprint(score)\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC062_B_to_11", "old_id": "atcoder_ARC062_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n    var_84v = 58\n\n\nn = int(input())\nnodes = []\nidx_6cxg = 0\nlist_8gph = range(n)\nwhile idx_6cxg < len(list_8gph):\n    i = list_8gph[idx_6cxg]\n    var_mb6 = 27\n    nodes.append(Node())\n    idx_6cxg = idx_6cxg + 1\nidx_836l = 0\nlist_wjor = range(n - 1)\nwhile idx_836l < len(list_wjor):\n    i = list_wjor[idx_836l]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_836l = idx_836l + 1\n    var_fsl = 96\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if not node in nodeSet:\n        nodeSet.add(node)\n    else:\n        return\n    idx_3kva = 0\n    list_ny2x = node.a\n    while idx_3kva < len(list_ny2x):\n        pair = list_ny2x[idx_3kva]\n        adjNode = pair[0]\n        dis = pair[1]\n        if not (distance + dis) % 2 == 0:\n            adjNode.color = not root.color\n        else:\n            adjNode.color = root.color\n        traverse(adjNode, distance + dis)\n        idx_3kva = idx_3kva + 1\n    var_5u4 = 97\n\n\ntraverse(root, 0)\nidx_m83w = 0\nlist_d168 = range(n)\nwhile idx_m83w < len(list_d168):\n    i = list_d168[idx_m83w]\n    node = nodes[i]\n    var_5sa = 33\n    if not node.color:\n        print(0)\n    else:\n        print(1)\n    idx_m83w = idx_m83w + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC126_D_to_12", "old_id": "atcoder_ABC126_D"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n    var_1yk = 46\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if not lines_as_string is None:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    else:\n        debug = False\n        lines.append(input())\n    c = [e for e in lines[0].split(\" \")][0]\n    return (c, )\n    var_ohk = 11\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n    var_572 = 10\n\n\ndef main():\n    result = solve(* parse_input())\n    if not isinstance(result, list):\n        print(\"%s\" % result, sep='')\n    else:\n        idx_45ni = 0\n        list_mc2l = result\n        while idx_45ni < len(list_mc2l):\n            r = list_mc2l[idx_45ni]\n            print(\"%s\" % r, sep='')\n            idx_45ni = idx_45ni + 1\n    var_bvi = 60\n\n\nif __name__ == '__main__':\n    main()\n    var_gvx = 96\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC151_A_to_13", "old_id": "atcoder_ABC151_A"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[0]\n    arr = sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0):\n        print(int(length / arr[0]))\n        return\n    ans = 0\n    if not (arr[0] == arr[1]):\n        k = 0\n        idx_tz0g = 0\n        list_7ba3 = range(int(length / arr[2]) + 1)\n        while idx_tz0g < len(list_7ba3):\n            i = list_7ba3[idx_tz0g]\n            idx_zd2i = 0\n            list_095l = range(int(length / arr[1]) + 1)\n            while idx_zd2i < len(list_095l):\n                j = list_095l[idx_zd2i]\n                check = length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n                idx_zd2i = idx_zd2i + 1\n            idx_tz0g = idx_tz0g + 1\n    else:\n        k = 0\n        idx_3peb = 0\n        list_erxv = range(int(length / arr[2]) + 1)\n        while idx_3peb < len(list_erxv):\n            i = list_erxv[idx_3peb]\n            check = length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = int(check / arr[0])\n                ans = max(ans, k + i)\n            idx_3peb = idx_3peb + 1\n    var_t54 = 22\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "Add_IndependentVar_sample_from_codeforces_189_A_to_14", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nidx_4a3w = 0\nlist_l07y = range(1, n)\nwhile idx_4a3w < len(list_l07y):\n    i = list_l07y[idx_4a3w]\n    var_qe9 = 20\n    if not l[i] == l[i - 1]:\n        if high > maximum:\n            maximum = high\n        high = 1\n    else:\n        tower -= 1\n        high += 1\n    idx_4a3w = idx_4a3w + 1\nif high > maximum:\n    maximum = high\n    var_rm6 = 36\nprint(maximum, tower)\n", "id": "Add_IndependentVar_sample_from_codeforces_37_A_to_15", "old_id": "codeforces_37_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_j8sp = 0\nlist_1ndr = range(M)\nwhile idx_j8sp < len(list_1ndr):\n    _ = list_1ndr[idx_j8sp]\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\n    idx_j8sp = idx_j8sp + 1\n    var_za3 = 59\nif M % 2 != 0:\n    print(- 1)\n    exit()\n    var_qfx = 42\nQ = []\nidx_kts0 = 0\nlist_9x03 = list(enumerate(degs))\nwhile idx_kts0 < len(list_9x03):\n    i, d = list_9x03[idx_kts0]\n    Q.append((d, i))\n    idx_kts0 = idx_kts0 + 1\n    var_jxp = 27\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    idx_u3bz = 0\n    var_v5d = 90\n    list_px5r = list(enumerate(edges[u]))\n    while idx_u3bz < len(list_px5r):\n        i, v = list_px5r[idx_u3bz]\n        edges[v].remove(u)\n        if not parity[u] != 0 and i == 0:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        else:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_u3bz = idx_u3bz + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC035_B_to_16", "old_id": "atcoder_AGC035_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_qdiy = 0\nlist_3exh = s\nwhile idx_qdiy < len(list_3exh):\n    i = list_3exh[idx_qdiy]\n    if not i in dt:\n        dt[i] = 1\n    else:\n        dt[i] += 1\n    idx_qdiy = idx_qdiy + 1\n    var_lie = 72\ncnt = 0\nx = True\nidx_suzn = 0\nlist_fy8m = list(dt.items())\nwhile idx_suzn < len(list_fy8m):\n    key, value = list_fy8m[idx_suzn]\n    var_jod = 11\n    if not value % 2 != 0 and cnt < 1:\n        if value % 2 != 0 and cnt >= 1:\n            x = False\n            break\n    else:\n        cnt += 1\n    idx_suzn = idx_suzn + 1\nif not x:\n    if not x and len(s) % 2 == 0:\n        print(\"Second\")\n    elif not x and len(s) % 2 != 0:\n        print(\"First\")\n    var_1b8 = 33\nelse:\n    print(\"First\")\n    var_ri1 = 100\n", "id": "Add_IndependentVar_sample_from_codeforces_276_B_to_17", "old_id": "codeforces_276_B"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nidx_eyzm = 0\nlist_pzqx = range(2 ** D)\nwhile idx_eyzm < len(list_pzqx):\n    i = list_pzqx[idx_eyzm]\n    score = 0\n    problem = 0\n    var_g4d = 60\n    idx_7id2 = 0\n    list_se71 = range(D)\n    while idx_7id2 < len(list_se71):\n        j = list_se71[idx_7id2]\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n        idx_7id2 = idx_7id2 + 1\n    if score > G:\n        continue\n    left = G - score\n    idx_a7bo = 0\n    list_jxrh = range(D)\n    while idx_a7bo < len(list_jxrh):\n        j = list_jxrh[idx_a7bo]\n        if (i >> j) & 1:\n            continue\n        if not left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        else:\n            pass\n        idx_a7bo = idx_a7bo + 1\n    idx_eyzm = idx_eyzm + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC104_C_to_18", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_nhlx = 0\nlist_7cxd = range(n)\nwhile idx_nhlx < len(list_7cxd):\n    i = list_7cxd[idx_nhlx]\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if not i < n // 2:\n        h2 += number[i]\n    else:\n        h1 += number[i]\n    idx_nhlx = idx_nhlx + 1\n    var_2xe = 68\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    var_zwl = 44\n", "id": "Add_IndependentVar_sample_from_codeforces_146_A_to_19", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\ns = []\nidx_wu17 = 0\nlist_xkoh = range(n)\nwhile idx_wu17 < len(list_xkoh):\n    i = list_xkoh[idx_wu17]\n    k = input()\n    s.append(k)\n    var_o20 = 35\n    idx_wu17 = idx_wu17 + 1\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nidx_xgom = 0\nlist_mlx7 = range(n)\nwhile idx_xgom < len(list_mlx7):\n    i = list_mlx7[idx_xgom]\n    idx_wqls = 0\n    list_qtky = range(n)\n    var_aqe = 64\n    while idx_wqls < len(list_qtky):\n        j = list_qtky[idx_wqls]\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\n        idx_wqls = idx_wqls + 1\n    idx_xgom = idx_xgom + 1\nif not (len(rem) != 1):\n    if (d1 != d2):\n        print('NO')\n    elif (len(set(d1)) != 1):\n        print('NO')\n    elif (set(d1) == rem):\n        print('NO')\n    else:\n        print('YES')\n    var_qvg = 70\nelse:\n    print('NO')\n    var_15y = 65\n", "id": "Add_IndependentVar_sample_from_codeforces_404_A_to_20", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n    var_bvx = 80\n\n    def bitsum(self, l, r=None):\n        if not r is None:\n            return self._bitsum(r) - self._bitsum(l)\n        else:\n            return self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nidx_lz2j = 0\nlist_go49 = list(enumerate(_a))\nwhile idx_lz2j < len(list_go49):\n    i, x = list_go49[idx_lz2j]\n    var_ah7 = 59\n    d[x] = i\n    idx_lz2j = idx_lz2j + 1\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_gqob = 0\n    list_flre = range(n)\n    while idx_gqob < len(list_flre):\n        i = list_flre[idx_gqob]\n        b[i + 1] += b[i]\n        idx_gqob = idx_gqob + 1\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    idx_9wlx = 0\n    var_3ya = 15\n    list_b4fd = b\n    while idx_9wlx < len(list_b4fd):\n        x = list_b4fd[idx_9wlx]\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_9wlx = idx_9wlx + 1\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    var_vbj = 9\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC107_D_to_21", "old_id": "atcoder_ABC107_D"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    idx_eilu = 0\n    list_fcry = range(len(array) - 1, 0, - 1)\n    var_9zp = 51\n    while idx_eilu < len(list_fcry):\n        _ = list_fcry[idx_eilu]\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n        idx_eilu = idx_eilu + 1\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    idx_d2a0 = 0\n    list_m3pg = A[1:]\n    while idx_d2a0 < len(list_m3pg):\n        a = list_m3pg[idx_d2a0]\n        if not a <= dp[- 1][0]:\n            dp += [(a, 0)]\n        else:\n            dp = cut(dp, a)\n        is_added = False\n        idx_a3dc = 0\n        list_38gb = range(len(dp) - 1, - 1, - 1)\n        while idx_a3dc < len(list_38gb):\n            j = list_38gb[idx_a3dc]\n            if dp[j][1] < K - 1:\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n            idx_a3dc = idx_a3dc + 1\n        if not is_added:\n            return False\n        idx_d2a0 = idx_d2a0 + 1\n    return True\n    var_mvz = 57\n\n\ndef bis(x, y):\n    if not y == x + 1:\n        if is_possible((x + y) // 2):\n            return bis(x, (x + y) // 2)\n        else:\n            return bis((x + y) // 2, y)\n    else:\n        return y\n    var_xe3 = 49\n\n\nprint(bis(0, N))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC029_C_to_22", "old_id": "atcoder_AGC029_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nidx_59vd = 0\nlist_pi62 = w\nwhile idx_59vd < len(list_pi62):\n    i = list_pi62[idx_59vd]\n    var_vox = 71\n    if not i == 1:\n        if i % 2 == 0:\n            c = 3 - c\n            print(c)\n        else:\n            print(c)\n    else:\n        print(c)\n    idx_59vd = idx_59vd + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_705_B_to_23", "old_id": "codeforces_705_B"}
{"code": "n = int(input())\nq = []\ncount = 0\nidx_eh78 = 0\nlist_odbv = range(n)\nwhile idx_eh78 < len(list_odbv):\n    i = list_odbv[idx_eh78]\n    var_l5d = 22\n    a = input().split()\n    q.append(a)\n    idx_eh78 = idx_eh78 + 1\nidx_x04r = 0\nlist_dwg5 = q\nwhile idx_x04r < len(list_dwg5):\n    j = list_dwg5[idx_x04r]\n    idx_bef0 = 0\n    list_72s9 = q\n    while idx_bef0 < len(list_72s9):\n        k = list_72s9[idx_bef0]\n        if not k == j:\n            if j[0] == k[len(k) - 1]:\n                count += 1\n            else:\n                continue\n        else:\n            continue\n        idx_bef0 = idx_bef0 + 1\n    var_aox = 9\n    idx_x04r = idx_x04r + 1\nprint(count)\n", "id": "Add_IndependentVar_sample_from_codeforces_268_A_to_24", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_xwyt = 0\nlist_odhq = range(4)\nwhile idx_xwyt < len(list_odhq):\n    i = list_odhq[idx_xwyt]\n    l = list(map(str, input()))\n    t.append(l)\n    var_4so = 83\n    idx_xwyt = idx_xwyt + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_ljpq = 0\nlist_kc2s = range(3)\nwhile idx_ljpq < len(list_kc2s):\n    i = list_kc2s[idx_ljpq]\n    idx_y01g = 0\n    var_mxy = 38\n    list_wja8 = range(3)\n    while idx_y01g < len(list_wja8):\n        j = list_wja8[idx_y01g]\n        if not t[i][j] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i][j + 1] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j + 1] == '#':\n            white += 1\n        else:\n            black += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_y01g = idx_y01g + 1\n    idx_ljpq = idx_ljpq + 1\nif not correct == 1:\n    print('NO')\n    var_w7e = 73\nelse:\n    print('YES')\n    var_7rn = 83\n", "id": "Add_IndependentVar_sample_from_codeforces_287_A_to_25", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n    var_lew = 20\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_jyr8 = 0\n    list_210u = list(enumerate(P))\n    while idx_jyr8 < len(list_210u):\n        i, p = list_210u[idx_jyr8]\n        a[p] = i\n        idx_jyr8 = idx_jyr8 + 1\n    tmp = 1\n    var_zo3 = 44\n    max_len = 1\n    idx_qv5s = 0\n    list_v1m3 = range(1, N)\n    while idx_qv5s < len(list_v1m3):\n        i = list_v1m3[idx_qv5s]\n        if not a[i] < a[i + 1]:\n            tmp = 1\n        else:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        idx_qv5s = idx_qv5s + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_x9o4 = 0\n    var_gcs = 39\n    list_sar4 = list(enumerate(P))\n    while idx_x9o4 < len(list_sar4):\n        i, p = list_sar4[idx_x9o4]\n        if not i == 0 or P[i - 1] + 1 == p:\n            ans = max(ans, tmp)\n            tmp = 1\n        else:\n            tmp += 1\n        idx_x9o4 = idx_x9o4 + 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n    var_s1a = 86\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC024_B_to_26", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_utpr = 0\nlist_as4t = range(N)\nwhile idx_utpr < len(list_as4t):\n    x = list_as4t[idx_utpr]\n    if not S[x] == 'L':\n        if S[x] == 'R':\n            S_R += 1\n            if s_c + (S_R - T_L) == W + 1:\n                Judge = True\n        elif S[x] == 'U':\n            S_U += 1\n            if S_U - T_D - s_r == 0:\n                Judge = True\n        elif S[x] == 'D':\n            S_D += 1\n            if s_r + (S_D - T_U) == H + 1:\n                Judge = True\n    else:\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    var_4hb = 72\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_utpr = idx_utpr + 1\nif not Judge:\n    print('YES')\n    var_hql = 70\nelse:\n    print('NO')\n    var_q16 = 69\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC033_B_to_27", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n    var_9wh = 25\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if not N <= 0:\n        if num == 1:\n            return [I() for _ in range(N)]\n        else:\n            read_all = [tuple(II()) for _ in range(N)]\n            return map(list, zip(* read_all))\n    else:\n        return [[]] * num\n    var_6vo = 66\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n    var_rs6 = 49\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nidx_v0i1 = 0\nlist_a8v0 = list(enumerate(a))\nwhile idx_v0i1 < len(list_a8v0):\n    i, a0 = list_a8v0[idx_v0i1]\n    var_g78 = 94\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    idx_v0i1 = idx_v0i1 + 1\nif not max_sign == 0:\n    if max_sign == 1:\n        print(2 * N - 1)\n        idx_ukfd = 0\n        list_b4pq = range(N)\n        while idx_ukfd < len(list_b4pq):\n            i = list_b4pq[idx_ukfd]\n            print(max_index + 1, i + 1)\n            idx_ukfd = idx_ukfd + 1\n        idx_lpsk = 0\n        list_4co6 = range(N - 1)\n        while idx_lpsk < len(list_4co6):\n            i = list_4co6[idx_lpsk]\n            print(i + 1, i + 2)\n            idx_lpsk = idx_lpsk + 1\n    else:\n        print(2 * N - 1)\n        idx_05jv = 0\n        list_lish = range(N)\n        while idx_05jv < len(list_lish):\n            i = list_lish[idx_05jv]\n            print(max_index + 1, i + 1)\n            idx_05jv = idx_05jv + 1\n        idx_r9qa = 0\n        list_a30q = range(1, N)[:: - 1]\n        while idx_r9qa < len(list_a30q):\n            i = list_a30q[idx_r9qa]\n            print(i + 1, i)\n            idx_r9qa = idx_r9qa + 1\n    var_gyj = 14\nelse:\n    print(0)\n    var_31n = 8\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC086_B_to_28", "old_id": "atcoder_ARC086_B"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif not s == t:\n    cnt = 0\n    idx_8qot = 0\n    var_u40 = 74\n    list_gwoz = range(n)\n    while idx_8qot < len(list_gwoz):\n        i = list_gwoz[idx_8qot]\n        idx_3wiz = 0\n        list_f6an = range(n - i)\n        while idx_3wiz < len(list_f6an):\n            j = list_f6an[idx_3wiz]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n            idx_3wiz = idx_3wiz + 1\n        idx_8qot = idx_8qot + 1\n    print(2 * n - cnt)\nelse:\n    print(n)\n    var_v9n = 93\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC006_A_to_29", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        idx_eirm = 0\n        list_7eyw = data\n        while idx_eirm < len(list_7eyw):\n            number = list_7eyw[idx_eirm]\n            if len(number) > 0:\n                yield (number)\n            idx_eirm = idx_eirm + 1\n    var_ed1 = 73\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n    var_iy2 = 48\n\n\ndef gi():\n    data = gw()\n    return int(data)\n    var_z93 = 79\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_yv5t = 0\nlist_sedi = range(0, N - 1)\nwhile idx_yv5t < len(list_sedi):\n    i = list_sedi[idx_yv5t]\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\n    idx_yv5t = idx_yv5t + 1\n    var_7xs = 45\ncur_happy = N - 1 - seg_cnt\nif not 2 * K >= seg_cnt:\n    ans = cur_happy + 2 * K\n    var_sl4 = 65\nelse:\n    ans = N - 1\n    var_urf = 50\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC140_D_to_30", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_sgxm = 0\nlist_1thl = range(len(lista))\nwhile idx_sgxm < len(list_1thl):\n    i = list_1thl[idx_sgxm]\n    if not i == 0:\n        if i == len(lista) - 1:\n            print(\n                f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n            continue\n        elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n            print(lista[i + 1] - lista[i], end=\" \")\n        else:\n            print(lista[i] - lista[i - 1], end=\" \")\n    else:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    var_cjz = 100\n    if not lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[i] - lista[0])\n    else:\n        print(lista[len(lista) - 1] - lista[i])\n    idx_sgxm = idx_sgxm + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_567_A_to_31", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_ovis = 0\nlist_t410 = range(n)\nwhile idx_ovis < len(list_t410):\n    i = list_t410[idx_ovis]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    var_0e3 = 69\n    idx_ovis = idx_ovis + 1\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if not r >= - d:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\n    else:\n        heapq.heappush(y, - s)\n    var_std = 21\nprint(sum(y))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC137_D_to_32", "old_id": "atcoder_ABC137_D"}
{"code": "n, k = map(int, input().split())\nx = 0\nif not k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('NO')\n    var_9pn = 68\nelse:\n    print('YES')\n    idx_etzn = 0\n    var_987 = 57\n    list_sv8c = range(n)\n    while idx_etzn < len(list_sv8c):\n        i = list_sv8c[idx_etzn]\n        idx_rsmd = 0\n        list_yi4l = range(n)\n        while idx_rsmd < len(list_yi4l):\n            j = list_yi4l[idx_rsmd]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n            idx_rsmd = idx_rsmd + 1\n        print()\n        idx_etzn = idx_etzn + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_544_B_to_33", "old_id": "codeforces_544_B"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_1wn7 = 0\nlist_fbh1 = range(n)\nwhile idx_1wn7 < len(list_fbh1):\n    k = list_fbh1[idx_1wn7]\n    if not k + 1 in lista:\n        print(2, end=\" \")\n    else:\n        print(1, end=\" \")\n    var_y6c = 93\n    idx_1wn7 = idx_1wn7 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_421_A_to_34", "old_id": "codeforces_421_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_a0oi = 0\nlist_vzxh = range(len(a) - 1, - 1, - 1)\nwhile idx_a0oi < len(list_vzxh):\n    i = list_vzxh[idx_a0oi]\n    var_imv = 8\n    if not (a[i] == ' ' or a[i] == '?'):\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    else:\n        continue\n    idx_a0oi = idx_a0oi + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_49_A_to_35", "old_id": "codeforces_49_A"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    var_0t1 = 68\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\nif not X == 1 or X == N * 2 - 1:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_kxra = 0\n    list_m1lx = xs\n    while idx_kxra < len(list_m1lx):\n        x = list_m1lx[idx_kxra]\n        print(x)\n        idx_kxra = idx_kxra + 1\n    var_8uf = 28\nelse:\n    print(\"No\")\n    var_j86 = 12\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC006_B_to_36", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_296n = 0\n    list_uba1 = lis\n    while idx_296n < len(list_uba1):\n        i = list_uba1[idx_296n]\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n        idx_296n = idx_296n + 1\n    var_12u = 76\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    var_l5w = 12\n    if not (check(lis, k, mid)):\n        a = mid + 1\n    else:\n        ans = mid\n        b = mid - 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC174_E_to_37", "old_id": "atcoder_ABC174_E"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n    var_tvg = 44\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nidx_kd62 = 0\nlist_fit3 = range(2, __N + 1)\nwhile idx_kd62 < len(list_fit3):\n    i = list_fit3[idx_kd62]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    var_v3m = 11\n    idx_kd62 = idx_kd62 + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n    var_ia0 = 49\n\n\ndef solve(n):\n    assert n <= K + 1\n    var_i0a = 88\n    ans = 0\n    kumi = (n - 1) // 2\n    idx_8ms2 = 0\n    list_w0ng = range(kumi + 1)\n    while idx_8ms2 < len(list_w0ng):\n        p = list_w0ng[idx_8ms2]\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_8ms2 = idx_8ms2 + 1\n    return ans\n\n\nans = []\nidx_a6og = 0\nlist_h8ft = range(2, 2 * K + 1)\nwhile idx_a6og < len(list_h8ft):\n    i = list_h8ft[idx_a6og]\n    if not i <= K + 1:\n        print(ans[- i + K])\n    else:\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    idx_a6og = idx_a6og + 1\n    var_3zr = 60\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC102_C_to_38", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nidx_efz9 = 0\nlist_xg0r = range(1, n + 1)\nwhile idx_efz9 < len(list_xg0r):\n    i = list_xg0r[idx_efz9]\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    var_zoy = 94\n    idx_efz9 = idx_efz9 + 1\nanswer = QR * (n - 1) + sum_el[n] * R\nidx_6cym = 0\nlist_ms9w = range(1, n + 1)\nwhile idx_6cym < len(list_ms9w):\n    i = list_ms9w[idx_6cym]\n    var_mw3 = 78\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if not i > (n - i):\n        if (n - i) > i:\n            energy = energy + ((n - i) - i - 1) * QR\n    else:\n        energy = energy + (i - (n - i) - 1) * QL\n    if energy < answer:\n        answer = energy\n    idx_6cym = idx_6cym + 1\nprint(answer)\n", "id": "Add_IndependentVar_sample_from_codeforces_354_A_to_39", "old_id": "codeforces_354_A"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    idx_15pu = 0\n    var_ubm = 45\n    list_dkc4 = range(N)\n    while idx_15pu < len(list_dkc4):\n        i = list_dkc4[idx_15pu]\n        if not A[i] < 0:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        if A[i] * A[i] < x:\n            tot -= 1\n        idx_15pu = idx_15pu + 1\n    tot //= 2\n    if not tot < K:\n        rr = x\n    else:\n        ll = x\nprint(ll)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC155_D_to_40", "old_id": "atcoder_ABC155_D"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_2mup = 0\n    list_4xl8 = range(b)\n    while idx_2mup < len(list_4xl8):\n        i = list_4xl8[idx_2mup]\n        tot.append(l[i * a: i * a + a])\n        idx_2mup = idx_2mup + 1\n    idx_5743 = 0\n    list_af2g = zip(* tot)\n    while idx_5743 < len(list_af2g):\n        i = list_af2g[idx_5743]\n        if sum((i)) == b:\n            return True\n        idx_5743 = idx_5743 + 1\n    return False\n    var_lzs = 44\n\n\ndef solve():\n    tot = []\n    x = instr()\n    var_g48 = 7\n    s = []\n    idx_j7uw = 0\n    list_8q65 = x\n    while idx_j7uw < len(list_8q65):\n        i = list_8q65[idx_j7uw]\n        if not i == 'O':\n            s.append(1)\n        else:\n            s.append(0)\n        idx_j7uw = idx_j7uw + 1\n    idx_p0l8 = 0\n    list_vz34 = range(1, 13)\n    while idx_p0l8 < len(list_vz34):\n        i = list_vz34[idx_p0l8]\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_p0l8 = idx_p0l8 + 1\n    print(len(tot), end=' ')\n    idx_8hfv = 0\n    list_dx1n = sorted(tot)\n    while idx_8hfv < len(list_dx1n):\n        a, b = list_dx1n[idx_8hfv]\n        print(f'{a}x{b}', end=' ')\n        idx_8hfv = idx_8hfv + 1\n    print()\n\n\nif __name__ == \"__main__\":\n    idx_35vc = 0\n    var_qou = 85\n    list_87s6 = range(inp())\n    while idx_35vc < len(list_87s6):\n        i = list_87s6[idx_35vc]\n        solve()\n        idx_35vc = idx_35vc + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_400_A_to_41", "old_id": "codeforces_400_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nidx_rqci = 0\nlist_7138 = range(n)\nwhile idx_rqci < len(list_7138):\n    i = list_7138[idx_rqci]\n    x = input()\n    a, b = 0, 0\n    idx_tcse = 0\n    list_qs7x = s\n    while idx_tcse < len(list_qs7x):\n        j = list_qs7x[idx_tcse]\n        if not j == x[0]:\n            if j == x[1]:\n                b += 1\n            else:\n                ans = ans + min(a, b)\n                a, b = 0, 0\n        else:\n            a += 1\n        idx_tcse = idx_tcse + 1\n    ans = ans + min(a, b)\n    var_jpo = 67\n    idx_rqci = idx_rqci + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_154_A_to_42", "old_id": "codeforces_154_A"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n    var_y2m = 98\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_wjkg = 0\n    list_duls = sequence\n    var_uh3 = 96\n    while idx_wjkg < len(list_duls):\n        value = list_duls[idx_wjkg]\n        y = f(value)\n        if not y not in storage:\n            storage[y].append(value)\n        else:\n            storage[y] = [value]\n            FXs.append(y)\n        idx_wjkg = idx_wjkg + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    var_07n = 15\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n    var_uf4 = 61\n", "id": "Add_IndependentVar_sample_from_codeforces_272_B_to_43", "old_id": "codeforces_272_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_vawk = 0\nlist_bmlk = Number_i\nwhile idx_vawk < len(list_bmlk):\n    i = list_bmlk[idx_vawk]\n    Number_iMN.append(i * M / N)\n    idx_vawk = idx_vawk + 1\n    var_f2g = 63\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_c4iy = 0\nlist_z6at = Kaburi_j\nwhile idx_c4iy < len(list_z6at):\n    j = list_z6at[idx_c4iy]\n    Kaburi_i.append(int(j * N / M))\n    idx_c4iy = idx_c4iy + 1\n    var_2uo = 49\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if not list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        Flag = 1\n        break\n    else:\n        pass\n    counter += 1\n    var_okm = 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    var_nsz = 68\n    return a\nif not Flag == 1:\n    print(int(N * M / gcd(N, M)))\n    var_has = 74\nelse:\n    print(- 1)\n    var_vi8 = 42\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC028_A_to_44", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_4xg7 = 0\n    list_9ebj = list(enumerate(s[:: - 1]))\n    var_d05 = 54\n    while idx_4xg7 < len(list_9ebj):\n        i, c = list_9ebj[idx_4xg7]\n        cc = na + int(c)\n        na = 0\n        if not cc <= 4:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        else:\n            pp += cc\n        idx_4xg7 = idx_4xg7 + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    var_zpo = 19\n    mmin = 0\n    s = '0' + s\n    idx_0esv = 0\n    list_fh5i = s[:: - 1]\n    while idx_0esv < len(list_fh5i):\n        c = list_fh5i[idx_0esv]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_0esv = idx_0esv + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n    var_806 = 41\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    var_5ro = 61\n    input_l = input_text.splitlines()\n    idx_l18w = 0\n    list_5c8t = input_l\n    while idx_l18w < len(list_5c8t):\n        l = list_5c8t[idx_l18w]\n        yield l\n        idx_l18w = idx_l18w + 1\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n    var_mb6 = 5\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC155_E_to_45", "old_id": "atcoder_ABC155_E"}
{"code": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    var_9hw = 38\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if not ans[mid][- 1] < key:\n            bad = mid\n        else:\n            good = mid\n    return good\n\n\nN = int(input())\nans = []\nidx_hqnk = 0\nlist_fn4z = range(N)\nwhile idx_hqnk < len(list_fn4z):\n    _ = list_fn4z[idx_hqnk]\n    A = int(input())\n    idx = binary_search(A)\n    var_643 = 66\n    if not idx == len(ans):\n        ans[idx].append(A)\n    else:\n        ans.append([A])\n    idx_hqnk = idx_hqnk + 1\nprint(len(ans))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC134_E_to_46", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nidx_r0y3 = 0\nlist_o6ls = lst\nwhile idx_r0y3 < len(list_o6ls):\n    i = list_o6ls[idx_r0y3]\n    var_qge = 41\n    if (i & 1):\n        od += 1\n    idx_r0y3 = idx_r0y3 + 1\nsum = 0\nok = 0\nidx_yovd = 0\nlist_ugrs = range(n)\nwhile idx_yovd < len(list_ugrs):\n    i = list_ugrs[idx_yovd]\n    var_95u = 2\n    if not (lst[i] % 2 == 0):\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\n    else:\n        sum += lst[i]\n    idx_yovd = idx_yovd + 1\nprint(sum)\n", "id": "Add_IndependentVar_sample_from_codeforces_621_A_to_47", "old_id": "codeforces_621_A"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n    var_396 = 42\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    var_d6v = 12\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    var_wbq = 27\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_kvsg = 0\nlist_z0nc = range(n)\nwhile idx_kvsg < len(list_z0nc):\n    i = list_z0nc[idx_kvsg]\n    if not i == 0:\n        if S[i] != '?':\n            idx_wshc = 0\n            list_mxqf = range(13)\n            while idx_wshc < len(list_mxqf):\n                k = list_mxqf[idx_wshc]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_wshc = idx_wshc + 1\n        else:\n            idx_ijbq = 0\n            list_r9c8 = range(10)\n            while idx_ijbq < len(list_r9c8):\n                j = list_r9c8[idx_ijbq]\n                idx_gxhc = 0\n                list_zqj3 = range(13)\n                while idx_gxhc < len(list_zqj3):\n                    k = list_zqj3[idx_gxhc]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_gxhc = idx_gxhc + 1\n                idx_ijbq = idx_ijbq + 1\n        idx_1w5m = 0\n        list_bz2w = range(13)\n        while idx_1w5m < len(list_bz2w):\n            k = list_bz2w[idx_1w5m]\n            dp[i][k] %= mod\n            idx_1w5m = idx_1w5m + 1\n    else:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            idx_ipxa = 0\n            list_ynwh = range(10)\n            while idx_ipxa < len(list_ynwh):\n                j = list_ynwh[idx_ipxa]\n                dp[i][j] += 1\n                idx_ipxa = idx_ipxa + 1\n    idx_kvsg = idx_kvsg + 1\n    var_48d = 94\nprint(dp[n - 1][5])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC135_D_to_48", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_q041 = 0\nlist_rq6z = s\nwhile idx_q041 < len(list_rq6z):\n    c = list_rq6z[idx_q041]\n    if not c == '0' or c == '1':\n        if c == 'B' and len(my_str) != 0:\n            my_str = my_str[: len(my_str) - 1]\n    else:\n        my_str += c\n    var_eco = 80\n    idx_q041 = idx_q041 + 1\nprint(my_str)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC043_B_to_49", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nidx_poi4 = 0\nlist_x4gy = w\nwhile idx_poi4 < len(list_x4gy):\n    i = list_x4gy[idx_poi4]\n    if not i == 0:\n        if - i in w:\n            c += w[i] * w[- i]\n    else:\n        c += w[i] * (w[i] - 1)\n    var_i2z = 12\n    idx_poi4 = idx_poi4 + 1\nprint(c // 2)\n", "id": "Add_IndependentVar_sample_from_codeforces_131_B_to_50", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_l6e1 = 0\nlist_fp67 = range(n)\nwhile idx_l6e1 < len(list_fp67):\n    i = list_fp67[idx_l6e1]\n    if not lst[i] not in l:\n        l[lst[i]] += 1\n    else:\n        l[lst[i]] = 1\n    idx_l6e1 = idx_l6e1 + 1\n    var_xjg = 11\nres = 0\nidx_z90b = 0\nlist_mudt = range(n)\nwhile idx_z90b < len(list_mudt):\n    i = list_mudt[idx_z90b]\n    var_ynx = 86\n    if not l[lst[i]] > 1:\n        res += n - i - 1\n    else:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    idx_z90b = idx_z90b + 1\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_609_B_to_51", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n    var_3vn = 15\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n    var_ko7 = 100\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n    var_sfp = 72\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n    var_xy2 = 11\n\n\ndef rangeI(it, l, r):\n    idx_5fsv = 0\n    list_zfyq = list(enumerate(it))\n    var_41w = 83\n    while idx_5fsv < len(list_zfyq):\n        i, e = list_zfyq[idx_5fsv]\n        if not l <= i < r:\n            if l >= r:\n                break\n        else:\n            yield e\n        idx_5fsv = idx_5fsv + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n    var_su6 = 48\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    var_c7b = 3\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if not n % f == 0:\n            f += 2\n        else:\n            a.append(f)\n            n //= f\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    var_7ai = 25\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_q5y9 = 0\nlist_5rdn = list(fac.items())\nwhile idx_q5y9 < len(list_5rdn):\n    p, e = list_5rdn[idx_q5y9]\n    x = e\n    idx_0b1j = 0\n    list_ztu1 = range(1, 99999999)\n    while idx_0b1j < len(list_ztu1):\n        i = list_ztu1[idx_0b1j]\n        if not x >= i:\n            break\n        else:\n            x -= i\n            ans += 1\n        idx_0b1j = idx_0b1j + 1\n    var_ndb = 48\n    idx_q5y9 = idx_q5y9 + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_D_to_52", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_gjzi = 0\nlist_p8e6 = range(0, n)\nwhile idx_gjzi < len(list_p8e6):\n    i = list_p8e6[idx_gjzi]\n    if not i % 2 == 0:\n        b.append(x[i])\n    else:\n        a.append(x[i])\n    var_bc0 = 42\n    idx_gjzi = idx_gjzi + 1\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nidx_k1f9 = 0\nlist_xzy8 = a\nwhile idx_k1f9 < len(list_xzy8):\n    i = list_xzy8[idx_k1f9]\n    var_avr = 91\n    cnta[i] += 1\n    idx_k1f9 = idx_k1f9 + 1\nidx_d4yf = 0\nlist_3psr = a\nwhile idx_d4yf < len(list_3psr):\n    i = list_3psr[idx_d4yf]\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\n    idx_d4yf = idx_d4yf + 1\n    var_xvl = 23\nidx_afv3 = 0\nlist_1cq0 = a\nwhile idx_afv3 < len(list_1cq0):\n    i = list_1cq0[idx_afv3]\n    var_gb9 = 92\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_afv3 = idx_afv3 + 1\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nidx_pbxj = 0\nlist_e8qt = b\nwhile idx_pbxj < len(list_e8qt):\n    i = list_e8qt[idx_pbxj]\n    cntb[i] += 1\n    var_6pd = 22\n    idx_pbxj = idx_pbxj + 1\nidx_5jmy = 0\nlist_i160 = b\nwhile idx_5jmy < len(list_i160):\n    i = list_i160[idx_5jmy]\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\n    var_u2z = 31\n    idx_5jmy = idx_5jmy + 1\nidx_k9ol = 0\nlist_l6h0 = b\nwhile idx_k9ol < len(list_l6h0):\n    i = list_l6h0[idx_k9ol]\n    var_e6l = 12\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_k9ol = idx_k9ol + 1\nif not valb != vala:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    var_9h2 = 6\n    resb1 = 0\n    idx_lun4 = 0\n    list_0a1l = a\n    while idx_lun4 < len(list_0a1l):\n        i = list_0a1l[idx_lun4]\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n        idx_lun4 = idx_lun4 + 1\n    idx_d5bx = 0\n    list_3nk8 = b\n    while idx_d5bx < len(list_3nk8):\n        i = list_3nk8[idx_d5bx]\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n        idx_d5bx = idx_d5bx + 1\n    print(min(resa + resb1, resa1 + resb))\nelse:\n    res = 0\n    idx_7e9w = 0\n    list_a5lv = a\n    while idx_7e9w < len(list_a5lv):\n        i = list_a5lv[idx_7e9w]\n        if i != vala:\n            res += 1\n        idx_7e9w = idx_7e9w + 1\n    var_3pr = 100\n    idx_5h4n = 0\n    list_9k2z = b\n    while idx_5h4n < len(list_9k2z):\n        i = list_9k2z[idx_5h4n]\n        if i != valb:\n            res += 1\n        idx_5h4n = idx_5h4n + 1\n    print(res)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC111_C_to_53", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_nri8 = 0\nlist_ar7x = range(N)\nwhile idx_nri8 < len(list_ar7x):\n    i = list_ar7x[idx_nri8]\n    if lst[i] == 0:\n        K -= 1\n    if not lst[i] > 0:\n        if lst[i] < 0:\n            lst_m += [lst[i]]\n    else:\n        lst_p += [lst[i]]\n    idx_nri8 = idx_nri8 + 1\n    var_d6y = 69\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    idx_j1we = 0\n    list_1zgm = range(0, k + 1)\n    var_dym = 13\n    while idx_j1we < len(list_1zgm):\n        j = list_1zgm[idx_j1we]\n        if not j > lastx or k - j > lasty:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        else:\n            pass\n        idx_j1we = idx_j1we + 1\n    return ans\n\n\nprint(check(K))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC107_C_to_54", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_sqtx = 0\nlist_e9fg = list(enumerate(l))\nwhile idx_sqtx < len(list_e9fg):\n    i, c = list_e9fg[idx_sqtx]\n    if not c == '0':\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_sqtx = idx_sqtx + 1\n    var_39x = 90\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC129_E_to_55", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_d9y2 = 0\nlist_hcep = l\nwhile idx_d9y2 < len(list_hcep):\n    i = list_hcep[idx_d9y2]\n    if not i % m == 0:\n        l2.append(i // m + 1)\n    else:\n        l2.append(i // m)\n    idx_d9y2 = idx_d9y2 + 1\n    var_wje = 25\nmx = max(l2)\nidx_rk30 = 0\nlist_ovk7 = range(n)\nwhile idx_rk30 < len(list_ovk7):\n    i = list_ovk7[idx_rk30]\n    var_xw4 = 53\n    if l2[i] == mx:\n        ind = i\n    idx_rk30 = idx_rk30 + 1\nprint(ind + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_450_A_to_56", "old_id": "codeforces_450_A"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nidx_ezyp = 0\nlist_9z6r = range(N)\nwhile idx_ezyp < len(list_9z6r):\n    i = list_9z6r[idx_ezyp]\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_ezyp = idx_ezyp + 1\n    var_23f = 1\nif not (mx == - 1):\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    var_zlm = 45\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\nelse:\n    print('0 0')\n    var_bsu = 57\n", "id": "Add_IndependentVar_sample_from_codeforces_56_B_to_57", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = 0\ncl = 0\nidx_8i2g = 0\nlist_b6fs = txt\nwhile idx_8i2g < len(list_b6fs):\n    z = list_b6fs[idx_8i2g]\n    if not z.islower():\n        cu = cu + 1\n    else:\n        cl = cl + 1\n    var_1a6 = 82\n    idx_8i2g = idx_8i2g + 1\nif not cu > cl:\n    out = txt.lower()\n    var_lsv = 19\nelse:\n    out = txt.upper()\n    var_hbu = 65\nprint(out)\n", "id": "Add_IndependentVar_sample_from_codeforces_59_A_to_58", "old_id": "codeforces_59_A"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n    var_obt = 29\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n    var_bhp = 62\n\n\nresult = {}\nidx_07px = 0\nlist_6dnz = range(n)\nwhile idx_07px < len(list_6dnz):\n    i = list_6dnz[idx_07px]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    var_i8f = 20\n    result.update({i: 0})\n    if not task.time > finish_time and remaining.empty():\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\n    else:\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    idx_07px = idx_07px + 1\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\n    var_z6c = 59\nidx_0ua2 = 0\nlist_k1re = result\nwhile idx_0ua2 < len(list_k1re):\n    key = list_k1re[idx_0ua2]\n    print(result.get(key))\n    var_x9u = 4\n    idx_0ua2 = idx_0ua2 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_644_B_to_59", "old_id": "codeforces_644_B"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_rdb1 = 0\nlist_eayv = range(int(input()))\nwhile idx_rdb1 < len(list_eayv):\n    i = list_eayv[idx_rdb1]\n    x, a, b = input()[: - 1].split()\n    var_apo = 42\n    a = int(a)\n    b = int(b) + 1\n    if not x == 'M':\n        f[a] += 2\n        f[b] -= 2\n    else:\n        m[a] += 2\n        m[b] -= 2\n    idx_rdb1 = idx_rdb1 + 1\na, b, c = 0, 0, 0\nidx_egsx = 0\nlist_6ovi = range(N)\nwhile idx_egsx < len(list_6ovi):\n    i = list_6ovi[idx_egsx]\n    var_8hw = 82\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\n    idx_egsx = idx_egsx + 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_codeforces_629_B_to_60", "old_id": "codeforces_629_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nidx_g10j = 0\nlist_zdw1 = pre + 1\nwhile idx_g10j < len(list_zdw1):\n    i = list_zdw1[idx_g10j]\n    idx_sf24 = 0\n    list_z5nb = itertools.combinations(pre, i)\n    while idx_sf24 < len(list_z5nb):\n        j = list_z5nb[idx_sf24]\n        l.append(list(j))\n        idx_sf24 = idx_sf24 + 1\n    idx_g10j = idx_g10j + 1\n    var_tw0 = 43\nidx_n5r0 = 0\nlist_n2aw = range(1, m + 1)\nwhile idx_n5r0 < len(list_n2aw):\n    i = list_n2aw[idx_n5r0]\n    idx_fhza = 0\n    var_bp8 = 58\n    list_y6bw = list(enumerate(l))\n    while idx_fhza < len(list_y6bw):\n        j, k = list_y6bw[idx_fhza]\n        ca = 0\n        idx_rosm = 0\n        list_wdjc = k\n        while idx_rosm < len(list_wdjc):\n            ii = list_wdjc[idx_rosm]\n            ca += c[ii, i]\n            idx_rosm = idx_rosm + 1\n        if not ca < x:\n            pass\n        else:\n            rem.insert(0, j)\n        idx_fhza = idx_fhza + 1\n    if len(rem) > 0:\n        idx_pmdq = 0\n        list_xpel = rem\n        while idx_pmdq < len(list_xpel):\n            j = list_xpel[idx_pmdq]\n            l.pop(j)\n            idx_pmdq = idx_pmdq + 1\n        rem = []\n    if len(l) == 0:\n        print(- 1)\n        break\n    idx_n5r0 = idx_n5r0 + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC167_C_to_61", "old_id": "atcoder_ABC167_C"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nidx_u9kq = 0\nlist_2ws5 = range(1, n)\nwhile idx_u9kq < len(list_2ws5):\n    i = list_2ws5[idx_u9kq]\n    li, ri = map(int, input().split())\n    if not li <= l and r <= ri:\n        if li < l or r < ri:\n            id = n\n    else:\n        id = i\n    l = min(l, li)\n    r = max(r, ri)\n    idx_u9kq = idx_u9kq + 1\n    var_f5i = 79\nprint(- 1 if id == n else id + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_242_B_to_62", "old_id": "codeforces_242_B"}
{"code": "a, b = map(int, input().split())\nc = 0\nidx_7bo3 = 0\nlist_ykun = range(2)\nwhile idx_7bo3 < len(list_ykun):\n    i = list_ykun[idx_7bo3]\n    c += max(a, b)\n    if not a >= b:\n        b -= 1\n    else:\n        a -= 1\n    idx_7bo3 = idx_7bo3 + 1\n    var_vei = 85\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC124_A_to_63", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif not len(ip) != 1:\n    st = ip\n    var_ov9 = 78\nelse:\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    var_qb0 = 79\n    idx_4dsf = 0\n    list_94fl = ip\n    while idx_4dsf < len(list_94fl):\n        i = list_94fl[idx_4dsf]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_4dsf = idx_4dsf + 1\nprint(int(st))\n", "id": "Add_IndependentVar_sample_from_codeforces_514_A_to_64", "old_id": "codeforces_514_A"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nidx_ams3 = 0\nlist_3pn9 = range(q)\nwhile idx_ams3 < len(list_3pn9):\n    _ = list_3pn9[idx_ams3]\n    ql = list(map(int, input().split()))\n    if not ql[0] == 2:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    else:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    idx_ams3 = idx_ams3 + 1\n    var_h3r = 81\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC127_F_to_65", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    var_gou = 63\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_9br7 = 0\n    list_pelf = pieces\n    while idx_9br7 < len(list_pelf):\n        piece = list_pelf[idx_9br7]\n        if not piece[1] == 'A':\n            pScore -= piece[0]\n        else:\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        idx_9br7 = idx_9br7 + 1\n    idx_wufi = 0\n    list_4a08 = range(len(pieces) - 1, - 1, - 1)\n    while idx_wufi < len(list_4a08):\n        i = list_4a08[idx_wufi]\n        if not pieces[i][1] == 'A':\n            sScore -= pieces[i][0]\n        else:\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        idx_wufi = idx_wufi + 1\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    var_9f0 = 88\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n    var_la3 = 40\n", "id": "Add_IndependentVar_sample_from_codeforces_632_B_to_66", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    var_10k = 100\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n    var_lcb = 77\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n    var_ta3 = 10\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_7xzr = 0\n    list_vbkf = s\n    while idx_7xzr < len(list_vbkf):\n        i = list_vbkf[idx_7xzr]\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n        idx_7xzr = idx_7xzr + 1\n    var_dmt = 24\n    return r\n\n\ndef solve():\n    l = []\n    idx_dij3 = 0\n    list_ko2z = range(3)\n    while idx_dij3 < len(list_ko2z):\n        i = list_ko2z[idx_dij3]\n        l.append(f(input()))\n        idx_dij3 = idx_dij3 + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_9sv6 = 0\n    list_oh73 = t\n    while idx_9sv6 < len(list_oh73):\n        i = list_oh73[idx_9sv6]\n        l.append(\"\".join(i))\n        idx_9sv6 = idx_9sv6 + 1\n    var_etl = 13\n    idx_fe28 = 0\n    list_057p = range(inp())\n    while idx_fe28 < len(list_057p):\n        i = list_057p[idx_fe28]\n        if not f(instr()) in l:\n            print('WA')\n        else:\n            print('ACC')\n        idx_fe28 = idx_fe28 + 1\n\n\nif __name__ == \"__main__\":\n    solve()\n    var_4rz = 55\n", "id": "Add_IndependentVar_sample_from_codeforces_61_B_to_67", "old_id": "codeforces_61_B"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_qyje = 0\n    list_604y = range(n)\n    while idx_qyje < len(list_604y):\n        i = list_604y[idx_qyje]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_qyje = idx_qyje + 1\n    var_85e = 6\n    low.sort()\n    high.sort()\n    if not n % 2:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n    else:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n    var_z0e = 10\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_E_to_68", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nidx_4o1x = 0\nlist_p1n0 = range(n)\nwhile idx_4o1x < len(list_p1n0):\n    i = list_p1n0[idx_4o1x]\n    a, b = map(int, input().split())\n    l[a] = b\n    idx_4o1x = idx_4o1x + 1\n    var_syt = 30\nif l[0] > 0:\n    dp[0] = 1\n    var_hwc = 26\nmx = 0\nidx_qn8y = 0\nlist_7e8z = range(1, 1000010)\nwhile idx_qn8y < len(list_7e8z):\n    i = list_7e8z[idx_qn8y]\n    if not (l[i] == 0):\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    else:\n        dp[i] = dp[i - 1]\n    if (dp[i] > mx):\n        mx = dp[i]\n    var_8td = 89\n    idx_qn8y = idx_qn8y + 1\nprint(n - mx)\n", "id": "Add_IndependentVar_sample_from_codeforces_607_A_to_69", "old_id": "codeforces_607_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nidx_1o82 = 0\nlist_8m0i = range(1, N + 1)\nwhile idx_1o82 < len(list_8m0i):\n    i = list_8m0i[idx_1o82]\n    var_x65 = 91\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_1o82 = idx_1o82 + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nidx_otmf = 0\nlist_ov82 = range(0, T)\nwhile idx_otmf < len(list_ov82):\n    t = list_ov82[idx_otmf]\n    dp[0][t] = 0\n    var_wdr = 30\n    idx_otmf = idx_otmf + 1\nidx_ol2i = 0\nlist_fbd7 = range(1, N + 1)\nwhile idx_ol2i < len(list_fbd7):\n    n = list_fbd7[idx_ol2i]\n    dp[n][0] = 0\n    idx_s3qg = 0\n    var_6oh = 24\n    list_hb4n = range(1, T)\n    while idx_s3qg < len(list_hb4n):\n        t = list_hb4n[idx_s3qg]\n        if not time_value[n][TIME] > t:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        else:\n            dp[n][t] = dp[n - 1][t]\n        idx_s3qg = idx_s3qg + 1\n    idx_ol2i = idx_ol2i + 1\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nidx_pu1e = 0\nlist_nq0y = range(N - 1, 0, - 1)\nwhile idx_pu1e < len(list_nq0y):\n    n = list_nq0y[idx_pu1e]\n    var_2hd = 1\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if not t < 0:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    else:\n        break\n    idx_pu1e = idx_pu1e + 1\nprint(max_val)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC145_E_to_70", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_eh92 = 0\n    list_0dyx = range(H)\n    while idx_eh92 < len(list_0dyx):\n        i = list_0dyx[idx_eh92]\n        idx_ua2w = 0\n        list_1b0d = range(W)\n        while idx_ua2w < len(list_1b0d):\n            j = list_1b0d[idx_ua2w]\n            if not i < B:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            else:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            idx_ua2w = idx_ua2w + 1\n        idx_eh92 = idx_eh92 + 1\n    idx_740c = 0\n    list_finm = range(H)\n    while idx_740c < len(list_finm):\n        i = list_finm[idx_740c]\n        print(''.join(answer[i]))\n        idx_740c = idx_740c + 1\n    var_njb = 6\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_zlrx = 0\n        list_r7hu = sys.stdin\n        while idx_zlrx < len(list_r7hu):\n            line = list_r7hu[idx_zlrx]\n            idx_9cx3 = 0\n            list_1bn7 = line.split()\n            while idx_9cx3 < len(list_1bn7):\n                word = list_1bn7[idx_9cx3]\n                yield word\n                idx_9cx3 = idx_9cx3 + 1\n            idx_zlrx = idx_zlrx + 1\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    var_a0k = 65\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n    var_j0b = 80\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC038_A_to_71", "old_id": "atcoder_AGC038_A"}
