{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    idx_xldf = 0\n    list_1apu = V.get(i, [])\n    while idx_xldf < len(list_1apu):\n        v, w = list_1apu[idx_xldf]\n        if (w % 2) == 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n        idx_xldf = idx_xldf + 1\n    return True\nif __name__ == ('_' + '_main__') and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    n = int(input())\n    V = {}\n    color = {}\n    idx_h7td = 0\n    list_41tc = range(1, n)\n    while idx_h7td < len(list_41tc):\n        i = list_41tc[idx_h7td]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_h7td = idx_h7td + 1\n    idx_cx23 = 0\n    list_oveb = range(1, n+1)\n    while idx_cx23 < len(list_oveb):\n        i = list_oveb[idx_cx23]\n        color[i] = -1\n        idx_cx23 = idx_cx23 + 1\n\n    while True:\n        i = 0\n        idx_wa3u = 0\n        list_jm5f = range(1, n+1)\n        while idx_wa3u < len(list_jm5f):\n            j = list_jm5f[idx_wa3u]\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n            idx_wa3u = idx_wa3u + 1\n        if i == 0:\n            idx_za69 = 0\n            list_520l = range(1, n+1)\n            while idx_za69 < len(list_520l):\n                j = list_520l[idx_za69]\n                print(color[j])\n                idx_za69 = idx_za69 + 1\n            break\n        else:\n            if not dfs(i):\n                print(('No' + ''))\n                break\n", "id": "StringUnfoldding_sample_from_s908812767_to_0", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < 26 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    idx_0z1j = 0\n    list_g8zd = range(26)\n    while idx_0z1j < len(list_g8zd):\n        i = list_g8zd[idx_0z1j]\n        c = chr(ord((\"\" + \"a\"))+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_0z1j = idx_0z1j + 1\nelse:\n    idx_tcp8 = 0\n    list_2qat = reversed(range(1, 26))\n    while idx_tcp8 < len(list_2qat):\n        i = list_2qat[idx_tcp8]\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            idx_jz3d = 0\n            list_sepj = range(26)\n            while idx_jz3d < len(list_sepj):\n                j = list_sepj[idx_jz3d]\n                c = chr(ord((\"\" + \"a\"))+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_jz3d = idx_jz3d + 1\n        idx_tcp8 = idx_tcp8 + 1\n    print(-1)\n", "id": "StringUnfoldding_sample_from_s504709360_to_1", "old_id": "s504709360"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nidx_la2j = 0\nlist_kfv2 = A[:M]\nwhile idx_la2j < len(list_kfv2):\n    a = list_kfv2[idx_la2j]\n    if a/S - 1/(4*M) < 0 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        print(('No' + ''))\n        break\n    idx_la2j = idx_la2j + 1\n", "id": "StringUnfoldding_sample_from_s846046431_to_2", "old_id": "s846046431"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [(\"\" + \"3\"), (\"\" + \"5\"), (\"\" + \"7\")]\nshichigo = [[] for _ in range(len(strn))]\nidx_4c07 = 0\nlist_c2ev = range(len(strn))\nwhile idx_4c07 < len(list_c2ev):\n    i = list_c2ev[idx_4c07]\n    if i == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        idx_t4pk = 0\n        list_czpr = shichigolist\n        while idx_t4pk < len(list_czpr):\n            j = list_czpr[idx_t4pk]\n            shichigo[i].append(j)\n            idx_t4pk = idx_t4pk + 1\n    else:\n        idx_5tou = 0\n        list_4yw2 = shichigo[i-1]\n        while idx_5tou < len(list_4yw2):\n            j = list_4yw2[idx_5tou]\n            idx_fick = 0\n            list_xckd = shichigolist\n            while idx_fick < len(list_xckd):\n                k = list_xckd[idx_fick]\n                shichigo[i].append(j+k)\n                idx_fick = idx_fick + 1\n            idx_5tou = idx_5tou + 1\n    idx_4c07 = idx_4c07 + 1\ntarget = len(strn)-1\nidx_9mcd = 0\nlist_bduc = range(len(strn))\nwhile idx_9mcd < len(list_bduc):\n    i = list_bduc[idx_9mcd]\n    idx_mc0e = 0\n    list_3pmz = shichigo[i][:]\n    while idx_mc0e < len(list_3pmz):\n        j = list_3pmz[idx_mc0e]\n        if i == target and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count((\"3\" + \"\")) == 0 or j.count((\"\" + \"5\")) == 0 or j.count((\"\" + \"7\")) == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count((\"3\" + \"\")) == 0 or j.count((\"\" + \"5\")) == 0 or j.count((\"\" + \"7\")) == 0:\n                shichigo[i].remove(j)\n        idx_mc0e = idx_mc0e + 1\n    idx_9mcd = idx_9mcd + 1\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "StringUnfoldding_sample_from_s949655009_to_3", "old_id": "s949655009"}
{"code": "s = input()\nalphabets = [(\"\" + \"a\"), (\"\" + \"b\"), (\"\" + \"c\"), (\"d\" + \"\"), (\"\" + \"e\"), (\"f\" + \"\"), (\"\" + \"g\"), (\"h\" + \"\"), (\"\" + \"i\"), (\"\" + \"j\"), (\"\" + \"k\"), (\"l\" + \"\"),\n             (\"\" + \"m\"), (\"\" + \"n\"), (\"\" + \"o\"), (\"\" + \"p\"), (\"q\" + \"\"), (\"\" + \"r\"), (\"\" + \"s\"), (\"t\" + \"\"), (\"\" + \"u\"), (\"v\" + \"\"), (\"\" + \"w\"), (\"\" + \"x\"), (\"y\" + \"\"), (\"z\" + \"\")]\nidx_25o7 = 0\nlist_qvif = range(len(alphabets))\nwhile idx_25o7 < len(list_qvif):\n    i = list_qvif[idx_25o7]\n    if alphabets[i] == s and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        print(alphabets[i+1])\n    idx_25o7 = idx_25o7 + 1\n", "id": "StringUnfoldding_sample_from_s961772658_to_4", "old_id": "s961772658"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        idx_0rp4 = 0\n        list_641q = range(first, end+1)\n        while idx_0rp4 < len(list_641q):\n            s_i = list_641q[idx_0rp4]\n            if T[t_i] != S_d[s_i] and S_d[s_i] != ('' + '?') and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                break\n            t_i += 1\n            idx_0rp4 = idx_0rp4 + 1\n\n        first -= 1\n        end -= 1\n\n    else:\n        print(('UNRES' + 'TORABLE'))\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    idx_u5lt = 0\n    list_bq09 = range(first, end+1)\n    while idx_u5lt < len(list_bq09):\n        i = list_bq09[idx_u5lt]\n        ans[i] = T[t_i]\n        t_i += 1\n        idx_u5lt = idx_u5lt + 1\n\n    ans = ('' + '').join(ans).replace(('?' + ''), ('' + 'a'))\n    print(ans)\nif __name__ == ('' + '__main__') and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n    solve()\n", "id": "StringUnfoldding_sample_from_s826716211_to_5", "old_id": "s826716211"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nidx_q5r1 = 0\nlist_dthk = range(2**(h+w))\nwhile idx_q5r1 < len(list_dthk):\n    i = list_dthk[idx_q5r1]\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    idx_i64a = 0\n    list_rm67 = range(h)\n    while idx_i64a < len(list_rm67):\n        l = list_rm67[idx_i64a]\n        idx_cd9l = 0\n        list_an5o = range(w)\n        while idx_cd9l < len(list_an5o):\n            k = list_an5o[idx_cd9l]\n            if mat[l][k] == ('#' + '') and rs[l] == ('' + '0') and cs[k] == ('' + '0') and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                ct += 1\n            idx_cd9l = idx_cd9l + 1\n        idx_i64a = idx_i64a + 1\n    if ct == ka and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ans += 1\n    idx_q5r1 = idx_q5r1 + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s760938927_to_6", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = (\"\" + \"\")\nidx_6k25 = 0\nlist_nbhy = qs\nwhile idx_6k25 < len(list_nbhy):\n    operation = list_nbhy[idx_6k25]\n    if operation[0] == ('1' + '') and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        n = not n\n    if operation[0] == ('2' + '') and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\n    idx_6k25 = idx_6k25 + 1\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "StringUnfoldding_sample_from_s621701371_to_7", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_6iyc = 0\n    list_lbyp = range(0, n)\n    while idx_6iyc < len(list_lbyp):\n        i = list_lbyp[idx_6iyc]\n        idx_gtq5 = 0\n        list_sh5k = range(n-1, i, -1)\n        while idx_gtq5 < len(list_sh5k):\n            j = list_sh5k[idx_gtq5]\n            if int(cards[j][1]) < int(cards[j-1][1]) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n            idx_gtq5 = idx_gtq5 + 1\n        idx_6iyc = idx_6iyc + 1\n\n    print((\"\" + \" \").join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_5x86 = 0\n    list_r2gj = range(0, n)\n    while idx_5x86 < len(list_r2gj):\n        i = list_r2gj[idx_5x86]\n        mini = i\n        idx_9s6d = 0\n        list_07wx = range(i, n)\n        while idx_9s6d < len(list_07wx):\n            j = list_07wx[idx_9s6d]\n            if int(cards[j][1]) < int(cards[mini][1]) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                mini = j\n            idx_9s6d = idx_9s6d + 1\n        if mini != i and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_5x86 = idx_5x86 + 1\n\n    print((\"\" + \" \").join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split((\"\" + \" \"))\ncards2 = list(cards)\nbubbleSort(cards)\nprint((\"\" + \"Stable\"))\nselectionSort(cards2)\nif (\" \" + \"\").join(map(str, cards2)) == (\" \" + \"\").join(map(str, cards)) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    print((\"S\" + \"table\"))\nelse:\n    print((\"N\" + \"ot stable\"))\n", "id": "StringUnfoldding_sample_from_s875904659_to_8", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=(\" \" + \"\"), vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return [deque()]\n    k = []\n    idx_vp2w = 0\n    list_8znf = range(len(li))\n    while idx_vp2w < len(list_8znf):\n        i = list_8znf[idx_vp2w]\n        if i in used and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_nkbi = 0\n        list_1d0z = sub_list\n        while idx_nkbi < len(list_1d0z):\n            sub = list_1d0z[idx_nkbi]\n            sub.appendleft(li[i])\n            idx_nkbi = idx_nkbi + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_vp2w = idx_vp2w + 1\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=(\"\" + \"\")):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_mwg5 = 0\n    list_nghq = range(len(li)-1, -1, -1)\n    while idx_mwg5 < len(list_nghq):\n        i = list_nghq[idx_mwg5]\n        n += li[i] * base\n        base *= 10\n        idx_mwg5 = idx_mwg5 + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_e7tq = 0\n    list_spbg = range(len(li))\n    while idx_e7tq < len(list_spbg):\n        i = list_spbg[idx_e7tq]\n        if li[i] >= int(math.sqrt(n)) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            break\n        if li[i] == -1 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            continue\n        idx_ph2z = 0\n        list_arsb = range(i+1, len(li))\n        while idx_ph2z < len(list_arsb):\n            j = list_arsb[idx_ph2z]\n            if li[j] % li[i] == 0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                li[j] = -1\n            idx_ph2z = idx_ph2z + 1\n        idx_e7tq = idx_e7tq + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_l02c = 0\n    list_kdqb = range(0, (1 << (n+1)))\n    while idx_l02c < len(list_kdqb):\n        bit = list_kdqb[idx_l02c]\n        ss = set()\n        idx_u71e = 0\n        list_x1do = range(0, n)\n        while idx_u71e < len(list_x1do):\n            i = list_x1do[idx_u71e]\n            if (bit & (1 << i)) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                ss.add(li[i])\n            idx_u71e = idx_u71e + 1\n        s.append(ss)\n        idx_l02c = idx_l02c + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif n == len(set(A)) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    print(('' + 'YES'))\nelse:\n    print(('N' + 'O'))\n", "id": "StringUnfoldding_sample_from_s137613418_to_9", "old_id": "s137613418"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count(('' + 'R'))\ng_cnt = s.count(('G' + ''))\nb_cnt = s.count(('' + 'B'))\n\nans = r_cnt * g_cnt * b_cnt\nidx_hzdl = 0\nlist_snfx = range(n)\nwhile idx_hzdl < len(list_snfx):\n    i = list_snfx[idx_hzdl]\n    idx_r1v3 = 0\n    list_2lr6 = range(n)\n    while idx_r1v3 < len(list_2lr6):\n        d = list_2lr6[idx_r1v3]\n        j = i + d\n        k = j + d\n        if k >= n and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            break\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i] and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n\n            ans -= 1\n        idx_r1v3 = idx_r1v3 + 1\n    idx_hzdl = idx_hzdl + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s922746568_to_10", "old_id": "s922746568"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    idx_o0h6 = 0\n    list_yhou = range(0, len(input_value) + 1 - n)\n    while idx_o0h6 < len(list_yhou):\n        i = list_yhou[idx_o0h6]\n        idx_fx5a = 0\n        list_wuid = range(1, n)\n        while idx_fx5a < len(list_wuid):\n            j = list_wuid[idx_fx5a]\n            if input_value[i] != input_value[i + j] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                break\n            if j == n - 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                return (\"Yes\" + \"\")\n            idx_fx5a = idx_fx5a + 1\n        idx_o0h6 = idx_o0h6 + 1\n    return (\"N\" + \"o\")\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "StringUnfoldding_sample_from_s616346400_to_11", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_qg9u = 0\nlist_joue = range(n)\nwhile idx_qg9u < len(list_joue):\n    i = list_joue[idx_qg9u]\n    st = ('' + '').join(sorted(list(input())))\n    lst.append(st)\n    idx_qg9u = idx_qg9u + 1\nlst = sorted(lst)\nlst += [('' + 'end')]\npre = ('' + '')\ntmp_cnt = 0\ncnt = 0\nidx_g8kp = 0\nlist_fsx4 = lst\nwhile idx_g8kp < len(list_fsx4):\n    i = list_fsx4[idx_g8kp]\n    if i == pre and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\n    idx_g8kp = idx_g8kp + 1\nprint(cnt)\n", "id": "StringUnfoldding_sample_from_s430322735_to_12", "old_id": "s430322735"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=(\"int(input(\" + \"))\"): [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        return gcd(b, a)\n    if b == 0 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nidx_uaxs = 0\nlist_sxb9 = range(aa)\nwhile idx_uaxs < len(list_sxb9):\n    i = list_sxb9[idx_uaxs]\n    if s[n//aa*i] != t[m//aa*i] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print(-1)\n        exit()\n    idx_uaxs = idx_uaxs + 1\nprint(bb)\n", "id": "StringUnfoldding_sample_from_s986062252_to_13", "old_id": "s986062252"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    idx_3wn7 = 0\n    list_pk36 = list(enumerate(a))\n    while idx_3wn7 < len(list_pk36):\n        i, num = list_pk36[idx_3wn7]\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n        idx_3wn7 = idx_3wn7 + 1\n    right_seg = SegmentTree(N, 0)\n    idx_rj1d = 0\n    list_pf7s = list(enumerate(a[::-1]))\n    while idx_rj1d < len(list_pf7s):\n        i, num = list_pf7s[idx_rj1d]\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n        idx_rj1d = idx_rj1d + 1\n\n    print(sum(ans))\nif __name__ == (\"__main_\" + \"_\") and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n    main()\n", "id": "StringUnfoldding_sample_from_s764169243_to_14", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_k81y = 0\nlist_13gm = range(len(S))\nwhile idx_k81y < len(list_13gm):\n    i = list_13gm[idx_k81y]\n    if S[i] == (\"\" + \"A\") or S[i] == (\"\" + \"C\") or S[i] == (\"G\" + \"\") or S[i] == (\"\" + \"T\") and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\n    idx_k81y = idx_k81y + 1\nif count > record and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n    record = count\n\nprint(record)\n", "id": "StringUnfoldding_sample_from_s993625131_to_15", "old_id": "s993625131"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count((\"W\" + \"\"))\nnum_r = N - num_w\n\ncomp = (\"\" + \"R\")*num_r + (\"W\" + \"\")*num_w\nans = 0\nidx_fbkn = 0\nlist_0egw = range(num_r)\nwhile idx_fbkn < len(list_0egw):\n    i = list_0egw[idx_fbkn]\n    if c[i] != comp[i] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ans += 1\n    idx_fbkn = idx_fbkn + 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s031459110_to_16", "old_id": "s031459110"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_ngv2 = 0\n    list_seua = range(n)\n    while idx_ngv2 < len(list_seua):\n        _ = list_seua[idx_ngv2]\n        s = [_s for _s in sorted(input().strip())]\n        s = ('' + '').join(s)\n        if s in sdic and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n        idx_ngv2 = idx_ngv2 + 1\n    ans = 0\n    idx_eot6 = 0\n    list_wx1s = list(sdic.items())\n    while idx_eot6 < len(list_wx1s):\n        k, v = list_wx1s[idx_eot6]\n        ans += v*(v-1)//2\n        idx_eot6 = idx_eot6 + 1\n    print(ans)\nif __name__ == ('__m' + 'ain__') and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n    main()\n", "id": "StringUnfoldding_sample_from_s733189960_to_17", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_4vgi = 0\nlist_g97k = range(n)\nwhile idx_4vgi < len(list_g97k):\n    _ = list_g97k[idx_4vgi]\n    x, u = list(input().split())\n    if u == (\"BT\" + \"C\") and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        res += float(x) * 380000\n    else:\n        res += int(x)\n    idx_4vgi = idx_4vgi + 1\nprint(res)\n", "id": "StringUnfoldding_sample_from_s238775098_to_18", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_619u = 0\n    list_h42q = range(n//2)\n    while idx_619u < len(list_h42q):\n        i = list_h42q[idx_619u]\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n        idx_619u = idx_619u + 1\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\nif __name__ == (\"__ma\" + \"in__\") and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    main()\n", "id": "StringUnfoldding_sample_from_s101447419_to_19", "old_id": "s101447419"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_od7n = 0\n    list_grs7 = range(N)\n    while idx_od7n < len(list_grs7):\n        i = list_grs7[idx_od7n]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n        idx_od7n = idx_od7n + 1\n    idx_0uqo = 0\n    list_4pw0 = modK\n    while idx_0uqo < len(list_4pw0):\n        key = list_4pw0[idx_0uqo]\n        lenK = len(modK[key])\n        idx_fjn9 = 0\n        list_0gzx = list(enumerate(modK[key]))\n        while idx_fjn9 < len(list_0gzx):\n            i, a = list_0gzx[idx_fjn9]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_fjn9 = idx_fjn9 + 1\n        idx_0uqo = idx_0uqo + 1\n\n    print(count)\n    return 0\nif __name__ == (\"\" + \"__main__\") and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    solve()\n", "id": "StringUnfoldding_sample_from_s975943078_to_20", "old_id": "s975943078"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    idx_lmfs = 0\n    list_guak = range(len(A)-1)\n    while idx_lmfs < len(list_guak):\n        i = list_guak[idx_lmfs]\n        dist.append(A[i+1]-A[i])\n        idx_lmfs = idx_lmfs + 1\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\nif __name__ == ('_' + '_main__') and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    main()\n", "id": "StringUnfoldding_sample_from_s267613210_to_21", "old_id": "s267613210"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\nidx_o0d5 = 0\nlist_l0w6 = range(5)\nwhile idx_o0d5 < len(list_l0w6):\n    i = list_l0w6[idx_o0d5]\n    if str(a[i])[-1] == (\"\" + \"0\") and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    idx_o0d5 = idx_o0d5 + 1\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "StringUnfoldding_sample_from_s575946485_to_22", "old_id": "s575946485"}
{"code": "N = int(input())\nm = []\nline = ('' + '')\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nidx_0s18 = 0\nlist_tzlv = range(N)\nwhile idx_0s18 < len(list_tzlv):\n    i = list_tzlv[idx_0s18]\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n    idx_0s18 = idx_0s18 + 1\nidx_cl50 = 0\nlist_d4th = range(4)\nwhile idx_cl50 < len(list_d4th):\n    i = list_d4th[idx_cl50]\n    idx_d8nw = 0\n    list_621c = range(3)\n    while idx_d8nw < len(list_621c):\n        j = list_621c[idx_d8nw]\n        idx_qli5 = 0\n        list_sz0p = range(10)\n        while idx_qli5 < len(list_sz0p):\n            k = list_sz0p[idx_qli5]\n            line += (' {0}' + '').format(m[i][j][k])\n            idx_qli5 = idx_qli5 + 1\n        print(line)\n        line = ('' + '')\n        idx_d8nw = idx_d8nw + 1\n    if i < 3 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        print(('' + '#')*20)\n    idx_cl50 = idx_cl50 + 1\n", "id": "StringUnfoldding_sample_from_s067092519_to_23", "old_id": "s067092519"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    idx_td56 = 0\n    list_xysv = range(M)\n    while idx_td56 < len(list_xysv):\n        _ = list_xysv[idx_td56]\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n        idx_td56 = idx_td56 + 1\n\n    accum = [[0 for _ in range(N+1)]]\n    idx_2gwx = 0\n    list_9vre = range(N)\n    while idx_2gwx < len(list_9vre):\n        i = list_9vre[idx_2gwx]\n        temp = [0]\n        v = 0\n        idx_dch5 = 0\n        list_8d0v = range(N)\n        while idx_dch5 < len(list_8d0v):\n            j = list_8d0v[idx_dch5]\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n            idx_dch5 = idx_dch5 + 1\n        accum.append(temp)\n        idx_2gwx = idx_2gwx + 1\n    idx_7p8n = 0\n    list_mi3c = range(Q)\n    while idx_7p8n < len(list_mi3c):\n        _ = list_mi3c[idx_7p8n]\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n        idx_7p8n = idx_7p8n + 1\nif __name__ == ('__ma' + 'in__') and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    main()\n", "id": "StringUnfoldding_sample_from_s048491063_to_24", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = (\"abcdef\" + \"ghijklmnopqrstuvwxyz\")\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        print((\"yes\" + \"\"))\n    else:\n        print((\"n\" + \"o\"))\n\n\ndef Yn(b):\n    if b and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        print((\"Ye\" + \"s\"))\n    else:\n        print((\"\" + \"No\"))\n\n\ndef YN(b):\n    if b and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        print((\"YES\" + \"\"))\n    else:\n        print((\"NO\" + \"\"))\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_fk0z = 0\n        list_2ank = range(self.n)\n        while idx_fk0z < len(list_2ank):\n            a = list_2ank[idx_fk0z]\n            S.add(self.find(a))\n            idx_fk0z = idx_fk0z + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_eroz = 0\n    list_8bvc = range(size)\n    while idx_eroz < len(list_8bvc):\n        a = list_8bvc[idx_eroz]\n        if (num >> (size-a-1)) & 1 == 1 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            A[a] = 1\n        else:\n            A[a] = 0\n        idx_eroz = idx_eroz + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_osfq = 0\n    list_yout = range(2, len(A))\n    while idx_osfq < len(list_yout):\n        a = list_yout[idx_osfq]\n        A[a] = A[a-1]*a\n        if (mod > 0) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            A[a] %= mod_\n        idx_osfq = idx_osfq + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=(\"in\" + \"t\")):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_l6ai = 0\n    list_t3q7 = range(2, n+1)\n    while idx_l6ai < len(list_t3q7):\n        a = list_t3q7[idx_l6ai]\n        if A[a] and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            idx_s08f = 0\n            list_x9yt = range(a*2, n+1, a)\n            while idx_s08f < len(list_x9yt):\n                b = list_x9yt[idx_s08f]\n                A[b] = False\n                idx_s08f = idx_s08f + 1\n        idx_l6ai = idx_l6ai + 1\n    if (type == (\"b\" + \"ool\")) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return A\n    B = []\n    idx_d12l = 0\n    list_vyxp = range(n+1)\n    while idx_d12l < len(list_vyxp):\n        a = list_vyxp[idx_d12l]\n        if (A[a]) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            B.append(a)\n        idx_d12l = idx_d12l + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return b\n    else:\n        return c\n\n\ndef join(A, c=(\" \" + \"\")):\n    n = len(A)\n    A = list(map(str, A))\n    s = (\"\" + \"\")\n    idx_pk83 = 0\n    list_aq75 = range(n)\n    while idx_pk83 < len(list_aq75):\n        a = list_aq75[idx_pk83]\n        s += A[a]\n        if (a < n-1) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            s += c\n        idx_pk83 = idx_pk83 + 1\n    return s\n\n\ndef factorize(n, type_=(\"dict\" + \"\")):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        list_.append(n)\n    if type_ == (\"\" + \"dict\") and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        dic = {}\n        idx_d5uw = 0\n        list_dcsg = list_\n        while idx_d5uw < len(list_dcsg):\n            a = list_dcsg[idx_d5uw]\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n            idx_d5uw = idx_d5uw + 1\n        return dic\n    elif type_ == (\"\" + \"list\"):\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_ and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        ret = min_\n    if x > max_ and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_g3cy = 0\n    list_p1qs = range(n)\n    while idx_g3cy < len(list_p1qs):\n        a = list_p1qs[idx_g3cy]\n        S.append(input())\n        idx_g3cy = idx_g3cy + 1\n    S.sort()\n    print((\"\" + \"\").join(S))\n\n\nmain()\n", "id": "StringUnfoldding_sample_from_s977408144_to_25", "old_id": "s977408144"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_gsqu = 0\nlist_7mbd = range(H+2)\nwhile idx_gsqu < len(list_7mbd):\n    i = list_7mbd[idx_gsqu]\n    if i == 0 or i == H+1 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        G.append(('#' + '')*(W+2))\n    else:\n        G.append(('' + '#') + input() + ('' + '#'))\n    idx_gsqu = idx_gsqu + 1\n\nans = 0\nidx_8pad = 0\nlist_4knc = range(W+2)\nwhile idx_8pad < len(list_4knc):\n    sx = list_4knc[idx_8pad]\n    idx_8sqt = 0\n    list_8qa0 = range(H+2)\n    while idx_8sqt < len(list_8qa0):\n        sy = list_8qa0[idx_8sqt]\n        if G[sy][sx] == ('.' + '') and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            dist = [[-float(('' + 'inf')) for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == ('.' + '') and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == ('' + '.') and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == ('' + '.') and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == ('' + '.') and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            idx_l4k3 = 0\n            list_9scw = range(W+2)\n            while idx_l4k3 < len(list_9scw):\n                i = list_9scw[idx_l4k3]\n                idx_wmkh = 0\n                list_7fd9 = range(H+2)\n                while idx_wmkh < len(list_7fd9):\n                    j = list_7fd9[idx_wmkh]\n                    ans = max(ans, dist[j][i])\n                    idx_wmkh = idx_wmkh + 1\n                idx_l4k3 = idx_l4k3 + 1\n        idx_8sqt = idx_8sqt + 1\n    idx_8pad = idx_8pad + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s951169509_to_26", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_g1sm = 0\nlist_eycu = range(N)\nwhile idx_g1sm < len(list_eycu):\n    _ = list_eycu[idx_g1sm]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_g1sm = idx_g1sm + 1\nokz = 0\nidx_ch9t = 0\nlist_25vf = mo\nwhile idx_ch9t < len(list_25vf):\n    i = list_25vf[idx_ch9t]\n    if i[1] == (\"\" + \"JPY\") and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n    idx_ch9t = idx_ch9t + 1\n\nprint(okz)\n", "id": "StringUnfoldding_sample_from_s554393427_to_27", "old_id": "s554393427"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    idx_dp76 = 0\n    list_aof2 = range(n)\n    while idx_dp76 < len(list_aof2):\n        i = list_aof2[idx_dp76]\n        num = getN()\n        num = -num\n        if num >= dp[-1] and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        idx_dp76 = idx_dp76 + 1\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    idx_ndhp = 0\n    list_u730 = range(n)\n    while idx_ndhp < len(list_u730):\n        _ = list_u730[idx_ndhp]\n        solve()\n        idx_ndhp = idx_ndhp + 1\nif __name__ == (\"__m\" + \"ain__\") and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n\n    solve()\n", "id": "StringUnfoldding_sample_from_s344468705_to_28", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_w6v7 = 0\nlist_7sox = range(memTime)\nwhile idx_w6v7 < len(list_7sox):\n    color = list_7sox[idx_w6v7]\n    member = memLate[color]\n    if member // 400 >= 8 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\n    idx_w6v7 = idx_w6v7 + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    minColor = 1\nprint(str(minColor) + (\"\" + \" \") + str(maxColor))\n", "id": "StringUnfoldding_sample_from_s964794058_to_29", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n    idx_b60i = 0\n    list_5m8w = range(max(X, Y) + 1)\n    while idx_b60i < len(list_5m8w):\n        k = list_5m8w[idx_b60i]\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            ans = total\n        idx_b60i = idx_b60i + 1\n\n    print(ans)\nif __name__ == (\"_\" + \"_main__\") and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n    main()\n", "id": "StringUnfoldding_sample_from_s724326345_to_30", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float(('INF' + ''))\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n    idx_c6ve = 0\n    list_dozw = range(1, N + 1)\n    while idx_c6ve < len(list_dozw):\n        i = list_dozw[idx_c6ve]\n        if i in s and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            ans = i\n        idx_c6ve = idx_c6ve + 1\n\n    print(ans)\nif __name__ == ('__main' + '__') and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n    main()\n", "id": "StringUnfoldding_sample_from_s878873709_to_31", "old_id": "s878873709"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_hnw2 = 0\nlist_h3tb = range(N-K)\nwhile idx_hnw2 < len(list_h3tb):\n    i = list_h3tb[idx_hnw2]\n    if score[mae] < score[usiro] and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        print(('Yes' + ''))\n    else:\n        print(('No' + ''))\n    mae += 1\n    usiro += 1\n    idx_hnw2 = idx_hnw2 + 1\n", "id": "StringUnfoldding_sample_from_s182651529_to_32", "old_id": "s182651529"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        print(*inp, end=end)\n\n\nYN = [('' + 'No'), ('Ye' + 's')]\nMOD = 10**9+7\ninf = float(('' + 'inf'))\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = [('' + '1'), ('' + '2'), ('3' + ''), ('' + '4'), ('' + '5'), ('6' + ''), ('7' + ''), ('' + '8'), ('9' + ''), ('' + '10')]\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n    idx_a795 = 0\n    list_eq14 = range(N)\n    while idx_a795 < len(list_eq14):\n        i = list_eq14[idx_a795]\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n        idx_a795 = idx_a795 + 1\n\n    X = input()\n    xi = 0\n    idx_yml8 = 0\n    list_cp86 = range(N)\n    while idx_yml8 < len(list_cp86):\n        i = list_cp86[idx_yml8]\n        if s[i] == X and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            xi = i\n            break\n        idx_yml8 = idx_yml8 + 1\n\n    ans = 0\n    idx_yi4h = 0\n    list_4d8w = range(N)\n    while idx_yi4h < len(list_4d8w):\n        i = list_4d8w[idx_yi4h]\n        if xi < i and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            ans += t[i]\n        idx_yi4h = idx_yi4h + 1\n\n    print(ans)\nif __name__ == ('_' + '_main__') and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    main()\n", "id": "StringUnfoldding_sample_from_s664563518_to_33", "old_id": "s664563518"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nidx_nw7d = 0\nlist_f68h = range(10)\nwhile idx_nw7d < len(list_f68h):\n    i = list_f68h[idx_nw7d]\n    idx_fdov = 0\n    list_z3kt = list(enumerate(map(int, next(X).split())))\n    while idx_fdov < len(list_z3kt):\n        j, c = list_z3kt[idx_fdov]\n        C[i, j] = c\n        idx_fdov = idx_fdov + 1\n    idx_nw7d = idx_nw7d + 1\nA = np.zeros((h, w), dtype=int)\nidx_egas = 0\nlist_29a1 = range(h)\nwhile idx_egas < len(list_29a1):\n    i = list_29a1[idx_egas]\n    idx_qex3 = 0\n    list_ecn3 = list(enumerate(map(int, next(X).split())))\n    while idx_qex3 < len(list_ecn3):\n        j, a = list_ecn3[idx_qex3]\n        A[i, j] = a\n        idx_qex3 = idx_qex3 + 1\n    idx_egas = idx_egas + 1\n\nG = nx.DiGraph(C)\nd = {}\nidx_util = 0\nlist_zeij = range(10)\nwhile idx_util < len(list_zeij):\n    i = list_zeij[idx_util]\n    if i == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight=('weigh' + 't'))\n    idx_util = idx_util + 1\n\ns = 0\nidx_5g2w = 0\nlist_7yiu = chain.from_iterable(A)\nwhile idx_5g2w < len(list_7yiu):\n    a = list_7yiu[idx_5g2w]\n    if a == -1 or a == 1 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        continue\n    s += d[a]\n    idx_5g2w = idx_5g2w + 1\nprint(s)\n", "id": "StringUnfoldding_sample_from_s749244504_to_34", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nidx_1k3z = 0\nlist_qgc0 = range(1, n)\nwhile idx_1k3z < len(list_qgc0):\n    i = list_qgc0[idx_1k3z]\n    if a[i] == (\"C\" + \"\") and a[i-1] == (\"\" + \"A\") and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\n    idx_1k3z = idx_1k3z + 1\nidx_c94n = 0\nlist_ltke = range(k)\nwhile idx_c94n < len(list_ltke):\n    w = list_ltke[idx_c94n]\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n    idx_c94n = idx_c94n + 1\n", "id": "StringUnfoldding_sample_from_s759499751_to_35", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_gpxz = 0\n    list_s9me = range(H)\n    while idx_gpxz < len(list_s9me):\n        _ = list_s9me[idx_gpxz]\n        ret.append(list(map(int, readline().split())))\n        idx_gpxz = idx_gpxz + 1\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={('' + '#'): 1, ('' + '.'): 0}, pad=None):\n    if pad is None and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        ret = []\n        idx_tj3v = 0\n        list_58ph = range(H)\n        while idx_tj3v < len(list_58ph):\n            _ = list_58ph[idx_tj3v]\n            ret.append([replace[s] for s in read()[:-1]])\n            idx_tj3v = idx_tj3v + 1\n\n    else:\n        ret = [[pad] * (W + 2)]\n        idx_agn0 = 0\n        list_evfk = range(H)\n        while idx_agn0 < len(list_evfk):\n            _ = list_evfk[idx_agn0]\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n            idx_agn0 = idx_agn0 + 1\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            continue\n        D[i][j] = c\n        idx_jfkp = 0\n        list_sad4 = product([-2, -1, 0, 1, 2], repeat=2)\n        while idx_jfkp < len(list_sad4):\n            di, dj = list_sad4[idx_jfkp]\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n            idx_jfkp = idx_jfkp + 1\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        continue\n    D[i][j] = c\n    idx_89mq = 0\n    list_byrw = product([-2, -1, 0, 1, 2], repeat=2)\n    while idx_89mq < len(list_byrw):\n        di, dj = list_byrw[idx_89mq]\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n        idx_89mq = idx_89mq + 1\n\nprint(D[ti][tj])\n", "id": "StringUnfoldding_sample_from_s124725275_to_36", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_p740 = 0\nlist_7lcd = range(n)\nwhile idx_p740 < len(list_7lcd):\n    i = list_7lcd[idx_p740]\n    if p[i] != p_copy[i] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        count += 1\n    idx_p740 = idx_p740 + 1\nif count == 0 or count == 2 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    print((\"YE\" + \"S\"))\nelse:\n    print((\"\" + \"NO\"))\n", "id": "StringUnfoldding_sample_from_s763097776_to_37", "old_id": "s763097776"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float((\"in\" + \"f\"))\nidx_fes7 = 0\nlist_cbrt = range(1 << d)\nwhile idx_fes7 < len(list_cbrt):\n    bit = list_cbrt[idx_fes7]\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n    idx_0zvm = 0\n    list_jn3f = range(d)\n    while idx_0zvm < len(list_jn3f):\n        i = list_jn3f[idx_0zvm]\n        if bit & (1 << i) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n        idx_0zvm = idx_0zvm + 1\n    if sum < g and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n    if sum >= g and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        ans = min(ans, count)\n    idx_fes7 = idx_fes7 + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s591424993_to_38", "old_id": "s591424993"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_hvxf = 0\nlist_37b2 = s\nwhile idx_hvxf < len(list_37b2):\n    i = list_37b2[idx_hvxf]\n    if i == (\"\" + \")\") and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        left += 1\n    else:\n        break\n    idx_hvxf = idx_hvxf + 1\n\nleft1 = 0\nright1 = 0\nidx_n3kl = 0\nlist_hb1w = range(left, n)\nwhile idx_n3kl < len(list_hb1w):\n    i = list_hb1w[idx_n3kl]\n    if s[i] == (\"\" + \"(\") and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n    idx_n3kl = idx_n3kl + 1\n\nleft1 += left\nidx_rbeu = 0\nlist_zu2m = range(right1)\nwhile idx_rbeu < len(list_zu2m):\n    i = list_zu2m[idx_rbeu]\n    s += (\"\" + \")\")\n    idx_rbeu = idx_rbeu + 1\nidx_sn4g = 0\nlist_o9ne = range(left1)\nwhile idx_sn4g < len(list_o9ne):\n    i = list_o9ne[idx_sn4g]\n    s = (\"(\" + \"\") + s\n    idx_sn4g = idx_sn4g + 1\n\nprint(s)\n", "id": "StringUnfoldding_sample_from_s952876397_to_39", "old_id": "s952876397"}
{"code": "h, w = map(int, input().split())\nl = []\nidx_awje = 0\nlist_u2ia = range(h)\nwhile idx_awje < len(list_u2ia):\n    _ = list_u2ia[idx_awje]\n    a = list(map(str, input()))\n    l.append(a)\n    idx_awje = idx_awje + 1\n\ntmp = 0\nidx_2jw0 = 0\nlist_y8l9 = range(h)\nwhile idx_2jw0 < len(list_y8l9):\n    i = list_y8l9[idx_2jw0]\n    idx_ig6u = 0\n    list_vz5d = range(w)\n    while idx_ig6u < len(list_vz5d):\n        j = list_vz5d[idx_ig6u]\n        if l[i][j] == (\"#\" + \"\") and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            if j < tmp:\n                print((\"Impo\" + \"ssible\"))\n                exit()\n            else:\n                tmp = j\n        idx_ig6u = idx_ig6u + 1\n    idx_2jw0 = idx_2jw0 + 1\n\n\nprint((\"Pos\" + \"sible\"))\n", "id": "StringUnfoldding_sample_from_s331817031_to_40", "old_id": "s331817031"}
