{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    idx_rmoa = 0\n    list_kw32 = V.get(i, [])\n    while idx_rmoa < len(list_kw32):\n        v, w = list_kw32[idx_rmoa]\n        if not (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        else:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        dfs(v)\n        idx_rmoa = idx_rmoa + 1\n    return True\n\n\nif __name__ == ('__ma' + 'in__'):\n    n = int(input())\n    V = {}\n    color = {}\n    idx_lp5g = 0\n    list_azlq = range(1, n)\n    while idx_lp5g < len(list_azlq):\n        i = list_azlq[idx_lp5g]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_lp5g = idx_lp5g + 1\n    idx_yrmw = 0\n    list_be4l = range(1, n+1)\n    while idx_yrmw < len(list_be4l):\n        i = list_be4l[idx_yrmw]\n        color[i] = -1\n        idx_yrmw = idx_yrmw + 1\n\n    while True:\n        i = 0\n        idx_u6dj = 0\n        list_1f8d = range(1, n+1)\n        while idx_u6dj < len(list_1f8d):\n            j = list_1f8d[idx_u6dj]\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n            idx_u6dj = idx_u6dj + 1\n        if i == 0:\n            idx_7jdl = 0\n            list_w7fk = range(1, n+1)\n            while idx_7jdl < len(list_w7fk):\n                j = list_w7fk[idx_7jdl]\n                print(color[j])\n                idx_7jdl = idx_7jdl + 1\n            break\n        else:\n            if not dfs(i):\n                print(('' + 'No'))\n                break\n", "id": "StringUnfoldding_sample_from_s908812767_to_0", "old_id": "s908812767"}
{"code": "s = input()\nif not len(s) < 26:\n    idx_7g8z = 0\n    list_whap = reversed(range(1, 26))\n    while idx_7g8z < len(list_whap):\n        i = list_whap[idx_7g8z]\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            idx_836w = 0\n            list_0pg9 = range(26)\n            while idx_836w < len(list_0pg9):\n                j = list_0pg9[idx_836w]\n                c = chr(ord((\"\" + \"a\"))+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_836w = idx_836w + 1\n        idx_7g8z = idx_7g8z + 1\n    print(-1)\nelse:\n    idx_8tf3 = 0\n    list_uwbs = range(26)\n    while idx_8tf3 < len(list_uwbs):\n        i = list_uwbs[idx_8tf3]\n        c = chr(ord((\"a\" + \"\"))+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_8tf3 = idx_8tf3 + 1\n", "id": "StringUnfoldding_sample_from_s504709360_to_1", "old_id": "s504709360"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [(\"3\" + \"\"), (\"\" + \"5\"), (\"\" + \"7\")]\nshichigo = [[] for _ in range(len(strn))]\nidx_79ar = 0\nlist_d8in = range(len(strn))\nwhile idx_79ar < len(list_d8in):\n    i = list_d8in[idx_79ar]\n    if not i == 0:\n        idx_jnqe = 0\n        list_vtre = shichigo[i-1]\n        while idx_jnqe < len(list_vtre):\n            j = list_vtre[idx_jnqe]\n            idx_2jrw = 0\n            list_ljac = shichigolist\n            while idx_2jrw < len(list_ljac):\n                k = list_ljac[idx_2jrw]\n                shichigo[i].append(j+k)\n                idx_2jrw = idx_2jrw + 1\n            idx_jnqe = idx_jnqe + 1\n    else:\n        idx_kqly = 0\n        list_74dm = shichigolist\n        while idx_kqly < len(list_74dm):\n            j = list_74dm[idx_kqly]\n            shichigo[i].append(j)\n            idx_kqly = idx_kqly + 1\n    idx_79ar = idx_79ar + 1\ntarget = len(strn)-1\nidx_obhk = 0\nlist_7jky = range(len(strn))\nwhile idx_obhk < len(list_7jky):\n    i = list_7jky[idx_obhk]\n    idx_j1o3 = 0\n    list_bc1l = shichigo[i][:]\n    while idx_j1o3 < len(list_bc1l):\n        j = list_bc1l[idx_j1o3]\n        if not i == target:\n            if j.count((\"\" + \"3\")) == 0 or j.count((\"5\" + \"\")) == 0 or j.count((\"\" + \"7\")) == 0:\n                shichigo[i].remove(j)\n        else:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count((\"\" + \"3\")) == 0 or j.count((\"\" + \"5\")) == 0 or j.count((\"7\" + \"\")) == 0:\n                shichigo[target].remove(j)\n        idx_j1o3 = idx_j1o3 + 1\n    idx_obhk = idx_obhk + 1\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "StringUnfoldding_sample_from_s949655009_to_2", "old_id": "s949655009"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_0xyh = 0\n    list_as6r = range(0, n)\n    while idx_0xyh < len(list_as6r):\n        i = list_as6r[idx_0xyh]\n        idx_sqoz = 0\n        list_f5r7 = range(n-1, i, -1)\n        while idx_sqoz < len(list_f5r7):\n            j = list_f5r7[idx_sqoz]\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n            idx_sqoz = idx_sqoz + 1\n        idx_0xyh = idx_0xyh + 1\n\n    print((\" \" + \"\").join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_vjdr = 0\n    list_2d34 = range(0, n)\n    while idx_vjdr < len(list_2d34):\n        i = list_2d34[idx_vjdr]\n        mini = i\n        idx_xyiq = 0\n        list_a9vi = range(i, n)\n        while idx_xyiq < len(list_a9vi):\n            j = list_a9vi[idx_xyiq]\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n            idx_xyiq = idx_xyiq + 1\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_vjdr = idx_vjdr + 1\n\n    print((\"\" + \" \").join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split((\"\" + \" \"))\ncards2 = list(cards)\nbubbleSort(cards)\nprint((\"Stabl\" + \"e\"))\nselectionSort(cards2)\nif not (\" \" + \"\").join(map(str, cards2)) == (\" \" + \"\").join(map(str, cards)):\n    print((\"Not stable\" + \"\"))\nelse:\n    print((\"S\" + \"table\"))\n", "id": "StringUnfoldding_sample_from_s875904659_to_3", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=(\"\" + \" \"), vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    idx_2p9v = 0\n    list_lz3h = range(len(li))\n    while idx_2p9v < len(list_lz3h):\n        i = list_lz3h[idx_2p9v]\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_4sk1 = 0\n        list_jc9z = sub_list\n        while idx_4sk1 < len(list_jc9z):\n            sub = list_jc9z[idx_4sk1]\n            sub.appendleft(li[i])\n            idx_4sk1 = idx_4sk1 + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_2p9v = idx_2p9v + 1\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=(\"\" + \"\")):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_gts9 = 0\n    list_kh01 = range(len(li)-1, -1, -1)\n    while idx_gts9 < len(list_kh01):\n        i = list_kh01[idx_gts9]\n        n += li[i] * base\n        base *= 10\n        idx_gts9 = idx_gts9 + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_kg5x = 0\n    list_2v89 = range(len(li))\n    while idx_kg5x < len(list_2v89):\n        i = list_2v89[idx_kg5x]\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        idx_sema = 0\n        list_v0p1 = range(i+1, len(li))\n        while idx_sema < len(list_v0p1):\n            j = list_v0p1[idx_sema]\n            if li[j] % li[i] == 0:\n                li[j] = -1\n            idx_sema = idx_sema + 1\n        idx_kg5x = idx_kg5x + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_v0se = 0\n    list_g9vx = range(0, (1 << (n+1)))\n    while idx_v0se < len(list_g9vx):\n        bit = list_g9vx[idx_v0se]\n        ss = set()\n        idx_mgrn = 0\n        list_o0sy = range(0, n)\n        while idx_mgrn < len(list_o0sy):\n            i = list_o0sy[idx_mgrn]\n            if (bit & (1 << i)):\n                ss.add(li[i])\n            idx_mgrn = idx_mgrn + 1\n        s.append(ss)\n        idx_v0se = idx_v0se + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif not n == len(set(A)):\n    print(('' + 'NO'))\nelse:\n    print(('' + 'YES'))\n", "id": "StringUnfoldding_sample_from_s137613418_to_4", "old_id": "s137613418"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_f20t = 0\nlist_6tqm = range(n)\nwhile idx_f20t < len(list_6tqm):\n    i = list_6tqm[idx_f20t]\n    st = ('' + '').join(sorted(list(input())))\n    lst.append(st)\n    idx_f20t = idx_f20t + 1\nlst = sorted(lst)\nlst += [('' + 'end')]\npre = ('' + '')\ntmp_cnt = 0\ncnt = 0\nidx_3npz = 0\nlist_msd4 = lst\nwhile idx_3npz < len(list_msd4):\n    i = list_msd4[idx_3npz]\n    if not i == pre:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    else:\n        tmp_cnt += 1\n    pre = i\n    idx_3npz = idx_3npz + 1\nprint(cnt)\n", "id": "StringUnfoldding_sample_from_s430322735_to_5", "old_id": "s430322735"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_cjak = 0\nlist_fnip = range(len(S))\nwhile idx_cjak < len(list_fnip):\n    i = list_fnip[idx_cjak]\n    if not S[i] == (\"\" + \"A\") or S[i] == (\"C\" + \"\") or S[i] == (\"\" + \"G\") or S[i] == (\"\" + \"T\"):\n        if count > record:\n            record = count\n        count = 0\n    else:\n        count += 1\n    idx_cjak = idx_cjak + 1\nif count > record:\n    record = count\n\nprint(record)\n", "id": "StringUnfoldding_sample_from_s993625131_to_6", "old_id": "s993625131"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_402n = 0\n    list_3ftl = range(n)\n    while idx_402n < len(list_3ftl):\n        _ = list_3ftl[idx_402n]\n        s = [_s for _s in sorted(input().strip())]\n        s = ('' + '').join(s)\n        if not s in sdic:\n            sdic[s] = 1\n        else:\n            sdic[s] += 1\n        idx_402n = idx_402n + 1\n    ans = 0\n    idx_l6ja = 0\n    list_30bh = list(sdic.items())\n    while idx_l6ja < len(list_30bh):\n        k, v = list_30bh[idx_l6ja]\n        ans += v*(v-1)//2\n        idx_l6ja = idx_l6ja + 1\n    print(ans)\n\n\nif __name__ == ('__m' + 'ain__'):\n    main()\n", "id": "StringUnfoldding_sample_from_s733189960_to_7", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_fqar = 0\nlist_674b = range(n)\nwhile idx_fqar < len(list_674b):\n    _ = list_674b[idx_fqar]\n    x, u = list(input().split())\n    if not u == (\"\" + \"BTC\"):\n        res += int(x)\n    else:\n        res += float(x) * 380000\n    idx_fqar = idx_fqar + 1\nprint(res)\n", "id": "StringUnfoldding_sample_from_s238775098_to_8", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_vn57 = 0\n    list_w1i7 = range(n//2)\n    while idx_vn57 < len(list_w1i7):\n        i = list_w1i7[idx_vn57]\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n        idx_vn57 = idx_vn57 + 1\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if not ce.most_common()[0][0] != co.most_common()[0][0]:\n        if len(ce) == 1 and len(co) == 1:\n            ans = n-ce.most_common()[0][1]\n        elif len(ce) == 1:\n            ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n        elif len(co) == 1:\n            ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n        else:\n            ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                      [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    else:\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    print(ans)\n\n\nif __name__ == (\"__\" + \"main__\"):\n    main()\n", "id": "StringUnfoldding_sample_from_s101447419_to_9", "old_id": "s101447419"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_wtbq = 0\n    list_8bz5 = range(N)\n    while idx_wtbq < len(list_8bz5):\n        i = list_8bz5[idx_wtbq]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if not sum_A[i+1] not in modK:\n            modK[sum_A[i+1]].append(i+1)\n        else:\n            modK[sum_A[i+1]] = [i + 1]\n        idx_wtbq = idx_wtbq + 1\n    idx_aq0g = 0\n    list_qodh = modK\n    while idx_aq0g < len(list_qodh):\n        key = list_qodh[idx_aq0g]\n        lenK = len(modK[key])\n        idx_3gm8 = 0\n        list_82ek = list(enumerate(modK[key]))\n        while idx_3gm8 < len(list_82ek):\n            i, a = list_82ek[idx_3gm8]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_3gm8 = idx_3gm8 + 1\n        idx_aq0g = idx_aq0g + 1\n\n    print(count)\n    return 0\n\n\nif __name__ == (\"__ma\" + \"in__\"):\n    solve()\n", "id": "StringUnfoldding_sample_from_s975943078_to_10", "old_id": "s975943078"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\nidx_3wpf = 0\nlist_ei9f = range(5)\nwhile idx_3wpf < len(list_ei9f):\n    i = list_ei9f[idx_3wpf]\n    if not str(a[i])[-1] == (\"0\" + \"\"):\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    else:\n        dic.update({i: 0})\n    idx_3wpf = idx_3wpf + 1\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "StringUnfoldding_sample_from_s575946485_to_11", "old_id": "s575946485"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = (\"abcdefghijkl\" + \"mnopqrstuvwxyz\")\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if not b:\n        print((\"\" + \"no\"))\n    else:\n        print((\"y\" + \"es\"))\n\n\ndef Yn(b):\n    if not b:\n        print((\"N\" + \"o\"))\n    else:\n        print((\"Y\" + \"es\"))\n\n\ndef YN(b):\n    if not b:\n        print((\"\" + \"NO\"))\n    else:\n        print((\"YES\" + \"\"))\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if not self.rank[x] < self.rank[y]:\n            if self.rank[y] < self.rank[x]:\n                self.P[y] = x\n            else:\n                self.P[x] = y\n                self.rank[y] += 1\n        else:\n            self.P[x] = y\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_niv4 = 0\n        list_qloy = range(self.n)\n        while idx_niv4 < len(list_qloy):\n            a = list_qloy[idx_niv4]\n            S.add(self.find(a))\n            idx_niv4 = idx_niv4 + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if not now == a:\n        return False\n    else:\n        return True\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_0yaf = 0\n    list_c7lz = range(size)\n    while idx_0yaf < len(list_c7lz):\n        a = list_c7lz[idx_0yaf]\n        if not (num >> (size-a-1)) & 1 == 1:\n            A[a] = 0\n        else:\n            A[a] = 1\n        idx_0yaf = idx_0yaf + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_jsfo = 0\n    list_smf1 = range(2, len(A))\n    while idx_jsfo < len(list_smf1):\n        a = list_smf1[idx_jsfo]\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n        idx_jsfo = idx_jsfo + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if not (num >= (1 << size)):\n        return num\n    else:\n        return False\n\n\ndef get_primes(n, type=(\"\" + \"int\")):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_hc7o = 0\n    list_vrn4 = range(2, n+1)\n    while idx_hc7o < len(list_vrn4):\n        a = list_vrn4[idx_hc7o]\n        if A[a]:\n            idx_40yo = 0\n            list_0wm5 = range(a*2, n+1, a)\n            while idx_40yo < len(list_0wm5):\n                b = list_0wm5[idx_40yo]\n                A[b] = False\n                idx_40yo = idx_40yo + 1\n        idx_hc7o = idx_hc7o + 1\n    if (type == (\"bo\" + \"ol\")):\n        return A\n    B = []\n    idx_l1eu = 0\n    list_w1sz = range(n+1)\n    while idx_l1eu < len(list_w1sz):\n        a = list_w1sz[idx_l1eu]\n        if (A[a]):\n            B.append(a)\n        idx_l1eu = idx_l1eu + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if not a:\n        return c\n    else:\n        return b\n\n\ndef join(A, c=(\" \" + \"\")):\n    n = len(A)\n    A = list(map(str, A))\n    s = (\"\" + \"\")\n    idx_305c = 0\n    list_iyzr = range(n)\n    while idx_305c < len(list_iyzr):\n        a = list_iyzr[idx_305c]\n        s += A[a]\n        if (a < n-1):\n            s += c\n        idx_305c = idx_305c + 1\n    return s\n\n\ndef factorize(n, type_=(\"\" + \"dict\")):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if not type_ == (\"\" + \"dict\"):\n        if type_ == (\"li\" + \"st\"):\n            return list_\n        else:\n            return None\n    else:\n        dic = {}\n        idx_qcah = 0\n        list_y2gf = list_\n        while idx_qcah < len(list_y2gf):\n            a = list_y2gf[idx_qcah]\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n            idx_qcah = idx_qcah + 1\n        return dic\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_sd60 = 0\n    list_oi1k = range(n)\n    while idx_sd60 < len(list_oi1k):\n        a = list_oi1k[idx_sd60]\n        S.append(input())\n        idx_sd60 = idx_sd60 + 1\n    S.sort()\n    print((\"\" + \"\").join(S))\n\n\nmain()\n", "id": "StringUnfoldding_sample_from_s977408144_to_12", "old_id": "s977408144"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_2bcv = 0\nlist_ywbk = range(H+2)\nwhile idx_2bcv < len(list_ywbk):\n    i = list_ywbk[idx_2bcv]\n    if not i == 0 or i == H+1:\n        G.append(('' + '#') + input() + ('' + '#'))\n    else:\n        G.append(('#' + '')*(W+2))\n    idx_2bcv = idx_2bcv + 1\n\nans = 0\nidx_lrfa = 0\nlist_9rju = range(W+2)\nwhile idx_lrfa < len(list_9rju):\n    sx = list_9rju[idx_lrfa]\n    idx_c8ef = 0\n    list_kmha = range(H+2)\n    while idx_c8ef < len(list_kmha):\n        sy = list_kmha[idx_c8ef]\n        if G[sy][sx] == ('' + '.'):\n            dist = [[-float(('in' + 'f')) for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == ('' + '.') and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == ('' + '.') and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == ('.' + '') and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == ('' + '.') and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            idx_yzb2 = 0\n            list_gvqw = range(W+2)\n            while idx_yzb2 < len(list_gvqw):\n                i = list_gvqw[idx_yzb2]\n                idx_ej56 = 0\n                list_prcd = range(H+2)\n                while idx_ej56 < len(list_prcd):\n                    j = list_prcd[idx_ej56]\n                    ans = max(ans, dist[j][i])\n                    idx_ej56 = idx_ej56 + 1\n                idx_yzb2 = idx_yzb2 + 1\n        idx_c8ef = idx_c8ef + 1\n    idx_lrfa = idx_lrfa + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_s951169509_to_13", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_v9wa = 0\nlist_54ce = range(N)\nwhile idx_v9wa < len(list_54ce):\n    _ = list_54ce[idx_v9wa]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_v9wa = idx_v9wa + 1\nokz = 0\nidx_05hn = 0\nlist_xgc7 = mo\nwhile idx_05hn < len(list_xgc7):\n    i = list_xgc7[idx_05hn]\n    if not i[1] == (\"\" + \"JPY\"):\n        okz += i[0]*380000\n    else:\n        okz += i[0]\n    idx_05hn = idx_05hn + 1\n\nprint(okz)\n", "id": "StringUnfoldding_sample_from_s554393427_to_14", "old_id": "s554393427"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    idx_melo = 0\n    list_kvba = range(n)\n    while idx_melo < len(list_kvba):\n        i = list_kvba[idx_melo]\n        num = getN()\n        num = -num\n        if not num >= dp[-1]:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        else:\n            dp.append(num)\n        idx_melo = idx_melo + 1\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    idx_6a4v = 0\n    list_qd62 = range(n)\n    while idx_6a4v < len(list_qd62):\n        _ = list_qd62[idx_6a4v]\n        solve()\n        idx_6a4v = idx_6a4v + 1\n\n\nif __name__ == (\"__mai\" + \"n__\"):\n\n    solve()\n", "id": "StringUnfoldding_sample_from_s344468705_to_15", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_vt6e = 0\nlist_1sej = range(memTime)\nwhile idx_vt6e < len(list_1sej):\n    color = list_1sej[idx_vt6e]\n    member = memLate[color]\n    if not member // 400 >= 8:\n        if ((member // 400) in colorList) == False:\n            colorList.append(member // 400)\n    else:\n        highLate += 1\n    idx_vt6e = idx_vt6e + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + (\" \" + \"\") + str(maxColor))\n", "id": "StringUnfoldding_sample_from_s964794058_to_16", "old_id": "s964794058"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_mvl1 = 0\nlist_rs9o = range(N-K)\nwhile idx_mvl1 < len(list_rs9o):\n    i = list_rs9o[idx_mvl1]\n    if not score[mae] < score[usiro]:\n        print(('No' + ''))\n    else:\n        print(('' + 'Yes'))\n    mae += 1\n    usiro += 1\n    idx_mvl1 = idx_mvl1 + 1\n", "id": "StringUnfoldding_sample_from_s182651529_to_17", "old_id": "s182651529"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nidx_h3tr = 0\nlist_fslc = range(1, n)\nwhile idx_h3tr < len(list_fslc):\n    i = list_fslc[idx_h3tr]\n    if not a[i] == (\"\" + \"C\") and a[i-1] == (\"\" + \"A\"):\n        c[i] = c[i-1]\n    else:\n        c[i] = c[i-1]+1\n    idx_h3tr = idx_h3tr + 1\nidx_nvkf = 0\nlist_co5x = range(k)\nwhile idx_nvkf < len(list_co5x):\n    w = list_co5x[idx_nvkf]\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n    idx_nvkf = idx_nvkf + 1\n", "id": "StringUnfoldding_sample_from_s759499751_to_18", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_pfhq = 0\n    list_tu4e = range(H)\n    while idx_pfhq < len(list_tu4e):\n        _ = list_tu4e[idx_pfhq]\n        ret.append(list(map(int, readline().split())))\n        idx_pfhq = idx_pfhq + 1\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={('' + '#'): 1, ('' + '.'): 0}, pad=None):\n    if not pad is None:\n        ret = [[pad] * (W + 2)]\n        idx_i7k1 = 0\n        list_nw3g = range(H)\n        while idx_i7k1 < len(list_nw3g):\n            _ = list_nw3g[idx_i7k1]\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n            idx_i7k1 = idx_i7k1 + 1\n        ret.append([pad] * (W + 2))\n    else:\n        ret = []\n        idx_aht5 = 0\n        list_vybx = range(H)\n        while idx_aht5 < len(list_vybx):\n            _ = list_vybx[idx_aht5]\n            ret.append([replace[s] for s in read()[:-1]])\n            idx_aht5 = idx_aht5 + 1\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        idx_z74g = 0\n        list_j0xa = product([-2, -1, 0, 1, 2], repeat=2)\n        while idx_z74g < len(list_j0xa):\n            di, dj = list_j0xa[idx_z74g]\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if not (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c + 1\n            else:\n                nc = c\n            heappush(que, (nc, ni, nj))\n            idx_z74g = idx_z74g + 1\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    idx_pumk = 0\n    list_x4ol = product([-2, -1, 0, 1, 2], repeat=2)\n    while idx_pumk < len(list_x4ol):\n        di, dj = list_x4ol[idx_pumk]\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if not (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.append((c + 1, ni, nj))\n        else:\n            que.appendleft((c, ni, nj))\n        idx_pumk = idx_pumk + 1\n\nprint(D[ti][tj])\n", "id": "StringUnfoldding_sample_from_s124725275_to_19", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_kisv = 0\nlist_9icg = range(n)\nwhile idx_kisv < len(list_9icg):\n    i = list_9icg[idx_kisv]\n    if p[i] != p_copy[i]:\n        count += 1\n    idx_kisv = idx_kisv + 1\nif not count == 0 or count == 2:\n    print((\"\" + \"NO\"))\nelse:\n    print((\"Y\" + \"ES\"))\n", "id": "StringUnfoldding_sample_from_s763097776_to_20", "old_id": "s763097776"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_sb8u = 0\nlist_ej4z = s\nwhile idx_sb8u < len(list_ej4z):\n    i = list_ej4z[idx_sb8u]\n    if not i == (\"\" + \")\"):\n        break\n    else:\n        left += 1\n    idx_sb8u = idx_sb8u + 1\n\nleft1 = 0\nright1 = 0\nidx_jns9 = 0\nlist_2g3n = range(left, n)\nwhile idx_jns9 < len(list_2g3n):\n    i = list_2g3n[idx_jns9]\n    if not s[i] == (\"\" + \"(\"):\n        if right1 > 0:\n            right1 -= 1\n        else:\n            left1 += 1\n    else:\n        right1 += 1\n    idx_jns9 = idx_jns9 + 1\n\nleft1 += left\nidx_b7fd = 0\nlist_mygr = range(right1)\nwhile idx_b7fd < len(list_mygr):\n    i = list_mygr[idx_b7fd]\n    s += (\"\" + \")\")\n    idx_b7fd = idx_b7fd + 1\nidx_zn7y = 0\nlist_j960 = range(left1)\nwhile idx_zn7y < len(list_j960):\n    i = list_j960[idx_zn7y]\n    s = (\"\" + \"(\") + s\n    idx_zn7y = idx_zn7y + 1\n\nprint(s)\n", "id": "StringUnfoldding_sample_from_s952876397_to_21", "old_id": "s952876397"}
