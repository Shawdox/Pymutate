{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nidx_kpa3 = 0\nlist_u7ys = s\nwhile idx_kpa3 < len(list_u7ys):\n    letra = list_u7ys[idx_kpa3]\n    if not letra in freqs:\n        freqs[letra] = 1\n    else:\n        freqs[letra] = freqs[letra] + 1\n    idx_kpa3 = idx_kpa3 + 1\nidx_jcfs = 0\nlist_amo7 = t\nwhile idx_jcfs < len(list_amo7):\n    letra = list_amo7[idx_jcfs]\n    if not letra in freqt:\n        freqt[letra] = 1\n    else:\n        freqt[letra] = freqt[letra] + 1\n    idx_jcfs = idx_jcfs + 1\nidx_u6ec = 0\nlist_netg = freqs.keys()\nwhile idx_u6ec < len(list_netg):\n    letra = list_netg[idx_u6ec]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay = yay + 1\n        freqs[letra] = freqs[letra] - 1\n        freqt[letra] = freqt[letra] - 1\n    idx_u6ec = idx_u6ec + 1\nidx_j90h = 0\nlist_a02l = freqs.keys()\nwhile idx_j90h < len(list_a02l):\n    letra = list_a02l[idx_j90h]\n    while (freqs[letra] > 0):\n        if not letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            if letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n                whoops = whoops + 1\n                freqs[letra] = freqs[letra] - 1\n                freqt[letra.lower()] = freqt[letra.lower()] - 1\n            else:\n                break\n        else:\n            whoops = whoops + 1\n            freqs[letra] = freqs[letra] - 1\n            freqt[letra.upper()] = freqt[letra.upper()] - 1\n    idx_j90h = idx_j90h + 1\nprint(yay, whoops)\n", "id": "AugAssign2Assign_sample_from_codeforces_518_B_to_0", "old_id": "codeforces_518_B"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nidx_5r8s = 0\nlist_su8z = record_of_movements\nwhile idx_5r8s < len(list_su8z):\n    move = list_su8z[idx_5r8s]\n    temp = (x, y)\n    x = x + d_movement[move][0]\n    y = y + d_movement[move][1]\n    if not (x, y) not in d:\n        bug = True\n    else:\n        idx_tzki = 0\n        list_syjk = d_movement\n        while idx_tzki < len(list_syjk):\n            step = list_syjk[idx_tzki]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_tzki = idx_tzki + 1\n    if bug:\n        break\n    d[x, y] = ''\n    idx_5r8s = idx_5r8s + 1\nif not bug:\n    print('OK')\nelse:\n    print('BUG')\n", "id": "AugAssign2Assign_sample_from_codeforces_8_B_to_1", "old_id": "codeforces_8_B"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif not K >= 15:\n    if 2 ** K >= N:\n        aaaa = True\nelse:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p = p + 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p = p + 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_wrkz = 0\n    list_4tba = range(N)\n    while idx_wrkz < len(list_4tba):\n        i = list_4tba[idx_wrkz]\n        if not u[pointer1 + i] > u[pointer2 + i]:\n            if u[pointer1 + i] < u[pointer2 + i]:\n                return False\n        else:\n            return True\n        idx_wrkz = idx_wrkz + 1\n    return False\n\n\nS = get_last_dict(S)\nif not K == 1:\n    count = 0\n    idx_d9p3 = 0\n    list_1567 = S\n    while idx_d9p3 < len(list_1567):\n        c = list_1567[idx_d9p3]\n        if c == S[0]:\n            count = count + 1\n        else:\n            break\n        idx_d9p3 = idx_d9p3 + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\nelse:\n    print(S)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC037_E_to_2", "old_id": "atcoder_AGC037_E"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if not s[i] == \"A\":\n            if s[i] == \"B\":\n                if i < len(s) - 1:\n                    if s[i + 1] == \"C\":\n                        t = t + \"D\"\n                        i = i + 2\n                    else:\n                        t = t + \"X\"\n                        i = i + 1\n                else:\n                    t = t + \"X\"\n                    i = i + 1\n            else:\n                t = t + \"X\"\n                i = i + 1\n        else:\n            t = t + \"A\"\n            i = i + 1\n    total = 0\n    numA = 0\n    idx_120w = 0\n    list_pdh4 = range(len(t))\n    while idx_120w < len(list_pdh4):\n        i = list_pdh4[idx_120w]\n        if not t[i] == \"X\":\n            if t[i] == \"A\":\n                numA = numA + 1\n            else:\n                total = total + numA\n        else:\n            numA = 0\n        idx_120w = idx_120w + 1\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC034_B_to_3", "old_id": "atcoder_AGC034_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_sueq = 0\nlist_d08c = range(firstline)\nwhile idx_sueq < len(list_d08c):\n    x = list_d08c[idx_sueq]\n    A, G = list(map(int, input().split()))\n    if not total + A <= 500:\n        total = total - G\n        memory.append(\"G\")\n    else:\n        total = total + A\n        memory.append(\"A\")\n    idx_sueq = idx_sueq + 1\nprint(\"\".join(memory))\n", "id": "AugAssign2Assign_sample_from_codeforces_282_B_to_4", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_r0c8 = 0\nlist_fhal = range(M)\nwhile idx_r0c8 < len(list_fhal):\n    _ = list_fhal[idx_r0c8]\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if not w_x >= 1 and r_x >= 1:\n        if w_x == 0:\n            balls[x - 1][1] = balls[x - 1][1] - 1\n            balls[y - 1][1] = balls[y - 1][1] + 1\n        else:\n            balls[x - 1][0] = balls[x - 1][0] - 1\n            balls[y - 1][0] = balls[y - 1][0] + 1\n    else:\n        balls[x - 1][0] = balls[x - 1][0] - 1\n        balls[y - 1][1] = balls[y - 1][1] + 1\n    idx_r0c8 = idx_r0c8 + 1\nans = 0\nidx_knbq = 0\nlist_8d0v = range(N)\nwhile idx_knbq < len(list_8d0v):\n    i = list_8d0v[idx_knbq]\n    if balls[i][1]:\n        ans = ans + 1\n    idx_knbq = idx_knbq + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC002_B_to_5", "old_id": "atcoder_AGC002_B"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nidx_no37 = 0\nlist_o7b0 = range(x)\nwhile idx_no37 < len(list_o7b0):\n    i = list_o7b0[idx_no37]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if not d > 9:\n        s = s + str(d)\n        c = 0\n    else:\n        s = s + str(d)[1]\n        c = 1\n    idx_no37 = idx_no37 + 1\nif c == 1:\n    s = s + '1'\nprint(int(s[:: - 1]))\n", "id": "AugAssign2Assign_sample_from_codeforces_171_A_to_6", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nidx_74fl = 0\nlist_k5o0 = range(N + 1)\nwhile idx_74fl < len(list_k5o0):\n    i = list_k5o0[idx_74fl]\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind = ind + 1\n    Hash[ne] = ind\n    x = ne\n    idx_74fl = idx_74fl + 1\nif not flag == True:\n    print(path[K - 1])\nelse:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC167_D_to_7", "old_id": "atcoder_ABC167_D"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_e4gc = 0\nlist_xv4m = s\nwhile idx_e4gc < len(list_xv4m):\n    x = list_xv4m[idx_e4gc]\n    if not x == 'g':\n        if x == 'p':\n            if num_g - num_p > 0:\n                score = score\n                num_p = num_p + 1\n            else:\n                score = score - 1\n                num_g = num_g + 1\n    else:\n        if num_g - num_p > 0:\n            score = score + 1\n            num_p = num_p + 1\n        else:\n            score = score\n            num_g = num_g + 1\n    idx_e4gc = idx_e4gc + 1\nprint(score)\n", "id": "AugAssign2Assign_sample_from_atcoder_ARC062_B_to_8", "old_id": "atcoder_ARC062_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nidx_zb62 = 0\nlist_scuo = range(1, n)\nwhile idx_zb62 < len(list_scuo):\n    i = list_scuo[idx_zb62]\n    if not l[i] == l[i - 1]:\n        if high > maximum:\n            maximum = high\n        high = 1\n    else:\n        tower = tower - 1\n        high = high + 1\n    idx_zb62 = idx_zb62 + 1\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "id": "AugAssign2Assign_sample_from_codeforces_37_A_to_9", "old_id": "codeforces_37_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_rfja = 0\nlist_t3ny = range(M)\nwhile idx_rfja < len(list_t3ny):\n    _ = list_t3ny[idx_rfja]\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] = degs[a - 1] + 1\n    degs[b - 1] = degs[b - 1] + 1\n    idx_rfja = idx_rfja + 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\nQ = []\nidx_tjla = 0\nlist_p6uf = list(enumerate(degs))\nwhile idx_tjla < len(list_p6uf):\n    i, d = list_p6uf[idx_tjla]\n    Q.append((d, i))\n    idx_tjla = idx_tjla + 1\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    idx_5gqv = 0\n    list_7mdr = list(enumerate(edges[u]))\n    while idx_5gqv < len(list_7mdr):\n        i, v = list_7mdr[idx_5gqv]\n        edges[v].remove(u)\n        if not parity[u] != 0 and i == 0:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        else:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        degs[v] = degs[v] - 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_5gqv = idx_5gqv + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC035_B_to_10", "old_id": "atcoder_AGC035_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_9m4e = 0\nlist_trxo = s\nwhile idx_9m4e < len(list_trxo):\n    i = list_trxo[idx_9m4e]\n    if not i in dt:\n        dt[i] = 1\n    else:\n        dt[i] = dt[i] + 1\n    idx_9m4e = idx_9m4e + 1\ncnt = 0\nx = True\nidx_0jgv = 0\nlist_9ryi = list(dt.items())\nwhile idx_0jgv < len(list_9ryi):\n    key, value = list_9ryi[idx_0jgv]\n    if not value % 2 != 0 and cnt < 1:\n        if value % 2 != 0 and cnt >= 1:\n            x = False\n            break\n    else:\n        cnt = cnt + 1\n    idx_0jgv = idx_0jgv + 1\nif not x:\n    if not x and len(s) % 2 == 0:\n        print(\"Second\")\n    elif not x and len(s) % 2 != 0:\n        print(\"First\")\nelse:\n    print(\"First\")\n", "id": "AugAssign2Assign_sample_from_codeforces_276_B_to_11", "old_id": "codeforces_276_B"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nidx_yfri = 0\nlist_2xtb = range(2 ** D)\nwhile idx_yfri < len(list_2xtb):\n    i = list_2xtb[idx_yfri]\n    score = 0\n    problem = 0\n    idx_ja1k = 0\n    list_htjd = range(D)\n    while idx_ja1k < len(list_htjd):\n        j = list_htjd[idx_ja1k]\n        if (i >> j) & 1:\n            score = score + 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem = problem + PC[j][0]\n        idx_ja1k = idx_ja1k + 1\n    if score > G:\n        continue\n    left = G - score\n    idx_4i5l = 0\n    list_pfmr = range(D)\n    while idx_4i5l < len(list_pfmr):\n        j = list_pfmr[idx_4i5l]\n        if (i >> j) & 1:\n            continue\n        if not left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        else:\n            pass\n        idx_4i5l = idx_4i5l + 1\n    idx_yfri = idx_yfri + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC104_C_to_12", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_xker = 0\nlist_5atl = range(n)\nwhile idx_xker < len(list_5atl):\n    i = list_5atl[idx_xker]\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x = x + 1\n        break\n    if not i < n // 2:\n        h2 = h2 + number[i]\n    else:\n        h1 = h1 + number[i]\n    idx_xker = idx_xker + 1\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "AugAssign2Assign_sample_from_codeforces_146_A_to_13", "old_id": "codeforces_146_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret = ret + self.tree[i]\n            i = i ^ i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if not r is None:\n            return self._bitsum(r) - self._bitsum(l)\n        else:\n            return self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i = i + 1\n        while i <= self.size:\n            self.tree[i] = self.tree[i] + x\n            i = i + i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nidx_gxtw = 0\nlist_qgmt = list(enumerate(_a))\nwhile idx_gxtw < len(list_qgmt):\n    i, x = list_qgmt[idx_gxtw]\n    d[x] = i\n    idx_gxtw = idx_gxtw + 1\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_gn3z = 0\n    list_fanu = range(n)\n    while idx_gn3z < len(list_fanu):\n        i = list_fanu[idx_gn3z]\n        b[i + 1] = b[i + 1] + b[i]\n        idx_gn3z = idx_gn3z + 1\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    idx_2iwr = 0\n    list_y9mp = b\n    while idx_2iwr < len(list_y9mp):\n        x = list_y9mp[idx_2iwr]\n        ans = ans + bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_2iwr = idx_2iwr + 1\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC107_D_to_14", "old_id": "atcoder_ABC107_D"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    idx_x6lu = 0\n    list_xhcy = range(len(array) - 1, 0, - 1)\n    while idx_x6lu < len(list_xhcy):\n        _ = list_xhcy[idx_x6lu]\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n        idx_x6lu = idx_x6lu + 1\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    idx_bkwi = 0\n    list_zinm = A[1:]\n    while idx_bkwi < len(list_zinm):\n        a = list_zinm[idx_bkwi]\n        if not a <= dp[- 1][0]:\n            dp = dp + [(a, 0)]\n        else:\n            dp = cut(dp, a)\n        is_added = False\n        idx_910z = 0\n        list_f4pt = range(len(dp) - 1, - 1, - 1)\n        while idx_910z < len(list_f4pt):\n            j = list_f4pt[idx_910z]\n            if dp[j][1] < K - 1:\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp = dp + [(a, 0)]\n                is_added = True\n                break\n            idx_910z = idx_910z + 1\n        if not is_added:\n            return False\n        idx_bkwi = idx_bkwi + 1\n    return True\n\n\ndef bis(x, y):\n    if not y == x + 1:\n        if is_possible((x + y) // 2):\n            return bis(x, (x + y) // 2)\n        else:\n            return bis((x + y) // 2, y)\n    else:\n        return y\n\n\nprint(bis(0, N))\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC029_C_to_15", "old_id": "atcoder_AGC029_C"}
{"code": "n = int(input())\nq = []\ncount = 0\nidx_7ynf = 0\nlist_m9pv = range(n)\nwhile idx_7ynf < len(list_m9pv):\n    i = list_m9pv[idx_7ynf]\n    a = input().split()\n    q.append(a)\n    idx_7ynf = idx_7ynf + 1\nidx_bw1f = 0\nlist_rfmu = q\nwhile idx_bw1f < len(list_rfmu):\n    j = list_rfmu[idx_bw1f]\n    idx_qx9i = 0\n    list_shng = q\n    while idx_qx9i < len(list_shng):\n        k = list_shng[idx_qx9i]\n        if not k == j:\n            if j[0] == k[len(k) - 1]:\n                count = count + 1\n            else:\n                continue\n        else:\n            continue\n        idx_qx9i = idx_qx9i + 1\n    idx_bw1f = idx_bw1f + 1\nprint(count)\n", "id": "AugAssign2Assign_sample_from_codeforces_268_A_to_16", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_t0p7 = 0\nlist_ncb3 = range(4)\nwhile idx_t0p7 < len(list_ncb3):\n    i = list_ncb3[idx_t0p7]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_t0p7 = idx_t0p7 + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_c3pm = 0\nlist_it50 = range(3)\nwhile idx_c3pm < len(list_it50):\n    i = list_it50[idx_c3pm]\n    idx_39ca = 0\n    list_by4l = range(3)\n    while idx_39ca < len(list_by4l):\n        j = list_by4l[idx_39ca]\n        if not t[i][j] == '#':\n            white = white + 1\n        else:\n            black = black + 1\n        if not t[i][j + 1] == '#':\n            white = white + 1\n        else:\n            black = black + 1\n        if not t[i + 1][j] == '#':\n            white = white + 1\n        else:\n            black = black + 1\n        if not t[i + 1][j + 1] == '#':\n            white = white + 1\n        else:\n            black = black + 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_39ca = idx_39ca + 1\n    idx_c3pm = idx_c3pm + 1\nif not correct == 1:\n    print('NO')\nelse:\n    print('YES')\n", "id": "AugAssign2Assign_sample_from_codeforces_287_A_to_17", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_ad9r = 0\n    list_ea2j = list(enumerate(P))\n    while idx_ad9r < len(list_ea2j):\n        i, p = list_ea2j[idx_ad9r]\n        a[p] = i\n        idx_ad9r = idx_ad9r + 1\n    tmp = 1\n    max_len = 1\n    idx_9igw = 0\n    list_ueoa = range(1, N)\n    while idx_9igw < len(list_ueoa):\n        i = list_ueoa[idx_9igw]\n        if not a[i] < a[i + 1]:\n            tmp = 1\n        else:\n            tmp = tmp + 1\n            max_len = max(max_len, tmp)\n        idx_9igw = idx_9igw + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_4j9u = 0\n    list_mr5l = list(enumerate(P))\n    while idx_4j9u < len(list_mr5l):\n        i, p = list_mr5l[idx_4j9u]\n        if not i == 0 or P[i - 1] + 1 == p:\n            ans = max(ans, tmp)\n            tmp = 1\n        else:\n            tmp = tmp + 1\n        idx_4j9u = idx_4j9u + 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC024_B_to_18", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_q43i = 0\nlist_kznt = range(N)\nwhile idx_q43i < len(list_kznt):\n    x = list_kznt[idx_q43i]\n    if not S[x] == 'L':\n        if S[x] == 'R':\n            S_R = S_R + 1\n            if s_c + (S_R - T_L) == W + 1:\n                Judge = True\n        elif S[x] == 'U':\n            S_U = S_U + 1\n            if S_U - T_D - s_r == 0:\n                Judge = True\n        elif S[x] == 'D':\n            S_D = S_D + 1\n            if s_r + (S_D - T_U) == H + 1:\n                Judge = True\n    else:\n        S_L = S_L + 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L = T_L + 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R = T_R + 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U = T_U + 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D = T_D + 1\n    idx_q43i = idx_q43i + 1\nif not Judge:\n    print('YES')\nelse:\n    print('NO')\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC033_B_to_19", "old_id": "atcoder_AGC033_B"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        idx_zpu9 = 0\n        list_nguk = data\n        while idx_zpu9 < len(list_nguk):\n            number = list_nguk[idx_zpu9]\n            if len(number) > 0:\n                yield (number)\n            idx_zpu9 = idx_zpu9 + 1\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_ut4g = 0\nlist_xcnk = range(0, N - 1)\nwhile idx_ut4g < len(list_xcnk):\n    i = list_xcnk[idx_ut4g]\n    if S[i] != S[i + 1]:\n        seg_cnt = seg_cnt + 1\n    idx_ut4g = idx_ut4g + 1\ncur_happy = N - 1 - seg_cnt\nif not 2 * K >= seg_cnt:\n    ans = cur_happy + 2 * K\nelse:\n    ans = N - 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC140_D_to_20", "old_id": "atcoder_ABC140_D"}
{"code": "n, k = map(int, input().split())\nx = 0\nif not k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('NO')\nelse:\n    print('YES')\n    idx_8g4i = 0\n    list_jv3k = range(n)\n    while idx_8g4i < len(list_jv3k):\n        i = list_jv3k[idx_8g4i]\n        idx_dquz = 0\n        list_674o = range(n)\n        while idx_dquz < len(list_674o):\n            j = list_674o[idx_dquz]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x = x + 1\n            else:\n                print('S', end='')\n            idx_dquz = idx_dquz + 1\n        print()\n        idx_8g4i = idx_8g4i + 1\n", "id": "AugAssign2Assign_sample_from_codeforces_544_B_to_21", "old_id": "codeforces_544_B"}
{"code": "def check(lis, k, mid):\n    idx_6uyr = 0\n    list_0tl2 = lis\n    while idx_6uyr < len(list_0tl2):\n        i = list_0tl2[idx_6uyr]\n        if (i % mid == 0):\n            k = k + 1\n        k = k - (i // mid)\n        idx_6uyr = idx_6uyr + 1\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if not (check(lis, k, mid)):\n        a = mid + 1\n    else:\n        ans = mid\n        b = mid - 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC174_E_to_22", "old_id": "atcoder_ABC174_E"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nidx_we93 = 0\nlist_0zn1 = range(2, __N + 1)\nwhile idx_we93 < len(list_0zn1):\n    i = list_0zn1[idx_we93]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_we93 = idx_we93 + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    idx_sihu = 0\n    list_tzwb = range(kumi + 1)\n    while idx_sihu < len(list_tzwb):\n        p = list_tzwb[idx_sihu]\n        if p > N:\n            break\n        ans = ans + 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans = ans + 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_sihu = idx_sihu + 1\n    return ans\n\n\nans = []\nidx_cwkq = 0\nlist_p8vi = range(2, 2 * K + 1)\nwhile idx_cwkq < len(list_p8vi):\n    i = list_p8vi[idx_cwkq]\n    if not i <= K + 1:\n        print(ans[- i + K])\n    else:\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    idx_cwkq = idx_cwkq + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ARC102_C_to_23", "old_id": "atcoder_ARC102_C"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    idx_dnmw = 0\n    list_rd56 = range(N)\n    while idx_dnmw < len(list_rd56):\n        i = list_rd56[idx_dnmw]\n        if not A[i] < 0:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot = tot + r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot = tot + N - r\n        if A[i] * A[i] < x:\n            tot = tot - 1\n        idx_dnmw = idx_dnmw + 1\n    tot = tot // 2\n    if not tot < K:\n        rr = x\n    else:\n        ll = x\nprint(ll)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC155_D_to_24", "old_id": "atcoder_ABC155_D"}
{"code": "s = input()\nn = int(input())\nans = 0\nidx_rlt5 = 0\nlist_nj6x = range(n)\nwhile idx_rlt5 < len(list_nj6x):\n    i = list_nj6x[idx_rlt5]\n    x = input()\n    a, b = 0, 0\n    idx_lxzf = 0\n    list_ul1j = s\n    while idx_lxzf < len(list_ul1j):\n        j = list_ul1j[idx_lxzf]\n        if not j == x[0]:\n            if j == x[1]:\n                b = b + 1\n            else:\n                ans = ans + min(a, b)\n                a, b = 0, 0\n        else:\n            a = a + 1\n        idx_lxzf = idx_lxzf + 1\n    ans = ans + min(a, b)\n    idx_rlt5 = idx_rlt5 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_codeforces_154_A_to_25", "old_id": "codeforces_154_A"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_tvhw = 0\n    list_cyi4 = sequence\n    while idx_tvhw < len(list_cyi4):\n        value = list_cyi4[idx_tvhw]\n        y = f(value)\n        if not y not in storage:\n            storage[y].append(value)\n        else:\n            storage[y] = [value]\n            FXs.append(y)\n        idx_tvhw = idx_tvhw + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y = y + 1\n        n = n // 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "AugAssign2Assign_sample_from_codeforces_272_B_to_26", "old_id": "codeforces_272_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_4hu6 = 0\nlist_2pga = Number_i\nwhile idx_4hu6 < len(list_2pga):\n    i = list_2pga[idx_4hu6]\n    Number_iMN.append(i * M / N)\n    idx_4hu6 = idx_4hu6 + 1\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_9t1n = 0\nlist_ng7b = Kaburi_j\nwhile idx_9t1n < len(list_ng7b):\n    j = list_ng7b[idx_9t1n]\n    Kaburi_i.append(int(j * N / M))\n    idx_9t1n = idx_9t1n + 1\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if not list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        Flag = 1\n        break\n    else:\n        pass\n    counter = counter + 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nif not Flag == 1:\n    print(int(N * M / gcd(N, M)))\nelse:\n    print(- 1)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC028_A_to_27", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_ld62 = 0\n    list_u2mk = list(enumerate(s[:: - 1]))\n    while idx_ld62 < len(list_u2mk):\n        i, c = list_u2mk[idx_ld62]\n        cc = na + int(c)\n        na = 0\n        if not cc <= 4:\n            na = 1\n            if i == len(s) - 1:\n                pp = pp + 1\n            pp = pp + 10 - cc\n        else:\n            pp = pp + cc\n        idx_ld62 = idx_ld62 + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    idx_f42w = 0\n    list_hlac = s[:: - 1]\n    while idx_f42w < len(list_hlac):\n        c = list_hlac[idx_f42w]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_f42w = idx_f42w + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_5fxl = 0\n    list_m8dw = input_l\n    while idx_5fxl < len(list_m8dw):\n        l = list_m8dw[idx_5fxl]\n        yield l\n        idx_5fxl = idx_5fxl + 1\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC155_E_to_28", "old_id": "atcoder_ABC155_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nidx_ou2n = 0\nlist_j7r2 = lst\nwhile idx_ou2n < len(list_j7r2):\n    i = list_j7r2[idx_ou2n]\n    if (i & 1):\n        od = od + 1\n    idx_ou2n = idx_ou2n + 1\nsum = 0\nok = 0\nidx_960k = 0\nlist_0gnx = range(n)\nwhile idx_960k < len(list_0gnx):\n    i = list_0gnx[idx_960k]\n    if not (lst[i] % 2 == 0):\n        if (ok or od > 1):\n            sum = sum + lst[i]\n            od = od - 1\n            ok = not ok\n    else:\n        sum = sum + lst[i]\n    idx_960k = idx_960k + 1\nprint(sum)\n", "id": "AugAssign2Assign_sample_from_codeforces_621_A_to_29", "old_id": "codeforces_621_A"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_fhmj = 0\nlist_ls1d = range(n)\nwhile idx_fhmj < len(list_ls1d):\n    i = list_ls1d[idx_fhmj]\n    if not i == 0:\n        if S[i] != '?':\n            idx_z24s = 0\n            list_uyho = range(13)\n            while idx_z24s < len(list_uyho):\n                k = list_uyho[idx_z24s]\n                dp[i][(k * 10 + int(S[i])) % 13] = dp[i][(k * 10 + int(S[i])) % 13] + dp[i - 1][k]\n                idx_z24s = idx_z24s + 1\n        else:\n            idx_ha4p = 0\n            list_2d68 = range(10)\n            while idx_ha4p < len(list_2d68):\n                j = list_2d68[idx_ha4p]\n                idx_9efu = 0\n                list_inub = range(13)\n                while idx_9efu < len(list_inub):\n                    k = list_inub[idx_9efu]\n                    dp[i][(k * 10 + j) % 13] = dp[i][(k * 10 + j) % 13] + dp[i - 1][k]\n                    idx_9efu = idx_9efu + 1\n                idx_ha4p = idx_ha4p + 1\n        idx_q9nd = 0\n        list_5syw = range(13)\n        while idx_q9nd < len(list_5syw):\n            k = list_5syw[idx_q9nd]\n            dp[i][k] = dp[i][k] % mod\n            idx_q9nd = idx_q9nd + 1\n    else:\n        if S[i] != '?':\n            dp[i][int(S[i])] = dp[i][int(S[i])] + 1\n        else:\n            idx_9hcf = 0\n            list_9hg0 = range(10)\n            while idx_9hcf < len(list_9hg0):\n                j = list_9hg0[idx_9hcf]\n                dp[i][j] = dp[i][j] + 1\n                idx_9hcf = idx_9hcf + 1\n    idx_fhmj = idx_fhmj + 1\nprint(dp[n - 1][5])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC135_D_to_30", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_nkax = 0\nlist_3alm = s\nwhile idx_nkax < len(list_3alm):\n    c = list_3alm[idx_nkax]\n    if not c == '0' or c == '1':\n        if c == 'B' and len(my_str) != 0:\n            my_str = my_str[: len(my_str) - 1]\n    else:\n        my_str = my_str + c\n    idx_nkax = idx_nkax + 1\nprint(my_str)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC043_B_to_31", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nidx_jkhp = 0\nlist_7boc = w\nwhile idx_jkhp < len(list_7boc):\n    i = list_7boc[idx_jkhp]\n    if not i == 0:\n        if - i in w:\n            c = c + w[i] * w[- i]\n    else:\n        c = c + w[i] * (w[i] - 1)\n    idx_jkhp = idx_jkhp + 1\nprint(c // 2)\n", "id": "AugAssign2Assign_sample_from_codeforces_131_B_to_32", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_dexs = 0\nlist_1jnw = range(n)\nwhile idx_dexs < len(list_1jnw):\n    i = list_1jnw[idx_dexs]\n    if not lst[i] not in l:\n        l[lst[i]] = l[lst[i]] + 1\n    else:\n        l[lst[i]] = 1\n    idx_dexs = idx_dexs + 1\nres = 0\nidx_bf8c = 0\nlist_tdn5 = range(n)\nwhile idx_bf8c < len(list_tdn5):\n    i = list_tdn5[idx_bf8c]\n    if not l[lst[i]] > 1:\n        res = res + n - i - 1\n    else:\n        res = res + n - i - l[lst[i]]\n        l[lst[i]] = l[lst[i]] - 1\n    idx_bf8c = idx_bf8c + 1\nprint(res)\n", "id": "AugAssign2Assign_sample_from_codeforces_609_B_to_33", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_hbc1 = 0\n    list_f6nh = list(enumerate(it))\n    while idx_hbc1 < len(list_f6nh):\n        i, e = list_f6nh[idx_hbc1]\n        if not l <= i < r:\n            if l >= r:\n                break\n        else:\n            yield e\n        idx_hbc1 = idx_hbc1 + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n = n // 2\n    f = 3\n    while f * f <= n:\n        if not n % f == 0:\n            f = f + 2\n        else:\n            a.append(f)\n            n = n // f\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_dg9v = 0\nlist_qtkx = list(fac.items())\nwhile idx_dg9v < len(list_qtkx):\n    p, e = list_qtkx[idx_dg9v]\n    x = e\n    idx_0aqg = 0\n    list_3hcb = range(1, 99999999)\n    while idx_0aqg < len(list_3hcb):\n        i = list_3hcb[idx_0aqg]\n        if not x >= i:\n            break\n        else:\n            x = x - i\n            ans = ans + 1\n        idx_0aqg = idx_0aqg + 1\n    idx_dg9v = idx_dg9v + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC169_D_to_34", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_1f9r = 0\nlist_vj70 = range(0, n)\nwhile idx_1f9r < len(list_vj70):\n    i = list_vj70[idx_1f9r]\n    if not i % 2 == 0:\n        b.append(x[i])\n    else:\n        a.append(x[i])\n    idx_1f9r = idx_1f9r + 1\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nidx_hdec = 0\nlist_9f3g = a\nwhile idx_hdec < len(list_9f3g):\n    i = list_9f3g[idx_hdec]\n    cnta[i] = cnta[i] + 1\n    idx_hdec = idx_hdec + 1\nidx_90os = 0\nlist_jm1t = a\nwhile idx_90os < len(list_jm1t):\n    i = list_jm1t[idx_90os]\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\n    idx_90os = idx_90os + 1\nidx_7t36 = 0\nlist_f8eq = a\nwhile idx_7t36 < len(list_f8eq):\n    i = list_f8eq[idx_7t36]\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_7t36 = idx_7t36 + 1\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nidx_xgkj = 0\nlist_r2pb = b\nwhile idx_xgkj < len(list_r2pb):\n    i = list_r2pb[idx_xgkj]\n    cntb[i] = cntb[i] + 1\n    idx_xgkj = idx_xgkj + 1\nidx_a1yu = 0\nlist_7j4k = b\nwhile idx_a1yu < len(list_7j4k):\n    i = list_7j4k[idx_a1yu]\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\n    idx_a1yu = idx_a1yu + 1\nidx_afip = 0\nlist_75sb = b\nwhile idx_afip < len(list_75sb):\n    i = list_75sb[idx_afip]\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_afip = idx_afip + 1\nif not valb != vala:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    idx_rgmi = 0\n    list_6mgf = a\n    while idx_rgmi < len(list_6mgf):\n        i = list_6mgf[idx_rgmi]\n        if i != vala:\n            resa = resa + 1\n        if i != vala1:\n            resa1 = resa1 + 1\n        idx_rgmi = idx_rgmi + 1\n    idx_9igz = 0\n    list_tivj = b\n    while idx_9igz < len(list_tivj):\n        i = list_tivj[idx_9igz]\n        if i != valb:\n            resb = resb + 1\n        if i != valb1:\n            resb1 = resb1 + 1\n        idx_9igz = idx_9igz + 1\n    print(min(resa + resb1, resa1 + resb))\nelse:\n    res = 0\n    idx_o075 = 0\n    list_5od4 = a\n    while idx_o075 < len(list_5od4):\n        i = list_5od4[idx_o075]\n        if i != vala:\n            res = res + 1\n        idx_o075 = idx_o075 + 1\n    idx_b58k = 0\n    list_ntxs = b\n    while idx_b58k < len(list_ntxs):\n        i = list_ntxs[idx_b58k]\n        if i != valb:\n            res = res + 1\n        idx_b58k = idx_b58k + 1\n    print(res)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC111_C_to_35", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_ykb3 = 0\nlist_zrj3 = range(N)\nwhile idx_ykb3 < len(list_zrj3):\n    i = list_zrj3[idx_ykb3]\n    if lst[i] == 0:\n        K = K - 1\n    if not lst[i] > 0:\n        if lst[i] < 0:\n            lst_m = lst_m + [lst[i]]\n    else:\n        lst_p = lst_p + [lst[i]]\n    idx_ykb3 = idx_ykb3 + 1\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    idx_l9ym = 0\n    list_t21y = range(0, k + 1)\n    while idx_l9ym < len(list_t21y):\n        j = list_t21y[idx_l9ym]\n        if not j > lastx or k - j > lasty:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        else:\n            pass\n        idx_l9ym = idx_l9ym + 1\n    return ans\n\n\nprint(check(K))\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC107_C_to_36", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_uoye = 0\nlist_me48 = list(enumerate(l))\nwhile idx_uoye < len(list_me48):\n    i, c = list_me48[idx_uoye]\n    if not c == '0':\n        dp[i + 1][0] = dp[i + 1][0] + dp[i][0] * 2\n        dp[i + 1][1] = dp[i + 1][1] + dp[i][0]\n        dp[i + 1][1] = dp[i + 1][1] + dp[i][1] * 3\n    else:\n        dp[i + 1][0] = dp[i + 1][0] + dp[i][0]\n        dp[i + 1][1] = dp[i + 1][1] + dp[i][1] * 3\n    dp[i + 1][0] = dp[i + 1][0] % mod\n    dp[i + 1][1] = dp[i + 1][1] % mod\n    idx_uoye = idx_uoye + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC129_E_to_37", "old_id": "atcoder_ABC129_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_xvr5 = 0\nlist_gy37 = range(int(input()))\nwhile idx_xvr5 < len(list_gy37):\n    i = list_gy37[idx_xvr5]\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if not x == 'M':\n        f[a] = f[a] + 2\n        f[b] = f[b] - 2\n    else:\n        m[a] = m[a] + 2\n        m[b] = m[b] - 2\n    idx_xvr5 = idx_xvr5 + 1\na, b, c = 0, 0, 0\nidx_z19u = 0\nlist_n7wd = range(N)\nwhile idx_z19u < len(list_n7wd):\n    i = list_n7wd[idx_z19u]\n    a = a + m[i]\n    b = b + f[i]\n    if min(a, b) > c:\n        c = min(a, b)\n    idx_z19u = idx_z19u + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_codeforces_629_B_to_38", "old_id": "codeforces_629_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nidx_39ae = 0\nlist_qina = pre + 1\nwhile idx_39ae < len(list_qina):\n    i = list_qina[idx_39ae]\n    idx_348g = 0\n    list_5bhv = itertools.combinations(pre, i)\n    while idx_348g < len(list_5bhv):\n        j = list_5bhv[idx_348g]\n        l.append(list(j))\n        idx_348g = idx_348g + 1\n    idx_39ae = idx_39ae + 1\nidx_1feo = 0\nlist_xgwl = range(1, m + 1)\nwhile idx_1feo < len(list_xgwl):\n    i = list_xgwl[idx_1feo]\n    idx_mkbi = 0\n    list_yw1b = list(enumerate(l))\n    while idx_mkbi < len(list_yw1b):\n        j, k = list_yw1b[idx_mkbi]\n        ca = 0\n        idx_ae46 = 0\n        list_ib0d = k\n        while idx_ae46 < len(list_ib0d):\n            ii = list_ib0d[idx_ae46]\n            ca = ca + c[ii, i]\n            idx_ae46 = idx_ae46 + 1\n        if not ca < x:\n            pass\n        else:\n            rem.insert(0, j)\n        idx_mkbi = idx_mkbi + 1\n    if len(rem) > 0:\n        idx_a5up = 0\n        list_fnmp = rem\n        while idx_a5up < len(list_fnmp):\n            j = list_fnmp[idx_a5up]\n            l.pop(j)\n            idx_a5up = idx_a5up + 1\n        rem = []\n    if len(l) == 0:\n        print(- 1)\n        break\n    idx_1feo = idx_1feo + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC167_C_to_39", "old_id": "atcoder_ABC167_C"}
{"code": "a, b = map(int, input().split())\nc = 0\nidx_b79r = 0\nlist_5mgp = range(2)\nwhile idx_b79r < len(list_5mgp):\n    i = list_5mgp[idx_b79r]\n    c = c + max(a, b)\n    if not a >= b:\n        b = b - 1\n    else:\n        a = a - 1\n    idx_b79r = idx_b79r + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC124_A_to_40", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif not len(ip) != 1:\n    st = ip\nelse:\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    idx_7zh2 = 0\n    list_af5c = ip\n    while idx_7zh2 < len(list_af5c):\n        i = list_af5c[idx_7zh2]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st = st + str(n)\n        else:\n            st = st + i\n        idx_7zh2 = idx_7zh2 + 1\nprint(int(st))\n", "id": "AugAssign2Assign_sample_from_codeforces_514_A_to_41", "old_id": "codeforces_514_A"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nidx_u4q7 = 0\nlist_zw5x = range(q)\nwhile idx_u4q7 < len(list_zw5x):\n    _ = list_zw5x[idx_u4q7]\n    ql = list(map(int, input().split()))\n    if not ql[0] == 2:\n        sum_b = sum_b + ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 = sum_p1 + ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 = sum_p1 + ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 = sum_p2 + ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 = sum_p2 + k\n            sum_p1 = sum_p1 - k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 = sum_p1 - k\n            sum_p2 = sum_p2 + k\n    else:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    idx_u4q7 = idx_u4q7 + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC127_F_to_42", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_2iem = 0\n    list_j0kh = pieces\n    while idx_2iem < len(list_j0kh):\n        piece = list_j0kh[idx_2iem]\n        if not piece[1] == 'A':\n            pScore = pScore - piece[0]\n        else:\n            pScore = pScore + piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        idx_2iem = idx_2iem + 1\n    idx_3dul = 0\n    list_z1s7 = range(len(pieces) - 1, - 1, - 1)\n    while idx_3dul < len(list_z1s7):\n        i = list_z1s7[idx_3dul]\n        if not pieces[i][1] == 'A':\n            sScore = sScore - pieces[i][0]\n        else:\n            sScore = sScore + pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        idx_3dul = idx_3dul + 1\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "AugAssign2Assign_sample_from_codeforces_632_B_to_43", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_4j9z = 0\n    list_mvyr = s\n    while idx_4j9z < len(list_mvyr):\n        i = list_mvyr[idx_4j9z]\n        if i not in ['-', ';', '_']:\n            r = r + i.lower()\n        idx_4j9z = idx_4j9z + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_pya5 = 0\n    list_pjvn = range(3)\n    while idx_pya5 < len(list_pjvn):\n        i = list_pjvn[idx_pya5]\n        l.append(f(input()))\n        idx_pya5 = idx_pya5 + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_vqdb = 0\n    list_sinv = t\n    while idx_vqdb < len(list_sinv):\n        i = list_sinv[idx_vqdb]\n        l.append(\"\".join(i))\n        idx_vqdb = idx_vqdb + 1\n    idx_l80c = 0\n    list_7epz = range(inp())\n    while idx_l80c < len(list_7epz):\n        i = list_7epz[idx_l80c]\n        if not f(instr()) in l:\n            print('WA')\n        else:\n            print('ACC')\n        idx_l80c = idx_l80c + 1\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "AugAssign2Assign_sample_from_codeforces_61_B_to_44", "old_id": "codeforces_61_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nidx_26jm = 0\nlist_jiza = range(1, N + 1)\nwhile idx_26jm < len(list_jiza):\n    i = list_jiza[idx_26jm]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_26jm = idx_26jm + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nidx_euwn = 0\nlist_hu62 = range(0, T)\nwhile idx_euwn < len(list_hu62):\n    t = list_hu62[idx_euwn]\n    dp[0][t] = 0\n    idx_euwn = idx_euwn + 1\nidx_5p2e = 0\nlist_y124 = range(1, N + 1)\nwhile idx_5p2e < len(list_y124):\n    n = list_y124[idx_5p2e]\n    dp[n][0] = 0\n    idx_10i7 = 0\n    list_en1h = range(1, T)\n    while idx_10i7 < len(list_en1h):\n        t = list_en1h[idx_10i7]\n        if not time_value[n][TIME] > t:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        else:\n            dp[n][t] = dp[n - 1][t]\n        idx_10i7 = idx_10i7 + 1\n    idx_5p2e = idx_5p2e + 1\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nidx_r1uk = 0\nlist_buwo = range(N - 1, 0, - 1)\nwhile idx_r1uk < len(list_buwo):\n    n = list_buwo[idx_r1uk]\n    val_acum = val_acum + time_value[n][VAL]\n    t = t - time_value[n + 1][TIME]\n    if not t < 0:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    else:\n        break\n    idx_r1uk = idx_r1uk + 1\nprint(max_val)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC145_E_to_45", "old_id": "atcoder_ABC145_E"}
