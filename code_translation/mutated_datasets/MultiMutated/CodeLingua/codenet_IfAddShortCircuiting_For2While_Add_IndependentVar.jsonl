{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_c2m1 = 0\nlist_rpun = range(m)\nwhile idx_c2m1 < len(list_rpun):\n    i = list_rpun[idx_c2m1]\n    p, x = map(int, input().split())\n    var_3qm = 44\n    s = 0\n    idx_t8mf = 0\n    list_9e48 = range(len(t))\n    while idx_t8mf < len(list_9e48):\n        j = list_9e48[idx_t8mf]\n        if j == p-1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            s += x\n        else:\n            s += t[j]\n        idx_t8mf = idx_t8mf + 1\n    print(s)\n    idx_c2m1 = idx_c2m1 + 1\n", "id": "Add_IndependentVar_sample_from_s609392609_to_0", "old_id": "s609392609"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    idx_8ie1 = 0\n    list_vj03 = V.get(i, [])\n    while idx_8ie1 < len(list_vj03):\n        v, w = list_vj03[idx_8ie1]\n        if (w % 2) == 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n        idx_8ie1 = idx_8ie1 + 1\n    var_mbd = 1\n    return True\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    n = int(input())\n    V = {}\n    color = {}\n    idx_4ged = 0\n    list_fmzi = range(1, n)\n    while idx_4ged < len(list_fmzi):\n        i = list_fmzi[idx_4ged]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_4ged = idx_4ged + 1\n    var_txi = 8\n    idx_w0pm = 0\n    list_s7cw = range(1, n+1)\n    while idx_w0pm < len(list_s7cw):\n        i = list_s7cw[idx_w0pm]\n        color[i] = -1\n        idx_w0pm = idx_w0pm + 1\n\n    while True:\n        i = 0\n        idx_2lo0 = 0\n        list_0psz = range(1, n+1)\n        while idx_2lo0 < len(list_0psz):\n            j = list_0psz[idx_2lo0]\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n            idx_2lo0 = idx_2lo0 + 1\n        if i == 0:\n            idx_ptr4 = 0\n            list_8gq3 = range(1, n+1)\n            while idx_ptr4 < len(list_8gq3):\n                j = list_8gq3[idx_ptr4]\n                print(color[j])\n                idx_ptr4 = idx_ptr4 + 1\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "Add_IndependentVar_sample_from_s908812767_to_1", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < 26 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    idx_sb2f = 0\n    var_ct9 = 70\n    list_5kxg = range(26)\n    while idx_sb2f < len(list_5kxg):\n        i = list_5kxg[idx_sb2f]\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_sb2f = idx_sb2f + 1\nelse:\n    idx_m24c = 0\n    list_by1j = reversed(range(1, 26))\n    while idx_m24c < len(list_by1j):\n        i = list_by1j[idx_m24c]\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            idx_du7i = 0\n            list_qa0e = range(26)\n            while idx_du7i < len(list_qa0e):\n                j = list_qa0e[idx_du7i]\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_du7i = idx_du7i + 1\n        idx_m24c = idx_m24c + 1\n    var_9kq = 11\n    print(-1)\n", "id": "Add_IndependentVar_sample_from_s504709360_to_2", "old_id": "s504709360"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = 10 ** 18\nidx_26j9 = 0\nlist_vp41 = range(1, int(n ** (1 / 2)) + 2)\nwhile idx_26j9 < len(list_vp41):\n    i = list_vp41[idx_26j9]\n    if n % i != 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        continue\n    j = n // i\n    var_ykb = 28\n    ans = min(ans, i + j - 2)\n    idx_26j9 = idx_26j9 + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s662673721_to_3", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n    var_r4i = 46\nidx_h2qw = 0\nlist_lmj5 = range(1, K+1)\nwhile idx_h2qw < len(list_lmj5):\n    i = list_lmj5[idx_h2qw]\n    if N - K + 1 < i and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        ans = 0\n    else:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    var_pgt = 17\n    print(int(ans) % mod)\n    idx_h2qw = idx_h2qw + 1\n", "id": "Add_IndependentVar_sample_from_s790754864_to_4", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    idx_qr6s = 0\n    var_poy = 7\n    list_usjr = zip(a, b)\n    while idx_qr6s < len(list_usjr):\n        i, j = list_usjr[idx_qr6s]\n        s += i != j\n        idx_qr6s = idx_qr6s + 1\n    return s\n\n\nans = 10**6\nidx_b7jf = 0\nlist_zjy9 = range(len(s))\nwhile idx_b7jf < len(list_zjy9):\n    i = list_zjy9[idx_b7jf]\n    var_60f = 79\n    a = s[i:]\n    if len(a) >= len(t) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        ans = min(ans, check(t, a[:len(t)]))\n    idx_b7jf = idx_b7jf + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s636719275_to_5", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nidx_cms5 = 0\nlist_jw1r = range(1, N+1)\nwhile idx_cms5 < len(list_jw1r):\n    i = list_jw1r[idx_cms5]\n    var_86u = 80\n    aji.append(L+i-1)\n    idx_cms5 = idx_cms5 + 1\nif min(aji) >= 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    aji.pop(aji.index(min(aji)))\n    var_2wd = 97\nelif max(aji) <= 0:\n    aji.pop(aji.index(max(aji)))\n    var_iqc = 44\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\n    var_lay = 64\nprint(sum(aji))\n", "id": "Add_IndependentVar_sample_from_s240532461_to_6", "old_id": "s240532461"}
{"code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nidx_x2ur = 0\nlist_i4w3 = range(min(x+y, a+b, c))\nwhile idx_x2ur < len(list_i4w3):\n    i = list_i4w3[idx_x2ur]\n    var_t2h = 20\n    if pq[i] < r[i] and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        pq[i] = r[i]\n    idx_x2ur = idx_x2ur + 1\nprint(sum(pq))\n", "id": "Add_IndependentVar_sample_from_s828550015_to_7", "old_id": "s828550015"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nidx_nmxe = 0\nlist_h0lt = A[:M]\nwhile idx_nmxe < len(list_h0lt):\n    a = list_h0lt[idx_nmxe]\n    var_kmp = 74\n    if a/S - 1/(4*M) < 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        print('No')\n        break\n    idx_nmxe = idx_nmxe + 1\n", "id": "Add_IndependentVar_sample_from_s846046431_to_8", "old_id": "s846046431"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nidx_k04c = 0\nlist_m985 = range(q)\nwhile idx_k04c < len(list_m985):\n    _ = list_m985[idx_k04c]\n    t = list(map(int, input().split()))\n    if t[0] == 1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    idx_k04c = idx_k04c + 1\n    var_uq0 = 56\n", "id": "Add_IndependentVar_sample_from_s016605598_to_9", "old_id": "s016605598"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nidx_oasg = 0\nlist_0hf8 = range(Q)\nwhile idx_oasg < len(list_0hf8):\n    _ = list_0hf8[idx_oasg]\n    Q_groups.append([*LI()])\n    idx_oasg = idx_oasg + 1\n    var_gf6 = 89\n\nmax_score = 0\nidx_xwd5 = 0\nlist_vtlp = combinations_with_replacement(range(1, M + 1), r=N)\nwhile idx_xwd5 < len(list_vtlp):\n    p = list_vtlp[idx_xwd5]\n    temp_score = 0\n    idx_i8qv = 0\n    var_md3 = 68\n    list_twzp = Q_groups\n    while idx_i8qv < len(list_twzp):\n        q = list_twzp[idx_i8qv]\n        if p[q[1] - 1] - p[q[0] - 1] == q[2] and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            temp_score += q[3]\n        idx_i8qv = idx_i8qv + 1\n    max_score = max(max_score, temp_score)\n    idx_xwd5 = idx_xwd5 + 1\n\nprint(max_score)\n", "id": "Add_IndependentVar_sample_from_s269975433_to_10", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nidx_x4kc = 0\nlist_wapi = range(len(strn))\nwhile idx_x4kc < len(list_wapi):\n    i = list_wapi[idx_x4kc]\n    var_imw = 65\n    if i == 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        idx_26yv = 0\n        list_3wje = shichigolist\n        while idx_26yv < len(list_3wje):\n            j = list_3wje[idx_26yv]\n            shichigo[i].append(j)\n            idx_26yv = idx_26yv + 1\n    else:\n        idx_0vge = 0\n        list_2nac = shichigo[i-1]\n        while idx_0vge < len(list_2nac):\n            j = list_2nac[idx_0vge]\n            idx_wzs7 = 0\n            list_xtka = shichigolist\n            while idx_wzs7 < len(list_xtka):\n                k = list_xtka[idx_wzs7]\n                shichigo[i].append(j+k)\n                idx_wzs7 = idx_wzs7 + 1\n            idx_0vge = idx_0vge + 1\n    idx_x4kc = idx_x4kc + 1\ntarget = len(strn)-1\nidx_hxoq = 0\nlist_qrok = range(len(strn))\nwhile idx_hxoq < len(list_qrok):\n    i = list_qrok[idx_hxoq]\n    var_hqb = 47\n    idx_185f = 0\n    list_y1ip = shichigo[i][:]\n    while idx_185f < len(list_y1ip):\n        j = list_y1ip[idx_185f]\n        if i == target and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n        idx_185f = idx_185f + 1\n    idx_hxoq = idx_hxoq + 1\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "Add_IndependentVar_sample_from_s949655009_to_11", "old_id": "s949655009"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nidx_sv01 = 0\nlist_ga03 = range(len(alphabets))\nwhile idx_sv01 < len(list_ga03):\n    i = list_ga03[idx_sv01]\n    if alphabets[i] == s and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        print(alphabets[i+1])\n    idx_sv01 = idx_sv01 + 1\n    var_6ps = 62\n", "id": "Add_IndependentVar_sample_from_s961772658_to_12", "old_id": "s961772658"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    var_wg5 = 27\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        idx_zc32 = 0\n        list_nw9d = range(first, end+1)\n        while idx_zc32 < len(list_nw9d):\n            s_i = list_nw9d[idx_zc32]\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?' and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                break\n            t_i += 1\n            idx_zc32 = idx_zc32 + 1\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    idx_xfb9 = 0\n    list_qhxz = range(first, end+1)\n    while idx_xfb9 < len(list_qhxz):\n        i = list_qhxz[idx_xfb9]\n        ans[i] = T[t_i]\n        t_i += 1\n        idx_xfb9 = idx_xfb9 + 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    solve()\n    var_yu7 = 53\n", "id": "Add_IndependentVar_sample_from_s826716211_to_13", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nidx_kcbv = 0\nlist_w7qy = range(N)\nwhile idx_kcbv < len(list_w7qy):\n    d = list_w7qy[idx_kcbv]\n    mat.append([int(x) for x in input().split()])\n    var_u9r = 68\n    idx_kcbv = idx_kcbv + 1\n\nc = 0\nidx_i1pq = 0\nlist_5d7u = range(len(mat)-1)\nwhile idx_i1pq < len(list_5d7u):\n    i = list_5d7u[idx_i1pq]\n    idx_6fi3 = 0\n    list_nymt = range(i+1, len(mat))\n    var_eg7 = 42\n    while idx_6fi3 < len(list_nymt):\n        j = list_nymt[idx_6fi3]\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            c += 1\n        idx_6fi3 = idx_6fi3 + 1\n    idx_i1pq = idx_i1pq + 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_s663509070_to_14", "old_id": "s663509070"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nidx_4wcf = 0\nlist_g73l = range(2**(h+w))\nwhile idx_4wcf < len(list_g73l):\n    i = list_g73l[idx_4wcf]\n    var_rj3 = 56\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    idx_mo4g = 0\n    list_ldyo = range(h)\n    while idx_mo4g < len(list_ldyo):\n        l = list_ldyo[idx_mo4g]\n        idx_rmwo = 0\n        list_6ane = range(w)\n        while idx_rmwo < len(list_6ane):\n            k = list_6ane[idx_rmwo]\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0' and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                ct += 1\n            idx_rmwo = idx_rmwo + 1\n        idx_mo4g = idx_mo4g + 1\n    if ct == ka and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        ans += 1\n    idx_4wcf = idx_4wcf + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s760938927_to_15", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nidx_dl6r = 0\nlist_6osa = qs\nwhile idx_dl6r < len(list_6osa):\n    operation = list_6osa[idx_dl6r]\n    if operation[0] == '1' and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        n = not n\n    var_8hb = 94\n    if operation[0] == '2' and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\n    idx_dl6r = idx_dl6r + 1\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "Add_IndependentVar_sample_from_s621701371_to_16", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_hv0q = 0\n    list_ydib = range(0, n)\n    while idx_hv0q < len(list_ydib):\n        i = list_ydib[idx_hv0q]\n        idx_3gl8 = 0\n        list_ezci = range(n-1, i, -1)\n        while idx_3gl8 < len(list_ezci):\n            j = list_ezci[idx_3gl8]\n            if int(cards[j][1]) < int(cards[j-1][1]) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n            idx_3gl8 = idx_3gl8 + 1\n        idx_hv0q = idx_hv0q + 1\n    var_tvk = 97\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_9w3l = 0\n    var_bc5 = 99\n    list_v1ad = range(0, n)\n    while idx_9w3l < len(list_v1ad):\n        i = list_v1ad[idx_9w3l]\n        mini = i\n        idx_jtai = 0\n        list_yv6z = range(i, n)\n        while idx_jtai < len(list_yv6z):\n            j = list_yv6z[idx_jtai]\n            if int(cards[j][1]) < int(cards[mini][1]) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                mini = j\n            idx_jtai = idx_jtai + 1\n        if mini != i and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_9w3l = idx_9w3l + 1\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n    print(\"Stable\")\n    var_k0u = 52\nelse:\n    print(\"Not stable\")\n    var_r1f = 99\n", "id": "Add_IndependentVar_sample_from_s875904659_to_17", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n    var_oqj = 10\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n    var_t6q = 73\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n    var_qhk = 85\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return [deque()]\n    k = []\n    idx_ut85 = 0\n    list_lck2 = range(len(li))\n    while idx_ut85 < len(list_lck2):\n        i = list_lck2[idx_ut85]\n        if i in used and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_4bl2 = 0\n        list_u4sd = sub_list\n        while idx_4bl2 < len(list_u4sd):\n            sub = list_u4sd[idx_4bl2]\n            sub.appendleft(li[i])\n            idx_4bl2 = idx_4bl2 + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_ut85 = idx_ut85 + 1\n    var_z5y = 76\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n    var_9cw = 34\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n    var_jf6 = 95\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n    var_me3 = 7\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_02t7 = 0\n    var_bgw = 85\n    list_b2ax = range(len(li)-1, -1, -1)\n    while idx_02t7 < len(list_b2ax):\n        i = list_b2ax[idx_02t7]\n        n += li[i] * base\n        base *= 10\n        idx_02t7 = idx_02t7 + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n    var_7v4 = 25\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    var_1xa = 88\n    idx_zwf6 = 0\n    list_f15v = range(len(li))\n    while idx_zwf6 < len(list_f15v):\n        i = list_f15v[idx_zwf6]\n        if li[i] >= int(math.sqrt(n)) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            break\n        if li[i] == -1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        idx_61z7 = 0\n        list_038r = range(i+1, len(li))\n        while idx_61z7 < len(list_038r):\n            j = list_038r[idx_61z7]\n            if li[j] % li[i] == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n                li[j] = -1\n            idx_61z7 = idx_61z7 + 1\n        idx_zwf6 = idx_zwf6 + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return b\n        a, b = b, r\n    var_7nz = 50\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n    var_mil = 18\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_a9bx = 0\n    list_mo35 = range(0, (1 << (n+1)))\n    while idx_a9bx < len(list_mo35):\n        bit = list_mo35[idx_a9bx]\n        ss = set()\n        idx_kmiw = 0\n        list_1yk9 = range(0, n)\n        while idx_kmiw < len(list_1yk9):\n            i = list_1yk9[idx_kmiw]\n            if (bit & (1 << i)) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                ss.add(li[i])\n            idx_kmiw = idx_kmiw + 1\n        s.append(ss)\n        idx_a9bx = idx_a9bx + 1\n    var_yap = 8\n    return s\n\n\ndef factorial(n):\n    if n == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return 1\n    return n * factorial(n-1)\n    var_bpy = 55\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n    var_k2s = 53\n\n\nn = load()\nA = load_list()\nif n == len(set(A)) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    print('YES')\n    var_pvz = 16\nelse:\n    print('NO')\n    var_but = 54\n", "id": "Add_IndependentVar_sample_from_s137613418_to_18", "old_id": "s137613418"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\nidx_10e6 = 0\nlist_u62m = range(n)\nwhile idx_10e6 < len(list_u62m):\n    i = list_u62m[idx_10e6]\n    idx_krun = 0\n    var_4l6 = 68\n    list_w2ln = range(n)\n    while idx_krun < len(list_w2ln):\n        d = list_w2ln[idx_krun]\n        j = i + d\n        k = j + d\n        if k >= n and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            break\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i] and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n\n            ans -= 1\n        idx_krun = idx_krun + 1\n    idx_10e6 = idx_10e6 + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s922746568_to_19", "old_id": "s922746568"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    idx_skbu = 0\n    list_feuq = range(0, len(input_value) + 1 - n)\n    while idx_skbu < len(list_feuq):\n        i = list_feuq[idx_skbu]\n        idx_03wr = 0\n        list_tymj = range(1, n)\n        while idx_03wr < len(list_tymj):\n            j = list_tymj[idx_03wr]\n            if input_value[i] != input_value[i + j] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                break\n            if j == n - 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                return \"Yes\"\n            idx_03wr = idx_03wr + 1\n        idx_skbu = idx_skbu + 1\n    var_j8h = 55\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "Add_IndependentVar_sample_from_s616346400_to_20", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_v1lp = 0\nlist_h9y0 = range(n)\nwhile idx_v1lp < len(list_h9y0):\n    i = list_h9y0[idx_v1lp]\n    var_kyh = 48\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_v1lp = idx_v1lp + 1\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nidx_oznd = 0\nlist_dmvb = lst\nwhile idx_oznd < len(list_dmvb):\n    i = list_dmvb[idx_oznd]\n    if i == pre and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    var_y7o = 24\n    pre = i\n    idx_oznd = idx_oznd + 1\nprint(cnt)\n", "id": "Add_IndependentVar_sample_from_s430322735_to_21", "old_id": "s430322735"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return gcd(b, a)\n    var_8nc = 39\n    if b == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n    var_1jc = 74\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nidx_zksr = 0\nlist_q4g5 = range(aa)\nwhile idx_zksr < len(list_q4g5):\n    i = list_q4g5[idx_zksr]\n    var_3p9 = 83\n    if s[n//aa*i] != t[m//aa*i] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        print(-1)\n        exit()\n    idx_zksr = idx_zksr + 1\nprint(bb)\n", "id": "Add_IndependentVar_sample_from_s986062252_to_22", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n    if n == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        break\n\n    res = -1111111111\n    s = 0\n    var_7ns = 68\n    idx_q7js = 0\n    list_awm2 = range(n)\n    while idx_q7js < len(list_awm2):\n        i = list_awm2[idx_q7js]\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n        idx_q7js = idx_q7js + 1\n\n    print(res)\n", "id": "Add_IndependentVar_sample_from_s923405856_to_23", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n    if D[0] != 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        print(0)\n        return\n\n    cnt = Counter(D)\n    if cnt[0] > 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(0)\n        return\n\n    res = 1\n    idx_91lp = 0\n    list_nvai = range(1, max(D)+1)\n    while idx_91lp < len(list_nvai):\n        i = list_nvai[idx_91lp]\n        if cnt[i-1] == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            continue\n        res *= cnt[i-1]**cnt[i] % mod\n        res %= mod\n        idx_91lp = idx_91lp + 1\n    var_xd7 = 48\n\n    print(res)\n\n\nsolve()\n", "id": "Add_IndependentVar_sample_from_s534639230_to_24", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n    var_h8k = 77\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n    var_a18 = 40\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nidx_v2zs = 0\nlist_wcu4 = A\nwhile idx_v2zs < len(list_wcu4):\n    a = list_wcu4[idx_v2zs]\n    var_qpa = 55\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n    if count_div_2 is None and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n    idx_v2zs = idx_v2zs + 1\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    print(0)\n    exit()\n    var_w70 = 14\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s817205687_to_25", "old_id": "s817205687"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    idx_78p3 = 0\n    list_goq0 = list(enumerate(a))\n    while idx_78p3 < len(list_goq0):\n        i, num = list_goq0[idx_78p3]\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n        idx_78p3 = idx_78p3 + 1\n    right_seg = SegmentTree(N, 0)\n    var_phu = 19\n    idx_8bhx = 0\n    list_yxj0 = list(enumerate(a[::-1]))\n    while idx_8bhx < len(list_yxj0):\n        i, num = list_yxj0[idx_8bhx]\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n        idx_8bhx = idx_8bhx + 1\n\n    print(sum(ans))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    main()\n    var_0fc = 86\n", "id": "Add_IndependentVar_sample_from_s764169243_to_26", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_5usv = 0\nlist_vq3k = range(len(S))\nwhile idx_5usv < len(list_vq3k):\n    i = list_vq3k[idx_5usv]\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\n    idx_5usv = idx_5usv + 1\n    var_1cv = 50\nif count > record and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    record = count\n    var_s7w = 16\n\nprint(record)\n", "id": "Add_IndependentVar_sample_from_s993625131_to_27", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nidx_2eca = 0\nlist_qle1 = T\nwhile idx_2eca < len(list_qle1):\n    i = list_qle1[idx_2eca]\n    if i == S[-1] or i == S[0] and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    idx_2eca = idx_2eca + 1\n    var_az0 = 7\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s315467749_to_28", "old_id": "s315467749"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nidx_3tbl = 0\nlist_25d3 = range(num_r)\nwhile idx_3tbl < len(list_25d3):\n    i = list_25d3[idx_3tbl]\n    var_qxu = 79\n    if c[i] != comp[i] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        ans += 1\n    idx_3tbl = idx_3tbl + 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s031459110_to_29", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    idx_p0ul = 0\n    list_lnsq = a_li[:-1]\n    while idx_p0ul < len(list_lnsq):\n        a = list_lnsq[idx_p0ul]\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            r = a\n            prev_dif = dif\n        idx_p0ul = idx_p0ul + 1\n    var_jqt = 36\n\n    print(n, r)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_s681105182_to_30", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nidx_2fwz = 0\nlist_djqy = range(N-M+1)\nwhile idx_2fwz < len(list_djqy):\n    i = list_djqy[idx_2fwz]\n    S_2 = S[i:i+M]\n    cnt = 0\n    idx_gfy2 = 0\n    list_uvn0 = range(M)\n    var_o2j = 52\n    while idx_gfy2 < len(list_uvn0):\n        j = list_uvn0[idx_gfy2]\n        if T[j] != S_2[j] and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            cnt += 1\n        idx_gfy2 = idx_gfy2 + 1\n    ans = min(ans, cnt)\n    idx_2fwz = idx_2fwz + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s838619850_to_31", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_alfy = 0\n    list_06zu = range(n)\n    while idx_alfy < len(list_06zu):\n        _ = list_06zu[idx_alfy]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n        idx_alfy = idx_alfy + 1\n    ans = 0\n    var_3mx = 40\n    idx_x7ai = 0\n    list_7fij = list(sdic.items())\n    while idx_x7ai < len(list_7fij):\n        k, v = list_7fij[idx_x7ai]\n        ans += v*(v-1)//2\n        idx_x7ai = idx_x7ai + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    main()\n    var_29i = 62\n", "id": "Add_IndependentVar_sample_from_s733189960_to_32", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_vgq5 = 0\nlist_38qh = range(n)\nwhile idx_vgq5 < len(list_38qh):\n    _ = list_38qh[idx_vgq5]\n    x, u = list(input().split())\n    var_2wp = 6\n    if u == \"BTC\" and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        res += float(x) * 380000\n    else:\n        res += int(x)\n    idx_vgq5 = idx_vgq5 + 1\nprint(res)\n", "id": "Add_IndependentVar_sample_from_s238775098_to_33", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    var_uer = 41\n    ve = []\n    vo = []\n    idx_t8gx = 0\n    list_os4n = range(n//2)\n    while idx_t8gx < len(list_os4n):\n        i = list_os4n[idx_t8gx]\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n        idx_t8gx = idx_t8gx + 1\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0] and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n    main()\n    var_mz0 = 56\n", "id": "Add_IndependentVar_sample_from_s101447419_to_34", "old_id": "s101447419"}
{"code": "A, B = map(int, input().split())\n\nmin = B * 10\nmax = (B+1) * 10 - 1\n\nans = -1\nidx_zbey = 0\nlist_6u28 = range(min, max+1)\nwhile idx_zbey < len(list_6u28):\n    i = list_6u28[idx_zbey]\n    if int(i * 0.08) == A and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        ans = i\n        break\n    idx_zbey = idx_zbey + 1\n    var_z76 = 27\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s764356857_to_35", "old_id": "s764356857"}
{"code": "N, K = map(int, input().split())\nA = []\nidx_raco = 0\nlist_5cdl = range(N)\nwhile idx_raco < len(list_5cdl):\n    i = list_5cdl[idx_raco]\n    var_p85 = 54\n    A.append(0)\n    idx_raco = idx_raco + 1\nidx_qb4v = 0\nlist_2zg6 = range(K)\nwhile idx_qb4v < len(list_2zg6):\n    i = list_2zg6[idx_qb4v]\n    d = int(input())\n    AA = list(map(int, input().split()))\n    var_uib = 85\n    idx_qxyf = 0\n    list_ovxi = range(d)\n    while idx_qxyf < len(list_ovxi):\n        j = list_ovxi[idx_qxyf]\n        A[AA[j] - 1] = 1\n        idx_qxyf = idx_qxyf + 1\n    idx_qb4v = idx_qb4v + 1\n\nn = 0\nidx_hkid = 0\nlist_h6vr = range(N)\nwhile idx_hkid < len(list_h6vr):\n    i = list_h6vr[idx_hkid]\n    if A[i] == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        n += 1\n    var_tnw = 10\n    idx_hkid = idx_hkid + 1\nprint(n)\n", "id": "Add_IndependentVar_sample_from_s225521100_to_36", "old_id": "s225521100"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    var_xya = 89\n    idx_i6sv = 0\n    list_dnys = range(N)\n    while idx_i6sv < len(list_dnys):\n        i = list_dnys[idx_i6sv]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n        idx_i6sv = idx_i6sv + 1\n    idx_m4vl = 0\n    list_08nj = modK\n    while idx_m4vl < len(list_08nj):\n        key = list_08nj[idx_m4vl]\n        lenK = len(modK[key])\n        idx_sxo3 = 0\n        list_vumz = list(enumerate(modK[key]))\n        while idx_sxo3 < len(list_vumz):\n            i, a = list_vumz[idx_sxo3]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_sxo3 = idx_sxo3 + 1\n        idx_m4vl = idx_m4vl + 1\n\n    print(count)\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n    solve()\n    var_bp3 = 43\n", "id": "Add_IndependentVar_sample_from_s975943078_to_37", "old_id": "s975943078"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    var_3y8 = 14\n    A = input_nums()\n    dist = []\n    idx_7rnk = 0\n    list_n06u = range(len(A)-1)\n    while idx_7rnk < len(list_n06u):\n        i = list_n06u[idx_7rnk]\n        dist.append(A[i+1]-A[i])\n        idx_7rnk = idx_7rnk + 1\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    main()\n    var_lzt = 48\n", "id": "Add_IndependentVar_sample_from_s267613210_to_38", "old_id": "s267613210"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nidx_cmyz = 0\nlist_9wgu = range(n-1)\nwhile idx_cmyz < len(list_9wgu):\n    i = list_9wgu[idx_cmyz]\n    if s[i] == s[i+1] and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        continue\n\n    else:\n        cnt += 1\n    idx_cmyz = idx_cmyz + 1\n    var_3ri = 68\n\nprint(cnt)\n", "id": "Add_IndependentVar_sample_from_s869207096_to_39", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\nidx_idr9 = 0\nlist_fprb = range(5)\nwhile idx_idr9 < len(list_fprb):\n    i = list_fprb[idx_idr9]\n    if str(a[i])[-1] == \"0\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    idx_idr9 = idx_idr9 + 1\n    var_h51 = 61\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "Add_IndependentVar_sample_from_s575946485_to_40", "old_id": "s575946485"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nidx_63wr = 0\nlist_76ur = range(n)\nwhile idx_63wr < len(list_76ur):\n    i = list_76ur[idx_63wr]\n    sum += int(l[i])\n    if max < int(l[i]) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        max = int(l[i])\n    if min > int(l[i]) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        min = int(l[i])\n    var_jpu = 49\n    idx_63wr = idx_63wr + 1\nprint(min, max, sum)\n", "id": "Add_IndependentVar_sample_from_s704354119_to_41", "old_id": "s704354119"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nidx_qlha = 0\nlist_bcri = range(1, N)\nwhile idx_qlha < len(list_bcri):\n    i = list_bcri[idx_qlha]\n    tmp = a[i - 1] + a[i]\n    var_vwh = 30\n    if tmp > x and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n    idx_qlha = idx_qlha + 1\n\nprint(cnt)\n", "id": "Add_IndependentVar_sample_from_s708549466_to_42", "old_id": "s708549466"}
{"code": "n = int(input())\narr = {}\nidx_ksmh = 0\nlist_ruf9 = range(n)\nwhile idx_ksmh < len(list_ruf9):\n    i = list_ruf9[idx_ksmh]\n    var_uoe = 1\n    s = input()\n    if not s in arr and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        arr[s] = 1\n    else:\n        arr[s] += 1\n    idx_ksmh = idx_ksmh + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nidx_jxqu = 0\nlist_0ca1 = out_sort\nwhile idx_jxqu < len(list_0ca1):\n    i = list_0ca1[idx_jxqu]\n    print(i)\n    idx_jxqu = idx_jxqu + 1\n    var_knl = 8\n", "id": "Add_IndependentVar_sample_from_s622795537_to_43", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = 0\nidx_labx = 0\nlist_fm2u = range(n)\nwhile idx_labx < len(list_fm2u):\n    i = list_fm2u[idx_labx]\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    var_idc = 55\n    idx_gtn8 = 0\n    list_iqj9 = x\n    while idx_gtn8 < len(list_iqj9):\n        w = list_iqj9[idx_gtn8]\n        if w in y and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            z += 1\n        idx_gtn8 = idx_gtn8 + 1\n    if z > ans and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        ans = z\n    idx_labx = idx_labx + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s232279435_to_44", "old_id": "s232279435"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nidx_hauc = 0\nlist_m1qu = range(N)\nwhile idx_hauc < len(list_m1qu):\n    i = list_m1qu[idx_hauc]\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    var_vnm = 73\n    m[b-1][f-1][r-1] += v\n    idx_hauc = idx_hauc + 1\nidx_sv4e = 0\nlist_blit = range(4)\nwhile idx_sv4e < len(list_blit):\n    i = list_blit[idx_sv4e]\n    var_6c1 = 15\n    idx_8ckt = 0\n    list_px3n = range(3)\n    while idx_8ckt < len(list_px3n):\n        j = list_px3n[idx_8ckt]\n        idx_jpzs = 0\n        list_d9t3 = range(10)\n        while idx_jpzs < len(list_d9t3):\n            k = list_d9t3[idx_jpzs]\n            line += ' {0}'.format(m[i][j][k])\n            idx_jpzs = idx_jpzs + 1\n        print(line)\n        line = ''\n        idx_8ckt = idx_8ckt + 1\n    if i < 3 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        print('#'*20)\n    idx_sv4e = idx_sv4e + 1\n", "id": "Add_IndependentVar_sample_from_s067092519_to_45", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = 1\nidx_cakl = 0\nlist_1nei = range(N-1)\nwhile idx_cakl < len(list_1nei):\n    i = list_1nei[idx_cakl]\n    var_yfx = 74\n    if S[i] != S[i+1] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        x = x+1\n    idx_cakl = idx_cakl + 1\nprint(x)\n", "id": "Add_IndependentVar_sample_from_s642705424_to_46", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    idx_n1sc = 0\n    var_70e = 10\n    list_la57 = range(M)\n    while idx_n1sc < len(list_la57):\n        _ = list_la57[idx_n1sc]\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n        idx_n1sc = idx_n1sc + 1\n\n    accum = [[0 for _ in range(N+1)]]\n    idx_gqht = 0\n    list_g62i = range(N)\n    while idx_gqht < len(list_g62i):\n        i = list_g62i[idx_gqht]\n        temp = [0]\n        v = 0\n        idx_czpm = 0\n        list_wur0 = range(N)\n        while idx_czpm < len(list_wur0):\n            j = list_wur0[idx_czpm]\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n            idx_czpm = idx_czpm + 1\n        accum.append(temp)\n        idx_gqht = idx_gqht + 1\n    idx_4njc = 0\n    list_tuad = range(Q)\n    while idx_4njc < len(list_tuad):\n        _ = list_tuad[idx_4njc]\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n        idx_4njc = idx_4njc + 1\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    main()\n    var_x0i = 49\n", "id": "Add_IndependentVar_sample_from_s048491063_to_47", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        print(\"yes\")\n    else:\n        print(\"no\")\n    var_5a4 = 63\n\n\ndef Yn(b):\n    if b and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    var_jte = 63\n\n\ndef YN(b):\n    if b and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    var_lyi = 100\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n    var_ect = 0\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_0km3 = 0\n        list_dfj4 = range(self.n)\n        while idx_0km3 < len(list_dfj4):\n            a = list_dfj4[idx_0km3]\n            S.add(self.find(a))\n            idx_0km3 = idx_0km3 + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return True\n    else:\n        return False\n    var_s30 = 12\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_vda2 = 0\n    list_liya = range(size)\n    while idx_vda2 < len(list_liya):\n        a = list_liya[idx_vda2]\n        if (num >> (size-a-1)) & 1 == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            A[a] = 1\n        else:\n            A[a] = 0\n        idx_vda2 = idx_vda2 + 1\n    return A\n    var_k8h = 57\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    var_n7v = 92\n    idx_4tpl = 0\n    list_6ve9 = range(2, len(A))\n    while idx_4tpl < len(list_6ve9):\n        a = list_6ve9[idx_4tpl]\n        A[a] = A[a-1]*a\n        if (mod > 0) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            A[a] %= mod_\n        idx_4tpl = idx_4tpl + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n    var_xtb = 42\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    var_8tm = 20\n    if (num >= (1 << size)) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_0x2u = 0\n    list_xn0c = range(2, n+1)\n    while idx_0x2u < len(list_xn0c):\n        a = list_xn0c[idx_0x2u]\n        if A[a] and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            idx_9cx6 = 0\n            list_s2g6 = range(a*2, n+1, a)\n            while idx_9cx6 < len(list_s2g6):\n                b = list_s2g6[idx_9cx6]\n                A[b] = False\n                idx_9cx6 = idx_9cx6 + 1\n        idx_0x2u = idx_0x2u + 1\n    if (type == \"bool\") and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        return A\n    B = []\n    var_eq7 = 100\n    idx_fhnq = 0\n    list_lfmb = range(n+1)\n    while idx_fhnq < len(list_lfmb):\n        a = list_lfmb[idx_fhnq]\n        if (A[a]) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            B.append(a)\n        idx_fhnq = idx_fhnq + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0) and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            return False\n        i += 1\n    return True\n    var_3g9 = 97\n\n\ndef ifelse(a, b, c):\n    if a and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        return b\n    else:\n        return c\n    var_fgm = 85\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_n3uq = 0\n    list_oyt5 = range(n)\n    var_snj = 49\n    while idx_n3uq < len(list_oyt5):\n        a = list_oyt5[idx_n3uq]\n        s += A[a]\n        if (a < n-1) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            s += c\n        idx_n3uq = idx_n3uq + 1\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    var_zml = 54\n    if n > 1 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        list_.append(n)\n    if type_ == \"dict\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        dic = {}\n        idx_9zxh = 0\n        list_wcoz = list_\n        while idx_9zxh < len(list_wcoz):\n            a = list_wcoz[idx_9zxh]\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n            idx_9zxh = idx_9zxh + 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n    var_4vd = 68\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n    var_qvs = 81\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_ and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        ret = min_\n    if x > max_ and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        ret = max_\n    var_470 = 30\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n    var_p3k = 26\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_q7ev = 0\n    list_py1e = range(n)\n    while idx_q7ev < len(list_py1e):\n        a = list_py1e[idx_q7ev]\n        S.append(input())\n        idx_q7ev = idx_q7ev + 1\n    S.sort()\n    var_ua1 = 58\n    print(\"\".join(S))\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_s977408144_to_48", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\nidx_q3jf = 0\nlist_edm4 = range(1, N+1)\nwhile idx_q3jf < len(list_edm4):\n    i = list_edm4[idx_q3jf]\n    if sum(range(1, i + 1)) < N and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        continue\n    else:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\n    idx_q3jf = idx_q3jf + 1\n    var_q0v = 33\nidx_72nf = 0\nlist_qow6 = range(ans[0]+1)\nwhile idx_72nf < len(list_qow6):\n    i = list_qow6[idx_72nf]\n    if i + 1 != ans[1] and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        print(i + 1)\n    idx_72nf = idx_72nf + 1\n    var_58q = 49\n", "id": "Add_IndependentVar_sample_from_s200092246_to_49", "old_id": "s200092246"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nidx_56xo = 0\nlist_lv4b = range(len(c))\nwhile idx_56xo < len(list_lv4b):\n    i = list_lv4b[idx_56xo]\n    var_4h0 = 15\n    if p[i][1] == count and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        ans.append(p[i][0])\n    else:\n        break\n    idx_56xo = idx_56xo + 1\nans = sorted(ans)\nidx_8zw4 = 0\nlist_q45d = ans\nwhile idx_8zw4 < len(list_q45d):\n    i = list_q45d[idx_8zw4]\n    print(i)\n    idx_8zw4 = idx_8zw4 + 1\n    var_t6d = 10\n", "id": "Add_IndependentVar_sample_from_s668439281_to_50", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_b0wy = 0\nlist_1yjv = range(H+2)\nwhile idx_b0wy < len(list_1yjv):\n    i = list_1yjv[idx_b0wy]\n    if i == 0 or i == H+1 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n    var_azo = 75\n    idx_b0wy = idx_b0wy + 1\n\nans = 0\nidx_pl1y = 0\nlist_1s3o = range(W+2)\nwhile idx_pl1y < len(list_1s3o):\n    sx = list_1s3o[idx_pl1y]\n    idx_npvi = 0\n    var_5mp = 9\n    list_p517 = range(H+2)\n    while idx_npvi < len(list_p517):\n        sy = list_p517[idx_npvi]\n        if G[sy][sx] == '.' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            idx_x2pd = 0\n            list_ifu5 = range(W+2)\n            while idx_x2pd < len(list_ifu5):\n                i = list_ifu5[idx_x2pd]\n                idx_a78n = 0\n                list_frtq = range(H+2)\n                while idx_a78n < len(list_frtq):\n                    j = list_frtq[idx_a78n]\n                    ans = max(ans, dist[j][i])\n                    idx_a78n = idx_a78n + 1\n                idx_x2pd = idx_x2pd + 1\n        idx_npvi = idx_npvi + 1\n    idx_pl1y = idx_pl1y + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s951169509_to_51", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_ads0 = 0\nlist_7b1p = range(N)\nwhile idx_ads0 < len(list_7b1p):\n    _ = list_7b1p[idx_ads0]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    var_wub = 73\n    idx_ads0 = idx_ads0 + 1\nokz = 0\nidx_t19g = 0\nlist_jrlo = mo\nwhile idx_t19g < len(list_jrlo):\n    i = list_jrlo[idx_t19g]\n    if i[1] == \"JPY\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n    idx_t19g = idx_t19g + 1\n    var_w2x = 7\n\nprint(okz)\n", "id": "Add_IndependentVar_sample_from_s554393427_to_52", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = 0\nidx_ph9r = 0\nlist_p39a = range(N // R + 1)\nwhile idx_ph9r < len(list_p39a):\n    i = list_p39a[idx_ph9r]\n    var_628 = 22\n    idx_ogca = 0\n    list_g4kb = range((N-i * R) // G + 1)\n    while idx_ogca < len(list_g4kb):\n        j = list_g4kb[idx_ogca]\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            score += 1\n        idx_ogca = idx_ogca + 1\n    idx_ph9r = idx_ph9r + 1\n\nprint(score)\n", "id": "Add_IndependentVar_sample_from_s897879131_to_53", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    var_i8e = 85\n    idx_ucjq = 0\n    list_2a1m = range(n)\n    while idx_ucjq < len(list_2a1m):\n        i = list_2a1m[idx_ucjq]\n        num = getN()\n        num = -num\n        if num >= dp[-1] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        idx_ucjq = idx_ucjq + 1\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    idx_dhp4 = 0\n    list_1zqs = range(n)\n    var_6sy = 0\n    while idx_dhp4 < len(list_1zqs):\n        _ = list_1zqs[idx_dhp4]\n        solve()\n        idx_dhp4 = idx_dhp4 + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n\n    solve()\n    var_3by = 80\n", "id": "Add_IndependentVar_sample_from_s344468705_to_54", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nidx_z165 = 0\nlist_cmik = range(M)\nwhile idx_z165 < len(list_cmik):\n    _ = list_cmik[idx_z165]\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\n    var_jce = 92\n    idx_z165 = idx_z165 + 1\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nidx_83hk = 0\nlist_hktf = range(1, N+1)\nwhile idx_83hk < len(list_hktf):\n    i = list_hktf[idx_83hk]\n    if col[i] < 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            idx_rji0 = 0\n            list_egdl = G[x]\n            while idx_rji0 < len(list_egdl):\n                y = list_egdl[idx_rji0]\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n                idx_rji0 = idx_rji0 + 1\n        cnt += 1\n    idx_83hk = idx_83hk + 1\n    var_ov9 = 1\ncmax = max(col)\nprint(cmax)\n", "id": "Add_IndependentVar_sample_from_s233116196_to_55", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_wgvn = 0\nlist_2etm = range(memTime)\nwhile idx_wgvn < len(list_2etm):\n    color = list_2etm[idx_wgvn]\n    var_qcn = 40\n    member = memLate[color]\n    if member // 400 >= 8 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\n    idx_wgvn = idx_wgvn + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    minColor = 1\n    var_tsy = 87\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "Add_IndependentVar_sample_from_s964794058_to_56", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n    idx_czyp = 0\n    list_3n1b = range(max(X, Y) + 1)\n    while idx_czyp < len(list_3n1b):\n        k = list_3n1b[idx_czyp]\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ans = total\n        idx_czyp = idx_czyp + 1\n\n    print(ans)\n    var_y18 = 59\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n    main()\n    var_c4x = 26\n", "id": "Add_IndependentVar_sample_from_s724326345_to_57", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n    var_49u = 93\n    idx_kjx9 = 0\n    list_q6ok = range(1, N + 1)\n    while idx_kjx9 < len(list_q6ok):\n        i = list_q6ok[idx_kjx9]\n        if i in s and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            ans = i\n        idx_kjx9 = idx_kjx9 + 1\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    main()\n    var_a9k = 59\n", "id": "Add_IndependentVar_sample_from_s878873709_to_58", "old_id": "s878873709"}
{"code": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nidx_kznt = 0\nlist_iqn9 = S\nwhile idx_kznt < len(list_iqn9):\n    s = list_iqn9[idx_kznt]\n    var_xy0 = 41\n    if s != tmp and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ans += 1\n        tmp = s\n    idx_kznt = idx_kznt + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s174910557_to_59", "old_id": "s174910557"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_ko8g = 0\nlist_ul2a = range(N-K)\nwhile idx_ko8g < len(list_ul2a):\n    i = list_ul2a[idx_ko8g]\n    if score[mae] < score[usiro] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n    idx_ko8g = idx_ko8g + 1\n    var_z51 = 34\n", "id": "Add_IndependentVar_sample_from_s182651529_to_60", "old_id": "s182651529"}
{"code": "n = int(input())\nr = 0\nidx_wxd2 = 0\nlist_wrlx = range(n)\nwhile idx_wxd2 < len(list_wrlx):\n    ii = list_wrlx[idx_wxd2]\n    var_g0f = 46\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        r += (ii+1)\n    idx_wxd2 = idx_wxd2 + 1\nprint(r)\n", "id": "Add_IndependentVar_sample_from_s702834515_to_61", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        print(*inp, end=end)\n    var_xb4 = 43\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n    idx_x72j = 0\n    list_3mu4 = range(N)\n    while idx_x72j < len(list_3mu4):\n        i = list_3mu4[idx_x72j]\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n        idx_x72j = idx_x72j + 1\n\n    X = input()\n    xi = 0\n    idx_ms4b = 0\n    list_a1yw = range(N)\n    var_rtf = 33\n    while idx_ms4b < len(list_a1yw):\n        i = list_a1yw[idx_ms4b]\n        if s[i] == X and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            xi = i\n            break\n        idx_ms4b = idx_ms4b + 1\n\n    ans = 0\n    idx_oi3h = 0\n    list_9gey = range(N)\n    while idx_oi3h < len(list_9gey):\n        i = list_9gey[idx_oi3h]\n        if xi < i and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            ans += t[i]\n        idx_oi3h = idx_oi3h + 1\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    main()\n    var_flj = 43\n", "id": "Add_IndependentVar_sample_from_s664563518_to_62", "old_id": "s664563518"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\nidx_zmd3 = 0\nlist_5zf2 = range(N-1)\nwhile idx_zmd3 < len(list_5zf2):\n    i = list_5zf2[idx_zmd3]\n    if H[i] >= H[i+1] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    var_cx7 = 91\n    idx_zmd3 = idx_zmd3 + 1\nif count_tmp > count_best and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n    count_best = count_tmp\n    var_lax = 38\n\nprint(count_best)\n", "id": "Add_IndependentVar_sample_from_s895229833_to_63", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nidx_y941 = 0\nlist_5ca4 = range(10)\nwhile idx_y941 < len(list_5ca4):\n    i = list_5ca4[idx_y941]\n    idx_p1za = 0\n    list_sirh = list(enumerate(map(int, next(X).split())))\n    while idx_p1za < len(list_sirh):\n        j, c = list_sirh[idx_p1za]\n        C[i, j] = c\n        idx_p1za = idx_p1za + 1\n    idx_y941 = idx_y941 + 1\n    var_47p = 1\nA = np.zeros((h, w), dtype=int)\nidx_q9oy = 0\nlist_td0h = range(h)\nwhile idx_q9oy < len(list_td0h):\n    i = list_td0h[idx_q9oy]\n    idx_b21t = 0\n    list_xmeb = list(enumerate(map(int, next(X).split())))\n    while idx_b21t < len(list_xmeb):\n        j, a = list_xmeb[idx_b21t]\n        A[i, j] = a\n        idx_b21t = idx_b21t + 1\n    var_sln = 89\n    idx_q9oy = idx_q9oy + 1\n\nG = nx.DiGraph(C)\nd = {}\nidx_hsjv = 0\nlist_m4pc = range(10)\nwhile idx_hsjv < len(list_m4pc):\n    i = list_m4pc[idx_hsjv]\n    var_d3x = 47\n    if i == 1 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n    idx_hsjv = idx_hsjv + 1\n\ns = 0\nidx_ln3d = 0\nlist_a32n = chain.from_iterable(A)\nwhile idx_ln3d < len(list_a32n):\n    a = list_a32n[idx_ln3d]\n    var_suo = 75\n    if a == -1 or a == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        continue\n    s += d[a]\n    idx_ln3d = idx_ln3d + 1\nprint(s)\n", "id": "Add_IndependentVar_sample_from_s749244504_to_64", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nidx_3bg1 = 0\nlist_sgw7 = range(1, n)\nwhile idx_3bg1 < len(list_sgw7):\n    i = list_sgw7[idx_3bg1]\n    if a[i] == \"C\" and a[i-1] == \"A\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\n    idx_3bg1 = idx_3bg1 + 1\n    var_h5e = 19\nidx_px93 = 0\nlist_5ks1 = range(k)\nwhile idx_px93 < len(list_5ks1):\n    w = list_5ks1[idx_px93]\n    var_53o = 93\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n    idx_px93 = idx_px93 + 1\n", "id": "Add_IndependentVar_sample_from_s759499751_to_65", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    var_c50 = 20\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_835t = 0\n    list_zs2k = range(H)\n    while idx_835t < len(list_zs2k):\n        _ = list_zs2k[idx_835t]\n        ret.append(list(map(int, readline().split())))\n        idx_835t = idx_835t + 1\n    var_ucn = 80\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n    if pad is None and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ret = []\n        idx_7ywq = 0\n        list_ildx = range(H)\n        while idx_7ywq < len(list_ildx):\n            _ = list_ildx[idx_7ywq]\n            ret.append([replace[s] for s in read()[:-1]])\n            idx_7ywq = idx_7ywq + 1\n\n    else:\n        ret = [[pad] * (W + 2)]\n        idx_fdlx = 0\n        list_dtl1 = range(H)\n        while idx_fdlx < len(list_dtl1):\n            _ = list_dtl1[idx_fdlx]\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n            idx_fdlx = idx_fdlx + 1\n        ret.append([pad] * (W + 2))\n    var_mwx = 55\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    var_l8e = 28\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        D[i][j] = c\n        idx_u6wc = 0\n        list_a0l2 = product([-2, -1, 0, 1, 2], repeat=2)\n        while idx_u6wc < len(list_a0l2):\n            di, dj = list_a0l2[idx_u6wc]\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n            idx_u6wc = idx_u6wc + 1\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        continue\n    D[i][j] = c\n    idx_s70t = 0\n    list_sh6u = product([-2, -1, 0, 1, 2], repeat=2)\n    var_92a = 69\n    while idx_s70t < len(list_sh6u):\n        di, dj = list_sh6u[idx_s70t]\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n        idx_s70t = idx_s70t + 1\n\nprint(D[ti][tj])\n", "id": "Add_IndependentVar_sample_from_s124725275_to_66", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_jifg = 0\nlist_eql4 = range(n)\nwhile idx_jifg < len(list_eql4):\n    i = list_eql4[idx_jifg]\n    if p[i] != p_copy[i] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        count += 1\n    var_d6n = 64\n    idx_jifg = idx_jifg + 1\nif count == 0 or count == 2 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print(\"YES\")\n    var_ag9 = 69\nelse:\n    print(\"NO\")\n    var_1kw = 33\n", "id": "Add_IndependentVar_sample_from_s763097776_to_67", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\nidx_b7wd = 0\nlist_x3wb = range(1, 2**10)\nwhile idx_b7wd < len(list_x3wb):\n    i = list_x3wb[idx_b7wd]\n    tmp = 0\n    var_4bf = 34\n    lst = [0]*n\n    idx_cr7t = 0\n    list_owkt = range(10)\n    while idx_cr7t < len(list_owkt):\n        j = list_owkt[idx_cr7t]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            idx_wxtu = 0\n            list_h0z4 = range(n)\n            while idx_wxtu < len(list_h0z4):\n                k = list_h0z4[idx_wxtu]\n                lst[k] += F[k][j]\n                idx_wxtu = idx_wxtu + 1\n        idx_cr7t = idx_cr7t + 1\n    idx_pdxo = 0\n    list_7oq8 = range(n)\n    while idx_pdxo < len(list_7oq8):\n        k = list_7oq8[idx_pdxo]\n        tmp += P[k][lst[k]]\n        idx_pdxo = idx_pdxo + 1\n    ans = max(ans, tmp)\n    idx_b7wd = idx_b7wd + 1\n\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s906994739_to_68", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nidx_g6e3 = 0\nlist_gbih = range(-1, 102)\nwhile idx_g6e3 < len(list_gbih):\n    i = list_gbih[idx_g6e3]\n    var_970 = 86\n    if i in p and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        continue\n    if not (abs(X-i) in candidates.keys()) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n    idx_g6e3 = idx_g6e3 + 1\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "Add_IndependentVar_sample_from_s957164965_to_69", "old_id": "s957164965"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = 9999999999\nidx_dgpj = 0\nlist_4vj9 = range(1, 101)\nwhile idx_dgpj < len(list_4vj9):\n    i = list_4vj9[idx_dgpj]\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        m = c\n    var_kdt = 78\n    idx_dgpj = idx_dgpj + 1\n\nprint(m)\n", "id": "Add_IndependentVar_sample_from_s880494034_to_70", "old_id": "s880494034"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\nidx_vib7 = 0\nlist_9av1 = range(1 << d)\nwhile idx_vib7 < len(list_9av1):\n    bit = list_9av1[idx_vib7]\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n    var_vqi = 27\n    idx_lzer = 0\n    list_fnyh = range(d)\n    while idx_lzer < len(list_fnyh):\n        i = list_fnyh[idx_lzer]\n        if bit & (1 << i) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n        idx_lzer = idx_lzer + 1\n    if sum < g and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n    if sum >= g and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        ans = min(ans, count)\n    idx_vib7 = idx_vib7 + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s591424993_to_71", "old_id": "s591424993"}
{"code": "n = int(input())\nidx_7sxy = 0\nlist_40gk = range(1, 10 ** 5)\nwhile idx_7sxy < len(list_40gk):\n    i = list_40gk[idx_7sxy]\n    if i * i > n and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print((i-1) * (i-1))\n        exit()\n    var_6nh = 8\n    idx_7sxy = idx_7sxy + 1\n", "id": "Add_IndependentVar_sample_from_s666154520_to_72", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_gbuk = 0\nlist_iy02 = s\nwhile idx_gbuk < len(list_iy02):\n    i = list_iy02[idx_gbuk]\n    if i == \")\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        left += 1\n    else:\n        break\n    idx_gbuk = idx_gbuk + 1\n    var_axc = 22\n\nleft1 = 0\nright1 = 0\nidx_r43n = 0\nlist_ocij = range(left, n)\nwhile idx_r43n < len(list_ocij):\n    i = list_ocij[idx_r43n]\n    if s[i] == \"(\" and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n    var_6qk = 31\n    idx_r43n = idx_r43n + 1\n\nleft1 += left\nidx_71tn = 0\nlist_6m7t = range(right1)\nwhile idx_71tn < len(list_6m7t):\n    i = list_6m7t[idx_71tn]\n    s += \")\"\n    var_50r = 84\n    idx_71tn = idx_71tn + 1\nidx_3m4t = 0\nlist_owi2 = range(left1)\nwhile idx_3m4t < len(list_owi2):\n    i = list_owi2[idx_3m4t]\n    var_1d7 = 79\n    s = \"(\" + s\n    idx_3m4t = idx_3m4t + 1\n\nprint(s)\n", "id": "Add_IndependentVar_sample_from_s952876397_to_73", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\nidx_6qul = 0\nlist_p5x2 = range(N)\nwhile idx_6qul < len(list_p5x2):\n    i = list_p5x2[idx_6qul]\n    idx_rn7q = 0\n    var_dln = 86\n    list_adck = range(T)\n    while idx_rn7q < len(list_adck):\n        j = list_adck[idx_rn7q]\n        if j < L[i][0] and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        idx_rn7q = idx_rn7q + 1\n    idx_6qul = idx_6qul + 1\n\nused = []\nB = dp[N][T-1]\nj = T-1\nidx_qatj = 0\nlist_8s1n = range(N-1, -1, -1)\nwhile idx_qatj < len(list_8s1n):\n    i = list_8s1n[idx_qatj]\n    if B == dp[i][j] and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        continue\n    B -= L[i][1]\n    used.append(i)\n    var_spf = 92\n    j -= L[i][0]\n    idx_qatj = idx_qatj + 1\n\nans = dp[N][T-1]\nc = 0\nidx_8hmt = 0\nlist_ozjr = range(N)\nwhile idx_8hmt < len(list_ozjr):\n    i = list_ozjr[idx_8hmt]\n    if i in used and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        continue\n    var_lb8 = 22\n    c = max(c, L[i][1])\n    idx_8hmt = idx_8hmt + 1\n\nprint(ans+c)\n", "id": "Add_IndependentVar_sample_from_s793709854_to_74", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nidx_okfn = 0\nlist_mhf7 = range(101)\nwhile idx_okfn < len(list_mhf7):\n    i = list_mhf7[idx_okfn]\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    var_0l1 = 10\n    if sum(tmp) < ans and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        ans = sum(tmp)\n    idx_okfn = idx_okfn + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s246280701_to_75", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nidx_h8m6 = 0\nlist_q97m = range(N-2)\nwhile idx_h8m6 < len(list_q97m):\n    i = list_q97m[idx_h8m6]\n    idx_vlyx = 0\n    list_ip5v = range(i+1, N-1)\n    var_v90 = 62\n    while idx_vlyx < len(list_ip5v):\n        j = list_ip5v[idx_vlyx]\n        idx_8hgn = 0\n        list_vc51 = range(j+1, N)\n        while idx_8hgn < len(list_vc51):\n            k = list_vc51[idx_8hgn]\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                continue\n            if a+b > c and b+c > a and c+a > b and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                ans += 1\n            idx_8hgn = idx_8hgn + 1\n        idx_vlyx = idx_vlyx + 1\n    idx_h8m6 = idx_h8m6 + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s590045523_to_76", "old_id": "s590045523"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nidx_7ipo = 0\nlist_3zwa = range(sqN)\nwhile idx_7ipo < len(list_3zwa):\n    i = list_3zwa[idx_7ipo]\n    var_8vw = 46\n    if N % (sqN-i) == 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        print(int(N/(sqN-i)+sqN-i)-2)\n        break\n    idx_7ipo = idx_7ipo + 1\n", "id": "Add_IndependentVar_sample_from_s538657784_to_77", "old_id": "s538657784"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nidx_n1xq = 0\nlist_4bjp = Hs\nwhile idx_n1xq < len(list_4bjp):\n    H = list_4bjp[idx_n1xq]\n    if maxH <= H and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        ans += 1\n        maxH = H\n    var_zx3 = 84\n    idx_n1xq = idx_n1xq + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s002779582_to_78", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nidx_nx12 = 0\nlist_jymu = range(h)\nwhile idx_nx12 < len(list_jymu):\n    _ = list_jymu[idx_nx12]\n    a = list(map(str, input()))\n    l.append(a)\n    idx_nx12 = idx_nx12 + 1\n    var_ice = 89\n\ntmp = 0\nidx_esiz = 0\nlist_kw26 = range(h)\nwhile idx_esiz < len(list_kw26):\n    i = list_kw26[idx_esiz]\n    var_x0h = 1\n    idx_8e1v = 0\n    list_bhwo = range(w)\n    while idx_8e1v < len(list_bhwo):\n        j = list_bhwo[idx_8e1v]\n        if l[i][j] == \"#\" and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n        idx_8e1v = idx_8e1v + 1\n    idx_esiz = idx_esiz + 1\n\n\nprint(\"Possible\")\n", "id": "Add_IndependentVar_sample_from_s331817031_to_79", "old_id": "s331817031"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nidx_vy58 = 0\nlist_3o72 = range(n)\nwhile idx_vy58 < len(list_3o72):\n    i = list_3o72[idx_vy58]\n    if a[i] < ope[j][1] and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\n    var_pal = 22\n    idx_vy58 = idx_vy58 + 1\nprint(sum(a))\n", "id": "Add_IndependentVar_sample_from_s289483518_to_80", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_j37h = 0\nlist_2d4u = selected\nwhile idx_j37h < len(list_2d4u):\n    t, d = list_2d4u[idx_j37h]\n    if t not in memo and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n    idx_j37h = idx_j37h + 1\n    var_n8d = 37\n\ncnt_type = len(memo)\nidx_yrho = 0\nlist_6rd0 = info[k:]\nwhile idx_yrho < len(list_6rd0):\n    t, d = list_6rd0[idx_yrho]\n    var_x6z = 97\n    if t not in memo and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        memo[t] = 1\n        unselected_only.append(d)\n    idx_yrho = idx_yrho + 1\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nidx_3fqc = 0\nlist_k0be = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_3fqc < len(list_k0be):\n    i = list_k0be[idx_3fqc]\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    var_3r8 = 9\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_3fqc = idx_3fqc + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s804484425_to_81", "old_id": "s804484425"}
