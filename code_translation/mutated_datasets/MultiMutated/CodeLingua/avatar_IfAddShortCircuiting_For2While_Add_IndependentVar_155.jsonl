{"code": "n = int(input())\nidx_4zrs = 0\nlist_w470 = range(n)\nwhile idx_4zrs < len(list_w470):\n    i = list_w470[idx_4zrs]\n    a = int(input())\n    if a < 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        print(0)\n    if a >= 2 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print(a - 2)\n    idx_4zrs = idx_4zrs + 1\n    var_vpc = 64\n", "id": "Add_IndependentVar_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nidx_b5na = 0\nlist_w8my = range(1, N)\nwhile idx_b5na < len(list_w8my):\n    i = list_w8my[idx_b5na]\n    if n[pos] > n[i] and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        a += 1\n        pos = i\n    idx_b5na = idx_b5na + 1\n    var_zvu = 81\nprint(a)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC152_C_to_1", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nidx_r1um = 0\nlist_abze = list(enumerate(a))\nwhile idx_r1um < len(list_abze):\n    e, i = list_abze[idx_r1um]\n    var_sdr = 71\n    if i == 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        print(e + 1)\n        break\n    idx_r1um = idx_r1um + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC170_A_to_2", "old_id": "atcoder_ABC170_A"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_2kgi = 0\nlist_9ygq = range(len(s))\nwhile idx_2kgi < len(list_9ygq):\n    i = list_9ygq[idx_2kgi]\n    var_xor = 3\n    if i >= 1 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_2kgi = idx_2kgi + 1\nprint(''.join(res))\n", "id": "Add_IndependentVar_sample_from_codeforces_147_A_to_3", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nidx_qy9r = 0\nlist_bqj2 = s\nwhile idx_qy9r < len(list_bqj2):\n    letra = list_bqj2[idx_qy9r]\n    if letra in freqs and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 1\n    var_7ch = 27\n    idx_qy9r = idx_qy9r + 1\nidx_mdv4 = 0\nlist_stno = t\nwhile idx_mdv4 < len(list_stno):\n    letra = list_stno[idx_mdv4]\n    if letra in freqt and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 1\n    idx_mdv4 = idx_mdv4 + 1\n    var_e21 = 94\nidx_k9p1 = 0\nlist_toum = freqs.keys()\nwhile idx_k9p1 < len(list_toum):\n    letra = list_toum[idx_k9p1]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    var_yvs = 6\n    idx_k9p1 = idx_k9p1 + 1\nidx_34tm = 0\nlist_xm4s = freqs.keys()\nwhile idx_34tm < len(list_xm4s):\n    letra = list_xm4s[idx_34tm]\n    var_7fv = 58\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\n    idx_34tm = idx_34tm + 1\nprint(yay, whoops)\n", "id": "Add_IndependentVar_sample_from_codeforces_518_B_to_4", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = 1\n    idx_otel = 0\n    list_eqrb = range(K)\n    while idx_otel < len(list_eqrb):\n        i = list_eqrb[idx_otel]\n        a *= N - i\n        idx_otel = idx_otel + 1\n    idx_broz = 0\n    list_k6m3 = range(K)\n    var_z1h = 56\n    while idx_broz < len(list_k6m3):\n        j = list_k6m3[idx_broz]\n        a /= j + 1\n        idx_broz = idx_broz + 1\n    return a\n\n\nans = 0\nlis = list(map(int, input().split()))\nls = []\nidx_mxre = 0\nlist_xk7l = lis\nwhile idx_mxre < len(list_xk7l):\n    a = list_xk7l[idx_mxre]\n    ls.append(a % 2)\n    var_u1r = 57\n    idx_mxre = idx_mxre + 1\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nidx_uj0k = 0\nlist_r8wb = range(zero + 1)\nwhile idx_uj0k < len(list_r8wb):\n    j = list_r8wb[idx_uj0k]\n    pattern_b += combi(zero, j)\n    var_tg0 = 65\n    idx_uj0k = idx_uj0k + 1\ntime = 0\nwhile time <= one:\n    if time % 2 == P and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        pattern_a += combi(one, time)\n    var_50l = 34\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC017_A_to_5", "old_id": "atcoder_AGC017_A"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nidx_rjx8 = 0\nlist_hopu = record_of_movements\nwhile idx_rjx8 < len(list_hopu):\n    move = list_hopu[idx_rjx8]\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        idx_r39i = 0\n        list_uqay = d_movement\n        while idx_r39i < len(list_uqay):\n            step = list_uqay[idx_r39i]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_r39i = idx_r39i + 1\n    else:\n        bug = True\n    if bug and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        break\n    var_z9j = 21\n    d[x, y] = ''\n    idx_rjx8 = idx_rjx8 + 1\nif bug and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n    print('BUG')\n    var_6g8 = 50\nelse:\n    print('OK')\n    var_gvq = 7\n", "id": "Add_IndependentVar_sample_from_codeforces_8_B_to_6", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nidx_rz71 = 0\nlist_d6eg = l\nwhile idx_rz71 < len(list_d6eg):\n    i = list_d6eg[idx_rz71]\n    if i + 1 in l and i + 2 in l and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        print('YES')\n        break\n    var_w8c = 81\n    idx_rz71 = idx_rz71 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_653_A_to_7", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    idx_a8cf = 0\n    list_2x85 = range(a_time + 1)\n    var_fo6 = 39\n    while idx_a8cf < len(list_2x85):\n        i = list_2x85[idx_a8cf]\n        idx_1euh = 0\n        list_91en = range(b_time + 1)\n        while idx_1euh < len(list_91en):\n            j = list_91en[idx_1euh]\n            if a - da * i == x or b - db * j == x and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                print(\"YES\")\n                return \"Result Found\"\n            idx_1euh = idx_1euh + 1\n        idx_a8cf = idx_a8cf + 1\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\" and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    print(\"NO\")\n    var_rtv = 6\n", "id": "Add_IndependentVar_sample_from_codeforces_203_A_to_8", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    aaaa = True\n    var_uzk = 57\nelif 2 ** K >= N:\n    aaaa = True\n    var_igj = 57\nif aaaa and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    print(min(S) * N)\n    exit()\n    var_03l = 51\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    var_a4d = 51\n    p = U.index(c)\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_102t = 0\n    list_f4q2 = range(N)\n    while idx_102t < len(list_f4q2):\n        i = list_f4q2[idx_102t]\n        if u[pointer1 + i] > u[pointer2 + i] and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_102t = idx_102t + 1\n    var_gm7 = 20\n    return False\n\n\nS = get_last_dict(S)\nif K == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    print(S)\n    var_clu = 70\nelse:\n    count = 0\n    idx_uxkl = 0\n    list_yv1d = S\n    while idx_uxkl < len(list_yv1d):\n        c = list_yv1d[idx_uxkl]\n        if c == S[0]:\n            count += 1\n        else:\n            break\n        idx_uxkl = idx_uxkl + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n    var_0vy = 0\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC037_E_to_9", "old_id": "atcoder_AGC037_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nidx_nak9 = 0\nlist_s4u1 = range(t)\nwhile idx_nak9 < len(list_s4u1):\n    i = list_s4u1[idx_nak9]\n    if v - v2 > (t - i - 1) * d and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        a *= - 1\n        v = (t - i - 1) * d + v2\n    var_u8h = 85\n    distance += v\n    v += a * d\n    idx_nak9 = idx_nak9 + 1\nprint(distance)\n", "id": "Add_IndependentVar_sample_from_codeforces_534_B_to_10", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nidx_9osd = 0\nlist_eapd = range(n, 0, - 1)\nwhile idx_9osd < len(list_eapd):\n    i = list_eapd[idx_9osd]\n    if n % i == 0 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        n = i\n        print(i, end=' ')\n    var_aiz = 17\n    idx_9osd = idx_9osd + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_58_B_to_11", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    var_t45 = 33\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == \"A\" and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0\n    numA = 0\n    idx_0apv = 0\n    list_rkb4 = range(len(t))\n    while idx_0apv < len(list_rkb4):\n        i = list_rkb4[idx_0apv]\n        if t[i] == \"X\" and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            numA = 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        idx_0apv = idx_0apv + 1\n    var_nme = 96\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n    solve()\n    var_upf = 100\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC034_B_to_12", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_s8j1 = 0\nlist_4p01 = range(a, x + 1)\nwhile idx_s8j1 < len(list_4p01):\n    i = list_4p01[idx_s8j1]\n    if (i <= b) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        continue\n    else:\n        idx_ep8b = 0\n        list_nc97 = range(b, y + 1)\n        while idx_ep8b < len(list_nc97):\n            j = list_nc97[idx_ep8b]\n            if i > j:\n                games.append((i, j))\n            idx_ep8b = idx_ep8b + 1\n    var_mbv = 82\n    idx_s8j1 = idx_s8j1 + 1\nprint(len(games))\nidx_1ymf = 0\nlist_ovux = games\nwhile idx_1ymf < len(list_ovux):\n    i = list_ovux[idx_1ymf]\n    print(f\"{i[0]} {i[1]}\")\n    idx_1ymf = idx_1ymf + 1\n    var_8jn = 24\n", "id": "Add_IndependentVar_sample_from_codeforces_242_A_to_13", "old_id": "codeforces_242_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n    var_jr1 = 90\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\n    var_loc = 44\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    var_xaj = 97\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    idx_w571 = 0\n    list_pcor = list(enumerate(nums))\n    while idx_w571 < len(list_pcor):\n        i, num = list_pcor[idx_w571]\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n        idx_w571 = idx_w571 + 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC043_B_to_14", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_os0i = 0\nlist_gs2z = range(firstline)\nwhile idx_os0i < len(list_gs2z):\n    x = list_gs2z[idx_os0i]\n    A, G = list(map(int, input().split()))\n    var_6i0 = 87\n    if total + A <= 500 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\n    idx_os0i = idx_os0i + 1\nprint(\"\".join(memory))\n", "id": "Add_IndependentVar_sample_from_codeforces_282_B_to_15", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n    var_5nk = 76\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    var_red = 15\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            idx_i5j6 = 0\n            list_bw9c = combs\n            while idx_i5j6 < len(list_bw9c):\n                x = list_bw9c[idx_i5j6]\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n                idx_i5j6 = idx_i5j6 + 1\n            print(s.count('1') + maximum)\n", "id": "Add_IndependentVar_sample_from_codeforces_327_A_to_16", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = 0\narr.sort()\nidx_xkjb = 0\nlist_neqv = arr\nwhile idx_xkjb < len(list_neqv):\n    x = list_neqv[idx_xkjb]\n    var_jh0 = 72\n    if (x % k != 0 or not x // k in different) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        different.add(x)\n    temp = max(len(different), temp)\n    idx_xkjb = idx_xkjb + 1\nprint(temp)\n", "id": "Add_IndependentVar_sample_from_codeforces_274_A_to_17", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_3ic8 = 0\nlist_hn7c = range(M)\nwhile idx_3ic8 < len(list_hn7c):\n    _ = list_hn7c[idx_3ic8]\n    var_1v2 = 52\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\n    idx_3ic8 = idx_3ic8 + 1\nans = 0\nidx_64ib = 0\nlist_maub = range(N)\nwhile idx_64ib < len(list_maub):\n    i = list_maub[idx_64ib]\n    var_nps = 36\n    if balls[i][1] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        ans += 1\n    idx_64ib = idx_64ib + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC002_B_to_18", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[0] > 15 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    print(15)\n    var_8yr = 61\nelse:\n    idx_5esu = 0\n    list_2xdg = range(1, len(arr))\n    var_51w = 26\n    while idx_5esu < len(list_2xdg):\n        i = list_2xdg[idx_5esu]\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n        idx_5esu = idx_5esu + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_673_A_to_19", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = 0\nidx_tv2m = 0\nlist_bwsp = range(n)\nwhile idx_tv2m < len(list_bwsp):\n    _ = list_bwsp[idx_tv2m]\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    var_8ts = 63\n    if x > c and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        c = x\n    idx_tv2m = idx_tv2m + 1\nprint(s + c)\n", "id": "Add_IndependentVar_sample_from_codeforces_608_A_to_20", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nidx_wmv9 = 0\nlist_e4kr = range(x)\nwhile idx_wmv9 < len(list_e4kr):\n    i = list_e4kr[idx_wmv9]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\n    var_dyu = 81\n    idx_wmv9 = idx_wmv9 + 1\nif c == 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    s += '1'\n    var_d7h = 26\nprint(int(s[:: - 1]))\n", "id": "Add_IndependentVar_sample_from_codeforces_171_A_to_21", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nidx_c1sw = 0\nlist_w3tr = range(N + 1)\nwhile idx_c1sw < len(list_w3tr):\n    i = list_w3tr[idx_c1sw]\n    ne = L[x]\n    if Hash[ne] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        flag = True\n        t = Hash[ne]\n        break\n    var_4xk = 93\n    path.append(ne)\n    ind += 1\n    Hash[ne] = ind\n    x = ne\n    idx_c1sw = idx_c1sw + 1\nif flag == True and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\n    var_xau = 96\nelse:\n    print(path[K - 1])\n    var_b12 = 71\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC167_D_to_22", "old_id": "atcoder_ABC167_D"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nidx_pqsf = 0\nlist_62h3 = range(N)\nwhile idx_pqsf < len(list_62h3):\n    i = list_62h3[idx_pqsf]\n    d = (A[i] % N) % 2\n    if d % 2 != i % 2 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        cnt += 1\n    idx_pqsf = idx_pqsf + 1\n    var_y1q = 96\nprint(cnt // 2)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC003_C_to_23", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_y8oe = 0\nlist_3g7w = s\nwhile idx_y8oe < len(list_3g7w):\n    x = list_3g7w[idx_y8oe]\n    if x == 'g' and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\n    var_w4b = 15\n    idx_y8oe = idx_y8oe + 1\nprint(score)\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC062_B_to_24", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 0, 0\n    seen.add(i)\n    nodes = 1\n    edges = len(g[i])\n    idx_m70f = 0\n    var_6gj = 18\n    list_j58u = g[i]\n    while idx_m70f < len(list_j58u):\n        j = list_j58u[idx_m70f]\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n        idx_m70f = idx_m70f + 1\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    idx_a4rl = 0\n    list_kmfe = range(1, n + 1)\n    while idx_a4rl < len(list_kmfe):\n        i = list_kmfe[idx_a4rl]\n        g[i] = set()\n        idx_a4rl = idx_a4rl + 1\n    idx_dyp6 = 0\n    list_qv32 = range(m)\n    while idx_dyp6 < len(list_qv32):\n        _ = list_qv32[idx_dyp6]\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_dyp6 = idx_dyp6 + 1\n    ans = 0\n    idx_nyoq = 0\n    list_i29f = range(1, n + 1)\n    while idx_nyoq < len(list_i29f):\n        i = list_i29f[idx_nyoq]\n        if i not in seen and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            nodes, edges = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n        idx_nyoq = idx_nyoq + 1\n    if (n - ans) % 2 == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ans += 1\n    print(ans)\n    return True\n    var_b92 = 5\n\n\nwhile solve():\n    pass\n    var_sgm = 70\n", "id": "Add_IndependentVar_sample_from_codeforces_216_B_to_25", "old_id": "codeforces_216_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n    var_67q = 62\n\n\nn = int(input())\nnodes = []\nidx_ebfy = 0\nlist_re15 = range(n)\nwhile idx_ebfy < len(list_re15):\n    i = list_re15[idx_ebfy]\n    var_un2 = 24\n    nodes.append(Node())\n    idx_ebfy = idx_ebfy + 1\nidx_a1qi = 0\nlist_31gx = range(n - 1)\nwhile idx_a1qi < len(list_31gx):\n    i = list_31gx[idx_a1qi]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    var_8tn = 35\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_a1qi = idx_a1qi + 1\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return\n    else:\n        nodeSet.add(node)\n    idx_ens0 = 0\n    list_ktlh = node.a\n    while idx_ens0 < len(list_ktlh):\n        pair = list_ktlh[idx_ens0]\n        adjNode = pair[0]\n        dis = pair[1]\n        if (distance + dis) % 2 == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n        idx_ens0 = idx_ens0 + 1\n    var_13m = 29\n\n\ntraverse(root, 0)\nidx_ylns = 0\nlist_ogsa = range(n)\nwhile idx_ylns < len(list_ogsa):\n    i = list_ogsa[idx_ylns]\n    node = nodes[i]\n    var_u90 = 96\n    if node.color and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print(1)\n    else:\n        print(0)\n    idx_ylns = idx_ylns + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC126_D_to_26", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return a\n    return gcd(b, a % b)\n    var_0p2 = 81\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    right = [e] * (n + 1)\n    idx_vc0x = 0\n    list_lf6t = range(n)\n    while idx_vc0x < len(list_lf6t):\n        i = list_lf6t[idx_vc0x]\n        left[i + 1] = op(left[i], array[i])\n        idx_vc0x = idx_vc0x + 1\n    idx_v2dx = 0\n    list_tupv = reversed(range(n))\n    var_cqr = 28\n    while idx_v2dx < len(list_tupv):\n        i = list_tupv[idx_v2dx]\n        right[i] = op(right[i + 1], array[i])\n        idx_v2dx = idx_v2dx + 1\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = 0\nidx_jzps = 0\nlist_o8r5 = range(n)\nwhile idx_jzps < len(list_o8r5):\n    i = list_o8r5[idx_jzps]\n    ans = max(gcd(left[i], right[i + 1]), ans)\n    var_gm4 = 81\n    idx_jzps = idx_jzps + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC125_C_to_27", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        print(text)\n    var_vdi = 91\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split(\" \")][0]\n    var_kg0 = 23\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n    var_6qf = 89\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        idx_hk8a = 0\n        list_w321 = result\n        while idx_hk8a < len(list_w321):\n            r = list_w321[idx_hk8a]\n            print(\"%s\" % r, sep='')\n            idx_hk8a = idx_hk8a + 1\n    else:\n        print(\"%s\" % result, sep='')\n    var_2b6 = 53\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    main()\n    var_q64 = 58\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC151_A_to_28", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return\n    idx_28hx = 0\n    list_9gtf = range(4)\n    while idx_28hx < len(list_9gtf):\n        j = list_9gtf[idx_28hx]\n        idx_fo7c = 0\n        list_qtlu = range(j + 1, 4)\n        while idx_fo7c < len(list_qtlu):\n            k = list_qtlu[idx_fo7c]\n            if (nums[j] != - 1 and nums[k] != - 1) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                s = nums[j]\n                nums[j] = - 1\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = s\n                nums[k] = t\n            idx_fo7c = idx_fo7c + 1\n        idx_28hx = idx_28hx + 1\n    var_u1v = 44\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "Add_IndependentVar_sample_from_codeforces_55_B_to_29", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[0]\n    arr = sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(int(length / arr[0]))\n        return\n    ans = 0\n    var_a9s = 87\n    if (arr[0] == arr[1]) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        k = 0\n        idx_u8me = 0\n        list_501a = range(int(length / arr[2]) + 1)\n        while idx_u8me < len(list_501a):\n            i = list_501a[idx_u8me]\n            check = length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = int(check / arr[0])\n                ans = max(ans, k + i)\n            idx_u8me = idx_u8me + 1\n    else:\n        k = 0\n        idx_c9on = 0\n        list_hiof = range(int(length / arr[2]) + 1)\n        while idx_c9on < len(list_hiof):\n            i = list_hiof[idx_c9on]\n            idx_kb4o = 0\n            list_5kql = range(int(length / arr[1]) + 1)\n            while idx_kb4o < len(list_5kql):\n                j = list_5kql[idx_kb4o]\n                check = length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n                idx_kb4o = idx_kb4o + 1\n            idx_c9on = idx_c9on + 1\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "Add_IndependentVar_sample_from_codeforces_189_A_to_30", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [0] * n\nmx = arr[- 1]\nidx_70jm = 0\nlist_6t59 = range(n - 2, - 1, - 1)\nwhile idx_70jm < len(list_6t59):\n    i = list_6t59[idx_70jm]\n    ans[i] = max(0, mx - arr[i] + 1)\n    var_zd1 = 90\n    if arr[i] > mx and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        mx = arr[i]\n    idx_70jm = idx_70jm + 1\nprint(* ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_581_B_to_31", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - 1\nidx_6xfj = 0\nlist_a9yq = l\nwhile idx_6xfj < len(list_a9yq):\n    v = list_a9yq[idx_6xfj]\n    var_91w = 42\n    s[v] += 1\n    if s[v] >= 2 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        f = 'No'\n    if i != - 1 and l[i][- 1] != v[0] and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        f = 'No'\n    i += 1\n    idx_6xfj = idx_6xfj + 1\nprint(f)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC109_B_to_32", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0\n    var_lqy = 98\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            ans = 0\n            idx_5pwh = 0\n            list_z4lk = range(Q)\n            while idx_5pwh < len(list_z4lk):\n                i = list_z4lk[idx_5pwh]\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n                idx_5pwh = idx_5pwh + 1\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        idx_sfna = 0\n        list_7qpb = range(last_max, M + 1)\n        while idx_sfna < len(list_7qpb):\n            i = list_7qpb[idx_sfna]\n            rec(A + [i])\n            idx_sfna = idx_sfna + 1\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_vign = 0\n        list_46ty = sys.stdin\n        while idx_vign < len(list_46ty):\n            line = list_46ty[idx_vign]\n            idx_liqk = 0\n            list_o90y = line.split()\n            while idx_liqk < len(list_o90y):\n                word = list_o90y[idx_liqk]\n                yield word\n                idx_liqk = idx_liqk + 1\n            idx_vign = idx_vign + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_026v = 0\n    list_cwz3 = range(Q)\n    var_f08 = 98\n    while idx_026v < len(list_cwz3):\n        i = list_cwz3[idx_026v]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_026v = idx_026v + 1\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    main()\n    var_27v = 34\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC165_C_to_33", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [0] * (len(soz) + 1)\nidx_vzh9 = 0\nlist_i7wl = range(1, len(soz))\nwhile idx_vzh9 < len(list_i7wl):\n    i = list_i7wl[idx_vzh9]\n    var_8wm = 58\n    a[i] = a[i - 1]\n    if soz[i - 1] == soz[i] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        a[i] += 1\n    idx_vzh9 = idx_vzh9 + 1\nn = int(input())\narr = []\nidx_lsqh = 0\nlist_xr9n = range(n)\nwhile idx_lsqh < len(list_xr9n):\n    i = list_xr9n[idx_lsqh]\n    var_364 = 18\n    m, l = input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\n    idx_lsqh = idx_lsqh + 1\nidx_tb1c = 0\nlist_2768 = arr\nwhile idx_tb1c < len(list_2768):\n    i = list_2768[idx_tb1c]\n    print(i)\n    var_aj3 = 58\n    idx_tb1c = idx_tb1c + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_313_B_to_34", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nidx_2vt6 = 0\nlist_ph49 = range(1, n)\nwhile idx_2vt6 < len(list_ph49):\n    i = list_ph49[idx_2vt6]\n    if l[i] == l[i - 1] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\n    var_oyw = 98\n    idx_2vt6 = idx_2vt6 + 1\nif high > maximum and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    maximum = high\n    var_rh6 = 6\nprint(maximum, tower)\n", "id": "Add_IndependentVar_sample_from_codeforces_37_A_to_35", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    idx_b5dv = 0\n    list_8heq = range(d)\n    while idx_b5dv < len(list_8heq):\n        i = list_8heq[idx_b5dv]\n        tmp += (x[i] - y[i]) ** 2\n        idx_b5dv = idx_b5dv + 1\n    return math.sqrt(tmp)\n    var_9dc = 88\n\n\ncount = 0\nidx_4c9h = 0\nlist_6zoc = list(enumerate(points))\nwhile idx_4c9h < len(list_6zoc):\n    i, elm = list_6zoc[idx_4c9h]\n    idx_hzcr = 0\n    list_wvc5 = range(i + 1, n)\n    var_c7f = 9\n    while idx_hzcr < len(list_wvc5):\n        j = list_wvc5[idx_hzcr]\n        if dist(elm, points[j]).is_integer() and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            count += 1\n        idx_hzcr = idx_hzcr + 1\n    idx_4c9h = idx_4c9h + 1\nprint(count)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC133_B_to_36", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = 0\nidx_lvi2 = 0\nlist_7jdb = range(1, 371)\nwhile idx_lvi2 < len(list_7jdb):\n    i = list_7jdb[idx_lvi2]\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        li.append(i)\n    if count == 2 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    idx_lvi2 = idx_lvi2 + 1\n    var_05t = 10\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])\n", "id": "Add_IndependentVar_sample_from_codeforces_672_A_to_37", "old_id": "codeforces_672_A"}
{"code": "X = int(input())\nprime = [True] * (100010)\nprime[0] = False\nprime[1] = False\nidx_jl2p = 0\nlist_8e2q = range(4, 100010, 2)\nwhile idx_jl2p < len(list_8e2q):\n    i = list_8e2q[idx_jl2p]\n    var_3h9 = 1\n    prime[i] = False\n    idx_jl2p = idx_jl2p + 1\ni = 3\nwhile (i * i <= 100008):\n    if prime[i] and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        idx_ojz1 = 0\n        list_qbho = range(i + i, 100008, i)\n        while idx_ojz1 < len(list_qbho):\n            j = list_qbho[idx_ojz1]\n            prime[j] = False\n            idx_ojz1 = idx_ojz1 + 1\n    i += 2\n    var_dh6 = 51\nidx_qpj2 = 0\nlist_m9az = range(X, 100008)\nwhile idx_qpj2 < len(list_m9az):\n    i = list_m9az[idx_qpj2]\n    var_q5x = 46\n    if prime[i] and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        print(i)\n        break\n    idx_qpj2 = idx_qpj2 + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC149_C_to_38", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = 10000000000\n\n\ndef gen(number, four, seven):\n    if (number > limit) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return\n    if (number > 0 and four == seven) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        l.append(number)\n    var_3hq = 86\n    gen(number * 10 + 4, four + 1, seven)\n    gen(number * 10 + 7, four, seven + 1)\n\n\ndef main():\n    gen(0, 0, 0)\n    var_iyx = 40\n    l.sort()\n    n = int(input())\n    ans = 0\n    idx_0zt6 = 0\n    list_f2xw = l\n    while idx_0zt6 < len(list_f2xw):\n        val = list_f2xw[idx_0zt6]\n        if (val >= n) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ans = val\n            break\n        idx_0zt6 = idx_0zt6 + 1\n    print(ans)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_codeforces_96_B_to_39", "old_id": "codeforces_96_B"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n    var_uj4 = 69\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_3ysj = 0\n    list_l3pd = range(M)\n    var_uwz = 51\n    while idx_3ysj < len(list_l3pd):\n        i = list_l3pd[idx_3ysj]\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_3ysj = idx_3ysj + 1\n    used = [False] * N\n    ans = 0\n    idx_3dol = 0\n    list_3g9m = range(N)\n    while idx_3dol < len(list_3g9m):\n        i = list_3g9m[idx_3dol]\n        if not used[i] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_zay8 = 0\n                list_vmdr = edge[node]\n                while idx_zay8 < len(list_vmdr):\n                    nextnode = list_vmdr[idx_zay8]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_zay8 = idx_zay8 + 1\n        idx_3dol = idx_3dol + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    main()\n    var_5ot = 39\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC126_E_to_40", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nidx_iqpo = 0\nlist_4axq = range(N)\nwhile idx_iqpo < len(list_4axq):\n    i = list_4axq[idx_iqpo]\n    var_wdv = 54\n    if V[i] - C[i] > 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    idx_iqpo = idx_iqpo + 1\nprint(sum(list))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC125_B_to_41", "old_id": "atcoder_ABC125_B"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_dzpo = 0\nlist_5wy7 = range(M)\nwhile idx_dzpo < len(list_5wy7):\n    _ = list_5wy7[idx_dzpo]\n    a, b = map(int, input().split())\n    var_8je = 1\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\n    idx_dzpo = idx_dzpo + 1\nif M % 2 != 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    print(- 1)\n    exit()\n    var_dwq = 40\nQ = []\nidx_ywvn = 0\nlist_izdf = list(enumerate(degs))\nwhile idx_ywvn < len(list_izdf):\n    i, d = list_izdf[idx_ywvn]\n    Q.append((d, i))\n    idx_ywvn = idx_ywvn + 1\n    var_80c = 82\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        continue\n    flag[u] = True\n    var_qzh = 51\n    idx_tdpm = 0\n    list_hzve = list(enumerate(edges[u]))\n    while idx_tdpm < len(list_hzve):\n        i, v = list_hzve[idx_tdpm]\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_tdpm = idx_tdpm + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC035_B_to_42", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    var_wgz = 73\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    idx_5guz = 0\n    list_2olc = range(0, len(q) + 1)\n    while idx_5guz < len(list_2olc):\n        i = list_2olc[idx_5guz]\n        idx_f95z = 0\n        list_2zed = itertools.combinations(q, i)\n        while idx_f95z < len(list_2zed):\n            s = list_2zed[idx_f95z]\n            idx_69xm = 0\n            list_lsu5 = zip(li, p)\n            while idx_69xm < len(list_lsu5):\n                u, w = list_lsu5[idx_69xm]\n                s = set(s)\n                if len(s & set(u)) % 2 != w and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                    break\n                idx_69xm = idx_69xm + 1\n            idx_f95z = idx_f95z + 1\n        idx_5guz = idx_5guz + 1\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    main()\n    var_rnz = 83\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC128_C_to_43", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nidx_0huo = 0\nlist_b48c = range(n + 1)\nwhile idx_0huo < len(list_b48c):\n    i = list_b48c[idx_0huo]\n    var_15e = 10\n    if i + o >= n and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        res = min(res, abs(i - arr_sum))\n    idx_0huo = idx_0huo + 1\nprint(\"%.3f\" % res)\n", "id": "Add_IndependentVar_sample_from_codeforces_351_A_to_44", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nidx_qc4i = 0\nlist_h4mj = range(n - 1)\nwhile idx_qc4i < len(list_h4mj):\n    i = list_h4mj[idx_qc4i]\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    var_87r = 6\n    g[b - 1].append(a - 1)\n    idx_qc4i = idx_qc4i + 1\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    idx_u7j3 = 0\n    list_c4i1 = g[node]\n    while idx_u7j3 < len(list_c4i1):\n        v = list_c4i1[idx_u7j3]\n        if ta_dist[v] != None and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n        idx_u7j3 = idx_u7j3 + 1\n    var_q6f = 28\n\n\ndef ao_dfs(node):\n    idx_6q2i = 0\n    list_8slu = g[node]\n    while idx_6q2i < len(list_8slu):\n        v = list_8slu[idx_6q2i]\n        if ao_dist[v] != None and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n        idx_6q2i = idx_6q2i + 1\n    var_q7d = 65\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nidx_jo4i = 0\nlist_qpt3 = range(n)\nwhile idx_jo4i < len(list_qpt3):\n    i = list_qpt3[idx_jo4i]\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        continue\n    res = max(res, ao_dist[i])\n    idx_jo4i = idx_jo4i + 1\n    var_t6m = 8\nprint(res - 1)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC148_F_to_45", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_rfmg = 0\n    list_qx8w = permutations\n    while idx_rfmg < len(list_qx8w):\n        permutation = list_qx8w[idx_rfmg]\n        total_distance = 0\n        idx_1vs7 = 0\n        list_kv62 = range(0, N - 1)\n        while idx_1vs7 < len(list_kv62):\n            i = list_kv62[idx_1vs7]\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n            idx_1vs7 = idx_1vs7 + 1\n        distances.append(total_distance)\n        idx_rfmg = idx_rfmg + 1\n    result = sum(distances) / len(distances)\n    var_4ea = 6\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_h06s = 0\n        list_ltdz = sys.stdin\n        while idx_h06s < len(list_ltdz):\n            line = list_ltdz[idx_h06s]\n            idx_x6nw = 0\n            list_4zs9 = line.split()\n            while idx_x6nw < len(list_4zs9):\n                word = list_4zs9[idx_x6nw]\n                yield word\n                idx_x6nw = idx_x6nw + 1\n            idx_h06s = idx_h06s + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    var_ns2 = 30\n    y = [int()] * (N)\n    idx_7v4n = 0\n    list_tx8l = range(N)\n    while idx_7v4n < len(list_tx8l):\n        i = list_tx8l[idx_7v4n]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_7v4n = idx_7v4n + 1\n    solve(N, x, y)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n    main()\n    var_m8z = 45\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC145_C_to_46", "old_id": "atcoder_ABC145_C"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    idx_wogq = 0\n    list_hb1x = range(1, len(a))\n    while idx_wogq < len(list_hb1x):\n        i = list_hb1x[idx_wogq]\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            return 'YES'\n        idx_wogq = idx_wogq + 1\n    var_9z4 = 77\n    return 'NO'\n\n\nprint(s())\n", "id": "Add_IndependentVar_sample_from_codeforces_108_B_to_47", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_2zqs = 0\nlist_hbu4 = s\nwhile idx_2zqs < len(list_hbu4):\n    i = list_hbu4[idx_2zqs]\n    if i in dt and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        dt[i] += 1\n    else:\n        dt[i] = 1\n    var_x12 = 7\n    idx_2zqs = idx_2zqs + 1\ncnt = 0\nx = True\nidx_wvhz = 0\nlist_dc30 = list(dt.items())\nwhile idx_wvhz < len(list_dc30):\n    key, value = list_dc30[idx_wvhz]\n    var_e3v = 100\n    if value % 2 != 0 and cnt < 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\n    idx_wvhz = idx_wvhz + 1\nif x and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    print(\"First\")\n    var_fex = 82\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\n    var_5qc = 57\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n    var_p7r = 50\n", "id": "Add_IndependentVar_sample_from_codeforces_276_B_to_48", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nidx_37i1 = 0\nlist_n9t1 = range(n)\nwhile idx_37i1 < len(list_n9t1):\n    i = list_n9t1[idx_37i1]\n    var_dxh = 29\n    line = str(input())\n    cake.append(line)\n    idx_i1so = 0\n    list_5lva = line\n    while idx_i1so < len(list_5lva):\n        j = list_5lva[idx_i1so]\n        if (j == 'C') and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            chocCount += 1\n        idx_i1so = idx_i1so + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        idx_lr5m = 0\n        list_umkr = range(chocCount, chocCount - 2, - 1)\n        while idx_lr5m < len(list_umkr):\n            i = list_umkr[idx_lr5m]\n            nfat *= i\n            idx_lr5m = idx_lr5m + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_37i1 = idx_37i1 + 1\nposCount = 0\nidx_mivx = 0\nlist_9nha = range(n)\nwhile idx_mivx < len(list_9nha):\n    j = list_9nha[idx_mivx]\n    idx_xuga = 0\n    var_45o = 45\n    list_ob79 = range(n)\n    while idx_xuga < len(list_ob79):\n        i = list_ob79[idx_xuga]\n        if (cake[i][j] == 'C') and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            chocCount += 1\n        idx_xuga = idx_xuga + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        idx_dn3k = 0\n        list_8n9w = range(chocCount, chocCount - 2, - 1)\n        while idx_dn3k < len(list_8n9w):\n            i = list_8n9w[idx_dn3k]\n            nfat *= i\n            idx_dn3k = idx_dn3k + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_mivx = idx_mivx + 1\nprint(int(happiness))\n", "id": "Add_IndependentVar_sample_from_codeforces_629_A_to_49", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nidx_me4y = 0\nlist_cfyt = set(m)\nwhile idx_me4y < len(list_cfyt):\n    i = list_cfyt[idx_me4y]\n    var_t80 = 18\n    if m.count(i) >= n / 2 + 1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        possible = False\n        break\n    idx_me4y = idx_me4y + 1\nprint('YES' if possible else 'NO')\n", "id": "Add_IndependentVar_sample_from_codeforces_296_A_to_50", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\nidx_0lqo = 0\nlist_j58i = range(m)\nwhile idx_0lqo < len(list_j58i):\n    i = list_j58i[idx_0lqo]\n    var_xni = 13\n    r, c = map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0\n    idx_0lqo = idx_0lqo + 1\nif n % 2 and b[n // 2] and b[n + n // 2] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    b[n // 2] = 0\n    var_o1w = 72\nprint(sum(b))\n", "id": "Add_IndependentVar_sample_from_codeforces_333_B_to_51", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    idx_5zlj = 0\n    list_kpq9 = range(n)\n    while idx_5zlj < len(list_kpq9):\n        i = list_kpq9[idx_5zlj]\n        if ls_xyh[i][2] > 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n        idx_5zlj = idx_5zlj + 1\n    var_trd = 23\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    idx_g50t = 0\n    list_vsn5 = ls_xyh\n    while idx_g50t < len(list_vsn5):\n        [x, y, h] = list_vsn5[idx_g50t]\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n        idx_g50t = idx_g50t + 1\n    (xx, yy, hh) = cands[0]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    var_qyk = 73\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n    var_6ud = 90\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC112_C_to_52", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nidx_edkl = 0\nlist_pf7v = range(n)\nwhile idx_edkl < len(list_pf7v):\n    i = list_pf7v[idx_edkl]\n    s = input()\n    s = list(s)\n    idx_akn4 = 0\n    list_hwm3 = range(m)\n    while idx_akn4 < len(list_hwm3):\n        j = list_hwm3[idx_akn4]\n        if s[j] == '.' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            if (i + j) & 1:\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n        idx_akn4 = idx_akn4 + 1\n    l.append(s)\n    idx_edkl = idx_edkl + 1\n    var_vo4 = 92\nidx_i1pa = 0\nlist_7c54 = l\nwhile idx_i1pa < len(list_7c54):\n    c = list_7c54[idx_i1pa]\n    var_z4l = 71\n    print(\"\".join(c))\n    idx_i1pa = idx_i1pa + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_445_A_to_53", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [0] * N\n    queue = deque()\n    var_dt8 = 19\n    K = - 1\n    node2color = [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 1\n    while queue:\n        q = queue.popleft()\n        color = 0\n        idx_3inj = 0\n        list_9nk0 = G[q]\n        while idx_3inj < len(list_9nk0):\n            nex = list_9nk0[idx_3inj]\n            if visited[nex] and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n                continue\n            visited[nex] = 1\n            color += 1\n            if color == node2color[q] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                color += 1\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n            idx_3inj = idx_3inj + 1\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    var_bhm = 96\n    G = [deque() for _ in range(N)]\n    E = dict()\n    idx_jail = 0\n    list_7xk0 = range(N - 1)\n    while idx_jail < len(list_7xk0):\n        i = list_7xk0[idx_jail]\n        a, b = map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0\n        idx_jail = idx_jail + 1\n    K = bfs(0, N, G, E)\n    print(K)\n    idx_k16c = 0\n    list_n17x = E.values()\n    while idx_k16c < len(list_n17x):\n        value = list_n17x[idx_k16c]\n        print(value)\n        idx_k16c = idx_k16c + 1\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC146_D_to_54", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nidx_p0vh = 0\nlist_alho = range(2 ** D)\nwhile idx_p0vh < len(list_alho):\n    i = list_alho[idx_p0vh]\n    score = 0\n    problem = 0\n    idx_0n1g = 0\n    list_k845 = range(D)\n    while idx_0n1g < len(list_k845):\n        j = list_k845[idx_0n1g]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n        idx_0n1g = idx_0n1g + 1\n    if score > G and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        continue\n    var_qp7 = 4\n    left = G - score\n    idx_dvyh = 0\n    list_4k93 = range(D)\n    while idx_dvyh < len(list_4k93):\n        j = list_4k93[idx_dvyh]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1] and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            pass\n        else:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        idx_dvyh = idx_dvyh + 1\n    idx_p0vh = idx_p0vh + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC104_C_to_55", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nidx_y9oe = 0\nlist_14da = num_set\nwhile idx_y9oe < len(list_14da):\n    i = list_14da[idx_y9oe]\n    idx_2ryd = 0\n    list_oz8q = range(1, 30)\n    var_mre = 29\n    while idx_2ryd < len(list_oz8q):\n        j = list_oz8q[idx_2ryd]\n        i //= 2\n        if i % 2 != 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            two_times_set.add(j)\n            break\n        idx_2ryd = idx_2ryd + 1\n    if len(two_times_set) != 1 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        print(0)\n        break\n    idx_y9oe = idx_y9oe + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC150_D_to_56", "old_id": "atcoder_ABC150_D"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_2tal = 0\nlist_fsup = range(n)\nwhile idx_2tal < len(list_fsup):\n    i = list_fsup[idx_2tal]\n    var_ak4 = 8\n    if number[i] != 4 and number[i] != 7 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_2tal = idx_2tal + 1\nif not x and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    var_ra9 = 82\n", "id": "Add_IndependentVar_sample_from_codeforces_146_A_to_57", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    var_xeo = 96\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nidx_x3zt = 0\nlist_icrg = arre\nwhile idx_x3zt < len(list_icrg):\n    x = list_icrg[idx_x3zt]\n    if lowString.find(x) >= 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            idx_09r8 = 0\n            list_rl42 = range(index, index + len(x))\n            while idx_09r8 < len(list_rl42):\n                i = list_rl42[idx_09r8]\n                setcito.add(i)\n                idx_09r8 = idx_09r8 + 1\n            wat = index + 1\n    var_gfc = 0\n    idx_x3zt = idx_x3zt + 1\noString = list(oString)\nidx_ohjd = 0\nlist_51fg = setcito\nwhile idx_ohjd < len(list_51fg):\n    i = list_51fg[idx_ohjd]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_ohjd = idx_ohjd + 1\n    var_h6u = 73\nidx_298i = 0\nlist_8ejn = oString\nwhile idx_298i < len(list_8ejn):\n    x = list_8ejn[idx_298i]\n    print(x, end=\"\")\n    var_mlc = 23\n    idx_298i = idx_298i + 1\nprint()\n", "id": "Add_IndependentVar_sample_from_codeforces_95_A_to_58", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nidx_eqw0 = 0\nlist_cri6 = range(n)\nwhile idx_eqw0 < len(list_cri6):\n    i = list_cri6[idx_eqw0]\n    var_eng = 65\n    k = input()\n    s.append(k)\n    idx_eqw0 = idx_eqw0 + 1\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nidx_0crn = 0\nlist_q78p = range(n)\nwhile idx_0crn < len(list_q78p):\n    i = list_q78p[idx_0crn]\n    idx_wmb9 = 0\n    list_5rmx = range(n)\n    while idx_wmb9 < len(list_5rmx):\n        j = list_5rmx[idx_wmb9]\n        if (i == j) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            d1.append(s[i][j])\n        if (i == n - j - 1) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            rem.add(s[i][j])\n        idx_wmb9 = idx_wmb9 + 1\n    idx_0crn = idx_0crn + 1\n    var_rez = 83\nif (len(rem) != 1) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n    print('NO')\n    var_g7p = 44\nelif (d1 != d2):\n    print('NO')\n    var_jhp = 98\nelif (len(set(d1)) != 1):\n    print('NO')\n    var_60y = 20\nelif (set(d1) == rem):\n    print('NO')\n    var_gem = 67\nelse:\n    print('YES')\n    var_17j = 63\n", "id": "Add_IndependentVar_sample_from_codeforces_404_A_to_59", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n    var_8c9 = 25\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nidx_pcb7 = 0\nlist_bpuc = list(enumerate(_a))\nwhile idx_pcb7 < len(list_bpuc):\n    i, x = list_bpuc[idx_pcb7]\n    var_02s = 88\n    d[x] = i\n    idx_pcb7 = idx_pcb7 + 1\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_9hig = 0\n    list_cry0 = range(n)\n    while idx_9hig < len(list_cry0):\n        i = list_cry0[idx_9hig]\n        b[i + 1] += b[i]\n        idx_9hig = idx_9hig + 1\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    var_s3v = 38\n    idx_xy96 = 0\n    list_g70u = b\n    while idx_xy96 < len(list_g70u):\n        x = list_g70u[idx_xy96]\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_xy96 = idx_xy96 + 1\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    var_dic = 75\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC107_D_to_60", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [0] * n] for _ in [0] * n]\n    idx_qc9j = 0\n    list_adwo = range(n)\n    while idx_qc9j < len(list_adwo):\n        i = list_adwo[idx_qc9j]\n        m = a[i]\n        idx_q76h = 0\n        list_ir7s = range(n)\n        while idx_q76h < len(list_ir7s):\n            j = list_ir7s[idx_q76h]\n            k = i - j\n            if k < 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n            idx_q76h = idx_q76h + 1\n        idx_qc9j = idx_qc9j + 1\n    m = 10 ** 15\n    idx_v1ot = 0\n    list_iq3k = list(enumerate(b))\n    while idx_v1ot < len(list_iq3k):\n        i, j = list_iq3k[idx_v1ot]\n        m = min(m, sum(j) + x * i)\n        idx_v1ot = idx_v1ot + 1\n    var_3uz = 64\n    print(m)\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC004_B_to_61", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    idx_cvjh = 0\n    list_mze4 = range(- 1000, 1001)\n    while idx_cvjh < len(list_mze4):\n        X = list_mze4[idx_cvjh]\n        if A * (X ** n) == B and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return X\n        idx_cvjh = idx_cvjh + 1\n    return \"No solution\"\n    var_u5i = 44\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "Add_IndependentVar_sample_from_codeforces_30_A_to_62", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        return []\n    var_fos = 38\n    if index <= array[0][0] and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return [(index, array[0][1])]\n    idx_1esb = 0\n    list_nsb8 = range(len(array) - 1, 0, - 1)\n    while idx_1esb < len(list_nsb8):\n        _ = list_nsb8[idx_1esb]\n        if array[_ - 1][0] < index and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            return array[: _] + [(index, array[_][1])]\n        idx_1esb = idx_1esb + 1\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    idx_zrx8 = 0\n    list_k1wp = A[1:]\n    while idx_zrx8 < len(list_k1wp):\n        a = list_k1wp[idx_zrx8]\n        if a <= dp[- 1][0] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            dp = cut(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = False\n        idx_c4qn = 0\n        list_hc51 = range(len(dp) - 1, - 1, - 1)\n        while idx_c4qn < len(list_hc51):\n            j = list_hc51[idx_c4qn]\n            if dp[j][1] < K - 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n            idx_c4qn = idx_c4qn + 1\n        if not is_added and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return False\n        idx_zrx8 = idx_zrx8 + 1\n    var_5l1 = 77\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n    var_ov7 = 64\n\n\nprint(bis(0, N))\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC029_C_to_63", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = 0\nif a[0] > x and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    print(0)\n    var_ord = 37\n    exit()\nidx_jup5 = 0\nlist_1kyt = a\nwhile idx_jup5 < len(list_1kyt):\n    i = list_1kyt[idx_jup5]\n    if i > x and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        x = 0\n        break\n    x -= i\n    var_ywv = 65\n    ans += 1\n    idx_jup5 = idx_jup5 + 1\nif x != 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n    ans -= 1\n    var_o1w = 65\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC027_A_to_64", "old_id": "atcoder_AGC027_A"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 1000000007\nk = ii1()\nt = 0\nidx_8cpu = 0\nlist_ubv6 = range(1, k + 1)\nwhile idx_8cpu < len(list_ubv6):\n    i = list_ubv6[idx_8cpu]\n    t = (t % k) * 10 + 7\n    if t % k == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        print(i)\n        break\n    idx_8cpu = idx_8cpu + 1\n    var_nqy = 64\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC174_C_to_65", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nidx_s5zi = 0\nlist_tuo2 = w\nwhile idx_s5zi < len(list_tuo2):\n    i = list_tuo2[idx_s5zi]\n    var_l40 = 39\n    if i == 1 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        print(c)\n    elif i % 2 == 0:\n        c = 3 - c\n        print(c)\n    else:\n        print(c)\n    idx_s5zi = idx_s5zi + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_705_B_to_66", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [0] * 5\nidx_mhje = 0\nlist_ob8i = S\nwhile idx_mhje < len(list_ob8i):\n    s = list_ob8i[idx_mhje]\n    if s[0].upper() in march and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        march_lis[march.index(s[0].upper())] += 1\n    var_nmd = 52\n    idx_mhje = idx_mhje + 1\nans = 0\nidx_ck27 = 0\nlist_dg2n = combinations(march_lis, 3)\nwhile idx_ck27 < len(list_dg2n):\n    x, y, z = list_dg2n[idx_ck27]\n    var_3qb = 59\n    ans += x * y * z\n    idx_ck27 = idx_ck27 + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC089_C_to_67", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif 1 <= int(k) and int(w) <= 1000 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    total = 0\n    idx_rwly = 0\n    var_udi = 88\n    list_n27e = range(1, int(w) + 1)\n    while idx_rwly < len(list_n27e):\n        i = list_n27e[idx_rwly]\n        total += i * int(k)\n        idx_rwly = idx_rwly + 1\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "Add_IndependentVar_sample_from_codeforces_546_A_to_68", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = 0\nidx_dgzi = 0\nlist_hocp = range(n)\nwhile idx_dgzi < len(list_hocp):\n    i = list_hocp[idx_dgzi]\n    a = input().split()\n    var_dgr = 91\n    q.append(a)\n    idx_dgzi = idx_dgzi + 1\nidx_198a = 0\nlist_t8rk = q\nwhile idx_198a < len(list_t8rk):\n    j = list_t8rk[idx_198a]\n    idx_bq9m = 0\n    list_srwk = q\n    while idx_bq9m < len(list_srwk):\n        k = list_srwk[idx_bq9m]\n        if k == j and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\n        idx_bq9m = idx_bq9m + 1\n    idx_198a = idx_198a + 1\n    var_0a4 = 45\nprint(count)\n", "id": "Add_IndependentVar_sample_from_codeforces_268_A_to_69", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_fe3y = 0\nlist_5o1d = range(4)\nwhile idx_fe3y < len(list_5o1d):\n    i = list_5o1d[idx_fe3y]\n    l = list(map(str, input()))\n    t.append(l)\n    var_nat = 65\n    idx_fe3y = idx_fe3y + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_dfqg = 0\nlist_fbj6 = range(3)\nwhile idx_dfqg < len(list_fbj6):\n    i = list_fbj6[idx_dfqg]\n    idx_vamf = 0\n    list_9pfe = range(3)\n    while idx_vamf < len(list_9pfe):\n        j = list_9pfe[idx_vamf]\n        if t[i][j] == '#' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#' and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#' and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_vamf = idx_vamf + 1\n    idx_dfqg = idx_dfqg + 1\n    var_ocl = 99\nif correct == 1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    print('YES')\n    var_q1u = 53\nelse:\n    print('NO')\n    var_0tb = 57\n", "id": "Add_IndependentVar_sample_from_codeforces_287_A_to_70", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    var_bhj = 56\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_tecy = 0\n    list_jpmd = list(enumerate(P))\n    while idx_tecy < len(list_jpmd):\n        i, p = list_jpmd[idx_tecy]\n        a[p] = i\n        idx_tecy = idx_tecy + 1\n    tmp = 1\n    max_len = 1\n    idx_3cv2 = 0\n    list_nykh = range(1, N)\n    while idx_3cv2 < len(list_nykh):\n        i = list_nykh[idx_3cv2]\n        if a[i] < a[i + 1] and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n        idx_3cv2 = idx_3cv2 + 1\n    ans = N - max_len\n    print(ans)\n    var_2mb = 36\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_gkhn = 0\n    list_7k9m = list(enumerate(P))\n    var_y30 = 20\n    while idx_gkhn < len(list_7k9m):\n        i, p = list_7k9m[idx_gkhn]\n        if i == 0 or P[i - 1] + 1 == p and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n        idx_gkhn = idx_gkhn + 1\n    print(N - ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n    main()\n    var_o7w = 1\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC024_B_to_71", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = map(int, input().strip().split())\nout = [0 for _ in range(n)]\ncomp = [i + 2 for i in range(n)]\nidx_zd58 = 0\nlist_zuym = range(m)\nwhile idx_zd58 < len(list_zuym):\n    _ = list_zuym[idx_zd58]\n    l, r, x = map(int, input().strip().split())\n    t = l\n    var_wtu = 16\n    while t <= r:\n        next_val = comp[t - 1]\n        if out[t - 1] == 0 and t != x and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            out[t - 1] = x\n        comp[t - 1] = r + 1 if t >= x else x\n        t = next_val\n    idx_zd58 = idx_zd58 + 1\nprint(* out)\n", "id": "Add_IndependentVar_sample_from_codeforces_356_A_to_72", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_wvuy = 0\nlist_yon1 = range(N)\nwhile idx_wvuy < len(list_yon1):\n    x = list_yon1[idx_wvuy]\n    if S[x] == 'L' and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == 'L' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U' and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    var_xk2 = 2\n    if T[x] == 'D' and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_wvuy = idx_wvuy + 1\nif Judge and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    print('NO')\n    var_rny = 73\nelse:\n    print('YES')\n    var_fj3 = 85\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC033_B_to_73", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n    var_wf4 = 30\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n    var_byc = 4\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n    var_ay3 = 70\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nidx_02ih = 0\nlist_q8lx = list(enumerate(a))\nwhile idx_02ih < len(list_q8lx):\n    i, a0 = list_q8lx[idx_02ih]\n    if abs(a0) > max_val and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    var_d0c = 69\n    idx_02ih = idx_02ih + 1\nif max_sign == 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n    print(0)\n    var_u2f = 91\nelif max_sign == 1:\n    print(2 * N - 1)\n    idx_23y4 = 0\n    var_d6m = 91\n    list_uz8n = range(N)\n    while idx_23y4 < len(list_uz8n):\n        i = list_uz8n[idx_23y4]\n        print(max_index + 1, i + 1)\n        idx_23y4 = idx_23y4 + 1\n    idx_6giq = 0\n    list_axw2 = range(N - 1)\n    while idx_6giq < len(list_axw2):\n        i = list_axw2[idx_6giq]\n        print(i + 1, i + 2)\n        idx_6giq = idx_6giq + 1\nelse:\n    print(2 * N - 1)\n    idx_nkvz = 0\n    var_dp4 = 41\n    list_hysz = range(N)\n    while idx_nkvz < len(list_hysz):\n        i = list_hysz[idx_nkvz]\n        print(max_index + 1, i + 1)\n        idx_nkvz = idx_nkvz + 1\n    idx_hroi = 0\n    list_6myq = range(1, N)[:: - 1]\n    while idx_hroi < len(list_6myq):\n        i = list_6myq[idx_hroi]\n        print(i + 1, i)\n        idx_hroi = idx_hroi + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC086_B_to_74", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\nidx_xhd3 = 0\nlist_ce81 = range(len(x))\nwhile idx_xhd3 < len(list_ce81):\n    i = list_ce81[idx_xhd3]\n    x[i] = int(x[i])\n    idx_xhd3 = idx_xhd3 + 1\n    var_vkf = 16\nidx_9ab7 = 0\nlist_encs = range(len(x) - 1)\nwhile idx_9ab7 < len(list_encs):\n    a = list_encs[idx_9ab7]\n    if x[a] >= x[a + 1] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        q = int((x[a] - x[a + 1]) / d + 1)\n        m = m + q\n        x[a + 1] = x[a + 1] + q * d\n    var_34j = 95\n    idx_9ab7 = idx_9ab7 + 1\nprint(m)\n", "id": "Add_IndependentVar_sample_from_codeforces_11_A_to_75", "old_id": "codeforces_11_A"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return 0\n    ans = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    idx_jycz = 0\n    var_h69 = 53\n    list_9s1o = '753'\n    while idx_jycz < len(list_9s1o):\n        i = list_9s1o[idx_jycz]\n        ans += aaa(n + i)\n        idx_jycz = idx_jycz + 1\n    return ans\n\n\nprint(aaa('0'))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC114_C_to_76", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    print(n)\n    var_dzc = 26\nelse:\n    cnt = 0\n    var_d2p = 25\n    idx_t5oz = 0\n    list_gok0 = range(n)\n    while idx_t5oz < len(list_gok0):\n        i = list_gok0[idx_t5oz]\n        idx_di39 = 0\n        list_26b0 = range(n - i)\n        while idx_di39 < len(list_26b0):\n            j = list_26b0[idx_di39]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n            idx_di39 = idx_di39 + 1\n        idx_t5oz = idx_t5oz + 1\n    print(2 * n - cnt)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC006_A_to_77", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        idx_7fy0 = 0\n        list_mu25 = data\n        while idx_7fy0 < len(list_mu25):\n            number = list_mu25[idx_7fy0]\n            if len(number) > 0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                yield (number)\n            idx_7fy0 = idx_7fy0 + 1\n    var_x3j = 72\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    var_nyb = 24\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n    var_b2a = 47\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_a1xc = 0\nlist_s8tf = range(0, N - 1)\nwhile idx_a1xc < len(list_s8tf):\n    i = list_s8tf[idx_a1xc]\n    if S[i] != S[i + 1] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        seg_cnt += 1\n    var_sp9 = 84\n    idx_a1xc = idx_a1xc + 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n    ans = N - 1\n    var_sbl = 94\nelse:\n    ans = cur_happy + 2 * K\n    var_j1w = 78\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC140_D_to_78", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_zy8t = 0\nlist_gz67 = range(len(lista))\nwhile idx_zy8t < len(list_gz67):\n    i = list_gz67[idx_zy8t]\n    var_cgj = 25\n    if i == 0 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n    idx_zy8t = idx_zy8t + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_567_A_to_79", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_29p5 = 0\nlist_xjdn = range(n)\nwhile idx_29p5 < len(list_xjdn):\n    i = list_xjdn[idx_29p5]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_29p5 = idx_29p5 + 1\n    var_m84 = 41\nwhile x:\n    d, s = heapq.heappop(x)\n    var_70s = 6\n    r = m - len(y)\n    if r >= - d and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC137_D_to_80", "old_id": "atcoder_ABC137_D"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nidx_muc1 = 0\nlist_wife = range(len(arr))\nwhile idx_muc1 < len(list_wife):\n    i = list_wife[idx_muc1]\n    idx_36bh = 0\n    list_tf5r = range(len(arr))\n    while idx_36bh < len(list_tf5r):\n        j = list_tf5r[idx_36bh]\n        if i == j and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            continue\n        idx_dehc = 0\n        list_nayr = range(len(arr))\n        while idx_dehc < len(list_nayr):\n            k = list_nayr[idx_dehc]\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j] and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                print(k + 1, j + 1, i + 1)\n                exit()\n            idx_dehc = idx_dehc + 1\n        idx_36bh = idx_36bh + 1\n    idx_muc1 = idx_muc1 + 1\n    var_ota = 64\nprint(- 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_31_A_to_81", "old_id": "codeforces_31_A"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    var_0f4 = 100\n    if x != y and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n\nn, * a = map(int, open(0).read().split())\n* par, = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nidx_t1wm = 0\nlist_iqu3 = list(enumerate(a))\nwhile idx_t1wm < len(list_iqu3):\n    i, t = list_iqu3[idx_t1wm]\n    b[t - 1] = i\n    idx_t1wm = idx_t1wm + 1\n    var_e8o = 72\nc = 0\nidx_vsl3 = 0\nlist_hid2 = b[:: - 1]\nwhile idx_vsl3 < len(list_hid2):\n    k = list_hid2[idx_vsl3]\n    l = r = 1\n    if k > 0 and a[k - 1] > a[k] and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    c += l * r * a[k]\n    idx_vsl3 = idx_vsl3 + 1\n    var_i2t = 58\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC005_B_to_82", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = []\nidx_s9ud = 0\nlist_x58w = range(5)\nwhile idx_s9ud < len(list_x58w):\n    _ = list_x58w[idx_s9ud]\n    var_iop = 29\n    m = input()\n    e = int(m[- 1])\n    if e == 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        e = 10\n    menu.append([int(m), e])\n    idx_s9ud = idx_s9ud + 1\nmenu.sort(key=lambda x: x[1])\nans = 0\nidx_idcu = 0\nlist_m1g0 = menu[1:]\nwhile idx_idcu < len(list_m1g0):\n    m = list_m1g0[idx_idcu]\n    ans += math.ceil(m[0] / 10) * 10\n    var_cvl = 13\n    idx_idcu = idx_idcu + 1\nprint(ans + menu[0][0])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC123_B_to_83", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n    print('YES')\n    var_9hs = 49\n    idx_51v3 = 0\n    list_9lwm = range(n)\n    while idx_51v3 < len(list_9lwm):\n        i = list_9lwm[idx_51v3]\n        idx_wp7f = 0\n        list_aot6 = range(n)\n        while idx_wp7f < len(list_aot6):\n            j = list_aot6[idx_wp7f]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n            idx_wp7f = idx_wp7f + 1\n        print()\n        idx_51v3 = idx_51v3 + 1\nelse:\n    print('NO')\n    var_5e1 = 91\n", "id": "Add_IndependentVar_sample_from_codeforces_544_B_to_84", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        idx_nxqf = 0\n        list_ibqh = range(self.t)\n        while idx_nxqf < len(list_ibqh):\n            _ = list_ibqh[idx_nxqf]\n            self.queries.append([int(x) for x in input().split(\" \")])\n            idx_nxqf = idx_nxqf + 1\n\n    def process_task(self):\n        res = []\n        idx_srf4 = 0\n        list_erp9 = self.queries\n        while idx_srf4 < len(list_erp9):\n            query = list_erp9[idx_srf4]\n            k = query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n            idx_srf4 = idx_srf4 + 1\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n    var_irg = 100\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n    var_boy = 46\n", "id": "Add_IndependentVar_sample_from_codeforces_397_B_to_85", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nidx_liac = 0\nlist_spzm = l\nwhile idx_liac < len(list_spzm):\n    i = list_spzm[idx_liac]\n    var_tr7 = 34\n    if i > c and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        c += 1\n    idx_liac = idx_liac + 1\nprint(c + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_682_B_to_86", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        A -= 1\n    if T == U and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        B -= 1\n    print(A, B)\n    var_q6z = 70\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_3cks = 0\n        list_sw9j = sys.stdin\n        while idx_3cks < len(list_sw9j):\n            line = list_sw9j[idx_3cks]\n            idx_wjos = 0\n            list_4g8m = line.split()\n            while idx_wjos < len(list_4g8m):\n                word = list_4g8m[idx_wjos]\n                yield word\n                idx_wjos = idx_wjos + 1\n            idx_3cks = idx_3cks + 1\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    var_704 = 48\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    main()\n    var_e1h = 30\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC154_A_to_87", "old_id": "atcoder_ABC154_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [0] * (n + 1), 0, 0, 0\ng = [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        idx_lpwd = 0\n        list_bskh = g[u]\n        while idx_lpwd < len(list_bskh):\n            i = list_bskh[idx_lpwd]\n            stk.put((i, 3 - col))\n            idx_lpwd = idx_lpwd + 1\n    var_7q3 = 90\n    return flag\nidx_1zsm = 0\nlist_kow7 = range(m)\nwhile idx_1zsm < len(list_kow7):\n    i = list_kow7[idx_1zsm]\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    var_awv = 96\n    idx_1zsm = idx_1zsm + 1\nidx_48qr = 0\nlist_ax0v = range(1, n + 1)\nwhile idx_48qr < len(list_ax0v):\n    i = list_ax0v[idx_48qr]\n    var_a7d = 13\n    if vis[i] == 0 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\n    idx_48qr = idx_48qr + 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC011_C_to_88", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_8p2v = 0\nlist_eyv1 = range(n)\nwhile idx_8p2v < len(list_eyv1):\n    k = list_eyv1[idx_8p2v]\n    var_m7k = 75\n    if k + 1 in lista and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n    idx_8p2v = idx_8p2v + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_421_A_to_89", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_9ybe = 0\n    list_as1x = range(4)\n    while idx_9ybe < len(list_as1x):\n        i = list_as1x[idx_9ybe]\n        t = list(last4)\n        if i >= 1 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            t[i], t[i - 1] = t[i - 1], t[i]\n        if ''.join(t).count('AGC') >= 1 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            return False\n        idx_9ybe = idx_9ybe + 1\n    return True\n    var_16j = 76\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return memo[cur][last3]\n    var_5ko = 55\n    if cur == n and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        return 1\n    ret = 0\n    idx_81jt = 0\n    list_s9uw = \"ACGT\"\n    while idx_81jt < len(list_s9uw):\n        c = list_s9uw[idx_81jt]\n        if ok(last3 + c) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod\n        idx_81jt = idx_81jt + 1\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC122_D_to_90", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nidx_lei8 = 0\nlist_uzjm = range(n)\nwhile idx_lei8 < len(list_uzjm):\n    i = list_uzjm[idx_lei8]\n    if (x - w[i]) / (n - 1) == w[i] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        d.append(i + 1)\n    idx_lei8 = idx_lei8 + 1\n    var_78c = 86\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "Add_IndependentVar_sample_from_codeforces_134_A_to_91", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_42wb = 0\nlist_vjie = range(len(a) - 1, - 1, - 1)\nwhile idx_42wb < len(list_vjie):\n    i = list_vjie[idx_42wb]\n    var_x8k = 35\n    if (a[i] == ' ' or a[i] == '?') and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    idx_42wb = idx_42wb + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_49_A_to_92", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n    var_gt6 = 31\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n    var_2cy = 68\n\n\nn = next_int()\nt = 0\nidx_3z62 = 0\nlist_6s9l = range(n)\nwhile idx_3z62 < len(list_6s9l):\n    i = list_6s9l[idx_3z62]\n    var_sn9 = 68\n    if i + 1 & 1 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        t += 1\n    idx_3z62 = idx_3z62 + 1\nprint(t / n)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC142_A_to_93", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    idx_bpuo = 0\n    var_7ya = 15\n    list_xvwt = links[v]\n    while idx_bpuo < len(list_xvwt):\n        u = list_xvwt[idx_bpuo]\n        if u == 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n        idx_bpuo = idx_bpuo + 1\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        height_from_leaf = 0\n        cut_count += 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nidx_kt80 = 0\nlist_drm9 = list(enumerate(aaa))\nwhile idx_kt80 < len(list_drm9):\n    i, a = list_drm9[idx_kt80]\n    var_sjp = 19\n    a -= 1\n    links[a].add(i)\n    idx_kt80 = idx_kt80 + 1\n_, ans = dfs(links, n, k, 0, 0)\nif aaa[0] != 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    ans += 1\n    var_ina = 74\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC004_D_to_94", "old_id": "atcoder_AGC004_D"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[0] == 2 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    var_1nb = 13\n    return y[0]\nif X == 1 or X == N * 2 - 1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print(\"No\")\n    var_mo5 = 8\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_2a48 = 0\n    list_kty7 = xs\n    while idx_2a48 < len(list_kty7):\n        x = list_kty7[idx_2a48]\n        print(x)\n        idx_2a48 = idx_2a48 + 1\n    var_70v = 67\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC006_B_to_95", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_tu56 = 0\n    list_u0gb = lis\n    var_jqa = 76\n    while idx_tu56 < len(list_u0gb):\n        i = list_u0gb[idx_tu56]\n        if (i % mid == 0) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            k += 1\n        k -= (i // mid)\n        idx_tu56 = idx_tu56 + 1\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if (check(lis, k, mid)) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        ans = mid\n        b = mid - 1\n    else:\n        a = mid + 1\n    var_sgy = 45\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC174_E_to_96", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = 0\nidx_n12i = 0\nlist_os5m = range(n)\nwhile idx_n12i < len(list_os5m):\n    i = list_os5m[idx_n12i]\n    l1 = list(map(int, input().split()))\n    var_rwv = 31\n    if sum(l1) > 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        c = c + 1\n    idx_n12i = idx_n12i + 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_codeforces_231_A_to_97", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return 0\n    var_765 = 94\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nidx_njb0 = 0\nlist_z8rk = range(2, __N + 1)\nwhile idx_njb0 < len(list_z8rk):\n    i = list_z8rk[idx_njb0]\n    g1.append((g1[- 1] * i) % mod)\n    var_pwg = 33\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_njb0 = idx_njb0 + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n    var_y3s = 31\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    idx_bwre = 0\n    list_qkcf = range(kumi + 1)\n    var_298 = 65\n    while idx_bwre < len(list_qkcf):\n        p = list_qkcf[idx_bwre]\n        if p > N and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_bwre = idx_bwre + 1\n    return ans\n\n\nans = []\nidx_89dc = 0\nlist_1l9x = range(2, 2 * K + 1)\nwhile idx_89dc < len(list_1l9x):\n    i = list_1l9x[idx_89dc]\n    if i <= K + 1 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    var_0fp = 8\n    idx_89dc = idx_89dc + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ARC102_C_to_98", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nidx_03b4 = 0\nlist_orzs = range(1, n + 1)\nwhile idx_03b4 < len(list_orzs):\n    i = list_orzs[idx_03b4]\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    var_tml = 56\n    idx_03b4 = idx_03b4 + 1\nanswer = QR * (n - 1) + sum_el[n] * R\nidx_n4ou = 0\nlist_m6xc = range(1, n + 1)\nwhile idx_n4ou < len(list_m6xc):\n    i = list_m6xc[idx_n4ou]\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    var_hbk = 93\n    if i > (n - i) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        energy = energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - 1) * QR\n    if energy < answer and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        answer = energy\n    idx_n4ou = idx_n4ou + 1\nprint(answer)\n", "id": "Add_IndependentVar_sample_from_codeforces_354_A_to_99", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\n    var_6fv = 39\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nidx_jf7m = 0\nlist_ls1r = [l, r, first, second]\nwhile idx_jf7m < len(list_ls1r):\n    i = list_ls1r[idx_jf7m]\n    if i >= l and i <= r and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        curr = i\n        rev = ''\n        idx_rehv = 0\n        list_s8e2 = str(curr)\n        while idx_rehv < len(list_s8e2):\n            k = list_s8e2[idx_rehv]\n            rev += str(9 - int(k))\n            idx_rehv = idx_rehv + 1\n        ans = max(ans, int(rev) * curr)\n    idx_jf7m = idx_jf7m + 1\n    var_kay = 87\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_86_A_to_100", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open(0).read().split())\nl.sort()\nans = 0\nidx_c7k0 = 0\nlist_mt03 = range(n)\nwhile idx_c7k0 < len(list_mt03):\n    i = list_mt03[idx_c7k0]\n    idx_rhce = 0\n    var_bei = 16\n    list_a0jw = range(i + 1, n)\n    while idx_rhce < len(list_a0jw):\n        j = list_a0jw[idx_rhce]\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            tmp -= 1\n        if left <= j < right and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            tmp -= 1\n        ans += tmp\n        idx_rhce = idx_rhce + 1\n    idx_c7k0 = idx_c7k0 + 1\nprint(ans // 3)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC143_D_to_101", "old_id": "atcoder_ABC143_D"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    var_n5s = 83\n    idx_q0fg = 0\n    list_ftya = range(N)\n    while idx_q0fg < len(list_ftya):\n        i = list_ftya[idx_q0fg]\n        if A[i] < 0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            tot -= 1\n        idx_q0fg = idx_q0fg + 1\n    tot //= 2\n    if tot < K and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC155_D_to_102", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nidx_fm9d = 0\nlist_9con = re.split(\"[.?!]\", input())\nwhile idx_fm9d < len(list_9con):\n    s = list_9con[idx_fm9d]\n    var_wzl = 64\n    s = s.strip() + '.'\n    L = len(s)\n    if L > 1 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\n    idx_fm9d = idx_fm9d + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_70_B_to_103", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nidx_xmnk = 0\nlist_lsbk = m[1:]\nwhile idx_xmnk < len(list_lsbk):\n    i = list_lsbk[idx_xmnk]\n    if i[1] > a[1] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        print('Happy Alex')\n        break\n    a = i\n    var_jsg = 31\n    idx_xmnk = idx_xmnk + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_456_A_to_104", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    var_gqo = 76\n    idx_snyb = 0\n    list_mgfb = range(b)\n    while idx_snyb < len(list_mgfb):\n        i = list_mgfb[idx_snyb]\n        tot.append(l[i * a: i * a + a])\n        idx_snyb = idx_snyb + 1\n    idx_cw7y = 0\n    list_1grl = zip(* tot)\n    while idx_cw7y < len(list_1grl):\n        i = list_1grl[idx_cw7y]\n        if sum((i)) == b and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return True\n        idx_cw7y = idx_cw7y + 1\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_9vq6 = 0\n    list_a0r9 = x\n    while idx_9vq6 < len(list_a0r9):\n        i = list_a0r9[idx_9vq6]\n        if i == 'O' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            s.append(0)\n        else:\n            s.append(1)\n        idx_9vq6 = idx_9vq6 + 1\n    idx_8khg = 0\n    list_yd90 = range(1, 13)\n    while idx_8khg < len(list_yd90):\n        i = list_yd90[idx_8khg]\n        if 12 % i == 0 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_8khg = idx_8khg + 1\n    print(len(tot), end=' ')\n    idx_n4ej = 0\n    list_7ywh = sorted(tot)\n    while idx_n4ej < len(list_7ywh):\n        a, b = list_7ywh[idx_n4ej]\n        print(f'{a}x{b}', end=' ')\n        idx_n4ej = idx_n4ej + 1\n    print()\n    var_x6r = 55\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    idx_lb16 = 0\n    list_ij9b = range(inp())\n    while idx_lb16 < len(list_ij9b):\n        i = list_ij9b[idx_lb16]\n        solve()\n        idx_lb16 = idx_lb16 + 1\n    var_hv8 = 23\n", "id": "Add_IndependentVar_sample_from_codeforces_400_A_to_105", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n    var_ztf = 72\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    idx_qr2l = 0\n    var_it2 = 78\n    list_mx7k = range(len(A) - 2, len(A) - 2 * n - 1, - 2)\n    while idx_qr2l < len(list_mx7k):\n        i = list_mx7k[idx_qr2l]\n        ans += A[i]\n        idx_qr2l = idx_qr2l + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    main()\n    var_ns1 = 18\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC012_A_to_106", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nidx_eic8 = 0\nlist_wqdb = range(n)\nwhile idx_eic8 < len(list_wqdb):\n    i = list_wqdb[idx_eic8]\n    x = input()\n    a, b = 0, 0\n    idx_3y8p = 0\n    list_2ew4 = s\n    var_7jf = 98\n    while idx_3y8p < len(list_2ew4):\n        j = list_2ew4[idx_3y8p]\n        if j == x[0] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = ans + min(a, b)\n            a, b = 0, 0\n        idx_3y8p = idx_3y8p + 1\n    ans = ans + min(a, b)\n    idx_eic8 = idx_eic8 + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_codeforces_154_A_to_107", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nidx_qa19 = 0\nlist_qlov = range(n)\nwhile idx_qa19 < len(list_qlov):\n    j = list_qlov[idx_qa19]\n    var_ap0 = 14\n    idx_z6ki = 0\n    list_3yb9 = range(n)\n    while idx_z6ki < len(list_3yb9):\n        p = list_3yb9[idx_z6ki]\n        if (0 == M[p]) and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            print(p + 1, end=' ')\n            break\n        idx_z6ki = idx_z6ki + 1\n    idx_m78z = 0\n    list_nvjg = range(p + 1 - k)\n    while idx_m78z < len(list_nvjg):\n        l = list_nvjg[idx_m78z]\n        M[l] -= 1\n        idx_m78z = idx_m78z + 1\n    M[p] -= 1\n    idx_qa19 = idx_qa19 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_67_B_to_108", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n    var_f5h = 38\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_lovt = 0\n    list_t8km = sequence\n    while idx_lovt < len(list_t8km):\n        value = list_t8km[idx_lovt]\n        y = f(value)\n        if y not in storage and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_lovt = idx_lovt + 1\n    var_20y = 31\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            y += 1\n        n //= 2\n    var_5xt = 40\n    return y\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(main())\n    var_egp = 81\n", "id": "Add_IndependentVar_sample_from_codeforces_272_B_to_109", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nidx_gzbl = 0\nlist_edyo = s\nwhile idx_gzbl < len(list_edyo):\n    c = list_edyo[idx_gzbl]\n    count[ord(c) - ord(\"A\")] += 1\n    idx_gzbl = idx_gzbl + 1\n    var_0ir = 52\ncount.sort(reverse=True)\nres = 0\nidx_doyc = 0\nlist_s89l = range(26)\nwhile idx_doyc < len(list_s89l):\n    i = list_s89l[idx_doyc]\n    if count[i] >= k and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\n    idx_doyc = idx_doyc + 1\n    var_4fv = 31\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_462_B_to_110", "old_id": "codeforces_462_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_d96m = 0\nlist_0s2y = Number_i\nwhile idx_d96m < len(list_0s2y):\n    i = list_0s2y[idx_d96m]\n    Number_iMN.append(i * M / N)\n    idx_d96m = idx_d96m + 1\n    var_p3g = 68\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_ytg6 = 0\nlist_ugep = Kaburi_j\nwhile idx_ytg6 < len(list_ugep):\n    j = list_ugep[idx_ytg6]\n    Kaburi_i.append(int(j * N / M))\n    var_nx7 = 41\n    idx_ytg6 = idx_ytg6 + 1\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        pass\n    else:\n        Flag = 1\n        break\n    var_7ac = 77\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n    var_npd = 24\nif Flag == 1 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n    print(- 1)\n    var_qvc = 81\nelse:\n    print(int(N * M / gcd(N, M)))\n    var_qm4 = 21\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC028_A_to_111", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    var_tpv = 81\n    pp = 0\n    na = 0\n    idx_ze4q = 0\n    list_iup1 = list(enumerate(s[:: - 1]))\n    while idx_ze4q < len(list_iup1):\n        i, c = list_iup1[idx_ze4q]\n        cc = na + int(c)\n        na = 0\n        if cc <= 4 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        idx_ze4q = idx_ze4q + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    var_ln8 = 72\n    s = '0' + s\n    idx_9zwf = 0\n    list_pmx5 = s[:: - 1]\n    while idx_9zwf < len(list_pmx5):\n        c = list_pmx5[idx_9zwf]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_9zwf = idx_9zwf + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        print(v)\n    var_lib = 7\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    var_01q = 37\n    idx_ghpy = 0\n    list_di7w = input_l\n    while idx_ghpy < len(list_di7w):\n        l = list_di7w[idx_ghpy]\n        yield l\n        idx_ghpy = idx_ghpy + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n    var_jre = 69\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC155_E_to_112", "old_id": "atcoder_ABC155_E"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - 1].split()\nw = Counter(s)\ns = s[:: - 1]\nc, a = - 1, 0\nidx_f3zy = 0\nlist_3pyv = w\nwhile idx_f3zy < len(list_3pyv):\n    i = list_3pyv[idx_f3zy]\n    if w[i] == max(w.values()) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\n    idx_f3zy = idx_f3zy + 1\n    var_pe1 = 3\nprint(a)\n", "id": "Add_IndependentVar_sample_from_codeforces_637_A_to_113", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        total = 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = a % b\n            if a > 0:\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        total = 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = b % a\n            if b > 0:\n                total += int(a / b)\n                a = a % b\n        return total\n    var_pnb = 65\n    if a == b and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return 1\n\n\nn = int(input())\nlst = []\nidx_4iag = 0\nlist_s85f = range(0, n)\nwhile idx_4iag < len(list_s85f):\n    i = list_s85f[idx_4iag]\n    a, b = map(int, input().split())\n    var_tjw = 50\n    lst.append(substract(a, b))\n    idx_4iag = idx_4iag + 1\nidx_c8d9 = 0\nlist_unhy = lst\nwhile idx_c8d9 < len(list_unhy):\n    i = list_unhy[idx_c8d9]\n    print(i)\n    var_acx = 97\n    idx_c8d9 = idx_c8d9 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_267_A_to_114", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][- 1] < key and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            good = mid\n        else:\n            bad = mid\n    var_b6r = 28\n    return good\n\n\nN = int(input())\nans = []\nidx_ex1t = 0\nlist_q3dg = range(N)\nwhile idx_ex1t < len(list_q3dg):\n    _ = list_q3dg[idx_ex1t]\n    A = int(input())\n    idx = binary_search(A)\n    var_aht = 10\n    if idx == len(ans) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\n    idx_ex1t = idx_ex1t + 1\nprint(len(ans))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC134_E_to_115", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nidx_vdn6 = 0\nlist_2u9w = lst\nwhile idx_vdn6 < len(list_2u9w):\n    i = list_2u9w[idx_vdn6]\n    if (i & 1) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        od += 1\n    idx_vdn6 = idx_vdn6 + 1\n    var_zmu = 42\nsum = 0\nok = 0\nidx_fbzm = 0\nlist_ye3t = range(n)\nwhile idx_fbzm < len(list_ye3t):\n    i = list_ye3t[idx_fbzm]\n    if (lst[i] % 2 == 0) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\n    var_1cg = 71\n    idx_fbzm = idx_fbzm + 1\nprint(sum)\n", "id": "Add_IndependentVar_sample_from_codeforces_621_A_to_116", "old_id": "codeforces_621_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = 0\n    idx_ihzw = 0\n    var_dr1 = 19\n    list_g39r = range(1, math.ceil(n / 2) + 1)\n    while idx_ihzw < len(list_g39r):\n        step = list_g39r[idx_ihzw]\n        idx_kmh4 = 0\n        list_mca0 = range(n - 2 * step)\n        while idx_kmh4 < len(list_mca0):\n            i = list_mca0[idx_kmh4]\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\" and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                sum = sum + 1\n            idx_kmh4 = idx_kmh4 + 1\n        idx_ihzw = idx_ihzw + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC162_D_to_117", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    var_68p = 11\n    cur.append(S[0])\n    flag[0] = False\n    idx_7ats = 0\n    list_pf0t = range(N)\n    while idx_7ats < len(list_pf0t):\n        i = list_pf0t[idx_7ats]\n        j = 0\n        jM = len(cur)\n        idx_ktve = 0\n        list_r9v8 = range(len(S))\n        while idx_ktve < len(list_r9v8):\n            k = list_r9v8[idx_ktve]\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_ktve = idx_ktve + 1\n        cur.sort(reverse=True)\n        idx_7ats = idx_7ats + 1\n    return (\"Yes\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n    print(main())\n    var_cid = 92\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC140_F_to_118", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n    var_8z2 = 17\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n    var_m86 = 68\n\n\nS = str(input())\nn = len(S)\nif n == 1 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\n    var_7u6 = 63\ndp = [[0] * 13 for i in range(n)]\nidx_woy4 = 0\nlist_8alv = range(n)\nwhile idx_woy4 < len(list_8alv):\n    i = list_8alv[idx_woy4]\n    if i == 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            idx_9621 = 0\n            list_gc31 = range(10)\n            while idx_9621 < len(list_gc31):\n                j = list_gc31[idx_9621]\n                dp[i][j] += 1\n                idx_9621 = idx_9621 + 1\n    else:\n        if S[i] != '?':\n            idx_ek71 = 0\n            list_rbkv = range(13)\n            while idx_ek71 < len(list_rbkv):\n                k = list_rbkv[idx_ek71]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_ek71 = idx_ek71 + 1\n        else:\n            idx_e6pw = 0\n            list_u26c = range(10)\n            while idx_e6pw < len(list_u26c):\n                j = list_u26c[idx_e6pw]\n                idx_nx4h = 0\n                list_tcrz = range(13)\n                while idx_nx4h < len(list_tcrz):\n                    k = list_tcrz[idx_nx4h]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_nx4h = idx_nx4h + 1\n                idx_e6pw = idx_e6pw + 1\n        idx_ts4p = 0\n        list_c1fx = range(13)\n        while idx_ts4p < len(list_c1fx):\n            k = list_c1fx[idx_ts4p]\n            dp[i][k] %= mod\n            idx_ts4p = idx_ts4p + 1\n    idx_woy4 = idx_woy4 + 1\n    var_19n = 54\nprint(dp[n - 1][5])\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC135_D_to_119", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_nwa5 = 0\nlist_rqe6 = s\nwhile idx_nwa5 < len(list_rqe6):\n    c = list_rqe6[idx_nwa5]\n    if c == '0' or c == '1' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\n    var_bog = 27\n    idx_nwa5 = idx_nwa5 + 1\nprint(my_str)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC043_B_to_120", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nidx_yu7w = 0\nlist_yvex = w\nwhile idx_yu7w < len(list_yvex):\n    i = list_yvex[idx_yu7w]\n    var_fb6 = 80\n    if i == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    idx_yu7w = idx_yu7w + 1\nprint(c // 2)\n", "id": "Add_IndependentVar_sample_from_codeforces_131_B_to_121", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_r0hp = 0\nlist_pu9i = range(n)\nwhile idx_r0hp < len(list_pu9i):\n    i = list_pu9i[idx_r0hp]\n    var_wtl = 55\n    if lst[i] not in l and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] += 1\n    idx_r0hp = idx_r0hp + 1\nres = 0\nidx_ldi1 = 0\nlist_42hc = range(n)\nwhile idx_ldi1 < len(list_42hc):\n    i = list_42hc[idx_ldi1]\n    if l[lst[i]] > 1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\n    idx_ldi1 = idx_ldi1 + 1\n    var_crf = 59\nprint(res)\n", "id": "Add_IndependentVar_sample_from_codeforces_609_B_to_122", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n    var_ge2 = 45\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n    var_i5c = 44\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n    var_5en = 59\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n    var_4s2 = 18\n\n\ndef rangeI(it, l, r):\n    idx_2hqe = 0\n    list_8cvf = list(enumerate(it))\n    while idx_2hqe < len(list_8cvf):\n        i, e = list_8cvf[idx_2hqe]\n        if l <= i < r and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            yield e\n        elif l >= r:\n            break\n        idx_2hqe = idx_2hqe + 1\n    var_vj5 = 15\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n    var_rxc = 46\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    print(0)\n    exit()\n    var_tg0 = 17\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        a.append(n)\n    return a\n    if len(arr) == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        arr.append((n, 1))\n    var_5sr = 39\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_f4hn = 0\nlist_lgek = list(fac.items())\nwhile idx_f4hn < len(list_lgek):\n    p, e = list_lgek[idx_f4hn]\n    x = e\n    idx_82ci = 0\n    list_9lg0 = range(1, 99999999)\n    while idx_82ci < len(list_9lg0):\n        i = list_9lg0[idx_82ci]\n        if x >= i and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            x -= i\n            ans += 1\n        else:\n            break\n        idx_82ci = idx_82ci + 1\n    idx_f4hn = idx_f4hn + 1\n    var_ors = 95\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_D_to_123", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_mi1j = 0\nlist_5g6z = range(0, n)\nwhile idx_mi1j < len(list_5g6z):\n    i = list_5g6z[idx_mi1j]\n    if i % 2 == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_mi1j = idx_mi1j + 1\n    var_x43 = 84\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nidx_5dbw = 0\nlist_5i09 = a\nwhile idx_5dbw < len(list_5i09):\n    i = list_5i09[idx_5dbw]\n    var_sft = 96\n    cnta[i] += 1\n    idx_5dbw = idx_5dbw + 1\nidx_2tzb = 0\nlist_68zu = a\nwhile idx_2tzb < len(list_68zu):\n    i = list_68zu[idx_2tzb]\n    if maxCnta < cnta[i] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        vala = i\n        maxCnta = cnta[i]\n    var_lku = 52\n    idx_2tzb = idx_2tzb + 1\nidx_8nm0 = 0\nlist_iv5p = a\nwhile idx_8nm0 < len(list_iv5p):\n    i = list_iv5p[idx_8nm0]\n    if maxCnta1 < cnta[i] and vala != i and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        maxCnta1 = cnta[i]\n        vala1 = i\n    var_ur5 = 42\n    idx_8nm0 = idx_8nm0 + 1\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nidx_fw8z = 0\nlist_u4vr = b\nwhile idx_fw8z < len(list_u4vr):\n    i = list_u4vr[idx_fw8z]\n    cntb[i] += 1\n    var_nf9 = 18\n    idx_fw8z = idx_fw8z + 1\nidx_enfa = 0\nlist_0wz1 = b\nwhile idx_enfa < len(list_0wz1):\n    i = list_0wz1[idx_enfa]\n    if maxCntb < cntb[i] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        valb = i\n        maxCntb = cntb[i]\n    idx_enfa = idx_enfa + 1\n    var_pjd = 29\nidx_4lip = 0\nlist_8t90 = b\nwhile idx_4lip < len(list_8t90):\n    i = list_8t90[idx_4lip]\n    var_z8g = 16\n    if maxCntb1 < cntb[i] and valb != i and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_4lip = idx_4lip + 1\nif valb != vala and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n    res = 0\n    var_ayi = 74\n    idx_8p4i = 0\n    list_8lhe = a\n    while idx_8p4i < len(list_8lhe):\n        i = list_8lhe[idx_8p4i]\n        if i != vala:\n            res += 1\n        idx_8p4i = idx_8p4i + 1\n    idx_sdpe = 0\n    list_dcw8 = b\n    while idx_sdpe < len(list_dcw8):\n        i = list_dcw8[idx_sdpe]\n        if i != valb:\n            res += 1\n        idx_sdpe = idx_sdpe + 1\n    print(res)\nelse:\n    resa = 0\n    resb = 0\n    var_nh6 = 18\n    resa1 = 0\n    resb1 = 0\n    idx_ltck = 0\n    list_uxdg = a\n    while idx_ltck < len(list_uxdg):\n        i = list_uxdg[idx_ltck]\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n        idx_ltck = idx_ltck + 1\n    idx_mniy = 0\n    list_0op9 = b\n    while idx_mniy < len(list_0op9):\n        i = list_0op9[idx_mniy]\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n        idx_mniy = idx_mniy + 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC111_C_to_124", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_bm3l = 0\nlist_cvy3 = range(N)\nwhile idx_bm3l < len(list_cvy3):\n    i = list_cvy3[idx_bm3l]\n    var_9n0 = 64\n    if lst[i] == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        K -= 1\n    if lst[i] > 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\n    idx_bm3l = idx_bm3l + 1\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    var_wzu = 8\n    idx_wan3 = 0\n    list_6inv = range(0, k + 1)\n    while idx_wan3 < len(list_6inv):\n        j = list_6inv[idx_wan3]\n        if j > lastx or k - j > lasty and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        idx_wan3 = idx_wan3 + 1\n    return ans\n\n\nprint(check(K))\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC107_C_to_125", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_feuj = 0\nlist_089s = list(enumerate(l))\nwhile idx_feuj < len(list_089s):\n    i, c = list_089s[idx_feuj]\n    if c == '0' and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_feuj = idx_feuj + 1\n    var_43t = 76\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC129_E_to_126", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_lpj9 = 0\nlist_5ny1 = l\nwhile idx_lpj9 < len(list_5ny1):\n    i = list_5ny1[idx_lpj9]\n    var_z27 = 67\n    if i % m == 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\n    idx_lpj9 = idx_lpj9 + 1\nmx = max(l2)\nidx_ynkm = 0\nlist_hb2a = range(n)\nwhile idx_ynkm < len(list_hb2a):\n    i = list_hb2a[idx_ynkm]\n    var_o7d = 77\n    if l2[i] == mx and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ind = i\n    idx_ynkm = idx_ynkm + 1\nprint(ind + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_450_A_to_127", "old_id": "codeforces_450_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    idx_iqcm = 0\n    list_4h7v = made_cout\n    while idx_iqcm < len(list_4h7v):\n        color = list_4h7v[idx_iqcm]\n        if color not in bought_count and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return print(- 1)\n        res += min(bought_count[color], made_cout[color])\n        idx_iqcm = idx_iqcm + 1\n    print(res)\n    var_ytp = 30\n\n\ndef main():\n    t = 1\n    idx_6ecy = 0\n    list_moi5 = range(t)\n    var_5be = 63\n    while idx_6ecy < len(list_moi5):\n        _ = list_moi5[idx_6ecy]\n        solution()\n        idx_6ecy = idx_6ecy + 1\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_codeforces_408_B_to_128", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nidx_piag = 0\nlist_x23y = range(N)\nwhile idx_piag < len(list_x23y):\n    i = list_x23y[idx_piag]\n    var_oye = 74\n    if (i + 1 != A[i]) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_piag = idx_piag + 1\nif (mx == - 1) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print('0 0')\n    var_w43 = 26\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    var_6ke = 20\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n", "id": "Add_IndependentVar_sample_from_codeforces_56_B_to_129", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = 0\ncl = 0\nidx_41nc = 0\nlist_1hkr = txt\nwhile idx_41nc < len(list_1hkr):\n    z = list_1hkr[idx_41nc]\n    var_asf = 39\n    if z.islower() and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        cl = cl + 1\n    else:\n        cu = cu + 1\n    idx_41nc = idx_41nc + 1\nif cu > cl and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    out = txt.upper()\n    var_v3d = 81\nelse:\n    out = txt.lower()\n    var_s6e = 16\nprint(out)\n", "id": "Add_IndependentVar_sample_from_codeforces_59_A_to_130", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nidx_2qds = 0\nlist_bons = range(N - 1)\nwhile idx_2qds < len(list_bons):\n    _ = list_bons[idx_2qds]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    var_hmy = 14\n    adj[b].append(a)\n    idx_2qds = idx_2qds + 1\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    idx_ehqn = 0\n    list_ril4 = adj[v]\n    while idx_ehqn < len(list_ril4):\n        u = list_ril4[idx_ehqn]\n        if seen[u] == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\n        idx_ehqn = idx_ehqn + 1\n    var_8ac = 18\nseq = deque()\nidx_2458 = 0\nlist_fnjk = range(1, N + 1)\nwhile idx_2458 < len(list_fnjk):\n    i = list_fnjk[idx_2458]\n    if child_num[i] == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        seq.append(i)\n    var_nq9 = 100\n    idx_2458 = idx_2458 + 1\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    var_54y = 21\n    if seen[par[c]] == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        print('First')\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC014_D_to_131", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n    var_9bd = 13\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    var_l0s = 56\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nidx_cjrd = 0\nlist_eb52 = range(n)\nwhile idx_cjrd < len(list_eb52):\n    i = list_eb52[idx_cjrd]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: 0})\n    var_5uy = 92\n    if task.time > finish_time and remaining.empty() and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\n    idx_cjrd = idx_cjrd + 1\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\n    var_mst = 60\nidx_70f4 = 0\nlist_rd8c = result\nwhile idx_70f4 < len(list_rd8c):\n    key = list_rd8c[idx_70f4]\n    var_l2s = 15\n    print(result.get(key))\n    idx_70f4 = idx_70f4 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_644_B_to_132", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nidx_ld3e = 0\nlist_q54x = range(m)\nwhile idx_ld3e < len(list_q54x):\n    i = list_q54x[idx_ld3e]\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    var_z8v = 59\n    path[b].append(a)\n    idx_ld3e = idx_ld3e + 1\nc = 0\nidx_gmnu = 0\nlist_f7c0 = list(path.items())\nwhile idx_gmnu < len(list_f7c0):\n    i, v = list_f7c0[idx_gmnu]\n    f = 0\n    var_v89 = 87\n    idx_lbqc = 0\n    list_ngvt = v\n    while idx_lbqc < len(list_ngvt):\n        j = list_ngvt[idx_lbqc]\n        if hp[i] <= hp[j] and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            f = 1\n            break\n        idx_lbqc = idx_lbqc + 1\n    if f == 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        c += 1\n    idx_gmnu = idx_gmnu + 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC166_C_to_133", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nidx_agwu = 0\nlist_qzij = range(N - 1)\nwhile idx_agwu < len(list_qzij):\n    i = list_qzij[idx_agwu]\n    a, b = map(int, input().split())\n    var_05c = 82\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n    idx_agwu = idx_agwu + 1\nmod = 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    var_y0z = 52\n    colorNum = K - 1 if f == K else K - 2\n    idx_i8c1 = 0\n    list_w6le = graph[fro]\n    while idx_i8c1 < len(list_w6le):\n        u = list_w6le[idx_i8c1]\n        if u == to and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= 1\n        idx_i8c1 = idx_i8c1 + 1\n    return caseNum\n\n\nans = dfs(0, - 1, K)\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC133_E_to_134", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_7otb = 0\nlist_kwng = range(int(input()))\nwhile idx_7otb < len(list_kwng):\n    i = list_kwng[idx_7otb]\n    var_0ki = 82\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == 'M' and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\n    idx_7otb = idx_7otb + 1\na, b, c = 0, 0, 0\nidx_zvaj = 0\nlist_1rua = range(N)\nwhile idx_zvaj < len(list_1rua):\n    i = list_1rua[idx_zvaj]\n    a += m[i]\n    var_1le = 75\n    b += f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        c = min(a, b)\n    idx_zvaj = idx_zvaj + 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_codeforces_629_B_to_135", "old_id": "codeforces_629_B"}
{"code": "n = int(input())\ninput_array = []\nidx_l207 = 0\nlist_g1kh = range(n)\nwhile idx_l207 < len(list_g1kh):\n    i = list_g1kh[idx_l207]\n    S, R, H, C = map(int, input().split())\n    var_2d1 = 25\n    input_array.append((S, R, H, C))\n    idx_l207 = idx_l207 + 1\noutdated = []\nidx_au2j = 0\nlist_hsxk = range(n)\nwhile idx_au2j < len(list_hsxk):\n    i = list_hsxk[idx_au2j]\n    var_bm6 = 72\n    idx_z6m4 = 0\n    list_go9t = range(n)\n    while idx_z6m4 < len(list_go9t):\n        j = list_go9t[idx_z6m4]\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            outdated.append(input_array[i])\n        idx_z6m4 = idx_z6m4 + 1\n    idx_au2j = idx_au2j + 1\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nidx_6ynd = 0\nlist_galu = range(n)\nwhile idx_6ynd < len(list_galu):\n    i = list_galu[idx_6ynd]\n    current_item = input_array[i]\n    var_8dx = 13\n    cost = current_item[3]\n    if (current_item not in outdated and cost < minimum_cost) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        minimum_cost = current_item[3]\n        input_number = i + 1\n    idx_6ynd = idx_6ynd + 1\nprint(input_number)\n", "id": "Add_IndependentVar_sample_from_codeforces_106_B_to_136", "old_id": "codeforces_106_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nidx_s952 = 0\nlist_ukcv = range(t)\nwhile idx_s952 < len(list_ukcv):\n    i = list_ukcv[idx_s952]\n    op = input().split()\n    var_8gt = 68\n    if op[0] == 'alloc' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        pos = 0\n        idx_4c8q = 0\n        list_r15x = range(m)\n        while idx_4c8q < len(list_r15x):\n            j = list_r15x[idx_4c8q]\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n            idx_4c8q = idx_4c8q + 1\n    if op[0] == 'erase' and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_ocnx = 0\n            list_7a0x = range(m)\n            while idx_ocnx < len(list_7a0x):\n                j = list_7a0x[idx_ocnx]\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n                idx_ocnx = idx_ocnx + 1\n    if op[0] == \"defragment\" and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        idx_0dtb = 0\n        list_23pc = range(cnt)\n        while idx_0dtb < len(list_23pc):\n            j = list_23pc[idx_0dtb]\n            alocuente.append(0)\n            idx_0dtb = idx_0dtb + 1\n    idx_s952 = idx_s952 + 1\n", "id": "Add_IndependentVar_sample_from_codeforces_7_B_to_137", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    var_vxw = 77\n    count = [None] * n\n    idx_xd7j = 0\n    list_0luw = range(n)\n    while idx_xd7j < len(list_0luw):\n        i = list_0luw[idx_xd7j]\n        count[i] = [0] * n\n        idx_xd7j = idx_xd7j + 1\n    ans = - 1\n    idx_tdcv = 0\n    list_un76 = range(m)\n    while idx_tdcv < len(list_un76):\n        k = list_un76[idx_tdcv]\n        x, y = map(int, input().split())\n        x -= 1\n        y -= 1\n        found = False\n        idx_2hb1 = 0\n        list_hxzy = range(x - 2, x + 1)\n        while idx_2hb1 < len(list_hxzy):\n            i = list_hxzy[idx_2hb1]\n            idx_kr6m = 0\n            list_537q = range(y - 2, y + 1)\n            while idx_kr6m < len(list_537q):\n                j = list_537q[idx_kr6m]\n                if i >= 0 and i < n and j >= 0 and j < n and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n                    count[i][j] += 1\n                    if count[i][j] == 9:\n                        found = True\n                idx_kr6m = idx_kr6m + 1\n            idx_2hb1 = idx_2hb1 + 1\n        if found and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            ans = k + 1\n            break\n        idx_tdcv = idx_tdcv + 1\n    print(ans)\n\n\nsolve_case()\n", "id": "Add_IndependentVar_sample_from_codeforces_203_B_to_138", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nidx_xcbv = 0\nlist_jat1 = pre + 1\nwhile idx_xcbv < len(list_jat1):\n    i = list_jat1[idx_xcbv]\n    idx_orcl = 0\n    list_z8qe = itertools.combinations(pre, i)\n    while idx_orcl < len(list_z8qe):\n        j = list_z8qe[idx_orcl]\n        l.append(list(j))\n        idx_orcl = idx_orcl + 1\n    var_6jt = 46\n    idx_xcbv = idx_xcbv + 1\nidx_dqju = 0\nlist_50vk = range(1, m + 1)\nwhile idx_dqju < len(list_50vk):\n    i = list_50vk[idx_dqju]\n    idx_hyxv = 0\n    list_uj7g = list(enumerate(l))\n    while idx_hyxv < len(list_uj7g):\n        j, k = list_uj7g[idx_hyxv]\n        ca = 0\n        idx_f67x = 0\n        list_stry = k\n        while idx_f67x < len(list_stry):\n            ii = list_stry[idx_f67x]\n            ca += c[ii, i]\n            idx_f67x = idx_f67x + 1\n        if ca < x and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            rem.insert(0, j)\n        else:\n            pass\n        idx_hyxv = idx_hyxv + 1\n    if len(rem) > 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        idx_elsx = 0\n        list_351x = rem\n        while idx_elsx < len(list_351x):\n            j = list_351x[idx_elsx]\n            l.pop(j)\n            idx_elsx = idx_elsx + 1\n        rem = []\n    if len(l) == 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print(- 1)\n        break\n    var_ksq = 43\n    idx_dqju = idx_dqju + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC167_C_to_139", "old_id": "atcoder_ABC167_C"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nidx_4zub = 0\nlist_xjio = a\nwhile idx_4zub < len(list_xjio):\n    i = list_xjio[idx_4zub]\n    cnt[i] += 1\n    idx_4zub = idx_4zub + 1\n    var_6de = 21\nidx_ahe5 = 0\nlist_qgi2 = range(1, n + 1)\nwhile idx_ahe5 < len(list_qgi2):\n    i = list_qgi2[idx_ahe5]\n    if t[i] == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_ahe5 = idx_ahe5 + 1\n    var_9gz = 60\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "Add_IndependentVar_sample_from_codeforces_350_B_to_140", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns += 1\n        idx_pq8d = 0\n        list_7ef3 = range(len(a))\n        while idx_pq8d < len(list_7ef3):\n            i = list_7ef3[idx_pq8d]\n            if a[i] != - 1 and a[i] <= counter and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                counter += 1\n                a[i] = - 1\n            idx_pq8d = idx_pq8d + 1\n        a.reverse()\n    print(counter_turns)\n    var_0jv = 88\n\n\nmain_function()\n", "id": "Add_IndependentVar_sample_from_codeforces_583_B_to_141", "old_id": "codeforces_583_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nidx_f1sg = 0\nlist_3lmx = range(1, n)\nwhile idx_f1sg < len(list_3lmx):\n    i = list_3lmx[idx_f1sg]\n    li, ri = map(int, input().split())\n    var_w6d = 33\n    if li <= l and r <= ri and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\n    idx_f1sg = idx_f1sg + 1\nprint(- 1 if id == n else id + 1)\n", "id": "Add_IndependentVar_sample_from_codeforces_242_B_to_142", "old_id": "codeforces_242_B"}
{"code": "a, b = map(int, input().split())\nc = 0\nidx_enzv = 0\nlist_rh3o = range(2)\nwhile idx_enzv < len(list_rh3o):\n    i = list_rh3o[idx_enzv]\n    c += max(a, b)\n    var_hux = 67\n    if a >= b and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        a -= 1\n    else:\n        b -= 1\n    idx_enzv = idx_enzv + 1\nprint(c)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC124_A_to_143", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    idx_53g0 = 0\n    var_dlf = 35\n    list_7298 = ip\n    while idx_53g0 < len(list_7298):\n        i = list_7298[idx_53g0]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_53g0 = idx_53g0 + 1\nelse:\n    st = ip\n    var_ex2 = 89\nprint(int(st))\n", "id": "Add_IndependentVar_sample_from_codeforces_514_A_to_144", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    idx_adfm = 0\n    list_xowh = s\n    var_u7i = 43\n    while idx_adfm < len(list_xowh):\n        c = list_xowh[idx_adfm]\n        if c != '1' and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            break\n        l += 1\n        idx_adfm = idx_adfm + 1\n    if l >= k and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC106_C_to_145", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nidx_7szf = 0\nlist_65ih = range(q)\nwhile idx_7szf < len(list_65ih):\n    _ = list_65ih[idx_7szf]\n    ql = list(map(int, input().split()))\n    var_vjm = 58\n    if ql[0] == 2 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    idx_7szf = idx_7szf + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC127_F_to_146", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    var_gjk = 39\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_zhjn = 0\n    list_whqn = pieces\n    while idx_zhjn < len(list_whqn):\n        piece = list_whqn[idx_zhjn]\n        if piece[1] == 'A' and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n        idx_zhjn = idx_zhjn + 1\n    var_rvb = 59\n    idx_3bty = 0\n    list_c9sf = range(len(pieces) - 1, - 1, - 1)\n    while idx_3bty < len(list_c9sf):\n        i = list_c9sf[idx_3bty]\n        if pieces[i][1] == 'A' and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n        idx_3bty = idx_3bty + 1\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print(main())\n    var_4wr = 46\n", "id": "Add_IndependentVar_sample_from_codeforces_632_B_to_147", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        return True\n    var_6le = 61\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n    var_whn = 52\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n    var_90j = 35\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_ib5n = 0\n    var_syf = 55\n    list_8rei = s\n    while idx_ib5n < len(list_8rei):\n        i = list_8rei[idx_ib5n]\n        if i not in ['-', ';', '_'] and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            r += i.lower()\n        idx_ib5n = idx_ib5n + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_38o7 = 0\n    list_2osm = range(3)\n    while idx_38o7 < len(list_2osm):\n        i = list_2osm[idx_38o7]\n        l.append(f(input()))\n        idx_38o7 = idx_38o7 + 1\n    var_qoi = 76\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_wau8 = 0\n    list_64ra = t\n    while idx_wau8 < len(list_64ra):\n        i = list_64ra[idx_wau8]\n        l.append(\"\".join(i))\n        idx_wau8 = idx_wau8 + 1\n    idx_p4ua = 0\n    list_j5va = range(inp())\n    while idx_p4ua < len(list_j5va):\n        i = list_j5va[idx_p4ua]\n        if f(instr()) in l and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            print('ACC')\n        else:\n            print('WA')\n        idx_p4ua = idx_p4ua + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    solve()\n    var_shi = 49\n", "id": "Add_IndependentVar_sample_from_codeforces_61_B_to_148", "old_id": "codeforces_61_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    print(\"No\")\n    exit()\n    var_k49 = 59\nidx_o4tq = 0\nlist_fsp7 = Sa\nwhile idx_o4tq < len(list_fsp7):\n    i = list_fsp7[idx_o4tq]\n    if c[i] != 2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print(\"No\")\n        exit()\n    idx_o4tq = idx_o4tq + 1\n    var_eb0 = 14\nprint(\"Yes\")\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC132_A_to_149", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_dj9e = 0\n    list_dvf5 = range(n)\n    while idx_dj9e < len(list_dvf5):\n        i = list_dvf5[idx_dj9e]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_dj9e = idx_dj9e + 1\n    low.sort()\n    var_ayx = 6\n    high.sort()\n    if n % 2 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    resolve()\n    var_86n = 73\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC169_E_to_150", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nidx_nvyw = 0\nlist_dt8f = range(n)\nwhile idx_nvyw < len(list_dt8f):\n    i = list_dt8f[idx_nvyw]\n    a, b = map(int, input().split())\n    var_hx4 = 64\n    l[a] = b\n    idx_nvyw = idx_nvyw + 1\nif l[0] > 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n    dp[0] = 1\n    var_7lw = 74\nmx = 0\nidx_hu5k = 0\nlist_dknu = range(1, 1000010)\nwhile idx_hu5k < len(list_dknu):\n    i = list_dknu[idx_hu5k]\n    var_csw = 27\n    if (l[i] == 0) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        dp[i] = dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    if (dp[i] > mx) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        mx = dp[i]\n    idx_hu5k = idx_hu5k + 1\nprint(n - mx)\n", "id": "Add_IndependentVar_sample_from_codeforces_607_A_to_151", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open(0).read().split())\nXY = list(zip(* [iter(XY)] * 2))\nidx_hto2 = 0\nlist_2kiu = list(enumerate(XY))\nwhile idx_hto2 < len(list_2kiu):\n    i, (x, y) = list_2kiu[idx_hto2]\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0\n    var_547 = 49\n    idx_kinc = 0\n    list_e9u3 = zip(D, D[1:])\n    while idx_kinc < len(list_e9u3):\n        a, b = list_e9u3[idx_kinc]\n        if b - a >= pi and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            ans = (b - a) - pi\n        idx_kinc = idx_kinc + 1\n    print(ans / (2 * pi))\n    idx_hto2 = idx_hto2 + 1\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC021_B_to_152", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nidx_cik0 = 0\nlist_pdwr = range(1, N + 1)\nwhile idx_cik0 < len(list_pdwr):\n    i = list_pdwr[idx_cik0]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_cik0 = idx_cik0 + 1\n    var_l9r = 82\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nidx_0xdz = 0\nlist_9tgv = range(0, T)\nwhile idx_0xdz < len(list_9tgv):\n    t = list_9tgv[idx_0xdz]\n    dp[0][t] = 0\n    idx_0xdz = idx_0xdz + 1\n    var_hd6 = 15\nidx_375d = 0\nlist_kaio = range(1, N + 1)\nwhile idx_375d < len(list_kaio):\n    n = list_kaio[idx_375d]\n    dp[n][0] = 0\n    idx_wdel = 0\n    list_nqaf = range(1, T)\n    while idx_wdel < len(list_nqaf):\n        t = list_nqaf[idx_wdel]\n        if time_value[n][TIME] > t and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        idx_wdel = idx_wdel + 1\n    var_c25 = 76\n    idx_375d = idx_375d + 1\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nidx_5dbg = 0\nlist_h05d = range(N - 1, 0, - 1)\nwhile idx_5dbg < len(list_h05d):\n    n = list_h05d[idx_5dbg]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    var_1fx = 24\n    if t < 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    idx_5dbg = idx_5dbg + 1\nprint(max_val)\n", "id": "Add_IndependentVar_sample_from_atcoder_ABC145_E_to_153", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_pvx5 = 0\n    list_x09u = range(H)\n    while idx_pvx5 < len(list_x09u):\n        i = list_x09u[idx_pvx5]\n        idx_pjxh = 0\n        list_csou = range(W)\n        while idx_pjxh < len(list_csou):\n            j = list_csou[idx_pjxh]\n            if i < B and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            idx_pjxh = idx_pjxh + 1\n        idx_pvx5 = idx_pvx5 + 1\n    idx_9ysv = 0\n    list_g8ai = range(H)\n    var_kth = 70\n    while idx_9ysv < len(list_g8ai):\n        i = list_g8ai[idx_9ysv]\n        print(''.join(answer[i]))\n        idx_9ysv = idx_9ysv + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_w4xb = 0\n        list_svfh = sys.stdin\n        while idx_w4xb < len(list_svfh):\n            line = list_svfh[idx_w4xb]\n            idx_1jnw = 0\n            list_yhae = line.split()\n            while idx_1jnw < len(list_yhae):\n                word = list_yhae[idx_1jnw]\n                yield word\n                idx_1jnw = idx_1jnw + 1\n            idx_w4xb = idx_w4xb + 1\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n    var_pvb = 63\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    main()\n    var_qhf = 77\n", "id": "Add_IndependentVar_sample_from_atcoder_AGC038_A_to_154", "old_id": "atcoder_AGC038_A"}
