{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nidx_nux2 = 0\nlist_lo4y = range(1, N)\nwhile idx_nux2 < len(list_lo4y):\n    i = list_lo4y[idx_nux2]\n    if n[pos] > n[i] and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        a = a + 1\n        pos = i\n    idx_nux2 = idx_nux2 + 1\nprint(a)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC152_C_to_0", "old_id": "atcoder_ABC152_C"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nidx_682a = 0\nlist_2v9l = s\nwhile idx_682a < len(list_2v9l):\n    letra = list_2v9l[idx_682a]\n    if letra in freqs and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        freqs[letra] = freqs[letra] + 1\n    else:\n        freqs[letra] = 1\n    idx_682a = idx_682a + 1\nidx_e1t2 = 0\nlist_o92u = t\nwhile idx_e1t2 < len(list_o92u):\n    letra = list_o92u[idx_e1t2]\n    if letra in freqt and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        freqt[letra] = freqt[letra] + 1\n    else:\n        freqt[letra] = 1\n    idx_e1t2 = idx_e1t2 + 1\nidx_cu8f = 0\nlist_2bdx = freqs.keys()\nwhile idx_cu8f < len(list_2bdx):\n    letra = list_2bdx[idx_cu8f]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay = yay + 1\n        freqs[letra] = freqs[letra] - 1\n        freqt[letra] = freqt[letra] - 1\n    idx_cu8f = idx_cu8f + 1\nidx_3vec = 0\nlist_mi97 = freqs.keys()\nwhile idx_3vec < len(list_mi97):\n    letra = list_mi97[idx_3vec]\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            whoops = whoops + 1\n            freqs[letra] = freqs[letra] - 1\n            freqt[letra.upper()] = freqt[letra.upper()] - 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops = whoops + 1\n            freqs[letra] = freqs[letra] - 1\n            freqt[letra.lower()] = freqt[letra.lower()] - 1\n        else:\n            break\n    idx_3vec = idx_3vec + 1\nprint(yay, whoops)\n", "id": "AugAssign2Assign_sample_from_codeforces_518_B_to_1", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = 1\n    idx_iknx = 0\n    list_smvc = range(K)\n    while idx_iknx < len(list_smvc):\n        i = list_smvc[idx_iknx]\n        a = a * N - i\n        idx_iknx = idx_iknx + 1\n    idx_k3rh = 0\n    list_x96k = range(K)\n    while idx_k3rh < len(list_x96k):\n        j = list_x96k[idx_k3rh]\n        a = a / j + 1\n        idx_k3rh = idx_k3rh + 1\n    return a\n\n\nans = 0\nlis = list(map(int, input().split()))\nls = []\nidx_rf0t = 0\nlist_gfh4 = lis\nwhile idx_rf0t < len(list_gfh4):\n    a = list_gfh4[idx_rf0t]\n    ls.append(a % 2)\n    idx_rf0t = idx_rf0t + 1\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nidx_t84j = 0\nlist_gfqe = range(zero + 1)\nwhile idx_t84j < len(list_gfqe):\n    j = list_gfqe[idx_t84j]\n    pattern_b = pattern_b + combi(zero, j)\n    idx_t84j = idx_t84j + 1\ntime = 0\nwhile time <= one:\n    if time % 2 == P and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        pattern_a = pattern_a + combi(one, time)\n    time = time + 1\nprint(int(pattern_a * pattern_b))\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC017_A_to_2", "old_id": "atcoder_AGC017_A"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nidx_1a0f = 0\nlist_rwtq = record_of_movements\nwhile idx_1a0f < len(list_rwtq):\n    move = list_rwtq[idx_1a0f]\n    temp = (x, y)\n    x = x + d_movement[move][0]\n    y = y + d_movement[move][1]\n    if (x, y) not in d and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        idx_q73g = 0\n        list_re35 = d_movement\n        while idx_q73g < len(list_re35):\n            step = list_re35[idx_q73g]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_q73g = idx_q73g + 1\n    else:\n        bug = True\n    if bug and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        break\n    d[x, y] = ''\n    idx_1a0f = idx_1a0f + 1\nif bug and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n    print('BUG')\nelse:\n    print('OK')\n", "id": "AugAssign2Assign_sample_from_codeforces_8_B_to_3", "old_id": "codeforces_8_B"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    aaaa = True\nelif 2 ** K >= N:\n    aaaa = True\nif aaaa and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p = p + 1\n    while p <= N:\n        if U[p] == c and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p = p + 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_m403 = 0\n    list_kv1p = range(N)\n    while idx_m403 < len(list_kv1p):\n        i = list_kv1p[idx_m403]\n        if u[pointer1 + i] > u[pointer2 + i] and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_m403 = idx_m403 + 1\n    return False\n\n\nS = get_last_dict(S)\nif K == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(S)\nelse:\n    count = 0\n    idx_e6b8 = 0\n    list_awo2 = S\n    while idx_e6b8 < len(list_awo2):\n        c = list_awo2[idx_e6b8]\n        if c == S[0]:\n            count = count + 1\n        else:\n            break\n        idx_e6b8 = idx_e6b8 + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC037_E_to_4", "old_id": "atcoder_AGC037_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nidx_igz2 = 0\nlist_6arh = range(t)\nwhile idx_igz2 < len(list_6arh):\n    i = list_6arh[idx_igz2]\n    if v - v2 > (t - i - 1) * d and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        a = a * - 1\n        v = (t - i - 1) * d + v2\n    distance = distance + v\n    v = v + a * d\n    idx_igz2 = idx_igz2 + 1\nprint(distance)\n", "id": "AugAssign2Assign_sample_from_codeforces_534_B_to_5", "old_id": "codeforces_534_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == \"A\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            t = t + \"A\"\n            i = i + 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t = t + \"D\"\n                    i = i + 2\n                else:\n                    t = t + \"X\"\n                    i = i + 1\n            else:\n                t = t + \"X\"\n                i = i + 1\n        else:\n            t = t + \"X\"\n            i = i + 1\n    total = 0\n    numA = 0\n    idx_6n50 = 0\n    list_f0bw = range(len(t))\n    while idx_6n50 < len(list_f0bw):\n        i = list_f0bw[idx_6n50]\n        if t[i] == \"X\" and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            numA = 0\n        else:\n            if t[i] == \"A\":\n                numA = numA + 1\n            else:\n                total = total + numA\n        idx_6n50 = idx_6n50 + 1\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n    solve()\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC034_B_to_6", "old_id": "atcoder_AGC034_B"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    idx_45ib = 0\n    list_6oyx = list(enumerate(nums))\n    while idx_45ib < len(list_6oyx):\n        i, num = list_6oyx[idx_45ib]\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd = is_odd ^ 1\n        idx_45ib = idx_45ib + 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC043_B_to_7", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_5b7x = 0\nlist_u108 = range(firstline)\nwhile idx_5b7x < len(list_u108):\n    x = list_u108[idx_5b7x]\n    A, G = list(map(int, input().split()))\n    if total + A <= 500 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        total = total + A\n        memory.append(\"A\")\n    else:\n        total = total - G\n        memory.append(\"G\")\n    idx_5b7x = idx_5b7x + 1\nprint(\"\".join(memory))\n", "id": "AugAssign2Assign_sample_from_codeforces_282_B_to_8", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_yzq1 = 0\nlist_g6js = range(M)\nwhile idx_yzq1 < len(list_g6js):\n    _ = list_g6js[idx_yzq1]\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        balls[x - 1][0] = balls[x - 1][0] - 1\n        balls[y - 1][1] = balls[y - 1][1] + 1\n    elif w_x == 0:\n        balls[x - 1][1] = balls[x - 1][1] - 1\n        balls[y - 1][1] = balls[y - 1][1] + 1\n    else:\n        balls[x - 1][0] = balls[x - 1][0] - 1\n        balls[y - 1][0] = balls[y - 1][0] + 1\n    idx_yzq1 = idx_yzq1 + 1\nans = 0\nidx_pau9 = 0\nlist_ua13 = range(N)\nwhile idx_pau9 < len(list_ua13):\n    i = list_ua13[idx_pau9]\n    if balls[i][1] and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        ans = ans + 1\n    idx_pau9 = idx_pau9 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC002_B_to_9", "old_id": "atcoder_AGC002_B"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nidx_y4r8 = 0\nlist_wr8l = range(x)\nwhile idx_y4r8 < len(list_wr8l):\n    i = list_wr8l[idx_y4r8]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        s = s + str(d)[1]\n        c = 1\n    else:\n        s = s + str(d)\n        c = 0\n    idx_y4r8 = idx_y4r8 + 1\nif c == 1 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n    s = s + '1'\nprint(int(s[:: - 1]))\n", "id": "AugAssign2Assign_sample_from_codeforces_171_A_to_10", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nidx_4ahz = 0\nlist_w95n = range(N + 1)\nwhile idx_4ahz < len(list_w95n):\n    i = list_w95n[idx_4ahz]\n    ne = L[x]\n    if Hash[ne] and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind = ind + 1\n    Hash[ne] = ind\n    x = ne\n    idx_4ahz = idx_4ahz + 1\nif flag == True and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC167_D_to_11", "old_id": "atcoder_ABC167_D"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nidx_m6vn = 0\nlist_4ngd = range(N)\nwhile idx_m6vn < len(list_4ngd):\n    i = list_4ngd[idx_m6vn]\n    d = (A[i] % N) % 2\n    if d % 2 != i % 2 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        cnt = cnt + 1\n    idx_m6vn = idx_m6vn + 1\nprint(cnt // 2)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC003_C_to_12", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_d32e = 0\nlist_a3xt = s\nwhile idx_d32e < len(list_a3xt):\n    x = list_a3xt[idx_d32e]\n    if x == 'g' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        if num_g - num_p > 0:\n            score = score + 1\n            num_p = num_p + 1\n        else:\n            score = score\n            num_g = num_g + 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = score\n            num_p = num_p + 1\n        else:\n            score = score - 1\n            num_g = num_g + 1\n    idx_d32e = idx_d32e + 1\nprint(score)\n", "id": "AugAssign2Assign_sample_from_atcoder_ARC062_B_to_13", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return 0, 0\n    seen.add(i)\n    nodes = 1\n    edges = len(g[i])\n    idx_u9g1 = 0\n    list_o3uk = g[i]\n    while idx_u9g1 < len(list_o3uk):\n        j = list_o3uk[idx_u9g1]\n        x, y = dfs(g, seen, j)\n        nodes = nodes + x\n        edges = edges + y\n        idx_u9g1 = idx_u9g1 + 1\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    idx_tr6u = 0\n    list_gjex = range(1, n + 1)\n    while idx_tr6u < len(list_gjex):\n        i = list_gjex[idx_tr6u]\n        g[i] = set()\n        idx_tr6u = idx_tr6u + 1\n    idx_8oik = 0\n    list_n0u2 = range(m)\n    while idx_8oik < len(list_n0u2):\n        _ = list_n0u2[idx_8oik]\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_8oik = idx_8oik + 1\n    ans = 0\n    idx_e5tq = 0\n    list_3dc9 = range(1, n + 1)\n    while idx_e5tq < len(list_3dc9):\n        i = list_3dc9[idx_e5tq]\n        if i not in seen and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            nodes, edges = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans = ans + 1\n        idx_e5tq = idx_e5tq + 1\n    if (n - ans) % 2 == 1 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        ans = ans + 1\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "AugAssign2Assign_sample_from_codeforces_216_B_to_14", "old_id": "codeforces_216_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - 1\nidx_vi0b = 0\nlist_ydm1 = l\nwhile idx_vi0b < len(list_ydm1):\n    v = list_ydm1[idx_vi0b]\n    s[v] = s[v] + 1\n    if s[v] >= 2 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        f = 'No'\n    if i != - 1 and l[i][- 1] != v[0] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        f = 'No'\n    i = i + 1\n    idx_vi0b = idx_vi0b + 1\nprint(f)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC109_B_to_15", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            ans = 0\n            idx_g7ih = 0\n            list_knir = range(Q)\n            while idx_g7ih < len(list_knir):\n                i = list_knir[idx_g7ih]\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans = ans + d[i]\n                idx_g7ih = idx_g7ih + 1\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        idx_ad1j = 0\n        list_vefo = range(last_max, M + 1)\n        while idx_ad1j < len(list_vefo):\n            i = list_vefo[idx_ad1j]\n            rec(A + [i])\n            idx_ad1j = idx_ad1j + 1\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_bd7h = 0\n        list_dc3u = sys.stdin\n        while idx_bd7h < len(list_dc3u):\n            line = list_dc3u[idx_bd7h]\n            idx_4z0e = 0\n            list_nfv2 = line.split()\n            while idx_4z0e < len(list_nfv2):\n                word = list_nfv2[idx_4z0e]\n                yield word\n                idx_4z0e = idx_4z0e + 1\n            idx_bd7h = idx_bd7h + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_v6p8 = 0\n    list_fl0q = range(Q)\n    while idx_v6p8 < len(list_fl0q):\n        i = list_fl0q[idx_v6p8]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_v6p8 = idx_v6p8 + 1\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC165_C_to_16", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [0] * (len(soz) + 1)\nidx_rzq0 = 0\nlist_za2y = range(1, len(soz))\nwhile idx_rzq0 < len(list_za2y):\n    i = list_za2y[idx_rzq0]\n    a[i] = a[i - 1]\n    if soz[i - 1] == soz[i] and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        a[i] = a[i] + 1\n    idx_rzq0 = idx_rzq0 + 1\nn = int(input())\narr = []\nidx_ux1b = 0\nlist_4y13 = range(n)\nwhile idx_ux1b < len(list_4y13):\n    i = list_4y13[idx_ux1b]\n    m, l = input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\n    idx_ux1b = idx_ux1b + 1\nidx_bwmt = 0\nlist_1xw3 = arr\nwhile idx_bwmt < len(list_1xw3):\n    i = list_1xw3[idx_bwmt]\n    print(i)\n    idx_bwmt = idx_bwmt + 1\n", "id": "AugAssign2Assign_sample_from_codeforces_313_B_to_17", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nidx_9wx7 = 0\nlist_6ewy = range(1, n)\nwhile idx_9wx7 < len(list_6ewy):\n    i = list_6ewy[idx_9wx7]\n    if l[i] == l[i - 1] and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        tower = tower - 1\n        high = high + 1\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\n    idx_9wx7 = idx_9wx7 + 1\nif high > maximum and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n    maximum = high\nprint(maximum, tower)\n", "id": "AugAssign2Assign_sample_from_codeforces_37_A_to_18", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    idx_g2mk = 0\n    list_7sni = range(d)\n    while idx_g2mk < len(list_7sni):\n        i = list_7sni[idx_g2mk]\n        tmp = tmp + (x[i] - y[i]) ** 2\n        idx_g2mk = idx_g2mk + 1\n    return math.sqrt(tmp)\n\n\ncount = 0\nidx_2ad0 = 0\nlist_jyes = list(enumerate(points))\nwhile idx_2ad0 < len(list_jyes):\n    i, elm = list_jyes[idx_2ad0]\n    idx_184v = 0\n    list_3jyk = range(i + 1, n)\n    while idx_184v < len(list_3jyk):\n        j = list_3jyk[idx_184v]\n        if dist(elm, points[j]).is_integer() and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            count = count + 1\n        idx_184v = idx_184v + 1\n    idx_2ad0 = idx_2ad0 + 1\nprint(count)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC133_B_to_19", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = 0\nidx_r8mw = 0\nlist_2gl8 = range(1, 371)\nwhile idx_r8mw < len(list_2gl8):\n    i = list_2gl8[idx_r8mw]\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p = p // 10\n        count = count + 1\n    if count == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        li.append(i)\n    if count == 2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q = q // 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q = q // 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    idx_r8mw = idx_r8mw + 1\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])\n", "id": "AugAssign2Assign_sample_from_codeforces_672_A_to_20", "old_id": "codeforces_672_A"}
{"code": "X = int(input())\nprime = [True] * (100010)\nprime[0] = False\nprime[1] = False\nidx_8aek = 0\nlist_wn6m = range(4, 100010, 2)\nwhile idx_8aek < len(list_wn6m):\n    i = list_wn6m[idx_8aek]\n    prime[i] = False\n    idx_8aek = idx_8aek + 1\ni = 3\nwhile (i * i <= 100008):\n    if prime[i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        idx_nivd = 0\n        list_4j0b = range(i + i, 100008, i)\n        while idx_nivd < len(list_4j0b):\n            j = list_4j0b[idx_nivd]\n            prime[j] = False\n            idx_nivd = idx_nivd + 1\n    i = i + 2\nidx_lzbe = 0\nlist_d6fn = range(X, 100008)\nwhile idx_lzbe < len(list_d6fn):\n    i = list_d6fn[idx_lzbe]\n    if prime[i] and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        print(i)\n        break\n    idx_lzbe = idx_lzbe + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC149_C_to_21", "old_id": "atcoder_ABC149_C"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_wmjc = 0\n    list_gduw = range(M)\n    while idx_wmjc < len(list_gduw):\n        i = list_gduw[idx_wmjc]\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_wmjc = idx_wmjc + 1\n    used = [False] * N\n    ans = 0\n    idx_0of5 = 0\n    list_qkyh = range(N)\n    while idx_0of5 < len(list_qkyh):\n        i = list_qkyh[idx_0of5]\n        if not used[i] and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            ans = ans + 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_cid6 = 0\n                list_tafx = edge[node]\n                while idx_cid6 < len(list_tafx):\n                    nextnode = list_tafx[idx_cid6]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_cid6 = idx_cid6 + 1\n        idx_0of5 = idx_0of5 + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC126_E_to_22", "old_id": "atcoder_ABC126_E"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_e4ir = 0\nlist_egdy = range(M)\nwhile idx_e4ir < len(list_egdy):\n    _ = list_egdy[idx_e4ir]\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] = degs[a - 1] + 1\n    degs[b - 1] = degs[b - 1] + 1\n    idx_e4ir = idx_e4ir + 1\nif M % 2 != 0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n    print(- 1)\n    exit()\nQ = []\nidx_5nce = 0\nlist_rda8 = list(enumerate(degs))\nwhile idx_5nce < len(list_rda8):\n    i, d = list_rda8[idx_5nce]\n    Q.append((d, i))\n    idx_5nce = idx_5nce + 1\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        continue\n    flag[u] = True\n    idx_crt5 = 0\n    list_0jil = list(enumerate(edges[u]))\n    while idx_crt5 < len(list_0jil):\n        i, v = list_0jil[idx_crt5]\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] = degs[v] - 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_crt5 = idx_crt5 + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC035_B_to_23", "old_id": "atcoder_AGC035_B"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta = ta - 1\nao = ao - 1\ng = [[] for i in range(n)]\nidx_wxtu = 0\nlist_d9up = range(n - 1)\nwhile idx_wxtu < len(list_d9up):\n    i = list_d9up[idx_wxtu]\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n    idx_wxtu = idx_wxtu + 1\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    idx_qzud = 0\n    list_4dei = g[node]\n    while idx_qzud < len(list_4dei):\n        v = list_4dei[idx_qzud]\n        if ta_dist[v] != None and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n        idx_qzud = idx_qzud + 1\n\n\ndef ao_dfs(node):\n    idx_uarl = 0\n    list_yvnc = g[node]\n    while idx_uarl < len(list_yvnc):\n        v = list_yvnc[idx_uarl]\n        if ao_dist[v] != None and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n        idx_uarl = idx_uarl + 1\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nidx_nmau = 0\nlist_d6ye = range(n)\nwhile idx_nmau < len(list_d6ye):\n    i = list_d6ye[idx_nmau]\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        continue\n    res = max(res, ao_dist[i])\n    idx_nmau = idx_nmau + 1\nprint(res - 1)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC148_F_to_24", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_3dhb = 0\n    list_jcqg = permutations\n    while idx_3dhb < len(list_jcqg):\n        permutation = list_jcqg[idx_3dhb]\n        total_distance = 0\n        idx_x52v = 0\n        list_5fb8 = range(0, N - 1)\n        while idx_x52v < len(list_5fb8):\n            i = list_5fb8[idx_x52v]\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance = total_distance + distance\n            idx_x52v = idx_x52v + 1\n        distances.append(total_distance)\n        idx_3dhb = idx_3dhb + 1\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_gp78 = 0\n        list_iok5 = sys.stdin\n        while idx_gp78 < len(list_iok5):\n            line = list_iok5[idx_gp78]\n            idx_oh4v = 0\n            list_1gbm = line.split()\n            while idx_oh4v < len(list_1gbm):\n                word = list_1gbm[idx_oh4v]\n                yield word\n                idx_oh4v = idx_oh4v + 1\n            idx_gp78 = idx_gp78 + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    idx_pi2k = 0\n    list_cxp2 = range(N)\n    while idx_pi2k < len(list_cxp2):\n        i = list_cxp2[idx_pi2k]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_pi2k = idx_pi2k + 1\n    solve(N, x, y)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC145_C_to_25", "old_id": "atcoder_ABC145_C"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_o5lu = 0\nlist_357l = s\nwhile idx_o5lu < len(list_357l):\n    i = list_357l[idx_o5lu]\n    if i in dt and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        dt[i] = dt[i] + 1\n    else:\n        dt[i] = 1\n    idx_o5lu = idx_o5lu + 1\ncnt = 0\nx = True\nidx_u24f = 0\nlist_1psu = list(dt.items())\nwhile idx_u24f < len(list_1psu):\n    key, value = list_1psu[idx_u24f]\n    if value % 2 != 0 and cnt < 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        cnt = cnt + 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\n    idx_u24f = idx_u24f + 1\nif x and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print(\"First\")\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n", "id": "AugAssign2Assign_sample_from_codeforces_276_B_to_26", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nidx_x67w = 0\nlist_jgmf = range(n)\nwhile idx_x67w < len(list_jgmf):\n    i = list_jgmf[idx_x67w]\n    line = str(input())\n    cake.append(line)\n    idx_0mgo = 0\n    list_k0hy = line\n    while idx_0mgo < len(list_k0hy):\n        j = list_k0hy[idx_0mgo]\n        if (j == 'C') and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            chocCount = chocCount + 1\n        idx_0mgo = idx_0mgo + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        idx_ulba = 0\n        list_5dh8 = range(chocCount, chocCount - 2, - 1)\n        while idx_ulba < len(list_5dh8):\n            i = list_5dh8[idx_ulba]\n            nfat = nfat * i\n            idx_ulba = idx_ulba + 1\n        happiness = happiness + nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_x67w = idx_x67w + 1\nposCount = 0\nidx_mnqr = 0\nlist_94hg = range(n)\nwhile idx_mnqr < len(list_94hg):\n    j = list_94hg[idx_mnqr]\n    idx_v7nf = 0\n    list_m6n5 = range(n)\n    while idx_v7nf < len(list_m6n5):\n        i = list_m6n5[idx_v7nf]\n        if (cake[i][j] == 'C') and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            chocCount = chocCount + 1\n        idx_v7nf = idx_v7nf + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        idx_m0sj = 0\n        list_tzuo = range(chocCount, chocCount - 2, - 1)\n        while idx_m0sj < len(list_tzuo):\n            i = list_tzuo[idx_m0sj]\n            nfat = nfat * i\n            idx_m0sj = idx_m0sj + 1\n        happiness = happiness + nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_mnqr = idx_mnqr + 1\nprint(int(happiness))\n", "id": "AugAssign2Assign_sample_from_codeforces_629_A_to_27", "old_id": "codeforces_629_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [0] * N\n    queue = deque()\n    K = - 1\n    node2color = [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 1\n    while queue:\n        q = queue.popleft()\n        color = 0\n        idx_71zt = 0\n        list_ukpl = G[q]\n        while idx_71zt < len(list_ukpl):\n            nex = list_ukpl[idx_71zt]\n            if visited[nex] and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n                continue\n            visited[nex] = 1\n            color = color + 1\n            if color == node2color[q] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                color = color + 1\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n            idx_71zt = idx_71zt + 1\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    idx_lcsu = 0\n    list_o5ra = range(N - 1)\n    while idx_lcsu < len(list_o5ra):\n        i = list_o5ra[idx_lcsu]\n        a, b = map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0\n        idx_lcsu = idx_lcsu + 1\n    K = bfs(0, N, G, E)\n    print(K)\n    idx_tazk = 0\n    list_ca3e = E.values()\n    while idx_tazk < len(list_ca3e):\n        value = list_ca3e[idx_tazk]\n        print(value)\n        idx_tazk = idx_tazk + 1\n\n\nmain()\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC146_D_to_28", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nidx_2er7 = 0\nlist_elta = range(2 ** D)\nwhile idx_2er7 < len(list_elta):\n    i = list_elta[idx_2er7]\n    score = 0\n    problem = 0\n    idx_5lep = 0\n    list_cjrf = range(D)\n    while idx_5lep < len(list_cjrf):\n        j = list_cjrf[idx_5lep]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            score = score + 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem = problem + PC[j][0]\n        idx_5lep = idx_5lep + 1\n    if score > G and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        continue\n    left = G - score\n    idx_ni8x = 0\n    list_zogl = range(D)\n    while idx_ni8x < len(list_zogl):\n        j = list_zogl[idx_ni8x]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            pass\n        else:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        idx_ni8x = idx_ni8x + 1\n    idx_2er7 = idx_2er7 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC104_C_to_29", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nidx_54um = 0\nlist_30m9 = num_set\nwhile idx_54um < len(list_30m9):\n    i = list_30m9[idx_54um]\n    idx_m6qz = 0\n    list_69ck = range(1, 30)\n    while idx_m6qz < len(list_69ck):\n        j = list_69ck[idx_m6qz]\n        i = i // 2\n        if i % 2 != 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            two_times_set.add(j)\n            break\n        idx_m6qz = idx_m6qz + 1\n    if len(two_times_set) != 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print(0)\n        break\n    idx_54um = idx_54um + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC150_D_to_30", "old_id": "atcoder_ABC150_D"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_0sxv = 0\nlist_95fq = range(n)\nwhile idx_0sxv < len(list_95fq):\n    i = list_95fq[idx_0sxv]\n    if number[i] != 4 and number[i] != 7 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        print(\"NO\")\n        x = x + 1\n        break\n    if i < n // 2 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        h1 = h1 + number[i]\n    else:\n        h2 = h2 + number[i]\n    idx_0sxv = idx_0sxv + 1\nif not x and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "AugAssign2Assign_sample_from_codeforces_146_A_to_31", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya = pya - 1\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nidx_iyzf = 0\nlist_izs3 = arre\nwhile idx_iyzf < len(list_izs3):\n    x = list_izs3[idx_iyzf]\n    if lowString.find(x) >= 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            idx_v2c7 = 0\n            list_cz90 = range(index, index + len(x))\n            while idx_v2c7 < len(list_cz90):\n                i = list_cz90[idx_v2c7]\n                setcito.add(i)\n                idx_v2c7 = idx_v2c7 + 1\n            wat = index + 1\n    idx_iyzf = idx_iyzf + 1\noString = list(oString)\nidx_80tv = 0\nlist_btau = setcito\nwhile idx_80tv < len(list_btau):\n    i = list_btau[idx_80tv]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_80tv = idx_80tv + 1\nidx_odtv = 0\nlist_p1ue = oString\nwhile idx_odtv < len(list_p1ue):\n    x = list_p1ue[idx_odtv]\n    print(x, end=\"\")\n    idx_odtv = idx_odtv + 1\nprint()\n", "id": "AugAssign2Assign_sample_from_codeforces_95_A_to_32", "old_id": "codeforces_95_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret = ret + self.tree[i]\n            i = i ^ i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i = i + 1\n        while i <= self.size:\n            self.tree[i] = self.tree[i] + x\n            i = i + i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nidx_tciw = 0\nlist_ygcp = list(enumerate(_a))\nwhile idx_tciw < len(list_ygcp):\n    i, x = list_ygcp[idx_tciw]\n    d[x] = i\n    idx_tciw = idx_tciw + 1\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_w5xd = 0\n    list_trwj = range(n)\n    while idx_w5xd < len(list_trwj):\n        i = list_trwj[idx_w5xd]\n        b[i + 1] = b[i + 1] + b[i]\n        idx_w5xd = idx_w5xd + 1\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    idx_mgtq = 0\n    list_6gux = b\n    while idx_mgtq < len(list_6gux):\n        x = list_6gux[idx_mgtq]\n        ans = ans + bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_mgtq = idx_mgtq + 1\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC107_D_to_33", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [0] * n] for _ in [0] * n]\n    idx_zrsg = 0\n    list_lt8g = range(n)\n    while idx_zrsg < len(list_lt8g):\n        i = list_lt8g[idx_zrsg]\n        m = a[i]\n        idx_dfj2 = 0\n        list_7aqe = range(n)\n        while idx_dfj2 < len(list_7aqe):\n            j = list_7aqe[idx_dfj2]\n            k = i - j\n            if k < 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                k = k + n\n            m = min(m, a[k])\n            b[j][i] = m\n            idx_dfj2 = idx_dfj2 + 1\n        idx_zrsg = idx_zrsg + 1\n    m = 10 ** 15\n    idx_0eqw = 0\n    list_snwi = list(enumerate(b))\n    while idx_0eqw < len(list_snwi):\n        i, j = list_snwi[idx_0eqw]\n        m = min(m, sum(j) + x * i)\n        idx_0eqw = idx_0eqw + 1\n    print(m)\n\n\nmain()\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC004_B_to_34", "old_id": "atcoder_AGC004_B"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return []\n    if index <= array[0][0] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return [(index, array[0][1])]\n    idx_zbjw = 0\n    list_ia42 = range(len(array) - 1, 0, - 1)\n    while idx_zbjw < len(list_ia42):\n        _ = list_ia42[idx_zbjw]\n        if array[_ - 1][0] < index and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            return array[: _] + [(index, array[_][1])]\n        idx_zbjw = idx_zbjw + 1\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    idx_4spq = 0\n    list_i8go = A[1:]\n    while idx_4spq < len(list_i8go):\n        a = list_i8go[idx_4spq]\n        if a <= dp[- 1][0] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            dp = cut(dp, a)\n        else:\n            dp = dp + [(a, 0)]\n        is_added = False\n        idx_kmo6 = 0\n        list_6ezt = range(len(dp) - 1, - 1, - 1)\n        while idx_kmo6 < len(list_6ezt):\n            j = list_6ezt[idx_kmo6]\n            if dp[j][1] < K - 1 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp = dp + [(a, 0)]\n                is_added = True\n                break\n            idx_kmo6 = idx_kmo6 + 1\n        if not is_added and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return False\n        idx_4spq = idx_4spq + 1\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n\n\nprint(bis(0, N))\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC029_C_to_35", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = 0\nif a[0] > x and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n    print(0)\n    exit()\nidx_o6de = 0\nlist_kby4 = a\nwhile idx_o6de < len(list_kby4):\n    i = list_kby4[idx_o6de]\n    if i > x and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        x = 0\n        break\n    x = x - i\n    ans = ans + 1\n    idx_o6de = idx_o6de + 1\nif x != 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    ans = ans - 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC027_A_to_36", "old_id": "atcoder_AGC027_A"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [0] * 5\nidx_12jp = 0\nlist_mfod = S\nwhile idx_12jp < len(list_mfod):\n    s = list_mfod[idx_12jp]\n    if s[0].upper() in march and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        march_lis[march.index(s[0].upper())] = march_lis[march.index(s[0].upper())] + 1\n    idx_12jp = idx_12jp + 1\nans = 0\nidx_cqi2 = 0\nlist_z75k = combinations(march_lis, 3)\nwhile idx_cqi2 < len(list_z75k):\n    x, y, z = list_z75k[idx_cqi2]\n    ans = ans + x * y * z\n    idx_cqi2 = idx_cqi2 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC089_C_to_37", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif 1 <= int(k) and int(w) <= 1000 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n    total = 0\n    idx_732c = 0\n    list_cbgj = range(1, int(w) + 1)\n    while idx_732c < len(list_cbgj):\n        i = list_cbgj[idx_732c]\n        total = total + i * int(k)\n        idx_732c = idx_732c + 1\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "AugAssign2Assign_sample_from_codeforces_546_A_to_38", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = 0\nidx_2xqi = 0\nlist_fd3z = range(n)\nwhile idx_2xqi < len(list_fd3z):\n    i = list_fd3z[idx_2xqi]\n    a = input().split()\n    q.append(a)\n    idx_2xqi = idx_2xqi + 1\nidx_p9y2 = 0\nlist_cjpa = q\nwhile idx_p9y2 < len(list_cjpa):\n    j = list_cjpa[idx_p9y2]\n    idx_9x6j = 0\n    list_0xu8 = q\n    while idx_9x6j < len(list_0xu8):\n        k = list_0xu8[idx_9x6j]\n        if k == j and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count = count + 1\n        else:\n            continue\n        idx_9x6j = idx_9x6j + 1\n    idx_p9y2 = idx_p9y2 + 1\nprint(count)\n", "id": "AugAssign2Assign_sample_from_codeforces_268_A_to_39", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_eqzu = 0\nlist_zwme = range(4)\nwhile idx_eqzu < len(list_zwme):\n    i = list_zwme[idx_eqzu]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_eqzu = idx_eqzu + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_o89g = 0\nlist_umsy = range(3)\nwhile idx_o89g < len(list_umsy):\n    i = list_umsy[idx_o89g]\n    idx_ryn7 = 0\n    list_msy1 = range(3)\n    while idx_ryn7 < len(list_msy1):\n        j = list_msy1[idx_ryn7]\n        if t[i][j] == '#' and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            black = black + 1\n        else:\n            white = white + 1\n        if t[i][j + 1] == '#' and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            black = black + 1\n        else:\n            white = white + 1\n        if t[i + 1][j] == '#' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            black = black + 1\n        else:\n            white = white + 1\n        if t[i + 1][j + 1] == '#' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            black = black + 1\n        else:\n            white = white + 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_ryn7 = idx_ryn7 + 1\n    idx_o89g = idx_o89g + 1\nif correct == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "AugAssign2Assign_sample_from_codeforces_287_A_to_40", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_2vwj = 0\n    list_ah4t = list(enumerate(P))\n    while idx_2vwj < len(list_ah4t):\n        i, p = list_ah4t[idx_2vwj]\n        a[p] = i\n        idx_2vwj = idx_2vwj + 1\n    tmp = 1\n    max_len = 1\n    idx_w74d = 0\n    list_a3rh = range(1, N)\n    while idx_w74d < len(list_a3rh):\n        i = list_a3rh[idx_w74d]\n        if a[i] < a[i + 1] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            tmp = tmp + 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n        idx_w74d = idx_w74d + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_dreq = 0\n    list_m1oi = list(enumerate(P))\n    while idx_dreq < len(list_m1oi):\n        i, p = list_m1oi[idx_dreq]\n        if i == 0 or P[i - 1] + 1 == p and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            tmp = tmp + 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n        idx_dreq = idx_dreq + 1\n    print(N - ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC024_B_to_41", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_oi47 = 0\nlist_r8ju = range(N)\nwhile idx_oi47 < len(list_r8ju):\n    x = list_r8ju[idx_oi47]\n    if S[x] == 'L' and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        S_L = S_L + 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == 'R':\n        S_R = S_R + 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == 'U':\n        S_U = S_U + 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == 'D':\n        S_D = S_D + 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == 'L' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        if S_R - T_L + s_c != 1:\n            T_L = T_L + 1\n    if T[x] == 'R' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        if s_c + (T_R - S_L) != W:\n            T_R = T_R + 1\n    if T[x] == 'U' and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        if S_D - T_U + s_r != 1:\n            T_U = T_U + 1\n    if T[x] == 'D' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        if s_r + (T_D - S_U) != H:\n            T_D = T_D + 1\n    idx_oi47 = idx_oi47 + 1\nif Judge and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n    print('NO')\nelse:\n    print('YES')\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC033_B_to_42", "old_id": "atcoder_AGC033_B"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return 0\n    ans = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    idx_nyvl = 0\n    list_r0ch = '753'\n    while idx_nyvl < len(list_r0ch):\n        i = list_r0ch[idx_nyvl]\n        ans = ans + aaa(n + i)\n        idx_nyvl = idx_nyvl + 1\n    return ans\n\n\nprint(aaa('0'))\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC114_C_to_43", "old_id": "atcoder_ABC114_C"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        idx_u19k = 0\n        list_xh3i = data\n        while idx_u19k < len(list_xh3i):\n            number = list_xh3i[idx_u19k]\n            if len(number) > 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n                yield (number)\n            idx_u19k = idx_u19k + 1\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_74wz = 0\nlist_amjn = range(0, N - 1)\nwhile idx_74wz < len(list_amjn):\n    i = list_amjn[idx_74wz]\n    if S[i] != S[i + 1] and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        seg_cnt = seg_cnt + 1\n    idx_74wz = idx_74wz + 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC140_D_to_44", "old_id": "atcoder_ABC140_D"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] = size[y] + size[x]\n        else:\n            par[y] = x\n            size[x] = size[x] + size[y]\n            if rank[x] == rank[y]:\n                rank[x] = rank[x] + 1\n\n\nn, * a = map(int, open(0).read().split())\n* par, = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nidx_liyg = 0\nlist_2nym = list(enumerate(a))\nwhile idx_liyg < len(list_2nym):\n    i, t = list_2nym[idx_liyg]\n    b[t - 1] = i\n    idx_liyg = idx_liyg + 1\nc = 0\nidx_lhqi = 0\nlist_x094 = b[:: - 1]\nwhile idx_lhqi < len(list_x094):\n    k = list_x094[idx_lhqi]\n    l = r = 1\n    if k > 0 and a[k - 1] > a[k] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        l = l + size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        r = r + size[root(k + 1)]\n        unite(k + 1, k)\n    c = c + l * r * a[k]\n    idx_lhqi = idx_lhqi + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC005_B_to_45", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = []\nidx_53ov = 0\nlist_3b49 = range(5)\nwhile idx_53ov < len(list_3b49):\n    _ = list_3b49[idx_53ov]\n    m = input()\n    e = int(m[- 1])\n    if e == 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        e = 10\n    menu.append([int(m), e])\n    idx_53ov = idx_53ov + 1\nmenu.sort(key=lambda x: x[1])\nans = 0\nidx_ywul = 0\nlist_2yu3 = menu[1:]\nwhile idx_ywul < len(list_2yu3):\n    m = list_2yu3[idx_ywul]\n    ans = ans + math.ceil(m[0] / 10) * 10\n    idx_ywul = idx_ywul + 1\nprint(ans + menu[0][0])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC123_B_to_46", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print('YES')\n    idx_jcbh = 0\n    list_wgq2 = range(n)\n    while idx_jcbh < len(list_wgq2):\n        i = list_wgq2[idx_jcbh]\n        idx_1yi2 = 0\n        list_0vki = range(n)\n        while idx_1yi2 < len(list_0vki):\n            j = list_0vki[idx_1yi2]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x = x + 1\n            else:\n                print('S', end='')\n            idx_1yi2 = idx_1yi2 + 1\n        print()\n        idx_jcbh = idx_jcbh + 1\nelse:\n    print('NO')\n", "id": "AugAssign2Assign_sample_from_codeforces_544_B_to_47", "old_id": "codeforces_544_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nidx_glnt = 0\nlist_9vqr = l\nwhile idx_glnt < len(list_9vqr):\n    i = list_9vqr[idx_glnt]\n    if i > c and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        c = c + 1\n    idx_glnt = idx_glnt + 1\nprint(c + 1)\n", "id": "AugAssign2Assign_sample_from_codeforces_682_B_to_48", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        A = A - 1\n    if T == U and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        B = B - 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_nc6x = 0\n        list_lq0h = sys.stdin\n        while idx_nc6x < len(list_lq0h):\n            line = list_lq0h[idx_nc6x]\n            idx_1rsd = 0\n            list_jmf9 = line.split()\n            while idx_1rsd < len(list_jmf9):\n                word = list_jmf9[idx_1rsd]\n                yield word\n                idx_1rsd = idx_1rsd + 1\n            idx_nc6x = idx_nc6x + 1\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC154_A_to_49", "old_id": "atcoder_ABC154_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [0] * (n + 1), 0, 0, 0\ng = [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u] and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            flag = flag & (vis[u] == col)\n            continue\n        vis[u] = col\n        idx_nabx = 0\n        list_h3mw = g[u]\n        while idx_nabx < len(list_h3mw):\n            i = list_h3mw[idx_nabx]\n            stk.put((i, 3 - col))\n            idx_nabx = idx_nabx + 1\n    return flag\nidx_gvin = 0\nlist_z5xn = range(m)\nwhile idx_gvin < len(list_z5xn):\n    i = list_z5xn[idx_gvin]\n    u, v = map(int, input().split())\n    g[u] = g[u] + [v]\n    g[v] = g[v] + [u]\n    idx_gvin = idx_gvin + 1\nidx_kv1i = 0\nlist_hk4d = range(1, n + 1)\nwhile idx_kv1i < len(list_hk4d):\n    i = list_hk4d[idx_kv1i]\n    if vis[i] == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        if len(g[i]) == 0:\n            ci = ci + 1\n        else:\n            if dfs(i):\n                cb = cb + 1\n            else:\n                cc = cc + 1\n    idx_kv1i = idx_kv1i + 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC011_C_to_50", "old_id": "atcoder_AGC011_C"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = 0\nidx_rxju = 0\nlist_0sxf = range(n)\nwhile idx_rxju < len(list_0sxf):\n    i = list_0sxf[idx_rxju]\n    if i + 1 & 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        t = t + 1\n    idx_rxju = idx_rxju + 1\nprint(t / n)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC142_A_to_51", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    idx_1t7n = 0\n    list_13up = links[v]\n    while idx_1t7n < len(list_13up):\n        u = list_13up[idx_1t7n]\n        if u == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count = cut_count + cut\n        idx_1t7n = idx_1t7n + 1\n    height_from_leaf = height_from_leaf + 1\n    if p != 0 and height_from_leaf == k and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        height_from_leaf = 0\n        cut_count = cut_count + 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nidx_qsap = 0\nlist_xwgy = list(enumerate(aaa))\nwhile idx_qsap < len(list_xwgy):\n    i, a = list_xwgy[idx_qsap]\n    a = a - 1\n    links[a].add(i)\n    idx_qsap = idx_qsap + 1\n_, ans = dfs(links, n, k, 0, 0)\nif aaa[0] != 1 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n    ans = ans + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC004_D_to_52", "old_id": "atcoder_AGC004_D"}
{"code": "def check(lis, k, mid):\n    idx_3igq = 0\n    list_2b6p = lis\n    while idx_3igq < len(list_2b6p):\n        i = list_2b6p[idx_3igq]\n        if (i % mid == 0) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            k = k + 1\n        k = k - (i // mid)\n        idx_3igq = idx_3igq + 1\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if (check(lis, k, mid)) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        ans = mid\n        b = mid - 1\n    else:\n        a = mid + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC174_E_to_53", "old_id": "atcoder_ABC174_E"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nidx_x6o4 = 0\nlist_aifc = range(2, __N + 1)\nwhile idx_x6o4 < len(list_aifc):\n    i = list_aifc[idx_x6o4]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_x6o4 = idx_x6o4 + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    idx_4qf9 = 0\n    list_s9jc = range(kumi + 1)\n    while idx_4qf9 < len(list_s9jc):\n        p = list_s9jc[idx_4qf9]\n        if p > N and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            break\n        ans = ans + 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            ans = ans + 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_4qf9 = idx_4qf9 + 1\n    return ans\n\n\nans = []\nidx_w06l = 0\nlist_91kh = range(2, 2 * K + 1)\nwhile idx_w06l < len(list_91kh):\n    i = list_91kh[idx_w06l]\n    if i <= K + 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    idx_w06l = idx_w06l + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ARC102_C_to_54", "old_id": "atcoder_ARC102_C"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s = s + 1\n    curr = curr // 10\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nidx_xnwz = 0\nlist_rhfx = [l, r, first, second]\nwhile idx_xnwz < len(list_rhfx):\n    i = list_rhfx[idx_xnwz]\n    if i >= l and i <= r and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        curr = i\n        rev = ''\n        idx_sndm = 0\n        list_49et = str(curr)\n        while idx_sndm < len(list_49et):\n            k = list_49et[idx_sndm]\n            rev = rev + str(9 - int(k))\n            idx_sndm = idx_sndm + 1\n        ans = max(ans, int(rev) * curr)\n    idx_xnwz = idx_xnwz + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_codeforces_86_A_to_55", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open(0).read().split())\nl.sort()\nans = 0\nidx_ou4r = 0\nlist_iwge = range(n)\nwhile idx_ou4r < len(list_iwge):\n    i = list_iwge[idx_ou4r]\n    idx_nmqr = 0\n    list_20oa = range(i + 1, n)\n    while idx_nmqr < len(list_20oa):\n        j = list_20oa[idx_nmqr]\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            tmp = tmp - 1\n        if left <= j < right and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            tmp = tmp - 1\n        ans = ans + tmp\n        idx_nmqr = idx_nmqr + 1\n    idx_ou4r = idx_ou4r + 1\nprint(ans // 3)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC143_D_to_56", "old_id": "atcoder_ABC143_D"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    idx_zf6x = 0\n    list_5dxl = range(N)\n    while idx_zf6x < len(list_5dxl):\n        i = list_5dxl[idx_zf6x]\n        if A[i] < 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot = tot + N - r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot = tot + r\n        if A[i] * A[i] < x and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            tot = tot - 1\n        idx_zf6x = idx_zf6x + 1\n    tot = tot // 2\n    if tot < K and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC155_D_to_57", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nidx_yjvm = 0\nlist_jl2d = re.split(\"[.?!]\", input())\nwhile idx_yjvm < len(list_jl2d):\n    s = list_jl2d[idx_yjvm]\n    s = s.strip() + '.'\n    L = len(s)\n    if L > 1 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans = ans + 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\n    idx_yjvm = idx_yjvm + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_codeforces_70_B_to_58", "old_id": "codeforces_70_B"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    idx_puzw = 0\n    list_n52r = range(len(A) - 2, len(A) - 2 * n - 1, - 2)\n    while idx_puzw < len(list_n52r):\n        i = list_n52r[idx_puzw]\n        ans = ans + A[i]\n        idx_puzw = idx_puzw + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    main()\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC012_A_to_59", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nidx_64wm = 0\nlist_jtgz = range(n)\nwhile idx_64wm < len(list_jtgz):\n    i = list_jtgz[idx_64wm]\n    x = input()\n    a, b = 0, 0\n    idx_m0up = 0\n    list_yxjm = s\n    while idx_m0up < len(list_yxjm):\n        j = list_yxjm[idx_m0up]\n        if j == x[0] and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            a = a + 1\n        elif j == x[1]:\n            b = b + 1\n        else:\n            ans = ans + min(a, b)\n            a, b = 0, 0\n        idx_m0up = idx_m0up + 1\n    ans = ans + min(a, b)\n    idx_64wm = idx_64wm + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_codeforces_154_A_to_60", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nidx_2idy = 0\nlist_xehj = range(n)\nwhile idx_2idy < len(list_xehj):\n    j = list_xehj[idx_2idy]\n    idx_25ad = 0\n    list_u9gc = range(n)\n    while idx_25ad < len(list_u9gc):\n        p = list_u9gc[idx_25ad]\n        if (0 == M[p]) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            print(p + 1, end=' ')\n            break\n        idx_25ad = idx_25ad + 1\n    idx_q96g = 0\n    list_5oc4 = range(p + 1 - k)\n    while idx_q96g < len(list_5oc4):\n        l = list_5oc4[idx_q96g]\n        M[l] = M[l] - 1\n        idx_q96g = idx_q96g + 1\n    M[p] = M[p] - 1\n    idx_2idy = idx_2idy + 1\n", "id": "AugAssign2Assign_sample_from_codeforces_67_B_to_61", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_jkcx = 0\n    list_md4v = sequence\n    while idx_jkcx < len(list_md4v):\n        value = list_md4v[idx_jkcx]\n        y = f(value)\n        if y not in storage and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_jkcx = idx_jkcx + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            y = y + 1\n        n = n // 2\n    return y\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    print(main())\n", "id": "AugAssign2Assign_sample_from_codeforces_272_B_to_62", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nidx_hcal = 0\nlist_nhal = s\nwhile idx_hcal < len(list_nhal):\n    c = list_nhal[idx_hcal]\n    count[ord(c) - ord(\"A\")] = count[ord(c) - ord(\"A\")] + 1\n    idx_hcal = idx_hcal + 1\ncount.sort(reverse=True)\nres = 0\nidx_2qt0 = 0\nlist_2i8j = range(26)\nwhile idx_2qt0 < len(list_2i8j):\n    i = list_2i8j[idx_2qt0]\n    if count[i] >= k and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        res = res + k * k\n        print(res)\n        exit()\n    k = k - count[i]\n    res = res + count[i] ** 2\n    idx_2qt0 = idx_2qt0 + 1\nprint(res)\n", "id": "AugAssign2Assign_sample_from_codeforces_462_B_to_63", "old_id": "codeforces_462_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_q50b = 0\nlist_2pbe = Number_i\nwhile idx_q50b < len(list_2pbe):\n    i = list_2pbe[idx_q50b]\n    Number_iMN.append(i * M / N)\n    idx_q50b = idx_q50b + 1\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_j28w = 0\nlist_powq = Kaburi_j\nwhile idx_j28w < len(list_powq):\n    j = list_powq[idx_j28w]\n    Kaburi_i.append(int(j * N / M))\n    idx_j28w = idx_j28w + 1\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])] and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        pass\n    else:\n        Flag = 1\n        break\n    counter = counter + 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nif Flag == 1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n    print(- 1)\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC028_A_to_64", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_guxp = 0\n    list_2voq = list(enumerate(s[:: - 1]))\n    while idx_guxp < len(list_2voq):\n        i, c = list_2voq[idx_guxp]\n        cc = na + int(c)\n        na = 0\n        if cc <= 4 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            pp = pp + cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp = pp + 1\n            pp = pp + 10 - cc\n        idx_guxp = idx_guxp + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    idx_d051 = 0\n    list_uv8h = s[:: - 1]\n    while idx_d051 < len(list_uv8h):\n        c = list_uv8h[idx_d051]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_d051 = idx_d051 + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_bweg = 0\n    list_jtxw = input_l\n    while idx_bweg < len(list_jtxw):\n        l = list_jtxw[idx_bweg]\n        yield l\n        idx_bweg = idx_bweg + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC155_E_to_65", "old_id": "atcoder_ABC155_E"}
{"code": "def substract(a, b):\n    if a > b and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        total = 0\n        while a > 0 and b > 0:\n            total = total + int(a / b)\n            a = a % b\n            if a > 0:\n                total = total + int(b / a)\n                b = b % a\n        return total\n    if a < b and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        total = 0\n        while a > 0 and b > 0:\n            total = total + int(b / a)\n            b = b % a\n            if b > 0:\n                total = total + int(a / b)\n                a = a % b\n        return total\n    if a == b and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return 1\n\n\nn = int(input())\nlst = []\nidx_lyaq = 0\nlist_v92b = range(0, n)\nwhile idx_lyaq < len(list_v92b):\n    i = list_v92b[idx_lyaq]\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\n    idx_lyaq = idx_lyaq + 1\nidx_je2z = 0\nlist_ctqh = lst\nwhile idx_je2z < len(list_ctqh):\n    i = list_ctqh[idx_je2z]\n    print(i)\n    idx_je2z = idx_je2z + 1\n", "id": "AugAssign2Assign_sample_from_codeforces_267_A_to_66", "old_id": "codeforces_267_A"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nidx_fzb8 = 0\nlist_g4mx = lst\nwhile idx_fzb8 < len(list_g4mx):\n    i = list_g4mx[idx_fzb8]\n    if (i & 1) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        od = od + 1\n    idx_fzb8 = idx_fzb8 + 1\nsum = 0\nok = 0\nidx_c7we = 0\nlist_jxek = range(n)\nwhile idx_c7we < len(list_jxek):\n    i = list_jxek[idx_c7we]\n    if (lst[i] % 2 == 0) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        sum = sum + lst[i]\n    else:\n        if (ok or od > 1):\n            sum = sum + lst[i]\n            od = od - 1\n            ok = not ok\n    idx_c7we = idx_c7we + 1\nprint(sum)\n", "id": "AugAssign2Assign_sample_from_codeforces_621_A_to_67", "old_id": "codeforces_621_A"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    idx_35ia = 0\n    list_krct = range(N)\n    while idx_35ia < len(list_krct):\n        i = list_krct[idx_35ia]\n        j = 0\n        jM = len(cur)\n        idx_r5dn = 0\n        list_i58v = range(len(S))\n        while idx_r5dn < len(list_i58v):\n            k = list_i58v[idx_r5dn]\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                cur.append(S[k])\n                j = j + 1\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_r5dn = idx_r5dn + 1\n        cur.sort(reverse=True)\n        idx_35ia = idx_35ia + 1\n    return (\"Yes\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(main())\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC140_F_to_68", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_4z7l = 0\nlist_48pw = range(n)\nwhile idx_4z7l < len(list_48pw):\n    i = list_48pw[idx_4z7l]\n    if i == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        if S[i] != '?':\n            dp[i][int(S[i])] = dp[i][int(S[i])] + 1\n        else:\n            idx_45be = 0\n            list_p7k9 = range(10)\n            while idx_45be < len(list_p7k9):\n                j = list_p7k9[idx_45be]\n                dp[i][j] = dp[i][j] + 1\n                idx_45be = idx_45be + 1\n    else:\n        if S[i] != '?':\n            idx_a6je = 0\n            list_v9z0 = range(13)\n            while idx_a6je < len(list_v9z0):\n                k = list_v9z0[idx_a6je]\n                dp[i][(k * 10 + int(S[i])) % 13] = dp[i][(k * 10 + int(S[i])) % 13] + dp[i - 1][k]\n                idx_a6je = idx_a6je + 1\n        else:\n            idx_168i = 0\n            list_pt06 = range(10)\n            while idx_168i < len(list_pt06):\n                j = list_pt06[idx_168i]\n                idx_q7jr = 0\n                list_2v45 = range(13)\n                while idx_q7jr < len(list_2v45):\n                    k = list_2v45[idx_q7jr]\n                    dp[i][(k * 10 + j) % 13] = dp[i][(k * 10 + j) % 13] + dp[i - 1][k]\n                    idx_q7jr = idx_q7jr + 1\n                idx_168i = idx_168i + 1\n        idx_u3qw = 0\n        list_vd3k = range(13)\n        while idx_u3qw < len(list_vd3k):\n            k = list_vd3k[idx_u3qw]\n            dp[i][k] = dp[i][k] % mod\n            idx_u3qw = idx_u3qw + 1\n    idx_4z7l = idx_4z7l + 1\nprint(dp[n - 1][5])\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC135_D_to_69", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_w7mg = 0\nlist_zt05 = s\nwhile idx_w7mg < len(list_zt05):\n    c = list_zt05[idx_w7mg]\n    if c == '0' or c == '1' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        my_str = my_str + c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\n    idx_w7mg = idx_w7mg + 1\nprint(my_str)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC043_B_to_70", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nidx_4rxv = 0\nlist_lbvh = w\nwhile idx_4rxv < len(list_lbvh):\n    i = list_lbvh[idx_4rxv]\n    if i == 0 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        c = c + w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c = c + w[i] * w[- i]\n    idx_4rxv = idx_4rxv + 1\nprint(c // 2)\n", "id": "AugAssign2Assign_sample_from_codeforces_131_B_to_71", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_w15e = 0\nlist_c6bj = range(n)\nwhile idx_w15e < len(list_c6bj):\n    i = list_c6bj[idx_w15e]\n    if lst[i] not in l and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] = l[lst[i]] + 1\n    idx_w15e = idx_w15e + 1\nres = 0\nidx_5dqt = 0\nlist_hpfc = range(n)\nwhile idx_5dqt < len(list_hpfc):\n    i = list_hpfc[idx_5dqt]\n    if l[lst[i]] > 1 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        res = res + n - i - l[lst[i]]\n        l[lst[i]] = l[lst[i]] - 1\n    else:\n        res = res + n - i - 1\n    idx_5dqt = idx_5dqt + 1\nprint(res)\n", "id": "AugAssign2Assign_sample_from_codeforces_609_B_to_72", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_3d0m = 0\n    list_v32i = list(enumerate(it))\n    while idx_3d0m < len(list_v32i):\n        i, e = list_v32i[idx_3d0m]\n        if l <= i < r and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            yield e\n        elif l >= r:\n            break\n        idx_3d0m = idx_3d0m + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n = n // 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            a.append(f)\n            n = n // f\n        else:\n            f = f + 2\n    if n != 1 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        a.append(n)\n    return a\n    if len(arr) == 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_9a13 = 0\nlist_lu5a = list(fac.items())\nwhile idx_9a13 < len(list_lu5a):\n    p, e = list_lu5a[idx_9a13]\n    x = e\n    idx_ly7i = 0\n    list_x87z = range(1, 99999999)\n    while idx_ly7i < len(list_x87z):\n        i = list_x87z[idx_ly7i]\n        if x >= i and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            x = x - i\n            ans = ans + 1\n        else:\n            break\n        idx_ly7i = idx_ly7i + 1\n    idx_9a13 = idx_9a13 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC169_D_to_73", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_h65o = 0\nlist_ldb4 = range(0, n)\nwhile idx_h65o < len(list_ldb4):\n    i = list_ldb4[idx_h65o]\n    if i % 2 == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_h65o = idx_h65o + 1\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nidx_0qzj = 0\nlist_xp1l = a\nwhile idx_0qzj < len(list_xp1l):\n    i = list_xp1l[idx_0qzj]\n    cnta[i] = cnta[i] + 1\n    idx_0qzj = idx_0qzj + 1\nidx_83oq = 0\nlist_nqd9 = a\nwhile idx_83oq < len(list_nqd9):\n    i = list_nqd9[idx_83oq]\n    if maxCnta < cnta[i] and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        vala = i\n        maxCnta = cnta[i]\n    idx_83oq = idx_83oq + 1\nidx_g2yp = 0\nlist_moeu = a\nwhile idx_g2yp < len(list_moeu):\n    i = list_moeu[idx_g2yp]\n    if maxCnta1 < cnta[i] and vala != i and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_g2yp = idx_g2yp + 1\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nidx_9t2n = 0\nlist_niuj = b\nwhile idx_9t2n < len(list_niuj):\n    i = list_niuj[idx_9t2n]\n    cntb[i] = cntb[i] + 1\n    idx_9t2n = idx_9t2n + 1\nidx_ex6v = 0\nlist_xjor = b\nwhile idx_ex6v < len(list_xjor):\n    i = list_xjor[idx_ex6v]\n    if maxCntb < cntb[i] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        valb = i\n        maxCntb = cntb[i]\n    idx_ex6v = idx_ex6v + 1\nidx_ejdv = 0\nlist_qcoy = b\nwhile idx_ejdv < len(list_qcoy):\n    i = list_qcoy[idx_ejdv]\n    if maxCntb1 < cntb[i] and valb != i and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_ejdv = idx_ejdv + 1\nif valb != vala and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n    res = 0\n    idx_vhwz = 0\n    list_p4jm = a\n    while idx_vhwz < len(list_p4jm):\n        i = list_p4jm[idx_vhwz]\n        if i != vala:\n            res = res + 1\n        idx_vhwz = idx_vhwz + 1\n    idx_2973 = 0\n    list_u64p = b\n    while idx_2973 < len(list_u64p):\n        i = list_u64p[idx_2973]\n        if i != valb:\n            res = res + 1\n        idx_2973 = idx_2973 + 1\n    print(res)\nelse:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    idx_6fnm = 0\n    list_xbzw = a\n    while idx_6fnm < len(list_xbzw):\n        i = list_xbzw[idx_6fnm]\n        if i != vala:\n            resa = resa + 1\n        if i != vala1:\n            resa1 = resa1 + 1\n        idx_6fnm = idx_6fnm + 1\n    idx_9sah = 0\n    list_nm89 = b\n    while idx_9sah < len(list_nm89):\n        i = list_nm89[idx_9sah]\n        if i != valb:\n            resb = resb + 1\n        if i != valb1:\n            resb1 = resb1 + 1\n        idx_9sah = idx_9sah + 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC111_C_to_74", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_v4tb = 0\nlist_51xw = range(N)\nwhile idx_v4tb < len(list_51xw):\n    i = list_51xw[idx_v4tb]\n    if lst[i] == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        K = K - 1\n    if lst[i] > 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        lst_p = lst_p + [lst[i]]\n    elif lst[i] < 0:\n        lst_m = lst_m + [lst[i]]\n    idx_v4tb = idx_v4tb + 1\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    idx_1idc = 0\n    list_h074 = range(0, k + 1)\n    while idx_1idc < len(list_h074):\n        j = list_h074[idx_1idc]\n        if j > lastx or k - j > lasty and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        idx_1idc = idx_1idc + 1\n    return ans\n\n\nprint(check(K))\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC107_C_to_75", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_evi0 = 0\nlist_5mb0 = list(enumerate(l))\nwhile idx_evi0 < len(list_5mb0):\n    i, c = list_5mb0[idx_evi0]\n    if c == '0' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        dp[i + 1][0] = dp[i + 1][0] + dp[i][0]\n        dp[i + 1][1] = dp[i + 1][1] + dp[i][1] * 3\n    else:\n        dp[i + 1][0] = dp[i + 1][0] + dp[i][0] * 2\n        dp[i + 1][1] = dp[i + 1][1] + dp[i][0]\n        dp[i + 1][1] = dp[i + 1][1] + dp[i][1] * 3\n    dp[i + 1][0] = dp[i + 1][0] % mod\n    dp[i + 1][1] = dp[i + 1][1] % mod\n    idx_evi0 = idx_evi0 + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC129_E_to_76", "old_id": "atcoder_ABC129_E"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    idx_4bf3 = 0\n    list_a1vb = made_cout\n    while idx_4bf3 < len(list_a1vb):\n        color = list_a1vb[idx_4bf3]\n        if color not in bought_count and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            return print(- 1)\n        res = res + min(bought_count[color], made_cout[color])\n        idx_4bf3 = idx_4bf3 + 1\n    print(res)\n\n\ndef main():\n    t = 1\n    idx_nl6r = 0\n    list_2vcd = range(t)\n    while idx_nl6r < len(list_2vcd):\n        _ = list_2vcd[idx_nl6r]\n        solution()\n        idx_nl6r = idx_nl6r + 1\n\n\nmain()\n", "id": "AugAssign2Assign_sample_from_codeforces_408_B_to_77", "old_id": "codeforces_408_B"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nidx_vxnk = 0\nlist_rpzy = range(N - 1)\nwhile idx_vxnk < len(list_rpzy):\n    _ = list_rpzy[idx_vxnk]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_vxnk = idx_vxnk + 1\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    idx_ngqu = 0\n    list_3uhy = adj[v]\n    while idx_ngqu < len(list_3uhy):\n        u = list_3uhy[idx_ngqu]\n        if seen[u] == 0 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            seen[u] = 1\n            par[u] = v\n            child_num[v] = child_num[v] + 1\n            que.append(u)\n        idx_ngqu = idx_ngqu + 1\nseq = deque()\nidx_i7zk = 0\nlist_w2sk = range(1, N + 1)\nwhile idx_i7zk < len(list_w2sk):\n    i = list_w2sk[idx_i7zk]\n    if child_num[i] == 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        seq.append(i)\n    idx_i7zk = idx_i7zk + 1\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        print('First')\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] = child_num[par[par[c]]] - 1\n    if child_num[par[par[c]]] == 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "AugAssign2Assign_sample_from_atcoder_AGC014_D_to_78", "old_id": "atcoder_AGC014_D"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nidx_rf3x = 0\nlist_ftl3 = range(m)\nwhile idx_rf3x < len(list_ftl3):\n    i = list_ftl3[idx_rf3x]\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    idx_rf3x = idx_rf3x + 1\nc = 0\nidx_uibh = 0\nlist_io4u = list(path.items())\nwhile idx_uibh < len(list_io4u):\n    i, v = list_io4u[idx_uibh]\n    f = 0\n    idx_fog5 = 0\n    list_j7qr = v\n    while idx_fog5 < len(list_j7qr):\n        j = list_j7qr[idx_fog5]\n        if hp[i] <= hp[j] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            f = 1\n            break\n        idx_fog5 = idx_fog5 + 1\n    if f == 0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        c = c + 1\n    idx_uibh = idx_uibh + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC166_C_to_79", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nidx_8k9v = 0\nlist_2ka4 = range(N - 1)\nwhile idx_8k9v < len(list_2ka4):\n    i = list_2ka4[idx_8k9v]\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n    idx_8k9v = idx_8k9v + 1\nmod = 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    idx_5vs2 = 0\n    list_5afs = graph[fro]\n    while idx_5vs2 < len(list_5afs):\n        u = list_5afs[idx_5vs2]\n        if u == to and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum = colorNum - 1\n        idx_5vs2 = idx_5vs2 + 1\n    return caseNum\n\n\nans = dfs(0, - 1, K)\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC133_E_to_80", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_zgt8 = 0\nlist_ltqw = range(int(input()))\nwhile idx_zgt8 < len(list_ltqw):\n    i = list_ltqw[idx_zgt8]\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == 'M' and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        m[a] = m[a] + 2\n        m[b] = m[b] - 2\n    else:\n        f[a] = f[a] + 2\n        f[b] = f[b] - 2\n    idx_zgt8 = idx_zgt8 + 1\na, b, c = 0, 0, 0\nidx_8egl = 0\nlist_1dn8 = range(N)\nwhile idx_8egl < len(list_1dn8):\n    i = list_1dn8[idx_8egl]\n    a = a + m[i]\n    b = b + f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        c = min(a, b)\n    idx_8egl = idx_8egl + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_codeforces_629_B_to_81", "old_id": "codeforces_629_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nidx_we8a = 0\nlist_r2of = range(t)\nwhile idx_we8a < len(list_r2of):\n    i = list_r2of[idx_we8a]\n    op = input().split()\n    if op[0] == 'alloc' and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        pos = 0\n        idx_qznj = 0\n        list_zb5s = range(m)\n        while idx_qznj < len(list_zb5s):\n            j = list_zb5s[idx_qznj]\n            if alocuente[j] == 0:\n                pos = pos + 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind = ind + 1\n                    break\n            else:\n                pos = 0\n            idx_qznj = idx_qznj + 1\n    if op[0] == 'erase' and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_2wux = 0\n            list_ed3m = range(m)\n            while idx_2wux < len(list_ed3m):\n                j = list_ed3m[idx_2wux]\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n                idx_2wux = idx_2wux + 1\n    if op[0] == \"defragment\" and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        idx_k6mc = 0\n        list_s3bu = range(cnt)\n        while idx_k6mc < len(list_s3bu):\n            j = list_s3bu[idx_k6mc]\n            alocuente.append(0)\n            idx_k6mc = idx_k6mc + 1\n    idx_we8a = idx_we8a + 1\n", "id": "AugAssign2Assign_sample_from_codeforces_7_B_to_82", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    idx_gz9p = 0\n    list_b5zm = range(n)\n    while idx_gz9p < len(list_b5zm):\n        i = list_b5zm[idx_gz9p]\n        count[i] = [0] * n\n        idx_gz9p = idx_gz9p + 1\n    ans = - 1\n    idx_ptfc = 0\n    list_ps0o = range(m)\n    while idx_ptfc < len(list_ps0o):\n        k = list_ps0o[idx_ptfc]\n        x, y = map(int, input().split())\n        x = x - 1\n        y = y - 1\n        found = False\n        idx_l91j = 0\n        list_5qxb = range(x - 2, x + 1)\n        while idx_l91j < len(list_5qxb):\n            i = list_5qxb[idx_l91j]\n            idx_297q = 0\n            list_6wml = range(y - 2, y + 1)\n            while idx_297q < len(list_6wml):\n                j = list_6wml[idx_297q]\n                if i >= 0 and i < n and j >= 0 and j < n and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                    count[i][j] = count[i][j] + 1\n                    if count[i][j] == 9:\n                        found = True\n                idx_297q = idx_297q + 1\n            idx_l91j = idx_l91j + 1\n        if found and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ans = k + 1\n            break\n        idx_ptfc = idx_ptfc + 1\n    print(ans)\n\n\nsolve_case()\n", "id": "AugAssign2Assign_sample_from_codeforces_203_B_to_83", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nidx_hbl5 = 0\nlist_7dk1 = pre + 1\nwhile idx_hbl5 < len(list_7dk1):\n    i = list_7dk1[idx_hbl5]\n    idx_lswv = 0\n    list_gj4p = itertools.combinations(pre, i)\n    while idx_lswv < len(list_gj4p):\n        j = list_gj4p[idx_lswv]\n        l.append(list(j))\n        idx_lswv = idx_lswv + 1\n    idx_hbl5 = idx_hbl5 + 1\nidx_wveb = 0\nlist_eac7 = range(1, m + 1)\nwhile idx_wveb < len(list_eac7):\n    i = list_eac7[idx_wveb]\n    idx_ncix = 0\n    list_q4cz = list(enumerate(l))\n    while idx_ncix < len(list_q4cz):\n        j, k = list_q4cz[idx_ncix]\n        ca = 0\n        idx_x03t = 0\n        list_ntw6 = k\n        while idx_x03t < len(list_ntw6):\n            ii = list_ntw6[idx_x03t]\n            ca = ca + c[ii, i]\n            idx_x03t = idx_x03t + 1\n        if ca < x and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            rem.insert(0, j)\n        else:\n            pass\n        idx_ncix = idx_ncix + 1\n    if len(rem) > 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        idx_035c = 0\n        list_6xjy = rem\n        while idx_035c < len(list_6xjy):\n            j = list_6xjy[idx_035c]\n            l.pop(j)\n            idx_035c = idx_035c + 1\n        rem = []\n    if len(l) == 0 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        print(- 1)\n        break\n    idx_wveb = idx_wveb + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC167_C_to_84", "old_id": "atcoder_ABC167_C"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nidx_frp7 = 0\nlist_vwo4 = a\nwhile idx_frp7 < len(list_vwo4):\n    i = list_vwo4[idx_frp7]\n    cnt[i] = cnt[i] + 1\n    idx_frp7 = idx_frp7 + 1\nidx_ia7x = 0\nlist_62fu = range(1, n + 1)\nwhile idx_ia7x < len(list_62fu):\n    i = list_62fu[idx_ia7x]\n    if t[i] == 1 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_ia7x = idx_ia7x + 1\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "AugAssign2Assign_sample_from_codeforces_350_B_to_85", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns = counter_turns + 1\n        idx_158v = 0\n        list_bqjm = range(len(a))\n        while idx_158v < len(list_bqjm):\n            i = list_bqjm[idx_158v]\n            if a[i] != - 1 and a[i] <= counter and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                counter = counter + 1\n                a[i] = - 1\n            idx_158v = idx_158v + 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "AugAssign2Assign_sample_from_codeforces_583_B_to_86", "old_id": "codeforces_583_B"}
{"code": "a, b = map(int, input().split())\nc = 0\nidx_is6r = 0\nlist_gsmr = range(2)\nwhile idx_is6r < len(list_gsmr):\n    i = list_gsmr[idx_is6r]\n    c = c + max(a, b)\n    if a >= b and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        a = a - 1\n    else:\n        b = b - 1\n    idx_is6r = idx_is6r + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC124_A_to_87", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    idx_p6rv = 0\n    list_7wjo = ip\n    while idx_p6rv < len(list_7wjo):\n        i = list_7wjo[idx_p6rv]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st = st + str(n)\n        else:\n            st = st + i\n        idx_p6rv = idx_p6rv + 1\nelse:\n    st = ip\nprint(int(st))\n", "id": "AugAssign2Assign_sample_from_codeforces_514_A_to_88", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    idx_ub6p = 0\n    list_dr4z = s\n    while idx_ub6p < len(list_dr4z):\n        c = list_dr4z[idx_ub6p]\n        if c != '1' and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            break\n        l = l + 1\n        idx_ub6p = idx_ub6p + 1\n    if l >= k and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC106_C_to_89", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nidx_b4h6 = 0\nlist_0g72 = range(q)\nwhile idx_b4h6 < len(list_0g72):\n    _ = list_0g72[idx_b4h6]\n    ql = list(map(int, input().split()))\n    if ql[0] == 2 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b = sum_b + ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 = sum_p1 + ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 = sum_p1 + ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 = sum_p2 + ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 = sum_p2 + k\n            sum_p1 = sum_p1 - k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 = sum_p1 - k\n            sum_p2 = sum_p2 + k\n    idx_b4h6 = idx_b4h6 + 1\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC127_F_to_90", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_tf5j = 0\n    list_fs9k = pieces\n    while idx_tf5j < len(list_fs9k):\n        piece = list_fs9k[idx_tf5j]\n        if piece[1] == 'A' and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            pScore = pScore + piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore = pScore - piece[0]\n        idx_tf5j = idx_tf5j + 1\n    idx_t45h = 0\n    list_q41t = range(len(pieces) - 1, - 1, - 1)\n    while idx_t45h < len(list_q41t):\n        i = list_q41t[idx_t45h]\n        if pieces[i][1] == 'A' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            sScore = sScore + pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore = sScore - pieces[i][0]\n        idx_t45h = idx_t45h + 1\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    print(main())\n", "id": "AugAssign2Assign_sample_from_codeforces_632_B_to_91", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_wl24 = 0\n    list_0dhp = s\n    while idx_wl24 < len(list_0dhp):\n        i = list_0dhp[idx_wl24]\n        if i not in ['-', ';', '_'] and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            r = r + i.lower()\n        idx_wl24 = idx_wl24 + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_lnid = 0\n    list_h9px = range(3)\n    while idx_lnid < len(list_h9px):\n        i = list_h9px[idx_lnid]\n        l.append(f(input()))\n        idx_lnid = idx_lnid + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_t5jw = 0\n    list_iq8y = t\n    while idx_t5jw < len(list_iq8y):\n        i = list_iq8y[idx_t5jw]\n        l.append(\"\".join(i))\n        idx_t5jw = idx_t5jw + 1\n    idx_9gxz = 0\n    list_nkeo = range(inp())\n    while idx_9gxz < len(list_nkeo):\n        i = list_nkeo[idx_9gxz]\n        if f(instr()) in l and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            print('ACC')\n        else:\n            print('WA')\n        idx_9gxz = idx_9gxz + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    solve()\n", "id": "AugAssign2Assign_sample_from_codeforces_61_B_to_92", "old_id": "codeforces_61_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nidx_n3x7 = 0\nlist_sf6y = range(1, N + 1)\nwhile idx_n3x7 < len(list_sf6y):\n    i = list_sf6y[idx_n3x7]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_n3x7 = idx_n3x7 + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nidx_e1pg = 0\nlist_prqd = range(0, T)\nwhile idx_e1pg < len(list_prqd):\n    t = list_prqd[idx_e1pg]\n    dp[0][t] = 0\n    idx_e1pg = idx_e1pg + 1\nidx_gnwd = 0\nlist_3uqj = range(1, N + 1)\nwhile idx_gnwd < len(list_3uqj):\n    n = list_3uqj[idx_gnwd]\n    dp[n][0] = 0\n    idx_tpwd = 0\n    list_p6hk = range(1, T)\n    while idx_tpwd < len(list_p6hk):\n        t = list_p6hk[idx_tpwd]\n        if time_value[n][TIME] > t and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        idx_tpwd = idx_tpwd + 1\n    idx_gnwd = idx_gnwd + 1\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nidx_z2i9 = 0\nlist_i708 = range(N - 1, 0, - 1)\nwhile idx_z2i9 < len(list_i708):\n    n = list_i708[idx_z2i9]\n    val_acum = val_acum + time_value[n][VAL]\n    t = t - time_value[n + 1][TIME]\n    if t < 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    idx_z2i9 = idx_z2i9 + 1\nprint(max_val)\n", "id": "AugAssign2Assign_sample_from_atcoder_ABC145_E_to_93", "old_id": "atcoder_ABC145_E"}
