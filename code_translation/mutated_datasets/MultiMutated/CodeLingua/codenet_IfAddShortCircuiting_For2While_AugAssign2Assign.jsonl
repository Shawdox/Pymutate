{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_0jwn = 0\nlist_owmx = range(m)\nwhile idx_0jwn < len(list_owmx):\n    i = list_owmx[idx_0jwn]\n    p, x = map(int, input().split())\n    s = 0\n    idx_5p3z = 0\n    list_wb8a = range(len(t))\n    while idx_5p3z < len(list_wb8a):\n        j = list_wb8a[idx_5p3z]\n        if j == p-1 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            s = s + x\n        else:\n            s = s + t[j]\n        idx_5p3z = idx_5p3z + 1\n    print(s)\n    idx_0jwn = idx_0jwn + 1\n", "id": "AugAssign2Assign_sample_from_s609392609_to_0", "old_id": "s609392609"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    idx_71fp = 0\n    list_ctip = zip(a, b)\n    while idx_71fp < len(list_ctip):\n        i, j = list_ctip[idx_71fp]\n        s = s + i != j\n        idx_71fp = idx_71fp + 1\n    return s\n\n\nans = 10**6\nidx_o2c9 = 0\nlist_t02h = range(len(s))\nwhile idx_o2c9 < len(list_t02h):\n    i = list_t02h[idx_o2c9]\n    a = s[i:]\n    if len(a) >= len(t) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        ans = min(ans, check(t, a[:len(t)]))\n    idx_o2c9 = idx_o2c9 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s636719275_to_1", "old_id": "s636719275"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nidx_4oh0 = 0\nlist_gpmy = range(q)\nwhile idx_4oh0 < len(list_gpmy):\n    _ = list_gpmy[idx_4oh0]\n    t = list(map(int, input().split()))\n    if t[0] == 1 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n\n        a, b = t[1:]\n        const = const + b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum = left_sum + a\n                cnt = cnt + 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum = right_sum - c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum = left_sum + a\n                right_sum = right_sum + c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum = left_sum + c\n                right_sum = right_sum + a\n        else:\n            c = heapq.heappop(left)\n            left_sum = left_sum + c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum = left_sum + a\n                right_sum = right_sum - c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum = left_sum - c\n                right_sum = right_sum + a\n        cnt = cnt + 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    idx_4oh0 = idx_4oh0 + 1\n", "id": "AugAssign2Assign_sample_from_s016605598_to_2", "old_id": "s016605598"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nidx_cnh3 = 0\nlist_x9aq = range(Q)\nwhile idx_cnh3 < len(list_x9aq):\n    _ = list_x9aq[idx_cnh3]\n    Q_groups.append([*LI()])\n    idx_cnh3 = idx_cnh3 + 1\n\nmax_score = 0\nidx_c6t3 = 0\nlist_jhbf = combinations_with_replacement(range(1, M + 1), r=N)\nwhile idx_c6t3 < len(list_jhbf):\n    p = list_jhbf[idx_c6t3]\n    temp_score = 0\n    idx_hydx = 0\n    list_l53o = Q_groups\n    while idx_hydx < len(list_l53o):\n        q = list_l53o[idx_hydx]\n        if p[q[1] - 1] - p[q[0] - 1] == q[2] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            temp_score = temp_score + q[3]\n        idx_hydx = idx_hydx + 1\n    max_score = max(max_score, temp_score)\n    idx_c6t3 = idx_c6t3 + 1\n\nprint(max_score)\n", "id": "AugAssign2Assign_sample_from_s269975433_to_3", "old_id": "s269975433"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        idx_2su5 = 0\n        list_5s8t = range(first, end+1)\n        while idx_2su5 < len(list_5s8t):\n            s_i = list_5s8t[idx_2su5]\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                break\n            t_i = t_i + 1\n            idx_2su5 = idx_2su5 + 1\n\n        first = first - 1\n        end = end - 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    idx_mlnw = 0\n    list_42ym = range(first, end+1)\n    while idx_mlnw < len(list_42ym):\n        i = list_42ym[idx_mlnw]\n        ans[i] = T[t_i]\n        t_i = t_i + 1\n        idx_mlnw = idx_mlnw + 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    solve()\n", "id": "AugAssign2Assign_sample_from_s826716211_to_4", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nidx_a1to = 0\nlist_n310 = range(N)\nwhile idx_a1to < len(list_n310):\n    d = list_n310[idx_a1to]\n    mat.append([int(x) for x in input().split()])\n    idx_a1to = idx_a1to + 1\n\nc = 0\nidx_1r5q = 0\nlist_8nw5 = range(len(mat)-1)\nwhile idx_1r5q < len(list_8nw5):\n    i = list_8nw5[idx_1r5q]\n    idx_3s7l = 0\n    list_f479 = range(i+1, len(mat))\n    while idx_3s7l < len(list_f479):\n        j = list_f479[idx_3s7l]\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            c = c + 1\n        idx_3s7l = idx_3s7l + 1\n    idx_1r5q = idx_1r5q + 1\nprint(c)\n", "id": "AugAssign2Assign_sample_from_s663509070_to_5", "old_id": "s663509070"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nidx_d6xl = 0\nlist_5pxv = range(2**(h+w))\nwhile idx_d6xl < len(list_5pxv):\n    i = list_5pxv[idx_d6xl]\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    idx_4wz2 = 0\n    list_obf6 = range(h)\n    while idx_4wz2 < len(list_obf6):\n        l = list_obf6[idx_4wz2]\n        idx_opry = 0\n        list_idyw = range(w)\n        while idx_opry < len(list_idyw):\n            k = list_idyw[idx_opry]\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0' and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                ct = ct + 1\n            idx_opry = idx_opry + 1\n        idx_4wz2 = idx_4wz2 + 1\n    if ct == ka and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ans = ans + 1\n    idx_d6xl = idx_d6xl + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s760938927_to_6", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nidx_m2qv = 0\nlist_nu4c = qs\nwhile idx_m2qv < len(list_nu4c):\n    operation = list_nu4c[idx_m2qv]\n    if operation[0] == '1' and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        n = not n\n    if operation[0] == '2' and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right = right + c\n    idx_m2qv = idx_m2qv + 1\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "AugAssign2Assign_sample_from_s621701371_to_7", "old_id": "s621701371"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return [deque()]\n    k = []\n    idx_su7x = 0\n    list_n89m = range(len(li))\n    while idx_su7x < len(list_n89m):\n        i = list_n89m[idx_su7x]\n        if i in used and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_pi93 = 0\n        list_50g6 = sub_list\n        while idx_pi93 < len(list_50g6):\n            sub = list_50g6[idx_pi93]\n            sub.appendleft(li[i])\n            idx_pi93 = idx_pi93 + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_su7x = idx_su7x + 1\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_z02c = 0\n    list_gd7t = range(len(li)-1, -1, -1)\n    while idx_z02c < len(list_gd7t):\n        i = list_gd7t[idx_z02c]\n        n = n + li[i] * base\n        base = base * 10\n        idx_z02c = idx_z02c + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_jwmq = 0\n    list_ve9l = range(len(li))\n    while idx_jwmq < len(list_ve9l):\n        i = list_ve9l[idx_jwmq]\n        if li[i] >= int(math.sqrt(n)) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            break\n        if li[i] == -1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            continue\n        idx_rja2 = 0\n        list_y5fd = range(i+1, len(li))\n        while idx_rja2 < len(list_y5fd):\n            j = list_y5fd[idx_rja2]\n            if li[j] % li[i] == 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                li[j] = -1\n            idx_rja2 = idx_rja2 + 1\n        idx_jwmq = idx_jwmq + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_70gh = 0\n    list_armg = range(0, (1 << (n+1)))\n    while idx_70gh < len(list_armg):\n        bit = list_armg[idx_70gh]\n        ss = set()\n        idx_xf87 = 0\n        list_bi82 = range(0, n)\n        while idx_xf87 < len(list_bi82):\n            i = list_bi82[idx_xf87]\n            if (bit & (1 << i)) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                ss.add(li[i])\n            idx_xf87 = idx_xf87 + 1\n        s.append(ss)\n        idx_70gh = idx_70gh + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r = r * m\n            m = m - 1\n            n = n - 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif n == len(set(A)) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "AugAssign2Assign_sample_from_s137613418_to_8", "old_id": "s137613418"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\nidx_7yzs = 0\nlist_gkrz = range(n)\nwhile idx_7yzs < len(list_gkrz):\n    i = list_gkrz[idx_7yzs]\n    idx_cx9y = 0\n    list_y39f = range(n)\n    while idx_cx9y < len(list_y39f):\n        d = list_y39f[idx_cx9y]\n        j = i + d\n        k = j + d\n        if k >= n and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            break\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n\n            ans = ans - 1\n        idx_cx9y = idx_cx9y + 1\n    idx_7yzs = idx_7yzs + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s922746568_to_9", "old_id": "s922746568"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_ucb2 = 0\nlist_jmo4 = range(n)\nwhile idx_ucb2 < len(list_jmo4):\n    i = list_jmo4[idx_ucb2]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_ucb2 = idx_ucb2 + 1\nlst = sorted(lst)\nlst = lst + ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nidx_dzqg = 0\nlist_3mfb = lst\nwhile idx_dzqg < len(list_3mfb):\n    i = list_3mfb[idx_dzqg]\n    if i == pre and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        tmp_cnt = tmp_cnt + 1\n    else:\n        cnt = cnt + sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\n    idx_dzqg = idx_dzqg + 1\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s430322735_to_10", "old_id": "s430322735"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n    if D[0] != 0 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        print(0)\n        return\n\n    cnt = Counter(D)\n    if cnt[0] > 1 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        print(0)\n        return\n\n    res = 1\n    idx_g0ao = 0\n    list_mgp7 = range(1, max(D)+1)\n    while idx_g0ao < len(list_mgp7):\n        i = list_mgp7[idx_g0ao]\n        if cnt[i-1] == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            continue\n        res = res * cnt[i-1]**cnt[i] % mod\n        res = res % mod\n        idx_g0ao = idx_g0ao + 1\n\n    print(res)\n\n\nsolve()\n", "id": "AugAssign2Assign_sample_from_s534639230_to_11", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nidx_l0vr = 0\nlist_w59f = A\nwhile idx_l0vr < len(list_w59f):\n    a = list_w59f[idx_l0vr]\n    cnt = 0\n    while a % 2 == 0:\n        a = a // 2\n        cnt = cnt + 1\n    if count_div_2 is None and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n    idx_l0vr = idx_l0vr + 1\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s817205687_to_12", "old_id": "s817205687"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k = k + self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                return self.default\n            p = p + self.size-1\n            q = q + self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q = q - 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    idx_3okl = 0\n    list_kne7 = list(enumerate(a))\n    while idx_3okl < len(list_kne7):\n        i, num = list_kne7[idx_3okl]\n        ans[num-1] = ans[num-1] * i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n        idx_3okl = idx_3okl + 1\n    right_seg = SegmentTree(N, 0)\n    idx_q42g = 0\n    list_fjvn = list(enumerate(a[::-1]))\n    while idx_q42g < len(list_fjvn):\n        i, num = list_fjvn[idx_q42g]\n        ans[num-1] = ans[num-1] * i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n        idx_q42g = idx_q42g + 1\n\n    print(sum(ans))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    main()\n", "id": "AugAssign2Assign_sample_from_s764169243_to_13", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_69td = 0\nlist_7udi = range(len(S))\nwhile idx_69td < len(list_7udi):\n    i = list_7udi[idx_69td]\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\" and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        count = count + 1\n    else:\n        if count > record:\n            record = count\n        count = 0\n    idx_69td = idx_69td + 1\nif count > record and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    record = count\n\nprint(record)\n", "id": "AugAssign2Assign_sample_from_s993625131_to_14", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nidx_z70q = 0\nlist_1hjy = T\nwhile idx_z70q < len(list_1hjy):\n    i = list_1hjy[idx_z70q]\n    if i == S[-1] or i == S[0] and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        ans = ans + 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans = ans + 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    idx_z70q = idx_z70q + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s315467749_to_15", "old_id": "s315467749"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nidx_57qc = 0\nlist_ani6 = range(num_r)\nwhile idx_57qc < len(list_ani6):\n    i = list_ani6[idx_57qc]\n    if c[i] != comp[i] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        ans = ans + 1\n    idx_57qc = idx_57qc + 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s031459110_to_16", "old_id": "s031459110"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nidx_unbc = 0\nlist_0n79 = range(N-M+1)\nwhile idx_unbc < len(list_0n79):\n    i = list_0n79[idx_unbc]\n    S_2 = S[i:i+M]\n    cnt = 0\n    idx_5rpn = 0\n    list_x7e5 = range(M)\n    while idx_5rpn < len(list_x7e5):\n        j = list_x7e5[idx_5rpn]\n        if T[j] != S_2[j] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            cnt = cnt + 1\n        idx_5rpn = idx_5rpn + 1\n    ans = min(ans, cnt)\n    idx_unbc = idx_unbc + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s838619850_to_17", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_9ap2 = 0\n    list_osp6 = range(n)\n    while idx_9ap2 < len(list_osp6):\n        _ = list_osp6[idx_9ap2]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            sdic[s] = sdic[s] + 1\n        else:\n            sdic[s] = 1\n        idx_9ap2 = idx_9ap2 + 1\n    ans = 0\n    idx_ebgs = 0\n    list_on3e = list(sdic.items())\n    while idx_ebgs < len(list_on3e):\n        k, v = list_on3e[idx_ebgs]\n        ans = ans + v*(v-1)//2\n        idx_ebgs = idx_ebgs + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    main()\n", "id": "AugAssign2Assign_sample_from_s733189960_to_18", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_qu8v = 0\nlist_fqo8 = range(n)\nwhile idx_qu8v < len(list_fqo8):\n    _ = list_fqo8[idx_qu8v]\n    x, u = list(input().split())\n    if u == \"BTC\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        res = res + float(x) * 380000\n    else:\n        res = res + int(x)\n    idx_qu8v = idx_qu8v + 1\nprint(res)\n", "id": "AugAssign2Assign_sample_from_s238775098_to_19", "old_id": "s238775098"}
{"code": "N, K = map(int, input().split())\nA = []\nidx_xkyq = 0\nlist_qhvu = range(N)\nwhile idx_xkyq < len(list_qhvu):\n    i = list_qhvu[idx_xkyq]\n    A.append(0)\n    idx_xkyq = idx_xkyq + 1\nidx_n86r = 0\nlist_1fq9 = range(K)\nwhile idx_n86r < len(list_1fq9):\n    i = list_1fq9[idx_n86r]\n    d = int(input())\n    AA = list(map(int, input().split()))\n    idx_mgld = 0\n    list_nu8x = range(d)\n    while idx_mgld < len(list_nu8x):\n        j = list_nu8x[idx_mgld]\n        A[AA[j] - 1] = 1\n        idx_mgld = idx_mgld + 1\n    idx_n86r = idx_n86r + 1\n\nn = 0\nidx_vpm3 = 0\nlist_evnk = range(N)\nwhile idx_vpm3 < len(list_evnk):\n    i = list_evnk[idx_vpm3]\n    if A[i] == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        n = n + 1\n    idx_vpm3 = idx_vpm3 + 1\nprint(n)\n", "id": "AugAssign2Assign_sample_from_s225521100_to_20", "old_id": "s225521100"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_u5dx = 0\n    list_yxci = range(N)\n    while idx_u5dx < len(list_yxci):\n        i = list_yxci[idx_u5dx]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n        idx_u5dx = idx_u5dx + 1\n    idx_cflp = 0\n    list_y1t9 = modK\n    while idx_cflp < len(list_y1t9):\n        key = list_y1t9[idx_cflp]\n        lenK = len(modK[key])\n        idx_i0bj = 0\n        list_21ag = list(enumerate(modK[key]))\n        while idx_i0bj < len(list_21ag):\n            i, a = list_21ag[idx_i0bj]\n            count = count + bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_i0bj = idx_i0bj + 1\n        idx_cflp = idx_cflp + 1\n\n    print(count)\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    solve()\n", "id": "AugAssign2Assign_sample_from_s975943078_to_21", "old_id": "s975943078"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nidx_y3k6 = 0\nlist_vthw = range(n-1)\nwhile idx_y3k6 < len(list_vthw):\n    i = list_vthw[idx_y3k6]\n    if s[i] == s[i+1] and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        continue\n\n    else:\n        cnt = cnt + 1\n    idx_y3k6 = idx_y3k6 + 1\n\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s869207096_to_22", "old_id": "s869207096"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nidx_7tgq = 0\nlist_kyx1 = range(n)\nwhile idx_7tgq < len(list_kyx1):\n    i = list_kyx1[idx_7tgq]\n    sum = sum + int(l[i])\n    if max < int(l[i]) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        max = int(l[i])\n    if min > int(l[i]) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        min = int(l[i])\n    idx_7tgq = idx_7tgq + 1\nprint(min, max, sum)\n", "id": "AugAssign2Assign_sample_from_s704354119_to_23", "old_id": "s704354119"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nidx_zw9l = 0\nlist_q3xu = range(1, N)\nwhile idx_zw9l < len(list_q3xu):\n    i = list_q3xu[idx_zw9l]\n    tmp = a[i - 1] + a[i]\n    if tmp > x and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt = cnt + tmp - x\n    idx_zw9l = idx_zw9l + 1\n\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s708549466_to_24", "old_id": "s708549466"}
{"code": "n = int(input())\narr = {}\nidx_p09n = 0\nlist_kcyp = range(n)\nwhile idx_p09n < len(list_kcyp):\n    i = list_kcyp[idx_p09n]\n    s = input()\n    if not s in arr and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        arr[s] = 1\n    else:\n        arr[s] = arr[s] + 1\n    idx_p09n = idx_p09n + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nidx_ly0g = 0\nlist_0eor = out_sort\nwhile idx_ly0g < len(list_0eor):\n    i = list_0eor[idx_ly0g]\n    print(i)\n    idx_ly0g = idx_ly0g + 1\n", "id": "AugAssign2Assign_sample_from_s622795537_to_25", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = 0\nidx_z7xr = 0\nlist_l7w2 = range(n)\nwhile idx_z7xr < len(list_l7w2):\n    i = list_l7w2[idx_z7xr]\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    idx_ykoe = 0\n    list_d6h3 = x\n    while idx_ykoe < len(list_d6h3):\n        w = list_d6h3[idx_ykoe]\n        if w in y and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            z = z + 1\n        idx_ykoe = idx_ykoe + 1\n    if z > ans and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        ans = z\n    idx_z7xr = idx_z7xr + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s232279435_to_26", "old_id": "s232279435"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nidx_mr1k = 0\nlist_h276 = range(N)\nwhile idx_mr1k < len(list_h276):\n    i = list_h276[idx_mr1k]\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] = m[b-1][f-1][r-1] + v\n    idx_mr1k = idx_mr1k + 1\nidx_m3ar = 0\nlist_6tcv = range(4)\nwhile idx_m3ar < len(list_6tcv):\n    i = list_6tcv[idx_m3ar]\n    idx_pjbu = 0\n    list_0hcs = range(3)\n    while idx_pjbu < len(list_0hcs):\n        j = list_0hcs[idx_pjbu]\n        idx_69hm = 0\n        list_oans = range(10)\n        while idx_69hm < len(list_oans):\n            k = list_oans[idx_69hm]\n            line = line + ' {0}'.format(m[i][j][k])\n            idx_69hm = idx_69hm + 1\n        print(line)\n        line = ''\n        idx_pjbu = idx_pjbu + 1\n    if i < 3 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        print('#'*20)\n    idx_m3ar = idx_m3ar + 1\n", "id": "AugAssign2Assign_sample_from_s067092519_to_27", "old_id": "s067092519"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    idx_5fcl = 0\n    list_9dzg = range(M)\n    while idx_5fcl < len(list_9dzg):\n        _ = list_9dzg[idx_5fcl]\n        l, r = map(int, input().split())\n        train[l-1][r-1] = train[l-1][r-1] + 1\n        idx_5fcl = idx_5fcl + 1\n\n    accum = [[0 for _ in range(N+1)]]\n    idx_3ath = 0\n    list_inav = range(N)\n    while idx_3ath < len(list_inav):\n        i = list_inav[idx_3ath]\n        temp = [0]\n        v = 0\n        idx_fka3 = 0\n        list_r52d = range(N)\n        while idx_fka3 < len(list_r52d):\n            j = list_r52d[idx_fka3]\n            v = v + train[i][j]\n            temp.append(accum[-1][j+1]+v)\n            idx_fka3 = idx_fka3 + 1\n        accum.append(temp)\n        idx_3ath = idx_3ath + 1\n    idx_804e = 0\n    list_b3g0 = range(Q)\n    while idx_804e < len(list_b3g0):\n        _ = list_b3g0[idx_804e]\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n        idx_804e = idx_804e + 1\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    main()\n", "id": "AugAssign2Assign_sample_from_s048491063_to_28", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] = self.rank[y] + 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_st18 = 0\n        list_r3w8 = range(self.n)\n        while idx_st18 < len(list_r3w8):\n            a = list_r3w8[idx_st18]\n            S.add(self.find(a))\n            idx_st18 = idx_st18 + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now = now * b\n    if now == a and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_vafr = 0\n    list_4j8y = range(size)\n    while idx_vafr < len(list_4j8y):\n        a = list_4j8y[idx_vafr]\n        if (num >> (size-a-1)) & 1 == 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            A[a] = 1\n        else:\n            A[a] = 0\n        idx_vafr = idx_vafr + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_35ib = 0\n    list_ndhj = range(2, len(A))\n    while idx_35ib < len(list_ndhj):\n        a = list_ndhj[idx_35ib]\n        A[a] = A[a-1]*a\n        if (mod > 0) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            A[a] = A[a] % mod_\n        idx_35ib = idx_35ib + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z = z // x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_nyth = 0\n    list_vk1f = range(2, n+1)\n    while idx_nyth < len(list_vk1f):\n        a = list_vk1f[idx_nyth]\n        if A[a] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            idx_bua2 = 0\n            list_0yzu = range(a*2, n+1, a)\n            while idx_bua2 < len(list_0yzu):\n                b = list_0yzu[idx_bua2]\n                A[b] = False\n                idx_bua2 = idx_bua2 + 1\n        idx_nyth = idx_nyth + 1\n    if (type == \"bool\") and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return A\n    B = []\n    idx_rqg5 = 0\n    list_mgzl = range(n+1)\n    while idx_rqg5 < len(list_mgzl):\n        a = list_mgzl[idx_rqg5]\n        if (A[a]) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            B.append(a)\n        idx_rqg5 = idx_rqg5 + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            return False\n        i = i + 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_4od7 = 0\n    list_omkc = range(n)\n    while idx_4od7 < len(list_omkc):\n        a = list_omkc[idx_4od7]\n        s = s + A[a]\n        if (a < n-1) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            s = s + c\n        idx_4od7 = idx_4od7 + 1\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n = n // b\n            list_.append(b)\n        b = b + 1\n    if n > 1 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        list_.append(n)\n    if type_ == \"dict\" and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        dic = {}\n        idx_ucky = 0\n        list_q2ub = list_\n        while idx_ucky < len(list_q2ub):\n            a = list_q2ub[idx_ucky]\n            if a in dic:\n                dic[a] = dic[a] + 1\n            else:\n                dic[a] = 1\n            idx_ucky = idx_ucky + 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_ and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        ret = min_\n    if x > max_ and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_ez1g = 0\n    list_cvtu = range(n)\n    while idx_ez1g < len(list_cvtu):\n        a = list_cvtu[idx_ez1g]\n        S.append(input())\n        idx_ez1g = idx_ez1g + 1\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "AugAssign2Assign_sample_from_s977408144_to_29", "old_id": "s977408144"}
{"code": "N = int(input())\nmo = []\nidx_2iaw = 0\nlist_ud3e = range(N)\nwhile idx_2iaw < len(list_ud3e):\n    _ = list_ud3e[idx_2iaw]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_2iaw = idx_2iaw + 1\nokz = 0\nidx_ogxz = 0\nlist_ug6t = mo\nwhile idx_ogxz < len(list_ug6t):\n    i = list_ug6t[idx_ogxz]\n    if i[1] == \"JPY\" and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        okz = okz + i[0]\n    else:\n        okz = okz + i[0]*380000\n    idx_ogxz = idx_ogxz + 1\n\nprint(okz)\n", "id": "AugAssign2Assign_sample_from_s554393427_to_30", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = 0\nidx_digj = 0\nlist_1sfe = range(N // R + 1)\nwhile idx_digj < len(list_1sfe):\n    i = list_1sfe[idx_digj]\n    idx_qjke = 0\n    list_p8j1 = range((N-i * R) // G + 1)\n    while idx_qjke < len(list_p8j1):\n        j = list_p8j1[idx_qjke]\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            score = score + 1\n        idx_qjke = idx_qjke + 1\n    idx_digj = idx_digj + 1\n\nprint(score)\n", "id": "AugAssign2Assign_sample_from_s897879131_to_31", "old_id": "s897879131"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nidx_9wxv = 0\nlist_5rc7 = range(M)\nwhile idx_9wxv < len(list_5rc7):\n    _ = list_5rc7[idx_9wxv]\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\n    idx_9wxv = idx_9wxv + 1\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nidx_6tpl = 0\nlist_jse2 = range(1, N+1)\nwhile idx_6tpl < len(list_jse2):\n    i = list_jse2[idx_6tpl]\n    if col[i] < 0 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            idx_i8za = 0\n            list_qd1z = G[x]\n            while idx_i8za < len(list_qd1z):\n                y = list_qd1z[idx_i8za]\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n                idx_i8za = idx_i8za + 1\n        cnt = cnt + 1\n    idx_6tpl = idx_6tpl + 1\ncmax = max(col)\nprint(cmax)\n", "id": "AugAssign2Assign_sample_from_s233116196_to_32", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_0k7l = 0\nlist_3qol = range(memTime)\nwhile idx_0k7l < len(list_3qol):\n    color = list_3qol[idx_0k7l]\n    member = memLate[color]\n    if member // 400 >= 8 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        highLate = highLate + 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\n    idx_0k7l = idx_0k7l + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "AugAssign2Assign_sample_from_s964794058_to_33", "old_id": "s964794058"}
{"code": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nidx_e1n6 = 0\nlist_9j0o = S\nwhile idx_e1n6 < len(list_9j0o):\n    s = list_9j0o[idx_e1n6]\n    if s != tmp and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        ans = ans + 1\n        tmp = s\n    idx_e1n6 = idx_e1n6 + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s174910557_to_34", "old_id": "s174910557"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_wbl0 = 0\nlist_ozvs = range(N-K)\nwhile idx_wbl0 < len(list_ozvs):\n    i = list_ozvs[idx_wbl0]\n    if score[mae] < score[usiro] and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        print('Yes')\n    else:\n        print('No')\n    mae = mae + 1\n    usiro = usiro + 1\n    idx_wbl0 = idx_wbl0 + 1\n", "id": "AugAssign2Assign_sample_from_s182651529_to_35", "old_id": "s182651529"}
{"code": "n = int(input())\nr = 0\nidx_r516 = 0\nlist_7nga = range(n)\nwhile idx_r516 < len(list_7nga):\n    ii = list_7nga[idx_r516]\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        r = r + (ii+1)\n    idx_r516 = idx_r516 + 1\nprint(r)\n", "id": "AugAssign2Assign_sample_from_s702834515_to_36", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n    idx_wgqc = 0\n    list_t6yl = range(N)\n    while idx_wgqc < len(list_t6yl):\n        i = list_t6yl[idx_wgqc]\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n        idx_wgqc = idx_wgqc + 1\n\n    X = input()\n    xi = 0\n    idx_q6tr = 0\n    list_o41y = range(N)\n    while idx_q6tr < len(list_o41y):\n        i = list_o41y[idx_q6tr]\n        if s[i] == X and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            xi = i\n            break\n        idx_q6tr = idx_q6tr + 1\n\n    ans = 0\n    idx_oqwa = 0\n    list_faoj = range(N)\n    while idx_oqwa < len(list_faoj):\n        i = list_faoj[idx_oqwa]\n        if xi < i and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            ans = ans + t[i]\n        idx_oqwa = idx_oqwa + 1\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    main()\n", "id": "AugAssign2Assign_sample_from_s664563518_to_37", "old_id": "s664563518"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\nidx_oft5 = 0\nlist_fdcn = range(N-1)\nwhile idx_oft5 < len(list_fdcn):\n    i = list_fdcn[idx_oft5]\n    if H[i] >= H[i+1] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        count_tmp = count_tmp + 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    idx_oft5 = idx_oft5 + 1\nif count_tmp > count_best and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "AugAssign2Assign_sample_from_s895229833_to_38", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nidx_uh0g = 0\nlist_a38r = range(10)\nwhile idx_uh0g < len(list_a38r):\n    i = list_a38r[idx_uh0g]\n    idx_5n1y = 0\n    list_7q1b = list(enumerate(map(int, next(X).split())))\n    while idx_5n1y < len(list_7q1b):\n        j, c = list_7q1b[idx_5n1y]\n        C[i, j] = c\n        idx_5n1y = idx_5n1y + 1\n    idx_uh0g = idx_uh0g + 1\nA = np.zeros((h, w), dtype=int)\nidx_dxnb = 0\nlist_7f9k = range(h)\nwhile idx_dxnb < len(list_7f9k):\n    i = list_7f9k[idx_dxnb]\n    idx_re8f = 0\n    list_j7ar = list(enumerate(map(int, next(X).split())))\n    while idx_re8f < len(list_j7ar):\n        j, a = list_j7ar[idx_re8f]\n        A[i, j] = a\n        idx_re8f = idx_re8f + 1\n    idx_dxnb = idx_dxnb + 1\n\nG = nx.DiGraph(C)\nd = {}\nidx_wz70 = 0\nlist_ygqu = range(10)\nwhile idx_wz70 < len(list_ygqu):\n    i = list_ygqu[idx_wz70]\n    if i == 1 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n    idx_wz70 = idx_wz70 + 1\n\ns = 0\nidx_mwjt = 0\nlist_0k5a = chain.from_iterable(A)\nwhile idx_mwjt < len(list_0k5a):\n    a = list_0k5a[idx_mwjt]\n    if a == -1 or a == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        continue\n    s = s + d[a]\n    idx_mwjt = idx_mwjt + 1\nprint(s)\n", "id": "AugAssign2Assign_sample_from_s749244504_to_39", "old_id": "s749244504"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_y46x = 0\nlist_sl9x = range(n)\nwhile idx_y46x < len(list_sl9x):\n    i = list_sl9x[idx_y46x]\n    if p[i] != p_copy[i] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        count = count + 1\n    idx_y46x = idx_y46x + 1\nif count == 0 or count == 2 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "AugAssign2Assign_sample_from_s763097776_to_40", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\nidx_lzs7 = 0\nlist_proh = range(1, 2**10)\nwhile idx_lzs7 < len(list_proh):\n    i = list_proh[idx_lzs7]\n    tmp = 0\n    lst = [0]*n\n    idx_981e = 0\n    list_o1h2 = range(10)\n    while idx_981e < len(list_o1h2):\n        j = list_o1h2[idx_981e]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            idx_u0m3 = 0\n            list_dqpc = range(n)\n            while idx_u0m3 < len(list_dqpc):\n                k = list_dqpc[idx_u0m3]\n                lst[k] = lst[k] + F[k][j]\n                idx_u0m3 = idx_u0m3 + 1\n        idx_981e = idx_981e + 1\n    idx_6xkt = 0\n    list_e0fd = range(n)\n    while idx_6xkt < len(list_e0fd):\n        k = list_e0fd[idx_6xkt]\n        tmp = tmp + P[k][lst[k]]\n        idx_6xkt = idx_6xkt + 1\n    ans = max(ans, tmp)\n    idx_lzs7 = idx_lzs7 + 1\n\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s906994739_to_41", "old_id": "s906994739"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\nidx_wh30 = 0\nlist_mue8 = range(1 << d)\nwhile idx_wh30 < len(list_mue8):\n    bit = list_mue8[idx_wh30]\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n    idx_1bap = 0\n    list_i1u6 = range(d)\n    while idx_1bap < len(list_i1u6):\n        i = list_i1u6[idx_1bap]\n        if bit & (1 << i) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            sum = sum + pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count = count + pc[i][0]\n            nokori.discard(i + 1)\n        idx_1bap = idx_1bap + 1\n    if sum < g and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count = count + n\n        sum = sum + n * use * 100\n    if sum >= g and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        ans = min(ans, count)\n    idx_wh30 = idx_wh30 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s591424993_to_42", "old_id": "s591424993"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_gk7b = 0\nlist_jxag = s\nwhile idx_gk7b < len(list_jxag):\n    i = list_jxag[idx_gk7b]\n    if i == \")\" and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        left = left + 1\n    else:\n        break\n    idx_gk7b = idx_gk7b + 1\n\nleft1 = 0\nright1 = 0\nidx_76pq = 0\nlist_8s9n = range(left, n)\nwhile idx_76pq < len(list_8s9n):\n    i = list_8s9n[idx_76pq]\n    if s[i] == \"(\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        right1 = right1 + 1\n    elif right1 > 0:\n        right1 = right1 - 1\n    else:\n        left1 = left1 + 1\n    idx_76pq = idx_76pq + 1\n\nleft1 = left1 + left\nidx_g5op = 0\nlist_hud1 = range(right1)\nwhile idx_g5op < len(list_hud1):\n    i = list_hud1[idx_g5op]\n    s = s + \")\"\n    idx_g5op = idx_g5op + 1\nidx_w47h = 0\nlist_p9qh = range(left1)\nwhile idx_w47h < len(list_p9qh):\n    i = list_p9qh[idx_w47h]\n    s = \"(\" + s\n    idx_w47h = idx_w47h + 1\n\nprint(s)\n", "id": "AugAssign2Assign_sample_from_s952876397_to_43", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\nidx_e510 = 0\nlist_0y29 = range(N)\nwhile idx_e510 < len(list_0y29):\n    i = list_0y29[idx_e510]\n    idx_19wn = 0\n    list_9wvr = range(T)\n    while idx_19wn < len(list_9wvr):\n        j = list_9wvr[idx_19wn]\n        if j < L[i][0] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        idx_19wn = idx_19wn + 1\n    idx_e510 = idx_e510 + 1\n\nused = []\nB = dp[N][T-1]\nj = T-1\nidx_hpbu = 0\nlist_lcut = range(N-1, -1, -1)\nwhile idx_hpbu < len(list_lcut):\n    i = list_lcut[idx_hpbu]\n    if B == dp[i][j] and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        continue\n    B = B - L[i][1]\n    used.append(i)\n    j = j - L[i][0]\n    idx_hpbu = idx_hpbu + 1\n\nans = dp[N][T-1]\nc = 0\nidx_tjfi = 0\nlist_k1pv = range(N)\nwhile idx_tjfi < len(list_k1pv):\n    i = list_k1pv[idx_tjfi]\n    if i in used and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        continue\n    c = max(c, L[i][1])\n    idx_tjfi = idx_tjfi + 1\n\nprint(ans+c)\n", "id": "AugAssign2Assign_sample_from_s793709854_to_44", "old_id": "s793709854"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nidx_ie4p = 0\nlist_yaud = range(N-2)\nwhile idx_ie4p < len(list_yaud):\n    i = list_yaud[idx_ie4p]\n    idx_zctf = 0\n    list_8zyd = range(i+1, N-1)\n    while idx_zctf < len(list_8zyd):\n        j = list_8zyd[idx_zctf]\n        idx_9lih = 0\n        list_gcd5 = range(j+1, N)\n        while idx_9lih < len(list_gcd5):\n            k = list_gcd5[idx_9lih]\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                continue\n            if a+b > c and b+c > a and c+a > b and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                ans = ans + 1\n            idx_9lih = idx_9lih + 1\n        idx_zctf = idx_zctf + 1\n    idx_ie4p = idx_ie4p + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s590045523_to_45", "old_id": "s590045523"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nidx_b562 = 0\nlist_7scl = Hs\nwhile idx_b562 < len(list_7scl):\n    H = list_7scl[idx_b562]\n    if maxH <= H and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        ans = ans + 1\n        maxH = H\n    idx_b562 = idx_b562 + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s002779582_to_46", "old_id": "s002779582"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nidx_enjt = 0\nlist_bo43 = range(n)\nwhile idx_enjt < len(list_bo43):\n    i = list_bo43[idx_enjt]\n    if a[i] < ope[j][1] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        a[i] = ope[j][1]\n        ope[j][0] = ope[j][0] - 1\n        if ope[j][0] == 0:\n            j = j + 1\n            if j == len(ope):\n                break\n    else:\n        break\n    idx_enjt = idx_enjt + 1\nprint(sum(a))\n", "id": "AugAssign2Assign_sample_from_s289483518_to_47", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_m1lg = 0\nlist_dx78 = selected\nwhile idx_m1lg < len(list_dx78):\n    t, d = list_dx78[idx_m1lg]\n    if t not in memo and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n    idx_m1lg = idx_m1lg + 1\n\ncnt_type = len(memo)\nidx_t9ci = 0\nlist_vcfw = info[k:]\nwhile idx_t9ci < len(list_vcfw):\n    t, d = list_vcfw[idx_t9ci]\n    if t not in memo and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        memo[t] = 1\n        unselected_only.append(d)\n    idx_t9ci = idx_t9ci + 1\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nidx_z1ua = 0\nlist_q3dr = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_z1ua < len(list_q3dr):\n    i = list_q3dr[idx_z1ua]\n    cnt_type = cnt_type + 1\n    sum_select = sum_select + unselected_only[-1]\n    sum_select = sum_select - selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_z1ua = idx_z1ua + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s804484425_to_48", "old_id": "s804484425"}
