{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_3r4x = 0\nlist_3juz = range(m)\nwhile idx_3r4x < len(list_3juz):\n    i = list_3juz[idx_3r4x]\n    p, x = map(int, input().split())\n    s = 0\n    idx_r9a6 = 0\n    list_j0hn = range(len(t))\n    while idx_r9a6 < len(list_j0hn):\n        j = list_j0hn[idx_r9a6]\n        if not j == p-1:\n            s = s + t[j]\n        else:\n            s = s + x\n        idx_r9a6 = idx_r9a6 + 1\n    print(s)\n    idx_3r4x = idx_3r4x + 1\n", "id": "AugAssign2Assign_sample_from_s609392609_to_0", "old_id": "s609392609"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nidx_78uc = 0\nlist_61m4 = range(q)\nwhile idx_78uc < len(list_61m4):\n    _ = list_61m4[idx_78uc]\n    t = list(map(int, input().split()))\n    if not t[0] == 1:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    else:\n\n        a, b = t[1:]\n        const = const + b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum = left_sum + a\n                cnt = cnt + 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum = right_sum - c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum = left_sum + a\n                right_sum = right_sum + c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum = left_sum + c\n                right_sum = right_sum + a\n        else:\n            c = heapq.heappop(left)\n            left_sum = left_sum + c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum = left_sum + a\n                right_sum = right_sum - c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum = left_sum - c\n                right_sum = right_sum + a\n        cnt = cnt + 1\n    idx_78uc = idx_78uc + 1\n", "id": "AugAssign2Assign_sample_from_s016605598_to_1", "old_id": "s016605598"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    idx_hiy8 = 0\n    list_0f4n = range(len(li))\n    while idx_hiy8 < len(list_0f4n):\n        i = list_0f4n[idx_hiy8]\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_ynz7 = 0\n        list_juen = sub_list\n        while idx_ynz7 < len(list_juen):\n            sub = list_juen[idx_ynz7]\n            sub.appendleft(li[i])\n            idx_ynz7 = idx_ynz7 + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_hiy8 = idx_hiy8 + 1\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_fkaw = 0\n    list_p459 = range(len(li)-1, -1, -1)\n    while idx_fkaw < len(list_p459):\n        i = list_p459[idx_fkaw]\n        n = n + li[i] * base\n        base = base * 10\n        idx_fkaw = idx_fkaw + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_0678 = 0\n    list_m5rl = range(len(li))\n    while idx_0678 < len(list_m5rl):\n        i = list_m5rl[idx_0678]\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        idx_ymdv = 0\n        list_d4i6 = range(i+1, len(li))\n        while idx_ymdv < len(list_d4i6):\n            j = list_d4i6[idx_ymdv]\n            if li[j] % li[i] == 0:\n                li[j] = -1\n            idx_ymdv = idx_ymdv + 1\n        idx_0678 = idx_0678 + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_7jsi = 0\n    list_lbys = range(0, (1 << (n+1)))\n    while idx_7jsi < len(list_lbys):\n        bit = list_lbys[idx_7jsi]\n        ss = set()\n        idx_at1e = 0\n        list_1djm = range(0, n)\n        while idx_at1e < len(list_1djm):\n            i = list_1djm[idx_at1e]\n            if (bit & (1 << i)):\n                ss.add(li[i])\n            idx_at1e = idx_at1e + 1\n        s.append(ss)\n        idx_7jsi = idx_7jsi + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r = r * m\n            m = m - 1\n            n = n - 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif not n == len(set(A)):\n    print('NO')\nelse:\n    print('YES')\n", "id": "AugAssign2Assign_sample_from_s137613418_to_2", "old_id": "s137613418"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_t3n7 = 0\nlist_kt7o = range(n)\nwhile idx_t3n7 < len(list_kt7o):\n    i = list_kt7o[idx_t3n7]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_t3n7 = idx_t3n7 + 1\nlst = sorted(lst)\nlst = lst + ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nidx_uwyc = 0\nlist_mdny = lst\nwhile idx_uwyc < len(list_mdny):\n    i = list_mdny[idx_uwyc]\n    if not i == pre:\n        cnt = cnt + sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    else:\n        tmp_cnt = tmp_cnt + 1\n    pre = i\n    idx_uwyc = idx_uwyc + 1\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s430322735_to_3", "old_id": "s430322735"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nidx_jwtl = 0\nlist_zfk6 = A\nwhile idx_jwtl < len(list_zfk6):\n    a = list_zfk6[idx_jwtl]\n    cnt = 0\n    while a % 2 == 0:\n        a = a // 2\n        cnt = cnt + 1\n    if not count_div_2 is None:\n\n        if cnt != count_div_2:\n            print(0)\n            exit()\n    else:\n        count_div_2 = cnt\n    idx_jwtl = idx_jwtl + 1\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s817205687_to_4", "old_id": "s817205687"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_w79n = 0\nlist_c54w = range(len(S))\nwhile idx_w79n < len(list_c54w):\n    i = list_c54w[idx_w79n]\n    if not S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        if count > record:\n            record = count\n        count = 0\n    else:\n        count = count + 1\n    idx_w79n = idx_w79n + 1\nif count > record:\n    record = count\n\nprint(record)\n", "id": "AugAssign2Assign_sample_from_s993625131_to_5", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nidx_epqt = 0\nlist_9ip1 = T\nwhile idx_epqt < len(list_9ip1):\n    i = list_9ip1[idx_epqt]\n    if not i == S[-1] or i == S[0]:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans = ans + 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    else:\n        ans = ans + 1\n    idx_epqt = idx_epqt + 1\n\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s315467749_to_6", "old_id": "s315467749"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_b6i2 = 0\n    list_94v3 = range(n)\n    while idx_b6i2 < len(list_94v3):\n        _ = list_94v3[idx_b6i2]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if not s in sdic:\n            sdic[s] = 1\n        else:\n            sdic[s] = sdic[s] + 1\n        idx_b6i2 = idx_b6i2 + 1\n    ans = 0\n    idx_ymzb = 0\n    list_yls0 = list(sdic.items())\n    while idx_ymzb < len(list_yls0):\n        k, v = list_yls0[idx_ymzb]\n        ans = ans + v*(v-1)//2\n        idx_ymzb = idx_ymzb + 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "AugAssign2Assign_sample_from_s733189960_to_7", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_3tfd = 0\nlist_p5vx = range(n)\nwhile idx_3tfd < len(list_p5vx):\n    _ = list_p5vx[idx_3tfd]\n    x, u = list(input().split())\n    if not u == \"BTC\":\n        res = res + int(x)\n    else:\n        res = res + float(x) * 380000\n    idx_3tfd = idx_3tfd + 1\nprint(res)\n", "id": "AugAssign2Assign_sample_from_s238775098_to_8", "old_id": "s238775098"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_42pz = 0\n    list_ca54 = range(N)\n    while idx_42pz < len(list_ca54):\n        i = list_ca54[idx_42pz]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if not sum_A[i+1] not in modK:\n            modK[sum_A[i+1]].append(i+1)\n        else:\n            modK[sum_A[i+1]] = [i + 1]\n        idx_42pz = idx_42pz + 1\n    idx_rth4 = 0\n    list_n2s6 = modK\n    while idx_rth4 < len(list_n2s6):\n        key = list_n2s6[idx_rth4]\n        lenK = len(modK[key])\n        idx_tobg = 0\n        list_lgps = list(enumerate(modK[key]))\n        while idx_tobg < len(list_lgps):\n            i, a = list_lgps[idx_tobg]\n            count = count + bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_tobg = idx_tobg + 1\n        idx_rth4 = idx_rth4 + 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "AugAssign2Assign_sample_from_s975943078_to_9", "old_id": "s975943078"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nidx_9vct = 0\nlist_irut = range(n-1)\nwhile idx_9vct < len(list_irut):\n    i = list_irut[idx_9vct]\n    if not s[i] == s[i+1]:\n        cnt = cnt + 1\n    else:\n        continue\n    idx_9vct = idx_9vct + 1\n\nprint(cnt)\n", "id": "AugAssign2Assign_sample_from_s869207096_to_10", "old_id": "s869207096"}
{"code": "n = int(input())\narr = {}\nidx_wqci = 0\nlist_4he2 = range(n)\nwhile idx_wqci < len(list_4he2):\n    i = list_4he2[idx_wqci]\n    s = input()\n    if not not s in arr:\n        arr[s] = arr[s] + 1\n    else:\n        arr[s] = 1\n    idx_wqci = idx_wqci + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nidx_zld4 = 0\nlist_7txv = out_sort\nwhile idx_zld4 < len(list_7txv):\n    i = list_7txv[idx_zld4]\n    print(i)\n    idx_zld4 = idx_zld4 + 1\n", "id": "AugAssign2Assign_sample_from_s622795537_to_11", "old_id": "s622795537"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if not b:\n        print(\"no\")\n    else:\n        print(\"yes\")\n\n\ndef Yn(b):\n    if not b:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n\ndef YN(b):\n    if not b:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if not self.rank[x] < self.rank[y]:\n            if self.rank[y] < self.rank[x]:\n                self.P[y] = x\n            else:\n                self.P[x] = y\n                self.rank[y] = self.rank[y] + 1\n        else:\n            self.P[x] = y\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_k29z = 0\n        list_uko5 = range(self.n)\n        while idx_k29z < len(list_uko5):\n            a = list_uko5[idx_k29z]\n            S.add(self.find(a))\n            idx_k29z = idx_k29z + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now = now * b\n    if not now == a:\n        return False\n    else:\n        return True\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_k26i = 0\n    list_htf4 = range(size)\n    while idx_k26i < len(list_htf4):\n        a = list_htf4[idx_k26i]\n        if not (num >> (size-a-1)) & 1 == 1:\n            A[a] = 0\n        else:\n            A[a] = 1\n        idx_k26i = idx_k26i + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_59ip = 0\n    list_eb09 = range(2, len(A))\n    while idx_59ip < len(list_eb09):\n        a = list_eb09[idx_59ip]\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] = A[a] % mod_\n        idx_59ip = idx_59ip + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z = z // x\n    z = z >> 1\n    num = (y | z)\n    if not (num >= (1 << size)):\n        return num\n    else:\n        return False\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_l2o6 = 0\n    list_v8xc = range(2, n+1)\n    while idx_l2o6 < len(list_v8xc):\n        a = list_v8xc[idx_l2o6]\n        if A[a]:\n            idx_4qw0 = 0\n            list_c9t1 = range(a*2, n+1, a)\n            while idx_4qw0 < len(list_c9t1):\n                b = list_c9t1[idx_4qw0]\n                A[b] = False\n                idx_4qw0 = idx_4qw0 + 1\n        idx_l2o6 = idx_l2o6 + 1\n    if (type == \"bool\"):\n        return A\n    B = []\n    idx_qs7c = 0\n    list_xqpe = range(n+1)\n    while idx_qs7c < len(list_xqpe):\n        a = list_xqpe[idx_qs7c]\n        if (A[a]):\n            B.append(a)\n        idx_qs7c = idx_qs7c + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i = i + 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if not a:\n        return c\n    else:\n        return b\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_80md = 0\n    list_s5kf = range(n)\n    while idx_80md < len(list_s5kf):\n        a = list_s5kf[idx_80md]\n        s = s + A[a]\n        if (a < n-1):\n            s = s + c\n        idx_80md = idx_80md + 1\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n = n // b\n            list_.append(b)\n        b = b + 1\n    if n > 1:\n        list_.append(n)\n    if not type_ == \"dict\":\n        if type_ == \"list\":\n            return list_\n        else:\n            return None\n    else:\n        dic = {}\n        idx_0okj = 0\n        list_8vse = list_\n        while idx_0okj < len(list_8vse):\n            a = list_8vse[idx_0okj]\n            if a in dic:\n                dic[a] = dic[a] + 1\n            else:\n                dic[a] = 1\n            idx_0okj = idx_0okj + 1\n        return dic\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_lamd = 0\n    list_2um4 = range(n)\n    while idx_lamd < len(list_2um4):\n        a = list_2um4[idx_lamd]\n        S.append(input())\n        idx_lamd = idx_lamd + 1\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "AugAssign2Assign_sample_from_s977408144_to_12", "old_id": "s977408144"}
{"code": "N = int(input())\nmo = []\nidx_4blh = 0\nlist_xitl = range(N)\nwhile idx_4blh < len(list_xitl):\n    _ = list_xitl[idx_4blh]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_4blh = idx_4blh + 1\nokz = 0\nidx_7nde = 0\nlist_cj1s = mo\nwhile idx_7nde < len(list_cj1s):\n    i = list_cj1s[idx_7nde]\n    if not i[1] == \"JPY\":\n        okz = okz + i[0]*380000\n    else:\n        okz = okz + i[0]\n    idx_7nde = idx_7nde + 1\n\nprint(okz)\n", "id": "AugAssign2Assign_sample_from_s554393427_to_13", "old_id": "s554393427"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_zio0 = 0\nlist_hnlz = range(memTime)\nwhile idx_zio0 < len(list_hnlz):\n    color = list_hnlz[idx_zio0]\n    member = memLate[color]\n    if not member // 400 >= 8:\n        if ((member // 400) in colorList) == False:\n            colorList.append(member // 400)\n    else:\n        highLate = highLate + 1\n    idx_zio0 = idx_zio0 + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "AugAssign2Assign_sample_from_s964794058_to_14", "old_id": "s964794058"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_y3wb = 0\nlist_n6jh = range(N-K)\nwhile idx_y3wb < len(list_n6jh):\n    i = list_n6jh[idx_y3wb]\n    if not score[mae] < score[usiro]:\n        print('No')\n    else:\n        print('Yes')\n    mae = mae + 1\n    usiro = usiro + 1\n    idx_y3wb = idx_y3wb + 1\n", "id": "AugAssign2Assign_sample_from_s182651529_to_15", "old_id": "s182651529"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\nidx_sl75 = 0\nlist_56dp = range(N-1)\nwhile idx_sl75 < len(list_56dp):\n    i = list_56dp[idx_sl75]\n    if not H[i] >= H[i+1]:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    else:\n        count_tmp = count_tmp + 1\n    idx_sl75 = idx_sl75 + 1\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "AugAssign2Assign_sample_from_s895229833_to_16", "old_id": "s895229833"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_3s79 = 0\nlist_u93s = range(n)\nwhile idx_3s79 < len(list_u93s):\n    i = list_u93s[idx_3s79]\n    if p[i] != p_copy[i]:\n        count = count + 1\n    idx_3s79 = idx_3s79 + 1\nif not count == 0 or count == 2:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "id": "AugAssign2Assign_sample_from_s763097776_to_17", "old_id": "s763097776"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_hs2o = 0\nlist_i6uq = s\nwhile idx_hs2o < len(list_i6uq):\n    i = list_i6uq[idx_hs2o]\n    if not i == \")\":\n        break\n    else:\n        left = left + 1\n    idx_hs2o = idx_hs2o + 1\n\nleft1 = 0\nright1 = 0\nidx_ziqc = 0\nlist_py9e = range(left, n)\nwhile idx_ziqc < len(list_py9e):\n    i = list_py9e[idx_ziqc]\n    if not s[i] == \"(\":\n        if right1 > 0:\n            right1 = right1 - 1\n        else:\n            left1 = left1 + 1\n    else:\n        right1 = right1 + 1\n    idx_ziqc = idx_ziqc + 1\n\nleft1 = left1 + left\nidx_qygi = 0\nlist_qpvf = range(right1)\nwhile idx_qygi < len(list_qpvf):\n    i = list_qpvf[idx_qygi]\n    s = s + \")\"\n    idx_qygi = idx_qygi + 1\nidx_1f74 = 0\nlist_p6u4 = range(left1)\nwhile idx_1f74 < len(list_p6u4):\n    i = list_p6u4[idx_1f74]\n    s = \"(\" + s\n    idx_1f74 = idx_1f74 + 1\n\nprint(s)\n", "id": "AugAssign2Assign_sample_from_s952876397_to_18", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\nidx_w73u = 0\nlist_bd3a = range(N)\nwhile idx_w73u < len(list_bd3a):\n    i = list_bd3a[idx_w73u]\n    idx_qiyd = 0\n    list_c2mz = range(T)\n    while idx_qiyd < len(list_c2mz):\n        j = list_c2mz[idx_qiyd]\n        if not j < L[i][0]:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        else:\n            dp[i+1][j] = dp[i][j]\n        idx_qiyd = idx_qiyd + 1\n    idx_w73u = idx_w73u + 1\n\nused = []\nB = dp[N][T-1]\nj = T-1\nidx_yv3r = 0\nlist_ln3m = range(N-1, -1, -1)\nwhile idx_yv3r < len(list_ln3m):\n    i = list_ln3m[idx_yv3r]\n    if B == dp[i][j]:\n        continue\n    B = B - L[i][1]\n    used.append(i)\n    j = j - L[i][0]\n    idx_yv3r = idx_yv3r + 1\n\nans = dp[N][T-1]\nc = 0\nidx_0e85 = 0\nlist_rktf = range(N)\nwhile idx_0e85 < len(list_rktf):\n    i = list_rktf[idx_0e85]\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n    idx_0e85 = idx_0e85 + 1\n\nprint(ans+c)\n", "id": "AugAssign2Assign_sample_from_s793709854_to_19", "old_id": "s793709854"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nidx_h379 = 0\nlist_9pg6 = range(n)\nwhile idx_h379 < len(list_9pg6):\n    i = list_9pg6[idx_h379]\n    if not a[i] < ope[j][1]:\n        break\n    else:\n        a[i] = ope[j][1]\n        ope[j][0] = ope[j][0] - 1\n        if ope[j][0] == 0:\n            j = j + 1\n            if j == len(ope):\n                break\n    idx_h379 = idx_h379 + 1\nprint(sum(a))\n", "id": "AugAssign2Assign_sample_from_s289483518_to_20", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_yo8g = 0\nlist_khu8 = selected\nwhile idx_yo8g < len(list_khu8):\n    t, d = list_khu8[idx_yo8g]\n    if not t not in memo:\n        selected_chohuku.append(d)\n    else:\n        memo[t] = 1\n        selected_only.append(d)\n    idx_yo8g = idx_yo8g + 1\n\ncnt_type = len(memo)\nidx_5q7t = 0\nlist_3ohf = info[k:]\nwhile idx_5q7t < len(list_3ohf):\n    t, d = list_3ohf[idx_5q7t]\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n    idx_5q7t = idx_5q7t + 1\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nidx_2j73 = 0\nlist_bvyp = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_2j73 < len(list_bvyp):\n    i = list_bvyp[idx_2j73]\n    cnt_type = cnt_type + 1\n    sum_select = sum_select + unselected_only[-1]\n    sum_select = sum_select - selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_2j73 = idx_2j73 + 1\nprint(ans)\n", "id": "AugAssign2Assign_sample_from_s804484425_to_21", "old_id": "s804484425"}
