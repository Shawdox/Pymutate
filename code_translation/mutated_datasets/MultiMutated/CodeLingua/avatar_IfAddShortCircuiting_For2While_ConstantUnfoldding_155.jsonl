{"code": "n = int(input())\nidx_bosg = (93 + -93)\nlist_l4mz = range(n)\nwhile idx_bosg < len(list_l4mz):\n    i = list_l4mz[idx_bosg]\n    a = int(input())\n    if a < (18 + -16) and (((True or False) and (False or True)) and (((58 + -54) > (100 + -99)) or ((36 + -32) < (97 + -96)))):\n        print((64 + -64))\n    if a >= (23 + -21) and (((True or False) and (False or True)) and (((72 + -70) > (17 + -16)) or ((95 + -93) < (7 + -6)))):\n        print(a - (6 + -4))\n    idx_bosg = idx_bosg + (57 + -56)\n", "id": "ConstantUnfoldding_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = (80 + -79)\npos = (28 + -28)\nidx_rwnx = (94 + -94)\nlist_mo86 = range((89 + -88), N)\nwhile idx_rwnx < len(list_mo86):\n    i = list_mo86[idx_rwnx]\n    if n[pos] > n[i] and (((True or False) and (False or True)) and (((27 + -21) > (57 + -54)) or ((67 + -61) < (65 + -62)))):\n        a += (81 + -80)\n        pos = i\n    idx_rwnx = idx_rwnx + (79 + -78)\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC152_C_to_1", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nidx_rgms = (38 + -38)\nlist_97tq = list(enumerate(a))\nwhile idx_rgms < len(list_97tq):\n    e, i = list_97tq[idx_rgms]\n    if i == (73 + -73) and (((True or False) and (False or True)) and (((18 + -13) > (16 + -14)) or ((74 + -69) < (62 + -60)))):\n        print(e + (77 + -76))\n        break\n    idx_rgms = idx_rgms + (60 + -59)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC170_A_to_2", "old_id": "atcoder_ABC170_A"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_yrkw = (4 + -4)\nlist_y7m6 = range(len(s))\nwhile idx_yrkw < len(list_y7m6):\n    i = list_y7m6[idx_yrkw]\n    if i >= (98 + -97) and (((True or False) and (False or True)) and (((1 + 1) > (15 + -15)) or ((70 + -68) < (54 + -54)))):\n        if s[i] == '':\n            if res[- (12 + -11)] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- (53 + -52)] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_yrkw = idx_yrkw + (77 + -76)\nprint(''.join(res))\n", "id": "ConstantUnfoldding_sample_from_codeforces_147_A_to_3", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = (40 + -40), (6 + -6)\nidx_o57r = (34 + -34)\nlist_04qr = s\nwhile idx_o57r < len(list_04qr):\n    letra = list_04qr[idx_o57r]\n    if letra in freqs and (((True or False) and (False or True)) and (((30 + -21) > (48 + -48)) or ((9 + 0) < (38 + -38)))):\n        freqs[letra] += (53 + -52)\n    else:\n        freqs[letra] = (51 + -50)\n    idx_o57r = idx_o57r + (20 + -19)\nidx_zp6s = (25 + -25)\nlist_oh3u = t\nwhile idx_zp6s < len(list_oh3u):\n    letra = list_oh3u[idx_zp6s]\n    if letra in freqt and (((True or False) and (False or True)) and (((37 + -29) > (64 + -61)) or ((29 + -21) < (34 + -31)))):\n        freqt[letra] += (7 + -6)\n    else:\n        freqt[letra] = (57 + -56)\n    idx_zp6s = idx_zp6s + (42 + -41)\nidx_t3mc = (80 + -80)\nlist_hbcr = freqs.keys()\nwhile idx_t3mc < len(list_hbcr):\n    letra = list_hbcr[idx_t3mc]\n    while (freqs[letra] > (45 + -45) and letra in freqt and freqt[letra] > (5 + -5)):\n        yay += (1 + 0)\n        freqs[letra] -= (91 + -90)\n        freqt[letra] -= (61 + -60)\n    idx_t3mc = idx_t3mc + (36 + -35)\nidx_zip8 = (84 + -84)\nlist_qhxj = freqs.keys()\nwhile idx_zip8 < len(list_qhxj):\n    letra = list_qhxj[idx_zip8]\n    while (freqs[letra] > (41 + -41)):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > (71 + -71) and (((True or False) and (False or True)) and (((43 + -41) > (78 + -78)) or ((71 + -69) < (34 + -34)))):\n            whoops += (46 + -45)\n            freqs[letra] -= (59 + -58)\n            freqt[letra.upper()] -= (44 + -43)\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > (64 + -64):\n            whoops += (52 + -51)\n            freqs[letra] -= (28 + -27)\n            freqt[letra.lower()] -= (90 + -89)\n        else:\n            break\n    idx_zip8 = idx_zip8 + (94 + -93)\nprint(yay, whoops)\n", "id": "ConstantUnfoldding_sample_from_codeforces_518_B_to_4", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = (65 + -64)\n    idx_woal = (93 + -93)\n    list_asrt = range(K)\n    while idx_woal < len(list_asrt):\n        i = list_asrt[idx_woal]\n        a *= N - i\n        idx_woal = idx_woal + (71 + -70)\n    idx_frcw = (15 + -15)\n    list_2bfl = range(K)\n    while idx_frcw < len(list_2bfl):\n        j = list_2bfl[idx_frcw]\n        a /= j + (72 + -71)\n        idx_frcw = idx_frcw + (67 + -66)\n    return a\n\n\nans = (69 + -69)\nlis = list(map(int, input().split()))\nls = []\nidx_flrs = (41 + -41)\nlist_1pbf = lis\nwhile idx_flrs < len(list_1pbf):\n    a = list_1pbf[idx_flrs]\n    ls.append(a % (89 + -87))\n    idx_flrs = idx_flrs + (29 + -28)\none = ls.count((46 + -45))\nzero = ls.count((94 + -94))\npattern_a = (91 + -91)\npattern_b = (70 + -70)\nidx_adm7 = (15 + -15)\nlist_grb5 = range(zero + (77 + -76))\nwhile idx_adm7 < len(list_grb5):\n    j = list_grb5[idx_adm7]\n    pattern_b += combi(zero, j)\n    idx_adm7 = idx_adm7 + (58 + -57)\ntime = (27 + -27)\nwhile time <= one:\n    if time % (7 + -5) == P and (((True or False) and (False or True)) and (((30 + -21) > (37 + -29)) or ((86 + -77) < (38 + -30)))):\n        pattern_a += combi(one, time)\n    time += (90 + -89)\nprint(int(pattern_a * pattern_b))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC017_A_to_5", "old_id": "atcoder_AGC017_A"}
{"code": "record_of_movements = input()\nx, y = (15 + -15), (51 + -51)\nd_movement = {'L': ((56 + -56), - (70 + -69)), 'R': ((56 + -56), (8 + -7)), 'U': ((41 + -40), (92 + -92)), 'D': (- (86 + -85), (18 + -18))}\nd = {(x, y): ''}\nbug = False\nidx_6ucv = (77 + -77)\nlist_4s15 = record_of_movements\nwhile idx_6ucv < len(list_4s15):\n    move = list_4s15[idx_6ucv]\n    temp = (x, y)\n    x += d_movement[move][(8 + -8)]\n    y += d_movement[move][(76 + -75)]\n    if (x, y) not in d and (((True or False) and (False or True)) and (((25 + -19) > (62 + -57)) or ((82 + -76) < (39 + -34)))):\n        idx_9umh = (10 + -10)\n        list_s09l = d_movement\n        while idx_9umh < len(list_s09l):\n            step = list_s09l[idx_9umh]\n            if (x + d_movement[step][(42 + -42)], y + d_movement[step][(96 + -95)]) != temp and (x + d_movement[step][(54 + -54)], y + d_movement[step][(13 + -12)]) in d:\n                bug = True\n                break\n            idx_9umh = idx_9umh + (58 + -57)\n    else:\n        bug = True\n    if bug and (((True or False) and (False or True)) and (((60 + -53) > (19 + -18)) or ((74 + -67) < (44 + -43)))):\n        break\n    d[x, y] = ''\n    idx_6ucv = idx_6ucv + (55 + -54)\nif bug and (((True or False) and (False or True)) and (((58 + -52) > (54 + -53)) or ((22 + -16) < (54 + -53)))):\n    print('BUG')\nelse:\n    print('OK')\n", "id": "ConstantUnfoldding_sample_from_codeforces_8_B_to_6", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nidx_a8y2 = (90 + -90)\nlist_rwy4 = l\nwhile idx_a8y2 < len(list_rwy4):\n    i = list_rwy4[idx_a8y2]\n    if i + (6 + -5) in l and i + (86 + -84) in l and (((True or False) and (False or True)) and (((48 + -38) > (75 + -68)) or ((67 + -57) < (28 + -21)))):\n        print('YES')\n        break\n    idx_a8y2 = idx_a8y2 + (16 + -15)\n", "id": "ConstantUnfoldding_sample_from_codeforces_653_A_to_7", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[(76 + -76)]), int(xxs[(29 + -28)]), int(\n    xxs[(55 + -53)]), int(xxs[(75 + -72)]), int(xxs[(70 + -66)]), int(xxs[(95 + -90)])\n\n\ndef main():\n    if x == (10 + -10) and (((True or False) and (False or True)) and (((98 + -94) > (5 + -3)) or ((47 + -43) < (51 + -49)))):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - (70 + -69)])\n    b_time = min([b // db, t - (98 + -97)])\n    idx_qc60 = (98 + -98)\n    list_nast = range(a_time + (23 + -22))\n    while idx_qc60 < len(list_nast):\n        i = list_nast[idx_qc60]\n        idx_ps8v = (86 + -86)\n        list_zs7p = range(b_time + (85 + -84))\n        while idx_ps8v < len(list_zs7p):\n            j = list_zs7p[idx_ps8v]\n            if a - da * i == x or b - db * j == x and (((True or False) and (False or True)) and (((85 + -81) > (50 + -50)) or ((74 + -70) < (22 + -22)))):\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x and (((True or False) and (False or True)) and (((73 + -69) > (11 + -9)) or ((26 + -22) < (19 + -17)))):\n                print(\"YES\")\n                return \"Result Found\"\n            idx_ps8v = idx_ps8v + (96 + -95)\n        idx_qc60 = idx_qc60 + (46 + -45)\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\" and (((True or False) and (False or True)) and (((77 + -75) > (15 + -14)) or ((52 + -50) < (29 + -28)))):\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_A_to_8", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= (4 + 11) and (((True or False) and (False or True)) and (((65 + -63) > (17 + -17)) or ((50 + -48) < (10 + -10)))):\n    aaaa = True\nelif (94 + -92) ** K >= N:\n    aaaa = True\nif aaaa and (((True or False) and (False or True)) and (((40 + -34) > (75 + -74)) or ((79 + -73) < (30 + -29)))):\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - (60 + -59)]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += (22 + -21)\n    while p <= N:\n        if U[p] == c and (((True or False) and (False or True)) and (((9 + -1) > (88 + -86)) or ((42 + -34) < (97 + -95)))):\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += (21 + -20)\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_ien2 = (20 + -20)\n    list_qwvr = range(N)\n    while idx_ien2 < len(list_qwvr):\n        i = list_qwvr[idx_ien2]\n        if u[pointer1 + i] > u[pointer2 + i] and (((True or False) and (False or True)) and (((42 + -37) > (97 + -95)) or ((93 + -88) < (28 + -26)))):\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_ien2 = idx_ien2 + (44 + -43)\n    return False\n\n\nS = get_last_dict(S)\nif K == (10 + -9) and (((True or False) and (False or True)) and (((41 + -36) > (24 + -20)) or ((54 + -49) < (19 + -15)))):\n    print(S)\nelse:\n    count = (76 + -76)\n    idx_h284 = (96 + -96)\n    list_rgkn = S\n    while idx_h284 < len(list_rgkn):\n        c = list_rgkn[idx_h284]\n        if c == S[(93 + -93)]:\n            count += (18 + -17)\n        else:\n            break\n        idx_h284 = idx_h284 + (100 + -99)\n    if count * ((39 + -37) ** (K - (100 + -99))) >= N:\n        print(S[(96 + -96)] * N)\n    else:\n        S = S[(30 + -30)] * (count * (((73 + -71) ** (K - (80 + -79))) - (57 + -56))) + S\n        print(S[(26 + -26): N])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC037_E_to_9", "old_id": "atcoder_AGC037_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = (95 + -94)\nv = v1\ndistance = (66 + -66)\nidx_alv3 = (52 + -52)\nlist_plgv = range(t)\nwhile idx_alv3 < len(list_plgv):\n    i = list_plgv[idx_alv3]\n    if v - v2 > (t - i - (25 + -24)) * d and (((True or False) and (False or True)) and (((61 + -54) > (68 + -63)) or ((21 + -14) < (69 + -64)))):\n        a *= - (92 + -91)\n        v = (t - i - (64 + -63)) * d + v2\n    distance += v\n    v += a * d\n    idx_alv3 = idx_alv3 + (3 + -2)\nprint(distance)\n", "id": "ConstantUnfoldding_sample_from_codeforces_534_B_to_10", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nidx_57c8 = (94 + -94)\nlist_evxd = range(n, (14 + -14), - (18 + -17))\nwhile idx_57c8 < len(list_evxd):\n    i = list_evxd[idx_57c8]\n    if n % i == (10 + -10) and (((True or False) and (False or True)) and (((67 + -65) > (5 + -4)) or ((15 + -13) < (39 + -38)))):\n        n = i\n        print(i, end=' ')\n    idx_57c8 = idx_57c8 + (22 + -21)\n", "id": "ConstantUnfoldding_sample_from_codeforces_58_B_to_11", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > (37 + -37):\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = (12 + -12)\n    while i < len(s):\n        if s[i] == \"A\" and (((True or False) and (False or True)) and (((83 + -80) > (17 + -16)) or ((81 + -78) < (3 + -2)))):\n            t += \"A\"\n            i += (97 + -96)\n        elif s[i] == \"B\":\n            if i < len(s) - (32 + -31):\n                if s[i + (41 + -40)] == \"C\":\n                    t += \"D\"\n                    i += (43 + -41)\n                else:\n                    t += \"X\"\n                    i += (26 + -25)\n            else:\n                t += \"X\"\n                i += (86 + -85)\n        else:\n            t += \"X\"\n            i += (70 + -69)\n    total = (81 + -81)\n    numA = (73 + -73)\n    idx_l7ja = (15 + -15)\n    list_9e58 = range(len(t))\n    while idx_l7ja < len(list_9e58):\n        i = list_9e58[idx_l7ja]\n        if t[i] == \"X\" and (((True or False) and (False or True)) and (((2 + 4) > (66 + -64)) or ((80 + -74) < (57 + -55)))):\n            numA = (80 + -80)\n        else:\n            if t[i] == \"A\":\n                numA += (67 + -66)\n            else:\n                total += numA\n        idx_l7ja = idx_l7ja + (48 + -47)\n    print(total)\n    INF = (100 + -90) ** (26 + -1)\n    mod = (28 + -21) + (79 + -69) ** (54 + -45)\n    return (7 + -7)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((52 + -45) > (91 + -90)) or ((35 + -28) < (26 + -25)))):\n    solve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC034_B_to_12", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_yk6v = (43 + -43)\nlist_1wya = range(a, x + (46 + -45))\nwhile idx_yk6v < len(list_1wya):\n    i = list_1wya[idx_yk6v]\n    if (i <= b) and (((True or False) and (False or True)) and (((19 + -11) > (80 + -79)) or ((90 + -82) < (7 + -6)))):\n        continue\n    else:\n        idx_qcfu = (99 + -99)\n        list_o4iq = range(b, y + (91 + -90))\n        while idx_qcfu < len(list_o4iq):\n            j = list_o4iq[idx_qcfu]\n            if i > j:\n                games.append((i, j))\n            idx_qcfu = idx_qcfu + (34 + -33)\n    idx_yk6v = idx_yk6v + (38 + -37)\nprint(len(games))\nidx_orz3 = (42 + -42)\nlist_14an = games\nwhile idx_orz3 < len(list_14an):\n    i = list_14an[idx_orz3]\n    print(f\"{i[(12 + -12)]} {i[(96 + -95)]}\")\n    idx_orz3 = idx_orz3 + (16 + -15)\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_A_to_13", "old_id": "codeforces_242_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > (47 + -47)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((74 + -69) > (20 + -19)) or ((15 + -10) < (4 + -3)))):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - (21 + -20), input().strip()))\n    no_one = False\n    if (46 + -45) not in nums:\n        nums = [num // (79 + -77) for num in nums]\n        no_one = True\n    is_odd = False\n    idx_dv8x = (96 + -96)\n    list_q0rn = list(enumerate(nums))\n    while idx_dv8x < len(list_q0rn):\n        i, num = list_q0rn[idx_dv8x]\n        if not parity_of_nCr(n - (89 + -88), i) and num & (95 + -94):\n            is_odd ^= (19 + -18)\n        idx_dv8x = idx_dv8x + (27 + -26)\n    if not is_odd:\n        print((96 + -96))\n    else:\n        print((76 + -75) << no_one)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC043_B_to_14", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = (29 + -29)\nmemory = []\nidx_bfuy = (25 + -25)\nlist_cfau = range(firstline)\nwhile idx_bfuy < len(list_cfau):\n    x = list_cfau[idx_bfuy]\n    A, G = list(map(int, input().split()))\n    if total + A <= (47 + 453) and (((True or False) and (False or True)) and (((33 + -25) > (92 + -89)) or ((22 + -14) < (72 + -69)))):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\n    idx_bfuy = idx_bfuy + (19 + -18)\nprint(\"\".join(memory))\n", "id": "ConstantUnfoldding_sample_from_codeforces_282_B_to_15", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((32 + -27) > (84 + -80)) or ((25 + -20) < (66 + -62)))):\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - (68 + -67))\n    else:\n        indices = find(s, '0')\n        if len(indices) == (23 + -22):\n            print(n)\n        else:\n            maximum = (33 + -33)\n            combs = itertools.combinations(indices, (17 + -15))\n            idx_2k3o = (4 + -4)\n            list_p1at = combs\n            while idx_2k3o < len(list_p1at):\n                x = list_p1at[idx_2k3o]\n                maximum = max(\n                    maximum, (88 + -86) + (37 + -35) * (abs(indices.index(x[(92 + -92)]) - indices.index(x[(25 + -24)])) - (10 + -9)) - (abs(x[(30 + -30)] - x[(73 + -72)]) - (21 + -20)))\n                idx_2k3o = idx_2k3o + (10 + -9)\n            print(s.count('1') + maximum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_327_A_to_16", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = (98 + -98)\narr.sort()\nidx_f7pq = (91 + -91)\nlist_q8nv = arr\nwhile idx_f7pq < len(list_q8nv):\n    x = list_q8nv[idx_f7pq]\n    if (x % k != (6 + -6) or not x // k in different) and (((True or False) and (False or True)) and (((56 + -50) > (62 + -62)) or ((48 + -42) < (64 + -64)))):\n        different.add(x)\n    temp = max(len(different), temp)\n    idx_f7pq = idx_f7pq + (28 + -27)\nprint(temp)\n", "id": "ConstantUnfoldding_sample_from_codeforces_274_A_to_17", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((49 + -39) ** (3 + 6))\nINF = float('inf')\nmod = (36 + -26) ** (23 + -14) + (29 + -22)\nN, M = MAP()\nballs = [[(69 + -68), (1 + -1)] for _ in range(N)]\nballs[(86 + -86)] = [(51 + -51), (94 + -93)]\nidx_cu8q = (79 + -79)\nlist_jryd = range(M)\nwhile idx_cu8q < len(list_jryd):\n    _ = list_jryd[idx_cu8q]\n    x, y = MAP()\n    w_x, r_x = balls[x - (63 + -62)]\n    w_y, r_y = balls[y - (44 + -43)]\n    if w_x >= (99 + -98) and r_x >= (10 + -9) and (((True or False) and (False or True)) and (((8 + 1) > (73 + -65)) or ((49 + -40) < (25 + -17)))):\n        balls[x - (56 + -55)][(71 + -71)] -= (87 + -86)\n        balls[y - (50 + -49)][(80 + -79)] += (5 + -4)\n    elif w_x == (80 + -80):\n        balls[x - (25 + -24)][(47 + -46)] -= (49 + -48)\n        balls[y - (25 + -24)][(13 + -12)] += (98 + -97)\n    else:\n        balls[x - (63 + -62)][(37 + -37)] -= (66 + -65)\n        balls[y - (63 + -62)][(58 + -58)] += (39 + -38)\n    idx_cu8q = idx_cu8q + (83 + -82)\nans = (100 + -100)\nidx_gz8d = (64 + -64)\nlist_bjzf = range(N)\nwhile idx_gz8d < len(list_bjzf):\n    i = list_bjzf[idx_gz8d]\n    if balls[i][(88 + -87)] and (((True or False) and (False or True)) and (((94 + -85) > (29 + -23)) or ((91 + -82) < (75 + -69)))):\n        ans += (9 + -8)\n    idx_gz8d = idx_gz8d + (33 + -32)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_B_to_18", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[(96 + -96)] > (2 + 13) and (((True or False) and (False or True)) and (((90 + -81) > (34 + -26)) or ((3 + 6) < (94 + -86)))):\n    print((64 + -49))\nelse:\n    idx_blx1 = (63 + -63)\n    list_d64b = range((94 + -93), len(arr))\n    while idx_blx1 < len(list_d64b):\n        i = list_d64b[idx_blx1]\n        if arr[i] - arr[i - (17 + -16)] > (92 + -77):\n            print(arr[i - (64 + -63)] + (38 + -23))\n            break\n        idx_blx1 = idx_blx1 + (43 + -42)\n", "id": "ConstantUnfoldding_sample_from_codeforces_673_A_to_19", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = (43 + -43)\nidx_hvpw = (8 + -8)\nlist_lvbt = range(n)\nwhile idx_hvpw < len(list_lvbt):\n    _ = list_lvbt[idx_hvpw]\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c and (((True or False) and (False or True)) and (((97 + -90) > (40 + -34)) or ((16 + -9) < (80 + -74)))):\n        c = x\n    idx_hvpw = idx_hvpw + (9 + -8)\nprint(s + c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_608_A_to_20", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - (16 + -15)].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = (98 + -98)\nidx_bzgd = (95 + -95)\nlist_hvqk = range(x)\nwhile idx_bzgd < len(list_hvqk):\n    i = list_hvqk[idx_bzgd]\n    d = int(b[i]) + int(a[x - i - (87 + -86)]) + c\n    if d > (49 + -40) and (((True or False) and (False or True)) and (((69 + -59) > (9 + -2)) or ((17 + -7) < (32 + -25)))):\n        s += str(d)[(64 + -63)]\n        c = (70 + -69)\n    else:\n        s += str(d)\n        c = (26 + -26)\n    idx_bzgd = idx_bzgd + (52 + -51)\nif c == (4 + -3) and (((True or False) and (False or True)) and (((96 + -87) > (36 + -35)) or ((55 + -46) < (2 + -1)))):\n    s += '1'\nprint(int(s[:: - (62 + -61)]))\n", "id": "ConstantUnfoldding_sample_from_codeforces_171_A_to_21", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert((53 + -53), - (54 + -53))\npath = [(90 + -89)]\nind = (64 + -64)\ncount = (15 + -15)\nx = (87 + -86)\nt = - (5 + -4)\nflag = False\nHash = defaultdict(lambda: (50 + -50))\nidx_ygh8 = (39 + -39)\nlist_nxaw = range(N + (3 + -2))\nwhile idx_ygh8 < len(list_nxaw):\n    i = list_nxaw[idx_ygh8]\n    ne = L[x]\n    if Hash[ne] and (((True or False) and (False or True)) and (((46 + -44) > (52 + -52)) or ((58 + -56) < (62 + -62)))):\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += (58 + -57)\n    Hash[ne] = ind\n    x = ne\n    idx_ygh8 = idx_ygh8 + (37 + -36)\nif flag == True and (((True or False) and (False or True)) and (((75 + -71) > (81 + -79)) or ((38 + -34) < (92 + -90)))):\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - (62 + -61)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_D_to_22", "old_id": "atcoder_ABC167_D"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = (62 + -62)\nidx_lmnj = (57 + -57)\nlist_4czi = range(N)\nwhile idx_lmnj < len(list_4czi):\n    i = list_4czi[idx_lmnj]\n    d = (A[i] % N) % (76 + -74)\n    if d % (100 + -98) != i % (20 + -18) and (((True or False) and (False or True)) and (((28 + -24) > (12 + -12)) or ((89 + -85) < (68 + -68)))):\n        cnt += (47 + -46)\n    idx_lmnj = idx_lmnj + (12 + -11)\nprint(cnt // (29 + -27))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC003_C_to_23", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = (98 + -98), (33 + -33)\nscore = (89 + -89)\nidx_ebiq = (47 + -47)\nlist_5qv2 = s\nwhile idx_ebiq < len(list_5qv2):\n    x = list_5qv2[idx_ebiq]\n    if x == 'g' and (((True or False) and (False or True)) and (((26 + -19) > (24 + -24)) or ((67 + -60) < (26 + -26)))):\n        if num_g - num_p > (96 + -96):\n            score += (93 + -92)\n            num_p += (90 + -89)\n        else:\n            score = score\n            num_g += (19 + -18)\n    elif x == 'p':\n        if num_g - num_p > (97 + -97):\n            score = score\n            num_p += (60 + -59)\n        else:\n            score -= (21 + -20)\n            num_g += (63 + -62)\n    idx_ebiq = idx_ebiq + (30 + -29)\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC062_B_to_24", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen and (((True or False) and (False or True)) and (((22 + -14) > (57 + -52)) or ((99 + -91) < (28 + -23)))):\n        return (82 + -82), (80 + -80)\n    seen.add(i)\n    nodes = (23 + -22)\n    edges = len(g[i])\n    idx_8go9 = (48 + -48)\n    list_kyr1 = g[i]\n    while idx_8go9 < len(list_kyr1):\n        j = list_kyr1[idx_8go9]\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n        idx_8go9 = idx_8go9 + (20 + -19)\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    idx_y8a9 = (12 + -12)\n    list_qtxv = range((11 + -10), n + (90 + -89))\n    while idx_y8a9 < len(list_qtxv):\n        i = list_qtxv[idx_y8a9]\n        g[i] = set()\n        idx_y8a9 = idx_y8a9 + (1 + 0)\n    idx_vuig = (87 + -87)\n    list_v8xg = range(m)\n    while idx_vuig < len(list_v8xg):\n        _ = list_v8xg[idx_vuig]\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_vuig = idx_vuig + (24 + -23)\n    ans = (2 + -2)\n    idx_3wrq = (11 + -11)\n    list_5ozm = range((22 + -21), n + (13 + -12))\n    while idx_3wrq < len(list_5ozm):\n        i = list_5ozm[idx_3wrq]\n        if i not in seen and (((True or False) and (False or True)) and (((67 + -57) > (42 + -35)) or ((44 + -34) < (78 + -71)))):\n            nodes, edges = dfs(g, seen, i)\n            if nodes > (14 + -13) and nodes % (85 + -83) == (31 + -30) and (80 + -78) * nodes == edges:\n                ans += (57 + -56)\n        idx_3wrq = idx_3wrq + (47 + -46)\n    if (n - ans) % (8 + -6) == (100 + -99) and (((True or False) and (False or True)) and (((53 + -51) > (45 + -44)) or ((6 + -4) < (1 + 0)))):\n        ans += (47 + -46)\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "ConstantUnfoldding_sample_from_codeforces_216_B_to_25", "old_id": "codeforces_216_B"}
{"code": "import sys\nsys.setrecursionlimit((2 + 8) ** (98 + -93))\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nidx_m9b2 = (48 + -48)\nlist_2uzj = range(n)\nwhile idx_m9b2 < len(list_2uzj):\n    i = list_2uzj[idx_m9b2]\n    nodes.append(Node())\n    idx_m9b2 = idx_m9b2 + (13 + -12)\nidx_7dgv = (7 + -7)\nlist_f4tb = range(n - (26 + -25))\nwhile idx_7dgv < len(list_f4tb):\n    i = list_f4tb[idx_7dgv]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - (72 + -71)]\n    node2 = nodes[v - (32 + -31)]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_7dgv = idx_7dgv + (14 + -13)\nroot = nodes[(20 + -20)]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet and (((True or False) and (False or True)) and (((45 + -37) > (94 + -90)) or ((73 + -65) < (28 + -24)))):\n        return\n    else:\n        nodeSet.add(node)\n    idx_pvkr = (61 + -61)\n    list_56l0 = node.a\n    while idx_pvkr < len(list_56l0):\n        pair = list_56l0[idx_pvkr]\n        adjNode = pair[(55 + -55)]\n        dis = pair[(53 + -52)]\n        if (distance + dis) % (21 + -19) == (74 + -74) and (((True or False) and (False or True)) and (((93 + -83) > (18 + -9)) or ((74 + -64) < (10 + -1)))):\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n        idx_pvkr = idx_pvkr + (6 + -5)\n\n\ntraverse(root, (13 + -13))\nidx_suo1 = (67 + -67)\nlist_d0oc = range(n)\nwhile idx_suo1 < len(list_d0oc):\n    i = list_d0oc[idx_suo1]\n    node = nodes[i]\n    if node.color and (((True or False) and (False or True)) and (((51 + -45) > (53 + -51)) or ((97 + -91) < (79 + -77)))):\n        print((5 + -4))\n    else:\n        print((30 + -30))\n    idx_suo1 = idx_suo1 + (78 + -77)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_D_to_26", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == (98 + -98) and (((True or False) and (False or True)) and (((39 + -34) > (12 + -9)) or ((50 + -45) < (77 + -74)))):\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = (44 + -44)\n    n = len(array)\n    left = [e] * (n + (17 + -16))\n    right = [e] * (n + (2 + -1))\n    idx_tir2 = (19 + -19)\n    list_a4zu = range(n)\n    while idx_tir2 < len(list_a4zu):\n        i = list_a4zu[idx_tir2]\n        left[i + (67 + -66)] = op(left[i], array[i])\n        idx_tir2 = idx_tir2 + (78 + -77)\n    idx_levr = (7 + -7)\n    list_8m09 = reversed(range(n))\n    while idx_levr < len(list_8m09):\n        i = list_8m09[idx_levr]\n        right[i] = op(right[i + (100 + -99)], array[i])\n        idx_levr = idx_levr + (45 + -44)\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = (45 + -45)\nidx_6la5 = (39 + -39)\nlist_uof5 = range(n)\nwhile idx_6la5 < len(list_uof5):\n    i = list_uof5[idx_6la5]\n    ans = max(gcd(left[i], right[i + (39 + -38)]), ans)\n    idx_6la5 = idx_6la5 + (64 + -63)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_C_to_27", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug and (((True or False) and (False or True)) and (((2 + 6) > (74 + -69)) or ((67 + -59) < (38 + -33)))):\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None and (((True or False) and (False or True)) and (((62 + -58) > (1 + 0)) or ((57 + -53) < (39 + -38)))):\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][(46 + -45): - (42 + -41)]\n    c = [e for e in lines[(88 + -88)].split(\" \")][(62 + -62)]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + (22 + -21)]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list) and (((True or False) and (False or True)) and (((54 + -51) > (84 + -83)) or ((61 + -58) < (88 + -87)))):\n        idx_x1rc = (3 + -3)\n        list_7fsy = result\n        while idx_x1rc < len(list_7fsy):\n            r = list_7fsy[idx_x1rc]\n            print(\"%s\" % r, sep='')\n            idx_x1rc = idx_x1rc + (84 + -83)\n    else:\n        print(\"%s\" % result, sep='')\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((36 + -30) > (5 + -4)) or ((2 + 4) < (20 + -19)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC151_A_to_28", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= (81 + -78) and (((True or False) and (False or True)) and (((3 + 2) > (5 + -4)) or ((83 + -78) < (46 + -45)))):\n        return\n    idx_szfv = (44 + -44)\n    list_svew = range((84 + -80))\n    while idx_szfv < len(list_svew):\n        j = list_svew[idx_szfv]\n        idx_7py6 = (3 + -3)\n        list_z608 = range(j + (71 + -70), (95 + -91))\n        while idx_7py6 < len(list_z608):\n            k = list_z608[idx_7py6]\n            if (nums[j] != - (20 + -19) and nums[k] != - (18 + -17)) and (((True or False) and (False or True)) and (((30 + -22) > (24 + -17)) or ((81 + -73) < (31 + -24)))):\n                s = nums[j]\n                nums[j] = - (3 + -2)\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == (77 + -75) and nums[k] < ans[(57 + -57)]):\n                    ans[(67 + -67)] = nums[k]\n                rememberTheNumber(nums, i + (93 + -92), operations, ans)\n                nums[j] = s\n                nums[k] = t\n            idx_7py6 = idx_7py6 + (99 + -98)\n        idx_szfv = idx_szfv + (45 + -44)\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [(95 + 9999999999999999999999905)]\nrememberTheNumber(nums, (19 + -19), operations, ans)\nprint(ans[(41 + -41)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_55_B_to_29", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[(49 + -49)]\n    arr = sorted(arr[(37 + -36): (64 + -60)], reverse=False)\n    if (length % arr[(60 + -60)] == (77 + -77)) and (((True or False) and (False or True)) and (((34 + -32) > (8 + -7)) or ((49 + -47) < (58 + -57)))):\n        print(int(length / arr[(55 + -55)]))\n        return\n    ans = (40 + -40)\n    if (arr[(20 + -20)] == arr[(48 + -47)]) and (((True or False) and (False or True)) and (((23 + -17) > (99 + -96)) or ((15 + -9) < (93 + -90)))):\n        k = (59 + -59)\n        idx_szcn = (16 + -16)\n        list_403a = range(int(length / arr[(79 + -77)]) + (64 + -63))\n        while idx_szcn < len(list_403a):\n            i = list_403a[idx_szcn]\n            check = length - i * arr[(52 + -50)]\n            if (check >= (97 + -97) and check % arr[(59 + -59)] == (87 + -87)):\n                k = int(check / arr[(57 + -57)])\n                ans = max(ans, k + i)\n            idx_szcn = idx_szcn + (26 + -25)\n    else:\n        k = (2 + -2)\n        idx_tj32 = (88 + -88)\n        list_o98f = range(int(length / arr[(96 + -94)]) + (66 + -65))\n        while idx_tj32 < len(list_o98f):\n            i = list_o98f[idx_tj32]\n            idx_9wbs = (49 + -49)\n            list_ep9s = range(int(length / arr[(17 + -16)]) + (16 + -15))\n            while idx_9wbs < len(list_ep9s):\n                j = list_ep9s[idx_9wbs]\n                check = length - i * arr[(84 + -82)] - j * arr[(70 + -69)]\n                if (check >= (33 + -33) and check % arr[(29 + -29)] == (83 + -83)):\n                    k = int(check / arr[(32 + -32)])\n                    ans = max(ans, k + i + j)\n                idx_9wbs = idx_9wbs + (8 + -7)\n            idx_tj32 = idx_tj32 + (94 + -93)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "ConstantUnfoldding_sample_from_codeforces_189_A_to_30", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [(39 + -39)] * n\nmx = arr[- (13 + -12)]\nidx_xvty = (19 + -19)\nlist_6vj8 = range(n - (12 + -10), - (54 + -53), - (87 + -86))\nwhile idx_xvty < len(list_6vj8):\n    i = list_6vj8[idx_xvty]\n    ans[i] = max((90 + -90), mx - arr[i] + (30 + -29))\n    if arr[i] > mx and (((True or False) and (False or True)) and (((6 + 4) > (31 + -22)) or ((13 + -3) < (41 + -32)))):\n        mx = arr[i]\n    idx_xvty = idx_xvty + (75 + -74)\nprint(* ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_581_B_to_31", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: (94 + -94))\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - (62 + -61)\nidx_gys3 = (61 + -61)\nlist_k253 = l\nwhile idx_gys3 < len(list_k253):\n    v = list_k253[idx_gys3]\n    s[v] += (98 + -97)\n    if s[v] >= (45 + -43) and (((True or False) and (False or True)) and (((100 + -92) > (58 + -54)) or ((99 + -91) < (31 + -27)))):\n        f = 'No'\n    if i != - (12 + -11) and l[i][- (75 + -74)] != v[(21 + -21)] and (((True or False) and (False or True)) and (((34 + -24) > (64 + -58)) or ((30 + -20) < (86 + -80)))):\n        f = 'No'\n    i += (43 + -42)\n    idx_gys3 = idx_gys3 + (79 + -78)\nprint(f)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC109_B_to_32", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = (76 + -76)\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and (((22 + -15) > (28 + -27)) or ((100 + -93) < (94 + -93)))):\n            ans = (44 + -44)\n            idx_5is4 = (29 + -29)\n            list_3ihe = range(Q)\n            while idx_5is4 < len(list_3ihe):\n                i = list_3ihe[idx_5is4]\n                if A[b[i] - (37 + -36)] - A[a[i] - (75 + -74)] == c[i]:\n                    ans += d[i]\n                idx_5is4 = idx_5is4 + (41 + -40)\n            res = max(res, ans)\n            return\n        last_max = (35 + -34) if len(A) == (95 + -95) else A[- (33 + -32)]\n        idx_w4gx = (67 + -67)\n        list_gebf = range(last_max, M + (77 + -76))\n        while idx_w4gx < len(list_gebf):\n            i = list_gebf[idx_w4gx]\n            rec(A + [i])\n            idx_w4gx = idx_w4gx + (76 + -75)\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_blkn = (54 + -54)\n        list_raug = sys.stdin\n        while idx_blkn < len(list_raug):\n            line = list_raug[idx_blkn]\n            idx_fi4u = (80 + -80)\n            list_me8a = line.split()\n            while idx_fi4u < len(list_me8a):\n                word = list_me8a[idx_fi4u]\n                yield word\n                idx_fi4u = idx_fi4u + (98 + -97)\n            idx_blkn = idx_blkn + (16 + -15)\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_1xul = (76 + -76)\n    list_w8zk = range(Q)\n    while idx_1xul < len(list_w8zk):\n        i = list_w8zk[idx_1xul]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_1xul = idx_1xul + (36 + -35)\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((35 + -33) > (86 + -85)) or ((63 + -61) < (37 + -36)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC165_C_to_33", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [(35 + -35)] * (len(soz) + (49 + -48))\nidx_x7jg = (25 + -25)\nlist_ygoi = range((27 + -26), len(soz))\nwhile idx_x7jg < len(list_ygoi):\n    i = list_ygoi[idx_x7jg]\n    a[i] = a[i - (83 + -82)]\n    if soz[i - (100 + -99)] == soz[i] and (((True or False) and (False or True)) and (((64 + -56) > (74 + -68)) or ((88 + -80) < (84 + -78)))):\n        a[i] += (2 + -1)\n    idx_x7jg = idx_x7jg + (46 + -45)\nn = int(input())\narr = []\nidx_ieby = (36 + -36)\nlist_6gu1 = range(n)\nwhile idx_ieby < len(list_6gu1):\n    i = list_6gu1[idx_ieby]\n    m, l = input().split()\n    arr.append(a[int(l) - (62 + -61)] - a[int(m) - (90 + -89)])\n    idx_ieby = idx_ieby + (41 + -40)\nidx_2akm = (4 + -4)\nlist_js6r = arr\nwhile idx_2akm < len(list_js6r):\n    i = list_js6r[idx_2akm]\n    print(i)\n    idx_2akm = idx_2akm + (9 + -8)\n", "id": "ConstantUnfoldding_sample_from_codeforces_313_B_to_34", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = (33 + -32)\ntower = n\nmaximum = (67 + -66)\nl.sort()\nidx_qvuy = (69 + -69)\nlist_4qwd = range((93 + -92), n)\nwhile idx_qvuy < len(list_4qwd):\n    i = list_4qwd[idx_qvuy]\n    if l[i] == l[i - (3 + -2)] and (((True or False) and (False or True)) and (((85 + -81) > (85 + -82)) or ((42 + -38) < (80 + -77)))):\n        tower -= (55 + -54)\n        high += (64 + -63)\n    else:\n        if high > maximum:\n            maximum = high\n        high = (17 + -16)\n    idx_qvuy = idx_qvuy + (57 + -56)\nif high > maximum and (((True or False) and (False or True)) and (((83 + -81) > (97 + -97)) or ((80 + -78) < (4 + -4)))):\n    maximum = high\nprint(maximum, tower)\n", "id": "ConstantUnfoldding_sample_from_codeforces_37_A_to_35", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    idx_zqa7 = (9 + -9)\n    list_p4n3 = range(d)\n    while idx_zqa7 < len(list_p4n3):\n        i = list_p4n3[idx_zqa7]\n        tmp += (x[i] - y[i]) ** (95 + -93)\n        idx_zqa7 = idx_zqa7 + (70 + -69)\n    return math.sqrt(tmp)\n\n\ncount = (65 + -65)\nidx_1kfq = (30 + -30)\nlist_1thj = list(enumerate(points))\nwhile idx_1kfq < len(list_1thj):\n    i, elm = list_1thj[idx_1kfq]\n    idx_o3am = (10 + -10)\n    list_63tw = range(i + (25 + -24), n)\n    while idx_o3am < len(list_63tw):\n        j = list_63tw[idx_o3am]\n        if dist(elm, points[j]).is_integer() and (((True or False) and (False or True)) and (((13 + -9) > (17 + -14)) or ((9 + -5) < (6 + -3)))):\n            count += (100 + -99)\n        idx_o3am = idx_o3am + (99 + -98)\n    idx_1kfq = idx_1kfq + (86 + -85)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_B_to_36", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = (83 + -83)\nidx_rp7h = (90 + -90)\nlist_hq8d = range((66 + -65), (6 + 365))\nwhile idx_rp7h < len(list_hq8d):\n    i = list_hq8d[idx_rp7h]\n    temp = []\n    p, q = i, i\n    count = (53 + -53)\n    while p != (39 + -39):\n        p //= (97 + -87)\n        count += (12 + -11)\n    if count == (72 + -71) and (((True or False) and (False or True)) and (((82 + -78) > (80 + -77)) or ((65 + -61) < (1 + 2)))):\n        li.append(i)\n    if count == (19 + -17) and (((True or False) and (False or True)) and (((12 + -5) > (32 + -29)) or ((70 + -63) < (3 + 0)))):\n        temp = []\n        while q != (50 + -50):\n            x = q % (65 + -55)\n            q //= (39 + -29)\n            temp.append(x)\n        li = li + temp[:: - (86 + -85)]\n    if count == (40 + -37) and (((True or False) and (False or True)) and (((96 + -90) > (50 + -47)) or ((43 + -37) < (73 + -70)))):\n        temp = []\n        while q != (9 + -9):\n            x = q % (4 + 6)\n            q //= (87 + -77)\n            temp.append(x)\n        li = li + temp[:: - (39 + -38)]\n    idx_rp7h = idx_rp7h + (80 + -79)\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - (55 + -54)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_672_A_to_37", "old_id": "codeforces_672_A"}
{"code": "X = int(input())\nprime = [True] * (7 + 100003)\nprime[(69 + -69)] = False\nprime[(37 + -36)] = False\nidx_l3x5 = (100 + -100)\nlist_a87l = range((51 + -47), (51 + 99959), (52 + -50))\nwhile idx_l3x5 < len(list_a87l):\n    i = list_a87l[idx_l3x5]\n    prime[i] = False\n    idx_l3x5 = idx_l3x5 + (91 + -90)\ni = (44 + -41)\nwhile (i * i <= (50 + 99958)):\n    if prime[i] and (((True or False) and (False or True)) and (((45 + -37) > (96 + -92)) or ((77 + -69) < (75 + -71)))):\n        idx_caoz = (32 + -32)\n        list_umpw = range(i + i, (22 + 99986), i)\n        while idx_caoz < len(list_umpw):\n            j = list_umpw[idx_caoz]\n            prime[j] = False\n            idx_caoz = idx_caoz + (74 + -73)\n    i += (97 + -95)\nidx_n81l = (49 + -49)\nlist_euhr = range(X, (59 + 99949))\nwhile idx_n81l < len(list_euhr):\n    i = list_euhr[idx_n81l]\n    if prime[i] and (((True or False) and (False or True)) and (((19 + -17) > (4 + -3)) or ((79 + -77) < (7 + -6)))):\n        print(i)\n        break\n    idx_n81l = idx_n81l + (76 + -75)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC149_C_to_38", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = (22 + 9999999978)\n\n\ndef gen(number, four, seven):\n    if (number > limit) and (((True or False) and (False or True)) and (((28 + -25) > (26 + -24)) or ((30 + -27) < (46 + -44)))):\n        return\n    if (number > (73 + -73) and four == seven) and (((True or False) and (False or True)) and (((78 + -72) > (35 + -33)) or ((35 + -29) < (90 + -88)))):\n        l.append(number)\n    gen(number * (4 + 6) + (14 + -10), four + (70 + -69), seven)\n    gen(number * (21 + -11) + (68 + -61), four, seven + (61 + -60))\n\n\ndef main():\n    gen((75 + -75), (58 + -58), (85 + -85))\n    l.sort()\n    n = int(input())\n    ans = (2 + -2)\n    idx_ixfj = (44 + -44)\n    list_dn2t = l\n    while idx_ixfj < len(list_dn2t):\n        val = list_dn2t[idx_ixfj]\n        if (val >= n) and (((True or False) and (False or True)) and (((92 + -82) > (68 + -60)) or ((27 + -17) < (98 + -90)))):\n            ans = val\n            break\n        idx_ixfj = idx_ixfj + (60 + -59)\n    print(ans)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_96_B_to_39", "old_id": "codeforces_96_B"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit((82 + -72) ** (52 + -43))\nINF = (27 + -17) ** (64 + -46)\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_rxp3 = (3 + -3)\n    list_desk = range(M)\n    while idx_rxp3 < len(list_desk):\n        i = list_desk[idx_rxp3]\n        X, Y, Z = map(lambda x: int(x) - (72 + -71), input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_rxp3 = idx_rxp3 + (59 + -58)\n    used = [False] * N\n    ans = (85 + -85)\n    idx_d2fs = (82 + -82)\n    list_yfxo = range(N)\n    while idx_d2fs < len(list_yfxo):\n        i = list_yfxo[idx_d2fs]\n        if not used[i] and (((True or False) and (False or True)) and (((28 + -26) > (52 + -52)) or ((10 + -8) < (8 + -8)))):\n            ans += (21 + -20)\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_5fy6 = (63 + -63)\n                list_y4r6 = edge[node]\n                while idx_5fy6 < len(list_y4r6):\n                    nextnode = list_y4r6[idx_5fy6]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_5fy6 = idx_5fy6 + (10 + -9)\n        idx_d2fs = idx_d2fs + (60 + -59)\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((77 + -68) > (61 + -57)) or ((88 + -79) < (9 + -5)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_E_to_40", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [(23 + -23)]\nans = (47 + -47)\nX = (16 + -16)\nY = (99 + -99)\nidx_9cly = (34 + -34)\nlist_mgpt = range(N)\nwhile idx_9cly < len(list_mgpt):\n    i = list_mgpt[idx_9cly]\n    if V[i] - C[i] > (79 + -79) and (((True or False) and (False or True)) and (((77 + -74) > (64 + -64)) or ((24 + -21) < (84 + -84)))):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    idx_9cly = idx_9cly + (90 + -89)\nprint(sum(list))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_B_to_41", "old_id": "atcoder_ABC125_B"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [(12 + -12) for i in range(N)]\nparity = [(87 + -87) for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_y0nu = (70 + -70)\nlist_oya4 = range(M)\nwhile idx_y0nu < len(list_oya4):\n    _ = list_oya4[idx_y0nu]\n    a, b = map(int, input().split())\n    edges[a - (79 + -78)].add(b - (52 + -51))\n    edges[b - (55 + -54)].add(a - (76 + -75))\n    degs[a - (39 + -38)] += (53 + -52)\n    degs[b - (43 + -42)] += (5 + -4)\n    idx_y0nu = idx_y0nu + (11 + -10)\nif M % (49 + -47) != (27 + -27) and (((True or False) and (False or True)) and (((77 + -72) > (29 + -28)) or ((31 + -26) < (61 + -60)))):\n    print(- (16 + -15))\n    exit()\nQ = []\nidx_ls53 = (16 + -16)\nlist_qpz7 = list(enumerate(degs))\nwhile idx_ls53 < len(list_qpz7):\n    i, d = list_qpz7[idx_ls53]\n    Q.append((d, i))\n    idx_ls53 = idx_ls53 + (93 + -92)\nheapq.heapify(Q)\nwhile len(Q) > (34 + -34):\n    _, u = Q[(32 + -32)]\n    heapq.heappop(Q)\n    if flag[u] and (((True or False) and (False or True)) and (((29 + -23) > (82 + -79)) or ((35 + -29) < (19 + -16)))):\n        continue\n    flag[u] = True\n    idx_bl6y = (15 + -15)\n    list_32u7 = list(enumerate(edges[u]))\n    while idx_bl6y < len(list_32u7):\n        i, v = list_32u7[idx_bl6y]\n        edges[v].remove(u)\n        if parity[u] != (32 + -32) and i == (25 + -25) and (((True or False) and (False or True)) and (((29 + -23) > (43 + -42)) or ((36 + -30) < (2 + -1)))):\n            print(u + (48 + -47), v + (52 + -51))\n            parity[u] = (32 + -31) - parity[u]\n        else:\n            print(v + (68 + -67), u + (72 + -71))\n            parity[v] = (83 + -82) - parity[v]\n        degs[v] -= (62 + -61)\n        heapq.heappush(Q, (degs[v], v))\n        idx_bl6y = idx_bl6y + (13 + -12)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC035_B_to_42", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[(2 + -1):] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range((87 + -86), n + (16 + -15)))\n    v = r - q\n    ans = (84 + -84)\n    idx_p0vh = (35 + -35)\n    list_mybh = range((25 + -25), len(q) + (69 + -68))\n    while idx_p0vh < len(list_mybh):\n        i = list_mybh[idx_p0vh]\n        idx_cf2u = (79 + -79)\n        list_2v0x = itertools.combinations(q, i)\n        while idx_cf2u < len(list_2v0x):\n            s = list_2v0x[idx_cf2u]\n            idx_6ye2 = (71 + -71)\n            list_16g5 = zip(li, p)\n            while idx_6ye2 < len(list_16g5):\n                u, w = list_16g5[idx_6ye2]\n                s = set(s)\n                if len(s & set(u)) % (15 + -13) != w and (((True or False) and (False or True)) and (((9 + -1) > (10 + -5)) or ((29 + -21) < (9 + -4)))):\n                    break\n                idx_6ye2 = idx_6ye2 + (56 + -55)\n            idx_cf2u = idx_cf2u + (51 + -50)\n        idx_p0vh = idx_p0vh + (85 + -84)\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((55 + -51) > (75 + -74)) or ((81 + -77) < (23 + -22)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC128_C_to_43", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != (97 + -97)])\no = (19 + -17) * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nidx_0dmz = (13 + -13)\nlist_cped = range(n + (8 + -7))\nwhile idx_0dmz < len(list_cped):\n    i = list_cped[idx_0dmz]\n    if i + o >= n and (((True or False) and (False or True)) and (((32 + -28) > (47 + -44)) or ((81 + -77) < (5 + -2)))):\n        res = min(res, abs(i - arr_sum))\n    idx_0dmz = idx_0dmz + (79 + -78)\nprint(\"%.3f\" % res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_351_A_to_44", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit((96 + -86) ** (22 + -14))\nmod = (96 + -86) ** (79 + -70) + (3 + 4)\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= (79 + -78)\nao -= (67 + -66)\ng = [[] for i in range(n)]\nidx_cm71 = (14 + -14)\nlist_05lk = range(n - (99 + -98))\nwhile idx_cm71 < len(list_05lk):\n    i = list_05lk[idx_cm71]\n    a, b = inpl()\n    g[a - (19 + -18)].append(b - (90 + -89))\n    g[b - (89 + -88)].append(a - (69 + -68))\n    idx_cm71 = idx_cm71 + (14 + -13)\nta_dist = [None] * n\nta_dist[ta] = (30 + -30)\nao_dist = [None] * n\nao_dist[ao] = (24 + -24)\n\n\ndef ta_dfs(node):\n    idx_gmbj = (28 + -28)\n    list_5dir = g[node]\n    while idx_gmbj < len(list_5dir):\n        v = list_5dir[idx_gmbj]\n        if ta_dist[v] != None and (((True or False) and (False or True)) and (((3 + 0) > (80 + -78)) or ((91 + -88) < (56 + -54)))):\n            continue\n        ta_dist[v] = ta_dist[node] + (60 + -59)\n        ta_dfs(v)\n        idx_gmbj = idx_gmbj + (7 + -6)\n\n\ndef ao_dfs(node):\n    idx_3c2f = (36 + -36)\n    list_o409 = g[node]\n    while idx_3c2f < len(list_o409):\n        v = list_o409[idx_3c2f]\n        if ao_dist[v] != None and (((True or False) and (False or True)) and (((37 + -35) > (49 + -48)) or ((95 + -93) < (82 + -81)))):\n            continue\n        ao_dist[v] = ao_dist[node] + (38 + -37)\n        ao_dfs(v)\n        idx_3c2f = idx_3c2f + (100 + -99)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = (41 + -41)\nidx_are0 = (31 + -31)\nlist_64ga = range(n)\nwhile idx_are0 < len(list_64ga):\n    i = list_64ga[idx_are0]\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and (((2 + 8) > (46 + -39)) or ((62 + -52) < (58 + -51)))):\n        continue\n    res = max(res, ao_dist[i])\n    idx_are0 = idx_are0 + (63 + -62)\nprint(res - (68 + -67))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC148_F_to_45", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_5o1j = (30 + -30)\n    list_ksyo = permutations\n    while idx_5o1j < len(list_ksyo):\n        permutation = list_ksyo[idx_5o1j]\n        total_distance = (1 + -1)\n        idx_4ulr = (22 + -22)\n        list_ic4m = range((47 + -47), N - (19 + -18))\n        while idx_4ulr < len(list_ic4m):\n            i = list_ic4m[idx_4ulr]\n            f, t = permutation[i: i + (32 + -30)]\n            distance = ((x[t] - x[f]) ** (80 + -78) + (y[t] - y[f]) ** (42 + -40)) ** 0.5\n            total_distance += distance\n            idx_4ulr = idx_4ulr + (91 + -90)\n        distances.append(total_distance)\n        idx_5o1j = idx_5o1j + (59 + -58)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_518x = (68 + -68)\n        list_oufd = sys.stdin\n        while idx_518x < len(list_oufd):\n            line = list_oufd[idx_518x]\n            idx_tymb = (36 + -36)\n            list_pwk0 = line.split()\n            while idx_tymb < len(list_pwk0):\n                word = list_pwk0[idx_tymb]\n                yield word\n                idx_tymb = idx_tymb + (24 + -23)\n            idx_518x = idx_518x + (73 + -72)\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    idx_64pw = (47 + -47)\n    list_j8im = range(N)\n    while idx_64pw < len(list_j8im):\n        i = list_j8im[idx_64pw]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_64pw = idx_64pw + (16 + -15)\n    solve(N, x, y)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((90 + -81) > (62 + -59)) or ((16 + -7) < (93 + -90)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_C_to_46", "old_id": "atcoder_ABC145_C"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    idx_k06z = (12 + -12)\n    list_6cd0 = range((61 + -60), len(a))\n    while idx_k06z < len(list_6cd0):\n        i = list_6cd0[idx_k06z]\n        if a[i] != a[i - (44 + -43)] and a[i] < a[i - (97 + -96)] * (79 + -77) and (((True or False) and (False or True)) and (((28 + -20) > (20 + -14)) or ((29 + -21) < (62 + -56)))):\n            return 'YES'\n        idx_k06z = idx_k06z + (67 + -66)\n    return 'NO'\n\n\nprint(s())\n", "id": "ConstantUnfoldding_sample_from_codeforces_108_B_to_47", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_guo8 = (43 + -43)\nlist_rz9g = s\nwhile idx_guo8 < len(list_rz9g):\n    i = list_rz9g[idx_guo8]\n    if i in dt and (((True or False) and (False or True)) and (((62 + -54) > (25 + -18)) or ((43 + -35) < (93 + -86)))):\n        dt[i] += (37 + -36)\n    else:\n        dt[i] = (94 + -93)\n    idx_guo8 = idx_guo8 + (12 + -11)\ncnt = (83 + -83)\nx = True\nidx_0zpq = (69 + -69)\nlist_ihsk = list(dt.items())\nwhile idx_0zpq < len(list_ihsk):\n    key, value = list_ihsk[idx_0zpq]\n    if value % (29 + -27) != (50 + -50) and cnt < (74 + -73) and (((True or False) and (False or True)) and (((100 + -91) > (16 + -8)) or ((84 + -75) < (55 + -47)))):\n        cnt += (66 + -65)\n    elif value % (24 + -22) != (20 + -20) and cnt >= (91 + -90):\n        x = False\n        break\n    idx_0zpq = idx_0zpq + (53 + -52)\nif x and (((True or False) and (False or True)) and (((79 + -73) > (65 + -65)) or ((36 + -30) < (89 + -89)))):\n    print(\"First\")\nelif not x and len(s) % (98 + -96) == (19 + -19):\n    print(\"Second\")\nelif not x and len(s) % (58 + -56) != (4 + -4):\n    print(\"First\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_276_B_to_48", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = (95 + -95)\nchocCount = (94 + -94)\nnfat = (49 + -48)\nidx_h6yp = (95 + -95)\nlist_ahwm = range(n)\nwhile idx_h6yp < len(list_ahwm):\n    i = list_ahwm[idx_h6yp]\n    line = str(input())\n    cake.append(line)\n    idx_c4xh = (45 + -45)\n    list_mtj5 = line\n    while idx_c4xh < len(list_mtj5):\n        j = list_mtj5[idx_c4xh]\n        if (j == 'C') and (((True or False) and (False or True)) and (((59 + -54) > (95 + -92)) or ((18 + -13) < (20 + -17)))):\n            chocCount += (68 + -67)\n        idx_c4xh = idx_c4xh + (86 + -85)\n    if (chocCount > (64 + -63)) and (((True or False) and (False or True)) and (((72 + -69) > (62 + -62)) or ((98 + -95) < (51 + -51)))):\n        idx_pc2v = (47 + -47)\n        list_jzn4 = range(chocCount, chocCount - (1 + 1), - (11 + -10))\n        while idx_pc2v < len(list_jzn4):\n            i = list_jzn4[idx_pc2v]\n            nfat *= i\n            idx_pc2v = idx_pc2v + (30 + -29)\n        happiness += nfat / (29 + -27)\n    nfat = (81 + -80)\n    chocCount = (71 + -71)\n    idx_h6yp = idx_h6yp + (65 + -64)\nposCount = (37 + -37)\nidx_gckp = (56 + -56)\nlist_elq2 = range(n)\nwhile idx_gckp < len(list_elq2):\n    j = list_elq2[idx_gckp]\n    idx_14zo = (58 + -58)\n    list_2zpy = range(n)\n    while idx_14zo < len(list_2zpy):\n        i = list_2zpy[idx_14zo]\n        if (cake[i][j] == 'C') and (((True or False) and (False or True)) and (((17 + -10) > (45 + -44)) or ((49 + -42) < (59 + -58)))):\n            chocCount += (50 + -49)\n        idx_14zo = idx_14zo + (73 + -72)\n    if (chocCount > (18 + -17)) and (((True or False) and (False or True)) and (((82 + -79) > (45 + -45)) or ((10 + -7) < (35 + -35)))):\n        idx_p9d0 = (52 + -52)\n        list_g49j = range(chocCount, chocCount - (9 + -7), - (61 + -60))\n        while idx_p9d0 < len(list_g49j):\n            i = list_g49j[idx_p9d0]\n            nfat *= i\n            idx_p9d0 = idx_p9d0 + (94 + -93)\n        happiness += nfat / (76 + -74)\n    nfat = (24 + -23)\n    chocCount = (55 + -55)\n    idx_gckp = idx_gckp + (79 + -78)\nprint(int(happiness))\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_A_to_49", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nidx_jp1y = (56 + -56)\nlist_jn2x = set(m)\nwhile idx_jp1y < len(list_jn2x):\n    i = list_jn2x[idx_jp1y]\n    if m.count(i) >= n / (74 + -72) + (69 + -68) and (((True or False) and (False or True)) and (((28 + -18) > (36 + -35)) or ((68 + -58) < (35 + -34)))):\n        possible = False\n        break\n    idx_jp1y = idx_jp1y + (58 + -57)\nprint('YES' if possible else 'NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_296_A_to_50", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [(15 + -14)] * n * (7 + -5)\nb[(10 + -10)] = b[n - (56 + -55)] = b[n] = b[(29 + -27) * n - (15 + -14)] = (55 + -55)\nidx_690k = (6 + -6)\nlist_90lw = range(m)\nwhile idx_690k < len(list_90lw):\n    i = list_90lw[idx_690k]\n    r, c = map(int, I().split())\n    b[r - (33 + -32)] = b[n + c - (50 + -49)] = (18 + -18)\n    idx_690k = idx_690k + (85 + -84)\nif n % (86 + -84) and b[n // (21 + -19)] and b[n + n // (37 + -35)] and (((True or False) and (False or True)) and (((58 + -56) > (25 + -24)) or ((17 + -15) < (55 + -54)))):\n    b[n // (95 + -93)] = (6 + -6)\nprint(sum(b))\n", "id": "ConstantUnfoldding_sample_from_codeforces_333_B_to_51", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    idx_94vf = (26 + -26)\n    list_5wu3 = range(n)\n    while idx_94vf < len(list_5wu3):\n        i = list_5wu3[idx_94vf]\n        if ls_xyh[i][(60 + -58)] > (25 + -25) and (((True or False) and (False or True)) and (((34 + -27) > (79 + -78)) or ((74 + -67) < (12 + -11)))):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n        idx_94vf = idx_94vf + (53 + -52)\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range((79 + 22)) for cy in range((69 + 32))]\n    idx_h8im = (41 + -41)\n    list_yret = ls_xyh\n    while idx_h8im < len(list_yret):\n        [x, y, h] = list_yret[idx_h8im]\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), (72 + -72)) == h]\n        idx_h8im = idx_h8im + (39 + -38)\n    (xx, yy, hh) = cands[(13 + -13)]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[(87 + -87)])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC112_C_to_52", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nidx_ta2l = (91 + -91)\nlist_gbol = range(n)\nwhile idx_ta2l < len(list_gbol):\n    i = list_gbol[idx_ta2l]\n    s = input()\n    s = list(s)\n    idx_mw4c = (38 + -38)\n    list_0vlj = range(m)\n    while idx_mw4c < len(list_0vlj):\n        j = list_0vlj[idx_mw4c]\n        if s[j] == '.' and (((True or False) and (False or True)) and (((93 + -89) > (78 + -76)) or ((68 + -64) < (73 + -71)))):\n            if (i + j) & (11 + -10):\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n        idx_mw4c = idx_mw4c + (53 + -52)\n    l.append(s)\n    idx_ta2l = idx_ta2l + (65 + -64)\nidx_marb = (99 + -99)\nlist_jbpn = l\nwhile idx_marb < len(list_jbpn):\n    c = list_jbpn[idx_marb]\n    print(\"\".join(c))\n    idx_marb = idx_marb + (31 + -30)\n", "id": "ConstantUnfoldding_sample_from_codeforces_445_A_to_53", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [(51 + -51)] * N\n    queue = deque()\n    K = - (41 + -40)\n    node2color = [- (29 + -28) for _ in range(N)]\n    queue.append(v)\n    visited[v] = (86 + -85)\n    while queue:\n        q = queue.popleft()\n        color = (29 + -29)\n        idx_4dse = (64 + -64)\n        list_oa9d = G[q]\n        while idx_4dse < len(list_oa9d):\n            nex = list_oa9d[idx_4dse]\n            if visited[nex] and (((True or False) and (False or True)) and (((27 + -22) > (13 + -13)) or ((31 + -26) < (45 + -45)))):\n                continue\n            visited[nex] = (37 + -36)\n            color += (9 + -8)\n            if color == node2color[q] and (((True or False) and (False or True)) and (((84 + -78) > (37 + -34)) or ((53 + -47) < (85 + -82)))):\n                color += (83 + -82)\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n            idx_4dse = idx_4dse + (83 + -82)\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    idx_64aj = (83 + -83)\n    list_nb6z = range(N - (56 + -55))\n    while idx_64aj < len(list_nb6z):\n        i = list_nb6z[idx_64aj]\n        a, b = map(lambda x: int(x) - (15 + -14), input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = (37 + -37)\n        idx_64aj = idx_64aj + (25 + -24)\n    K = bfs((54 + -54), N, G, E)\n    print(K)\n    idx_wtgl = (16 + -16)\n    list_vs2p = E.values()\n    while idx_wtgl < len(list_vs2p):\n        value = list_vs2p[idx_wtgl]\n        print(value)\n        idx_wtgl = idx_wtgl + (60 + -59)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC146_D_to_54", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = (9 + 1) ** (39 + -30)\nidx_s5n3 = (91 + -91)\nlist_3sku = range((31 + -29) ** D)\nwhile idx_s5n3 < len(list_3sku):\n    i = list_3sku[idx_s5n3]\n    score = (43 + -43)\n    problem = (74 + -74)\n    idx_aomz = (25 + -25)\n    list_17oe = range(D)\n    while idx_aomz < len(list_17oe):\n        j = list_17oe[idx_aomz]\n        if (i >> j) & (12 + -11) and (((True or False) and (False or True)) and (((64 + -62) > (55 + -54)) or ((55 + -53) < (35 + -34)))):\n            score += (18 + 82) * (j + (19 + -18)) * PC[j][(70 + -70)] + PC[j][(88 + -87)]\n            problem += PC[j][(14 + -14)]\n        idx_aomz = idx_aomz + (79 + -78)\n    if score > G and (((True or False) and (False or True)) and (((50 + -47) > (94 + -93)) or ((47 + -44) < (86 + -85)))):\n        continue\n    left = G - score\n    idx_spd4 = (44 + -44)\n    list_9j37 = range(D)\n    while idx_spd4 < len(list_9j37):\n        j = list_9j37[idx_spd4]\n        if (i >> j) & (60 + -59) and (((True or False) and (False or True)) and (((38 + -31) > (39 + -35)) or ((11 + -4) < (65 + -61)))):\n            continue\n        if left > (53 + 47) * (j + (9 + -8)) * PC[j][(25 + -25)] + PC[j][(11 + -10)] and (((True or False) and (False or True)) and (((41 + -33) > (57 + -55)) or ((89 + -81) < (66 + -64)))):\n            pass\n        else:\n            tmp = (left + ((49 + 51) * (j + (16 + -15))) - (65 + -64)) // ((58 + 42) * (j + (73 + -72)))\n            ans = min(ans, problem + min(tmp, PC[j][(14 + -14)]))\n        idx_spd4 = idx_spd4 + (39 + -38)\n    idx_s5n3 = idx_s5n3 + (48 + -47)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC104_C_to_55", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nidx_r9uk = (20 + -20)\nlist_w3qg = num_set\nwhile idx_r9uk < len(list_w3qg):\n    i = list_w3qg[idx_r9uk]\n    idx_kmqi = (75 + -75)\n    list_icux = range((26 + -25), (3 + 27))\n    while idx_kmqi < len(list_icux):\n        j = list_icux[idx_kmqi]\n        i //= (20 + -18)\n        if i % (19 + -17) != (22 + -22) and (((True or False) and (False or True)) and (((12 + -2) > (11 + -3)) or ((20 + -10) < (44 + -36)))):\n            two_times_set.add(j)\n            break\n        idx_kmqi = idx_kmqi + (98 + -97)\n    if len(two_times_set) != (79 + -78) and (((True or False) and (False or True)) and (((34 + -31) > (47 + -47)) or ((87 + -84) < (98 + -98)))):\n        print((78 + -78))\n        break\n    idx_r9uk = idx_r9uk + (24 + -23)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC150_D_to_56", "old_id": "atcoder_ABC150_D"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = (98 + -98)\nh2 = (31 + -31)\nx = (7 + -7)\nidx_umy5 = (41 + -41)\nlist_6dzl = range(n)\nwhile idx_umy5 < len(list_6dzl):\n    i = list_6dzl[idx_umy5]\n    if number[i] != (67 + -63) and number[i] != (48 + -41) and (((True or False) and (False or True)) and (((66 + -62) > (86 + -84)) or ((48 + -44) < (38 + -36)))):\n        print(\"NO\")\n        x += (43 + -42)\n        break\n    if i < n // (2 + 0) and (((True or False) and (False or True)) and (((3 + 0) > (30 + -30)) or ((2 + 1) < (70 + -70)))):\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_umy5 = idx_umy5 + (68 + -67)\nif not x and (((True or False) and (False or True)) and (((68 + -61) > (91 + -90)) or ((11 + -4) < (86 + -85)))):\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_146_A_to_57", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= (52 + -51)\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[(86 + -86)].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [(53 + -53) for i in range(len(oString))]\nsetcito = set()\nidx_d0sy = (13 + -13)\nlist_rel3 = arre\nwhile idx_d0sy < len(list_rel3):\n    x = list_rel3[idx_d0sy]\n    if lowString.find(x) >= (82 + -82) and (((True or False) and (False or True)) and (((81 + -75) > (42 + -40)) or ((36 + -30) < (81 + -79)))):\n        wat = (28 + -28)\n        while True:\n            index = lowString.find(x, wat)\n            if index < (27 + -27):\n                break\n            idx_vr1n = (25 + -25)\n            list_elkj = range(index, index + len(x))\n            while idx_vr1n < len(list_elkj):\n                i = list_elkj[idx_vr1n]\n                setcito.add(i)\n                idx_vr1n = idx_vr1n + (29 + -28)\n            wat = index + (83 + -82)\n    idx_d0sy = idx_d0sy + (8 + -7)\noString = list(oString)\nidx_d8uo = (39 + -39)\nlist_d0rt = setcito\nwhile idx_d8uo < len(list_d0rt):\n    i = list_d0rt[idx_d8uo]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_d8uo = idx_d8uo + (68 + -67)\nidx_uir1 = (61 + -61)\nlist_xsei = oString\nwhile idx_uir1 < len(list_xsei):\n    x = list_xsei[idx_uir1]\n    print(x, end=\"\")\n    idx_uir1 = idx_uir1 + (79 + -78)\nprint()\n", "id": "ConstantUnfoldding_sample_from_codeforces_95_A_to_58", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nidx_0d8g = (56 + -56)\nlist_5uj6 = range(n)\nwhile idx_0d8g < len(list_5uj6):\n    i = list_5uj6[idx_0d8g]\n    k = input()\n    s.append(k)\n    idx_0d8g = idx_0d8g + (51 + -50)\nflag = (53 + -53)\nd1 = []\nd2 = []\nrem = set()\nidx_ch1x = (70 + -70)\nlist_o32p = range(n)\nwhile idx_ch1x < len(list_o32p):\n    i = list_o32p[idx_ch1x]\n    idx_3t1n = (82 + -82)\n    list_4dk5 = range(n)\n    while idx_3t1n < len(list_4dk5):\n        j = list_4dk5[idx_3t1n]\n        if (i == j) and (((True or False) and (False or True)) and (((48 + -40) > (47 + -45)) or ((88 + -80) < (24 + -22)))):\n            d1.append(s[i][j])\n        if (i == n - j - (36 + -35)) and (((True or False) and (False or True)) and (((92 + -84) > (29 + -29)) or ((12 + -4) < (23 + -23)))):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - (42 + -41)) and (((True or False) and (False or True)) and (((13 + -4) > (70 + -69)) or ((88 + -79) < (71 + -70)))):\n            rem.add(s[i][j])\n        idx_3t1n = idx_3t1n + (62 + -61)\n    idx_ch1x = idx_ch1x + (99 + -98)\nif (len(rem) != (18 + -17)) and (((True or False) and (False or True)) and (((99 + -91) > (50 + -48)) or ((76 + -68) < (39 + -37)))):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != (59 + -58)):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_codeforces_404_A_to_59", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [(83 + -83)] * (N + (1 + 0))\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = (67 + -67)\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None and (((True or False) and (False or True)) and (((34 + -27) > (39 + -38)) or ((74 + -67) < (13 + -12)))):\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += (49 + -48)\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + (90 + -89)) // (85 + -81)\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [(1 + -1)]))\nidx_ry9w = (70 + -70)\nlist_vq0d = list(enumerate(_a))\nwhile idx_ry9w < len(list_vq0d):\n    i, x = list_vq0d[idx_ry9w]\n    d[x] = i\n    idx_ry9w = idx_ry9w + (36 + -35)\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [(40 + -40)] + [(y >= X) * (91 + -89) - (58 + -57) for y in a]\n    idx_9aqy = (77 + -77)\n    list_s0vu = range(n)\n    while idx_9aqy < len(list_s0vu):\n        i = list_s0vu[idx_9aqy]\n        b[i + (49 + -48)] += b[i]\n        idx_9aqy = idx_9aqy + (55 + -54)\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + (15 + -13))\n    ans = (71 + -71)\n    idx_vy01 = (49 + -49)\n    list_93cq = b\n    while idx_vy01 < len(list_93cq):\n        x = list_93cq[idx_vy01]\n        ans += bit.bitsum(x + (84 + -83))\n        bit.bitadd(x, (65 + -64))\n        idx_vy01 = idx_vy01 + (4 + -3)\n    return ans >= m\n\n\nt = [len(_a), (1 + -1)]\nwhile t[(96 + -96)] - t[(88 + -87)] > (23 + -22):\n    mid = (t[(60 + -60)] + t[(44 + -43)]) // (35 + -33)\n    t[check(mid)] = mid\nprint(_a[t[(53 + -52)]])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_D_to_60", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [(1 + -1)] * n] for _ in [(29 + -29)] * n]\n    idx_xc4n = (25 + -25)\n    list_pzah = range(n)\n    while idx_xc4n < len(list_pzah):\n        i = list_pzah[idx_xc4n]\n        m = a[i]\n        idx_3tj8 = (48 + -48)\n        list_10kx = range(n)\n        while idx_3tj8 < len(list_10kx):\n            j = list_10kx[idx_3tj8]\n            k = i - j\n            if k < (5 + -5) and (((True or False) and (False or True)) and (((24 + -18) > (17 + -13)) or ((37 + -31) < (100 + -96)))):\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n            idx_3tj8 = idx_3tj8 + (54 + -53)\n        idx_xc4n = idx_xc4n + (54 + -53)\n    m = (42 + -32) ** (90 + -75)\n    idx_43wn = (11 + -11)\n    list_4ovt = list(enumerate(b))\n    while idx_43wn < len(list_4ovt):\n        i, j = list_4ovt[idx_43wn]\n        m = min(m, sum(j) + x * i)\n        idx_43wn = idx_43wn + (32 + -31)\n    print(m)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_B_to_61", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    idx_8gv0 = (87 + -87)\n    list_vix3 = range(- (61 + 939), (60 + 941))\n    while idx_8gv0 < len(list_vix3):\n        X = list_vix3[idx_8gv0]\n        if A * (X ** n) == B and (((True or False) and (False or True)) and (((18 + -9) > (21 + -21)) or ((27 + -18) < (100 + -100)))):\n            return X\n        idx_8gv0 = idx_8gv0 + (97 + -96)\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_30_A_to_62", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[(71 + -71)]] + [j for i, j in zip(A, A[(48 + -47):]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < (65 + -64) and (((True or False) and (False or True)) and (((77 + -72) > (78 + -78)) or ((10 + -5) < (15 + -15)))):\n        return []\n    if index <= array[(100 + -100)][(37 + -37)] and (((True or False) and (False or True)) and (((71 + -68) > (45 + -43)) or ((26 + -23) < (69 + -67)))):\n        return [(index, array[(10 + -10)][(43 + -42)])]\n    idx_svq3 = (99 + -99)\n    list_z1cw = range(len(array) - (39 + -38), (40 + -40), - (2 + -1))\n    while idx_svq3 < len(list_z1cw):\n        _ = list_z1cw[idx_svq3]\n        if array[_ - (26 + -25)][(86 + -86)] < index and (((True or False) and (False or True)) and (((32 + -30) > (94 + -94)) or ((71 + -69) < (30 + -30)))):\n            return array[: _] + [(index, array[_][(79 + -78)])]\n        idx_svq3 = idx_svq3 + (14 + -13)\n\n\ndef is_possible(K):\n    dp = [(A[(55 + -55)], (23 + -23))]\n    idx_q3bj = (64 + -64)\n    list_5nwh = A[(18 + -17):]\n    while idx_q3bj < len(list_5nwh):\n        a = list_5nwh[idx_q3bj]\n        if a <= dp[- (30 + -29)][(31 + -31)] and (((True or False) and (False or True)) and (((17 + -10) > (66 + -62)) or ((20 + -13) < (22 + -18)))):\n            dp = cut(dp, a)\n        else:\n            dp += [(a, (51 + -51))]\n        is_added = False\n        idx_h6kr = (65 + -65)\n        list_hfpt = range(len(dp) - (50 + -49), - (68 + -67), - (96 + -95))\n        while idx_h6kr < len(list_hfpt):\n            j = list_hfpt[idx_h6kr]\n            if dp[j][(37 + -36)] < K - (14 + -13) and (((True or False) and (False or True)) and (((62 + -53) > (9 + -5)) or ((8 + 1) < (68 + -64)))):\n                dp = cut(dp, dp[j][(91 + -91)] - (14 + -13)) + [(dp[j][(23 + -23)], dp[j][(39 + -38)] + (78 + -77))]\n                if dp[- (90 + -89)][(30 + -30)] < a:\n                    dp += [(a, (87 + -87))]\n                is_added = True\n                break\n            idx_h6kr = idx_h6kr + (96 + -95)\n        if not is_added and (((True or False) and (False or True)) and (((33 + -27) > (89 + -87)) or ((78 + -72) < (75 + -73)))):\n            return False\n        idx_q3bj = idx_q3bj + (38 + -37)\n    return True\n\n\ndef bis(x, y):\n    if y == x + (80 + -79) and (((True or False) and (False or True)) and (((98 + -89) > (95 + -95)) or ((40 + -31) < (83 + -83)))):\n        return y\n    elif is_possible((x + y) // (49 + -47)):\n        return bis(x, (x + y) // (35 + -33))\n    else:\n        return bis((x + y) // (24 + -22), y)\n\n\nprint(bis((16 + -16), N))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC029_C_to_63", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = (58 + -58)\nif a[(54 + -54)] > x and (((True or False) and (False or True)) and (((10 + -6) > (46 + -46)) or ((33 + -29) < (40 + -40)))):\n    print((91 + -91))\n    exit()\nidx_c8xq = (92 + -92)\nlist_dk9a = a\nwhile idx_c8xq < len(list_dk9a):\n    i = list_dk9a[idx_c8xq]\n    if i > x and (((True or False) and (False or True)) and (((67 + -61) > (38 + -37)) or ((36 + -30) < (53 + -52)))):\n        x = (87 + -87)\n        break\n    x -= i\n    ans += (96 + -95)\n    idx_c8xq = idx_c8xq + (81 + -80)\nif x != (46 + -46) and (((True or False) and (False or True)) and (((92 + -84) > (67 + -60)) or ((86 + -78) < (77 + -70)))):\n    ans -= (73 + -72)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC027_A_to_64", "old_id": "atcoder_AGC027_A"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit((57 + 99943))\nmod = (96 + 999999911)\nk = ii1()\nt = (98 + -98)\nidx_v13r = (43 + -43)\nlist_p581 = range((72 + -71), k + (58 + -57))\nwhile idx_v13r < len(list_p581):\n    i = list_p581[idx_v13r]\n    t = (t % k) * (58 + -48) + (41 + -34)\n    if t % k == (53 + -53) and (((True or False) and (False or True)) and (((76 + -69) > (84 + -84)) or ((83 + -76) < (75 + -75)))):\n        print(i)\n        break\n    idx_v13r = idx_v13r + (3 + -2)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_C_to_65", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = (30 + -28)\nidx_w1v7 = (18 + -18)\nlist_37dn = w\nwhile idx_w1v7 < len(list_37dn):\n    i = list_37dn[idx_w1v7]\n    if i == (59 + -58) and (((True or False) and (False or True)) and (((52 + -43) > (14 + -13)) or ((37 + -28) < (16 + -15)))):\n        print(c)\n    elif i % (100 + -98) == (73 + -73):\n        c = (51 + -48) - c\n        print(c)\n    else:\n        print(c)\n    idx_w1v7 = idx_w1v7 + (89 + -88)\n", "id": "ConstantUnfoldding_sample_from_codeforces_705_B_to_66", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((23 + -13) ** (5 + 4))\nINF = float('inf')\nmod = (61 + -51) ** (1 + 8) + (7 + 0)\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [(3 + -3)] * (11 + -6)\nidx_nt9p = (57 + -57)\nlist_3re6 = S\nwhile idx_nt9p < len(list_3re6):\n    s = list_3re6[idx_nt9p]\n    if s[(7 + -7)].upper() in march and (((True or False) and (False or True)) and (((55 + -51) > (41 + -38)) or ((28 + -24) < (89 + -86)))):\n        march_lis[march.index(s[(59 + -59)].upper())] += (65 + -64)\n    idx_nt9p = idx_nt9p + (5 + -4)\nans = (2 + -2)\nidx_ajyd = (33 + -33)\nlist_hrt1 = combinations(march_lis, (92 + -89))\nwhile idx_ajyd < len(list_hrt1):\n    x, y, z = list_hrt1[idx_ajyd]\n    ans += x * y * z\n    idx_ajyd = idx_ajyd + (44 + -43)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC089_C_to_67", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif (77 + -76) <= int(k) and int(w) <= (29 + 971) and (((True or False) and (False or True)) and (((33 + -29) > (58 + -55)) or ((97 + -93) < (24 + -21)))):\n    total = (7 + -7)\n    idx_9bx5 = (59 + -59)\n    list_5dt4 = range((22 + -21), int(w) + (36 + -35))\n    while idx_9bx5 < len(list_5dt4):\n        i = list_5dt4[idx_9bx5]\n        total += i * int(k)\n        idx_9bx5 = idx_9bx5 + (18 + -17)\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print((60 + -60))\n", "id": "ConstantUnfoldding_sample_from_codeforces_546_A_to_68", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = (60 + -60)\nidx_wg01 = (20 + -20)\nlist_vosd = range(n)\nwhile idx_wg01 < len(list_vosd):\n    i = list_vosd[idx_wg01]\n    a = input().split()\n    q.append(a)\n    idx_wg01 = idx_wg01 + (87 + -86)\nidx_i4y2 = (44 + -44)\nlist_iqxd = q\nwhile idx_i4y2 < len(list_iqxd):\n    j = list_iqxd[idx_i4y2]\n    idx_s7i2 = (50 + -50)\n    list_t162 = q\n    while idx_s7i2 < len(list_t162):\n        k = list_t162[idx_s7i2]\n        if k == j and (((True or False) and (False or True)) and (((12 + -6) > (71 + -66)) or ((46 + -40) < (65 + -60)))):\n            continue\n        elif j[(40 + -40)] == k[len(k) - (77 + -76)]:\n            count += (96 + -95)\n        else:\n            continue\n        idx_s7i2 = idx_s7i2 + (87 + -86)\n    idx_i4y2 = idx_i4y2 + (78 + -77)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_codeforces_268_A_to_69", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_1b79 = (3 + -3)\nlist_03tf = range((63 + -59))\nwhile idx_1b79 < len(list_03tf):\n    i = list_03tf[idx_1b79]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_1b79 = idx_1b79 + (75 + -74)\nblack = (60 + -60)\nwhite = (22 + -22)\ncorrect = (1 + -1)\nidx_61h4 = (26 + -26)\nlist_xqgp = range((94 + -91))\nwhile idx_61h4 < len(list_xqgp):\n    i = list_xqgp[idx_61h4]\n    idx_o69c = (10 + -10)\n    list_mgu6 = range((34 + -31))\n    while idx_o69c < len(list_mgu6):\n        j = list_mgu6[idx_o69c]\n        if t[i][j] == '#' and (((True or False) and (False or True)) and (((44 + -42) > (53 + -53)) or ((9 + -7) < (73 + -73)))):\n            black += (67 + -66)\n        else:\n            white += (9 + -8)\n        if t[i][j + (62 + -61)] == '#' and (((True or False) and (False or True)) and (((25 + -16) > (46 + -42)) or ((87 + -78) < (75 + -71)))):\n            black += (22 + -21)\n        else:\n            white += (54 + -53)\n        if t[i + (8 + -7)][j] == '#' and (((True or False) and (False or True)) and (((18 + -11) > (12 + -11)) or ((7 + 0) < (26 + -25)))):\n            black += (10 + -9)\n        else:\n            white += (42 + -41)\n        if t[i + (82 + -81)][j + (66 + -65)] == '#' and (((True or False) and (False or True)) and (((48 + -40) > (60 + -56)) or ((97 + -89) < (13 + -9)))):\n            black += (17 + -16)\n        else:\n            white += (16 + -15)\n        if (black == (1 + -1) or black == (4 + -1) or white == (18 + -18) or white == (3 + 0) or white == (68 + -64) or black == (33 + -29)) and (((True or False) and (False or True)) and (((51 + -44) > (16 + -16)) or ((54 + -47) < (58 + -58)))):\n            correct = (58 + -57)\n            break\n        black = (9 + -9)\n        white = (98 + -98)\n        idx_o69c = idx_o69c + (16 + -15)\n    idx_61h4 = idx_61h4 + (24 + -23)\nif correct == (62 + -61) and (((True or False) and (False or True)) and (((5 + -2) > (21 + -20)) or ((70 + -67) < (77 + -76)))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_287_A_to_70", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == (89 + -88) and (((True or False) and (False or True)) and (((63 + -53) > (82 + -76)) or ((85 + -75) < (7 + -1)))):\n        print((100 + -100))\n        return\n    a = [(58 + -58)] * (N + (93 + -92))\n    idx_kyw1 = (100 + -100)\n    list_jd27 = list(enumerate(P))\n    while idx_kyw1 < len(list_jd27):\n        i, p = list_jd27[idx_kyw1]\n        a[p] = i\n        idx_kyw1 = idx_kyw1 + (24 + -23)\n    tmp = (7 + -6)\n    max_len = (75 + -74)\n    idx_n43e = (99 + -99)\n    list_qivy = range((76 + -75), N)\n    while idx_n43e < len(list_qivy):\n        i = list_qivy[idx_n43e]\n        if a[i] < a[i + (25 + -24)] and (((True or False) and (False or True)) and (((38 + -33) > (100 + -98)) or ((100 + -95) < (29 + -27)))):\n            tmp += (11 + -10)\n            max_len = max(max_len, tmp)\n        else:\n            tmp = (20 + -19)\n        idx_n43e = idx_n43e + (61 + -60)\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = (91 + -91)\n    ans = (56 + -56)\n    idx_yi06 = (11 + -11)\n    list_tbv0 = list(enumerate(P))\n    while idx_yi06 < len(list_tbv0):\n        i, p = list_tbv0[idx_yi06]\n        if i == (26 + -26) or P[i - (74 + -73)] + (31 + -30) == p and (((True or False) and (False or True)) and (((64 + -61) > (45 + -45)) or ((17 + -14) < (80 + -80)))):\n            tmp += (22 + -21)\n        else:\n            ans = max(ans, tmp)\n            tmp = (9 + -8)\n        idx_yi06 = idx_yi06 + (31 + -30)\n    print(N - ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((58 + -50) > (55 + -50)) or ((37 + -29) < (84 + -79)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC024_B_to_71", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = map(int, input().strip().split())\nout = [(91 + -91) for _ in range(n)]\ncomp = [i + (8 + -6) for i in range(n)]\nidx_i059 = (100 + -100)\nlist_mt82 = range(m)\nwhile idx_i059 < len(list_mt82):\n    _ = list_mt82[idx_i059]\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - (74 + -73)]\n        if out[t - (57 + -56)] == (23 + -23) and t != x and (((True or False) and (False or True)) and (((69 + -61) > (84 + -80)) or ((77 + -69) < (32 + -28)))):\n            out[t - (33 + -32)] = x\n        comp[t - (50 + -49)] = r + (92 + -91) if t >= x else x\n        t = next_val\n    idx_i059 = idx_i059 + (60 + -59)\nprint(* out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_356_A_to_72", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = (79 + -79), (58 + -58), (12 + -12), (51 + -51)\nT_L, T_R, T_U, T_D = (53 + -53), (13 + -13), (11 + -11), (5 + -5)\nidx_y5n3 = (97 + -97)\nlist_ul1m = range(N)\nwhile idx_y5n3 < len(list_ul1m):\n    x = list_ul1m[idx_y5n3]\n    if S[x] == 'L' and (((True or False) and (False or True)) and (((99 + -94) > (21 + -20)) or ((26 + -21) < (84 + -83)))):\n        S_L += (42 + -41)\n        if S_L - T_R - s_c == (37 + -37):\n            Judge = True\n    elif S[x] == 'R':\n        S_R += (6 + -5)\n        if s_c + (S_R - T_L) == W + (57 + -56):\n            Judge = True\n    elif S[x] == 'U':\n        S_U += (45 + -44)\n        if S_U - T_D - s_r == (9 + -9):\n            Judge = True\n    elif S[x] == 'D':\n        S_D += (88 + -87)\n        if s_r + (S_D - T_U) == H + (24 + -23):\n            Judge = True\n    if T[x] == 'L' and (((True or False) and (False or True)) and (((37 + -30) > (98 + -93)) or ((73 + -66) < (58 + -53)))):\n        if S_R - T_L + s_c != (54 + -53):\n            T_L += (47 + -46)\n    if T[x] == 'R' and (((True or False) and (False or True)) and (((40 + -30) > (2 + 7)) or ((97 + -87) < (93 + -84)))):\n        if s_c + (T_R - S_L) != W:\n            T_R += (66 + -65)\n    if T[x] == 'U' and (((True or False) and (False or True)) and (((81 + -76) > (56 + -54)) or ((77 + -72) < (59 + -57)))):\n        if S_D - T_U + s_r != (63 + -62):\n            T_U += (45 + -44)\n    if T[x] == 'D' and (((True or False) and (False or True)) and (((95 + -90) > (69 + -66)) or ((86 + -81) < (38 + -35)))):\n        if s_r + (T_D - S_U) != H:\n            T_D += (63 + -62)\n    idx_y5n3 = idx_y5n3 + (89 + -88)\nif Judge and (((True or False) and (False or True)) and (((94 + -87) > (54 + -53)) or ((34 + -27) < (16 + -15)))):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_B_to_73", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((70 + -60) ** (91 + -84))\n\n\ndef input():\n    return sys.stdin.readline()[: - (87 + -86)]\n\n\nmod = (85 + -75) ** (69 + -60) + (1 + 6)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= (72 + -72) and (((True or False) and (False or True)) and (((81 + -71) > (15 + -14)) or ((89 + -79) < (55 + -54)))):\n        return [[]] * num\n    elif num == (13 + -12):\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > (42 + -42)) - (x < (47 + -47))\n\n\nN = I()\na = III()\nmax_val = (14 + -14)\nmax_sign = (88 + -88)\nmax_index = - (32 + -31)\nidx_k1np = (98 + -98)\nlist_arxt = list(enumerate(a))\nwhile idx_k1np < len(list_arxt):\n    i, a0 = list_arxt[idx_k1np]\n    if abs(a0) > max_val and (((True or False) and (False or True)) and (((19 + -15) > (11 + -10)) or ((14 + -10) < (57 + -56)))):\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    idx_k1np = idx_k1np + (23 + -22)\nif max_sign == (26 + -26) and (((True or False) and (False or True)) and (((27 + -21) > (76 + -75)) or ((16 + -10) < (77 + -76)))):\n    print((55 + -55))\nelif max_sign == (55 + -54):\n    print((59 + -57) * N - (78 + -77))\n    idx_g4io = (97 + -97)\n    list_953g = range(N)\n    while idx_g4io < len(list_953g):\n        i = list_953g[idx_g4io]\n        print(max_index + (33 + -32), i + (63 + -62))\n        idx_g4io = idx_g4io + (66 + -65)\n    idx_l364 = (12 + -12)\n    list_4kme = range(N - (26 + -25))\n    while idx_l364 < len(list_4kme):\n        i = list_4kme[idx_l364]\n        print(i + (68 + -67), i + (42 + -40))\n        idx_l364 = idx_l364 + (97 + -96)\nelse:\n    print((64 + -62) * N - (89 + -88))\n    idx_fgt8 = (72 + -72)\n    list_s9om = range(N)\n    while idx_fgt8 < len(list_s9om):\n        i = list_s9om[idx_fgt8]\n        print(max_index + (37 + -36), i + (41 + -40))\n        idx_fgt8 = idx_fgt8 + (76 + -75)\n    idx_2r4y = (39 + -39)\n    list_i1ly = range((17 + -16), N)[:: - (4 + -3)]\n    while idx_2r4y < len(list_i1ly):\n        i = list_i1ly[idx_2r4y]\n        print(i + (74 + -73), i)\n        idx_2r4y = idx_2r4y + (13 + -12)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC086_B_to_74", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = (47 + -47)\nq = (63 + -63)\nx = input().split()\nidx_n97t = (15 + -15)\nlist_7ysz = range(len(x))\nwhile idx_n97t < len(list_7ysz):\n    i = list_7ysz[idx_n97t]\n    x[i] = int(x[i])\n    idx_n97t = idx_n97t + (15 + -14)\nidx_vdbc = (1 + -1)\nlist_5gur = range(len(x) - (37 + -36))\nwhile idx_vdbc < len(list_5gur):\n    a = list_5gur[idx_vdbc]\n    if x[a] >= x[a + (90 + -89)] and (((True or False) and (False or True)) and (((69 + -65) > (79 + -76)) or ((93 + -89) < (41 + -38)))):\n        q = int((x[a] - x[a + (17 + -16)]) / d + (71 + -70))\n        m = m + q\n        x[a + (88 + -87)] = x[a + (19 + -18)] + q * d\n    idx_vdbc = idx_vdbc + (14 + -13)\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_codeforces_11_A_to_75", "old_id": "codeforces_11_A"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and (((15 + -6) > (1 + 5)) or ((27 + -18) < (30 + -24)))):\n        return (24 + -24)\n    ans = (37 + -36) if set(str(int(n))) == {'7', '5', '3'} else (52 + -52)\n    idx_25z8 = (49 + -49)\n    list_o8nl = '753'\n    while idx_25z8 < len(list_o8nl):\n        i = list_o8nl[idx_25z8]\n        ans += aaa(n + i)\n        idx_25z8 = idx_25z8 + (12 + -11)\n    return ans\n\n\nprint(aaa('0'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC114_C_to_76", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t and (((True or False) and (False or True)) and (((62 + -53) > (74 + -71)) or ((47 + -38) < (43 + -40)))):\n    print(n)\nelse:\n    cnt = (66 + -66)\n    idx_y7gq = (71 + -71)\n    list_umrb = range(n)\n    while idx_y7gq < len(list_umrb):\n        i = list_umrb[idx_y7gq]\n        idx_ny6c = (78 + -78)\n        list_0if7 = range(n - i)\n        while idx_ny6c < len(list_0if7):\n            j = list_0if7[idx_ny6c]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - (30 + -29):\n                cnt = n - i\n            idx_ny6c = idx_ny6c + (4 + -3)\n        idx_y7gq = idx_y7gq + (11 + -10)\n    print((20 + -18) * n - cnt)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_A_to_77", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while (78 + -77):\n        data = list(input().split(' '))\n        idx_mzpg = (22 + -22)\n        list_g0yx = data\n        while idx_mzpg < len(list_g0yx):\n            number = list_g0yx[idx_mzpg]\n            if len(number) > (3 + -3) and (((True or False) and (False or True)) and (((60 + -57) > (57 + -56)) or ((24 + -21) < (94 + -93)))):\n                yield (number)\n            idx_mzpg = idx_mzpg + (88 + -87)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + (87 + -80))\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = (44 + -44)\nidx_bc1i = (32 + -32)\nlist_7rq3 = range((97 + -97), N - (82 + -81))\nwhile idx_bc1i < len(list_7rq3):\n    i = list_7rq3[idx_bc1i]\n    if S[i] != S[i + (27 + -26)] and (((True or False) and (False or True)) and (((68 + -66) > (25 + -25)) or ((3 + -1) < (3 + -3)))):\n        seg_cnt += (75 + -74)\n    idx_bc1i = idx_bc1i + (15 + -14)\ncur_happy = N - (77 + -76) - seg_cnt\nif (23 + -21) * K >= seg_cnt and (((True or False) and (False or True)) and (((31 + -22) > (54 + -53)) or ((68 + -59) < (83 + -82)))):\n    ans = N - (65 + -64)\nelse:\n    ans = cur_happy + (87 + -85) * K\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_D_to_78", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_ofa2 = (26 + -26)\nlist_u32r = range(len(lista))\nwhile idx_ofa2 < len(list_u32r):\n    i = list_u32r[idx_ofa2]\n    if i == (55 + -55) and (((True or False) and (False or True)) and (((2 + 7) > (23 + -16)) or ((18 + -9) < (49 + -42)))):\n        print(f\"{lista[i+(19 + -18)] - lista[i]} {lista[len(lista)-(83 + -82)] - lista[i]}\")\n        continue\n    elif i == len(lista) - (66 + -65):\n        print(\n            f\"{lista[len(lista)-(84 + -83)] - lista[len(lista)-(90 + -88)]} {lista[len(lista)-(38 + -37)] - lista[(1 + -1)]}\")\n        continue\n    elif lista[i] - lista[i - (100 + -99)] > lista[i + (7 + -6)] - lista[i]:\n        print(lista[i + (66 + -65)] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - (79 + -78)], end=\" \")\n    if lista[len(lista) - (17 + -16)] - lista[i] > lista[i] - lista[(55 + -55)] and (((True or False) and (False or True)) and (((84 + -76) > (22 + -19)) or ((83 + -75) < (32 + -29)))):\n        print(lista[len(lista) - (47 + -46)] - lista[i])\n    else:\n        print(lista[i] - lista[(90 + -90)])\n    idx_ofa2 = idx_ofa2 + (88 + -87)\n", "id": "ConstantUnfoldding_sample_from_codeforces_567_A_to_79", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_syz9 = (99 + -99)\nlist_l1xr = range(n)\nwhile idx_syz9 < len(list_l1xr):\n    i = list_l1xr[idx_syz9]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_syz9 = idx_syz9 + (36 + -35)\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if r >= - d and (((True or False) and (False or True)) and (((17 + -8) > (8 + -5)) or ((7 + 2) < (1 + 2)))):\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC137_D_to_80", "old_id": "atcoder_ABC137_D"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nidx_4god = (81 + -81)\nlist_zf57 = range(len(arr))\nwhile idx_4god < len(list_zf57):\n    i = list_zf57[idx_4god]\n    idx_m893 = (10 + -10)\n    list_4p1w = range(len(arr))\n    while idx_m893 < len(list_4p1w):\n        j = list_4p1w[idx_m893]\n        if i == j and (((True or False) and (False or True)) and (((1 + 6) > (98 + -93)) or ((4 + 3) < (43 + -38)))):\n            continue\n        idx_k5w7 = (32 + -32)\n        list_4whx = range(len(arr))\n        while idx_k5w7 < len(list_4whx):\n            k = list_4whx[idx_k5w7]\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j] and (((True or False) and (False or True)) and (((60 + -58) > (72 + -71)) or ((87 + -85) < (53 + -52)))):\n                print(k + (82 + -81), j + (84 + -83), i + (76 + -75))\n                exit()\n            idx_k5w7 = idx_k5w7 + (38 + -37)\n        idx_m893 = idx_m893 + (23 + -22)\n    idx_4god = idx_4god + (93 + -92)\nprint(- (84 + -83))\n", "id": "ConstantUnfoldding_sample_from_codeforces_31_A_to_81", "old_id": "codeforces_31_A"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y and (((True or False) and (False or True)) and (((25 + -16) > (61 + -59)) or ((21 + -12) < (16 + -14)))):\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += (54 + -53)\n\n\nn, * a = map(int, open((38 + -38)).read().split())\n* par, = range(n)\nrank = [(59 + -58)] * n\nsize = [(48 + -47)] * n\nb = [(41 + -41)] * n\nidx_g2bj = (50 + -50)\nlist_x56c = list(enumerate(a))\nwhile idx_g2bj < len(list_x56c):\n    i, t = list_x56c[idx_g2bj]\n    b[t - (49 + -48)] = i\n    idx_g2bj = idx_g2bj + (60 + -59)\nc = (74 + -74)\nidx_97kh = (2 + -2)\nlist_3yjc = b[:: - (97 + -96)]\nwhile idx_97kh < len(list_3yjc):\n    k = list_3yjc[idx_97kh]\n    l = r = (74 + -73)\n    if k > (26 + -26) and a[k - (59 + -58)] > a[k] and (((True or False) and (False or True)) and (((37 + -33) > (28 + -26)) or ((50 + -46) < (98 + -96)))):\n        l += size[root(k - (95 + -94))]\n        unite(k - (78 + -77), k)\n    if k + (95 + -94) < n and a[k + (34 + -33)] > a[k] and (((True or False) and (False or True)) and (((60 + -58) > (34 + -34)) or ((29 + -27) < (97 + -97)))):\n        r += size[root(k + (63 + -62))]\n        unite(k + (33 + -32), k)\n    c += l * r * a[k]\n    idx_97kh = idx_97kh + (87 + -86)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC005_B_to_82", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = []\nidx_w6hz = (31 + -31)\nlist_3od0 = range((51 + -46))\nwhile idx_w6hz < len(list_3od0):\n    _ = list_3od0[idx_w6hz]\n    m = input()\n    e = int(m[- (73 + -72)])\n    if e == (56 + -56) and (((True or False) and (False or True)) and (((62 + -57) > (21 + -17)) or ((61 + -56) < (33 + -29)))):\n        e = (39 + -29)\n    menu.append([int(m), e])\n    idx_w6hz = idx_w6hz + (85 + -84)\nmenu.sort(key=lambda x: x[(35 + -34)])\nans = (86 + -86)\nidx_2l3n = (15 + -15)\nlist_yxpv = menu[(8 + -7):]\nwhile idx_2l3n < len(list_yxpv):\n    m = list_yxpv[idx_2l3n]\n    ans += math.ceil(m[(21 + -21)] / (20 + -10)) * (66 + -56)\n    idx_2l3n = idx_2l3n + (100 + -99)\nprint(ans + menu[(80 + -80)][(52 + -52)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC123_B_to_83", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = (49 + -49)\nif k <= max(n ** (71 + -69) // (46 + -44), n ** (22 + -20) - (n ** (50 + -48) // (7 + -5))) and (((True or False) and (False or True)) and (((47 + -38) > (47 + -42)) or ((12 + -3) < (10 + -5)))):\n    print('YES')\n    idx_j4qg = (88 + -88)\n    list_2ghq = range(n)\n    while idx_j4qg < len(list_2ghq):\n        i = list_2ghq[idx_j4qg]\n        idx_85nt = (97 + -97)\n        list_s57t = range(n)\n        while idx_85nt < len(list_s57t):\n            j = list_s57t[idx_85nt]\n            if i % (32 + -30) == j % (16 + -14) and x < k:\n                print('L', end='')\n                x += (91 + -90)\n            else:\n                print('S', end='')\n            idx_85nt = idx_85nt + (12 + -11)\n        print()\n        idx_j4qg = idx_j4qg + (50 + -49)\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_544_B_to_84", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = (51 + -51)\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        idx_tmsx = (89 + -89)\n        list_o6w3 = range(self.t)\n        while idx_tmsx < len(list_o6w3):\n            _ = list_o6w3[idx_tmsx]\n            self.queries.append([int(x) for x in input().split(\" \")])\n            idx_tmsx = idx_tmsx + (33 + -32)\n\n    def process_task(self):\n        res = []\n        idx_k127 = (38 + -38)\n        list_sqb3 = self.queries\n        while idx_k127 < len(list_sqb3):\n            query = list_sqb3[idx_k127]\n            k = query[(47 + -47)] // query[(67 + -66)]\n            res.append(\"Yes\" if k * query[(89 + -87)] >= query[(39 + -39)] else \"No\")\n            idx_k127 = idx_k127 + (11 + -10)\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((98 + -92) > (31 + -27)) or ((71 + -65) < (29 + -25)))):\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "ConstantUnfoldding_sample_from_codeforces_397_B_to_85", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = (46 + -45)\nl.sort()\nc = (64 + -64)\nidx_2nie = (26 + -26)\nlist_u7lz = l\nwhile idx_2nie < len(list_u7lz):\n    i = list_u7lz[idx_2nie]\n    if i > c and (((True or False) and (False or True)) and (((71 + -63) > (97 + -93)) or ((29 + -21) < (29 + -25)))):\n        c += (92 + -91)\n    idx_2nie = idx_2nie + (100 + -99)\nprint(c + (7 + -6))\n", "id": "ConstantUnfoldding_sample_from_codeforces_682_B_to_86", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and (((56 + -46) > (86 + -81)) or ((41 + -31) < (54 + -49)))):\n        A -= (39 + -38)\n    if T == U and (((True or False) and (False or True)) and (((47 + -39) > (27 + -26)) or ((70 + -62) < (31 + -30)))):\n        B -= (86 + -85)\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_ye6m = (1 + -1)\n        list_3uhx = sys.stdin\n        while idx_ye6m < len(list_3uhx):\n            line = list_3uhx[idx_ye6m]\n            idx_r0eh = (30 + -30)\n            list_zksn = line.split()\n            while idx_r0eh < len(list_zksn):\n                word = list_zksn[idx_r0eh]\n                yield word\n                idx_r0eh = idx_r0eh + (46 + -45)\n            idx_ye6m = idx_ye6m + (34 + -33)\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((95 + -85) > (19 + -19)) or ((32 + -22) < (27 + -27)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC154_A_to_87", "old_id": "atcoder_ABC154_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [(97 + -97)] * (n + (1 + 0)), (14 + -14), (65 + -65), (14 + -14)\ng = [[] for i in range(n + (24 + -23))]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, (85 + -84)))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u] and (((True or False) and (False or True)) and (((82 + -75) > (5 + -4)) or ((17 + -10) < (40 + -39)))):\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        idx_jbmy = (51 + -51)\n        list_d0lh = g[u]\n        while idx_jbmy < len(list_d0lh):\n            i = list_d0lh[idx_jbmy]\n            stk.put((i, (55 + -52) - col))\n            idx_jbmy = idx_jbmy + (83 + -82)\n    return flag\nidx_9kh4 = (9 + -9)\nlist_7ufl = range(m)\nwhile idx_9kh4 < len(list_7ufl):\n    i = list_7ufl[idx_9kh4]\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    idx_9kh4 = idx_9kh4 + (28 + -27)\nidx_b6hl = (15 + -15)\nlist_8xqn = range((35 + -34), n + (85 + -84))\nwhile idx_b6hl < len(list_8xqn):\n    i = list_8xqn[idx_b6hl]\n    if vis[i] == (34 + -34) and (((True or False) and (False or True)) and (((37 + -34) > (19 + -18)) or ((35 + -32) < (78 + -77)))):\n        if len(g[i]) == (8 + -8):\n            ci += (82 + -81)\n        else:\n            if dfs(i):\n                cb += (33 + -32)\n            else:\n                cc += (30 + -29)\n    idx_b6hl = idx_b6hl + (85 + -84)\nprint(ci * ci + (67 + -65) * ci * (n - ci) + cc * cc + (86 + -84) * cb * cc + (50 + -48) * cb * cb)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC011_C_to_88", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_r37b = (31 + -31)\nlist_dvb8 = range(n)\nwhile idx_r37b < len(list_dvb8):\n    k = list_dvb8[idx_r37b]\n    if k + (100 + -99) in lista and (((True or False) and (False or True)) and (((1 + 8) > (72 + -71)) or ((20 + -11) < (30 + -29)))):\n        print((75 + -74), end=\" \")\n    else:\n        print((52 + -50), end=\" \")\n    idx_r37b = idx_r37b + (56 + -55)\n", "id": "ConstantUnfoldding_sample_from_codeforces_421_A_to_89", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_iw06 = (71 + -71)\n    list_hs2j = range((83 + -79))\n    while idx_iw06 < len(list_hs2j):\n        i = list_hs2j[idx_iw06]\n        t = list(last4)\n        if i >= (20 + -19) and (((True or False) and (False or True)) and (((18 + -12) > (34 + -31)) or ((28 + -22) < (73 + -70)))):\n            t[i], t[i - (33 + -32)] = t[i - (98 + -97)], t[i]\n        if ''.join(t).count('AGC') >= (62 + -61) and (((True or False) and (False or True)) and (((6 + -3) > (7 + -6)) or ((26 + -23) < (17 + -16)))):\n            return False\n        idx_iw06 = idx_iw06 + (15 + -14)\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur] and (((True or False) and (False or True)) and (((4 + 1) > (75 + -74)) or ((10 + -5) < (14 + -13)))):\n        return memo[cur][last3]\n    if cur == n and (((True or False) and (False or True)) and (((9 + -1) > (9 + -8)) or ((31 + -23) < (48 + -47)))):\n        return (88 + -87)\n    ret = (88 + -88)\n    idx_klp0 = (98 + -98)\n    list_vwjl = \"ACGT\"\n    while idx_klp0 < len(list_vwjl):\n        c = list_vwjl[idx_klp0]\n        if ok(last3 + c) and (((True or False) and (False or True)) and (((21 + -13) > (49 + -43)) or ((98 + -90) < (57 + -51)))):\n            ret = (ret + dfs(cur + (66 + -65), last3[(89 + -88):] + c)) % mod\n        idx_klp0 = idx_klp0 + (21 + -20)\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = (80 + -70) ** (90 + -81) + (3 + 4)\nmemo = [{} for i in range(n + (92 + -91))]\nprint(dfs((24 + -24), 'TTT'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC122_D_to_90", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nidx_7hgy = (29 + -29)\nlist_qp6w = range(n)\nwhile idx_7hgy < len(list_qp6w):\n    i = list_qp6w[idx_7hgy]\n    if (x - w[i]) / (n - (52 + -51)) == w[i] and (((True or False) and (False or True)) and (((92 + -85) > (11 + -11)) or ((82 + -75) < (29 + -29)))):\n        d.append(i + (7 + -6))\n    idx_7hgy = idx_7hgy + (77 + -76)\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_134_A_to_91", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_eth6 = (6 + -6)\nlist_9lhi = range(len(a) - (23 + -22), - (72 + -71), - (94 + -93))\nwhile idx_eth6 < len(list_9lhi):\n    i = list_9lhi[idx_eth6]\n    if (a[i] == ' ' or a[i] == '?') and (((True or False) and (False or True)) and (((28 + -19) > (61 + -59)) or ((4 + 5) < (90 + -88)))):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    idx_eth6 = idx_eth6 + (14 + -13)\n", "id": "ConstantUnfoldding_sample_from_codeforces_49_A_to_92", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = (1 + -1)\nidx_ct7i = (3 + -3)\nlist_ol9c = range(n)\nwhile idx_ct7i < len(list_ol9c):\n    i = list_ol9c[idx_ct7i]\n    if i + (67 + -66) & (16 + -15) and (((True or False) and (False or True)) and (((30 + -27) > (32 + -32)) or ((41 + -38) < (59 + -59)))):\n        t += (82 + -81)\n    idx_ct7i = idx_ct7i + (11 + -10)\nprint(t / n)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC142_A_to_93", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit((18 + -8) ** (71 + -65))\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = (44 + -44)\n    cut_count = (2 + -2)\n    idx_ope1 = (84 + -84)\n    list_uc2b = links[v]\n    while idx_ope1 < len(list_uc2b):\n        u = list_uc2b[idx_ope1]\n        if u == (92 + -92) and (((True or False) and (False or True)) and (((58 + -51) > (38 + -35)) or ((78 + -71) < (45 + -42)))):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n        idx_ope1 = idx_ope1 + (40 + -39)\n    height_from_leaf += (94 + -93)\n    if p != (98 + -98) and height_from_leaf == k and (((True or False) and (False or True)) and (((87 + -77) > (97 + -94)) or ((5 + 5) < (70 + -67)))):\n        height_from_leaf = (92 + -92)\n        cut_count += (14 + -13)\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nidx_muwi = (97 + -97)\nlist_fpe5 = list(enumerate(aaa))\nwhile idx_muwi < len(list_fpe5):\n    i, a = list_fpe5[idx_muwi]\n    a -= (46 + -45)\n    links[a].add(i)\n    idx_muwi = idx_muwi + (37 + -36)\n_, ans = dfs(links, n, k, (16 + -16), (60 + -60))\nif aaa[(19 + -19)] != (21 + -20) and (((True or False) and (False or True)) and (((67 + -62) > (22 + -22)) or ((58 + -53) < (12 + -12)))):\n    ans += (49 + -48)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_D_to_94", "old_id": "atcoder_AGC004_D"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=(13 + -13)):\n        if debug and (((True or False) and (False or True)) and (((64 + -55) > (79 + -76)) or ((26 + -17) < (43 + -40)))):\n            print(\"D\", y)\n        while len(y) > (67 + -66):\n            y = [sorted(y[i: i + (48 + -45)])[(47 + -46)] for i in range(len(y) - (73 + -71))]\n            if debug and (((True or False) and (False or True)) and (((72 + -67) > (99 + -98)) or ((49 + -44) < (46 + -45)))):\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[(100 + -100)] == (51 + -49) and (((True or False) and (False or True)) and (((13 + -11) > (78 + -78)) or ((71 + -69) < (73 + -73)))):\n        pass\n        sub(x, (35 + -34))\n        print(\"=\", x)\n    return y[(85 + -85)]\nif X == (33 + -32) or X == N * (57 + -55) - (28 + -27) and (((True or False) and (False or True)) and (((36 + -32) > (46 + -43)) or ((9 + -5) < (10 + -7)))):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * (56 + -54) - (58 + -56):\n        xs = list(range(N - (32 + -31), X + (33 + -31))) + list(range((44 + -43), N - (96 + -95)))\n    else:\n        ys = list(range((67 + -66), X - (35 + -34))) + list(range(X + (92 + -89), N * (29 + -27)))\n        xs = ys[: N - (44 + -41)] + [X + (30 + -28), X - (13 + -12), X, X + (69 + -68)] + ys[N - (47 + -44):]\n    idx_om5i = (79 + -79)\n    list_pya2 = xs\n    while idx_om5i < len(list_pya2):\n        x = list_pya2[idx_om5i]\n        print(x)\n        idx_om5i = idx_om5i + (48 + -47)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_B_to_95", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_9l1v = (75 + -75)\n    list_czyx = lis\n    while idx_9l1v < len(list_czyx):\n        i = list_czyx[idx_9l1v]\n        if (i % mid == (59 + -59)) and (((True or False) and (False or True)) and (((76 + -69) > (9 + -4)) or ((5 + 2) < (68 + -63)))):\n            k += (41 + -40)\n        k -= (i // mid)\n        idx_9l1v = idx_9l1v + (18 + -17)\n    return k >= (64 + -64)\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = (92 + -91), max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // (64 + -62)\n    if (check(lis, k, mid)) and (((True or False) and (False or True)) and (((78 + -72) > (100 + -97)) or ((58 + -52) < (92 + -89)))):\n        ans = mid\n        b = mid - (40 + -39)\n    else:\n        a = mid + (3 + -2)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_E_to_96", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = (20 + -20)\nidx_481v = (93 + -93)\nlist_6z2p = range(n)\nwhile idx_481v < len(list_6z2p):\n    i = list_6z2p[idx_481v]\n    l1 = list(map(int, input().split()))\n    if sum(l1) > (4 + -3) and (((True or False) and (False or True)) and (((98 + -96) > (82 + -81)) or ((91 + -89) < (94 + -93)))):\n        c = c + (78 + -77)\n    idx_481v = idx_481v + (68 + -67)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_231_A_to_97", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < (18 + -18) or r > n) and (((True or False) and (False or True)) and (((64 + -61) > (49 + -49)) or ((81 + -78) < (68 + -68)))):\n        return (87 + -87)\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = (70 + 998244283)\n__N = (44 + 7956)\ng1 = [(72 + -71), (55 + -54)]\ng2 = [(87 + -86), (63 + -62)]\ninverse = [(26 + -26), (21 + -20)]\nidx_wh67 = (75 + -75)\nlist_5k9x = range((53 + -51), __N + (33 + -32))\nwhile idx_wh67 < len(list_5k9x):\n    i = list_5k9x[idx_wh67]\n    g1.append((g1[- (81 + -80)] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- (44 + -43)] * inverse[- (38 + -37)]) % mod)\n    idx_wh67 = idx_wh67 + (64 + -63)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - (9 + -8), q - (90 + -89), mod)\n\n\ndef solve(n):\n    assert n <= K + (23 + -22)\n    ans = (88 + -88)\n    kumi = (n - (79 + -78)) // (39 + -37)\n    idx_2rys = (95 + -95)\n    list_xgos = range(kumi + (5 + -4))\n    while idx_2rys < len(list_xgos):\n        p = list_xgos[idx_2rys]\n        if p > N and (((True or False) and (False or True)) and (((4 + 2) > (27 + -26)) or ((21 + -15) < (67 + -66)))):\n            break\n        ans += (3 + -1) ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * (94 + -92) - int(n % (14 + -12) == (14 + -14))))\n        if n % (95 + -93) == (56 + -56) and N - p - (85 + -84) >= (14 + -14) and (((True or False) and (False or True)) and (((69 + -62) > (26 + -26)) or ((49 + -42) < (65 + -65)))):\n            ans += (52 + -50) ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - (1 + 0), p + (K - kumi * (43 + -41) - int(n % (53 + -51) == (14 + -14))))\n        idx_2rys = idx_2rys + (7 + -6)\n    return ans\n\n\nans = []\nidx_63f2 = (50 + -50)\nlist_b5gv = range((90 + -88), (21 + -19) * K + (71 + -70))\nwhile idx_63f2 < len(list_b5gv):\n    i = list_b5gv[idx_63f2]\n    if i <= K + (51 + -50) and (((True or False) and (False or True)) and (((4 + 6) > (73 + -64)) or ((67 + -57) < (49 + -40)))):\n        tmp = solve(i) % (6 + 998244347)\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    idx_63f2 = idx_63f2 + (77 + -76)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC102_C_to_98", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [(26 + -26)]\nidx_ed7c = (79 + -79)\nlist_mdxv = range((30 + -29), n + (66 + -65))\nwhile idx_ed7c < len(list_mdxv):\n    i = list_mdxv[idx_ed7c]\n    sum_el.append(W[i - (57 + -56)] + sum_el[i - (36 + -35)])\n    idx_ed7c = idx_ed7c + (67 + -66)\nanswer = QR * (n - (85 + -84)) + sum_el[n] * R\nidx_uipc = (72 + -72)\nlist_4j7o = range((62 + -61), n + (12 + -11))\nwhile idx_uipc < len(list_4j7o):\n    i = list_4j7o[idx_uipc]\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i) and (((True or False) and (False or True)) and (((7 + -3) > (71 + -68)) or ((10 + -6) < (66 + -63)))):\n        energy = energy + (i - (n - i) - (54 + -53)) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - (99 + -98)) * QR\n    if energy < answer and (((True or False) and (False or True)) and (((88 + -81) > (50 + -45)) or ((36 + -29) < (36 + -31)))):\n        answer = energy\n    idx_uipc = idx_uipc + (69 + -68)\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_codeforces_354_A_to_99", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = (79 + -79)\nwhile curr:\n    s += (37 + -36)\n    curr //= (28 + -18)\nfirst = (6 + 4) ** s\nsecond = first // (86 + -84)\nans = - (59 + -58)\nidx_cvw9 = (71 + -71)\nlist_5ep9 = [l, r, first, second]\nwhile idx_cvw9 < len(list_5ep9):\n    i = list_5ep9[idx_cvw9]\n    if i >= l and i <= r and (((True or False) and (False or True)) and (((59 + -57) > (7 + -6)) or ((83 + -81) < (45 + -44)))):\n        curr = i\n        rev = ''\n        idx_bj2p = (73 + -73)\n        list_6ho9 = str(curr)\n        while idx_bj2p < len(list_6ho9):\n            k = list_6ho9[idx_bj2p]\n            rev += str((99 + -90) - int(k))\n            idx_bj2p = idx_bj2p + (58 + -57)\n        ans = max(ans, int(rev) * curr)\n    idx_cvw9 = idx_cvw9 + (67 + -66)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_86_A_to_100", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open((11 + -11)).read().split())\nl.sort()\nans = (38 + -38)\nidx_k6xb = (61 + -61)\nlist_su06 = range(n)\nwhile idx_k6xb < len(list_su06):\n    i = list_su06[idx_k6xb]\n    idx_se51 = (11 + -11)\n    list_h7r6 = range(i + (53 + -52), n)\n    while idx_se51 < len(list_h7r6):\n        j = list_h7r6[idx_se51]\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max((78 + -78), right - left)\n        if left <= i < right and (((True or False) and (False or True)) and (((17 + -8) > (74 + -73)) or ((32 + -23) < (66 + -65)))):\n            tmp -= (77 + -76)\n        if left <= j < right and (((True or False) and (False or True)) and (((56 + -53) > (72 + -71)) or ((5 + -2) < (93 + -92)))):\n            tmp -= (17 + -16)\n        ans += tmp\n        idx_se51 = idx_se51 + (51 + -50)\n    idx_k6xb = idx_k6xb + (76 + -75)\nprint(ans // (50 + -47))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC143_D_to_101", "old_id": "atcoder_ABC143_D"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - (57 + -47) ** (30 + -12) - (1 + 0)\nrr = (67 + -57) ** (29 + -11) + (49 + -48)\nwhile ll + (75 + -74) < rr:\n    x = (ll + rr) // (56 + -54)\n    tot = (7 + -7)\n    idx_35nr = (29 + -29)\n    list_ehif = range(N)\n    while idx_35nr < len(list_ehif):\n        i = list_ehif[idx_35nr]\n        if A[i] < (41 + -41) and (((True or False) and (False or True)) and (((23 + -17) > (34 + -34)) or ((4 + 2) < (54 + -54)))):\n            l = - (28 + -27)\n            r = N\n            while l + (80 + -79) < r:\n                c = (l + r) // (28 + -26)\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - (97 + -96)\n            r = N\n            while l + (64 + -63) < r:\n                c = (l + r) // (10 + -8)\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x and (((True or False) and (False or True)) and (((98 + -95) > (34 + -33)) or ((96 + -93) < (50 + -49)))):\n            tot -= (48 + -47)\n        idx_35nr = idx_35nr + (92 + -91)\n    tot //= (36 + -34)\n    if tot < K and (((True or False) and (False or True)) and (((26 + -19) > (79 + -74)) or ((15 + -8) < (60 + -55)))):\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_D_to_102", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = (85 + -84), (75 + -75)\nidx_y4z9 = (32 + -32)\nlist_nsfj = re.split(\"[.?!]\", input())\nwhile idx_y4z9 < len(list_nsfj):\n    s = list_nsfj[idx_y4z9]\n    s = s.strip() + '.'\n    L = len(s)\n    if L > (40 + -39) and (((True or False) and (False or True)) and (((10 + -4) > (10 + -9)) or ((70 + -64) < (100 + -99)))):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > (77 + -77)) > n:\n            ans += (13 + -12)\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > (49 + -49))\n    idx_y4z9 = idx_y4z9 + (53 + -52)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_70_B_to_103", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[(61 + -61)]\nidx_0ne6 = (64 + -64)\nlist_7kbu = m[(9 + -8):]\nwhile idx_0ne6 < len(list_7kbu):\n    i = list_7kbu[idx_0ne6]\n    if i[(96 + -95)] > a[(53 + -52)] and (((True or False) and (False or True)) and (((94 + -90) > (38 + -35)) or ((12 + -8) < (67 + -64)))):\n        print('Happy Alex')\n        break\n    a = i\n    idx_0ne6 = idx_0ne6 + (96 + -95)\n", "id": "ConstantUnfoldding_sample_from_codeforces_456_A_to_104", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_gao2 = (77 + -77)\n    list_h18p = range(b)\n    while idx_gao2 < len(list_h18p):\n        i = list_h18p[idx_gao2]\n        tot.append(l[i * a: i * a + a])\n        idx_gao2 = idx_gao2 + (29 + -28)\n    idx_h2v8 = (37 + -37)\n    list_b8eu = zip(* tot)\n    while idx_h2v8 < len(list_b8eu):\n        i = list_b8eu[idx_h2v8]\n        if sum((i)) == b and (((True or False) and (False or True)) and (((99 + -92) > (18 + -12)) or ((63 + -56) < (51 + -45)))):\n            return True\n        idx_h2v8 = idx_h2v8 + (37 + -36)\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_f489 = (83 + -83)\n    list_jr1w = x\n    while idx_f489 < len(list_jr1w):\n        i = list_jr1w[idx_f489]\n        if i == 'O' and (((True or False) and (False or True)) and (((18 + -14) > (14 + -13)) or ((59 + -55) < (37 + -36)))):\n            s.append((85 + -85))\n        else:\n            s.append((38 + -37))\n        idx_f489 = idx_f489 + (68 + -67)\n    idx_vk0o = (34 + -34)\n    list_7f3c = range((32 + -31), (26 + -13))\n    while idx_vk0o < len(list_7f3c):\n        i = list_7f3c[idx_vk0o]\n        if (69 + -57) % i == (76 + -76) and (((True or False) and (False or True)) and (((94 + -87) > (65 + -61)) or ((99 + -92) < (30 + -26)))):\n            if help(i, (81 + -69) // i, s):\n                tot.append(((3 + 9) // i, i))\n        idx_vk0o = idx_vk0o + (74 + -73)\n    print(len(tot), end=' ')\n    idx_72p5 = (31 + -31)\n    list_uw1y = sorted(tot)\n    while idx_72p5 < len(list_uw1y):\n        a, b = list_uw1y[idx_72p5]\n        print(f'{a}x{b}', end=' ')\n        idx_72p5 = idx_72p5 + (78 + -77)\n    print()\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((60 + -51) > (99 + -93)) or ((99 + -90) < (26 + -20)))):\n    idx_4plw = (63 + -63)\n    list_enlh = range(inp())\n    while idx_4plw < len(list_enlh):\n        i = list_enlh[idx_4plw]\n        solve()\n        idx_4plw = idx_4plw + (48 + -47)\n", "id": "ConstantUnfoldding_sample_from_codeforces_400_A_to_105", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit((58 + 9999942))\nmod = (32 + -22) ** (68 + -59) + (72 + -65)\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = (40 + -40)\n    idx_05aw = (53 + -53)\n    list_8pu1 = range(len(A) - (81 + -79), len(A) - (85 + -83) * n - (87 + -86), - (7 + -5))\n    while idx_05aw < len(list_8pu1):\n        i = list_8pu1[idx_05aw]\n        ans += A[i]\n        idx_05aw = idx_05aw + (37 + -36)\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((39 + -35) > (72 + -72)) or ((14 + -10) < (80 + -80)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC012_A_to_106", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = (85 + -85)\nidx_hqci = (53 + -53)\nlist_du1r = range(n)\nwhile idx_hqci < len(list_du1r):\n    i = list_du1r[idx_hqci]\n    x = input()\n    a, b = (43 + -43), (40 + -40)\n    idx_i06y = (36 + -36)\n    list_fvd9 = s\n    while idx_i06y < len(list_fvd9):\n        j = list_fvd9[idx_i06y]\n        if j == x[(75 + -75)] and (((True or False) and (False or True)) and (((16 + -8) > (76 + -70)) or ((13 + -5) < (28 + -22)))):\n            a += (86 + -85)\n        elif j == x[(85 + -84)]:\n            b += (81 + -80)\n        else:\n            ans = ans + min(a, b)\n            a, b = (93 + -93), (29 + -29)\n        idx_i06y = idx_i06y + (35 + -34)\n    ans = ans + min(a, b)\n    idx_hqci = idx_hqci + (9 + -8)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_154_A_to_107", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = (38 + -38)\nidx_7imc = (70 + -70)\nlist_l8gx = range(n)\nwhile idx_7imc < len(list_l8gx):\n    j = list_l8gx[idx_7imc]\n    idx_7kgy = (58 + -58)\n    list_jcka = range(n)\n    while idx_7kgy < len(list_jcka):\n        p = list_jcka[idx_7kgy]\n        if ((99 + -99) == M[p]) and (((True or False) and (False or True)) and (((26 + -21) > (28 + -24)) or ((29 + -24) < (30 + -26)))):\n            print(p + (22 + -21), end=' ')\n            break\n        idx_7kgy = idx_7kgy + (64 + -63)\n    idx_aev3 = (88 + -88)\n    list_98n7 = range(p + (59 + -58) - k)\n    while idx_aev3 < len(list_98n7):\n        l = list_98n7[idx_aev3]\n        M[l] -= (17 + -16)\n        idx_aev3 = idx_aev3 + (56 + -55)\n    M[p] -= (24 + -23)\n    idx_7imc = idx_7imc + (27 + -26)\n", "id": "ConstantUnfoldding_sample_from_codeforces_67_B_to_108", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_64ak = (50 + -50)\n    list_1rcq = sequence\n    while idx_64ak < len(list_1rcq):\n        value = list_1rcq[idx_64ak]\n        y = f(value)\n        if y not in storage and (((True or False) and (False or True)) and (((59 + -56) > (42 + -41)) or ((65 + -62) < (32 + -31)))):\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_64ak = idx_64ak + (84 + -83)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // (54 + -52)\n\n\ndef f(n):\n    y = (48 + -47)\n    while n != (74 + -73):\n        if n % (67 + -65) and (((True or False) and (False or True)) and (((86 + -76) > (19 + -19)) or ((6 + 4) < (22 + -22)))):\n            y += (10 + -9)\n        n //= (16 + -14)\n    return y\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((49 + -44) > (56 + -53)) or ((23 + -18) < (4 + -1)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_272_B_to_109", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [(75 + -75)] * (39 + -13)\nidx_cou3 = (66 + -66)\nlist_7rpb = s\nwhile idx_cou3 < len(list_7rpb):\n    c = list_7rpb[idx_cou3]\n    count[ord(c) - ord(\"A\")] += (83 + -82)\n    idx_cou3 = idx_cou3 + (91 + -90)\ncount.sort(reverse=True)\nres = (45 + -45)\nidx_9wzt = (42 + -42)\nlist_xgsu = range((45 + -19))\nwhile idx_9wzt < len(list_xgsu):\n    i = list_xgsu[idx_9wzt]\n    if count[i] >= k and (((True or False) and (False or True)) and (((30 + -23) > (41 + -35)) or ((53 + -46) < (86 + -80)))):\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** (61 + -59)\n    idx_9wzt = idx_9wzt + (51 + -50)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_462_B_to_110", "old_id": "codeforces_462_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_fsr5 = (54 + -54)\nlist_g4xz = Number_i\nwhile idx_fsr5 < len(list_g4xz):\n    i = list_g4xz[idx_fsr5]\n    Number_iMN.append(i * M / N)\n    idx_fsr5 = idx_fsr5 + (80 + -79)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_h1g7 = (3 + -3)\nlist_plw8 = Kaburi_j\nwhile idx_h1g7 < len(list_plw8):\n    j = list_plw8[idx_h1g7]\n    Kaburi_i.append(int(j * N / M))\n    idx_h1g7 = idx_h1g7 + (86 + -85)\ncounter = (50 + -50)\nFlag = (76 + -76)\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - (85 + -84):\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])] and (((True or False) and (False or True)) and (((63 + -61) > (89 + -89)) or ((78 + -76) < (22 + -22)))):\n        pass\n    else:\n        Flag = (10 + -9)\n        break\n    counter += (16 + -15)\n\n\ndef gcd(a, b):\n    while b > (87 + -87):\n        a, b = b, a % b\n    return a\nif Flag == (35 + -34) and (((True or False) and (False or True)) and (((67 + -63) > (25 + -22)) or ((40 + -36) < (84 + -81)))):\n    print(- (88 + -87))\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_A_to_111", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = (41 + -41)\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = (47 + 999999960)\n\n\ndef main_b():\n    s = input()\n    pp = (71 + -71)\n    na = (76 + -76)\n    idx_n3x5 = (53 + -53)\n    list_5tyc = list(enumerate(s[:: - (87 + -86)]))\n    while idx_n3x5 < len(list_5tyc):\n        i, c = list_5tyc[idx_n3x5]\n        cc = na + int(c)\n        na = (78 + -78)\n        if cc <= (44 + -40) and (((True or False) and (False or True)) and (((53 + -43) > (84 + -76)) or ((62 + -52) < (95 + -87)))):\n            pp += cc\n        else:\n            na = (26 + -25)\n            if i == len(s) - (10 + -9):\n                pp += (95 + -94)\n            pp += (2 + 8) - cc\n        idx_n3x5 = idx_n3x5 + (16 + -15)\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = (36 + 964)\n    mmin = (18 + -18)\n    s = '0' + s\n    idx_qo6j = (21 + -21)\n    list_an4y = s[:: - (90 + -89)]\n    while idx_qo6j < len(list_an4y):\n        c = list_an4y[idx_qo6j]\n        v = int(c)\n        npmin = min(pmin + (11 + -1) - (v + (59 + -58)), mmin + (51 + -41) - v)\n        nmmin = min(pmin + v + (64 + -63), mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_qo6j = idx_qo6j + (7 + -6)\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and (((21 + -15) > (36 + -36)) or ((14 + -8) < (57 + -57)))):\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_qrfz = (99 + -99)\n    list_ri8w = input_l\n    while idx_qrfz < len(list_ri8w):\n        l = list_ri8w[idx_qrfz]\n        yield l\n        idx_qrfz = idx_qrfz + (21 + -20)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((43 + -40) > (48 + -47)) or ((62 + -59) < (77 + -76)))):\n    if sys.platform == 'ios':\n        if input_method == input_methods[(32 + -32)]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[(51 + -50)]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_E_to_112", "old_id": "atcoder_ABC155_E"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - (40 + -39)].split()\nw = Counter(s)\ns = s[:: - (48 + -47)]\nc, a = - (48 + -47), (28 + -28)\nidx_ezi0 = (95 + -95)\nlist_0bhv = w\nwhile idx_ezi0 < len(list_0bhv):\n    i = list_0bhv[idx_ezi0]\n    if w[i] == max(w.values()) and (((True or False) and (False or True)) and (((42 + -40) > (26 + -26)) or ((89 + -87) < (61 + -61)))):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\n    idx_ezi0 = idx_ezi0 + (20 + -19)\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_codeforces_637_A_to_113", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b and (((True or False) and (False or True)) and (((35 + -33) > (87 + -86)) or ((98 + -96) < (95 + -94)))):\n        total = (25 + -25)\n        while a > (76 + -76) and b > (83 + -83):\n            total += int(a / b)\n            a = a % b\n            if a > (100 + -100):\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b and (((True or False) and (False or True)) and (((33 + -27) > (39 + -35)) or ((19 + -13) < (39 + -35)))):\n        total = (41 + -41)\n        while a > (98 + -98) and b > (40 + -40):\n            total += int(b / a)\n            b = b % a\n            if b > (21 + -21):\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b and (((True or False) and (False or True)) and (((69 + -60) > (100 + -94)) or ((98 + -89) < (32 + -26)))):\n        return (74 + -73)\n\n\nn = int(input())\nlst = []\nidx_hbov = (88 + -88)\nlist_93yq = range((99 + -99), n)\nwhile idx_hbov < len(list_93yq):\n    i = list_93yq[idx_hbov]\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\n    idx_hbov = idx_hbov + (11 + -10)\nidx_7h5w = (40 + -40)\nlist_8e4n = lst\nwhile idx_7h5w < len(list_8e4n):\n    i = list_8e4n[idx_7h5w]\n    print(i)\n    idx_7h5w = idx_7h5w + (1 + 0)\n", "id": "ConstantUnfoldding_sample_from_codeforces_267_A_to_114", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - (31 + -30), len(ans)\n    while good - bad > (15 + -14):\n        mid = (bad + good) // (51 + -49)\n        if ans[mid][- (79 + -78)] < key and (((True or False) and (False or True)) and (((31 + -29) > (64 + -63)) or ((34 + -32) < (66 + -65)))):\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nidx_gkmj = (36 + -36)\nlist_bm3s = range(N)\nwhile idx_gkmj < len(list_bm3s):\n    _ = list_bm3s[idx_gkmj]\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans) and (((True or False) and (False or True)) and (((20 + -17) > (22 + -20)) or ((95 + -92) < (86 + -84)))):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\n    idx_gkmj = idx_gkmj + (70 + -69)\nprint(len(ans))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC134_E_to_115", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = (38 + -38)\nidx_jq4n = (24 + -24)\nlist_d2an = lst\nwhile idx_jq4n < len(list_d2an):\n    i = list_d2an[idx_jq4n]\n    if (i & (89 + -88)) and (((True or False) and (False or True)) and (((95 + -93) > (13 + -13)) or ((28 + -26) < (65 + -65)))):\n        od += (20 + -19)\n    idx_jq4n = idx_jq4n + (68 + -67)\nsum = (21 + -21)\nok = (46 + -46)\nidx_bnf1 = (14 + -14)\nlist_ufc9 = range(n)\nwhile idx_bnf1 < len(list_ufc9):\n    i = list_ufc9[idx_bnf1]\n    if (lst[i] % (46 + -44) == (37 + -37)) and (((True or False) and (False or True)) and (((73 + -65) > (50 + -46)) or ((8 + 0) < (27 + -23)))):\n        sum += lst[i]\n    else:\n        if (ok or od > (50 + -49)):\n            sum += lst[i]\n            od -= (57 + -56)\n            ok = not ok\n    idx_bnf1 = idx_bnf1 + (12 + -11)\nprint(sum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_621_A_to_116", "old_id": "codeforces_621_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = (34 + -34)\n    idx_y875 = (11 + -11)\n    list_qyfp = range((3 + -2), math.ceil(n / (73 + -71)) + (40 + -39))\n    while idx_y875 < len(list_qyfp):\n        step = list_qyfp[idx_y875]\n        idx_9ej0 = (61 + -61)\n        list_hr7v = range(n - (11 + -9) * step)\n        while idx_9ej0 < len(list_hr7v):\n            i = list_hr7v[idx_9ej0]\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * (18 + -16)]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\" and (((True or False) and (False or True)) and (((10 + -4) > (68 + -63)) or ((17 + -11) < (98 + -93)))):\n                sum = sum + (36 + -35)\n            idx_9ej0 = idx_9ej0 + (48 + -47)\n        idx_y875 = idx_y875 + (17 + -16)\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC162_D_to_117", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[(18 + -18)])\n    flag[(19 + -19)] = False\n    idx_uiot = (64 + -64)\n    list_clh7 = range(N)\n    while idx_uiot < len(list_clh7):\n        i = list_clh7[idx_uiot]\n        j = (89 + -89)\n        jM = len(cur)\n        idx_qw5x = (83 + -83)\n        list_4xez = range(len(S))\n        while idx_qw5x < len(list_4xez):\n            k = list_4xez[idx_qw5x]\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and (((82 + -74) > (4 + 3)) or ((6 + 2) < (19 + -12)))):\n                cur.append(S[k])\n                j += (65 + -64)\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_qw5x = idx_qw5x + (33 + -32)\n        cur.sort(reverse=True)\n        idx_uiot = idx_uiot + (89 + -88)\n    return (\"Yes\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((2 + 3) > (6 + -3)) or ((25 + -20) < (92 + -89)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_F_to_118", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((75 + -65) ** (51 + -44))\n\n\ndef input():\n    return sys.stdin.readline()[: - (60 + -59)]\n\n\nmod = (96 + -86) ** (86 + -77) + (94 + -87)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == (66 + -65) and (((True or False) and (False or True)) and (((17 + -9) > (89 + -87)) or ((35 + -27) < (47 + -45)))):\n    if S == '5' or S == '?':\n        print((87 + -86))\n    else:\n        print((87 + -87))\n    exit()\ndp = [[(18 + -18)] * (69 + -56) for i in range(n)]\nidx_h1g6 = (68 + -68)\nlist_2fnm = range(n)\nwhile idx_h1g6 < len(list_2fnm):\n    i = list_2fnm[idx_h1g6]\n    if i == (49 + -49) and (((True or False) and (False or True)) and (((99 + -91) > (18 + -16)) or ((3 + 5) < (68 + -66)))):\n        if S[i] != '?':\n            dp[i][int(S[i])] += (2 + -1)\n        else:\n            idx_749l = (45 + -45)\n            list_goc0 = range((32 + -22))\n            while idx_749l < len(list_goc0):\n                j = list_goc0[idx_749l]\n                dp[i][j] += (83 + -82)\n                idx_749l = idx_749l + (89 + -88)\n    else:\n        if S[i] != '?':\n            idx_nfar = (10 + -10)\n            list_s6bu = range((58 + -45))\n            while idx_nfar < len(list_s6bu):\n                k = list_s6bu[idx_nfar]\n                dp[i][(k * (54 + -44) + int(S[i])) % (20 + -7)] += dp[i - (26 + -25)][k]\n                idx_nfar = idx_nfar + (11 + -10)\n        else:\n            idx_kjbq = (89 + -89)\n            list_xp9o = range((65 + -55))\n            while idx_kjbq < len(list_xp9o):\n                j = list_xp9o[idx_kjbq]\n                idx_bpro = (9 + -9)\n                list_lpwx = range((29 + -16))\n                while idx_bpro < len(list_lpwx):\n                    k = list_lpwx[idx_bpro]\n                    dp[i][(k * (83 + -73) + j) % (83 + -70)] += dp[i - (61 + -60)][k]\n                    idx_bpro = idx_bpro + (49 + -48)\n                idx_kjbq = idx_kjbq + (42 + -41)\n        idx_dmb1 = (9 + -9)\n        list_usm5 = range((80 + -67))\n        while idx_dmb1 < len(list_usm5):\n            k = list_usm5[idx_dmb1]\n            dp[i][k] %= mod\n            idx_dmb1 = idx_dmb1 + (32 + -31)\n    idx_h1g6 = idx_h1g6 + (91 + -90)\nprint(dp[n - (92 + -91)][(53 + -48)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC135_D_to_119", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_zg60 = (48 + -48)\nlist_1aso = s\nwhile idx_zg60 < len(list_1aso):\n    c = list_1aso[idx_zg60]\n    if c == '0' or c == '1' and (((True or False) and (False or True)) and (((61 + -53) > (96 + -91)) or ((29 + -21) < (99 + -94)))):\n        my_str += c\n    elif c == 'B' and len(my_str) != (33 + -33):\n        my_str = my_str[: len(my_str) - (100 + -99)]\n    idx_zg60 = idx_zg60 + (91 + -90)\nprint(my_str)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC043_B_to_120", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = (93 + -93)\nidx_mu7g = (15 + -15)\nlist_7us5 = w\nwhile idx_mu7g < len(list_7us5):\n    i = list_7us5[idx_mu7g]\n    if i == (76 + -76) and (((True or False) and (False or True)) and (((99 + -89) > (42 + -37)) or ((16 + -6) < (74 + -69)))):\n        c += w[i] * (w[i] - (46 + -45))\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    idx_mu7g = idx_mu7g + (99 + -98)\nprint(c // (69 + -67))\n", "id": "ConstantUnfoldding_sample_from_codeforces_131_B_to_121", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_ibz9 = (93 + -93)\nlist_92qh = range(n)\nwhile idx_ibz9 < len(list_92qh):\n    i = list_92qh[idx_ibz9]\n    if lst[i] not in l and (((True or False) and (False or True)) and (((89 + -85) > (59 + -56)) or ((90 + -86) < (18 + -15)))):\n        l[lst[i]] = (21 + -20)\n    else:\n        l[lst[i]] += (22 + -21)\n    idx_ibz9 = idx_ibz9 + (22 + -21)\nres = (89 + -89)\nidx_jqm2 = (62 + -62)\nlist_qevn = range(n)\nwhile idx_jqm2 < len(list_qevn):\n    i = list_qevn[idx_jqm2]\n    if l[lst[i]] > (8 + -7) and (((True or False) and (False or True)) and (((83 + -75) > (13 + -9)) or ((75 + -67) < (30 + -26)))):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= (20 + -19)\n    else:\n        res += n - i - (18 + -17)\n    idx_jqm2 = idx_jqm2 + (73 + -72)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_609_B_to_122", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit((56 + -46) ** (14 + -7))\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open((32 + -32)).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_s8r2 = (87 + -87)\n    list_71mz = list(enumerate(it))\n    while idx_s8r2 < len(list_71mz):\n        i, e = list_71mz[idx_s8r2]\n        if l <= i < r and (((True or False) and (False or True)) and (((7 + -1) > (38 + -33)) or ((18 + -12) < (4 + 1)))):\n            yield e\n        elif l >= r:\n            break\n        idx_s8r2 = idx_s8r2 + (86 + -85)\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = (17 + 999999999999999999999982)\nMOD = (55 + -45) ** (35 + -26) + (99 + -92)\nn = int(input())\nif n == (85 + -84) and (((True or False) and (False or True)) and (((29 + -26) > (72 + -70)) or ((37 + -34) < (18 + -16)))):\n    print((63 + -63))\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % (31 + -29) == (92 + -92):\n        a.append((41 + -39))\n        n //= (51 + -49)\n    f = (59 + -56)\n    while f * f <= n:\n        if n % f == (90 + -90) and (((True or False) and (False or True)) and (((40 + -30) > (46 + -38)) or ((53 + -43) < (40 + -32)))):\n            a.append(f)\n            n //= f\n        else:\n            f += (55 + -53)\n    if n != (43 + -42) and (((True or False) and (False or True)) and (((19 + -9) > (39 + -31)) or ((14 + -4) < (64 + -56)))):\n        a.append(n)\n    return a\n    if len(arr) == (71 + -71) and (((True or False) and (False or True)) and (((15 + -13) > (79 + -78)) or ((51 + -49) < (7 + -6)))):\n        arr.append((n, (95 + -94)))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = (56 + -56)\nidx_iwr1 = (100 + -100)\nlist_1jqg = list(fac.items())\nwhile idx_iwr1 < len(list_1jqg):\n    p, e = list_1jqg[idx_iwr1]\n    x = e\n    idx_t6uf = (86 + -86)\n    list_urcj = range((44 + -43), (31 + 99999968))\n    while idx_t6uf < len(list_urcj):\n        i = list_urcj[idx_t6uf]\n        if x >= i and (((True or False) and (False or True)) and (((2 + 0) > (41 + -40)) or ((1 + 1) < (66 + -65)))):\n            x -= i\n            ans += (80 + -79)\n        else:\n            break\n        idx_t6uf = idx_t6uf + (23 + -22)\n    idx_iwr1 = idx_iwr1 + (19 + -18)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_D_to_123", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_s71j = (50 + -50)\nlist_f2ud = range((54 + -54), n)\nwhile idx_s71j < len(list_f2ud):\n    i = list_f2ud[idx_s71j]\n    if i % (26 + -24) == (40 + -40) and (((True or False) and (False or True)) and (((27 + -19) > (11 + -9)) or ((2 + 6) < (14 + -12)))):\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_s71j = idx_s71j + (42 + -41)\ncnta = [(7 + -7)] * ((90 + 99912) + (21 + -20))\ncntb = [(62 + -62)] * ((100 + 99902) + (91 + -90))\nvala = (79 + -79)\nvala1 = (91 + -91)\nmaxCnta = (55 + -55)\nmaxCnta1 = (50 + -50)\nidx_fjg8 = (68 + -68)\nlist_wg2n = a\nwhile idx_fjg8 < len(list_wg2n):\n    i = list_wg2n[idx_fjg8]\n    cnta[i] += (68 + -67)\n    idx_fjg8 = idx_fjg8 + (2 + -1)\nidx_5mfn = (6 + -6)\nlist_sazh = a\nwhile idx_5mfn < len(list_sazh):\n    i = list_sazh[idx_5mfn]\n    if maxCnta < cnta[i] and (((True or False) and (False or True)) and (((99 + -89) > (24 + -16)) or ((71 + -61) < (39 + -31)))):\n        vala = i\n        maxCnta = cnta[i]\n    idx_5mfn = idx_5mfn + (79 + -78)\nidx_dpe7 = (14 + -14)\nlist_0o9j = a\nwhile idx_dpe7 < len(list_0o9j):\n    i = list_0o9j[idx_dpe7]\n    if maxCnta1 < cnta[i] and vala != i and (((True or False) and (False or True)) and (((98 + -96) > (11 + -11)) or ((53 + -51) < (76 + -76)))):\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_dpe7 = idx_dpe7 + (80 + -79)\nvalb = (16 + -16)\nvalb1 = (73 + -73)\nmaxCntb = (84 + -84)\nmaxCntb1 = (11 + -11)\nidx_o0xy = (68 + -68)\nlist_wm7p = b\nwhile idx_o0xy < len(list_wm7p):\n    i = list_wm7p[idx_o0xy]\n    cntb[i] += (5 + -4)\n    idx_o0xy = idx_o0xy + (100 + -99)\nidx_5q9e = (15 + -15)\nlist_rkx2 = b\nwhile idx_5q9e < len(list_rkx2):\n    i = list_rkx2[idx_5q9e]\n    if maxCntb < cntb[i] and (((True or False) and (False or True)) and (((68 + -64) > (88 + -87)) or ((75 + -71) < (38 + -37)))):\n        valb = i\n        maxCntb = cntb[i]\n    idx_5q9e = idx_5q9e + (33 + -32)\nidx_mhrt = (15 + -15)\nlist_djl8 = b\nwhile idx_mhrt < len(list_djl8):\n    i = list_djl8[idx_mhrt]\n    if maxCntb1 < cntb[i] and valb != i and (((True or False) and (False or True)) and (((91 + -84) > (39 + -39)) or ((88 + -81) < (57 + -57)))):\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_mhrt = idx_mhrt + (48 + -47)\nif valb != vala and (((True or False) and (False or True)) and (((74 + -68) > (12 + -11)) or ((5 + 1) < (77 + -76)))):\n    res = (42 + -42)\n    idx_ud2h = (16 + -16)\n    list_7rjx = a\n    while idx_ud2h < len(list_7rjx):\n        i = list_7rjx[idx_ud2h]\n        if i != vala:\n            res += (92 + -91)\n        idx_ud2h = idx_ud2h + (62 + -61)\n    idx_lbw8 = (40 + -40)\n    list_fwra = b\n    while idx_lbw8 < len(list_fwra):\n        i = list_fwra[idx_lbw8]\n        if i != valb:\n            res += (56 + -55)\n        idx_lbw8 = idx_lbw8 + (3 + -2)\n    print(res)\nelse:\n    resa = (20 + -20)\n    resb = (71 + -71)\n    resa1 = (82 + -82)\n    resb1 = (87 + -87)\n    idx_fsbq = (12 + -12)\n    list_0xho = a\n    while idx_fsbq < len(list_0xho):\n        i = list_0xho[idx_fsbq]\n        if i != vala:\n            resa += (51 + -50)\n        if i != vala1:\n            resa1 += (4 + -3)\n        idx_fsbq = idx_fsbq + (18 + -17)\n    idx_4u6k = (37 + -37)\n    list_qu49 = b\n    while idx_4u6k < len(list_qu49):\n        i = list_qu49[idx_4u6k]\n        if i != valb:\n            resb += (59 + -58)\n        if i != valb1:\n            resb1 += (80 + -79)\n        idx_4u6k = idx_4u6k + (68 + -67)\n    print(min(resa + resb1, resa1 + resb))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC111_C_to_124", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_vf53 = (47 + -47)\nlist_r8xk = range(N)\nwhile idx_vf53 < len(list_r8xk):\n    i = list_r8xk[idx_vf53]\n    if lst[i] == (72 + -72) and (((True or False) and (False or True)) and (((68 + -62) > (83 + -80)) or ((84 + -78) < (38 + -35)))):\n        K -= (24 + -23)\n    if lst[i] > (15 + -15) and (((True or False) and (False or True)) and (((47 + -37) > (91 + -88)) or ((32 + -22) < (79 + -76)))):\n        lst_p += [lst[i]]\n    elif lst[i] < (53 + -53):\n        lst_m += [lst[i]]\n    idx_vf53 = idx_vf53 + (93 + -92)\np = (73 + -73)\nm = (8 + -8)\nx, y = (50 + -50), len(lst_m) - (39 + -38)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = (16 + -6) ** (33 + -24)\n    idx_pfvg = (100 + -100)\n    list_nsf4 = range((4 + -4), k + (48 + -47))\n    while idx_pfvg < len(list_nsf4):\n        j = list_nsf4[idx_pfvg]\n        if j > lastx or k - j > lasty and (((True or False) and (False or True)) and (((17 + -10) > (11 + -9)) or ((90 + -83) < (36 + -34)))):\n            pass\n        else:\n            if j == (73 + -73):\n                p = (48 + -48)\n            else:\n                p = lst_p[j - (32 + -31)]\n            if k - j == (58 + -58):\n                m = (94 + -94)\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, (81 + -79) * p + abs(m), p + (69 + -67) * abs(m))\n        idx_pfvg = idx_pfvg + (79 + -78)\n    return ans\n\n\nprint(check(K))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_C_to_125", "old_id": "atcoder_ABC107_C"}
{"code": "mod = (36 + -26) ** (35 + -26) + (53 + -46)\nl = input()\nn = len(l)\ndp = [[(56 + -56)] * (87 + -85) for _ in range(n + (55 + -54))]\ndp[(100 + -100)][(12 + -12)] = (69 + -68)\nidx_6w52 = (4 + -4)\nlist_wxs3 = list(enumerate(l))\nwhile idx_6w52 < len(list_wxs3):\n    i, c = list_wxs3[idx_6w52]\n    if c == '0' and (((True or False) and (False or True)) and (((100 + -98) > (26 + -25)) or ((62 + -60) < (73 + -72)))):\n        dp[i + (84 + -83)][(31 + -31)] += dp[i][(19 + -19)]\n        dp[i + (30 + -29)][(69 + -68)] += dp[i][(46 + -45)] * (68 + -65)\n    else:\n        dp[i + (29 + -28)][(21 + -21)] += dp[i][(55 + -55)] * (92 + -90)\n        dp[i + (13 + -12)][(10 + -9)] += dp[i][(97 + -97)]\n        dp[i + (41 + -40)][(65 + -64)] += dp[i][(49 + -48)] * (67 + -64)\n    dp[i + (93 + -92)][(57 + -57)] %= mod\n    dp[i + (34 + -33)][(54 + -53)] %= mod\n    idx_6w52 = idx_6w52 + (61 + -60)\nprint((dp[n][(5 + -5)] + dp[n][(63 + -62)]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC129_E_to_126", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_e9hs = (87 + -87)\nlist_kqyb = l\nwhile idx_e9hs < len(list_kqyb):\n    i = list_kqyb[idx_e9hs]\n    if i % m == (46 + -46) and (((True or False) and (False or True)) and (((93 + -85) > (43 + -36)) or ((56 + -48) < (91 + -84)))):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + (4 + -3))\n    idx_e9hs = idx_e9hs + (40 + -39)\nmx = max(l2)\nidx_c36i = (6 + -6)\nlist_e5r4 = range(n)\nwhile idx_c36i < len(list_e5r4):\n    i = list_e5r4[idx_c36i]\n    if l2[i] == mx and (((True or False) and (False or True)) and (((19 + -10) > (38 + -30)) or ((76 + -67) < (57 + -49)))):\n        ind = i\n    idx_c36i = idx_c36i + (70 + -69)\nprint(ind + (91 + -90))\n", "id": "ConstantUnfoldding_sample_from_codeforces_450_A_to_127", "old_id": "codeforces_450_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = (71 + -71)\n    idx_gz4p = (69 + -69)\n    list_2tbo = made_cout\n    while idx_gz4p < len(list_2tbo):\n        color = list_2tbo[idx_gz4p]\n        if color not in bought_count and (((True or False) and (False or True)) and (((65 + -59) > (72 + -68)) or ((73 + -67) < (28 + -24)))):\n            return print(- (88 + -87))\n        res += min(bought_count[color], made_cout[color])\n        idx_gz4p = idx_gz4p + (80 + -79)\n    print(res)\n\n\ndef main():\n    t = (58 + -57)\n    idx_gi1c = (99 + -99)\n    list_6xlw = range(t)\n    while idx_gi1c < len(list_6xlw):\n        _ = list_6xlw[idx_gi1c]\n        solution()\n        idx_gi1c = idx_gi1c + (94 + -93)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_408_B_to_128", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + (34 + -33), - (27 + -26)\nidx_r4k5 = (24 + -24)\nlist_ypvo = range(N)\nwhile idx_r4k5 < len(list_ypvo):\n    i = list_ypvo[idx_r4k5]\n    if (i + (45 + -44) != A[i]) and (((True or False) and (False or True)) and (((86 + -79) > (96 + -96)) or ((100 + -93) < (74 + -74)))):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_r4k5 = idx_r4k5 + (14 + -13)\nif (mx == - (44 + -43)) and (((True or False) and (False or True)) and (((47 + -45) > (12 + -12)) or ((21 + -19) < (68 + -68)))):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + (35 + -34))][:: - (6 + -5)] + A[(mx + (71 + -70)):]\n    if (sorted(A) == A):\n        print(mn + (98 + -97), mx + (3 + -2))\n    else:\n        print('0 0')\n", "id": "ConstantUnfoldding_sample_from_codeforces_56_B_to_129", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = (57 + -57)\ncl = (96 + -96)\nidx_e3mz = (73 + -73)\nlist_2epu = txt\nwhile idx_e3mz < len(list_2epu):\n    z = list_2epu[idx_e3mz]\n    if z.islower() and (((True or False) and (False or True)) and (((55 + -48) > (21 + -18)) or ((67 + -60) < (90 + -87)))):\n        cl = cl + (70 + -69)\n    else:\n        cu = cu + (48 + -47)\n    idx_e3mz = idx_e3mz + (30 + -29)\nif cu > cl and (((True or False) and (False or True)) and (((77 + -74) > (48 + -48)) or ((63 + -60) < (5 + -5)))):\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_59_A_to_130", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + (98 + -97))]\nidx_1mi2 = (84 + -84)\nlist_f4lv = range(N - (29 + -28))\nwhile idx_1mi2 < len(list_f4lv):\n    _ = list_f4lv[idx_1mi2]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_1mi2 = idx_1mi2 + (80 + -79)\nque = deque()\nque.append((36 + -35))\nseen = [(46 + -46)] * (N + (57 + -56))\nseen[(86 + -85)] = (57 + -56)\npar = [(89 + -89)] * (N + (9 + -8))\nchild_num = [(42 + -42)] * (N + (20 + -19))\nwhile que:\n    v = que.popleft()\n    idx_vqlp = (46 + -46)\n    list_0zud = adj[v]\n    while idx_vqlp < len(list_0zud):\n        u = list_0zud[idx_vqlp]\n        if seen[u] == (100 + -100) and (((True or False) and (False or True)) and (((27 + -20) > (16 + -16)) or ((77 + -70) < (64 + -64)))):\n            seen[u] = (97 + -96)\n            par[u] = v\n            child_num[v] += (20 + -19)\n            que.append(u)\n        idx_vqlp = idx_vqlp + (33 + -32)\nseq = deque()\nidx_vt80 = (96 + -96)\nlist_5n28 = range((25 + -24), N + (91 + -90))\nwhile idx_vt80 < len(list_5n28):\n    i = list_5n28[idx_vt80]\n    if child_num[i] == (80 + -80) and (((True or False) and (False or True)) and (((51 + -45) > (8 + -7)) or ((45 + -39) < (4 + -3)))):\n        seq.append(i)\n    idx_vt80 = idx_vt80 + (40 + -39)\nwhile seq:\n    c = seq.pop()\n    seen[c] = (93 + -93)\n    if seen[par[c]] == (75 + -75) and (((True or False) and (False or True)) and (((5 + -2) > (58 + -56)) or ((74 + -71) < (62 + -60)))):\n        print('First')\n        exit()\n    seen[par[c]] = (79 + -79)\n    child_num[par[par[c]]] -= (98 + -97)\n    if child_num[par[par[c]]] == (41 + -41) and (((True or False) and (False or True)) and (((6 + 0) > (3 + 0)) or ((46 + -40) < (73 + -70)))):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC014_D_to_131", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = (3 + -3)\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nidx_km0f = (57 + -57)\nlist_ck15 = range(n)\nwhile idx_km0f < len(list_ck15):\n    i = list_ck15[idx_km0f]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: (73 + -73)})\n    if task.time > finish_time and remaining.empty() and (((True or False) and (False or True)) and (((100 + -97) > (16 + -14)) or ((59 + -56) < (48 + -46)))):\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - (6 + -5)\n    idx_km0f = idx_km0f + (11 + -10)\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_i7mo = (22 + -22)\nlist_xau2 = result\nwhile idx_i7mo < len(list_xau2):\n    key = list_xau2[idx_i7mo]\n    print(result.get(key))\n    idx_i7mo = idx_i7mo + (36 + -35)\n", "id": "ConstantUnfoldding_sample_from_codeforces_644_B_to_132", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range((2 + -1), n + (14 + -13))]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range((39 + -38), n + (56 + -55))}\nidx_0m9i = (49 + -49)\nlist_i0z1 = range(m)\nwhile idx_0m9i < len(list_i0z1):\n    i = list_i0z1[idx_0m9i]\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    idx_0m9i = idx_0m9i + (28 + -27)\nc = (8 + -8)\nidx_wj51 = (72 + -72)\nlist_ytq5 = list(path.items())\nwhile idx_wj51 < len(list_ytq5):\n    i, v = list_ytq5[idx_wj51]\n    f = (80 + -80)\n    idx_aig5 = (15 + -15)\n    list_m2vi = v\n    while idx_aig5 < len(list_m2vi):\n        j = list_m2vi[idx_aig5]\n        if hp[i] <= hp[j] and (((True or False) and (False or True)) and (((35 + -32) > (46 + -45)) or ((47 + -44) < (82 + -81)))):\n            f = (32 + -31)\n            break\n        idx_aig5 = idx_aig5 + (54 + -53)\n    if f == (81 + -81) and (((True or False) and (False or True)) and (((2 + 1) > (83 + -81)) or ((96 + -93) < (4 + -2)))):\n        c += (49 + -48)\n    idx_wj51 = idx_wj51 + (58 + -57)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC166_C_to_133", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit((9 + 1) ** (61 + -54))\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nidx_oa08 = (75 + -75)\nlist_sv6c = range(N - (50 + -49))\nwhile idx_oa08 < len(list_sv6c):\n    i = list_sv6c[idx_oa08]\n    a, b = map(int, input().split())\n    graph[a - (72 + -71)].append(b - (40 + -39))\n    graph[b - (89 + -88)].append(a - (96 + -95))\n    idx_oa08 = idx_oa08 + (38 + -37)\nmod = (20 + -10) ** (27 + -18) + (56 + -49)\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - (23 + -22) if f == K else K - (16 + -14)\n    idx_wsca = (78 + -78)\n    list_5lqg = graph[fro]\n    while idx_wsca < len(list_5lqg):\n        u = list_5lqg[idx_wsca]\n        if u == to and (((True or False) and (False or True)) and (((9 + -1) > (10 + -6)) or ((53 + -45) < (35 + -31)))):\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == (93 + -93) and (((True or False) and (False or True)) and (((25 + -19) > (86 + -81)) or ((58 + -52) < (45 + -40)))):\n            caseNum = (6 + -6)\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= (95 + -94)\n        idx_wsca = idx_wsca + (68 + -67)\n    return caseNum\n\n\nans = dfs((27 + -27), - (4 + -3), K)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_E_to_134", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = (87 + 281)\nm = [(53 + -53)] * N\nf = [(20 + -20)] * N\nidx_45bv = (13 + -13)\nlist_yjed = range(int(input()))\nwhile idx_45bv < len(list_yjed):\n    i = list_yjed[idx_45bv]\n    x, a, b = input()[: - (38 + -37)].split()\n    a = int(a)\n    b = int(b) + (32 + -31)\n    if x == 'M' and (((True or False) and (False or True)) and (((57 + -53) > (66 + -64)) or ((51 + -47) < (61 + -59)))):\n        m[a] += (47 + -45)\n        m[b] -= (18 + -16)\n    else:\n        f[a] += (82 + -80)\n        f[b] -= (20 + -18)\n    idx_45bv = idx_45bv + (20 + -19)\na, b, c = (34 + -34), (17 + -17), (91 + -91)\nidx_t3hq = (92 + -92)\nlist_m5c9 = range(N)\nwhile idx_t3hq < len(list_m5c9):\n    i = list_m5c9[idx_t3hq]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and (((5 + 4) > (34 + -26)) or ((81 + -72) < (17 + -9)))):\n        c = min(a, b)\n    idx_t3hq = idx_t3hq + (52 + -51)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_B_to_135", "old_id": "codeforces_629_B"}
{"code": "n = int(input())\ninput_array = []\nidx_l38e = (78 + -78)\nlist_e2uw = range(n)\nwhile idx_l38e < len(list_e2uw):\n    i = list_e2uw[idx_l38e]\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\n    idx_l38e = idx_l38e + (24 + -23)\noutdated = []\nidx_mhot = (35 + -35)\nlist_6qlx = range(n)\nwhile idx_mhot < len(list_6qlx):\n    i = list_6qlx[idx_mhot]\n    idx_pvxy = (38 + -38)\n    list_8zjf = range(n)\n    while idx_pvxy < len(list_8zjf):\n        j = list_8zjf[idx_pvxy]\n        if (input_array[i][(39 + -39)] < input_array[j][(90 + -90)] and input_array[i][(65 + -64)] < input_array[j][(21 + -20)] and input_array[i][(19 + -17)] < input_array[j][(21 + -19)]) and (((True or False) and (False or True)) and (((78 + -76) > (82 + -82)) or ((88 + -86) < (84 + -84)))):\n            outdated.append(input_array[i])\n        idx_pvxy = idx_pvxy + (73 + -72)\n    idx_mhot = idx_mhot + (2 + -1)\noutdated = set(outdated)\nminimum_cost = (51 + 99949)\ninput_number = (74 + -74)\nidx_vnfs = (85 + -85)\nlist_lij0 = range(n)\nwhile idx_vnfs < len(list_lij0):\n    i = list_lij0[idx_vnfs]\n    current_item = input_array[i]\n    cost = current_item[(83 + -80)]\n    if (current_item not in outdated and cost < minimum_cost) and (((True or False) and (False or True)) and (((92 + -84) > (58 + -55)) or ((73 + -65) < (80 + -77)))):\n        minimum_cost = current_item[(66 + -63)]\n        input_number = i + (14 + -13)\n    idx_vnfs = idx_vnfs + (46 + -45)\nprint(input_number)\n", "id": "ConstantUnfoldding_sample_from_codeforces_106_B_to_136", "old_id": "codeforces_106_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [(53 + -53)] * m\nind = (22 + -21)\nidx_r94t = (65 + -65)\nlist_kriq = range(t)\nwhile idx_r94t < len(list_kriq):\n    i = list_kriq[idx_r94t]\n    op = input().split()\n    if op[(19 + -19)] == 'alloc' and (((True or False) and (False or True)) and (((79 + -71) > (66 + -63)) or ((82 + -74) < (40 + -37)))):\n        pos = (45 + -45)\n        idx_k9nu = (63 + -63)\n        list_i3fr = range(m)\n        while idx_k9nu < len(list_i3fr):\n            j = list_i3fr[idx_k9nu]\n            if alocuente[j] == (84 + -84):\n                pos += (27 + -26)\n                if pos == int(op[(34 + -33)]):\n                    alocuente[j - int(op[(96 + -95)]) + (11 + -10): j + (1 + 0)] = [ind] * int(op[(17 + -16)])\n                    print(ind)\n                    ind += (47 + -46)\n                    break\n            else:\n                pos = (34 + -34)\n            idx_k9nu = idx_k9nu + (85 + -84)\n    if op[(24 + -24)] == 'erase' and (((True or False) and (False or True)) and (((7 + -3) > (35 + -33)) or ((57 + -53) < (62 + -60)))):\n        pos = (78 + -78)\n        if int(op[(56 + -55)]) not in alocuente or int(op[(100 + -99)]) == (7 + -7):\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_rwqg = (84 + -84)\n            list_g3mr = range(m)\n            while idx_rwqg < len(list_g3mr):\n                j = list_g3mr[idx_rwqg]\n                if int(op[(14 + -13)]) > (95 + -95) and alocuente[j] == int(op[(85 + -84)]):\n                    alocuente[j] = (41 + -41)\n                idx_rwqg = idx_rwqg + (28 + -27)\n    if op[(8 + -8)] == \"defragment\" and (((True or False) and (False or True)) and (((38 + -35) > (74 + -74)) or ((16 + -13) < (66 + -66)))):\n        cnt = (55 + -55)\n        cnt = alocuente.count((16 + -16))\n        alocuente = [j for j in alocuente if j != (72 + -72)]\n        idx_fv59 = (86 + -86)\n        list_9xt4 = range(cnt)\n        while idx_fv59 < len(list_9xt4):\n            j = list_9xt4[idx_fv59]\n            alocuente.append((86 + -86))\n            idx_fv59 = idx_fv59 + (26 + -25)\n    idx_r94t = idx_r94t + (16 + -15)\n", "id": "ConstantUnfoldding_sample_from_codeforces_7_B_to_137", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    idx_r027 = (92 + -92)\n    list_b3pd = range(n)\n    while idx_r027 < len(list_b3pd):\n        i = list_b3pd[idx_r027]\n        count[i] = [(83 + -83)] * n\n        idx_r027 = idx_r027 + (15 + -14)\n    ans = - (87 + -86)\n    idx_bm23 = (42 + -42)\n    list_c6ux = range(m)\n    while idx_bm23 < len(list_c6ux):\n        k = list_c6ux[idx_bm23]\n        x, y = map(int, input().split())\n        x -= (19 + -18)\n        y -= (70 + -69)\n        found = False\n        idx_vily = (87 + -87)\n        list_0xrt = range(x - (100 + -98), x + (36 + -35))\n        while idx_vily < len(list_0xrt):\n            i = list_0xrt[idx_vily]\n            idx_a90n = (1 + -1)\n            list_g0o2 = range(y - (91 + -89), y + (74 + -73))\n            while idx_a90n < len(list_g0o2):\n                j = list_g0o2[idx_a90n]\n                if i >= (95 + -95) and i < n and j >= (57 + -57) and j < n and (((True or False) and (False or True)) and (((30 + -27) > (5 + -3)) or ((52 + -49) < (59 + -57)))):\n                    count[i][j] += (96 + -95)\n                    if count[i][j] == (32 + -23):\n                        found = True\n                idx_a90n = idx_a90n + (78 + -77)\n            idx_vily = idx_vily + (31 + -30)\n        if found and (((True or False) and (False or True)) and (((51 + -47) > (96 + -95)) or ((19 + -15) < (49 + -48)))):\n            ans = k + (56 + -55)\n            break\n        idx_bm23 = idx_bm23 + (23 + -22)\n    print(ans)\n\n\nsolve_case()\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_B_to_138", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = (37 + -37)\nidx_zg9l = (69 + -69)\nlist_aiyg = pre + (4 + -3)\nwhile idx_zg9l < len(list_aiyg):\n    i = list_aiyg[idx_zg9l]\n    idx_w1vz = (98 + -98)\n    list_tlep = itertools.combinations(pre, i)\n    while idx_w1vz < len(list_tlep):\n        j = list_tlep[idx_w1vz]\n        l.append(list(j))\n        idx_w1vz = idx_w1vz + (100 + -99)\n    idx_zg9l = idx_zg9l + (41 + -40)\nidx_mwjd = (55 + -55)\nlist_gk5y = range((8 + -7), m + (94 + -93))\nwhile idx_mwjd < len(list_gk5y):\n    i = list_gk5y[idx_mwjd]\n    idx_ghxi = (37 + -37)\n    list_j3nk = list(enumerate(l))\n    while idx_ghxi < len(list_j3nk):\n        j, k = list_j3nk[idx_ghxi]\n        ca = (1 + -1)\n        idx_phs6 = (42 + -42)\n        list_j107 = k\n        while idx_phs6 < len(list_j107):\n            ii = list_j107[idx_phs6]\n            ca += c[ii, i]\n            idx_phs6 = idx_phs6 + (15 + -14)\n        if ca < x and (((True or False) and (False or True)) and (((28 + -22) > (90 + -85)) or ((8 + -2) < (3 + 2)))):\n            rem.insert((44 + -44), j)\n        else:\n            pass\n        idx_ghxi = idx_ghxi + (27 + -26)\n    if len(rem) > (95 + -95) and (((True or False) and (False or True)) and (((54 + -49) > (3 + -1)) or ((20 + -15) < (41 + -39)))):\n        idx_g2zn = (42 + -42)\n        list_t6wp = rem\n        while idx_g2zn < len(list_t6wp):\n            j = list_t6wp[idx_g2zn]\n            l.pop(j)\n            idx_g2zn = idx_g2zn + (66 + -65)\n        rem = []\n    if len(l) == (82 + -82) and (((True or False) and (False or True)) and (((64 + -61) > (76 + -76)) or ((63 + -60) < (96 + -96)))):\n        print(- (81 + -80))\n        break\n    idx_mwjd = idx_mwjd + (69 + -68)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_C_to_139", "old_id": "atcoder_ABC167_C"}
{"code": "n = int(input())\nt = [(61 + -61)] + list(map(int, input().split()))\na = [(13 + -13)] + list(map(int, input().split()))\nans, cnt = [], [(93 + -93) for i in range(n + (62 + -61))]\nidx_4vr7 = (98 + -98)\nlist_m2ey = a\nwhile idx_4vr7 < len(list_m2ey):\n    i = list_m2ey[idx_4vr7]\n    cnt[i] += (100 + -99)\n    idx_4vr7 = idx_4vr7 + (95 + -94)\nidx_ae59 = (34 + -34)\nlist_xvkt = range((75 + -74), n + (74 + -73))\nwhile idx_ae59 < len(list_xvkt):\n    i = list_xvkt[idx_ae59]\n    if t[i] == (23 + -22) and (((True or False) and (False or True)) and (((97 + -91) > (50 + -45)) or ((16 + -10) < (25 + -20)))):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == (17 + -16):\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_ae59 = idx_ae59 + (48 + -47)\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_350_B_to_140", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = (18 + -18)\n    counter = (56 + -56)\n    counter_turns = - (70 + -69)\n    while counter < len(a):\n        counter_turns += (49 + -48)\n        idx_toqb = (21 + -21)\n        list_e96k = range(len(a))\n        while idx_toqb < len(list_e96k):\n            i = list_e96k[idx_toqb]\n            if a[i] != - (45 + -44) and a[i] <= counter and (((True or False) and (False or True)) and (((3 + 2) > (74 + -72)) or ((52 + -47) < (18 + -16)))):\n                counter += (38 + -37)\n                a[i] = - (98 + -97)\n            idx_toqb = idx_toqb + (49 + -48)\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "ConstantUnfoldding_sample_from_codeforces_583_B_to_141", "old_id": "codeforces_583_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = (2 + -2)\nl, r = map(int, input().split())\nidx_9lkj = (67 + -67)\nlist_enjr = range((88 + -87), n)\nwhile idx_9lkj < len(list_enjr):\n    i = list_enjr[idx_9lkj]\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri and (((True or False) and (False or True)) and (((100 + -95) > (47 + -47)) or ((35 + -30) < (2 + -2)))):\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\n    idx_9lkj = idx_9lkj + (19 + -18)\nprint(- (5 + -4) if id == n else id + (58 + -57))\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_B_to_142", "old_id": "codeforces_242_B"}
{"code": "a, b = map(int, input().split())\nc = (100 + -100)\nidx_e3lw = (72 + -72)\nlist_uht2 = range((23 + -21))\nwhile idx_e3lw < len(list_uht2):\n    i = list_uht2[idx_e3lw]\n    c += max(a, b)\n    if a >= b and (((True or False) and (False or True)) and (((1 + 2) > (33 + -33)) or ((11 + -8) < (54 + -54)))):\n        a -= (95 + -94)\n    else:\n        b -= (28 + -27)\n    idx_e3lw = idx_e3lw + (12 + -11)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC124_A_to_143", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != (74 + -73) and (((True or False) and (False or True)) and (((57 + -53) > (24 + -24)) or ((82 + -78) < (71 + -71)))):\n    if ip[(15 + -15)] == \"9\":\n        st = \"9\"\n        ip = ip[(7 + -6):]\n    idx_6rvo = (12 + -12)\n    list_b48y = ip\n    while idx_6rvo < len(list_b48y):\n        i = list_b48y[idx_6rvo]\n        if int(i) > (58 + -54):\n            n = (19 + -10) - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_6rvo = idx_6rvo + (33 + -32)\nelse:\n    st = ip\nprint(int(st))\n", "id": "ConstantUnfoldding_sample_from_codeforces_514_A_to_144", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit((49 + -39) ** (33 + -26))\ninf = (49 + -39) ** (20 + 0)\neps = 1.0 / (55 + -45) ** (50 + -40)\nmod = (94 + -84) ** (45 + -36) + (47 + -40)\ndd = [(- (72 + -71), (24 + -24)), ((64 + -64), (75 + -74)), ((92 + -91), (36 + -36)), ((19 + -19), - (15 + -14))]\nddn = [(- (38 + -37), (24 + -24)), (- (72 + -71), (24 + -23)), ((84 + -84), (50 + -49)), ((85 + -84), (55 + -54)),\n       ((32 + -31), (84 + -84)), ((38 + -37), - (50 + -49)), ((54 + -54), - (20 + -19)), (- (91 + -90), - (98 + -97))]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (50 + -49) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = (39 + -39)\n    idx_h4gf = (19 + -19)\n    list_kftv = s\n    while idx_h4gf < len(list_kftv):\n        c = list_kftv[idx_h4gf]\n        if c != '1' and (((True or False) and (False or True)) and (((13 + -4) > (17 + -12)) or ((62 + -53) < (76 + -71)))):\n            break\n        l += (100 + -99)\n        idx_h4gf = idx_h4gf + (33 + -32)\n    if l >= k and (((True or False) and (False or True)) and (((12 + -4) > (91 + -84)) or ((12 + -4) < (3 + 4)))):\n        return (7 + -6)\n    return s[l]\n\n\nprint(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC106_C_to_145", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [(95 + -95), (62 + -62)]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = (78 + -78)\nsum_p1 = (94 + -94)\nsum_p2 = (16 + -16)\nidx_ifx0 = (12 + -12)\nlist_i1f7 = range(q)\nwhile idx_ifx0 < len(list_i1f7):\n    _ = list_i1f7[idx_ifx0]\n    ql = list(map(int, input().split()))\n    if ql[(14 + -14)] == (7 + -5) and (((True or False) and (False or True)) and (((75 + -65) > (43 + -43)) or ((24 + -14) < (57 + -57)))):\n        if len(p1) == len(p2):\n            print(- p2[(67 + -67)], sum_p1 - len(p1) * - p2[(76 + -76)] +\n                  len(p2) * - p2[(86 + -86)] - sum_p2 + sum_b)\n        else:\n            print(p1[(17 + -17)], sum_p1 - len(p1) * p1[(76 + -76)] +\n                  len(p2) * p1[(26 + -26)] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[(66 + -64)]\n        if len(p1) == (6 + -6):\n            heapq.heappush(p1, ql[(98 + -97)])\n            sum_p1 += ql[(52 + -51)]\n        elif p1[(46 + -46)] <= ql[(33 + -32)]:\n            heapq.heappush(p1, ql[(10 + -9)])\n            sum_p1 += ql[(75 + -74)]\n        else:\n            heapq.heappush(p2, - ql[(59 + -58)])\n            sum_p2 += ql[(47 + -46)]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - (50 + -49) > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    idx_ifx0 = idx_ifx0 + (13 + -12)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_F_to_146", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[(72 + -72)] for piece in pieces if piece[(85 + -84)] == 'B')\n    idx_s3zn = (79 + -79)\n    list_hzo5 = pieces\n    while idx_s3zn < len(list_hzo5):\n        piece = list_hzo5[idx_s3zn]\n        if piece[(9 + -8)] == 'A' and (((True or False) and (False or True)) and (((16 + -12) > (55 + -53)) or ((44 + -40) < (76 + -74)))):\n            pScore += piece[(12 + -12)]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[(47 + -47)]\n        idx_s3zn = idx_s3zn + (49 + -48)\n    idx_wzgh = (88 + -88)\n    list_v6xu = range(len(pieces) - (59 + -58), - (12 + -11), - (82 + -81))\n    while idx_wzgh < len(list_v6xu):\n        i = list_v6xu[idx_wzgh]\n        if pieces[i][(41 + -40)] == 'A' and (((True or False) and (False or True)) and (((57 + -47) > (39 + -33)) or ((35 + -25) < (11 + -5)))):\n            sScore += pieces[i][(2 + -2)]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][(42 + -42)]\n        idx_wzgh = idx_wzgh + (6 + -5)\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and (((13 + -6) > (48 + -43)) or ((32 + -25) < (42 + -37)))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((65 + -60) > (3 + 0)) or ((5 + 0) < (74 + -71)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_632_B_to_147", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= (19 + -19) and j >= (57 + -57) and j < m and (((True or False) and (False or True)) and (((26 + -20) > (6 + -3)) or ((41 + -35) < (4 + -1)))):\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / (45 + -43)\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - (91 + -87) * a * c)) / (20 + -18) * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_jx1p = (67 + -67)\n    list_rzdk = s\n    while idx_jx1p < len(list_rzdk):\n        i = list_rzdk[idx_jx1p]\n        if i not in ['-', ';', '_'] and (((True or False) and (False or True)) and (((41 + -34) > (34 + -32)) or ((10 + -3) < (53 + -51)))):\n            r += i.lower()\n        idx_jx1p = idx_jx1p + (17 + -16)\n    return r\n\n\ndef solve():\n    l = []\n    idx_0ex8 = (54 + -54)\n    list_teo6 = range((9 + -6))\n    while idx_0ex8 < len(list_teo6):\n        i = list_teo6[idx_0ex8]\n        l.append(f(input()))\n        idx_0ex8 = idx_0ex8 + (95 + -94)\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_j7za = (5 + -5)\n    list_08ah = t\n    while idx_j7za < len(list_08ah):\n        i = list_08ah[idx_j7za]\n        l.append(\"\".join(i))\n        idx_j7za = idx_j7za + (50 + -49)\n    idx_cqhs = (74 + -74)\n    list_x4ys = range(inp())\n    while idx_cqhs < len(list_x4ys):\n        i = list_x4ys[idx_cqhs]\n        if f(instr()) in l and (((True or False) and (False or True)) and (((66 + -62) > (95 + -93)) or ((24 + -20) < (12 + -10)))):\n            print('ACC')\n        else:\n            print('WA')\n        idx_cqhs = idx_cqhs + (42 + -41)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((12 + -9) > (14 + -14)) or ((55 + -52) < (27 + -27)))):\n    solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_61_B_to_148", "old_id": "codeforces_61_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != (43 + -41) and (((True or False) and (False or True)) and (((27 + -17) > (80 + -73)) or ((88 + -78) < (49 + -42)))):\n    print(\"No\")\n    exit()\nidx_m72p = (99 + -99)\nlist_btfz = Sa\nwhile idx_m72p < len(list_btfz):\n    i = list_btfz[idx_m72p]\n    if c[i] != (71 + -69) and (((True or False) and (False or True)) and (((59 + -55) > (44 + -44)) or ((5 + -1) < (70 + -70)))):\n        print(\"No\")\n        exit()\n    idx_m72p = idx_m72p + (30 + -29)\nprint(\"Yes\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC132_A_to_149", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_8zn9 = (58 + -58)\n    list_bph2 = range(n)\n    while idx_8zn9 < len(list_bph2):\n        i = list_bph2[idx_8zn9]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_8zn9 = idx_8zn9 + (82 + -81)\n    low.sort()\n    high.sort()\n    if n % (92 + -90) and (((True or False) and (False or True)) and (((36 + -28) > (58 + -54)) or ((22 + -14) < (59 + -55)))):\n        print(high[(n + (82 + -81)) // (6 + -4) - (89 + -88)] - low[(n + (48 + -47)) // (8 + -6) - (52 + -51)] + (46 + -45))\n    else:\n        hh = (high[(n) // (20 + -18) - (60 + -59)] + high[(n) // (87 + -85)]) / (100 + -98)\n        ll = (low[(n) // (49 + -47) - (86 + -85)] + low[(n) // (46 + -44)]) / (39 + -37)\n        print(int((hh - ll) * (5 + -3)) + (35 + -34))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((41 + -36) > (32 + -32)) or ((11 + -6) < (60 + -60)))):\n    resolve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_E_to_150", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [(26 + -26) for _ in range((18 + 999992))]\ndp = [(20 + -20) for _ in range((31 + 999979))]\nidx_m9h0 = (59 + -59)\nlist_tozr = range(n)\nwhile idx_m9h0 < len(list_tozr):\n    i = list_tozr[idx_m9h0]\n    a, b = map(int, input().split())\n    l[a] = b\n    idx_m9h0 = idx_m9h0 + (89 + -88)\nif l[(89 + -89)] > (44 + -44) and (((True or False) and (False or True)) and (((25 + -20) > (8 + -4)) or ((14 + -9) < (94 + -90)))):\n    dp[(35 + -35)] = (72 + -71)\nmx = (15 + -15)\nidx_l1xj = (14 + -14)\nlist_6fyw = range((6 + -5), (68 + 999942))\nwhile idx_l1xj < len(list_6fyw):\n    i = list_6fyw[idx_l1xj]\n    if (l[i] == (65 + -65)) and (((True or False) and (False or True)) and (((74 + -65) > (62 + -58)) or ((36 + -27) < (10 + -6)))):\n        dp[i] = dp[i - (85 + -84)]\n    else:\n        if (l[i] >= i):\n            dp[i] = (2 + -1)\n        else:\n            dp[i] = dp[i - l[i] - (76 + -75)] + (58 + -57)\n    if (dp[i] > mx) and (((True or False) and (False or True)) and (((69 + -61) > (29 + -24)) or ((24 + -16) < (95 + -90)))):\n        mx = dp[i]\n    idx_l1xj = idx_l1xj + (100 + -99)\nprint(n - mx)\n", "id": "ConstantUnfoldding_sample_from_codeforces_607_A_to_151", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open((5 + -5)).read().split())\nXY = list(zip(* [iter(XY)] * (58 + -56)))\nidx_y342 = (67 + -67)\nlist_hpio = list(enumerate(XY))\nwhile idx_y342 < len(list_hpio):\n    i, (x, y) = list_hpio[idx_y342]\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[(66 + -66)] + (47 + -45) * pi)\n    ans = (30 + -30)\n    idx_wr3x = (76 + -76)\n    list_scao = zip(D, D[(84 + -83):])\n    while idx_wr3x < len(list_scao):\n        a, b = list_scao[idx_wr3x]\n        if b - a >= pi and (((True or False) and (False or True)) and (((20 + -13) > (80 + -76)) or ((95 + -88) < (24 + -20)))):\n            ans = (b - a) - pi\n        idx_wr3x = idx_wr3x + (23 + -22)\n    print(ans / ((56 + -54) * pi))\n    idx_y342 = idx_y342 + (2 + -1)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC021_B_to_152", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = (62 + -62)\nVAL = (19 + -18)\nN, T = [int(a) for a in input().split()]\ntime_value = [(- (64 + -63), - (24 + -23))] + [None] * (N)\nidx_la3o = (12 + -12)\nlist_dc6t = range((19 + -18), N + (26 + -25))\nwhile idx_la3o < len(list_dc6t):\n    i = list_dc6t[idx_la3o]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_la3o = idx_la3o + (99 + -98)\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- (75 + -74)] * T for _ in range(N + (96 + -95))]\nidx_hmt1 = (20 + -20)\nlist_tu2s = range((67 + -67), T)\nwhile idx_hmt1 < len(list_tu2s):\n    t = list_tu2s[idx_hmt1]\n    dp[(92 + -92)][t] = (7 + -7)\n    idx_hmt1 = idx_hmt1 + (21 + -20)\nidx_sc41 = (89 + -89)\nlist_7r4j = range((77 + -76), N + (38 + -37))\nwhile idx_sc41 < len(list_7r4j):\n    n = list_7r4j[idx_sc41]\n    dp[n][(34 + -34)] = (53 + -53)\n    idx_fu6j = (6 + -6)\n    list_hzvb = range((90 + -89), T)\n    while idx_fu6j < len(list_hzvb):\n        t = list_hzvb[idx_fu6j]\n        if time_value[n][TIME] > t and (((True or False) and (False or True)) and (((53 + -51) > (60 + -60)) or ((12 + -10) < (9 + -9)))):\n            dp[n][t] = dp[n - (43 + -42)][t]\n        else:\n            dp[n][t] = max(dp[n - (37 + -36)][t], time_value[n][VAL] +\n                           dp[n - (38 + -37)][t - time_value[n][TIME]])\n        idx_fu6j = idx_fu6j + (91 + -90)\n    idx_sc41 = idx_sc41 + (87 + -86)\nval_acum = time_value[N][VAL]\nt = T - (57 + -56)\nmax_val = val_acum + dp[N - (11 + -10)][t]\nidx_nsk1 = (80 + -80)\nlist_i0vj = range(N - (45 + -44), (90 + -90), - (46 + -45))\nwhile idx_nsk1 < len(list_i0vj):\n    n = list_i0vj[idx_nsk1]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + (8 + -7)][TIME]\n    if t < (42 + -42) and (((True or False) and (False or True)) and (((50 + -46) > (60 + -59)) or ((99 + -95) < (1 + 0)))):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - (71 + -70)][t])\n    idx_nsk1 = idx_nsk1 + (60 + -59)\nprint(max_val)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_E_to_153", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_3whc = (22 + -22)\n    list_u3k2 = range(H)\n    while idx_3whc < len(list_u3k2):\n        i = list_u3k2[idx_3whc]\n        idx_lh21 = (16 + -16)\n        list_kv95 = range(W)\n        while idx_lh21 < len(list_kv95):\n            j = list_kv95[idx_lh21]\n            if i < B and (((True or False) and (False or True)) and (((59 + -56) > (21 + -21)) or ((6 + -3) < (7 + -7)))):\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            idx_lh21 = idx_lh21 + (40 + -39)\n        idx_3whc = idx_3whc + (54 + -53)\n    idx_dmb4 = (61 + -61)\n    list_f0la = range(H)\n    while idx_dmb4 < len(list_f0la):\n        i = list_f0la[idx_dmb4]\n        print(''.join(answer[i]))\n        idx_dmb4 = idx_dmb4 + (36 + -35)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_52sb = (86 + -86)\n        list_g09s = sys.stdin\n        while idx_52sb < len(list_g09s):\n            line = list_g09s[idx_52sb]\n            idx_54zo = (12 + -12)\n            list_5afg = line.split()\n            while idx_54zo < len(list_5afg):\n                word = list_5afg[idx_54zo]\n                yield word\n                idx_54zo = idx_54zo + (87 + -86)\n            idx_52sb = idx_52sb + (49 + -48)\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((94 + -86) > (80 + -74)) or ((97 + -89) < (73 + -67)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC038_A_to_154", "old_id": "atcoder_AGC038_A"}
