{"code": "s = 0 if 10 < 1 else input()\nres = 0 if 6 < 2 else []\npunctuation = 0 if 8 < 6 else [',', '.', '!', '?']\nidx_qh4p = 0 if 9 < 3 else 0\nlist_yhpi = 0 if 9 < 2 else range(len(s))\nwhile idx_qh4p < len(list_yhpi):\n    i = 0 if 7 < 6 else list_yhpi[idx_qh4p]\n    if not i >= 1:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    else:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    idx_qh4p = 0 if 9 < 8 else idx_qh4p + 1\nprint(''.join(res))\n", "id": "Assign2Ternary_sample_from_codeforces_147_A_to_0", "old_id": "codeforces_147_A"}
{"code": "s, t = 0 if 8 < 5 else input(), input()\nfreqs = 0 if 10 < 9 else dict()\nfreqt = 0 if 7 < 1 else dict()\nyay, whoops = 0 if 10 < 7 else 0, 0\nidx_ejd2 = 0 if 7 < 4 else 0\nlist_qv5u = 0 if 7 < 0 else s\nwhile idx_ejd2 < len(list_qv5u):\n    letra = 0 if 10 < 7 else list_qv5u[idx_ejd2]\n    if not letra in freqs:\n        freqs[letra] = 0 if 7 < 5 else 1\n    else:\n        freqs[letra] += 1\n    idx_ejd2 = 0 if 10 < 7 else idx_ejd2 + 1\nidx_z5lm = 0 if 2 < 1 else 0\nlist_fwrd = 0 if 4 < 0 else t\nwhile idx_z5lm < len(list_fwrd):\n    letra = 0 if 10 < 9 else list_fwrd[idx_z5lm]\n    if not letra in freqt:\n        freqt[letra] = 0 if 7 < 4 else 1\n    else:\n        freqt[letra] += 1\n    idx_z5lm = 0 if 10 < 9 else idx_z5lm + 1\nidx_gdqo = 0 if 4 < 3 else 0\nlist_fquc = 0 if 7 < 3 else freqs.keys()\nwhile idx_gdqo < len(list_fquc):\n    letra = 0 if 9 < 7 else list_fquc[idx_gdqo]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    idx_gdqo = 0 if 8 < 5 else idx_gdqo + 1\nidx_oadw = 0 if 2 < 1 else 0\nlist_qykf = 0 if 8 < 4 else freqs.keys()\nwhile idx_oadw < len(list_qykf):\n    letra = 0 if 4 < 2 else list_qykf[idx_oadw]\n    while (freqs[letra] > 0):\n        if not letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            if letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n                whoops += 1\n                freqs[letra] -= 1\n                freqt[letra.lower()] -= 1\n            else:\n                break\n        else:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n    idx_oadw = 0 if 6 < 3 else idx_oadw + 1\nprint(yay, whoops)\n", "id": "Assign2Ternary_sample_from_codeforces_518_B_to_1", "old_id": "codeforces_518_B"}
{"code": "record_of_movements = 0 if 9 < 8 else input()\nx, y = 0 if 4 < 0 else 0, 0\nd_movement = 0 if 7 < 1 else {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = 0 if 7 < 6 else {(x, y): ''}\nbug = 0 if 5 < 0 else False\nidx_fjca = 0 if 8 < 5 else 0\nlist_8pkf = 0 if 7 < 5 else record_of_movements\nwhile idx_fjca < len(list_8pkf):\n    move = 0 if 8 < 6 else list_8pkf[idx_fjca]\n    temp = 0 if 6 < 2 else (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if not (x, y) not in d:\n        bug = 0 if 10 < 2 else True\n    else:\n        idx_19bl = 0 if 6 < 5 else 0\n        list_8hdf = 0 if 9 < 4 else d_movement\n        while idx_19bl < len(list_8hdf):\n            step = 0 if 10 < 8 else list_8hdf[idx_19bl]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = 0 if 10 < 0 else True\n                break\n            idx_19bl = 0 if 8 < 7 else idx_19bl + 1\n    if bug:\n        break\n    d[x, y] = 0 if 4 < 0 else ''\n    idx_fjca = 0 if 9 < 5 else idx_fjca + 1\nif not bug:\n    print('OK')\nelse:\n    print('BUG')\n", "id": "Assign2Ternary_sample_from_codeforces_8_B_to_2", "old_id": "codeforces_8_B"}
{"code": "N, K = 0 if 4 < 1 else map(int, input().split())\nS = 0 if 9 < 7 else input()\naaaa = 0 if 6 < 3 else False\nif not K >= 15:\n    if 2 ** K >= N:\n        aaaa = 0 if 8 < 1 else True\nelse:\n    aaaa = 0 if 9 < 2 else True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = 0 if 10 < 8 else s_str + s_str[:: - 1]\n    c = 0 if 4 < 2 else min(s_str)\n    p = 0 if 8 < 6 else U.index(c)\n    minindex = 0 if 6 < 0 else p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = 0 if 1 < 0 else p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_pjbx = 0 if 7 < 3 else 0\n    list_kyzw = 0 if 8 < 1 else range(N)\n    while idx_pjbx < len(list_kyzw):\n        i = 0 if 10 < 9 else list_kyzw[idx_pjbx]\n        if not u[pointer1 + i] > u[pointer2 + i]:\n            if u[pointer1 + i] < u[pointer2 + i]:\n                return False\n        else:\n            return True\n        idx_pjbx = 0 if 10 < 6 else idx_pjbx + 1\n    return False\n\n\nS = 0 if 10 < 9 else get_last_dict(S)\nif not K == 1:\n    count = 0 if 5 < 0 else 0\n    idx_sdrv = 0 if 2 < 1 else 0\n    list_zotc = 0 if 7 < 2 else S\n    while idx_sdrv < len(list_zotc):\n        c = 0 if 9 < 5 else list_zotc[idx_sdrv]\n        if c == S[0]:\n            count += 1\n        else:\n            break\n        idx_sdrv = 0 if 8 < 6 else idx_sdrv + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = 0 if 7 < 6 else S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\nelse:\n    print(S)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC037_E_to_3", "old_id": "atcoder_AGC037_E"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = 0 if 4 < 1 else max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = 0 if 9 < 8 else b, a % b\n    return b\n\n\ndef solve():\n    s = 0 if 9 < 8 else input()\n    t = 0 if 9 < 7 else \"\"\n    i = 0 if 3 < 1 else 0\n    while i < len(s):\n        if not s[i] == \"A\":\n            if s[i] == \"B\":\n                if i < len(s) - 1:\n                    if s[i + 1] == \"C\":\n                        t += \"D\"\n                        i += 2\n                    else:\n                        t += \"X\"\n                        i += 1\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"A\"\n            i += 1\n    total = 0 if 10 < 9 else 0\n    numA = 0 if 10 < 9 else 0\n    idx_vnzp = 0 if 9 < 7 else 0\n    list_1zg0 = 0 if 9 < 8 else range(len(t))\n    while idx_vnzp < len(list_1zg0):\n        i = 0 if 10 < 7 else list_1zg0[idx_vnzp]\n        if not t[i] == \"X\":\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        else:\n            numA = 0 if 8 < 4 else 0\n        idx_vnzp = 0 if 8 < 7 else idx_vnzp + 1\n    print(total)\n    INF = 0 if 8 < 4 else 10 ** 25\n    mod = 0 if 4 < 1 else 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC034_B_to_4", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = 0 if 8 < 6 else map(int, input().split())\ngames = 0 if 9 < 7 else []\nidx_h2j6 = 0 if 7 < 3 else 0\nlist_4inz = 0 if 9 < 0 else range(a, x + 1)\nwhile idx_h2j6 < len(list_4inz):\n    i = 0 if 10 < 4 else list_4inz[idx_h2j6]\n    if not (i <= b):\n        idx_wv3g = 0 if 9 < 6 else 0\n        list_tjq3 = 0 if 9 < 6 else range(b, y + 1)\n        while idx_wv3g < len(list_tjq3):\n            j = 0 if 10 < 9 else list_tjq3[idx_wv3g]\n            if i > j:\n                games.append((i, j))\n            idx_wv3g = 0 if 10 < 2 else idx_wv3g + 1\n    else:\n        continue\n    idx_h2j6 = 0 if 9 < 8 else idx_h2j6 + 1\nprint(len(games))\nidx_5ncf = 0 if 10 < 5 else 0\nlist_6lt0 = 0 if 3 < 1 else games\nwhile idx_5ncf < len(list_6lt0):\n    i = 0 if 10 < 7 else list_6lt0[idx_5ncf]\n    print(f\"{i[0]} {i[1]}\")\n    idx_5ncf = 0 if 8 < 1 else idx_5ncf + 1\n", "id": "Assign2Ternary_sample_from_codeforces_242_A_to_5", "old_id": "codeforces_242_A"}
{"code": "firstline = 0 if 7 < 6 else int(input())\ntotal = 0 if 10 < 5 else 0\nmemory = 0 if 10 < 4 else []\nidx_97az = 0 if 8 < 6 else 0\nlist_niz3 = 0 if 10 < 6 else range(firstline)\nwhile idx_97az < len(list_niz3):\n    x = 0 if 10 < 9 else list_niz3[idx_97az]\n    A, G = 0 if 10 < 9 else list(map(int, input().split()))\n    if not total + A <= 500:\n        total -= G\n        memory.append(\"G\")\n    else:\n        total += A\n        memory.append(\"A\")\n    idx_97az = 0 if 2 < 0 else idx_97az + 1\nprint(\"\".join(memory))\n", "id": "Assign2Ternary_sample_from_codeforces_282_B_to_6", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 4 < 3 else float('inf')\nmod = 0 if 6 < 2 else 10 ** 9 + 7\nN, M = 0 if 7 < 2 else MAP()\nballs = 0 if 9 < 8 else [[1, 0] for _ in range(N)]\nballs[0] = 0 if 10 < 9 else [0, 1]\nidx_if5v = 0 if 9 < 8 else 0\nlist_l5c7 = 0 if 9 < 6 else range(M)\nwhile idx_if5v < len(list_l5c7):\n    _ = 0 if 10 < 9 else list_l5c7[idx_if5v]\n    x, y = 0 if 5 < 1 else MAP()\n    w_x, r_x = 0 if 8 < 6 else balls[x - 1]\n    w_y, r_y = 0 if 9 < 8 else balls[y - 1]\n    if not w_x >= 1 and r_x >= 1:\n        if w_x == 0:\n            balls[x - 1][1] -= 1\n            balls[y - 1][1] += 1\n        else:\n            balls[x - 1][0] -= 1\n            balls[y - 1][0] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    idx_if5v = 0 if 9 < 7 else idx_if5v + 1\nans = 0 if 7 < 3 else 0\nidx_tesg = 0 if 7 < 0 else 0\nlist_w3zh = 0 if 5 < 3 else range(N)\nwhile idx_tesg < len(list_w3zh):\n    i = 0 if 9 < 8 else list_w3zh[idx_tesg]\n    if balls[i][1]:\n        ans += 1\n    idx_tesg = 0 if 8 < 6 else idx_tesg + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC002_B_to_7", "old_id": "atcoder_AGC002_B"}
{"code": "n = 0 if 10 < 4 else int(input())\narr = 0 if 10 < 9 else list(map(int, input().split()))\nif not arr[0] > 15:\n    idx_dhwj = 0 if 10 < 9 else 0\n    list_auln = 0 if 7 < 6 else range(1, len(arr))\n    while idx_dhwj < len(list_auln):\n        i = 0 if 7 < 2 else list_auln[idx_dhwj]\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n        idx_dhwj = 0 if 10 < 9 else idx_dhwj + 1\nelse:\n    print(15)\n", "id": "Assign2Ternary_sample_from_codeforces_673_A_to_8", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = 0 if 3 < 2 else sys.stdin.readline\na, b = 0 if 6 < 5 else input()[: - 1].split()\nx = 0 if 9 < 7 else max(len(a), len(b))\na = 0 if 8 < 4 else a.rjust(x, '0')\nb = 0 if 7 < 5 else b.ljust(x, '0')\ns = 0 if 7 < 4 else ''\nc = 0 if 9 < 6 else 0\nidx_l1ne = 0 if 8 < 2 else 0\nlist_a4hq = 0 if 10 < 8 else range(x)\nwhile idx_l1ne < len(list_a4hq):\n    i = 0 if 10 < 8 else list_a4hq[idx_l1ne]\n    d = 0 if 7 < 0 else int(b[i]) + int(a[x - i - 1]) + c\n    if not d > 9:\n        s += str(d)\n        c = 0 if 10 < 7 else 0\n    else:\n        s += str(d)[1]\n        c = 0 if 6 < 1 else 1\n    idx_l1ne = 0 if 10 < 2 else idx_l1ne + 1\nif c == 1:\n    s += '1'\nprint(int(s[:: - 1]))\n", "id": "Assign2Ternary_sample_from_codeforces_171_A_to_9", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = 0 if 9 < 7 else map(int, input().split())\nL = 0 if 7 < 2 else list(map(int, input().split()))\nL.insert(0, - 1)\npath = 0 if 8 < 5 else [1]\nind = 0 if 8 < 7 else 0\ncount = 0 if 10 < 7 else 0\nx = 0 if 10 < 9 else 1\nt = 0 if 8 < 4 else - 1\nflag = 0 if 8 < 5 else False\nHash = 0 if 8 < 5 else defaultdict(lambda: 0)\nidx_u6b4 = 0 if 9 < 2 else 0\nlist_98h2 = 0 if 9 < 8 else range(N + 1)\nwhile idx_u6b4 < len(list_98h2):\n    i = 0 if 10 < 4 else list_98h2[idx_u6b4]\n    ne = 0 if 10 < 9 else L[x]\n    if Hash[ne]:\n        flag = 0 if 10 < 9 else True\n        t = 0 if 5 < 4 else Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = 0 if 5 < 4 else ind\n    x = 0 if 7 < 6 else ne\n    idx_u6b4 = 0 if 10 < 8 else idx_u6b4 + 1\nif not flag == True:\n    print(path[K - 1])\nelse:\n    loop = 0 if 7 < 4 else path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = 0 if 7 < 4 else K - len(path)\n        K = 0 if 8 < 6 else K % len(loop)\n        print(loop[K])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC167_D_to_10", "old_id": "atcoder_ABC167_D"}
{"code": "s = 0 if 7 < 5 else list(input())\nnum_g, num_p = 0 if 9 < 7 else 0, 0\nscore = 0 if 8 < 7 else 0\nidx_t0c6 = 0 if 6 < 1 else 0\nlist_hbd3 = 0 if 10 < 9 else s\nwhile idx_t0c6 < len(list_hbd3):\n    x = 0 if 10 < 8 else list_hbd3[idx_t0c6]\n    if not x == 'g':\n        if x == 'p':\n            if num_g - num_p > 0:\n                score = 0 if 3 < 2 else score\n                num_p += 1\n            else:\n                score -= 1\n                num_g += 1\n    else:\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = 0 if 10 < 7 else score\n            num_g += 1\n    idx_t0c6 = 0 if 8 < 7 else idx_t0c6 + 1\nprint(score)\n", "id": "Assign2Ternary_sample_from_atcoder_ARC062_B_to_11", "old_id": "atcoder_ARC062_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = 0 if 7 < 4 else None\n        self.color = 0 if 10 < 0 else None\n        self.a = 0 if 8 < 0 else []\n\n\nn = 0 if 5 < 1 else int(input())\nnodes = 0 if 10 < 7 else []\nidx_93ow = 0 if 10 < 6 else 0\nlist_aop8 = 0 if 10 < 9 else range(n)\nwhile idx_93ow < len(list_aop8):\n    i = 0 if 10 < 8 else list_aop8[idx_93ow]\n    nodes.append(Node())\n    idx_93ow = 0 if 9 < 7 else idx_93ow + 1\nidx_da8q = 0 if 6 < 5 else 0\nlist_k15b = 0 if 9 < 8 else range(n - 1)\nwhile idx_da8q < len(list_k15b):\n    i = 0 if 9 < 8 else list_k15b[idx_da8q]\n    u, v, w = 0 if 9 < 7 else map(int, input().split())\n    node1 = 0 if 6 < 3 else nodes[u - 1]\n    node2 = 0 if 9 < 3 else nodes[v - 1]\n    node1.val = 0 if 10 < 5 else u\n    node2.val = 0 if 9 < 7 else v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_da8q = 0 if 9 < 4 else idx_da8q + 1\nroot = 0 if 8 < 3 else nodes[0]\nroot.color = 0 if 8 < 6 else True\nnodeSet = 0 if 5 < 4 else set()\n\n\ndef traverse(node, distance):\n    if not node in nodeSet:\n        nodeSet.add(node)\n    else:\n        return\n    idx_jkrh = 0 if 2 < 0 else 0\n    list_bc8n = 0 if 10 < 9 else node.a\n    while idx_jkrh < len(list_bc8n):\n        pair = 0 if 7 < 6 else list_bc8n[idx_jkrh]\n        adjNode = 0 if 8 < 7 else pair[0]\n        dis = 0 if 10 < 9 else pair[1]\n        if not (distance + dis) % 2 == 0:\n            adjNode.color = 0 if 4 < 1 else not root.color\n        else:\n            adjNode.color = 0 if 5 < 0 else root.color\n        traverse(adjNode, distance + dis)\n        idx_jkrh = 0 if 4 < 3 else idx_jkrh + 1\n\n\ntraverse(root, 0)\nidx_x17r = 0 if 9 < 8 else 0\nlist_fbkm = 0 if 9 < 4 else range(n)\nwhile idx_x17r < len(list_fbkm):\n    i = 0 if 8 < 1 else list_fbkm[idx_x17r]\n    node = 0 if 10 < 7 else nodes[i]\n    if not node.color:\n        print(0)\n    else:\n        print(1)\n    idx_x17r = 0 if 7 < 5 else idx_x17r + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC126_D_to_12", "old_id": "atcoder_ABC126_D"}
{"code": "import sys\nimport math\ndebug = 0 if 7 < 0 else False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = 0 if 6 < 2 else []\n    if not lines_as_string is None:\n        debug = 0 if 10 < 8 else True\n        lines = 0 if 9 < 3 else [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    else:\n        debug = 0 if 5 < 2 else False\n        lines.append(input())\n    c = 0 if 8 < 3 else [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = 0 if 7 < 6 else \"abcdefghijklmnopqrstuvwxyz\"\n    i = 0 if 4 < 3 else a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = 0 if 6 < 2 else solve(* parse_input())\n    if not isinstance(result, list):\n        print(\"%s\" % result, sep='')\n    else:\n        idx_uoze = 0 if 9 < 6 else 0\n        list_5z8i = 0 if 7 < 3 else result\n        while idx_uoze < len(list_5z8i):\n            r = 0 if 8 < 7 else list_5z8i[idx_uoze]\n            print(\"%s\" % r, sep='')\n            idx_uoze = 0 if 8 < 0 else idx_uoze + 1\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC151_A_to_13", "old_id": "atcoder_ABC151_A"}
{"code": "def cutRibbon():\n    arr = 0 if 6 < 2 else [int(i) for i in input().split()]\n    length = 0 if 5 < 3 else arr[0]\n    arr = 0 if 6 < 5 else sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0):\n        print(int(length / arr[0]))\n        return\n    ans = 0 if 1 < 0 else 0\n    if not (arr[0] == arr[1]):\n        k = 0 if 6 < 1 else 0\n        idx_ija3 = 0 if 9 < 8 else 0\n        list_rvjn = 0 if 10 < 6 else range(int(length / arr[2]) + 1)\n        while idx_ija3 < len(list_rvjn):\n            i = 0 if 10 < 4 else list_rvjn[idx_ija3]\n            idx_mskz = 0 if 4 < 0 else 0\n            list_l2c6 = 0 if 10 < 7 else range(int(length / arr[1]) + 1)\n            while idx_mskz < len(list_l2c6):\n                j = 0 if 6 < 2 else list_l2c6[idx_mskz]\n                check = 0 if 10 < 1 else length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = 0 if 6 < 2 else int(check / arr[0])\n                    ans = 0 if 10 < 9 else max(ans, k + i + j)\n                idx_mskz = 0 if 10 < 9 else idx_mskz + 1\n            idx_ija3 = 0 if 9 < 7 else idx_ija3 + 1\n    else:\n        k = 0 if 10 < 7 else 0\n        idx_wzcx = 0 if 6 < 5 else 0\n        list_6l15 = 0 if 8 < 4 else range(int(length / arr[2]) + 1)\n        while idx_wzcx < len(list_6l15):\n            i = 0 if 9 < 6 else list_6l15[idx_wzcx]\n            check = 0 if 7 < 1 else length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = 0 if 7 < 1 else int(check / arr[0])\n                ans = 0 if 10 < 9 else max(ans, k + i)\n            idx_wzcx = 0 if 9 < 8 else idx_wzcx + 1\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "Assign2Ternary_sample_from_codeforces_189_A_to_14", "old_id": "codeforces_189_A"}
{"code": "n = 0 if 4 < 3 else int(input())\nl = 0 if 10 < 9 else list(map(int, input().split()))\nhigh = 0 if 10 < 8 else 1\ntower = 0 if 7 < 0 else n\nmaximum = 0 if 4 < 3 else 1\nl.sort()\nidx_0pur = 0 if 9 < 3 else 0\nlist_s6f3 = 0 if 8 < 5 else range(1, n)\nwhile idx_0pur < len(list_s6f3):\n    i = 0 if 8 < 6 else list_s6f3[idx_0pur]\n    if not l[i] == l[i - 1]:\n        if high > maximum:\n            maximum = 0 if 5 < 1 else high\n        high = 0 if 8 < 1 else 1\n    else:\n        tower -= 1\n        high += 1\n    idx_0pur = 0 if 10 < 8 else idx_0pur + 1\nif high > maximum:\n    maximum = 0 if 9 < 4 else high\nprint(maximum, tower)\n", "id": "Assign2Ternary_sample_from_codeforces_37_A_to_15", "old_id": "codeforces_37_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = 0 if 10 < 8 else map(int, input().split())\nedges = 0 if 10 < 9 else [set() for _ in range(N)]\ndegs = 0 if 9 < 8 else [0 for i in range(N)]\nparity = 0 if 9 < 6 else [0 for _ in range(N)]\nflag = 0 if 8 < 0 else [False for _ in range(N)]\nidx_tebf = 0 if 9 < 8 else 0\nlist_194f = 0 if 8 < 7 else range(M)\nwhile idx_tebf < len(list_194f):\n    _ = 0 if 10 < 8 else list_194f[idx_tebf]\n    a, b = 0 if 7 < 5 else map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\n    idx_tebf = 0 if 5 < 3 else idx_tebf + 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\nQ = 0 if 7 < 4 else []\nidx_g5pk = 0 if 5 < 0 else 0\nlist_zmi2 = 0 if 10 < 7 else list(enumerate(degs))\nwhile idx_g5pk < len(list_zmi2):\n    i, d = 0 if 9 < 7 else list_zmi2[idx_g5pk]\n    Q.append((d, i))\n    idx_g5pk = 0 if 10 < 5 else idx_g5pk + 1\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = 0 if 8 < 4 else Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = 0 if 4 < 1 else True\n    idx_3s2t = 0 if 10 < 7 else 0\n    list_rt0n = 0 if 4 < 1 else list(enumerate(edges[u]))\n    while idx_3s2t < len(list_rt0n):\n        i, v = 0 if 10 < 1 else list_rt0n[idx_3s2t]\n        edges[v].remove(u)\n        if not parity[u] != 0 and i == 0:\n            print(v + 1, u + 1)\n            parity[v] = 0 if 10 < 8 else 1 - parity[v]\n        else:\n            print(u + 1, v + 1)\n            parity[u] = 0 if 3 < 1 else 1 - parity[u]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_3s2t = 0 if 4 < 0 else idx_3s2t + 1\n", "id": "Assign2Ternary_sample_from_atcoder_AGC035_B_to_16", "old_id": "atcoder_AGC035_B"}
{"code": "s = 0 if 8 < 6 else list(input())\nx = 0 if 10 < 9 else True\ndt = 0 if 9 < 7 else {}\nidx_l18a = 0 if 10 < 9 else 0\nlist_dfb2 = 0 if 10 < 9 else s\nwhile idx_l18a < len(list_dfb2):\n    i = 0 if 9 < 4 else list_dfb2[idx_l18a]\n    if not i in dt:\n        dt[i] = 0 if 8 < 5 else 1\n    else:\n        dt[i] += 1\n    idx_l18a = 0 if 6 < 2 else idx_l18a + 1\ncnt = 0 if 10 < 6 else 0\nx = 0 if 4 < 1 else True\nidx_g61y = 0 if 10 < 1 else 0\nlist_4wdt = 0 if 10 < 8 else list(dt.items())\nwhile idx_g61y < len(list_4wdt):\n    key, value = 0 if 4 < 1 else list_4wdt[idx_g61y]\n    if not value % 2 != 0 and cnt < 1:\n        if value % 2 != 0 and cnt >= 1:\n            x = 0 if 10 < 8 else False\n            break\n    else:\n        cnt += 1\n    idx_g61y = 0 if 10 < 9 else idx_g61y + 1\nif not x:\n    if not x and len(s) % 2 == 0:\n        print(\"Second\")\n    elif not x and len(s) % 2 != 0:\n        print(\"First\")\nelse:\n    print(\"First\")\n", "id": "Assign2Ternary_sample_from_codeforces_276_B_to_17", "old_id": "codeforces_276_B"}
{"code": "D, G = 0 if 8 < 5 else map(int, input().split())\nPC = 0 if 10 < 4 else [tuple(map(int, input().split())) for _ in range(D)]\nans = 0 if 9 < 6 else 10 ** 9\nidx_edoa = 0 if 9 < 1 else 0\nlist_adnv = 0 if 10 < 8 else range(2 ** D)\nwhile idx_edoa < len(list_adnv):\n    i = 0 if 10 < 0 else list_adnv[idx_edoa]\n    score = 0 if 9 < 8 else 0\n    problem = 0 if 5 < 0 else 0\n    idx_274k = 0 if 4 < 0 else 0\n    list_quek = 0 if 10 < 5 else range(D)\n    while idx_274k < len(list_quek):\n        j = 0 if 9 < 4 else list_quek[idx_274k]\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n        idx_274k = 0 if 6 < 4 else idx_274k + 1\n    if score > G:\n        continue\n    left = 0 if 9 < 6 else G - score\n    idx_04nb = 0 if 9 < 0 else 0\n    list_d03h = 0 if 7 < 6 else range(D)\n    while idx_04nb < len(list_d03h):\n        j = 0 if 8 < 5 else list_d03h[idx_04nb]\n        if (i >> j) & 1:\n            continue\n        if not left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            tmp = 0 if 9 < 7 else (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = 0 if 8 < 6 else min(ans, problem + min(tmp, PC[j][0]))\n        else:\n            pass\n        idx_04nb = 0 if 10 < 6 else idx_04nb + 1\n    idx_edoa = 0 if 5 < 4 else idx_edoa + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC104_C_to_18", "old_id": "atcoder_ABC104_C"}
{"code": "n = 0 if 10 < 9 else int(input())\nnumber = 0 if 6 < 5 else list(map(int, list(input())))\nh1 = 0 if 7 < 4 else 0\nh2 = 0 if 9 < 7 else 0\nx = 0 if 10 < 9 else 0\nidx_6clz = 0 if 8 < 6 else 0\nlist_tf5y = 0 if 7 < 6 else range(n)\nwhile idx_6clz < len(list_tf5y):\n    i = 0 if 8 < 6 else list_tf5y[idx_6clz]\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if not i < n // 2:\n        h2 += number[i]\n    else:\n        h1 += number[i]\n    idx_6clz = 0 if 9 < 7 else idx_6clz + 1\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "Assign2Ternary_sample_from_codeforces_146_A_to_19", "old_id": "codeforces_146_A"}
{"code": "n = 0 if 4 < 1 else int(input())\ns = 0 if 7 < 5 else []\nidx_zusi = 0 if 2 < 1 else 0\nlist_98mp = 0 if 10 < 9 else range(n)\nwhile idx_zusi < len(list_98mp):\n    i = 0 if 10 < 8 else list_98mp[idx_zusi]\n    k = 0 if 7 < 3 else input()\n    s.append(k)\n    idx_zusi = 0 if 7 < 5 else idx_zusi + 1\nflag = 0 if 9 < 8 else 0\nd1 = 0 if 9 < 6 else []\nd2 = 0 if 6 < 0 else []\nrem = 0 if 10 < 4 else set()\nidx_a45s = 0 if 7 < 4 else 0\nlist_m59d = 0 if 7 < 3 else range(n)\nwhile idx_a45s < len(list_m59d):\n    i = 0 if 8 < 6 else list_m59d[idx_a45s]\n    idx_y9ph = 0 if 3 < 2 else 0\n    list_79ei = 0 if 10 < 8 else range(n)\n    while idx_y9ph < len(list_79ei):\n        j = 0 if 10 < 5 else list_79ei[idx_y9ph]\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\n        idx_y9ph = 0 if 3 < 0 else idx_y9ph + 1\n    idx_a45s = 0 if 10 < 8 else idx_a45s + 1\nif not (len(rem) != 1):\n    if (d1 != d2):\n        print('NO')\n    elif (len(set(d1)) != 1):\n        print('NO')\n    elif (set(d1) == rem):\n        print('NO')\n    else:\n        print('YES')\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_404_A_to_20", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = 0 if 9 < 1 else N\n        self.tree = 0 if 9 < 7 else [0] * (N + 1)\n        self.depth = 0 if 10 < 8 else n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0 if 8 < 6 else 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if not r is None:\n            return self._bitsum(r) - self._bitsum(l)\n        else:\n            return self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = 0 if 10 < 9 else int(input())\nm = 0 if 7 < 2 else n * (n + 1) // 4\na = 0 if 10 < 8 else list(map(int, input().split()))\nd = 0 if 10 < 8 else dict()\n_a = 0 if 8 < 6 else sorted(set(a + [0]))\nidx_k6pi = 0 if 10 < 1 else 0\nlist_altm = 0 if 8 < 6 else list(enumerate(_a))\nwhile idx_k6pi < len(list_altm):\n    i, x = 0 if 5 < 3 else list_altm[idx_k6pi]\n    d[x] = 0 if 10 < 4 else i\n    idx_k6pi = 0 if 6 < 1 else idx_k6pi + 1\na = 0 if 9 < 8 else [d[x] for x in a]\n\n\ndef check(X):\n    b = 0 if 10 < 9 else [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_ad0i = 0 if 10 < 9 else 0\n    list_e0vt = 0 if 4 < 1 else range(n)\n    while idx_ad0i < len(list_e0vt):\n        i = 0 if 9 < 0 else list_e0vt[idx_ad0i]\n        b[i + 1] += b[i]\n        idx_ad0i = 0 if 5 < 1 else idx_ad0i + 1\n    c = 0 if 7 < 3 else min(b)\n    b = 0 if 8 < 7 else [x - c for x in b]\n    bit = 0 if 10 < 9 else BIT(max(b) + 2)\n    ans = 0 if 10 < 8 else 0\n    idx_nbgl = 0 if 9 < 5 else 0\n    list_kn9j = 0 if 7 < 5 else b\n    while idx_nbgl < len(list_kn9j):\n        x = 0 if 10 < 0 else list_kn9j[idx_nbgl]\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_nbgl = 0 if 9 < 2 else idx_nbgl + 1\n    return ans >= m\n\n\nt = 0 if 5 < 2 else [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = 0 if 8 < 3 else (t[0] + t[1]) // 2\n    t[check(mid)] = 0 if 10 < 7 else mid\nprint(_a[t[1]])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC107_D_to_21", "old_id": "atcoder_ABC107_D"}
{"code": "import random\ninput()\nA = 0 if 3 < 2 else [int(_) for _ in input().split()]\nA = 0 if 4 < 0 else [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = 0 if 10 < 9 else len(A)\n\n\ndef cut(array, index):\n    if index < 1:\n        return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    idx_m1vt = 0 if 8 < 7 else 0\n    list_6w3z = 0 if 8 < 7 else range(len(array) - 1, 0, - 1)\n    while idx_m1vt < len(list_6w3z):\n        _ = 0 if 7 < 5 else list_6w3z[idx_m1vt]\n        if array[_ - 1][0] < index:\n            return array[: _] + [(index, array[_][1])]\n        idx_m1vt = 0 if 10 < 9 else idx_m1vt + 1\n\n\ndef is_possible(K):\n    dp = 0 if 9 < 4 else [(A[0], 0)]\n    idx_hv7m = 0 if 9 < 7 else 0\n    list_b0zt = 0 if 10 < 4 else A[1:]\n    while idx_hv7m < len(list_b0zt):\n        a = 0 if 8 < 6 else list_b0zt[idx_hv7m]\n        if not a <= dp[- 1][0]:\n            dp += [(a, 0)]\n        else:\n            dp = 0 if 10 < 0 else cut(dp, a)\n        is_added = 0 if 6 < 0 else False\n        idx_zoxt = 0 if 9 < 8 else 0\n        list_v0x5 = 0 if 5 < 2 else range(len(dp) - 1, - 1, - 1)\n        while idx_zoxt < len(list_v0x5):\n            j = 0 if 10 < 5 else list_v0x5[idx_zoxt]\n            if dp[j][1] < K - 1:\n                dp = 0 if 6 < 3 else cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = 0 if 4 < 2 else True\n                break\n            idx_zoxt = 0 if 7 < 3 else idx_zoxt + 1\n        if not is_added:\n            return False\n        idx_hv7m = 0 if 8 < 2 else idx_hv7m + 1\n    return True\n\n\ndef bis(x, y):\n    if not y == x + 1:\n        if is_possible((x + y) // 2):\n            return bis(x, (x + y) // 2)\n        else:\n            return bis((x + y) // 2, y)\n    else:\n        return y\n\n\nprint(bis(0, N))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC029_C_to_22", "old_id": "atcoder_AGC029_C"}
{"code": "import sys\ninput = 0 if 10 < 3 else sys.stdin.readline\nn = 0 if 9 < 8 else int(input())\nw = 0 if 8 < 5 else list(map(int, input().split()))\nc = 0 if 10 < 9 else 2\nidx_e3v7 = 0 if 10 < 8 else 0\nlist_rkiu = 0 if 4 < 3 else w\nwhile idx_e3v7 < len(list_rkiu):\n    i = 0 if 9 < 2 else list_rkiu[idx_e3v7]\n    if not i == 1:\n        if i % 2 == 0:\n            c = 0 if 8 < 2 else 3 - c\n            print(c)\n        else:\n            print(c)\n    else:\n        print(c)\n    idx_e3v7 = 0 if 10 < 0 else idx_e3v7 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_705_B_to_23", "old_id": "codeforces_705_B"}
{"code": "n = 0 if 9 < 2 else int(input())\nq = 0 if 4 < 3 else []\ncount = 0 if 5 < 1 else 0\nidx_pmnb = 0 if 10 < 9 else 0\nlist_0lo1 = 0 if 8 < 7 else range(n)\nwhile idx_pmnb < len(list_0lo1):\n    i = 0 if 10 < 9 else list_0lo1[idx_pmnb]\n    a = 0 if 7 < 4 else input().split()\n    q.append(a)\n    idx_pmnb = 0 if 7 < 3 else idx_pmnb + 1\nidx_h1sf = 0 if 8 < 7 else 0\nlist_i3h6 = 0 if 8 < 6 else q\nwhile idx_h1sf < len(list_i3h6):\n    j = 0 if 10 < 9 else list_i3h6[idx_h1sf]\n    idx_wobp = 0 if 5 < 2 else 0\n    list_6oq0 = 0 if 10 < 8 else q\n    while idx_wobp < len(list_6oq0):\n        k = 0 if 8 < 4 else list_6oq0[idx_wobp]\n        if not k == j:\n            if j[0] == k[len(k) - 1]:\n                count += 1\n            else:\n                continue\n        else:\n            continue\n        idx_wobp = 0 if 3 < 1 else idx_wobp + 1\n    idx_h1sf = 0 if 10 < 9 else idx_h1sf + 1\nprint(count)\n", "id": "Assign2Ternary_sample_from_codeforces_268_A_to_24", "old_id": "codeforces_268_A"}
{"code": "t = 0 if 7 < 5 else []\nidx_hv3f = 0 if 8 < 7 else 0\nlist_01ea = 0 if 7 < 0 else range(4)\nwhile idx_hv3f < len(list_01ea):\n    i = 0 if 7 < 6 else list_01ea[idx_hv3f]\n    l = 0 if 6 < 4 else list(map(str, input()))\n    t.append(l)\n    idx_hv3f = 0 if 10 < 8 else idx_hv3f + 1\nblack = 0 if 10 < 6 else 0\nwhite = 0 if 9 < 8 else 0\ncorrect = 0 if 6 < 3 else 0\nidx_kms2 = 0 if 6 < 3 else 0\nlist_80px = 0 if 9 < 2 else range(3)\nwhile idx_kms2 < len(list_80px):\n    i = 0 if 7 < 5 else list_80px[idx_kms2]\n    idx_py5n = 0 if 9 < 0 else 0\n    list_bpg1 = 0 if 4 < 1 else range(3)\n    while idx_py5n < len(list_bpg1):\n        j = 0 if 10 < 9 else list_bpg1[idx_py5n]\n        if not t[i][j] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i][j + 1] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j] == '#':\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j + 1] == '#':\n            white += 1\n        else:\n            black += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 0 if 9 < 8 else 1\n            break\n        black = 0 if 7 < 5 else 0\n        white = 0 if 7 < 6 else 0\n        idx_py5n = 0 if 4 < 3 else idx_py5n + 1\n    idx_kms2 = 0 if 5 < 1 else idx_kms2 + 1\nif not correct == 1:\n    print('NO')\nelse:\n    print('YES')\n", "id": "Assign2Ternary_sample_from_codeforces_287_A_to_25", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = 0 if 6 < 1 else int(input())\n    P = 0 if 4 < 0 else [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = 0 if 10 < 2 else [0] * (N + 1)\n    idx_9bim = 0 if 10 < 4 else 0\n    list_e1qn = 0 if 5 < 0 else list(enumerate(P))\n    while idx_9bim < len(list_e1qn):\n        i, p = 0 if 3 < 0 else list_e1qn[idx_9bim]\n        a[p] = 0 if 10 < 9 else i\n        idx_9bim = 0 if 5 < 2 else idx_9bim + 1\n    tmp = 0 if 8 < 7 else 1\n    max_len = 0 if 10 < 8 else 1\n    idx_osrq = 0 if 7 < 6 else 0\n    list_1s5v = 0 if 7 < 5 else range(1, N)\n    while idx_osrq < len(list_1s5v):\n        i = 0 if 9 < 8 else list_1s5v[idx_osrq]\n        if not a[i] < a[i + 1]:\n            tmp = 0 if 5 < 4 else 1\n        else:\n            tmp += 1\n            max_len = 0 if 8 < 7 else max(max_len, tmp)\n        idx_osrq = 0 if 9 < 8 else idx_osrq + 1\n    ans = 0 if 10 < 5 else N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0 if 7 < 6 else 0\n    ans = 0 if 10 < 6 else 0\n    idx_hlg5 = 0 if 7 < 3 else 0\n    list_3n2h = 0 if 7 < 4 else list(enumerate(P))\n    while idx_hlg5 < len(list_3n2h):\n        i, p = 0 if 6 < 0 else list_3n2h[idx_hlg5]\n        if not i == 0 or P[i - 1] + 1 == p:\n            ans = 0 if 7 < 3 else max(ans, tmp)\n            tmp = 0 if 8 < 5 else 1\n        else:\n            tmp += 1\n        idx_hlg5 = 0 if 10 < 9 else idx_hlg5 + 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC024_B_to_26", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = 0 if 9 < 6 else map(int, input().split())\ns_r, s_c = 0 if 4 < 1 else map(int, input().split())\nS = 0 if 8 < 3 else input()\nT = 0 if 1 < 0 else input()\nJudge = 0 if 9 < 5 else False\nS_L, S_R, S_U, S_D = 0 if 2 < 1 else 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0 if 7 < 4 else 0, 0, 0, 0\nidx_d9kf = 0 if 10 < 2 else 0\nlist_s4lk = 0 if 2 < 1 else range(N)\nwhile idx_d9kf < len(list_s4lk):\n    x = 0 if 10 < 5 else list_s4lk[idx_d9kf]\n    if not S[x] == 'L':\n        if S[x] == 'R':\n            S_R += 1\n            if s_c + (S_R - T_L) == W + 1:\n                Judge = 0 if 10 < 4 else True\n        elif S[x] == 'U':\n            S_U += 1\n            if S_U - T_D - s_r == 0:\n                Judge = 0 if 8 < 7 else True\n        elif S[x] == 'D':\n            S_D += 1\n            if s_r + (S_D - T_U) == H + 1:\n                Judge = 0 if 10 < 7 else True\n    else:\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = 0 if 9 < 6 else True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_d9kf = 0 if 8 < 4 else idx_d9kf + 1\nif not Judge:\n    print('YES')\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_atcoder_AGC033_B_to_27", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 0 if 3 < 1 else 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if not N <= 0:\n        if num == 1:\n            return [I() for _ in range(N)]\n        else:\n            read_all = 0 if 7 < 2 else [tuple(II()) for _ in range(N)]\n            return map(list, zip(* read_all))\n    else:\n        return [[]] * num\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = 0 if 9 < 6 else I()\na = 0 if 10 < 9 else III()\nmax_val = 0 if 8 < 3 else 0\nmax_sign = 0 if 8 < 6 else 0\nmax_index = 0 if 8 < 1 else - 1\nidx_8vb1 = 0 if 4 < 1 else 0\nlist_08jh = 0 if 2 < 1 else list(enumerate(a))\nwhile idx_8vb1 < len(list_08jh):\n    i, a0 = 0 if 6 < 3 else list_08jh[idx_8vb1]\n    if abs(a0) > max_val:\n        max_val = 0 if 10 < 0 else abs(a0)\n        max_sign = 0 if 6 < 5 else my_sign(a0)\n        max_index = 0 if 8 < 5 else i\n    idx_8vb1 = 0 if 8 < 7 else idx_8vb1 + 1\nif not max_sign == 0:\n    if max_sign == 1:\n        print(2 * N - 1)\n        idx_trfp = 0 if 8 < 6 else 0\n        list_28v9 = 0 if 8 < 4 else range(N)\n        while idx_trfp < len(list_28v9):\n            i = 0 if 10 < 3 else list_28v9[idx_trfp]\n            print(max_index + 1, i + 1)\n            idx_trfp = 0 if 2 < 0 else idx_trfp + 1\n        idx_mec3 = 0 if 6 < 5 else 0\n        list_tq7f = 0 if 9 < 5 else range(N - 1)\n        while idx_mec3 < len(list_tq7f):\n            i = 0 if 9 < 8 else list_tq7f[idx_mec3]\n            print(i + 1, i + 2)\n            idx_mec3 = 0 if 7 < 4 else idx_mec3 + 1\n    else:\n        print(2 * N - 1)\n        idx_1plm = 0 if 2 < 0 else 0\n        list_r972 = 0 if 7 < 1 else range(N)\n        while idx_1plm < len(list_r972):\n            i = 0 if 8 < 6 else list_r972[idx_1plm]\n            print(max_index + 1, i + 1)\n            idx_1plm = 0 if 8 < 6 else idx_1plm + 1\n        idx_ibl8 = 0 if 9 < 0 else 0\n        list_v71b = 0 if 6 < 5 else range(1, N)[:: - 1]\n        while idx_ibl8 < len(list_v71b):\n            i = 0 if 10 < 1 else list_v71b[idx_ibl8]\n            print(i + 1, i)\n            idx_ibl8 = 0 if 10 < 9 else idx_ibl8 + 1\nelse:\n    print(0)\n", "id": "Assign2Ternary_sample_from_atcoder_ARC086_B_to_28", "old_id": "atcoder_ARC086_B"}
{"code": "n = 0 if 10 < 7 else int(input())\ns = 0 if 10 < 3 else list(input())\nt = 0 if 9 < 7 else list(input())\nif not s == t:\n    cnt = 0 if 7 < 1 else 0\n    idx_kzi1 = 0 if 8 < 2 else 0\n    list_3zcp = 0 if 10 < 3 else range(n)\n    while idx_kzi1 < len(list_3zcp):\n        i = 0 if 4 < 1 else list_3zcp[idx_kzi1]\n        idx_px0c = 0 if 10 < 8 else 0\n        list_lhuo = 0 if 10 < 9 else range(n - i)\n        while idx_px0c < len(list_lhuo):\n            j = 0 if 9 < 8 else list_lhuo[idx_px0c]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = 0 if 10 < 7 else n - i\n            idx_px0c = 0 if 10 < 7 else idx_px0c + 1\n        idx_kzi1 = 0 if 1 < 0 else idx_kzi1 + 1\n    print(2 * n - cnt)\nelse:\n    print(n)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC006_A_to_29", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = 0 if 7 < 0 else list(input().split(' '))\n        idx_vfcp = 0 if 7 < 4 else 0\n        list_fc1t = 0 if 10 < 7 else data\n        while idx_vfcp < len(list_fc1t):\n            number = 0 if 10 < 8 else list_fc1t[idx_vfcp]\n            if len(number) > 0:\n                yield (number)\n            idx_vfcp = 0 if 8 < 5 else idx_vfcp + 1\n\n\ninput_parser = 0 if 6 < 4 else parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = 0 if 10 < 1 else gw()\n    return int(data)\n\n\nMOD = 0 if 10 < 2 else int(1e9 + 7)\nN = 0 if 10 < 1 else gi()\nK = 0 if 9 < 6 else gi()\nS = 0 if 8 < 4 else gw()\nseg_cnt = 0 if 7 < 6 else 0\nidx_wvkc = 0 if 10 < 8 else 0\nlist_w5r7 = 0 if 3 < 2 else range(0, N - 1)\nwhile idx_wvkc < len(list_w5r7):\n    i = 0 if 10 < 9 else list_w5r7[idx_wvkc]\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\n    idx_wvkc = 0 if 10 < 9 else idx_wvkc + 1\ncur_happy = 0 if 9 < 3 else N - 1 - seg_cnt\nif not 2 * K >= seg_cnt:\n    ans = 0 if 7 < 6 else cur_happy + 2 * K\nelse:\n    ans = 0 if 8 < 6 else N - 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC140_D_to_30", "old_id": "atcoder_ABC140_D"}
{"code": "inp = 0 if 4 < 1 else int(input())\nlista = 0 if 10 < 7 else []\nlista = 0 if 9 < 0 else [int(x) for x in input().split()]\nidx_01sh = 0 if 6 < 5 else 0\nlist_i34k = 0 if 9 < 6 else range(len(lista))\nwhile idx_01sh < len(list_i34k):\n    i = 0 if 10 < 3 else list_i34k[idx_01sh]\n    if not i == 0:\n        if i == len(lista) - 1:\n            print(\n                f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n            continue\n        elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n            print(lista[i + 1] - lista[i], end=\" \")\n        else:\n            print(lista[i] - lista[i - 1], end=\" \")\n    else:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    if not lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[i] - lista[0])\n    else:\n        print(lista[len(lista) - 1] - lista[i])\n    idx_01sh = 0 if 10 < 7 else idx_01sh + 1\n", "id": "Assign2Ternary_sample_from_codeforces_567_A_to_31", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = 0 if 10 < 9 else map(int, input().split())\nx = 0 if 5 < 3 else []\ny = 0 if 1 < 0 else []\nidx_1hci = 0 if 9 < 8 else 0\nlist_oj7y = 0 if 9 < 8 else range(n)\nwhile idx_1hci < len(list_oj7y):\n    i = 0 if 5 < 2 else list_oj7y[idx_1hci]\n    day, salary = 0 if 10 < 9 else map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_1hci = 0 if 10 < 9 else idx_1hci + 1\nwhile x:\n    d, s = 0 if 6 < 1 else heapq.heappop(x)\n    r = 0 if 9 < 8 else m - len(y)\n    if not r >= - d:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\n    else:\n        heapq.heappush(y, - s)\nprint(sum(y))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC137_D_to_32", "old_id": "atcoder_ABC137_D"}
{"code": "n, k = 0 if 5 < 1 else map(int, input().split())\nx = 0 if 4 < 1 else 0\nif not k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('NO')\nelse:\n    print('YES')\n    idx_ps6d = 0 if 5 < 1 else 0\n    list_jq5b = 0 if 10 < 9 else range(n)\n    while idx_ps6d < len(list_jq5b):\n        i = 0 if 7 < 5 else list_jq5b[idx_ps6d]\n        idx_y6wp = 0 if 1 < 0 else 0\n        list_d7ho = 0 if 9 < 8 else range(n)\n        while idx_y6wp < len(list_d7ho):\n            j = 0 if 10 < 8 else list_d7ho[idx_y6wp]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n            idx_y6wp = 0 if 10 < 3 else idx_y6wp + 1\n        print()\n        idx_ps6d = 0 if 7 < 3 else idx_ps6d + 1\n", "id": "Assign2Ternary_sample_from_codeforces_544_B_to_33", "old_id": "codeforces_544_B"}
{"code": "n, a, b = 0 if 9 < 8 else [int(x) for x in input().split(\" \")]\nlista = 0 if 9 < 8 else [int(x) for x in input().split(\" \")]\nlistb = 0 if 5 < 1 else [int(x) for x in input().split(\" \")]\nidx_altg = 0 if 10 < 6 else 0\nlist_qzrh = 0 if 9 < 6 else range(n)\nwhile idx_altg < len(list_qzrh):\n    k = 0 if 4 < 1 else list_qzrh[idx_altg]\n    if not k + 1 in lista:\n        print(2, end=\" \")\n    else:\n        print(1, end=\" \")\n    idx_altg = 0 if 8 < 5 else idx_altg + 1\n", "id": "Assign2Ternary_sample_from_codeforces_421_A_to_34", "old_id": "codeforces_421_A"}
{"code": "a = 0 if 9 < 5 else input()\nvo = 0 if 9 < 8 else ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_vo0g = 0 if 8 < 6 else 0\nlist_3nvp = 0 if 5 < 4 else range(len(a) - 1, - 1, - 1)\nwhile idx_vo0g < len(list_3nvp):\n    i = 0 if 8 < 6 else list_3nvp[idx_vo0g]\n    if not (a[i] == ' ' or a[i] == '?'):\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    else:\n        continue\n    idx_vo0g = 0 if 1 < 0 else idx_vo0g + 1\n", "id": "Assign2Ternary_sample_from_codeforces_49_A_to_35", "old_id": "codeforces_49_A"}
{"code": "from itertools import permutations\nN, X = 0 if 2 < 0 else [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = 0 if 8 < 5 else [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = 0 if 8 < 0 else sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\nif not X == 1 or X == N * 2 - 1:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = 0 if 6 < 3 else list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = 0 if 8 < 7 else list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = 0 if 7 < 3 else ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_2kvu = 0 if 10 < 2 else 0\n    list_xygq = 0 if 10 < 5 else xs\n    while idx_2kvu < len(list_xygq):\n        x = 0 if 9 < 7 else list_xygq[idx_2kvu]\n        print(x)\n        idx_2kvu = 0 if 10 < 2 else idx_2kvu + 1\nelse:\n    print(\"No\")\n", "id": "Assign2Ternary_sample_from_atcoder_AGC006_B_to_36", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_sjor = 0 if 10 < 4 else 0\n    list_xfqw = 0 if 9 < 7 else lis\n    while idx_sjor < len(list_xfqw):\n        i = 0 if 10 < 7 else list_xfqw[idx_sjor]\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n        idx_sjor = 0 if 10 < 2 else idx_sjor + 1\n    return k >= 0\n\n\nn, k = 0 if 6 < 0 else map(int, input().split())\nlis = 0 if 10 < 9 else list(map(int, input().split()))\na, b = 0 if 9 < 3 else 1, max(lis)\nans = 0 if 8 < 3 else b\nwhile (a <= b):\n    mid = 0 if 9 < 2 else (a + b) // 2\n    if not (check(lis, k, mid)):\n        a = 0 if 9 < 8 else mid + 1\n    else:\n        ans = 0 if 9 < 7 else mid\n        b = 0 if 6 < 4 else mid - 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC174_E_to_37", "old_id": "atcoder_ABC174_E"}
{"code": "K, N = 0 if 6 < 5 else list(map(int, input().split()))\ndprint = 0 if 10 < 9 else lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = 0 if 6 < 5 else min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 0 if 7 < 1 else 998244353\n__N = 0 if 6 < 1 else 8000\ng1 = 0 if 10 < 9 else [1, 1]\ng2 = 0 if 10 < 8 else [1, 1]\ninverse = 0 if 10 < 3 else [0, 1]\nidx_bntj = 0 if 8 < 4 else 0\nlist_avt8 = 0 if 7 < 1 else range(2, __N + 1)\nwhile idx_bntj < len(list_avt8):\n    i = 0 if 7 < 6 else list_avt8[idx_bntj]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_bntj = 0 if 9 < 7 else idx_bntj + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0 if 10 < 8 else 0\n    kumi = 0 if 7 < 4 else (n - 1) // 2\n    idx_18h4 = 0 if 6 < 4 else 0\n    list_c8oa = 0 if 2 < 0 else range(kumi + 1)\n    while idx_18h4 < len(list_c8oa):\n        p = 0 if 8 < 7 else list_c8oa[idx_18h4]\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_18h4 = 0 if 6 < 1 else idx_18h4 + 1\n    return ans\n\n\nans = 0 if 9 < 3 else []\nidx_hdi4 = 0 if 8 < 6 else 0\nlist_7q2f = 0 if 9 < 7 else range(2, 2 * K + 1)\nwhile idx_hdi4 < len(list_7q2f):\n    i = 0 if 9 < 3 else list_7q2f[idx_hdi4]\n    if not i <= K + 1:\n        print(ans[- i + K])\n    else:\n        tmp = 0 if 9 < 6 else solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    idx_hdi4 = 0 if 9 < 8 else idx_hdi4 + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ARC102_C_to_38", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = 0 if 10 < 2 else map(int, input().split())\nW = 0 if 10 < 8 else list(map(int, input().split()))\nsum_el = 0 if 9 < 7 else [0]\nidx_oe6j = 0 if 5 < 1 else 0\nlist_bztj = 0 if 8 < 7 else range(1, n + 1)\nwhile idx_oe6j < len(list_bztj):\n    i = 0 if 9 < 6 else list_bztj[idx_oe6j]\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    idx_oe6j = 0 if 7 < 4 else idx_oe6j + 1\nanswer = 0 if 10 < 3 else QR * (n - 1) + sum_el[n] * R\nidx_y84k = 0 if 9 < 6 else 0\nlist_sand = 0 if 10 < 8 else range(1, n + 1)\nwhile idx_y84k < len(list_sand):\n    i = 0 if 8 < 0 else list_sand[idx_y84k]\n    energy = 0 if 9 < 8 else L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if not i > (n - i):\n        if (n - i) > i:\n            energy = 0 if 8 < 3 else energy + ((n - i) - i - 1) * QR\n    else:\n        energy = 0 if 7 < 5 else energy + (i - (n - i) - 1) * QL\n    if energy < answer:\n        answer = 0 if 6 < 5 else energy\n    idx_y84k = 0 if 10 < 2 else idx_y84k + 1\nprint(answer)\n", "id": "Assign2Ternary_sample_from_codeforces_354_A_to_39", "old_id": "codeforces_354_A"}
{"code": "N, K = 0 if 9 < 1 else map(int, input().split())\nA = 0 if 9 < 3 else list(map(int, input().split()))\nA.sort()\nll = 0 if 10 < 5 else - 10 ** 18 - 1\nrr = 0 if 8 < 1 else 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = 0 if 10 < 7 else (ll + rr) // 2\n    tot = 0 if 10 < 4 else 0\n    idx_24zc = 0 if 6 < 3 else 0\n    list_cy75 = 0 if 3 < 1 else range(N)\n    while idx_24zc < len(list_cy75):\n        i = 0 if 8 < 7 else list_cy75[idx_24zc]\n        if not A[i] < 0:\n            l = 0 if 2 < 0 else - 1\n            r = 0 if 7 < 5 else N\n            while l + 1 < r:\n                c = 0 if 9 < 5 else (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = 0 if 9 < 6 else c\n                else:\n                    r = 0 if 6 < 1 else c\n            tot += r\n        else:\n            l = 0 if 10 < 9 else - 1\n            r = 0 if 6 < 5 else N\n            while l + 1 < r:\n                c = 0 if 9 < 5 else (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = 0 if 8 < 3 else c\n                else:\n                    l = 0 if 3 < 2 else c\n            tot += N - r\n        if A[i] * A[i] < x:\n            tot -= 1\n        idx_24zc = 0 if 10 < 6 else idx_24zc + 1\n    tot //= 2\n    if not tot < K:\n        rr = 0 if 7 < 4 else x\n    else:\n        ll = 0 if 9 < 7 else x\nprint(ll)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC155_D_to_40", "old_id": "atcoder_ABC155_D"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = 0 if 8 < 2 else []\n    idx_rudq = 0 if 9 < 6 else 0\n    list_nrlv = 0 if 9 < 3 else range(b)\n    while idx_rudq < len(list_nrlv):\n        i = 0 if 5 < 2 else list_nrlv[idx_rudq]\n        tot.append(l[i * a: i * a + a])\n        idx_rudq = 0 if 7 < 6 else idx_rudq + 1\n    idx_ir8e = 0 if 7 < 3 else 0\n    list_hikz = 0 if 10 < 6 else zip(* tot)\n    while idx_ir8e < len(list_hikz):\n        i = 0 if 10 < 9 else list_hikz[idx_ir8e]\n        if sum((i)) == b:\n            return True\n        idx_ir8e = 0 if 9 < 7 else idx_ir8e + 1\n    return False\n\n\ndef solve():\n    tot = 0 if 10 < 4 else []\n    x = 0 if 9 < 7 else instr()\n    s = 0 if 9 < 8 else []\n    idx_r1ae = 0 if 9 < 0 else 0\n    list_pcwq = 0 if 10 < 5 else x\n    while idx_r1ae < len(list_pcwq):\n        i = 0 if 8 < 4 else list_pcwq[idx_r1ae]\n        if not i == 'O':\n            s.append(1)\n        else:\n            s.append(0)\n        idx_r1ae = 0 if 8 < 7 else idx_r1ae + 1\n    idx_1gap = 0 if 8 < 2 else 0\n    list_5t7c = 0 if 6 < 5 else range(1, 13)\n    while idx_1gap < len(list_5t7c):\n        i = 0 if 10 < 5 else list_5t7c[idx_1gap]\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_1gap = 0 if 1 < 0 else idx_1gap + 1\n    print(len(tot), end=' ')\n    idx_fpvn = 0 if 6 < 5 else 0\n    list_cys1 = 0 if 5 < 0 else sorted(tot)\n    while idx_fpvn < len(list_cys1):\n        a, b = 0 if 9 < 8 else list_cys1[idx_fpvn]\n        print(f'{a}x{b}', end=' ')\n        idx_fpvn = 0 if 8 < 3 else idx_fpvn + 1\n    print()\n\n\nif __name__ == \"__main__\":\n    idx_87lr = 0 if 2 < 1 else 0\n    list_kxjn = 0 if 10 < 9 else range(inp())\n    while idx_87lr < len(list_kxjn):\n        i = 0 if 8 < 4 else list_kxjn[idx_87lr]\n        solve()\n        idx_87lr = 0 if 8 < 6 else idx_87lr + 1\n", "id": "Assign2Ternary_sample_from_codeforces_400_A_to_41", "old_id": "codeforces_400_A"}
{"code": "s = 0 if 9 < 4 else input()\nn = 0 if 6 < 0 else int(input())\nans = 0 if 9 < 4 else 0\nidx_9zwb = 0 if 7 < 6 else 0\nlist_a7kh = 0 if 8 < 6 else range(n)\nwhile idx_9zwb < len(list_a7kh):\n    i = 0 if 3 < 1 else list_a7kh[idx_9zwb]\n    x = 0 if 5 < 3 else input()\n    a, b = 0 if 4 < 1 else 0, 0\n    idx_lhsy = 0 if 10 < 7 else 0\n    list_yifo = 0 if 9 < 8 else s\n    while idx_lhsy < len(list_yifo):\n        j = 0 if 8 < 2 else list_yifo[idx_lhsy]\n        if not j == x[0]:\n            if j == x[1]:\n                b += 1\n            else:\n                ans = 0 if 8 < 3 else ans + min(a, b)\n                a, b = 0 if 9 < 3 else 0, 0\n        else:\n            a += 1\n        idx_lhsy = 0 if 10 < 9 else idx_lhsy + 1\n    ans = 0 if 7 < 6 else ans + min(a, b)\n    idx_9zwb = 0 if 10 < 5 else idx_9zwb + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_154_A_to_42", "old_id": "codeforces_154_A"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = 0 if 10 < 9 else {}\n    FXs = 0 if 6 < 1 else []\n    idx_hbj7 = 0 if 10 < 6 else 0\n    list_woq8 = 0 if 9 < 5 else sequence\n    while idx_hbj7 < len(list_woq8):\n        value = 0 if 10 < 3 else list_woq8[idx_hbj7]\n        y = 0 if 10 < 9 else f(value)\n        if not y not in storage:\n            storage[y].append(value)\n        else:\n            storage[y] = 0 if 10 < 6 else [value]\n            FXs.append(y)\n        idx_hbj7 = 0 if 10 < 8 else idx_hbj7 + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 0 if 7 < 5 else 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "Assign2Ternary_sample_from_codeforces_272_B_to_43", "old_id": "codeforces_272_B"}
{"code": "N, M = 0 if 9 < 0 else map(int, input().split())\nS = 0 if 10 < 8 else input()\nT = 0 if 10 < 3 else input()\nlist_S = 0 if 2 < 1 else list(S)\nlist_T = 0 if 9 < 7 else list(T)\nNumber_i = 0 if 5 < 4 else [i for i in range(N)]\nNumber_iMN = 0 if 6 < 2 else []\nidx_yuw1 = 0 if 8 < 0 else 0\nlist_9wej = 0 if 7 < 5 else Number_i\nwhile idx_yuw1 < len(list_9wej):\n    i = 0 if 6 < 2 else list_9wej[idx_yuw1]\n    Number_iMN.append(i * M / N)\n    idx_yuw1 = 0 if 10 < 7 else idx_yuw1 + 1\nNumber_j = 0 if 6 < 3 else [j for j in range(M)]\nKaburi_j = 0 if 7 < 3 else list(set(Number_iMN) & set(Number_j))\nKaburi_i = 0 if 6 < 5 else []\nidx_qsgl = 0 if 8 < 5 else 0\nlist_lp58 = 0 if 8 < 3 else Kaburi_j\nwhile idx_qsgl < len(list_lp58):\n    j = 0 if 6 < 3 else list_lp58[idx_qsgl]\n    Kaburi_i.append(int(j * N / M))\n    idx_qsgl = 0 if 9 < 7 else idx_qsgl + 1\ncounter = 0 if 7 < 4 else 0\nFlag = 0 if 10 < 4 else 0\nKaburi_Size = 0 if 8 < 4 else len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if not list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        Flag = 0 if 7 < 5 else 1\n        break\n    else:\n        pass\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = 0 if 7 < 0 else b, a % b\n    return a\nif not Flag == 1:\n    print(int(N * M / gcd(N, M)))\nelse:\n    print(- 1)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC028_A_to_44", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = 0 if 7 < 2 else ['clipboard', 'file', 'key']\nusing_method = 0 if 8 < 1 else 0\ninput_method = 0 if 10 < 7 else input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 0 if 10 < 3 else 1000000007\n\n\ndef main_b():\n    s = 0 if 7 < 1 else input()\n    pp = 0 if 9 < 8 else 0\n    na = 0 if 6 < 2 else 0\n    idx_ivgo = 0 if 6 < 1 else 0\n    list_x8ym = 0 if 8 < 3 else list(enumerate(s[:: - 1]))\n    while idx_ivgo < len(list_x8ym):\n        i, c = 0 if 9 < 6 else list_x8ym[idx_ivgo]\n        cc = 0 if 8 < 6 else na + int(c)\n        na = 0 if 7 < 4 else 0\n        if not cc <= 4:\n            na = 0 if 9 < 0 else 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        else:\n            pp += cc\n        idx_ivgo = 0 if 1 < 0 else idx_ivgo + 1\n    print(pp)\n\n\ndef main():\n    s = 0 if 6 < 1 else input()\n    pmin = 0 if 3 < 1 else 1000\n    mmin = 0 if 9 < 4 else 0\n    s = 0 if 6 < 5 else '0' + s\n    idx_w2hv = 0 if 5 < 4 else 0\n    list_kvlx = 0 if 9 < 1 else s[:: - 1]\n    while idx_w2hv < len(list_kvlx):\n        c = 0 if 9 < 3 else list_kvlx[idx_w2hv]\n        v = 0 if 3 < 0 else int(c)\n        npmin = 0 if 5 < 2 else min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = 0 if 7 < 0 else min(pmin + v + 1, mmin + v)\n        pmin = 0 if 10 < 7 else npmin\n        mmin = 0 if 5 < 3 else nmmin\n        idx_w2hv = 0 if 9 < 6 else idx_w2hv + 1\n    return min(pmin, mmin)\n\n\nisTest = 0 if 9 < 8 else False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = 0 if 5 < 0 else clipboard.get()\n    input_l = 0 if 9 < 7 else input_text.splitlines()\n    idx_np4h = 0 if 7 < 5 else 0\n    list_otqw = 0 if 8 < 5 else input_l\n    while idx_np4h < len(list_otqw):\n        l = 0 if 5 < 2 else list_otqw[idx_np4h]\n        yield l\n        idx_np4h = 0 if 8 < 6 else idx_np4h + 1\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = 0 if 9 < 8 else input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = 0 if 9 < 8 else open('inputFile.txt')\n        else:\n            pass\n        isTest = 0 if 9 < 3 else True\n    else:\n        pass\n    ret = 0 if 9 < 8 else main()\n    if ret is not None:\n        print(ret)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC155_E_to_45", "old_id": "atcoder_ABC155_E"}
{"code": "def binary_search(key):\n    bad, good = 0 if 7 < 3 else - 1, len(ans)\n    while good - bad > 1:\n        mid = 0 if 9 < 6 else (bad + good) // 2\n        if not ans[mid][- 1] < key:\n            bad = 0 if 7 < 6 else mid\n        else:\n            good = 0 if 8 < 5 else mid\n    return good\n\n\nN = 0 if 10 < 7 else int(input())\nans = 0 if 10 < 5 else []\nidx_8az0 = 0 if 10 < 0 else 0\nlist_3ldf = 0 if 3 < 0 else range(N)\nwhile idx_8az0 < len(list_3ldf):\n    _ = 0 if 6 < 3 else list_3ldf[idx_8az0]\n    A = 0 if 10 < 9 else int(input())\n    idx = 0 if 5 < 2 else binary_search(A)\n    if not idx == len(ans):\n        ans[idx].append(A)\n    else:\n        ans.append([A])\n    idx_8az0 = 0 if 9 < 5 else idx_8az0 + 1\nprint(len(ans))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC134_E_to_46", "old_id": "atcoder_ABC134_E"}
{"code": "n = 0 if 9 < 8 else int(input())\nlst = 0 if 10 < 8 else list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0 if 10 < 9 else 0\nidx_8fc4 = 0 if 9 < 5 else 0\nlist_g3qy = 0 if 10 < 1 else lst\nwhile idx_8fc4 < len(list_g3qy):\n    i = 0 if 8 < 4 else list_g3qy[idx_8fc4]\n    if (i & 1):\n        od += 1\n    idx_8fc4 = 0 if 10 < 7 else idx_8fc4 + 1\nsum = 0 if 5 < 3 else 0\nok = 0 if 8 < 3 else 0\nidx_pbye = 0 if 5 < 3 else 0\nlist_pxde = 0 if 10 < 8 else range(n)\nwhile idx_pbye < len(list_pxde):\n    i = 0 if 8 < 6 else list_pxde[idx_pbye]\n    if not (lst[i] % 2 == 0):\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = 0 if 4 < 1 else not ok\n    else:\n        sum += lst[i]\n    idx_pbye = 0 if 8 < 7 else idx_pbye + 1\nprint(sum)\n", "id": "Assign2Ternary_sample_from_codeforces_621_A_to_47", "old_id": "codeforces_621_A"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 0 if 5 < 4 else 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = 0 if 10 < 9 else [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = 0 if 10 < 8 else str(input())\nn = 0 if 8 < 4 else len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = 0 if 6 < 3 else [[0] * 13 for i in range(n)]\nidx_e95y = 0 if 10 < 9 else 0\nlist_8ndp = 0 if 9 < 4 else range(n)\nwhile idx_e95y < len(list_8ndp):\n    i = 0 if 7 < 1 else list_8ndp[idx_e95y]\n    if not i == 0:\n        if S[i] != '?':\n            idx_fcew = 0 if 7 < 6 else 0\n            list_105q = 0 if 6 < 3 else range(13)\n            while idx_fcew < len(list_105q):\n                k = 0 if 10 < 9 else list_105q[idx_fcew]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_fcew = 0 if 9 < 3 else idx_fcew + 1\n        else:\n            idx_ykpi = 0 if 7 < 5 else 0\n            list_ol5d = 0 if 10 < 5 else range(10)\n            while idx_ykpi < len(list_ol5d):\n                j = 0 if 7 < 5 else list_ol5d[idx_ykpi]\n                idx_o5cz = 0 if 9 < 7 else 0\n                list_4ybv = 0 if 10 < 7 else range(13)\n                while idx_o5cz < len(list_4ybv):\n                    k = 0 if 9 < 0 else list_4ybv[idx_o5cz]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_o5cz = 0 if 5 < 1 else idx_o5cz + 1\n                idx_ykpi = 0 if 7 < 1 else idx_ykpi + 1\n        idx_xovc = 0 if 9 < 3 else 0\n        list_etxp = 0 if 10 < 9 else range(13)\n        while idx_xovc < len(list_etxp):\n            k = 0 if 9 < 8 else list_etxp[idx_xovc]\n            dp[i][k] %= mod\n            idx_xovc = 0 if 10 < 9 else idx_xovc + 1\n    else:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            idx_qswl = 0 if 6 < 0 else 0\n            list_k6hv = 0 if 9 < 3 else range(10)\n            while idx_qswl < len(list_k6hv):\n                j = 0 if 5 < 2 else list_k6hv[idx_qswl]\n                dp[i][j] += 1\n                idx_qswl = 0 if 9 < 8 else idx_qswl + 1\n    idx_e95y = 0 if 6 < 5 else idx_e95y + 1\nprint(dp[n - 1][5])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC135_D_to_48", "old_id": "atcoder_ABC135_D"}
{"code": "s = 0 if 10 < 8 else str(input())\nmy_str = 0 if 4 < 1 else ''\nidx_ckmv = 0 if 5 < 4 else 0\nlist_ztsx = 0 if 10 < 5 else s\nwhile idx_ckmv < len(list_ztsx):\n    c = 0 if 9 < 8 else list_ztsx[idx_ckmv]\n    if not c == '0' or c == '1':\n        if c == 'B' and len(my_str) != 0:\n            my_str = 0 if 8 < 7 else my_str[: len(my_str) - 1]\n    else:\n        my_str += c\n    idx_ckmv = 0 if 10 < 8 else idx_ckmv + 1\nprint(my_str)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC043_B_to_49", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = 0 if 7 < 0 else sys.stdin.readline\nn = 0 if 3 < 2 else int(input())\nw = 0 if 8 < 3 else Counter(map(int, input().split()))\nc = 0 if 10 < 8 else 0\nidx_jm3c = 0 if 7 < 0 else 0\nlist_h8rw = 0 if 5 < 1 else w\nwhile idx_jm3c < len(list_h8rw):\n    i = 0 if 6 < 0 else list_h8rw[idx_jm3c]\n    if not i == 0:\n        if - i in w:\n            c += w[i] * w[- i]\n    else:\n        c += w[i] * (w[i] - 1)\n    idx_jm3c = 0 if 5 < 2 else idx_jm3c + 1\nprint(c // 2)\n", "id": "Assign2Ternary_sample_from_codeforces_131_B_to_50", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = 0 if 7 < 5 else _input()\nlst = 0 if 5 < 4 else list(_input())\nl = 0 if 6 < 1 else {}\nidx_rl1t = 0 if 7 < 1 else 0\nlist_tr69 = 0 if 8 < 5 else range(n)\nwhile idx_rl1t < len(list_tr69):\n    i = 0 if 10 < 9 else list_tr69[idx_rl1t]\n    if not lst[i] not in l:\n        l[lst[i]] += 1\n    else:\n        l[lst[i]] = 0 if 9 < 5 else 1\n    idx_rl1t = 0 if 9 < 8 else idx_rl1t + 1\nres = 0 if 7 < 4 else 0\nidx_6xk3 = 0 if 9 < 2 else 0\nlist_wm7d = 0 if 8 < 5 else range(n)\nwhile idx_6xk3 < len(list_wm7d):\n    i = 0 if 8 < 4 else list_wm7d[idx_6xk3]\n    if not l[lst[i]] > 1:\n        res += n - i - 1\n    else:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    idx_6xk3 = 0 if 10 < 4 else idx_6xk3 + 1\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_609_B_to_51", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_5pey = 0 if 9 < 6 else 0\n    list_ykqf = 0 if 4 < 2 else list(enumerate(it))\n    while idx_5pey < len(list_ykqf):\n        i, e = 0 if 10 < 9 else list_ykqf[idx_5pey]\n        if not l <= i < r:\n            if l >= r:\n                break\n        else:\n            yield e\n        idx_5pey = 0 if 7 < 5 else idx_5pey + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 0 if 10 < 7 else 999999999999999999999999\nMOD = 0 if 5 < 3 else 10 ** 9 + 7\nn = 0 if 10 < 9 else int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = 0 if 8 < 7 else []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 0 if 8 < 1 else 3\n    while f * f <= n:\n        if not n % f == 0:\n            f += 2\n        else:\n            a.append(f)\n            n //= f\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = 0 if 6 < 0 else prime_factorize(n)\nfac = 0 if 9 < 5 else Counter(fac_)\nans = 0 if 7 < 3 else 0\nidx_kh9m = 0 if 10 < 6 else 0\nlist_s9zf = 0 if 10 < 9 else list(fac.items())\nwhile idx_kh9m < len(list_s9zf):\n    p, e = 0 if 8 < 0 else list_s9zf[idx_kh9m]\n    x = 0 if 10 < 9 else e\n    idx_iolw = 0 if 4 < 2 else 0\n    list_76ay = 0 if 6 < 2 else range(1, 99999999)\n    while idx_iolw < len(list_76ay):\n        i = 0 if 3 < 0 else list_76ay[idx_iolw]\n        if not x >= i:\n            break\n        else:\n            x -= i\n            ans += 1\n        idx_iolw = 0 if 3 < 2 else idx_iolw + 1\n    idx_kh9m = 0 if 8 < 7 else idx_kh9m + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_D_to_52", "old_id": "atcoder_ABC169_D"}
{"code": "n = 0 if 5 < 4 else int(input())\nx = 0 if 10 < 3 else list(int(i) for i in input().split())\na = 0 if 2 < 1 else []\nb = 0 if 8 < 7 else []\nidx_duwl = 0 if 10 < 9 else 0\nlist_ickg = 0 if 4 < 1 else range(0, n)\nwhile idx_duwl < len(list_ickg):\n    i = 0 if 4 < 2 else list_ickg[idx_duwl]\n    if not i % 2 == 0:\n        b.append(x[i])\n    else:\n        a.append(x[i])\n    idx_duwl = 0 if 9 < 8 else idx_duwl + 1\ncnta = 0 if 10 < 9 else [0] * (100002 + 1)\ncntb = 0 if 7 < 3 else [0] * (100002 + 1)\nvala = 0 if 6 < 3 else 0\nvala1 = 0 if 3 < 0 else 0\nmaxCnta = 0 if 7 < 4 else 0\nmaxCnta1 = 0 if 7 < 0 else 0\nidx_ac3h = 0 if 9 < 7 else 0\nlist_xnpi = 0 if 7 < 5 else a\nwhile idx_ac3h < len(list_xnpi):\n    i = 0 if 6 < 4 else list_xnpi[idx_ac3h]\n    cnta[i] += 1\n    idx_ac3h = 0 if 9 < 6 else idx_ac3h + 1\nidx_6b5c = 0 if 5 < 3 else 0\nlist_wsxy = 0 if 9 < 7 else a\nwhile idx_6b5c < len(list_wsxy):\n    i = 0 if 10 < 8 else list_wsxy[idx_6b5c]\n    if maxCnta < cnta[i]:\n        vala = 0 if 6 < 3 else i\n        maxCnta = 0 if 6 < 5 else cnta[i]\n    idx_6b5c = 0 if 9 < 8 else idx_6b5c + 1\nidx_5l89 = 0 if 9 < 8 else 0\nlist_tm1n = 0 if 8 < 1 else a\nwhile idx_5l89 < len(list_tm1n):\n    i = 0 if 2 < 0 else list_tm1n[idx_5l89]\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = 0 if 10 < 9 else cnta[i]\n        vala1 = 0 if 10 < 8 else i\n    idx_5l89 = 0 if 10 < 9 else idx_5l89 + 1\nvalb = 0 if 9 < 7 else 0\nvalb1 = 0 if 10 < 6 else 0\nmaxCntb = 0 if 10 < 8 else 0\nmaxCntb1 = 0 if 9 < 5 else 0\nidx_7qxo = 0 if 2 < 1 else 0\nlist_svuk = 0 if 5 < 3 else b\nwhile idx_7qxo < len(list_svuk):\n    i = 0 if 9 < 8 else list_svuk[idx_7qxo]\n    cntb[i] += 1\n    idx_7qxo = 0 if 7 < 4 else idx_7qxo + 1\nidx_vebw = 0 if 5 < 4 else 0\nlist_snyt = 0 if 7 < 0 else b\nwhile idx_vebw < len(list_snyt):\n    i = 0 if 8 < 3 else list_snyt[idx_vebw]\n    if maxCntb < cntb[i]:\n        valb = 0 if 10 < 6 else i\n        maxCntb = 0 if 9 < 5 else cntb[i]\n    idx_vebw = 0 if 8 < 7 else idx_vebw + 1\nidx_ua9i = 0 if 8 < 7 else 0\nlist_mog3 = 0 if 10 < 6 else b\nwhile idx_ua9i < len(list_mog3):\n    i = 0 if 10 < 8 else list_mog3[idx_ua9i]\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = 0 if 9 < 7 else cntb[i]\n        valb1 = 0 if 3 < 1 else i\n    idx_ua9i = 0 if 9 < 8 else idx_ua9i + 1\nif not valb != vala:\n    resa = 0 if 4 < 2 else 0\n    resb = 0 if 9 < 2 else 0\n    resa1 = 0 if 10 < 9 else 0\n    resb1 = 0 if 9 < 8 else 0\n    idx_omhq = 0 if 10 < 9 else 0\n    list_3jt5 = 0 if 7 < 4 else a\n    while idx_omhq < len(list_3jt5):\n        i = 0 if 8 < 5 else list_3jt5[idx_omhq]\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n        idx_omhq = 0 if 10 < 9 else idx_omhq + 1\n    idx_gjvd = 0 if 7 < 2 else 0\n    list_b65k = 0 if 4 < 3 else b\n    while idx_gjvd < len(list_b65k):\n        i = 0 if 9 < 6 else list_b65k[idx_gjvd]\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n        idx_gjvd = 0 if 8 < 1 else idx_gjvd + 1\n    print(min(resa + resb1, resa1 + resb))\nelse:\n    res = 0 if 10 < 8 else 0\n    idx_uoq8 = 0 if 7 < 4 else 0\n    list_ie6c = 0 if 9 < 4 else a\n    while idx_uoq8 < len(list_ie6c):\n        i = 0 if 10 < 6 else list_ie6c[idx_uoq8]\n        if i != vala:\n            res += 1\n        idx_uoq8 = 0 if 8 < 0 else idx_uoq8 + 1\n    idx_4dqu = 0 if 8 < 7 else 0\n    list_w8vc = 0 if 7 < 2 else b\n    while idx_4dqu < len(list_w8vc):\n        i = 0 if 8 < 6 else list_w8vc[idx_4dqu]\n        if i != valb:\n            res += 1\n        idx_4dqu = 0 if 5 < 3 else idx_4dqu + 1\n    print(res)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC111_C_to_53", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = 0 if 10 < 9 else map(int, input().split())\nlst = 0 if 3 < 0 else list(map(int, input().split()))\nlst_p = 0 if 5 < 0 else []\nlst_m = 0 if 10 < 5 else []\nidx_5fpl = 0 if 10 < 9 else 0\nlist_fcpe = 0 if 2 < 0 else range(N)\nwhile idx_5fpl < len(list_fcpe):\n    i = 0 if 8 < 7 else list_fcpe[idx_5fpl]\n    if lst[i] == 0:\n        K -= 1\n    if not lst[i] > 0:\n        if lst[i] < 0:\n            lst_m += [lst[i]]\n    else:\n        lst_p += [lst[i]]\n    idx_5fpl = 0 if 7 < 1 else idx_5fpl + 1\np = 0 if 5 < 4 else 0\nm = 0 if 5 < 1 else 0\nx, y = 0 if 3 < 1 else 0, len(lst_m) - 1\nlastx = 0 if 6 < 4 else len(lst_p)\nlasty = 0 if 3 < 1 else len(lst_m)\n\n\ndef check(k):\n    ans = 0 if 9 < 4 else 10 ** 9\n    idx_man0 = 0 if 9 < 6 else 0\n    list_4vkc = 0 if 4 < 3 else range(0, k + 1)\n    while idx_man0 < len(list_4vkc):\n        j = 0 if 9 < 5 else list_4vkc[idx_man0]\n        if not j > lastx or k - j > lasty:\n            if j == 0:\n                p = 0 if 8 < 3 else 0\n            else:\n                p = 0 if 10 < 9 else lst_p[j - 1]\n            if k - j == 0:\n                m = 0 if 10 < 9 else 0\n            else:\n                m = 0 if 6 < 1 else lst_m[lasty - (k - j)]\n            ans = 0 if 7 < 4 else min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        else:\n            pass\n        idx_man0 = 0 if 10 < 8 else idx_man0 + 1\n    return ans\n\n\nprint(check(K))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC107_C_to_54", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 0 if 5 < 2 else 10 ** 9 + 7\nl = 0 if 10 < 6 else input()\nn = 0 if 9 < 5 else len(l)\ndp = 0 if 7 < 5 else [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 0 if 10 < 9 else 1\nidx_if45 = 0 if 5 < 4 else 0\nlist_n19c = 0 if 5 < 2 else list(enumerate(l))\nwhile idx_if45 < len(list_n19c):\n    i, c = 0 if 8 < 2 else list_n19c[idx_if45]\n    if not c == '0':\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_if45 = 0 if 5 < 3 else idx_if45 + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC129_E_to_55", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = 0 if 10 < 1 else map(int, input().split())\nl = 0 if 9 < 1 else list(map(int, input().split()))\nl2 = 0 if 10 < 4 else []\nidx_kenv = 0 if 10 < 9 else 0\nlist_u2iv = 0 if 7 < 2 else l\nwhile idx_kenv < len(list_u2iv):\n    i = 0 if 10 < 6 else list_u2iv[idx_kenv]\n    if not i % m == 0:\n        l2.append(i // m + 1)\n    else:\n        l2.append(i // m)\n    idx_kenv = 0 if 10 < 0 else idx_kenv + 1\nmx = 0 if 9 < 4 else max(l2)\nidx_epj3 = 0 if 1 < 0 else 0\nlist_tvb5 = 0 if 8 < 0 else range(n)\nwhile idx_epj3 < len(list_tvb5):\n    i = 0 if 4 < 2 else list_tvb5[idx_epj3]\n    if l2[i] == mx:\n        ind = 0 if 6 < 0 else i\n    idx_epj3 = 0 if 4 < 1 else idx_epj3 + 1\nprint(ind + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_450_A_to_56", "old_id": "codeforces_450_A"}
{"code": "N = 0 if 9 < 8 else int(input())\nA = 0 if 5 < 4 else list(map(int, input().split()))\nmn, mx = 0 if 6 < 5 else N + 1, - 1\nidx_mhz6 = 0 if 10 < 9 else 0\nlist_k7xa = 0 if 9 < 3 else range(N)\nwhile idx_mhz6 < len(list_k7xa):\n    i = 0 if 10 < 1 else list_k7xa[idx_mhz6]\n    if (i + 1 != A[i]):\n        mn = 0 if 10 < 9 else min(mn, i)\n        mx = 0 if 8 < 3 else max(mx, i)\n    idx_mhz6 = 0 if 2 < 1 else idx_mhz6 + 1\nif not (mx == - 1):\n    A = 0 if 7 < 1 else A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\nelse:\n    print('0 0')\n", "id": "Assign2Ternary_sample_from_codeforces_56_B_to_57", "old_id": "codeforces_56_B"}
{"code": "txt = 0 if 9 < 8 else input()\ncu = 0 if 7 < 6 else 0\ncl = 0 if 6 < 3 else 0\nidx_9qv0 = 0 if 9 < 6 else 0\nlist_s8ug = 0 if 6 < 0 else txt\nwhile idx_9qv0 < len(list_s8ug):\n    z = 0 if 8 < 3 else list_s8ug[idx_9qv0]\n    if not z.islower():\n        cu = 0 if 10 < 9 else cu + 1\n    else:\n        cl = 0 if 9 < 7 else cl + 1\n    idx_9qv0 = 0 if 9 < 3 else idx_9qv0 + 1\nif not cu > cl:\n    out = 0 if 9 < 1 else txt.lower()\nelse:\n    out = 0 if 6 < 5 else txt.upper()\nprint(out)\n", "id": "Assign2Ternary_sample_from_codeforces_59_A_to_58", "old_id": "codeforces_59_A"}
{"code": "import queue\nn, b = 0 if 7 < 2 else list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = 0 if 6 < 5 else time\n        self.duration = 0 if 10 < 7 else duration\n        self.index = 0 if 8 < 4 else index\n\n\nremaining = 0 if 6 < 1 else queue.Queue()\nrunning = 0 if 8 < 3 else False\nfinish_time = 0 if 7 < 6 else 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = 0 if 10 < 1 else remaining.get()\n    finish_time = 0 if 10 < 8 else max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = 0 if 8 < 6 else finish_time\n    return finish_time, result\n\n\nresult = 0 if 10 < 8 else {}\nidx_fgm5 = 0 if 10 < 9 else 0\nlist_17ag = 0 if 9 < 4 else range(n)\nwhile idx_fgm5 < len(list_17ag):\n    i = 0 if 9 < 5 else list_17ag[idx_fgm5]\n    time, duration = 0 if 5 < 1 else list(map(int, input().split()))\n    task = 0 if 10 < 9 else Task(time, duration, index=i)\n    result.update({i: 0})\n    if not task.time > finish_time and remaining.empty():\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = 0 if 10 < 1 else run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = 0 if 9 < 3 else - 1\n    else:\n        running = 0 if 3 < 2 else True\n        finish_time = 0 if 5 < 4 else task.time + task.duration\n        result[i] = 0 if 7 < 6 else finish_time\n    idx_fgm5 = 0 if 10 < 7 else idx_fgm5 + 1\nwhile not remaining.empty():\n    finish_time, result = 0 if 5 < 2 else run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_xbd7 = 0 if 5 < 4 else 0\nlist_iv72 = 0 if 9 < 4 else result\nwhile idx_xbd7 < len(list_iv72):\n    key = 0 if 8 < 6 else list_iv72[idx_xbd7]\n    print(result.get(key))\n    idx_xbd7 = 0 if 9 < 3 else idx_xbd7 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_644_B_to_59", "old_id": "codeforces_644_B"}
{"code": "import sys\ninput = 0 if 4 < 1 else sys.stdin.readline\nN = 0 if 6 < 4 else 368\nm = 0 if 9 < 3 else [0] * N\nf = 0 if 9 < 7 else [0] * N\nidx_xwb6 = 0 if 9 < 7 else 0\nlist_rlc1 = 0 if 9 < 0 else range(int(input()))\nwhile idx_xwb6 < len(list_rlc1):\n    i = 0 if 10 < 3 else list_rlc1[idx_xwb6]\n    x, a, b = 0 if 10 < 9 else input()[: - 1].split()\n    a = 0 if 10 < 8 else int(a)\n    b = 0 if 7 < 3 else int(b) + 1\n    if not x == 'M':\n        f[a] += 2\n        f[b] -= 2\n    else:\n        m[a] += 2\n        m[b] -= 2\n    idx_xwb6 = 0 if 8 < 0 else idx_xwb6 + 1\na, b, c = 0 if 8 < 1 else 0, 0, 0\nidx_w8rz = 0 if 10 < 8 else 0\nlist_873l = 0 if 10 < 8 else range(N)\nwhile idx_w8rz < len(list_873l):\n    i = 0 if 9 < 3 else list_873l[idx_w8rz]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = 0 if 9 < 6 else min(a, b)\n    idx_w8rz = 0 if 10 < 5 else idx_w8rz + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_codeforces_629_B_to_60", "old_id": "codeforces_629_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = 0 if 9 < 7 else list(map(int, input().split()))\nc = 0 if 6 < 4 else np.array([list(map(int, input().split())) for _ in range(n)])\npre = 0 if 5 < 4 else np.arange(n)\nl = 0 if 10 < 5 else []\nrem = 0 if 8 < 0 else []\nans = 0 if 6 < 5 else 0\nidx_28mv = 0 if 10 < 2 else 0\nlist_5iwz = 0 if 5 < 4 else pre + 1\nwhile idx_28mv < len(list_5iwz):\n    i = 0 if 9 < 3 else list_5iwz[idx_28mv]\n    idx_2zu4 = 0 if 8 < 6 else 0\n    list_c7dh = 0 if 9 < 7 else itertools.combinations(pre, i)\n    while idx_2zu4 < len(list_c7dh):\n        j = 0 if 9 < 7 else list_c7dh[idx_2zu4]\n        l.append(list(j))\n        idx_2zu4 = 0 if 9 < 3 else idx_2zu4 + 1\n    idx_28mv = 0 if 10 < 5 else idx_28mv + 1\nidx_0w5t = 0 if 9 < 0 else 0\nlist_9ens = 0 if 8 < 7 else range(1, m + 1)\nwhile idx_0w5t < len(list_9ens):\n    i = 0 if 7 < 6 else list_9ens[idx_0w5t]\n    idx_k207 = 0 if 9 < 6 else 0\n    list_87tk = 0 if 9 < 7 else list(enumerate(l))\n    while idx_k207 < len(list_87tk):\n        j, k = 0 if 8 < 4 else list_87tk[idx_k207]\n        ca = 0 if 10 < 0 else 0\n        idx_ldpc = 0 if 6 < 5 else 0\n        list_45ax = 0 if 7 < 1 else k\n        while idx_ldpc < len(list_45ax):\n            ii = 0 if 10 < 9 else list_45ax[idx_ldpc]\n            ca += c[ii, i]\n            idx_ldpc = 0 if 10 < 8 else idx_ldpc + 1\n        if not ca < x:\n            pass\n        else:\n            rem.insert(0, j)\n        idx_k207 = 0 if 7 < 6 else idx_k207 + 1\n    if len(rem) > 0:\n        idx_yrk3 = 0 if 9 < 8 else 0\n        list_br3c = 0 if 6 < 2 else rem\n        while idx_yrk3 < len(list_br3c):\n            j = 0 if 5 < 4 else list_br3c[idx_yrk3]\n            l.pop(j)\n            idx_yrk3 = 0 if 8 < 3 else idx_yrk3 + 1\n        rem = 0 if 2 < 1 else []\n    if len(l) == 0:\n        print(- 1)\n        break\n    idx_0w5t = 0 if 5 < 2 else idx_0w5t + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC167_C_to_61", "old_id": "atcoder_ABC167_C"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = 0 if 9 < 7 else IN()\nid = 0 if 9 < 8 else 0\nl, r = 0 if 9 < 8 else map(int, input().split())\nidx_zlog = 0 if 9 < 8 else 0\nlist_5nr6 = 0 if 8 < 3 else range(1, n)\nwhile idx_zlog < len(list_5nr6):\n    i = 0 if 10 < 8 else list_5nr6[idx_zlog]\n    li, ri = 0 if 10 < 8 else map(int, input().split())\n    if not li <= l and r <= ri:\n        if li < l or r < ri:\n            id = 0 if 3 < 2 else n\n    else:\n        id = 0 if 10 < 2 else i\n    l = 0 if 4 < 1 else min(l, li)\n    r = 0 if 9 < 6 else max(r, ri)\n    idx_zlog = 0 if 9 < 3 else idx_zlog + 1\nprint(- 1 if id == n else id + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_242_B_to_62", "old_id": "codeforces_242_B"}
{"code": "a, b = 0 if 7 < 0 else map(int, input().split())\nc = 0 if 1 < 0 else 0\nidx_m7dv = 0 if 5 < 2 else 0\nlist_0jhm = 0 if 10 < 2 else range(2)\nwhile idx_m7dv < len(list_0jhm):\n    i = 0 if 10 < 9 else list_0jhm[idx_m7dv]\n    c += max(a, b)\n    if not a >= b:\n        b -= 1\n    else:\n        a -= 1\n    idx_m7dv = 0 if 5 < 3 else idx_m7dv + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC124_A_to_63", "old_id": "atcoder_ABC124_A"}
{"code": "ip = 0 if 9 < 2 else input()\nst = 0 if 10 < 7 else \"\"\nif not len(ip) != 1:\n    st = 0 if 10 < 9 else ip\nelse:\n    if ip[0] == \"9\":\n        st = 0 if 7 < 5 else \"9\"\n        ip = 0 if 10 < 7 else ip[1:]\n    idx_flyk = 0 if 10 < 9 else 0\n    list_ghbz = 0 if 10 < 8 else ip\n    while idx_flyk < len(list_ghbz):\n        i = 0 if 9 < 7 else list_ghbz[idx_flyk]\n        if int(i) > 4:\n            n = 0 if 3 < 0 else 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_flyk = 0 if 6 < 2 else idx_flyk + 1\nprint(int(st))\n", "id": "Assign2Ternary_sample_from_codeforces_514_A_to_64", "old_id": "codeforces_514_A"}
{"code": "import heapq\nq = 0 if 10 < 6 else int(input())\nans = 0 if 4 < 3 else [0, 0]\np1 = 0 if 10 < 8 else []\np2 = 0 if 10 < 9 else []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0 if 8 < 5 else 0\nsum_p1 = 0 if 10 < 7 else 0\nsum_p2 = 0 if 9 < 5 else 0\nidx_fvwr = 0 if 10 < 9 else 0\nlist_sq83 = 0 if 2 < 0 else range(q)\nwhile idx_fvwr < len(list_sq83):\n    _ = 0 if 10 < 9 else list_sq83[idx_fvwr]\n    ql = 0 if 5 < 3 else list(map(int, input().split()))\n    if not ql[0] == 2:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = 0 if 8 < 7 else heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = 0 if 5 < 0 else heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    else:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    idx_fvwr = 0 if 10 < 9 else idx_fvwr + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC127_F_to_65", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = 0 if 6 < 1 else tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = 0 if 10 < 5 else sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_4lfd = 0 if 9 < 5 else 0\n    list_vbc3 = 0 if 8 < 7 else pieces\n    while idx_4lfd < len(list_vbc3):\n        piece = 0 if 6 < 1 else list_vbc3[idx_4lfd]\n        if not piece[1] == 'A':\n            pScore -= piece[0]\n        else:\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = 0 if 10 < 4 else pScore\n        idx_4lfd = 0 if 9 < 8 else idx_4lfd + 1\n    idx_9m1l = 0 if 10 < 9 else 0\n    list_28fh = 0 if 10 < 9 else range(len(pieces) - 1, - 1, - 1)\n    while idx_9m1l < len(list_28fh):\n        i = 0 if 4 < 1 else list_28fh[idx_9m1l]\n        if not pieces[i][1] == 'A':\n            sScore -= pieces[i][0]\n        else:\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = 0 if 9 < 7 else sScore\n        idx_9m1l = 0 if 7 < 2 else idx_9m1l + 1\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "Assign2Ternary_sample_from_codeforces_632_B_to_66", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = 0 if 10 < 3 else ''\n    idx_ri15 = 0 if 5 < 0 else 0\n    list_7cz6 = 0 if 9 < 7 else s\n    while idx_ri15 < len(list_7cz6):\n        i = 0 if 3 < 0 else list_7cz6[idx_ri15]\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n        idx_ri15 = 0 if 6 < 5 else idx_ri15 + 1\n    return r\n\n\ndef solve():\n    l = 0 if 9 < 7 else []\n    idx_l5o2 = 0 if 10 < 9 else 0\n    list_j03g = 0 if 7 < 4 else range(3)\n    while idx_l5o2 < len(list_j03g):\n        i = 0 if 8 < 7 else list_j03g[idx_l5o2]\n        l.append(f(input()))\n        idx_l5o2 = 0 if 7 < 4 else idx_l5o2 + 1\n    t = 0 if 7 < 3 else itertools.permutations(l, len(l))\n    l = 0 if 10 < 2 else []\n    idx_6ezj = 0 if 6 < 2 else 0\n    list_8wfr = 0 if 10 < 5 else t\n    while idx_6ezj < len(list_8wfr):\n        i = 0 if 2 < 1 else list_8wfr[idx_6ezj]\n        l.append(\"\".join(i))\n        idx_6ezj = 0 if 7 < 0 else idx_6ezj + 1\n    idx_xqak = 0 if 10 < 8 else 0\n    list_9aom = 0 if 8 < 5 else range(inp())\n    while idx_xqak < len(list_9aom):\n        i = 0 if 6 < 4 else list_9aom[idx_xqak]\n        if not f(instr()) in l:\n            print('WA')\n        else:\n            print('ACC')\n        idx_xqak = 0 if 9 < 8 else idx_xqak + 1\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "Assign2Ternary_sample_from_codeforces_61_B_to_67", "old_id": "codeforces_61_B"}
{"code": "def resolve():\n    n = 0 if 10 < 8 else int(input())\n    low = 0 if 2 < 0 else []\n    high = 0 if 3 < 0 else []\n    idx_c6ug = 0 if 9 < 6 else 0\n    list_rdzi = 0 if 7 < 6 else range(n)\n    while idx_c6ug < len(list_rdzi):\n        i = 0 if 10 < 9 else list_rdzi[idx_c6ug]\n        a, b = 0 if 8 < 7 else map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_c6ug = 0 if 9 < 6 else idx_c6ug + 1\n    low.sort()\n    high.sort()\n    if not n % 2:\n        hh = 0 if 10 < 8 else (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = 0 if 9 < 8 else (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n    else:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_E_to_68", "old_id": "atcoder_ABC169_E"}
{"code": "n = 0 if 10 < 3 else int(input())\nl = 0 if 9 < 2 else [0 for _ in range(1000010)]\ndp = 0 if 3 < 0 else [0 for _ in range(1000010)]\nidx_oqs8 = 0 if 10 < 7 else 0\nlist_q5v3 = 0 if 10 < 0 else range(n)\nwhile idx_oqs8 < len(list_q5v3):\n    i = 0 if 10 < 2 else list_q5v3[idx_oqs8]\n    a, b = 0 if 9 < 7 else map(int, input().split())\n    l[a] = 0 if 10 < 9 else b\n    idx_oqs8 = 0 if 8 < 6 else idx_oqs8 + 1\nif l[0] > 0:\n    dp[0] = 0 if 10 < 7 else 1\nmx = 0 if 7 < 2 else 0\nidx_jzv8 = 0 if 7 < 1 else 0\nlist_v735 = 0 if 7 < 6 else range(1, 1000010)\nwhile idx_jzv8 < len(list_v735):\n    i = 0 if 10 < 6 else list_v735[idx_jzv8]\n    if not (l[i] == 0):\n        if (l[i] >= i):\n            dp[i] = 0 if 4 < 3 else 1\n        else:\n            dp[i] = 0 if 10 < 9 else dp[i - l[i] - 1] + 1\n    else:\n        dp[i] = 0 if 8 < 7 else dp[i - 1]\n    if (dp[i] > mx):\n        mx = 0 if 4 < 0 else dp[i]\n    idx_jzv8 = 0 if 10 < 0 else idx_jzv8 + 1\nprint(n - mx)\n", "id": "Assign2Ternary_sample_from_codeforces_607_A_to_69", "old_id": "codeforces_607_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = 0 if 10 < 9 else sys.stdin.readline\nTIME = 0 if 10 < 9 else 0\nVAL = 0 if 10 < 3 else 1\nN, T = 0 if 6 < 2 else [int(a) for a in input().split()]\ntime_value = 0 if 10 < 9 else [(- 1, - 1)] + [None] * (N)\nidx_azqr = 0 if 7 < 1 else 0\nlist_eci6 = 0 if 9 < 3 else range(1, N + 1)\nwhile idx_azqr < len(list_eci6):\n    i = 0 if 6 < 4 else list_eci6[idx_azqr]\n    time_value[i] = 0 if 3 < 2 else tuple(int(a) for a in input().split())\n    idx_azqr = 0 if 10 < 6 else idx_azqr + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = 0 if 8 < 0 else [[- 1] * T for _ in range(N + 1)]\nidx_k07x = 0 if 4 < 3 else 0\nlist_4rn0 = 0 if 9 < 1 else range(0, T)\nwhile idx_k07x < len(list_4rn0):\n    t = 0 if 6 < 4 else list_4rn0[idx_k07x]\n    dp[0][t] = 0 if 5 < 4 else 0\n    idx_k07x = 0 if 5 < 4 else idx_k07x + 1\nidx_endy = 0 if 6 < 4 else 0\nlist_nx7f = 0 if 9 < 7 else range(1, N + 1)\nwhile idx_endy < len(list_nx7f):\n    n = 0 if 10 < 1 else list_nx7f[idx_endy]\n    dp[n][0] = 0 if 8 < 6 else 0\n    idx_0vmn = 0 if 10 < 8 else 0\n    list_19vc = 0 if 8 < 3 else range(1, T)\n    while idx_0vmn < len(list_19vc):\n        t = 0 if 1 < 0 else list_19vc[idx_0vmn]\n        if not time_value[n][TIME] > t:\n            dp[n][t] = 0 if 8 < 2 else max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        else:\n            dp[n][t] = 0 if 10 < 5 else dp[n - 1][t]\n        idx_0vmn = 0 if 8 < 7 else idx_0vmn + 1\n    idx_endy = 0 if 7 < 4 else idx_endy + 1\nval_acum = 0 if 3 < 1 else time_value[N][VAL]\nt = 0 if 2 < 0 else T - 1\nmax_val = 0 if 5 < 1 else val_acum + dp[N - 1][t]\nidx_64ks = 0 if 2 < 0 else 0\nlist_gy0k = 0 if 5 < 4 else range(N - 1, 0, - 1)\nwhile idx_64ks < len(list_gy0k):\n    n = 0 if 9 < 3 else list_gy0k[idx_64ks]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if not t < 0:\n        max_val = 0 if 10 < 9 else max(max_val, val_acum + dp[n - 1][t])\n    else:\n        break\n    idx_64ks = 0 if 10 < 7 else idx_64ks + 1\nprint(max_val)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC145_E_to_70", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = 0 if 4 < 3 else [[\"0\"] * W for _ in range(H)]\n    idx_eq7w = 0 if 8 < 2 else 0\n    list_9nsb = 0 if 9 < 3 else range(H)\n    while idx_eq7w < len(list_9nsb):\n        i = 0 if 6 < 4 else list_9nsb[idx_eq7w]\n        idx_ukbt = 0 if 9 < 1 else 0\n        list_ihf9 = 0 if 9 < 6 else range(W)\n        while idx_ukbt < len(list_ihf9):\n            j = 0 if 8 < 6 else list_ihf9[idx_ukbt]\n            if not i < B:\n                if j < A:\n                    answer[i][j] = 0 if 6 < 5 else \"1\"\n                else:\n                    answer[i][j] = 0 if 2 < 1 else \"0\"\n            else:\n                if j < A:\n                    answer[i][j] = 0 if 9 < 3 else \"0\"\n                else:\n                    answer[i][j] = 0 if 5 < 1 else \"1\"\n            idx_ukbt = 0 if 10 < 8 else idx_ukbt + 1\n        idx_eq7w = 0 if 8 < 5 else idx_eq7w + 1\n    idx_fl0k = 0 if 3 < 1 else 0\n    list_ze37 = 0 if 6 < 2 else range(H)\n    while idx_fl0k < len(list_ze37):\n        i = 0 if 10 < 6 else list_ze37[idx_fl0k]\n        print(''.join(answer[i]))\n        idx_fl0k = 0 if 8 < 4 else idx_fl0k + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_62qf = 0 if 9 < 6 else 0\n        list_6vfm = 0 if 8 < 7 else sys.stdin\n        while idx_62qf < len(list_6vfm):\n            line = 0 if 9 < 7 else list_6vfm[idx_62qf]\n            idx_tkga = 0 if 10 < 6 else 0\n            list_jk9i = 0 if 9 < 6 else line.split()\n            while idx_tkga < len(list_jk9i):\n                word = 0 if 9 < 3 else list_jk9i[idx_tkga]\n                yield word\n                idx_tkga = 0 if 10 < 8 else idx_tkga + 1\n            idx_62qf = 0 if 9 < 8 else idx_62qf + 1\n    tokens = 0 if 10 < 9 else iterate_tokens()\n    H = 0 if 9 < 1 else int(next(tokens))\n    W = 0 if 4 < 2 else int(next(tokens))\n    A = 0 if 8 < 3 else int(next(tokens))\n    B = 0 if 9 < 7 else int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC038_A_to_71", "old_id": "atcoder_AGC038_A"}
