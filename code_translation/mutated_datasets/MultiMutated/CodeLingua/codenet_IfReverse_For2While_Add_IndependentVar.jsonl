{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_gl4s = 0\nlist_hd7k = range(m)\nwhile idx_gl4s < len(list_hd7k):\n    i = list_hd7k[idx_gl4s]\n    p, x = map(int, input().split())\n    s = 0\n    idx_xei0 = 0\n    list_4y7e = range(len(t))\n    while idx_xei0 < len(list_4y7e):\n        j = list_4y7e[idx_xei0]\n        if not j == p-1:\n            s += t[j]\n        else:\n            s += x\n        idx_xei0 = idx_xei0 + 1\n    print(s)\n    idx_gl4s = idx_gl4s + 1\n    var_5wk = 68\n", "id": "Add_IndependentVar_sample_from_s609392609_to_0", "old_id": "s609392609"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    idx_xj7l = 0\n    list_o0dz = V.get(i, [])\n    while idx_xj7l < len(list_o0dz):\n        v, w = list_o0dz[idx_xj7l]\n        if not (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        else:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        dfs(v)\n        idx_xj7l = idx_xj7l + 1\n    var_l2m = 85\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    var_421 = 35\n    V = {}\n    color = {}\n    idx_ucx6 = 0\n    list_xyh9 = range(1, n)\n    while idx_ucx6 < len(list_xyh9):\n        i = list_xyh9[idx_ucx6]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_ucx6 = idx_ucx6 + 1\n    idx_a9pq = 0\n    list_15kp = range(1, n+1)\n    while idx_a9pq < len(list_15kp):\n        i = list_15kp[idx_a9pq]\n        color[i] = -1\n        idx_a9pq = idx_a9pq + 1\n\n    while True:\n        i = 0\n        idx_koul = 0\n        list_5gnf = range(1, n+1)\n        while idx_koul < len(list_5gnf):\n            j = list_5gnf[idx_koul]\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n            idx_koul = idx_koul + 1\n        if i == 0:\n            idx_7syt = 0\n            list_9ebd = range(1, n+1)\n            while idx_7syt < len(list_9ebd):\n                j = list_9ebd[idx_7syt]\n                print(color[j])\n                idx_7syt = idx_7syt + 1\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "Add_IndependentVar_sample_from_s908812767_to_1", "old_id": "s908812767"}
{"code": "s = input()\nif not len(s) < 26:\n    idx_jhv4 = 0\n    list_nzwj = reversed(range(1, 26))\n    var_dgq = 63\n    while idx_jhv4 < len(list_nzwj):\n        i = list_nzwj[idx_jhv4]\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            idx_n14s = 0\n            list_fpmd = range(26)\n            while idx_n14s < len(list_fpmd):\n                j = list_fpmd[idx_n14s]\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_n14s = idx_n14s + 1\n        idx_jhv4 = idx_jhv4 + 1\n    print(-1)\nelse:\n    idx_9xfq = 0\n    var_01a = 75\n    list_f4ws = range(26)\n    while idx_9xfq < len(list_f4ws):\n        i = list_f4ws[idx_9xfq]\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_9xfq = idx_9xfq + 1\n", "id": "Add_IndependentVar_sample_from_s504709360_to_2", "old_id": "s504709360"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n    var_icw = 8\nidx_sy4o = 0\nlist_gmcx = range(1, K+1)\nwhile idx_sy4o < len(list_gmcx):\n    i = list_gmcx[idx_sy4o]\n    if not N - K + 1 < i:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    else:\n        ans = 0\n    var_pu1 = 94\n    print(int(ans) % mod)\n    idx_sy4o = idx_sy4o + 1\n", "id": "Add_IndependentVar_sample_from_s790754864_to_3", "old_id": "s790754864"}
{"code": "N, L = map(int, input().split())\naji = []\nidx_p0al = 0\nlist_hco4 = range(1, N+1)\nwhile idx_p0al < len(list_hco4):\n    i = list_hco4[idx_p0al]\n    aji.append(L+i-1)\n    var_dm2 = 30\n    idx_p0al = idx_p0al + 1\nif not min(aji) >= 0:\n    if max(aji) <= 0:\n        aji.pop(aji.index(max(aji)))\n    else:\n        aji.pop(aji.index(min(aji, key=abs)))\n    var_5fg = 48\nelse:\n    aji.pop(aji.index(min(aji)))\n    var_a6i = 43\nprint(sum(aji))\n", "id": "Add_IndependentVar_sample_from_s240532461_to_4", "old_id": "s240532461"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nidx_7ub4 = 0\nlist_or01 = range(q)\nwhile idx_7ub4 < len(list_or01):\n    _ = list_or01[idx_7ub4]\n    var_h4o = 14\n    t = list(map(int, input().split()))\n    if not t[0] == 1:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    else:\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n    idx_7ub4 = idx_7ub4 + 1\n", "id": "Add_IndependentVar_sample_from_s016605598_to_5", "old_id": "s016605598"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nidx_yg7l = 0\nlist_rpjx = range(len(strn))\nwhile idx_yg7l < len(list_rpjx):\n    i = list_rpjx[idx_yg7l]\n    if not i == 0:\n        idx_0yoc = 0\n        list_k2n1 = shichigo[i-1]\n        while idx_0yoc < len(list_k2n1):\n            j = list_k2n1[idx_0yoc]\n            idx_6ojx = 0\n            list_5zph = shichigolist\n            while idx_6ojx < len(list_5zph):\n                k = list_5zph[idx_6ojx]\n                shichigo[i].append(j+k)\n                idx_6ojx = idx_6ojx + 1\n            idx_0yoc = idx_0yoc + 1\n    else:\n        idx_74sr = 0\n        list_2lfm = shichigolist\n        while idx_74sr < len(list_2lfm):\n            j = list_2lfm[idx_74sr]\n            shichigo[i].append(j)\n            idx_74sr = idx_74sr + 1\n    var_zxi = 25\n    idx_yg7l = idx_yg7l + 1\ntarget = len(strn)-1\nidx_yab8 = 0\nlist_hxr3 = range(len(strn))\nwhile idx_yab8 < len(list_hxr3):\n    i = list_hxr3[idx_yab8]\n    idx_c9md = 0\n    list_9tkp = shichigo[i][:]\n    while idx_c9md < len(list_9tkp):\n        j = list_9tkp[idx_c9md]\n        if not i == target:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n        else:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        idx_c9md = idx_c9md + 1\n    var_j3a = 13\n    idx_yab8 = idx_yab8 + 1\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "Add_IndependentVar_sample_from_s949655009_to_6", "old_id": "s949655009"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_aoud = 0\n    list_chy1 = range(0, n)\n    while idx_aoud < len(list_chy1):\n        i = list_chy1[idx_aoud]\n        idx_ztwf = 0\n        list_hqly = range(n-1, i, -1)\n        while idx_ztwf < len(list_hqly):\n            j = list_hqly[idx_ztwf]\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n            idx_ztwf = idx_ztwf + 1\n        idx_aoud = idx_aoud + 1\n    var_4g2 = 11\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_fi7v = 0\n    var_guq = 9\n    list_wvh4 = range(0, n)\n    while idx_fi7v < len(list_wvh4):\n        i = list_wvh4[idx_fi7v]\n        mini = i\n        idx_qfl8 = 0\n        list_puij = range(i, n)\n        while idx_qfl8 < len(list_puij):\n            j = list_puij[idx_qfl8]\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n            idx_qfl8 = idx_qfl8 + 1\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_fi7v = idx_fi7v + 1\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif not \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Not stable\")\n    var_auy = 63\nelse:\n    print(\"Stable\")\n    var_74p = 78\n", "id": "Add_IndependentVar_sample_from_s875904659_to_7", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n    var_kp1 = 50\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n    var_cnu = 30\n\n\ndef exit():\n    import sys\n    var_vki = 84\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    idx_xeyp = 0\n    list_bsdk = range(len(li))\n    while idx_xeyp < len(list_bsdk):\n        i = list_bsdk[idx_xeyp]\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_x8a7 = 0\n        list_085b = sub_list\n        while idx_x8a7 < len(list_085b):\n            sub = list_085b[idx_x8a7]\n            sub.appendleft(li[i])\n            idx_x8a7 = idx_x8a7 + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_xeyp = idx_xeyp + 1\n    return k\n    var_yu4 = 21\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n    var_q35 = 14\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n    var_3p1 = 96\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n    var_k0v = 51\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_4mxp = 0\n    list_xqjc = range(len(li)-1, -1, -1)\n    while idx_4mxp < len(list_xqjc):\n        i = list_xqjc[idx_4mxp]\n        n += li[i] * base\n        base *= 10\n        idx_4mxp = idx_4mxp + 1\n    return n\n    var_xu5 = 25\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n    var_q8h = 59\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_b5la = 0\n    var_l0t = 80\n    list_4ulx = range(len(li))\n    while idx_b5la < len(list_4ulx):\n        i = list_4ulx[idx_b5la]\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        idx_6xgy = 0\n        list_ue4j = range(i+1, len(li))\n        while idx_6xgy < len(list_ue4j):\n            j = list_ue4j[idx_6xgy]\n            if li[j] % li[i] == 0:\n                li[j] = -1\n            idx_6xgy = idx_6xgy + 1\n        idx_b5la = idx_b5la + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    var_ksh = 39\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n    var_coa = 74\n\n\ndef all_subset(li):\n    s = []\n    var_yx5 = 18\n    n = len(li)\n    idx_pksy = 0\n    list_5ey2 = range(0, (1 << (n+1)))\n    while idx_pksy < len(list_5ey2):\n        bit = list_5ey2[idx_pksy]\n        ss = set()\n        idx_o47n = 0\n        list_9u27 = range(0, n)\n        while idx_o47n < len(list_9u27):\n            i = list_9u27[idx_o47n]\n            if (bit & (1 << i)):\n                ss.add(li[i])\n            idx_o47n = idx_o47n + 1\n        s.append(ss)\n        idx_pksy = idx_pksy + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    var_iyj = 96\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    var_qp6 = 92\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif not n == len(set(A)):\n    print('NO')\n    var_kpg = 10\nelse:\n    print('YES')\n    var_dsb = 68\n", "id": "Add_IndependentVar_sample_from_s137613418_to_8", "old_id": "s137613418"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_yt9w = 0\nlist_6sd7 = range(n)\nwhile idx_yt9w < len(list_6sd7):\n    i = list_6sd7[idx_yt9w]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    var_tqx = 93\n    idx_yt9w = idx_yt9w + 1\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nidx_4xuq = 0\nlist_5sjl = lst\nwhile idx_4xuq < len(list_5sjl):\n    i = list_5sjl[idx_4xuq]\n    if not i == pre:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    else:\n        tmp_cnt += 1\n    pre = i\n    idx_4xuq = idx_4xuq + 1\n    var_s9z = 15\nprint(cnt)\n", "id": "Add_IndependentVar_sample_from_s430322735_to_9", "old_id": "s430322735"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n    var_obz = 10\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n    var_qey = 57\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nidx_bc4l = 0\nlist_kymc = A\nwhile idx_bc4l < len(list_kymc):\n    a = list_kymc[idx_bc4l]\n    var_jhr = 12\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n    if not count_div_2 is None:\n\n        if cnt != count_div_2:\n            print(0)\n            exit()\n    else:\n        count_div_2 = cnt\n    idx_bc4l = idx_bc4l + 1\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n    var_ui6 = 61\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s817205687_to_10", "old_id": "s817205687"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_uonb = 0\nlist_jcr5 = range(len(S))\nwhile idx_uonb < len(list_jcr5):\n    i = list_jcr5[idx_uonb]\n    var_age = 51\n    if not S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        if count > record:\n            record = count\n        count = 0\n    else:\n        count += 1\n    idx_uonb = idx_uonb + 1\nif count > record:\n    record = count\n    var_v4q = 14\n\nprint(record)\n", "id": "Add_IndependentVar_sample_from_s993625131_to_11", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nidx_gy36 = 0\nlist_ms60 = T\nwhile idx_gy36 < len(list_ms60):\n    i = list_ms60[idx_gy36]\n    if not i == S[-1] or i == S[0]:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    else:\n        ans += 1\n    var_sb3 = 84\n    idx_gy36 = idx_gy36 + 1\n\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s315467749_to_12", "old_id": "s315467749"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_wmsv = 0\n    list_0p5m = range(n)\n    while idx_wmsv < len(list_0p5m):\n        _ = list_0p5m[idx_wmsv]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if not s in sdic:\n            sdic[s] = 1\n        else:\n            sdic[s] += 1\n        idx_wmsv = idx_wmsv + 1\n    ans = 0\n    idx_ytj4 = 0\n    list_ix3z = list(sdic.items())\n    var_tu6 = 64\n    while idx_ytj4 < len(list_ix3z):\n        k, v = list_ix3z[idx_ytj4]\n        ans += v*(v-1)//2\n        idx_ytj4 = idx_ytj4 + 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n    var_ztc = 38\n", "id": "Add_IndependentVar_sample_from_s733189960_to_13", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_fezn = 0\nlist_kuoq = range(n)\nwhile idx_fezn < len(list_kuoq):\n    _ = list_kuoq[idx_fezn]\n    x, u = list(input().split())\n    var_v57 = 35\n    if not u == \"BTC\":\n        res += int(x)\n    else:\n        res += float(x) * 380000\n    idx_fezn = idx_fezn + 1\nprint(res)\n", "id": "Add_IndependentVar_sample_from_s238775098_to_14", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_x4ao = 0\n    list_xj2o = range(n//2)\n    while idx_x4ao < len(list_xj2o):\n        i = list_xj2o[idx_x4ao]\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n        idx_x4ao = idx_x4ao + 1\n    ce = collections.Counter(ve)\n    var_5dn = 93\n    co = collections.Counter(vo)\n    ans = n\n    if not ce.most_common()[0][0] != co.most_common()[0][0]:\n        if len(ce) == 1 and len(co) == 1:\n            ans = n-ce.most_common()[0][1]\n        elif len(ce) == 1:\n            ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n        elif len(co) == 1:\n            ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n        else:\n            ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                      [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    else:\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n    var_8nc = 23\n", "id": "Add_IndependentVar_sample_from_s101447419_to_15", "old_id": "s101447419"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n    var_8jg = 31\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_0vnk = 0\n    list_wd9c = range(N)\n    while idx_0vnk < len(list_wd9c):\n        i = list_wd9c[idx_0vnk]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if not sum_A[i+1] not in modK:\n            modK[sum_A[i+1]].append(i+1)\n        else:\n            modK[sum_A[i+1]] = [i + 1]\n        idx_0vnk = idx_0vnk + 1\n    idx_jl2e = 0\n    list_s6vh = modK\n    while idx_jl2e < len(list_s6vh):\n        key = list_s6vh[idx_jl2e]\n        lenK = len(modK[key])\n        idx_uk3j = 0\n        list_yfur = list(enumerate(modK[key]))\n        while idx_uk3j < len(list_yfur):\n            i, a = list_yfur[idx_uk3j]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_uk3j = idx_uk3j + 1\n        idx_jl2e = idx_jl2e + 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n    var_0s9 = 47\n", "id": "Add_IndependentVar_sample_from_s975943078_to_16", "old_id": "s975943078"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nidx_3j1r = 0\nlist_952e = range(n-1)\nwhile idx_3j1r < len(list_952e):\n    i = list_952e[idx_3j1r]\n    var_p23 = 97\n    if not s[i] == s[i+1]:\n        cnt += 1\n    else:\n        continue\n    idx_3j1r = idx_3j1r + 1\n\nprint(cnt)\n", "id": "Add_IndependentVar_sample_from_s869207096_to_17", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\nidx_hg08 = 0\nlist_a53e = range(5)\nwhile idx_hg08 < len(list_a53e):\n    i = list_a53e[idx_hg08]\n    var_30r = 92\n    if not str(a[i])[-1] == \"0\":\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    else:\n        dic.update({i: 0})\n    idx_hg08 = idx_hg08 + 1\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "Add_IndependentVar_sample_from_s575946485_to_18", "old_id": "s575946485"}
{"code": "n = int(input())\narr = {}\nidx_9grb = 0\nlist_1rvw = range(n)\nwhile idx_9grb < len(list_1rvw):\n    i = list_1rvw[idx_9grb]\n    s = input()\n    if not not s in arr:\n        arr[s] += 1\n    else:\n        arr[s] = 1\n    var_9d0 = 60\n    idx_9grb = idx_9grb + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nidx_pe6a = 0\nlist_7mve = out_sort\nwhile idx_pe6a < len(list_7mve):\n    i = list_7mve[idx_pe6a]\n    print(i)\n    var_b6p = 54\n    idx_pe6a = idx_pe6a + 1\n", "id": "Add_IndependentVar_sample_from_s622795537_to_19", "old_id": "s622795537"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if not b:\n        print(\"no\")\n    else:\n        print(\"yes\")\n    var_wg0 = 2\n\n\ndef Yn(b):\n    if not b:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    var_05m = 56\n\n\ndef YN(b):\n    if not b:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n    var_60i = 42\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if not self.rank[x] < self.rank[y]:\n            if self.rank[y] < self.rank[x]:\n                self.P[y] = x\n            else:\n                self.P[x] = y\n                self.rank[y] += 1\n        else:\n            self.P[x] = y\n    var_if2 = 39\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_cam9 = 0\n        list_97qb = range(self.n)\n        while idx_cam9 < len(list_97qb):\n            a = list_97qb[idx_cam9]\n            S.add(self.find(a))\n            idx_cam9 = idx_cam9 + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    var_7k3 = 46\n    if not now == a:\n        return False\n    else:\n        return True\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_8csj = 0\n    var_1fi = 30\n    list_h0fy = range(size)\n    while idx_8csj < len(list_h0fy):\n        a = list_h0fy[idx_8csj]\n        if not (num >> (size-a-1)) & 1 == 1:\n            A[a] = 0\n        else:\n            A[a] = 1\n        idx_8csj = idx_8csj + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_bn5z = 0\n    list_a67c = range(2, len(A))\n    while idx_bn5z < len(list_a67c):\n        a = list_a67c[idx_bn5z]\n        A[a] = A[a-1]*a\n        if (mod > 0):\n            A[a] %= mod_\n        idx_bn5z = idx_bn5z + 1\n    var_sd9 = 25\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n    var_kbf = 5\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if not (num >= (1 << size)):\n        return num\n    else:\n        return False\n    var_39s = 3\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_w3cd = 0\n    list_e3yc = range(2, n+1)\n    while idx_w3cd < len(list_e3yc):\n        a = list_e3yc[idx_w3cd]\n        if A[a]:\n            idx_8pqy = 0\n            list_egyi = range(a*2, n+1, a)\n            while idx_8pqy < len(list_egyi):\n                b = list_egyi[idx_8pqy]\n                A[b] = False\n                idx_8pqy = idx_8pqy + 1\n        idx_w3cd = idx_w3cd + 1\n    if (type == \"bool\"):\n        return A\n    B = []\n    idx_adch = 0\n    var_d2u = 76\n    list_ay0r = range(n+1)\n    while idx_adch < len(list_ay0r):\n        a = list_ay0r[idx_adch]\n        if (A[a]):\n            B.append(a)\n        idx_adch = idx_adch + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2):\n        return False\n    i = 2\n    var_8k9 = 39\n    while i*i <= num:\n        if (num % i == 0):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if not a:\n        return c\n    else:\n        return b\n    var_ecw = 99\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    var_r90 = 68\n    A = list(map(str, A))\n    s = \"\"\n    idx_hixv = 0\n    list_wpl0 = range(n)\n    while idx_hixv < len(list_wpl0):\n        a = list_wpl0[idx_hixv]\n        s += A[a]\n        if (a < n-1):\n            s += c\n        idx_hixv = idx_hixv + 1\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    var_u0h = 56\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1:\n        list_.append(n)\n    if not type_ == \"dict\":\n        if type_ == \"list\":\n            return list_\n        else:\n            return None\n    else:\n        dic = {}\n        idx_7ulz = 0\n        list_61jc = list_\n        while idx_7ulz < len(list_61jc):\n            a = list_61jc[idx_7ulz]\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n            idx_7ulz = idx_7ulz + 1\n        return dic\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n    var_cmf = 0\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n    var_vs5 = 38\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    var_df8 = 78\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n    var_2pj = 73\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_i1qf = 0\n    list_481t = range(n)\n    while idx_i1qf < len(list_481t):\n        a = list_481t[idx_i1qf]\n        S.append(input())\n        idx_i1qf = idx_i1qf + 1\n    S.sort()\n    var_2sb = 88\n    print(\"\".join(S))\n\n\nmain()\n", "id": "Add_IndependentVar_sample_from_s977408144_to_20", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\nidx_wxtc = 0\nlist_05oz = range(1, N+1)\nwhile idx_wxtc < len(list_05oz):\n    i = list_05oz[idx_wxtc]\n    var_0wm = 35\n    if not sum(range(1, i + 1)) < N:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\n    else:\n        continue\n    idx_wxtc = idx_wxtc + 1\nidx_smpl = 0\nlist_1t6y = range(ans[0]+1)\nwhile idx_smpl < len(list_1t6y):\n    i = list_1t6y[idx_smpl]\n    var_cq8 = 87\n    if i + 1 != ans[1]:\n        print(i + 1)\n    idx_smpl = idx_smpl + 1\n", "id": "Add_IndependentVar_sample_from_s200092246_to_21", "old_id": "s200092246"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nidx_bvah = 0\nlist_h50j = range(len(c))\nwhile idx_bvah < len(list_h50j):\n    i = list_h50j[idx_bvah]\n    var_f3h = 60\n    if not p[i][1] == count:\n        break\n    else:\n        ans.append(p[i][0])\n    idx_bvah = idx_bvah + 1\nans = sorted(ans)\nidx_vs9y = 0\nlist_6u2c = ans\nwhile idx_vs9y < len(list_6u2c):\n    i = list_6u2c[idx_vs9y]\n    print(i)\n    var_79g = 82\n    idx_vs9y = idx_vs9y + 1\n", "id": "Add_IndependentVar_sample_from_s668439281_to_22", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_vm4l = 0\nlist_ho94 = range(H+2)\nwhile idx_vm4l < len(list_ho94):\n    i = list_ho94[idx_vm4l]\n    if not i == 0 or i == H+1:\n        G.append('#' + input() + '#')\n    else:\n        G.append('#'*(W+2))\n    idx_vm4l = idx_vm4l + 1\n    var_32r = 78\n\nans = 0\nidx_hqnu = 0\nlist_1wjk = range(W+2)\nwhile idx_hqnu < len(list_1wjk):\n    sx = list_1wjk[idx_hqnu]\n    idx_5fy1 = 0\n    list_k2fe = range(H+2)\n    var_na0 = 14\n    while idx_5fy1 < len(list_k2fe):\n        sy = list_k2fe[idx_5fy1]\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            idx_4jwd = 0\n            list_jty0 = range(W+2)\n            while idx_4jwd < len(list_jty0):\n                i = list_jty0[idx_4jwd]\n                idx_6d2u = 0\n                list_bg1p = range(H+2)\n                while idx_6d2u < len(list_bg1p):\n                    j = list_bg1p[idx_6d2u]\n                    ans = max(ans, dist[j][i])\n                    idx_6d2u = idx_6d2u + 1\n                idx_4jwd = idx_4jwd + 1\n        idx_5fy1 = idx_5fy1 + 1\n    idx_hqnu = idx_hqnu + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s951169509_to_23", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_8rq3 = 0\nlist_b6qw = range(N)\nwhile idx_8rq3 < len(list_b6qw):\n    _ = list_b6qw[idx_8rq3]\n    x, u = input().split()\n    var_mxq = 85\n    x = float(x)\n    mo.append([x, u])\n    idx_8rq3 = idx_8rq3 + 1\nokz = 0\nidx_d0wa = 0\nlist_mr69 = mo\nwhile idx_d0wa < len(list_mr69):\n    i = list_mr69[idx_d0wa]\n    if not i[1] == \"JPY\":\n        okz += i[0]*380000\n    else:\n        okz += i[0]\n    var_9vk = 39\n    idx_d0wa = idx_d0wa + 1\n\nprint(okz)\n", "id": "Add_IndependentVar_sample_from_s554393427_to_24", "old_id": "s554393427"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    var_69l = 59\n    idx_5l0u = 0\n    list_w051 = range(n)\n    while idx_5l0u < len(list_w051):\n        i = list_w051[idx_5l0u]\n        num = getN()\n        num = -num\n        if not num >= dp[-1]:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        else:\n            dp.append(num)\n        idx_5l0u = idx_5l0u + 1\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    idx_jtyn = 0\n    var_sw3 = 31\n    list_d4ch = range(n)\n    while idx_jtyn < len(list_d4ch):\n        _ = list_d4ch[idx_jtyn]\n        solve()\n        idx_jtyn = idx_jtyn + 1\n\n\nif __name__ == \"__main__\":\n\n    solve()\n    var_1vb = 12\n", "id": "Add_IndependentVar_sample_from_s344468705_to_25", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_wa63 = 0\nlist_um5n = range(memTime)\nwhile idx_wa63 < len(list_um5n):\n    color = list_um5n[idx_wa63]\n    member = memLate[color]\n    var_1kg = 48\n    if not member // 400 >= 8:\n        if ((member // 400) in colorList) == False:\n            colorList.append(member // 400)\n    else:\n        highLate += 1\n    idx_wa63 = idx_wa63 + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\n    var_0am = 88\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "Add_IndependentVar_sample_from_s964794058_to_26", "old_id": "s964794058"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_rcl0 = 0\nlist_pao6 = range(N-K)\nwhile idx_rcl0 < len(list_pao6):\n    i = list_pao6[idx_rcl0]\n    if not score[mae] < score[usiro]:\n        print('No')\n    else:\n        print('Yes')\n    mae += 1\n    usiro += 1\n    idx_rcl0 = idx_rcl0 + 1\n    var_jog = 8\n", "id": "Add_IndependentVar_sample_from_s182651529_to_27", "old_id": "s182651529"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\nidx_6ogv = 0\nlist_onae = range(N-1)\nwhile idx_6ogv < len(list_onae):\n    i = list_onae[idx_6ogv]\n    if not H[i] >= H[i+1]:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    else:\n        count_tmp += 1\n    idx_6ogv = idx_6ogv + 1\n    var_8ih = 5\n\nif count_tmp > count_best:\n    count_best = count_tmp\n    var_mck = 55\n\nprint(count_best)\n", "id": "Add_IndependentVar_sample_from_s895229833_to_28", "old_id": "s895229833"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nidx_ig65 = 0\nlist_awsv = range(1, n)\nwhile idx_ig65 < len(list_awsv):\n    i = list_awsv[idx_ig65]\n    if not a[i] == \"C\" and a[i-1] == \"A\":\n        c[i] = c[i-1]\n    else:\n        c[i] = c[i-1]+1\n    var_kd0 = 84\n    idx_ig65 = idx_ig65 + 1\nidx_vtsj = 0\nlist_awkm = range(k)\nwhile idx_vtsj < len(list_awkm):\n    w = list_awkm[idx_vtsj]\n    var_m58 = 4\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n    idx_vtsj = idx_vtsj + 1\n", "id": "Add_IndependentVar_sample_from_s759499751_to_29", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n    var_gtd = 37\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_4bfh = 0\n    list_3hek = range(H)\n    var_f4g = 36\n    while idx_4bfh < len(list_3hek):\n        _ = list_3hek[idx_4bfh]\n        ret.append(list(map(int, readline().split())))\n        idx_4bfh = idx_4bfh + 1\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n    if not pad is None:\n        ret = [[pad] * (W + 2)]\n        idx_0ap4 = 0\n        list_l78g = range(H)\n        while idx_0ap4 < len(list_l78g):\n            _ = list_l78g[idx_0ap4]\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n            idx_0ap4 = idx_0ap4 + 1\n        ret.append([pad] * (W + 2))\n    else:\n        ret = []\n        idx_py1r = 0\n        list_x8v5 = range(H)\n        while idx_py1r < len(list_x8v5):\n            _ = list_x8v5[idx_py1r]\n            ret.append([replace[s] for s in read()[:-1]])\n            idx_py1r = idx_py1r + 1\n\n    return ret\n    var_xoe = 11\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    var_pzf = 38\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        idx_u6az = 0\n        list_po2w = product([-2, -1, 0, 1, 2], repeat=2)\n        while idx_u6az < len(list_po2w):\n            di, dj = list_po2w[idx_u6az]\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if not (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c + 1\n            else:\n                nc = c\n            heappush(que, (nc, ni, nj))\n            idx_u6az = idx_u6az + 1\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    idx_aq5e = 0\n    list_lt6z = product([-2, -1, 0, 1, 2], repeat=2)\n    while idx_aq5e < len(list_lt6z):\n        di, dj = list_lt6z[idx_aq5e]\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if not (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.append((c + 1, ni, nj))\n        else:\n            que.appendleft((c, ni, nj))\n        idx_aq5e = idx_aq5e + 1\n    var_25j = 7\n\nprint(D[ti][tj])\n", "id": "Add_IndependentVar_sample_from_s124725275_to_30", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_5u3o = 0\nlist_2xbs = range(n)\nwhile idx_5u3o < len(list_2xbs):\n    i = list_2xbs[idx_5u3o]\n    if p[i] != p_copy[i]:\n        count += 1\n    idx_5u3o = idx_5u3o + 1\n    var_9fv = 67\nif not count == 0 or count == 2:\n    print(\"NO\")\n    var_zxk = 98\nelse:\n    print(\"YES\")\n    var_96j = 15\n", "id": "Add_IndependentVar_sample_from_s763097776_to_31", "old_id": "s763097776"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nidx_k7hd = 0\nlist_q1wb = range(-1, 102)\nwhile idx_k7hd < len(list_q1wb):\n    i = list_q1wb[idx_k7hd]\n\n    if i in p:\n        continue\n    var_plb = 61\n    if not not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)].append(i)\n    else:\n        candidates[abs(X-i)] = [i]\n    idx_k7hd = idx_k7hd + 1\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "Add_IndependentVar_sample_from_s957164965_to_32", "old_id": "s957164965"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_dj25 = 0\nlist_2utb = s\nwhile idx_dj25 < len(list_2utb):\n    i = list_2utb[idx_dj25]\n    if not i == \")\":\n        break\n    else:\n        left += 1\n    var_auk = 92\n    idx_dj25 = idx_dj25 + 1\n\nleft1 = 0\nright1 = 0\nidx_e178 = 0\nlist_j42m = range(left, n)\nwhile idx_e178 < len(list_j42m):\n    i = list_j42m[idx_e178]\n    if not s[i] == \"(\":\n        if right1 > 0:\n            right1 -= 1\n        else:\n            left1 += 1\n    else:\n        right1 += 1\n    idx_e178 = idx_e178 + 1\n    var_b6u = 33\n\nleft1 += left\nidx_dny1 = 0\nlist_nz9q = range(right1)\nwhile idx_dny1 < len(list_nz9q):\n    i = list_nz9q[idx_dny1]\n    var_i1q = 65\n    s += \")\"\n    idx_dny1 = idx_dny1 + 1\nidx_30g2 = 0\nlist_k6vu = range(left1)\nwhile idx_30g2 < len(list_k6vu):\n    i = list_k6vu[idx_30g2]\n    var_jop = 30\n    s = \"(\" + s\n    idx_30g2 = idx_30g2 + 1\n\nprint(s)\n", "id": "Add_IndependentVar_sample_from_s952876397_to_33", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\nidx_9wrb = 0\nlist_q6ah = range(N)\nwhile idx_9wrb < len(list_q6ah):\n    i = list_q6ah[idx_9wrb]\n    idx_x3tq = 0\n    var_ez0 = 77\n    list_cv1g = range(T)\n    while idx_x3tq < len(list_cv1g):\n        j = list_cv1g[idx_x3tq]\n        if not j < L[i][0]:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        else:\n            dp[i+1][j] = dp[i][j]\n        idx_x3tq = idx_x3tq + 1\n    idx_9wrb = idx_9wrb + 1\n\nused = []\nB = dp[N][T-1]\nj = T-1\nidx_g3bz = 0\nlist_pulf = range(N-1, -1, -1)\nwhile idx_g3bz < len(list_pulf):\n    i = list_pulf[idx_g3bz]\n    if B == dp[i][j]:\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n    idx_g3bz = idx_g3bz + 1\n    var_aty = 69\n\nans = dp[N][T-1]\nc = 0\nidx_3pob = 0\nlist_o7vf = range(N)\nwhile idx_3pob < len(list_o7vf):\n    i = list_o7vf[idx_3pob]\n    if i in used:\n        continue\n    var_9xp = 17\n    c = max(c, L[i][1])\n    idx_3pob = idx_3pob + 1\n\nprint(ans+c)\n", "id": "Add_IndependentVar_sample_from_s793709854_to_34", "old_id": "s793709854"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nidx_6170 = 0\nlist_f2gd = range(n)\nwhile idx_6170 < len(list_f2gd):\n    i = list_f2gd[idx_6170]\n    if not a[i] < ope[j][1]:\n        break\n    else:\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    var_waq = 90\n    idx_6170 = idx_6170 + 1\nprint(sum(a))\n", "id": "Add_IndependentVar_sample_from_s289483518_to_35", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_wgf4 = 0\nlist_jqmd = selected\nwhile idx_wgf4 < len(list_jqmd):\n    t, d = list_jqmd[idx_wgf4]\n    if not t not in memo:\n        selected_chohuku.append(d)\n    else:\n        memo[t] = 1\n        selected_only.append(d)\n    idx_wgf4 = idx_wgf4 + 1\n    var_hqp = 23\n\ncnt_type = len(memo)\nidx_wr2v = 0\nlist_zidr = info[k:]\nwhile idx_wr2v < len(list_zidr):\n    t, d = list_zidr[idx_wr2v]\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n    var_0ul = 19\n    idx_wr2v = idx_wr2v + 1\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nidx_51dq = 0\nlist_1lsa = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_51dq < len(list_1lsa):\n    i = list_1lsa[idx_51dq]\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    var_7i4 = 5\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_51dq = idx_51dq + 1\nprint(ans)\n", "id": "Add_IndependentVar_sample_from_s804484425_to_36", "old_id": "s804484425"}
