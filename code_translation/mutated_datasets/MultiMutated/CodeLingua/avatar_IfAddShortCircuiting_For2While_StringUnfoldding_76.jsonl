{"code": "s = input()\nres = []\npunctuation = [('' + ','), ('' + '.'), ('' + '!'), ('' + '?')]\nidx_plnc = 0\nlist_6viu = range(len(s))\nwhile idx_plnc < len(list_6viu):\n    i = list_6viu[idx_plnc]\n    if i >= 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        if s[i] == ('' + ''):\n            if res[- 1] != ('' + ''):\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == ('' + ''):\n                    res.pop()\n                res.append(s[i])\n                res.append(('' + ''))\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == ('' + ''):\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_plnc = idx_plnc + 1\nprint(('' + '').join(res))\n", "id": "StringUnfoldding_sample_from_codeforces_147_A_to_0", "old_id": "codeforces_147_A"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {('' + 'L'): (0, - 1), ('' + 'R'): (0, 1), ('' + 'U'): (1, 0), ('' + 'D'): (- 1, 0)}\nd = {(x, y): ('' + '')}\nbug = False\nidx_45x8 = 0\nlist_t6el = record_of_movements\nwhile idx_45x8 < len(list_t6el):\n    move = list_t6el[idx_45x8]\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        idx_vwzh = 0\n        list_lfb6 = d_movement\n        while idx_vwzh < len(list_lfb6):\n            step = list_lfb6[idx_vwzh]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_vwzh = idx_vwzh + 1\n    else:\n        bug = True\n    if bug and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        break\n    d[x, y] = ('' + '')\n    idx_45x8 = idx_45x8 + 1\nif bug and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print(('BUG' + ''))\nelse:\n    print(('' + 'OK'))\n", "id": "StringUnfoldding_sample_from_codeforces_8_B_to_1", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nidx_xyae = 0\nlist_r2ak = l\nwhile idx_xyae < len(list_r2ak):\n    i = list_r2ak[idx_xyae]\n    if i + 1 in l and i + 2 in l and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        print(('YE' + 'S'))\n        break\n    idx_xyae = idx_xyae + 1\n", "id": "StringUnfoldding_sample_from_codeforces_653_A_to_2", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split((\"\" + \" \"))\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        print((\"YE\" + \"S\"))\n        return (\"Result\" + \" Found\")\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    idx_wm5j = 0\n    list_b2n1 = range(a_time + 1)\n    while idx_wm5j < len(list_b2n1):\n        i = list_b2n1[idx_wm5j]\n        idx_5xvi = 0\n        list_bskm = range(b_time + 1)\n        while idx_5xvi < len(list_bskm):\n            j = list_bskm[idx_5xvi]\n            if a - da * i == x or b - db * j == x and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n                print((\"Y\" + \"ES\"))\n                return (\"R\" + \"esult Found\")\n            if (a - da * i) + (b - db * j) == x and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n                print((\"YE\" + \"S\"))\n                return (\"Result F\" + \"ound\")\n            idx_5xvi = idx_5xvi + 1\n        idx_wm5j = idx_wm5j + 1\n    return (\"Result N\" + \"ot Found\")\n\n\nff = main()\nif ff == (\"Result Not Fou\" + \"nd\") and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print((\"NO\" + \"\"))\n", "id": "StringUnfoldding_sample_from_codeforces_203_A_to_3", "old_id": "codeforces_203_A"}
{"code": "n = int(input())\nidx_9bg0 = 0\nlist_nlfe = range(n, 0, - 1)\nwhile idx_9bg0 < len(list_nlfe):\n    i = list_nlfe[idx_9bg0]\n    if n % i == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        n = i\n        print(i, end=('' + ' '))\n    idx_9bg0 = idx_9bg0 + 1\n", "id": "StringUnfoldding_sample_from_codeforces_58_B_to_4", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = (\"\" + \"\")\n    i = 0\n    while i < len(s):\n        if s[i] == (\"\" + \"A\") and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            t += (\"A\" + \"\")\n            i += 1\n        elif s[i] == (\"\" + \"B\"):\n            if i < len(s) - 1:\n                if s[i + 1] == (\"C\" + \"\"):\n                    t += (\"\" + \"D\")\n                    i += 2\n                else:\n                    t += (\"\" + \"X\")\n                    i += 1\n            else:\n                t += (\"\" + \"X\")\n                i += 1\n        else:\n            t += (\"\" + \"X\")\n            i += 1\n    total = 0\n    numA = 0\n    idx_0784 = 0\n    list_2jcp = range(len(t))\n    while idx_0784 < len(list_2jcp):\n        i = list_2jcp[idx_0784]\n        if t[i] == (\"X\" + \"\") and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            numA = 0\n        else:\n            if t[i] == (\"A\" + \"\"):\n                numA += 1\n            else:\n                total += numA\n        idx_0784 = idx_0784 + 1\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\nif __name__ == (\"__ma\" + \"in__\") and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    solve()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC034_B_to_5", "old_id": "atcoder_AGC034_B"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count(('1' + ''))\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\nif __name__ == (\"__main\" + \"__\") and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    idx_rkt7 = 0\n    list_esal = list(enumerate(nums))\n    while idx_rkt7 < len(list_esal):\n        i, num = list_esal[idx_rkt7]\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n        idx_rkt7 = idx_rkt7 + 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC043_B_to_6", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_noar = 0\nlist_5y2i = range(firstline)\nwhile idx_noar < len(list_5y2i):\n    x = list_5y2i[idx_noar]\n    A, G = list(map(int, input().split()))\n    if total + A <= 500 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        total += A\n        memory.append((\"A\" + \"\"))\n    else:\n        total -= G\n        memory.append((\"\" + \"G\"))\n    idx_noar = idx_noar + 1\nprint((\"\" + \"\").join(memory))\n", "id": "StringUnfoldding_sample_from_codeforces_282_B_to_7", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\nif __name__ == ('__m' + 'ain__') and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    n = int(input())\n    s = input().replace((\"\" + \"\"), (\"\" + \"\"))\n    if ('' + '0') not in s:\n        print(n - 1)\n    else:\n        indices = find(s, ('0' + ''))\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            idx_mfe6 = 0\n            list_fzid = combs\n            while idx_mfe6 < len(list_fzid):\n                x = list_fzid[idx_mfe6]\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n                idx_mfe6 = idx_mfe6 + 1\n            print(s.count(('' + '1')) + maximum)\n", "id": "StringUnfoldding_sample_from_codeforces_327_A_to_8", "old_id": "codeforces_327_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('inf' + ''))\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_fmun = 0\nlist_bo1z = range(M)\nwhile idx_fmun < len(list_bo1z):\n    _ = list_bo1z[idx_fmun]\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\n    idx_fmun = idx_fmun + 1\nans = 0\nidx_qytn = 0\nlist_xo7v = range(N)\nwhile idx_qytn < len(list_xo7v):\n    i = list_xo7v[idx_qytn]\n    if balls[i][1] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        ans += 1\n    idx_qytn = idx_qytn + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC002_B_to_9", "old_id": "atcoder_AGC002_B"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, ('' + '0'))\nb = b.ljust(x, ('' + '0'))\ns = ('' + '')\nc = 0\nidx_z035 = 0\nlist_piq7 = range(x)\nwhile idx_z035 < len(list_piq7):\n    i = list_piq7[idx_z035]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\n    idx_z035 = idx_z035 + 1\nif c == 1 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n    s += ('' + '1')\nprint(int(s[:: - 1]))\n", "id": "StringUnfoldding_sample_from_codeforces_171_A_to_10", "old_id": "codeforces_171_A"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_4vlu = 0\nlist_5gos = s\nwhile idx_4vlu < len(list_5gos):\n    x = list_5gos[idx_4vlu]\n    if x == ('' + 'g') and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == ('' + 'p'):\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\n    idx_4vlu = idx_4vlu + 1\nprint(score)\n", "id": "StringUnfoldding_sample_from_atcoder_ARC062_B_to_11", "old_id": "atcoder_ARC062_B"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split((\"\" + \" \"))][0]\n    return (c, )\n\n\ndef solve(c):\n    a = (\"abcdefghijklmnopqrs\" + \"tuvwxyz\")\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        idx_83jp = 0\n        list_a42u = result\n        while idx_83jp < len(list_a42u):\n            r = list_a42u[idx_83jp]\n            print((\"\" + \"%s\") % r, sep=('' + ''))\n            idx_83jp = idx_83jp + 1\n    else:\n        print((\"%s\" + \"\") % result, sep=('' + ''))\nif __name__ == ('' + '__main__') and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC151_A_to_12", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return\n    idx_d5aw = 0\n    list_58po = range(4)\n    while idx_d5aw < len(list_58po):\n        j = list_58po[idx_d5aw]\n        idx_t60r = 0\n        list_4xle = range(j + 1, 4)\n        while idx_t60r < len(list_4xle):\n            k = list_4xle[idx_t60r]\n            if (nums[j] != - 1 and nums[k] != - 1) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                s = nums[j]\n                nums[j] = - 1\n                t = nums[k]\n                if (operations[i] == ('+' + '')):\n                    nums[k] = s + t\n                elif (operations[i] == ('*' + '')):\n                    nums[k] = s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = s\n                nums[k] = t\n            idx_t60r = idx_t60r + 1\n        idx_d5aw = idx_d5aw + 1\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "StringUnfoldding_sample_from_codeforces_55_B_to_13", "old_id": "codeforces_55_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = ('Y' + 'es')\ni = - 1\nidx_prxn = 0\nlist_e9w1 = l\nwhile idx_prxn < len(list_e9w1):\n    v = list_e9w1[idx_prxn]\n    s[v] += 1\n    if s[v] >= 2 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        f = ('' + 'No')\n    if i != - 1 and l[i][- 1] != v[0] and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        f = ('' + 'No')\n    i += 1\n    idx_prxn = idx_prxn + 1\nprint(f)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC109_B_to_14", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: (\"L\" + \"ist[int]\"), b: (\"Li\" + \"st[int]\"), c: (\"Lis\" + \"t[int]\"), d: (\"List[int]\" + \"\")):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            ans = 0\n            idx_u7x4 = 0\n            list_ahks = range(Q)\n            while idx_u7x4 < len(list_ahks):\n                i = list_ahks[idx_u7x4]\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n                idx_u7x4 = idx_u7x4 + 1\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        idx_wt5y = 0\n        list_x1qi = range(last_max, M + 1)\n        while idx_wt5y < len(list_x1qi):\n            i = list_x1qi[idx_wt5y]\n            rec(A + [i])\n            idx_wt5y = idx_wt5y + 1\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_m6fo = 0\n        list_ivuc = sys.stdin\n        while idx_m6fo < len(list_ivuc):\n            line = list_ivuc[idx_m6fo]\n            idx_ywhl = 0\n            list_jxaz = line.split()\n            while idx_ywhl < len(list_jxaz):\n                word = list_jxaz[idx_ywhl]\n                yield word\n                idx_ywhl = idx_ywhl + 1\n            idx_m6fo = idx_m6fo + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_amp5 = 0\n    list_zwe8 = range(Q)\n    while idx_amp5 < len(list_zwe8):\n        i = list_zwe8[idx_amp5]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_amp5 = idx_amp5 + 1\n    solve(N, M, Q, a, b, c, d)\nif __name__ == ('' + '__main__') and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC165_C_to_15", "old_id": "atcoder_ABC165_C"}
{"code": "li = []\nind = 0\nidx_amed = 0\nlist_u59c = range(1, 371)\nwhile idx_amed < len(list_u59c):\n    i = list_u59c[idx_amed]\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        li.append(i)\n    if count == 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    idx_amed = idx_amed + 1\nli.pop()\nli.pop()\nn = int(input(('' + '')))\nprint(li[n - 1])\n", "id": "StringUnfoldding_sample_from_codeforces_672_A_to_16", "old_id": "codeforces_672_A"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_sa7q = 0\n    list_82bx = range(M)\n    while idx_sa7q < len(list_82bx):\n        i = list_82bx[idx_sa7q]\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_sa7q = idx_sa7q + 1\n    used = [False] * N\n    ans = 0\n    idx_owz7 = 0\n    list_1ys3 = range(N)\n    while idx_owz7 < len(list_1ys3):\n        i = list_1ys3[idx_owz7]\n        if not used[i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_kaun = 0\n                list_albc = edge[node]\n                while idx_kaun < len(list_albc):\n                    nextnode = list_albc[idx_kaun]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_kaun = idx_kaun + 1\n        idx_owz7 = idx_owz7 + 1\n    print(ans)\nif __name__ == ('' + '__main__') and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC126_E_to_17", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split((\"\" + \" \"))\nV = [int(i) for i in V]\nC = input().split((\"\" + \" \"))\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nidx_ebo7 = 0\nlist_g7sc = range(N)\nwhile idx_ebo7 < len(list_g7sc):\n    i = list_g7sc[idx_ebo7]\n    if V[i] - C[i] > 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    idx_ebo7 = idx_ebo7 + 1\nprint(sum(list))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC125_B_to_18", "old_id": "atcoder_ABC125_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    idx_9myd = 0\n    list_b19w = range(0, len(q) + 1)\n    while idx_9myd < len(list_b19w):\n        i = list_b19w[idx_9myd]\n        idx_90uy = 0\n        list_q5ke = itertools.combinations(q, i)\n        while idx_90uy < len(list_q5ke):\n            s = list_q5ke[idx_90uy]\n            idx_txqg = 0\n            list_0sk4 = zip(li, p)\n            while idx_txqg < len(list_0sk4):\n                u, w = list_0sk4[idx_txqg]\n                s = set(s)\n                if len(s & set(u)) % 2 != w and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n                    break\n                idx_txqg = idx_txqg + 1\n            idx_90uy = idx_90uy + 1\n        idx_9myd = idx_9myd + 1\n    print(ans)\nif __name__ == (\"\" + \"__main__\") and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC128_C_to_19", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nidx_7qiu = 0\nlist_by4s = range(n + 1)\nwhile idx_7qiu < len(list_by4s):\n    i = list_by4s[idx_7qiu]\n    if i + o >= n and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        res = min(res, abs(i - arr_sum))\n    idx_7qiu = idx_7qiu + 1\nprint((\"\" + \"%.3f\") % res)\n", "id": "StringUnfoldding_sample_from_codeforces_351_A_to_20", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float(('inf' + ''))\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nidx_t3cw = 0\nlist_qyum = range(n - 1)\nwhile idx_t3cw < len(list_qyum):\n    i = list_qyum[idx_t3cw]\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n    idx_t3cw = idx_t3cw + 1\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    idx_279t = 0\n    list_syrt = g[node]\n    while idx_279t < len(list_syrt):\n        v = list_syrt[idx_279t]\n        if ta_dist[v] != None and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n        idx_279t = idx_279t + 1\n\n\ndef ao_dfs(node):\n    idx_rq82 = 0\n    list_23cg = g[node]\n    while idx_rq82 < len(list_23cg):\n        v = list_23cg[idx_rq82]\n        if ao_dist[v] != None and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n        idx_rq82 = idx_rq82 + 1\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nidx_vafg = 0\nlist_2tp7 = range(n)\nwhile idx_vafg < len(list_2tp7):\n    i = list_2tp7[idx_vafg]\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        continue\n    res = max(res, ao_dist[i])\n    idx_vafg = idx_vafg + 1\nprint(res - 1)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC148_F_to_21", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: (\"Li\" + \"st[int]\"), y: (\"L\" + \"ist[int]\")):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_5g9v = 0\n    list_3vcj = permutations\n    while idx_5g9v < len(list_3vcj):\n        permutation = list_3vcj[idx_5g9v]\n        total_distance = 0\n        idx_kup2 = 0\n        list_djgm = range(0, N - 1)\n        while idx_kup2 < len(list_djgm):\n            i = list_djgm[idx_kup2]\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n            idx_kup2 = idx_kup2 + 1\n        distances.append(total_distance)\n        idx_5g9v = idx_5g9v + 1\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_aqex = 0\n        list_x1d6 = sys.stdin\n        while idx_aqex < len(list_x1d6):\n            line = list_x1d6[idx_aqex]\n            idx_lfhe = 0\n            list_xyra = line.split()\n            while idx_lfhe < len(list_xyra):\n                word = list_xyra[idx_lfhe]\n                yield word\n                idx_lfhe = idx_lfhe + 1\n            idx_aqex = idx_aqex + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    idx_s7v2 = 0\n    list_fhed = range(N)\n    while idx_s7v2 < len(list_fhed):\n        i = list_fhed[idx_s7v2]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_s7v2 = idx_s7v2 + 1\n    solve(N, x, y)\nif __name__ == (\"__m\" + \"ain__\") and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC145_C_to_22", "old_id": "atcoder_ABC145_C"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    idx_woxk = 0\n    list_j2vq = range(1, len(a))\n    while idx_woxk < len(list_j2vq):\n        i = list_j2vq[idx_woxk]\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            return ('YE' + 'S')\n        idx_woxk = idx_woxk + 1\n    return ('NO' + '')\n\n\nprint(s())\n", "id": "StringUnfoldding_sample_from_codeforces_108_B_to_23", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_23pu = 0\nlist_yfhi = s\nwhile idx_23pu < len(list_yfhi):\n    i = list_yfhi[idx_23pu]\n    if i in dt and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        dt[i] += 1\n    else:\n        dt[i] = 1\n    idx_23pu = idx_23pu + 1\ncnt = 0\nx = True\nidx_hyno = 0\nlist_boar = list(dt.items())\nwhile idx_hyno < len(list_boar):\n    key, value = list_boar[idx_hyno]\n    if value % 2 != 0 and cnt < 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\n    idx_hyno = idx_hyno + 1\nif x and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print((\"\" + \"First\"))\nelif not x and len(s) % 2 == 0:\n    print((\"Seco\" + \"nd\"))\nelif not x and len(s) % 2 != 0:\n    print((\"Fir\" + \"st\"))\n", "id": "StringUnfoldding_sample_from_codeforces_276_B_to_24", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nidx_v5ci = 0\nlist_v7yr = range(n)\nwhile idx_v5ci < len(list_v7yr):\n    i = list_v7yr[idx_v5ci]\n    line = str(input())\n    cake.append(line)\n    idx_4j8n = 0\n    list_h6tl = line\n    while idx_4j8n < len(list_h6tl):\n        j = list_h6tl[idx_4j8n]\n        if (j == ('' + 'C')) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            chocCount += 1\n        idx_4j8n = idx_4j8n + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        idx_qyt1 = 0\n        list_y5c4 = range(chocCount, chocCount - 2, - 1)\n        while idx_qyt1 < len(list_y5c4):\n            i = list_y5c4[idx_qyt1]\n            nfat *= i\n            idx_qyt1 = idx_qyt1 + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_v5ci = idx_v5ci + 1\nposCount = 0\nidx_1lbp = 0\nlist_q706 = range(n)\nwhile idx_1lbp < len(list_q706):\n    j = list_q706[idx_1lbp]\n    idx_2zh5 = 0\n    list_d2tn = range(n)\n    while idx_2zh5 < len(list_d2tn):\n        i = list_d2tn[idx_2zh5]\n        if (cake[i][j] == ('C' + '')) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            chocCount += 1\n        idx_2zh5 = idx_2zh5 + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        idx_nul4 = 0\n        list_nw1j = range(chocCount, chocCount - 2, - 1)\n        while idx_nul4 < len(list_nw1j):\n            i = list_nw1j[idx_nul4]\n            nfat *= i\n            idx_nul4 = idx_nul4 + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_1lbp = idx_1lbp + 1\nprint(int(happiness))\n", "id": "StringUnfoldding_sample_from_codeforces_629_A_to_25", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nidx_2xlg = 0\nlist_ahj9 = set(m)\nwhile idx_2xlg < len(list_ahj9):\n    i = list_ahj9[idx_2xlg]\n    if m.count(i) >= n / 2 + 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        possible = False\n        break\n    idx_2xlg = idx_2xlg + 1\nprint(('' + 'YES') if possible else ('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_codeforces_296_A_to_26", "old_id": "codeforces_296_A"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    idx_0v56 = 0\n    list_6d35 = range(n)\n    while idx_0v56 < len(list_6d35):\n        i = list_6d35[idx_0v56]\n        if ls_xyh[i][2] > 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n        idx_0v56 = idx_0v56 + 1\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    idx_mf7e = 0\n    list_uc8i = ls_xyh\n    while idx_mf7e < len(list_uc8i):\n        [x, y, h] = list_uc8i[idx_mf7e]\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n        idx_mf7e = idx_mf7e + 1\n    (xx, yy, hh) = cands[0]\n    return ('' + ' ').join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC112_C_to_27", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nidx_5qvx = 0\nlist_mcr1 = range(n)\nwhile idx_5qvx < len(list_mcr1):\n    i = list_mcr1[idx_5qvx]\n    s = input()\n    s = list(s)\n    idx_n5p7 = 0\n    list_uo4f = range(m)\n    while idx_n5p7 < len(list_uo4f):\n        j = list_uo4f[idx_n5p7]\n        if s[j] == ('' + '.') and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            if (i + j) & 1:\n                s[j] = ('' + 'W')\n            else:\n                s[j] = ('' + 'B')\n        idx_n5p7 = idx_n5p7 + 1\n    l.append(s)\n    idx_5qvx = idx_5qvx + 1\nidx_eb9x = 0\nlist_b02f = l\nwhile idx_eb9x < len(list_b02f):\n    c = list_b02f[idx_eb9x]\n    print((\"\" + \"\").join(c))\n    idx_eb9x = idx_eb9x + 1\n", "id": "StringUnfoldding_sample_from_codeforces_445_A_to_28", "old_id": "codeforces_445_A"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_si30 = 0\nlist_vbey = range(n)\nwhile idx_si30 < len(list_vbey):\n    i = list_vbey[idx_si30]\n    if number[i] != 4 and number[i] != 7 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        print((\"\" + \"NO\"))\n        x += 1\n        break\n    if i < n // 2 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_si30 = idx_si30 + 1\nif not x and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n    if h1 == h2:\n        print((\"\" + \"YES\"))\n    else:\n        print((\"N\" + \"O\"))\n", "id": "StringUnfoldding_sample_from_codeforces_146_A_to_29", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = ('' + 'a') if letter1.lower() != ('a' + '') else ('b' + '')\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nidx_ik7h = 0\nlist_dphb = arre\nwhile idx_ik7h < len(list_dphb):\n    x = list_dphb[idx_ik7h]\n    if lowString.find(x) >= 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            idx_h2oj = 0\n            list_3dte = range(index, index + len(x))\n            while idx_h2oj < len(list_3dte):\n                i = list_3dte[idx_h2oj]\n                setcito.add(i)\n                idx_h2oj = idx_h2oj + 1\n            wat = index + 1\n    idx_ik7h = idx_ik7h + 1\noString = list(oString)\nidx_51h9 = 0\nlist_yc18 = setcito\nwhile idx_51h9 < len(list_yc18):\n    i = list_yc18[idx_51h9]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_51h9 = idx_51h9 + 1\nidx_jdxr = 0\nlist_x1sy = oString\nwhile idx_jdxr < len(list_x1sy):\n    x = list_x1sy[idx_jdxr]\n    print(x, end=(\"\" + \"\"))\n    idx_jdxr = idx_jdxr + 1\nprint()\n", "id": "StringUnfoldding_sample_from_codeforces_95_A_to_30", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nidx_0fok = 0\nlist_v60x = range(n)\nwhile idx_0fok < len(list_v60x):\n    i = list_v60x[idx_0fok]\n    k = input()\n    s.append(k)\n    idx_0fok = idx_0fok + 1\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nidx_0hyc = 0\nlist_1utr = range(n)\nwhile idx_0hyc < len(list_1utr):\n    i = list_1utr[idx_0hyc]\n    idx_pogc = 0\n    list_9lc3 = range(n)\n    while idx_pogc < len(list_9lc3):\n        j = list_9lc3[idx_pogc]\n        if (i == j) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            d1.append(s[i][j])\n        if (i == n - j - 1) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            rem.add(s[i][j])\n        idx_pogc = idx_pogc + 1\n    idx_0hyc = idx_0hyc + 1\nif (len(rem) != 1) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    print(('' + 'NO'))\nelif (d1 != d2):\n    print(('' + 'NO'))\nelif (len(set(d1)) != 1):\n    print(('' + 'NO'))\nelif (set(d1) == rem):\n    print(('NO' + ''))\nelse:\n    print(('YE' + 'S'))\n", "id": "StringUnfoldding_sample_from_codeforces_404_A_to_31", "old_id": "codeforces_404_A"}
{"code": "def task4(A, B, n):\n    idx_zivg = 0\n    list_nmuz = range(- 1000, 1001)\n    while idx_zivg < len(list_nmuz):\n        X = list_nmuz[idx_zivg]\n        if A * (X ** n) == B and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return X\n        idx_zivg = idx_zivg + 1\n    return (\"\" + \"No solution\")\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "StringUnfoldding_sample_from_codeforces_30_A_to_32", "old_id": "codeforces_30_A"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('in' + 'f'))\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [(\"\" + \"M\"), (\"\" + \"A\"), (\"R\" + \"\"), (\"\" + \"C\"), (\"\" + \"H\")]\nmarch_lis = [0] * 5\nidx_5s04 = 0\nlist_g8jd = S\nwhile idx_5s04 < len(list_g8jd):\n    s = list_g8jd[idx_5s04]\n    if s[0].upper() in march and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        march_lis[march.index(s[0].upper())] += 1\n    idx_5s04 = idx_5s04 + 1\nans = 0\nidx_4hdy = 0\nlist_e2r5 = combinations(march_lis, 3)\nwhile idx_4hdy < len(list_e2r5):\n    x, y, z = list_e2r5[idx_4hdy]\n    ans += x * y * z\n    idx_4hdy = idx_4hdy + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC089_C_to_33", "old_id": "atcoder_ABC089_C"}
{"code": "t = []\nidx_dmgw = 0\nlist_ot1b = range(4)\nwhile idx_dmgw < len(list_ot1b):\n    i = list_ot1b[idx_dmgw]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_dmgw = idx_dmgw + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_hl65 = 0\nlist_dhza = range(3)\nwhile idx_hl65 < len(list_dhza):\n    i = list_dhza[idx_hl65]\n    idx_ilup = 0\n    list_6i70 = range(3)\n    while idx_ilup < len(list_6i70):\n        j = list_6i70[idx_ilup]\n        if t[i][j] == ('' + '#') and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == ('#' + '') and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == ('#' + '') and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == ('#' + '') and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_ilup = idx_ilup + 1\n    idx_hl65 = idx_hl65 + 1\nif correct == 1 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    print(('YE' + 'S'))\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_codeforces_287_A_to_34", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_h9f8 = 0\n    list_nr3j = list(enumerate(P))\n    while idx_h9f8 < len(list_nr3j):\n        i, p = list_nr3j[idx_h9f8]\n        a[p] = i\n        idx_h9f8 = idx_h9f8 + 1\n    tmp = 1\n    max_len = 1\n    idx_ju3k = 0\n    list_wt6x = range(1, N)\n    while idx_ju3k < len(list_wt6x):\n        i = list_wt6x[idx_ju3k]\n        if a[i] < a[i + 1] and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n        idx_ju3k = idx_ju3k + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_vkfp = 0\n    list_gmw3 = list(enumerate(P))\n    while idx_vkfp < len(list_gmw3):\n        i, p = list_gmw3[idx_vkfp]\n        if i == 0 or P[i - 1] + 1 == p and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n        idx_vkfp = idx_vkfp + 1\n    print(N - ans)\nif __name__ == ('__main_' + '_') and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC024_B_to_35", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_ncfo = 0\nlist_2xs4 = range(N)\nwhile idx_ncfo < len(list_2xs4):\n    x = list_2xs4[idx_ncfo]\n    if S[x] == ('' + 'L') and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == ('' + 'R'):\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == ('' + 'U'):\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == ('' + 'D'):\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == ('' + 'L') and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == ('' + 'R') and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == ('' + 'U') and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == ('' + 'D') and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_ncfo = idx_ncfo + 1\nif Judge and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n    print(('N' + 'O'))\nelse:\n    print(('YES' + ''))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC033_B_to_36", "old_id": "atcoder_AGC033_B"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return 0\n    ans = 1 if set(str(int(n))) == {('7' + ''), ('5' + ''), ('' + '3')} else 0\n    idx_5614 = 0\n    list_wtsn = ('' + '753')\n    while idx_5614 < len(list_wtsn):\n        i = list_wtsn[idx_5614]\n        ans += aaa(n + i)\n        idx_5614 = idx_5614 + 1\n    return ans\n\n\nprint(aaa(('' + '0')))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC114_C_to_37", "old_id": "atcoder_ABC114_C"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(('' + ' ')))\n        idx_0acf = 0\n        list_95rw = data\n        while idx_0acf < len(list_95rw):\n            number = list_95rw[idx_0acf]\n            if len(number) > 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                yield (number)\n            idx_0acf = idx_0acf + 1\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_t8mi = 0\nlist_peqg = range(0, N - 1)\nwhile idx_t8mi < len(list_peqg):\n    i = list_peqg[idx_t8mi]\n    if S[i] != S[i + 1] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        seg_cnt += 1\n    idx_t8mi = idx_t8mi + 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC140_D_to_38", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_p2de = 0\nlist_r4v3 = range(len(lista))\nwhile idx_p2de < len(list_r4v3):\n    i = list_r4v3[idx_p2de]\n    if i == 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=(\"\" + \" \"))\n    else:\n        print(lista[i] - lista[i - 1], end=(\" \" + \"\"))\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n    idx_p2de = idx_p2de + 1\n", "id": "StringUnfoldding_sample_from_codeforces_567_A_to_39", "old_id": "codeforces_567_A"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    print(('Y' + 'ES'))\n    idx_nclq = 0\n    list_6315 = range(n)\n    while idx_nclq < len(list_6315):\n        i = list_6315[idx_nclq]\n        idx_zv7u = 0\n        list_4jtf = range(n)\n        while idx_zv7u < len(list_4jtf):\n            j = list_4jtf[idx_zv7u]\n            if i % 2 == j % 2 and x < k:\n                print(('' + 'L'), end=('' + ''))\n                x += 1\n            else:\n                print(('' + 'S'), end=('' + ''))\n            idx_zv7u = idx_zv7u + 1\n        print()\n        idx_nclq = idx_nclq + 1\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_codeforces_544_B_to_40", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ('' + '')\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        idx_hgzq = 0\n        list_359m = range(self.t)\n        while idx_hgzq < len(list_359m):\n            _ = list_359m[idx_hgzq]\n            self.queries.append([int(x) for x in input().split((\"\" + \" \"))])\n            idx_hgzq = idx_hgzq + 1\n\n    def process_task(self):\n        res = []\n        idx_scjv = 0\n        list_fxrw = self.queries\n        while idx_scjv < len(list_fxrw):\n            query = list_fxrw[idx_scjv]\n            k = query[0] // query[1]\n            res.append((\"Ye\" + \"s\") if k * query[2] >= query[0] else (\"\" + \"No\"))\n            idx_scjv = idx_scjv + 1\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\nif __name__ == (\"_\" + \"_main__\") and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "StringUnfoldding_sample_from_codeforces_397_B_to_41", "old_id": "codeforces_397_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        A -= 1\n    if T == U and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_oluh = 0\n        list_qwdo = sys.stdin\n        while idx_oluh < len(list_qwdo):\n            line = list_qwdo[idx_oluh]\n            idx_k73p = 0\n            list_9rjq = line.split()\n            while idx_k73p < len(list_9rjq):\n                word = list_9rjq[idx_k73p]\n                yield word\n                idx_k73p = idx_k73p + 1\n            idx_oluh = idx_oluh + 1\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == ('__mai' + 'n__') and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC154_A_to_42", "old_id": "atcoder_ABC154_A"}
{"code": "n, a, b = [int(x) for x in input().split((\" \" + \"\"))]\nlista = [int(x) for x in input().split((\"\" + \" \"))]\nlistb = [int(x) for x in input().split((\" \" + \"\"))]\nidx_xq1b = 0\nlist_pom3 = range(n)\nwhile idx_xq1b < len(list_pom3):\n    k = list_pom3[idx_xq1b]\n    if k + 1 in lista and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        print(1, end=(\" \" + \"\"))\n    else:\n        print(2, end=(\"\" + \" \"))\n    idx_xq1b = idx_xq1b + 1\n", "id": "StringUnfoldding_sample_from_codeforces_421_A_to_43", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_yj4o = 0\n    list_uo9q = range(4)\n    while idx_yj4o < len(list_uo9q):\n        i = list_uo9q[idx_yj4o]\n        t = list(last4)\n        if i >= 1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            t[i], t[i - 1] = t[i - 1], t[i]\n        if ('' + '').join(t).count(('' + 'AGC')) >= 1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            return False\n        idx_yj4o = idx_yj4o + 1\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return memo[cur][last3]\n    if cur == n and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return 1\n    ret = 0\n    idx_0fe6 = 0\n    list_uriw = (\"\" + \"ACGT\")\n    while idx_0fe6 < len(list_uriw):\n        c = list_uriw[idx_0fe6]\n        if ok(last3 + c) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod\n        idx_0fe6 = idx_0fe6 + 1\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, ('T' + 'TT')))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC122_D_to_44", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nidx_m98b = 0\nlist_y7z9 = range(n)\nwhile idx_m98b < len(list_y7z9):\n    i = list_y7z9[idx_m98b]\n    if (x - w[i]) / (n - 1) == w[i] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        d.append(i + 1)\n    idx_m98b = idx_m98b + 1\nprint(len(d))\nprint((' ' + '').join(map(str, d)))\n", "id": "StringUnfoldding_sample_from_codeforces_134_A_to_45", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = [('' + 'a'), ('' + 'e'), ('' + 'i'), ('' + 'o'), ('' + 'u'), ('' + 'y'), ('' + 'A'), ('' + 'E'), ('' + 'I'), ('' + 'O'), ('U' + ''), ('Y' + '')]\nidx_5o7d = 0\nlist_eawf = range(len(a) - 1, - 1, - 1)\nwhile idx_5o7d < len(list_eawf):\n    i = list_eawf[idx_5o7d]\n    if (a[i] == ('' + ' ') or a[i] == ('?' + '')) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        continue\n    else:\n        if (a[i] in vo):\n            print((\"\" + \"YES\"))\n        else:\n            print((\"\" + \"NO\"))\n        break\n    idx_5o7d = idx_5o7d + 1\n", "id": "StringUnfoldding_sample_from_codeforces_49_A_to_46", "old_id": "codeforces_49_A"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            print((\"\" + \"D\"), y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                print((\"\" + \"D\"), y)\n        return y\n    y = sub(x)\n    if y[0] == 2 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        pass\n        sub(x, 1)\n        print((\"=\" + \"\"), x)\n    return y[0]\nif X == 1 or X == N * 2 - 1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    print((\"N\" + \"o\"))\nelse:\n    print((\"Y\" + \"es\"))\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_7u25 = 0\n    list_zikq = xs\n    while idx_7u25 < len(list_zikq):\n        x = list_zikq[idx_7u25]\n        print(x)\n        idx_7u25 = idx_7u25 + 1\n", "id": "StringUnfoldding_sample_from_atcoder_AGC006_B_to_47", "old_id": "atcoder_AGC006_B"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nidx_tksx = 0\nlist_squx = [l, r, first, second]\nwhile idx_tksx < len(list_squx):\n    i = list_squx[idx_tksx]\n    if i >= l and i <= r and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        curr = i\n        rev = ('' + '')\n        idx_l743 = 0\n        list_4pd0 = str(curr)\n        while idx_l743 < len(list_4pd0):\n            k = list_4pd0[idx_l743]\n            rev += str(9 - int(k))\n            idx_l743 = idx_l743 + 1\n        ans = max(ans, int(rev) * curr)\n    idx_tksx = idx_tksx + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_codeforces_86_A_to_48", "old_id": "codeforces_86_A"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nidx_y95c = 0\nlist_jtev = re.split((\"[.?!]\" + \"\"), input())\nwhile idx_y95c < len(list_jtev):\n    s = list_jtev[idx_y95c]\n    s = s.strip() + ('.' + '')\n    L = len(s)\n    if L > 1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        if L > n:\n            print((\"Imposs\" + \"ible\"))\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\n    idx_y95c = idx_y95c + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_codeforces_70_B_to_49", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nidx_joi7 = 0\nlist_a169 = m[1:]\nwhile idx_joi7 < len(list_a169):\n    i = list_a169[idx_joi7]\n    if i[1] > a[1] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        print(('Happ' + 'y Alex'))\n        break\n    a = i\n    idx_joi7 = idx_joi7 + 1\n", "id": "StringUnfoldding_sample_from_codeforces_456_A_to_50", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_7u6t = 0\n    list_via8 = range(b)\n    while idx_7u6t < len(list_via8):\n        i = list_via8[idx_7u6t]\n        tot.append(l[i * a: i * a + a])\n        idx_7u6t = idx_7u6t + 1\n    idx_yuna = 0\n    list_a1d7 = zip(* tot)\n    while idx_yuna < len(list_a1d7):\n        i = list_a1d7[idx_yuna]\n        if sum((i)) == b and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return True\n        idx_yuna = idx_yuna + 1\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_ynld = 0\n    list_in9q = x\n    while idx_ynld < len(list_in9q):\n        i = list_in9q[idx_ynld]\n        if i == ('' + 'O') and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            s.append(0)\n        else:\n            s.append(1)\n        idx_ynld = idx_ynld + 1\n    idx_vmot = 0\n    list_9ryz = range(1, 13)\n    while idx_vmot < len(list_9ryz):\n        i = list_9ryz[idx_vmot]\n        if 12 % i == 0 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_vmot = idx_vmot + 1\n    print(len(tot), end=(' ' + ''))\n    idx_d7lx = 0\n    list_xp9o = sorted(tot)\n    while idx_d7lx < len(list_xp9o):\n        a, b = list_xp9o[idx_d7lx]\n        print(f'{a}x{b}', end=(' ' + ''))\n        idx_d7lx = idx_d7lx + 1\n    print()\nif __name__ == (\"__ma\" + \"in__\") and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n    idx_b7gu = 0\n    list_ean8 = range(inp())\n    while idx_b7gu < len(list_ean8):\n        i = list_ean8[idx_b7gu]\n        solve()\n        idx_b7gu = idx_b7gu + 1\n", "id": "StringUnfoldding_sample_from_codeforces_400_A_to_51", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    idx_p8l1 = 0\n    list_u16n = range(len(A) - 2, len(A) - 2 * n - 1, - 2)\n    while idx_p8l1 < len(list_u16n):\n        i = list_u16n[idx_p8l1]\n        ans += A[i]\n        idx_p8l1 = idx_p8l1 + 1\n    print(ans)\nif __name__ == ('__ma' + 'in__') and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC012_A_to_52", "old_id": "atcoder_AGC012_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nidx_aiq4 = 0\nlist_cdhy = range(n)\nwhile idx_aiq4 < len(list_cdhy):\n    j = list_cdhy[idx_aiq4]\n    idx_yfed = 0\n    list_1gsl = range(n)\n    while idx_yfed < len(list_1gsl):\n        p = list_1gsl[idx_yfed]\n        if (0 == M[p]) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            print(p + 1, end=(' ' + ''))\n            break\n        idx_yfed = idx_yfed + 1\n    idx_8fhr = 0\n    list_up2b = range(p + 1 - k)\n    while idx_8fhr < len(list_up2b):\n        l = list_up2b[idx_8fhr]\n        M[l] -= 1\n        idx_8fhr = idx_8fhr + 1\n    M[p] -= 1\n    idx_aiq4 = idx_aiq4 + 1\n", "id": "StringUnfoldding_sample_from_codeforces_67_B_to_53", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_pd8x = 0\n    list_d9i3 = sequence\n    while idx_pd8x < len(list_d9i3):\n        value = list_d9i3[idx_pd8x]\n        y = f(value)\n        if y not in storage and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_pd8x = idx_pd8x + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            y += 1\n        n //= 2\n    return y\nif __name__ == ('__main' + '__') and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n    print(main())\n", "id": "StringUnfoldding_sample_from_codeforces_272_B_to_54", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nidx_ihev = 0\nlist_7i93 = s\nwhile idx_ihev < len(list_7i93):\n    c = list_7i93[idx_ihev]\n    count[ord(c) - ord((\"\" + \"A\"))] += 1\n    idx_ihev = idx_ihev + 1\ncount.sort(reverse=True)\nres = 0\nidx_jf4b = 0\nlist_vbe0 = range(26)\nwhile idx_jf4b < len(list_vbe0):\n    i = list_vbe0[idx_jf4b]\n    if count[i] >= k and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\n    idx_jf4b = idx_jf4b + 1\nprint(res)\n", "id": "StringUnfoldding_sample_from_codeforces_462_B_to_55", "old_id": "codeforces_462_B"}
{"code": "import sys\ninput_methods = [('clipboa' + 'rd'), ('f' + 'ile'), ('key' + '')]\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_v7ck = 0\n    list_7am2 = list(enumerate(s[:: - 1]))\n    while idx_v7ck < len(list_7am2):\n        i, c = list_7am2[idx_v7ck]\n        cc = na + int(c)\n        na = 0\n        if cc <= 4 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        idx_v7ck = idx_v7ck + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = ('0' + '') + s\n    idx_u68q = 0\n    list_ibd1 = s[:: - 1]\n    while idx_u68q < len(list_ibd1):\n        c = list_ibd1[idx_u68q]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_u68q = idx_u68q + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_16bl = 0\n    list_mwsz = input_l\n    while idx_16bl < len(list_mwsz):\n        l = list_mwsz[idx_16bl]\n        yield l\n        idx_16bl = idx_16bl + 1\nif __name__ == (\"\" + \"__main__\") and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    if sys.platform == ('ios' + ''):\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open(('inputFile.' + 'txt'))\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC155_E_to_56", "old_id": "atcoder_ABC155_E"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count((\"\" + \"R\"))\n    gNum = arr.count((\"\" + \"G\"))\n    bNum = arr.count((\"B\" + \"\"))\n    sum = 0\n    idx_qct0 = 0\n    list_zyx1 = range(1, math.ceil(n / 2) + 1)\n    while idx_qct0 < len(list_zyx1):\n        step = list_zyx1[idx_qct0]\n        idx_5wxf = 0\n        list_zres = range(n - 2 * step)\n        while idx_5wxf < len(list_zres):\n            i = list_zres[idx_5wxf]\n            s = (\"\" + \"\").join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == (\"\" + \"RGB\") or s == (\"RB\" + \"G\") or s == (\"BG\" + \"R\") or s == (\"B\" + \"RG\") or s == (\"\" + \"GBR\") or s == (\"GR\" + \"B\") and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                sum = sum + 1\n            idx_5wxf = idx_5wxf + 1\n        idx_qct0 = idx_qct0 + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC162_D_to_57", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    idx_zx5r = 0\n    list_0d36 = range(N)\n    while idx_zx5r < len(list_0d36):\n        i = list_0d36[idx_zx5r]\n        j = 0\n        jM = len(cur)\n        idx_y20e = 0\n        list_lhaq = range(len(S))\n        while idx_y20e < len(list_lhaq):\n            k = list_lhaq[idx_y20e]\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_y20e = idx_y20e + 1\n        cur.sort(reverse=True)\n        idx_zx5r = idx_zx5r + 1\n    return (\"Ye\" + \"s\")\nif __name__ == (\"__ma\" + \"in__\") and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n    print(main())\n", "id": "StringUnfoldding_sample_from_atcoder_ABC140_F_to_58", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n    if S == ('' + '5') or S == ('?' + ''):\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_81fh = 0\nlist_7hq9 = range(n)\nwhile idx_81fh < len(list_7hq9):\n    i = list_7hq9[idx_81fh]\n    if i == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        if S[i] != ('' + '?'):\n            dp[i][int(S[i])] += 1\n        else:\n            idx_s6gu = 0\n            list_zxi4 = range(10)\n            while idx_s6gu < len(list_zxi4):\n                j = list_zxi4[idx_s6gu]\n                dp[i][j] += 1\n                idx_s6gu = idx_s6gu + 1\n    else:\n        if S[i] != ('' + '?'):\n            idx_p405 = 0\n            list_s0wh = range(13)\n            while idx_p405 < len(list_s0wh):\n                k = list_s0wh[idx_p405]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_p405 = idx_p405 + 1\n        else:\n            idx_310f = 0\n            list_zk26 = range(10)\n            while idx_310f < len(list_zk26):\n                j = list_zk26[idx_310f]\n                idx_ftmv = 0\n                list_jolk = range(13)\n                while idx_ftmv < len(list_jolk):\n                    k = list_jolk[idx_ftmv]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_ftmv = idx_ftmv + 1\n                idx_310f = idx_310f + 1\n        idx_nved = 0\n        list_5y6z = range(13)\n        while idx_nved < len(list_5y6z):\n            k = list_5y6z[idx_nved]\n            dp[i][k] %= mod\n            idx_nved = idx_nved + 1\n    idx_81fh = idx_81fh + 1\nprint(dp[n - 1][5])\n", "id": "StringUnfoldding_sample_from_atcoder_ABC135_D_to_59", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ('' + '')\nidx_7mor = 0\nlist_rjoz = s\nwhile idx_7mor < len(list_rjoz):\n    c = list_rjoz[idx_7mor]\n    if c == ('0' + '') or c == ('' + '1') and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        my_str += c\n    elif c == ('B' + '') and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\n    idx_7mor = idx_7mor + 1\nprint(my_str)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC043_B_to_60", "old_id": "atcoder_ABC043_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split((\"\" + \" \"))]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_63ti = 0\n    list_ghix = list(enumerate(it))\n    while idx_63ti < len(list_ghix):\n        i, e = list_ghix[idx_63ti]\n        if l <= i < r and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            yield e\n        elif l >= r:\n            break\n        idx_63ti = idx_63ti + 1\n\n\ndef log(* args):\n    print((\"\" + \"DEBUG:\"), * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        a.append(n)\n    return a\n    if len(arr) == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_f1y5 = 0\nlist_y6hc = list(fac.items())\nwhile idx_f1y5 < len(list_y6hc):\n    p, e = list_y6hc[idx_f1y5]\n    x = e\n    idx_2cr7 = 0\n    list_lfx5 = range(1, 99999999)\n    while idx_2cr7 < len(list_lfx5):\n        i = list_lfx5[idx_2cr7]\n        if x >= i and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            x -= i\n            ans += 1\n        else:\n            break\n        idx_2cr7 = idx_2cr7 + 1\n    idx_f1y5 = idx_f1y5 + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_D_to_61", "old_id": "atcoder_ABC169_D"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_hjfv = 0\nlist_05kv = list(enumerate(l))\nwhile idx_hjfv < len(list_05kv):\n    i, c = list_05kv[idx_hjfv]\n    if c == ('0' + '') and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_hjfv = idx_hjfv + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC129_E_to_62", "old_id": "atcoder_ABC129_E"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nidx_6frb = 0\nlist_yh36 = range(N)\nwhile idx_6frb < len(list_yh36):\n    i = list_yh36[idx_6frb]\n    if (i + 1 != A[i]) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_6frb = idx_6frb + 1\nif (mx == - 1) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    print(('0 ' + '0'))\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print(('0 0' + ''))\n", "id": "StringUnfoldding_sample_from_codeforces_56_B_to_63", "old_id": "codeforces_56_B"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nidx_ultd = 0\nlist_xa0o = range(N - 1)\nwhile idx_ultd < len(list_xa0o):\n    _ = list_xa0o[idx_ultd]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_ultd = idx_ultd + 1\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    idx_j4k7 = 0\n    list_pvsh = adj[v]\n    while idx_j4k7 < len(list_pvsh):\n        u = list_pvsh[idx_j4k7]\n        if seen[u] == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\n        idx_j4k7 = idx_j4k7 + 1\nseq = deque()\nidx_3zhd = 0\nlist_vl39 = range(1, N + 1)\nwhile idx_3zhd < len(list_vl39):\n    i = list_vl39[idx_3zhd]\n    if child_num[i] == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        seq.append(i)\n    idx_3zhd = idx_3zhd + 1\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        print(('First' + ''))\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        seq.append(par[par[c]])\nprint(('' + 'Second'))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC014_D_to_64", "old_id": "atcoder_AGC014_D"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_qrf3 = 0\nlist_a2zx = range(int(input()))\nwhile idx_qrf3 < len(list_a2zx):\n    i = list_a2zx[idx_qrf3]\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == ('' + 'M') and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\n    idx_qrf3 = idx_qrf3 + 1\na, b, c = 0, 0, 0\nidx_h976 = 0\nlist_5k9w = range(N)\nwhile idx_h976 < len(list_5k9w):\n    i = list_5k9w[idx_h976]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        c = min(a, b)\n    idx_h976 = idx_h976 + 1\nprint(c)\n", "id": "StringUnfoldding_sample_from_codeforces_629_B_to_65", "old_id": "codeforces_629_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nidx_vlur = 0\nlist_gze7 = range(t)\nwhile idx_vlur < len(list_gze7):\n    i = list_gze7[idx_vlur]\n    op = input().split()\n    if op[0] == ('al' + 'loc') and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        pos = 0\n        idx_mdza = 0\n        list_wdmf = range(m)\n        while idx_mdza < len(list_wdmf):\n            j = list_wdmf[idx_mdza]\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n            idx_mdza = idx_mdza + 1\n    if op[0] == ('er' + 'ase') and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print(('' + 'ILLEGAL_ERASE_ARGUMENT'))\n        else:\n            idx_uzqw = 0\n            list_71ow = range(m)\n            while idx_uzqw < len(list_71ow):\n                j = list_71ow[idx_uzqw]\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n                idx_uzqw = idx_uzqw + 1\n    if op[0] == (\"defrag\" + \"ment\") and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        idx_vw2a = 0\n        list_bukt = range(cnt)\n        while idx_vw2a < len(list_bukt):\n            j = list_bukt[idx_vw2a]\n            alocuente.append(0)\n            idx_vw2a = idx_vw2a + 1\n    idx_vlur = idx_vlur + 1\n", "id": "StringUnfoldding_sample_from_codeforces_7_B_to_66", "old_id": "codeforces_7_B"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nidx_yvbw = 0\nlist_4bjw = a\nwhile idx_yvbw < len(list_4bjw):\n    i = list_4bjw[idx_yvbw]\n    cnt[i] += 1\n    idx_yvbw = idx_yvbw + 1\nidx_ck9x = 0\nlist_4ypl = range(1, n + 1)\nwhile idx_ck9x < len(list_4ypl):\n    i = list_4ypl[idx_ck9x]\n    if t[i] == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_ck9x = idx_ck9x + 1\nans.reverse()\nprint(len(ans))\nprint((' ' + '').join(map(str, ans)))\n", "id": "StringUnfoldding_sample_from_codeforces_350_B_to_67", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split((\"\" + \" \"))]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns += 1\n        idx_nr65 = 0\n        list_86sg = range(len(a))\n        while idx_nr65 < len(list_86sg):\n            i = list_86sg[idx_nr65]\n            if a[i] != - 1 and a[i] <= counter and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                counter += 1\n                a[i] = - 1\n            idx_nr65 = idx_nr65 + 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "StringUnfoldding_sample_from_codeforces_583_B_to_68", "old_id": "codeforces_583_B"}
{"code": "ip = input()\nst = (\"\" + \"\")\nif len(ip) != 1 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    if ip[0] == (\"9\" + \"\"):\n        st = (\"\" + \"9\")\n        ip = ip[1:]\n    idx_sky4 = 0\n    list_b756 = ip\n    while idx_sky4 < len(list_b756):\n        i = list_b756[idx_sky4]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_sky4 = idx_sky4 + 1\nelse:\n    st = ip\nprint(int(st))\n", "id": "StringUnfoldding_sample_from_codeforces_514_A_to_69", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    idx_67wq = 0\n    list_egjm = s\n    while idx_67wq < len(list_egjm):\n        c = list_egjm[idx_67wq]\n        if c != ('' + '1') and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            break\n        l += 1\n        idx_67wq = idx_67wq + 1\n    if l >= k and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "StringUnfoldding_sample_from_atcoder_ABC106_C_to_70", "old_id": "atcoder_ABC106_C"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == ('B' + ''))\n    idx_dmbf = 0\n    list_sbea = pieces\n    while idx_dmbf < len(list_sbea):\n        piece = list_sbea[idx_dmbf]\n        if piece[1] == ('' + 'A') and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n        idx_dmbf = idx_dmbf + 1\n    idx_5lte = 0\n    list_h3vp = range(len(pieces) - 1, - 1, - 1)\n    while idx_5lte < len(list_h3vp):\n        i = list_h3vp[idx_5lte]\n        if pieces[i][1] == ('' + 'A') and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n        idx_5lte = idx_5lte + 1\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == ('__main' + '__') and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n    print(main())\n", "id": "StringUnfoldding_sample_from_codeforces_632_B_to_71", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ('' + '')\n    idx_t50c = 0\n    list_4m2a = s\n    while idx_t50c < len(list_4m2a):\n        i = list_4m2a[idx_t50c]\n        if i not in [('' + '-'), ('' + ';'), ('' + '_')] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            r += i.lower()\n        idx_t50c = idx_t50c + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_cpo9 = 0\n    list_t94c = range(3)\n    while idx_cpo9 < len(list_t94c):\n        i = list_t94c[idx_cpo9]\n        l.append(f(input()))\n        idx_cpo9 = idx_cpo9 + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_64y5 = 0\n    list_4zce = t\n    while idx_64y5 < len(list_4zce):\n        i = list_4zce[idx_64y5]\n        l.append((\"\" + \"\").join(i))\n        idx_64y5 = idx_64y5 + 1\n    idx_pbq8 = 0\n    list_by8j = range(inp())\n    while idx_pbq8 < len(list_by8j):\n        i = list_by8j[idx_pbq8]\n        if f(instr()) in l and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            print(('A' + 'CC'))\n        else:\n            print(('W' + 'A'))\n        idx_pbq8 = idx_pbq8 + 1\nif __name__ == (\"\" + \"__main__\") and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    solve()\n", "id": "StringUnfoldding_sample_from_codeforces_61_B_to_72", "old_id": "codeforces_61_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    print((\"\" + \"No\"))\n    exit()\nidx_ou0x = 0\nlist_92gt = Sa\nwhile idx_ou0x < len(list_92gt):\n    i = list_92gt[idx_ou0x]\n    if c[i] != 2 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        print((\"\" + \"No\"))\n        exit()\n    idx_ou0x = idx_ou0x + 1\nprint((\"\" + \"Yes\"))\n", "id": "StringUnfoldding_sample_from_atcoder_ABC132_A_to_73", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_efy2 = 0\n    list_dxta = range(n)\n    while idx_efy2 < len(list_dxta):\n        i = list_dxta[idx_efy2]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_efy2 = idx_efy2 + 1\n    low.sort()\n    high.sort()\n    if n % 2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\nif __name__ == (\"_\" + \"_main__\") and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n    resolve()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_E_to_74", "old_id": "atcoder_ABC169_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[(\"\" + \"0\")] * W for _ in range(H)]\n    idx_vz7h = 0\n    list_4v3m = range(H)\n    while idx_vz7h < len(list_4v3m):\n        i = list_4v3m[idx_vz7h]\n        idx_szph = 0\n        list_eu2v = range(W)\n        while idx_szph < len(list_eu2v):\n            j = list_eu2v[idx_szph]\n            if i < B and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                if j < A:\n                    answer[i][j] = (\"0\" + \"\")\n                else:\n                    answer[i][j] = (\"\" + \"1\")\n            else:\n                if j < A:\n                    answer[i][j] = (\"\" + \"1\")\n                else:\n                    answer[i][j] = (\"0\" + \"\")\n            idx_szph = idx_szph + 1\n        idx_vz7h = idx_vz7h + 1\n    idx_v9a8 = 0\n    list_3gro = range(H)\n    while idx_v9a8 < len(list_3gro):\n        i = list_3gro[idx_v9a8]\n        print(('' + '').join(answer[i]))\n        idx_v9a8 = idx_v9a8 + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_evof = 0\n        list_vyo1 = sys.stdin\n        while idx_evof < len(list_vyo1):\n            line = list_vyo1[idx_evof]\n            idx_n9q6 = 0\n            list_0oan = line.split()\n            while idx_n9q6 < len(list_0oan):\n                word = list_0oan[idx_n9q6]\n                yield word\n                idx_n9q6 = idx_n9q6 + 1\n            idx_evof = idx_evof + 1\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\nif __name__ == ('__' + 'main__') and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC038_A_to_75", "old_id": "atcoder_AGC038_A"}
