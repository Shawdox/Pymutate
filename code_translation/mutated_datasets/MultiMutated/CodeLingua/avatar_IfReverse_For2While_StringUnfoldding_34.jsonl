{"code": "s = input()\nres = []\npunctuation = [(',' + ''), ('.' + ''), ('' + '!'), ('' + '?')]\nidx_ui5j = 0\nlist_hgqw = range(len(s))\nwhile idx_ui5j < len(list_hgqw):\n    i = list_hgqw[idx_ui5j]\n    if not i >= 1:\n        if s[i] == ('' + ''):\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    else:\n        if s[i] == ('' + ''):\n            if res[- 1] != ('' + ''):\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == ('' + ''):\n                    res.pop()\n                res.append(s[i])\n                res.append(('' + ''))\n            else:\n                res.append(s[i])\n    idx_ui5j = idx_ui5j + 1\nprint(('' + '').join(res))\n", "id": "StringUnfoldding_sample_from_codeforces_147_A_to_0", "old_id": "codeforces_147_A"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {('' + 'L'): (0, - 1), ('R' + ''): (0, 1), ('' + 'U'): (1, 0), ('D' + ''): (- 1, 0)}\nd = {(x, y): ('' + '')}\nbug = False\nidx_x7bc = 0\nlist_gcej = record_of_movements\nwhile idx_x7bc < len(list_gcej):\n    move = list_gcej[idx_x7bc]\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if not (x, y) not in d:\n        bug = True\n    else:\n        idx_2sj4 = 0\n        list_yn0u = d_movement\n        while idx_2sj4 < len(list_yn0u):\n            step = list_yn0u[idx_2sj4]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_2sj4 = idx_2sj4 + 1\n    if bug:\n        break\n    d[x, y] = ('' + '')\n    idx_x7bc = idx_x7bc + 1\nif not bug:\n    print(('' + 'OK'))\nelse:\n    print(('BU' + 'G'))\n", "id": "StringUnfoldding_sample_from_codeforces_8_B_to_1", "old_id": "codeforces_8_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = (\"\" + \"\")\n    i = 0\n    while i < len(s):\n        if not s[i] == (\"\" + \"A\"):\n            if s[i] == (\"B\" + \"\"):\n                if i < len(s) - 1:\n                    if s[i + 1] == (\"\" + \"C\"):\n                        t += (\"D\" + \"\")\n                        i += 2\n                    else:\n                        t += (\"\" + \"X\")\n                        i += 1\n                else:\n                    t += (\"\" + \"X\")\n                    i += 1\n            else:\n                t += (\"\" + \"X\")\n                i += 1\n        else:\n            t += (\"\" + \"A\")\n            i += 1\n    total = 0\n    numA = 0\n    idx_5h0w = 0\n    list_ni10 = range(len(t))\n    while idx_5h0w < len(list_ni10):\n        i = list_ni10[idx_5h0w]\n        if not t[i] == (\"\" + \"X\"):\n            if t[i] == (\"A\" + \"\"):\n                numA += 1\n            else:\n                total += numA\n        else:\n            numA = 0\n        idx_5h0w = idx_5h0w + 1\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == (\"__m\" + \"ain__\"):\n    solve()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC034_B_to_2", "old_id": "atcoder_AGC034_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_hne9 = 0\nlist_3qv5 = range(firstline)\nwhile idx_hne9 < len(list_3qv5):\n    x = list_3qv5[idx_hne9]\n    A, G = list(map(int, input().split()))\n    if not total + A <= 500:\n        total -= G\n        memory.append((\"G\" + \"\"))\n    else:\n        total += A\n        memory.append((\"A\" + \"\"))\n    idx_hne9 = idx_hne9 + 1\nprint((\"\" + \"\").join(memory))\n", "id": "StringUnfoldding_sample_from_codeforces_282_B_to_3", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(('in' + 'f'))\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_xrlh = 0\nlist_bki0 = range(M)\nwhile idx_xrlh < len(list_bki0):\n    _ = list_bki0[idx_xrlh]\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if not w_x >= 1 and r_x >= 1:\n        if w_x == 0:\n            balls[x - 1][1] -= 1\n            balls[y - 1][1] += 1\n        else:\n            balls[x - 1][0] -= 1\n            balls[y - 1][0] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    idx_xrlh = idx_xrlh + 1\nans = 0\nidx_q53s = 0\nlist_t2cf = range(N)\nwhile idx_q53s < len(list_t2cf):\n    i = list_t2cf[idx_q53s]\n    if balls[i][1]:\n        ans += 1\n    idx_q53s = idx_q53s + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_AGC002_B_to_4", "old_id": "atcoder_AGC002_B"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, ('0' + ''))\nb = b.ljust(x, ('' + '0'))\ns = ('' + '')\nc = 0\nidx_shn9 = 0\nlist_kopb = range(x)\nwhile idx_shn9 < len(list_kopb):\n    i = list_kopb[idx_shn9]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if not d > 9:\n        s += str(d)\n        c = 0\n    else:\n        s += str(d)[1]\n        c = 1\n    idx_shn9 = idx_shn9 + 1\nif c == 1:\n    s += ('1' + '')\nprint(int(s[:: - 1]))\n", "id": "StringUnfoldding_sample_from_codeforces_171_A_to_5", "old_id": "codeforces_171_A"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_m1uy = 0\nlist_xmj9 = s\nwhile idx_m1uy < len(list_xmj9):\n    x = list_xmj9[idx_m1uy]\n    if not x == ('' + 'g'):\n        if x == ('' + 'p'):\n            if num_g - num_p > 0:\n                score = score\n                num_p += 1\n            else:\n                score -= 1\n                num_g += 1\n    else:\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    idx_m1uy = idx_m1uy + 1\nprint(score)\n", "id": "StringUnfoldding_sample_from_atcoder_ARC062_B_to_6", "old_id": "atcoder_ARC062_B"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if not lines_as_string is None:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    else:\n        debug = False\n        lines.append(input())\n    c = [e for e in lines[0].split((\"\" + \" \"))][0]\n    return (c, )\n\n\ndef solve(c):\n    a = (\"abcdefghijklmnopqrstu\" + \"vwxyz\")\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if not isinstance(result, list):\n        print((\"%s\" + \"\") % result, sep=('' + ''))\n    else:\n        idx_o6wq = 0\n        list_gk1z = result\n        while idx_o6wq < len(list_gk1z):\n            r = list_gk1z[idx_o6wq]\n            print((\"\" + \"%s\") % r, sep=('' + ''))\n            idx_o6wq = idx_o6wq + 1\n\n\nif __name__ == ('__main' + '__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC151_A_to_7", "old_id": "atcoder_ABC151_A"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_2vpi = 0\nlist_sl74 = s\nwhile idx_2vpi < len(list_sl74):\n    i = list_sl74[idx_2vpi]\n    if not i in dt:\n        dt[i] = 1\n    else:\n        dt[i] += 1\n    idx_2vpi = idx_2vpi + 1\ncnt = 0\nx = True\nidx_wjqi = 0\nlist_2s6g = list(dt.items())\nwhile idx_wjqi < len(list_2s6g):\n    key, value = list_2s6g[idx_wjqi]\n    if not value % 2 != 0 and cnt < 1:\n        if value % 2 != 0 and cnt >= 1:\n            x = False\n            break\n    else:\n        cnt += 1\n    idx_wjqi = idx_wjqi + 1\nif not x:\n    if not x and len(s) % 2 == 0:\n        print((\"Seco\" + \"nd\"))\n    elif not x and len(s) % 2 != 0:\n        print((\"F\" + \"irst\"))\nelse:\n    print((\"F\" + \"irst\"))\n", "id": "StringUnfoldding_sample_from_codeforces_276_B_to_8", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_gvyh = 0\nlist_i40u = range(n)\nwhile idx_gvyh < len(list_i40u):\n    i = list_i40u[idx_gvyh]\n    if number[i] != 4 and number[i] != 7:\n        print((\"\" + \"NO\"))\n        x += 1\n        break\n    if not i < n // 2:\n        h2 += number[i]\n    else:\n        h1 += number[i]\n    idx_gvyh = idx_gvyh + 1\nif not x:\n    if h1 == h2:\n        print((\"YES\" + \"\"))\n    else:\n        print((\"\" + \"NO\"))\n", "id": "StringUnfoldding_sample_from_codeforces_146_A_to_9", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\ns = []\nidx_lay4 = 0\nlist_nrw2 = range(n)\nwhile idx_lay4 < len(list_nrw2):\n    i = list_nrw2[idx_lay4]\n    k = input()\n    s.append(k)\n    idx_lay4 = idx_lay4 + 1\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nidx_r94l = 0\nlist_9mwj = range(n)\nwhile idx_r94l < len(list_9mwj):\n    i = list_9mwj[idx_r94l]\n    idx_zpru = 0\n    list_zesq = range(n)\n    while idx_zpru < len(list_zesq):\n        j = list_zesq[idx_zpru]\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\n        idx_zpru = idx_zpru + 1\n    idx_r94l = idx_r94l + 1\nif not (len(rem) != 1):\n    if (d1 != d2):\n        print(('N' + 'O'))\n    elif (len(set(d1)) != 1):\n        print(('NO' + ''))\n    elif (set(d1) == rem):\n        print(('NO' + ''))\n    else:\n        print(('' + 'YES'))\nelse:\n    print(('' + 'NO'))\n", "id": "StringUnfoldding_sample_from_codeforces_404_A_to_10", "old_id": "codeforces_404_A"}
{"code": "t = []\nidx_qy7e = 0\nlist_5w9m = range(4)\nwhile idx_qy7e < len(list_5w9m):\n    i = list_5w9m[idx_qy7e]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_qy7e = idx_qy7e + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_drch = 0\nlist_z7je = range(3)\nwhile idx_drch < len(list_z7je):\n    i = list_z7je[idx_drch]\n    idx_rsw4 = 0\n    list_cy0g = range(3)\n    while idx_rsw4 < len(list_cy0g):\n        j = list_cy0g[idx_rsw4]\n        if not t[i][j] == ('#' + ''):\n            white += 1\n        else:\n            black += 1\n        if not t[i][j + 1] == ('' + '#'):\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j] == ('' + '#'):\n            white += 1\n        else:\n            black += 1\n        if not t[i + 1][j + 1] == ('#' + ''):\n            white += 1\n        else:\n            black += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_rsw4 = idx_rsw4 + 1\n    idx_drch = idx_drch + 1\nif not correct == 1:\n    print(('N' + 'O'))\nelse:\n    print(('' + 'YES'))\n", "id": "StringUnfoldding_sample_from_codeforces_287_A_to_11", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_fy9l = 0\n    list_04cn = list(enumerate(P))\n    while idx_fy9l < len(list_04cn):\n        i, p = list_04cn[idx_fy9l]\n        a[p] = i\n        idx_fy9l = idx_fy9l + 1\n    tmp = 1\n    max_len = 1\n    idx_bhp3 = 0\n    list_v97x = range(1, N)\n    while idx_bhp3 < len(list_v97x):\n        i = list_v97x[idx_bhp3]\n        if not a[i] < a[i + 1]:\n            tmp = 1\n        else:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        idx_bhp3 = idx_bhp3 + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_7igb = 0\n    list_nekb = list(enumerate(P))\n    while idx_7igb < len(list_nekb):\n        i, p = list_nekb[idx_7igb]\n        if not i == 0 or P[i - 1] + 1 == p:\n            ans = max(ans, tmp)\n            tmp = 1\n        else:\n            tmp += 1\n        idx_7igb = idx_7igb + 1\n    print(N - ans)\n\n\nif __name__ == ('__mai' + 'n__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC024_B_to_12", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_05rm = 0\nlist_1q5j = range(N)\nwhile idx_05rm < len(list_1q5j):\n    x = list_1q5j[idx_05rm]\n    if not S[x] == ('L' + ''):\n        if S[x] == ('' + 'R'):\n            S_R += 1\n            if s_c + (S_R - T_L) == W + 1:\n                Judge = True\n        elif S[x] == ('' + 'U'):\n            S_U += 1\n            if S_U - T_D - s_r == 0:\n                Judge = True\n        elif S[x] == ('' + 'D'):\n            S_D += 1\n            if s_r + (S_D - T_U) == H + 1:\n                Judge = True\n    else:\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    if T[x] == ('' + 'L'):\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == ('' + 'R'):\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == ('' + 'U'):\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == ('' + 'D'):\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_05rm = idx_05rm + 1\nif not Judge:\n    print(('Y' + 'ES'))\nelse:\n    print(('NO' + ''))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC033_B_to_13", "old_id": "atcoder_AGC033_B"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(('' + ' ')))\n        idx_moa7 = 0\n        list_q7e9 = data\n        while idx_moa7 < len(list_q7e9):\n            number = list_q7e9[idx_moa7]\n            if len(number) > 0:\n                yield (number)\n            idx_moa7 = idx_moa7 + 1\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_8ib6 = 0\nlist_xcje = range(0, N - 1)\nwhile idx_8ib6 < len(list_xcje):\n    i = list_xcje[idx_8ib6]\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\n    idx_8ib6 = idx_8ib6 + 1\ncur_happy = N - 1 - seg_cnt\nif not 2 * K >= seg_cnt:\n    ans = cur_happy + 2 * K\nelse:\n    ans = N - 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC140_D_to_14", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_ug9n = 0\nlist_rkx4 = range(len(lista))\nwhile idx_ug9n < len(list_rkx4):\n    i = list_rkx4[idx_ug9n]\n    if not i == 0:\n        if i == len(lista) - 1:\n            print(\n                f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n            continue\n        elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n            print(lista[i + 1] - lista[i], end=(\" \" + \"\"))\n        else:\n            print(lista[i] - lista[i - 1], end=(\" \" + \"\"))\n    else:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    if not lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[i] - lista[0])\n    else:\n        print(lista[len(lista) - 1] - lista[i])\n    idx_ug9n = idx_ug9n + 1\n", "id": "StringUnfoldding_sample_from_codeforces_567_A_to_15", "old_id": "codeforces_567_A"}
{"code": "n, k = map(int, input().split())\nx = 0\nif not k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print(('' + 'NO'))\nelse:\n    print(('' + 'YES'))\n    idx_aelo = 0\n    list_2xmf = range(n)\n    while idx_aelo < len(list_2xmf):\n        i = list_2xmf[idx_aelo]\n        idx_dt4j = 0\n        list_vexp = range(n)\n        while idx_dt4j < len(list_vexp):\n            j = list_vexp[idx_dt4j]\n            if i % 2 == j % 2 and x < k:\n                print(('' + 'L'), end=('' + ''))\n                x += 1\n            else:\n                print(('' + 'S'), end=('' + ''))\n            idx_dt4j = idx_dt4j + 1\n        print()\n        idx_aelo = idx_aelo + 1\n", "id": "StringUnfoldding_sample_from_codeforces_544_B_to_16", "old_id": "codeforces_544_B"}
{"code": "n, a, b = [int(x) for x in input().split((\"\" + \" \"))]\nlista = [int(x) for x in input().split((\" \" + \"\"))]\nlistb = [int(x) for x in input().split((\"\" + \" \"))]\nidx_zk8f = 0\nlist_gqkj = range(n)\nwhile idx_zk8f < len(list_gqkj):\n    k = list_gqkj[idx_zk8f]\n    if not k + 1 in lista:\n        print(2, end=(\"\" + \" \"))\n    else:\n        print(1, end=(\"\" + \" \"))\n    idx_zk8f = idx_zk8f + 1\n", "id": "StringUnfoldding_sample_from_codeforces_421_A_to_17", "old_id": "codeforces_421_A"}
{"code": "a = input()\nvo = [('' + 'a'), ('' + 'e'), ('i' + ''), ('' + 'o'), ('' + 'u'), ('y' + ''), ('' + 'A'), ('E' + ''), ('I' + ''), ('' + 'O'), ('U' + ''), ('' + 'Y')]\nidx_p0w2 = 0\nlist_ke9z = range(len(a) - 1, - 1, - 1)\nwhile idx_p0w2 < len(list_ke9z):\n    i = list_ke9z[idx_p0w2]\n    if not (a[i] == ('' + ' ') or a[i] == ('' + '?')):\n        if (a[i] in vo):\n            print((\"Y\" + \"ES\"))\n        else:\n            print((\"NO\" + \"\"))\n        break\n    else:\n        continue\n    idx_p0w2 = idx_p0w2 + 1\n", "id": "StringUnfoldding_sample_from_codeforces_49_A_to_18", "old_id": "codeforces_49_A"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print((\"\" + \"D\"), y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print((\"\" + \"D\"), y)\n        return y\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print((\"\" + \"=\"), x)\n    return y[0]\nif not X == 1 or X == N * 2 - 1:\n    print((\"\" + \"Yes\"))\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_6byz = 0\n    list_b6ik = xs\n    while idx_6byz < len(list_b6ik):\n        x = list_b6ik[idx_6byz]\n        print(x)\n        idx_6byz = idx_6byz + 1\nelse:\n    print((\"No\" + \"\"))\n", "id": "StringUnfoldding_sample_from_atcoder_AGC006_B_to_19", "old_id": "atcoder_AGC006_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_matv = 0\n    list_xwpb = range(b)\n    while idx_matv < len(list_xwpb):\n        i = list_xwpb[idx_matv]\n        tot.append(l[i * a: i * a + a])\n        idx_matv = idx_matv + 1\n    idx_h3c5 = 0\n    list_mqjx = zip(* tot)\n    while idx_h3c5 < len(list_mqjx):\n        i = list_mqjx[idx_h3c5]\n        if sum((i)) == b:\n            return True\n        idx_h3c5 = idx_h3c5 + 1\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_qtov = 0\n    list_wkzu = x\n    while idx_qtov < len(list_wkzu):\n        i = list_wkzu[idx_qtov]\n        if not i == ('' + 'O'):\n            s.append(1)\n        else:\n            s.append(0)\n        idx_qtov = idx_qtov + 1\n    idx_0t6f = 0\n    list_wfmv = range(1, 13)\n    while idx_0t6f < len(list_wfmv):\n        i = list_wfmv[idx_0t6f]\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_0t6f = idx_0t6f + 1\n    print(len(tot), end=(' ' + ''))\n    idx_gmd7 = 0\n    list_rm1i = sorted(tot)\n    while idx_gmd7 < len(list_rm1i):\n        a, b = list_rm1i[idx_gmd7]\n        print(f'{a}x{b}', end=('' + ' '))\n        idx_gmd7 = idx_gmd7 + 1\n    print()\n\n\nif __name__ == (\"__\" + \"main__\"):\n    idx_p0yc = 0\n    list_ypu8 = range(inp())\n    while idx_p0yc < len(list_ypu8):\n        i = list_ypu8[idx_p0yc]\n        solve()\n        idx_p0yc = idx_p0yc + 1\n", "id": "StringUnfoldding_sample_from_codeforces_400_A_to_20", "old_id": "codeforces_400_A"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_phen = 0\n    list_1dpk = sequence\n    while idx_phen < len(list_1dpk):\n        value = list_1dpk[idx_phen]\n        y = f(value)\n        if not y not in storage:\n            storage[y].append(value)\n        else:\n            storage[y] = [value]\n            FXs.append(y)\n        idx_phen = idx_phen + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == ('__main' + '__'):\n    print(main())\n", "id": "StringUnfoldding_sample_from_codeforces_272_B_to_21", "old_id": "codeforces_272_B"}
{"code": "import sys\ninput_methods = [('clip' + 'board'), ('fi' + 'le'), ('' + 'key')]\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_dynb = 0\n    list_70l9 = list(enumerate(s[:: - 1]))\n    while idx_dynb < len(list_70l9):\n        i, c = list_70l9[idx_dynb]\n        cc = na + int(c)\n        na = 0\n        if not cc <= 4:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        else:\n            pp += cc\n        idx_dynb = idx_dynb + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = ('' + '0') + s\n    idx_l7ay = 0\n    list_chjg = s[:: - 1]\n    while idx_l7ay < len(list_chjg):\n        c = list_chjg[idx_l7ay]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_l7ay = idx_l7ay + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_yu2g = 0\n    list_1fge = input_l\n    while idx_yu2g < len(list_1fge):\n        l = list_1fge[idx_yu2g]\n        yield l\n        idx_yu2g = idx_yu2g + 1\n\n\nif __name__ == (\"__mai\" + \"n__\"):\n    if sys.platform == ('ios' + ''):\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open(('inputFile' + '.txt'))\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC155_E_to_22", "old_id": "atcoder_ABC155_E"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == ('' + '5') or S == ('?' + ''):\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_j9f4 = 0\nlist_vfsj = range(n)\nwhile idx_j9f4 < len(list_vfsj):\n    i = list_vfsj[idx_j9f4]\n    if not i == 0:\n        if S[i] != ('' + '?'):\n            idx_7ulb = 0\n            list_g4b8 = range(13)\n            while idx_7ulb < len(list_g4b8):\n                k = list_g4b8[idx_7ulb]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_7ulb = idx_7ulb + 1\n        else:\n            idx_hktd = 0\n            list_rlz9 = range(10)\n            while idx_hktd < len(list_rlz9):\n                j = list_rlz9[idx_hktd]\n                idx_lpb5 = 0\n                list_3p1q = range(13)\n                while idx_lpb5 < len(list_3p1q):\n                    k = list_3p1q[idx_lpb5]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_lpb5 = idx_lpb5 + 1\n                idx_hktd = idx_hktd + 1\n        idx_m9i2 = 0\n        list_304m = range(13)\n        while idx_m9i2 < len(list_304m):\n            k = list_304m[idx_m9i2]\n            dp[i][k] %= mod\n            idx_m9i2 = idx_m9i2 + 1\n    else:\n        if S[i] != ('' + '?'):\n            dp[i][int(S[i])] += 1\n        else:\n            idx_wclb = 0\n            list_nzbo = range(10)\n            while idx_wclb < len(list_nzbo):\n                j = list_nzbo[idx_wclb]\n                dp[i][j] += 1\n                idx_wclb = idx_wclb + 1\n    idx_j9f4 = idx_j9f4 + 1\nprint(dp[n - 1][5])\n", "id": "StringUnfoldding_sample_from_atcoder_ABC135_D_to_23", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ('' + '')\nidx_af9z = 0\nlist_r48z = s\nwhile idx_af9z < len(list_r48z):\n    c = list_r48z[idx_af9z]\n    if not c == ('' + '0') or c == ('' + '1'):\n        if c == ('' + 'B') and len(my_str) != 0:\n            my_str = my_str[: len(my_str) - 1]\n    else:\n        my_str += c\n    idx_af9z = idx_af9z + 1\nprint(my_str)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC043_B_to_24", "old_id": "atcoder_ABC043_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split((\"\" + \" \"))]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_52pw = 0\n    list_8ipy = list(enumerate(it))\n    while idx_52pw < len(list_8ipy):\n        i, e = list_8ipy[idx_52pw]\n        if not l <= i < r:\n            if l >= r:\n                break\n        else:\n            yield e\n        idx_52pw = idx_52pw + 1\n\n\ndef log(* args):\n    print((\"D\" + \"EBUG:\"), * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if not n % f == 0:\n            f += 2\n        else:\n            a.append(f)\n            n //= f\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_ob1t = 0\nlist_g9fy = list(fac.items())\nwhile idx_ob1t < len(list_g9fy):\n    p, e = list_g9fy[idx_ob1t]\n    x = e\n    idx_5ke0 = 0\n    list_q8am = range(1, 99999999)\n    while idx_5ke0 < len(list_q8am):\n        i = list_q8am[idx_5ke0]\n        if not x >= i:\n            break\n        else:\n            x -= i\n            ans += 1\n        idx_5ke0 = idx_5ke0 + 1\n    idx_ob1t = idx_ob1t + 1\nprint(ans)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_D_to_25", "old_id": "atcoder_ABC169_D"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_zbws = 0\nlist_gt39 = list(enumerate(l))\nwhile idx_zbws < len(list_gt39):\n    i, c = list_gt39[idx_zbws]\n    if not c == ('0' + ''):\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_zbws = idx_zbws + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "StringUnfoldding_sample_from_atcoder_ABC129_E_to_26", "old_id": "atcoder_ABC129_E"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nidx_65b1 = 0\nlist_8sty = range(N)\nwhile idx_65b1 < len(list_8sty):\n    i = list_8sty[idx_65b1]\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_65b1 = idx_65b1 + 1\nif not (mx == - 1):\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print(('0 0' + ''))\nelse:\n    print(('' + '0 0'))\n", "id": "StringUnfoldding_sample_from_codeforces_56_B_to_27", "old_id": "codeforces_56_B"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_p4hr = 0\nlist_xy3u = range(int(input()))\nwhile idx_p4hr < len(list_xy3u):\n    i = list_xy3u[idx_p4hr]\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if not x == ('' + 'M'):\n        f[a] += 2\n        f[b] -= 2\n    else:\n        m[a] += 2\n        m[b] -= 2\n    idx_p4hr = idx_p4hr + 1\na, b, c = 0, 0, 0\nidx_41bq = 0\nlist_bk3o = range(N)\nwhile idx_41bq < len(list_bk3o):\n    i = list_bk3o[idx_41bq]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\n    idx_41bq = idx_41bq + 1\nprint(c)\n", "id": "StringUnfoldding_sample_from_codeforces_629_B_to_28", "old_id": "codeforces_629_B"}
{"code": "ip = input()\nst = (\"\" + \"\")\nif not len(ip) != 1:\n    st = ip\nelse:\n    if ip[0] == (\"9\" + \"\"):\n        st = (\"\" + \"9\")\n        ip = ip[1:]\n    idx_3ax9 = 0\n    list_sxvd = ip\n    while idx_3ax9 < len(list_sxvd):\n        i = list_sxvd[idx_3ax9]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_3ax9 = idx_3ax9 + 1\nprint(int(st))\n", "id": "StringUnfoldding_sample_from_codeforces_514_A_to_29", "old_id": "codeforces_514_A"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == ('' + 'B'))\n    idx_xmld = 0\n    list_lvrh = pieces\n    while idx_xmld < len(list_lvrh):\n        piece = list_lvrh[idx_xmld]\n        if not piece[1] == ('' + 'A'):\n            pScore -= piece[0]\n        else:\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        idx_xmld = idx_xmld + 1\n    idx_de32 = 0\n    list_xj7e = range(len(pieces) - 1, - 1, - 1)\n    while idx_de32 < len(list_xj7e):\n        i = list_xj7e[idx_de32]\n        if not pieces[i][1] == ('' + 'A'):\n            sScore -= pieces[i][0]\n        else:\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        idx_de32 = idx_de32 + 1\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == ('__main' + '__'):\n    print(main())\n", "id": "StringUnfoldding_sample_from_codeforces_632_B_to_30", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ('' + '')\n    idx_h3jy = 0\n    list_9o4z = s\n    while idx_h3jy < len(list_9o4z):\n        i = list_9o4z[idx_h3jy]\n        if i not in [('-' + ''), ('' + ';'), ('' + '_')]:\n            r += i.lower()\n        idx_h3jy = idx_h3jy + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_ljm6 = 0\n    list_poam = range(3)\n    while idx_ljm6 < len(list_poam):\n        i = list_poam[idx_ljm6]\n        l.append(f(input()))\n        idx_ljm6 = idx_ljm6 + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_sxq8 = 0\n    list_y90d = t\n    while idx_sxq8 < len(list_y90d):\n        i = list_y90d[idx_sxq8]\n        l.append((\"\" + \"\").join(i))\n        idx_sxq8 = idx_sxq8 + 1\n    idx_jwcv = 0\n    list_2kzg = range(inp())\n    while idx_jwcv < len(list_2kzg):\n        i = list_2kzg[idx_jwcv]\n        if not f(instr()) in l:\n            print(('WA' + ''))\n        else:\n            print(('AC' + 'C'))\n        idx_jwcv = idx_jwcv + 1\n\n\nif __name__ == (\"__m\" + \"ain__\"):\n    solve()\n", "id": "StringUnfoldding_sample_from_codeforces_61_B_to_31", "old_id": "codeforces_61_B"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_xs4a = 0\n    list_v3qt = range(n)\n    while idx_xs4a < len(list_v3qt):\n        i = list_v3qt[idx_xs4a]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_xs4a = idx_xs4a + 1\n    low.sort()\n    high.sort()\n    if not n % 2:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n    else:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n\n\nif __name__ == (\"_\" + \"_main__\"):\n    resolve()\n", "id": "StringUnfoldding_sample_from_atcoder_ABC169_E_to_32", "old_id": "atcoder_ABC169_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[(\"\" + \"0\")] * W for _ in range(H)]\n    idx_zcjx = 0\n    list_yk27 = range(H)\n    while idx_zcjx < len(list_yk27):\n        i = list_yk27[idx_zcjx]\n        idx_kr4y = 0\n        list_g3z1 = range(W)\n        while idx_kr4y < len(list_g3z1):\n            j = list_g3z1[idx_kr4y]\n            if not i < B:\n                if j < A:\n                    answer[i][j] = (\"\" + \"1\")\n                else:\n                    answer[i][j] = (\"0\" + \"\")\n            else:\n                if j < A:\n                    answer[i][j] = (\"\" + \"0\")\n                else:\n                    answer[i][j] = (\"\" + \"1\")\n            idx_kr4y = idx_kr4y + 1\n        idx_zcjx = idx_zcjx + 1\n    idx_uz6b = 0\n    list_2njt = range(H)\n    while idx_uz6b < len(list_2njt):\n        i = list_2njt[idx_uz6b]\n        print(('' + '').join(answer[i]))\n        idx_uz6b = idx_uz6b + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_h7wz = 0\n        list_vhas = sys.stdin\n        while idx_h7wz < len(list_vhas):\n            line = list_vhas[idx_h7wz]\n            idx_9n50 = 0\n            list_cv7y = line.split()\n            while idx_9n50 < len(list_cv7y):\n                word = list_cv7y[idx_9n50]\n                yield word\n                idx_9n50 = idx_9n50 + 1\n            idx_h7wz = idx_h7wz + 1\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == ('__main' + '__'):\n    main()\n", "id": "StringUnfoldding_sample_from_atcoder_AGC038_A_to_33", "old_id": "atcoder_AGC038_A"}
