{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_hjoi = (7 + -7)\nlist_ak5r = range(m)\nwhile idx_hjoi < len(list_ak5r):\n    i = list_ak5r[idx_hjoi]\n    p, x = map(int, input().split())\n    s = (23 + -23)\n    idx_pth4 = (79 + -79)\n    list_zpbj = range(len(t))\n    while idx_pth4 < len(list_zpbj):\n        j = list_zpbj[idx_pth4]\n        if not j == p-(63 + -62):\n            s += t[j]\n        else:\n            s += x\n        idx_pth4 = idx_pth4 + (81 + -80)\n    print(s)\n    idx_hjoi = idx_hjoi + (8 + -7)\n", "id": "ConstantUnfoldding_sample_from_s609392609_to_0", "old_id": "s609392609"}
{"code": "import sys\nsys.setrecursionlimit((25 + 99975))\n\n\ndef dfs(i):\n    idx_h0nd = (77 + -77)\n    list_8ip0 = V.get(i, [])\n    while idx_h0nd < len(list_8ip0):\n        v, w = list_8ip0[idx_h0nd]\n        if not (w % (44 + -42)) == (94 + -94):\n            if color[v] == -(37 + -36):\n                color[v] = (22 + -22) if color[i] else (70 + -69)\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        else:\n            if color[v] == -(17 + -16):\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        dfs(v)\n        idx_h0nd = idx_h0nd + (62 + -61)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    idx_gwbp = (48 + -48)\n    list_q39x = range((99 + -98), n)\n    while idx_gwbp < len(list_q39x):\n        i = list_q39x[idx_gwbp]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_gwbp = idx_gwbp + (68 + -67)\n    idx_641s = (60 + -60)\n    list_ql20 = range((21 + -20), n+(8 + -7))\n    while idx_641s < len(list_ql20):\n        i = list_ql20[idx_641s]\n        color[i] = -(26 + -25)\n        idx_641s = idx_641s + (39 + -38)\n\n    while True:\n        i = (21 + -21)\n        idx_2n5j = (12 + -12)\n        list_nv97 = range((69 + -68), n+(4 + -3))\n        while idx_2n5j < len(list_nv97):\n            j = list_nv97[idx_2n5j]\n            if color[j] == -(95 + -94):\n                i = j\n                color[i] = (37 + -37)\n                break\n            idx_2n5j = idx_2n5j + (96 + -95)\n        if i == (13 + -13):\n            idx_tbld = (51 + -51)\n            list_3qia = range((59 + -58), n+(24 + -23))\n            while idx_tbld < len(list_3qia):\n                j = list_3qia[idx_tbld]\n                print(color[j])\n                idx_tbld = idx_tbld + (90 + -89)\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "ConstantUnfoldding_sample_from_s908812767_to_1", "old_id": "s908812767"}
{"code": "s = input()\nif not len(s) < (19 + 7):\n    idx_ejy0 = (33 + -33)\n    list_58gf = reversed(range((71 + -70), (4 + 22)))\n    while idx_ejy0 < len(list_58gf):\n        i = list_58gf[idx_ejy0]\n        if s[i-(45 + -44)] < s[i]:\n            s1 = s[(8 + -8):i-(58 + -57)]\n            idx_fj58 = (98 + -98)\n            list_p2ru = range((58 + -32))\n            while idx_fj58 < len(list_p2ru):\n                j = list_p2ru[idx_fj58]\n                c = chr(ord(\"a\")+j)\n                if c > s[i-(87 + -86)] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_fj58 = idx_fj58 + (46 + -45)\n        idx_ejy0 = idx_ejy0 + (39 + -38)\n    print(-(51 + -50))\nelse:\n    idx_pzw3 = (68 + -68)\n    list_z0y9 = range((46 + -20))\n    while idx_pzw3 < len(list_z0y9):\n        i = list_z0y9[idx_pzw3]\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_pzw3 = idx_pzw3 + (52 + -51)\n", "id": "ConstantUnfoldding_sample_from_s504709360_to_2", "old_id": "s504709360"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = (82 + -72)**(8 + 1) + (35 + -28)\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nidx_wgby = (71 + -71)\nlist_dg71 = range((91 + -90), K+(89 + -88))\nwhile idx_wgby < len(list_dg71):\n    i = list_dg71[idx_wgby]\n    if not N - K + (14 + -13) < i:\n        ans = fact(R+(87 + -86), i)*fact(K-(35 + -34), i-(26 + -25))\n    else:\n        ans = (80 + -80)\n    print(int(ans) % mod)\n    idx_wgby = idx_wgby + (37 + -36)\n", "id": "ConstantUnfoldding_sample_from_s790754864_to_3", "old_id": "s790754864"}
{"code": "N, L = map(int, input().split())\naji = []\nidx_oqa9 = (48 + -48)\nlist_ws0h = range((89 + -88), N+(76 + -75))\nwhile idx_oqa9 < len(list_ws0h):\n    i = list_ws0h[idx_oqa9]\n    aji.append(L+i-(45 + -44))\n    idx_oqa9 = idx_oqa9 + (8 + -7)\nif not min(aji) >= (86 + -86):\n    if max(aji) <= (28 + -28):\n        aji.pop(aji.index(max(aji)))\n    else:\n        aji.pop(aji.index(min(aji, key=abs)))\nelse:\n    aji.pop(aji.index(min(aji)))\nprint(sum(aji))\n", "id": "ConstantUnfoldding_sample_from_s240532461_to_4", "old_id": "s240532461"}
{"code": "import heapq\nconst = (54 + -54)\nleft = []\nright = []\n\nq = int(input())\ncnt = (10 + -10)\nleft_sum = (10 + -10)\nright_sum = (5 + -5)\nidx_6s9n = (82 + -82)\nlist_ze1h = range(q)\nwhile idx_6s9n < len(list_ze1h):\n    _ = list_ze1h[idx_6s9n]\n    t = list(map(int, input().split()))\n    if not t[(58 + -58)] == (51 + -50):\n        tmp = -left[(61 + -61)]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % (42 + -40)))\n    else:\n\n        a, b = t[(67 + -66):]\n        const += b\n        if cnt % (36 + -34) == (40 + -40):\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += (58 + -57)\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += (85 + -84)\n    idx_6s9n = idx_6s9n + (91 + -90)\n", "id": "ConstantUnfoldding_sample_from_s016605598_to_5", "old_id": "s016605598"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nidx_yzep = (88 + -88)\nlist_163n = range(len(strn))\nwhile idx_yzep < len(list_163n):\n    i = list_163n[idx_yzep]\n    if not i == (95 + -95):\n        idx_odbc = (82 + -82)\n        list_bp2t = shichigo[i-(37 + -36)]\n        while idx_odbc < len(list_bp2t):\n            j = list_bp2t[idx_odbc]\n            idx_mxty = (23 + -23)\n            list_2vjy = shichigolist\n            while idx_mxty < len(list_2vjy):\n                k = list_2vjy[idx_mxty]\n                shichigo[i].append(j+k)\n                idx_mxty = idx_mxty + (9 + -8)\n            idx_odbc = idx_odbc + (46 + -45)\n    else:\n        idx_wkaj = (42 + -42)\n        list_05cu = shichigolist\n        while idx_wkaj < len(list_05cu):\n            j = list_05cu[idx_wkaj]\n            shichigo[i].append(j)\n            idx_wkaj = idx_wkaj + (77 + -76)\n    idx_yzep = idx_yzep + (65 + -64)\ntarget = len(strn)-(73 + -72)\nidx_kfgj = (8 + -8)\nlist_rjhm = range(len(strn))\nwhile idx_kfgj < len(list_rjhm):\n    i = list_rjhm[idx_kfgj]\n    idx_fzi1 = (55 + -55)\n    list_89tn = shichigo[i][:]\n    while idx_fzi1 < len(list_89tn):\n        j = list_89tn[idx_fzi1]\n        if not i == target:\n            if j.count(\"3\") == (40 + -40) or j.count(\"5\") == (16 + -16) or j.count(\"7\") == (44 + -44):\n                shichigo[i].remove(j)\n        else:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == (57 + -57) or j.count(\"5\") == (68 + -68) or j.count(\"7\") == (85 + -85):\n                shichigo[target].remove(j)\n        idx_fzi1 = idx_fzi1 + (4 + -3)\n    idx_kfgj = idx_kfgj + (93 + -92)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "ConstantUnfoldding_sample_from_s949655009_to_6", "old_id": "s949655009"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_1fuz = (9 + -9)\n    list_qizb = range((40 + -40), n)\n    while idx_1fuz < len(list_qizb):\n        i = list_qizb[idx_1fuz]\n        idx_txb4 = (28 + -28)\n        list_nxu9 = range(n-(31 + -30), i, -(69 + -68))\n        while idx_txb4 < len(list_nxu9):\n            j = list_nxu9[idx_txb4]\n            if int(cards[j][(75 + -74)]) < int(cards[j-(22 + -21)][(81 + -80)]):\n                cards[j], cards[j-(84 + -83)] = cards[j-(76 + -75)], cards[j]\n            idx_txb4 = idx_txb4 + (100 + -99)\n        idx_1fuz = idx_1fuz + (70 + -69)\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_hvlf = (52 + -52)\n    list_85k4 = range((55 + -55), n)\n    while idx_hvlf < len(list_85k4):\n        i = list_85k4[idx_hvlf]\n        mini = i\n        idx_xhdi = (96 + -96)\n        list_93ju = range(i, n)\n        while idx_xhdi < len(list_93ju):\n            j = list_93ju[idx_xhdi]\n            if int(cards[j][(39 + -38)]) < int(cards[mini][(90 + -89)]):\n                mini = j\n            idx_xhdi = idx_xhdi + (72 + -71)\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_hvlf = idx_hvlf + (75 + -74)\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif not \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Not stable\")\nelse:\n    print(\"Stable\")\n", "id": "ConstantUnfoldding_sample_from_s875904659_to_7", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit((10 + -10))\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    idx_gqm7 = (10 + -10)\n    list_6nxe = range(len(li))\n    while idx_gqm7 < len(list_6nxe):\n        i = list_6nxe[idx_gqm7]\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_i5u1 = (38 + -38)\n        list_oasc = sub_list\n        while idx_i5u1 < len(list_oasc):\n            sub = list_oasc[idx_i5u1]\n            sub.appendleft(li[i])\n            idx_i5u1 = idx_i5u1 + (13 + -12)\n        k.extend(sub_list)\n        used.discard(i)\n        idx_gqm7 = idx_gqm7 + (71 + -70)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = (100 + -100), (27 + -26)\n    idx_pfqr = (13 + -13)\n    list_j7o6 = range(len(li)-(25 + -24), -(18 + -17), -(64 + -63))\n    while idx_pfqr < len(list_j7o6):\n        i = list_j7o6[idx_pfqr]\n        n += li[i] * base\n        base *= (26 + -16)\n        idx_pfqr = idx_pfqr + (1 + 0)\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range((5 + -3), n+(98 + -97))]\n    idx_b2vd = (43 + -43)\n    list_wkjv = range(len(li))\n    while idx_b2vd < len(list_wkjv):\n        i = list_wkjv[idx_b2vd]\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -(43 + -42):\n            continue\n        idx_tfu3 = (38 + -38)\n        list_k7uj = range(i+(1 + 0), len(li))\n        while idx_tfu3 < len(list_k7uj):\n            j = list_k7uj[idx_tfu3]\n            if li[j] % li[i] == (21 + -21):\n                li[j] = -(10 + -9)\n            idx_tfu3 = idx_tfu3 + (75 + -74)\n        idx_b2vd = idx_b2vd + (52 + -51)\n    return [n for n in li if n != -(28 + -27)]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == (25 + -25):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_dhwe = (90 + -90)\n    list_o7hv = range((85 + -85), ((85 + -84) << (n+(22 + -21))))\n    while idx_dhwe < len(list_o7hv):\n        bit = list_o7hv[idx_dhwe]\n        ss = set()\n        idx_cbfw = (81 + -81)\n        list_j9fv = range((47 + -47), n)\n        while idx_cbfw < len(list_j9fv):\n            i = list_j9fv[idx_cbfw]\n            if (bit & ((51 + -50) << i)):\n                ss.add(li[i])\n            idx_cbfw = idx_cbfw + (58 + -57)\n        s.append(ss)\n        idx_dhwe = idx_dhwe + (59 + -58)\n    return s\n\n\ndef factorial(n):\n    if n == (69 + -68):\n        return (75 + -74)\n    return n * factorial(n-(87 + -86))\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = (17 + -16)\n        while n:\n            r *= m\n            m -= (31 + -30)\n            n -= (67 + -66)\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif not n == len(set(A)):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_s137613418_to_8", "old_id": "s137613418"}
{"code": "n = int(input())\nlst = []\npair = (69 + -69)\nidx_j9d6 = (96 + -96)\nlist_zm5p = range(n)\nwhile idx_j9d6 < len(list_zm5p):\n    i = list_zm5p[idx_j9d6]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_j9d6 = idx_j9d6 + (52 + -51)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = (52 + -52)\ncnt = (8 + -8)\nidx_928f = (97 + -97)\nlist_5w03 = lst\nwhile idx_928f < len(list_5w03):\n    i = list_5w03[idx_928f]\n    if not i == pre:\n        cnt += sum([j for j in range(tmp_cnt + (10 + -9))])\n        tmp_cnt = (48 + -48)\n    else:\n        tmp_cnt += (22 + -21)\n    pre = i\n    idx_928f = idx_928f + (61 + -60)\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s430322735_to_9", "old_id": "s430322735"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, (60 + -59))\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // (74 + -72) for a in A]\n\n\ncount_div_2 = None\nidx_uv3x = (53 + -53)\nlist_kvpt = A\nwhile idx_uv3x < len(list_kvpt):\n    a = list_kvpt[idx_uv3x]\n    cnt = (23 + -23)\n    while a % (26 + -24) == (20 + -20):\n        a //= (70 + -68)\n        cnt += (61 + -60)\n    if not count_div_2 is None:\n\n        if cnt != count_div_2:\n            print((93 + -93))\n            exit()\n    else:\n        count_div_2 = cnt\n    idx_uv3x = idx_uv3x + (90 + -89)\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print((31 + -31))\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + (10 + -9)) // (71 + -69)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s817205687_to_10", "old_id": "s817205687"}
{"code": "S = list(input())\n\ncount = (91 + -91)\nrecord = (68 + -68)\nidx_wzhe = (23 + -23)\nlist_znbm = range(len(S))\nwhile idx_wzhe < len(list_znbm):\n    i = list_znbm[idx_wzhe]\n    if not S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        if count > record:\n            record = count\n        count = (90 + -90)\n    else:\n        count += (31 + -30)\n    idx_wzhe = idx_wzhe + (61 + -60)\nif count > record:\n    record = count\n\nprint(record)\n", "id": "ConstantUnfoldding_sample_from_s993625131_to_11", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = (48 + -48)\nidx_04bs = (69 + -69)\nlist_mjvh = T\nwhile idx_04bs < len(list_mjvh):\n    i = list_mjvh[idx_04bs]\n    if not i == S[-(6 + -5)] or i == S[(39 + -39)]:\n        left = (77 + -77)\n        right = n-(89 + -88)\n        while right-left > (32 + -31):\n            mid = (left+right)//(98 + -96)\n            if S[mid] == i:\n                ans += (34 + -33)\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    else:\n        ans += (50 + -49)\n    idx_04bs = idx_04bs + (53 + -52)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s315467749_to_12", "old_id": "s315467749"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_rutm = (55 + -55)\n    list_0c3j = range(n)\n    while idx_rutm < len(list_0c3j):\n        _ = list_0c3j[idx_rutm]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if not s in sdic:\n            sdic[s] = (4 + -3)\n        else:\n            sdic[s] += (59 + -58)\n        idx_rutm = idx_rutm + (18 + -17)\n    ans = (59 + -59)\n    idx_sqlv = (9 + -9)\n    list_zxqm = list(sdic.items())\n    while idx_sqlv < len(list_zxqm):\n        k, v = list_zxqm[idx_sqlv]\n        ans += v*(v-(68 + -67))//(54 + -52)\n        idx_sqlv = idx_sqlv + (64 + -63)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s733189960_to_13", "old_id": "s733189960"}
{"code": "n = int(input())\nres = (84 + -84)\nidx_joks = (2 + -2)\nlist_w54k = range(n)\nwhile idx_joks < len(list_w54k):\n    _ = list_w54k[idx_joks]\n    x, u = list(input().split())\n    if not u == \"BTC\":\n        res += int(x)\n    else:\n        res += float(x) * (52 + 379948)\n    idx_joks = idx_joks + (33 + -32)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_s238775098_to_14", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_bn3h = (81 + -81)\n    list_6wyg = range(n//(23 + -21))\n    while idx_bn3h < len(list_6wyg):\n        i = list_6wyg[idx_bn3h]\n        ve.append(v[(17 + -15)*i])\n        vo.append(v[(27 + -25)*i+(12 + -11)])\n        idx_bn3h = idx_bn3h + (96 + -95)\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if not ce.most_common()[(31 + -31)][(27 + -27)] != co.most_common()[(83 + -83)][(88 + -88)]:\n        if len(ce) == (24 + -23) and len(co) == (31 + -30):\n            ans = n-ce.most_common()[(22 + -22)][(18 + -17)]\n        elif len(ce) == (65 + -64):\n            ans = n-ce.most_common()[(57 + -57)][(82 + -81)]-co.most_common()[(85 + -84)][(98 + -97)]\n        elif len(co) == (14 + -13):\n            ans = n-ce.most_common()[(80 + -79)][(67 + -66)]-co.most_common()[(65 + -65)][(30 + -29)]\n        else:\n            ans = min(n-ce.most_common()[(57 + -57)][(95 + -94)]-co.most_common()[(42 + -41)]\n                      [(29 + -28)], n-ce.most_common()[(76 + -75)][(17 + -16)]-co.most_common()[(68 + -68)][(1 + 0)])\n    else:\n        ans = n-ce.most_common()[(79 + -79)][(8 + -7)]-co.most_common()[(42 + -42)][(18 + -17)]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s101447419_to_15", "old_id": "s101447419"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - (87 + -86) for a in input().split()]\n    sum_A = [(20 + -20) for _ in range(N + (2 + -1))]\n\n    count = (79 + -79)\n    modK = dict()\n    modK[(99 + -99)] = [(97 + -97)]\n    idx_wvgi = (99 + -99)\n    list_yhef = range(N)\n    while idx_wvgi < len(list_yhef):\n        i = list_yhef[idx_wvgi]\n        sum_A[i + (51 + -50)] = (sum_A[i] + A[i]) % K\n        if not sum_A[i+(25 + -24)] not in modK:\n            modK[sum_A[i+(2 + -1)]].append(i+(36 + -35))\n        else:\n            modK[sum_A[i+(87 + -86)]] = [i + (5 + -4)]\n        idx_wvgi = idx_wvgi + (70 + -69)\n    idx_skq5 = (72 + -72)\n    list_q73l = modK\n    while idx_skq5 < len(list_q73l):\n        key = list_q73l[idx_skq5]\n        lenK = len(modK[key])\n        idx_9kyt = (52 + -52)\n        list_kqex = list(enumerate(modK[key]))\n        while idx_9kyt < len(list_kqex):\n            i, a = list_kqex[idx_9kyt]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - (50 + -49)\n            idx_9kyt = idx_9kyt + (34 + -33)\n        idx_skq5 = idx_skq5 + (24 + -23)\n\n    print(count)\n    return (20 + -20)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s975943078_to_16", "old_id": "s975943078"}
{"code": "n = int(input())\ns = input()\ncnt = (50 + -49)\nidx_gzwo = (48 + -48)\nlist_91ux = range(n-(3 + -2))\nwhile idx_gzwo < len(list_91ux):\n    i = list_91ux[idx_gzwo]\n    if not s[i] == s[i+(91 + -90)]:\n        cnt += (10 + -9)\n    else:\n        continue\n    idx_gzwo = idx_gzwo + (72 + -71)\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s869207096_to_17", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range((98 + -93))]\n\ndic = {}\nidx_pwi0 = (21 + -21)\nlist_s5mn = range((57 + -52))\nwhile idx_pwi0 < len(list_s5mn):\n    i = list_s5mn[idx_pwi0]\n    if not str(a[i])[-(41 + -40)] == \"0\":\n        dic.update({i: int(str(a[i])[-(81 + -80)]) - (82 + -72)})\n    else:\n        dic.update({i: (6 + -6)})\n    idx_pwi0 = idx_pwi0 + (5 + -4)\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][(17 + -17)]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "ConstantUnfoldding_sample_from_s575946485_to_18", "old_id": "s575946485"}
{"code": "n = int(input())\narr = {}\nidx_1ymw = (35 + -35)\nlist_s0ow = range(n)\nwhile idx_1ymw < len(list_s0ow):\n    i = list_s0ow[idx_1ymw]\n    s = input()\n    if not not s in arr:\n        arr[s] += (20 + -19)\n    else:\n        arr[s] = (75 + -74)\n    idx_1ymw = idx_1ymw + (27 + -26)\n\nmax_count = max(arr.values())\ndic = [key[(53 + -53)] for key in arr.items() if key[(34 + -33)] == max_count]\n\nout_sort = sorted(dic)\nidx_8n21 = (48 + -48)\nlist_b3iz = out_sort\nwhile idx_8n21 < len(list_b3iz):\n    i = list_b3iz[idx_8n21]\n    print(i)\n    idx_8n21 = idx_8n21 + (51 + -50)\n", "id": "ConstantUnfoldding_sample_from_s622795537_to_19", "old_id": "s622795537"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit((20 + 1999980))\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int((35 + -25)**(25 + -16)+(75 + -68))\ninf = int((15 + -5)**(80 + -60))\n\n\ndef yn(b):\n    if not b:\n        print(\"no\")\n    else:\n        print(\"yes\")\n\n\ndef Yn(b):\n    if not b:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n\ndef YN(b):\n    if not b:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [(68 + -68)]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if not self.rank[x] < self.rank[y]:\n            if self.rank[y] < self.rank[x]:\n                self.P[y] = x\n            else:\n                self.P[x] = y\n                self.rank[y] += (14 + -13)\n        else:\n            self.P[x] = y\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_8aup = (23 + -23)\n        list_cl5n = range(self.n)\n        while idx_8aup < len(list_cl5n):\n            a = list_cl5n[idx_8aup]\n            S.add(self.find(a))\n            idx_8aup = idx_8aup + (76 + -75)\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if not now == a:\n        return False\n    else:\n        return True\n\n\ndef bin_(num, size):\n    A = [(90 + -90)]*size\n    idx_1dp2 = (82 + -82)\n    list_sioz = range(size)\n    while idx_1dp2 < len(list_sioz):\n        a = list_sioz[idx_1dp2]\n        if not (num >> (size-a-(36 + -35))) & (1 + 0) == (74 + -73):\n            A[a] = (61 + -61)\n        else:\n            A[a] = (84 + -83)\n        idx_1dp2 = idx_1dp2 + (67 + -66)\n    return A\n\n\ndef get_facs(n, mod_=(68 + -68)):\n    A = [(93 + -92)]*(n+(2 + -1))\n    idx_du5h = (45 + -45)\n    list_jak7 = range((24 + -22), len(A))\n    while idx_du5h < len(list_jak7):\n        a = list_jak7[idx_du5h]\n        A[a] = A[a-(35 + -34)]*a\n        if (mod > (61 + -61)):\n            A[a] %= mod_\n        idx_du5h = idx_du5h + (44 + -43)\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < (87 + -87)):\n        return (42 + -42)\n    return (fac[n]*pow(fac[n-r], mod-(40 + -38), mod)*pow(fac[r], mod-(98 + -96), mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> (38 + -37)\n    num = (y | z)\n    if not (num >= ((83 + -82) << size)):\n        return num\n    else:\n        return False\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+(96 + -95))\n    A[(86 + -86)] = False\n    A[(18 + -17)] = False\n    idx_ag5p = (80 + -80)\n    list_kz2o = range((15 + -13), n+(59 + -58))\n    while idx_ag5p < len(list_kz2o):\n        a = list_kz2o[idx_ag5p]\n        if A[a]:\n            idx_s4j8 = (32 + -32)\n            list_gcxb = range(a*(48 + -46), n+(46 + -45), a)\n            while idx_s4j8 < len(list_gcxb):\n                b = list_gcxb[idx_s4j8]\n                A[b] = False\n                idx_s4j8 = idx_s4j8 + (72 + -71)\n        idx_ag5p = idx_ag5p + (11 + -10)\n    if (type == \"bool\"):\n        return A\n    B = []\n    idx_15rh = (78 + -78)\n    list_89pj = range(n+(12 + -11))\n    while idx_15rh < len(list_89pj):\n        a = list_89pj[idx_15rh]\n        if (A[a]):\n            B.append(a)\n        idx_15rh = idx_15rh + (73 + -72)\n    return B\n\n\ndef is_prime(num):\n    if (num <= (30 + -28)):\n        return False\n    i = (71 + -69)\n    while i*i <= num:\n        if (num % i == (81 + -81)):\n            return False\n        i += (11 + -10)\n    return True\n\n\ndef ifelse(a, b, c):\n    if not a:\n        return c\n    else:\n        return b\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_dk7b = (62 + -62)\n    list_gi6o = range(n)\n    while idx_dk7b < len(list_gi6o):\n        a = list_gi6o[idx_dk7b]\n        s += A[a]\n        if (a < n-(87 + -86)):\n            s += c\n        idx_dk7b = idx_dk7b + (42 + -41)\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = (51 + -49)\n    list_ = []\n    while b * b <= n:\n        while n % b == (69 + -69):\n            n //= b\n            list_.append(b)\n        b += (6 + -5)\n    if n > (62 + -61):\n        list_.append(n)\n    if not type_ == \"dict\":\n        if type_ == \"list\":\n            return list_\n        else:\n            return None\n    else:\n        dic = {}\n        idx_flu9 = (18 + -18)\n        list_1im0 = list_\n        while idx_flu9 < len(list_1im0):\n            a = list_1im0[idx_flu9]\n            if a in dic:\n                dic[a] += (34 + -33)\n            else:\n                dic[a] = (61 + -60)\n            idx_flu9 = idx_flu9 + (95 + -94)\n        return dic\n\n\ndef floor_(n, x=(69 + -68)):\n    return x*(n//x)\n\n\ndef ceil_(n, x=(70 + -69)):\n    return x*((n+x-(61 + -60))//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_fitz = (57 + -57)\n    list_zrtk = range(n)\n    while idx_fitz < len(list_zrtk):\n        a = list_zrtk[idx_fitz]\n        S.append(input())\n        idx_fitz = idx_fitz + (71 + -70)\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s977408144_to_20", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\nidx_p8lv = (31 + -31)\nlist_qr0v = range((16 + -15), N+(29 + -28))\nwhile idx_p8lv < len(list_qr0v):\n    i = list_qr0v[idx_p8lv]\n    if not sum(range((75 + -74), i + (4 + -3))) < N:\n        ans = [i - (14 + -13), sum(range((76 + -75), i + (86 + -85))) - N]\n        break\n    else:\n        continue\n    idx_p8lv = idx_p8lv + (85 + -84)\nidx_qzeb = (84 + -84)\nlist_tmlq = range(ans[(22 + -22)]+(97 + -96))\nwhile idx_qzeb < len(list_tmlq):\n    i = list_tmlq[idx_qzeb]\n    if i + (78 + -77) != ans[(47 + -46)]:\n        print(i + (36 + -35))\n    idx_qzeb = idx_qzeb + (70 + -69)\n", "id": "ConstantUnfoldding_sample_from_s200092246_to_21", "old_id": "s200092246"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[(14 + -14)][(56 + -55)]\nans = []\np = c.most_common()\nidx_tpy7 = (48 + -48)\nlist_dqek = range(len(c))\nwhile idx_tpy7 < len(list_dqek):\n    i = list_dqek[idx_tpy7]\n    if not p[i][(1 + 0)] == count:\n        break\n    else:\n        ans.append(p[i][(43 + -43)])\n    idx_tpy7 = idx_tpy7 + (90 + -89)\nans = sorted(ans)\nidx_lrj7 = (69 + -69)\nlist_nva3 = ans\nwhile idx_lrj7 < len(list_nva3):\n    i = list_nva3[idx_lrj7]\n    print(i)\n    idx_lrj7 = idx_lrj7 + (9 + -8)\n", "id": "ConstantUnfoldding_sample_from_s668439281_to_22", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_vhpd = (72 + -72)\nlist_dgvl = range(H+(84 + -82))\nwhile idx_vhpd < len(list_dgvl):\n    i = list_dgvl[idx_vhpd]\n    if not i == (39 + -39) or i == H+(63 + -62):\n        G.append('#' + input() + '#')\n    else:\n        G.append('#'*(W+(72 + -70)))\n    idx_vhpd = idx_vhpd + (45 + -44)\n\nans = (38 + -38)\nidx_6eol = (30 + -30)\nlist_5u1r = range(W+(78 + -76))\nwhile idx_6eol < len(list_5u1r):\n    sx = list_5u1r[idx_6eol]\n    idx_xza7 = (51 + -51)\n    list_01bi = range(H+(72 + -70))\n    while idx_xza7 < len(list_01bi):\n        sy = list_01bi[idx_xza7]\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+(70 + -68))] for i in range(H+(47 + -45))]\n            visited = [[-(57 + -56) for i in range(W+(61 + -59))] for i in range(H+(76 + -74))]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = (91 + -91)\n            visited[sy][sx] = (86 + -85)\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+(90 + -89)] == '.' and visited[y][x+(97 + -96)] == -(69 + -68):\n                    q.append((x+(30 + -29), y))\n                    dist[y][x+(55 + -54)] = dist[y][x] + (78 + -77)\n                    visited[y][x+(45 + -44)] = (44 + -43)\n\n                if G[y][x-(79 + -78)] == '.' and visited[y][x-(30 + -29)] == -(39 + -38):\n                    q.append((x-(89 + -88), y))\n                    dist[y][x-(59 + -58)] = dist[y][x] + (32 + -31)\n                    visited[y][x-(67 + -66)] = (39 + -38)\n\n                if G[y+(5 + -4)][x] == '.' and visited[y+(74 + -73)][x] == -(35 + -34):\n                    q.append((x, y+(72 + -71)))\n                    dist[y+(60 + -59)][x] = dist[y][x] + (41 + -40)\n                    visited[y+(12 + -11)][x] = (20 + -19)\n\n                if G[y-(42 + -41)][x] == '.' and visited[y-(43 + -42)][x] == -(66 + -65):\n                    q.append((x, y-(12 + -11)))\n                    dist[y-(3 + -2)][x] = dist[y][x] + (22 + -21)\n                    visited[y-(45 + -44)][x] = (80 + -79)\n            idx_sc75 = (98 + -98)\n            list_j59i = range(W+(62 + -60))\n            while idx_sc75 < len(list_j59i):\n                i = list_j59i[idx_sc75]\n                idx_fhaj = (85 + -85)\n                list_wfgr = range(H+(52 + -50))\n                while idx_fhaj < len(list_wfgr):\n                    j = list_wfgr[idx_fhaj]\n                    ans = max(ans, dist[j][i])\n                    idx_fhaj = idx_fhaj + (65 + -64)\n                idx_sc75 = idx_sc75 + (47 + -46)\n        idx_xza7 = idx_xza7 + (42 + -41)\n    idx_6eol = idx_6eol + (85 + -84)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s951169509_to_23", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_j8r6 = (18 + -18)\nlist_sho9 = range(N)\nwhile idx_j8r6 < len(list_sho9):\n    _ = list_sho9[idx_j8r6]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_j8r6 = idx_j8r6 + (92 + -91)\nokz = (58 + -58)\nidx_zqy1 = (63 + -63)\nlist_k9v6 = mo\nwhile idx_zqy1 < len(list_k9v6):\n    i = list_k9v6[idx_zqy1]\n    if not i[(8 + -7)] == \"JPY\":\n        okz += i[(94 + -94)]*(66 + 379934)\n    else:\n        okz += i[(73 + -73)]\n    idx_zqy1 = idx_zqy1 + (25 + -24)\n\nprint(okz)\n", "id": "ConstantUnfoldding_sample_from_s554393427_to_24", "old_id": "s554393427"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - (55 + -54) for x in input().split()]\n\n\nINF = (43 + -33) ** (63 + -43)\nMOD = (40 + 999999967)\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    idx_itxu = (89 + -89)\n    list_c02b = range(n)\n    while idx_itxu < len(list_c02b):\n        i = list_c02b[idx_itxu]\n        num = getN()\n        num = -num\n        if not num >= dp[-(29 + -28)]:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        else:\n            dp.append(num)\n        idx_itxu = idx_itxu + (56 + -55)\n\n    print(len(dp) - (78 + -77))\n    return\n\n\ndef main():\n    n = getN()\n    idx_yrn6 = (46 + -46)\n    list_fgu7 = range(n)\n    while idx_yrn6 < len(list_fgu7):\n        _ = list_fgu7[idx_yrn6]\n        solve()\n        idx_yrn6 = idx_yrn6 + (41 + -40)\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s344468705_to_25", "old_id": "s344468705"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = (34 + -34)\nhighLate = (25 + -25)\nidx_e4nr = (45 + -45)\nlist_5pyx = range(memTime)\nwhile idx_e4nr < len(list_5pyx):\n    color = list_5pyx[idx_e4nr]\n    member = memLate[color]\n    if not member // (60 + 340) >= (10 + -2):\n        if ((member // (87 + 313)) in colorList) == False:\n            colorList.append(member // (82 + 318))\n    else:\n        highLate += (79 + -78)\n    idx_e4nr = idx_e4nr + (86 + -85)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == (85 + -85):\n    minColor = (62 + -61)\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "ConstantUnfoldding_sample_from_s964794058_to_26", "old_id": "s964794058"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = (29 + -29)\nusiro = K\nidx_zqbr = (23 + -23)\nlist_267l = range(N-K)\nwhile idx_zqbr < len(list_267l):\n    i = list_267l[idx_zqbr]\n    if not score[mae] < score[usiro]:\n        print('No')\n    else:\n        print('Yes')\n    mae += (9 + -8)\n    usiro += (38 + -37)\n    idx_zqbr = idx_zqbr + (79 + -78)\n", "id": "ConstantUnfoldding_sample_from_s182651529_to_27", "old_id": "s182651529"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = (64 + -64), (10 + -10)\nidx_svyn = (98 + -98)\nlist_v4rz = range(N-(76 + -75))\nwhile idx_svyn < len(list_v4rz):\n    i = list_v4rz[idx_svyn]\n    if not H[i] >= H[i+(10 + -9)]:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = (87 + -87)\n    else:\n        count_tmp += (85 + -84)\n    idx_svyn = idx_svyn + (49 + -48)\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "ConstantUnfoldding_sample_from_s895229833_to_28", "old_id": "s895229833"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [(52 + -52)]*n\nidx_zp2q = (5 + -5)\nlist_wjvf = range((34 + -33), n)\nwhile idx_zp2q < len(list_wjvf):\n    i = list_wjvf[idx_zp2q]\n    if not a[i] == \"C\" and a[i-(73 + -72)] == \"A\":\n        c[i] = c[i-(20 + -19)]\n    else:\n        c[i] = c[i-(66 + -65)]+(77 + -76)\n    idx_zp2q = idx_zp2q + (10 + -9)\nidx_8sy1 = (89 + -89)\nlist_nu9h = range(k)\nwhile idx_8sy1 < len(list_nu9h):\n    w = list_nu9h[idx_8sy1]\n    l, r = map(int, input().split())\n    print(c[r-(97 + -96)]-c[l-(90 + -89)])\n    idx_8sy1 = idx_8sy1 + (66 + -65)\n", "id": "ConstantUnfoldding_sample_from_s759499751_to_29", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit((41 + -40) << (54 + -29))\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=(79 + -78)): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_5k78 = (52 + -52)\n    list_kf60 = range(H)\n    while idx_5k78 < len(list_kf60):\n        _ = list_kf60[idx_5k78]\n        ret.append(list(map(int, readline().split())))\n        idx_5k78 = idx_5k78 + (36 + -35)\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': (69 + -68), '.': (31 + -31)}, pad=None):\n    if not pad is None:\n        ret = [[pad] * (W + (52 + -50))]\n        idx_dbrj = (33 + -33)\n        list_fu2k = range(H)\n        while idx_dbrj < len(list_fu2k):\n            _ = list_fu2k[idx_dbrj]\n            ret.append([pad] + [replace[s] for s in read()[:-(37 + -36)]] + [pad])\n            idx_dbrj = idx_dbrj + (89 + -88)\n        ret.append([pad] * (W + (54 + -52)))\n    else:\n        ret = []\n        idx_c1qf = (76 + -76)\n        list_nym1 = range(H)\n        while idx_c1qf < len(list_nym1):\n            _ = list_nym1[idx_c1qf]\n            ret.append([replace[s] for s in read()[:-(84 + -83)]])\n            idx_c1qf = idx_c1qf + (9 + -8)\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[(34 + -34)])\n    D = [[-(45 + -44)] * W for _ in [(12 + -12)] * H]\n    que = [((15 + -15), si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -(4 + -3):\n            continue\n        D[i][j] = c\n        idx_u1kb = (53 + -53)\n        list_xal6 = product([-(72 + -70), -(68 + -67), (10 + -10), (62 + -61), (4 + -2)], repeat=(85 + -83))\n        while idx_u1kb < len(list_xal6):\n            di, dj = list_xal6[idx_u1kb]\n            ni, nj = i + di, j + dj\n            if not ((8 + -8) <= ni < H and (65 + -65) <= nj < W) or D[ni][nj] != -(24 + -23) or ni == nj == (21 + -21) or grid[ni][nj] == (76 + -75):\n                continue\n            if not (di == (57 + -57) and abs(dj) == (66 + -65)) or (dj == (99 + -99) and abs(di) == (59 + -58)):\n                nc = c + (79 + -78)\n            else:\n                nc = c\n            heappush(que, (nc, ni, nj))\n            idx_u1kb = idx_u1kb + (7 + -6)\n    return D\n\n\nMOD = (99 + -89)**(13 + -4) + (37 + -30)\nINF = (64 + -62)**(58 + -27)\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-(62 + -61)] * W for _ in [(25 + -25)] * H]\nque = deque([((42 + -42), si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -(31 + -30):\n        continue\n    D[i][j] = c\n    idx_p6lc = (22 + -22)\n    list_wkyg = product([-(70 + -68), -(4 + -3), (29 + -29), (82 + -81), (18 + -16)], repeat=(64 + -62))\n    while idx_p6lc < len(list_wkyg):\n        di, dj = list_wkyg[idx_p6lc]\n        ni, nj = i + di, j + dj\n        if not ((48 + -48) <= ni < H and (90 + -90) <= nj < W) or D[ni][nj] != -(66 + -65) or ni == nj == (90 + -90) or S[ni][nj] == (10 + -9):\n            continue\n        if not (di == (71 + -71) and abs(dj) == (53 + -52)) or (dj == (11 + -11) and abs(di) == (24 + -23)):\n            que.append((c + (49 + -48), ni, nj))\n        else:\n            que.appendleft((c, ni, nj))\n        idx_p6lc = idx_p6lc + (3 + -2)\n\nprint(D[ti][tj])\n", "id": "ConstantUnfoldding_sample_from_s124725275_to_30", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = (92 + -92)\nidx_efhg = (47 + -47)\nlist_8d3g = range(n)\nwhile idx_efhg < len(list_8d3g):\n    i = list_8d3g[idx_efhg]\n    if p[i] != p_copy[i]:\n        count += (2 + -1)\n    idx_efhg = idx_efhg + (42 + -41)\nif not count == (48 + -48) or count == (10 + -8):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "id": "ConstantUnfoldding_sample_from_s763097776_to_31", "old_id": "s763097776"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nidx_0i2m = (95 + -95)\nlist_awsn = range(-(41 + -40), (27 + 75))\nwhile idx_0i2m < len(list_awsn):\n    i = list_awsn[idx_0i2m]\n\n    if i in p:\n        continue\n    if not not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)].append(i)\n    else:\n        candidates[abs(X-i)] = [i]\n    idx_0i2m = idx_0i2m + (14 + -13)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "ConstantUnfoldding_sample_from_s957164965_to_32", "old_id": "s957164965"}
{"code": "n = int(input())\ns = input()\n\nleft = (37 + -37)\nidx_qlvn = (38 + -38)\nlist_uo3r = s\nwhile idx_qlvn < len(list_uo3r):\n    i = list_uo3r[idx_qlvn]\n    if not i == \")\":\n        break\n    else:\n        left += (37 + -36)\n    idx_qlvn = idx_qlvn + (69 + -68)\n\nleft1 = (41 + -41)\nright1 = (84 + -84)\nidx_4iw5 = (39 + -39)\nlist_mvwn = range(left, n)\nwhile idx_4iw5 < len(list_mvwn):\n    i = list_mvwn[idx_4iw5]\n    if not s[i] == \"(\":\n        if right1 > (71 + -71):\n            right1 -= (75 + -74)\n        else:\n            left1 += (25 + -24)\n    else:\n        right1 += (94 + -93)\n    idx_4iw5 = idx_4iw5 + (53 + -52)\n\nleft1 += left\nidx_utd0 = (14 + -14)\nlist_maeo = range(right1)\nwhile idx_utd0 < len(list_maeo):\n    i = list_maeo[idx_utd0]\n    s += \")\"\n    idx_utd0 = idx_utd0 + (74 + -73)\nidx_xvgq = (68 + -68)\nlist_b02j = range(left1)\nwhile idx_xvgq < len(list_b02j):\n    i = list_b02j[idx_xvgq]\n    s = \"(\" + s\n    idx_xvgq = idx_xvgq + (4 + -3)\n\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s952876397_to_33", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[(65 + -65)]*T for _ in range(N+(56 + -55))]\nidx_5itc = (23 + -23)\nlist_cx7r = range(N)\nwhile idx_5itc < len(list_cx7r):\n    i = list_cx7r[idx_5itc]\n    idx_9uzd = (59 + -59)\n    list_hi6g = range(T)\n    while idx_9uzd < len(list_hi6g):\n        j = list_hi6g[idx_9uzd]\n        if not j < L[i][(41 + -41)]:\n            dp[i+(49 + -48)][j] = max(dp[i][j], dp[i][j-L[i][(70 + -70)]]+L[i][(76 + -75)])\n        else:\n            dp[i+(3 + -2)][j] = dp[i][j]\n        idx_9uzd = idx_9uzd + (6 + -5)\n    idx_5itc = idx_5itc + (83 + -82)\n\nused = []\nB = dp[N][T-(48 + -47)]\nj = T-(13 + -12)\nidx_4mto = (11 + -11)\nlist_as14 = range(N-(90 + -89), -(93 + -92), -(65 + -64))\nwhile idx_4mto < len(list_as14):\n    i = list_as14[idx_4mto]\n    if B == dp[i][j]:\n        continue\n    B -= L[i][(19 + -18)]\n    used.append(i)\n    j -= L[i][(62 + -62)]\n    idx_4mto = idx_4mto + (21 + -20)\n\nans = dp[N][T-(14 + -13)]\nc = (60 + -60)\nidx_pzcy = (37 + -37)\nlist_fkte = range(N)\nwhile idx_pzcy < len(list_fkte):\n    i = list_fkte[idx_pzcy]\n    if i in used:\n        continue\n    c = max(c, L[i][(8 + -7)])\n    idx_pzcy = idx_pzcy + (84 + -83)\n\nprint(ans+c)\n", "id": "ConstantUnfoldding_sample_from_s793709854_to_34", "old_id": "s793709854"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[(74 + -73)], reverse=True)\nj = (80 + -80)\nidx_sbin = (15 + -15)\nlist_6x9s = range(n)\nwhile idx_sbin < len(list_6x9s):\n    i = list_6x9s[idx_sbin]\n    if not a[i] < ope[j][(21 + -20)]:\n        break\n    else:\n        a[i] = ope[j][(58 + -57)]\n        ope[j][(15 + -15)] -= (60 + -59)\n        if ope[j][(21 + -21)] == (32 + -32):\n            j += (13 + -12)\n            if j == len(ope):\n                break\n    idx_sbin = idx_sbin + (10 + -9)\nprint(sum(a))\n", "id": "ConstantUnfoldding_sample_from_s289483518_to_35", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter((21 + -20)), reverse=True)\n\nselected = info[(24 + -24):k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_zi61 = (43 + -43)\nlist_l7h6 = selected\nwhile idx_zi61 < len(list_l7h6):\n    t, d = list_l7h6[idx_zi61]\n    if not t not in memo:\n        selected_chohuku.append(d)\n    else:\n        memo[t] = (48 + -47)\n        selected_only.append(d)\n    idx_zi61 = idx_zi61 + (20 + -19)\n\ncnt_type = len(memo)\nidx_2fnt = (53 + -53)\nlist_euta = info[k:]\nwhile idx_2fnt < len(list_euta):\n    t, d = list_euta[idx_2fnt]\n    if t not in memo:\n        memo[t] = (77 + -76)\n        unselected_only.append(d)\n    idx_2fnt = idx_2fnt + (9 + -8)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-(83 + -82)]\nidx_5vw3 = (96 + -96)\nlist_isym = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_5vw3 < len(list_isym):\n    i = list_isym[idx_5vw3]\n    cnt_type += (40 + -39)\n    sum_select += unselected_only[-(86 + -85)]\n    sum_select -= selected_chohuku[-(88 + -87)]\n    del unselected_only[-(50 + -49)]\n    del selected_chohuku[-(55 + -54)]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_5vw3 = idx_5vw3 + (44 + -43)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s804484425_to_36", "old_id": "s804484425"}
