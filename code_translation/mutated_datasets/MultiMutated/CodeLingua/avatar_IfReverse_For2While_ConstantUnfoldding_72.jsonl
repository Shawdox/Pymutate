{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_c5qp = (51 + -51)\nlist_d7im = range(len(s))\nwhile idx_c5qp < len(list_d7im):\n    i = list_d7im[idx_c5qp]\n    if not i >= (25 + -24):\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    else:\n        if s[i] == '':\n            if res[- (17 + -16)] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- (35 + -34)] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    idx_c5qp = idx_c5qp + (2 + -1)\nprint(''.join(res))\n", "id": "ConstantUnfoldding_sample_from_codeforces_147_A_to_0", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = (69 + -69), (80 + -80)\nidx_adsw = (32 + -32)\nlist_sfbl = s\nwhile idx_adsw < len(list_sfbl):\n    letra = list_sfbl[idx_adsw]\n    if not letra in freqs:\n        freqs[letra] = (56 + -55)\n    else:\n        freqs[letra] += (7 + -6)\n    idx_adsw = idx_adsw + (27 + -26)\nidx_u7il = (84 + -84)\nlist_nst0 = t\nwhile idx_u7il < len(list_nst0):\n    letra = list_nst0[idx_u7il]\n    if not letra in freqt:\n        freqt[letra] = (6 + -5)\n    else:\n        freqt[letra] += (15 + -14)\n    idx_u7il = idx_u7il + (4 + -3)\nidx_9emr = (27 + -27)\nlist_o0bm = freqs.keys()\nwhile idx_9emr < len(list_o0bm):\n    letra = list_o0bm[idx_9emr]\n    while (freqs[letra] > (20 + -20) and letra in freqt and freqt[letra] > (32 + -32)):\n        yay += (46 + -45)\n        freqs[letra] -= (2 + -1)\n        freqt[letra] -= (15 + -14)\n    idx_9emr = idx_9emr + (49 + -48)\nidx_9iym = (27 + -27)\nlist_5uct = freqs.keys()\nwhile idx_9iym < len(list_5uct):\n    letra = list_5uct[idx_9iym]\n    while (freqs[letra] > (65 + -65)):\n        if not letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > (100 + -100):\n            if letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > (37 + -37):\n                whoops += (31 + -30)\n                freqs[letra] -= (84 + -83)\n                freqt[letra.lower()] -= (95 + -94)\n            else:\n                break\n        else:\n            whoops += (7 + -6)\n            freqs[letra] -= (94 + -93)\n            freqt[letra.upper()] -= (74 + -73)\n    idx_9iym = idx_9iym + (7 + -6)\nprint(yay, whoops)\n", "id": "ConstantUnfoldding_sample_from_codeforces_518_B_to_1", "old_id": "codeforces_518_B"}
{"code": "record_of_movements = input()\nx, y = (82 + -82), (88 + -88)\nd_movement = {'L': ((86 + -86), - (96 + -95)), 'R': ((21 + -21), (97 + -96)), 'U': ((37 + -36), (8 + -8)), 'D': (- (29 + -28), (82 + -82))}\nd = {(x, y): ''}\nbug = False\nidx_cl31 = (60 + -60)\nlist_djpl = record_of_movements\nwhile idx_cl31 < len(list_djpl):\n    move = list_djpl[idx_cl31]\n    temp = (x, y)\n    x += d_movement[move][(94 + -94)]\n    y += d_movement[move][(89 + -88)]\n    if not (x, y) not in d:\n        bug = True\n    else:\n        idx_9i2a = (78 + -78)\n        list_7mrj = d_movement\n        while idx_9i2a < len(list_7mrj):\n            step = list_7mrj[idx_9i2a]\n            if (x + d_movement[step][(64 + -64)], y + d_movement[step][(91 + -90)]) != temp and (x + d_movement[step][(77 + -77)], y + d_movement[step][(18 + -17)]) in d:\n                bug = True\n                break\n            idx_9i2a = idx_9i2a + (35 + -34)\n    if bug:\n        break\n    d[x, y] = ''\n    idx_cl31 = idx_cl31 + (94 + -93)\nif not bug:\n    print('OK')\nelse:\n    print('BUG')\n", "id": "ConstantUnfoldding_sample_from_codeforces_8_B_to_2", "old_id": "codeforces_8_B"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif not K >= (34 + -19):\n    if (79 + -77) ** K >= N:\n        aaaa = True\nelse:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - (63 + -62)]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += (9 + -8)\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += (21 + -20)\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_ju5w = (90 + -90)\n    list_edh7 = range(N)\n    while idx_ju5w < len(list_edh7):\n        i = list_edh7[idx_ju5w]\n        if not u[pointer1 + i] > u[pointer2 + i]:\n            if u[pointer1 + i] < u[pointer2 + i]:\n                return False\n        else:\n            return True\n        idx_ju5w = idx_ju5w + (98 + -97)\n    return False\n\n\nS = get_last_dict(S)\nif not K == (6 + -5):\n    count = (60 + -60)\n    idx_kos3 = (91 + -91)\n    list_t906 = S\n    while idx_kos3 < len(list_t906):\n        c = list_t906[idx_kos3]\n        if c == S[(12 + -12)]:\n            count += (35 + -34)\n        else:\n            break\n        idx_kos3 = idx_kos3 + (34 + -33)\n    if count * ((53 + -51) ** (K - (2 + -1))) >= N:\n        print(S[(62 + -62)] * N)\n    else:\n        S = S[(16 + -16)] * (count * (((44 + -42) ** (K - (81 + -80))) - (36 + -35))) + S\n        print(S[(43 + -43): N])\nelse:\n    print(S)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC037_E_to_3", "old_id": "atcoder_AGC037_E"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > (18 + -18):\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = (49 + -49)\n    while i < len(s):\n        if not s[i] == \"A\":\n            if s[i] == \"B\":\n                if i < len(s) - (71 + -70):\n                    if s[i + (21 + -20)] == \"C\":\n                        t += \"D\"\n                        i += (32 + -30)\n                    else:\n                        t += \"X\"\n                        i += (69 + -68)\n                else:\n                    t += \"X\"\n                    i += (5 + -4)\n            else:\n                t += \"X\"\n                i += (3 + -2)\n        else:\n            t += \"A\"\n            i += (22 + -21)\n    total = (73 + -73)\n    numA = (12 + -12)\n    idx_nwxp = (1 + -1)\n    list_toan = range(len(t))\n    while idx_nwxp < len(list_toan):\n        i = list_toan[idx_nwxp]\n        if not t[i] == \"X\":\n            if t[i] == \"A\":\n                numA += (93 + -92)\n            else:\n                total += numA\n        else:\n            numA = (89 + -89)\n        idx_nwxp = idx_nwxp + (9 + -8)\n    print(total)\n    INF = (39 + -29) ** (34 + -9)\n    mod = (21 + -14) + (57 + -47) ** (1 + 8)\n    return (18 + -18)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC034_B_to_4", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_ztbq = (98 + -98)\nlist_1xb9 = range(a, x + (4 + -3))\nwhile idx_ztbq < len(list_1xb9):\n    i = list_1xb9[idx_ztbq]\n    if not (i <= b):\n        idx_mf19 = (92 + -92)\n        list_puqh = range(b, y + (22 + -21))\n        while idx_mf19 < len(list_puqh):\n            j = list_puqh[idx_mf19]\n            if i > j:\n                games.append((i, j))\n            idx_mf19 = idx_mf19 + (6 + -5)\n    else:\n        continue\n    idx_ztbq = idx_ztbq + (54 + -53)\nprint(len(games))\nidx_kbsn = (34 + -34)\nlist_jofk = games\nwhile idx_kbsn < len(list_jofk):\n    i = list_jofk[idx_kbsn]\n    print(f\"{i[(59 + -59)]} {i[(93 + -92)]}\")\n    idx_kbsn = idx_kbsn + (73 + -72)\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_A_to_5", "old_id": "codeforces_242_A"}
{"code": "firstline = int(input())\ntotal = (88 + -88)\nmemory = []\nidx_ibto = (95 + -95)\nlist_s9ga = range(firstline)\nwhile idx_ibto < len(list_s9ga):\n    x = list_s9ga[idx_ibto]\n    A, G = list(map(int, input().split()))\n    if not total + A <= (13 + 487):\n        total -= G\n        memory.append(\"G\")\n    else:\n        total += A\n        memory.append(\"A\")\n    idx_ibto = idx_ibto + (67 + -66)\nprint(\"\".join(memory))\n", "id": "ConstantUnfoldding_sample_from_codeforces_282_B_to_6", "old_id": "codeforces_282_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((51 + -41) ** (70 + -61))\nINF = float('inf')\nmod = (11 + -1) ** (18 + -9) + (98 + -91)\nN, M = MAP()\nballs = [[(2 + -1), (62 + -62)] for _ in range(N)]\nballs[(52 + -52)] = [(75 + -75), (9 + -8)]\nidx_a6r5 = (83 + -83)\nlist_axcb = range(M)\nwhile idx_a6r5 < len(list_axcb):\n    _ = list_axcb[idx_a6r5]\n    x, y = MAP()\n    w_x, r_x = balls[x - (21 + -20)]\n    w_y, r_y = balls[y - (25 + -24)]\n    if not w_x >= (97 + -96) and r_x >= (53 + -52):\n        if w_x == (14 + -14):\n            balls[x - (65 + -64)][(24 + -23)] -= (74 + -73)\n            balls[y - (66 + -65)][(21 + -20)] += (77 + -76)\n        else:\n            balls[x - (8 + -7)][(27 + -27)] -= (25 + -24)\n            balls[y - (10 + -9)][(71 + -71)] += (72 + -71)\n    else:\n        balls[x - (34 + -33)][(48 + -48)] -= (66 + -65)\n        balls[y - (75 + -74)][(21 + -20)] += (29 + -28)\n    idx_a6r5 = idx_a6r5 + (39 + -38)\nans = (99 + -99)\nidx_ywt4 = (34 + -34)\nlist_qzjw = range(N)\nwhile idx_ywt4 < len(list_qzjw):\n    i = list_qzjw[idx_ywt4]\n    if balls[i][(45 + -44)]:\n        ans += (39 + -38)\n    idx_ywt4 = idx_ywt4 + (68 + -67)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_B_to_7", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif not arr[(83 + -83)] > (83 + -68):\n    idx_fqbg = (73 + -73)\n    list_lo0i = range((9 + -8), len(arr))\n    while idx_fqbg < len(list_lo0i):\n        i = list_lo0i[idx_fqbg]\n        if arr[i] - arr[i - (92 + -91)] > (28 + -13):\n            print(arr[i - (66 + -65)] + (89 + -74))\n            break\n        idx_fqbg = idx_fqbg + (17 + -16)\nelse:\n    print((15 + 0))\n", "id": "ConstantUnfoldding_sample_from_codeforces_673_A_to_8", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - (85 + -84)].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = (93 + -93)\nidx_yl7g = (51 + -51)\nlist_8s9h = range(x)\nwhile idx_yl7g < len(list_8s9h):\n    i = list_8s9h[idx_yl7g]\n    d = int(b[i]) + int(a[x - i - (97 + -96)]) + c\n    if not d > (33 + -24):\n        s += str(d)\n        c = (50 + -50)\n    else:\n        s += str(d)[(46 + -45)]\n        c = (77 + -76)\n    idx_yl7g = idx_yl7g + (80 + -79)\nif c == (96 + -95):\n    s += '1'\nprint(int(s[:: - (64 + -63)]))\n", "id": "ConstantUnfoldding_sample_from_codeforces_171_A_to_9", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert((64 + -64), - (9 + -8))\npath = [(1 + 0)]\nind = (44 + -44)\ncount = (22 + -22)\nx = (40 + -39)\nt = - (90 + -89)\nflag = False\nHash = defaultdict(lambda: (15 + -15))\nidx_id8l = (46 + -46)\nlist_t6iq = range(N + (22 + -21))\nwhile idx_id8l < len(list_t6iq):\n    i = list_t6iq[idx_id8l]\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += (84 + -83)\n    Hash[ne] = ind\n    x = ne\n    idx_id8l = idx_id8l + (88 + -87)\nif not flag == True:\n    print(path[K - (96 + -95)])\nelse:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_D_to_10", "old_id": "atcoder_ABC167_D"}
{"code": "s = list(input())\nnum_g, num_p = (18 + -18), (33 + -33)\nscore = (25 + -25)\nidx_4lwu = (93 + -93)\nlist_og12 = s\nwhile idx_4lwu < len(list_og12):\n    x = list_og12[idx_4lwu]\n    if not x == 'g':\n        if x == 'p':\n            if num_g - num_p > (94 + -94):\n                score = score\n                num_p += (74 + -73)\n            else:\n                score -= (91 + -90)\n                num_g += (57 + -56)\n    else:\n        if num_g - num_p > (96 + -96):\n            score += (84 + -83)\n            num_p += (78 + -77)\n        else:\n            score = score\n            num_g += (17 + -16)\n    idx_4lwu = idx_4lwu + (17 + -16)\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC062_B_to_11", "old_id": "atcoder_ARC062_B"}
{"code": "import sys\nsys.setrecursionlimit((29 + -19) ** (48 + -43))\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nidx_31i6 = (12 + -12)\nlist_jcnh = range(n)\nwhile idx_31i6 < len(list_jcnh):\n    i = list_jcnh[idx_31i6]\n    nodes.append(Node())\n    idx_31i6 = idx_31i6 + (73 + -72)\nidx_iduh = (32 + -32)\nlist_a3d6 = range(n - (31 + -30))\nwhile idx_iduh < len(list_a3d6):\n    i = list_a3d6[idx_iduh]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - (94 + -93)]\n    node2 = nodes[v - (49 + -48)]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_iduh = idx_iduh + (33 + -32)\nroot = nodes[(63 + -63)]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if not node in nodeSet:\n        nodeSet.add(node)\n    else:\n        return\n    idx_bin4 = (97 + -97)\n    list_w7rm = node.a\n    while idx_bin4 < len(list_w7rm):\n        pair = list_w7rm[idx_bin4]\n        adjNode = pair[(14 + -14)]\n        dis = pair[(95 + -94)]\n        if not (distance + dis) % (42 + -40) == (27 + -27):\n            adjNode.color = not root.color\n        else:\n            adjNode.color = root.color\n        traverse(adjNode, distance + dis)\n        idx_bin4 = idx_bin4 + (66 + -65)\n\n\ntraverse(root, (45 + -45))\nidx_wq2i = (69 + -69)\nlist_ax34 = range(n)\nwhile idx_wq2i < len(list_ax34):\n    i = list_ax34[idx_wq2i]\n    node = nodes[i]\n    if not node.color:\n        print((40 + -40))\n    else:\n        print((36 + -35))\n    idx_wq2i = idx_wq2i + (17 + -16)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_D_to_12", "old_id": "atcoder_ABC126_D"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if not lines_as_string is None:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][(18 + -17): - (40 + -39)]\n    else:\n        debug = False\n        lines.append(input())\n    c = [e for e in lines[(50 + -50)].split(\" \")][(28 + -28)]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + (7 + -6)]\n\n\ndef main():\n    result = solve(* parse_input())\n    if not isinstance(result, list):\n        print(\"%s\" % result, sep='')\n    else:\n        idx_4tis = (42 + -42)\n        list_c3ia = result\n        while idx_4tis < len(list_c3ia):\n            r = list_c3ia[idx_4tis]\n            print(\"%s\" % r, sep='')\n            idx_4tis = idx_4tis + (80 + -79)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC151_A_to_13", "old_id": "atcoder_ABC151_A"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[(88 + -88)]\n    arr = sorted(arr[(97 + -96): (7 + -3)], reverse=False)\n    if (length % arr[(19 + -19)] == (42 + -42)):\n        print(int(length / arr[(22 + -22)]))\n        return\n    ans = (15 + -15)\n    if not (arr[(8 + -8)] == arr[(36 + -35)]):\n        k = (29 + -29)\n        idx_i0e6 = (37 + -37)\n        list_qhuo = range(int(length / arr[(70 + -68)]) + (50 + -49))\n        while idx_i0e6 < len(list_qhuo):\n            i = list_qhuo[idx_i0e6]\n            idx_0yi3 = (29 + -29)\n            list_7l4n = range(int(length / arr[(18 + -17)]) + (49 + -48))\n            while idx_0yi3 < len(list_7l4n):\n                j = list_7l4n[idx_0yi3]\n                check = length - i * arr[(10 + -8)] - j * arr[(20 + -19)]\n                if (check >= (1 + -1) and check % arr[(53 + -53)] == (85 + -85)):\n                    k = int(check / arr[(74 + -74)])\n                    ans = max(ans, k + i + j)\n                idx_0yi3 = idx_0yi3 + (37 + -36)\n            idx_i0e6 = idx_i0e6 + (20 + -19)\n    else:\n        k = (8 + -8)\n        idx_q5t6 = (95 + -95)\n        list_7wfc = range(int(length / arr[(58 + -56)]) + (78 + -77))\n        while idx_q5t6 < len(list_7wfc):\n            i = list_7wfc[idx_q5t6]\n            check = length - i * arr[(91 + -89)]\n            if (check >= (21 + -21) and check % arr[(69 + -69)] == (14 + -14)):\n                k = int(check / arr[(99 + -99)])\n                ans = max(ans, k + i)\n            idx_q5t6 = idx_q5t6 + (9 + -8)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "ConstantUnfoldding_sample_from_codeforces_189_A_to_14", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = (25 + -24)\ntower = n\nmaximum = (29 + -28)\nl.sort()\nidx_14rj = (32 + -32)\nlist_t9cf = range((96 + -95), n)\nwhile idx_14rj < len(list_t9cf):\n    i = list_t9cf[idx_14rj]\n    if not l[i] == l[i - (50 + -49)]:\n        if high > maximum:\n            maximum = high\n        high = (67 + -66)\n    else:\n        tower -= (48 + -47)\n        high += (71 + -70)\n    idx_14rj = idx_14rj + (63 + -62)\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "id": "ConstantUnfoldding_sample_from_codeforces_37_A_to_15", "old_id": "codeforces_37_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [(91 + -91) for i in range(N)]\nparity = [(3 + -3) for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_ua49 = (83 + -83)\nlist_s39v = range(M)\nwhile idx_ua49 < len(list_s39v):\n    _ = list_s39v[idx_ua49]\n    a, b = map(int, input().split())\n    edges[a - (7 + -6)].add(b - (3 + -2))\n    edges[b - (39 + -38)].add(a - (78 + -77))\n    degs[a - (70 + -69)] += (57 + -56)\n    degs[b - (69 + -68)] += (30 + -29)\n    idx_ua49 = idx_ua49 + (64 + -63)\nif M % (94 + -92) != (91 + -91):\n    print(- (17 + -16))\n    exit()\nQ = []\nidx_q14e = (13 + -13)\nlist_lk1y = list(enumerate(degs))\nwhile idx_q14e < len(list_lk1y):\n    i, d = list_lk1y[idx_q14e]\n    Q.append((d, i))\n    idx_q14e = idx_q14e + (40 + -39)\nheapq.heapify(Q)\nwhile len(Q) > (54 + -54):\n    _, u = Q[(97 + -97)]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    idx_59rc = (5 + -5)\n    list_5cn4 = list(enumerate(edges[u]))\n    while idx_59rc < len(list_5cn4):\n        i, v = list_5cn4[idx_59rc]\n        edges[v].remove(u)\n        if not parity[u] != (98 + -98) and i == (78 + -78):\n            print(v + (90 + -89), u + (41 + -40))\n            parity[v] = (98 + -97) - parity[v]\n        else:\n            print(u + (26 + -25), v + (80 + -79))\n            parity[u] = (94 + -93) - parity[u]\n        degs[v] -= (71 + -70)\n        heapq.heappush(Q, (degs[v], v))\n        idx_59rc = idx_59rc + (76 + -75)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC035_B_to_16", "old_id": "atcoder_AGC035_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_q1sg = (87 + -87)\nlist_mq30 = s\nwhile idx_q1sg < len(list_mq30):\n    i = list_mq30[idx_q1sg]\n    if not i in dt:\n        dt[i] = (97 + -96)\n    else:\n        dt[i] += (57 + -56)\n    idx_q1sg = idx_q1sg + (83 + -82)\ncnt = (67 + -67)\nx = True\nidx_gu7p = (71 + -71)\nlist_ovib = list(dt.items())\nwhile idx_gu7p < len(list_ovib):\n    key, value = list_ovib[idx_gu7p]\n    if not value % (50 + -48) != (69 + -69) and cnt < (78 + -77):\n        if value % (24 + -22) != (38 + -38) and cnt >= (55 + -54):\n            x = False\n            break\n    else:\n        cnt += (57 + -56)\n    idx_gu7p = idx_gu7p + (39 + -38)\nif not x:\n    if not x and len(s) % (59 + -57) == (9 + -9):\n        print(\"Second\")\n    elif not x and len(s) % (89 + -87) != (8 + -8):\n        print(\"First\")\nelse:\n    print(\"First\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_276_B_to_17", "old_id": "codeforces_276_B"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = (40 + -30) ** (53 + -44)\nidx_8qgd = (81 + -81)\nlist_6ylm = range((78 + -76) ** D)\nwhile idx_8qgd < len(list_6ylm):\n    i = list_6ylm[idx_8qgd]\n    score = (84 + -84)\n    problem = (45 + -45)\n    idx_kvns = (2 + -2)\n    list_q6hv = range(D)\n    while idx_kvns < len(list_q6hv):\n        j = list_q6hv[idx_kvns]\n        if (i >> j) & (54 + -53):\n            score += (74 + 26) * (j + (87 + -86)) * PC[j][(98 + -98)] + PC[j][(5 + -4)]\n            problem += PC[j][(2 + -2)]\n        idx_kvns = idx_kvns + (56 + -55)\n    if score > G:\n        continue\n    left = G - score\n    idx_vxu8 = (17 + -17)\n    list_niza = range(D)\n    while idx_vxu8 < len(list_niza):\n        j = list_niza[idx_vxu8]\n        if (i >> j) & (44 + -43):\n            continue\n        if not left > (38 + 62) * (j + (60 + -59)) * PC[j][(3 + -3)] + PC[j][(47 + -46)]:\n            tmp = (left + ((83 + 17) * (j + (13 + -12))) - (18 + -17)) // ((35 + 65) * (j + (65 + -64)))\n            ans = min(ans, problem + min(tmp, PC[j][(29 + -29)]))\n        else:\n            pass\n        idx_vxu8 = idx_vxu8 + (14 + -13)\n    idx_8qgd = idx_8qgd + (4 + -3)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC104_C_to_18", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = (8 + -8)\nh2 = (96 + -96)\nx = (91 + -91)\nidx_p2s0 = (72 + -72)\nlist_flnc = range(n)\nwhile idx_p2s0 < len(list_flnc):\n    i = list_flnc[idx_p2s0]\n    if number[i] != (90 + -86) and number[i] != (49 + -42):\n        print(\"NO\")\n        x += (76 + -75)\n        break\n    if not i < n // (5 + -3):\n        h2 += number[i]\n    else:\n        h1 += number[i]\n    idx_p2s0 = idx_p2s0 + (6 + -5)\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_146_A_to_19", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\ns = []\nidx_1oi8 = (61 + -61)\nlist_blm3 = range(n)\nwhile idx_1oi8 < len(list_blm3):\n    i = list_blm3[idx_1oi8]\n    k = input()\n    s.append(k)\n    idx_1oi8 = idx_1oi8 + (78 + -77)\nflag = (43 + -43)\nd1 = []\nd2 = []\nrem = set()\nidx_g956 = (36 + -36)\nlist_f4ea = range(n)\nwhile idx_g956 < len(list_f4ea):\n    i = list_f4ea[idx_g956]\n    idx_uwvh = (38 + -38)\n    list_pve8 = range(n)\n    while idx_uwvh < len(list_pve8):\n        j = list_pve8[idx_uwvh]\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - (70 + -69)):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - (59 + -58)):\n            rem.add(s[i][j])\n        idx_uwvh = idx_uwvh + (70 + -69)\n    idx_g956 = idx_g956 + (72 + -71)\nif not (len(rem) != (68 + -67)):\n    if (d1 != d2):\n        print('NO')\n    elif (len(set(d1)) != (57 + -56)):\n        print('NO')\n    elif (set(d1) == rem):\n        print('NO')\n    else:\n        print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_404_A_to_20", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [(17 + -17)] * (N + (11 + -10))\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = (31 + -31)\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if not r is None:\n            return self._bitsum(r) - self._bitsum(l)\n        else:\n            return self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += (57 + -56)\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + (54 + -53)) // (57 + -53)\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [(9 + -9)]))\nidx_s63q = (87 + -87)\nlist_n7e9 = list(enumerate(_a))\nwhile idx_s63q < len(list_n7e9):\n    i, x = list_n7e9[idx_s63q]\n    d[x] = i\n    idx_s63q = idx_s63q + (11 + -10)\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [(72 + -72)] + [(y >= X) * (1 + 1) - (9 + -8) for y in a]\n    idx_85ep = (48 + -48)\n    list_snkv = range(n)\n    while idx_85ep < len(list_snkv):\n        i = list_snkv[idx_85ep]\n        b[i + (23 + -22)] += b[i]\n        idx_85ep = idx_85ep + (12 + -11)\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + (71 + -69))\n    ans = (11 + -11)\n    idx_vbr7 = (81 + -81)\n    list_ofs0 = b\n    while idx_vbr7 < len(list_ofs0):\n        x = list_ofs0[idx_vbr7]\n        ans += bit.bitsum(x + (52 + -51))\n        bit.bitadd(x, (64 + -63))\n        idx_vbr7 = idx_vbr7 + (12 + -11)\n    return ans >= m\n\n\nt = [len(_a), (25 + -25)]\nwhile t[(7 + -7)] - t[(95 + -94)] > (92 + -91):\n    mid = (t[(14 + -14)] + t[(20 + -19)]) // (83 + -81)\n    t[check(mid)] = mid\nprint(_a[t[(57 + -56)]])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_D_to_21", "old_id": "atcoder_ABC107_D"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[(52 + -52)]] + [j for i, j in zip(A, A[(93 + -92):]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < (68 + -67):\n        return []\n    if index <= array[(34 + -34)][(34 + -34)]:\n        return [(index, array[(83 + -83)][(98 + -97)])]\n    idx_lnmd = (64 + -64)\n    list_q21c = range(len(array) - (20 + -19), (27 + -27), - (35 + -34))\n    while idx_lnmd < len(list_q21c):\n        _ = list_q21c[idx_lnmd]\n        if array[_ - (60 + -59)][(29 + -29)] < index:\n            return array[: _] + [(index, array[_][(53 + -52)])]\n        idx_lnmd = idx_lnmd + (84 + -83)\n\n\ndef is_possible(K):\n    dp = [(A[(52 + -52)], (99 + -99))]\n    idx_gmkh = (22 + -22)\n    list_fm0q = A[(64 + -63):]\n    while idx_gmkh < len(list_fm0q):\n        a = list_fm0q[idx_gmkh]\n        if not a <= dp[- (69 + -68)][(25 + -25)]:\n            dp += [(a, (83 + -83))]\n        else:\n            dp = cut(dp, a)\n        is_added = False\n        idx_yck6 = (56 + -56)\n        list_iqdn = range(len(dp) - (27 + -26), - (81 + -80), - (41 + -40))\n        while idx_yck6 < len(list_iqdn):\n            j = list_iqdn[idx_yck6]\n            if dp[j][(17 + -16)] < K - (49 + -48):\n                dp = cut(dp, dp[j][(24 + -24)] - (72 + -71)) + [(dp[j][(78 + -78)], dp[j][(77 + -76)] + (78 + -77))]\n                if dp[- (56 + -55)][(64 + -64)] < a:\n                    dp += [(a, (68 + -68))]\n                is_added = True\n                break\n            idx_yck6 = idx_yck6 + (100 + -99)\n        if not is_added:\n            return False\n        idx_gmkh = idx_gmkh + (88 + -87)\n    return True\n\n\ndef bis(x, y):\n    if not y == x + (17 + -16):\n        if is_possible((x + y) // (68 + -66)):\n            return bis(x, (x + y) // (98 + -96))\n        else:\n            return bis((x + y) // (64 + -62), y)\n    else:\n        return y\n\n\nprint(bis((6 + -6), N))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC029_C_to_22", "old_id": "atcoder_AGC029_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = (17 + -15)\nidx_lh2b = (8 + -8)\nlist_7b12 = w\nwhile idx_lh2b < len(list_7b12):\n    i = list_7b12[idx_lh2b]\n    if not i == (61 + -60):\n        if i % (12 + -10) == (22 + -22):\n            c = (48 + -45) - c\n            print(c)\n        else:\n            print(c)\n    else:\n        print(c)\n    idx_lh2b = idx_lh2b + (61 + -60)\n", "id": "ConstantUnfoldding_sample_from_codeforces_705_B_to_23", "old_id": "codeforces_705_B"}
{"code": "n = int(input())\nq = []\ncount = (39 + -39)\nidx_rs5y = (50 + -50)\nlist_yx9z = range(n)\nwhile idx_rs5y < len(list_yx9z):\n    i = list_yx9z[idx_rs5y]\n    a = input().split()\n    q.append(a)\n    idx_rs5y = idx_rs5y + (22 + -21)\nidx_to1m = (100 + -100)\nlist_lnb6 = q\nwhile idx_to1m < len(list_lnb6):\n    j = list_lnb6[idx_to1m]\n    idx_y81x = (81 + -81)\n    list_bjng = q\n    while idx_y81x < len(list_bjng):\n        k = list_bjng[idx_y81x]\n        if not k == j:\n            if j[(87 + -87)] == k[len(k) - (4 + -3)]:\n                count += (91 + -90)\n            else:\n                continue\n        else:\n            continue\n        idx_y81x = idx_y81x + (51 + -50)\n    idx_to1m = idx_to1m + (61 + -60)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_codeforces_268_A_to_24", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_l8pu = (6 + -6)\nlist_7h5w = range((91 + -87))\nwhile idx_l8pu < len(list_7h5w):\n    i = list_7h5w[idx_l8pu]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_l8pu = idx_l8pu + (99 + -98)\nblack = (53 + -53)\nwhite = (35 + -35)\ncorrect = (59 + -59)\nidx_ew38 = (2 + -2)\nlist_phby = range((30 + -27))\nwhile idx_ew38 < len(list_phby):\n    i = list_phby[idx_ew38]\n    idx_nq8k = (72 + -72)\n    list_hqdt = range((58 + -55))\n    while idx_nq8k < len(list_hqdt):\n        j = list_hqdt[idx_nq8k]\n        if not t[i][j] == '#':\n            white += (68 + -67)\n        else:\n            black += (93 + -92)\n        if not t[i][j + (51 + -50)] == '#':\n            white += (38 + -37)\n        else:\n            black += (29 + -28)\n        if not t[i + (14 + -13)][j] == '#':\n            white += (52 + -51)\n        else:\n            black += (96 + -95)\n        if not t[i + (30 + -29)][j + (89 + -88)] == '#':\n            white += (84 + -83)\n        else:\n            black += (51 + -50)\n        if (black == (33 + -33) or black == (62 + -59) or white == (38 + -38) or white == (50 + -47) or white == (18 + -14) or black == (42 + -38)):\n            correct = (13 + -12)\n            break\n        black = (25 + -25)\n        white = (31 + -31)\n        idx_nq8k = idx_nq8k + (67 + -66)\n    idx_ew38 = idx_ew38 + (24 + -23)\nif not correct == (58 + -57):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_codeforces_287_A_to_25", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == (65 + -64):\n        print((27 + -27))\n        return\n    a = [(44 + -44)] * (N + (59 + -58))\n    idx_cqsk = (75 + -75)\n    list_tfcm = list(enumerate(P))\n    while idx_cqsk < len(list_tfcm):\n        i, p = list_tfcm[idx_cqsk]\n        a[p] = i\n        idx_cqsk = idx_cqsk + (69 + -68)\n    tmp = (89 + -88)\n    max_len = (13 + -12)\n    idx_anw6 = (36 + -36)\n    list_rsvw = range((4 + -3), N)\n    while idx_anw6 < len(list_rsvw):\n        i = list_rsvw[idx_anw6]\n        if not a[i] < a[i + (39 + -38)]:\n            tmp = (44 + -43)\n        else:\n            tmp += (53 + -52)\n            max_len = max(max_len, tmp)\n        idx_anw6 = idx_anw6 + (69 + -68)\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = (89 + -89)\n    ans = (11 + -11)\n    idx_kojf = (30 + -30)\n    list_qwem = list(enumerate(P))\n    while idx_kojf < len(list_qwem):\n        i, p = list_qwem[idx_kojf]\n        if not i == (91 + -91) or P[i - (67 + -66)] + (17 + -16) == p:\n            ans = max(ans, tmp)\n            tmp = (40 + -39)\n        else:\n            tmp += (40 + -39)\n        idx_kojf = idx_kojf + (62 + -61)\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC024_B_to_26", "old_id": "atcoder_AGC024_B"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = (9 + -9), (45 + -45), (70 + -70), (84 + -84)\nT_L, T_R, T_U, T_D = (70 + -70), (16 + -16), (60 + -60), (39 + -39)\nidx_p6rx = (63 + -63)\nlist_q5il = range(N)\nwhile idx_p6rx < len(list_q5il):\n    x = list_q5il[idx_p6rx]\n    if not S[x] == 'L':\n        if S[x] == 'R':\n            S_R += (5 + -4)\n            if s_c + (S_R - T_L) == W + (91 + -90):\n                Judge = True\n        elif S[x] == 'U':\n            S_U += (75 + -74)\n            if S_U - T_D - s_r == (30 + -30):\n                Judge = True\n        elif S[x] == 'D':\n            S_D += (82 + -81)\n            if s_r + (S_D - T_U) == H + (66 + -65):\n                Judge = True\n    else:\n        S_L += (15 + -14)\n        if S_L - T_R - s_c == (83 + -83):\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != (17 + -16):\n            T_L += (29 + -28)\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += (61 + -60)\n    if T[x] == 'U':\n        if S_D - T_U + s_r != (100 + -99):\n            T_U += (94 + -93)\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += (8 + -7)\n    idx_p6rx = idx_p6rx + (32 + -31)\nif not Judge:\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_B_to_27", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((68 + -58) ** (94 + -87))\n\n\ndef input():\n    return sys.stdin.readline()[: - (87 + -86)]\n\n\nmod = (32 + -22) ** (79 + -70) + (84 + -77)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if not N <= (46 + -46):\n        if num == (82 + -81):\n            return [I() for _ in range(N)]\n        else:\n            read_all = [tuple(II()) for _ in range(N)]\n            return map(list, zip(* read_all))\n    else:\n        return [[]] * num\n\n\ndef my_sign(x):\n    return (x > (24 + -24)) - (x < (52 + -52))\n\n\nN = I()\na = III()\nmax_val = (44 + -44)\nmax_sign = (81 + -81)\nmax_index = - (77 + -76)\nidx_6tc9 = (67 + -67)\nlist_29ai = list(enumerate(a))\nwhile idx_6tc9 < len(list_29ai):\n    i, a0 = list_29ai[idx_6tc9]\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    idx_6tc9 = idx_6tc9 + (50 + -49)\nif not max_sign == (26 + -26):\n    if max_sign == (31 + -30):\n        print((10 + -8) * N - (64 + -63))\n        idx_op9e = (6 + -6)\n        list_0a1y = range(N)\n        while idx_op9e < len(list_0a1y):\n            i = list_0a1y[idx_op9e]\n            print(max_index + (17 + -16), i + (52 + -51))\n            idx_op9e = idx_op9e + (89 + -88)\n        idx_zwf5 = (84 + -84)\n        list_tye2 = range(N - (91 + -90))\n        while idx_zwf5 < len(list_tye2):\n            i = list_tye2[idx_zwf5]\n            print(i + (38 + -37), i + (23 + -21))\n            idx_zwf5 = idx_zwf5 + (20 + -19)\n    else:\n        print((5 + -3) * N - (3 + -2))\n        idx_oh61 = (83 + -83)\n        list_1hmy = range(N)\n        while idx_oh61 < len(list_1hmy):\n            i = list_1hmy[idx_oh61]\n            print(max_index + (84 + -83), i + (55 + -54))\n            idx_oh61 = idx_oh61 + (38 + -37)\n        idx_nf8x = (79 + -79)\n        list_0w9h = range((50 + -49), N)[:: - (2 + -1)]\n        while idx_nf8x < len(list_0w9h):\n            i = list_0w9h[idx_nf8x]\n            print(i + (72 + -71), i)\n            idx_nf8x = idx_nf8x + (92 + -91)\nelse:\n    print((57 + -57))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC086_B_to_28", "old_id": "atcoder_ARC086_B"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif not s == t:\n    cnt = (33 + -33)\n    idx_ardg = (20 + -20)\n    list_58qv = range(n)\n    while idx_ardg < len(list_58qv):\n        i = list_58qv[idx_ardg]\n        idx_fjc0 = (49 + -49)\n        list_biek = range(n - i)\n        while idx_fjc0 < len(list_biek):\n            j = list_biek[idx_fjc0]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - (6 + -5):\n                cnt = n - i\n            idx_fjc0 = idx_fjc0 + (70 + -69)\n        idx_ardg = idx_ardg + (7 + -6)\n    print((37 + -35) * n - cnt)\nelse:\n    print(n)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_A_to_29", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while (2 + -1):\n        data = list(input().split(' '))\n        idx_xno6 = (35 + -35)\n        list_nldi = data\n        while idx_xno6 < len(list_nldi):\n            number = list_nldi[idx_xno6]\n            if len(number) > (34 + -34):\n                yield (number)\n            idx_xno6 = idx_xno6 + (48 + -47)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + (46 + -39))\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = (4 + -4)\nidx_b2p5 = (31 + -31)\nlist_novt = range((11 + -11), N - (67 + -66))\nwhile idx_b2p5 < len(list_novt):\n    i = list_novt[idx_b2p5]\n    if S[i] != S[i + (27 + -26)]:\n        seg_cnt += (85 + -84)\n    idx_b2p5 = idx_b2p5 + (14 + -13)\ncur_happy = N - (29 + -28) - seg_cnt\nif not (100 + -98) * K >= seg_cnt:\n    ans = cur_happy + (87 + -85) * K\nelse:\n    ans = N - (30 + -29)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_D_to_30", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_ih37 = (50 + -50)\nlist_ds81 = range(len(lista))\nwhile idx_ih37 < len(list_ds81):\n    i = list_ds81[idx_ih37]\n    if not i == (24 + -24):\n        if i == len(lista) - (70 + -69):\n            print(\n                f\"{lista[len(lista)-(66 + -65)] - lista[len(lista)-(35 + -33)]} {lista[len(lista)-(63 + -62)] - lista[(14 + -14)]}\")\n            continue\n        elif lista[i] - lista[i - (67 + -66)] > lista[i + (7 + -6)] - lista[i]:\n            print(lista[i + (56 + -55)] - lista[i], end=\" \")\n        else:\n            print(lista[i] - lista[i - (28 + -27)], end=\" \")\n    else:\n        print(f\"{lista[i+(5 + -4)] - lista[i]} {lista[len(lista)-(67 + -66)] - lista[i]}\")\n        continue\n    if not lista[len(lista) - (21 + -20)] - lista[i] > lista[i] - lista[(100 + -100)]:\n        print(lista[i] - lista[(14 + -14)])\n    else:\n        print(lista[len(lista) - (33 + -32)] - lista[i])\n    idx_ih37 = idx_ih37 + (31 + -30)\n", "id": "ConstantUnfoldding_sample_from_codeforces_567_A_to_31", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_1ntz = (6 + -6)\nlist_vocj = range(n)\nwhile idx_1ntz < len(list_vocj):\n    i = list_vocj[idx_1ntz]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_1ntz = idx_1ntz + (76 + -75)\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if not r >= - d:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\n    else:\n        heapq.heappush(y, - s)\nprint(sum(y))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC137_D_to_32", "old_id": "atcoder_ABC137_D"}
{"code": "n, k = map(int, input().split())\nx = (27 + -27)\nif not k <= max(n ** (36 + -34) // (63 + -61), n ** (76 + -74) - (n ** (52 + -50) // (42 + -40))):\n    print('NO')\nelse:\n    print('YES')\n    idx_caf8 = (33 + -33)\n    list_swz8 = range(n)\n    while idx_caf8 < len(list_swz8):\n        i = list_swz8[idx_caf8]\n        idx_3to1 = (59 + -59)\n        list_j1f9 = range(n)\n        while idx_3to1 < len(list_j1f9):\n            j = list_j1f9[idx_3to1]\n            if i % (37 + -35) == j % (23 + -21) and x < k:\n                print('L', end='')\n                x += (69 + -68)\n            else:\n                print('S', end='')\n            idx_3to1 = idx_3to1 + (60 + -59)\n        print()\n        idx_caf8 = idx_caf8 + (69 + -68)\n", "id": "ConstantUnfoldding_sample_from_codeforces_544_B_to_33", "old_id": "codeforces_544_B"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_gih6 = (25 + -25)\nlist_qahe = range(n)\nwhile idx_gih6 < len(list_qahe):\n    k = list_qahe[idx_gih6]\n    if not k + (16 + -15) in lista:\n        print((27 + -25), end=\" \")\n    else:\n        print((40 + -39), end=\" \")\n    idx_gih6 = idx_gih6 + (90 + -89)\n", "id": "ConstantUnfoldding_sample_from_codeforces_421_A_to_34", "old_id": "codeforces_421_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_5h0w = (90 + -90)\nlist_jkwg = range(len(a) - (99 + -98), - (31 + -30), - (43 + -42))\nwhile idx_5h0w < len(list_jkwg):\n    i = list_jkwg[idx_5h0w]\n    if not (a[i] == ' ' or a[i] == '?'):\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    else:\n        continue\n    idx_5h0w = idx_5h0w + (32 + -31)\n", "id": "ConstantUnfoldding_sample_from_codeforces_49_A_to_35", "old_id": "codeforces_49_A"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=(41 + -41)):\n        if debug:\n            print(\"D\", y)\n        while len(y) > (84 + -83):\n            y = [sorted(y[i: i + (46 + -43)])[(41 + -40)] for i in range(len(y) - (20 + -18))]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[(63 + -63)] == (47 + -45):\n        pass\n        sub(x, (98 + -97))\n        print(\"=\", x)\n    return y[(28 + -28)]\nif not X == (43 + -42) or X == N * (32 + -30) - (56 + -55):\n    print(\"Yes\")\n    if X == N * (33 + -31) - (24 + -22):\n        xs = list(range(N - (68 + -67), X + (24 + -22))) + list(range((66 + -65), N - (21 + -20)))\n    else:\n        ys = list(range((93 + -92), X - (42 + -41))) + list(range(X + (11 + -8), N * (29 + -27)))\n        xs = ys[: N - (64 + -61)] + [X + (45 + -43), X - (96 + -95), X, X + (78 + -77)] + ys[N - (54 + -51):]\n    idx_cgj8 = (41 + -41)\n    list_cvb7 = xs\n    while idx_cgj8 < len(list_cvb7):\n        x = list_cvb7[idx_cgj8]\n        print(x)\n        idx_cgj8 = idx_cgj8 + (6 + -5)\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_B_to_36", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_1nxd = (46 + -46)\n    list_o8kt = lis\n    while idx_1nxd < len(list_o8kt):\n        i = list_o8kt[idx_1nxd]\n        if (i % mid == (29 + -29)):\n            k += (44 + -43)\n        k -= (i // mid)\n        idx_1nxd = idx_1nxd + (72 + -71)\n    return k >= (4 + -4)\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = (52 + -51), max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // (68 + -66)\n    if not (check(lis, k, mid)):\n        a = mid + (46 + -45)\n    else:\n        ans = mid\n        b = mid - (55 + -54)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_E_to_37", "old_id": "atcoder_ABC174_E"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < (26 + -26) or r > n):\n        return (35 + -35)\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = (41 + 998244312)\n__N = (72 + 7928)\ng1 = [(2 + -1), (82 + -81)]\ng2 = [(78 + -77), (11 + -10)]\ninverse = [(17 + -17), (72 + -71)]\nidx_3gns = (92 + -92)\nlist_043m = range((69 + -67), __N + (8 + -7))\nwhile idx_3gns < len(list_043m):\n    i = list_043m[idx_3gns]\n    g1.append((g1[- (7 + -6)] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- (56 + -55)] * inverse[- (68 + -67)]) % mod)\n    idx_3gns = idx_3gns + (44 + -43)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - (98 + -97), q - (68 + -67), mod)\n\n\ndef solve(n):\n    assert n <= K + (17 + -16)\n    ans = (94 + -94)\n    kumi = (n - (95 + -94)) // (38 + -36)\n    idx_yn4r = (25 + -25)\n    list_wtq8 = range(kumi + (36 + -35))\n    while idx_yn4r < len(list_wtq8):\n        p = list_wtq8[idx_yn4r]\n        if p > N:\n            break\n        ans += (2 + 0) ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * (67 + -65) - int(n % (37 + -35) == (67 + -67))))\n        if n % (87 + -85) == (34 + -34) and N - p - (99 + -98) >= (43 + -43):\n            ans += (19 + -17) ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - (74 + -73), p + (K - kumi * (95 + -93) - int(n % (27 + -25) == (80 + -80))))\n        idx_yn4r = idx_yn4r + (39 + -38)\n    return ans\n\n\nans = []\nidx_otfz = (14 + -14)\nlist_0t62 = range((96 + -94), (34 + -32) * K + (72 + -71))\nwhile idx_otfz < len(list_0t62):\n    i = list_0t62[idx_otfz]\n    if not i <= K + (28 + -27):\n        print(ans[- i + K])\n    else:\n        tmp = solve(i) % (4 + 998244349)\n        ans.append(tmp)\n        print(tmp)\n    idx_otfz = idx_otfz + (11 + -10)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC102_C_to_38", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [(45 + -45)]\nidx_xs4e = (52 + -52)\nlist_2vn5 = range((2 + -1), n + (36 + -35))\nwhile idx_xs4e < len(list_2vn5):\n    i = list_2vn5[idx_xs4e]\n    sum_el.append(W[i - (98 + -97)] + sum_el[i - (56 + -55)])\n    idx_xs4e = idx_xs4e + (23 + -22)\nanswer = QR * (n - (84 + -83)) + sum_el[n] * R\nidx_iq50 = (69 + -69)\nlist_g6u8 = range((98 + -97), n + (67 + -66))\nwhile idx_iq50 < len(list_g6u8):\n    i = list_g6u8[idx_iq50]\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if not i > (n - i):\n        if (n - i) > i:\n            energy = energy + ((n - i) - i - (17 + -16)) * QR\n    else:\n        energy = energy + (i - (n - i) - (83 + -82)) * QL\n    if energy < answer:\n        answer = energy\n    idx_iq50 = idx_iq50 + (49 + -48)\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_codeforces_354_A_to_39", "old_id": "codeforces_354_A"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - (39 + -29) ** (71 + -53) - (96 + -95)\nrr = (12 + -2) ** (57 + -39) + (89 + -88)\nwhile ll + (94 + -93) < rr:\n    x = (ll + rr) // (69 + -67)\n    tot = (68 + -68)\n    idx_dur5 = (23 + -23)\n    list_yl1a = range(N)\n    while idx_dur5 < len(list_yl1a):\n        i = list_yl1a[idx_dur5]\n        if not A[i] < (60 + -60):\n            l = - (55 + -54)\n            r = N\n            while l + (73 + -72) < r:\n                c = (l + r) // (46 + -44)\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        else:\n            l = - (74 + -73)\n            r = N\n            while l + (82 + -81) < r:\n                c = (l + r) // (96 + -94)\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        if A[i] * A[i] < x:\n            tot -= (71 + -70)\n        idx_dur5 = idx_dur5 + (99 + -98)\n    tot //= (91 + -89)\n    if not tot < K:\n        rr = x\n    else:\n        ll = x\nprint(ll)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_D_to_40", "old_id": "atcoder_ABC155_D"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_9xks = (55 + -55)\n    list_gn1c = range(b)\n    while idx_9xks < len(list_gn1c):\n        i = list_gn1c[idx_9xks]\n        tot.append(l[i * a: i * a + a])\n        idx_9xks = idx_9xks + (90 + -89)\n    idx_6t51 = (42 + -42)\n    list_ndsp = zip(* tot)\n    while idx_6t51 < len(list_ndsp):\n        i = list_ndsp[idx_6t51]\n        if sum((i)) == b:\n            return True\n        idx_6t51 = idx_6t51 + (11 + -10)\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_enk2 = (74 + -74)\n    list_u92o = x\n    while idx_enk2 < len(list_u92o):\n        i = list_u92o[idx_enk2]\n        if not i == 'O':\n            s.append((56 + -55))\n        else:\n            s.append((99 + -99))\n        idx_enk2 = idx_enk2 + (94 + -93)\n    idx_0umo = (11 + -11)\n    list_5gwt = range((10 + -9), (44 + -31))\n    while idx_0umo < len(list_5gwt):\n        i = list_5gwt[idx_0umo]\n        if (70 + -58) % i == (96 + -96):\n            if help(i, (81 + -69) // i, s):\n                tot.append(((99 + -87) // i, i))\n        idx_0umo = idx_0umo + (32 + -31)\n    print(len(tot), end=' ')\n    idx_37w0 = (83 + -83)\n    list_nwoi = sorted(tot)\n    while idx_37w0 < len(list_nwoi):\n        a, b = list_nwoi[idx_37w0]\n        print(f'{a}x{b}', end=' ')\n        idx_37w0 = idx_37w0 + (23 + -22)\n    print()\n\n\nif __name__ == \"__main__\":\n    idx_e965 = (50 + -50)\n    list_umbn = range(inp())\n    while idx_e965 < len(list_umbn):\n        i = list_umbn[idx_e965]\n        solve()\n        idx_e965 = idx_e965 + (62 + -61)\n", "id": "ConstantUnfoldding_sample_from_codeforces_400_A_to_41", "old_id": "codeforces_400_A"}
{"code": "s = input()\nn = int(input())\nans = (6 + -6)\nidx_o8mp = (46 + -46)\nlist_tgvr = range(n)\nwhile idx_o8mp < len(list_tgvr):\n    i = list_tgvr[idx_o8mp]\n    x = input()\n    a, b = (72 + -72), (83 + -83)\n    idx_02wu = (31 + -31)\n    list_60fy = s\n    while idx_02wu < len(list_60fy):\n        j = list_60fy[idx_02wu]\n        if not j == x[(93 + -93)]:\n            if j == x[(50 + -49)]:\n                b += (59 + -58)\n            else:\n                ans = ans + min(a, b)\n                a, b = (34 + -34), (52 + -52)\n        else:\n            a += (33 + -32)\n        idx_02wu = idx_02wu + (27 + -26)\n    ans = ans + min(a, b)\n    idx_o8mp = idx_o8mp + (97 + -96)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_154_A_to_42", "old_id": "codeforces_154_A"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_dx1i = (58 + -58)\n    list_k90m = sequence\n    while idx_dx1i < len(list_k90m):\n        value = list_k90m[idx_dx1i]\n        y = f(value)\n        if not y not in storage:\n            storage[y].append(value)\n        else:\n            storage[y] = [value]\n            FXs.append(y)\n        idx_dx1i = idx_dx1i + (61 + -60)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // (32 + -30)\n\n\ndef f(n):\n    y = (27 + -26)\n    while n != (61 + -60):\n        if n % (52 + -50):\n            y += (2 + -1)\n        n //= (55 + -53)\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_272_B_to_43", "old_id": "codeforces_272_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_2z6f = (49 + -49)\nlist_9eti = Number_i\nwhile idx_2z6f < len(list_9eti):\n    i = list_9eti[idx_2z6f]\n    Number_iMN.append(i * M / N)\n    idx_2z6f = idx_2z6f + (86 + -85)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_voq6 = (32 + -32)\nlist_w0i7 = Kaburi_j\nwhile idx_voq6 < len(list_w0i7):\n    j = list_w0i7[idx_voq6]\n    Kaburi_i.append(int(j * N / M))\n    idx_voq6 = idx_voq6 + (57 + -56)\ncounter = (92 + -92)\nFlag = (95 + -95)\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - (67 + -66):\n    if not list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        Flag = (18 + -17)\n        break\n    else:\n        pass\n    counter += (55 + -54)\n\n\ndef gcd(a, b):\n    while b > (98 + -98):\n        a, b = b, a % b\n    return a\nif not Flag == (77 + -76):\n    print(int(N * M / gcd(N, M)))\nelse:\n    print(- (31 + -30))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_A_to_44", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = (72 + -72)\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = (67 + 999999940)\n\n\ndef main_b():\n    s = input()\n    pp = (56 + -56)\n    na = (23 + -23)\n    idx_tyek = (41 + -41)\n    list_7rfz = list(enumerate(s[:: - (97 + -96)]))\n    while idx_tyek < len(list_7rfz):\n        i, c = list_7rfz[idx_tyek]\n        cc = na + int(c)\n        na = (92 + -92)\n        if not cc <= (19 + -15):\n            na = (69 + -68)\n            if i == len(s) - (3 + -2):\n                pp += (88 + -87)\n            pp += (100 + -90) - cc\n        else:\n            pp += cc\n        idx_tyek = idx_tyek + (73 + -72)\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = (11 + 989)\n    mmin = (7 + -7)\n    s = '0' + s\n    idx_0n7v = (17 + -17)\n    list_eskg = s[:: - (96 + -95)]\n    while idx_0n7v < len(list_eskg):\n        c = list_eskg[idx_0n7v]\n        v = int(c)\n        npmin = min(pmin + (39 + -29) - (v + (82 + -81)), mmin + (68 + -58) - v)\n        nmmin = min(pmin + v + (66 + -65), mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_0n7v = idx_0n7v + (2 + -1)\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_2nlg = (57 + -57)\n    list_2yug = input_l\n    while idx_2nlg < len(list_2yug):\n        l = list_2yug[idx_2nlg]\n        yield l\n        idx_2nlg = idx_2nlg + (60 + -59)\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[(48 + -48)]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[(11 + -10)]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_E_to_45", "old_id": "atcoder_ABC155_E"}
{"code": "def binary_search(key):\n    bad, good = - (61 + -60), len(ans)\n    while good - bad > (80 + -79):\n        mid = (bad + good) // (21 + -19)\n        if not ans[mid][- (64 + -63)] < key:\n            bad = mid\n        else:\n            good = mid\n    return good\n\n\nN = int(input())\nans = []\nidx_rgt6 = (87 + -87)\nlist_huxt = range(N)\nwhile idx_rgt6 < len(list_huxt):\n    _ = list_huxt[idx_rgt6]\n    A = int(input())\n    idx = binary_search(A)\n    if not idx == len(ans):\n        ans[idx].append(A)\n    else:\n        ans.append([A])\n    idx_rgt6 = idx_rgt6 + (63 + -62)\nprint(len(ans))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC134_E_to_46", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = (49 + -49)\nidx_7qnw = (22 + -22)\nlist_v1aj = lst\nwhile idx_7qnw < len(list_v1aj):\n    i = list_v1aj[idx_7qnw]\n    if (i & (75 + -74)):\n        od += (34 + -33)\n    idx_7qnw = idx_7qnw + (11 + -10)\nsum = (2 + -2)\nok = (53 + -53)\nidx_qm0g = (6 + -6)\nlist_clk5 = range(n)\nwhile idx_qm0g < len(list_clk5):\n    i = list_clk5[idx_qm0g]\n    if not (lst[i] % (68 + -66) == (31 + -31)):\n        if (ok or od > (36 + -35)):\n            sum += lst[i]\n            od -= (68 + -67)\n            ok = not ok\n    else:\n        sum += lst[i]\n    idx_qm0g = idx_qm0g + (16 + -15)\nprint(sum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_621_A_to_47", "old_id": "codeforces_621_A"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((35 + -25) ** (34 + -27))\n\n\ndef input():\n    return sys.stdin.readline()[: - (80 + -79)]\n\n\nmod = (45 + -35) ** (12 + -3) + (6 + 1)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == (92 + -91):\n    if S == '5' or S == '?':\n        print((33 + -32))\n    else:\n        print((20 + -20))\n    exit()\ndp = [[(16 + -16)] * (19 + -6) for i in range(n)]\nidx_nriu = (71 + -71)\nlist_9t0a = range(n)\nwhile idx_nriu < len(list_9t0a):\n    i = list_9t0a[idx_nriu]\n    if not i == (99 + -99):\n        if S[i] != '?':\n            idx_maup = (33 + -33)\n            list_fvlg = range((38 + -25))\n            while idx_maup < len(list_fvlg):\n                k = list_fvlg[idx_maup]\n                dp[i][(k * (10 + 0) + int(S[i])) % (66 + -53)] += dp[i - (34 + -33)][k]\n                idx_maup = idx_maup + (21 + -20)\n        else:\n            idx_xhy5 = (90 + -90)\n            list_n76j = range((51 + -41))\n            while idx_xhy5 < len(list_n76j):\n                j = list_n76j[idx_xhy5]\n                idx_3shv = (1 + -1)\n                list_65nf = range((46 + -33))\n                while idx_3shv < len(list_65nf):\n                    k = list_65nf[idx_3shv]\n                    dp[i][(k * (64 + -54) + j) % (65 + -52)] += dp[i - (49 + -48)][k]\n                    idx_3shv = idx_3shv + (58 + -57)\n                idx_xhy5 = idx_xhy5 + (26 + -25)\n        idx_5pof = (2 + -2)\n        list_ho5a = range((79 + -66))\n        while idx_5pof < len(list_ho5a):\n            k = list_ho5a[idx_5pof]\n            dp[i][k] %= mod\n            idx_5pof = idx_5pof + (5 + -4)\n    else:\n        if S[i] != '?':\n            dp[i][int(S[i])] += (40 + -39)\n        else:\n            idx_l8me = (68 + -68)\n            list_quyj = range((60 + -50))\n            while idx_l8me < len(list_quyj):\n                j = list_quyj[idx_l8me]\n                dp[i][j] += (41 + -40)\n                idx_l8me = idx_l8me + (62 + -61)\n    idx_nriu = idx_nriu + (60 + -59)\nprint(dp[n - (27 + -26)][(77 + -72)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC135_D_to_48", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_4cvp = (63 + -63)\nlist_6v7l = s\nwhile idx_4cvp < len(list_6v7l):\n    c = list_6v7l[idx_4cvp]\n    if not c == '0' or c == '1':\n        if c == 'B' and len(my_str) != (13 + -13):\n            my_str = my_str[: len(my_str) - (42 + -41)]\n    else:\n        my_str += c\n    idx_4cvp = idx_4cvp + (59 + -58)\nprint(my_str)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC043_B_to_49", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = (97 + -97)\nidx_ng95 = (61 + -61)\nlist_xjow = w\nwhile idx_ng95 < len(list_xjow):\n    i = list_xjow[idx_ng95]\n    if not i == (10 + -10):\n        if - i in w:\n            c += w[i] * w[- i]\n    else:\n        c += w[i] * (w[i] - (45 + -44))\n    idx_ng95 = idx_ng95 + (16 + -15)\nprint(c // (39 + -37))\n", "id": "ConstantUnfoldding_sample_from_codeforces_131_B_to_50", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_7mfh = (37 + -37)\nlist_kp9v = range(n)\nwhile idx_7mfh < len(list_kp9v):\n    i = list_kp9v[idx_7mfh]\n    if not lst[i] not in l:\n        l[lst[i]] += (17 + -16)\n    else:\n        l[lst[i]] = (12 + -11)\n    idx_7mfh = idx_7mfh + (88 + -87)\nres = (20 + -20)\nidx_4038 = (94 + -94)\nlist_9fv8 = range(n)\nwhile idx_4038 < len(list_9fv8):\n    i = list_9fv8[idx_4038]\n    if not l[lst[i]] > (6 + -5):\n        res += n - i - (13 + -12)\n    else:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= (3 + -2)\n    idx_4038 = idx_4038 + (2 + -1)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_609_B_to_51", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit((13 + -3) ** (33 + -26))\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open((2 + -2)).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_wdu3 = (93 + -93)\n    list_5z0g = list(enumerate(it))\n    while idx_wdu3 < len(list_5z0g):\n        i, e = list_5z0g[idx_wdu3]\n        if not l <= i < r:\n            if l >= r:\n                break\n        else:\n            yield e\n        idx_wdu3 = idx_wdu3 + (6 + -5)\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = (37 + 999999999999999999999962)\nMOD = (32 + -22) ** (85 + -76) + (100 + -93)\nn = int(input())\nif n == (42 + -41):\n    print((91 + -91))\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % (80 + -78) == (33 + -33):\n        a.append((5 + -3))\n        n //= (40 + -38)\n    f = (26 + -23)\n    while f * f <= n:\n        if not n % f == (56 + -56):\n            f += (73 + -71)\n        else:\n            a.append(f)\n            n //= f\n    if n != (67 + -66):\n        a.append(n)\n    return a\n    if len(arr) == (90 + -90):\n        arr.append((n, (83 + -82)))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = (73 + -73)\nidx_ow09 = (65 + -65)\nlist_8dap = list(fac.items())\nwhile idx_ow09 < len(list_8dap):\n    p, e = list_8dap[idx_ow09]\n    x = e\n    idx_2wya = (56 + -56)\n    list_erw8 = range((81 + -80), (67 + 99999932))\n    while idx_2wya < len(list_erw8):\n        i = list_erw8[idx_2wya]\n        if not x >= i:\n            break\n        else:\n            x -= i\n            ans += (16 + -15)\n        idx_2wya = idx_2wya + (81 + -80)\n    idx_ow09 = idx_ow09 + (67 + -66)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_D_to_52", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_wnb1 = (51 + -51)\nlist_vern = range((40 + -40), n)\nwhile idx_wnb1 < len(list_vern):\n    i = list_vern[idx_wnb1]\n    if not i % (29 + -27) == (95 + -95):\n        b.append(x[i])\n    else:\n        a.append(x[i])\n    idx_wnb1 = idx_wnb1 + (88 + -87)\ncnta = [(77 + -77)] * ((96 + 99906) + (24 + -23))\ncntb = [(37 + -37)] * ((9 + 99993) + (79 + -78))\nvala = (82 + -82)\nvala1 = (69 + -69)\nmaxCnta = (27 + -27)\nmaxCnta1 = (62 + -62)\nidx_h4as = (72 + -72)\nlist_xjcd = a\nwhile idx_h4as < len(list_xjcd):\n    i = list_xjcd[idx_h4as]\n    cnta[i] += (87 + -86)\n    idx_h4as = idx_h4as + (53 + -52)\nidx_uxo0 = (18 + -18)\nlist_fkl0 = a\nwhile idx_uxo0 < len(list_fkl0):\n    i = list_fkl0[idx_uxo0]\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\n    idx_uxo0 = idx_uxo0 + (46 + -45)\nidx_3y5g = (36 + -36)\nlist_m1ut = a\nwhile idx_3y5g < len(list_m1ut):\n    i = list_m1ut[idx_3y5g]\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_3y5g = idx_3y5g + (8 + -7)\nvalb = (15 + -15)\nvalb1 = (8 + -8)\nmaxCntb = (28 + -28)\nmaxCntb1 = (31 + -31)\nidx_3goq = (33 + -33)\nlist_cndm = b\nwhile idx_3goq < len(list_cndm):\n    i = list_cndm[idx_3goq]\n    cntb[i] += (33 + -32)\n    idx_3goq = idx_3goq + (19 + -18)\nidx_jray = (95 + -95)\nlist_myj2 = b\nwhile idx_jray < len(list_myj2):\n    i = list_myj2[idx_jray]\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\n    idx_jray = idx_jray + (90 + -89)\nidx_9g0s = (61 + -61)\nlist_5d2q = b\nwhile idx_9g0s < len(list_5d2q):\n    i = list_5d2q[idx_9g0s]\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_9g0s = idx_9g0s + (7 + -6)\nif not valb != vala:\n    resa = (46 + -46)\n    resb = (20 + -20)\n    resa1 = (91 + -91)\n    resb1 = (49 + -49)\n    idx_h83n = (80 + -80)\n    list_okps = a\n    while idx_h83n < len(list_okps):\n        i = list_okps[idx_h83n]\n        if i != vala:\n            resa += (81 + -80)\n        if i != vala1:\n            resa1 += (50 + -49)\n        idx_h83n = idx_h83n + (51 + -50)\n    idx_f1lc = (97 + -97)\n    list_qs4h = b\n    while idx_f1lc < len(list_qs4h):\n        i = list_qs4h[idx_f1lc]\n        if i != valb:\n            resb += (95 + -94)\n        if i != valb1:\n            resb1 += (88 + -87)\n        idx_f1lc = idx_f1lc + (78 + -77)\n    print(min(resa + resb1, resa1 + resb))\nelse:\n    res = (2 + -2)\n    idx_l4rb = (4 + -4)\n    list_13tm = a\n    while idx_l4rb < len(list_13tm):\n        i = list_13tm[idx_l4rb]\n        if i != vala:\n            res += (63 + -62)\n        idx_l4rb = idx_l4rb + (91 + -90)\n    idx_6ted = (42 + -42)\n    list_bxhq = b\n    while idx_6ted < len(list_bxhq):\n        i = list_bxhq[idx_6ted]\n        if i != valb:\n            res += (75 + -74)\n        idx_6ted = idx_6ted + (83 + -82)\n    print(res)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC111_C_to_53", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_xms7 = (72 + -72)\nlist_wkq1 = range(N)\nwhile idx_xms7 < len(list_wkq1):\n    i = list_wkq1[idx_xms7]\n    if lst[i] == (4 + -4):\n        K -= (84 + -83)\n    if not lst[i] > (53 + -53):\n        if lst[i] < (52 + -52):\n            lst_m += [lst[i]]\n    else:\n        lst_p += [lst[i]]\n    idx_xms7 = idx_xms7 + (74 + -73)\np = (80 + -80)\nm = (60 + -60)\nx, y = (50 + -50), len(lst_m) - (47 + -46)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = (96 + -86) ** (79 + -70)\n    idx_3h79 = (58 + -58)\n    list_n31z = range((1 + -1), k + (2 + -1))\n    while idx_3h79 < len(list_n31z):\n        j = list_n31z[idx_3h79]\n        if not j > lastx or k - j > lasty:\n            if j == (52 + -52):\n                p = (69 + -69)\n            else:\n                p = lst_p[j - (69 + -68)]\n            if k - j == (52 + -52):\n                m = (17 + -17)\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, (26 + -24) * p + abs(m), p + (62 + -60) * abs(m))\n        else:\n            pass\n        idx_3h79 = idx_3h79 + (81 + -80)\n    return ans\n\n\nprint(check(K))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_C_to_54", "old_id": "atcoder_ABC107_C"}
{"code": "mod = (3 + 7) ** (73 + -64) + (27 + -20)\nl = input()\nn = len(l)\ndp = [[(75 + -75)] * (93 + -91) for _ in range(n + (45 + -44))]\ndp[(67 + -67)][(94 + -94)] = (34 + -33)\nidx_m8l5 = (56 + -56)\nlist_fgs0 = list(enumerate(l))\nwhile idx_m8l5 < len(list_fgs0):\n    i, c = list_fgs0[idx_m8l5]\n    if not c == '0':\n        dp[i + (23 + -22)][(49 + -49)] += dp[i][(12 + -12)] * (49 + -47)\n        dp[i + (17 + -16)][(87 + -86)] += dp[i][(71 + -71)]\n        dp[i + (37 + -36)][(33 + -32)] += dp[i][(44 + -43)] * (98 + -95)\n    else:\n        dp[i + (39 + -38)][(17 + -17)] += dp[i][(44 + -44)]\n        dp[i + (23 + -22)][(77 + -76)] += dp[i][(79 + -78)] * (89 + -86)\n    dp[i + (46 + -45)][(34 + -34)] %= mod\n    dp[i + (100 + -99)][(64 + -63)] %= mod\n    idx_m8l5 = idx_m8l5 + (4 + -3)\nprint((dp[n][(51 + -51)] + dp[n][(59 + -58)]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC129_E_to_55", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_7e3m = (78 + -78)\nlist_xzfb = l\nwhile idx_7e3m < len(list_xzfb):\n    i = list_xzfb[idx_7e3m]\n    if not i % m == (96 + -96):\n        l2.append(i // m + (25 + -24))\n    else:\n        l2.append(i // m)\n    idx_7e3m = idx_7e3m + (89 + -88)\nmx = max(l2)\nidx_4hb7 = (71 + -71)\nlist_jnm9 = range(n)\nwhile idx_4hb7 < len(list_jnm9):\n    i = list_jnm9[idx_4hb7]\n    if l2[i] == mx:\n        ind = i\n    idx_4hb7 = idx_4hb7 + (18 + -17)\nprint(ind + (82 + -81))\n", "id": "ConstantUnfoldding_sample_from_codeforces_450_A_to_56", "old_id": "codeforces_450_A"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + (8 + -7), - (79 + -78)\nidx_f9yc = (37 + -37)\nlist_wpev = range(N)\nwhile idx_f9yc < len(list_wpev):\n    i = list_wpev[idx_f9yc]\n    if (i + (62 + -61) != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_f9yc = idx_f9yc + (19 + -18)\nif not (mx == - (25 + -24)):\n    A = A[: mn] + A[mn: (mx + (72 + -71))][:: - (24 + -23)] + A[(mx + (24 + -23)):]\n    if (sorted(A) == A):\n        print(mn + (74 + -73), mx + (61 + -60))\n    else:\n        print('0 0')\nelse:\n    print('0 0')\n", "id": "ConstantUnfoldding_sample_from_codeforces_56_B_to_57", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = (12 + -12)\ncl = (99 + -99)\nidx_ka8z = (60 + -60)\nlist_wcph = txt\nwhile idx_ka8z < len(list_wcph):\n    z = list_wcph[idx_ka8z]\n    if not z.islower():\n        cu = cu + (80 + -79)\n    else:\n        cl = cl + (41 + -40)\n    idx_ka8z = idx_ka8z + (72 + -71)\nif not cu > cl:\n    out = txt.lower()\nelse:\n    out = txt.upper()\nprint(out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_59_A_to_58", "old_id": "codeforces_59_A"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = (4 + -4)\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nidx_euh3 = (53 + -53)\nlist_n2qm = range(n)\nwhile idx_euh3 < len(list_n2qm):\n    i = list_n2qm[idx_euh3]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: (13 + -13)})\n    if not task.time > finish_time and remaining.empty():\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - (89 + -88)\n    else:\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    idx_euh3 = idx_euh3 + (57 + -56)\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_zptm = (51 + -51)\nlist_fm9q = result\nwhile idx_zptm < len(list_fm9q):\n    key = list_fm9q[idx_zptm]\n    print(result.get(key))\n    idx_zptm = idx_zptm + (92 + -91)\n", "id": "ConstantUnfoldding_sample_from_codeforces_644_B_to_59", "old_id": "codeforces_644_B"}
{"code": "import sys\ninput = sys.stdin.readline\nN = (65 + 303)\nm = [(82 + -82)] * N\nf = [(25 + -25)] * N\nidx_5zmf = (40 + -40)\nlist_361e = range(int(input()))\nwhile idx_5zmf < len(list_361e):\n    i = list_361e[idx_5zmf]\n    x, a, b = input()[: - (75 + -74)].split()\n    a = int(a)\n    b = int(b) + (80 + -79)\n    if not x == 'M':\n        f[a] += (59 + -57)\n        f[b] -= (81 + -79)\n    else:\n        m[a] += (23 + -21)\n        m[b] -= (65 + -63)\n    idx_5zmf = idx_5zmf + (28 + -27)\na, b, c = (90 + -90), (14 + -14), (30 + -30)\nidx_2wk3 = (35 + -35)\nlist_94l2 = range(N)\nwhile idx_2wk3 < len(list_94l2):\n    i = list_94l2[idx_2wk3]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\n    idx_2wk3 = idx_2wk3 + (56 + -55)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_B_to_60", "old_id": "codeforces_629_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = (49 + -49)\nidx_dm71 = (58 + -58)\nlist_70hm = pre + (13 + -12)\nwhile idx_dm71 < len(list_70hm):\n    i = list_70hm[idx_dm71]\n    idx_pdbj = (6 + -6)\n    list_5ec6 = itertools.combinations(pre, i)\n    while idx_pdbj < len(list_5ec6):\n        j = list_5ec6[idx_pdbj]\n        l.append(list(j))\n        idx_pdbj = idx_pdbj + (100 + -99)\n    idx_dm71 = idx_dm71 + (100 + -99)\nidx_71t9 = (13 + -13)\nlist_2hof = range((95 + -94), m + (60 + -59))\nwhile idx_71t9 < len(list_2hof):\n    i = list_2hof[idx_71t9]\n    idx_bxsi = (44 + -44)\n    list_oink = list(enumerate(l))\n    while idx_bxsi < len(list_oink):\n        j, k = list_oink[idx_bxsi]\n        ca = (69 + -69)\n        idx_a57c = (34 + -34)\n        list_cowe = k\n        while idx_a57c < len(list_cowe):\n            ii = list_cowe[idx_a57c]\n            ca += c[ii, i]\n            idx_a57c = idx_a57c + (33 + -32)\n        if not ca < x:\n            pass\n        else:\n            rem.insert((16 + -16), j)\n        idx_bxsi = idx_bxsi + (21 + -20)\n    if len(rem) > (12 + -12):\n        idx_5pq0 = (87 + -87)\n        list_in3t = rem\n        while idx_5pq0 < len(list_in3t):\n            j = list_in3t[idx_5pq0]\n            l.pop(j)\n            idx_5pq0 = idx_5pq0 + (58 + -57)\n        rem = []\n    if len(l) == (72 + -72):\n        print(- (43 + -42))\n        break\n    idx_71t9 = idx_71t9 + (60 + -59)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_C_to_61", "old_id": "atcoder_ABC167_C"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = (5 + -5)\nl, r = map(int, input().split())\nidx_nvmy = (20 + -20)\nlist_bt0g = range((23 + -22), n)\nwhile idx_nvmy < len(list_bt0g):\n    i = list_bt0g[idx_nvmy]\n    li, ri = map(int, input().split())\n    if not li <= l and r <= ri:\n        if li < l or r < ri:\n            id = n\n    else:\n        id = i\n    l = min(l, li)\n    r = max(r, ri)\n    idx_nvmy = idx_nvmy + (89 + -88)\nprint(- (66 + -65) if id == n else id + (61 + -60))\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_B_to_62", "old_id": "codeforces_242_B"}
{"code": "a, b = map(int, input().split())\nc = (60 + -60)\nidx_k3m7 = (79 + -79)\nlist_pz31 = range((57 + -55))\nwhile idx_k3m7 < len(list_pz31):\n    i = list_pz31[idx_k3m7]\n    c += max(a, b)\n    if not a >= b:\n        b -= (31 + -30)\n    else:\n        a -= (59 + -58)\n    idx_k3m7 = idx_k3m7 + (62 + -61)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC124_A_to_63", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif not len(ip) != (28 + -27):\n    st = ip\nelse:\n    if ip[(41 + -41)] == \"9\":\n        st = \"9\"\n        ip = ip[(10 + -9):]\n    idx_m0fc = (51 + -51)\n    list_6tnm = ip\n    while idx_m0fc < len(list_6tnm):\n        i = list_6tnm[idx_m0fc]\n        if int(i) > (21 + -17):\n            n = (5 + 4) - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_m0fc = idx_m0fc + (11 + -10)\nprint(int(st))\n", "id": "ConstantUnfoldding_sample_from_codeforces_514_A_to_64", "old_id": "codeforces_514_A"}
{"code": "import heapq\nq = int(input())\nans = [(64 + -64), (86 + -86)]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = (32 + -32)\nsum_p1 = (82 + -82)\nsum_p2 = (14 + -14)\nidx_8tmg = (99 + -99)\nlist_3s9x = range(q)\nwhile idx_8tmg < len(list_3s9x):\n    _ = list_3s9x[idx_8tmg]\n    ql = list(map(int, input().split()))\n    if not ql[(38 + -38)] == (40 + -38):\n        sum_b += ql[(25 + -23)]\n        if len(p1) == (4 + -4):\n            heapq.heappush(p1, ql[(98 + -97)])\n            sum_p1 += ql[(17 + -16)]\n        elif p1[(24 + -24)] <= ql[(88 + -87)]:\n            heapq.heappush(p1, ql[(7 + -6)])\n            sum_p1 += ql[(99 + -98)]\n        else:\n            heapq.heappush(p2, - ql[(95 + -94)])\n            sum_p2 += ql[(69 + -68)]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - (13 + -12) > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    else:\n        if len(p1) == len(p2):\n            print(- p2[(22 + -22)], sum_p1 - len(p1) * - p2[(86 + -86)] +\n                  len(p2) * - p2[(90 + -90)] - sum_p2 + sum_b)\n        else:\n            print(p1[(75 + -75)], sum_p1 - len(p1) * p1[(50 + -50)] +\n                  len(p2) * p1[(60 + -60)] - sum_p2 + sum_b)\n    idx_8tmg = idx_8tmg + (70 + -69)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_F_to_65", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[(45 + -45)] for piece in pieces if piece[(59 + -58)] == 'B')\n    idx_9dy7 = (11 + -11)\n    list_01r6 = pieces\n    while idx_9dy7 < len(list_01r6):\n        piece = list_01r6[idx_9dy7]\n        if not piece[(59 + -58)] == 'A':\n            pScore -= piece[(72 + -72)]\n        else:\n            pScore += piece[(36 + -36)]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        idx_9dy7 = idx_9dy7 + (62 + -61)\n    idx_3ga5 = (98 + -98)\n    list_z1n3 = range(len(pieces) - (12 + -11), - (29 + -28), - (29 + -28))\n    while idx_3ga5 < len(list_z1n3):\n        i = list_z1n3[idx_3ga5]\n        if not pieces[i][(6 + -5)] == 'A':\n            sScore -= pieces[i][(43 + -43)]\n        else:\n            sScore += pieces[i][(37 + -37)]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        idx_3ga5 = idx_3ga5 + (78 + -77)\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_632_B_to_66", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= (5 + -5) and j >= (63 + -63) and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / (19 + -17)\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - (42 + -38) * a * c)) / (11 + -9) * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_keab = (14 + -14)\n    list_eji6 = s\n    while idx_keab < len(list_eji6):\n        i = list_eji6[idx_keab]\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n        idx_keab = idx_keab + (84 + -83)\n    return r\n\n\ndef solve():\n    l = []\n    idx_dqub = (53 + -53)\n    list_83ft = range((11 + -8))\n    while idx_dqub < len(list_83ft):\n        i = list_83ft[idx_dqub]\n        l.append(f(input()))\n        idx_dqub = idx_dqub + (56 + -55)\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_jgne = (72 + -72)\n    list_g1ko = t\n    while idx_jgne < len(list_g1ko):\n        i = list_g1ko[idx_jgne]\n        l.append(\"\".join(i))\n        idx_jgne = idx_jgne + (93 + -92)\n    idx_my2e = (68 + -68)\n    list_jvu1 = range(inp())\n    while idx_my2e < len(list_jvu1):\n        i = list_jvu1[idx_my2e]\n        if not f(instr()) in l:\n            print('WA')\n        else:\n            print('ACC')\n        idx_my2e = idx_my2e + (38 + -37)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_61_B_to_67", "old_id": "codeforces_61_B"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_clmz = (76 + -76)\n    list_42k8 = range(n)\n    while idx_clmz < len(list_42k8):\n        i = list_42k8[idx_clmz]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_clmz = idx_clmz + (13 + -12)\n    low.sort()\n    high.sort()\n    if not n % (5 + -3):\n        hh = (high[(n) // (25 + -23) - (7 + -6)] + high[(n) // (77 + -75)]) / (97 + -95)\n        ll = (low[(n) // (2 + 0) - (57 + -56)] + low[(n) // (23 + -21)]) / (51 + -49)\n        print(int((hh - ll) * (83 + -81)) + (85 + -84))\n    else:\n        print(high[(n + (33 + -32)) // (1 + 1) - (52 + -51)] - low[(n + (9 + -8)) // (32 + -30) - (95 + -94)] + (99 + -98))\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_E_to_68", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [(68 + -68) for _ in range((61 + 999949))]\ndp = [(80 + -80) for _ in range((59 + 999951))]\nidx_mf6p = (84 + -84)\nlist_4kes = range(n)\nwhile idx_mf6p < len(list_4kes):\n    i = list_4kes[idx_mf6p]\n    a, b = map(int, input().split())\n    l[a] = b\n    idx_mf6p = idx_mf6p + (4 + -3)\nif l[(61 + -61)] > (93 + -93):\n    dp[(68 + -68)] = (59 + -58)\nmx = (30 + -30)\nidx_m37f = (27 + -27)\nlist_rzk4 = range((7 + -6), (97 + 999913))\nwhile idx_m37f < len(list_rzk4):\n    i = list_rzk4[idx_m37f]\n    if not (l[i] == (16 + -16)):\n        if (l[i] >= i):\n            dp[i] = (87 + -86)\n        else:\n            dp[i] = dp[i - l[i] - (7 + -6)] + (97 + -96)\n    else:\n        dp[i] = dp[i - (17 + -16)]\n    if (dp[i] > mx):\n        mx = dp[i]\n    idx_m37f = idx_m37f + (35 + -34)\nprint(n - mx)\n", "id": "ConstantUnfoldding_sample_from_codeforces_607_A_to_69", "old_id": "codeforces_607_A"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = (93 + -93)\nVAL = (94 + -93)\nN, T = [int(a) for a in input().split()]\ntime_value = [(- (23 + -22), - (30 + -29))] + [None] * (N)\nidx_lkev = (34 + -34)\nlist_ej01 = range((51 + -50), N + (64 + -63))\nwhile idx_lkev < len(list_ej01):\n    i = list_ej01[idx_lkev]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_lkev = idx_lkev + (38 + -37)\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- (8 + -7)] * T for _ in range(N + (23 + -22))]\nidx_hu10 = (13 + -13)\nlist_o2fu = range((70 + -70), T)\nwhile idx_hu10 < len(list_o2fu):\n    t = list_o2fu[idx_hu10]\n    dp[(11 + -11)][t] = (3 + -3)\n    idx_hu10 = idx_hu10 + (91 + -90)\nidx_a2w5 = (21 + -21)\nlist_32ma = range((55 + -54), N + (62 + -61))\nwhile idx_a2w5 < len(list_32ma):\n    n = list_32ma[idx_a2w5]\n    dp[n][(9 + -9)] = (32 + -32)\n    idx_gfxv = (82 + -82)\n    list_6i9q = range((48 + -47), T)\n    while idx_gfxv < len(list_6i9q):\n        t = list_6i9q[idx_gfxv]\n        if not time_value[n][TIME] > t:\n            dp[n][t] = max(dp[n - (70 + -69)][t], time_value[n][VAL] +\n                           dp[n - (34 + -33)][t - time_value[n][TIME]])\n        else:\n            dp[n][t] = dp[n - (95 + -94)][t]\n        idx_gfxv = idx_gfxv + (83 + -82)\n    idx_a2w5 = idx_a2w5 + (73 + -72)\nval_acum = time_value[N][VAL]\nt = T - (34 + -33)\nmax_val = val_acum + dp[N - (60 + -59)][t]\nidx_3qnr = (80 + -80)\nlist_5oka = range(N - (71 + -70), (41 + -41), - (90 + -89))\nwhile idx_3qnr < len(list_5oka):\n    n = list_5oka[idx_3qnr]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + (35 + -34)][TIME]\n    if not t < (8 + -8):\n        max_val = max(max_val, val_acum + dp[n - (80 + -79)][t])\n    else:\n        break\n    idx_3qnr = idx_3qnr + (85 + -84)\nprint(max_val)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_E_to_70", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_rh6c = (62 + -62)\n    list_a3dl = range(H)\n    while idx_rh6c < len(list_a3dl):\n        i = list_a3dl[idx_rh6c]\n        idx_8hxg = (31 + -31)\n        list_cu0p = range(W)\n        while idx_8hxg < len(list_cu0p):\n            j = list_cu0p[idx_8hxg]\n            if not i < B:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            else:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            idx_8hxg = idx_8hxg + (90 + -89)\n        idx_rh6c = idx_rh6c + (23 + -22)\n    idx_hetb = (86 + -86)\n    list_7yot = range(H)\n    while idx_hetb < len(list_7yot):\n        i = list_7yot[idx_hetb]\n        print(''.join(answer[i]))\n        idx_hetb = idx_hetb + (65 + -64)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_en7w = (41 + -41)\n        list_87cz = sys.stdin\n        while idx_en7w < len(list_87cz):\n            line = list_87cz[idx_en7w]\n            idx_rupc = (27 + -27)\n            list_pqvn = line.split()\n            while idx_rupc < len(list_pqvn):\n                word = list_pqvn[idx_rupc]\n                yield word\n                idx_rupc = idx_rupc + (48 + -47)\n            idx_en7w = idx_en7w + (98 + -97)\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC038_A_to_71", "old_id": "atcoder_AGC038_A"}
