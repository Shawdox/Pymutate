{"code": "s = list(input())\nmods = [(13 + -13)]*(len(s))\ncountRemainder = [(54 + -54)] * (58 + 1961)\ncnt = (71 + -71)\n\n\nm = (67 + -66)\nmod = (38 + -38)\nidx_7i4c = (12 + -12)\nlist_t9ig = range(len(s))\nwhile idx_7i4c < len(list_t9ig):\n    i = list_t9ig[idx_7i4c]\n    mod += int(s[len(s) - i - (7 + -6)]) * m\n\n    mod %= (55 + 1964)\n    m *= (20 + -10)\n    m %= (45 + 1974)\n\n    countRemainder[mod] += (100 + -99)\n    idx_7i4c = idx_7i4c + (26 + -25)\n\ncountRemainder[(11 + -11)] += (59 + -58)\nidx_xia9 = (47 + -47)\nlist_35u9 = range((15 + 2004))\nwhile idx_xia9 < len(list_35u9):\n    i = list_35u9[idx_xia9]\n    cnt += int(countRemainder[i] * (countRemainder[i] - (76 + -75)) / (78 + -76))\n    idx_xia9 = idx_xia9 + (43 + -42)\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s752993784_to_0", "old_id": "s752993784"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_u3f6 = (85 + -85)\nlist_bzhg = range(m)\nwhile idx_u3f6 < len(list_bzhg):\n    i = list_bzhg[idx_u3f6]\n    p, x = map(int, input().split())\n    s = (13 + -13)\n    idx_sar7 = (27 + -27)\n    list_mre4 = range(len(t))\n    while idx_sar7 < len(list_mre4):\n        j = list_mre4[idx_sar7]\n        if j == p-(78 + -77):\n            s += x\n        else:\n            s += t[j]\n        idx_sar7 = idx_sar7 + (41 + -40)\n    print(s)\n    idx_u3f6 = idx_u3f6 + (21 + -20)\n", "id": "ConstantUnfoldding_sample_from_s609392609_to_1", "old_id": "s609392609"}
{"code": "import sys\nsys.setrecursionlimit((21 + 99979))\n\n\ndef dfs(i):\n    idx_kdhc = (43 + -43)\n    list_8vcm = V.get(i, [])\n    while idx_kdhc < len(list_8vcm):\n        v, w = list_8vcm[idx_kdhc]\n        if (w % (99 + -97)) == (11 + -11):\n            if color[v] == -(27 + -26):\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -(96 + -95):\n                color[v] = (38 + -38) if color[i] else (72 + -71)\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n        idx_kdhc = idx_kdhc + (75 + -74)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    idx_mk9j = (9 + -9)\n    list_h08t = range((63 + -62), n)\n    while idx_mk9j < len(list_h08t):\n        i = list_h08t[idx_mk9j]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_mk9j = idx_mk9j + (73 + -72)\n    idx_w2ri = (60 + -60)\n    list_onf7 = range((65 + -64), n+(57 + -56))\n    while idx_w2ri < len(list_onf7):\n        i = list_onf7[idx_w2ri]\n        color[i] = -(50 + -49)\n        idx_w2ri = idx_w2ri + (47 + -46)\n\n    while True:\n        i = (67 + -67)\n        idx_db2s = (99 + -99)\n        list_speq = range((82 + -81), n+(68 + -67))\n        while idx_db2s < len(list_speq):\n            j = list_speq[idx_db2s]\n            if color[j] == -(61 + -60):\n                i = j\n                color[i] = (23 + -23)\n                break\n            idx_db2s = idx_db2s + (87 + -86)\n        if i == (19 + -19):\n            idx_nc21 = (1 + -1)\n            list_52el = range((23 + -22), n+(40 + -39))\n            while idx_nc21 < len(list_52el):\n                j = list_52el[idx_nc21]\n                print(color[j])\n                idx_nc21 = idx_nc21 + (23 + -22)\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "ConstantUnfoldding_sample_from_s908812767_to_2", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < (84 + -58):\n    idx_odxe = (82 + -82)\n    list_w7jl = range((20 + 6))\n    while idx_odxe < len(list_w7jl):\n        i = list_w7jl[idx_odxe]\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_odxe = idx_odxe + (27 + -26)\nelse:\n    idx_qsni = (100 + -100)\n    list_g5at = reversed(range((18 + -17), (89 + -63)))\n    while idx_qsni < len(list_g5at):\n        i = list_g5at[idx_qsni]\n        if s[i-(32 + -31)] < s[i]:\n            s1 = s[(59 + -59):i-(18 + -17)]\n            idx_qj8y = (11 + -11)\n            list_3uno = range((63 + -37))\n            while idx_qj8y < len(list_3uno):\n                j = list_3uno[idx_qj8y]\n                c = chr(ord(\"a\")+j)\n                if c > s[i-(65 + -64)] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_qj8y = idx_qj8y + (71 + -70)\n        idx_qsni = idx_qsni + (50 + -49)\n    print(-(51 + -50))\n", "id": "ConstantUnfoldding_sample_from_s504709360_to_3", "old_id": "s504709360"}
{"code": "N = int(input())\nA = []\nidx_bio6 = (79 + -79)\nlist_yc49 = range((82 + -80))\nwhile idx_bio6 < len(list_yc49):\n    _ = list_yc49[idx_bio6]\n    s = list(map(int, input().split()))\n    A.append(s)\n    idx_bio6 = idx_bio6 + (96 + -95)\n\n\nans = []\n\ncount = (55 + -55)\nidx_8vgp = (70 + -70)\nlist_gs2m = range(N)\nwhile idx_8vgp < len(list_gs2m):\n    i = list_gs2m[idx_8vgp]\n    baselis = A[(83 + -83)]\n    groundlis = A[(65 + -64)]\n    count = (88 + -88)\n    count = count + sum(baselis[(88 + -88):i+(56 + -55)]) + sum(groundlis[i:N+(61 + -60)])\n    ans.append(count)\n    idx_8vgp = idx_8vgp + (36 + -35)\n\nprint(max(ans))\n", "id": "ConstantUnfoldding_sample_from_s170274782_to_4", "old_id": "s170274782"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = (62 + -52) ** (17 + 1)\nidx_6w2z = (86 + -86)\nlist_p6hl = range((85 + -84), int(n ** ((26 + -25) / (49 + -47))) + (5 + -3))\nwhile idx_6w2z < len(list_p6hl):\n    i = list_p6hl[idx_6w2z]\n    if n % i != (36 + -36):\n        continue\n    j = n // i\n    ans = min(ans, i + j - (79 + -77))\n    idx_6w2z = idx_6w2z + (18 + -17)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s662673721_to_5", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = (57 + -47)**(28 + -19) + (20 + -13)\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nidx_j2id = (50 + -50)\nlist_01bz = range((57 + -56), K+(81 + -80))\nwhile idx_j2id < len(list_01bz):\n    i = list_01bz[idx_j2id]\n    if N - K + (87 + -86) < i:\n        ans = (8 + -8)\n    else:\n        ans = fact(R+(45 + -44), i)*fact(K-(91 + -90), i-(29 + -28))\n    print(int(ans) % mod)\n    idx_j2id = idx_j2id + (86 + -85)\n", "id": "ConstantUnfoldding_sample_from_s790754864_to_6", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = (20 + -20)\n    idx_mr52 = (37 + -37)\n    list_sy2g = zip(a, b)\n    while idx_mr52 < len(list_sy2g):\n        i, j = list_sy2g[idx_mr52]\n        s += i != j\n        idx_mr52 = idx_mr52 + (76 + -75)\n    return s\n\n\nans = (100 + -90)**(88 + -82)\nidx_j09q = (73 + -73)\nlist_q7gu = range(len(s))\nwhile idx_j09q < len(list_q7gu):\n    i = list_q7gu[idx_j09q]\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\n    idx_j09q = idx_j09q + (100 + -99)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s636719275_to_7", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nidx_4qgs = (63 + -63)\nlist_b0gx = range((43 + -42), N+(20 + -19))\nwhile idx_4qgs < len(list_b0gx):\n    i = list_b0gx[idx_4qgs]\n    aji.append(L+i-(77 + -76))\n    idx_4qgs = idx_4qgs + (82 + -81)\nif min(aji) >= (93 + -93):\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= (9 + -9):\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "id": "ConstantUnfoldding_sample_from_s240532461_to_8", "old_id": "s240532461"}
{"code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nidx_b5i0 = (85 + -85)\nlist_if1y = range(min(x+y, a+b, c))\nwhile idx_b5i0 < len(list_if1y):\n    i = list_if1y[idx_b5i0]\n    if pq[i] < r[i]:\n        pq[i] = r[i]\n    idx_b5i0 = idx_b5i0 + (80 + -79)\nprint(sum(pq))\n", "id": "ConstantUnfoldding_sample_from_s828550015_to_9", "old_id": "s828550015"}
{"code": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-(51 + -50))**i) for i in range(n)]) / (86 + -84))\n\nresult = str(m1)\n\nm = [None] * n\nm[(10 + -10)] = m1\nidx_byd1 = (10 + -10)\nlist_z6o7 = range((1 + 0), n)\nwhile idx_byd1 < len(list_z6o7):\n    i = list_z6o7[idx_byd1]\n    m[i] = a[i-(4 + -3)] - m[i-(86 + -85)]\n    idx_byd1 = idx_byd1 + (10 + -9)\n\nprint(' '.join([str(x*(12 + -10)) for x in m]))\n", "id": "ConstantUnfoldding_sample_from_s225615697_to_10", "old_id": "s225615697"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nidx_fscw = (17 + -17)\nlist_fpc4 = A[:M]\nwhile idx_fscw < len(list_fpc4):\n    a = list_fpc4[idx_fscw]\n    if a/S - (71 + -70)/((33 + -29)*M) < (8 + -8):\n        print('No')\n        break\n    idx_fscw = idx_fscw + (27 + -26)\n", "id": "ConstantUnfoldding_sample_from_s846046431_to_11", "old_id": "s846046431"}
{"code": "import heapq\nconst = (56 + -56)\nleft = []\nright = []\n\nq = int(input())\ncnt = (44 + -44)\nleft_sum = (88 + -88)\nright_sum = (36 + -36)\nidx_tf95 = (85 + -85)\nlist_cetw = range(q)\nwhile idx_tf95 < len(list_cetw):\n    _ = list_cetw[idx_tf95]\n    t = list(map(int, input().split()))\n    if t[(46 + -46)] == (26 + -25):\n\n        a, b = t[(88 + -87):]\n        const += b\n        if cnt % (21 + -19) == (53 + -53):\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += (11 + -10)\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += (46 + -45)\n\n    else:\n        tmp = -left[(15 + -15)]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % (55 + -53)))\n    idx_tf95 = idx_tf95 + (58 + -57)\n", "id": "ConstantUnfoldding_sample_from_s016605598_to_12", "old_id": "s016605598"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nidx_puon = (43 + -43)\nlist_wuk8 = range(Q)\nwhile idx_puon < len(list_wuk8):\n    _ = list_wuk8[idx_puon]\n    Q_groups.append([*LI()])\n    idx_puon = idx_puon + (65 + -64)\n\nmax_score = (14 + -14)\nidx_zmik = (2 + -2)\nlist_pkfq = combinations_with_replacement(range((85 + -84), M + (8 + -7)), r=N)\nwhile idx_zmik < len(list_pkfq):\n    p = list_pkfq[idx_zmik]\n    temp_score = (19 + -19)\n    idx_5qoj = (53 + -53)\n    list_t9ua = Q_groups\n    while idx_5qoj < len(list_t9ua):\n        q = list_t9ua[idx_5qoj]\n        if p[q[(99 + -98)] - (77 + -76)] - p[q[(92 + -92)] - (28 + -27)] == q[(26 + -24)]:\n            temp_score += q[(9 + -6)]\n        idx_5qoj = idx_5qoj + (86 + -85)\n    max_score = max(max_score, temp_score)\n    idx_zmik = idx_zmik + (21 + -20)\n\nprint(max_score)\n", "id": "ConstantUnfoldding_sample_from_s269975433_to_13", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nidx_9hma = (59 + -59)\nlist_4ak2 = range(len(strn))\nwhile idx_9hma < len(list_4ak2):\n    i = list_4ak2[idx_9hma]\n    if i == (66 + -66):\n        idx_nkc3 = (4 + -4)\n        list_0euy = shichigolist\n        while idx_nkc3 < len(list_0euy):\n            j = list_0euy[idx_nkc3]\n            shichigo[i].append(j)\n            idx_nkc3 = idx_nkc3 + (42 + -41)\n    else:\n        idx_h840 = (90 + -90)\n        list_vfeo = shichigo[i-(80 + -79)]\n        while idx_h840 < len(list_vfeo):\n            j = list_vfeo[idx_h840]\n            idx_os73 = (38 + -38)\n            list_nzht = shichigolist\n            while idx_os73 < len(list_nzht):\n                k = list_nzht[idx_os73]\n                shichigo[i].append(j+k)\n                idx_os73 = idx_os73 + (85 + -84)\n            idx_h840 = idx_h840 + (40 + -39)\n    idx_9hma = idx_9hma + (20 + -19)\ntarget = len(strn)-(58 + -57)\nidx_a3cn = (7 + -7)\nlist_rsdb = range(len(strn))\nwhile idx_a3cn < len(list_rsdb):\n    i = list_rsdb[idx_a3cn]\n    idx_stqw = (6 + -6)\n    list_ptn8 = shichigo[i][:]\n    while idx_stqw < len(list_ptn8):\n        j = list_ptn8[idx_stqw]\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == (37 + -37) or j.count(\"5\") == (21 + -21) or j.count(\"7\") == (98 + -98):\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == (4 + -4) or j.count(\"5\") == (80 + -80) or j.count(\"7\") == (41 + -41):\n                shichigo[i].remove(j)\n        idx_stqw = idx_stqw + (4 + -3)\n    idx_a3cn = idx_a3cn + (19 + -18)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "ConstantUnfoldding_sample_from_s949655009_to_14", "old_id": "s949655009"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = [(33 + -33)] * N\nidx_b0o5 = (14 + -14)\nlist_mib3 = range(N - (30 + -29), -(33 + -32), -(84 + -83))\nwhile idx_b0o5 < len(list_mib3):\n    i = list_mib3[idx_b0o5]\n    tmp_sum = (74 + -74)\n    idx_hpmb = (64 + -64)\n    list_eu3t = range((i + (64 + -63)) * (25 + -23) - (10 + -9), N, i + (17 + -16))\n    while idx_hpmb < len(list_eu3t):\n        j = list_eu3t[idx_hpmb]\n        tmp_sum += B[j]\n        tmp_sum %= (37 + -35)\n        idx_hpmb = idx_hpmb + (4 + -3)\n    B[i] = tmp_sum ^ A[i]\n    idx_b0o5 = idx_b0o5 + (83 + -82)\n\nprint(sum(B))\nprint(*[i + (31 + -30) for i, b in enumerate(B) if b == (21 + -20)])\n", "id": "ConstantUnfoldding_sample_from_s103029464_to_15", "old_id": "s103029464"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nidx_iebu = (99 + -99)\nlist_l9ao = range(len(alphabets))\nwhile idx_iebu < len(list_l9ao):\n    i = list_l9ao[idx_iebu]\n    if alphabets[i] == s:\n        print(alphabets[i+(87 + -86)])\n    idx_iebu = idx_iebu + (23 + -22)\n", "id": "ConstantUnfoldding_sample_from_s961772658_to_16", "old_id": "s961772658"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - (32 + -31)\n    first = end - len(T) + (76 + -75)\n    while first >= (79 + -79):\n        t_i = (59 + -59)\n        idx_mza9 = (14 + -14)\n        list_f89q = range(first, end+(1 + 0))\n        while idx_mza9 < len(list_f89q):\n            s_i = list_f89q[idx_mza9]\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += (26 + -25)\n            idx_mza9 = idx_mza9 + (73 + -72)\n\n        first -= (47 + -46)\n        end -= (84 + -83)\n\n    else:\n        print('UNRESTORABLE')\n        exit((82 + -82))\n\n    ans = copy.deepcopy(S_d)\n    t_i = (22 + -22)\n    idx_yz89 = (35 + -35)\n    list_rwq9 = range(first, end+(13 + -12))\n    while idx_yz89 < len(list_rwq9):\n        i = list_rwq9[idx_yz89]\n        ans[i] = T[t_i]\n        t_i += (11 + -10)\n        idx_yz89 = idx_yz89 + (39 + -38)\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s826716211_to_17", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nidx_5zin = (30 + -30)\nlist_4rfl = range(N)\nwhile idx_5zin < len(list_4rfl):\n    d = list_4rfl[idx_5zin]\n    mat.append([int(x) for x in input().split()])\n    idx_5zin = idx_5zin + (49 + -48)\n\nc = (39 + -39)\nidx_eci0 = (70 + -70)\nlist_c157 = range(len(mat)-(18 + -17))\nwhile idx_eci0 < len(list_c157):\n    i = list_c157[idx_eci0]\n    idx_jouz = (39 + -39)\n    list_8bdu = range(i+(18 + -17), len(mat))\n    while idx_jouz < len(list_8bdu):\n        j = list_8bdu[idx_jouz]\n        dist = math.sqrt(sum([(x-y)**(39 + -37) for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist:\n            c += (69 + -68)\n        idx_jouz = idx_jouz + (16 + -15)\n    idx_eci0 = idx_eci0 + (39 + -38)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_s663509070_to_18", "old_id": "s663509070"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = (67 + -67)\nidx_n5kd = (13 + -13)\nlist_9kof = range((99 + -97)**(h+w))\nwhile idx_n5kd < len(list_9kof):\n    i = list_9kof[idx_n5kd]\n    b = bin(i)[(98 + -96):].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = (27 + -27)\n    idx_rm98 = (57 + -57)\n    list_yt8b = range(h)\n    while idx_rm98 < len(list_yt8b):\n        l = list_yt8b[idx_rm98]\n        idx_cnmt = (52 + -52)\n        list_19yr = range(w)\n        while idx_cnmt < len(list_19yr):\n            k = list_19yr[idx_cnmt]\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0':\n                ct += (82 + -81)\n            idx_cnmt = idx_cnmt + (97 + -96)\n        idx_rm98 = idx_rm98 + (13 + -12)\n    if ct == ka:\n        ans += (4 + -3)\n    idx_n5kd = idx_n5kd + (51 + -50)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s760938927_to_19", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nidx_gc25 = (62 + -62)\nlist_zsaj = qs\nwhile idx_gc25 < len(list_zsaj):\n    operation = list_zsaj[idx_gc25]\n    if operation[(83 + -83)] == '1':\n        n = not n\n    if operation[(1 + -1)] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = (38 + -37) if f != (89 + -88) else (61 + -59)\n        if f == (61 + -60):\n            left = c+left\n        elif f == (48 + -46):\n            right += c\n    idx_gc25 = idx_gc25 + (24 + -23)\ns = left+s+right\nprint(s[::-(27 + -26)] if n else s)\n", "id": "ConstantUnfoldding_sample_from_s621701371_to_20", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_7x2p = (62 + -62)\n    list_v756 = range((71 + -71), n)\n    while idx_7x2p < len(list_v756):\n        i = list_v756[idx_7x2p]\n        idx_zoei = (26 + -26)\n        list_ln4g = range(n-(67 + -66), i, -(95 + -94))\n        while idx_zoei < len(list_ln4g):\n            j = list_ln4g[idx_zoei]\n            if int(cards[j][(69 + -68)]) < int(cards[j-(83 + -82)][(29 + -28)]):\n                cards[j], cards[j-(18 + -17)] = cards[j-(56 + -55)], cards[j]\n            idx_zoei = idx_zoei + (90 + -89)\n        idx_7x2p = idx_7x2p + (96 + -95)\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_6d4h = (26 + -26)\n    list_web1 = range((92 + -92), n)\n    while idx_6d4h < len(list_web1):\n        i = list_web1[idx_6d4h]\n        mini = i\n        idx_yogl = (47 + -47)\n        list_3qzw = range(i, n)\n        while idx_yogl < len(list_3qzw):\n            j = list_3qzw[idx_yogl]\n            if int(cards[j][(63 + -62)]) < int(cards[mini][(30 + -29)]):\n                mini = j\n            idx_yogl = idx_yogl + (7 + -6)\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_6d4h = idx_6d4h + (32 + -31)\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "id": "ConstantUnfoldding_sample_from_s875904659_to_21", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit((15 + -15))\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    idx_2t3p = (47 + -47)\n    list_8vik = range(len(li))\n    while idx_2t3p < len(list_8vik):\n        i = list_8vik[idx_2t3p]\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_fvcr = (9 + -9)\n        list_o4w7 = sub_list\n        while idx_fvcr < len(list_o4w7):\n            sub = list_o4w7[idx_fvcr]\n            sub.appendleft(li[i])\n            idx_fvcr = idx_fvcr + (90 + -89)\n        k.extend(sub_list)\n        used.discard(i)\n        idx_2t3p = idx_2t3p + (6 + -5)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = (28 + -28), (56 + -55)\n    idx_qhsb = (43 + -43)\n    list_6yb7 = range(len(li)-(95 + -94), -(53 + -52), -(58 + -57))\n    while idx_qhsb < len(list_6yb7):\n        i = list_6yb7[idx_qhsb]\n        n += li[i] * base\n        base *= (57 + -47)\n        idx_qhsb = idx_qhsb + (59 + -58)\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range((85 + -83), n+(77 + -76))]\n    idx_5g6f = (96 + -96)\n    list_4xz3 = range(len(li))\n    while idx_5g6f < len(list_4xz3):\n        i = list_4xz3[idx_5g6f]\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -(79 + -78):\n            continue\n        idx_osfk = (84 + -84)\n        list_fu7l = range(i+(83 + -82), len(li))\n        while idx_osfk < len(list_fu7l):\n            j = list_fu7l[idx_osfk]\n            if li[j] % li[i] == (58 + -58):\n                li[j] = -(48 + -47)\n            idx_osfk = idx_osfk + (6 + -5)\n        idx_5g6f = idx_5g6f + (27 + -26)\n    return [n for n in li if n != -(88 + -87)]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == (34 + -34):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_4vpo = (17 + -17)\n    list_95vb = range((67 + -67), ((98 + -97) << (n+(95 + -94))))\n    while idx_4vpo < len(list_95vb):\n        bit = list_95vb[idx_4vpo]\n        ss = set()\n        idx_crtl = (14 + -14)\n        list_cdbr = range((98 + -98), n)\n        while idx_crtl < len(list_cdbr):\n            i = list_cdbr[idx_crtl]\n            if (bit & ((54 + -53) << i)):\n                ss.add(li[i])\n            idx_crtl = idx_crtl + (26 + -25)\n        s.append(ss)\n        idx_4vpo = idx_4vpo + (42 + -41)\n    return s\n\n\ndef factorial(n):\n    if n == (14 + -13):\n        return (1 + 0)\n    return n * factorial(n-(95 + -94))\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = (83 + -82)\n        while n:\n            r *= m\n            m -= (29 + -28)\n            n -= (26 + -25)\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_s137613418_to_22", "old_id": "s137613418"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = (92 + -91)\nidx_7mzj = (50 + -50)\nlist_wdb3 = A\nwhile idx_7mzj < len(list_wdb3):\n    i = list_wdb3[idx_7mzj]\n    B[i-(25 + -24)] = count\n    count += (39 + -38)\n    idx_7mzj = idx_7mzj + (40 + -39)\n\n\nprint(*B)\n", "id": "ConstantUnfoldding_sample_from_s273727373_to_23", "old_id": "s273727373"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\nidx_c2oq = (85 + -85)\nlist_498k = range(n)\nwhile idx_c2oq < len(list_498k):\n    i = list_498k[idx_c2oq]\n    idx_clua = (100 + -100)\n    list_lofz = range(n)\n    while idx_clua < len(list_lofz):\n        d = list_lofz[idx_clua]\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= (48 + -47)\n        idx_clua = idx_clua + (30 + -29)\n    idx_c2oq = idx_c2oq + (4 + -3)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s922746568_to_24", "old_id": "s922746568"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = (87 + -84)\n    idx_bf51 = (32 + -32)\n    list_2r3v = range((77 + -77), len(input_value) + (36 + -35) - n)\n    while idx_bf51 < len(list_2r3v):\n        i = list_2r3v[idx_bf51]\n        idx_y1z7 = (40 + -40)\n        list_83mc = range((24 + -23), n)\n        while idx_y1z7 < len(list_83mc):\n            j = list_83mc[idx_y1z7]\n            if input_value[i] != input_value[i + j]:\n                break\n            if j == n - (86 + -85):\n                return \"Yes\"\n            idx_y1z7 = idx_y1z7 + (90 + -89)\n        idx_bf51 = idx_bf51 + (15 + -14)\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "ConstantUnfoldding_sample_from_s616346400_to_25", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = (2 + -2)\nidx_7lr1 = (45 + -45)\nlist_k297 = range(n)\nwhile idx_7lr1 < len(list_k297):\n    i = list_k297[idx_7lr1]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_7lr1 = idx_7lr1 + (94 + -93)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = (20 + -20)\ncnt = (89 + -89)\nidx_z0ys = (73 + -73)\nlist_5sw4 = lst\nwhile idx_z0ys < len(list_5sw4):\n    i = list_5sw4[idx_z0ys]\n    if i == pre:\n        tmp_cnt += (97 + -96)\n    else:\n        cnt += sum([j for j in range(tmp_cnt + (50 + -49))])\n        tmp_cnt = (63 + -63)\n    pre = i\n    idx_z0ys = idx_z0ys + (59 + -58)\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s430322735_to_26", "old_id": "s430322735"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\ns = A[(100 + -100)] ^ A[(88 + -87)]\nidx_oqbe = (15 + -15)\nlist_pw98 = range((29 + -27), N)\nwhile idx_oqbe < len(list_pw98):\n    i = list_pw98[idx_oqbe]\n    s = s ^ A[i]\n    idx_oqbe = idx_oqbe + (77 + -76)\n\nB = [(45 + -45)]*N\nidx_bk5h = (8 + -8)\nlist_qyk6 = range(N)\nwhile idx_bk5h < len(list_qyk6):\n    i = list_qyk6[idx_bk5h]\n    B[i] = s ^ A[i]\n    idx_bk5h = idx_bk5h + (11 + -10)\n\nL = [str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "id": "ConstantUnfoldding_sample_from_s761121328_to_27", "old_id": "s761121328"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == (31 + -31):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nidx_dleg = (22 + -22)\nlist_ojhy = range(aa)\nwhile idx_dleg < len(list_ojhy):\n    i = list_ojhy[idx_dleg]\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-(26 + -25))\n        exit()\n    idx_dleg = idx_dleg + (55 + -54)\nprint(bb)\n", "id": "ConstantUnfoldding_sample_from_s986062252_to_28", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n\n    if n == (18 + -18):\n        break\n\n    res = -(96 + 1111111015)\n    s = (49 + -49)\n    idx_rd85 = (52 + -52)\n    list_40bd = range(n)\n    while idx_rd85 < len(list_40bd):\n        i = list_40bd[idx_rd85]\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n        idx_rd85 = idx_rd85 + (76 + -75)\n\n    print(res)\n", "id": "ConstantUnfoldding_sample_from_s923405856_to_29", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = (46 + 998244307)\n\n    if D[(11 + -11)] != (5 + -5):\n        print((71 + -71))\n        return\n\n    cnt = Counter(D)\n\n    if cnt[(59 + -59)] > (74 + -73):\n        print((46 + -46))\n        return\n\n    res = (37 + -36)\n    idx_vuys = (90 + -90)\n    list_nw3h = range((48 + -47), max(D)+(96 + -95))\n    while idx_vuys < len(list_nw3h):\n        i = list_nw3h[idx_vuys]\n        if cnt[i-(43 + -42)] == (48 + -47):\n            continue\n        res *= cnt[i-(2 + -1)]**cnt[i] % mod\n        res %= mod\n        idx_vuys = idx_vuys + (15 + -14)\n\n    print(res)\n\n\nsolve()\n", "id": "ConstantUnfoldding_sample_from_s534639230_to_30", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, (50 + -49))\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // (39 + -37) for a in A]\n\n\ncount_div_2 = None\nidx_w2rl = (35 + -35)\nlist_fo30 = A\nwhile idx_w2rl < len(list_fo30):\n    a = list_fo30[idx_w2rl]\n    cnt = (8 + -8)\n    while a % (86 + -84) == (98 + -98):\n        a //= (66 + -64)\n        cnt += (62 + -61)\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print((36 + -36))\n        exit()\n    idx_w2rl = idx_w2rl + (7 + -6)\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print((63 + -63))\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + (41 + -40)) // (91 + -89)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s817205687_to_31", "old_id": "s817205687"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = (55 + -55)\nidx_yeul = (95 + -95)\nlist_jdvw = range(N)\nwhile idx_yeul < len(list_jdvw):\n    i = list_jdvw[idx_yeul]\n    d = min(A[i], B[i])\n    ans += d\n    A[i] -= d\n    B[i] -= d\n    d = min(A[i + (59 + -58)], B[i])\n    ans += d\n    A[i + (75 + -74)] -= d\n    B[i] -= d\n    idx_yeul = idx_yeul + (72 + -71)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s287369394_to_32", "old_id": "s287369394"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = (66 + -64)**(size-(29 + -28)).bit_length()\n            self.default = default\n            self.seg = [default]*((22 + -20)*self.size-(66 + -65))\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-(6 + -5)\n            self.seg[k] = x\n            while k:\n                k = (k-(52 + -51))//(33 + -31)\n                self.seg[k] = self.segfunc(self.seg[(25 + -23)*k+(41 + -40)], self.seg[(26 + -24)*k+(95 + -93)])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-(15 + -14)\n            q += self.size-(79 + -77)\n            ret = self.default\n            while q-p > (22 + -21):\n                if p & (54 + -53) == (54 + -54):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & (73 + -72) == (33 + -32):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= (78 + -77)\n                p = p//(93 + -91)\n                q = (q-(17 + -16))//(12 + -10)\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+(34 + -33) for i in range(N)]\n    left_seg = SegmentTree(N, (31 + -31))\n    idx_5ow8 = (90 + -90)\n    list_jh9n = list(enumerate(a))\n    while idx_5ow8 < len(list_jh9n):\n        i, num = list_jh9n[idx_5ow8]\n        ans[num-(36 + -35)] *= i + (74 + -73) - left_seg.query((24 + -24), num)\n        left_seg.update(num-(59 + -58), i+(55 + -54))\n        idx_5ow8 = idx_5ow8 + (3 + -2)\n    right_seg = SegmentTree(N, (19 + -19))\n    idx_z26w = (40 + -40)\n    list_knti = list(enumerate(a[::-(66 + -65)]))\n    while idx_z26w < len(list_knti):\n        i, num = list_knti[idx_z26w]\n        ans[num-(18 + -17)] *= i + (19 + -18) - right_seg.query((53 + -53), num)\n        right_seg.update(num-(5 + -4), i+(60 + -59))\n        idx_z26w = idx_z26w + (65 + -64)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s764169243_to_33", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = (96 + -96)\nrecord = (64 + -64)\nidx_xpjn = (67 + -67)\nlist_c9eb = range(len(S))\nwhile idx_xpjn < len(list_c9eb):\n    i = list_c9eb[idx_xpjn]\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        count += (93 + -92)\n    else:\n        if count > record:\n            record = count\n        count = (6 + -6)\n    idx_xpjn = idx_xpjn + (50 + -49)\nif count > record:\n    record = count\n\nprint(record)\n", "id": "ConstantUnfoldding_sample_from_s993625131_to_34", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = (14 + -14)\nidx_2v5f = (89 + -89)\nlist_z37r = T\nwhile idx_2v5f < len(list_z37r):\n    i = list_z37r[idx_2v5f]\n    if i == S[-(94 + -93)] or i == S[(38 + -38)]:\n        ans += (53 + -52)\n    else:\n        left = (60 + -60)\n        right = n-(14 + -13)\n        while right-left > (84 + -83):\n            mid = (left+right)//(69 + -67)\n            if S[mid] == i:\n                ans += (55 + -54)\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    idx_2v5f = idx_2v5f + (53 + -52)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s315467749_to_35", "old_id": "s315467749"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = (4 + -4)\nidx_lfae = (34 + -34)\nlist_di05 = range(num_r)\nwhile idx_lfae < len(list_di05):\n    i = list_di05[idx_lfae]\n    if c[i] != comp[i]:\n        ans += (77 + -76)\n    idx_lfae = idx_lfae + (8 + -7)\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s031459110_to_36", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit((38 + -28)**(34 + -27))\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (42 + -41) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = (65 + -55) ** (4 + 14)\nMOD = (18 + -8) ** (70 + -61) + (8 + -1)\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-(28 + -27)]\n\n    dif = INF\n    prev_dif = dif\n    idx_4z97 = (41 + -41)\n    list_blrm = a_li[:-(95 + -94)]\n    while idx_4z97 < len(list_blrm):\n        a = list_blrm[idx_4z97]\n        dif = min(abs(n/(13 + -11) - a), dif)\n        if dif != prev_dif:\n            r = a\n            prev_dif = dif\n        idx_4z97 = idx_4z97 + (21 + -20)\n\n    print(n, r)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s681105182_to_37", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nidx_ydsw = (39 + -39)\nlist_euib = range(N-M+(96 + -95))\nwhile idx_ydsw < len(list_euib):\n    i = list_euib[idx_ydsw]\n    S_2 = S[i:i+M]\n    cnt = (53 + -53)\n    idx_gz4p = (67 + -67)\n    list_rq0y = range(M)\n    while idx_gz4p < len(list_rq0y):\n        j = list_rq0y[idx_gz4p]\n        if T[j] != S_2[j]:\n            cnt += (100 + -99)\n        idx_gz4p = idx_gz4p + (19 + -18)\n    ans = min(ans, cnt)\n    idx_ydsw = idx_ydsw + (11 + -10)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s838619850_to_38", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_9uzd = (68 + -68)\n    list_b3ua = range(n)\n    while idx_9uzd < len(list_b3ua):\n        _ = list_b3ua[idx_9uzd]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] += (64 + -63)\n        else:\n            sdic[s] = (67 + -66)\n        idx_9uzd = idx_9uzd + (9 + -8)\n    ans = (55 + -55)\n    idx_hba0 = (47 + -47)\n    list_3g2z = list(sdic.items())\n    while idx_hba0 < len(list_3g2z):\n        k, v = list_3g2z[idx_hba0]\n        ans += v*(v-(81 + -80))//(20 + -18)\n        idx_hba0 = idx_hba0 + (59 + -58)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s733189960_to_39", "old_id": "s733189960"}
{"code": "n = int(input())\nres = (52 + -52)\nidx_cjs8 = (79 + -79)\nlist_1wlz = range(n)\nwhile idx_cjs8 < len(list_1wlz):\n    _ = list_1wlz[idx_cjs8]\n    x, u = list(input().split())\n    if u == \"BTC\":\n        res += float(x) * (42 + 379958)\n    else:\n        res += int(x)\n    idx_cjs8 = idx_cjs8 + (88 + -87)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_s238775098_to_40", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_qcz9 = (37 + -37)\n    list_1k5s = range(n//(64 + -62))\n    while idx_qcz9 < len(list_1k5s):\n        i = list_1k5s[idx_qcz9]\n        ve.append(v[(72 + -70)*i])\n        vo.append(v[(10 + -8)*i+(68 + -67)])\n        idx_qcz9 = idx_qcz9 + (18 + -17)\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[(3 + -3)][(81 + -81)] != co.most_common()[(12 + -12)][(27 + -27)]:\n        ans = n-ce.most_common()[(78 + -78)][(77 + -76)]-co.most_common()[(90 + -90)][(47 + -46)]\n    elif len(ce) == (62 + -61) and len(co) == (66 + -65):\n        ans = n-ce.most_common()[(19 + -19)][(99 + -98)]\n    elif len(ce) == (23 + -22):\n        ans = n-ce.most_common()[(90 + -90)][(17 + -16)]-co.most_common()[(55 + -54)][(98 + -97)]\n    elif len(co) == (6 + -5):\n        ans = n-ce.most_common()[(10 + -9)][(46 + -45)]-co.most_common()[(82 + -82)][(95 + -94)]\n    else:\n        ans = min(n-ce.most_common()[(90 + -90)][(40 + -39)]-co.most_common()[(88 + -87)]\n                  [(33 + -32)], n-ce.most_common()[(93 + -92)][(47 + -46)]-co.most_common()[(48 + -48)][(40 + -39)])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s101447419_to_41", "old_id": "s101447419"}
{"code": "A, B = map(int, input().split())\n\nmin = B * (53 + -43)\nmax = (B+(52 + -51)) * (61 + -51) - (57 + -56)\n\nans = -(48 + -47)\nidx_4z0i = (42 + -42)\nlist_1juk = range(min, max+(80 + -79))\nwhile idx_4z0i < len(list_1juk):\n    i = list_1juk[idx_4z0i]\n    if int(i * 0.08) == A:\n        ans = i\n        break\n    idx_4z0i = idx_4z0i + (90 + -89)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s764356857_to_42", "old_id": "s764356857"}
{"code": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = (53 + -52), (20 + -19), (17 + -16)\n\nwhile x**(90 + -88) + y**(62 + -60) + z**(33 + -31) + x*y + y*z + z*x <= n:\n    while x ** (82 + -80) + y ** (89 + -87) + z ** (33 + -31) + x * y + y * z + z * x <= n:\n        while x ** (55 + -53) + y ** (74 + -72) + z ** (61 + -59) + x * y + y * z + z * x <= n:\n            i = x ** (78 + -76) + y ** (7 + -5) + z ** (38 + -36) + x * y + y * z + z * x\n            A[i - (68 + -67)] += (64 + -63)\n            z += (45 + -44)\n        z = (64 + -63)\n        y += (17 + -16)\n    y, z = (58 + -57), (19 + -18)\n    x += (83 + -82)\nidx_z6cs = (90 + -90)\nlist_7fzq = range(n)\nwhile idx_z6cs < len(list_7fzq):\n    i = list_7fzq[idx_z6cs]\n    print(int(A[i]))\n    idx_z6cs = idx_z6cs + (61 + -60)\n", "id": "ConstantUnfoldding_sample_from_s827462150_to_43", "old_id": "s827462150"}
{"code": "N, K = map(int, input().split())\nA = []\nidx_qahg = (20 + -20)\nlist_kryh = range(N)\nwhile idx_qahg < len(list_kryh):\n    i = list_kryh[idx_qahg]\n    A.append((30 + -30))\n    idx_qahg = idx_qahg + (43 + -42)\nidx_jwhd = (100 + -100)\nlist_hcq1 = range(K)\nwhile idx_jwhd < len(list_hcq1):\n    i = list_hcq1[idx_jwhd]\n    d = int(input())\n    AA = list(map(int, input().split()))\n    idx_ofgc = (9 + -9)\n    list_4jpc = range(d)\n    while idx_ofgc < len(list_4jpc):\n        j = list_4jpc[idx_ofgc]\n        A[AA[j] - (88 + -87)] = (71 + -70)\n        idx_ofgc = idx_ofgc + (73 + -72)\n    idx_jwhd = idx_jwhd + (76 + -75)\n\nn = (47 + -47)\nidx_6kwz = (22 + -22)\nlist_yok9 = range(N)\nwhile idx_6kwz < len(list_yok9):\n    i = list_yok9[idx_6kwz]\n    if A[i] == (54 + -54):\n        n += (81 + -80)\n    idx_6kwz = idx_6kwz + (53 + -52)\nprint(n)\n", "id": "ConstantUnfoldding_sample_from_s225521100_to_44", "old_id": "s225521100"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - (39 + -38) for a in input().split()]\n    sum_A = [(35 + -35) for _ in range(N + (29 + -28))]\n\n    count = (79 + -79)\n    modK = dict()\n    modK[(2 + -2)] = [(84 + -84)]\n    idx_edat = (62 + -62)\n    list_7ku8 = range(N)\n    while idx_edat < len(list_7ku8):\n        i = list_7ku8[idx_edat]\n        sum_A[i + (46 + -45)] = (sum_A[i] + A[i]) % K\n        if sum_A[i+(11 + -10)] not in modK:\n            modK[sum_A[i+(34 + -33)]] = [i + (63 + -62)]\n        else:\n            modK[sum_A[i+(93 + -92)]].append(i+(51 + -50))\n        idx_edat = idx_edat + (59 + -58)\n    idx_oti7 = (6 + -6)\n    list_q4yh = modK\n    while idx_oti7 < len(list_q4yh):\n        key = list_q4yh[idx_oti7]\n        lenK = len(modK[key])\n        idx_dr0t = (55 + -55)\n        list_g3fa = list(enumerate(modK[key]))\n        while idx_dr0t < len(list_g3fa):\n            i, a = list_g3fa[idx_dr0t]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - (33 + -32)\n            idx_dr0t = idx_dr0t + (63 + -62)\n        idx_oti7 = idx_oti7 + (68 + -67)\n\n    print(count)\n    return (20 + -20)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s975943078_to_45", "old_id": "s975943078"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    idx_g2jr = (42 + -42)\n    list_7bx3 = range(len(A)-(19 + -18))\n    while idx_g2jr < len(list_7bx3):\n        i = list_7bx3[idx_g2jr]\n        dist.append(A[i+(27 + -26)]-A[i])\n        idx_g2jr = idx_g2jr + (95 + -94)\n    dist.append(K+A[(49 + -49)]-A[-(16 + -15)])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s267613210_to_46", "old_id": "s267613210"}
{"code": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\nidx_vj0o = (15 + -15)\nlist_hxqn = list(enumerate(S))\nwhile idx_vj0o < len(list_hxqn):\n    i, char = list_hxqn[idx_vj0o]\n    char_lists.append(char)\n    char_lists.append(T[i])\n    idx_vj0o = idx_vj0o + (42 + -41)\n\nprint(\"\".join(char_lists))\n", "id": "ConstantUnfoldding_sample_from_s813548165_to_47", "old_id": "s813548165"}
{"code": "n = int(input())\ns = input()\ncnt = (19 + -18)\nidx_i1v2 = (61 + -61)\nlist_ao5w = range(n-(81 + -80))\nwhile idx_i1v2 < len(list_ao5w):\n    i = list_ao5w[idx_i1v2]\n    if s[i] == s[i+(67 + -66)]:\n        continue\n\n    else:\n        cnt += (58 + -57)\n    idx_i1v2 = idx_i1v2 + (68 + -67)\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s869207096_to_48", "old_id": "s869207096"}
{"code": "n, m = list(map(int, input().split()))\na = []\nb = []\nidx_8s7u = (20 + -20)\nlist_3hqd = range(m)\nwhile idx_8s7u < len(list_3hqd):\n    i = list_3hqd[idx_8s7u]\n    a1, b1 = list(map(int, input().split()))\n    a.append(a1)\n    b.append(b1)\n    idx_8s7u = idx_8s7u + (64 + -63)\nidx_ywqa = (20 + -20)\nlist_mnop = range((8 + -7), n+(25 + -24))\nwhile idx_ywqa < len(list_mnop):\n    i = list_mnop[idx_ywqa]\n    print(a.count(i)+b.count(i))\n    idx_ywqa = idx_ywqa + (91 + -90)\n", "id": "ConstantUnfoldding_sample_from_s491954463_to_49", "old_id": "s491954463"}
{"code": "a = [int(input()) for i in range((52 + -47))]\n\ndic = {}\nidx_5f8r = (43 + -43)\nlist_67i2 = range((83 + -78))\nwhile idx_5f8r < len(list_67i2):\n    i = list_67i2[idx_5f8r]\n    if str(a[i])[-(95 + -94)] == \"0\":\n        dic.update({i: (34 + -34)})\n    else:\n        dic.update({i: int(str(a[i])[-(63 + -62)]) - (38 + -28)})\n    idx_5f8r = idx_5f8r + (5 + -4)\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][(56 + -56)]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "ConstantUnfoldding_sample_from_s575946485_to_50", "old_id": "s575946485"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = (11 + -11)\nidx_jh38 = (28 + -28)\nlist_go2z = range(n)\nwhile idx_jh38 < len(list_go2z):\n    i = list_go2z[idx_jh38]\n    sum += int(l[i])\n    if max < int(l[i]):\n        max = int(l[i])\n    if min > int(l[i]):\n        min = int(l[i])\n    idx_jh38 = idx_jh38 + (4 + -3)\nprint(min, max, sum)\n", "id": "ConstantUnfoldding_sample_from_s704354119_to_51", "old_id": "s704354119"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = (74 + -74)\nidx_uwqj = (41 + -41)\nlist_nkrx = range((52 + -51), N)\nwhile idx_uwqj < len(list_nkrx):\n    i = list_nkrx[idx_uwqj]\n    tmp = a[i - (38 + -37)] + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - (32 + -31)] = tmp - a[i] - x\n            a[i] = (39 + -39)\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n    idx_uwqj = idx_uwqj + (56 + -55)\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s708549466_to_52", "old_id": "s708549466"}
{"code": "n = int(input())\narr = {}\nidx_9bvl = (45 + -45)\nlist_boq5 = range(n)\nwhile idx_9bvl < len(list_boq5):\n    i = list_boq5[idx_9bvl]\n    s = input()\n    if not s in arr:\n        arr[s] = (57 + -56)\n    else:\n        arr[s] += (42 + -41)\n    idx_9bvl = idx_9bvl + (88 + -87)\n\nmax_count = max(arr.values())\ndic = [key[(96 + -96)] for key in arr.items() if key[(36 + -35)] == max_count]\n\nout_sort = sorted(dic)\nidx_2xmg = (16 + -16)\nlist_mqoe = out_sort\nwhile idx_2xmg < len(list_mqoe):\n    i = list_mqoe[idx_2xmg]\n    print(i)\n    idx_2xmg = idx_2xmg + (87 + -86)\n", "id": "ConstantUnfoldding_sample_from_s622795537_to_53", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = (48 + -48)\nidx_5wsb = (5 + -5)\nlist_we2o = range(n)\nwhile idx_5wsb < len(list_we2o):\n    i = list_we2o[idx_5wsb]\n    x = set(s[:i+(37 + -36)])\n    y = set(s[i+(27 + -26):])\n\n    z = (93 + -93)\n    idx_vqzr = (76 + -76)\n    list_azv1 = x\n    while idx_vqzr < len(list_azv1):\n        w = list_azv1[idx_vqzr]\n        if w in y:\n            z += (14 + -13)\n        idx_vqzr = idx_vqzr + (78 + -77)\n    if z > ans:\n        ans = z\n    idx_5wsb = idx_5wsb + (94 + -93)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s232279435_to_54", "old_id": "s232279435"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[(34 + -34) for k in range((3 + 7))] for j in range((34 + -31))] for i in range((43 + -33))]\nidx_o93s = (15 + -15)\nlist_g8dk = range(N)\nwhile idx_o93s < len(list_g8dk):\n    i = list_g8dk[idx_o93s]\n    n = input().split()\n    b = int(n[(52 + -52)])\n    f = int(n[(59 + -58)])\n    r = int(n[(38 + -36)])\n    v = int(n[(70 + -67)])\n    m[b-(36 + -35)][f-(48 + -47)][r-(19 + -18)] += v\n    idx_o93s = idx_o93s + (64 + -63)\nidx_iq7t = (8 + -8)\nlist_0cts = range((14 + -10))\nwhile idx_iq7t < len(list_0cts):\n    i = list_0cts[idx_iq7t]\n    idx_k6nt = (49 + -49)\n    list_z6g1 = range((57 + -54))\n    while idx_k6nt < len(list_z6g1):\n        j = list_z6g1[idx_k6nt]\n        idx_zjn5 = (41 + -41)\n        list_2zae = range((1 + 9))\n        while idx_zjn5 < len(list_2zae):\n            k = list_2zae[idx_zjn5]\n            line += ' {0}'.format(m[i][j][k])\n            idx_zjn5 = idx_zjn5 + (60 + -59)\n        print(line)\n        line = ''\n        idx_k6nt = idx_k6nt + (81 + -80)\n    if i < (31 + -28):\n        print('#'*(18 + 2))\n    idx_iq7t = idx_iq7t + (41 + -40)\n", "id": "ConstantUnfoldding_sample_from_s067092519_to_55", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = (20 + -19)\nidx_8unr = (27 + -27)\nlist_5i2v = range(N-(63 + -62))\nwhile idx_8unr < len(list_5i2v):\n    i = list_5i2v[idx_8unr]\n    if S[i] != S[i+(22 + -21)]:\n        x = x+(37 + -36)\n    idx_8unr = idx_8unr + (45 + -44)\nprint(x)\n", "id": "ConstantUnfoldding_sample_from_s642705424_to_56", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[(29 + -29) for _ in range(N)] for _ in range(N)]\n    idx_6tqk = (83 + -83)\n    list_ct7s = range(M)\n    while idx_6tqk < len(list_ct7s):\n        _ = list_ct7s[idx_6tqk]\n        l, r = map(int, input().split())\n        train[l-(99 + -98)][r-(90 + -89)] += (86 + -85)\n        idx_6tqk = idx_6tqk + (27 + -26)\n\n    accum = [[(79 + -79) for _ in range(N+(8 + -7))]]\n    idx_nud8 = (78 + -78)\n    list_kycf = range(N)\n    while idx_nud8 < len(list_kycf):\n        i = list_kycf[idx_nud8]\n        temp = [(59 + -59)]\n        v = (36 + -36)\n        idx_qy36 = (86 + -86)\n        list_sqvj = range(N)\n        while idx_qy36 < len(list_sqvj):\n            j = list_sqvj[idx_qy36]\n            v += train[i][j]\n            temp.append(accum[-(87 + -86)][j+(60 + -59)]+v)\n            idx_qy36 = idx_qy36 + (60 + -59)\n        accum.append(temp)\n        idx_nud8 = idx_nud8 + (61 + -60)\n    idx_uiaw = (47 + -47)\n    list_tc1g = range(Q)\n    while idx_uiaw < len(list_tc1g):\n        _ = list_tc1g[idx_uiaw]\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-(55 + -54)][q] - accum[q][p-(55 + -54)] + accum[p-(9 + -8)][p-(29 + -28)]\n        print(v)\n        idx_uiaw = idx_uiaw + (45 + -44)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s048491063_to_57", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit((8 + 1999992))\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int((42 + -32)**(14 + -5)+(86 + -79))\ninf = int((50 + -40)**(70 + -50))\n\n\ndef yn(b):\n    if b:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [(92 + -92)]*n\n\n    def find(self, x):\n        if (x != self.P[x]):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y]:\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += (89 + -88)\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_p8fc = (64 + -64)\n        list_pw82 = range(self.n)\n        while idx_p8fc < len(list_pw82):\n            a = list_pw82[idx_p8fc]\n            S.add(self.find(a))\n            idx_p8fc = idx_p8fc + (43 + -42)\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a:\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [(19 + -19)]*size\n    idx_rn2s = (26 + -26)\n    list_vb3k = range(size)\n    while idx_rn2s < len(list_vb3k):\n        a = list_vb3k[idx_rn2s]\n        if (num >> (size-a-(9 + -8))) & (35 + -34) == (64 + -63):\n            A[a] = (63 + -62)\n        else:\n            A[a] = (60 + -60)\n        idx_rn2s = idx_rn2s + (41 + -40)\n    return A\n\n\ndef get_facs(n, mod_=(60 + -60)):\n    A = [(70 + -69)]*(n+(11 + -10))\n    idx_9hys = (64 + -64)\n    list_kc6y = range((77 + -75), len(A))\n    while idx_9hys < len(list_kc6y):\n        a = list_kc6y[idx_9hys]\n        A[a] = A[a-(36 + -35)]*a\n        if (mod > (94 + -94)):\n            A[a] %= mod_\n        idx_9hys = idx_9hys + (70 + -69)\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < (83 + -83)):\n        return (15 + -15)\n    return (fac[n]*pow(fac[n-r], mod-(91 + -89), mod)*pow(fac[r], mod-(74 + -72), mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> (17 + -16)\n    num = (y | z)\n    if (num >= ((54 + -53) << size)):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+(12 + -11))\n    A[(96 + -96)] = False\n    A[(19 + -18)] = False\n    idx_p86e = (49 + -49)\n    list_fvzl = range((13 + -11), n+(55 + -54))\n    while idx_p86e < len(list_fvzl):\n        a = list_fvzl[idx_p86e]\n        if A[a]:\n            idx_16n7 = (94 + -94)\n            list_2dov = range(a*(72 + -70), n+(28 + -27), a)\n            while idx_16n7 < len(list_2dov):\n                b = list_2dov[idx_16n7]\n                A[b] = False\n                idx_16n7 = idx_16n7 + (19 + -18)\n        idx_p86e = idx_p86e + (1 + 0)\n    if (type == \"bool\"):\n        return A\n    B = []\n    idx_ascq = (72 + -72)\n    list_1znq = range(n+(87 + -86))\n    while idx_ascq < len(list_1znq):\n        a = list_1znq[idx_ascq]\n        if (A[a]):\n            B.append(a)\n        idx_ascq = idx_ascq + (80 + -79)\n    return B\n\n\ndef is_prime(num):\n    if (num <= (15 + -13)):\n        return False\n    i = (13 + -11)\n    while i*i <= num:\n        if (num % i == (11 + -11)):\n            return False\n        i += (83 + -82)\n    return True\n\n\ndef ifelse(a, b, c):\n    if a:\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_2tgd = (43 + -43)\n    list_flq3 = range(n)\n    while idx_2tgd < len(list_flq3):\n        a = list_flq3[idx_2tgd]\n        s += A[a]\n        if (a < n-(16 + -15)):\n            s += c\n        idx_2tgd = idx_2tgd + (87 + -86)\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = (75 + -73)\n    list_ = []\n    while b * b <= n:\n        while n % b == (72 + -72):\n            n //= b\n            list_.append(b)\n        b += (83 + -82)\n    if n > (48 + -47):\n        list_.append(n)\n    if type_ == \"dict\":\n        dic = {}\n        idx_nicz = (54 + -54)\n        list_5lq0 = list_\n        while idx_nicz < len(list_5lq0):\n            a = list_5lq0[idx_nicz]\n            if a in dic:\n                dic[a] += (88 + -87)\n            else:\n                dic[a] = (51 + -50)\n            idx_nicz = idx_nicz + (10 + -9)\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=(53 + -52)):\n    return x*(n//x)\n\n\ndef ceil_(n, x=(83 + -82)):\n    return x*((n+x-(58 + -57))//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_:\n        ret = min_\n    if x > max_:\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_ayvg = (39 + -39)\n    list_0a7t = range(n)\n    while idx_ayvg < len(list_0a7t):\n        a = list_0a7t[idx_ayvg]\n        S.append(input())\n        idx_ayvg = idx_ayvg + (96 + -95)\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s977408144_to_58", "old_id": "s977408144"}
{"code": "N, K = [int(_) for _ in input().split()]\nS = set()\nidx_ly8b = (100 + -100)\nlist_qkme = range(K)\nwhile idx_ly8b < len(list_qkme):\n    i = list_qkme[idx_ly8b]\n    d = int(input())\n    A = [int(_) for _ in input().split()]\n    S = S | set(A)\n    idx_ly8b = idx_ly8b + (56 + -55)\nprint(N - len(S))\n", "id": "ConstantUnfoldding_sample_from_s411244720_to_59", "old_id": "s411244720"}
{"code": "N = int(input())\nans = []\nidx_81ld = (57 + -57)\nlist_ozba = range((51 + -50), N+(80 + -79))\nwhile idx_81ld < len(list_ozba):\n    i = list_ozba[idx_81ld]\n    if sum(range((70 + -69), i + (78 + -77))) < N:\n        continue\n    else:\n        ans = [i - (18 + -17), sum(range((59 + -58), i + (78 + -77))) - N]\n        break\n    idx_81ld = idx_81ld + (62 + -61)\nidx_of39 = (50 + -50)\nlist_z1mk = range(ans[(14 + -14)]+(43 + -42))\nwhile idx_of39 < len(list_z1mk):\n    i = list_z1mk[idx_of39]\n    if i + (36 + -35) != ans[(81 + -80)]:\n        print(i + (19 + -18))\n    idx_of39 = idx_of39 + (34 + -33)\n", "id": "ConstantUnfoldding_sample_from_s200092246_to_60", "old_id": "s200092246"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[(85 + -85)][(6 + -5)]\nans = []\np = c.most_common()\nidx_7qyp = (13 + -13)\nlist_9vqm = range(len(c))\nwhile idx_7qyp < len(list_9vqm):\n    i = list_9vqm[idx_7qyp]\n    if p[i][(100 + -99)] == count:\n        ans.append(p[i][(22 + -22)])\n    else:\n        break\n    idx_7qyp = idx_7qyp + (94 + -93)\nans = sorted(ans)\nidx_xr7o = (85 + -85)\nlist_sqjr = ans\nwhile idx_xr7o < len(list_sqjr):\n    i = list_sqjr[idx_xr7o]\n    print(i)\n    idx_xr7o = idx_xr7o + (5 + -4)\n", "id": "ConstantUnfoldding_sample_from_s668439281_to_61", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_nrku = (1 + -1)\nlist_m9bg = range(H+(42 + -40))\nwhile idx_nrku < len(list_m9bg):\n    i = list_m9bg[idx_nrku]\n    if i == (44 + -44) or i == H+(6 + -5):\n        G.append('#'*(W+(21 + -19)))\n    else:\n        G.append('#' + input() + '#')\n    idx_nrku = idx_nrku + (54 + -53)\n\nans = (57 + -57)\nidx_n4tc = (80 + -80)\nlist_deq6 = range(W+(3 + -1))\nwhile idx_n4tc < len(list_deq6):\n    sx = list_deq6[idx_n4tc]\n    idx_5jwy = (56 + -56)\n    list_msrq = range(H+(71 + -69))\n    while idx_5jwy < len(list_msrq):\n        sy = list_msrq[idx_5jwy]\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+(73 + -71))] for i in range(H+(52 + -50))]\n            visited = [[-(16 + -15) for i in range(W+(87 + -85))] for i in range(H+(51 + -49))]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = (8 + -8)\n            visited[sy][sx] = (4 + -3)\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+(18 + -17)] == '.' and visited[y][x+(31 + -30)] == -(65 + -64):\n                    q.append((x+(63 + -62), y))\n                    dist[y][x+(84 + -83)] = dist[y][x] + (50 + -49)\n                    visited[y][x+(41 + -40)] = (17 + -16)\n\n                if G[y][x-(37 + -36)] == '.' and visited[y][x-(79 + -78)] == -(18 + -17):\n                    q.append((x-(73 + -72), y))\n                    dist[y][x-(73 + -72)] = dist[y][x] + (18 + -17)\n                    visited[y][x-(71 + -70)] = (19 + -18)\n\n                if G[y+(98 + -97)][x] == '.' and visited[y+(19 + -18)][x] == -(76 + -75):\n                    q.append((x, y+(31 + -30)))\n                    dist[y+(93 + -92)][x] = dist[y][x] + (26 + -25)\n                    visited[y+(4 + -3)][x] = (28 + -27)\n\n                if G[y-(63 + -62)][x] == '.' and visited[y-(72 + -71)][x] == -(59 + -58):\n                    q.append((x, y-(47 + -46)))\n                    dist[y-(61 + -60)][x] = dist[y][x] + (82 + -81)\n                    visited[y-(55 + -54)][x] = (68 + -67)\n            idx_txzw = (1 + -1)\n            list_cj62 = range(W+(54 + -52))\n            while idx_txzw < len(list_cj62):\n                i = list_cj62[idx_txzw]\n                idx_qnyc = (31 + -31)\n                list_okcy = range(H+(91 + -89))\n                while idx_qnyc < len(list_okcy):\n                    j = list_okcy[idx_qnyc]\n                    ans = max(ans, dist[j][i])\n                    idx_qnyc = idx_qnyc + (49 + -48)\n                idx_txzw = idx_txzw + (35 + -34)\n        idx_5jwy = idx_5jwy + (80 + -79)\n    idx_n4tc = idx_n4tc + (4 + -3)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s951169509_to_62", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_2x6m = (99 + -99)\nlist_rva6 = range(N)\nwhile idx_2x6m < len(list_rva6):\n    _ = list_rva6[idx_2x6m]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_2x6m = idx_2x6m + (68 + -67)\nokz = (42 + -42)\nidx_fkvx = (14 + -14)\nlist_2zsg = mo\nwhile idx_fkvx < len(list_2zsg):\n    i = list_2zsg[idx_fkvx]\n    if i[(66 + -65)] == \"JPY\":\n        okz += i[(100 + -100)]\n    else:\n        okz += i[(32 + -32)]*(55 + 379945)\n    idx_fkvx = idx_fkvx + (33 + -32)\n\nprint(okz)\n", "id": "ConstantUnfoldding_sample_from_s554393427_to_63", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = (17 + -17)\nidx_ogwu = (67 + -67)\nlist_5yli = range(N // R + (60 + -59))\nwhile idx_ogwu < len(list_5yli):\n    i = list_5yli[idx_ogwu]\n    idx_2mho = (73 + -73)\n    list_2yhd = range((N-i * R) // G + (98 + -97))\n    while idx_2mho < len(list_2yhd):\n        j = list_2yhd[idx_2mho]\n        if N - i * R - j * G >= (71 + -71) and (N - i * R - j * G) % B == (48 + -48):\n            score += (33 + -32)\n        idx_2mho = idx_2mho + (16 + -15)\n    idx_ogwu = idx_ogwu + (95 + -94)\n\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_s897879131_to_64", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - (96 + -95) for x in input().split()]\n\n\nINF = (96 + -86) ** (12 + 8)\nMOD = (92 + 999999915)\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    idx_5lc7 = (45 + -45)\n    list_73ky = range(n)\n    while idx_5lc7 < len(list_73ky):\n        i = list_73ky[idx_5lc7]\n        num = getN()\n        num = -num\n        if num >= dp[-(52 + -51)]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        idx_5lc7 = idx_5lc7 + (57 + -56)\n\n    print(len(dp) - (47 + -46))\n    return\n\n\ndef main():\n    n = getN()\n    idx_r0ax = (54 + -54)\n    list_mpih = range(n)\n    while idx_r0ax < len(list_mpih):\n        _ = list_mpih[idx_r0ax]\n        solve()\n        idx_r0ax = idx_r0ax + (87 + -86)\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s344468705_to_65", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range((65 + -64), N+(57 + -56))}\nidx_jiek = (64 + -64)\nlist_sndt = range(M)\nwhile idx_jiek < len(list_sndt):\n    _ = list_sndt[idx_jiek]\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\n    idx_jiek = idx_jiek + (49 + -48)\ncol = [-(69 + -68) for _ in range(N+(4 + -3))]\ncnt = (7 + -7)\nidx_e6pn = (63 + -63)\nlist_z96l = range((42 + -41), N+(98 + -97))\nwhile idx_e6pn < len(list_z96l):\n    i = list_z96l[idx_e6pn]\n    if col[i] < (30 + -30):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            idx_mk1n = (14 + -14)\n            list_1rie = G[x]\n            while idx_mk1n < len(list_1rie):\n                y = list_1rie[idx_mk1n]\n                if col[y] < (3 + -3):\n                    col[y] = cnt\n                    que.append(y)\n                idx_mk1n = idx_mk1n + (45 + -44)\n        cnt += (10 + -9)\n    idx_e6pn = idx_e6pn + (92 + -91)\ncmax = max(col)\nprint(cmax)\n", "id": "ConstantUnfoldding_sample_from_s233116196_to_66", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = (23 + -23)\nhighLate = (89 + -89)\nidx_j0qe = (61 + -61)\nlist_ejpm = range(memTime)\nwhile idx_j0qe < len(list_ejpm):\n    color = list_ejpm[idx_j0qe]\n    member = memLate[color]\n    if member // (16 + 384) >= (30 + -22):\n        highLate += (19 + -18)\n    elif ((member // (59 + 341)) in colorList) == False:\n        colorList.append(member // (95 + 305))\n    idx_j0qe = idx_j0qe + (10 + -9)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == (22 + -22):\n    minColor = (81 + -80)\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "ConstantUnfoldding_sample_from_s964794058_to_67", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = (36 + -26) ** (97 + -87)\n    idx_rl52 = (61 + -61)\n    list_xfw8 = range(max(X, Y) + (89 + -88))\n    while idx_rl52 < len(list_xfw8):\n        k = list_xfw8[idx_rl52]\n        total = (47 + -45) * C * k + A * max((24 + -24), X - k) + B * max((30 + -30), Y - k)\n        if total < ans:\n            ans = total\n        idx_rl52 = idx_rl52 + (6 + -5)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_s724326345_to_68", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = (38 + -28) ** (84 + -75) + (57 + -50)\nINF = float('INF')\nsys.setrecursionlimit((70 + -60) ** (71 + -66))\n\n\ndef main():\n    N = int(readline())\n    s = {(59 + -58), (77 + -75), (37 + -33), (32 + -24), (2 + 14), (39 + -7), (61 + 3)}\n    ans = (20 + -20)\n    idx_2xo3 = (26 + -26)\n    list_0oih = range((26 + -25), N + (24 + -23))\n    while idx_2xo3 < len(list_0oih):\n        i = list_0oih[idx_2xo3]\n        if i in s:\n            ans = i\n        idx_2xo3 = idx_2xo3 + (40 + -39)\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s878873709_to_69", "old_id": "s878873709"}
{"code": "N = int(input())\nS = input()\n\nans = (10 + -9)\ntmp = S[(33 + -33)]\nidx_dx4k = (22 + -22)\nlist_0zvl = S\nwhile idx_dx4k < len(list_0zvl):\n    s = list_0zvl[idx_dx4k]\n    if s != tmp:\n        ans += (51 + -50)\n        tmp = s\n    idx_dx4k = idx_dx4k + (81 + -80)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s174910557_to_70", "old_id": "s174910557"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = (100 + -100)\nusiro = K\nidx_4m95 = (76 + -76)\nlist_4xwj = range(N-K)\nwhile idx_4m95 < len(list_4xwj):\n    i = list_4xwj[idx_4m95]\n    if score[mae] < score[usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae += (39 + -38)\n    usiro += (96 + -95)\n    idx_4m95 = idx_4m95 + (99 + -98)\n", "id": "ConstantUnfoldding_sample_from_s182651529_to_71", "old_id": "s182651529"}
{"code": "n = int(input())\nr = (24 + -24)\nidx_osgf = (59 + -59)\nlist_9sni = range(n)\nwhile idx_osgf < len(list_9sni):\n    ii = list_9sni[idx_osgf]\n    if (ii+(51 + -50)) % (88 + -85) != (12 + -12) and (ii+(46 + -45)) % (78 + -73) != (46 + -46):\n        r += (ii+(30 + -29))\n    idx_osgf = idx_osgf + (1 + 0)\nprint(r)\n", "id": "ConstantUnfoldding_sample_from_s702834515_to_72", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-(70 + -69) for i in input().split()]\n\n\ndef StoI(): return [ord(i)-(80 + 17) for i in input()]\n\n\ndef ItoS(nn): return chr(nn+(22 + 75))\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = (59 + -49)**(80 + -71)+(17 + -10)\ninf = float('inf')\nIINF = (37 + -27)**(50 + -40)\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit((20 + -10)**(44 + -38))\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [(44 + -44)] * N\n    t = [(33 + -33)] * N\n    idx_t6dy = (1 + -1)\n    list_o27n = range(N)\n    while idx_t6dy < len(list_o27n):\n        i = list_o27n[idx_t6dy]\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n        idx_t6dy = idx_t6dy + (19 + -18)\n\n    X = input()\n    xi = (25 + -25)\n    idx_a4u1 = (33 + -33)\n    list_ndt2 = range(N)\n    while idx_a4u1 < len(list_ndt2):\n        i = list_ndt2[idx_a4u1]\n        if s[i] == X:\n            xi = i\n            break\n        idx_a4u1 = idx_a4u1 + (28 + -27)\n\n    ans = (81 + -81)\n    idx_dykb = (1 + -1)\n    list_pgk7 = range(N)\n    while idx_dykb < len(list_pgk7):\n        i = list_pgk7[idx_dykb]\n        if xi < i:\n            ans += t[i]\n        idx_dykb = idx_dykb + (8 + -7)\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_s664563518_to_73", "old_id": "s664563518"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = (83 + -83), (5 + -5)\nidx_2byp = (59 + -59)\nlist_76x0 = range(N-(37 + -36))\nwhile idx_2byp < len(list_76x0):\n    i = list_76x0[idx_2byp]\n    if H[i] >= H[i+(29 + -28)]:\n        count_tmp += (68 + -67)\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = (97 + -97)\n    idx_2byp = idx_2byp + (83 + -82)\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "ConstantUnfoldding_sample_from_s895229833_to_74", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open((15 + -15)).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros(((96 + -86), (10 + 0)), dtype=int)\nidx_7yfh = (78 + -78)\nlist_3ljq = range((20 + -10))\nwhile idx_7yfh < len(list_3ljq):\n    i = list_3ljq[idx_7yfh]\n    idx_muci = (26 + -26)\n    list_8a0c = list(enumerate(map(int, next(X).split())))\n    while idx_muci < len(list_8a0c):\n        j, c = list_8a0c[idx_muci]\n        C[i, j] = c\n        idx_muci = idx_muci + (23 + -22)\n    idx_7yfh = idx_7yfh + (4 + -3)\nA = np.zeros((h, w), dtype=int)\nidx_pm8v = (56 + -56)\nlist_o5mk = range(h)\nwhile idx_pm8v < len(list_o5mk):\n    i = list_o5mk[idx_pm8v]\n    idx_nc81 = (21 + -21)\n    list_ey5x = list(enumerate(map(int, next(X).split())))\n    while idx_nc81 < len(list_ey5x):\n        j, a = list_ey5x[idx_nc81]\n        A[i, j] = a\n        idx_nc81 = idx_nc81 + (22 + -21)\n    idx_pm8v = idx_pm8v + (57 + -56)\n\nG = nx.DiGraph(C)\nd = {}\nidx_nsha = (42 + -42)\nlist_t57p = range((7 + 3))\nwhile idx_nsha < len(list_t57p):\n    i = list_t57p[idx_nsha]\n    if i == (58 + -57):\n        continue\n    d[i] = nx.shortest_path_length(G, i, (80 + -79), weight='weight')\n    idx_nsha = idx_nsha + (65 + -64)\n\ns = (46 + -46)\nidx_l49f = (91 + -91)\nlist_cuf8 = chain.from_iterable(A)\nwhile idx_l49f < len(list_cuf8):\n    a = list_cuf8[idx_l49f]\n    if a == -(37 + -36) or a == (75 + -74):\n        continue\n    s += d[a]\n    idx_l49f = idx_l49f + (17 + -16)\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s749244504_to_75", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [(70 + -70)]*n\nidx_iuw3 = (79 + -79)\nlist_1i9c = range((67 + -66), n)\nwhile idx_iuw3 < len(list_1i9c):\n    i = list_1i9c[idx_iuw3]\n    if a[i] == \"C\" and a[i-(7 + -6)] == \"A\":\n        c[i] = c[i-(32 + -31)]+(15 + -14)\n    else:\n        c[i] = c[i-(58 + -57)]\n    idx_iuw3 = idx_iuw3 + (63 + -62)\nidx_zxas = (30 + -30)\nlist_mz4f = range(k)\nwhile idx_zxas < len(list_mz4f):\n    w = list_mz4f[idx_zxas]\n    l, r = map(int, input().split())\n    print(c[r-(66 + -65)]-c[l-(41 + -40)])\n    idx_zxas = idx_zxas + (15 + -14)\n", "id": "ConstantUnfoldding_sample_from_s759499751_to_76", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit((86 + -85) << (40 + -15))\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=(20 + -19)): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_g3zt = (35 + -35)\n    list_nwxa = range(H)\n    while idx_g3zt < len(list_nwxa):\n        _ = list_nwxa[idx_g3zt]\n        ret.append(list(map(int, readline().split())))\n        idx_g3zt = idx_g3zt + (82 + -81)\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': (54 + -53), '.': (34 + -34)}, pad=None):\n\n    if pad is None:\n        ret = []\n        idx_vncd = (15 + -15)\n        list_ltov = range(H)\n        while idx_vncd < len(list_ltov):\n            _ = list_ltov[idx_vncd]\n            ret.append([replace[s] for s in read()[:-(3 + -2)]])\n            idx_vncd = idx_vncd + (1 + 0)\n\n    else:\n        ret = [[pad] * (W + (48 + -46))]\n        idx_cr8e = (65 + -65)\n        list_bl4u = range(H)\n        while idx_cr8e < len(list_bl4u):\n            _ = list_bl4u[idx_cr8e]\n            ret.append([pad] + [replace[s] for s in read()[:-(24 + -23)]] + [pad])\n            idx_cr8e = idx_cr8e + (8 + -7)\n        ret.append([pad] * (W + (42 + -40)))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[(21 + -21)])\n    D = [[-(6 + -5)] * W for _ in [(5 + -5)] * H]\n    que = [((4 + -4), si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -(34 + -33):\n            continue\n        D[i][j] = c\n        idx_wr6c = (32 + -32)\n        list_pai1 = product([-(4 + -2), -(93 + -92), (38 + -38), (62 + -61), (93 + -91)], repeat=(93 + -91))\n        while idx_wr6c < len(list_pai1):\n            di, dj = list_pai1[idx_wr6c]\n            ni, nj = i + di, j + dj\n            if not ((77 + -77) <= ni < H and (83 + -83) <= nj < W) or D[ni][nj] != -(64 + -63) or ni == nj == (44 + -44) or grid[ni][nj] == (76 + -75):\n                continue\n            if (di == (12 + -12) and abs(dj) == (26 + -25)) or (dj == (23 + -23) and abs(di) == (45 + -44)):\n                nc = c\n            else:\n                nc = c + (92 + -91)\n            heappush(que, (nc, ni, nj))\n            idx_wr6c = idx_wr6c + (96 + -95)\n    return D\n\n\nMOD = (12 + -2)**(48 + -39) + (19 + -12)\nINF = (47 + -45)**(25 + 6)\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-(60 + -59)] * W for _ in [(49 + -49)] * H]\nque = deque([((58 + -58), si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -(45 + -44):\n        continue\n    D[i][j] = c\n    idx_po82 = (79 + -79)\n    list_yht1 = product([-(76 + -74), -(11 + -10), (32 + -32), (30 + -29), (13 + -11)], repeat=(31 + -29))\n    while idx_po82 < len(list_yht1):\n        di, dj = list_yht1[idx_po82]\n        ni, nj = i + di, j + dj\n        if not ((12 + -12) <= ni < H and (94 + -94) <= nj < W) or D[ni][nj] != -(40 + -39) or ni == nj == (67 + -67) or S[ni][nj] == (48 + -47):\n            continue\n        if (di == (11 + -11) and abs(dj) == (16 + -15)) or (dj == (76 + -76) and abs(di) == (77 + -76)):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + (47 + -46), ni, nj))\n        idx_po82 = idx_po82 + (32 + -31)\n\nprint(D[ti][tj])\n", "id": "ConstantUnfoldding_sample_from_s124725275_to_77", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = (72 + -72)\nidx_jwep = (37 + -37)\nlist_qaj5 = range(n)\nwhile idx_jwep < len(list_qaj5):\n    i = list_qaj5[idx_jwep]\n    if p[i] != p_copy[i]:\n        count += (100 + -99)\n    idx_jwep = idx_jwep + (81 + -80)\n\nif count == (40 + -40) or count == (16 + -14):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_s763097776_to_78", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -(22 + -12) ** (92 + -74)\nidx_rato = (53 + -53)\nlist_ws5l = range((28 + -27), (60 + -58)**(18 + -8))\nwhile idx_rato < len(list_ws5l):\n    i = list_ws5l[idx_rato]\n    tmp = (100 + -100)\n    lst = [(26 + -26)]*n\n    idx_aje4 = (11 + -11)\n    list_icrw = range((56 + -46))\n    while idx_aje4 < len(list_icrw):\n        j = list_icrw[idx_aje4]\n        if (i >> j) & (10 + -9):\n            idx_ivmh = (49 + -49)\n            list_0jiz = range(n)\n            while idx_ivmh < len(list_0jiz):\n                k = list_0jiz[idx_ivmh]\n                lst[k] += F[k][j]\n                idx_ivmh = idx_ivmh + (20 + -19)\n        idx_aje4 = idx_aje4 + (74 + -73)\n    idx_z2x3 = (32 + -32)\n    list_2zti = range(n)\n    while idx_z2x3 < len(list_2zti):\n        k = list_2zti[idx_z2x3]\n        tmp += P[k][lst[k]]\n        idx_z2x3 = idx_z2x3 + (39 + -38)\n    ans = max(ans, tmp)\n    idx_rato = idx_rato + (33 + -32)\n\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s906994739_to_79", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nidx_4api = (78 + -78)\nlist_d6af = range(-(66 + -65), (93 + 9))\nwhile idx_4api < len(list_d6af):\n    i = list_d6af[idx_4api]\n\n    if i in p:\n        continue\n\n    if not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n    idx_4api = idx_4api + (74 + -73)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "ConstantUnfoldding_sample_from_s957164965_to_80", "old_id": "s957164965"}
{"code": "from math import factorial as f\n\nN = int(input())\n\nprimes = [(62 + -60), (50 + -47), (16 + -11), (14 + -7), (85 + -74), (47 + -34), (59 + -42), (62 + -43), (85 + -62), (51 + -22), (28 + 3), (76 + -39), (43 + -2), (20 + 23), (81 + -34)]\ndivs = []\nidx_0onv = (35 + -35)\nlist_vwfh = range((42 + -41), (82 + 19))\nwhile idx_0onv < len(list_vwfh):\n    i = list_vwfh[idx_0onv]\n    tmp = [(26 + -26) for _ in range(len(primes))]\n    idx_lnkf = (77 + -77)\n    list_zyor = range(len(primes))\n    while idx_lnkf < len(list_zyor):\n        j = list_zyor[idx_lnkf]\n        p = primes[j]\n        tmp[j] = (6 + -6)\n        while (i//p == i/p):\n            i = i//p\n            tmp[j] += (85 + -84)\n        idx_lnkf = idx_lnkf + (52 + -51)\n    divs.append(tmp)\n    idx_0onv = idx_0onv + (35 + -34)\n\n\ndivsum = [(42 + -42) for _ in range(len(primes))]\nidx_f42n = (14 + -14)\nlist_gwl6 = range((81 + -80), N+(17 + -16))\nwhile idx_f42n < len(list_gwl6):\n    i = list_gwl6[idx_f42n]\n    idx_2wkl = (27 + -27)\n    list_093f = range(len(primes))\n    while idx_2wkl < len(list_093f):\n        j = list_093f[idx_2wkl]\n        divsum[j] += divs[i-(48 + -47)][j]\n        idx_2wkl = idx_2wkl + (61 + -60)\n    idx_f42n = idx_f42n + (81 + -80)\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-(42 + -41), divsum)))\n\n\nans = (73 + -73)\n\n\nans += num((6 + 69))\n\n\nans += num((8 + 7))*(num((91 + -86))-(59 + -58))\n\n\nans += num((18 + 7))*(num((59 + -56))-(64 + -63))\n\n\nans += num((66 + -61)) * (num((97 + -92))-(28 + -27)) * (num((36 + -33))-(33 + -31)) // (79 + -77)\nprint(int(ans))\n", "id": "ConstantUnfoldding_sample_from_s259116349_to_81", "old_id": "s259116349"}
{"code": "from math import floor\nfrom heapq import heappush, heappop\nn, m = map(int, input().split())\na = []\nidx_xu28 = (20 + -20)\nlist_eqvz = map(int, input().split())\nwhile idx_xu28 < len(list_eqvz):\n    i = list_eqvz[idx_xu28]\n    heappush(a, -i)\n    idx_xu28 = idx_xu28 + (37 + -36)\n\n\ndef dis(x, y): return x // (16 + -14)**y\nidx_86wh = (41 + -41)\nlist_em1w = range(m)\nwhile idx_86wh < len(list_em1w):\n    _ = list_em1w[idx_86wh]\n    heappush(a, -dis(-heappop(a), (29 + -28)))\n    idx_86wh = idx_86wh + (44 + -43)\nprint(-sum(a))\n", "id": "ConstantUnfoldding_sample_from_s763208424_to_82", "old_id": "s763208424"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = (41 + 9999999958)\nidx_t1im = (26 + -26)\nlist_3vao = range((98 + -97), (16 + 85))\nwhile idx_t1im < len(list_3vao):\n    i = list_3vao[idx_t1im]\n    c = sum([(x - i) ** (54 + -52) for x in XS])\n    if m > c:\n        m = c\n    idx_t1im = idx_t1im + (28 + -27)\n\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_s880494034_to_83", "old_id": "s880494034"}
{"code": "n = int(input())\nres = []\nidx_tdhr = (54 + -54)\nlist_r7ck = range(n)\nwhile idx_tdhr < len(list_r7ck):\n    i = list_r7ck[idx_tdhr]\n    a = input()\n    res.append(a)\n    idx_tdhr = idx_tdhr + (100 + -99)\nprint(len(set(res)))\n", "id": "ConstantUnfoldding_sample_from_s770408311_to_84", "old_id": "s770408311"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\nidx_syf2 = (18 + -18)\nlist_j6x7 = range((66 + -65) << d)\nwhile idx_syf2 < len(list_j6x7):\n    bit = list_j6x7[idx_syf2]\n    count = (69 + -69)\n    sum = (12 + -12)\n    nokori = set(range((50 + -49), d + (4 + -3)))\n    idx_p42d = (50 + -50)\n    list_hl03 = range(d)\n    while idx_p42d < len(list_hl03):\n        i = list_hl03[idx_p42d]\n        if bit & ((18 + -17) << i):\n            sum += pc[i][(51 + -51)] * (i + (45 + -44)) * (80 + 20) + pc[i][(98 + -97)]\n            count += pc[i][(67 + -67)]\n            nokori.discard(i + (51 + -50))\n        idx_p42d = idx_p42d + (78 + -77)\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-(19 + -18)][(94 + -94)], -(-(g - sum) // (use * (85 + 15))))\n        count += n\n        sum += n * use * (12 + 88)\n\n    if sum >= g:\n        ans = min(ans, count)\n    idx_syf2 = idx_syf2 + (98 + -97)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s591424993_to_85", "old_id": "s591424993"}
{"code": "n = int(input())\nidx_6ex9 = (88 + -88)\nlist_i7o2 = range((67 + -66), (30 + -20) ** (97 + -92))\nwhile idx_6ex9 < len(list_i7o2):\n    i = list_i7o2[idx_6ex9]\n    if i * i > n:\n        print((i-(26 + -25)) * (i-(63 + -62)))\n        exit()\n    idx_6ex9 = idx_6ex9 + (61 + -60)\n", "id": "ConstantUnfoldding_sample_from_s666154520_to_86", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = (49 + -49)\nidx_mbwp = (99 + -99)\nlist_8ldn = s\nwhile idx_mbwp < len(list_8ldn):\n    i = list_8ldn[idx_mbwp]\n    if i == \")\":\n        left += (92 + -91)\n    else:\n        break\n    idx_mbwp = idx_mbwp + (41 + -40)\n\nleft1 = (33 + -33)\nright1 = (72 + -72)\nidx_1kpa = (2 + -2)\nlist_p810 = range(left, n)\nwhile idx_1kpa < len(list_p810):\n    i = list_p810[idx_1kpa]\n    if s[i] == \"(\":\n        right1 += (68 + -67)\n    elif right1 > (97 + -97):\n        right1 -= (68 + -67)\n    else:\n        left1 += (90 + -89)\n    idx_1kpa = idx_1kpa + (95 + -94)\n\nleft1 += left\nidx_j0fb = (94 + -94)\nlist_o79d = range(right1)\nwhile idx_j0fb < len(list_o79d):\n    i = list_o79d[idx_j0fb]\n    s += \")\"\n    idx_j0fb = idx_j0fb + (34 + -33)\nidx_xvig = (4 + -4)\nlist_j9ro = range(left1)\nwhile idx_xvig < len(list_j9ro):\n    i = list_j9ro[idx_xvig]\n    s = \"(\" + s\n    idx_xvig = idx_xvig + (49 + -48)\n\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s952876397_to_87", "old_id": "s952876397"}
{"code": "import numpy\nn = int(input())\na = []\nidx_0d4c = (95 + -95)\nlist_q1wc = range((67 + -65))\nwhile idx_0d4c < len(list_q1wc):\n    i = list_q1wc[idx_0d4c]\n    a.append(list(map(int, input().split())))\n    idx_0d4c = idx_0d4c + (51 + -50)\na[(19 + -18)] = a[(22 + -21)][::-(79 + -78)]\nres_0 = numpy.cumsum(a[(34 + -34)])\nres_1 = numpy.cumsum(a[(13 + -12)])\nans = (53 + -53)\nidx_shag = (15 + -15)\nlist_uty5 = range(n)\nwhile idx_shag < len(list_uty5):\n    i = list_uty5[idx_shag]\n    check = res_0[i] + res_1[n-(91 + -90)-i]\n    ans = max(ans, check)\n    idx_shag = idx_shag + (62 + -61)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s146553386_to_88", "old_id": "s146553386"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[(52 + -52)]*T for _ in range(N+(7 + -6))]\nidx_407n = (63 + -63)\nlist_nvs4 = range(N)\nwhile idx_407n < len(list_nvs4):\n    i = list_nvs4[idx_407n]\n    idx_ap5e = (11 + -11)\n    list_2enh = range(T)\n    while idx_ap5e < len(list_2enh):\n        j = list_2enh[idx_ap5e]\n        if j < L[i][(73 + -73)]:\n            dp[i+(11 + -10)][j] = dp[i][j]\n        else:\n            dp[i+(29 + -28)][j] = max(dp[i][j], dp[i][j-L[i][(44 + -44)]]+L[i][(50 + -49)])\n        idx_ap5e = idx_ap5e + (79 + -78)\n    idx_407n = idx_407n + (87 + -86)\n\nused = []\nB = dp[N][T-(85 + -84)]\nj = T-(44 + -43)\nidx_et3n = (46 + -46)\nlist_4yfb = range(N-(92 + -91), -(86 + -85), -(97 + -96))\nwhile idx_et3n < len(list_4yfb):\n    i = list_4yfb[idx_et3n]\n    if B == dp[i][j]:\n        continue\n    B -= L[i][(33 + -32)]\n    used.append(i)\n    j -= L[i][(31 + -31)]\n    idx_et3n = idx_et3n + (53 + -52)\n\nans = dp[N][T-(18 + -17)]\nc = (97 + -97)\nidx_y4op = (29 + -29)\nlist_s1lz = range(N)\nwhile idx_y4op < len(list_s1lz):\n    i = list_s1lz[idx_y4op]\n    if i in used:\n        continue\n    c = max(c, L[i][(88 + -87)])\n    idx_y4op = idx_y4op + (52 + -51)\n\nprint(ans+c)\n", "id": "ConstantUnfoldding_sample_from_s793709854_to_89", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = (80 + -70)**(94 + -84)\nidx_56wh = (6 + -6)\nlist_6asr = range((32 + 69))\nwhile idx_56wh < len(list_6asr):\n    i = list_6asr[idx_56wh]\n    tmp = [abs(i - x[j])**(25 + -23) for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n    idx_56wh = idx_56wh + (73 + -72)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s246280701_to_90", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = (19 + -19)\nidx_4t5i = (73 + -73)\nlist_cn79 = range(N-(44 + -42))\nwhile idx_4t5i < len(list_cn79):\n    i = list_cn79[idx_4t5i]\n    idx_je7k = (24 + -24)\n    list_y2x8 = range(i+(14 + -13), N-(99 + -98))\n    while idx_je7k < len(list_y2x8):\n        j = list_y2x8[idx_je7k]\n        idx_n1dl = (27 + -27)\n        list_hn3y = range(j+(54 + -53), N)\n        while idx_n1dl < len(list_hn3y):\n            k = list_hn3y[idx_n1dl]\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans += (7 + -6)\n            idx_n1dl = idx_n1dl + (66 + -65)\n        idx_je7k = idx_je7k + (43 + -42)\n    idx_4t5i = idx_4t5i + (69 + -68)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s590045523_to_91", "old_id": "s590045523"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nidx_2xnr = (97 + -97)\nlist_b32w = range(sqN)\nwhile idx_2xnr < len(list_b32w):\n    i = list_b32w[idx_2xnr]\n    if N % (sqN-i) == (92 + -92):\n        print(int(N/(sqN-i)+sqN-i)-(47 + -45))\n        break\n    idx_2xnr = idx_2xnr + (45 + -44)\n", "id": "ConstantUnfoldding_sample_from_s538657784_to_92", "old_id": "s538657784"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nbelow = (85 + -85)\nidx_1sr3 = (91 + -91)\nlist_n45r = range(n)\nwhile idx_1sr3 < len(list_n45r):\n    i = list_n45r[idx_1sr3]\n    below += (56 + -55)/a[i]\n    idx_1sr3 = idx_1sr3 + (30 + -29)\nprint((45 + -44)/below)\n", "id": "ConstantUnfoldding_sample_from_s001486412_to_93", "old_id": "s001486412"}
{"code": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-(100 + -99)])\nA = [(49 + -49)]+A+[(10 + -10)]\ndiff = [(29 + -29) for x in range(N)]\nidx_s8o7 = (60 + -60)\nlist_ehu3 = range((17 + -16), N+(46 + -45))\nwhile idx_s8o7 < len(list_ehu3):\n    i = list_ehu3[idx_s8o7]\n    dif = abs(A[i]-A[i-(81 + -80)])+abs(A[i]-A[i+(48 + -47)])-abs(A[i-(12 + -11)]-A[i+(60 + -59)])\n    ans += abs(A[i]-A[i-(66 + -65)])\n    diff[i-(54 + -53)] = dif\n    idx_s8o7 = idx_s8o7 + (49 + -48)\nidx_qp1b = (100 + -100)\nlist_upjk = range(N)\nwhile idx_qp1b < len(list_upjk):\n    i = list_upjk[idx_qp1b]\n    print(ans-diff[i])\n    idx_qp1b = idx_qp1b + (34 + -33)\n", "id": "ConstantUnfoldding_sample_from_s242961129_to_94", "old_id": "s242961129"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = (10 + -10)\nmaxH = (59 + -59)\nidx_efk4 = (60 + -60)\nlist_2zoi = Hs\nwhile idx_efk4 < len(list_2zoi):\n    H = list_2zoi[idx_efk4]\n    if maxH <= H:\n        ans += (86 + -85)\n        maxH = H\n    idx_efk4 = idx_efk4 + (20 + -19)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s002779582_to_95", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nidx_rasj = (34 + -34)\nlist_yosz = range(h)\nwhile idx_rasj < len(list_yosz):\n    _ = list_yosz[idx_rasj]\n    a = list(map(str, input()))\n    l.append(a)\n    idx_rasj = idx_rasj + (91 + -90)\n\ntmp = (89 + -89)\nidx_2hdw = (2 + -2)\nlist_gk86 = range(h)\nwhile idx_2hdw < len(list_gk86):\n    i = list_gk86[idx_2hdw]\n    idx_10dj = (68 + -68)\n    list_h2st = range(w)\n    while idx_10dj < len(list_h2st):\n        j = list_h2st[idx_10dj]\n        if l[i][j] == \"#\":\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n        idx_10dj = idx_10dj + (47 + -46)\n    idx_2hdw = idx_2hdw + (55 + -54)\n\n\nprint(\"Possible\")\n", "id": "ConstantUnfoldding_sample_from_s331817031_to_96", "old_id": "s331817031"}
{"code": "def solver():\n    N = int(input())\n    action = []\n    idx_cws0 = (31 + -31)\n    list_utc3 = range(N)\n    while idx_cws0 < len(list_utc3):\n        i = list_utc3[idx_cws0]\n        action.append(list(map(int, input().split())))\n        idx_cws0 = idx_cws0 + (45 + -44)\n\n    dp = [[(91 + -91) for _ in range((60 + -57))] for _ in range(N)]\n    idx_s7v0 = (43 + -43)\n    list_nqrk = range((57 + -54))\n    while idx_s7v0 < len(list_nqrk):\n        i = list_nqrk[idx_s7v0]\n        dp[(67 + -67)][i] = action[(97 + -97)][i]\n        idx_s7v0 = idx_s7v0 + (2 + -1)\n    idx_uv5k = (19 + -19)\n    list_fciy = range((92 + -91), N)\n    while idx_uv5k < len(list_fciy):\n        i = list_fciy[idx_uv5k]\n        dp[i][(98 + -98)] = max(dp[i-(31 + -30)][(89 + -88)] + action[i][(13 + -13)], dp[i-(29 + -28)][(35 + -33)] + action[i][(47 + -47)])\n        dp[i][(29 + -28)] = max(dp[i-(73 + -72)][(24 + -24)] + action[i][(57 + -56)], dp[i-(46 + -45)][(48 + -46)] + action[i][(90 + -89)])\n        dp[i][(5 + -3)] = max(dp[i-(90 + -89)][(86 + -86)] + action[i][(24 + -22)], dp[i-(50 + -49)][(69 + -68)] + action[i][(46 + -44)])\n        idx_uv5k = idx_uv5k + (45 + -44)\n    print(max(dp[N-(85 + -84)]))\n\n\nsolver()\n", "id": "ConstantUnfoldding_sample_from_s210889193_to_97", "old_id": "s210889193"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[(71 + -70)], reverse=True)\nj = (74 + -74)\nidx_b194 = (53 + -53)\nlist_sbq9 = range(n)\nwhile idx_b194 < len(list_sbq9):\n    i = list_sbq9[idx_b194]\n    if a[i] < ope[j][(39 + -38)]:\n        a[i] = ope[j][(66 + -65)]\n        ope[j][(34 + -34)] -= (59 + -58)\n        if ope[j][(11 + -11)] == (7 + -7):\n            j += (14 + -13)\n            if j == len(ope):\n                break\n    else:\n        break\n    idx_b194 = idx_b194 + (72 + -71)\nprint(sum(a))\n", "id": "ConstantUnfoldding_sample_from_s289483518_to_98", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter((35 + -34)), reverse=True)\n\nselected = info[(96 + -96):k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_hbyf = (40 + -40)\nlist_b7yg = selected\nwhile idx_hbyf < len(list_b7yg):\n    t, d = list_b7yg[idx_hbyf]\n    if t not in memo:\n        memo[t] = (28 + -27)\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n    idx_hbyf = idx_hbyf + (55 + -54)\n\ncnt_type = len(memo)\nidx_159u = (72 + -72)\nlist_6nwc = info[k:]\nwhile idx_159u < len(list_6nwc):\n    t, d = list_6nwc[idx_159u]\n    if t not in memo:\n        memo[t] = (75 + -74)\n        unselected_only.append(d)\n    idx_159u = idx_159u + (26 + -25)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-(32 + -31)]\nidx_5q27 = (36 + -36)\nlist_mai5 = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_5q27 < len(list_mai5):\n    i = list_mai5[idx_5q27]\n    cnt_type += (12 + -11)\n    sum_select += unselected_only[-(54 + -53)]\n    sum_select -= selected_chohuku[-(51 + -50)]\n    del unselected_only[-(88 + -87)]\n    del selected_chohuku[-(65 + -64)]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_5q27 = idx_5q27 + (37 + -36)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s804484425_to_99", "old_id": "s804484425"}
