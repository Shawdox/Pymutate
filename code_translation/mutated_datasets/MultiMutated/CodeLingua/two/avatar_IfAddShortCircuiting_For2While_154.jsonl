{"code": "n = int(input())\nidx_pvz6 = 0\nlist_s82i = range(n)\nwhile idx_pvz6 < len(list_s82i):\n    i = list_s82i[idx_pvz6]\n    a = int(input())\n    if a < 2 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        print(0)\n    if a >= 2 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        print(a - 2)\n    idx_pvz6 = idx_pvz6 + 1\n", "id": "For2While_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nidx_m1f3 = 0\nlist_0h38 = range(1, N)\nwhile idx_m1f3 < len(list_0h38):\n    i = list_0h38[idx_m1f3]\n    if n[pos] > n[i] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        a += 1\n        pos = i\n    idx_m1f3 = idx_m1f3 + 1\nprint(a)\n", "id": "For2While_sample_from_atcoder_ABC152_C_to_1", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nidx_hguc = 0\nlist_j420 = list(enumerate(a))\nwhile idx_hguc < len(list_j420):\n    e, i = list_j420[idx_hguc]\n    if i == 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        print(e + 1)\n        break\n    idx_hguc = idx_hguc + 1\n", "id": "For2While_sample_from_atcoder_ABC170_A_to_2", "old_id": "atcoder_ABC170_A"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_cawd = 0\nlist_c9yi = range(len(s))\nwhile idx_cawd < len(list_c9yi):\n    i = list_c9yi[idx_cawd]\n    if i >= 1 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_cawd = idx_cawd + 1\nprint(''.join(res))\n", "id": "For2While_sample_from_codeforces_147_A_to_3", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nidx_i2y6 = 0\nlist_umck = s\nwhile idx_i2y6 < len(list_umck):\n    letra = list_umck[idx_i2y6]\n    if letra in freqs and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 1\n    idx_i2y6 = idx_i2y6 + 1\nidx_t9l3 = 0\nlist_6t8s = t\nwhile idx_t9l3 < len(list_6t8s):\n    letra = list_6t8s[idx_t9l3]\n    if letra in freqt and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 1\n    idx_t9l3 = idx_t9l3 + 1\nidx_c61u = 0\nlist_csw5 = freqs.keys()\nwhile idx_c61u < len(list_csw5):\n    letra = list_csw5[idx_c61u]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    idx_c61u = idx_c61u + 1\nidx_k1gh = 0\nlist_nh64 = freqs.keys()\nwhile idx_k1gh < len(list_nh64):\n    letra = list_nh64[idx_k1gh]\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\n    idx_k1gh = idx_k1gh + 1\nprint(yay, whoops)\n", "id": "For2While_sample_from_codeforces_518_B_to_4", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = 1\n    idx_9wn8 = 0\n    list_feo6 = range(K)\n    while idx_9wn8 < len(list_feo6):\n        i = list_feo6[idx_9wn8]\n        a *= N - i\n        idx_9wn8 = idx_9wn8 + 1\n    idx_erc2 = 0\n    list_lkfp = range(K)\n    while idx_erc2 < len(list_lkfp):\n        j = list_lkfp[idx_erc2]\n        a /= j + 1\n        idx_erc2 = idx_erc2 + 1\n    return a\n\n\nans = 0\nlis = list(map(int, input().split()))\nls = []\nidx_0682 = 0\nlist_qy5e = lis\nwhile idx_0682 < len(list_qy5e):\n    a = list_qy5e[idx_0682]\n    ls.append(a % 2)\n    idx_0682 = idx_0682 + 1\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nidx_16cw = 0\nlist_xt76 = range(zero + 1)\nwhile idx_16cw < len(list_xt76):\n    j = list_xt76[idx_16cw]\n    pattern_b += combi(zero, j)\n    idx_16cw = idx_16cw + 1\ntime = 0\nwhile time <= one:\n    if time % 2 == P and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        pattern_a += combi(one, time)\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "id": "For2While_sample_from_atcoder_AGC017_A_to_5", "old_id": "atcoder_AGC017_A"}
{"code": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nidx_20pl = 0\nlist_7fks = record_of_movements\nwhile idx_20pl < len(list_7fks):\n    move = list_7fks[idx_20pl]\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        idx_1tx5 = 0\n        list_bu45 = d_movement\n        while idx_1tx5 < len(list_bu45):\n            step = list_bu45[idx_1tx5]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n            idx_1tx5 = idx_1tx5 + 1\n    else:\n        bug = True\n    if bug and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        break\n    d[x, y] = ''\n    idx_20pl = idx_20pl + 1\nif bug and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n    print('BUG')\nelse:\n    print('OK')\n", "id": "For2While_sample_from_codeforces_8_B_to_6", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nidx_cq3j = 0\nlist_3hx4 = l\nwhile idx_cq3j < len(list_3hx4):\n    i = list_3hx4[idx_cq3j]\n    if i + 1 in l and i + 2 in l and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        print('YES')\n        break\n    idx_cq3j = idx_cq3j + 1\n", "id": "For2While_sample_from_codeforces_653_A_to_7", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    idx_1ail = 0\n    list_1kfz = range(a_time + 1)\n    while idx_1ail < len(list_1kfz):\n        i = list_1kfz[idx_1ail]\n        idx_ni1g = 0\n        list_repc = range(b_time + 1)\n        while idx_ni1g < len(list_repc):\n            j = list_repc[idx_ni1g]\n            if a - da * i == x or b - db * j == x and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                print(\"YES\")\n                return \"Result Found\"\n            idx_ni1g = idx_ni1g + 1\n        idx_1ail = idx_1ail + 1\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\" and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n    print(\"NO\")\n", "id": "For2While_sample_from_codeforces_203_A_to_8", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    aaaa = True\nelif 2 ** K >= N:\n    aaaa = True\nif aaaa and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_b5cq = 0\n    list_3ely = range(N)\n    while idx_b5cq < len(list_3ely):\n        i = list_3ely[idx_b5cq]\n        if u[pointer1 + i] > u[pointer2 + i] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_b5cq = idx_b5cq + 1\n    return False\n\n\nS = get_last_dict(S)\nif K == 1 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    print(S)\nelse:\n    count = 0\n    idx_f3bw = 0\n    list_safq = S\n    while idx_f3bw < len(list_safq):\n        c = list_safq[idx_f3bw]\n        if c == S[0]:\n            count += 1\n        else:\n            break\n        idx_f3bw = idx_f3bw + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n", "id": "For2While_sample_from_atcoder_AGC037_E_to_9", "old_id": "atcoder_AGC037_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nidx_cs5l = 0\nlist_fxz6 = range(t)\nwhile idx_cs5l < len(list_fxz6):\n    i = list_fxz6[idx_cs5l]\n    if v - v2 > (t - i - 1) * d and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        a *= - 1\n        v = (t - i - 1) * d + v2\n    distance += v\n    v += a * d\n    idx_cs5l = idx_cs5l + 1\nprint(distance)\n", "id": "For2While_sample_from_codeforces_534_B_to_10", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nidx_uasi = 0\nlist_7vf8 = range(n, 0, - 1)\nwhile idx_uasi < len(list_7vf8):\n    i = list_7vf8[idx_uasi]\n    if n % i == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        n = i\n        print(i, end=' ')\n    idx_uasi = idx_uasi + 1\n", "id": "For2While_sample_from_codeforces_58_B_to_11", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == \"A\" and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0\n    numA = 0\n    idx_abfd = 0\n    list_ks58 = range(len(t))\n    while idx_abfd < len(list_ks58):\n        i = list_ks58[idx_abfd]\n        if t[i] == \"X\" and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            numA = 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        idx_abfd = idx_abfd + 1\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    solve()\n", "id": "For2While_sample_from_atcoder_AGC034_B_to_12", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_wpfg = 0\nlist_jqf7 = range(a, x + 1)\nwhile idx_wpfg < len(list_jqf7):\n    i = list_jqf7[idx_wpfg]\n    if (i <= b) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        continue\n    else:\n        idx_0okf = 0\n        list_fv4i = range(b, y + 1)\n        while idx_0okf < len(list_fv4i):\n            j = list_fv4i[idx_0okf]\n            if i > j:\n                games.append((i, j))\n            idx_0okf = idx_0okf + 1\n    idx_wpfg = idx_wpfg + 1\nprint(len(games))\nidx_vsgq = 0\nlist_pxsn = games\nwhile idx_vsgq < len(list_pxsn):\n    i = list_pxsn[idx_vsgq]\n    print(f\"{i[0]} {i[1]}\")\n    idx_vsgq = idx_vsgq + 1\n", "id": "For2While_sample_from_codeforces_242_A_to_13", "old_id": "codeforces_242_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    idx_c4or = 0\n    list_cnyg = list(enumerate(nums))\n    while idx_c4or < len(list_cnyg):\n        i, num = list_cnyg[idx_c4or]\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n        idx_c4or = idx_c4or + 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "For2While_sample_from_atcoder_AGC043_B_to_14", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = 0\nmemory = []\nidx_ulbz = 0\nlist_2l7a = range(firstline)\nwhile idx_ulbz < len(list_2l7a):\n    x = list_2l7a[idx_ulbz]\n    A, G = list(map(int, input().split()))\n    if total + A <= 500 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\n    idx_ulbz = idx_ulbz + 1\nprint(\"\".join(memory))\n", "id": "For2While_sample_from_codeforces_282_B_to_15", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            idx_csxg = 0\n            list_evh9 = combs\n            while idx_csxg < len(list_evh9):\n                x = list_evh9[idx_csxg]\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n                idx_csxg = idx_csxg + 1\n            print(s.count('1') + maximum)\n", "id": "For2While_sample_from_codeforces_327_A_to_16", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = 0\narr.sort()\nidx_pcbe = 0\nlist_ghn0 = arr\nwhile idx_pcbe < len(list_ghn0):\n    x = list_ghn0[idx_pcbe]\n    if (x % k != 0 or not x // k in different) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        different.add(x)\n    temp = max(len(different), temp)\n    idx_pcbe = idx_pcbe + 1\nprint(temp)\n", "id": "For2While_sample_from_codeforces_274_A_to_17", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nidx_rigx = 0\nlist_aioe = range(M)\nwhile idx_rigx < len(list_aioe):\n    _ = list_aioe[idx_rigx]\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\n    idx_rigx = idx_rigx + 1\nans = 0\nidx_u76w = 0\nlist_tav2 = range(N)\nwhile idx_u76w < len(list_tav2):\n    i = list_tav2[idx_u76w]\n    if balls[i][1] and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        ans += 1\n    idx_u76w = idx_u76w + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC002_B_to_18", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[0] > 15 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    print(15)\nelse:\n    idx_63ta = 0\n    list_n9qi = range(1, len(arr))\n    while idx_63ta < len(list_n9qi):\n        i = list_n9qi[idx_63ta]\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n        idx_63ta = idx_63ta + 1\n", "id": "For2While_sample_from_codeforces_673_A_to_19", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = 0\nidx_jo8s = 0\nlist_qt1y = range(n)\nwhile idx_jo8s < len(list_qt1y):\n    _ = list_qt1y[idx_jo8s]\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        c = x\n    idx_jo8s = idx_jo8s + 1\nprint(s + c)\n", "id": "For2While_sample_from_codeforces_608_A_to_20", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nidx_mzw3 = 0\nlist_oidt = range(x)\nwhile idx_mzw3 < len(list_oidt):\n    i = list_oidt[idx_mzw3]\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\n    idx_mzw3 = idx_mzw3 + 1\nif c == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    s += '1'\nprint(int(s[:: - 1]))\n", "id": "For2While_sample_from_codeforces_171_A_to_21", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nidx_2rog = 0\nlist_ies6 = range(N + 1)\nwhile idx_2rog < len(list_ies6):\n    i = list_ies6[idx_2rog]\n    ne = L[x]\n    if Hash[ne] and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = ind\n    x = ne\n    idx_2rog = idx_2rog + 1\nif flag == True and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n", "id": "For2While_sample_from_atcoder_ABC167_D_to_22", "old_id": "atcoder_ABC167_D"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nidx_94na = 0\nlist_96me = range(N)\nwhile idx_94na < len(list_96me):\n    i = list_96me[idx_94na]\n    d = (A[i] % N) % 2\n    if d % 2 != i % 2 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        cnt += 1\n    idx_94na = idx_94na + 1\nprint(cnt // 2)\n", "id": "For2While_sample_from_atcoder_AGC003_C_to_23", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nidx_cs9m = 0\nlist_nypi = s\nwhile idx_cs9m < len(list_nypi):\n    x = list_nypi[idx_cs9m]\n    if x == 'g' and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\n    idx_cs9m = idx_cs9m + 1\nprint(score)\n", "id": "For2While_sample_from_atcoder_ARC062_B_to_24", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        return 0, 0\n    seen.add(i)\n    nodes = 1\n    edges = len(g[i])\n    idx_c9wi = 0\n    list_svjw = g[i]\n    while idx_c9wi < len(list_svjw):\n        j = list_svjw[idx_c9wi]\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n        idx_c9wi = idx_c9wi + 1\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    idx_e2lu = 0\n    list_043h = range(1, n + 1)\n    while idx_e2lu < len(list_043h):\n        i = list_043h[idx_e2lu]\n        g[i] = set()\n        idx_e2lu = idx_e2lu + 1\n    idx_pjom = 0\n    list_x93h = range(m)\n    while idx_pjom < len(list_x93h):\n        _ = list_x93h[idx_pjom]\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_pjom = idx_pjom + 1\n    ans = 0\n    idx_yxzb = 0\n    list_f6uo = range(1, n + 1)\n    while idx_yxzb < len(list_f6uo):\n        i = list_f6uo[idx_yxzb]\n        if i not in seen and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            nodes, edges = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n        idx_yxzb = idx_yxzb + 1\n    if (n - ans) % 2 == 1 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        ans += 1\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "For2While_sample_from_codeforces_216_B_to_25", "old_id": "codeforces_216_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nidx_yngx = 0\nlist_pydk = range(n)\nwhile idx_yngx < len(list_pydk):\n    i = list_pydk[idx_yngx]\n    nodes.append(Node())\n    idx_yngx = idx_yngx + 1\nidx_5ebh = 0\nlist_awdj = range(n - 1)\nwhile idx_5ebh < len(list_awdj):\n    i = list_awdj[idx_5ebh]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_5ebh = idx_5ebh + 1\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        return\n    else:\n        nodeSet.add(node)\n    idx_u7sd = 0\n    list_0z7a = node.a\n    while idx_u7sd < len(list_0z7a):\n        pair = list_0z7a[idx_u7sd]\n        adjNode = pair[0]\n        dis = pair[1]\n        if (distance + dis) % 2 == 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n        idx_u7sd = idx_u7sd + 1\n\n\ntraverse(root, 0)\nidx_iraj = 0\nlist_mct2 = range(n)\nwhile idx_iraj < len(list_mct2):\n    i = list_mct2[idx_iraj]\n    node = nodes[i]\n    if node.color and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print(1)\n    else:\n        print(0)\n    idx_iraj = idx_iraj + 1\n", "id": "For2While_sample_from_atcoder_ABC126_D_to_26", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    right = [e] * (n + 1)\n    idx_4u0w = 0\n    list_qlu7 = range(n)\n    while idx_4u0w < len(list_qlu7):\n        i = list_qlu7[idx_4u0w]\n        left[i + 1] = op(left[i], array[i])\n        idx_4u0w = idx_4u0w + 1\n    idx_a6ts = 0\n    list_b2o5 = reversed(range(n))\n    while idx_a6ts < len(list_b2o5):\n        i = list_b2o5[idx_a6ts]\n        right[i] = op(right[i + 1], array[i])\n        idx_a6ts = idx_a6ts + 1\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = 0\nidx_vusx = 0\nlist_tduj = range(n)\nwhile idx_vusx < len(list_tduj):\n    i = list_tduj[idx_vusx]\n    ans = max(gcd(left[i], right[i + 1]), ans)\n    idx_vusx = idx_vusx + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC125_C_to_27", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        idx_sn14 = 0\n        list_ak3w = result\n        while idx_sn14 < len(list_ak3w):\n            r = list_ak3w[idx_sn14]\n            print(\"%s\" % r, sep='')\n            idx_sn14 = idx_sn14 + 1\n    else:\n        print(\"%s\" % result, sep='')\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n    main()\n", "id": "For2While_sample_from_atcoder_ABC151_A_to_28", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return\n    idx_opa6 = 0\n    list_xz05 = range(4)\n    while idx_opa6 < len(list_xz05):\n        j = list_xz05[idx_opa6]\n        idx_5djz = 0\n        list_ariv = range(j + 1, 4)\n        while idx_5djz < len(list_ariv):\n            k = list_ariv[idx_5djz]\n            if (nums[j] != - 1 and nums[k] != - 1) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                s = nums[j]\n                nums[j] = - 1\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = s\n                nums[k] = t\n            idx_5djz = idx_5djz + 1\n        idx_opa6 = idx_opa6 + 1\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "For2While_sample_from_codeforces_55_B_to_29", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[0]\n    arr = sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        print(int(length / arr[0]))\n        return\n    ans = 0\n    if (arr[0] == arr[1]) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        k = 0\n        idx_k0m4 = 0\n        list_0s5g = range(int(length / arr[2]) + 1)\n        while idx_k0m4 < len(list_0s5g):\n            i = list_0s5g[idx_k0m4]\n            check = length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = int(check / arr[0])\n                ans = max(ans, k + i)\n            idx_k0m4 = idx_k0m4 + 1\n    else:\n        k = 0\n        idx_tmdb = 0\n        list_6obx = range(int(length / arr[2]) + 1)\n        while idx_tmdb < len(list_6obx):\n            i = list_6obx[idx_tmdb]\n            idx_lgo4 = 0\n            list_cudz = range(int(length / arr[1]) + 1)\n            while idx_lgo4 < len(list_cudz):\n                j = list_cudz[idx_lgo4]\n                check = length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n                idx_lgo4 = idx_lgo4 + 1\n            idx_tmdb = idx_tmdb + 1\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "For2While_sample_from_codeforces_189_A_to_30", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [0] * n\nmx = arr[- 1]\nidx_yox0 = 0\nlist_1b5l = range(n - 2, - 1, - 1)\nwhile idx_yox0 < len(list_1b5l):\n    i = list_1b5l[idx_yox0]\n    ans[i] = max(0, mx - arr[i] + 1)\n    if arr[i] > mx and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        mx = arr[i]\n    idx_yox0 = idx_yox0 + 1\nprint(* ans)\n", "id": "For2While_sample_from_codeforces_581_B_to_31", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - 1\nidx_jkxi = 0\nlist_yp37 = l\nwhile idx_jkxi < len(list_yp37):\n    v = list_yp37[idx_jkxi]\n    s[v] += 1\n    if s[v] >= 2 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        f = 'No'\n    if i != - 1 and l[i][- 1] != v[0] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        f = 'No'\n    i += 1\n    idx_jkxi = idx_jkxi + 1\nprint(f)\n", "id": "For2While_sample_from_atcoder_ABC109_B_to_32", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            ans = 0\n            idx_xp3e = 0\n            list_v9nz = range(Q)\n            while idx_xp3e < len(list_v9nz):\n                i = list_v9nz[idx_xp3e]\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n                idx_xp3e = idx_xp3e + 1\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        idx_xh8q = 0\n        list_1x6k = range(last_max, M + 1)\n        while idx_xh8q < len(list_1x6k):\n            i = list_1x6k[idx_xh8q]\n            rec(A + [i])\n            idx_xh8q = idx_xh8q + 1\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_i492 = 0\n        list_ws5u = sys.stdin\n        while idx_i492 < len(list_ws5u):\n            line = list_ws5u[idx_i492]\n            idx_ifsr = 0\n            list_msxe = line.split()\n            while idx_ifsr < len(list_msxe):\n                word = list_msxe[idx_ifsr]\n                yield word\n                idx_ifsr = idx_ifsr + 1\n            idx_i492 = idx_i492 + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_q09f = 0\n    list_2a3r = range(Q)\n    while idx_q09f < len(list_2a3r):\n        i = list_2a3r[idx_q09f]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_q09f = idx_q09f + 1\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    main()\n", "id": "For2While_sample_from_atcoder_ABC165_C_to_33", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [0] * (len(soz) + 1)\nidx_s3r7 = 0\nlist_zrk9 = range(1, len(soz))\nwhile idx_s3r7 < len(list_zrk9):\n    i = list_zrk9[idx_s3r7]\n    a[i] = a[i - 1]\n    if soz[i - 1] == soz[i] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        a[i] += 1\n    idx_s3r7 = idx_s3r7 + 1\nn = int(input())\narr = []\nidx_r5zk = 0\nlist_fabg = range(n)\nwhile idx_r5zk < len(list_fabg):\n    i = list_fabg[idx_r5zk]\n    m, l = input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\n    idx_r5zk = idx_r5zk + 1\nidx_1jev = 0\nlist_5mtv = arr\nwhile idx_1jev < len(list_5mtv):\n    i = list_5mtv[idx_1jev]\n    print(i)\n    idx_1jev = idx_1jev + 1\n", "id": "For2While_sample_from_codeforces_313_B_to_34", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nidx_075b = 0\nlist_wkxc = range(1, n)\nwhile idx_075b < len(list_wkxc):\n    i = list_wkxc[idx_075b]\n    if l[i] == l[i - 1] and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\n    idx_075b = idx_075b + 1\nif high > maximum and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n    maximum = high\nprint(maximum, tower)\n", "id": "For2While_sample_from_codeforces_37_A_to_35", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    idx_hq3n = 0\n    list_3upy = range(d)\n    while idx_hq3n < len(list_3upy):\n        i = list_3upy[idx_hq3n]\n        tmp += (x[i] - y[i]) ** 2\n        idx_hq3n = idx_hq3n + 1\n    return math.sqrt(tmp)\n\n\ncount = 0\nidx_x49p = 0\nlist_csp0 = list(enumerate(points))\nwhile idx_x49p < len(list_csp0):\n    i, elm = list_csp0[idx_x49p]\n    idx_xa7w = 0\n    list_godb = range(i + 1, n)\n    while idx_xa7w < len(list_godb):\n        j = list_godb[idx_xa7w]\n        if dist(elm, points[j]).is_integer() and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            count += 1\n        idx_xa7w = idx_xa7w + 1\n    idx_x49p = idx_x49p + 1\nprint(count)\n", "id": "For2While_sample_from_atcoder_ABC133_B_to_36", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = 0\nidx_esjm = 0\nlist_eh3j = range(1, 371)\nwhile idx_esjm < len(list_eh3j):\n    i = list_eh3j[idx_esjm]\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        li.append(i)\n    if count == 2 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    idx_esjm = idx_esjm + 1\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])\n", "id": "For2While_sample_from_codeforces_672_A_to_37", "old_id": "codeforces_672_A"}
{"code": "X = int(input())\nprime = [True] * (100010)\nprime[0] = False\nprime[1] = False\nidx_xeu4 = 0\nlist_n3u6 = range(4, 100010, 2)\nwhile idx_xeu4 < len(list_n3u6):\n    i = list_n3u6[idx_xeu4]\n    prime[i] = False\n    idx_xeu4 = idx_xeu4 + 1\ni = 3\nwhile (i * i <= 100008):\n    if prime[i] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        idx_0f3e = 0\n        list_g0md = range(i + i, 100008, i)\n        while idx_0f3e < len(list_g0md):\n            j = list_g0md[idx_0f3e]\n            prime[j] = False\n            idx_0f3e = idx_0f3e + 1\n    i += 2\nidx_01df = 0\nlist_f2v8 = range(X, 100008)\nwhile idx_01df < len(list_f2v8):\n    i = list_f2v8[idx_01df]\n    if prime[i] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print(i)\n        break\n    idx_01df = idx_01df + 1\n", "id": "For2While_sample_from_atcoder_ABC149_C_to_38", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = 10000000000\n\n\ndef gen(number, four, seven):\n    if (number > limit) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return\n    if (number > 0 and four == seven) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        l.append(number)\n    gen(number * 10 + 4, four + 1, seven)\n    gen(number * 10 + 7, four, seven + 1)\n\n\ndef main():\n    gen(0, 0, 0)\n    l.sort()\n    n = int(input())\n    ans = 0\n    idx_pfdq = 0\n    list_mts9 = l\n    while idx_pfdq < len(list_mts9):\n        val = list_mts9[idx_pfdq]\n        if (val >= n) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            ans = val\n            break\n        idx_pfdq = idx_pfdq + 1\n    print(ans)\n\n\nmain()\n", "id": "For2While_sample_from_codeforces_96_B_to_39", "old_id": "codeforces_96_B"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_ab0w = 0\n    list_5vhd = range(M)\n    while idx_ab0w < len(list_5vhd):\n        i = list_5vhd[idx_ab0w]\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_ab0w = idx_ab0w + 1\n    used = [False] * N\n    ans = 0\n    idx_b2f1 = 0\n    list_w3zm = range(N)\n    while idx_b2f1 < len(list_w3zm):\n        i = list_w3zm[idx_b2f1]\n        if not used[i] and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_z23j = 0\n                list_76xp = edge[node]\n                while idx_z23j < len(list_76xp):\n                    nextnode = list_76xp[idx_z23j]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_z23j = idx_z23j + 1\n        idx_b2f1 = idx_b2f1 + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    main()\n", "id": "For2While_sample_from_atcoder_ABC126_E_to_40", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nidx_e0ba = 0\nlist_tlwe = range(N)\nwhile idx_e0ba < len(list_tlwe):\n    i = list_tlwe[idx_e0ba]\n    if V[i] - C[i] > 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    idx_e0ba = idx_e0ba + 1\nprint(sum(list))\n", "id": "For2While_sample_from_atcoder_ABC125_B_to_41", "old_id": "atcoder_ABC125_B"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_kvdj = 0\nlist_pesw = range(M)\nwhile idx_kvdj < len(list_pesw):\n    _ = list_pesw[idx_kvdj]\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\n    idx_kvdj = idx_kvdj + 1\nif M % 2 != 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n    print(- 1)\n    exit()\nQ = []\nidx_0cv2 = 0\nlist_ova0 = list(enumerate(degs))\nwhile idx_0cv2 < len(list_ova0):\n    i, d = list_ova0[idx_0cv2]\n    Q.append((d, i))\n    idx_0cv2 = idx_0cv2 + 1\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u] and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        continue\n    flag[u] = True\n    idx_5e4k = 0\n    list_uvfi = list(enumerate(edges[u]))\n    while idx_5e4k < len(list_uvfi):\n        i, v = list_uvfi[idx_5e4k]\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_5e4k = idx_5e4k + 1\n", "id": "For2While_sample_from_atcoder_AGC035_B_to_42", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    idx_hgjv = 0\n    list_9br5 = range(0, len(q) + 1)\n    while idx_hgjv < len(list_9br5):\n        i = list_9br5[idx_hgjv]\n        idx_d3jz = 0\n        list_jqub = itertools.combinations(q, i)\n        while idx_d3jz < len(list_jqub):\n            s = list_jqub[idx_d3jz]\n            idx_opsv = 0\n            list_cfmj = zip(li, p)\n            while idx_opsv < len(list_cfmj):\n                u, w = list_cfmj[idx_opsv]\n                s = set(s)\n                if len(s & set(u)) % 2 != w and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                    break\n                idx_opsv = idx_opsv + 1\n            idx_d3jz = idx_d3jz + 1\n        idx_hgjv = idx_hgjv + 1\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n    main()\n", "id": "For2While_sample_from_atcoder_ABC128_C_to_43", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nidx_vfh9 = 0\nlist_rqgd = range(n + 1)\nwhile idx_vfh9 < len(list_rqgd):\n    i = list_rqgd[idx_vfh9]\n    if i + o >= n and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        res = min(res, abs(i - arr_sum))\n    idx_vfh9 = idx_vfh9 + 1\nprint(\"%.3f\" % res)\n", "id": "For2While_sample_from_codeforces_351_A_to_44", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nidx_x8a4 = 0\nlist_w02i = range(n - 1)\nwhile idx_x8a4 < len(list_w02i):\n    i = list_w02i[idx_x8a4]\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n    idx_x8a4 = idx_x8a4 + 1\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    idx_d5ke = 0\n    list_28jq = g[node]\n    while idx_d5ke < len(list_28jq):\n        v = list_28jq[idx_d5ke]\n        if ta_dist[v] != None and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n        idx_d5ke = idx_d5ke + 1\n\n\ndef ao_dfs(node):\n    idx_ja74 = 0\n    list_9rjn = g[node]\n    while idx_ja74 < len(list_9rjn):\n        v = list_9rjn[idx_ja74]\n        if ao_dist[v] != None and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n        idx_ja74 = idx_ja74 + 1\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nidx_xkg6 = 0\nlist_yl7z = range(n)\nwhile idx_xkg6 < len(list_yl7z):\n    i = list_yl7z[idx_xkg6]\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        continue\n    res = max(res, ao_dist[i])\n    idx_xkg6 = idx_xkg6 + 1\nprint(res - 1)\n", "id": "For2While_sample_from_atcoder_ABC148_F_to_45", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_zdrq = 0\n    list_faeu = permutations\n    while idx_zdrq < len(list_faeu):\n        permutation = list_faeu[idx_zdrq]\n        total_distance = 0\n        idx_shlr = 0\n        list_0cbz = range(0, N - 1)\n        while idx_shlr < len(list_0cbz):\n            i = list_0cbz[idx_shlr]\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n            idx_shlr = idx_shlr + 1\n        distances.append(total_distance)\n        idx_zdrq = idx_zdrq + 1\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_nw1h = 0\n        list_n7mu = sys.stdin\n        while idx_nw1h < len(list_n7mu):\n            line = list_n7mu[idx_nw1h]\n            idx_5t6j = 0\n            list_jyf0 = line.split()\n            while idx_5t6j < len(list_jyf0):\n                word = list_jyf0[idx_5t6j]\n                yield word\n                idx_5t6j = idx_5t6j + 1\n            idx_nw1h = idx_nw1h + 1\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    idx_7ix3 = 0\n    list_45no = range(N)\n    while idx_7ix3 < len(list_45no):\n        i = list_45no[idx_7ix3]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_7ix3 = idx_7ix3 + 1\n    solve(N, x, y)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n    main()\n", "id": "For2While_sample_from_atcoder_ABC145_C_to_46", "old_id": "atcoder_ABC145_C"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    idx_079d = 0\n    list_o6cw = range(1, len(a))\n    while idx_079d < len(list_o6cw):\n        i = list_o6cw[idx_079d]\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return 'YES'\n        idx_079d = idx_079d + 1\n    return 'NO'\n\n\nprint(s())\n", "id": "For2While_sample_from_codeforces_108_B_to_47", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_7x8j = 0\nlist_rvt6 = s\nwhile idx_7x8j < len(list_rvt6):\n    i = list_rvt6[idx_7x8j]\n    if i in dt and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        dt[i] += 1\n    else:\n        dt[i] = 1\n    idx_7x8j = idx_7x8j + 1\ncnt = 0\nx = True\nidx_vlxm = 0\nlist_js50 = list(dt.items())\nwhile idx_vlxm < len(list_js50):\n    key, value = list_js50[idx_vlxm]\n    if value % 2 != 0 and cnt < 1 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\n    idx_vlxm = idx_vlxm + 1\nif x and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    print(\"First\")\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n", "id": "For2While_sample_from_codeforces_276_B_to_48", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nidx_dnqm = 0\nlist_u8hm = range(n)\nwhile idx_dnqm < len(list_u8hm):\n    i = list_u8hm[idx_dnqm]\n    line = str(input())\n    cake.append(line)\n    idx_h5na = 0\n    list_cw8i = line\n    while idx_h5na < len(list_cw8i):\n        j = list_cw8i[idx_h5na]\n        if (j == 'C') and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            chocCount += 1\n        idx_h5na = idx_h5na + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        idx_iqc4 = 0\n        list_ht8v = range(chocCount, chocCount - 2, - 1)\n        while idx_iqc4 < len(list_ht8v):\n            i = list_ht8v[idx_iqc4]\n            nfat *= i\n            idx_iqc4 = idx_iqc4 + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_dnqm = idx_dnqm + 1\nposCount = 0\nidx_ekyw = 0\nlist_vpqz = range(n)\nwhile idx_ekyw < len(list_vpqz):\n    j = list_vpqz[idx_ekyw]\n    idx_fykv = 0\n    list_fv5z = range(n)\n    while idx_fykv < len(list_fv5z):\n        i = list_fv5z[idx_fykv]\n        if (cake[i][j] == 'C') and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            chocCount += 1\n        idx_fykv = idx_fykv + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        idx_lz4a = 0\n        list_nxfv = range(chocCount, chocCount - 2, - 1)\n        while idx_lz4a < len(list_nxfv):\n            i = list_nxfv[idx_lz4a]\n            nfat *= i\n            idx_lz4a = idx_lz4a + 1\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\n    idx_ekyw = idx_ekyw + 1\nprint(int(happiness))\n", "id": "For2While_sample_from_codeforces_629_A_to_49", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nidx_eb1a = 0\nlist_fb6o = set(m)\nwhile idx_eb1a < len(list_fb6o):\n    i = list_fb6o[idx_eb1a]\n    if m.count(i) >= n / 2 + 1 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        possible = False\n        break\n    idx_eb1a = idx_eb1a + 1\nprint('YES' if possible else 'NO')\n", "id": "For2While_sample_from_codeforces_296_A_to_50", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\nidx_vy8z = 0\nlist_f26y = range(m)\nwhile idx_vy8z < len(list_f26y):\n    i = list_f26y[idx_vy8z]\n    r, c = map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0\n    idx_vy8z = idx_vy8z + 1\nif n % 2 and b[n // 2] and b[n + n // 2] and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    b[n // 2] = 0\nprint(sum(b))\n", "id": "For2While_sample_from_codeforces_333_B_to_51", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    idx_tfur = 0\n    list_prb0 = range(n)\n    while idx_tfur < len(list_prb0):\n        i = list_prb0[idx_tfur]\n        if ls_xyh[i][2] > 0 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n        idx_tfur = idx_tfur + 1\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    idx_brxo = 0\n    list_ldg0 = ls_xyh\n    while idx_brxo < len(list_ldg0):\n        [x, y, h] = list_ldg0[idx_brxo]\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n        idx_brxo = idx_brxo + 1\n    (xx, yy, hh) = cands[0]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "For2While_sample_from_atcoder_ABC112_C_to_52", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nidx_t25y = 0\nlist_7vi6 = range(n)\nwhile idx_t25y < len(list_7vi6):\n    i = list_7vi6[idx_t25y]\n    s = input()\n    s = list(s)\n    idx_xi86 = 0\n    list_uh5o = range(m)\n    while idx_xi86 < len(list_uh5o):\n        j = list_uh5o[idx_xi86]\n        if s[j] == '.' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            if (i + j) & 1:\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n        idx_xi86 = idx_xi86 + 1\n    l.append(s)\n    idx_t25y = idx_t25y + 1\nidx_h602 = 0\nlist_c4z5 = l\nwhile idx_h602 < len(list_c4z5):\n    c = list_c4z5[idx_h602]\n    print(\"\".join(c))\n    idx_h602 = idx_h602 + 1\n", "id": "For2While_sample_from_codeforces_445_A_to_53", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [0] * N\n    queue = deque()\n    K = - 1\n    node2color = [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 1\n    while queue:\n        q = queue.popleft()\n        color = 0\n        idx_4a51 = 0\n        list_7cr4 = G[q]\n        while idx_4a51 < len(list_7cr4):\n            nex = list_7cr4[idx_4a51]\n            if visited[nex] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n                continue\n            visited[nex] = 1\n            color += 1\n            if color == node2color[q] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                color += 1\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n            idx_4a51 = idx_4a51 + 1\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    idx_0ltj = 0\n    list_z72c = range(N - 1)\n    while idx_0ltj < len(list_z72c):\n        i = list_z72c[idx_0ltj]\n        a, b = map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0\n        idx_0ltj = idx_0ltj + 1\n    K = bfs(0, N, G, E)\n    print(K)\n    idx_t025 = 0\n    list_hais = E.values()\n    while idx_t025 < len(list_hais):\n        value = list_hais[idx_t025]\n        print(value)\n        idx_t025 = idx_t025 + 1\n\n\nmain()\n", "id": "For2While_sample_from_atcoder_ABC146_D_to_54", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nidx_2opl = 0\nlist_zvby = range(2 ** D)\nwhile idx_2opl < len(list_zvby):\n    i = list_zvby[idx_2opl]\n    score = 0\n    problem = 0\n    idx_f4ol = 0\n    list_cdkj = range(D)\n    while idx_f4ol < len(list_cdkj):\n        j = list_cdkj[idx_f4ol]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n        idx_f4ol = idx_f4ol + 1\n    if score > G and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        continue\n    left = G - score\n    idx_5x8v = 0\n    list_lhpw = range(D)\n    while idx_5x8v < len(list_lhpw):\n        j = list_lhpw[idx_5x8v]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            pass\n        else:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\n        idx_5x8v = idx_5x8v + 1\n    idx_2opl = idx_2opl + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC104_C_to_55", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nidx_zb9u = 0\nlist_gva9 = range(n)\nwhile idx_zb9u < len(list_gva9):\n    i = list_gva9[idx_zb9u]\n    if number[i] != 4 and number[i] != 7 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_zb9u = idx_zb9u + 1\nif not x and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "For2While_sample_from_codeforces_146_A_to_56", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nidx_ylnc = 0\nlist_ab4s = arre\nwhile idx_ylnc < len(list_ab4s):\n    x = list_ab4s[idx_ylnc]\n    if lowString.find(x) >= 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            idx_2aw9 = 0\n            list_87zq = range(index, index + len(x))\n            while idx_2aw9 < len(list_87zq):\n                i = list_87zq[idx_2aw9]\n                setcito.add(i)\n                idx_2aw9 = idx_2aw9 + 1\n            wat = index + 1\n    idx_ylnc = idx_ylnc + 1\noString = list(oString)\nidx_7lvu = 0\nlist_sflj = setcito\nwhile idx_7lvu < len(list_sflj):\n    i = list_sflj[idx_7lvu]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_7lvu = idx_7lvu + 1\nidx_d9vy = 0\nlist_zlak = oString\nwhile idx_d9vy < len(list_zlak):\n    x = list_zlak[idx_d9vy]\n    print(x, end=\"\")\n    idx_d9vy = idx_d9vy + 1\nprint()\n", "id": "For2While_sample_from_codeforces_95_A_to_57", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nidx_c4hp = 0\nlist_hokq = range(n)\nwhile idx_c4hp < len(list_hokq):\n    i = list_hokq[idx_c4hp]\n    k = input()\n    s.append(k)\n    idx_c4hp = idx_c4hp + 1\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nidx_cqt2 = 0\nlist_scpe = range(n)\nwhile idx_cqt2 < len(list_scpe):\n    i = list_scpe[idx_cqt2]\n    idx_btx7 = 0\n    list_9plb = range(n)\n    while idx_btx7 < len(list_9plb):\n        j = list_9plb[idx_btx7]\n        if (i == j) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            d1.append(s[i][j])\n        if (i == n - j - 1) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            rem.add(s[i][j])\n        idx_btx7 = idx_btx7 + 1\n    idx_cqt2 = idx_cqt2 + 1\nif (len(rem) != 1) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != 1):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "For2While_sample_from_codeforces_404_A_to_58", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nidx_o1nt = 0\nlist_72cn = list(enumerate(_a))\nwhile idx_o1nt < len(list_72cn):\n    i, x = list_72cn[idx_o1nt]\n    d[x] = i\n    idx_o1nt = idx_o1nt + 1\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_b0j2 = 0\n    list_iljf = range(n)\n    while idx_b0j2 < len(list_iljf):\n        i = list_iljf[idx_b0j2]\n        b[i + 1] += b[i]\n        idx_b0j2 = idx_b0j2 + 1\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    idx_7gua = 0\n    list_640j = b\n    while idx_7gua < len(list_640j):\n        x = list_640j[idx_7gua]\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_7gua = idx_7gua + 1\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "id": "For2While_sample_from_atcoder_ABC107_D_to_59", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [0] * n] for _ in [0] * n]\n    idx_z891 = 0\n    list_yxo6 = range(n)\n    while idx_z891 < len(list_yxo6):\n        i = list_yxo6[idx_z891]\n        m = a[i]\n        idx_nzqd = 0\n        list_zgio = range(n)\n        while idx_nzqd < len(list_zgio):\n            j = list_zgio[idx_nzqd]\n            k = i - j\n            if k < 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n            idx_nzqd = idx_nzqd + 1\n        idx_z891 = idx_z891 + 1\n    m = 10 ** 15\n    idx_yq8i = 0\n    list_2vn3 = list(enumerate(b))\n    while idx_yq8i < len(list_2vn3):\n        i, j = list_2vn3[idx_yq8i]\n        m = min(m, sum(j) + x * i)\n        idx_yq8i = idx_yq8i + 1\n    print(m)\n\n\nmain()\n", "id": "For2While_sample_from_atcoder_AGC004_B_to_60", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    idx_w78e = 0\n    list_c6az = range(- 1000, 1001)\n    while idx_w78e < len(list_c6az):\n        X = list_c6az[idx_w78e]\n        if A * (X ** n) == B and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            return X\n        idx_w78e = idx_w78e + 1\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "For2While_sample_from_codeforces_30_A_to_61", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < 1 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return []\n    if index <= array[0][0] and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return [(index, array[0][1])]\n    idx_4kej = 0\n    list_knay = range(len(array) - 1, 0, - 1)\n    while idx_4kej < len(list_knay):\n        _ = list_knay[idx_4kej]\n        if array[_ - 1][0] < index and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            return array[: _] + [(index, array[_][1])]\n        idx_4kej = idx_4kej + 1\n\n\ndef is_possible(K):\n    dp = [(A[0], 0)]\n    idx_e8fn = 0\n    list_3xr7 = A[1:]\n    while idx_e8fn < len(list_3xr7):\n        a = list_3xr7[idx_e8fn]\n        if a <= dp[- 1][0] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            dp = cut(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = False\n        idx_fmh0 = 0\n        list_vzc4 = range(len(dp) - 1, - 1, - 1)\n        while idx_fmh0 < len(list_vzc4):\n            j = list_vzc4[idx_fmh0]\n            if dp[j][1] < K - 1 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                dp = cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n            idx_fmh0 = idx_fmh0 + 1\n        if not is_added and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return False\n        idx_e8fn = idx_e8fn + 1\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n\n\nprint(bis(0, N))\n", "id": "For2While_sample_from_atcoder_AGC029_C_to_62", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = 0\nif a[0] > x and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    print(0)\n    exit()\nidx_is9t = 0\nlist_d4pg = a\nwhile idx_is9t < len(list_d4pg):\n    i = list_d4pg[idx_is9t]\n    if i > x and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        x = 0\n        break\n    x -= i\n    ans += 1\n    idx_is9t = idx_is9t + 1\nif x != 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n    ans -= 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC027_A_to_63", "old_id": "atcoder_AGC027_A"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 1000000007\nk = ii1()\nt = 0\nidx_2ygd = 0\nlist_kbi3 = range(1, k + 1)\nwhile idx_2ygd < len(list_kbi3):\n    i = list_kbi3[idx_2ygd]\n    t = (t % k) * 10 + 7\n    if t % k == 0 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        print(i)\n        break\n    idx_2ygd = idx_2ygd + 1\n", "id": "For2While_sample_from_atcoder_ABC174_C_to_64", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nidx_fd2p = 0\nlist_8y2f = w\nwhile idx_fd2p < len(list_8y2f):\n    i = list_8y2f[idx_fd2p]\n    if i == 1 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        print(c)\n    elif i % 2 == 0:\n        c = 3 - c\n        print(c)\n    else:\n        print(c)\n    idx_fd2p = idx_fd2p + 1\n", "id": "For2While_sample_from_codeforces_705_B_to_65", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [0] * 5\nidx_57pz = 0\nlist_sbpw = S\nwhile idx_57pz < len(list_sbpw):\n    s = list_sbpw[idx_57pz]\n    if s[0].upper() in march and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        march_lis[march.index(s[0].upper())] += 1\n    idx_57pz = idx_57pz + 1\nans = 0\nidx_h2ev = 0\nlist_scle = combinations(march_lis, 3)\nwhile idx_h2ev < len(list_scle):\n    x, y, z = list_scle[idx_h2ev]\n    ans += x * y * z\n    idx_h2ev = idx_h2ev + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC089_C_to_66", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif 1 <= int(k) and int(w) <= 1000 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    total = 0\n    idx_mwt2 = 0\n    list_em9q = range(1, int(w) + 1)\n    while idx_mwt2 < len(list_em9q):\n        i = list_em9q[idx_mwt2]\n        total += i * int(k)\n        idx_mwt2 = idx_mwt2 + 1\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "For2While_sample_from_codeforces_546_A_to_67", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = 0\nidx_zi59 = 0\nlist_tm78 = range(n)\nwhile idx_zi59 < len(list_tm78):\n    i = list_tm78[idx_zi59]\n    a = input().split()\n    q.append(a)\n    idx_zi59 = idx_zi59 + 1\nidx_b9vt = 0\nlist_ghsl = q\nwhile idx_b9vt < len(list_ghsl):\n    j = list_ghsl[idx_b9vt]\n    idx_1vus = 0\n    list_x574 = q\n    while idx_1vus < len(list_x574):\n        k = list_x574[idx_1vus]\n        if k == j and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\n        idx_1vus = idx_1vus + 1\n    idx_b9vt = idx_b9vt + 1\nprint(count)\n", "id": "For2While_sample_from_codeforces_268_A_to_68", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_bwtf = 0\nlist_s4ar = range(4)\nwhile idx_bwtf < len(list_s4ar):\n    i = list_s4ar[idx_bwtf]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_bwtf = idx_bwtf + 1\nblack = 0\nwhite = 0\ncorrect = 0\nidx_f4uq = 0\nlist_qeoy = range(3)\nwhile idx_f4uq < len(list_qeoy):\n    i = list_qeoy[idx_f4uq]\n    idx_sjcb = 0\n    list_h8b0 = range(3)\n    while idx_sjcb < len(list_h8b0):\n        j = list_h8b0[idx_sjcb]\n        if t[i][j] == '#' and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#' and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#' and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#' and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            correct = 1\n            break\n        black = 0\n        white = 0\n        idx_sjcb = idx_sjcb + 1\n    idx_f4uq = idx_f4uq + 1\nif correct == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "For2While_sample_from_codeforces_287_A_to_69", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        print(0)\n        return\n    a = [0] * (N + 1)\n    idx_ml20 = 0\n    list_dcg9 = list(enumerate(P))\n    while idx_ml20 < len(list_dcg9):\n        i, p = list_dcg9[idx_ml20]\n        a[p] = i\n        idx_ml20 = idx_ml20 + 1\n    tmp = 1\n    max_len = 1\n    idx_6lgb = 0\n    list_h59e = range(1, N)\n    while idx_6lgb < len(list_h59e):\n        i = list_h59e[idx_6lgb]\n        if a[i] < a[i + 1] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n        idx_6lgb = idx_6lgb + 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    idx_lq7s = 0\n    list_2ulk = list(enumerate(P))\n    while idx_lq7s < len(list_2ulk):\n        i, p = list_2ulk[idx_lq7s]\n        if i == 0 or P[i - 1] + 1 == p and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n        idx_lq7s = idx_lq7s + 1\n    print(N - ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    main()\n", "id": "For2While_sample_from_atcoder_AGC024_B_to_70", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = map(int, input().strip().split())\nout = [0 for _ in range(n)]\ncomp = [i + 2 for i in range(n)]\nidx_jywg = 0\nlist_ed8i = range(m)\nwhile idx_jywg < len(list_ed8i):\n    _ = list_ed8i[idx_jywg]\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - 1]\n        if out[t - 1] == 0 and t != x and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            out[t - 1] = x\n        comp[t - 1] = r + 1 if t >= x else x\n        t = next_val\n    idx_jywg = idx_jywg + 1\nprint(* out)\n", "id": "For2While_sample_from_codeforces_356_A_to_71", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nidx_547d = 0\nlist_4gmw = range(N)\nwhile idx_547d < len(list_4gmw):\n    x = list_4gmw[idx_547d]\n    if S[x] == 'L' and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == 'L' and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R' and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U' and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_547d = idx_547d + 1\nif Judge and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n    print('NO')\nelse:\n    print('YES')\n", "id": "For2While_sample_from_atcoder_AGC033_B_to_72", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nidx_xsl4 = 0\nlist_y952 = list(enumerate(a))\nwhile idx_xsl4 < len(list_y952):\n    i, a0 = list_y952[idx_xsl4]\n    if abs(a0) > max_val and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    idx_xsl4 = idx_xsl4 + 1\nif max_sign == 0 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n    print(0)\nelif max_sign == 1:\n    print(2 * N - 1)\n    idx_6vqf = 0\n    list_9j71 = range(N)\n    while idx_6vqf < len(list_9j71):\n        i = list_9j71[idx_6vqf]\n        print(max_index + 1, i + 1)\n        idx_6vqf = idx_6vqf + 1\n    idx_flze = 0\n    list_s8e5 = range(N - 1)\n    while idx_flze < len(list_s8e5):\n        i = list_s8e5[idx_flze]\n        print(i + 1, i + 2)\n        idx_flze = idx_flze + 1\nelse:\n    print(2 * N - 1)\n    idx_2478 = 0\n    list_6uwd = range(N)\n    while idx_2478 < len(list_6uwd):\n        i = list_6uwd[idx_2478]\n        print(max_index + 1, i + 1)\n        idx_2478 = idx_2478 + 1\n    idx_wty0 = 0\n    list_ywzl = range(1, N)[:: - 1]\n    while idx_wty0 < len(list_ywzl):\n        i = list_ywzl[idx_wty0]\n        print(i + 1, i)\n        idx_wty0 = idx_wty0 + 1\n", "id": "For2While_sample_from_atcoder_ARC086_B_to_73", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\nidx_m7ts = 0\nlist_5l64 = range(len(x))\nwhile idx_m7ts < len(list_5l64):\n    i = list_5l64[idx_m7ts]\n    x[i] = int(x[i])\n    idx_m7ts = idx_m7ts + 1\nidx_3nzv = 0\nlist_450i = range(len(x) - 1)\nwhile idx_3nzv < len(list_450i):\n    a = list_450i[idx_3nzv]\n    if x[a] >= x[a + 1] and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        q = int((x[a] - x[a + 1]) / d + 1)\n        m = m + q\n        x[a + 1] = x[a + 1] + q * d\n    idx_3nzv = idx_3nzv + 1\nprint(m)\n", "id": "For2While_sample_from_codeforces_11_A_to_74", "old_id": "codeforces_11_A"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        return 0\n    ans = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    idx_utwn = 0\n    list_tlc4 = '753'\n    while idx_utwn < len(list_tlc4):\n        i = list_tlc4[idx_utwn]\n        ans += aaa(n + i)\n        idx_utwn = idx_utwn + 1\n    return ans\n\n\nprint(aaa('0'))\n", "id": "For2While_sample_from_atcoder_ABC114_C_to_75", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n    print(n)\nelse:\n    cnt = 0\n    idx_0v9h = 0\n    list_jguw = range(n)\n    while idx_0v9h < len(list_jguw):\n        i = list_jguw[idx_0v9h]\n        idx_wn53 = 0\n        list_74rb = range(n - i)\n        while idx_wn53 < len(list_74rb):\n            j = list_74rb[idx_wn53]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n            idx_wn53 = idx_wn53 + 1\n        idx_0v9h = idx_0v9h + 1\n    print(2 * n - cnt)\n", "id": "For2While_sample_from_atcoder_AGC006_A_to_76", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        idx_xkwj = 0\n        list_qui9 = data\n        while idx_xkwj < len(list_qui9):\n            number = list_qui9[idx_xkwj]\n            if len(number) > 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                yield (number)\n            idx_xkwj = idx_xkwj + 1\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nidx_x7bw = 0\nlist_nvdt = range(0, N - 1)\nwhile idx_x7bw < len(list_nvdt):\n    i = list_nvdt[idx_x7bw]\n    if S[i] != S[i + 1] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        seg_cnt += 1\n    idx_x7bw = idx_x7bw + 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC140_D_to_77", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_5ria = 0\nlist_wxpm = range(len(lista))\nwhile idx_5ria < len(list_wxpm):\n    i = list_wxpm[idx_5ria]\n    if i == 0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0] and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n    idx_5ria = idx_5ria + 1\n", "id": "For2While_sample_from_codeforces_567_A_to_78", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_aof2 = 0\nlist_pmze = range(n)\nwhile idx_aof2 < len(list_pmze):\n    i = list_pmze[idx_aof2]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_aof2 = idx_aof2 + 1\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if r >= - d and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "For2While_sample_from_atcoder_ABC137_D_to_79", "old_id": "atcoder_ABC137_D"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nidx_ik8a = 0\nlist_g74h = range(len(arr))\nwhile idx_ik8a < len(list_g74h):\n    i = list_g74h[idx_ik8a]\n    idx_cjx2 = 0\n    list_twen = range(len(arr))\n    while idx_cjx2 < len(list_twen):\n        j = list_twen[idx_cjx2]\n        if i == j and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            continue\n        idx_e8z9 = 0\n        list_d58n = range(len(arr))\n        while idx_e8z9 < len(list_d58n):\n            k = list_d58n[idx_e8z9]\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                print(k + 1, j + 1, i + 1)\n                exit()\n            idx_e8z9 = idx_e8z9 + 1\n        idx_cjx2 = idx_cjx2 + 1\n    idx_ik8a = idx_ik8a + 1\nprint(- 1)\n", "id": "For2While_sample_from_codeforces_31_A_to_80", "old_id": "codeforces_31_A"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n\nn, * a = map(int, open(0).read().split())\n* par, = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nidx_4gvo = 0\nlist_1y5j = list(enumerate(a))\nwhile idx_4gvo < len(list_1y5j):\n    i, t = list_1y5j[idx_4gvo]\n    b[t - 1] = i\n    idx_4gvo = idx_4gvo + 1\nc = 0\nidx_g26j = 0\nlist_h7cq = b[:: - 1]\nwhile idx_g26j < len(list_h7cq):\n    k = list_h7cq[idx_g26j]\n    l = r = 1\n    if k > 0 and a[k - 1] > a[k] and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    c += l * r * a[k]\n    idx_g26j = idx_g26j + 1\nprint(c)\n", "id": "For2While_sample_from_atcoder_AGC005_B_to_81", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = []\nidx_n3bq = 0\nlist_ds50 = range(5)\nwhile idx_n3bq < len(list_ds50):\n    _ = list_ds50[idx_n3bq]\n    m = input()\n    e = int(m[- 1])\n    if e == 0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        e = 10\n    menu.append([int(m), e])\n    idx_n3bq = idx_n3bq + 1\nmenu.sort(key=lambda x: x[1])\nans = 0\nidx_1kid = 0\nlist_dias = menu[1:]\nwhile idx_1kid < len(list_dias):\n    m = list_dias[idx_1kid]\n    ans += math.ceil(m[0] / 10) * 10\n    idx_1kid = idx_1kid + 1\nprint(ans + menu[0][0])\n", "id": "For2While_sample_from_atcoder_ABC123_B_to_82", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n    print('YES')\n    idx_u69y = 0\n    list_7w4o = range(n)\n    while idx_u69y < len(list_7w4o):\n        i = list_7w4o[idx_u69y]\n        idx_jv60 = 0\n        list_mfkl = range(n)\n        while idx_jv60 < len(list_mfkl):\n            j = list_mfkl[idx_jv60]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n            idx_jv60 = idx_jv60 + 1\n        print()\n        idx_u69y = idx_u69y + 1\nelse:\n    print('NO')\n", "id": "For2While_sample_from_codeforces_544_B_to_83", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        idx_0x7q = 0\n        list_qj3r = range(self.t)\n        while idx_0x7q < len(list_qj3r):\n            _ = list_qj3r[idx_0x7q]\n            self.queries.append([int(x) for x in input().split(\" \")])\n            idx_0x7q = idx_0x7q + 1\n\n    def process_task(self):\n        res = []\n        idx_8ct3 = 0\n        list_8w2j = self.queries\n        while idx_8ct3 < len(list_8w2j):\n            query = list_8w2j[idx_8ct3]\n            k = query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n            idx_8ct3 = idx_8ct3 + 1\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "For2While_sample_from_codeforces_397_B_to_84", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nidx_9liz = 0\nlist_c3ei = l\nwhile idx_9liz < len(list_c3ei):\n    i = list_c3ei[idx_9liz]\n    if i > c and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        c += 1\n    idx_9liz = idx_9liz + 1\nprint(c + 1)\n", "id": "For2While_sample_from_codeforces_682_B_to_85", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        A -= 1\n    if T == U and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_am05 = 0\n        list_01cz = sys.stdin\n        while idx_am05 < len(list_01cz):\n            line = list_01cz[idx_am05]\n            idx_9olj = 0\n            list_p0ys = line.split()\n            while idx_9olj < len(list_p0ys):\n                word = list_p0ys[idx_9olj]\n                yield word\n                idx_9olj = idx_9olj + 1\n            idx_am05 = idx_am05 + 1\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n    main()\n", "id": "For2While_sample_from_atcoder_ABC154_A_to_86", "old_id": "atcoder_ABC154_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [0] * (n + 1), 0, 0, 0\ng = [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        idx_rk0s = 0\n        list_rhwk = g[u]\n        while idx_rk0s < len(list_rhwk):\n            i = list_rhwk[idx_rk0s]\n            stk.put((i, 3 - col))\n            idx_rk0s = idx_rk0s + 1\n    return flag\nidx_tnx8 = 0\nlist_086s = range(m)\nwhile idx_tnx8 < len(list_086s):\n    i = list_086s[idx_tnx8]\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    idx_tnx8 = idx_tnx8 + 1\nidx_l4mk = 0\nlist_6q7k = range(1, n + 1)\nwhile idx_l4mk < len(list_6q7k):\n    i = list_6q7k[idx_l4mk]\n    if vis[i] == 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\n    idx_l4mk = idx_l4mk + 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "For2While_sample_from_atcoder_AGC011_C_to_87", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_63fz = 0\nlist_jnci = range(n)\nwhile idx_63fz < len(list_jnci):\n    k = list_jnci[idx_63fz]\n    if k + 1 in lista and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n    idx_63fz = idx_63fz + 1\n", "id": "For2While_sample_from_codeforces_421_A_to_88", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_4g23 = 0\n    list_0ca4 = range(4)\n    while idx_4g23 < len(list_0ca4):\n        i = list_0ca4[idx_4g23]\n        t = list(last4)\n        if i >= 1 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            t[i], t[i - 1] = t[i - 1], t[i]\n        if ''.join(t).count('AGC') >= 1 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            return False\n        idx_4g23 = idx_4g23 + 1\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur] and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        return memo[cur][last3]\n    if cur == n and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return 1\n    ret = 0\n    idx_qxcs = 0\n    list_ucgf = \"ACGT\"\n    while idx_qxcs < len(list_ucgf):\n        c = list_ucgf[idx_qxcs]\n        if ok(last3 + c) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            ret = (ret + dfs(cur + 1, last3[1:] + c)) % mod\n        idx_qxcs = idx_qxcs + 1\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))\n", "id": "For2While_sample_from_atcoder_ABC122_D_to_89", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nidx_znkg = 0\nlist_qpxo = range(n)\nwhile idx_znkg < len(list_qpxo):\n    i = list_qpxo[idx_znkg]\n    if (x - w[i]) / (n - 1) == w[i] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        d.append(i + 1)\n    idx_znkg = idx_znkg + 1\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "For2While_sample_from_codeforces_134_A_to_90", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_ib50 = 0\nlist_d3lb = range(len(a) - 1, - 1, - 1)\nwhile idx_ib50 < len(list_d3lb):\n    i = list_d3lb[idx_ib50]\n    if (a[i] == ' ' or a[i] == '?') and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    idx_ib50 = idx_ib50 + 1\n", "id": "For2While_sample_from_codeforces_49_A_to_91", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = 0\nidx_9pqu = 0\nlist_ac38 = range(n)\nwhile idx_9pqu < len(list_ac38):\n    i = list_ac38[idx_9pqu]\n    if i + 1 & 1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        t += 1\n    idx_9pqu = idx_9pqu + 1\nprint(t / n)\n", "id": "For2While_sample_from_atcoder_ABC142_A_to_92", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    idx_u94s = 0\n    list_17ob = links[v]\n    while idx_u94s < len(list_17ob):\n        u = list_17ob[idx_u94s]\n        if u == 0 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n        idx_u94s = idx_u94s + 1\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        height_from_leaf = 0\n        cut_count += 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nidx_ykma = 0\nlist_2psm = list(enumerate(aaa))\nwhile idx_ykma < len(list_2psm):\n    i, a = list_2psm[idx_ykma]\n    a -= 1\n    links[a].add(i)\n    idx_ykma = idx_ykma + 1\n_, ans = dfs(links, n, k, 0, 0)\nif aaa[0] != 1 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    ans += 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_AGC004_D_to_93", "old_id": "atcoder_AGC004_D"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[0] == 2 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\nif X == 1 or X == N * 2 - 1 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_l2nk = 0\n    list_het2 = xs\n    while idx_l2nk < len(list_het2):\n        x = list_het2[idx_l2nk]\n        print(x)\n        idx_l2nk = idx_l2nk + 1\n", "id": "For2While_sample_from_atcoder_AGC006_B_to_94", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_eny3 = 0\n    list_72tw = lis\n    while idx_eny3 < len(list_72tw):\n        i = list_72tw[idx_eny3]\n        if (i % mid == 0) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            k += 1\n        k -= (i // mid)\n        idx_eny3 = idx_eny3 + 1\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if (check(lis, k, mid)) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        ans = mid\n        b = mid - 1\n    else:\n        a = mid + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC174_E_to_95", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = 0\nidx_nwc4 = 0\nlist_n7ev = range(n)\nwhile idx_nwc4 < len(list_n7ev):\n    i = list_n7ev[idx_nwc4]\n    l1 = list(map(int, input().split()))\n    if sum(l1) > 1 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        c = c + 1\n    idx_nwc4 = idx_nwc4 + 1\nprint(c)\n", "id": "For2While_sample_from_codeforces_231_A_to_96", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nidx_tu9c = 0\nlist_vfd5 = range(2, __N + 1)\nwhile idx_tu9c < len(list_vfd5):\n    i = list_vfd5[idx_tu9c]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_tu9c = idx_tu9c + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    idx_7xpt = 0\n    list_hw20 = range(kumi + 1)\n    while idx_7xpt < len(list_hw20):\n        p = list_hw20[idx_7xpt]\n        if p > N and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_7xpt = idx_7xpt + 1\n    return ans\n\n\nans = []\nidx_zi78 = 0\nlist_1nos = range(2, 2 * K + 1)\nwhile idx_zi78 < len(list_1nos):\n    i = list_1nos[idx_zi78]\n    if i <= K + 1 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    idx_zi78 = idx_zi78 + 1\n", "id": "For2While_sample_from_atcoder_ARC102_C_to_97", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nidx_rs2l = 0\nlist_usvk = range(1, n + 1)\nwhile idx_rs2l < len(list_usvk):\n    i = list_usvk[idx_rs2l]\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    idx_rs2l = idx_rs2l + 1\nanswer = QR * (n - 1) + sum_el[n] * R\nidx_bd4v = 0\nlist_7efg = range(1, n + 1)\nwhile idx_bd4v < len(list_7efg):\n    i = list_7efg[idx_bd4v]\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        energy = energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - 1) * QR\n    if energy < answer and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        answer = energy\n    idx_bd4v = idx_bd4v + 1\nprint(answer)\n", "id": "For2While_sample_from_codeforces_354_A_to_98", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nidx_q52g = 0\nlist_chfv = [l, r, first, second]\nwhile idx_q52g < len(list_chfv):\n    i = list_chfv[idx_q52g]\n    if i >= l and i <= r and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        curr = i\n        rev = ''\n        idx_f6iq = 0\n        list_rip0 = str(curr)\n        while idx_f6iq < len(list_rip0):\n            k = list_rip0[idx_f6iq]\n            rev += str(9 - int(k))\n            idx_f6iq = idx_f6iq + 1\n        ans = max(ans, int(rev) * curr)\n    idx_q52g = idx_q52g + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_86_A_to_99", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open(0).read().split())\nl.sort()\nans = 0\nidx_mqkt = 0\nlist_uxq6 = range(n)\nwhile idx_mqkt < len(list_uxq6):\n    i = list_uxq6[idx_mqkt]\n    idx_4uxa = 0\n    list_cv9i = range(i + 1, n)\n    while idx_4uxa < len(list_cv9i):\n        j = list_cv9i[idx_4uxa]\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            tmp -= 1\n        if left <= j < right and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            tmp -= 1\n        ans += tmp\n        idx_4uxa = idx_4uxa + 1\n    idx_mqkt = idx_mqkt + 1\nprint(ans // 3)\n", "id": "For2While_sample_from_atcoder_ABC143_D_to_100", "old_id": "atcoder_ABC143_D"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    idx_n45c = 0\n    list_5cth = range(N)\n    while idx_n45c < len(list_5cth):\n        i = list_5cth[idx_n45c]\n        if A[i] < 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            tot -= 1\n        idx_n45c = idx_n45c + 1\n    tot //= 2\n    if tot < K and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "For2While_sample_from_atcoder_ABC155_D_to_101", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = 1, 0\nidx_rod6 = 0\nlist_emr1 = re.split(\"[.?!]\", input())\nwhile idx_rod6 < len(list_emr1):\n    s = list_emr1[idx_rod6]\n    s = s.strip() + '.'\n    L = len(s)\n    if L > 1 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\n    idx_rod6 = idx_rod6 + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_70_B_to_102", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nidx_31tf = 0\nlist_mhe8 = m[1:]\nwhile idx_31tf < len(list_mhe8):\n    i = list_mhe8[idx_31tf]\n    if i[1] > a[1] and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        print('Happy Alex')\n        break\n    a = i\n    idx_31tf = idx_31tf + 1\n", "id": "For2While_sample_from_codeforces_456_A_to_103", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_wouv = 0\n    list_f3wa = range(b)\n    while idx_wouv < len(list_f3wa):\n        i = list_f3wa[idx_wouv]\n        tot.append(l[i * a: i * a + a])\n        idx_wouv = idx_wouv + 1\n    idx_whbk = 0\n    list_zgos = zip(* tot)\n    while idx_whbk < len(list_zgos):\n        i = list_zgos[idx_whbk]\n        if sum((i)) == b and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            return True\n        idx_whbk = idx_whbk + 1\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_09kv = 0\n    list_5iw4 = x\n    while idx_09kv < len(list_5iw4):\n        i = list_5iw4[idx_09kv]\n        if i == 'O' and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            s.append(0)\n        else:\n            s.append(1)\n        idx_09kv = idx_09kv + 1\n    idx_tl12 = 0\n    list_5413 = range(1, 13)\n    while idx_tl12 < len(list_5413):\n        i = list_5413[idx_tl12]\n        if 12 % i == 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_tl12 = idx_tl12 + 1\n    print(len(tot), end=' ')\n    idx_ibg2 = 0\n    list_uwjv = sorted(tot)\n    while idx_ibg2 < len(list_uwjv):\n        a, b = list_uwjv[idx_ibg2]\n        print(f'{a}x{b}', end=' ')\n        idx_ibg2 = idx_ibg2 + 1\n    print()\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n    idx_4rmn = 0\n    list_ub76 = range(inp())\n    while idx_4rmn < len(list_ub76):\n        i = list_ub76[idx_4rmn]\n        solve()\n        idx_4rmn = idx_4rmn + 1\n", "id": "For2While_sample_from_codeforces_400_A_to_104", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    idx_58pd = 0\n    list_bmu0 = range(len(A) - 2, len(A) - 2 * n - 1, - 2)\n    while idx_58pd < len(list_bmu0):\n        i = list_bmu0[idx_58pd]\n        ans += A[i]\n        idx_58pd = idx_58pd + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n    main()\n", "id": "For2While_sample_from_atcoder_AGC012_A_to_105", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = 0\nidx_nsw3 = 0\nlist_i81a = range(n)\nwhile idx_nsw3 < len(list_i81a):\n    i = list_i81a[idx_nsw3]\n    x = input()\n    a, b = 0, 0\n    idx_iw61 = 0\n    list_rqyb = s\n    while idx_iw61 < len(list_rqyb):\n        j = list_rqyb[idx_iw61]\n        if j == x[0] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = ans + min(a, b)\n            a, b = 0, 0\n        idx_iw61 = idx_iw61 + 1\n    ans = ans + min(a, b)\n    idx_nsw3 = idx_nsw3 + 1\nprint(ans)\n", "id": "For2While_sample_from_codeforces_154_A_to_106", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nidx_k2uv = 0\nlist_4wor = range(n)\nwhile idx_k2uv < len(list_4wor):\n    j = list_4wor[idx_k2uv]\n    idx_vjkp = 0\n    list_9rbl = range(n)\n    while idx_vjkp < len(list_9rbl):\n        p = list_9rbl[idx_vjkp]\n        if (0 == M[p]) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            print(p + 1, end=' ')\n            break\n        idx_vjkp = idx_vjkp + 1\n    idx_8tqb = 0\n    list_rusy = range(p + 1 - k)\n    while idx_8tqb < len(list_rusy):\n        l = list_rusy[idx_8tqb]\n        M[l] -= 1\n        idx_8tqb = idx_8tqb + 1\n    M[p] -= 1\n    idx_k2uv = idx_k2uv + 1\n", "id": "For2While_sample_from_codeforces_67_B_to_107", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_rqws = 0\n    list_zlyr = sequence\n    while idx_rqws < len(list_zlyr):\n        value = list_zlyr[idx_rqws]\n        y = f(value)\n        if y not in storage and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_rqws = idx_rqws + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            y += 1\n        n //= 2\n    return y\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n    print(main())\n", "id": "For2While_sample_from_codeforces_272_B_to_108", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nidx_xheq = 0\nlist_i59v = s\nwhile idx_xheq < len(list_i59v):\n    c = list_i59v[idx_xheq]\n    count[ord(c) - ord(\"A\")] += 1\n    idx_xheq = idx_xheq + 1\ncount.sort(reverse=True)\nres = 0\nidx_3y4z = 0\nlist_n4my = range(26)\nwhile idx_3y4z < len(list_n4my):\n    i = list_n4my[idx_3y4z]\n    if count[i] >= k and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\n    idx_3y4z = idx_3y4z + 1\nprint(res)\n", "id": "For2While_sample_from_codeforces_462_B_to_109", "old_id": "codeforces_462_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_524s = 0\nlist_a8p2 = Number_i\nwhile idx_524s < len(list_a8p2):\n    i = list_a8p2[idx_524s]\n    Number_iMN.append(i * M / N)\n    idx_524s = idx_524s + 1\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_m4ca = 0\nlist_5uv4 = Kaburi_j\nwhile idx_m4ca < len(list_5uv4):\n    j = list_5uv4[idx_m4ca]\n    Kaburi_i.append(int(j * N / M))\n    idx_m4ca = idx_m4ca + 1\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        pass\n    else:\n        Flag = 1\n        break\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nif Flag == 1 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    print(- 1)\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "For2While_sample_from_atcoder_AGC028_A_to_110", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    idx_kohm = 0\n    list_bp8c = list(enumerate(s[:: - 1]))\n    while idx_kohm < len(list_bp8c):\n        i, c = list_bp8c[idx_kohm]\n        cc = na + int(c)\n        na = 0\n        if cc <= 4 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        idx_kohm = idx_kohm + 1\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    idx_w7p5 = 0\n    list_jswx = s[:: - 1]\n    while idx_w7p5 < len(list_jswx):\n        c = list_jswx[idx_w7p5]\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_w7p5 = idx_w7p5 + 1\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_pic8 = 0\n    list_wnls = input_l\n    while idx_pic8 < len(list_wnls):\n        l = list_wnls[idx_pic8]\n        yield l\n        idx_pic8 = idx_pic8 + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "For2While_sample_from_atcoder_ABC155_E_to_111", "old_id": "atcoder_ABC155_E"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - 1].split()\nw = Counter(s)\ns = s[:: - 1]\nc, a = - 1, 0\nidx_f1o8 = 0\nlist_xthi = w\nwhile idx_f1o8 < len(list_xthi):\n    i = list_xthi[idx_f1o8]\n    if w[i] == max(w.values()) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\n    idx_f1o8 = idx_f1o8 + 1\nprint(a)\n", "id": "For2While_sample_from_codeforces_637_A_to_112", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        total = 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = a % b\n            if a > 0:\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        total = 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = b % a\n            if b > 0:\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return 1\n\n\nn = int(input())\nlst = []\nidx_a7ne = 0\nlist_q9fb = range(0, n)\nwhile idx_a7ne < len(list_q9fb):\n    i = list_q9fb[idx_a7ne]\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\n    idx_a7ne = idx_a7ne + 1\nidx_2mos = 0\nlist_93et = lst\nwhile idx_2mos < len(list_93et):\n    i = list_93et[idx_2mos]\n    print(i)\n    idx_2mos = idx_2mos + 1\n", "id": "For2While_sample_from_codeforces_267_A_to_113", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][- 1] < key and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nidx_xeg3 = 0\nlist_ke70 = range(N)\nwhile idx_xeg3 < len(list_ke70):\n    _ = list_ke70[idx_xeg3]\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\n    idx_xeg3 = idx_xeg3 + 1\nprint(len(ans))\n", "id": "For2While_sample_from_atcoder_ABC134_E_to_114", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nidx_4js5 = 0\nlist_s6wx = lst\nwhile idx_4js5 < len(list_s6wx):\n    i = list_s6wx[idx_4js5]\n    if (i & 1) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        od += 1\n    idx_4js5 = idx_4js5 + 1\nsum = 0\nok = 0\nidx_52hr = 0\nlist_18lg = range(n)\nwhile idx_52hr < len(list_18lg):\n    i = list_18lg[idx_52hr]\n    if (lst[i] % 2 == 0) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\n    idx_52hr = idx_52hr + 1\nprint(sum)\n", "id": "For2While_sample_from_codeforces_621_A_to_115", "old_id": "codeforces_621_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = 0\n    idx_46jr = 0\n    list_3ryl = range(1, math.ceil(n / 2) + 1)\n    while idx_46jr < len(list_3ryl):\n        step = list_3ryl[idx_46jr]\n        idx_5lta = 0\n        list_nwtr = range(n - 2 * step)\n        while idx_5lta < len(list_nwtr):\n            i = list_nwtr[idx_5lta]\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                sum = sum + 1\n            idx_5lta = idx_5lta + 1\n        idx_46jr = idx_46jr + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "For2While_sample_from_atcoder_ABC162_D_to_116", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    idx_qvcz = 0\n    list_xyeb = range(N)\n    while idx_qvcz < len(list_xyeb):\n        i = list_xyeb[idx_qvcz]\n        j = 0\n        jM = len(cur)\n        idx_i0ts = 0\n        list_jf25 = range(len(S))\n        while idx_i0ts < len(list_jf25):\n            k = list_jf25[idx_i0ts]\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_i0ts = idx_i0ts + 1\n        cur.sort(reverse=True)\n        idx_qvcz = idx_qvcz + 1\n    return (\"Yes\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n    print(main())\n", "id": "For2While_sample_from_atcoder_ABC140_F_to_117", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nidx_l97r = 0\nlist_qloy = range(n)\nwhile idx_l97r < len(list_qloy):\n    i = list_qloy[idx_l97r]\n    if i == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            idx_zau0 = 0\n            list_0r2k = range(10)\n            while idx_zau0 < len(list_0r2k):\n                j = list_0r2k[idx_zau0]\n                dp[i][j] += 1\n                idx_zau0 = idx_zau0 + 1\n    else:\n        if S[i] != '?':\n            idx_9v6p = 0\n            list_2fv4 = range(13)\n            while idx_9v6p < len(list_2fv4):\n                k = list_2fv4[idx_9v6p]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_9v6p = idx_9v6p + 1\n        else:\n            idx_z95i = 0\n            list_0en6 = range(10)\n            while idx_z95i < len(list_0en6):\n                j = list_0en6[idx_z95i]\n                idx_h7q5 = 0\n                list_3ml1 = range(13)\n                while idx_h7q5 < len(list_3ml1):\n                    k = list_3ml1[idx_h7q5]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_h7q5 = idx_h7q5 + 1\n                idx_z95i = idx_z95i + 1\n        idx_1aq2 = 0\n        list_qwz8 = range(13)\n        while idx_1aq2 < len(list_qwz8):\n            k = list_qwz8[idx_1aq2]\n            dp[i][k] %= mod\n            idx_1aq2 = idx_1aq2 + 1\n    idx_l97r = idx_l97r + 1\nprint(dp[n - 1][5])\n", "id": "For2While_sample_from_atcoder_ABC135_D_to_118", "old_id": "atcoder_ABC135_D"}
{"code": "s = str(input())\nmy_str = ''\nidx_slmz = 0\nlist_eyw0 = s\nwhile idx_slmz < len(list_eyw0):\n    c = list_eyw0[idx_slmz]\n    if c == '0' or c == '1' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\n    idx_slmz = idx_slmz + 1\nprint(my_str)\n", "id": "For2While_sample_from_atcoder_ABC043_B_to_119", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nidx_tk2h = 0\nlist_d21f = w\nwhile idx_tk2h < len(list_d21f):\n    i = list_d21f[idx_tk2h]\n    if i == 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    idx_tk2h = idx_tk2h + 1\nprint(c // 2)\n", "id": "For2While_sample_from_codeforces_131_B_to_120", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_nbqe = 0\nlist_axed = range(n)\nwhile idx_nbqe < len(list_axed):\n    i = list_axed[idx_nbqe]\n    if lst[i] not in l and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] += 1\n    idx_nbqe = idx_nbqe + 1\nres = 0\nidx_7m0b = 0\nlist_9vbi = range(n)\nwhile idx_7m0b < len(list_9vbi):\n    i = list_9vbi[idx_7m0b]\n    if l[lst[i]] > 1 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\n    idx_7m0b = idx_7m0b + 1\nprint(res)\n", "id": "For2While_sample_from_codeforces_609_B_to_121", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_803v = 0\n    list_mp14 = list(enumerate(it))\n    while idx_803v < len(list_mp14):\n        i, e = list_mp14[idx_803v]\n        if l <= i < r and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            yield e\n        elif l >= r:\n            break\n        idx_803v = idx_803v + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        a.append(n)\n    return a\n    if len(arr) == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nidx_6y3h = 0\nlist_2u6h = list(fac.items())\nwhile idx_6y3h < len(list_2u6h):\n    p, e = list_2u6h[idx_6y3h]\n    x = e\n    idx_bgxq = 0\n    list_zht5 = range(1, 99999999)\n    while idx_bgxq < len(list_zht5):\n        i = list_zht5[idx_bgxq]\n        if x >= i and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            x -= i\n            ans += 1\n        else:\n            break\n        idx_bgxq = idx_bgxq + 1\n    idx_6y3h = idx_6y3h + 1\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC169_D_to_122", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_3o4s = 0\nlist_nu71 = range(0, n)\nwhile idx_3o4s < len(list_nu71):\n    i = list_nu71[idx_3o4s]\n    if i % 2 == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_3o4s = idx_3o4s + 1\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nidx_bdq3 = 0\nlist_2lgf = a\nwhile idx_bdq3 < len(list_2lgf):\n    i = list_2lgf[idx_bdq3]\n    cnta[i] += 1\n    idx_bdq3 = idx_bdq3 + 1\nidx_pfud = 0\nlist_i3zu = a\nwhile idx_pfud < len(list_i3zu):\n    i = list_i3zu[idx_pfud]\n    if maxCnta < cnta[i] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        vala = i\n        maxCnta = cnta[i]\n    idx_pfud = idx_pfud + 1\nidx_gn12 = 0\nlist_4tc7 = a\nwhile idx_gn12 < len(list_4tc7):\n    i = list_4tc7[idx_gn12]\n    if maxCnta1 < cnta[i] and vala != i and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_gn12 = idx_gn12 + 1\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nidx_cd43 = 0\nlist_m1ue = b\nwhile idx_cd43 < len(list_m1ue):\n    i = list_m1ue[idx_cd43]\n    cntb[i] += 1\n    idx_cd43 = idx_cd43 + 1\nidx_ugas = 0\nlist_9gqd = b\nwhile idx_ugas < len(list_9gqd):\n    i = list_9gqd[idx_ugas]\n    if maxCntb < cntb[i] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        valb = i\n        maxCntb = cntb[i]\n    idx_ugas = idx_ugas + 1\nidx_yjn2 = 0\nlist_nojm = b\nwhile idx_yjn2 < len(list_nojm):\n    i = list_nojm[idx_yjn2]\n    if maxCntb1 < cntb[i] and valb != i and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_yjn2 = idx_yjn2 + 1\nif valb != vala and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    res = 0\n    idx_8aie = 0\n    list_tsx4 = a\n    while idx_8aie < len(list_tsx4):\n        i = list_tsx4[idx_8aie]\n        if i != vala:\n            res += 1\n        idx_8aie = idx_8aie + 1\n    idx_iad2 = 0\n    list_y0os = b\n    while idx_iad2 < len(list_y0os):\n        i = list_y0os[idx_iad2]\n        if i != valb:\n            res += 1\n        idx_iad2 = idx_iad2 + 1\n    print(res)\nelse:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    idx_xzn1 = 0\n    list_fuv1 = a\n    while idx_xzn1 < len(list_fuv1):\n        i = list_fuv1[idx_xzn1]\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n        idx_xzn1 = idx_xzn1 + 1\n    idx_dbaw = 0\n    list_kexb = b\n    while idx_dbaw < len(list_kexb):\n        i = list_kexb[idx_dbaw]\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n        idx_dbaw = idx_dbaw + 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "For2While_sample_from_atcoder_ABC111_C_to_123", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_8z71 = 0\nlist_7cy1 = range(N)\nwhile idx_8z71 < len(list_7cy1):\n    i = list_7cy1[idx_8z71]\n    if lst[i] == 0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        K -= 1\n    if lst[i] > 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\n    idx_8z71 = idx_8z71 + 1\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    idx_bv2m = 0\n    list_4kdi = range(0, k + 1)\n    while idx_bv2m < len(list_4kdi):\n        j = list_4kdi[idx_bv2m]\n        if j > lastx or k - j > lasty and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        idx_bv2m = idx_bv2m + 1\n    return ans\n\n\nprint(check(K))\n", "id": "For2While_sample_from_atcoder_ABC107_C_to_124", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nidx_pmky = 0\nlist_i5m2 = list(enumerate(l))\nwhile idx_pmky < len(list_i5m2):\n    i, c = list_i5m2[idx_pmky]\n    if c == '0' and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_pmky = idx_pmky + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "For2While_sample_from_atcoder_ABC129_E_to_125", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_j4du = 0\nlist_9bdi = l\nwhile idx_j4du < len(list_9bdi):\n    i = list_9bdi[idx_j4du]\n    if i % m == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\n    idx_j4du = idx_j4du + 1\nmx = max(l2)\nidx_bqn5 = 0\nlist_k145 = range(n)\nwhile idx_bqn5 < len(list_k145):\n    i = list_k145[idx_bqn5]\n    if l2[i] == mx and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ind = i\n    idx_bqn5 = idx_bqn5 + 1\nprint(ind + 1)\n", "id": "For2While_sample_from_codeforces_450_A_to_126", "old_id": "codeforces_450_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    idx_otgr = 0\n    list_27pu = made_cout\n    while idx_otgr < len(list_27pu):\n        color = list_27pu[idx_otgr]\n        if color not in bought_count and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            return print(- 1)\n        res += min(bought_count[color], made_cout[color])\n        idx_otgr = idx_otgr + 1\n    print(res)\n\n\ndef main():\n    t = 1\n    idx_1izk = 0\n    list_lb1j = range(t)\n    while idx_1izk < len(list_lb1j):\n        _ = list_lb1j[idx_1izk]\n        solution()\n        idx_1izk = idx_1izk + 1\n\n\nmain()\n", "id": "For2While_sample_from_codeforces_408_B_to_127", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nidx_e290 = 0\nlist_30qv = range(N)\nwhile idx_e290 < len(list_30qv):\n    i = list_30qv[idx_e290]\n    if (i + 1 != A[i]) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_e290 = idx_e290 + 1\nif (mx == - 1) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n", "id": "For2While_sample_from_codeforces_56_B_to_128", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = 0\ncl = 0\nidx_3b0w = 0\nlist_x9mo = txt\nwhile idx_3b0w < len(list_x9mo):\n    z = list_x9mo[idx_3b0w]\n    if z.islower() and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        cl = cl + 1\n    else:\n        cu = cu + 1\n    idx_3b0w = idx_3b0w + 1\nif cu > cl and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "id": "For2While_sample_from_codeforces_59_A_to_129", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nidx_9iha = 0\nlist_zunk = range(N - 1)\nwhile idx_9iha < len(list_zunk):\n    _ = list_zunk[idx_9iha]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_9iha = idx_9iha + 1\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    idx_p2rt = 0\n    list_dfwz = adj[v]\n    while idx_p2rt < len(list_dfwz):\n        u = list_dfwz[idx_p2rt]\n        if seen[u] == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\n        idx_p2rt = idx_p2rt + 1\nseq = deque()\nidx_stnp = 0\nlist_ir7h = range(1, N + 1)\nwhile idx_stnp < len(list_ir7h):\n    i = list_ir7h[idx_stnp]\n    if child_num[i] == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        seq.append(i)\n    idx_stnp = idx_stnp + 1\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        print('First')\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "For2While_sample_from_atcoder_AGC014_D_to_130", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nidx_flqs = 0\nlist_srqy = range(n)\nwhile idx_flqs < len(list_srqy):\n    i = list_srqy[idx_flqs]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: 0})\n    if task.time > finish_time and remaining.empty() and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\n    idx_flqs = idx_flqs + 1\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_k0dv = 0\nlist_uqyp = result\nwhile idx_k0dv < len(list_uqyp):\n    key = list_uqyp[idx_k0dv]\n    print(result.get(key))\n    idx_k0dv = idx_k0dv + 1\n", "id": "For2While_sample_from_codeforces_644_B_to_131", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nidx_gvd8 = 0\nlist_4i3l = range(m)\nwhile idx_gvd8 < len(list_4i3l):\n    i = list_4i3l[idx_gvd8]\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    idx_gvd8 = idx_gvd8 + 1\nc = 0\nidx_46vq = 0\nlist_htqx = list(path.items())\nwhile idx_46vq < len(list_htqx):\n    i, v = list_htqx[idx_46vq]\n    f = 0\n    idx_ng8d = 0\n    list_mcfi = v\n    while idx_ng8d < len(list_mcfi):\n        j = list_mcfi[idx_ng8d]\n        if hp[i] <= hp[j] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            f = 1\n            break\n        idx_ng8d = idx_ng8d + 1\n    if f == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        c += 1\n    idx_46vq = idx_46vq + 1\nprint(c)\n", "id": "For2While_sample_from_atcoder_ABC166_C_to_132", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nidx_5am8 = 0\nlist_xheu = range(N - 1)\nwhile idx_5am8 < len(list_xheu):\n    i = list_xheu[idx_5am8]\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n    idx_5am8 = idx_5am8 + 1\nmod = 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    idx_l05w = 0\n    list_fltx = graph[fro]\n    while idx_l05w < len(list_fltx):\n        u = list_fltx[idx_l05w]\n        if u == to and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= 1\n        idx_l05w = idx_l05w + 1\n    return caseNum\n\n\nans = dfs(0, - 1, K)\nprint(ans)\n", "id": "For2While_sample_from_atcoder_ABC133_E_to_133", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nidx_if3b = 0\nlist_0opr = range(int(input()))\nwhile idx_if3b < len(list_0opr):\n    i = list_0opr[idx_if3b]\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == 'M' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\n    idx_if3b = idx_if3b + 1\na, b, c = 0, 0, 0\nidx_ocef = 0\nlist_wn60 = range(N)\nwhile idx_ocef < len(list_wn60):\n    i = list_wn60[idx_ocef]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        c = min(a, b)\n    idx_ocef = idx_ocef + 1\nprint(c)\n", "id": "For2While_sample_from_codeforces_629_B_to_134", "old_id": "codeforces_629_B"}
{"code": "n = int(input())\ninput_array = []\nidx_zq2r = 0\nlist_stld = range(n)\nwhile idx_zq2r < len(list_stld):\n    i = list_stld[idx_zq2r]\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\n    idx_zq2r = idx_zq2r + 1\noutdated = []\nidx_3e0q = 0\nlist_arqy = range(n)\nwhile idx_3e0q < len(list_arqy):\n    i = list_arqy[idx_3e0q]\n    idx_emrn = 0\n    list_nyjg = range(n)\n    while idx_emrn < len(list_nyjg):\n        j = list_nyjg[idx_emrn]\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            outdated.append(input_array[i])\n        idx_emrn = idx_emrn + 1\n    idx_3e0q = idx_3e0q + 1\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nidx_ifrm = 0\nlist_alhb = range(n)\nwhile idx_ifrm < len(list_alhb):\n    i = list_alhb[idx_ifrm]\n    current_item = input_array[i]\n    cost = current_item[3]\n    if (current_item not in outdated and cost < minimum_cost) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        minimum_cost = current_item[3]\n        input_number = i + 1\n    idx_ifrm = idx_ifrm + 1\nprint(input_number)\n", "id": "For2While_sample_from_codeforces_106_B_to_135", "old_id": "codeforces_106_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nidx_v1u3 = 0\nlist_qf78 = range(t)\nwhile idx_v1u3 < len(list_qf78):\n    i = list_qf78[idx_v1u3]\n    op = input().split()\n    if op[0] == 'alloc' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        pos = 0\n        idx_90xb = 0\n        list_b7tw = range(m)\n        while idx_90xb < len(list_b7tw):\n            j = list_b7tw[idx_90xb]\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n            idx_90xb = idx_90xb + 1\n    if op[0] == 'erase' and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_qbvf = 0\n            list_twpz = range(m)\n            while idx_qbvf < len(list_twpz):\n                j = list_twpz[idx_qbvf]\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n                idx_qbvf = idx_qbvf + 1\n    if op[0] == \"defragment\" and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        idx_7j2x = 0\n        list_a601 = range(cnt)\n        while idx_7j2x < len(list_a601):\n            j = list_a601[idx_7j2x]\n            alocuente.append(0)\n            idx_7j2x = idx_7j2x + 1\n    idx_v1u3 = idx_v1u3 + 1\n", "id": "For2While_sample_from_codeforces_7_B_to_136", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    idx_p8b7 = 0\n    list_eqdi = range(n)\n    while idx_p8b7 < len(list_eqdi):\n        i = list_eqdi[idx_p8b7]\n        count[i] = [0] * n\n        idx_p8b7 = idx_p8b7 + 1\n    ans = - 1\n    idx_6r0k = 0\n    list_4ykn = range(m)\n    while idx_6r0k < len(list_4ykn):\n        k = list_4ykn[idx_6r0k]\n        x, y = map(int, input().split())\n        x -= 1\n        y -= 1\n        found = False\n        idx_mfon = 0\n        list_drgo = range(x - 2, x + 1)\n        while idx_mfon < len(list_drgo):\n            i = list_drgo[idx_mfon]\n            idx_8mq2 = 0\n            list_oda3 = range(y - 2, y + 1)\n            while idx_8mq2 < len(list_oda3):\n                j = list_oda3[idx_8mq2]\n                if i >= 0 and i < n and j >= 0 and j < n and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n                    count[i][j] += 1\n                    if count[i][j] == 9:\n                        found = True\n                idx_8mq2 = idx_8mq2 + 1\n            idx_mfon = idx_mfon + 1\n        if found and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            ans = k + 1\n            break\n        idx_6r0k = idx_6r0k + 1\n    print(ans)\n\n\nsolve_case()\n", "id": "For2While_sample_from_codeforces_203_B_to_137", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nidx_tv2f = 0\nlist_ioqd = pre + 1\nwhile idx_tv2f < len(list_ioqd):\n    i = list_ioqd[idx_tv2f]\n    idx_aywn = 0\n    list_6g8w = itertools.combinations(pre, i)\n    while idx_aywn < len(list_6g8w):\n        j = list_6g8w[idx_aywn]\n        l.append(list(j))\n        idx_aywn = idx_aywn + 1\n    idx_tv2f = idx_tv2f + 1\nidx_nktl = 0\nlist_82dz = range(1, m + 1)\nwhile idx_nktl < len(list_82dz):\n    i = list_82dz[idx_nktl]\n    idx_1rjc = 0\n    list_4dyn = list(enumerate(l))\n    while idx_1rjc < len(list_4dyn):\n        j, k = list_4dyn[idx_1rjc]\n        ca = 0\n        idx_i0br = 0\n        list_r06l = k\n        while idx_i0br < len(list_r06l):\n            ii = list_r06l[idx_i0br]\n            ca += c[ii, i]\n            idx_i0br = idx_i0br + 1\n        if ca < x and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            rem.insert(0, j)\n        else:\n            pass\n        idx_1rjc = idx_1rjc + 1\n    if len(rem) > 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        idx_l028 = 0\n        list_dph6 = rem\n        while idx_l028 < len(list_dph6):\n            j = list_dph6[idx_l028]\n            l.pop(j)\n            idx_l028 = idx_l028 + 1\n        rem = []\n    if len(l) == 0 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        print(- 1)\n        break\n    idx_nktl = idx_nktl + 1\n", "id": "For2While_sample_from_atcoder_ABC167_C_to_138", "old_id": "atcoder_ABC167_C"}
{"code": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nidx_mpk4 = 0\nlist_vj86 = a\nwhile idx_mpk4 < len(list_vj86):\n    i = list_vj86[idx_mpk4]\n    cnt[i] += 1\n    idx_mpk4 = idx_mpk4 + 1\nidx_paqu = 0\nlist_w4ar = range(1, n + 1)\nwhile idx_paqu < len(list_w4ar):\n    i = list_w4ar[idx_paqu]\n    if t[i] == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_paqu = idx_paqu + 1\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "For2While_sample_from_codeforces_350_B_to_139", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = 0\n    counter = 0\n    counter_turns = - 1\n    while counter < len(a):\n        counter_turns += 1\n        idx_opmx = 0\n        list_8kx4 = range(len(a))\n        while idx_opmx < len(list_8kx4):\n            i = list_8kx4[idx_opmx]\n            if a[i] != - 1 and a[i] <= counter and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                counter += 1\n                a[i] = - 1\n            idx_opmx = idx_opmx + 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "For2While_sample_from_codeforces_583_B_to_140", "old_id": "codeforces_583_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nidx_aehn = 0\nlist_mso1 = range(1, n)\nwhile idx_aehn < len(list_mso1):\n    i = list_mso1[idx_aehn]\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\n    idx_aehn = idx_aehn + 1\nprint(- 1 if id == n else id + 1)\n", "id": "For2While_sample_from_codeforces_242_B_to_141", "old_id": "codeforces_242_B"}
{"code": "a, b = map(int, input().split())\nc = 0\nidx_nv9p = 0\nlist_e284 = range(2)\nwhile idx_nv9p < len(list_e284):\n    i = list_e284[idx_nv9p]\n    c += max(a, b)\n    if a >= b and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        a -= 1\n    else:\n        b -= 1\n    idx_nv9p = idx_nv9p + 1\nprint(c)\n", "id": "For2While_sample_from_atcoder_ABC124_A_to_142", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != 1 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    idx_6d9e = 0\n    list_7uxy = ip\n    while idx_6d9e < len(list_7uxy):\n        i = list_7uxy[idx_6d9e]\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_6d9e = idx_6d9e + 1\nelse:\n    st = ip\nprint(int(st))\n", "id": "For2While_sample_from_codeforces_514_A_to_143", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = 0\n    idx_f8h0 = 0\n    list_k1i2 = s\n    while idx_f8h0 < len(list_k1i2):\n        c = list_k1i2[idx_f8h0]\n        if c != '1' and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            break\n        l += 1\n        idx_f8h0 = idx_f8h0 + 1\n    if l >= k and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "For2While_sample_from_atcoder_ABC106_C_to_144", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nidx_5ebd = 0\nlist_akrj = range(q)\nwhile idx_5ebd < len(list_akrj):\n    _ = list_akrj[idx_5ebd]\n    ql = list(map(int, input().split()))\n    if ql[0] == 2 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    idx_5ebd = idx_5ebd + 1\n", "id": "For2While_sample_from_atcoder_ABC127_F_to_145", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_t9p0 = 0\n    list_i2ag = pieces\n    while idx_t9p0 < len(list_i2ag):\n        piece = list_i2ag[idx_t9p0]\n        if piece[1] == 'A' and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n        idx_t9p0 = idx_t9p0 + 1\n    idx_p4wv = 0\n    list_x40g = range(len(pieces) - 1, - 1, - 1)\n    while idx_p4wv < len(list_x40g):\n        i = list_x40g[idx_p4wv]\n        if pieces[i][1] == 'A' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n        idx_p4wv = idx_p4wv + 1\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print(main())\n", "id": "For2While_sample_from_codeforces_632_B_to_146", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_v8ka = 0\n    list_46eq = s\n    while idx_v8ka < len(list_46eq):\n        i = list_46eq[idx_v8ka]\n        if i not in ['-', ';', '_'] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            r += i.lower()\n        idx_v8ka = idx_v8ka + 1\n    return r\n\n\ndef solve():\n    l = []\n    idx_gzpy = 0\n    list_6ybc = range(3)\n    while idx_gzpy < len(list_6ybc):\n        i = list_6ybc[idx_gzpy]\n        l.append(f(input()))\n        idx_gzpy = idx_gzpy + 1\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_ipx2 = 0\n    list_2n5s = t\n    while idx_ipx2 < len(list_2n5s):\n        i = list_2n5s[idx_ipx2]\n        l.append(\"\".join(i))\n        idx_ipx2 = idx_ipx2 + 1\n    idx_2cmq = 0\n    list_y8oi = range(inp())\n    while idx_2cmq < len(list_y8oi):\n        i = list_y8oi[idx_2cmq]\n        if f(instr()) in l and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            print('ACC')\n        else:\n            print('WA')\n        idx_2cmq = idx_2cmq + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n    solve()\n", "id": "For2While_sample_from_codeforces_61_B_to_147", "old_id": "codeforces_61_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n    print(\"No\")\n    exit()\nidx_405a = 0\nlist_bylv = Sa\nwhile idx_405a < len(list_bylv):\n    i = list_bylv[idx_405a]\n    if c[i] != 2 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        print(\"No\")\n        exit()\n    idx_405a = idx_405a + 1\nprint(\"Yes\")\n", "id": "For2While_sample_from_atcoder_ABC132_A_to_148", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_enis = 0\n    list_hsn1 = range(n)\n    while idx_enis < len(list_hsn1):\n        i = list_hsn1[idx_enis]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_enis = idx_enis + 1\n    low.sort()\n    high.sort()\n    if n % 2 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n    resolve()\n", "id": "For2While_sample_from_atcoder_ABC169_E_to_149", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nidx_egoq = 0\nlist_g13f = range(n)\nwhile idx_egoq < len(list_g13f):\n    i = list_g13f[idx_egoq]\n    a, b = map(int, input().split())\n    l[a] = b\n    idx_egoq = idx_egoq + 1\nif l[0] > 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n    dp[0] = 1\nmx = 0\nidx_5re7 = 0\nlist_b7ri = range(1, 1000010)\nwhile idx_5re7 < len(list_b7ri):\n    i = list_b7ri[idx_5re7]\n    if (l[i] == 0) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        dp[i] = dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    if (dp[i] > mx) and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        mx = dp[i]\n    idx_5re7 = idx_5re7 + 1\nprint(n - mx)\n", "id": "For2While_sample_from_codeforces_607_A_to_150", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open(0).read().split())\nXY = list(zip(* [iter(XY)] * 2))\nidx_i3mo = 0\nlist_a0fp = list(enumerate(XY))\nwhile idx_i3mo < len(list_a0fp):\n    i, (x, y) = list_a0fp[idx_i3mo]\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0\n    idx_arcd = 0\n    list_vp84 = zip(D, D[1:])\n    while idx_arcd < len(list_vp84):\n        a, b = list_vp84[idx_arcd]\n        if b - a >= pi and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            ans = (b - a) - pi\n        idx_arcd = idx_arcd + 1\n    print(ans / (2 * pi))\n    idx_i3mo = idx_i3mo + 1\n", "id": "For2While_sample_from_atcoder_AGC021_B_to_151", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nidx_oysv = 0\nlist_ng5l = range(1, N + 1)\nwhile idx_oysv < len(list_ng5l):\n    i = list_ng5l[idx_oysv]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_oysv = idx_oysv + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nidx_2brg = 0\nlist_mfvr = range(0, T)\nwhile idx_2brg < len(list_mfvr):\n    t = list_mfvr[idx_2brg]\n    dp[0][t] = 0\n    idx_2brg = idx_2brg + 1\nidx_tnud = 0\nlist_nx6u = range(1, N + 1)\nwhile idx_tnud < len(list_nx6u):\n    n = list_nx6u[idx_tnud]\n    dp[n][0] = 0\n    idx_z70r = 0\n    list_q128 = range(1, T)\n    while idx_z70r < len(list_q128):\n        t = list_q128[idx_z70r]\n        if time_value[n][TIME] > t and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        idx_z70r = idx_z70r + 1\n    idx_tnud = idx_tnud + 1\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nidx_nz6w = 0\nlist_b2j9 = range(N - 1, 0, - 1)\nwhile idx_nz6w < len(list_b2j9):\n    n = list_b2j9[idx_nz6w]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if t < 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\n    idx_nz6w = idx_nz6w + 1\nprint(max_val)\n", "id": "For2While_sample_from_atcoder_ABC145_E_to_152", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_nxk9 = 0\n    list_bk06 = range(H)\n    while idx_nxk9 < len(list_bk06):\n        i = list_bk06[idx_nxk9]\n        idx_uvxz = 0\n        list_zb0e = range(W)\n        while idx_uvxz < len(list_zb0e):\n            j = list_zb0e[idx_uvxz]\n            if i < B and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            idx_uvxz = idx_uvxz + 1\n        idx_nxk9 = idx_nxk9 + 1\n    idx_9zbj = 0\n    list_032b = range(H)\n    while idx_9zbj < len(list_032b):\n        i = list_032b[idx_9zbj]\n        print(''.join(answer[i]))\n        idx_9zbj = idx_9zbj + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_1kf8 = 0\n        list_gbv7 = sys.stdin\n        while idx_1kf8 < len(list_gbv7):\n            line = list_gbv7[idx_1kf8]\n            idx_1pqc = 0\n            list_xmhr = line.split()\n            while idx_1pqc < len(list_xmhr):\n                word = list_xmhr[idx_1pqc]\n                yield word\n                idx_1pqc = idx_1pqc + 1\n            idx_1kf8 = idx_1kf8 + 1\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    main()\n", "id": "For2While_sample_from_atcoder_AGC038_A_to_153", "old_id": "atcoder_AGC038_A"}
