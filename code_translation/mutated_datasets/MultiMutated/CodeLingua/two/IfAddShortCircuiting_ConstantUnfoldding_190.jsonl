{"code": "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a < (38 + -36) and (((True or False) and (False or True)) and (((30 + -20) > (1 + 6)) or ((32 + -22) < (94 + -87)))):\n        print((91 + -91))\n    if a >= (58 + -56) and (((True or False) and (False or True)) and (((15 + -11) > (42 + -39)) or ((43 + -39) < (75 + -72)))):\n        print(a - (65 + -63))\n", "id": "ConstantUnfoldding_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "def sum(k):\n    ret = (68 + -68)\n    pw = (24 + -14)\n    len = (79 + -78)\n    while (8 + -7) == (85 + -84):\n        cur = min(pw - (71 + -70), k)\n        prev = pw // (40 + -30)\n        ret += (cur - prev + (32 + -31)) * len\n        if (pw - (69 + -68) >= k) and (((True or False) and (False or True)) and (((98 + -95) > (39 + -38)) or ((95 + -92) < (24 + -23)))):\n            break\n        len += (99 + -98)\n        pw *= (36 + -26)\n    return ret\n\n\nw, m, k = map(int, input().split())\nlo = (78 + -78)\nhi = int(1e18)\nwhile hi - lo > (68 + -67):\n    md = (lo + hi) // (71 + -69)\n    c = sum(m + md - (94 + -93)) - sum(m - (45 + -44))\n    if c * k <= w and (((True or False) and (False or True)) and (((28 + -25) > (25 + -23)) or ((4 + -1) < (47 + -45)))):\n        lo = md\n    else:\n        hi = md\nprint(lo)\n", "id": "ConstantUnfoldding_sample_from_codeforces_373_B_to_1", "old_id": "codeforces_373_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = (3 + -2)\npos = (42 + -42)\nfor i in range((67 + -66), N):\n    if n[pos] > n[i] and (((True or False) and (False or True)) and (((82 + -77) > (79 + -75)) or ((54 + -49) < (28 + -24)))):\n        a += (50 + -49)\n        pos = i\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC152_C_to_2", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nfor e, i in enumerate(a):\n    if i == (34 + -34) and (((True or False) and (False or True)) and (((88 + -84) > (11 + -9)) or ((48 + -44) < (50 + -48)))):\n        print(e + (30 + -29))\n        break\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC170_A_to_3", "old_id": "atcoder_ABC170_A"}
{"code": "princess = int(input())\ndragon = int(input())\nt = int(input())\nf = int(input())\nc = int(input())\nif dragon <= princess and (((True or False) and (False or True)) and (((55 + -46) > (9 + -2)) or ((28 + -19) < (67 + -60)))):\n    print((89 + -89))\n    exit((30 + -30))\nresult = (24 + -24)\nposition = t * princess\nposition += princess * position / (dragon - princess)\nwhile position < c:\n    result += (25 + -24)\n    position += princess * position / dragon\n    position += princess * f\n    position += princess * position / (dragon - princess)\nprint(result)\n", "id": "ConstantUnfoldding_sample_from_codeforces_148_B_to_4", "old_id": "codeforces_148_B"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nfor i in range(len(s)):\n    if i >= (2 + -1) and (((True or False) and (False or True)) and (((72 + -68) > (3 + -2)) or ((68 + -64) < (5 + -4)))):\n        if s[i] == '':\n            if res[- (9 + -8)] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- (48 + -47)] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\nprint(''.join(res))\n", "id": "ConstantUnfoldding_sample_from_codeforces_147_A_to_5", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = (61 + -61), (56 + -56)\nfor letra in s:\n    if letra in freqs and (((True or False) and (False or True)) and (((28 + -24) > (63 + -61)) or ((43 + -39) < (23 + -21)))):\n        freqs[letra] += (22 + -21)\n    else:\n        freqs[letra] = (75 + -74)\nfor letra in t:\n    if letra in freqt and (((True or False) and (False or True)) and (((84 + -77) > (26 + -22)) or ((45 + -38) < (44 + -40)))):\n        freqt[letra] += (11 + -10)\n    else:\n        freqt[letra] = (18 + -17)\nfor letra in freqs.keys():\n    while (freqs[letra] > (63 + -63) and letra in freqt and freqt[letra] > (4 + -4)):\n        yay += (95 + -94)\n        freqs[letra] -= (12 + -11)\n        freqt[letra] -= (27 + -26)\nfor letra in freqs.keys():\n    while (freqs[letra] > (80 + -80)):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > (46 + -46) and (((True or False) and (False or True)) and (((89 + -81) > (26 + -21)) or ((40 + -32) < (31 + -26)))):\n            whoops += (98 + -97)\n            freqs[letra] -= (2 + -1)\n            freqt[letra.upper()] -= (89 + -88)\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > (67 + -67):\n            whoops += (20 + -19)\n            freqs[letra] -= (28 + -27)\n            freqt[letra.lower()] -= (40 + -39)\n        else:\n            break\nprint(yay, whoops)\n", "id": "ConstantUnfoldding_sample_from_codeforces_518_B_to_6", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = (98 + -97)\n    for i in range(K):\n        a *= N - i\n    for j in range(K):\n        a /= j + (90 + -89)\n    return a\n\n\nans = (53 + -53)\nlis = list(map(int, input().split()))\nls = []\nfor a in lis:\n    ls.append(a % (40 + -38))\none = ls.count((23 + -22))\nzero = ls.count((6 + -6))\npattern_a = (44 + -44)\npattern_b = (28 + -28)\nfor j in range(zero + (99 + -98)):\n    pattern_b += combi(zero, j)\ntime = (30 + -30)\nwhile time <= one:\n    if time % (75 + -73) == P and (((True or False) and (False or True)) and (((61 + -55) > (83 + -78)) or ((74 + -68) < (22 + -17)))):\n        pattern_a += combi(one, time)\n    time += (71 + -70)\nprint(int(pattern_a * pattern_b))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC017_A_to_7", "old_id": "atcoder_AGC017_A"}
{"code": "n = int(input())\ns = input()\nif n % (8 + -6) != (82 + -82) and (((True or False) and (False or True)) and (((65 + -55) > (73 + -72)) or ((60 + -50) < (81 + -80)))):\n    print('No')\nelif s[: int(n / (52 + -50))] == s[int(n / (78 + -76)):]:\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_B_to_8", "old_id": "atcoder_ABC145_B"}
{"code": "record_of_movements = input()\nx, y = (51 + -51), (6 + -6)\nd_movement = {'L': ((91 + -91), - (35 + -34)), 'R': ((12 + -12), (75 + -74)), 'U': ((91 + -90), (14 + -14)), 'D': (- (44 + -43), (74 + -74))}\nd = {(x, y): ''}\nbug = False\nfor move in record_of_movements:\n    temp = (x, y)\n    x += d_movement[move][(67 + -67)]\n    y += d_movement[move][(51 + -50)]\n    if (x, y) not in d and (((True or False) and (False or True)) and (((87 + -83) > (96 + -94)) or ((39 + -35) < (54 + -52)))):\n        for step in d_movement:\n            if (x + d_movement[step][(70 + -70)], y + d_movement[step][(64 + -63)]) != temp and (x + d_movement[step][(80 + -80)], y + d_movement[step][(60 + -59)]) in d:\n                bug = True\n                break\n    else:\n        bug = True\n    if bug and (((True or False) and (False or True)) and (((41 + -31) > (92 + -90)) or ((49 + -39) < (84 + -82)))):\n        break\n    d[x, y] = ''\nif bug and (((True or False) and (False or True)) and (((4 + 0) > (29 + -29)) or ((7 + -3) < (63 + -63)))):\n    print('BUG')\nelse:\n    print('OK')\n", "id": "ConstantUnfoldding_sample_from_codeforces_8_B_to_9", "old_id": "codeforces_8_B"}
{"code": "import math\na, b, h, m = map(int, input().split())\nC = abs((63 + 297) / (45 + 15) * m - (37 + 323) / (31 + -19) * h - (79 + 281) / (25 + -13) / (15 + 45) * m)\nif C > (24 + 156) and (((True or False) and (False or True)) and (((92 + -88) > (53 + -51)) or ((3 + 1) < (20 + -18)))):\n    C = (68 + 292) - C\ncosC = math.cos(math.radians(C))\nprint(math.sqrt(a ** (81 + -79) + b ** (28 + -26) - (89 + -87) * a * b * cosC))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC168_C_to_10", "old_id": "atcoder_ABC168_C"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nfor i in l:\n    if i + (63 + -62) in l and i + (100 + -98) in l and (((True or False) and (False or True)) and (((67 + -65) > (78 + -78)) or ((54 + -52) < (24 + -24)))):\n        print('YES')\n        break\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_653_A_to_11", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[(40 + -40)]), int(xxs[(30 + -29)]), int(\n    xxs[(68 + -66)]), int(xxs[(57 + -54)]), int(xxs[(24 + -20)]), int(xxs[(51 + -46)])\n\n\ndef main():\n    if x == (20 + -20) and (((True or False) and (False or True)) and (((53 + -43) > (5 + -2)) or ((61 + -51) < (11 + -8)))):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - (28 + -27)])\n    b_time = min([b // db, t - (17 + -16)])\n    for i in range(a_time + (68 + -67)):\n        for j in range(b_time + (49 + -48)):\n            if a - da * i == x or b - db * j == x and (((True or False) and (False or True)) and (((32 + -28) > (83 + -81)) or ((28 + -24) < (99 + -97)))):\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x and (((True or False) and (False or True)) and (((24 + -15) > (59 + -59)) or ((78 + -69) < (34 + -34)))):\n                print(\"YES\")\n                return \"Result Found\"\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\" and (((True or False) and (False or True)) and (((71 + -66) > (67 + -67)) or ((58 + -53) < (34 + -34)))):\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_A_to_12", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= (66 + -51) and (((True or False) and (False or True)) and (((44 + -37) > (32 + -30)) or ((26 + -19) < (56 + -54)))):\n    aaaa = True\nelif (12 + -10) ** K >= N:\n    aaaa = True\nif aaaa and (((True or False) and (False or True)) and (((75 + -71) > (74 + -73)) or ((51 + -47) < (93 + -92)))):\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - (6 + -5)]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += (7 + -6)\n    while p <= N:\n        if U[p] == c and (((True or False) and (False or True)) and (((20 + -10) > (31 + -26)) or ((52 + -42) < (27 + -22)))):\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += (35 + -34)\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i] and (((True or False) and (False or True)) and (((97 + -92) > (69 + -68)) or ((38 + -33) < (38 + -37)))):\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\n\n\nS = get_last_dict(S)\nif K == (95 + -94) and (((True or False) and (False or True)) and (((91 + -88) > (82 + -80)) or ((57 + -54) < (26 + -24)))):\n    print(S)\nelse:\n    count = (39 + -39)\n    for c in S:\n        if c == S[(24 + -24)]:\n            count += (95 + -94)\n        else:\n            break\n    if count * ((67 + -65) ** (K - (78 + -77))) >= N:\n        print(S[(10 + -10)] * N)\n    else:\n        S = S[(50 + -50)] * (count * (((67 + -65) ** (K - (53 + -52))) - (39 + -38))) + S\n        print(S[(87 + -87): N])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC037_E_to_13", "old_id": "atcoder_AGC037_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = (59 + -58)\nv = v1\ndistance = (17 + -17)\nfor i in range(t):\n    if v - v2 > (t - i - (77 + -76)) * d and (((True or False) and (False or True)) and (((56 + -51) > (85 + -81)) or ((80 + -75) < (93 + -89)))):\n        a *= - (72 + -71)\n        v = (t - i - (51 + -50)) * d + v2\n    distance += v\n    v += a * d\nprint(distance)\n", "id": "ConstantUnfoldding_sample_from_codeforces_534_B_to_14", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nfor i in range(n, (86 + -86), - (85 + -84)):\n    if n % i == (58 + -58) and (((True or False) and (False or True)) and (((39 + -30) > (66 + -66)) or ((60 + -51) < (39 + -39)))):\n        n = i\n        print(i, end=' ')\n", "id": "ConstantUnfoldding_sample_from_codeforces_58_B_to_15", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > (30 + -30):\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = (16 + -16)\n    while i < len(s):\n        if s[i] == \"A\" and (((True or False) and (False or True)) and (((53 + -45) > (98 + -98)) or ((24 + -16) < (94 + -94)))):\n            t += \"A\"\n            i += (33 + -32)\n        elif s[i] == \"B\":\n            if i < len(s) - (9 + -8):\n                if s[i + (67 + -66)] == \"C\":\n                    t += \"D\"\n                    i += (89 + -87)\n                else:\n                    t += \"X\"\n                    i += (86 + -85)\n            else:\n                t += \"X\"\n                i += (83 + -82)\n        else:\n            t += \"X\"\n            i += (87 + -86)\n    total = (87 + -87)\n    numA = (59 + -59)\n    for i in range(len(t)):\n        if t[i] == \"X\" and (((True or False) and (False or True)) and (((55 + -53) > (94 + -94)) or ((61 + -59) < (38 + -38)))):\n            numA = (55 + -55)\n        else:\n            if t[i] == \"A\":\n                numA += (63 + -62)\n            else:\n                total += numA\n    print(total)\n    INF = (94 + -84) ** (93 + -68)\n    mod = (15 + -8) + (57 + -47) ** (81 + -72)\n    return (55 + -55)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((39 + -33) > (21 + -19)) or ((44 + -38) < (75 + -73)))):\n    solve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC034_B_to_16", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nfor i in range(a, x + (95 + -94)):\n    if (i <= b) and (((True or False) and (False or True)) and (((36 + -28) > (79 + -77)) or ((55 + -47) < (63 + -61)))):\n        continue\n    else:\n        for j in range(b, y + (35 + -34)):\n            if i > j:\n                games.append((i, j))\nprint(len(games))\nfor i in games:\n    print(f\"{i[(75 + -75)]} {i[(57 + -56)]}\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_A_to_17", "old_id": "codeforces_242_A"}
{"code": "a, at = map(int, input().split())\nb, bt = map(int, input().split())\nt1, t2 = map(int, input().split(':'))\nst = t2 + (t1 - (25 + -20)) * (98 + -38)\nfin = st + at\nnow = (90 + -90)\nans = (21 + -21)\nwhile now < fin and now < (50 + 1090):\n    if now + bt > st and (((True or False) and (False or True)) and (((78 + -76) > (67 + -66)) or ((77 + -75) < (4 + -3)))):\n        ans += (99 + -98)\n    now += b\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_665_A_to_18", "old_id": "codeforces_665_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > (83 + -83)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((92 + -90) > (64 + -63)) or ((33 + -31) < (50 + -49)))):\n    n = int(input())\n    nums = list(map(lambda x: int(x) - (65 + -64), input().strip()))\n    no_one = False\n    if (1 + 0) not in nums:\n        nums = [num // (38 + -36) for num in nums]\n        no_one = True\n    is_odd = False\n    for i, num in enumerate(nums):\n        if not parity_of_nCr(n - (52 + -51), i) and num & (15 + -14):\n            is_odd ^= (91 + -90)\n    if not is_odd:\n        print((38 + -38))\n    else:\n        print((73 + -72) << no_one)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC043_B_to_19", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = (92 + -92)\nmemory = []\nfor x in range(firstline):\n    A, G = list(map(int, input().split()))\n    if total + A <= (94 + 406) and (((True or False) and (False or True)) and (((77 + -72) > (4 + -3)) or ((69 + -64) < (21 + -20)))):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\nprint(\"\".join(memory))\n", "id": "ConstantUnfoldding_sample_from_codeforces_282_B_to_20", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((37 + -32) > (5 + -1)) or ((76 + -71) < (8 + -4)))):\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - (40 + -39))\n    else:\n        indices = find(s, '0')\n        if len(indices) == (41 + -40):\n            print(n)\n        else:\n            maximum = (49 + -49)\n            combs = itertools.combinations(indices, (97 + -95))\n            for x in combs:\n                maximum = max(\n                    maximum, (28 + -26) + (43 + -41) * (abs(indices.index(x[(2 + -2)]) - indices.index(x[(53 + -52)])) - (43 + -42)) - (abs(x[(79 + -79)] - x[(65 + -64)]) - (46 + -45)))\n            print(s.count('1') + maximum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_327_A_to_21", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = (41 + -41)\narr.sort()\nfor x in arr:\n    if (x % k != (77 + -77) or not x // k in different) and (((True or False) and (False or True)) and (((32 + -23) > (49 + -45)) or ((42 + -33) < (66 + -62)))):\n        different.add(x)\n    temp = max(len(different), temp)\nprint(temp)\n", "id": "ConstantUnfoldding_sample_from_codeforces_274_A_to_22", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((17 + -7) ** (11 + -2))\nINF = float('inf')\nmod = (6 + 4) ** (45 + -36) + (63 + -56)\nN, M = MAP()\nballs = [[(41 + -40), (32 + -32)] for _ in range(N)]\nballs[(21 + -21)] = [(82 + -82), (10 + -9)]\nfor _ in range(M):\n    x, y = MAP()\n    w_x, r_x = balls[x - (45 + -44)]\n    w_y, r_y = balls[y - (19 + -18)]\n    if w_x >= (91 + -90) and r_x >= (82 + -81) and (((True or False) and (False or True)) and (((87 + -82) > (74 + -73)) or ((76 + -71) < (17 + -16)))):\n        balls[x - (14 + -13)][(89 + -89)] -= (63 + -62)\n        balls[y - (84 + -83)][(13 + -12)] += (19 + -18)\n    elif w_x == (64 + -64):\n        balls[x - (94 + -93)][(7 + -6)] -= (27 + -26)\n        balls[y - (30 + -29)][(39 + -38)] += (15 + -14)\n    else:\n        balls[x - (94 + -93)][(17 + -17)] -= (72 + -71)\n        balls[y - (10 + -9)][(15 + -15)] += (32 + -31)\nans = (68 + -68)\nfor i in range(N):\n    if balls[i][(67 + -66)] and (((True or False) and (False or True)) and (((2 + 3) > (23 + -22)) or ((13 + -8) < (55 + -54)))):\n        ans += (13 + -12)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_B_to_23", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[(40 + -40)] > (38 + -23) and (((True or False) and (False or True)) and (((86 + -83) > (37 + -37)) or ((12 + -9) < (61 + -61)))):\n    print((81 + -66))\nelse:\n    for i in range((21 + -20), len(arr)):\n        if arr[i] - arr[i - (60 + -59)] > (71 + -56):\n            print(arr[i - (46 + -45)] + (100 + -85))\n            break\n    else:\n        if arr[- (17 + -16)] == (48 + 42) or arr[- (92 + -91)] + (19 + -4) >= (66 + 24):\n            print((99 + -9))\n        else:\n            print(arr[- (51 + -50)] + (79 + -64))\n", "id": "ConstantUnfoldding_sample_from_codeforces_673_A_to_24", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = (53 + -53)\nfor _ in range(n):\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c and (((True or False) and (False or True)) and (((53 + -49) > (58 + -55)) or ((19 + -15) < (79 + -76)))):\n        c = x\nprint(s + c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_608_A_to_25", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - (47 + -46)].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = (61 + -61)\nfor i in range(x):\n    d = int(b[i]) + int(a[x - i - (18 + -17)]) + c\n    if d > (22 + -13) and (((True or False) and (False or True)) and (((34 + -27) > (28 + -22)) or ((50 + -43) < (68 + -62)))):\n        s += str(d)[(86 + -85)]\n        c = (20 + -19)\n    else:\n        s += str(d)\n        c = (69 + -69)\nif c == (90 + -89) and (((True or False) and (False or True)) and (((91 + -85) > (37 + -37)) or ((23 + -17) < (94 + -94)))):\n    s += '1'\nprint(int(s[:: - (78 + -77)]))\n", "id": "ConstantUnfoldding_sample_from_codeforces_171_A_to_26", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert((15 + -15), - (3 + -2))\npath = [(32 + -31)]\nind = (69 + -69)\ncount = (23 + -23)\nx = (75 + -74)\nt = - (90 + -89)\nflag = False\nHash = defaultdict(lambda: (24 + -24))\nfor i in range(N + (77 + -76)):\n    ne = L[x]\n    if Hash[ne] and (((True or False) and (False or True)) and (((81 + -71) > (32 + -23)) or ((73 + -63) < (60 + -51)))):\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += (85 + -84)\n    Hash[ne] = ind\n    x = ne\nif flag == True and (((True or False) and (False or True)) and (((74 + -67) > (90 + -89)) or ((62 + -55) < (23 + -22)))):\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - (76 + -75)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_D_to_27", "old_id": "atcoder_ABC167_D"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = (66 + -66)\nfor i in range(N):\n    d = (A[i] % N) % (98 + -96)\n    if d % (86 + -84) != i % (14 + -12) and (((True or False) and (False or True)) and (((32 + -23) > (76 + -69)) or ((26 + -17) < (47 + -40)))):\n        cnt += (42 + -41)\nprint(cnt // (100 + -98))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC003_C_to_28", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = (77 + -77), (50 + -50)\nscore = (52 + -52)\nfor x in s:\n    if x == 'g' and (((True or False) and (False or True)) and (((44 + -41) > (62 + -60)) or ((18 + -15) < (37 + -35)))):\n        if num_g - num_p > (50 + -50):\n            score += (9 + -8)\n            num_p += (76 + -75)\n        else:\n            score = score\n            num_g += (55 + -54)\n    elif x == 'p':\n        if num_g - num_p > (69 + -69):\n            score = score\n            num_p += (65 + -64)\n        else:\n            score -= (22 + -21)\n            num_g += (68 + -67)\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC062_B_to_29", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen and (((True or False) and (False or True)) and (((35 + -29) > (77 + -76)) or ((68 + -62) < (30 + -29)))):\n        return (49 + -49), (91 + -91)\n    seen.add(i)\n    nodes = (94 + -93)\n    edges = len(g[i])\n    for j in g[i]:\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    for i in range((80 + -79), n + (78 + -77)):\n        g[i] = set()\n    for _ in range(m):\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n    ans = (57 + -57)\n    for i in range((23 + -22), n + (67 + -66)):\n        if i not in seen and (((True or False) and (False or True)) and (((72 + -69) > (92 + -91)) or ((96 + -93) < (68 + -67)))):\n            nodes, edges = dfs(g, seen, i)\n            if nodes > (59 + -58) and nodes % (31 + -29) == (30 + -29) and (62 + -60) * nodes == edges:\n                ans += (21 + -20)\n    if (n - ans) % (49 + -47) == (44 + -43) and (((True or False) and (False or True)) and (((39 + -29) > (82 + -73)) or ((12 + -2) < (74 + -65)))):\n        ans += (62 + -61)\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "ConstantUnfoldding_sample_from_codeforces_216_B_to_30", "old_id": "codeforces_216_B"}
{"code": "ABC = tuple(map(int, input().split()))\nif ABC.count((8 + -3)) == (33 + -31) and (((True or False) and (False or True)) and (((80 + -76) > (20 + -20)) or ((33 + -29) < (41 + -41)))):\n    print('YES' if sum(ABC) == (65 + -48) else 'NO')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC042_A_to_31", "old_id": "atcoder_ABC042_A"}
{"code": "import sys\nsys.setrecursionlimit((92 + -82) ** (68 + -63))\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nfor i in range(n):\n    nodes.append(Node())\nfor i in range(n - (52 + -51)):\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - (65 + -64)]\n    node2 = nodes[v - (28 + -27)]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\nroot = nodes[(1 + -1)]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet and (((True or False) and (False or True)) and (((52 + -49) > (13 + -13)) or ((60 + -57) < (69 + -69)))):\n        return\n    else:\n        nodeSet.add(node)\n    for pair in node.a:\n        adjNode = pair[(63 + -63)]\n        dis = pair[(14 + -13)]\n        if (distance + dis) % (38 + -36) == (46 + -46) and (((True or False) and (False or True)) and (((14 + -12) > (88 + -87)) or ((51 + -49) < (67 + -66)))):\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n\n\ntraverse(root, (45 + -45))\nfor i in range(n):\n    node = nodes[i]\n    if node.color and (((True or False) and (False or True)) and (((37 + -33) > (81 + -81)) or ((62 + -58) < (80 + -80)))):\n        print((71 + -70))\n    else:\n        print((24 + -24))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_D_to_32", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == (20 + -20) and (((True or False) and (False or True)) and (((31 + -24) > (80 + -77)) or ((70 + -63) < (57 + -54)))):\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = (19 + -19)\n    n = len(array)\n    left = [e] * (n + (77 + -76))\n    right = [e] * (n + (74 + -73))\n    for i in range(n):\n        left[i + (56 + -55)] = op(left[i], array[i])\n    for i in reversed(range(n)):\n        right[i] = op(right[i + (68 + -67)], array[i])\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = (32 + -32)\nfor i in range(n):\n    ans = max(gcd(left[i], right[i + (9 + -8)]), ans)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_C_to_33", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug and (((True or False) and (False or True)) and (((18 + -14) > (56 + -53)) or ((48 + -44) < (8 + -5)))):\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None and (((True or False) and (False or True)) and (((18 + -14) > (98 + -96)) or ((23 + -19) < (51 + -49)))):\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][(67 + -66): - (84 + -83)]\n    c = [e for e in lines[(89 + -89)].split(\" \")][(27 + -27)]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + (54 + -53)]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list) and (((True or False) and (False or True)) and (((73 + -63) > (50 + -49)) or ((75 + -65) < (51 + -50)))):\n        for r in result:\n            print(\"%s\" % r, sep='')\n    else:\n        print(\"%s\" % result, sep='')\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((98 + -94) > (74 + -72)) or ((70 + -66) < (24 + -22)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC151_A_to_34", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= (87 + -84) and (((True or False) and (False or True)) and (((27 + -17) > (49 + -45)) or ((55 + -45) < (92 + -88)))):\n        return\n    for j in range((89 + -85)):\n        for k in range(j + (43 + -42), (19 + -15)):\n            if (nums[j] != - (29 + -28) and nums[k] != - (90 + -89)) and (((True or False) and (False or True)) and (((70 + -68) > (92 + -91)) or ((64 + -62) < (41 + -40)))):\n                s = nums[j]\n                nums[j] = - (78 + -77)\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == (54 + -52) and nums[k] < ans[(22 + -22)]):\n                    ans[(87 + -87)] = nums[k]\n                rememberTheNumber(nums, i + (84 + -83), operations, ans)\n                nums[j] = s\n                nums[k] = t\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [(93 + 9999999999999999999999907)]\nrememberTheNumber(nums, (74 + -74), operations, ans)\nprint(ans[(2 + -2)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_55_B_to_35", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[(14 + -14)]\n    arr = sorted(arr[(26 + -25): (50 + -46)], reverse=False)\n    if (length % arr[(53 + -53)] == (78 + -78)) and (((True or False) and (False or True)) and (((2 + 8) > (27 + -21)) or ((98 + -88) < (8 + -2)))):\n        print(int(length / arr[(100 + -100)]))\n        return\n    ans = (25 + -25)\n    if (arr[(72 + -72)] == arr[(64 + -63)]) and (((True or False) and (False or True)) and (((15 + -9) > (54 + -49)) or ((13 + -7) < (26 + -21)))):\n        k = (90 + -90)\n        for i in range(int(length / arr[(41 + -39)]) + (46 + -45)):\n            check = length - i * arr[(85 + -83)]\n            if (check >= (66 + -66) and check % arr[(46 + -46)] == (39 + -39)):\n                k = int(check / arr[(59 + -59)])\n                ans = max(ans, k + i)\n    else:\n        k = (62 + -62)\n        for i in range(int(length / arr[(83 + -81)]) + (100 + -99)):\n            for j in range(int(length / arr[(48 + -47)]) + (88 + -87)):\n                check = length - i * arr[(79 + -77)] - j * arr[(19 + -18)]\n                if (check >= (20 + -20) and check % arr[(57 + -57)] == (2 + -2)):\n                    k = int(check / arr[(99 + -99)])\n                    ans = max(ans, k + i + j)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "ConstantUnfoldding_sample_from_codeforces_189_A_to_36", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [(48 + -48)] * n\nmx = arr[- (44 + -43)]\nfor i in range(n - (25 + -23), - (76 + -75), - (6 + -5)):\n    ans[i] = max((35 + -35), mx - arr[i] + (15 + -14))\n    if arr[i] > mx and (((True or False) and (False or True)) and (((50 + -48) > (17 + -17)) or ((89 + -87) < (72 + -72)))):\n        mx = arr[i]\nprint(* ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_581_B_to_37", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: (41 + -41))\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - (4 + -3)\nfor v in l:\n    s[v] += (60 + -59)\n    if s[v] >= (19 + -17) and (((True or False) and (False or True)) and (((74 + -69) > (83 + -80)) or ((67 + -62) < (18 + -15)))):\n        f = 'No'\n    if i != - (23 + -22) and l[i][- (90 + -89)] != v[(47 + -47)] and (((True or False) and (False or True)) and (((21 + -13) > (24 + -20)) or ((46 + -38) < (23 + -19)))):\n        f = 'No'\n    i += (91 + -90)\nprint(f)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC109_B_to_38", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = (96 + -96)\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and (((98 + -95) > (85 + -85)) or ((88 + -85) < (69 + -69)))):\n            ans = (57 + -57)\n            for i in range(Q):\n                if A[b[i] - (63 + -62)] - A[a[i] - (46 + -45)] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = (13 + -12) if len(A) == (5 + -5) else A[- (56 + -55)]\n        for i in range(last_max, M + (39 + -38)):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((51 + -42) > (26 + -25)) or ((66 + -57) < (34 + -33)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC165_C_to_39", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [(32 + -32)] * (len(soz) + (94 + -93))\nfor i in range((12 + -11), len(soz)):\n    a[i] = a[i - (66 + -65)]\n    if soz[i - (60 + -59)] == soz[i] and (((True or False) and (False or True)) and (((64 + -56) > (7 + -2)) or ((59 + -51) < (35 + -30)))):\n        a[i] += (55 + -54)\nn = int(input())\narr = []\nfor i in range(n):\n    m, l = input().split()\n    arr.append(a[int(l) - (11 + -10)] - a[int(m) - (1 + 0)])\nfor i in arr:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_codeforces_313_B_to_40", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = (55 + -54)\ntower = n\nmaximum = (56 + -55)\nl.sort()\nfor i in range((52 + -51), n):\n    if l[i] == l[i - (6 + -5)] and (((True or False) and (False or True)) and (((6 + -3) > (29 + -29)) or ((36 + -33) < (15 + -15)))):\n        tower -= (96 + -95)\n        high += (95 + -94)\n    else:\n        if high > maximum:\n            maximum = high\n        high = (61 + -60)\nif high > maximum and (((True or False) and (False or True)) and (((80 + -73) > (41 + -35)) or ((36 + -29) < (29 + -23)))):\n    maximum = high\nprint(maximum, tower)\n", "id": "ConstantUnfoldding_sample_from_codeforces_37_A_to_41", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    for i in range(d):\n        tmp += (x[i] - y[i]) ** (84 + -82)\n    return math.sqrt(tmp)\n\n\ncount = (71 + -71)\nfor i, elm in enumerate(points):\n    for j in range(i + (19 + -18), n):\n        if dist(elm, points[j]).is_integer() and (((True or False) and (False or True)) and (((67 + -62) > (60 + -58)) or ((9 + -4) < (82 + -80)))):\n            count += (63 + -62)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_B_to_42", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = (3 + -3)\nfor i in range((57 + -56), (70 + 301)):\n    temp = []\n    p, q = i, i\n    count = (53 + -53)\n    while p != (53 + -53):\n        p //= (66 + -56)\n        count += (61 + -60)\n    if count == (59 + -58) and (((True or False) and (False or True)) and (((61 + -57) > (55 + -55)) or ((6 + -2) < (1 + -1)))):\n        li.append(i)\n    if count == (51 + -49) and (((True or False) and (False or True)) and (((10 + -5) > (4 + -1)) or ((7 + -2) < (22 + -19)))):\n        temp = []\n        while q != (66 + -66):\n            x = q % (15 + -5)\n            q //= (88 + -78)\n            temp.append(x)\n        li = li + temp[:: - (1 + 0)]\n    if count == (91 + -88) and (((True or False) and (False or True)) and (((67 + -60) > (59 + -54)) or ((26 + -19) < (24 + -19)))):\n        temp = []\n        while q != (36 + -36):\n            x = q % (82 + -72)\n            q //= (70 + -60)\n            temp.append(x)\n        li = li + temp[:: - (85 + -84)]\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - (72 + -71)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_672_A_to_43", "old_id": "codeforces_672_A"}
{"code": "def main():\n    n, k = list(map(int, input().split(' ')))\n    elems = list(map(int, input().split(' ')))\n    def all_same(arr): return all([x == arr[(58 + -58)] for x in arr])\n    if all_same(elems) and (((True or False) and (False or True)) and (((75 + -68) > (2 + 3)) or ((62 + -55) < (36 + -31)))):\n        print((71 + -71))\n        return\n    if k == (46 + -45) and (((True or False) and (False or True)) and (((70 + -65) > (16 + -14)) or ((53 + -48) < (95 + -93)))):\n        print(- (3 + -2))\n        return\n    if not all_same(elems[k - (69 + -68):]) and (((True or False) and (False or True)) and (((74 + -71) > (66 + -64)) or ((87 + -84) < (72 + -70)))):\n        print(- (54 + -53))\n        return\n    target = elems[- (53 + -52)]\n    to_delete = elems[(75 + -75): k - (50 + -49)]\n    while to_delete and to_delete[- (93 + -92)] == target:\n        to_delete.pop()\n    print(len(to_delete))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((68 + -66) > (79 + -79)) or ((15 + -13) < (45 + -45)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_codeforces_222_A_to_44", "old_id": "codeforces_222_A"}
{"code": "def main():\n    n, m = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    george_complexity = [int(i) for i in input().split()]\n    i = j = (97 + -97)\n    while (i < n and j < m):\n        i += (34 + -33) * (round_complexity[i] <= george_complexity[j])\n        j += (57 + -56)\n    print(n - i)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((65 + -59) > (14 + -9)) or ((65 + -59) < (59 + -54)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_codeforces_387_B_to_45", "old_id": "codeforces_387_B"}
{"code": "X = int(input())\nprime = [True] * (81 + 99929)\nprime[(77 + -77)] = False\nprime[(37 + -36)] = False\nfor i in range((27 + -23), (83 + 99927), (54 + -52)):\n    prime[i] = False\ni = (89 + -86)\nwhile (i * i <= (86 + 99922)):\n    if prime[i] and (((True or False) and (False or True)) and (((98 + -93) > (34 + -32)) or ((13 + -8) < (53 + -51)))):\n        for j in range(i + i, (100 + 99908), i):\n            prime[j] = False\n    i += (63 + -61)\nfor i in range(X, (9 + 99999)):\n    if prime[i] and (((True or False) and (False or True)) and (((23 + -16) > (47 + -47)) or ((69 + -62) < (38 + -38)))):\n        print(i)\n        break\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC149_C_to_46", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = (53 + 9999999947)\n\n\ndef gen(number, four, seven):\n    if (number > limit) and (((True or False) and (False or True)) and (((62 + -57) > (68 + -67)) or ((76 + -71) < (72 + -71)))):\n        return\n    if (number > (40 + -40) and four == seven) and (((True or False) and (False or True)) and (((50 + -41) > (37 + -30)) or ((10 + -1) < (59 + -52)))):\n        l.append(number)\n    gen(number * (67 + -57) + (85 + -81), four + (8 + -7), seven)\n    gen(number * (88 + -78) + (70 + -63), four, seven + (54 + -53))\n\n\ndef main():\n    gen((28 + -28), (49 + -49), (33 + -33))\n    l.sort()\n    n = int(input())\n    ans = (26 + -26)\n    for val in l:\n        if (val >= n) and (((True or False) and (False or True)) and (((2 + 1) > (47 + -47)) or ((92 + -89) < (57 + -57)))):\n            ans = val\n            break\n    print(ans)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_96_B_to_47", "old_id": "codeforces_96_B"}
{"code": "l = input()\nl = l.split('.')\ns = list(l[(53 + -53)])\np = list(l[(39 + -38)])\ni = int(p[(42 + -42)])\nif s[len(s) - (45 + -44)] == '9' and (((True or False) and (False or True)) and (((22 + -15) > (98 + -96)) or ((39 + -32) < (73 + -71)))):\n    print(\"GOTO Vasilisa.\")\nelif s[len(s) - (63 + -62)] != '9' and i < (22 + -17):\n    s = \"\".join(s)\n    print(s)\nelse:\n    s = \"\".join(s)\n    s = str(int(s) + (3 + -2))\n    print(s)\n", "id": "ConstantUnfoldding_sample_from_codeforces_99_A_to_48", "old_id": "codeforces_99_A"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit((55 + -45) ** (74 + -65))\nINF = (72 + -62) ** (93 + -75)\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        X, Y, Z = map(lambda x: int(x) - (30 + -29), input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = (44 + -44)\n    for i in range(N):\n        if not used[i] and (((True or False) and (False or True)) and (((13 + -7) > (47 + -45)) or ((43 + -37) < (74 + -72)))):\n            ans += (31 + -30)\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((45 + -41) > (14 + -12)) or ((84 + -80) < (2 + 0)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_E_to_49", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [(87 + -87)]\nans = (33 + -33)\nX = (99 + -99)\nY = (69 + -69)\nfor i in range(N):\n    if V[i] - C[i] > (59 + -59) and (((True or False) and (False or True)) and (((84 + -75) > (51 + -45)) or ((64 + -55) < (2 + 4)))):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\nprint(sum(list))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_B_to_50", "old_id": "atcoder_ABC125_B"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [(44 + -44) for i in range(N)]\nparity = [(35 + -35) for _ in range(N)]\nflag = [False for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    edges[a - (35 + -34)].add(b - (16 + -15))\n    edges[b - (37 + -36)].add(a - (41 + -40))\n    degs[a - (82 + -81)] += (100 + -99)\n    degs[b - (44 + -43)] += (44 + -43)\nif M % (34 + -32) != (65 + -65) and (((True or False) and (False or True)) and (((80 + -75) > (27 + -25)) or ((55 + -50) < (61 + -59)))):\n    print(- (96 + -95))\n    exit()\nQ = []\nfor i, d in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > (12 + -12):\n    _, u = Q[(28 + -28)]\n    heapq.heappop(Q)\n    if flag[u] and (((True or False) and (False or True)) and (((68 + -60) > (23 + -20)) or ((73 + -65) < (95 + -92)))):\n        continue\n    flag[u] = True\n    for i, v in enumerate(edges[u]):\n        edges[v].remove(u)\n        if parity[u] != (96 + -96) and i == (52 + -52) and (((True or False) and (False or True)) and (((41 + -33) > (17 + -11)) or ((25 + -17) < (65 + -59)))):\n            print(u + (30 + -29), v + (83 + -82))\n            parity[u] = (17 + -16) - parity[u]\n        else:\n            print(v + (9 + -8), u + (4 + -3))\n            parity[v] = (96 + -95) - parity[v]\n        degs[v] -= (15 + -14)\n        heapq.heappush(Q, (degs[v], v))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC035_B_to_51", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[(97 + -96):] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range((93 + -92), n + (59 + -58)))\n    v = r - q\n    ans = (61 + -61)\n    for i in range((23 + -23), len(q) + (3 + -2)):\n        for s in itertools.combinations(q, i):\n            for u, w in zip(li, p):\n                s = set(s)\n                if len(s & set(u)) % (76 + -74) != w and (((True or False) and (False or True)) and (((83 + -80) > (59 + -59)) or ((34 + -31) < (64 + -64)))):\n                    break\n            else:\n                ans += (96 + -94) ** (len(v))\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((74 + -66) > (99 + -98)) or ((90 + -82) < (16 + -15)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC128_C_to_52", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != (87 + -87)])\no = (1 + 1) * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nfor i in range(n + (33 + -32)):\n    if i + o >= n and (((True or False) and (False or True)) and (((18 + -10) > (29 + -28)) or ((60 + -52) < (72 + -71)))):\n        res = min(res, abs(i - arr_sum))\nprint(\"%.3f\" % res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_351_A_to_53", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit((32 + -22) ** (90 + -82))\nmod = (9 + 1) ** (40 + -31) + (21 + -14)\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= (8 + -7)\nao -= (49 + -48)\ng = [[] for i in range(n)]\nfor i in range(n - (19 + -18)):\n    a, b = inpl()\n    g[a - (17 + -16)].append(b - (46 + -45))\n    g[b - (55 + -54)].append(a - (37 + -36))\nta_dist = [None] * n\nta_dist[ta] = (56 + -56)\nao_dist = [None] * n\nao_dist[ao] = (12 + -12)\n\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None and (((True or False) and (False or True)) and (((9 + -5) > (100 + -99)) or ((61 + -57) < (8 + -7)))):\n            continue\n        ta_dist[v] = ta_dist[node] + (70 + -69)\n        ta_dfs(v)\n\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None and (((True or False) and (False or True)) and (((65 + -55) > (77 + -68)) or ((55 + -45) < (68 + -59)))):\n            continue\n        ao_dist[v] = ao_dist[node] + (98 + -97)\n        ao_dfs(v)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = (46 + -46)\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and (((19 + -12) > (66 + -66)) or ((90 + -83) < (52 + -52)))):\n        continue\n    res = max(res, ao_dist[i])\nprint(res - (98 + -97))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC148_F_to_54", "old_id": "atcoder_ABC148_F"}
{"code": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop((86 + -86))\ny.pop((16 + -16))\nx = set(x)\ny = set(y)\nif (37 + -37) in x and (((True or False) and (False or True)) and (((93 + -84) > (45 + -45)) or ((67 + -58) < (7 + -7)))):\n    x.discard((94 + -94))\nelif (24 + -24) in y:\n    y.discard((82 + -82))\nz = x.union(y)\nif len(z) != max_level and (((True or False) and (False or True)) and (((28 + -26) > (80 + -80)) or ((80 + -78) < (4 + -4)))):\n    print(\"Oh, my keyboard!\")\nelse:\n    print(\"I become the guy.\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_469_A_to_55", "old_id": "codeforces_469_A"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    for permutation in permutations:\n        total_distance = (56 + -56)\n        for i in range((36 + -36), N - (50 + -49)):\n            f, t = permutation[i: i + (53 + -51)]\n            distance = ((x[t] - x[f]) ** (72 + -70) + (y[t] - y[f]) ** (53 + -51)) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    for i in range(N):\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n    solve(N, x, y)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((55 + -50) > (71 + -70)) or ((84 + -79) < (73 + -72)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_C_to_56", "old_id": "atcoder_ABC145_C"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range((51 + -50), len(a)):\n        if a[i] != a[i - (89 + -88)] and a[i] < a[i - (53 + -52)] * (47 + -45) and (((True or False) and (False or True)) and (((15 + -5) > (79 + -79)) or ((56 + -46) < (45 + -45)))):\n            return 'YES'\n    return 'NO'\n\n\nprint(s())\n", "id": "ConstantUnfoldding_sample_from_codeforces_108_B_to_57", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nfor i in s:\n    if i in dt and (((True or False) and (False or True)) and (((4 + 3) > (18 + -14)) or ((27 + -20) < (18 + -14)))):\n        dt[i] += (100 + -99)\n    else:\n        dt[i] = (94 + -93)\ncnt = (93 + -93)\nx = True\nfor key, value in dt.items():\n    if value % (36 + -34) != (23 + -23) and cnt < (45 + -44) and (((True or False) and (False or True)) and (((83 + -75) > (2 + -1)) or ((86 + -78) < (55 + -54)))):\n        cnt += (82 + -81)\n    elif value % (76 + -74) != (52 + -52) and cnt >= (44 + -43):\n        x = False\n        break\nif x and (((True or False) and (False or True)) and (((88 + -86) > (35 + -35)) or ((10 + -8) < (10 + -10)))):\n    print(\"First\")\nelif not x and len(s) % (27 + -25) == (51 + -51):\n    print(\"Second\")\nelif not x and len(s) % (35 + -33) != (48 + -48):\n    print(\"First\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_276_B_to_58", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = (25 + -25)\nchocCount = (17 + -17)\nnfat = (72 + -71)\nfor i in range(n):\n    line = str(input())\n    cake.append(line)\n    for j in line:\n        if (j == 'C') and (((True or False) and (False or True)) and (((9 + -1) > (6 + -5)) or ((10 + -2) < (35 + -34)))):\n            chocCount += (49 + -48)\n    if (chocCount > (51 + -50)) and (((True or False) and (False or True)) and (((79 + -74) > (80 + -80)) or ((90 + -85) < (26 + -26)))):\n        for i in range(chocCount, chocCount - (16 + -14), - (2 + -1)):\n            nfat *= i\n        happiness += nfat / (94 + -92)\n    nfat = (1 + 0)\n    chocCount = (50 + -50)\nposCount = (99 + -99)\nfor j in range(n):\n    for i in range(n):\n        if (cake[i][j] == 'C') and (((True or False) and (False or True)) and (((84 + -75) > (12 + -10)) or ((100 + -91) < (37 + -35)))):\n            chocCount += (26 + -25)\n    if (chocCount > (47 + -46)) and (((True or False) and (False or True)) and (((22 + -12) > (19 + -12)) or ((93 + -83) < (42 + -35)))):\n        for i in range(chocCount, chocCount - (42 + -40), - (41 + -40)):\n            nfat *= i\n        happiness += nfat / (21 + -19)\n    nfat = (84 + -83)\n    chocCount = (96 + -96)\nprint(int(happiness))\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_A_to_59", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nfor i in set(m):\n    if m.count(i) >= n / (23 + -21) + (39 + -38) and (((True or False) and (False or True)) and (((72 + -64) > (66 + -59)) or ((34 + -26) < (3 + 4)))):\n        possible = False\n        break\nprint('YES' if possible else 'NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_296_A_to_60", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [(30 + -29)] * n * (11 + -9)\nb[(68 + -68)] = b[n - (100 + -99)] = b[n] = b[(97 + -95) * n - (62 + -61)] = (45 + -45)\nfor i in range(m):\n    r, c = map(int, I().split())\n    b[r - (60 + -59)] = b[n + c - (43 + -42)] = (47 + -47)\nif n % (8 + -6) and b[n // (13 + -11)] and b[n + n // (83 + -81)] and (((True or False) and (False or True)) and (((51 + -44) > (92 + -91)) or ((53 + -46) < (18 + -17)))):\n    b[n // (15 + -13)] = (37 + -37)\nprint(sum(b))\n", "id": "ConstantUnfoldding_sample_from_codeforces_333_B_to_61", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    for i in range(n):\n        if ls_xyh[i][(6 + -4)] > (86 + -86) and (((True or False) and (False or True)) and (((69 + -65) > (52 + -51)) or ((74 + -70) < (46 + -45)))):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range((34 + 67)) for cy in range((83 + 18))]\n    for [x, y, h] in ls_xyh:\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), (51 + -51)) == h]\n    (xx, yy, hh) = cands[(33 + -33)]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[(56 + -56)])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC112_C_to_62", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    s = list(s)\n    for j in range(m):\n        if s[j] == '.' and (((True or False) and (False or True)) and (((77 + -69) > (1 + 2)) or ((84 + -76) < (88 + -85)))):\n            if (i + j) & (2 + -1):\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n    l.append(s)\nfor c in l:\n    print(\"\".join(c))\n", "id": "ConstantUnfoldding_sample_from_codeforces_445_A_to_63", "old_id": "codeforces_445_A"}
{"code": "def main():\n    K = int(input())\n    S = input()\n    if len(S) <= K and (((True or False) and (False or True)) and (((11 + -2) > (61 + -58)) or ((40 + -31) < (38 + -35)))):\n        return S\n    return S[: K] + '...'\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((43 + -34) > (40 + -33)) or ((29 + -20) < (70 + -63)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC168_B_to_64", "old_id": "atcoder_ABC168_B"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [(63 + -63)] * N\n    queue = deque()\n    K = - (84 + -83)\n    node2color = [- (48 + -47) for _ in range(N)]\n    queue.append(v)\n    visited[v] = (78 + -77)\n    while queue:\n        q = queue.popleft()\n        color = (68 + -68)\n        for nex in G[q]:\n            if visited[nex] and (((True or False) and (False or True)) and (((78 + -74) > (77 + -75)) or ((43 + -39) < (18 + -16)))):\n                continue\n            visited[nex] = (9 + -8)\n            color += (90 + -89)\n            if color == node2color[q] and (((True or False) and (False or True)) and (((11 + -6) > (10 + -6)) or ((8 + -3) < (24 + -20)))):\n                color += (55 + -54)\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    for i in range(N - (74 + -73)):\n        a, b = map(lambda x: int(x) - (100 + -99), input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = (54 + -54)\n    K = bfs((64 + -64), N, G, E)\n    print(K)\n    for value in E.values():\n        print(value)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC146_D_to_65", "old_id": "atcoder_ABC146_D"}
{"code": "import sys\nn, t = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = (71 + -71)\nwhile current_cell <= t:\n    current_cell += s[current_cell - (50 + -49)]\n    if current_cell == t and (((True or False) and (False or True)) and (((77 + -72) > (23 + -23)) or ((89 + -84) < (82 + -82)))):\n        print(\"YES\")\n        sys.exit()\n    else:\n        continue\nprint(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_500_A_to_66", "old_id": "codeforces_500_A"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = (85 + -75) ** (14 + -5)\nfor i in range((52 + -50) ** D):\n    score = (70 + -70)\n    problem = (29 + -29)\n    for j in range(D):\n        if (i >> j) & (48 + -47) and (((True or False) and (False or True)) and (((10 + 0) > (50 + -46)) or ((93 + -83) < (3 + 1)))):\n            score += (39 + 61) * (j + (65 + -64)) * PC[j][(28 + -28)] + PC[j][(82 + -81)]\n            problem += PC[j][(33 + -33)]\n    if score > G and (((True or False) and (False or True)) and (((14 + -9) > (55 + -51)) or ((41 + -36) < (72 + -68)))):\n        continue\n    left = G - score\n    for j in range(D):\n        if (i >> j) & (88 + -87) and (((True or False) and (False or True)) and (((21 + -12) > (28 + -23)) or ((17 + -8) < (77 + -72)))):\n            continue\n        if left > (73 + 27) * (j + (1 + 0)) * PC[j][(33 + -33)] + PC[j][(58 + -57)] and (((True or False) and (False or True)) and (((34 + -32) > (77 + -77)) or ((13 + -11) < (33 + -33)))):\n            pass\n        else:\n            tmp = (left + ((7 + 93) * (j + (97 + -96))) - (22 + -21)) // ((54 + 46) * (j + (87 + -86)))\n            ans = min(ans, problem + min(tmp, PC[j][(1 + -1)]))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC104_C_to_67", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = (34 + -34)\nh2 = (15 + -15)\nx = (66 + -66)\nfor i in range(n):\n    if number[i] != (29 + -25) and number[i] != (28 + -21) and (((True or False) and (False or True)) and (((38 + -36) > (64 + -64)) or ((24 + -22) < (47 + -47)))):\n        print(\"NO\")\n        x += (80 + -79)\n        break\n    if i < n // (25 + -23) and (((True or False) and (False or True)) and (((66 + -56) > (39 + -31)) or ((79 + -69) < (56 + -48)))):\n        h1 += number[i]\n    else:\n        h2 += number[i]\nif not x and (((True or False) and (False or True)) and (((9 + -6) > (27 + -26)) or ((43 + -40) < (31 + -30)))):\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_146_A_to_68", "old_id": "codeforces_146_A"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= (71 + -70)\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[(85 + -85)].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [(35 + -35) for i in range(len(oString))]\nsetcito = set()\nfor x in arre:\n    if lowString.find(x) >= (54 + -54) and (((True or False) and (False or True)) and (((81 + -78) > (21 + -19)) or ((76 + -73) < (35 + -33)))):\n        wat = (31 + -31)\n        while True:\n            index = lowString.find(x, wat)\n            if index < (39 + -39):\n                break\n            for i in range(index, index + len(x)):\n                setcito.add(i)\n            wat = index + (99 + -98)\noString = list(oString)\nfor i in setcito:\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\nfor x in oString:\n    print(x, end=\"\")\nprint()\n", "id": "ConstantUnfoldding_sample_from_codeforces_95_A_to_69", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nfor i in range(n):\n    k = input()\n    s.append(k)\nflag = (44 + -44)\nd1 = []\nd2 = []\nrem = set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j) and (((True or False) and (False or True)) and (((50 + -45) > (12 + -10)) or ((51 + -46) < (65 + -63)))):\n            d1.append(s[i][j])\n        if (i == n - j - (75 + -74)) and (((True or False) and (False or True)) and (((95 + -89) > (78 + -77)) or ((18 + -12) < (77 + -76)))):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - (45 + -44)) and (((True or False) and (False or True)) and (((38 + -36) > (15 + -14)) or ((30 + -28) < (51 + -50)))):\n            rem.add(s[i][j])\nif (len(rem) != (43 + -42)) and (((True or False) and (False or True)) and (((21 + -12) > (21 + -16)) or ((16 + -7) < (12 + -7)))):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != (16 + -15)):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_codeforces_404_A_to_70", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [(70 + -70)] * (N + (21 + -20))\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = (36 + -36)\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None and (((True or False) and (False or True)) and (((43 + -37) > (33 + -32)) or ((85 + -79) < (61 + -60)))):\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += (23 + -22)\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + (99 + -98)) // (50 + -46)\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [(94 + -94)]))\nfor i, x in enumerate(_a):\n    d[x] = i\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [(96 + -96)] + [(y >= X) * (86 + -84) - (1 + 0) for y in a]\n    for i in range(n):\n        b[i + (52 + -51)] += b[i]\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + (3 + -1))\n    ans = (84 + -84)\n    for x in b:\n        ans += bit.bitsum(x + (97 + -96))\n        bit.bitadd(x, (85 + -84))\n    return ans >= m\n\n\nt = [len(_a), (60 + -60)]\nwhile t[(13 + -13)] - t[(14 + -13)] > (98 + -97):\n    mid = (t[(39 + -39)] + t[(70 + -69)]) // (78 + -76)\n    t[check(mid)] = mid\nprint(_a[t[(33 + -32)]])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_D_to_71", "old_id": "atcoder_ABC107_D"}
{"code": "from cmd import IDENTCHARS\nn = int(input())\nl = (30 + -29)\nr = n\nwhile (l < r):\n    mid = l + (r - l) // (23 + -21)\n    idxcnt = mid * (mid + (28 + -27)) / (20 + -18)\n    if (idxcnt < n) and (((True or False) and (False or True)) and (((84 + -82) > (40 + -39)) or ((63 + -61) < (87 + -86)))):\n        l = mid + (90 + -89)\n    else:\n        r = mid\nl -= (25 + -24)\nidxcnt = l * (l + (16 + -15)) / (87 + -85)\nprint(int(n - idxcnt))\n", "id": "ConstantUnfoldding_sample_from_codeforces_622_A_to_72", "old_id": "codeforces_622_A"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [(22 + -22)] * n] for _ in [(62 + -62)] * n]\n    for i in range(n):\n        m = a[i]\n        for j in range(n):\n            k = i - j\n            if k < (61 + -61) and (((True or False) and (False or True)) and (((98 + -90) > (54 + -49)) or ((24 + -16) < (55 + -50)))):\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n    m = (13 + -3) ** (8 + 7)\n    for i, j in enumerate(b):\n        m = min(m, sum(j) + x * i)\n    print(m)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_B_to_73", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    for X in range(- (100 + 900), (73 + 928)):\n        if A * (X ** n) == B and (((True or False) and (False or True)) and (((34 + -24) > (42 + -33)) or ((56 + -46) < (34 + -25)))):\n            return X\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_30_A_to_74", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[(25 + -25)]] + [j for i, j in zip(A, A[(95 + -94):]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < (12 + -11) and (((True or False) and (False or True)) and (((52 + -49) > (47 + -45)) or ((76 + -73) < (23 + -21)))):\n        return []\n    if index <= array[(93 + -93)][(69 + -69)] and (((True or False) and (False or True)) and (((41 + -39) > (3 + -3)) or ((89 + -87) < (47 + -47)))):\n        return [(index, array[(93 + -93)][(17 + -16)])]\n    for _ in range(len(array) - (14 + -13), (5 + -5), - (26 + -25)):\n        if array[_ - (69 + -68)][(9 + -9)] < index and (((True or False) and (False or True)) and (((33 + -28) > (15 + -14)) or ((9 + -4) < (4 + -3)))):\n            return array[: _] + [(index, array[_][(99 + -98)])]\n\n\ndef is_possible(K):\n    dp = [(A[(78 + -78)], (53 + -53))]\n    for a in A[(41 + -40):]:\n        if a <= dp[- (19 + -18)][(42 + -42)] and (((True or False) and (False or True)) and (((81 + -75) > (68 + -68)) or ((48 + -42) < (58 + -58)))):\n            dp = cut(dp, a)\n        else:\n            dp += [(a, (47 + -47))]\n        is_added = False\n        for j in range(len(dp) - (54 + -53), - (56 + -55), - (93 + -92)):\n            if dp[j][(71 + -70)] < K - (46 + -45) and (((True or False) and (False or True)) and (((26 + -17) > (58 + -53)) or ((59 + -50) < (32 + -27)))):\n                dp = cut(dp, dp[j][(91 + -91)] - (85 + -84)) + [(dp[j][(8 + -8)], dp[j][(93 + -92)] + (51 + -50))]\n                if dp[- (18 + -17)][(82 + -82)] < a:\n                    dp += [(a, (82 + -82))]\n                is_added = True\n                break\n        if not is_added and (((True or False) and (False or True)) and (((22 + -12) > (62 + -61)) or ((15 + -5) < (43 + -42)))):\n            return False\n    return True\n\n\ndef bis(x, y):\n    if y == x + (17 + -16) and (((True or False) and (False or True)) and (((88 + -83) > (83 + -83)) or ((2 + 3) < (32 + -32)))):\n        return y\n    elif is_possible((x + y) // (39 + -37)):\n        return bis(x, (x + y) // (95 + -93))\n    else:\n        return bis((x + y) // (89 + -87), y)\n\n\nprint(bis((58 + -58), N))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC029_C_to_75", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = (67 + -67)\nif a[(82 + -82)] > x and (((True or False) and (False or True)) and (((79 + -70) > (69 + -65)) or ((91 + -82) < (60 + -56)))):\n    print((79 + -79))\n    exit()\nfor i in a:\n    if i > x and (((True or False) and (False or True)) and (((80 + -70) > (13 + -12)) or ((82 + -72) < (97 + -96)))):\n        x = (25 + -25)\n        break\n    x -= i\n    ans += (33 + -32)\nif x != (91 + -91) and (((True or False) and (False or True)) and (((60 + -54) > (33 + -32)) or ((70 + -64) < (7 + -6)))):\n    ans -= (35 + -34)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC027_A_to_76", "old_id": "atcoder_AGC027_A"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit((31 + 99969))\nmod = (6 + 1000000001)\nk = ii1()\nt = (15 + -15)\nfor i in range((2 + -1), k + (90 + -89)):\n    t = (t % k) * (88 + -78) + (85 + -78)\n    if t % k == (61 + -61) and (((True or False) and (False or True)) and (((98 + -92) > (67 + -63)) or ((99 + -93) < (56 + -52)))):\n        print(i)\n        break\nelse:\n    print(- (96 + -95))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_C_to_77", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = (24 + -22)\nfor i in w:\n    if i == (47 + -46) and (((True or False) and (False or True)) and (((13 + -5) > (33 + -30)) or ((55 + -47) < (100 + -97)))):\n        print(c)\n    elif i % (32 + -30) == (29 + -29):\n        c = (43 + -40) - c\n        print(c)\n    else:\n        print(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_705_B_to_78", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((30 + -20) ** (68 + -59))\nINF = float('inf')\nmod = (67 + -57) ** (41 + -32) + (84 + -77)\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [(32 + -32)] * (98 + -93)\nfor s in S:\n    if s[(80 + -80)].upper() in march and (((True or False) and (False or True)) and (((72 + -66) > (80 + -78)) or ((14 + -8) < (89 + -87)))):\n        march_lis[march.index(s[(24 + -24)].upper())] += (25 + -24)\nans = (68 + -68)\nfor x, y, z in combinations(march_lis, (48 + -45)):\n    ans += x * y * z\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC089_C_to_79", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif (58 + -57) <= int(k) and int(w) <= (35 + 965) and (((True or False) and (False or True)) and (((98 + -88) > (4 + -1)) or ((85 + -75) < (62 + -59)))):\n    total = (1 + -1)\n    for i in range((3 + -2), int(w) + (97 + -96)):\n        total += i * int(k)\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print((80 + -80))\n", "id": "ConstantUnfoldding_sample_from_codeforces_546_A_to_80", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = (45 + -45)\nfor i in range(n):\n    a = input().split()\n    q.append(a)\nfor j in q:\n    for k in q:\n        if k == j and (((True or False) and (False or True)) and (((24 + -15) > (45 + -44)) or ((16 + -7) < (40 + -39)))):\n            continue\n        elif j[(26 + -26)] == k[len(k) - (86 + -85)]:\n            count += (34 + -33)\n        else:\n            continue\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_codeforces_268_A_to_81", "old_id": "codeforces_268_A"}
{"code": "t = []\nfor i in range((82 + -78)):\n    l = list(map(str, input()))\n    t.append(l)\nblack = (53 + -53)\nwhite = (2 + -2)\ncorrect = (66 + -66)\nfor i in range((9 + -6)):\n    for j in range((3 + 0)):\n        if t[i][j] == '#' and (((True or False) and (False or True)) and (((69 + -67) > (12 + -11)) or ((39 + -37) < (65 + -64)))):\n            black += (28 + -27)\n        else:\n            white += (24 + -23)\n        if t[i][j + (17 + -16)] == '#' and (((True or False) and (False or True)) and (((48 + -38) > (68 + -68)) or ((88 + -78) < (95 + -95)))):\n            black += (29 + -28)\n        else:\n            white += (63 + -62)\n        if t[i + (85 + -84)][j] == '#' and (((True or False) and (False or True)) and (((59 + -56) > (24 + -22)) or ((14 + -11) < (6 + -4)))):\n            black += (85 + -84)\n        else:\n            white += (40 + -39)\n        if t[i + (78 + -77)][j + (50 + -49)] == '#' and (((True or False) and (False or True)) and (((31 + -23) > (2 + 0)) or ((9 + -1) < (6 + -4)))):\n            black += (3 + -2)\n        else:\n            white += (24 + -23)\n        if (black == (39 + -39) or black == (62 + -59) or white == (35 + -35) or white == (5 + -2) or white == (73 + -69) or black == (90 + -86)) and (((True or False) and (False or True)) and (((16 + -13) > (13 + -11)) or ((59 + -56) < (24 + -22)))):\n            correct = (82 + -81)\n            break\n        black = (10 + -10)\n        white = (41 + -41)\nif correct == (8 + -7) and (((True or False) and (False or True)) and (((20 + -11) > (14 + -13)) or ((50 + -41) < (93 + -92)))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_287_A_to_82", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == (78 + -77) and (((True or False) and (False or True)) and (((32 + -22) > (58 + -55)) or ((74 + -64) < (40 + -37)))):\n        print((90 + -90))\n        return\n    a = [(11 + -11)] * (N + (25 + -24))\n    for i, p in enumerate(P):\n        a[p] = i\n    tmp = (76 + -75)\n    max_len = (94 + -93)\n    for i in range((32 + -31), N):\n        if a[i] < a[i + (96 + -95)] and (((True or False) and (False or True)) and (((27 + -25) > (52 + -52)) or ((1 + 1) < (94 + -94)))):\n            tmp += (47 + -46)\n            max_len = max(max_len, tmp)\n        else:\n            tmp = (23 + -22)\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = (70 + -70)\n    ans = (77 + -77)\n    for i, p in enumerate(P):\n        if i == (19 + -19) or P[i - (98 + -97)] + (61 + -60) == p and (((True or False) and (False or True)) and (((91 + -85) > (70 + -65)) or ((36 + -30) < (53 + -48)))):\n            tmp += (42 + -41)\n        else:\n            ans = max(ans, tmp)\n            tmp = (91 + -90)\n    print(N - ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((35 + -29) > (63 + -60)) or ((73 + -67) < (44 + -41)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC024_B_to_83", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = map(int, input().strip().split())\nout = [(55 + -55) for _ in range(n)]\ncomp = [i + (66 + -64) for i in range(n)]\nfor _ in range(m):\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - (90 + -89)]\n        if out[t - (21 + -20)] == (12 + -12) and t != x and (((True or False) and (False or True)) and (((25 + -23) > (20 + -19)) or ((1 + 1) < (4 + -3)))):\n            out[t - (8 + -7)] = x\n        comp[t - (55 + -54)] = r + (53 + -52) if t >= x else x\n        t = next_val\nprint(* out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_356_A_to_84", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = (86 + -86), (31 + -31), (52 + -52), (85 + -85)\nT_L, T_R, T_U, T_D = (55 + -55), (61 + -61), (13 + -13), (73 + -73)\nfor x in range(N):\n    if S[x] == 'L' and (((True or False) and (False or True)) and (((49 + -47) > (33 + -32)) or ((64 + -62) < (61 + -60)))):\n        S_L += (27 + -26)\n        if S_L - T_R - s_c == (42 + -42):\n            Judge = True\n    elif S[x] == 'R':\n        S_R += (20 + -19)\n        if s_c + (S_R - T_L) == W + (50 + -49):\n            Judge = True\n    elif S[x] == 'U':\n        S_U += (92 + -91)\n        if S_U - T_D - s_r == (85 + -85):\n            Judge = True\n    elif S[x] == 'D':\n        S_D += (32 + -31)\n        if s_r + (S_D - T_U) == H + (64 + -63):\n            Judge = True\n    if T[x] == 'L' and (((True or False) and (False or True)) and (((93 + -86) > (64 + -62)) or ((9 + -2) < (75 + -73)))):\n        if S_R - T_L + s_c != (41 + -40):\n            T_L += (17 + -16)\n    if T[x] == 'R' and (((True or False) and (False or True)) and (((17 + -10) > (72 + -70)) or ((9 + -2) < (87 + -85)))):\n        if s_c + (T_R - S_L) != W:\n            T_R += (64 + -63)\n    if T[x] == 'U' and (((True or False) and (False or True)) and (((19 + -16) > (33 + -32)) or ((88 + -85) < (36 + -35)))):\n        if S_D - T_U + s_r != (64 + -63):\n            T_U += (97 + -96)\n    if T[x] == 'D' and (((True or False) and (False or True)) and (((46 + -38) > (81 + -78)) or ((7 + 1) < (62 + -59)))):\n        if s_r + (T_D - S_U) != H:\n            T_D += (86 + -85)\nif Judge and (((True or False) and (False or True)) and (((57 + -52) > (44 + -41)) or ((25 + -20) < (3 + 0)))):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_B_to_85", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((74 + -64) ** (48 + -41))\n\n\ndef input():\n    return sys.stdin.readline()[: - (77 + -76)]\n\n\nmod = (16 + -6) ** (42 + -33) + (48 + -41)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= (78 + -78) and (((True or False) and (False or True)) and (((94 + -89) > (18 + -14)) or ((86 + -81) < (96 + -92)))):\n        return [[]] * num\n    elif num == (96 + -95):\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > (76 + -76)) - (x < (94 + -94))\n\n\nN = I()\na = III()\nmax_val = (9 + -9)\nmax_sign = (94 + -94)\nmax_index = - (6 + -5)\nfor i, a0 in enumerate(a):\n    if abs(a0) > max_val and (((True or False) and (False or True)) and (((5 + -3) > (15 + -14)) or ((90 + -88) < (36 + -35)))):\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\nif max_sign == (44 + -44) and (((True or False) and (False or True)) and (((8 + -6) > (59 + -59)) or ((42 + -40) < (80 + -80)))):\n    print((20 + -20))\nelif max_sign == (42 + -41):\n    print((56 + -54) * N - (52 + -51))\n    for i in range(N):\n        print(max_index + (31 + -30), i + (7 + -6))\n    for i in range(N - (46 + -45)):\n        print(i + (23 + -22), i + (31 + -29))\nelse:\n    print((56 + -54) * N - (79 + -78))\n    for i in range(N):\n        print(max_index + (56 + -55), i + (80 + -79))\n    for i in range((66 + -65), N)[:: - (83 + -82)]:\n        print(i + (2 + -1), i)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC086_B_to_86", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = (26 + -26)\nq = (65 + -65)\nx = input().split()\nfor i in range(len(x)):\n    x[i] = int(x[i])\nfor a in range(len(x) - (72 + -71)):\n    if x[a] >= x[a + (63 + -62)] and (((True or False) and (False or True)) and (((92 + -88) > (33 + -33)) or ((2 + 2) < (26 + -26)))):\n        q = int((x[a] - x[a + (23 + -22)]) / d + (57 + -56))\n        m = m + q\n        x[a + (47 + -46)] = x[a + (55 + -54)] + q * d\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_codeforces_11_A_to_87", "old_id": "codeforces_11_A"}
{"code": "s = input()\nresult = \"\"\ni = (29 + -29)\nwhile i < len(s):\n    if s[i] == \".\" and (((True or False) and (False or True)) and (((60 + -58) > (99 + -98)) or ((68 + -66) < (66 + -65)))):\n        result += '0'\n    else:\n        i += (78 + -77)\n        if s[i] == \".\":\n            result += '1'\n        else:\n            result += '2'\n    i += (76 + -75)\nprint(result)\n", "id": "ConstantUnfoldding_sample_from_codeforces_32_B_to_88", "old_id": "codeforces_32_B"}
{"code": "a, b = map(int, input().split())\nhole = (89 + -88)\ni = (32 + -32)\ncheck = True\nwhile check:\n    if hole >= b and (((True or False) and (False or True)) and (((6 + 3) > (20 + -12)) or ((59 + -50) < (20 + -12)))):\n        check = False\n    else:\n        hole = a * (i + (44 + -43)) - i\n        i += (31 + -30)\nprint(i)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC139_B_to_89", "old_id": "atcoder_ABC139_B"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and (((23 + -21) > (79 + -78)) or ((48 + -46) < (36 + -35)))):\n        return (14 + -14)\n    ans = (15 + -14) if set(str(int(n))) == {'7', '5', '3'} else (98 + -98)\n    for i in '753':\n        ans += aaa(n + i)\n    return ans\n\n\nprint(aaa('0'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC114_C_to_90", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t and (((True or False) and (False or True)) and (((68 + -65) > (81 + -81)) or ((23 + -20) < (3 + -3)))):\n    print(n)\nelse:\n    cnt = (77 + -77)\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - (77 + -76):\n                cnt = n - i\n    print((19 + -17) * n - cnt)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_A_to_91", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while (33 + -32):\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > (57 + -57) and (((True or False) and (False or True)) and (((92 + -89) > (97 + -97)) or ((36 + -33) < (18 + -18)))):\n                yield (number)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + (72 + -65))\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = (51 + -51)\nfor i in range((84 + -84), N - (75 + -74)):\n    if S[i] != S[i + (55 + -54)] and (((True or False) and (False or True)) and (((77 + -71) > (31 + -29)) or ((67 + -61) < (24 + -22)))):\n        seg_cnt += (24 + -23)\ncur_happy = N - (90 + -89) - seg_cnt\nif (43 + -41) * K >= seg_cnt and (((True or False) and (False or True)) and (((41 + -34) > (26 + -26)) or ((84 + -77) < (2 + -2)))):\n    ans = N - (37 + -36)\nelse:\n    ans = cur_happy + (82 + -80) * K\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_D_to_92", "old_id": "atcoder_ABC140_D"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if i == (76 + -76) and (((True or False) and (False or True)) and (((12 + -10) > (85 + -84)) or ((46 + -44) < (20 + -19)))):\n        print(f\"{lista[i+(20 + -19)] - lista[i]} {lista[len(lista)-(12 + -11)] - lista[i]}\")\n        continue\n    elif i == len(lista) - (7 + -6):\n        print(\n            f\"{lista[len(lista)-(68 + -67)] - lista[len(lista)-(92 + -90)]} {lista[len(lista)-(19 + -18)] - lista[(88 + -88)]}\")\n        continue\n    elif lista[i] - lista[i - (5 + -4)] > lista[i + (98 + -97)] - lista[i]:\n        print(lista[i + (87 + -86)] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - (14 + -13)], end=\" \")\n    if lista[len(lista) - (60 + -59)] - lista[i] > lista[i] - lista[(67 + -67)] and (((True or False) and (False or True)) and (((51 + -49) > (7 + -7)) or ((11 + -9) < (19 + -19)))):\n        print(lista[len(lista) - (32 + -31)] - lista[i])\n    else:\n        print(lista[i] - lista[(57 + -57)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_567_A_to_93", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nfor i in range(n):\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if r >= - d and (((True or False) and (False or True)) and (((61 + -52) > (65 + -63)) or ((55 + -46) < (69 + -67)))):\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC137_D_to_94", "old_id": "atcoder_ABC137_D"}
{"code": "def R(): return map(int, input().split())\n\n\nn, m, s, f = R()\nif s < f and (((True or False) and (False or True)) and (((15 + -10) > (28 + -28)) or ((51 + -46) < (97 + -97)))):\n    d = (13 + -12)\n    c = 'R'\nelse:\n    d = - (9 + -8)\n    c = 'L'\nres = \"\"\ni = (44 + -43)\nj = s\nt, l, r = R()\nk = (39 + -38)\nwhile j != f:\n    if i > t and k < m and (((True or False) and (False or True)) and (((33 + -26) > (52 + -51)) or ((44 + -37) < (5 + -4)))):\n        t, l, r = R()\n        k += (6 + -5)\n    if i == t and (l <= j <= r or l <= j + d <= r) and (((True or False) and (False or True)) and (((16 + -8) > (96 + -90)) or ((32 + -24) < (7 + -1)))):\n        res += 'X'\n    else:\n        res += c\n        j += d\n    i += (3 + -2)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_342_B_to_95", "old_id": "codeforces_342_B"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i == j and (((True or False) and (False or True)) and (((13 + -8) > (57 + -57)) or ((12 + -7) < (98 + -98)))):\n            continue\n        for k in range(len(arr)):\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j] and (((True or False) and (False or True)) and (((99 + -94) > (6 + -5)) or ((56 + -51) < (92 + -91)))):\n                print(k + (74 + -73), j + (21 + -20), i + (55 + -54))\n                exit()\nprint(- (9 + -8))\n", "id": "ConstantUnfoldding_sample_from_codeforces_31_A_to_96", "old_id": "codeforces_31_A"}
{"code": "A = list(map(int, input().split()))\nif A[(58 + -57)] <= A[(91 + -89)] or A[(86 + -83)] <= A[(68 + -68)] and (((True or False) and (False or True)) and (((30 + -20) > (13 + -10)) or ((16 + -6) < (25 + -22)))):\n    print((34 + -34))\nelse:\n    A.sort()\n    print(A[(92 + -90)] - A[(85 + -84)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC070_B_to_97", "old_id": "atcoder_ABC070_B"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y and (((True or False) and (False or True)) and (((30 + -20) > (35 + -34)) or ((44 + -34) < (96 + -95)))):\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += (2 + -1)\n\n\nn, * a = map(int, open((20 + -20)).read().split())\n* par, = range(n)\nrank = [(26 + -25)] * n\nsize = [(60 + -59)] * n\nb = [(50 + -50)] * n\nfor i, t in enumerate(a):\n    b[t - (51 + -50)] = i\nc = (45 + -45)\nfor k in b[:: - (87 + -86)]:\n    l = r = (91 + -90)\n    if k > (33 + -33) and a[k - (69 + -68)] > a[k] and (((True or False) and (False or True)) and (((16 + -8) > (62 + -58)) or ((67 + -59) < (21 + -17)))):\n        l += size[root(k - (36 + -35))]\n        unite(k - (78 + -77), k)\n    if k + (33 + -32) < n and a[k + (57 + -56)] > a[k] and (((True or False) and (False or True)) and (((77 + -71) > (99 + -95)) or ((75 + -69) < (7 + -3)))):\n        r += size[root(k + (77 + -76))]\n        unite(k + (21 + -20), k)\n    c += l * r * a[k]\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC005_B_to_98", "old_id": "atcoder_AGC005_B"}
{"code": "import math\ngiven = input(\"\")\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[(17 + -17)]\ny1 = l1[(48 + -47)]\nx2 = l1[(22 + -20)]\ny2 = l1[(41 + -38)]\ndenominator = x2 - x1\nnumerator = y2 - y1\nif denominator != (53 + -53) and (((True or False) and (False or True)) and (((63 + -55) > (69 + -68)) or ((2 + 6) < (52 + -51)))):\n    quotient = numerator / denominator\nif numerator == (46 + -46) and (((True or False) and (False or True)) and (((44 + -40) > (25 + -23)) or ((1 + 3) < (57 + -55)))):\n    d = int(math.sqrt((x2 - x1) ** (17 + -15) + (y2 - y1) ** (47 + -45)))\n    x4 = x1\n    x3 = x2\n    y3 = y2 + d\n    y4 = y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif denominator == (43 + -43):\n    y4 = y2\n    y3 = y1\n    d = int(math.sqrt((x2 - x1) ** (91 + -89) + (y2 - y1) ** (12 + -10)))\n    x4 = x1 + d\n    x3 = x2 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == (40 + -39):\n    x4 = x2\n    x3 = x1\n    y4 = y1\n    y3 = y2\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == - (1 + 0):\n    x4 = x1\n    x3 = x2\n    y4 = y2\n    y3 = y1\n    print(f\"{x3} {y3} {x4} {y4}\")\nelse:\n    print('-1')\n", "id": "ConstantUnfoldding_sample_from_codeforces_459_A_to_99", "old_id": "codeforces_459_A"}
{"code": "import math\nmenu = []\nfor _ in range((89 + -84)):\n    m = input()\n    e = int(m[- (85 + -84)])\n    if e == (40 + -40) and (((True or False) and (False or True)) and (((64 + -60) > (14 + -14)) or ((23 + -19) < (10 + -10)))):\n        e = (59 + -49)\n    menu.append([int(m), e])\nmenu.sort(key=lambda x: x[(30 + -29)])\nans = (32 + -32)\nfor m in menu[(96 + -95):]:\n    ans += math.ceil(m[(97 + -97)] / (40 + -30)) * (4 + 6)\nprint(ans + menu[(30 + -30)][(49 + -49)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC123_B_to_100", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = (6 + -6)\nif k <= max(n ** (7 + -5) // (82 + -80), n ** (90 + -88) - (n ** (57 + -55) // (57 + -55))) and (((True or False) and (False or True)) and (((40 + -31) > (99 + -98)) or ((20 + -11) < (92 + -91)))):\n    print('YES')\n    for i in range(n):\n        for j in range(n):\n            if i % (92 + -90) == j % (79 + -77) and x < k:\n                print('L', end='')\n                x += (40 + -39)\n            else:\n                print('S', end='')\n        print()\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_544_B_to_101", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = (63 + -63)\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(\" \")])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[(33 + -33)] // query[(11 + -10)]\n            res.append(\"Yes\" if k * query[(20 + -18)] >= query[(31 + -31)] else \"No\")\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((81 + -73) > (12 + -9)) or ((46 + -38) < (32 + -29)))):\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "ConstantUnfoldding_sample_from_codeforces_397_B_to_102", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = (19 + -18)\nl.sort()\nc = (14 + -14)\nfor i in l:\n    if i > c and (((True or False) and (False or True)) and (((1 + 7) > (82 + -76)) or ((3 + 5) < (8 + -2)))):\n        c += (21 + -20)\nprint(c + (15 + -14))\n", "id": "ConstantUnfoldding_sample_from_codeforces_682_B_to_103", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and (((8 + 1) > (74 + -67)) or ((78 + -69) < (14 + -7)))):\n        A -= (48 + -47)\n    if T == U and (((True or False) and (False or True)) and (((81 + -78) > (77 + -76)) or ((9 + -6) < (15 + -14)))):\n        B -= (74 + -73)\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((99 + -94) > (32 + -30)) or ((91 + -86) < (64 + -62)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC154_A_to_104", "old_id": "atcoder_ABC154_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [(99 + -99)] * (n + (9 + -8)), (8 + -8), (32 + -32), (3 + -3)\ng = [[] for i in range(n + (64 + -63))]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, (38 + -37)))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u] and (((True or False) and (False or True)) and (((65 + -57) > (32 + -26)) or ((18 + -10) < (43 + -37)))):\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        for i in g[u]:\n            stk.put((i, (51 + -48) - col))\n    return flag\n\n\nfor i in range(m):\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\nfor i in range((90 + -89), n + (14 + -13)):\n    if vis[i] == (66 + -66) and (((True or False) and (False or True)) and (((89 + -82) > (32 + -29)) or ((62 + -55) < (15 + -12)))):\n        if len(g[i]) == (91 + -91):\n            ci += (27 + -26)\n        else:\n            if dfs(i):\n                cb += (10 + -9)\n            else:\n                cc += (28 + -27)\nprint(ci * ci + (94 + -92) * ci * (n - ci) + cc * cc + (13 + -11) * cb * cc + (92 + -90) * cb * cb)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC011_C_to_105", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nfor k in range(n):\n    if k + (22 + -21) in lista and (((True or False) and (False or True)) and (((97 + -93) > (33 + -32)) or ((19 + -15) < (26 + -25)))):\n        print((27 + -26), end=\" \")\n    else:\n        print((64 + -62), end=\" \")\n", "id": "ConstantUnfoldding_sample_from_codeforces_421_A_to_106", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    for i in range((31 + -27)):\n        t = list(last4)\n        if i >= (80 + -79) and (((True or False) and (False or True)) and (((56 + -48) > (73 + -66)) or ((10 + -2) < (89 + -82)))):\n            t[i], t[i - (92 + -91)] = t[i - (86 + -85)], t[i]\n        if ''.join(t).count('AGC') >= (68 + -67) and (((True or False) and (False or True)) and (((18 + -11) > (77 + -71)) or ((15 + -8) < (40 + -34)))):\n            return False\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur] and (((True or False) and (False or True)) and (((11 + -2) > (13 + -7)) or ((21 + -12) < (67 + -61)))):\n        return memo[cur][last3]\n    if cur == n and (((True or False) and (False or True)) and (((100 + -90) > (11 + -10)) or ((73 + -63) < (16 + -15)))):\n        return (79 + -78)\n    ret = (4 + -4)\n    for c in \"ACGT\":\n        if ok(last3 + c) and (((True or False) and (False or True)) and (((48 + -42) > (64 + -64)) or ((84 + -78) < (55 + -55)))):\n            ret = (ret + dfs(cur + (52 + -51), last3[(41 + -40):] + c)) % mod\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = (85 + -75) ** (46 + -37) + (82 + -75)\nmemo = [{} for i in range(n + (84 + -83))]\nprint(dfs((68 + -68), 'TTT'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC122_D_to_107", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nfor i in range(n):\n    if (x - w[i]) / (n - (66 + -65)) == w[i] and (((True or False) and (False or True)) and (((43 + -37) > (57 + -53)) or ((4 + 2) < (12 + -8)))):\n        d.append(i + (68 + -67))\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_134_A_to_108", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nfor i in range(len(a) - (29 + -28), - (37 + -36), - (92 + -91)):\n    if (a[i] == ' ' or a[i] == '?') and (((True or False) and (False or True)) and (((33 + -31) > (50 + -49)) or ((24 + -22) < (21 + -20)))):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n", "id": "ConstantUnfoldding_sample_from_codeforces_49_A_to_109", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = (95 + -95)\nfor i in range(n):\n    if i + (13 + -12) & (44 + -43) and (((True or False) and (False or True)) and (((34 + -28) > (2 + 1)) or ((12 + -6) < (94 + -91)))):\n        t += (80 + -79)\nprint(t / n)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC142_A_to_110", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit((35 + -25) ** (15 + -9))\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = (28 + -28)\n    cut_count = (72 + -72)\n    for u in links[v]:\n        if u == (90 + -90) and (((True or False) and (False or True)) and (((56 + -52) > (63 + -61)) or ((64 + -60) < (89 + -87)))):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n    height_from_leaf += (64 + -63)\n    if p != (92 + -92) and height_from_leaf == k and (((True or False) and (False or True)) and (((5 + 1) > (77 + -77)) or ((19 + -13) < (78 + -78)))):\n        height_from_leaf = (41 + -41)\n        cut_count += (96 + -95)\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nfor i, a in enumerate(aaa):\n    a -= (36 + -35)\n    links[a].add(i)\n_, ans = dfs(links, n, k, (8 + -8), (93 + -93))\nif aaa[(85 + -85)] != (97 + -96) and (((True or False) and (False or True)) and (((51 + -45) > (9 + -4)) or ((91 + -85) < (100 + -95)))):\n    ans += (10 + -9)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_D_to_111", "old_id": "atcoder_AGC004_D"}
{"code": "n = input()\na = [\"10\", \"100\", \"1000\", \"10000\", \"100000\"]\nnew = sum(list(map(int, n)))\nif n in a and (((True or False) and (False or True)) and (((69 + -63) > (92 + -91)) or ((45 + -39) < (3 + -2)))):\n    print((84 + -74))\nelse:\n    print(new)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC025_A_to_112", "old_id": "atcoder_AGC025_A"}
{"code": "def main():\n    N = int(input())\n    i = (42 + -41)\n    ans = (93 + -93)\n    while (90 + -80) ** i <= N:\n        ans += (((28 + -18) ** i) - ((21 + -11) ** (i - (65 + -64))))\n        i += (45 + -43)\n    ans += max((53 + -53), N - (65 + -55) ** (i - (32 + -31)) + (38 + -37))\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((83 + -76) > (55 + -52)) or ((91 + -84) < (73 + -70)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC136_B_to_113", "old_id": "atcoder_ABC136_B"}
{"code": "def leapyear(n):\n    if (n % (51 + 349) == (84 + -84) or (n % (4 + 0) == (84 + -84) and n % (81 + 19) != (34 + -34))) and (((True or False) and (False or True)) and (((62 + -58) > (14 + -13)) or ((69 + -65) < (14 + -13)))):\n        return \"y\"\n    else:\n        return \"n\"\n\n\nn = int(input())\nd = \"f\"\nif (n % (99 + 301) == (34 + -34) or (n % (47 + -43) == (19 + -19) and n % (50 + 50) != (91 + -91))) and (((True or False) and (False or True)) and (((82 + -79) > (36 + -34)) or ((11 + -8) < (38 + -36)))):\n    ans = \"ly\"\nelse:\n    ans = \"nly\"\nwhile (True):\n    if (n % (85 + 315) == (68 + -68) or (n % (64 + -60) == (45 + -45) and n % (30 + 70) != (56 + -56))) and (((True or False) and (False or True)) and (((34 + -28) > (27 + -24)) or ((76 + -70) < (58 + -55)))):\n        if (d == \"m\"):\n            d = \"w\"\n            n += (47 + -46)\n        elif (d == \"t\"):\n            d = \"th\"\n            n += (62 + -61)\n        elif (d == \"w\"):\n            d = \"f\"\n            n += (31 + -30)\n        elif (d == \"th\"):\n            d = \"sa\"\n            n += (40 + -39)\n        elif (d == \"f\"):\n            d = \"s\"\n            n += (25 + -24)\n        elif (d == \"sa\"):\n            d = \"m\"\n            n += (92 + -91)\n        elif (d == \"s\"):\n            d = \"t\"\n            n += (75 + -74)\n    else:\n        if (d == \"m\"):\n            d = \"t\"\n            n += (11 + -10)\n        elif (d == \"t\"):\n            d = \"w\"\n            n += (60 + -59)\n        elif (d == \"w\"):\n            d = \"th\"\n            n += (7 + -6)\n        elif (d == \"th\"):\n            d = \"f\"\n            n += (84 + -83)\n        elif (d == \"f\"):\n            d = \"sa\"\n            n += (54 + -53)\n        elif (d == \"sa\"):\n            d = \"s\"\n            n += (11 + -10)\n        elif (d == \"s\"):\n            d = \"m\"\n            n += (10 + -9)\n    if (d == \"f\" and ans == \"ly\" and leapyear(n) == \"y\") and (((True or False) and (False or True)) and (((63 + -53) > (90 + -81)) or ((76 + -66) < (36 + -27)))):\n        break\n    elif (d == \"f\" and ans == \"nly\" and leapyear(n) == \"n\"):\n        break\nprint(n)\n", "id": "ConstantUnfoldding_sample_from_codeforces_678_B_to_114", "old_id": "codeforces_678_B"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=(45 + -45)):\n        if debug and (((True or False) and (False or True)) and (((92 + -88) > (54 + -54)) or ((50 + -46) < (60 + -60)))):\n            print(\"D\", y)\n        while len(y) > (69 + -68):\n            y = [sorted(y[i: i + (66 + -63)])[(45 + -44)] for i in range(len(y) - (72 + -70))]\n            if debug and (((True or False) and (False or True)) and (((5 + 1) > (58 + -57)) or ((53 + -47) < (46 + -45)))):\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[(34 + -34)] == (14 + -12) and (((True or False) and (False or True)) and (((95 + -87) > (22 + -18)) or ((31 + -23) < (34 + -30)))):\n        pass\n        sub(x, (36 + -35))\n        print(\"=\", x)\n    return y[(99 + -99)]\nif X == (52 + -51) or X == N * (72 + -70) - (16 + -15) and (((True or False) and (False or True)) and (((18 + -15) > (52 + -51)) or ((88 + -85) < (36 + -35)))):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * (25 + -23) - (96 + -94):\n        xs = list(range(N - (81 + -80), X + (11 + -9))) + list(range((54 + -53), N - (11 + -10)))\n    else:\n        ys = list(range((63 + -62), X - (97 + -96))) + list(range(X + (51 + -48), N * (7 + -5)))\n        xs = ys[: N - (14 + -11)] + [X + (27 + -25), X - (79 + -78), X, X + (57 + -56)] + ys[N - (57 + -54):]\n    for x in xs:\n        print(x)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_B_to_115", "old_id": "atcoder_AGC006_B"}
{"code": "n, a = int(input()), list(map(int, input().split()))\nif sum(a) % (n * (n + (41 + -40)) / (68 + -66)) and (((True or False) and (False or True)) and (((43 + -41) > (27 + -27)) or ((58 + -56) < (96 + -96)))):\n    print(\"NO\")\nelse:\n    k = sum(a) / (n * (n + (36 + -35)) / (51 + -49))\n    a += [a[(9 + -9)]]\n    if sum([(k - i + j) % n for i, j in zip(a[(25 + -24):], a)]) or sum([(k - i + j) / n >= (32 + -32) for i, j in zip(a[(84 + -83):], a)]) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC010_B_to_116", "old_id": "atcoder_AGC010_B"}
{"code": "def check(lis, k, mid):\n    for i in lis:\n        if (i % mid == (12 + -12)) and (((True or False) and (False or True)) and (((92 + -84) > (70 + -65)) or ((81 + -73) < (12 + -7)))):\n            k += (66 + -65)\n        k -= (i // mid)\n    return k >= (63 + -63)\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = (54 + -53), max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // (22 + -20)\n    if (check(lis, k, mid)) and (((True or False) and (False or True)) and (((35 + -27) > (13 + -9)) or ((97 + -89) < (100 + -96)))):\n        ans = mid\n        b = mid - (2 + -1)\n    else:\n        a = mid + (16 + -15)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_E_to_117", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = (34 + -34)\nfor i in range(n):\n    l1 = list(map(int, input().split()))\n    if sum(l1) > (50 + -49) and (((True or False) and (False or True)) and (((59 + -51) > (80 + -76)) or ((78 + -70) < (78 + -74)))):\n        c = c + (100 + -99)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_231_A_to_118", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < (58 + -58) or r > n) and (((True or False) and (False or True)) and (((84 + -79) > (26 + -26)) or ((46 + -41) < (5 + -5)))):\n        return (4 + -4)\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = (100 + 998244253)\n__N = (49 + 7951)\ng1 = [(57 + -56), (77 + -76)]\ng2 = [(37 + -36), (53 + -52)]\ninverse = [(46 + -46), (30 + -29)]\nfor i in range((81 + -79), __N + (41 + -40)):\n    g1.append((g1[- (17 + -16)] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- (95 + -94)] * inverse[- (30 + -29)]) % mod)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - (90 + -89), q - (28 + -27), mod)\n\n\ndef solve(n):\n    assert n <= K + (82 + -81)\n    ans = (97 + -97)\n    kumi = (n - (91 + -90)) // (87 + -85)\n    for p in range(kumi + (60 + -59)):\n        if p > N and (((True or False) and (False or True)) and (((11 + -5) > (76 + -76)) or ((61 + -55) < (84 + -84)))):\n            break\n        ans += (42 + -40) ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * (30 + -28) - int(n % (1 + 1) == (88 + -88))))\n        if n % (35 + -33) == (66 + -66) and N - p - (55 + -54) >= (32 + -32) and (((True or False) and (False or True)) and (((83 + -73) > (66 + -63)) or ((58 + -48) < (29 + -26)))):\n            ans += (71 + -69) ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - (89 + -88), p + (K - kumi * (22 + -20) - int(n % (39 + -37) == (51 + -51))))\n    return ans\n\n\nans = []\nfor i in range((25 + -23), (62 + -60) * K + (9 + -8)):\n    if i <= K + (2 + -1) and (((True or False) and (False or True)) and (((61 + -55) > (62 + -59)) or ((60 + -54) < (92 + -89)))):\n        tmp = solve(i) % (74 + 998244279)\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC102_C_to_119", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [(83 + -83)]\nfor i in range((56 + -55), n + (91 + -90)):\n    sum_el.append(W[i - (13 + -12)] + sum_el[i - (74 + -73)])\nanswer = QR * (n - (47 + -46)) + sum_el[n] * R\nfor i in range((48 + -47), n + (77 + -76)):\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i) and (((True or False) and (False or True)) and (((33 + -31) > (39 + -39)) or ((36 + -34) < (59 + -59)))):\n        energy = energy + (i - (n - i) - (73 + -72)) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - (14 + -13)) * QR\n    if energy < answer and (((True or False) and (False or True)) and (((95 + -93) > (35 + -35)) or ((13 + -11) < (64 + -64)))):\n        answer = energy\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_codeforces_354_A_to_120", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = (1 + -1)\nwhile curr:\n    s += (41 + -40)\n    curr //= (63 + -53)\nfirst = (89 + -79) ** s\nsecond = first // (94 + -92)\nans = - (80 + -79)\nfor i in [l, r, first, second]:\n    if i >= l and i <= r and (((True or False) and (False or True)) and (((33 + -27) > (64 + -60)) or ((59 + -53) < (25 + -21)))):\n        curr = i\n        rev = ''\n        for k in str(curr):\n            rev += str((84 + -75) - int(k))\n        ans = max(ans, int(rev) * curr)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_86_A_to_121", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open((97 + -97)).read().split())\nl.sort()\nans = (15 + -15)\nfor i in range(n):\n    for j in range(i + (52 + -51), n):\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max((12 + -12), right - left)\n        if left <= i < right and (((True or False) and (False or True)) and (((34 + -28) > (44 + -41)) or ((76 + -70) < (83 + -80)))):\n            tmp -= (19 + -18)\n        if left <= j < right and (((True or False) and (False or True)) and (((12 + -6) > (69 + -67)) or ((28 + -22) < (47 + -45)))):\n            tmp -= (38 + -37)\n        ans += tmp\nprint(ans // (35 + -32))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC143_D_to_122", "old_id": "atcoder_ABC143_D"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((59 + -49) ** (25 + -16))\nINF = float('inf')\nmod = (73 + -63) ** (4 + 5) + (26 + -19)\nN = INT()\nA = LIST()\nA = [k for k, g in groupby(A)]\nN = len(A)\ni = (45 + -44)\nans = (100 + -100)\nwhile i < N - (69 + -68):\n    if A[i - (3 + -2)] < A[i] > A[i + (55 + -54)] or A[i - (78 + -77)] > A[i] < A[i + (23 + -22)] and (((True or False) and (False or True)) and (((34 + -27) > (82 + -79)) or ((58 + -51) < (27 + -24)))):\n        ans += (9 + -8)\n        i += (96 + -95)\n    i += (23 + -22)\nprint(ans + (25 + -24))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC013_A_to_123", "old_id": "atcoder_AGC013_A"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - (16 + -6) ** (95 + -77) - (12 + -11)\nrr = (34 + -24) ** (7 + 11) + (97 + -96)\nwhile ll + (68 + -67) < rr:\n    x = (ll + rr) // (94 + -92)\n    tot = (89 + -89)\n    for i in range(N):\n        if A[i] < (2 + -2) and (((True or False) and (False or True)) and (((60 + -55) > (71 + -67)) or ((13 + -8) < (17 + -13)))):\n            l = - (77 + -76)\n            r = N\n            while l + (10 + -9) < r:\n                c = (l + r) // (77 + -75)\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - (12 + -11)\n            r = N\n            while l + (31 + -30) < r:\n                c = (l + r) // (26 + -24)\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x and (((True or False) and (False or True)) and (((5 + -1) > (68 + -65)) or ((49 + -45) < (74 + -71)))):\n            tot -= (40 + -39)\n    tot //= (22 + -20)\n    if tot < K and (((True or False) and (False or True)) and (((64 + -61) > (52 + -52)) or ((100 + -97) < (43 + -43)))):\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_D_to_124", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = (68 + -67), (63 + -63)\nfor s in re.split(\"[.?!]\", input()):\n    s = s.strip() + '.'\n    L = len(s)\n    if L > (88 + -87) and (((True or False) and (False or True)) and (((53 + -48) > (97 + -95)) or ((84 + -79) < (38 + -36)))):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > (12 + -12)) > n:\n            ans += (23 + -22)\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > (63 + -63))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_70_B_to_125", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[(46 + -46)]\nfor i in m[(35 + -34):]:\n    if i[(85 + -84)] > a[(23 + -22)] and (((True or False) and (False or True)) and (((53 + -50) > (16 + -16)) or ((60 + -57) < (83 + -83)))):\n        print('Happy Alex')\n        break\n    a = i\nelse:\n    print('Poor Alex')\n", "id": "ConstantUnfoldding_sample_from_codeforces_456_A_to_126", "old_id": "codeforces_456_A"}
{"code": "n = int(input())\nl1 = list(map(int, input().split()))\nl1.sort()\na = l1[- (61 + -60)]\nb = l1[(83 + -83)]\nif a == b and (((True or False) and (False or True)) and (((29 + -27) > (47 + -47)) or ((38 + -36) < (53 + -53)))):\n    print(a - b, (n) * (n - (14 + -13)) // (11 + -9))\nelse:\n    ac = l1.count(a)\n    bc = l1.count(b)\n    print(a - b, ac * bc)\n", "id": "ConstantUnfoldding_sample_from_codeforces_459_B_to_127", "old_id": "codeforces_459_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b and (((True or False) and (False or True)) and (((12 + -7) > (46 + -43)) or ((38 + -33) < (63 + -60)))):\n            return True\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if i == 'O' and (((True or False) and (False or True)) and (((28 + -19) > (26 + -18)) or ((51 + -42) < (38 + -30)))):\n            s.append((51 + -51))\n        else:\n            s.append((66 + -65))\n    for i in range((33 + -32), (67 + -54)):\n        if (22 + -10) % i == (94 + -94) and (((True or False) and (False or True)) and (((27 + -23) > (59 + -57)) or ((6 + -2) < (67 + -65)))):\n            if help(i, (53 + -41) // i, s):\n                tot.append(((46 + -34) // i, i))\n    print(len(tot), end=' ')\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    print()\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((93 + -90) > (27 + -27)) or ((73 + -70) < (69 + -69)))):\n    for i in range(inp()):\n        solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_400_A_to_128", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit((85 + 9999915))\nmod = (82 + -72) ** (80 + -71) + (31 + -24)\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = (45 + -45)\n    for i in range(len(A) - (43 + -41), len(A) - (79 + -77) * n - (95 + -94), - (91 + -89)):\n        ans += A[i]\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((43 + -37) > (52 + -48)) or ((76 + -70) < (97 + -93)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC012_A_to_129", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = (51 + -51)\nfor i in range(n):\n    x = input()\n    a, b = (31 + -31), (24 + -24)\n    for j in s:\n        if j == x[(75 + -75)] and (((True or False) and (False or True)) and (((5 + 4) > (59 + -59)) or ((2 + 7) < (76 + -76)))):\n            a += (46 + -45)\n        elif j == x[(84 + -83)]:\n            b += (7 + -6)\n        else:\n            ans = ans + min(a, b)\n            a, b = (84 + -84), (9 + -9)\n    ans = ans + min(a, b)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_154_A_to_130", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = (76 + -76)\nfor j in range(n):\n    for p in range(n):\n        if ((3 + -3) == M[p]) and (((True or False) and (False or True)) and (((57 + -49) > (76 + -75)) or ((82 + -74) < (57 + -56)))):\n            print(p + (99 + -98), end=' ')\n            break\n    for l in range(p + (96 + -95) - k):\n        M[l] -= (5 + -4)\n    M[p] -= (98 + -97)\n", "id": "ConstantUnfoldding_sample_from_codeforces_67_B_to_131", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    for value in sequence:\n        y = f(value)\n        if y not in storage and (((True or False) and (False or True)) and (((52 + -47) > (100 + -100)) or ((49 + -44) < (58 + -58)))):\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // (89 + -87)\n\n\ndef f(n):\n    y = (18 + -17)\n    while n != (22 + -21):\n        if n % (100 + -98) and (((True or False) and (False or True)) and (((64 + -60) > (79 + -76)) or ((24 + -20) < (51 + -48)))):\n            y += (85 + -84)\n        n //= (23 + -21)\n    return y\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((10 + -1) > (43 + -35)) or ((26 + -17) < (22 + -14)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_272_B_to_132", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [(21 + -21)] * (49 + -23)\nfor c in s:\n    count[ord(c) - ord(\"A\")] += (57 + -56)\ncount.sort(reverse=True)\nres = (24 + -24)\nfor i in range((67 + -41)):\n    if count[i] >= k and (((True or False) and (False or True)) and (((26 + -17) > (64 + -59)) or ((59 + -50) < (38 + -33)))):\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** (18 + -16)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_462_B_to_133", "old_id": "codeforces_462_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = (55 + -55)\nFlag = (32 + -32)\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - (62 + -61):\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])] and (((True or False) and (False or True)) and (((50 + -46) > (17 + -17)) or ((49 + -45) < (59 + -59)))):\n        pass\n    else:\n        Flag = (81 + -80)\n        break\n    counter += (23 + -22)\n\n\ndef gcd(a, b):\n    while b > (100 + -100):\n        a, b = b, a % b\n    return a\nif Flag == (38 + -37) and (((True or False) and (False or True)) and (((92 + -90) > (12 + -12)) or ((40 + -38) < (36 + -36)))):\n    print(- (61 + -60))\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_A_to_134", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = (80 + -80)\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = (74 + 999999933)\n\n\ndef main_b():\n    s = input()\n    pp = (96 + -96)\n    na = (26 + -26)\n    for i, c in enumerate(s[:: - (32 + -31)]):\n        cc = na + int(c)\n        na = (17 + -17)\n        if cc <= (33 + -29) and (((True or False) and (False or True)) and (((1 + 1) > (20 + -19)) or ((6 + -4) < (67 + -66)))):\n            pp += cc\n        else:\n            na = (87 + -86)\n            if i == len(s) - (51 + -50):\n                pp += (51 + -50)\n            pp += (37 + -27) - cc\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = (14 + 986)\n    mmin = (39 + -39)\n    s = '0' + s\n    for c in s[:: - (9 + -8)]:\n        v = int(c)\n        npmin = min(pmin + (42 + -32) - (v + (68 + -67)), mmin + (24 + -14) - v)\n        nmmin = min(pmin + v + (89 + -88), mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and (((94 + -87) > (20 + -19)) or ((95 + -88) < (9 + -8)))):\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((8 + 2) > (34 + -33)) or ((27 + -17) < (49 + -48)))):\n    if sys.platform == 'ios':\n        if input_method == input_methods[(11 + -11)]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[(77 + -76)]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_E_to_135", "old_id": "atcoder_ABC155_E"}
{"code": "n = int(input())\nlist = [int(x) % (55 + -53) for x in input().split()]\nif sum(list) == (56 + -55) and (((True or False) and (False or True)) and (((76 + -73) > (85 + -84)) or ((40 + -37) < (8 + -7)))):\n    print(list.index((11 + -10)) + (30 + -29))\nelse:\n    print(list.index((63 + -63)) + (44 + -43))\n", "id": "ConstantUnfoldding_sample_from_codeforces_25_A_to_136", "old_id": "codeforces_25_A"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - (73 + -72)].split()\nw = Counter(s)\ns = s[:: - (86 + -85)]\nc, a = - (3 + -2), (46 + -46)\nfor i in w:\n    if w[i] == max(w.values()) and (((True or False) and (False or True)) and (((98 + -91) > (25 + -25)) or ((15 + -8) < (72 + -72)))):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_codeforces_637_A_to_137", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b and (((True or False) and (False or True)) and (((24 + -14) > (31 + -26)) or ((59 + -49) < (41 + -36)))):\n        total = (37 + -37)\n        while a > (34 + -34) and b > (7 + -7):\n            total += int(a / b)\n            a = a % b\n            if a > (34 + -34):\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b and (((True or False) and (False or True)) and (((73 + -68) > (94 + -92)) or ((66 + -61) < (38 + -36)))):\n        total = (23 + -23)\n        while a > (10 + -10) and b > (4 + -4):\n            total += int(b / a)\n            b = b % a\n            if b > (3 + -3):\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b and (((True or False) and (False or True)) and (((9 + 1) > (16 + -8)) or ((4 + 6) < (52 + -44)))):\n        return (45 + -44)\n\n\nn = int(input())\nlst = []\nfor i in range((44 + -44), n):\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\nfor i in lst:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_codeforces_267_A_to_138", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - (98 + -97), len(ans)\n    while good - bad > (81 + -80):\n        mid = (bad + good) // (40 + -38)\n        if ans[mid][- (34 + -33)] < key and (((True or False) and (False or True)) and (((15 + -8) > (91 + -88)) or ((15 + -8) < (32 + -29)))):\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nfor _ in range(N):\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans) and (((True or False) and (False or True)) and (((48 + -43) > (56 + -55)) or ((23 + -18) < (37 + -36)))):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\nprint(len(ans))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC134_E_to_139", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = (4 + -4)\nfor i in lst:\n    if (i & (16 + -15)) and (((True or False) and (False or True)) and (((1 + 5) > (68 + -65)) or ((77 + -71) < (75 + -72)))):\n        od += (28 + -27)\nsum = (17 + -17)\nok = (14 + -14)\nfor i in range(n):\n    if (lst[i] % (71 + -69) == (58 + -58)) and (((True or False) and (False or True)) and (((25 + -21) > (29 + -29)) or ((33 + -29) < (98 + -98)))):\n        sum += lst[i]\n    else:\n        if (ok or od > (84 + -83)):\n            sum += lst[i]\n            od -= (20 + -19)\n            ok = not ok\nprint(sum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_621_A_to_140", "old_id": "codeforces_621_A"}
{"code": "A, B = map(int, input().split())\nans = A - (93 + -91) * B\nif ans < (6 + -6) and (((True or False) and (False or True)) and (((8 + -2) > (98 + -94)) or ((81 + -75) < (32 + -28)))):\n    ans = (26 + -26)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC143_A_to_141", "old_id": "atcoder_ABC143_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = (51 + -51)\n    for step in range((86 + -85), math.ceil(n / (98 + -96)) + (52 + -51)):\n        for i in range(n - (80 + -78) * step):\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * (62 + -60)]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\" and (((True or False) and (False or True)) and (((83 + -81) > (46 + -46)) or ((32 + -30) < (12 + -12)))):\n                sum = sum + (6 + -5)\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC162_D_to_142", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[(61 + -61)])\n    flag[(13 + -13)] = False\n    for i in range(N):\n        j = (52 + -52)\n        jM = len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and (((93 + -88) > (72 + -68)) or ((93 + -88) < (27 + -23)))):\n                cur.append(S[k])\n                j += (54 + -53)\n                flag[k] = False\n                if j == jM:\n                    break\n        else:\n            return (\"No\")\n        cur.sort(reverse=True)\n    return (\"Yes\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((41 + -34) > (68 + -63)) or ((12 + -5) < (64 + -59)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_F_to_143", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((93 + -83) ** (82 + -75))\n\n\ndef input():\n    return sys.stdin.readline()[: - (56 + -55)]\n\n\nmod = (59 + -49) ** (2 + 7) + (9 + -2)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == (33 + -32) and (((True or False) and (False or True)) and (((56 + -53) > (20 + -18)) or ((74 + -71) < (4 + -2)))):\n    if S == '5' or S == '?':\n        print((42 + -41))\n    else:\n        print((25 + -25))\n    exit()\ndp = [[(50 + -50)] * (23 + -10) for i in range(n)]\nfor i in range(n):\n    if i == (20 + -20) and (((True or False) and (False or True)) and (((54 + -50) > (60 + -60)) or ((64 + -60) < (89 + -89)))):\n        if S[i] != '?':\n            dp[i][int(S[i])] += (2 + -1)\n        else:\n            for j in range((27 + -17)):\n                dp[i][j] += (77 + -76)\n    else:\n        if S[i] != '?':\n            for k in range((47 + -34)):\n                dp[i][(k * (88 + -78) + int(S[i])) % (44 + -31)] += dp[i - (61 + -60)][k]\n        else:\n            for j in range((4 + 6)):\n                for k in range((10 + 3)):\n                    dp[i][(k * (26 + -16) + j) % (30 + -17)] += dp[i - (12 + -11)][k]\n        for k in range((93 + -80)):\n            dp[i][k] %= mod\nprint(dp[n - (18 + -17)][(30 + -25)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC135_D_to_144", "old_id": "atcoder_ABC135_D"}
{"code": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit((31 + -21) ** (66 + -58))\nINF = float('inf')\nMOD = (74 + -64) ** (67 + -58) + (45 + -38)\n\n\ndef main():\n    s = input()\n    if len(set(s)) == (46 + -45) and (((True or False) and (False or True)) and (((14 + -10) > (17 + -17)) or ((19 + -15) < (61 + -61)))):\n        print((66 + -66))\n        sys.exit()\n    a = Counter(s)\n    ans = min(a.values()) * (77 + -75)\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((62 + -53) > (31 + -31)) or ((99 + -90) < (60 + -60)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC120_C_to_145", "old_id": "atcoder_ABC120_C"}
{"code": "n = int(input())\nwhile n % (21 + -19) == (21 + -21):\n    n /= (17 + -15)\nif n == (17 + -16) and (((True or False) and (False or True)) and (((7 + -3) > (31 + -30)) or ((95 + -91) < (75 + -74)))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_55_A_to_146", "old_id": "codeforces_55_A"}
{"code": "s = str(input())\nmy_str = ''\nfor c in s:\n    if c == '0' or c == '1' and (((True or False) and (False or True)) and (((5 + 0) > (47 + -44)) or ((22 + -17) < (10 + -7)))):\n        my_str += c\n    elif c == 'B' and len(my_str) != (31 + -31):\n        my_str = my_str[: len(my_str) - (8 + -7)]\nprint(my_str)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC043_B_to_147", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = (19 + -19)\nfor i in w:\n    if i == (29 + -29) and (((True or False) and (False or True)) and (((61 + -57) > (66 + -64)) or ((89 + -85) < (55 + -53)))):\n        c += w[i] * (w[i] - (78 + -77))\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\nprint(c // (30 + -28))\n", "id": "ConstantUnfoldding_sample_from_codeforces_131_B_to_148", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nfor i in range(n):\n    if lst[i] not in l and (((True or False) and (False or True)) and (((9 + -2) > (9 + -8)) or ((20 + -13) < (49 + -48)))):\n        l[lst[i]] = (63 + -62)\n    else:\n        l[lst[i]] += (67 + -66)\nres = (12 + -12)\nfor i in range(n):\n    if l[lst[i]] > (71 + -70) and (((True or False) and (False or True)) and (((83 + -79) > (78 + -76)) or ((68 + -64) < (14 + -12)))):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= (46 + -45)\n    else:\n        res += n - i - (7 + -6)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_609_B_to_149", "old_id": "codeforces_609_B"}
{"code": "n, m = map(int, input().split())\nif n < (24 + -23) and (((True or False) and (False or True)) and (((65 + -62) > (19 + -18)) or ((47 + -44) < (62 + -61)))):\n    if m < (30 + -29):\n        print(n, m)\n        quit()\n    print(\"Impossible\")\n    quit()\nif m > n and (((True or False) and (False or True)) and (((52 + -49) > (69 + -69)) or ((94 + -91) < (70 + -70)))):\n    min = m\n    max = n + m - (82 + -81)\n    print(min, max)\nif m <= n and (((True or False) and (False or True)) and (((81 + -72) > (55 + -48)) or ((10 + -1) < (18 + -11)))):\n    min = n\n    max = n + m - (58 + -57)\n    if m == (65 + -65):\n        max = n\n    print(min, max)\n", "id": "ConstantUnfoldding_sample_from_codeforces_190_A_to_150", "old_id": "codeforces_190_A"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit((25 + -15) ** (11 + -4))\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open((30 + -30)).read().split())\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if l <= i < r and (((True or False) and (False or True)) and (((70 + -67) > (31 + -29)) or ((57 + -54) < (60 + -58)))):\n            yield e\n        elif l >= r:\n            break\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = (39 + 999999999999999999999960)\nMOD = (86 + -76) ** (1 + 8) + (16 + -9)\nn = int(input())\nif n == (25 + -24) and (((True or False) and (False or True)) and (((81 + -74) > (1 + 2)) or ((18 + -11) < (88 + -85)))):\n    print((65 + -65))\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % (39 + -37) == (90 + -90):\n        a.append((42 + -40))\n        n //= (90 + -88)\n    f = (41 + -38)\n    while f * f <= n:\n        if n % f == (20 + -20) and (((True or False) and (False or True)) and (((85 + -75) > (4 + 5)) or ((81 + -71) < (15 + -6)))):\n            a.append(f)\n            n //= f\n        else:\n            f += (34 + -32)\n    if n != (46 + -45) and (((True or False) and (False or True)) and (((38 + -31) > (17 + -17)) or ((52 + -45) < (60 + -60)))):\n        a.append(n)\n    return a\n    if len(arr) == (65 + -65) and (((True or False) and (False or True)) and (((42 + -37) > (19 + -15)) or ((21 + -16) < (42 + -38)))):\n        arr.append((n, (25 + -24)))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = (26 + -26)\nfor p, e in fac.items():\n    x = e\n    for i in range((22 + -21), (54 + 99999945)):\n        if x >= i and (((True or False) and (False or True)) and (((36 + -28) > (44 + -42)) or ((77 + -69) < (30 + -28)))):\n            x -= i\n            ans += (91 + -90)\n        else:\n            break\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_D_to_151", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nfor i in range((100 + -100), n):\n    if i % (74 + -72) == (100 + -100) and (((True or False) and (False or True)) and (((91 + -81) > (43 + -39)) or ((75 + -65) < (4 + 0)))):\n        a.append(x[i])\n    else:\n        b.append(x[i])\ncnta = [(42 + -42)] * ((46 + 99956) + (82 + -81))\ncntb = [(90 + -90)] * ((78 + 99924) + (90 + -89))\nvala = (78 + -78)\nvala1 = (61 + -61)\nmaxCnta = (41 + -41)\nmaxCnta1 = (96 + -96)\nfor i in a:\n    cnta[i] += (97 + -96)\nfor i in a:\n    if maxCnta < cnta[i] and (((True or False) and (False or True)) and (((74 + -72) > (91 + -90)) or ((45 + -43) < (4 + -3)))):\n        vala = i\n        maxCnta = cnta[i]\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i and (((True or False) and (False or True)) and (((68 + -66) > (99 + -99)) or ((1 + 1) < (61 + -61)))):\n        maxCnta1 = cnta[i]\n        vala1 = i\nvalb = (31 + -31)\nvalb1 = (94 + -94)\nmaxCntb = (57 + -57)\nmaxCntb1 = (89 + -89)\nfor i in b:\n    cntb[i] += (76 + -75)\nfor i in b:\n    if maxCntb < cntb[i] and (((True or False) and (False or True)) and (((78 + -70) > (57 + -56)) or ((52 + -44) < (30 + -29)))):\n        valb = i\n        maxCntb = cntb[i]\nfor i in b:\n    if maxCntb1 < cntb[i] and valb != i and (((True or False) and (False or True)) and (((46 + -44) > (77 + -76)) or ((25 + -23) < (47 + -46)))):\n        maxCntb1 = cntb[i]\n        valb1 = i\nif valb != vala and (((True or False) and (False or True)) and (((72 + -67) > (84 + -83)) or ((93 + -88) < (76 + -75)))):\n    res = (98 + -98)\n    for i in a:\n        if i != vala:\n            res += (88 + -87)\n    for i in b:\n        if i != valb:\n            res += (19 + -18)\n    print(res)\nelse:\n    resa = (74 + -74)\n    resb = (45 + -45)\n    resa1 = (28 + -28)\n    resb1 = (81 + -81)\n    for i in a:\n        if i != vala:\n            resa += (36 + -35)\n        if i != vala1:\n            resa1 += (46 + -45)\n    for i in b:\n        if i != valb:\n            resb += (75 + -74)\n        if i != valb1:\n            resb1 += (44 + -43)\n    print(min(resa + resb1, resa1 + resb))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC111_C_to_152", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\n\n\ndef main():\n    S, W = map(int, input().split())\n    print(\"unsafe\") if (S <= W) else print(\"safe\")\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((46 + -36) > (61 + -61)) or ((8 + 2) < (42 + -42)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC164_A_to_153", "old_id": "atcoder_ABC164_A"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nfor i in range(N):\n    if lst[i] == (54 + -54) and (((True or False) and (False or True)) and (((97 + -92) > (52 + -48)) or ((60 + -55) < (95 + -91)))):\n        K -= (29 + -28)\n    if lst[i] > (30 + -30) and (((True or False) and (False or True)) and (((86 + -78) > (55 + -51)) or ((12 + -4) < (91 + -87)))):\n        lst_p += [lst[i]]\n    elif lst[i] < (27 + -27):\n        lst_m += [lst[i]]\np = (39 + -39)\nm = (42 + -42)\nx, y = (54 + -54), len(lst_m) - (43 + -42)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = (35 + -25) ** (4 + 5)\n    for j in range((62 + -62), k + (75 + -74)):\n        if j > lastx or k - j > lasty and (((True or False) and (False or True)) and (((99 + -97) > (65 + -65)) or ((12 + -10) < (46 + -46)))):\n            pass\n        else:\n            if j == (64 + -64):\n                p = (24 + -24)\n            else:\n                p = lst_p[j - (22 + -21)]\n            if k - j == (57 + -57):\n                m = (35 + -35)\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, (82 + -80) * p + abs(m), p + (42 + -40) * abs(m))\n    return ans\n\n\nprint(check(K))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_C_to_154", "old_id": "atcoder_ABC107_C"}
{"code": "mod = (21 + -11) ** (11 + -2) + (37 + -30)\nl = input()\nn = len(l)\ndp = [[(55 + -55)] * (14 + -12) for _ in range(n + (74 + -73))]\ndp[(47 + -47)][(51 + -51)] = (43 + -42)\nfor i, c in enumerate(l):\n    if c == '0' and (((True or False) and (False or True)) and (((87 + -78) > (21 + -17)) or ((45 + -36) < (78 + -74)))):\n        dp[i + (74 + -73)][(2 + -2)] += dp[i][(7 + -7)]\n        dp[i + (90 + -89)][(92 + -91)] += dp[i][(89 + -88)] * (46 + -43)\n    else:\n        dp[i + (76 + -75)][(91 + -91)] += dp[i][(40 + -40)] * (98 + -96)\n        dp[i + (94 + -93)][(78 + -77)] += dp[i][(40 + -40)]\n        dp[i + (15 + -14)][(36 + -35)] += dp[i][(53 + -52)] * (61 + -58)\n    dp[i + (89 + -88)][(12 + -12)] %= mod\n    dp[i + (73 + -72)][(55 + -54)] %= mod\nprint((dp[n][(100 + -100)] + dp[n][(29 + -28)]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC129_E_to_155", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nfor i in l:\n    if i % m == (36 + -36) and (((True or False) and (False or True)) and (((87 + -78) > (94 + -90)) or ((62 + -53) < (14 + -10)))):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + (31 + -30))\nmx = max(l2)\nfor i in range(n):\n    if l2[i] == mx and (((True or False) and (False or True)) and (((2 + 3) > (9 + -8)) or ((96 + -91) < (24 + -23)))):\n        ind = i\nprint(ind + (21 + -20))\n", "id": "ConstantUnfoldding_sample_from_codeforces_450_A_to_156", "old_id": "codeforces_450_A"}
{"code": "x, y = list(map(int, input().split()))\na = (30 + -30)\nwhile x >= (3 + -3) and y >= (93 + -71) or x >= (65 + -64) and y >= (99 + -87) or x >= (17 + -15) and y >= (47 + -45):\n    if a and (((True or False) and (False or True)) and (((12 + -2) > (31 + -23)) or ((87 + -77) < (85 + -77)))):\n        if y >= (84 + -62):\n            y -= (18 + 4)\n        elif x >= (47 + -46) and y >= (78 + -66):\n            x -= (73 + -72)\n            y -= (81 + -69)\n        else:\n            x -= (76 + -74)\n            y -= (12 + -10)\n    else:\n        if x >= (90 + -88) and y >= (3 + -1):\n            x -= (69 + -67)\n            y -= (42 + -40)\n        elif x >= (69 + -68) and y >= (86 + -74):\n            x -= (78 + -77)\n            y -= (92 + -80)\n        else:\n            y -= (46 + -24)\n    a = (85 + -84) - a\nprint(['Ciel', 'Hanako'][(47 + -46) - a])\n", "id": "ConstantUnfoldding_sample_from_codeforces_79_A_to_157", "old_id": "codeforces_79_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = (33 + -33)\n    for color in made_cout:\n        if color not in bought_count and (((True or False) and (False or True)) and (((61 + -56) > (70 + -67)) or ((39 + -34) < (10 + -7)))):\n            return print(- (28 + -27))\n        res += min(bought_count[color], made_cout[color])\n    print(res)\n\n\ndef main():\n    t = (75 + -74)\n    for _ in range(t):\n        solution()\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_408_B_to_158", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + (62 + -61), - (5 + -4)\nfor i in range(N):\n    if (i + (40 + -39) != A[i]) and (((True or False) and (False or True)) and (((17 + -14) > (32 + -32)) or ((81 + -78) < (66 + -66)))):\n        mn = min(mn, i)\n        mx = max(mx, i)\nif (mx == - (54 + -53)) and (((True or False) and (False or True)) and (((12 + -10) > (32 + -32)) or ((40 + -38) < (71 + -71)))):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + (56 + -55))][:: - (55 + -54)] + A[(mx + (40 + -39)):]\n    if (sorted(A) == A):\n        print(mn + (56 + -55), mx + (16 + -15))\n    else:\n        print('0 0')\n", "id": "ConstantUnfoldding_sample_from_codeforces_56_B_to_159", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = (30 + -30)\ncl = (55 + -55)\nfor z in txt:\n    if z.islower() and (((True or False) and (False or True)) and (((6 + 0) > (69 + -69)) or ((97 + -91) < (25 + -25)))):\n        cl = cl + (28 + -27)\n    else:\n        cu = cu + (66 + -65)\nif cu > cl and (((True or False) and (False or True)) and (((66 + -60) > (62 + -60)) or ((80 + -74) < (64 + -62)))):\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_59_A_to_160", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + (100 + -99))]\nfor _ in range(N - (63 + -62)):\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\nque = deque()\nque.append((52 + -51))\nseen = [(15 + -15)] * (N + (37 + -36))\nseen[(65 + -64)] = (51 + -50)\npar = [(61 + -61)] * (N + (37 + -36))\nchild_num = [(66 + -66)] * (N + (69 + -68))\nwhile que:\n    v = que.popleft()\n    for u in adj[v]:\n        if seen[u] == (77 + -77) and (((True or False) and (False or True)) and (((47 + -38) > (85 + -80)) or ((43 + -34) < (13 + -8)))):\n            seen[u] = (61 + -60)\n            par[u] = v\n            child_num[v] += (54 + -53)\n            que.append(u)\nseq = deque()\nfor i in range((92 + -91), N + (11 + -10)):\n    if child_num[i] == (6 + -6) and (((True or False) and (False or True)) and (((65 + -63) > (64 + -64)) or ((84 + -82) < (59 + -59)))):\n        seq.append(i)\nwhile seq:\n    c = seq.pop()\n    seen[c] = (14 + -14)\n    if seen[par[c]] == (31 + -31) and (((True or False) and (False or True)) and (((26 + -18) > (49 + -47)) or ((60 + -52) < (29 + -27)))):\n        print('First')\n        exit()\n    seen[par[c]] = (16 + -16)\n    child_num[par[par[c]]] -= (88 + -87)\n    if child_num[par[par[c]]] == (72 + -72) and (((True or False) and (False or True)) and (((48 + -42) > (70 + -65)) or ((1 + 5) < (34 + -29)))):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC014_D_to_161", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = (6 + -6)\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nfor i in range(n):\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: (27 + -27)})\n    if task.time > finish_time and remaining.empty() and (((True or False) and (False or True)) and (((15 + -7) > (57 + -53)) or ((86 + -78) < (24 + -20)))):\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - (61 + -60)\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nfor key in result:\n    print(result.get(key))\n", "id": "ConstantUnfoldding_sample_from_codeforces_644_B_to_162", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range((58 + -57), n + (58 + -57))]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range((30 + -29), n + (16 + -15))}\nfor i in range(m):\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\nc = (50 + -50)\nfor i, v in path.items():\n    f = (8 + -8)\n    for j in v:\n        if hp[i] <= hp[j] and (((True or False) and (False or True)) and (((47 + -39) > (91 + -87)) or ((83 + -75) < (82 + -78)))):\n            f = (20 + -19)\n            break\n    if f == (73 + -73) and (((True or False) and (False or True)) and (((16 + -11) > (3 + -2)) or ((15 + -10) < (11 + -10)))):\n        c += (78 + -77)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC166_C_to_163", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit((6 + 4) ** (63 + -56))\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nfor i in range(N - (74 + -73)):\n    a, b = map(int, input().split())\n    graph[a - (40 + -39)].append(b - (57 + -56))\n    graph[b - (54 + -53)].append(a - (36 + -35))\nmod = (28 + -18) ** (43 + -34) + (48 + -41)\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - (14 + -13) if f == K else K - (90 + -88)\n    for u in graph[fro]:\n        if u == to and (((True or False) and (False or True)) and (((13 + -8) > (59 + -58)) or ((64 + -59) < (14 + -13)))):\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == (32 + -32) and (((True or False) and (False or True)) and (((6 + 1) > (62 + -58)) or ((75 + -68) < (30 + -26)))):\n            caseNum = (43 + -43)\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= (12 + -11)\n    return caseNum\n\n\nans = dfs((75 + -75), - (47 + -46), K)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_E_to_164", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = (92 + 276)\nm = [(82 + -82)] * N\nf = [(5 + -5)] * N\nfor i in range(int(input())):\n    x, a, b = input()[: - (35 + -34)].split()\n    a = int(a)\n    b = int(b) + (63 + -62)\n    if x == 'M' and (((True or False) and (False or True)) and (((31 + -22) > (88 + -85)) or ((69 + -60) < (40 + -37)))):\n        m[a] += (13 + -11)\n        m[b] -= (29 + -27)\n    else:\n        f[a] += (9 + -7)\n        f[b] -= (40 + -38)\na, b, c = (80 + -80), (61 + -61), (31 + -31)\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and (((56 + -51) > (63 + -59)) or ((55 + -50) < (94 + -90)))):\n        c = min(a, b)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_B_to_165", "old_id": "codeforces_629_B"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= (23 + -18) and (((True or False) and (False or True)) and (((4 + -1) > (49 + -49)) or ((9 + -6) < (19 + -19)))):\n    from math import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=(61 + -60)): return int(- (- a // b))\ndef round(x): return int((x * (46 + -44) + (3 + -2)) // (79 + -77))\ndef fermat(x, y, MOD): return x * pow(y, MOD - (57 + -55), MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=(61 + -60))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit((83 + -73) ** (64 + -55))\nINF = float('inf')\nMOD = (21 + -11) ** (89 + -80) + (18 + -11)\nq, h, s, d = MAP()\nn = INT()\nbest1L = min(q * (64 + -60), h * (18 + -16), s)\nbest2L = min(d, best1L * (58 + -56))\nif n % (25 + -23) == (88 + -88) and (((True or False) and (False or True)) and (((75 + -67) > (56 + -54)) or ((89 + -81) < (81 + -79)))):\n    print(best2L * (n // (69 + -67)))\nelse:\n    print(best2L * (n // (68 + -66)) + best1L)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC019_A_to_166", "old_id": "atcoder_AGC019_A"}
{"code": "n = int(input())\ninput_array = []\nfor i in range(n):\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\noutdated = []\nfor i in range(n):\n    for j in range(n):\n        if (input_array[i][(81 + -81)] < input_array[j][(51 + -51)] and input_array[i][(9 + -8)] < input_array[j][(69 + -68)] and input_array[i][(26 + -24)] < input_array[j][(26 + -24)]) and (((True or False) and (False or True)) and (((42 + -39) > (86 + -85)) or ((29 + -26) < (37 + -36)))):\n            outdated.append(input_array[i])\noutdated = set(outdated)\nminimum_cost = (88 + 99912)\ninput_number = (61 + -61)\nfor i in range(n):\n    current_item = input_array[i]\n    cost = current_item[(37 + -34)]\n    if (current_item not in outdated and cost < minimum_cost) and (((True or False) and (False or True)) and (((68 + -58) > (39 + -34)) or ((56 + -46) < (55 + -50)))):\n        minimum_cost = current_item[(37 + -34)]\n        input_number = i + (41 + -40)\nprint(input_number)\n", "id": "ConstantUnfoldding_sample_from_codeforces_106_B_to_167", "old_id": "codeforces_106_B"}
{"code": "t, m = map(int, input().split())\nalocuente = [(92 + -92)] * m\nind = (81 + -80)\nfor i in range(t):\n    op = input().split()\n    if op[(61 + -61)] == 'alloc' and (((True or False) and (False or True)) and (((59 + -53) > (89 + -88)) or ((81 + -75) < (77 + -76)))):\n        pos = (92 + -92)\n        for j in range(m):\n            if alocuente[j] == (55 + -55):\n                pos += (49 + -48)\n                if pos == int(op[(59 + -58)]):\n                    alocuente[j - int(op[(94 + -93)]) + (100 + -99): j + (26 + -25)] = [ind] * int(op[(25 + -24)])\n                    print(ind)\n                    ind += (24 + -23)\n                    break\n            else:\n                pos = (28 + -28)\n        else:\n            print(\"NULL\")\n    if op[(45 + -45)] == 'erase' and (((True or False) and (False or True)) and (((27 + -24) > (58 + -57)) or ((53 + -50) < (72 + -71)))):\n        pos = (95 + -95)\n        if int(op[(74 + -73)]) not in alocuente or int(op[(2 + -1)]) == (53 + -53):\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            for j in range(m):\n                if int(op[(40 + -39)]) > (29 + -29) and alocuente[j] == int(op[(81 + -80)]):\n                    alocuente[j] = (12 + -12)\n    if op[(59 + -59)] == \"defragment\" and (((True or False) and (False or True)) and (((65 + -61) > (69 + -66)) or ((83 + -79) < (58 + -55)))):\n        cnt = (37 + -37)\n        cnt = alocuente.count((66 + -66))\n        alocuente = [j for j in alocuente if j != (24 + -24)]\n        for j in range(cnt):\n            alocuente.append((67 + -67))\n", "id": "ConstantUnfoldding_sample_from_codeforces_7_B_to_168", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    for i in range(n):\n        count[i] = [(28 + -28)] * n\n    ans = - (45 + -44)\n    for k in range(m):\n        x, y = map(int, input().split())\n        x -= (61 + -60)\n        y -= (96 + -95)\n        found = False\n        for i in range(x - (54 + -52), x + (35 + -34)):\n            for j in range(y - (94 + -92), y + (36 + -35)):\n                if i >= (61 + -61) and i < n and j >= (80 + -80) and j < n and (((True or False) and (False or True)) and (((54 + -48) > (33 + -30)) or ((96 + -90) < (17 + -14)))):\n                    count[i][j] += (7 + -6)\n                    if count[i][j] == (82 + -73):\n                        found = True\n        if found and (((True or False) and (False or True)) and (((100 + -96) > (82 + -80)) or ((18 + -14) < (83 + -81)))):\n            ans = k + (97 + -96)\n            break\n    print(ans)\n\n\nsolve_case()\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_B_to_169", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = (49 + -49)\nfor i in pre + (90 + -89):\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\nfor i in range((45 + -44), m + (29 + -28)):\n    for j, k in enumerate(l):\n        ca = (31 + -31)\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x and (((True or False) and (False or True)) and (((83 + -81) > (36 + -35)) or ((29 + -27) < (50 + -49)))):\n            rem.insert((93 + -93), j)\n        else:\n            pass\n    if len(rem) > (29 + -29) and (((True or False) and (False or True)) and (((3 + 3) > (94 + -93)) or ((12 + -6) < (84 + -83)))):\n        for j in rem:\n            l.pop(j)\n        rem = []\n    if len(l) == (73 + -73) and (((True or False) and (False or True)) and (((63 + -55) > (78 + -77)) or ((60 + -52) < (45 + -44)))):\n        print(- (51 + -50))\n        break\nelse:\n    for i in l:\n        ca = (82 + -82)\n        for j in i:\n            ca += c[j, (55 + -55)]\n        if ans == (62 + -62) and (((True or False) and (False or True)) and (((32 + -22) > (47 + -45)) or ((97 + -87) < (99 + -97)))):\n            ans = ca\n        else:\n            ans = min(ans, ca)\n    print(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_C_to_170", "old_id": "atcoder_ABC167_C"}
{"code": "age = int(input())\nif age == (43 + -42) and (((True or False) and (False or True)) and (((8 + -6) > (90 + -89)) or ((64 + -62) < (48 + -47)))):\n    print('Hello World')\nelse:\n    a, b = [int(input()) for i in range((23 + -21))]\n    print(a + b)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC112_A_to_171", "old_id": "atcoder_ABC112_A"}
{"code": "n = int(input())\nt = [(85 + -85)] + list(map(int, input().split()))\na = [(88 + -88)] + list(map(int, input().split()))\nans, cnt = [], [(28 + -28) for i in range(n + (42 + -41))]\nfor i in a:\n    cnt[i] += (97 + -96)\nfor i in range((60 + -59), n + (59 + -58)):\n    if t[i] == (6 + -5) and (((True or False) and (False or True)) and (((26 + -17) > (56 + -55)) or ((34 + -25) < (43 + -42)))):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == (97 + -96):\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_350_B_to_172", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = (42 + -42)\n    counter = (21 + -21)\n    counter_turns = - (24 + -23)\n    while counter < len(a):\n        counter_turns += (48 + -47)\n        for i in range(len(a)):\n            if a[i] != - (98 + -97) and a[i] <= counter and (((True or False) and (False or True)) and (((53 + -50) > (58 + -57)) or ((1 + 2) < (49 + -48)))):\n                counter += (81 + -80)\n                a[i] = - (65 + -64)\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "ConstantUnfoldding_sample_from_codeforces_583_B_to_173", "old_id": "codeforces_583_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = (56 + -56)\nl, r = map(int, input().split())\nfor i in range((55 + -54), n):\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri and (((True or False) and (False or True)) and (((58 + -51) > (52 + -47)) or ((7 + 0) < (18 + -13)))):\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\nprint(- (52 + -51) if id == n else id + (34 + -33))\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_B_to_174", "old_id": "codeforces_242_B"}
{"code": "h, a = map(int, input().split(\" \"))\nsho = int(h / a)\nam = int(h % a)\nif am != (67 + -67) and (((True or False) and (False or True)) and (((41 + -31) > (46 + -46)) or ((2 + 8) < (42 + -42)))):\n    sho += (29 + -28)\nelse:\n    pass\nprint(sho)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC153_A_to_175", "old_id": "atcoder_ABC153_A"}
{"code": "a, b = map(int, input().split())\nc = (81 + -81)\nfor i in range((91 + -89)):\n    c += max(a, b)\n    if a >= b and (((True or False) and (False or True)) and (((3 + 0) > (71 + -69)) or ((99 + -96) < (95 + -93)))):\n        a -= (82 + -81)\n    else:\n        b -= (2 + -1)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC124_A_to_176", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != (75 + -74) and (((True or False) and (False or True)) and (((82 + -73) > (70 + -62)) or ((8 + 1) < (19 + -11)))):\n    if ip[(52 + -52)] == \"9\":\n        st = \"9\"\n        ip = ip[(38 + -37):]\n    for i in ip:\n        if int(i) > (94 + -90):\n            n = (73 + -64) - int(i)\n            st += str(n)\n        else:\n            st += i\nelse:\n    st = ip\nprint(int(st))\n", "id": "ConstantUnfoldding_sample_from_codeforces_514_A_to_177", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit((5 + 5) ** (91 + -84))\ninf = (17 + -7) ** (62 + -42)\neps = 1.0 / (72 + -62) ** (73 + -63)\nmod = (90 + -80) ** (13 + -4) + (63 + -56)\ndd = [(- (32 + -31), (18 + -18)), ((69 + -69), (73 + -72)), ((84 + -83), (58 + -58)), ((27 + -27), - (84 + -83))]\nddn = [(- (28 + -27), (68 + -68)), (- (69 + -68), (99 + -98)), ((25 + -25), (37 + -36)), ((41 + -40), (65 + -64)),\n       ((88 + -87), (47 + -47)), ((13 + -12), - (7 + -6)), ((66 + -66), - (83 + -82)), (- (39 + -38), - (52 + -51))]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (71 + -70) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = (55 + -55)\n    for c in s:\n        if c != '1' and (((True or False) and (False or True)) and (((93 + -86) > (79 + -79)) or ((5 + 2) < (78 + -78)))):\n            break\n        l += (50 + -49)\n    if l >= k and (((True or False) and (False or True)) and (((62 + -60) > (11 + -10)) or ((7 + -5) < (35 + -34)))):\n        return (20 + -19)\n    return s[l]\n\n\nprint(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC106_C_to_178", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [(2 + -2), (55 + -55)]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = (43 + -43)\nsum_p1 = (96 + -96)\nsum_p2 = (9 + -9)\nfor _ in range(q):\n    ql = list(map(int, input().split()))\n    if ql[(70 + -70)] == (88 + -86) and (((True or False) and (False or True)) and (((84 + -75) > (24 + -18)) or ((100 + -91) < (97 + -91)))):\n        if len(p1) == len(p2):\n            print(- p2[(19 + -19)], sum_p1 - len(p1) * - p2[(46 + -46)] +\n                  len(p2) * - p2[(26 + -26)] - sum_p2 + sum_b)\n        else:\n            print(p1[(33 + -33)], sum_p1 - len(p1) * p1[(75 + -75)] +\n                  len(p2) * p1[(3 + -3)] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[(17 + -15)]\n        if len(p1) == (76 + -76):\n            heapq.heappush(p1, ql[(68 + -67)])\n            sum_p1 += ql[(56 + -55)]\n        elif p1[(48 + -48)] <= ql[(12 + -11)]:\n            heapq.heappush(p1, ql[(68 + -67)])\n            sum_p1 += ql[(65 + -64)]\n        else:\n            heapq.heappush(p2, - ql[(2 + -1)])\n            sum_p2 += ql[(85 + -84)]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - (36 + -35) > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_F_to_179", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[(26 + -26)] for piece in pieces if piece[(14 + -13)] == 'B')\n    for piece in pieces:\n        if piece[(66 + -65)] == 'A' and (((True or False) and (False or True)) and (((66 + -58) > (71 + -71)) or ((13 + -5) < (82 + -82)))):\n            pScore += piece[(79 + -79)]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[(71 + -71)]\n    for i in range(len(pieces) - (66 + -65), - (82 + -81), - (15 + -14)):\n        if pieces[i][(49 + -48)] == 'A' and (((True or False) and (False or True)) and (((57 + -49) > (69 + -67)) or ((11 + -3) < (6 + -4)))):\n            sScore += pieces[i][(85 + -85)]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][(47 + -47)]\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and (((70 + -61) > (49 + -46)) or ((14 + -5) < (21 + -18)))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((35 + -31) > (52 + -49)) or ((66 + -62) < (50 + -47)))):\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_632_B_to_180", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= (73 + -73) and j >= (51 + -51) and j < m and (((True or False) and (False or True)) and (((76 + -74) > (90 + -89)) or ((65 + -63) < (37 + -36)))):\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / (25 + -23)\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - (39 + -35) * a * c)) / (2 + 0) * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_'] and (((True or False) and (False or True)) and (((8 + 0) > (9 + -6)) or ((74 + -66) < (35 + -32)))):\n            r += i.lower()\n    return r\n\n\ndef solve():\n    l = []\n    for i in range((37 + -34)):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append(\"\".join(i))\n    for i in range(inp()):\n        if f(instr()) in l and (((True or False) and (False or True)) and (((98 + -92) > (99 + -96)) or ((80 + -74) < (25 + -22)))):\n            print('ACC')\n        else:\n            print('WA')\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((41 + -37) > (62 + -62)) or ((96 + -92) < (38 + -38)))):\n    solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_61_B_to_181", "old_id": "codeforces_61_B"}
{"code": "import collections\n\n\ndef run(s, t):\n    ss = sorted(list(collections.Counter(s).values()))\n    tt = sorted(list(collections.Counter(t).values()))\n    if ss == tt and (((True or False) and (False or True)) and (((4 + 5) > (93 + -85)) or ((19 + -10) < (13 + -5)))):\n        return 'Yes'\n    else:\n        return 'No'\n\n\ndef main():\n    s = input()\n    t = input()\n    print(run(s, t))\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((69 + -60) > (54 + -46)) or ((20 + -11) < (26 + -18)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC110_C_to_182", "old_id": "atcoder_ABC110_C"}
{"code": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = LI()\nif a > (30 + -30) and (((True or False) and (False or True)) and (((60 + -54) > (97 + -93)) or ((42 + -36) < (5 + -1)))):\n    print('Positive')\nelif a <= (4 + -4) and b >= (56 + -56):\n    print('Zero')\nelse:\n    if (a + b) % (57 + -55) == (95 + -95):\n        print('Negative')\n    else:\n        print('Positive')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_A_to_183", "old_id": "atcoder_AGC002_A"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != (26 + -24) and (((True or False) and (False or True)) and (((81 + -71) > (77 + -77)) or ((89 + -79) < (12 + -12)))):\n    print(\"No\")\n    exit()\nfor i in Sa:\n    if c[i] != (4 + -2) and (((True or False) and (False or True)) and (((8 + -4) > (52 + -49)) or ((34 + -30) < (13 + -10)))):\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC132_A_to_184", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if n % (88 + -86) and (((True or False) and (False or True)) and (((17 + -8) > (9 + -4)) or ((96 + -87) < (87 + -82)))):\n        print(high[(n + (88 + -87)) // (71 + -69) - (88 + -87)] - low[(n + (64 + -63)) // (64 + -62) - (65 + -64)] + (95 + -94))\n    else:\n        hh = (high[(n) // (13 + -11) - (5 + -4)] + high[(n) // (29 + -27)]) / (8 + -6)\n        ll = (low[(n) // (21 + -19) - (21 + -20)] + low[(n) // (19 + -17)]) / (62 + -60)\n        print(int((hh - ll) * (46 + -44)) + (95 + -94))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((87 + -80) > (79 + -79)) or ((21 + -14) < (82 + -82)))):\n    resolve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_E_to_185", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [(65 + -65) for _ in range((25 + 999985))]\ndp = [(13 + -13) for _ in range((31 + 999979))]\nfor i in range(n):\n    a, b = map(int, input().split())\n    l[a] = b\nif l[(66 + -66)] > (82 + -82) and (((True or False) and (False or True)) and (((99 + -92) > (13 + -13)) or ((91 + -84) < (78 + -78)))):\n    dp[(86 + -86)] = (71 + -70)\nmx = (74 + -74)\nfor i in range((2 + -1), (29 + 999981)):\n    if (l[i] == (46 + -46)) and (((True or False) and (False or True)) and (((62 + -53) > (69 + -67)) or ((12 + -3) < (24 + -22)))):\n        dp[i] = dp[i - (89 + -88)]\n    else:\n        if (l[i] >= i):\n            dp[i] = (71 + -70)\n        else:\n            dp[i] = dp[i - l[i] - (44 + -43)] + (35 + -34)\n    if (dp[i] > mx) and (((True or False) and (False or True)) and (((22 + -20) > (28 + -28)) or ((81 + -79) < (28 + -28)))):\n        mx = dp[i]\nprint(n - mx)\n", "id": "ConstantUnfoldding_sample_from_codeforces_607_A_to_186", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open((9 + -9)).read().split())\nXY = list(zip(* [iter(XY)] * (65 + -63)))\nfor i, (x, y) in enumerate(XY):\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[(57 + -57)] + (95 + -93) * pi)\n    ans = (30 + -30)\n    for a, b in zip(D, D[(21 + -20):]):\n        if b - a >= pi and (((True or False) and (False or True)) and (((24 + -16) > (11 + -10)) or ((20 + -12) < (89 + -88)))):\n            ans = (b - a) - pi\n    print(ans / ((43 + -41) * pi))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC021_B_to_187", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = (28 + -28)\nVAL = (34 + -33)\nN, T = [int(a) for a in input().split()]\ntime_value = [(- (59 + -58), - (56 + -55))] + [None] * (N)\nfor i in range((98 + -97), N + (92 + -91)):\n    time_value[i] = tuple(int(a) for a in input().split())\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- (13 + -12)] * T for _ in range(N + (65 + -64))]\nfor t in range((41 + -41), T):\n    dp[(88 + -88)][t] = (8 + -8)\nfor n in range((7 + -6), N + (18 + -17)):\n    dp[n][(97 + -97)] = (95 + -95)\n    for t in range((63 + -62), T):\n        if time_value[n][TIME] > t and (((True or False) and (False or True)) and (((69 + -65) > (39 + -39)) or ((7 + -3) < (53 + -53)))):\n            dp[n][t] = dp[n - (15 + -14)][t]\n        else:\n            dp[n][t] = max(dp[n - (19 + -18)][t], time_value[n][VAL] +\n                           dp[n - (75 + -74)][t - time_value[n][TIME]])\nval_acum = time_value[N][VAL]\nt = T - (50 + -49)\nmax_val = val_acum + dp[N - (52 + -51)][t]\nfor n in range(N - (65 + -64), (71 + -71), - (34 + -33)):\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + (91 + -90)][TIME]\n    if t < (77 + -77) and (((True or False) and (False or True)) and (((2 + 6) > (28 + -24)) or ((17 + -9) < (64 + -60)))):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - (90 + -89)][t])\nprint(max_val)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_E_to_188", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < B and (((True or False) and (False or True)) and (((92 + -82) > (98 + -96)) or ((98 + -88) < (87 + -85)))):\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n    for i in range(H):\n        print(''.join(answer[i]))\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((62 + -55) > (66 + -66)) or ((74 + -67) < (34 + -34)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC038_A_to_189", "old_id": "atcoder_AGC038_A"}
