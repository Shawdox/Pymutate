{"code": "n = int(input())\nidx_68cy = (68 + -68)\nlist_1c47 = range(n)\nwhile idx_68cy < len(list_1c47):\n    i = list_1c47[idx_68cy]\n    a = int(input())\n    if a < (76 + -74):\n        print((28 + -28))\n    if a >= (80 + -78):\n        print(a - (80 + -78))\n    idx_68cy = idx_68cy + (70 + -69)\n", "id": "ConstantUnfoldding_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = (14 + -13)\npos = (78 + -78)\nidx_g921 = (21 + -21)\nlist_gs14 = range((33 + -32), N)\nwhile idx_g921 < len(list_gs14):\n    i = list_gs14[idx_g921]\n    if n[pos] > n[i]:\n        a += (16 + -15)\n        pos = i\n    idx_g921 = idx_g921 + (26 + -25)\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC152_C_to_1", "old_id": "atcoder_ABC152_C"}
{"code": "a = list(map(int, input().split()))\nidx_qu7b = (6 + -6)\nlist_bqds = list(enumerate(a))\nwhile idx_qu7b < len(list_bqds):\n    e, i = list_bqds[idx_qu7b]\n    if i == (88 + -88):\n        print(e + (88 + -87))\n        break\n    idx_qu7b = idx_qu7b + (18 + -17)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC170_A_to_2", "old_id": "atcoder_ABC170_A"}
{"code": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nidx_ugkt = (67 + -67)\nlist_i9dn = range(len(s))\nwhile idx_ugkt < len(list_i9dn):\n    i = list_i9dn[idx_ugkt]\n    if i >= (97 + -96):\n        if s[i] == '':\n            if res[- (81 + -80)] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- (75 + -74)] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_ugkt = idx_ugkt + (98 + -97)\nprint(''.join(res))\n", "id": "ConstantUnfoldding_sample_from_codeforces_147_A_to_3", "old_id": "codeforces_147_A"}
{"code": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = (88 + -88), (81 + -81)\nidx_86e2 = (93 + -93)\nlist_18jf = s\nwhile idx_86e2 < len(list_18jf):\n    letra = list_18jf[idx_86e2]\n    if letra in freqs:\n        freqs[letra] += (87 + -86)\n    else:\n        freqs[letra] = (59 + -58)\n    idx_86e2 = idx_86e2 + (95 + -94)\nidx_us60 = (83 + -83)\nlist_xj4z = t\nwhile idx_us60 < len(list_xj4z):\n    letra = list_xj4z[idx_us60]\n    if letra in freqt:\n        freqt[letra] += (72 + -71)\n    else:\n        freqt[letra] = (15 + -14)\n    idx_us60 = idx_us60 + (70 + -69)\nidx_fnx5 = (72 + -72)\nlist_e8ib = freqs.keys()\nwhile idx_fnx5 < len(list_e8ib):\n    letra = list_e8ib[idx_fnx5]\n    while (freqs[letra] > (98 + -98) and letra in freqt and freqt[letra] > (32 + -32)):\n        yay += (23 + -22)\n        freqs[letra] -= (54 + -53)\n        freqt[letra] -= (54 + -53)\n    idx_fnx5 = idx_fnx5 + (77 + -76)\nidx_2cew = (99 + -99)\nlist_7jli = freqs.keys()\nwhile idx_2cew < len(list_7jli):\n    letra = list_7jli[idx_2cew]\n    while (freqs[letra] > (22 + -22)):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > (6 + -6):\n            whoops += (43 + -42)\n            freqs[letra] -= (89 + -88)\n            freqt[letra.upper()] -= (2 + -1)\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > (42 + -42):\n            whoops += (97 + -96)\n            freqs[letra] -= (91 + -90)\n            freqt[letra.lower()] -= (22 + -21)\n        else:\n            break\n    idx_2cew = idx_2cew + (19 + -18)\nprint(yay, whoops)\n", "id": "ConstantUnfoldding_sample_from_codeforces_518_B_to_4", "old_id": "codeforces_518_B"}
{"code": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = (48 + -47)\n    idx_z53x = (32 + -32)\n    list_tqx1 = range(K)\n    while idx_z53x < len(list_tqx1):\n        i = list_tqx1[idx_z53x]\n        a *= N - i\n        idx_z53x = idx_z53x + (85 + -84)\n    idx_5q2d = (75 + -75)\n    list_u1ji = range(K)\n    while idx_5q2d < len(list_u1ji):\n        j = list_u1ji[idx_5q2d]\n        a /= j + (6 + -5)\n        idx_5q2d = idx_5q2d + (92 + -91)\n    return a\n\n\nans = (94 + -94)\nlis = list(map(int, input().split()))\nls = []\nidx_6i3j = (54 + -54)\nlist_s86w = lis\nwhile idx_6i3j < len(list_s86w):\n    a = list_s86w[idx_6i3j]\n    ls.append(a % (84 + -82))\n    idx_6i3j = idx_6i3j + (21 + -20)\none = ls.count((42 + -41))\nzero = ls.count((76 + -76))\npattern_a = (28 + -28)\npattern_b = (81 + -81)\nidx_e0xk = (32 + -32)\nlist_5jov = range(zero + (62 + -61))\nwhile idx_e0xk < len(list_5jov):\n    j = list_5jov[idx_e0xk]\n    pattern_b += combi(zero, j)\n    idx_e0xk = idx_e0xk + (37 + -36)\ntime = (35 + -35)\nwhile time <= one:\n    if time % (75 + -73) == P:\n        pattern_a += combi(one, time)\n    time += (83 + -82)\nprint(int(pattern_a * pattern_b))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC017_A_to_5", "old_id": "atcoder_AGC017_A"}
{"code": "import numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = (67 + -67)\nidx_a5wf = (65 + -65)\nlist_1tro = range((92 + -32))\nwhile idx_a5wf < len(list_1tro):\n    b = list_1tro[idx_a5wf]\n    bs = int(((A >> b) & (73 + -72)).sum())\n    result = (result + bs * (N - bs) * ((97 + -96) << b)) % (65 + 999999942)\n    idx_a5wf = idx_a5wf + (62 + -61)\nprint(result)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC147_D_to_6", "old_id": "atcoder_ABC147_D"}
{"code": "mod = (29 + -19) ** (97 + -88) + (97 + -90)\nn, k = map(int, input().split())\ncoef = []\nidx_c2q6 = (21 + -21)\nlist_q6z4 = range((91 + -90), int(n ** 0.5) + (9 + -8))\nwhile idx_c2q6 < len(list_q6z4):\n    i = list_q6z4[idx_c2q6]\n    coef.append((n // i) - (n // (i + (73 + -72))))\n    idx_c2q6 = idx_c2q6 + (32 + -31)\ncoef += [(59 + -58)] * (n - sum(coef))\ncoef = coef[:: - (18 + -17)]\nnn = len(coef)\ndp = [[(49 + -49)] * nn for _ in range(k + (22 + -21))]\ndp[(3 + -3)][(90 + -90)] = (13 + -12)\nidx_6jdm = (95 + -95)\nlist_583j = range((8 + -7), k + (5 + -4))\nwhile idx_6jdm < len(list_583j):\n    i = list_583j[idx_6jdm]\n    tmp = (72 + -72)\n    idx_yhuj = (8 + -8)\n    list_8jun = range(nn - (79 + -78), - (64 + -63), - (97 + -96))\n    while idx_yhuj < len(list_8jun):\n        j = list_8jun[idx_yhuj]\n        tmp += dp[i - (60 + -59)][(nn - (93 + -92)) - j]\n        tmp %= mod\n        dp[i][j] = coef[j] * tmp\n        dp[i][j] %= mod\n        idx_yhuj = idx_yhuj + (4 + -3)\n    idx_6jdm = idx_6jdm + (64 + -63)\nprint(sum(dp[k]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC132_F_to_7", "old_id": "atcoder_ABC132_F"}
{"code": "record_of_movements = input()\nx, y = (34 + -34), (37 + -37)\nd_movement = {'L': ((36 + -36), - (94 + -93)), 'R': ((49 + -49), (62 + -61)), 'U': ((16 + -15), (12 + -12)), 'D': (- (40 + -39), (81 + -81))}\nd = {(x, y): ''}\nbug = False\nidx_spt2 = (49 + -49)\nlist_nbuz = record_of_movements\nwhile idx_spt2 < len(list_nbuz):\n    move = list_nbuz[idx_spt2]\n    temp = (x, y)\n    x += d_movement[move][(56 + -56)]\n    y += d_movement[move][(26 + -25)]\n    if (x, y) not in d:\n        idx_sc2f = (31 + -31)\n        list_zvq6 = d_movement\n        while idx_sc2f < len(list_zvq6):\n            step = list_zvq6[idx_sc2f]\n            if (x + d_movement[step][(68 + -68)], y + d_movement[step][(20 + -19)]) != temp and (x + d_movement[step][(9 + -9)], y + d_movement[step][(89 + -88)]) in d:\n                bug = True\n                break\n            idx_sc2f = idx_sc2f + (92 + -91)\n    else:\n        bug = True\n    if bug:\n        break\n    d[x, y] = ''\n    idx_spt2 = idx_spt2 + (93 + -92)\nif bug:\n    print('BUG')\nelse:\n    print('OK')\n", "id": "ConstantUnfoldding_sample_from_codeforces_8_B_to_8", "old_id": "codeforces_8_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nidx_hxcs = (38 + -38)\nlist_w3ur = l\nwhile idx_hxcs < len(list_w3ur):\n    i = list_w3ur[idx_hxcs]\n    if i + (27 + -26) in l and i + (13 + -11) in l:\n        print('YES')\n        break\n    idx_hxcs = idx_hxcs + (45 + -44)\n", "id": "ConstantUnfoldding_sample_from_codeforces_653_A_to_9", "old_id": "codeforces_653_A"}
{"code": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[(98 + -98)]), int(xxs[(35 + -34)]), int(\n    xxs[(18 + -16)]), int(xxs[(29 + -26)]), int(xxs[(46 + -42)]), int(xxs[(45 + -40)])\n\n\ndef main():\n    if x == (21 + -21):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - (96 + -95)])\n    b_time = min([b // db, t - (98 + -97)])\n    idx_xj6d = (14 + -14)\n    list_4s9r = range(a_time + (14 + -13))\n    while idx_xj6d < len(list_4s9r):\n        i = list_4s9r[idx_xj6d]\n        idx_qvhz = (94 + -94)\n        list_ngqb = range(b_time + (26 + -25))\n        while idx_qvhz < len(list_ngqb):\n            j = list_ngqb[idx_qvhz]\n            if a - da * i == x or b - db * j == x:\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x:\n                print(\"YES\")\n                return \"Result Found\"\n            idx_qvhz = idx_qvhz + (39 + -38)\n        idx_xj6d = idx_xj6d + (31 + -30)\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\":\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_A_to_10", "old_id": "codeforces_203_A"}
{"code": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= (82 + -67):\n    aaaa = True\nelif (9 + -7) ** K >= N:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - (6 + -5)]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += (43 + -42)\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += (78 + -77)\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_a4pi = (94 + -94)\n    list_gy3u = range(N)\n    while idx_a4pi < len(list_gy3u):\n        i = list_gy3u[idx_a4pi]\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_a4pi = idx_a4pi + (49 + -48)\n    return False\n\n\nS = get_last_dict(S)\nif K == (28 + -27):\n    print(S)\nelse:\n    count = (47 + -47)\n    idx_kswo = (79 + -79)\n    list_ujn6 = S\n    while idx_kswo < len(list_ujn6):\n        c = list_ujn6[idx_kswo]\n        if c == S[(88 + -88)]:\n            count += (91 + -90)\n        else:\n            break\n        idx_kswo = idx_kswo + (10 + -9)\n    if count * ((97 + -95) ** (K - (59 + -58))) >= N:\n        print(S[(60 + -60)] * N)\n    else:\n        S = S[(43 + -43)] * (count * (((88 + -86) ** (K - (38 + -37))) - (43 + -42))) + S\n        print(S[(88 + -88): N])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC037_E_to_11", "old_id": "atcoder_AGC037_E"}
{"code": "mod = (100 + -90) ** (67 + -58) + (3 + 4)\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow((66 + -64), (12 + -10) * n - (17 + -15), mod)\na = (22 + -20) * b % mod\nans = (3 + -3)\nidx_45x2 = (4 + -4)\nlist_nd4r = range(n)\nwhile idx_45x2 < len(list_nd4r):\n    i = list_nd4r[idx_45x2]\n    ans += c[i] * (a + i * b)\n    ans %= mod\n    idx_45x2 = idx_45x2 + (32 + -31)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC150_E_to_12", "old_id": "atcoder_ABC150_E"}
{"code": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = (27 + -26)\nv = v1\ndistance = (97 + -97)\nidx_dugy = (90 + -90)\nlist_2eow = range(t)\nwhile idx_dugy < len(list_2eow):\n    i = list_2eow[idx_dugy]\n    if v - v2 > (t - i - (88 + -87)) * d:\n        a *= - (94 + -93)\n        v = (t - i - (94 + -93)) * d + v2\n    distance += v\n    v += a * d\n    idx_dugy = idx_dugy + (56 + -55)\nprint(distance)\n", "id": "ConstantUnfoldding_sample_from_codeforces_534_B_to_13", "old_id": "codeforces_534_B"}
{"code": "n = int(input())\nidx_mer6 = (40 + -40)\nlist_96vj = range(n, (82 + -82), - (24 + -23))\nwhile idx_mer6 < len(list_96vj):\n    i = list_96vj[idx_mer6]\n    if n % i == (14 + -14):\n        n = i\n        print(i, end=' ')\n    idx_mer6 = idx_mer6 + (49 + -48)\n", "id": "ConstantUnfoldding_sample_from_codeforces_58_B_to_14", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > (68 + -68):\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = (68 + -68)\n    while i < len(s):\n        if s[i] == \"A\":\n            t += \"A\"\n            i += (2 + -1)\n        elif s[i] == \"B\":\n            if i < len(s) - (79 + -78):\n                if s[i + (26 + -25)] == \"C\":\n                    t += \"D\"\n                    i += (9 + -7)\n                else:\n                    t += \"X\"\n                    i += (28 + -27)\n            else:\n                t += \"X\"\n                i += (21 + -20)\n        else:\n            t += \"X\"\n            i += (41 + -40)\n    total = (27 + -27)\n    numA = (100 + -100)\n    idx_f6r9 = (93 + -93)\n    list_64u9 = range(len(t))\n    while idx_f6r9 < len(list_64u9):\n        i = list_64u9[idx_f6r9]\n        if t[i] == \"X\":\n            numA = (41 + -41)\n        else:\n            if t[i] == \"A\":\n                numA += (30 + -29)\n            else:\n                total += numA\n        idx_f6r9 = idx_f6r9 + (34 + -33)\n    print(total)\n    INF = (45 + -35) ** (51 + -26)\n    mod = (92 + -85) + (41 + -31) ** (7 + 2)\n    return (59 + -59)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC034_B_to_15", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = map(int, input().split())\ngames = []\nidx_0hgf = (26 + -26)\nlist_0nja = range(a, x + (97 + -96))\nwhile idx_0hgf < len(list_0nja):\n    i = list_0nja[idx_0hgf]\n    if (i <= b):\n        continue\n    else:\n        idx_jyg2 = (88 + -88)\n        list_hi1f = range(b, y + (15 + -14))\n        while idx_jyg2 < len(list_hi1f):\n            j = list_hi1f[idx_jyg2]\n            if i > j:\n                games.append((i, j))\n            idx_jyg2 = idx_jyg2 + (60 + -59)\n    idx_0hgf = idx_0hgf + (20 + -19)\nprint(len(games))\nidx_1ze3 = (50 + -50)\nlist_vh0x = games\nwhile idx_1ze3 < len(list_vh0x):\n    i = list_vh0x[idx_1ze3]\n    print(f\"{i[(49 + -49)]} {i[(27 + -26)]}\")\n    idx_1ze3 = idx_1ze3 + (41 + -40)\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_A_to_16", "old_id": "codeforces_242_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > (44 + -44)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    nums = list(map(lambda x: int(x) - (31 + -30), input().strip()))\n    no_one = False\n    if (64 + -63) not in nums:\n        nums = [num // (60 + -58) for num in nums]\n        no_one = True\n    is_odd = False\n    idx_9i45 = (52 + -52)\n    list_t23z = list(enumerate(nums))\n    while idx_9i45 < len(list_t23z):\n        i, num = list_t23z[idx_9i45]\n        if not parity_of_nCr(n - (94 + -93), i) and num & (1 + 0):\n            is_odd ^= (60 + -59)\n        idx_9i45 = idx_9i45 + (46 + -45)\n    if not is_odd:\n        print((83 + -83))\n    else:\n        print((82 + -81) << no_one)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC043_B_to_17", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = int(input())\ntotal = (62 + -62)\nmemory = []\nidx_jqcg = (44 + -44)\nlist_ygvr = range(firstline)\nwhile idx_jqcg < len(list_ygvr):\n    x = list_ygvr[idx_jqcg]\n    A, G = list(map(int, input().split()))\n    if total + A <= (8 + 492):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\n    idx_jqcg = idx_jqcg + (57 + -56)\nprint(\"\".join(memory))\n", "id": "ConstantUnfoldding_sample_from_codeforces_282_B_to_18", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - (51 + -50))\n    else:\n        indices = find(s, '0')\n        if len(indices) == (87 + -86):\n            print(n)\n        else:\n            maximum = (78 + -78)\n            combs = itertools.combinations(indices, (90 + -88))\n            idx_vck1 = (75 + -75)\n            list_kcau = combs\n            while idx_vck1 < len(list_kcau):\n                x = list_kcau[idx_vck1]\n                maximum = max(\n                    maximum, (87 + -85) + (61 + -59) * (abs(indices.index(x[(63 + -63)]) - indices.index(x[(91 + -90)])) - (88 + -87)) - (abs(x[(37 + -37)] - x[(8 + -7)]) - (65 + -64)))\n                idx_vck1 = idx_vck1 + (60 + -59)\n            print(s.count('1') + maximum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_327_A_to_19", "old_id": "codeforces_327_A"}
{"code": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = (30 + -30)\narr.sort()\nidx_zhdb = (12 + -12)\nlist_3b20 = arr\nwhile idx_zhdb < len(list_3b20):\n    x = list_3b20[idx_zhdb]\n    if (x % k != (83 + -83) or not x // k in different):\n        different.add(x)\n    temp = max(len(different), temp)\n    idx_zhdb = idx_zhdb + (39 + -38)\nprint(temp)\n", "id": "ConstantUnfoldding_sample_from_codeforces_274_A_to_20", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((83 + -73) ** (21 + -12))\nINF = float('inf')\nmod = (58 + -48) ** (28 + -19) + (35 + -28)\nN, M = MAP()\nballs = [[(21 + -20), (70 + -70)] for _ in range(N)]\nballs[(39 + -39)] = [(93 + -93), (51 + -50)]\nidx_yuis = (1 + -1)\nlist_ip76 = range(M)\nwhile idx_yuis < len(list_ip76):\n    _ = list_ip76[idx_yuis]\n    x, y = MAP()\n    w_x, r_x = balls[x - (25 + -24)]\n    w_y, r_y = balls[y - (73 + -72)]\n    if w_x >= (77 + -76) and r_x >= (62 + -61):\n        balls[x - (2 + -1)][(38 + -38)] -= (82 + -81)\n        balls[y - (95 + -94)][(100 + -99)] += (34 + -33)\n    elif w_x == (71 + -71):\n        balls[x - (34 + -33)][(10 + -9)] -= (97 + -96)\n        balls[y - (50 + -49)][(6 + -5)] += (73 + -72)\n    else:\n        balls[x - (71 + -70)][(90 + -90)] -= (5 + -4)\n        balls[y - (26 + -25)][(90 + -90)] += (61 + -60)\n    idx_yuis = idx_yuis + (98 + -97)\nans = (28 + -28)\nidx_mbn6 = (51 + -51)\nlist_i0jp = range(N)\nwhile idx_mbn6 < len(list_i0jp):\n    i = list_i0jp[idx_mbn6]\n    if balls[i][(42 + -41)]:\n        ans += (39 + -38)\n    idx_mbn6 = idx_mbn6 + (63 + -62)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC002_B_to_21", "old_id": "atcoder_AGC002_B"}
{"code": "n = int(input())\narr = list(map(int, input().split()))\nif arr[(80 + -80)] > (66 + -51):\n    print((33 + -18))\nelse:\n    idx_28a1 = (91 + -91)\n    list_04x5 = range((34 + -33), len(arr))\n    while idx_28a1 < len(list_04x5):\n        i = list_04x5[idx_28a1]\n        if arr[i] - arr[i - (78 + -77)] > (21 + -6):\n            print(arr[i - (51 + -50)] + (52 + -37))\n            break\n        idx_28a1 = idx_28a1 + (64 + -63)\n", "id": "ConstantUnfoldding_sample_from_codeforces_673_A_to_22", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = (72 + -72)\nidx_8ug7 = (29 + -29)\nlist_pyrb = range(n)\nwhile idx_8ug7 < len(list_pyrb):\n    _ = list_pyrb[idx_8ug7]\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c:\n        c = x\n    idx_8ug7 = idx_8ug7 + (31 + -30)\nprint(s + c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_608_A_to_23", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = sys.stdin.readline\na, b = input()[: - (53 + -52)].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = (77 + -77)\nidx_840x = (58 + -58)\nlist_p2qi = range(x)\nwhile idx_840x < len(list_p2qi):\n    i = list_p2qi[idx_840x]\n    d = int(b[i]) + int(a[x - i - (10 + -9)]) + c\n    if d > (92 + -83):\n        s += str(d)[(98 + -97)]\n        c = (50 + -49)\n    else:\n        s += str(d)\n        c = (8 + -8)\n    idx_840x = idx_840x + (1 + 0)\nif c == (89 + -88):\n    s += '1'\nprint(int(s[:: - (25 + -24)]))\n", "id": "ConstantUnfoldding_sample_from_codeforces_171_A_to_24", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert((46 + -46), - (26 + -25))\npath = [(14 + -13)]\nind = (90 + -90)\ncount = (5 + -5)\nx = (61 + -60)\nt = - (25 + -24)\nflag = False\nHash = defaultdict(lambda: (7 + -7))\nidx_z3x1 = (86 + -86)\nlist_qhfw = range(N + (23 + -22))\nwhile idx_z3x1 < len(list_qhfw):\n    i = list_qhfw[idx_z3x1]\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += (41 + -40)\n    Hash[ne] = ind\n    x = ne\n    idx_z3x1 = idx_z3x1 + (6 + -5)\nif flag == True:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - (86 + -85)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_D_to_25", "old_id": "atcoder_ABC167_D"}
{"code": "n = int(input())\nr = [* map(int, input().split())]\nans = abs(r[(65 + -65)])\nidx_9bd6 = (33 + -33)\nlist_736y = range((27 + -26), n)\nwhile idx_9bd6 < len(list_736y):\n    i = list_736y[idx_9bd6]\n    ans += abs(r[i] - r[i - (25 + -24)])\n    idx_9bd6 = idx_9bd6 + (53 + -52)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_596_B_to_26", "old_id": "codeforces_596_B"}
{"code": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = (68 + -68)\nidx_wel5 = (9 + -9)\nlist_uogb = range(N)\nwhile idx_wel5 < len(list_uogb):\n    i = list_uogb[idx_wel5]\n    d = (A[i] % N) % (74 + -72)\n    if d % (23 + -21) != i % (33 + -31):\n        cnt += (6 + -5)\n    idx_wel5 = idx_wel5 + (19 + -18)\nprint(cnt // (2 + 0))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC003_C_to_27", "old_id": "atcoder_AGC003_C"}
{"code": "s = list(input())\nnum_g, num_p = (92 + -92), (97 + -97)\nscore = (8 + -8)\nidx_ekr5 = (76 + -76)\nlist_hoj4 = s\nwhile idx_ekr5 < len(list_hoj4):\n    x = list_hoj4[idx_ekr5]\n    if x == 'g':\n        if num_g - num_p > (71 + -71):\n            score += (28 + -27)\n            num_p += (96 + -95)\n        else:\n            score = score\n            num_g += (23 + -22)\n    elif x == 'p':\n        if num_g - num_p > (42 + -42):\n            score = score\n            num_p += (18 + -17)\n        else:\n            score -= (23 + -22)\n            num_g += (89 + -88)\n    idx_ekr5 = idx_ekr5 + (52 + -51)\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC062_B_to_28", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return (75 + -75), (100 + -100)\n    seen.add(i)\n    nodes = (1 + 0)\n    edges = len(g[i])\n    idx_s390 = (1 + -1)\n    list_xloc = g[i]\n    while idx_s390 < len(list_xloc):\n        j = list_xloc[idx_s390]\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n        idx_s390 = idx_s390 + (75 + -74)\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    idx_t5jm = (43 + -43)\n    list_4spa = range((65 + -64), n + (83 + -82))\n    while idx_t5jm < len(list_4spa):\n        i = list_4spa[idx_t5jm]\n        g[i] = set()\n        idx_t5jm = idx_t5jm + (98 + -97)\n    idx_qkzt = (4 + -4)\n    list_mlte = range(m)\n    while idx_qkzt < len(list_mlte):\n        _ = list_mlte[idx_qkzt]\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_qkzt = idx_qkzt + (28 + -27)\n    ans = (11 + -11)\n    idx_woa9 = (99 + -99)\n    list_l4zf = range((95 + -94), n + (62 + -61))\n    while idx_woa9 < len(list_l4zf):\n        i = list_l4zf[idx_woa9]\n        if i not in seen:\n            nodes, edges = dfs(g, seen, i)\n            if nodes > (60 + -59) and nodes % (10 + -8) == (22 + -21) and (35 + -33) * nodes == edges:\n                ans += (67 + -66)\n        idx_woa9 = idx_woa9 + (3 + -2)\n    if (n - ans) % (53 + -51) == (38 + -37):\n        ans += (75 + -74)\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "ConstantUnfoldding_sample_from_codeforces_216_B_to_29", "old_id": "codeforces_216_B"}
{"code": "import sys\nsys.setrecursionlimit((72 + -62) ** (75 + -70))\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nidx_yjvq = (26 + -26)\nlist_k4is = range(n)\nwhile idx_yjvq < len(list_k4is):\n    i = list_k4is[idx_yjvq]\n    nodes.append(Node())\n    idx_yjvq = idx_yjvq + (24 + -23)\nidx_nadc = (41 + -41)\nlist_ajmq = range(n - (13 + -12))\nwhile idx_nadc < len(list_ajmq):\n    i = list_ajmq[idx_nadc]\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - (94 + -93)]\n    node2 = nodes[v - (74 + -73)]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_nadc = idx_nadc + (38 + -37)\nroot = nodes[(91 + -91)]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    idx_hejm = (39 + -39)\n    list_4so8 = node.a\n    while idx_hejm < len(list_4so8):\n        pair = list_4so8[idx_hejm]\n        adjNode = pair[(26 + -26)]\n        dis = pair[(73 + -72)]\n        if (distance + dis) % (67 + -65) == (15 + -15):\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n        idx_hejm = idx_hejm + (2 + -1)\n\n\ntraverse(root, (36 + -36))\nidx_k3ud = (27 + -27)\nlist_lb2k = range(n)\nwhile idx_k3ud < len(list_lb2k):\n    i = list_lb2k[idx_k3ud]\n    node = nodes[i]\n    if node.color:\n        print((28 + -27))\n    else:\n        print((98 + -98))\n    idx_k3ud = idx_k3ud + (31 + -30)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_D_to_30", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == (70 + -70):\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = (26 + -26)\n    n = len(array)\n    left = [e] * (n + (64 + -63))\n    right = [e] * (n + (41 + -40))\n    idx_i98d = (52 + -52)\n    list_37ws = range(n)\n    while idx_i98d < len(list_37ws):\n        i = list_37ws[idx_i98d]\n        left[i + (78 + -77)] = op(left[i], array[i])\n        idx_i98d = idx_i98d + (62 + -61)\n    idx_o7uh = (93 + -93)\n    list_ph36 = reversed(range(n))\n    while idx_o7uh < len(list_ph36):\n        i = list_ph36[idx_o7uh]\n        right[i] = op(right[i + (14 + -13)], array[i])\n        idx_o7uh = idx_o7uh + (48 + -47)\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = (10 + -10)\nidx_qhba = (60 + -60)\nlist_tjr1 = range(n)\nwhile idx_qhba < len(list_tjr1):\n    i = list_tjr1[idx_qhba]\n    ans = max(gcd(left[i], right[i + (33 + -32)]), ans)\n    idx_qhba = idx_qhba + (61 + -60)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_C_to_31", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][(94 + -93): - (8 + -7)]\n    c = [e for e in lines[(3 + -3)].split(\" \")][(43 + -43)]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + (62 + -61)]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list):\n        idx_ukcb = (89 + -89)\n        list_x7ld = result\n        while idx_ukcb < len(list_x7ld):\n            r = list_x7ld[idx_ukcb]\n            print(\"%s\" % r, sep='')\n            idx_ukcb = idx_ukcb + (2 + -1)\n    else:\n        print(\"%s\" % result, sep='')\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC151_A_to_32", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= (32 + -29):\n        return\n    idx_xjm4 = (71 + -71)\n    list_mlwf = range((17 + -13))\n    while idx_xjm4 < len(list_mlwf):\n        j = list_mlwf[idx_xjm4]\n        idx_56vf = (7 + -7)\n        list_qpbs = range(j + (51 + -50), (13 + -9))\n        while idx_56vf < len(list_qpbs):\n            k = list_qpbs[idx_56vf]\n            if (nums[j] != - (30 + -29) and nums[k] != - (7 + -6)):\n                s = nums[j]\n                nums[j] = - (39 + -38)\n                t = nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = s + t\n                elif (operations[i] == '*'):\n                    nums[k] = s * t\n                if (i == (79 + -77) and nums[k] < ans[(48 + -48)]):\n                    ans[(14 + -14)] = nums[k]\n                rememberTheNumber(nums, i + (13 + -12), operations, ans)\n                nums[j] = s\n                nums[k] = t\n            idx_56vf = idx_56vf + (36 + -35)\n        idx_xjm4 = idx_xjm4 + (36 + -35)\n\n\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nans = [(93 + 9999999999999999999999907)]\nrememberTheNumber(nums, (20 + -20), operations, ans)\nprint(ans[(31 + -31)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_55_B_to_33", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = [int(i) for i in input().split()]\n    length = arr[(69 + -69)]\n    arr = sorted(arr[(96 + -95): (78 + -74)], reverse=False)\n    if (length % arr[(20 + -20)] == (62 + -62)):\n        print(int(length / arr[(8 + -8)]))\n        return\n    ans = (53 + -53)\n    if (arr[(57 + -57)] == arr[(92 + -91)]):\n        k = (4 + -4)\n        idx_pogf = (2 + -2)\n        list_y3wf = range(int(length / arr[(43 + -41)]) + (81 + -80))\n        while idx_pogf < len(list_y3wf):\n            i = list_y3wf[idx_pogf]\n            check = length - i * arr[(56 + -54)]\n            if (check >= (39 + -39) and check % arr[(63 + -63)] == (7 + -7)):\n                k = int(check / arr[(93 + -93)])\n                ans = max(ans, k + i)\n            idx_pogf = idx_pogf + (57 + -56)\n    else:\n        k = (41 + -41)\n        idx_1n4i = (55 + -55)\n        list_sthk = range(int(length / arr[(81 + -79)]) + (4 + -3))\n        while idx_1n4i < len(list_sthk):\n            i = list_sthk[idx_1n4i]\n            idx_hxp0 = (22 + -22)\n            list_t8xf = range(int(length / arr[(36 + -35)]) + (47 + -46))\n            while idx_hxp0 < len(list_t8xf):\n                j = list_t8xf[idx_hxp0]\n                check = length - i * arr[(31 + -29)] - j * arr[(9 + -8)]\n                if (check >= (19 + -19) and check % arr[(79 + -79)] == (90 + -90)):\n                    k = int(check / arr[(41 + -41)])\n                    ans = max(ans, k + i + j)\n                idx_hxp0 = idx_hxp0 + (51 + -50)\n            idx_1n4i = idx_1n4i + (70 + -69)\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "ConstantUnfoldding_sample_from_codeforces_189_A_to_34", "old_id": "codeforces_189_A"}
{"code": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [(70 + -70)] * n\nmx = arr[- (75 + -74)]\nidx_yjpt = (91 + -91)\nlist_mf2e = range(n - (40 + -38), - (97 + -96), - (68 + -67))\nwhile idx_yjpt < len(list_mf2e):\n    i = list_mf2e[idx_yjpt]\n    ans[i] = max((98 + -98), mx - arr[i] + (42 + -41))\n    if arr[i] > mx:\n        mx = arr[i]\n    idx_yjpt = idx_yjpt + (47 + -46)\nprint(* ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_581_B_to_35", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: (63 + -63))\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - (19 + -18)\nidx_hgx4 = (79 + -79)\nlist_q75y = l\nwhile idx_hgx4 < len(list_q75y):\n    v = list_q75y[idx_hgx4]\n    s[v] += (27 + -26)\n    if s[v] >= (54 + -52):\n        f = 'No'\n    if i != - (28 + -27) and l[i][- (14 + -13)] != v[(97 + -97)]:\n        f = 'No'\n    i += (11 + -10)\n    idx_hgx4 = idx_hgx4 + (22 + -21)\nprint(f)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC109_B_to_36", "old_id": "atcoder_ABC109_B"}
{"code": "t = int(input())\n\n\ndef solve(n):\n    s = ((2 + -1) + n) * n // (82 + -80)\n    t = (3 + -2)\n    while t <= n:\n        s -= (11 + -9) * t\n        t *= (59 + -57)\n    return s\nidx_jrum = (68 + -68)\nlist_5znv = range(t)\nwhile idx_jrum < len(list_5znv):\n    _ = list_5znv[idx_jrum]\n    n = int(input())\n    print(solve(n))\n    idx_jrum = idx_jrum + (73 + -72)\n", "id": "ConstantUnfoldding_sample_from_codeforces_598_A_to_37", "old_id": "codeforces_598_A"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = (10 + -10)\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = (24 + -24)\n            idx_ginx = (46 + -46)\n            list_czru = range(Q)\n            while idx_ginx < len(list_czru):\n                i = list_czru[idx_ginx]\n                if A[b[i] - (68 + -67)] - A[a[i] - (72 + -71)] == c[i]:\n                    ans += d[i]\n                idx_ginx = idx_ginx + (81 + -80)\n            res = max(res, ans)\n            return\n        last_max = (23 + -22) if len(A) == (24 + -24) else A[- (95 + -94)]\n        idx_4i67 = (54 + -54)\n        list_5ucd = range(last_max, M + (10 + -9))\n        while idx_4i67 < len(list_5ucd):\n            i = list_5ucd[idx_4i67]\n            rec(A + [i])\n            idx_4i67 = idx_4i67 + (60 + -59)\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_1ni7 = (14 + -14)\n        list_vumh = sys.stdin\n        while idx_1ni7 < len(list_vumh):\n            line = list_vumh[idx_1ni7]\n            idx_shuo = (1 + -1)\n            list_nrqj = line.split()\n            while idx_shuo < len(list_nrqj):\n                word = list_nrqj[idx_shuo]\n                yield word\n                idx_shuo = idx_shuo + (62 + -61)\n            idx_1ni7 = idx_1ni7 + (99 + -98)\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    idx_yizw = (83 + -83)\n    list_9fyb = range(Q)\n    while idx_yizw < len(list_9fyb):\n        i = list_9fyb[idx_yizw]\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n        idx_yizw = idx_yizw + (47 + -46)\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC165_C_to_38", "old_id": "atcoder_ABC165_C"}
{"code": "soz = input()\na = [(52 + -52)] * (len(soz) + (94 + -93))\nidx_8om6 = (19 + -19)\nlist_8zjf = range((75 + -74), len(soz))\nwhile idx_8om6 < len(list_8zjf):\n    i = list_8zjf[idx_8om6]\n    a[i] = a[i - (47 + -46)]\n    if soz[i - (18 + -17)] == soz[i]:\n        a[i] += (77 + -76)\n    idx_8om6 = idx_8om6 + (31 + -30)\nn = int(input())\narr = []\nidx_0a8q = (50 + -50)\nlist_5yuq = range(n)\nwhile idx_0a8q < len(list_5yuq):\n    i = list_5yuq[idx_0a8q]\n    m, l = input().split()\n    arr.append(a[int(l) - (42 + -41)] - a[int(m) - (25 + -24)])\n    idx_0a8q = idx_0a8q + (68 + -67)\nidx_jkqg = (100 + -100)\nlist_by8z = arr\nwhile idx_jkqg < len(list_by8z):\n    i = list_by8z[idx_jkqg]\n    print(i)\n    idx_jkqg = idx_jkqg + (82 + -81)\n", "id": "ConstantUnfoldding_sample_from_codeforces_313_B_to_39", "old_id": "codeforces_313_B"}
{"code": "n = int(input())\nl = list(map(int, input().split()))\nhigh = (69 + -68)\ntower = n\nmaximum = (13 + -12)\nl.sort()\nidx_d6fo = (40 + -40)\nlist_1h5z = range((57 + -56), n)\nwhile idx_d6fo < len(list_1h5z):\n    i = list_1h5z[idx_d6fo]\n    if l[i] == l[i - (27 + -26)]:\n        tower -= (75 + -74)\n        high += (88 + -87)\n    else:\n        if high > maximum:\n            maximum = high\n        high = (59 + -58)\n    idx_d6fo = idx_d6fo + (20 + -19)\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "id": "ConstantUnfoldding_sample_from_codeforces_37_A_to_40", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    idx_p1io = (33 + -33)\n    list_vywq = range(d)\n    while idx_p1io < len(list_vywq):\n        i = list_vywq[idx_p1io]\n        tmp += (x[i] - y[i]) ** (7 + -5)\n        idx_p1io = idx_p1io + (21 + -20)\n    return math.sqrt(tmp)\n\n\ncount = (26 + -26)\nidx_v9xw = (90 + -90)\nlist_n1d7 = list(enumerate(points))\nwhile idx_v9xw < len(list_n1d7):\n    i, elm = list_n1d7[idx_v9xw]\n    idx_jvlg = (63 + -63)\n    list_zcpm = range(i + (70 + -69), n)\n    while idx_jvlg < len(list_zcpm):\n        j = list_zcpm[idx_jvlg]\n        if dist(elm, points[j]).is_integer():\n            count += (26 + -25)\n        idx_jvlg = idx_jvlg + (6 + -5)\n    idx_v9xw = idx_v9xw + (52 + -51)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_B_to_41", "old_id": "atcoder_ABC133_B"}
{"code": "li = []\nind = (81 + -81)\nidx_eo4i = (45 + -45)\nlist_2owy = range((62 + -61), (65 + 306))\nwhile idx_eo4i < len(list_2owy):\n    i = list_2owy[idx_eo4i]\n    temp = []\n    p, q = i, i\n    count = (54 + -54)\n    while p != (29 + -29):\n        p //= (25 + -15)\n        count += (100 + -99)\n    if count == (81 + -80):\n        li.append(i)\n    if count == (11 + -9):\n        temp = []\n        while q != (2 + -2):\n            x = q % (20 + -10)\n            q //= (64 + -54)\n            temp.append(x)\n        li = li + temp[:: - (78 + -77)]\n    if count == (92 + -89):\n        temp = []\n        while q != (28 + -28):\n            x = q % (64 + -54)\n            q //= (35 + -25)\n            temp.append(x)\n        li = li + temp[:: - (51 + -50)]\n    idx_eo4i = idx_eo4i + (16 + -15)\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - (65 + -64)])\n", "id": "ConstantUnfoldding_sample_from_codeforces_672_A_to_42", "old_id": "codeforces_672_A"}
{"code": "X = int(input())\nprime = [True] * (9 + 100001)\nprime[(13 + -13)] = False\nprime[(45 + -44)] = False\nidx_71yq = (22 + -22)\nlist_wxf4 = range((26 + -22), (88 + 99922), (55 + -53))\nwhile idx_71yq < len(list_wxf4):\n    i = list_wxf4[idx_71yq]\n    prime[i] = False\n    idx_71yq = idx_71yq + (40 + -39)\ni = (53 + -50)\nwhile (i * i <= (33 + 99975)):\n    if prime[i]:\n        idx_a8x2 = (99 + -99)\n        list_e4jq = range(i + i, (67 + 99941), i)\n        while idx_a8x2 < len(list_e4jq):\n            j = list_e4jq[idx_a8x2]\n            prime[j] = False\n            idx_a8x2 = idx_a8x2 + (82 + -81)\n    i += (32 + -30)\nidx_38aj = (49 + -49)\nlist_pw4v = range(X, (53 + 99955))\nwhile idx_38aj < len(list_pw4v):\n    i = list_pw4v[idx_38aj]\n    if prime[i]:\n        print(i)\n        break\n    idx_38aj = idx_38aj + (5 + -4)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC149_C_to_43", "old_id": "atcoder_ABC149_C"}
{"code": "l = []\nlimit = (6 + 9999999994)\n\n\ndef gen(number, four, seven):\n    if (number > limit):\n        return\n    if (number > (96 + -96) and four == seven):\n        l.append(number)\n    gen(number * (93 + -83) + (25 + -21), four + (48 + -47), seven)\n    gen(number * (52 + -42) + (42 + -35), four, seven + (98 + -97))\n\n\ndef main():\n    gen((53 + -53), (36 + -36), (58 + -58))\n    l.sort()\n    n = int(input())\n    ans = (91 + -91)\n    idx_xol3 = (51 + -51)\n    list_pgor = l\n    while idx_xol3 < len(list_pgor):\n        val = list_pgor[idx_xol3]\n        if (val >= n):\n            ans = val\n            break\n        idx_xol3 = idx_xol3 + (23 + -22)\n    print(ans)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_96_B_to_44", "old_id": "codeforces_96_B"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit((17 + -7) ** (90 + -81))\nINF = (56 + -46) ** (45 + -27)\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    idx_y9w0 = (91 + -91)\n    list_wxcl = range(M)\n    while idx_y9w0 < len(list_wxcl):\n        i = list_wxcl[idx_y9w0]\n        X, Y, Z = map(lambda x: int(x) - (87 + -86), input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_y9w0 = idx_y9w0 + (47 + -46)\n    used = [False] * N\n    ans = (75 + -75)\n    idx_20mp = (99 + -99)\n    list_0rtn = range(N)\n    while idx_20mp < len(list_0rtn):\n        i = list_0rtn[idx_20mp]\n        if not used[i]:\n            ans += (48 + -47)\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                idx_4fdg = (65 + -65)\n                list_1t7q = edge[node]\n                while idx_4fdg < len(list_1t7q):\n                    nextnode = list_1t7q[idx_4fdg]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_4fdg = idx_4fdg + (56 + -55)\n        idx_20mp = idx_20mp + (5 + -4)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC126_E_to_45", "old_id": "atcoder_ABC126_E"}
{"code": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [(48 + -48)]\nans = (98 + -98)\nX = (16 + -16)\nY = (43 + -43)\nidx_7s6f = (7 + -7)\nlist_rf1z = range(N)\nwhile idx_7s6f < len(list_rf1z):\n    i = list_rf1z[idx_7s6f]\n    if V[i] - C[i] > (28 + -28):\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\n    idx_7s6f = idx_7s6f + (96 + -95)\nprint(sum(list))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC125_B_to_46", "old_id": "atcoder_ABC125_B"}
{"code": "n, m = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nidx_h7w9 = (79 + -79)\nlist_1om5 = range(r)\nwhile idx_h7w9 < len(list_1om5):\n    i = list_1om5[idx_h7w9]\n    a[i] += (46 + -45)\n    idx_h7w9 = idx_h7w9 + (23 + -22)\nidx_3fmc = (72 + -72)\nlist_fcup = range(m)\nwhile idx_3fmc < len(list_fcup):\n    i = list_fcup[idx_3fmc]\n    print(a[i], end=' ')\n    idx_3fmc = idx_3fmc + (98 + -97)\n", "id": "ConstantUnfoldding_sample_from_codeforces_306_A_to_47", "old_id": "codeforces_306_A"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [(75 + -75) for i in range(N)]\nparity = [(94 + -94) for _ in range(N)]\nflag = [False for _ in range(N)]\nidx_edj6 = (37 + -37)\nlist_3if5 = range(M)\nwhile idx_edj6 < len(list_3if5):\n    _ = list_3if5[idx_edj6]\n    a, b = map(int, input().split())\n    edges[a - (64 + -63)].add(b - (72 + -71))\n    edges[b - (23 + -22)].add(a - (55 + -54))\n    degs[a - (48 + -47)] += (48 + -47)\n    degs[b - (4 + -3)] += (22 + -21)\n    idx_edj6 = idx_edj6 + (24 + -23)\nif M % (79 + -77) != (46 + -46):\n    print(- (89 + -88))\n    exit()\nQ = []\nidx_saq9 = (90 + -90)\nlist_i625 = list(enumerate(degs))\nwhile idx_saq9 < len(list_i625):\n    i, d = list_i625[idx_saq9]\n    Q.append((d, i))\n    idx_saq9 = idx_saq9 + (61 + -60)\nheapq.heapify(Q)\nwhile len(Q) > (81 + -81):\n    _, u = Q[(58 + -58)]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    idx_xco9 = (88 + -88)\n    list_hf90 = list(enumerate(edges[u]))\n    while idx_xco9 < len(list_hf90):\n        i, v = list_hf90[idx_xco9]\n        edges[v].remove(u)\n        if parity[u] != (70 + -70) and i == (25 + -25):\n            print(u + (16 + -15), v + (42 + -41))\n            parity[u] = (84 + -83) - parity[u]\n        else:\n            print(v + (96 + -95), u + (3 + -2))\n            parity[v] = (55 + -54) - parity[v]\n        degs[v] -= (29 + -28)\n        heapq.heappush(Q, (degs[v], v))\n        idx_xco9 = idx_xco9 + (57 + -56)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC035_B_to_48", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[(40 + -39):] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range((54 + -53), n + (36 + -35)))\n    v = r - q\n    ans = (11 + -11)\n    idx_gtoy = (72 + -72)\n    list_eyqa = range((26 + -26), len(q) + (58 + -57))\n    while idx_gtoy < len(list_eyqa):\n        i = list_eyqa[idx_gtoy]\n        idx_un25 = (15 + -15)\n        list_0e3t = itertools.combinations(q, i)\n        while idx_un25 < len(list_0e3t):\n            s = list_0e3t[idx_un25]\n            idx_civy = (82 + -82)\n            list_0jby = zip(li, p)\n            while idx_civy < len(list_0jby):\n                u, w = list_0jby[idx_civy]\n                s = set(s)\n                if len(s & set(u)) % (5 + -3) != w:\n                    break\n                idx_civy = idx_civy + (100 + -99)\n            idx_un25 = idx_un25 + (89 + -88)\n        idx_gtoy = idx_gtoy + (1 + 0)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC128_C_to_49", "old_id": "atcoder_ABC128_C"}
{"code": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != (69 + -69)])\no = (100 + -98) * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nidx_pe18 = (74 + -74)\nlist_azef = range(n + (29 + -28))\nwhile idx_pe18 < len(list_azef):\n    i = list_azef[idx_pe18]\n    if i + o >= n:\n        res = min(res, abs(i - arr_sum))\n    idx_pe18 = idx_pe18 + (31 + -30)\nprint(\"%.3f\" % res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_351_A_to_50", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit((5 + 5) ** (78 + -70))\nmod = (64 + -54) ** (86 + -77) + (43 + -36)\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= (27 + -26)\nao -= (25 + -24)\ng = [[] for i in range(n)]\nidx_cj6x = (15 + -15)\nlist_30t7 = range(n - (4 + -3))\nwhile idx_cj6x < len(list_30t7):\n    i = list_30t7[idx_cj6x]\n    a, b = inpl()\n    g[a - (89 + -88)].append(b - (98 + -97))\n    g[b - (39 + -38)].append(a - (81 + -80))\n    idx_cj6x = idx_cj6x + (36 + -35)\nta_dist = [None] * n\nta_dist[ta] = (90 + -90)\nao_dist = [None] * n\nao_dist[ao] = (13 + -13)\n\n\ndef ta_dfs(node):\n    idx_r9a6 = (18 + -18)\n    list_j0hn = g[node]\n    while idx_r9a6 < len(list_j0hn):\n        v = list_j0hn[idx_r9a6]\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + (48 + -47)\n        ta_dfs(v)\n        idx_r9a6 = idx_r9a6 + (58 + -57)\n\n\ndef ao_dfs(node):\n    idx_3r4x = (55 + -55)\n    list_3juz = g[node]\n    while idx_3r4x < len(list_3juz):\n        v = list_3juz[idx_3r4x]\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + (43 + -42)\n        ao_dfs(v)\n        idx_3r4x = idx_3r4x + (97 + -96)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = (92 + -92)\nidx_0opw = (8 + -8)\nlist_zfbn = range(n)\nwhile idx_0opw < len(list_zfbn):\n    i = list_zfbn[idx_0opw]\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = max(res, ao_dist[i])\n    idx_0opw = idx_0opw + (66 + -65)\nprint(res - (39 + -38))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC148_F_to_51", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    idx_f7kd = (11 + -11)\n    list_m8k0 = permutations\n    while idx_f7kd < len(list_m8k0):\n        permutation = list_m8k0[idx_f7kd]\n        total_distance = (60 + -60)\n        idx_bovp = (29 + -29)\n        list_20gf = range((21 + -21), N - (73 + -72))\n        while idx_bovp < len(list_20gf):\n            i = list_20gf[idx_bovp]\n            f, t = permutation[i: i + (75 + -73)]\n            distance = ((x[t] - x[f]) ** (76 + -74) + (y[t] - y[f]) ** (27 + -25)) ** 0.5\n            total_distance += distance\n            idx_bovp = idx_bovp + (68 + -67)\n        distances.append(total_distance)\n        idx_f7kd = idx_f7kd + (38 + -37)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_albq = (97 + -97)\n        list_6ily = sys.stdin\n        while idx_albq < len(list_6ily):\n            line = list_6ily[idx_albq]\n            idx_2xna = (76 + -76)\n            list_tqvw = line.split()\n            while idx_2xna < len(list_tqvw):\n                word = list_tqvw[idx_2xna]\n                yield word\n                idx_2xna = idx_2xna + (84 + -83)\n            idx_albq = idx_albq + (74 + -73)\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    idx_p1my = (61 + -61)\n    list_xn1m = range(N)\n    while idx_p1my < len(list_xn1m):\n        i = list_xn1m[idx_p1my]\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n        idx_p1my = idx_p1my + (37 + -36)\n    solve(N, x, y)\n\n\nif __name__ == \"__main__\":\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_C_to_52", "old_id": "atcoder_ABC145_C"}
{"code": "n, k = map(int, input().split())\nv = input()\nd = [\"LEFT\", \"RIGHT\"]\nf = k - (88 + -87) < n - k\nm = min(k - (36 + -35), n - k)\na = []\nidx_gdsj = (13 + -13)\nlist_ckan = range((71 + -71), m)\nwhile idx_gdsj < len(list_ckan):\n    i = list_ckan[idx_gdsj]\n    a.append(d[not f])\n    idx_gdsj = idx_gdsj + (84 + -83)\nidx_k7j6 = (33 + -33)\nlist_0zxl = v[:: - (21 + -20) + (23 + -21) * f]\nwhile idx_k7j6 < len(list_0zxl):\n    i = list_0zxl[idx_k7j6]\n    a.append(\"PRINT \" + i)\n    a.append(d[f])\n    idx_k7j6 = idx_k7j6 + (68 + -67)\nprint(* a[: - (96 + -95)], sep=\"\\n\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_412_A_to_53", "old_id": "codeforces_412_A"}
{"code": "def s():\n    input()\n    a = list(map(int, input().split()))\n    a.sort()\n    idx_rw3p = (77 + -77)\n    list_f3ls = range((22 + -21), len(a))\n    while idx_rw3p < len(list_f3ls):\n        i = list_f3ls[idx_rw3p]\n        if a[i] != a[i - (55 + -54)] and a[i] < a[i - (89 + -88)] * (39 + -37):\n            return 'YES'\n        idx_rw3p = idx_rw3p + (51 + -50)\n    return 'NO'\n\n\nprint(s())\n", "id": "ConstantUnfoldding_sample_from_codeforces_108_B_to_54", "old_id": "codeforces_108_B"}
{"code": "s = list(input())\nx = True\ndt = {}\nidx_p2rx = (51 + -51)\nlist_conr = s\nwhile idx_p2rx < len(list_conr):\n    i = list_conr[idx_p2rx]\n    if i in dt:\n        dt[i] += (30 + -29)\n    else:\n        dt[i] = (22 + -21)\n    idx_p2rx = idx_p2rx + (53 + -52)\ncnt = (22 + -22)\nx = True\nidx_78uc = (72 + -72)\nlist_61m4 = list(dt.items())\nwhile idx_78uc < len(list_61m4):\n    key, value = list_61m4[idx_78uc]\n    if value % (70 + -68) != (43 + -43) and cnt < (32 + -31):\n        cnt += (28 + -27)\n    elif value % (100 + -98) != (20 + -20) and cnt >= (37 + -36):\n        x = False\n        break\n    idx_78uc = idx_78uc + (91 + -90)\nif x:\n    print(\"First\")\nelif not x and len(s) % (86 + -84) == (10 + -10):\n    print(\"Second\")\nelif not x and len(s) % (82 + -80) != (10 + -10):\n    print(\"First\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_276_B_to_55", "old_id": "codeforces_276_B"}
{"code": "n = int(input())\ncake = []\nhappiness = (89 + -89)\nchocCount = (31 + -31)\nnfat = (15 + -14)\nidx_75xg = (84 + -84)\nlist_n928 = range(n)\nwhile idx_75xg < len(list_n928):\n    i = list_n928[idx_75xg]\n    line = str(input())\n    cake.append(line)\n    idx_h9e1 = (40 + -40)\n    list_o9j2 = line\n    while idx_h9e1 < len(list_o9j2):\n        j = list_o9j2[idx_h9e1]\n        if (j == 'C'):\n            chocCount += (97 + -96)\n        idx_h9e1 = idx_h9e1 + (2 + -1)\n    if (chocCount > (17 + -16)):\n        idx_gmdz = (52 + -52)\n        list_27y4 = range(chocCount, chocCount - (51 + -49), - (82 + -81))\n        while idx_gmdz < len(list_27y4):\n            i = list_27y4[idx_gmdz]\n            nfat *= i\n            idx_gmdz = idx_gmdz + (8 + -7)\n        happiness += nfat / (16 + -14)\n    nfat = (78 + -77)\n    chocCount = (7 + -7)\n    idx_75xg = idx_75xg + (17 + -16)\nposCount = (60 + -60)\nidx_wz41 = (51 + -51)\nlist_6qcz = range(n)\nwhile idx_wz41 < len(list_6qcz):\n    j = list_6qcz[idx_wz41]\n    idx_ul19 = (38 + -38)\n    list_ys7x = range(n)\n    while idx_ul19 < len(list_ys7x):\n        i = list_ys7x[idx_ul19]\n        if (cake[i][j] == 'C'):\n            chocCount += (31 + -30)\n        idx_ul19 = idx_ul19 + (21 + -20)\n    if (chocCount > (61 + -60)):\n        idx_fq1o = (30 + -30)\n        list_pmeo = range(chocCount, chocCount - (82 + -80), - (75 + -74))\n        while idx_fq1o < len(list_pmeo):\n            i = list_pmeo[idx_fq1o]\n            nfat *= i\n            idx_fq1o = idx_fq1o + (29 + -28)\n        happiness += nfat / (78 + -76)\n    nfat = (33 + -32)\n    chocCount = (68 + -68)\n    idx_wz41 = idx_wz41 + (98 + -97)\nprint(int(happiness))\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_A_to_56", "old_id": "codeforces_629_A"}
{"code": "n = int(input())\nm = input().split()\npossible = True\nidx_jv9s = (54 + -54)\nlist_ndso = set(m)\nwhile idx_jv9s < len(list_ndso):\n    i = list_ndso[idx_jv9s]\n    if m.count(i) >= n / (59 + -57) + (75 + -74):\n        possible = False\n        break\n    idx_jv9s = idx_jv9s + (73 + -72)\nprint('YES' if possible else 'NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_296_A_to_57", "old_id": "codeforces_296_A"}
{"code": "I = input\nn, m = map(int, I().split())\nb = [(90 + -89)] * n * (37 + -35)\nb[(17 + -17)] = b[n - (82 + -81)] = b[n] = b[(85 + -83) * n - (66 + -65)] = (17 + -17)\nidx_uqo4 = (5 + -5)\nlist_32tx = range(m)\nwhile idx_uqo4 < len(list_32tx):\n    i = list_32tx[idx_uqo4]\n    r, c = map(int, I().split())\n    b[r - (17 + -16)] = b[n + c - (82 + -81)] = (69 + -69)\n    idx_uqo4 = idx_uqo4 + (20 + -19)\nif n % (75 + -73) and b[n // (2 + 0)] and b[n + n // (67 + -65)]:\n    b[n // (33 + -31)] = (70 + -70)\nprint(sum(b))\n", "id": "ConstantUnfoldding_sample_from_codeforces_333_B_to_58", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = None\n    idx_gipw = (71 + -71)\n    list_zvcn = range(n)\n    while idx_gipw < len(list_zvcn):\n        i = list_zvcn[idx_gipw]\n        if ls_xyh[i][(23 + -21)] > (92 + -92):\n            [x0, y0, h0] = ls_xyh[i]\n            break\n        idx_gipw = idx_gipw + (5 + -4)\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range((45 + 56)) for cy in range((62 + 39))]\n    idx_qa1u = (70 + -70)\n    list_j73z = ls_xyh\n    while idx_qa1u < len(list_j73z):\n        [x, y, h] = list_j73z[idx_qa1u]\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), (79 + -79)) == h]\n        idx_qa1u = idx_qa1u + (24 + -23)\n    (xx, yy, hh) = cands[(30 + -30)]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[(42 + -42)])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC112_C_to_59", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = map(int, input().split())\nl = []\nidx_hiy8 = (84 + -84)\nlist_0f4n = range(n)\nwhile idx_hiy8 < len(list_0f4n):\n    i = list_0f4n[idx_hiy8]\n    s = input()\n    s = list(s)\n    idx_ynz7 = (97 + -97)\n    list_juen = range(m)\n    while idx_ynz7 < len(list_juen):\n        j = list_juen[idx_ynz7]\n        if s[j] == '.':\n            if (i + j) & (82 + -81):\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n        idx_ynz7 = idx_ynz7 + (24 + -23)\n    l.append(s)\n    idx_hiy8 = idx_hiy8 + (91 + -90)\nidx_fkaw = (28 + -28)\nlist_p459 = l\nwhile idx_fkaw < len(list_p459):\n    c = list_p459[idx_fkaw]\n    print(\"\".join(c))\n    idx_fkaw = idx_fkaw + (87 + -86)\n", "id": "ConstantUnfoldding_sample_from_codeforces_445_A_to_60", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = [(23 + -23)] * N\n    queue = deque()\n    K = - (73 + -72)\n    node2color = [- (64 + -63) for _ in range(N)]\n    queue.append(v)\n    visited[v] = (85 + -84)\n    while queue:\n        q = queue.popleft()\n        color = (95 + -95)\n        idx_ymdv = (32 + -32)\n        list_d4i6 = G[q]\n        while idx_ymdv < len(list_d4i6):\n            nex = list_d4i6[idx_ymdv]\n            if visited[nex]:\n                continue\n            visited[nex] = (17 + -16)\n            color += (27 + -26)\n            if color == node2color[q]:\n                color += (6 + -5)\n            node2color[nex] = color\n            E[(min(q, nex), max(q, nex))] = color\n            queue.append(nex)\n            idx_ymdv = idx_ymdv + (66 + -65)\n        K = max(K, color)\n    return K\n\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    idx_0678 = (43 + -43)\n    list_m5rl = range(N - (32 + -31))\n    while idx_0678 < len(list_m5rl):\n        i = list_m5rl[idx_0678]\n        a, b = map(lambda x: int(x) - (52 + -51), input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = (59 + -59)\n        idx_0678 = idx_0678 + (92 + -91)\n    K = bfs((34 + -34), N, G, E)\n    print(K)\n    idx_at1e = (92 + -92)\n    list_1djm = E.values()\n    while idx_at1e < len(list_1djm):\n        value = list_1djm[idx_at1e]\n        print(value)\n        idx_at1e = idx_at1e + (24 + -23)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC146_D_to_61", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = (15 + -5) ** (6 + 3)\nidx_uwyc = (12 + -12)\nlist_mdny = range((5 + -3) ** D)\nwhile idx_uwyc < len(list_mdny):\n    i = list_mdny[idx_uwyc]\n    score = (37 + -37)\n    problem = (64 + -64)\n    idx_7jsi = (7 + -7)\n    list_lbys = range(D)\n    while idx_7jsi < len(list_lbys):\n        j = list_lbys[idx_7jsi]\n        if (i >> j) & (16 + -15):\n            score += (81 + 19) * (j + (40 + -39)) * PC[j][(78 + -78)] + PC[j][(48 + -47)]\n            problem += PC[j][(45 + -45)]\n        idx_7jsi = idx_7jsi + (31 + -30)\n    if score > G:\n        continue\n    left = G - score\n    idx_t3n7 = (28 + -28)\n    list_kt7o = range(D)\n    while idx_t3n7 < len(list_kt7o):\n        j = list_kt7o[idx_t3n7]\n        if (i >> j) & (33 + -32):\n            continue\n        if left > (25 + 75) * (j + (21 + -20)) * PC[j][(44 + -44)] + PC[j][(36 + -35)]:\n            pass\n        else:\n            tmp = (left + ((85 + 15) * (j + (95 + -94))) - (42 + -41)) // ((47 + 53) * (j + (5 + -4)))\n            ans = min(ans, problem + min(tmp, PC[j][(10 + -10)]))\n        idx_t3n7 = idx_t3n7 + (28 + -27)\n    idx_uwyc = idx_uwyc + (23 + -22)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC104_C_to_62", "old_id": "atcoder_ABC104_C"}
{"code": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = (51 + -51)\nh2 = (83 + -83)\nx = (59 + -59)\nidx_jwtl = (27 + -27)\nlist_zfk6 = range(n)\nwhile idx_jwtl < len(list_zfk6):\n    i = list_zfk6[idx_jwtl]\n    if number[i] != (80 + -76) and number[i] != (2 + 5):\n        print(\"NO\")\n        x += (60 + -59)\n        break\n    if i < n // (51 + -49):\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_jwtl = idx_jwtl + (49 + -48)\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_codeforces_146_A_to_63", "old_id": "codeforces_146_A"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = (45 + -45)\ny = (88 + -88)\nz = (48 + -48)\nidx_w79n = (64 + -64)\nlist_c54w = a\nwhile idx_w79n < len(list_c54w):\n    i = list_c54w[idx_w79n]\n    x += i\n    idx_w79n = idx_w79n + (77 + -76)\nidx_epqt = (78 + -78)\nlist_9ip1 = b\nwhile idx_epqt < len(list_9ip1):\n    i = list_9ip1[idx_epqt]\n    y += i\n    idx_epqt = idx_epqt + (2 + -1)\nidx_b6i2 = (83 + -83)\nlist_94v3 = c\nwhile idx_b6i2 < len(list_94v3):\n    i = list_94v3[idx_b6i2]\n    z += i\n    idx_b6i2 = idx_b6i2 + (33 + -32)\nprint(abs(x - y))\nprint(abs(y - z))\n", "id": "ConstantUnfoldding_sample_from_codeforces_519_B_to_64", "old_id": "codeforces_519_B"}
{"code": "pya = int(input())\narre = []\nwhile pya:\n    pya -= (96 + -95)\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[(10 + -10)].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [(85 + -85) for i in range(len(oString))]\nsetcito = set()\nidx_3tfd = (8 + -8)\nlist_p5vx = arre\nwhile idx_3tfd < len(list_p5vx):\n    x = list_p5vx[idx_3tfd]\n    if lowString.find(x) >= (52 + -52):\n        wat = (53 + -53)\n        while True:\n            index = lowString.find(x, wat)\n            if index < (48 + -48):\n                break\n            idx_ymzb = (91 + -91)\n            list_yls0 = range(index, index + len(x))\n            while idx_ymzb < len(list_yls0):\n                i = list_yls0[idx_ymzb]\n                setcito.add(i)\n                idx_ymzb = idx_ymzb + (52 + -51)\n            wat = index + (24 + -23)\n    idx_3tfd = idx_3tfd + (39 + -38)\noString = list(oString)\nidx_dx5p = (82 + -82)\nlist_8uki = setcito\nwhile idx_dx5p < len(list_8uki):\n    i = list_8uki[idx_dx5p]\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\n    idx_dx5p = idx_dx5p + (26 + -25)\nidx_42pz = (99 + -99)\nlist_ca54 = oString\nwhile idx_42pz < len(list_ca54):\n    x = list_ca54[idx_42pz]\n    print(x, end=\"\")\n    idx_42pz = idx_42pz + (79 + -78)\nprint()\n", "id": "ConstantUnfoldding_sample_from_codeforces_95_A_to_65", "old_id": "codeforces_95_A"}
{"code": "n = int(input())\ns = []\nidx_tobg = (12 + -12)\nlist_lgps = range(n)\nwhile idx_tobg < len(list_lgps):\n    i = list_lgps[idx_tobg]\n    k = input()\n    s.append(k)\n    idx_tobg = idx_tobg + (39 + -38)\nflag = (4 + -4)\nd1 = []\nd2 = []\nrem = set()\nidx_9vct = (55 + -55)\nlist_irut = range(n)\nwhile idx_9vct < len(list_irut):\n    i = list_irut[idx_9vct]\n    idx_rth4 = (5 + -5)\n    list_n2s6 = range(n)\n    while idx_rth4 < len(list_n2s6):\n        j = list_n2s6[idx_rth4]\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - (59 + -58)):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - (1 + 0)):\n            rem.add(s[i][j])\n        idx_rth4 = idx_rth4 + (52 + -51)\n    idx_9vct = idx_9vct + (26 + -25)\nif (len(rem) != (70 + -69)):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != (79 + -78)):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_codeforces_404_A_to_66", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [(61 + -61)] * (N + (33 + -32))\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = (4 + -4)\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += (77 + -76)\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + (89 + -88)) // (96 + -92)\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [(27 + -27)]))\nidx_8oau = (29 + -29)\nlist_mq47 = list(enumerate(_a))\nwhile idx_8oau < len(list_mq47):\n    i, x = list_mq47[idx_8oau]\n    d[x] = i\n    idx_8oau = idx_8oau + (88 + -87)\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [(84 + -84)] + [(y >= X) * (18 + -16) - (98 + -97) for y in a]\n    idx_wqci = (77 + -77)\n    list_4he2 = range(n)\n    while idx_wqci < len(list_4he2):\n        i = list_4he2[idx_wqci]\n        b[i + (90 + -89)] += b[i]\n        idx_wqci = idx_wqci + (43 + -42)\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + (31 + -29))\n    ans = (81 + -81)\n    idx_zld4 = (34 + -34)\n    list_7txv = b\n    while idx_zld4 < len(list_7txv):\n        x = list_7txv[idx_zld4]\n        ans += bit.bitsum(x + (43 + -42))\n        bit.bitadd(x, (5 + -4))\n        idx_zld4 = idx_zld4 + (50 + -49)\n    return ans >= m\n\n\nt = [len(_a), (38 + -38)]\nwhile t[(3 + -3)] - t[(81 + -80)] > (60 + -59):\n    mid = (t[(4 + -4)] + t[(55 + -54)]) // (3 + -1)\n    t[check(mid)] = mid\nprint(_a[t[(14 + -13)]])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_D_to_67", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [(23 + -23)] * n] for _ in [(85 + -85)] * n]\n    idx_k26i = (32 + -32)\n    list_htf4 = range(n)\n    while idx_k26i < len(list_htf4):\n        i = list_htf4[idx_k26i]\n        m = a[i]\n        idx_k29z = (3 + -3)\n        list_uko5 = range(n)\n        while idx_k29z < len(list_uko5):\n            j = list_uko5[idx_k29z]\n            k = i - j\n            if k < (52 + -52):\n                k += n\n            m = min(m, a[k])\n            b[j][i] = m\n            idx_k29z = idx_k29z + (78 + -77)\n        idx_k26i = idx_k26i + (57 + -56)\n    m = (20 + -10) ** (100 + -85)\n    idx_59ip = (10 + -10)\n    list_eb09 = list(enumerate(b))\n    while idx_59ip < len(list_eb09):\n        i, j = list_eb09[idx_59ip]\n        m = min(m, sum(j) + x * i)\n        idx_59ip = idx_59ip + (28 + -27)\n    print(m)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_B_to_68", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    idx_4qw0 = (25 + -25)\n    list_c9t1 = range(- (98 + 902), (54 + 947))\n    while idx_4qw0 < len(list_c9t1):\n        X = list_c9t1[idx_4qw0]\n        if A * (X ** n) == B:\n            return X\n        idx_4qw0 = idx_4qw0 + (73 + -72)\n    return \"No solution\"\n\n\n[A, B, n] = input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_30_A_to_69", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[(74 + -74)]] + [j for i, j in zip(A, A[(89 + -88):]) if i >= j]\nN = len(A)\n\n\ndef cut(array, index):\n    if index < (46 + -45):\n        return []\n    if index <= array[(48 + -48)][(9 + -9)]:\n        return [(index, array[(93 + -93)][(29 + -28)])]\n    idx_l2o6 = (26 + -26)\n    list_v8xc = range(len(array) - (13 + -12), (17 + -17), - (78 + -77))\n    while idx_l2o6 < len(list_v8xc):\n        _ = list_v8xc[idx_l2o6]\n        if array[_ - (36 + -35)][(45 + -45)] < index:\n            return array[: _] + [(index, array[_][(91 + -90)])]\n        idx_l2o6 = idx_l2o6 + (96 + -95)\n\n\ndef is_possible(K):\n    dp = [(A[(42 + -42)], (55 + -55))]\n    idx_80md = (34 + -34)\n    list_s5kf = A[(53 + -52):]\n    while idx_80md < len(list_s5kf):\n        a = list_s5kf[idx_80md]\n        if a <= dp[- (46 + -45)][(85 + -85)]:\n            dp = cut(dp, a)\n        else:\n            dp += [(a, (30 + -30))]\n        is_added = False\n        idx_qs7c = (10 + -10)\n        list_xqpe = range(len(dp) - (59 + -58), - (29 + -28), - (81 + -80))\n        while idx_qs7c < len(list_xqpe):\n            j = list_xqpe[idx_qs7c]\n            if dp[j][(36 + -35)] < K - (82 + -81):\n                dp = cut(dp, dp[j][(2 + -2)] - (66 + -65)) + [(dp[j][(77 + -77)], dp[j][(41 + -40)] + (25 + -24))]\n                if dp[- (46 + -45)][(74 + -74)] < a:\n                    dp += [(a, (87 + -87))]\n                is_added = True\n                break\n            idx_qs7c = idx_qs7c + (39 + -38)\n        if not is_added:\n            return False\n        idx_80md = idx_80md + (48 + -47)\n    return True\n\n\ndef bis(x, y):\n    if y == x + (90 + -89):\n        return y\n    elif is_possible((x + y) // (26 + -24)):\n        return bis(x, (x + y) // (85 + -83))\n    else:\n        return bis((x + y) // (45 + -43), y)\n\n\nprint(bis((42 + -42), N))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC029_C_to_70", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = (71 + -71)\nif a[(71 + -71)] > x:\n    print((35 + -35))\n    exit()\nidx_0okj = (53 + -53)\nlist_8vse = a\nwhile idx_0okj < len(list_8vse):\n    i = list_8vse[idx_0okj]\n    if i > x:\n        x = (12 + -12)\n        break\n    x -= i\n    ans += (49 + -48)\n    idx_0okj = idx_0okj + (25 + -24)\nif x != (95 + -95):\n    ans -= (58 + -57)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC027_A_to_71", "old_id": "atcoder_AGC027_A"}
{"code": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nMOD = (94 + -84) ** (74 + -65) + (26 + -19)\nN = int(input())\nM = (28 + -18) ** (42 + -36)\nA = np.array(input().split(), dtype=np.int64)\nNsq = (62 + -52) ** (57 + -54)\nfact = np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[(1 + -1), (7 + -7)] = (39 + -38)\nidx_lamd = (17 + -17)\nlist_2um4 = range((66 + -65), Nsq)\nwhile idx_lamd < len(list_2um4):\n    n = list_2um4[idx_lamd]\n    fact[:, n] *= fact[:, n - (50 + -49)]\n    fact[:, n] %= MOD\n    idx_lamd = idx_lamd + (10 + -9)\nidx_2mka = (38 + -38)\nlist_beyx = range((71 + -70), Nsq)\nwhile idx_2mka < len(list_beyx):\n    n = list_beyx[idx_2mka]\n    fact[n] *= fact[n - (75 + -74), - (17 + -16)]\n    fact[n] %= MOD\n    idx_2mka = idx_2mka + (42 + -41)\nfact = fact.ravel()\nj = np.arange(N)\ninv = np.array([pow(i + (42 + -41), MOD - (50 + -48), MOD) for i in range(N)])\ninv = np.cumsum(inv) % MOD\ntemp = inv[j] + inv[N - (61 + -60) - j] - (81 + -80)\nans = (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_B_to_72", "old_id": "atcoder_AGC028_B"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit((86 + 99914))\nmod = (73 + 999999934)\nk = ii1()\nt = (19 + -19)\nidx_zhx0 = (33 + -33)\nlist_2cpd = range((29 + -28), k + (32 + -31))\nwhile idx_zhx0 < len(list_2cpd):\n    i = list_2cpd[idx_zhx0]\n    t = (t % k) * (49 + -39) + (92 + -85)\n    if t % k == (73 + -73):\n        print(i)\n        break\n    idx_zhx0 = idx_zhx0 + (48 + -47)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_C_to_73", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = (79 + -77)\nidx_u6a4 = (80 + -80)\nlist_iy8g = w\nwhile idx_u6a4 < len(list_iy8g):\n    i = list_iy8g[idx_u6a4]\n    if i == (69 + -68):\n        print(c)\n    elif i % (96 + -94) == (7 + -7):\n        c = (39 + -36) - c\n        print(c)\n    else:\n        print(c)\n    idx_u6a4 = idx_u6a4 + (60 + -59)\n", "id": "ConstantUnfoldding_sample_from_codeforces_705_B_to_74", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit((65 + -55) ** (90 + -81))\nINF = float('inf')\nmod = (45 + -35) ** (83 + -74) + (1 + 6)\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [(20 + -20)] * (61 + -56)\nidx_2ybw = (64 + -64)\nlist_pz0f = S\nwhile idx_2ybw < len(list_pz0f):\n    s = list_pz0f[idx_2ybw]\n    if s[(98 + -98)].upper() in march:\n        march_lis[march.index(s[(3 + -3)].upper())] += (5 + -4)\n    idx_2ybw = idx_2ybw + (51 + -50)\nans = (84 + -84)\nidx_6zxd = (89 + -89)\nlist_7soz = combinations(march_lis, (56 + -53))\nwhile idx_6zxd < len(list_7soz):\n    x, y, z = list_7soz[idx_6zxd]\n    ans += x * y * z\n    idx_6zxd = idx_6zxd + (95 + -94)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC089_C_to_75", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = input().split()\nif (14 + -13) <= int(k) and int(w) <= (27 + 973):\n    total = (88 + -88)\n    idx_jvm6 = (55 + -55)\n    list_d12k = range((93 + -92), int(w) + (48 + -47))\n    while idx_jvm6 < len(list_d12k):\n        i = list_d12k[idx_jvm6]\n        total += i * int(k)\n        idx_jvm6 = idx_jvm6 + (56 + -55)\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print((58 + -58))\n", "id": "ConstantUnfoldding_sample_from_codeforces_546_A_to_76", "old_id": "codeforces_546_A"}
{"code": "n = int(input())\nq = []\ncount = (50 + -50)\nidx_xfyi = (55 + -55)\nlist_1uax = range(n)\nwhile idx_xfyi < len(list_1uax):\n    i = list_1uax[idx_xfyi]\n    a = input().split()\n    q.append(a)\n    idx_xfyi = idx_xfyi + (9 + -8)\nidx_k3m1 = (64 + -64)\nlist_ipun = q\nwhile idx_k3m1 < len(list_ipun):\n    j = list_ipun[idx_k3m1]\n    idx_qvcf = (24 + -24)\n    list_cjdt = q\n    while idx_qvcf < len(list_cjdt):\n        k = list_cjdt[idx_qvcf]\n        if k == j:\n            continue\n        elif j[(66 + -66)] == k[len(k) - (88 + -87)]:\n            count += (28 + -27)\n        else:\n            continue\n        idx_qvcf = idx_qvcf + (24 + -23)\n    idx_k3m1 = idx_k3m1 + (13 + -12)\nprint(count)\n", "id": "ConstantUnfoldding_sample_from_codeforces_268_A_to_77", "old_id": "codeforces_268_A"}
{"code": "t = []\nidx_4blh = (94 + -94)\nlist_xitl = range((55 + -51))\nwhile idx_4blh < len(list_xitl):\n    i = list_xitl[idx_4blh]\n    l = list(map(str, input()))\n    t.append(l)\n    idx_4blh = idx_4blh + (47 + -46)\nblack = (29 + -29)\nwhite = (24 + -24)\ncorrect = (50 + -50)\nidx_r503 = (89 + -89)\nlist_8792 = range((75 + -72))\nwhile idx_r503 < len(list_8792):\n    i = list_8792[idx_r503]\n    idx_7nde = (46 + -46)\n    list_cj1s = range((92 + -89))\n    while idx_7nde < len(list_cj1s):\n        j = list_cj1s[idx_7nde]\n        if t[i][j] == '#':\n            black += (77 + -76)\n        else:\n            white += (48 + -47)\n        if t[i][j + (19 + -18)] == '#':\n            black += (69 + -68)\n        else:\n            white += (86 + -85)\n        if t[i + (21 + -20)][j] == '#':\n            black += (30 + -29)\n        else:\n            white += (33 + -32)\n        if t[i + (71 + -70)][j + (32 + -31)] == '#':\n            black += (84 + -83)\n        else:\n            white += (10 + -9)\n        if (black == (11 + -11) or black == (26 + -23) or white == (73 + -73) or white == (56 + -53) or white == (63 + -59) or black == (98 + -94)):\n            correct = (5 + -4)\n            break\n        black = (42 + -42)\n        white = (29 + -29)\n        idx_7nde = idx_7nde + (10 + -9)\n    idx_r503 = idx_r503 + (55 + -54)\nif correct == (11 + -10):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_287_A_to_78", "old_id": "codeforces_287_A"}
{"code": "from operator import itemgetter\nN = int(input())\nA = [(i + (41 + -40), int(x)) for i, x in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter((24 + -23)))\nA__ = [a[(62 + -62)] for a in A_]\nidx_tocp = (31 + -31)\nlist_4fvg = A__[: - (46 + -45)]\nwhile idx_tocp < len(list_4fvg):\n    i = list_4fvg[idx_tocp]\n    print(i, end=' ')\n    idx_tocp = idx_tocp + (95 + -94)\nprint(A__[- (76 + -75)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC142_C_to_79", "old_id": "atcoder_ABC142_C"}
{"code": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == (74 + -73):\n        print((26 + -26))\n        return\n    a = [(37 + -37)] * (N + (22 + -21))\n    idx_zio0 = (58 + -58)\n    list_hnlz = list(enumerate(P))\n    while idx_zio0 < len(list_hnlz):\n        i, p = list_hnlz[idx_zio0]\n        a[p] = i\n        idx_zio0 = idx_zio0 + (99 + -98)\n    tmp = (93 + -92)\n    max_len = (97 + -96)\n    idx_y3wb = (15 + -15)\n    list_n6jh = range((88 + -87), N)\n    while idx_y3wb < len(list_n6jh):\n        i = list_n6jh[idx_y3wb]\n        if a[i] < a[i + (4 + -3)]:\n            tmp += (14 + -13)\n            max_len = max(max_len, tmp)\n        else:\n            tmp = (33 + -32)\n        idx_y3wb = idx_y3wb + (69 + -68)\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = (40 + -40)\n    ans = (14 + -14)\n    idx_sl75 = (93 + -93)\n    list_56dp = list(enumerate(P))\n    while idx_sl75 < len(list_56dp):\n        i, p = list_56dp[idx_sl75]\n        if i == (37 + -37) or P[i - (26 + -25)] + (60 + -59) == p:\n            tmp += (94 + -93)\n        else:\n            ans = max(ans, tmp)\n            tmp = (29 + -28)\n        idx_sl75 = idx_sl75 + (95 + -94)\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC024_B_to_80", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = map(int, input().strip().split())\nout = [(4 + -4) for _ in range(n)]\ncomp = [i + (54 + -52) for i in range(n)]\nidx_8ti9 = (100 + -100)\nlist_eufq = range(m)\nwhile idx_8ti9 < len(list_eufq):\n    _ = list_eufq[idx_8ti9]\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - (10 + -9)]\n        if out[t - (44 + -43)] == (60 + -60) and t != x:\n            out[t - (58 + -57)] = x\n        comp[t - (58 + -57)] = r + (72 + -71) if t >= x else x\n        t = next_val\n    idx_8ti9 = idx_8ti9 + (82 + -81)\nprint(* out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_356_A_to_81", "old_id": "codeforces_356_A"}
{"code": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = (29 + -29), (56 + -56), (36 + -36), (49 + -49)\nT_L, T_R, T_U, T_D = (77 + -77), (12 + -12), (74 + -74), (52 + -52)\nidx_7ilb = (85 + -85)\nlist_dufj = range(N)\nwhile idx_7ilb < len(list_dufj):\n    x = list_dufj[idx_7ilb]\n    if S[x] == 'L':\n        S_L += (51 + -50)\n        if S_L - T_R - s_c == (13 + -13):\n            Judge = True\n    elif S[x] == 'R':\n        S_R += (14 + -13)\n        if s_c + (S_R - T_L) == W + (47 + -46):\n            Judge = True\n    elif S[x] == 'U':\n        S_U += (99 + -98)\n        if S_U - T_D - s_r == (46 + -46):\n            Judge = True\n    elif S[x] == 'D':\n        S_D += (45 + -44)\n        if s_r + (S_D - T_U) == H + (51 + -50):\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != (62 + -61):\n            T_L += (63 + -62)\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += (27 + -26)\n    if T[x] == 'U':\n        if S_D - T_U + s_r != (83 + -82):\n            T_U += (28 + -27)\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += (19 + -18)\n    idx_7ilb = idx_7ilb + (27 + -26)\nif Judge:\n    print('NO')\nelse:\n    print('YES')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_B_to_82", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((15 + -5) ** (95 + -88))\n\n\ndef input():\n    return sys.stdin.readline()[: - (2 + -1)]\n\n\nmod = (74 + -64) ** (92 + -83) + (24 + -17)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= (63 + -63):\n        return [[]] * num\n    elif num == (44 + -43):\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > (33 + -33)) - (x < (40 + -40))\n\n\nN = I()\na = III()\nmax_val = (12 + -12)\nmax_sign = (27 + -27)\nmax_index = - (100 + -99)\nidx_9x5d = (90 + -90)\nlist_9ade = list(enumerate(a))\nwhile idx_9x5d < len(list_9ade):\n    i, a0 = list_9ade[idx_9x5d]\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\n    idx_9x5d = idx_9x5d + (80 + -79)\nif max_sign == (99 + -99):\n    print((71 + -71))\nelif max_sign == (19 + -18):\n    print((85 + -83) * N - (33 + -32))\n    idx_4brw = (92 + -92)\n    list_89e4 = range(N)\n    while idx_4brw < len(list_89e4):\n        i = list_89e4[idx_4brw]\n        print(max_index + (31 + -30), i + (13 + -12))\n        idx_4brw = idx_4brw + (73 + -72)\n    idx_lazm = (100 + -100)\n    list_3fwe = range(N - (39 + -38))\n    while idx_lazm < len(list_3fwe):\n        i = list_3fwe[idx_lazm]\n        print(i + (67 + -66), i + (54 + -52))\n        idx_lazm = idx_lazm + (42 + -41)\nelse:\n    print((75 + -73) * N - (72 + -71))\n    idx_w86g = (46 + -46)\n    list_oj6h = range(N)\n    while idx_w86g < len(list_oj6h):\n        i = list_oj6h[idx_w86g]\n        print(max_index + (20 + -19), i + (68 + -67))\n        idx_w86g = idx_w86g + (59 + -58)\n    idx_gtfh = (65 + -65)\n    list_9l7t = range((30 + -29), N)[:: - (83 + -82)]\n    while idx_gtfh < len(list_9l7t):\n        i = list_9l7t[idx_gtfh]\n        print(i + (41 + -40), i)\n        idx_gtfh = idx_gtfh + (27 + -26)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC086_B_to_83", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = map(int, input().split())\nx = []\nm = (71 + -71)\nq = (96 + -96)\nx = input().split()\nidx_3s79 = (43 + -43)\nlist_u93s = range(len(x))\nwhile idx_3s79 < len(list_u93s):\n    i = list_u93s[idx_3s79]\n    x[i] = int(x[i])\n    idx_3s79 = idx_3s79 + (17 + -16)\nidx_escz = (70 + -70)\nlist_4jtr = range(len(x) - (18 + -17))\nwhile idx_escz < len(list_4jtr):\n    a = list_4jtr[idx_escz]\n    if x[a] >= x[a + (51 + -50)]:\n        q = int((x[a] - x[a + (92 + -91)]) / d + (37 + -36))\n        m = m + q\n        x[a + (5 + -4)] = x[a + (4 + -3)] + q * d\n    idx_escz = idx_escz + (92 + -91)\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_codeforces_11_A_to_84", "old_id": "codeforces_11_A"}
{"code": "N = int(input())\n\n\ndef aaa(n):\n    if int(n) > N:\n        return (5 + -5)\n    ans = (53 + -52) if set(str(int(n))) == {'7', '5', '3'} else (47 + -47)\n    idx_hs2o = (6 + -6)\n    list_i6uq = '753'\n    while idx_hs2o < len(list_i6uq):\n        i = list_i6uq[idx_hs2o]\n        ans += aaa(n + i)\n        idx_hs2o = idx_hs2o + (65 + -64)\n    return ans\n\n\nprint(aaa('0'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC114_C_to_85", "old_id": "atcoder_ABC114_C"}
{"code": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t:\n    print(n)\nelse:\n    cnt = (60 + -60)\n    idx_qygi = (75 + -75)\n    list_qpvf = range(n)\n    while idx_qygi < len(list_qpvf):\n        i = list_qpvf[idx_qygi]\n        idx_ziqc = (93 + -93)\n        list_py9e = range(n - i)\n        while idx_ziqc < len(list_py9e):\n            j = list_py9e[idx_ziqc]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - (88 + -87):\n                cnt = n - i\n            idx_ziqc = idx_ziqc + (59 + -58)\n        idx_qygi = idx_qygi + (82 + -81)\n    print((65 + -63) * n - cnt)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_A_to_86", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while (38 + -37):\n        data = list(input().split(' '))\n        idx_1f74 = (70 + -70)\n        list_p6u4 = data\n        while idx_1f74 < len(list_p6u4):\n            number = list_p6u4[idx_1f74]\n            if len(number) > (52 + -52):\n                yield (number)\n            idx_1f74 = idx_1f74 + (52 + -51)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + (87 + -80))\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = (97 + -97)\nidx_qiyd = (43 + -43)\nlist_c2mz = range((33 + -33), N - (63 + -62))\nwhile idx_qiyd < len(list_c2mz):\n    i = list_c2mz[idx_qiyd]\n    if S[i] != S[i + (11 + -10)]:\n        seg_cnt += (3 + -2)\n    idx_qiyd = idx_qiyd + (20 + -19)\ncur_happy = N - (41 + -40) - seg_cnt\nif (9 + -7) * K >= seg_cnt:\n    ans = N - (84 + -83)\nelse:\n    ans = cur_happy + (47 + -45) * K\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_D_to_87", "old_id": "atcoder_ABC140_D"}
{"code": "from itertools import accumulate\nn, q = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + (7 + -6) if s[i - (8 + -7): i + (82 + -81)] == 'AC' else total\n\n\ncumsum = list(accumulate([(50 + -50)] + list(range((42 + -41), n)), count))\nidx_w73u = (28 + -28)\nlist_bd3a = problems\nwhile idx_w73u < len(list_bd3a):\n    l, r = list_bd3a[idx_w73u]\n    print(cumsum[r - (18 + -17)] - cumsum[l - (55 + -54)])\n    idx_w73u = idx_w73u + (30 + -29)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC122_C_to_88", "old_id": "atcoder_ABC122_C"}
{"code": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nidx_yv3r = (37 + -37)\nlist_ln3m = range(len(lista))\nwhile idx_yv3r < len(list_ln3m):\n    i = list_ln3m[idx_yv3r]\n    if i == (44 + -44):\n        print(f\"{lista[i+(1 + 0)] - lista[i]} {lista[len(lista)-(29 + -28)] - lista[i]}\")\n        continue\n    elif i == len(lista) - (28 + -27):\n        print(\n            f\"{lista[len(lista)-(34 + -33)] - lista[len(lista)-(52 + -50)]} {lista[len(lista)-(39 + -38)] - lista[(61 + -61)]}\")\n        continue\n    elif lista[i] - lista[i - (52 + -51)] > lista[i + (63 + -62)] - lista[i]:\n        print(lista[i + (100 + -99)] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - (77 + -76)], end=\" \")\n    if lista[len(lista) - (60 + -59)] - lista[i] > lista[i] - lista[(100 + -100)]:\n        print(lista[len(lista) - (34 + -33)] - lista[i])\n    else:\n        print(lista[i] - lista[(3 + -3)])\n    idx_yv3r = idx_yv3r + (60 + -59)\n", "id": "ConstantUnfoldding_sample_from_codeforces_567_A_to_89", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nidx_0e85 = (58 + -58)\nlist_rktf = range(n)\nwhile idx_0e85 < len(list_rktf):\n    i = list_rktf[idx_0e85]\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_0e85 = idx_0e85 + (59 + -58)\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if r >= - d:\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC137_D_to_90", "old_id": "atcoder_ABC137_D"}
{"code": "y = int(input())\narr = [int(i) for i in input().split()]\nidx_5q7t = (68 + -68)\nlist_3ohf = range(len(arr))\nwhile idx_5q7t < len(list_3ohf):\n    i = list_3ohf[idx_5q7t]\n    idx_yo8g = (55 + -55)\n    list_khu8 = range(len(arr))\n    while idx_yo8g < len(list_khu8):\n        j = list_khu8[idx_yo8g]\n        if i == j:\n            continue\n        idx_h379 = (96 + -96)\n        list_9pg6 = range(len(arr))\n        while idx_h379 < len(list_9pg6):\n            k = list_9pg6[idx_h379]\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j]:\n                print(k + (80 + -79), j + (28 + -27), i + (77 + -76))\n                exit()\n            idx_h379 = idx_h379 + (47 + -46)\n        idx_yo8g = idx_yo8g + (82 + -81)\n    idx_5q7t = idx_5q7t + (56 + -55)\nprint(- (22 + -21))\n", "id": "ConstantUnfoldding_sample_from_codeforces_31_A_to_91", "old_id": "codeforces_31_A"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += (23 + -22)\n\n\nn, * a = map(int, open((85 + -85)).read().split())\n* par, = range(n)\nrank = [(73 + -72)] * n\nsize = [(59 + -58)] * n\nb = [(71 + -71)] * n\nidx_2j73 = (46 + -46)\nlist_bvyp = list(enumerate(a))\nwhile idx_2j73 < len(list_bvyp):\n    i, t = list_bvyp[idx_2j73]\n    b[t - (80 + -79)] = i\n    idx_2j73 = idx_2j73 + (67 + -66)\nc = (3 + -3)\nidx_90eh = (28 + -28)\nlist_e5q1 = b[:: - (96 + -95)]\nwhile idx_90eh < len(list_e5q1):\n    k = list_e5q1[idx_90eh]\n    l = r = (15 + -14)\n    if k > (48 + -48) and a[k - (94 + -93)] > a[k]:\n        l += size[root(k - (6 + -5))]\n        unite(k - (84 + -83), k)\n    if k + (91 + -90) < n and a[k + (58 + -57)] > a[k]:\n        r += size[root(k + (9 + -8))]\n        unite(k + (42 + -41), k)\n    c += l * r * a[k]\n    idx_90eh = idx_90eh + (81 + -80)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC005_B_to_92", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = []\nidx_f9we = (13 + -13)\nlist_yhrc = range((12 + -7))\nwhile idx_f9we < len(list_yhrc):\n    _ = list_yhrc[idx_f9we]\n    m = input()\n    e = int(m[- (67 + -66)])\n    if e == (47 + -47):\n        e = (30 + -20)\n    menu.append([int(m), e])\n    idx_f9we = idx_f9we + (90 + -89)\nmenu.sort(key=lambda x: x[(12 + -11)])\nans = (43 + -43)\nidx_qzy3 = (17 + -17)\nlist_z5kc = menu[(32 + -31):]\nwhile idx_qzy3 < len(list_z5kc):\n    m = list_z5kc[idx_qzy3]\n    ans += math.ceil(m[(45 + -45)] / (31 + -21)) * (35 + -25)\n    idx_qzy3 = idx_qzy3 + (32 + -31)\nprint(ans + menu[(66 + -66)][(51 + -51)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC123_B_to_93", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = map(int, input().split())\nx = (75 + -75)\nif k <= max(n ** (5 + -3) // (2 + 0), n ** (34 + -32) - (n ** (98 + -96) // (93 + -91))):\n    print('YES')\n    idx_z2br = (36 + -36)\n    list_g4mz = range(n)\n    while idx_z2br < len(list_g4mz):\n        i = list_g4mz[idx_z2br]\n        idx_e6zn = (64 + -64)\n        list_ap9i = range(n)\n        while idx_e6zn < len(list_ap9i):\n            j = list_ap9i[idx_e6zn]\n            if i % (15 + -13) == j % (63 + -61) and x < k:\n                print('L', end='')\n                x += (86 + -85)\n            else:\n                print('S', end='')\n            idx_e6zn = idx_e6zn + (53 + -52)\n        print()\n        idx_z2br = idx_z2br + (36 + -35)\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_codeforces_544_B_to_94", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = (13 + -13)\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        idx_ilm7 = (8 + -8)\n        list_bc61 = range(self.t)\n        while idx_ilm7 < len(list_bc61):\n            _ = list_bc61[idx_ilm7]\n            self.queries.append([int(x) for x in input().split(\" \")])\n            idx_ilm7 = idx_ilm7 + (45 + -44)\n\n    def process_task(self):\n        res = []\n        idx_c1j4 = (63 + -63)\n        list_ysf0 = self.queries\n        while idx_c1j4 < len(list_ysf0):\n            query = list_ysf0[idx_c1j4]\n            k = query[(48 + -48)] // query[(69 + -68)]\n            res.append(\"Yes\" if k * query[(77 + -75)] >= query[(34 + -34)] else \"No\")\n            idx_c1j4 = idx_c1j4 + (26 + -25)\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "ConstantUnfoldding_sample_from_codeforces_397_B_to_95", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = (55 + -54)\nl.sort()\nc = (93 + -93)\nidx_c8us = (49 + -49)\nlist_ktcs = l\nwhile idx_c8us < len(list_ktcs):\n    i = list_ktcs[idx_c8us]\n    if i > c:\n        c += (22 + -21)\n    idx_c8us = idx_c8us + (73 + -72)\nprint(c + (97 + -96))\n", "id": "ConstantUnfoldding_sample_from_codeforces_682_B_to_96", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= (84 + -83)\n    if T == U:\n        B -= (48 + -47)\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_dwmv = (9 + -9)\n        list_b1cs = sys.stdin\n        while idx_dwmv < len(list_b1cs):\n            line = list_b1cs[idx_dwmv]\n            idx_y6q3 = (72 + -72)\n            list_c6fk = line.split()\n            while idx_y6q3 < len(list_c6fk):\n                word = list_c6fk[idx_y6q3]\n                yield word\n                idx_y6q3 = idx_y6q3 + (57 + -56)\n            idx_dwmv = idx_dwmv + (37 + -36)\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC154_A_to_97", "old_id": "atcoder_ABC154_A"}
{"code": "import numpy as np\nh, w = map(int, input().split())\ngraph = [[(61 + -61) if i == '#' else float('inf')\n          for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nidx_cgjt = (96 + -96)\nlist_lpif = range(w - (48 + -47))\nwhile idx_cgjt < len(list_lpif):\n    x = list_lpif[idx_cgjt]\n    graph[:, x + (26 + -25)] = np.minimum(graph[:, x] + (43 + -42), graph[:, x + (50 + -49)])\n    idx_cgjt = idx_cgjt + (99 + -98)\nidx_y9p8 = (48 + -48)\nlist_u65b = range(w - (22 + -21), (57 + -57), - (47 + -46))\nwhile idx_y9p8 < len(list_u65b):\n    x = list_u65b[idx_y9p8]\n    graph[:, x - (33 + -32)] = np.minimum(graph[:, x] + (70 + -69), graph[:, x - (93 + -92)])\n    idx_y9p8 = idx_y9p8 + (17 + -16)\nidx_0yoa = (29 + -29)\nlist_j0g1 = range(h - (96 + -95))\nwhile idx_0yoa < len(list_j0g1):\n    y = list_j0g1[idx_0yoa]\n    graph[y + (21 + -20), :] = np.minimum(graph[y, :] + (43 + -42), graph[y + (86 + -85), :])\n    idx_0yoa = idx_0yoa + (92 + -91)\nidx_0ni2 = (1 + -1)\nlist_0u1y = range(h - (16 + -15), (18 + -18), - (26 + -25))\nwhile idx_0ni2 < len(list_0u1y):\n    y = list_0u1y[idx_0ni2]\n    graph[y - (17 + -16), :] = np.minimum(graph[y, :] + (72 + -71), graph[y - (65 + -64), :])\n    idx_0ni2 = idx_0ni2 + (7 + -6)\nprint(int(np.max(graph)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC033_A_to_98", "old_id": "atcoder_AGC033_A"}
{"code": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [(49 + -49)] * (n + (97 + -96)), (18 + -18), (17 + -17), (44 + -44)\ng = [[] for i in range(n + (61 + -60))]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, (60 + -59)))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u]:\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        idx_568k = (13 + -13)\n        list_lhtw = g[u]\n        while idx_568k < len(list_lhtw):\n            i = list_lhtw[idx_568k]\n            stk.put((i, (3 + 0) - col))\n            idx_568k = idx_568k + (50 + -49)\n    return flag\nidx_7up0 = (19 + -19)\nlist_rpqe = range(m)\nwhile idx_7up0 < len(list_rpqe):\n    i = list_rpqe[idx_7up0]\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    idx_7up0 = idx_7up0 + (49 + -48)\nidx_d4wi = (12 + -12)\nlist_oqki = range((96 + -95), n + (78 + -77))\nwhile idx_d4wi < len(list_oqki):\n    i = list_oqki[idx_d4wi]\n    if vis[i] == (18 + -18):\n        if len(g[i]) == (11 + -11):\n            ci += (66 + -65)\n        else:\n            if dfs(i):\n                cb += (34 + -33)\n            else:\n                cc += (38 + -37)\n    idx_d4wi = idx_d4wi + (20 + -19)\nprint(ci * ci + (74 + -72) * ci * (n - ci) + cc * cc + (94 + -92) * cb * cc + (95 + -93) * cb * cb)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC011_C_to_99", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nidx_36dl = (43 + -43)\nlist_ptc2 = range(n)\nwhile idx_36dl < len(list_ptc2):\n    k = list_ptc2[idx_36dl]\n    if k + (88 + -87) in lista:\n        print((92 + -91), end=\" \")\n    else:\n        print((13 + -11), end=\" \")\n    idx_36dl = idx_36dl + (75 + -74)\n", "id": "ConstantUnfoldding_sample_from_codeforces_421_A_to_100", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_trkw = (57 + -57)\n    list_0y6u = range((11 + -7))\n    while idx_trkw < len(list_0y6u):\n        i = list_0y6u[idx_trkw]\n        t = list(last4)\n        if i >= (66 + -65):\n            t[i], t[i - (99 + -98)] = t[i - (84 + -83)], t[i]\n        if ''.join(t).count('AGC') >= (2 + -1):\n            return False\n        idx_trkw = idx_trkw + (25 + -24)\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return (68 + -67)\n    ret = (99 + -99)\n    idx_pxgw = (47 + -47)\n    list_8xf2 = \"ACGT\"\n    while idx_pxgw < len(list_8xf2):\n        c = list_8xf2[idx_pxgw]\n        if ok(last3 + c):\n            ret = (ret + dfs(cur + (89 + -88), last3[(57 + -56):] + c)) % mod\n        idx_pxgw = idx_pxgw + (15 + -14)\n    memo[cur][last3] = ret\n    return ret\n\n\nn = int(input())\nmod = (25 + -15) ** (3 + 6) + (76 + -69)\nmemo = [{} for i in range(n + (4 + -3))]\nprint(dfs((88 + -88), 'TTT'))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC122_D_to_101", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nidx_tcw8 = (72 + -72)\nlist_pex9 = range(n)\nwhile idx_tcw8 < len(list_pex9):\n    i = list_pex9[idx_tcw8]\n    if (x - w[i]) / (n - (14 + -13)) == w[i]:\n        d.append(i + (40 + -39))\n    idx_tcw8 = idx_tcw8 + (81 + -80)\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_134_A_to_102", "old_id": "codeforces_134_A"}
{"code": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_4gnx = (87 + -87)\nlist_aygl = range(len(a) - (3 + -2), - (54 + -53), - (84 + -83))\nwhile idx_4gnx < len(list_aygl):\n    i = list_aygl[idx_4gnx]\n    if (a[i] == ' ' or a[i] == '?'):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    idx_4gnx = idx_4gnx + (71 + -70)\n", "id": "ConstantUnfoldding_sample_from_codeforces_49_A_to_103", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = (23 + -23)\nidx_l3g7 = (70 + -70)\nlist_e7iz = range(n)\nwhile idx_l3g7 < len(list_e7iz):\n    i = list_e7iz[idx_l3g7]\n    if i + (77 + -76) & (77 + -76):\n        t += (34 + -33)\n    idx_l3g7 = idx_l3g7 + (93 + -92)\nprint(t / n)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC142_A_to_104", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit((23 + -13) ** (6 + 0))\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = (3 + -3)\n    cut_count = (73 + -73)\n    idx_jhie = (25 + -25)\n    list_r5lx = links[v]\n    while idx_jhie < len(list_r5lx):\n        u = list_r5lx[idx_jhie]\n        if u == (25 + -25):\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n        idx_jhie = idx_jhie + (23 + -22)\n    height_from_leaf += (94 + -93)\n    if p != (92 + -92) and height_from_leaf == k:\n        height_from_leaf = (16 + -16)\n        cut_count += (82 + -81)\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nidx_sgdn = (47 + -47)\nlist_zklo = list(enumerate(aaa))\nwhile idx_sgdn < len(list_zklo):\n    i, a = list_zklo[idx_sgdn]\n    a -= (7 + -6)\n    links[a].add(i)\n    idx_sgdn = idx_sgdn + (85 + -84)\n_, ans = dfs(links, n, k, (91 + -91), (85 + -85))\nif aaa[(85 + -85)] != (40 + -39):\n    ans += (15 + -14)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC004_D_to_105", "old_id": "atcoder_AGC004_D"}
{"code": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=(77 + -77)):\n        if debug:\n            print(\"D\", y)\n        while len(y) > (22 + -21):\n            y = [sorted(y[i: i + (28 + -25)])[(1 + 0)] for i in range(len(y) - (7 + -5))]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[(30 + -30)] == (22 + -20):\n        pass\n        sub(x, (54 + -53))\n        print(\"=\", x)\n    return y[(74 + -74)]\n\n\nif X == (30 + -29) or X == N * (19 + -17) - (1 + 0):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * (66 + -64) - (60 + -58):\n        xs = list(range(N - (63 + -62), X + (5 + -3))) + list(range((19 + -18), N - (64 + -63)))\n    else:\n        ys = list(range((33 + -32), X - (60 + -59))) + list(range(X + (72 + -69), N * (100 + -98)))\n        xs = ys[: N - (89 + -86)] + [X + (46 + -44), X - (76 + -75), X, X + (44 + -43)] + ys[N - (78 + -75):]\n    idx_ytjv = (85 + -85)\n    list_an3m = xs\n    while idx_ytjv < len(list_an3m):\n        x = list_an3m[idx_ytjv]\n        print(x)\n        idx_ytjv = idx_ytjv + (60 + -59)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC006_B_to_106", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_va23 = (54 + -54)\n    list_xygm = lis\n    while idx_va23 < len(list_xygm):\n        i = list_xygm[idx_va23]\n        if (i % mid == (31 + -31)):\n            k += (96 + -95)\n        k -= (i // mid)\n        idx_va23 = idx_va23 + (48 + -47)\n    return k >= (60 + -60)\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = (62 + -61), max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // (64 + -62)\n    if (check(lis, k, mid)):\n        ans = mid\n        b = mid - (1 + 0)\n    else:\n        a = mid + (25 + -24)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC174_E_to_107", "old_id": "atcoder_ABC174_E"}
{"code": "n = int(input())\nc = (43 + -43)\nidx_q4of = (25 + -25)\nlist_mkb7 = range(n)\nwhile idx_q4of < len(list_mkb7):\n    i = list_mkb7[idx_q4of]\n    l1 = list(map(int, input().split()))\n    if sum(l1) > (13 + -12):\n        c = c + (43 + -42)\n    idx_q4of = idx_q4of + (60 + -59)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_231_A_to_108", "old_id": "codeforces_231_A"}
{"code": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < (6 + -6) or r > n):\n        return (98 + -98)\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = (89 + 998244264)\n__N = (24 + 7976)\ng1 = [(34 + -33), (88 + -87)]\ng2 = [(71 + -70), (32 + -31)]\ninverse = [(58 + -58), (92 + -91)]\nidx_p9x8 = (56 + -56)\nlist_enip = range((17 + -15), __N + (100 + -99))\nwhile idx_p9x8 < len(list_enip):\n    i = list_enip[idx_p9x8]\n    g1.append((g1[- (23 + -22)] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- (76 + -75)] * inverse[- (6 + -5)]) % mod)\n    idx_p9x8 = idx_p9x8 + (66 + -65)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - (73 + -72), q - (41 + -40), mod)\n\n\ndef solve(n):\n    assert n <= K + (62 + -61)\n    ans = (95 + -95)\n    kumi = (n - (86 + -85)) // (90 + -88)\n    idx_3cgl = (39 + -39)\n    list_8b7m = range(kumi + (71 + -70))\n    while idx_3cgl < len(list_8b7m):\n        p = list_8b7m[idx_3cgl]\n        if p > N:\n            break\n        ans += (33 + -31) ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * (36 + -34) - int(n % (68 + -66) == (65 + -65))))\n        if n % (49 + -47) == (32 + -32) and N - p - (67 + -66) >= (29 + -29):\n            ans += (44 + -42) ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - (40 + -39), p + (K - kumi * (36 + -34) - int(n % (74 + -72) == (41 + -41))))\n        idx_3cgl = idx_3cgl + (74 + -73)\n    return ans\n\n\nans = []\nidx_opdx = (49 + -49)\nlist_1i67 = range((34 + -32), (32 + -30) * K + (77 + -76))\nwhile idx_opdx < len(list_1i67):\n    i = list_1i67[idx_opdx]\n    if i <= K + (79 + -78):\n        tmp = solve(i) % (11 + 998244342)\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    idx_opdx = idx_opdx + (84 + -83)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ARC102_C_to_109", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [(64 + -64)]\nidx_prw9 = (22 + -22)\nlist_k029 = range((99 + -98), n + (98 + -97))\nwhile idx_prw9 < len(list_k029):\n    i = list_k029[idx_prw9]\n    sum_el.append(W[i - (48 + -47)] + sum_el[i - (71 + -70)])\n    idx_prw9 = idx_prw9 + (86 + -85)\nanswer = QR * (n - (74 + -73)) + sum_el[n] * R\nidx_9cvt = (21 + -21)\nlist_mspg = range((70 + -69), n + (77 + -76))\nwhile idx_9cvt < len(list_mspg):\n    i = list_mspg[idx_9cvt]\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i):\n        energy = energy + (i - (n - i) - (11 + -10)) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - (57 + -56)) * QR\n    if energy < answer:\n        answer = energy\n    idx_9cvt = idx_9cvt + (62 + -61)\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_codeforces_354_A_to_110", "old_id": "codeforces_354_A"}
{"code": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = (88 + -88)\nwhile curr:\n    s += (47 + -46)\n    curr //= (41 + -31)\nfirst = (10 + 0) ** s\nsecond = first // (69 + -67)\nans = - (67 + -66)\nidx_5dnz = (28 + -28)\nlist_9pbu = [l, r, first, second]\nwhile idx_5dnz < len(list_9pbu):\n    i = list_9pbu[idx_5dnz]\n    if i >= l and i <= r:\n        curr = i\n        rev = ''\n        idx_u9sb = (29 + -29)\n        list_0li1 = str(curr)\n        while idx_u9sb < len(list_0li1):\n            k = list_0li1[idx_u9sb]\n            rev += str((86 + -77) - int(k))\n            idx_u9sb = idx_u9sb + (89 + -88)\n        ans = max(ans, int(rev) * curr)\n    idx_5dnz = idx_5dnz + (19 + -18)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_86_A_to_111", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open((46 + -46)).read().split())\nl.sort()\nans = (44 + -44)\nidx_qaey = (70 + -70)\nlist_gmlq = range(n)\nwhile idx_qaey < len(list_gmlq):\n    i = list_gmlq[idx_qaey]\n    idx_90m3 = (67 + -67)\n    list_g3z6 = range(i + (66 + -65), n)\n    while idx_90m3 < len(list_g3z6):\n        j = list_g3z6[idx_90m3]\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max((70 + -70), right - left)\n        if left <= i < right:\n            tmp -= (22 + -21)\n        if left <= j < right:\n            tmp -= (22 + -21)\n        ans += tmp\n        idx_90m3 = idx_90m3 + (82 + -81)\n    idx_qaey = idx_qaey + (98 + -97)\nprint(ans // (25 + -22))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC143_D_to_112", "old_id": "atcoder_ABC143_D"}
{"code": "n = int(input())\nl = []\nidx_rn50 = (76 + -76)\nlist_bm7v = range(n)\nwhile idx_rn50 < len(list_bm7v):\n    i = list_bm7v[idx_rn50]\n    l.append(int(input()))\n    idx_rn50 = idx_rn50 + (27 + -26)\nans = n - (27 + -26)\nlast = (70 + -70)\nidx_7zds = (5 + -5)\nlist_j3cy = l\nwhile idx_7zds < len(list_j3cy):\n    i = list_j3cy[idx_7zds]\n    ans += abs(last - i) + (73 + -72)\n    last = i\n    idx_7zds = idx_7zds + (82 + -81)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_265_B_to_113", "old_id": "codeforces_265_B"}
{"code": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - (54 + -44) ** (25 + -7) - (59 + -58)\nrr = (53 + -43) ** (43 + -25) + (88 + -87)\nwhile ll + (4 + -3) < rr:\n    x = (ll + rr) // (41 + -39)\n    tot = (23 + -23)\n    idx_05cm = (17 + -17)\n    list_wom4 = range(N)\n    while idx_05cm < len(list_wom4):\n        i = list_wom4[idx_05cm]\n        if A[i] < (30 + -30):\n            l = - (54 + -53)\n            r = N\n            while l + (71 + -70) < r:\n                c = (l + r) // (63 + -61)\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - (23 + -22)\n            r = N\n            while l + (66 + -65) < r:\n                c = (l + r) // (16 + -14)\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x:\n            tot -= (16 + -15)\n        idx_05cm = idx_05cm + (75 + -74)\n    tot //= (13 + -11)\n    if tot < K:\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_D_to_114", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = int(input())\nans, sumL = (3 + -2), (80 + -80)\nidx_pkr0 = (60 + -60)\nlist_hut2 = re.split(\"[.?!]\", input())\nwhile idx_pkr0 < len(list_hut2):\n    s = list_hut2[idx_pkr0]\n    s = s.strip() + '.'\n    L = len(s)\n    if L > (23 + -22):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > (11 + -11)) > n:\n            ans += (70 + -69)\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > (12 + -12))\n    idx_pkr0 = idx_pkr0 + (18 + -17)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_70_B_to_115", "old_id": "codeforces_70_B"}
{"code": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[(90 + -90)]\nidx_235o = (2 + -2)\nlist_xg27 = m[(53 + -52):]\nwhile idx_235o < len(list_xg27):\n    i = list_xg27[idx_235o]\n    if i[(36 + -35)] > a[(25 + -24)]:\n        print('Happy Alex')\n        break\n    a = i\n    idx_235o = idx_235o + (45 + -44)\n", "id": "ConstantUnfoldding_sample_from_codeforces_456_A_to_116", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    idx_4dgf = (84 + -84)\n    list_gl83 = range(b)\n    while idx_4dgf < len(list_gl83):\n        i = list_gl83[idx_4dgf]\n        tot.append(l[i * a: i * a + a])\n        idx_4dgf = idx_4dgf + (57 + -56)\n    idx_wy97 = (82 + -82)\n    list_zrm6 = zip(* tot)\n    while idx_wy97 < len(list_zrm6):\n        i = list_zrm6[idx_wy97]\n        if sum((i)) == b:\n            return True\n        idx_wy97 = idx_wy97 + (99 + -98)\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    idx_yqrf = (63 + -63)\n    list_hap6 = x\n    while idx_yqrf < len(list_hap6):\n        i = list_hap6[idx_yqrf]\n        if i == 'O':\n            s.append((60 + -60))\n        else:\n            s.append((77 + -76))\n        idx_yqrf = idx_yqrf + (64 + -63)\n    idx_nwls = (60 + -60)\n    list_kzgd = range((81 + -80), (74 + -61))\n    while idx_nwls < len(list_kzgd):\n        i = list_kzgd[idx_nwls]\n        if (34 + -22) % i == (14 + -14):\n            if help(i, (44 + -32) // i, s):\n                tot.append(((44 + -32) // i, i))\n        idx_nwls = idx_nwls + (9 + -8)\n    print(len(tot), end=' ')\n    idx_skji = (59 + -59)\n    list_hoa1 = sorted(tot)\n    while idx_skji < len(list_hoa1):\n        a, b = list_hoa1[idx_skji]\n        print(f'{a}x{b}', end=' ')\n        idx_skji = idx_skji + (73 + -72)\n    print()\n\n\nif __name__ == \"__main__\":\n    idx_v6mt = (88 + -88)\n    list_u0mh = range(inp())\n    while idx_v6mt < len(list_u0mh):\n        i = list_u0mh[idx_v6mt]\n        solve()\n        idx_v6mt = idx_v6mt + (50 + -49)\n", "id": "ConstantUnfoldding_sample_from_codeforces_400_A_to_117", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit((36 + 9999964))\nmod = (51 + -41) ** (43 + -34) + (9 + -2)\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = (39 + -39)\n    idx_7m2h = (18 + -18)\n    list_cmlv = range(len(A) - (34 + -32), len(A) - (84 + -82) * n - (86 + -85), - (3 + -1))\n    while idx_7m2h < len(list_cmlv):\n        i = list_cmlv[idx_7m2h]\n        ans += A[i]\n        idx_7m2h = idx_7m2h + (19 + -18)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC012_A_to_118", "old_id": "atcoder_AGC012_A"}
{"code": "s = input()\nn = int(input())\nans = (24 + -24)\nidx_viqr = (24 + -24)\nlist_yzeu = range(n)\nwhile idx_viqr < len(list_yzeu):\n    i = list_yzeu[idx_viqr]\n    x = input()\n    a, b = (80 + -80), (49 + -49)\n    idx_7ty9 = (16 + -16)\n    list_urla = s\n    while idx_7ty9 < len(list_urla):\n        j = list_urla[idx_7ty9]\n        if j == x[(32 + -32)]:\n            a += (52 + -51)\n        elif j == x[(22 + -21)]:\n            b += (92 + -91)\n        else:\n            ans = ans + min(a, b)\n            a, b = (38 + -38), (45 + -45)\n        idx_7ty9 = idx_7ty9 + (80 + -79)\n    ans = ans + min(a, b)\n    idx_viqr = idx_viqr + (68 + -67)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_154_A_to_119", "old_id": "codeforces_154_A"}
{"code": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = (17 + -17)\nidx_g2nq = (51 + -51)\nlist_win9 = range(n)\nwhile idx_g2nq < len(list_win9):\n    j = list_win9[idx_g2nq]\n    idx_y5f3 = (15 + -15)\n    list_3k4m = range(n)\n    while idx_y5f3 < len(list_3k4m):\n        p = list_3k4m[idx_y5f3]\n        if ((79 + -79) == M[p]):\n            print(p + (49 + -48), end=' ')\n            break\n        idx_y5f3 = idx_y5f3 + (47 + -46)\n    idx_t1sm = (30 + -30)\n    list_h0lq = range(p + (2 + -1) - k)\n    while idx_t1sm < len(list_h0lq):\n        l = list_h0lq[idx_t1sm]\n        M[l] -= (14 + -13)\n        idx_t1sm = idx_t1sm + (28 + -27)\n    M[p] -= (89 + -88)\n    idx_g2nq = idx_g2nq + (97 + -96)\n", "id": "ConstantUnfoldding_sample_from_codeforces_67_B_to_120", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    idx_vd3q = (49 + -49)\n    list_9pie = sequence\n    while idx_vd3q < len(list_9pie):\n        value = list_9pie[idx_vd3q]\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_vd3q = idx_vd3q + (11 + -10)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // (4 + -2)\n\n\ndef f(n):\n    y = (73 + -72)\n    while n != (47 + -46):\n        if n % (46 + -44):\n            y += (50 + -49)\n        n //= (15 + -13)\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_272_B_to_121", "old_id": "codeforces_272_B"}
{"code": "n, k = map(int, input().split())\ns = input()\ncount = [(18 + -18)] * (79 + -53)\nidx_fklm = (97 + -97)\nlist_dpcw = s\nwhile idx_fklm < len(list_dpcw):\n    c = list_dpcw[idx_fklm]\n    count[ord(c) - ord(\"A\")] += (22 + -21)\n    idx_fklm = idx_fklm + (28 + -27)\ncount.sort(reverse=True)\nres = (27 + -27)\nidx_a16d = (60 + -60)\nlist_mc78 = range((29 + -3))\nwhile idx_a16d < len(list_mc78):\n    i = list_mc78[idx_a16d]\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** (68 + -66)\n    idx_a16d = idx_a16d + (24 + -23)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_462_B_to_122", "old_id": "codeforces_462_B"}
{"code": "from itertools import accumulate\nN, X, * A = map(int, open((60 + -60)).read().split())\nS = list(accumulate(A))\nans = float(\"inf\")\nidx_u2lc = (33 + -33)\nlist_9p8g = list(enumerate(S, (62 + -61)))\nwhile idx_u2lc < len(list_9p8g):\n    k, s = list_9p8g[idx_u2lc]\n    E = k * X + (29 + -27) * sum(S[j] for j in range(N - (51 + -49) * k - (3 + -2), - (2 + -1), - k))\n    ans = min(ans, E)\n    idx_u2lc = idx_u2lc + (16 + -15)\nprint(ans + N * X + (23 + -18) * S[- (7 + -6)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC027_B_to_123", "old_id": "atcoder_AGC027_B"}
{"code": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nidx_b4vy = (30 + -30)\nlist_7ytw = Number_i\nwhile idx_b4vy < len(list_7ytw):\n    i = list_7ytw[idx_b4vy]\n    Number_iMN.append(i * M / N)\n    idx_b4vy = idx_b4vy + (41 + -40)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nidx_k2d8 = (41 + -41)\nlist_365w = Kaburi_j\nwhile idx_k2d8 < len(list_365w):\n    j = list_365w[idx_k2d8]\n    Kaburi_i.append(int(j * N / M))\n    idx_k2d8 = idx_k2d8 + (14 + -13)\ncounter = (54 + -54)\nFlag = (61 + -61)\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - (18 + -17):\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = (82 + -81)\n        break\n    counter += (6 + -5)\n\n\ndef gcd(a, b):\n    while b > (35 + -35):\n        a, b = b, a % b\n    return a\n\n\nif Flag == (74 + -73):\n    print(- (46 + -45))\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC028_A_to_124", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = (89 + -89)\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = (27 + 999999980)\n\n\ndef main_b():\n    s = input()\n    pp = (70 + -70)\n    na = (44 + -44)\n    idx_yj5m = (64 + -64)\n    list_vqdb = list(enumerate(s[:: - (18 + -17)]))\n    while idx_yj5m < len(list_vqdb):\n        i, c = list_vqdb[idx_yj5m]\n        cc = na + int(c)\n        na = (37 + -37)\n        if cc <= (93 + -89):\n            pp += cc\n        else:\n            na = (38 + -37)\n            if i == len(s) - (3 + -2):\n                pp += (47 + -46)\n            pp += (64 + -54) - cc\n        idx_yj5m = idx_yj5m + (4 + -3)\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = (98 + 902)\n    mmin = (77 + -77)\n    s = '0' + s\n    idx_o7dk = (30 + -30)\n    list_y94l = s[:: - (30 + -29)]\n    while idx_o7dk < len(list_y94l):\n        c = list_y94l[idx_o7dk]\n        v = int(c)\n        npmin = min(pmin + (7 + 3) - (v + (72 + -71)), mmin + (85 + -75) - v)\n        nmmin = min(pmin + v + (70 + -69), mmin + v)\n        pmin = npmin\n        mmin = nmmin\n        idx_o7dk = idx_o7dk + (38 + -37)\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    idx_cze8 = (24 + -24)\n    list_14am = input_l\n    while idx_cze8 < len(list_14am):\n        l = list_14am[idx_cze8]\n        yield l\n        idx_cze8 = idx_cze8 + (63 + -62)\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[(38 + -38)]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[(71 + -70)]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC155_E_to_125", "old_id": "atcoder_ABC155_E"}
{"code": "L = []\ninput()\nr = (9 + -8)\nidx_zvng = (25 + -25)\nlist_zajo = input().split()\nwhile idx_zvng < len(list_zajo):\n    k = list_zajo[idx_zvng]\n    L += [r] * int(k)\n    r += (16 + -15)\n    idx_zvng = idx_zvng + (24 + -23)\ninput()\nidx_mwc2 = (73 + -73)\nlist_yuce = input().split()\nwhile idx_mwc2 < len(list_yuce):\n    j = list_yuce[idx_mwc2]\n    print(L[int(j) - (1 + 0)])\n    idx_mwc2 = idx_mwc2 + (42 + -41)\n", "id": "ConstantUnfoldding_sample_from_codeforces_474_B_to_126", "old_id": "codeforces_474_B"}
{"code": "n, m = map(int, input().split())\nsa = input().count(\"-\")\nsa = min([n - sa, sa])\nss = []\nidx_k7ia = (17 + -17)\nlist_t2s7 = range(m)\nwhile idx_k7ia < len(list_t2s7):\n    _ = list_t2s7[idx_k7ia]\n    a, b = map(int, input().split())\n    b -= a\n    ss.append((b % (65 + -63) and b <= sa << (96 + -95)) and \"1\\n\" or \"0\\n\")\n    idx_k7ia = idx_k7ia + (19 + -18)\nprint(\"\".join(ss))\n", "id": "ConstantUnfoldding_sample_from_codeforces_302_A_to_127", "old_id": "codeforces_302_A"}
{"code": "A, B, C, D = map(int, input().split())\nm = (96 + 998244257)\nd = [[(7 + -7)] * (D + (26 + -25)) for _ in range(C + (22 + -21))]\nd[A][B] = (29 + -28)\nidx_4lzm = (20 + -20)\nlist_k0s8 = range(A, C + (85 + -84))\nwhile idx_4lzm < len(list_k0s8):\n    i = list_k0s8[idx_4lzm]\n    idx_3ga2 = (29 + -29)\n    list_a2no = range(B, D + (69 + -68))\n    while idx_3ga2 < len(list_a2no):\n        j = list_a2no[idx_3ga2]\n        d[i][j] += (d[i][j - (83 + -82)] * i + d[i - (32 + -31)][j] * j -\n                    d[i - (32 + -31)][j - (92 + -91)] * (i - (95 + -94)) * (j - (74 + -73))) % m\n        idx_3ga2 = idx_3ga2 + (37 + -36)\n    idx_4lzm = idx_4lzm + (67 + -66)\nprint(d[C][D])\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC046_B_to_128", "old_id": "atcoder_AGC046_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - (79 + -78)].split()\nw = Counter(s)\ns = s[:: - (55 + -54)]\nc, a = - (30 + -29), (93 + -93)\nidx_h5d0 = (73 + -73)\nlist_suh0 = w\nwhile idx_h5d0 < len(list_suh0):\n    i = list_suh0[idx_h5d0]\n    if w[i] == max(w.values()):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\n    idx_h5d0 = idx_h5d0 + (20 + -19)\nprint(a)\n", "id": "ConstantUnfoldding_sample_from_codeforces_637_A_to_129", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b:\n        total = (49 + -49)\n        while a > (76 + -76) and b > (86 + -86):\n            total += int(a / b)\n            a = a % b\n            if a > (87 + -87):\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b:\n        total = (93 + -93)\n        while a > (75 + -75) and b > (98 + -98):\n            total += int(b / a)\n            b = b % a\n            if b > (17 + -17):\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b:\n        return (85 + -84)\n\n\nn = int(input())\nlst = []\nidx_g4rd = (23 + -23)\nlist_yw0d = range((50 + -50), n)\nwhile idx_g4rd < len(list_yw0d):\n    i = list_yw0d[idx_g4rd]\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\n    idx_g4rd = idx_g4rd + (50 + -49)\nidx_4dis = (65 + -65)\nlist_u3it = lst\nwhile idx_4dis < len(list_u3it):\n    i = list_u3it[idx_4dis]\n    print(i)\n    idx_4dis = idx_4dis + (20 + -19)\n", "id": "ConstantUnfoldding_sample_from_codeforces_267_A_to_130", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = - (85 + -84), len(ans)\n    while good - bad > (15 + -14):\n        mid = (bad + good) // (73 + -71)\n        if ans[mid][- (68 + -67)] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nidx_27fw = (17 + -17)\nlist_9hf2 = range(N)\nwhile idx_27fw < len(list_9hf2):\n    _ = list_9hf2[idx_27fw]\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\n    idx_27fw = idx_27fw + (70 + -69)\nprint(len(ans))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC134_E_to_131", "old_id": "atcoder_ABC134_E"}
{"code": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = (25 + -25)\nidx_1s4p = (85 + -85)\nlist_0k67 = lst\nwhile idx_1s4p < len(list_0k67):\n    i = list_0k67[idx_1s4p]\n    if (i & (22 + -21)):\n        od += (62 + -61)\n    idx_1s4p = idx_1s4p + (30 + -29)\nsum = (61 + -61)\nok = (9 + -9)\nidx_dra3 = (42 + -42)\nlist_n9mi = range(n)\nwhile idx_dra3 < len(list_n9mi):\n    i = list_n9mi[idx_dra3]\n    if (lst[i] % (8 + -6) == (64 + -64)):\n        sum += lst[i]\n    else:\n        if (ok or od > (17 + -16)):\n            sum += lst[i]\n            od -= (58 + -57)\n            ok = not ok\n    idx_dra3 = idx_dra3 + (19 + -18)\nprint(sum)\n", "id": "ConstantUnfoldding_sample_from_codeforces_621_A_to_132", "old_id": "codeforces_621_A"}
{"code": "import math\nN = int(input())\nS = input()\n\n\ndef calculate(n, s):\n    arr = list(s)\n    rNum = arr.count(\"R\")\n    gNum = arr.count(\"G\")\n    bNum = arr.count(\"B\")\n    sum = (65 + -65)\n    idx_k1nq = (99 + -99)\n    list_l8fk = range((69 + -68), math.ceil(n / (51 + -49)) + (51 + -50))\n    while idx_k1nq < len(list_l8fk):\n        step = list_l8fk[idx_k1nq]\n        idx_9tjf = (15 + -15)\n        list_3lns = range(n - (4 + -2) * step)\n        while idx_9tjf < len(list_3lns):\n            i = list_3lns[idx_9tjf]\n            s = \"\".join([arr[i], arr[i + step], arr[i + step * (22 + -20)]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\":\n                sum = sum + (25 + -24)\n            idx_9tjf = idx_9tjf + (79 + -78)\n        idx_k1nq = idx_k1nq + (73 + -72)\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC162_D_to_133", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[(32 + -32)])\n    flag[(35 + -35)] = False\n    idx_ob2a = (80 + -80)\n    list_ksdh = range(N)\n    while idx_ob2a < len(list_ksdh):\n        i = list_ksdh[idx_ob2a]\n        j = (49 + -49)\n        jM = len(cur)\n        idx_1vao = (36 + -36)\n        list_vj0o = range(len(S))\n        while idx_1vao < len(list_vj0o):\n            k = list_vj0o[idx_1vao]\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += (6 + -5)\n                flag[k] = False\n                if j == jM:\n                    break\n            idx_1vao = idx_1vao + (5 + -4)\n        cur.sort(reverse=True)\n        idx_ob2a = idx_ob2a + (62 + -61)\n    return (\"Yes\")\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC140_F_to_134", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit((58 + -48) ** (83 + -76))\n\n\ndef input():\n    return sys.stdin.readline()[: - (11 + -10)]\n\n\nmod = (100 + -90) ** (98 + -89) + (56 + -49)\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == (17 + -16):\n    if S == '5' or S == '?':\n        print((56 + -55))\n    else:\n        print((28 + -28))\n    exit()\ndp = [[(80 + -80)] * (3 + 10) for i in range(n)]\nidx_k142 = (1 + -1)\nlist_o1y5 = range(n)\nwhile idx_k142 < len(list_o1y5):\n    i = list_o1y5[idx_k142]\n    if i == (35 + -35):\n        if S[i] != '?':\n            dp[i][int(S[i])] += (96 + -95)\n        else:\n            idx_932j = (3 + -3)\n            list_8clb = range((31 + -21))\n            while idx_932j < len(list_8clb):\n                j = list_8clb[idx_932j]\n                dp[i][j] += (20 + -19)\n                idx_932j = idx_932j + (92 + -91)\n    else:\n        if S[i] != '?':\n            idx_0rh7 = (27 + -27)\n            list_xzo6 = range((87 + -74))\n            while idx_0rh7 < len(list_xzo6):\n                k = list_xzo6[idx_0rh7]\n                dp[i][(k * (61 + -51) + int(S[i])) % (74 + -61)] += dp[i - (35 + -34)][k]\n                idx_0rh7 = idx_0rh7 + (83 + -82)\n        else:\n            idx_rcd0 = (21 + -21)\n            list_wh73 = range((65 + -55))\n            while idx_rcd0 < len(list_wh73):\n                j = list_wh73[idx_rcd0]\n                idx_sdfx = (95 + -95)\n                list_sb8d = range((25 + -12))\n                while idx_sdfx < len(list_sb8d):\n                    k = list_sb8d[idx_sdfx]\n                    dp[i][(k * (36 + -26) + j) % (48 + -35)] += dp[i - (50 + -49)][k]\n                    idx_sdfx = idx_sdfx + (80 + -79)\n                idx_rcd0 = idx_rcd0 + (3 + -2)\n        idx_r6qe = (100 + -100)\n        list_rvwp = range((49 + -36))\n        while idx_r6qe < len(list_rvwp):\n            k = list_rvwp[idx_r6qe]\n            dp[i][k] %= mod\n            idx_r6qe = idx_r6qe + (99 + -98)\n    idx_k142 = idx_k142 + (10 + -9)\nprint(dp[n - (70 + -69)][(95 + -90)])\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC135_D_to_135", "old_id": "atcoder_ABC135_D"}
{"code": "x, y, z, k = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\nab = []\nidx_4wgq = (56 + -56)\nlist_micj = range(x)\nwhile idx_4wgq < len(list_micj):\n    i = list_micj[idx_4wgq]\n    idx_7zym = (38 + -38)\n    list_o47f = range(y)\n    while idx_7zym < len(list_o47f):\n        j = list_o47f[idx_7zym]\n        ab.append(a[i] + b[j])\n        idx_7zym = idx_7zym + (1 + 0)\n    idx_4wgq = idx_4wgq + (39 + -38)\nab.sort(reverse=True)\nabc = []\nidx_joxy = (16 + -16)\nlist_far2 = range(min(k, x * y))\nwhile idx_joxy < len(list_far2):\n    i = list_far2[idx_joxy]\n    idx_q24v = (26 + -26)\n    list_putb = range(z)\n    while idx_q24v < len(list_putb):\n        j = list_putb[idx_q24v]\n        abc.append(ab[i] + c[j])\n        idx_q24v = idx_q24v + (61 + -60)\n    idx_joxy = idx_joxy + (16 + -15)\nabc.sort(reverse=True)\nidx_ohmg = (46 + -46)\nlist_ap9l = range(k)\nwhile idx_ohmg < len(list_ap9l):\n    i = list_ap9l[idx_ohmg]\n    print(abc[i])\n    idx_ohmg = idx_ohmg + (84 + -83)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC123_D_to_136", "old_id": "atcoder_ABC123_D"}
{"code": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\nMOD = (29 + -19) ** (85 + -76) + (79 + -72)\nN = int(input())\nA = list(map(int, input().split()))\n_lcm = (22 + -21)\nidx_vja4 = (79 + -79)\nlist_moc1 = A\nwhile idx_vja4 < len(list_moc1):\n    a = list_moc1[idx_vja4]\n    _lcm = _lcm * a // gcd(_lcm, a)\n    idx_vja4 = idx_vja4 + (2 + -1)\nans = _lcm * sum([pow(s, MOD - (83 + -81), MOD) for s in A]) % MOD\nprint(int(ans % MOD))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC152_E_to_137", "old_id": "atcoder_ABC152_E"}
{"code": "s = str(input())\nmy_str = ''\nidx_cmwe = (50 + -50)\nlist_ndcg = s\nwhile idx_cmwe < len(list_ndcg):\n    c = list_ndcg[idx_cmwe]\n    if c == '0' or c == '1':\n        my_str += c\n    elif c == 'B' and len(my_str) != (49 + -49):\n        my_str = my_str[: len(my_str) - (74 + -73)]\n    idx_cmwe = idx_cmwe + (6 + -5)\nprint(my_str)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC043_B_to_138", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = (21 + -21)\nidx_sktr = (82 + -82)\nlist_ynuz = w\nwhile idx_sktr < len(list_ynuz):\n    i = list_ynuz[idx_sktr]\n    if i == (70 + -70):\n        c += w[i] * (w[i] - (20 + -19))\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    idx_sktr = idx_sktr + (81 + -80)\nprint(c // (33 + -31))\n", "id": "ConstantUnfoldding_sample_from_codeforces_131_B_to_139", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nidx_jxsw = (62 + -62)\nlist_xohy = range(n)\nwhile idx_jxsw < len(list_xohy):\n    i = list_xohy[idx_jxsw]\n    if lst[i] not in l:\n        l[lst[i]] = (78 + -77)\n    else:\n        l[lst[i]] += (93 + -92)\n    idx_jxsw = idx_jxsw + (51 + -50)\nres = (18 + -18)\nidx_2v8w = (13 + -13)\nlist_8wdf = range(n)\nwhile idx_2v8w < len(list_8wdf):\n    i = list_8wdf[idx_2v8w]\n    if l[lst[i]] > (47 + -46):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= (96 + -95)\n    else:\n        res += n - i - (58 + -57)\n    idx_2v8w = idx_2v8w + (79 + -78)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_609_B_to_140", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit((32 + -22) ** (36 + -29))\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open((78 + -78)).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_sy89 = (24 + -24)\n    list_9pt8 = list(enumerate(it))\n    while idx_sy89 < len(list_9pt8):\n        i, e = list_9pt8[idx_sy89]\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n        idx_sy89 = idx_sy89 + (22 + -21)\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = (58 + 999999999999999999999941)\nMOD = (83 + -73) ** (57 + -48) + (25 + -18)\nn = int(input())\nif n == (51 + -50):\n    print((82 + -82))\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % (9 + -7) == (25 + -25):\n        a.append((90 + -88))\n        n //= (55 + -53)\n    f = (24 + -21)\n    while f * f <= n:\n        if n % f == (57 + -57):\n            a.append(f)\n            n //= f\n        else:\n            f += (7 + -5)\n    if n != (10 + -9):\n        a.append(n)\n    return a\n    if len(arr) == (7 + -7):\n        arr.append((n, (85 + -84)))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = (20 + -20)\nidx_t3d4 = (19 + -19)\nlist_2q7x = list(fac.items())\nwhile idx_t3d4 < len(list_2q7x):\n    p, e = list_2q7x[idx_t3d4]\n    x = e\n    idx_gjot = (56 + -56)\n    list_ukj9 = range((25 + -24), (78 + 99999921))\n    while idx_gjot < len(list_ukj9):\n        i = list_ukj9[idx_gjot]\n        if x >= i:\n            x -= i\n            ans += (51 + -50)\n        else:\n            break\n        idx_gjot = idx_gjot + (68 + -67)\n    idx_t3d4 = idx_t3d4 + (13 + -12)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_D_to_141", "old_id": "atcoder_ABC169_D"}
{"code": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nidx_t7le = (42 + -42)\nlist_01ah = range((56 + -56), n)\nwhile idx_t7le < len(list_01ah):\n    i = list_01ah[idx_t7le]\n    if i % (85 + -83) == (97 + -97):\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_t7le = idx_t7le + (75 + -74)\ncnta = [(50 + -50)] * ((37 + 99965) + (89 + -88))\ncntb = [(25 + -25)] * ((54 + 99948) + (6 + -5))\nvala = (5 + -5)\nvala1 = (97 + -97)\nmaxCnta = (42 + -42)\nmaxCnta1 = (33 + -33)\nidx_xsjr = (49 + -49)\nlist_hpx3 = a\nwhile idx_xsjr < len(list_hpx3):\n    i = list_hpx3[idx_xsjr]\n    cnta[i] += (64 + -63)\n    idx_xsjr = idx_xsjr + (38 + -37)\nidx_0owc = (12 + -12)\nlist_gi6v = a\nwhile idx_0owc < len(list_gi6v):\n    i = list_gi6v[idx_0owc]\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\n    idx_0owc = idx_0owc + (42 + -41)\nidx_47fz = (100 + -100)\nlist_dhl6 = a\nwhile idx_47fz < len(list_dhl6):\n    i = list_dhl6[idx_47fz]\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\n    idx_47fz = idx_47fz + (73 + -72)\nvalb = (19 + -19)\nvalb1 = (7 + -7)\nmaxCntb = (11 + -11)\nmaxCntb1 = (8 + -8)\nidx_a4po = (24 + -24)\nlist_djet = b\nwhile idx_a4po < len(list_djet):\n    i = list_djet[idx_a4po]\n    cntb[i] += (63 + -62)\n    idx_a4po = idx_a4po + (44 + -43)\nidx_ijkw = (55 + -55)\nlist_ni0z = b\nwhile idx_ijkw < len(list_ni0z):\n    i = list_ni0z[idx_ijkw]\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\n    idx_ijkw = idx_ijkw + (95 + -94)\nidx_3fci = (6 + -6)\nlist_dxb6 = b\nwhile idx_3fci < len(list_dxb6):\n    i = list_dxb6[idx_3fci]\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\n    idx_3fci = idx_3fci + (57 + -56)\nif valb != vala:\n    res = (16 + -16)\n    idx_8clo = (94 + -94)\n    list_yrdc = a\n    while idx_8clo < len(list_yrdc):\n        i = list_yrdc[idx_8clo]\n        if i != vala:\n            res += (63 + -62)\n        idx_8clo = idx_8clo + (33 + -32)\n    idx_lcg5 = (26 + -26)\n    list_s8ht = b\n    while idx_lcg5 < len(list_s8ht):\n        i = list_s8ht[idx_lcg5]\n        if i != valb:\n            res += (49 + -48)\n        idx_lcg5 = idx_lcg5 + (22 + -21)\n    print(res)\nelse:\n    resa = (56 + -56)\n    resb = (29 + -29)\n    resa1 = (95 + -95)\n    resb1 = (47 + -47)\n    idx_fvio = (50 + -50)\n    list_jqh0 = a\n    while idx_fvio < len(list_jqh0):\n        i = list_jqh0[idx_fvio]\n        if i != vala:\n            resa += (98 + -97)\n        if i != vala1:\n            resa1 += (90 + -89)\n        idx_fvio = idx_fvio + (13 + -12)\n    idx_aer0 = (90 + -90)\n    list_ov3w = b\n    while idx_aer0 < len(list_ov3w):\n        i = list_ov3w[idx_aer0]\n        if i != valb:\n            resb += (61 + -60)\n        if i != valb1:\n            resb1 += (79 + -78)\n        idx_aer0 = idx_aer0 + (52 + -51)\n    print(min(resa + resb1, resa1 + resb))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC111_C_to_142", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nidx_s0ka = (42 + -42)\nlist_la9x = range(N)\nwhile idx_s0ka < len(list_la9x):\n    i = list_la9x[idx_s0ka]\n    if lst[i] == (84 + -84):\n        K -= (93 + -92)\n    if lst[i] > (96 + -96):\n        lst_p += [lst[i]]\n    elif lst[i] < (82 + -82):\n        lst_m += [lst[i]]\n    idx_s0ka = idx_s0ka + (88 + -87)\np = (30 + -30)\nm = (8 + -8)\nx, y = (10 + -10), len(lst_m) - (34 + -33)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = (95 + -85) ** (8 + 1)\n    idx_7x02 = (74 + -74)\n    list_60kx = range((28 + -28), k + (56 + -55))\n    while idx_7x02 < len(list_60kx):\n        j = list_60kx[idx_7x02]\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == (28 + -28):\n                p = (71 + -71)\n            else:\n                p = lst_p[j - (80 + -79)]\n            if k - j == (94 + -94):\n                m = (26 + -26)\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, (5 + -3) * p + abs(m), p + (9 + -7) * abs(m))\n        idx_7x02 = idx_7x02 + (40 + -39)\n    return ans\n\n\nprint(check(K))\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC107_C_to_143", "old_id": "atcoder_ABC107_C"}
{"code": "mod = (83 + -73) ** (97 + -88) + (9 + -2)\nl = input()\nn = len(l)\ndp = [[(80 + -80)] * (1 + 1) for _ in range(n + (68 + -67))]\ndp[(86 + -86)][(4 + -4)] = (97 + -96)\nidx_geou = (87 + -87)\nlist_65w1 = list(enumerate(l))\nwhile idx_geou < len(list_65w1):\n    i, c = list_65w1[idx_geou]\n    if c == '0':\n        dp[i + (19 + -18)][(58 + -58)] += dp[i][(21 + -21)]\n        dp[i + (7 + -6)][(82 + -81)] += dp[i][(6 + -5)] * (84 + -81)\n    else:\n        dp[i + (99 + -98)][(31 + -31)] += dp[i][(29 + -29)] * (26 + -24)\n        dp[i + (71 + -70)][(4 + -3)] += dp[i][(58 + -58)]\n        dp[i + (32 + -31)][(55 + -54)] += dp[i][(30 + -29)] * (83 + -80)\n    dp[i + (19 + -18)][(47 + -47)] %= mod\n    dp[i + (8 + -7)][(68 + -67)] %= mod\n    idx_geou = idx_geou + (71 + -70)\nprint((dp[n][(46 + -46)] + dp[n][(56 + -55)]) % mod)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC129_E_to_144", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nidx_o1yd = (5 + -5)\nlist_ncdw = l\nwhile idx_o1yd < len(list_ncdw):\n    i = list_ncdw[idx_o1yd]\n    if i % m == (46 + -46):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + (96 + -95))\n    idx_o1yd = idx_o1yd + (2 + -1)\nmx = max(l2)\nidx_egvl = (29 + -29)\nlist_d2rx = range(n)\nwhile idx_egvl < len(list_d2rx):\n    i = list_d2rx[idx_egvl]\n    if l2[i] == mx:\n        ind = i\n    idx_egvl = idx_egvl + (62 + -61)\nprint(ind + (74 + -73))\n", "id": "ConstantUnfoldding_sample_from_codeforces_450_A_to_145", "old_id": "codeforces_450_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = (52 + -52)\n    idx_l15m = (28 + -28)\n    list_wy4k = made_cout\n    while idx_l15m < len(list_wy4k):\n        color = list_wy4k[idx_l15m]\n        if color not in bought_count:\n            return print(- (89 + -88))\n        res += min(bought_count[color], made_cout[color])\n        idx_l15m = idx_l15m + (61 + -60)\n    print(res)\n\n\ndef main():\n    t = (36 + -35)\n    idx_lfbm = (22 + -22)\n    list_b7km = range(t)\n    while idx_lfbm < len(list_b7km):\n        _ = list_b7km[idx_lfbm]\n        solution()\n        idx_lfbm = idx_lfbm + (48 + -47)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_codeforces_408_B_to_146", "old_id": "codeforces_408_B"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + (84 + -83), - (38 + -37)\nidx_r1p3 = (14 + -14)\nlist_3qdz = range(N)\nwhile idx_r1p3 < len(list_3qdz):\n    i = list_3qdz[idx_r1p3]\n    if (i + (1 + 0) != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\n    idx_r1p3 = idx_r1p3 + (75 + -74)\nif (mx == - (68 + -67)):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + (70 + -69))][:: - (52 + -51)] + A[(mx + (72 + -71)):]\n    if (sorted(A) == A):\n        print(mn + (51 + -50), mx + (77 + -76))\n    else:\n        print('0 0')\n", "id": "ConstantUnfoldding_sample_from_codeforces_56_B_to_147", "old_id": "codeforces_56_B"}
{"code": "txt = input()\ncu = (73 + -73)\ncl = (76 + -76)\nidx_l163 = (81 + -81)\nlist_henb = txt\nwhile idx_l163 < len(list_henb):\n    z = list_henb[idx_l163]\n    if z.islower():\n        cl = cl + (15 + -14)\n    else:\n        cu = cu + (17 + -16)\n    idx_l163 = idx_l163 + (93 + -92)\nif cu > cl:\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "id": "ConstantUnfoldding_sample_from_codeforces_59_A_to_148", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + (21 + -20))]\nidx_fyx8 = (36 + -36)\nlist_vlm1 = range(N - (82 + -81))\nwhile idx_fyx8 < len(list_vlm1):\n    _ = list_vlm1[idx_fyx8]\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_fyx8 = idx_fyx8 + (47 + -46)\nque = deque()\nque.append((6 + -5))\nseen = [(100 + -100)] * (N + (37 + -36))\nseen[(25 + -24)] = (50 + -49)\npar = [(82 + -82)] * (N + (81 + -80))\nchild_num = [(10 + -10)] * (N + (59 + -58))\nwhile que:\n    v = que.popleft()\n    idx_mrwb = (7 + -7)\n    list_480a = adj[v]\n    while idx_mrwb < len(list_480a):\n        u = list_480a[idx_mrwb]\n        if seen[u] == (20 + -20):\n            seen[u] = (88 + -87)\n            par[u] = v\n            child_num[v] += (7 + -6)\n            que.append(u)\n        idx_mrwb = idx_mrwb + (20 + -19)\nseq = deque()\nidx_x34h = (18 + -18)\nlist_mp2u = range((59 + -58), N + (23 + -22))\nwhile idx_x34h < len(list_mp2u):\n    i = list_mp2u[idx_x34h]\n    if child_num[i] == (20 + -20):\n        seq.append(i)\n    idx_x34h = idx_x34h + (23 + -22)\nwhile seq:\n    c = seq.pop()\n    seen[c] = (73 + -73)\n    if seen[par[c]] == (18 + -18):\n        print('First')\n        exit()\n    seen[par[c]] = (41 + -41)\n    child_num[par[par[c]]] -= (74 + -73)\n    if child_num[par[par[c]]] == (31 + -31):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC014_D_to_149", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = (78 + -78)\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nidx_e2qp = (16 + -16)\nlist_0cnv = range(n)\nwhile idx_e2qp < len(list_0cnv):\n    i = list_0cnv[idx_e2qp]\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: (47 + -47)})\n    if task.time > finish_time and remaining.empty():\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - (33 + -32)\n    idx_e2qp = idx_e2qp + (15 + -14)\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_2x8f = (7 + -7)\nlist_dtgj = result\nwhile idx_2x8f < len(list_dtgj):\n    key = list_dtgj[idx_2x8f]\n    print(result.get(key))\n    idx_2x8f = idx_2x8f + (23 + -22)\n", "id": "ConstantUnfoldding_sample_from_codeforces_644_B_to_150", "old_id": "codeforces_644_B"}
{"code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range((16 + -15), n + (7 + -6))]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range((80 + -79), n + (98 + -97))}\nidx_kpa9 = (90 + -90)\nlist_te35 = range(m)\nwhile idx_kpa9 < len(list_te35):\n    i = list_te35[idx_kpa9]\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    idx_kpa9 = idx_kpa9 + (31 + -30)\nc = (7 + -7)\nidx_7wmi = (39 + -39)\nlist_yv3s = list(path.items())\nwhile idx_7wmi < len(list_yv3s):\n    i, v = list_yv3s[idx_7wmi]\n    f = (19 + -19)\n    idx_fy17 = (70 + -70)\n    list_bmnu = v\n    while idx_fy17 < len(list_bmnu):\n        j = list_bmnu[idx_fy17]\n        if hp[i] <= hp[j]:\n            f = (1 + 0)\n            break\n        idx_fy17 = idx_fy17 + (89 + -88)\n    if f == (85 + -85):\n        c += (23 + -22)\n    idx_7wmi = idx_7wmi + (59 + -58)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC166_C_to_151", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit((5 + 5) ** (56 + -49))\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nidx_wzlc = (2 + -2)\nlist_9tg6 = range(N - (16 + -15))\nwhile idx_wzlc < len(list_9tg6):\n    i = list_9tg6[idx_wzlc]\n    a, b = map(int, input().split())\n    graph[a - (24 + -23)].append(b - (11 + -10))\n    graph[b - (6 + -5)].append(a - (6 + -5))\n    idx_wzlc = idx_wzlc + (44 + -43)\nmod = (62 + -52) ** (78 + -69) + (58 + -51)\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - (35 + -34) if f == K else K - (96 + -94)\n    idx_jil7 = (62 + -62)\n    list_f6dz = graph[fro]\n    while idx_jil7 < len(list_f6dz):\n        u = list_f6dz[idx_jil7]\n        if u == to:\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == (72 + -72):\n            caseNum = (13 + -13)\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= (66 + -65)\n        idx_jil7 = idx_jil7 + (88 + -87)\n    return caseNum\n\n\nans = dfs((72 + -72), - (79 + -78), K)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC133_E_to_152", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = sys.stdin.readline\nN = (32 + 336)\nm = [(29 + -29)] * N\nf = [(40 + -40)] * N\nidx_8zw1 = (98 + -98)\nlist_ez0m = range(int(input()))\nwhile idx_8zw1 < len(list_ez0m):\n    i = list_ez0m[idx_8zw1]\n    x, a, b = input()[: - (71 + -70)].split()\n    a = int(a)\n    b = int(b) + (53 + -52)\n    if x == 'M':\n        m[a] += (62 + -60)\n        m[b] -= (3 + -1)\n    else:\n        f[a] += (38 + -36)\n        f[b] -= (100 + -98)\n    idx_8zw1 = idx_8zw1 + (74 + -73)\na, b, c = (92 + -92), (62 + -62), (57 + -57)\nidx_x8as = (26 + -26)\nlist_l1ro = range(N)\nwhile idx_x8as < len(list_l1ro):\n    i = list_l1ro[idx_x8as]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\n    idx_x8as = idx_x8as + (93 + -92)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_codeforces_629_B_to_153", "old_id": "codeforces_629_B"}
{"code": "LUCKY = \"abcd\"\nn = int(input())\ns = \"\"\nidx_n4cr = (86 + -86)\nlist_s7rj = range(n)\nwhile idx_n4cr < len(list_s7rj):\n    i = list_s7rj[idx_n4cr]\n    s += LUCKY[i % (51 + -47)]\n    idx_n4cr = idx_n4cr + (19 + -18)\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_codeforces_110_B_to_154", "old_id": "codeforces_110_B"}
{"code": "r, D, x = map(int, input().split())\nidx_6i4y = (23 + -23)\nlist_hfde = range((23 + -21), (9 + 3))\nwhile idx_6i4y < len(list_hfde):\n    i = list_hfde[idx_6i4y]\n    print(int((r ** (i - (41 + -40))) * (x + D / ((28 + -27) - r)) - D / ((64 + -63) - r)))\n    idx_6i4y = idx_6i4y + (89 + -88)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_B_to_155", "old_id": "atcoder_ABC127_B"}
{"code": "n = int(input())\ninput_array = []\nidx_ds4c = (1 + -1)\nlist_od1k = range(n)\nwhile idx_ds4c < len(list_od1k):\n    i = list_od1k[idx_ds4c]\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\n    idx_ds4c = idx_ds4c + (13 + -12)\noutdated = []\nidx_xvju = (44 + -44)\nlist_ybzx = range(n)\nwhile idx_xvju < len(list_ybzx):\n    i = list_ybzx[idx_xvju]\n    idx_knib = (95 + -95)\n    list_j7mn = range(n)\n    while idx_knib < len(list_j7mn):\n        j = list_j7mn[idx_knib]\n        if (input_array[i][(4 + -4)] < input_array[j][(66 + -66)] and input_array[i][(41 + -40)] < input_array[j][(80 + -79)] and input_array[i][(86 + -84)] < input_array[j][(32 + -30)]):\n            outdated.append(input_array[i])\n        idx_knib = idx_knib + (17 + -16)\n    idx_xvju = idx_xvju + (26 + -25)\noutdated = set(outdated)\nminimum_cost = (79 + 99921)\ninput_number = (68 + -68)\nidx_u4kf = (45 + -45)\nlist_u9vd = range(n)\nwhile idx_u4kf < len(list_u9vd):\n    i = list_u9vd[idx_u4kf]\n    current_item = input_array[i]\n    cost = current_item[(27 + -24)]\n    if (current_item not in outdated and cost < minimum_cost):\n        minimum_cost = current_item[(94 + -91)]\n        input_number = i + (43 + -42)\n    idx_u4kf = idx_u4kf + (21 + -20)\nprint(input_number)\n", "id": "ConstantUnfoldding_sample_from_codeforces_106_B_to_156", "old_id": "codeforces_106_B"}
{"code": "s, l = (input(), (98 + 1921))\nm, a, r = ([(54 + -53)] + [(57 + -57)] * l, (89 + -89), (22 + -22))\nidx_my81 = (51 + -51)\nlist_ab6g = list(enumerate(s[:: - (47 + -46)]))\nwhile idx_my81 < len(list_ab6g):\n    i, e = list_ab6g[idx_my81]\n    a += int(e) * pow((48 + -38), i, l)\n    r += m[a % l]\n    m[a % l] += (100 + -99)\n    idx_my81 = idx_my81 + (39 + -38)\nprint(r)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC164_D_to_157", "old_id": "atcoder_ABC164_D"}
{"code": "t, m = map(int, input().split())\nalocuente = [(34 + -34)] * m\nind = (25 + -24)\nidx_k4ea = (46 + -46)\nlist_g0c8 = range(t)\nwhile idx_k4ea < len(list_g0c8):\n    i = list_g0c8[idx_k4ea]\n    op = input().split()\n    if op[(15 + -15)] == 'alloc':\n        pos = (46 + -46)\n        idx_c4n0 = (79 + -79)\n        list_hq82 = range(m)\n        while idx_c4n0 < len(list_hq82):\n            j = list_hq82[idx_c4n0]\n            if alocuente[j] == (85 + -85):\n                pos += (90 + -89)\n                if pos == int(op[(22 + -21)]):\n                    alocuente[j - int(op[(95 + -94)]) + (74 + -73): j + (19 + -18)] = [ind] * int(op[(36 + -35)])\n                    print(ind)\n                    ind += (23 + -22)\n                    break\n            else:\n                pos = (68 + -68)\n            idx_c4n0 = idx_c4n0 + (68 + -67)\n    if op[(34 + -34)] == 'erase':\n        pos = (73 + -73)\n        if int(op[(32 + -31)]) not in alocuente or int(op[(29 + -28)]) == (81 + -81):\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_vwzd = (60 + -60)\n            list_as1e = range(m)\n            while idx_vwzd < len(list_as1e):\n                j = list_as1e[idx_vwzd]\n                if int(op[(27 + -26)]) > (84 + -84) and alocuente[j] == int(op[(87 + -86)]):\n                    alocuente[j] = (33 + -33)\n                idx_vwzd = idx_vwzd + (87 + -86)\n    if op[(35 + -35)] == \"defragment\":\n        cnt = (84 + -84)\n        cnt = alocuente.count((86 + -86))\n        alocuente = [j for j in alocuente if j != (63 + -63)]\n        idx_k3d1 = (41 + -41)\n        list_rina = range(cnt)\n        while idx_k3d1 < len(list_rina):\n            j = list_rina[idx_k3d1]\n            alocuente.append((22 + -22))\n            idx_k3d1 = idx_k3d1 + (48 + -47)\n    idx_k4ea = idx_k4ea + (40 + -39)\n", "id": "ConstantUnfoldding_sample_from_codeforces_7_B_to_158", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = map(int, input().split())\n    count = [None] * n\n    idx_a9c7 = (1 + -1)\n    list_0ajo = range(n)\n    while idx_a9c7 < len(list_0ajo):\n        i = list_0ajo[idx_a9c7]\n        count[i] = [(84 + -84)] * n\n        idx_a9c7 = idx_a9c7 + (2 + -1)\n    ans = - (68 + -67)\n    idx_pjl2 = (77 + -77)\n    list_e3qx = range(m)\n    while idx_pjl2 < len(list_e3qx):\n        k = list_e3qx[idx_pjl2]\n        x, y = map(int, input().split())\n        x -= (49 + -48)\n        y -= (97 + -96)\n        found = False\n        idx_tfni = (53 + -53)\n        list_pfnk = range(x - (37 + -35), x + (90 + -89))\n        while idx_tfni < len(list_pfnk):\n            i = list_pfnk[idx_tfni]\n            idx_xvkn = (46 + -46)\n            list_p2g6 = range(y - (19 + -17), y + (17 + -16))\n            while idx_xvkn < len(list_p2g6):\n                j = list_p2g6[idx_xvkn]\n                if i >= (88 + -88) and i < n and j >= (74 + -74) and j < n:\n                    count[i][j] += (15 + -14)\n                    if count[i][j] == (11 + -2):\n                        found = True\n                idx_xvkn = idx_xvkn + (74 + -73)\n            idx_tfni = idx_tfni + (74 + -73)\n        if found:\n            ans = k + (80 + -79)\n            break\n        idx_pjl2 = idx_pjl2 + (12 + -11)\n    print(ans)\n\n\nsolve_case()\n", "id": "ConstantUnfoldding_sample_from_codeforces_203_B_to_159", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = (98 + -98)\nidx_1mhw = (14 + -14)\nlist_ra05 = pre + (24 + -23)\nwhile idx_1mhw < len(list_ra05):\n    i = list_ra05[idx_1mhw]\n    idx_ld9c = (29 + -29)\n    list_ex89 = itertools.combinations(pre, i)\n    while idx_ld9c < len(list_ex89):\n        j = list_ex89[idx_ld9c]\n        l.append(list(j))\n        idx_ld9c = idx_ld9c + (47 + -46)\n    idx_1mhw = idx_1mhw + (8 + -7)\nidx_937f = (29 + -29)\nlist_yhk8 = range((48 + -47), m + (53 + -52))\nwhile idx_937f < len(list_yhk8):\n    i = list_yhk8[idx_937f]\n    idx_et1y = (54 + -54)\n    list_72hd = list(enumerate(l))\n    while idx_et1y < len(list_72hd):\n        j, k = list_72hd[idx_et1y]\n        ca = (100 + -100)\n        idx_s67u = (71 + -71)\n        list_v7qk = k\n        while idx_s67u < len(list_v7qk):\n            ii = list_v7qk[idx_s67u]\n            ca += c[ii, i]\n            idx_s67u = idx_s67u + (33 + -32)\n        if ca < x:\n            rem.insert((57 + -57), j)\n        else:\n            pass\n        idx_et1y = idx_et1y + (50 + -49)\n    if len(rem) > (84 + -84):\n        idx_0371 = (2 + -2)\n        list_xvfj = rem\n        while idx_0371 < len(list_xvfj):\n            j = list_xvfj[idx_0371]\n            l.pop(j)\n            idx_0371 = idx_0371 + (93 + -92)\n        rem = []\n    if len(l) == (69 + -69):\n        print(- (86 + -85))\n        break\n    idx_937f = idx_937f + (91 + -90)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC167_C_to_160", "old_id": "atcoder_ABC167_C"}
{"code": "n = int(input())\nt = [(45 + -45)] + list(map(int, input().split()))\na = [(97 + -97)] + list(map(int, input().split()))\nans, cnt = [], [(98 + -98) for i in range(n + (59 + -58))]\nidx_g0p6 = (91 + -91)\nlist_6vhu = a\nwhile idx_g0p6 < len(list_6vhu):\n    i = list_6vhu[idx_g0p6]\n    cnt[i] += (74 + -73)\n    idx_g0p6 = idx_g0p6 + (50 + -49)\nidx_kda2 = (10 + -10)\nlist_p6vc = range((46 + -45), n + (75 + -74))\nwhile idx_kda2 < len(list_p6vc):\n    i = list_p6vc[idx_kda2]\n    if t[i] == (82 + -81):\n        crt = [i]\n        x = a[i]\n        while cnt[x] == (14 + -13):\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\n    idx_kda2 = idx_kda2 + (45 + -44)\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "ConstantUnfoldding_sample_from_codeforces_350_B_to_161", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(\" \")]\n    current_level = (58 + -58)\n    counter = (37 + -37)\n    counter_turns = - (15 + -14)\n    while counter < len(a):\n        counter_turns += (55 + -54)\n        idx_wjem = (100 + -100)\n        list_vt0p = range(len(a))\n        while idx_wjem < len(list_vt0p):\n            i = list_vt0p[idx_wjem]\n            if a[i] != - (37 + -36) and a[i] <= counter:\n                counter += (87 + -86)\n                a[i] = - (62 + -61)\n            idx_wjem = idx_wjem + (56 + -55)\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "ConstantUnfoldding_sample_from_codeforces_583_B_to_162", "old_id": "codeforces_583_B"}
{"code": "n = int(input())\na = list(map(int, input().split()))\nb = [(59 + -59)] * n\nidx_qnkz = (19 + -19)\nlist_clw2 = range(n)\nwhile idx_qnkz < len(list_clw2):\n    i = list_clw2[idx_qnkz]\n    b[a[i] - (25 + -24)] = i\n    idx_qnkz = idx_qnkz + (48 + -47)\nres = (77 + -77)\nidx_jsuk = (96 + -96)\nlist_8lp4 = range((25 + -24), n)\nwhile idx_jsuk < len(list_8lp4):\n    i = list_8lp4[idx_jsuk]\n    res += abs(b[i] - b[i - (52 + -51)])\n    idx_jsuk = idx_jsuk + (18 + -17)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_codeforces_612_B_to_163", "old_id": "codeforces_612_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = (67 + -67)\nl, r = map(int, input().split())\nidx_mksc = (41 + -41)\nlist_u9sp = range((5 + -4), n)\nwhile idx_mksc < len(list_u9sp):\n    i = list_u9sp[idx_mksc]\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\n    idx_mksc = idx_mksc + (22 + -21)\nprint(- (68 + -67) if id == n else id + (14 + -13))\n", "id": "ConstantUnfoldding_sample_from_codeforces_242_B_to_164", "old_id": "codeforces_242_B"}
{"code": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\n\nN = ri()\nans = (10 + -10)\nidx_dw3j = (82 + -82)\nlist_jib2 = range((80 + -79), N + (90 + -89))\nwhile idx_dw3j < len(list_jib2):\n    i = list_jib2[idx_dw3j]\n    ans += i * (N // i) * (N // i + (27 + -26)) // (2 + 0)\n    idx_dw3j = idx_dw3j + (81 + -80)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC172_D_to_165", "old_id": "atcoder_ABC172_D"}
{"code": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\nN, M = [int(x) for x in stdin.readline().split()]\nA = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\ncum_remainders = (np.hstack([(63 + -63), A]) % M).cumsum() % M\nremainder_counts = Counter(cum_remainders)\ncombinations = (41 + -41)\nidx_wleq = (61 + -61)\nlist_2nk9 = remainder_counts.values()\nwhile idx_wleq < len(list_2nk9):\n    count = list_2nk9[idx_wleq]\n    combinations += count * (count - (54 + -53)) // (23 + -21)\n    idx_wleq = idx_wleq + (77 + -76)\nprint(combinations)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC105_D_to_166", "old_id": "atcoder_ABC105_D"}
{"code": "a, b = map(int, input().split())\nc = (43 + -43)\nidx_tj5d = (93 + -93)\nlist_xvd8 = range((32 + -30))\nwhile idx_tj5d < len(list_xvd8):\n    i = list_xvd8[idx_tj5d]\n    c += max(a, b)\n    if a >= b:\n        a -= (5 + -4)\n    else:\n        b -= (100 + -99)\n    idx_tj5d = idx_tj5d + (38 + -37)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC124_A_to_167", "old_id": "atcoder_ABC124_A"}
{"code": "ip = input()\nst = \"\"\nif len(ip) != (11 + -10):\n    if ip[(4 + -4)] == \"9\":\n        st = \"9\"\n        ip = ip[(5 + -4):]\n    idx_acbn = (1 + -1)\n    list_41fb = ip\n    while idx_acbn < len(list_41fb):\n        i = list_41fb[idx_acbn]\n        if int(i) > (87 + -83):\n            n = (96 + -87) - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_acbn = idx_acbn + (58 + -57)\nelse:\n    st = ip\nprint(int(st))\n", "id": "ConstantUnfoldding_sample_from_codeforces_514_A_to_168", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit((29 + -19) ** (80 + -73))\ninf = (41 + -31) ** (41 + -21)\neps = 1.0 / (78 + -68) ** (42 + -32)\nmod = (13 + -3) ** (17 + -8) + (37 + -30)\ndd = [(- (34 + -33), (82 + -82)), ((100 + -100), (72 + -71)), ((10 + -9), (79 + -79)), ((52 + -52), - (41 + -40))]\nddn = [(- (61 + -60), (83 + -83)), (- (42 + -41), (23 + -22)), ((73 + -73), (40 + -39)), ((6 + -5), (37 + -36)),\n       ((55 + -54), (3 + -3)), ((70 + -69), - (71 + -70)), ((77 + -77), - (28 + -27)), (- (18 + -17), - (100 + -99))]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (85 + -84) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    k = I()\n    l = (13 + -13)\n    idx_dotm = (93 + -93)\n    list_xn3c = s\n    while idx_dotm < len(list_xn3c):\n        c = list_xn3c[idx_dotm]\n        if c != '1':\n            break\n        l += (69 + -68)\n        idx_dotm = idx_dotm + (75 + -74)\n    if l >= k:\n        return (59 + -58)\n    return s[l]\n\n\nprint(main())\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC106_C_to_169", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = int(input())\nans = [(98 + -98), (34 + -34)]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = (43 + -43)\nsum_p1 = (13 + -13)\nsum_p2 = (14 + -14)\nidx_9nig = (46 + -46)\nlist_0lmx = range(q)\nwhile idx_9nig < len(list_0lmx):\n    _ = list_0lmx[idx_9nig]\n    ql = list(map(int, input().split()))\n    if ql[(54 + -54)] == (94 + -92):\n        if len(p1) == len(p2):\n            print(- p2[(82 + -82)], sum_p1 - len(p1) * - p2[(57 + -57)] +\n                  len(p2) * - p2[(56 + -56)] - sum_p2 + sum_b)\n        else:\n            print(p1[(50 + -50)], sum_p1 - len(p1) * p1[(5 + -5)] +\n                  len(p2) * p1[(80 + -80)] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[(70 + -68)]\n        if len(p1) == (44 + -44):\n            heapq.heappush(p1, ql[(1 + 0)])\n            sum_p1 += ql[(15 + -14)]\n        elif p1[(25 + -25)] <= ql[(50 + -49)]:\n            heapq.heappush(p1, ql[(31 + -30)])\n            sum_p1 += ql[(91 + -90)]\n        else:\n            heapq.heappush(p2, - ql[(38 + -37)])\n            sum_p2 += ql[(62 + -61)]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - (56 + -55) > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    idx_9nig = idx_9nig + (88 + -87)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC127_F_to_170", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[(47 + -47)] for piece in pieces if piece[(51 + -50)] == 'B')\n    idx_6b95 = (57 + -57)\n    list_uk94 = pieces\n    while idx_6b95 < len(list_uk94):\n        piece = list_uk94[idx_6b95]\n        if piece[(59 + -58)] == 'A':\n            pScore += piece[(56 + -56)]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[(11 + -11)]\n        idx_6b95 = idx_6b95 + (76 + -75)\n    idx_w1jh = (38 + -38)\n    list_ea4u = range(len(pieces) - (62 + -61), - (38 + -37), - (63 + -62))\n    while idx_w1jh < len(list_ea4u):\n        i = list_ea4u[idx_w1jh]\n        if pieces[i][(9 + -8)] == 'A':\n            sScore += pieces[i][(20 + -20)]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][(87 + -87)]\n        idx_w1jh = idx_w1jh + (12 + -11)\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "id": "ConstantUnfoldding_sample_from_codeforces_632_B_to_171", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= (14 + -14) and j >= (87 + -87) and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / (84 + -82)\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - (93 + -89) * a * c)) / (68 + -66) * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    idx_eyb7 = (51 + -51)\n    list_g4uk = s\n    while idx_eyb7 < len(list_g4uk):\n        i = list_g4uk[idx_eyb7]\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n        idx_eyb7 = idx_eyb7 + (98 + -97)\n    return r\n\n\ndef solve():\n    l = []\n    idx_rtd5 = (23 + -23)\n    list_3ais = range((100 + -97))\n    while idx_rtd5 < len(list_3ais):\n        i = list_3ais[idx_rtd5]\n        l.append(f(input()))\n        idx_rtd5 = idx_rtd5 + (48 + -47)\n    t = itertools.permutations(l, len(l))\n    l = []\n    idx_61cp = (100 + -100)\n    list_5dja = t\n    while idx_61cp < len(list_5dja):\n        i = list_5dja[idx_61cp]\n        l.append(\"\".join(i))\n        idx_61cp = idx_61cp + (24 + -23)\n    idx_btap = (9 + -9)\n    list_hy98 = range(inp())\n    while idx_btap < len(list_hy98):\n        i = list_hy98[idx_btap]\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\n        idx_btap = idx_btap + (55 + -54)\n\n\nif __name__ == \"__main__\":\n    solve()\n", "id": "ConstantUnfoldding_sample_from_codeforces_61_B_to_172", "old_id": "codeforces_61_B"}
{"code": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float('inf')\nans = (67 + -67)\na.sort(reverse=True)\nidx_an23 = (3 + -3)\nlist_8yrx = range(n)\nwhile idx_an23 < len(list_8yrx):\n    j = list_8yrx[idx_an23]\n    ans += max((30 + -30), min(pre - (99 + -98), a[j]))\n    pre = max((56 + -56), min(pre - (73 + -72), a[j]))\n    idx_an23 = idx_an23 + (24 + -23)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_codeforces_624_B_to_173", "old_id": "codeforces_624_B"}
{"code": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != (67 + -65):\n    print(\"No\")\n    exit()\nidx_rcgz = (12 + -12)\nlist_7di9 = Sa\nwhile idx_rcgz < len(list_7di9):\n    i = list_7di9[idx_rcgz]\n    if c[i] != (59 + -57):\n        print(\"No\")\n        exit()\n    idx_rcgz = idx_rcgz + (7 + -6)\nprint(\"Yes\")\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC132_A_to_174", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    idx_h6ql = (28 + -28)\n    list_gd6j = range(n)\n    while idx_h6ql < len(list_gd6j):\n        i = list_gd6j[idx_h6ql]\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_h6ql = idx_h6ql + (48 + -47)\n    low.sort()\n    high.sort()\n    if n % (43 + -41):\n        print(high[(n + (15 + -14)) // (19 + -17) - (30 + -29)] - low[(n + (81 + -80)) // (2 + 0) - (62 + -61)] + (22 + -21))\n    else:\n        hh = (high[(n) // (63 + -61) - (37 + -36)] + high[(n) // (26 + -24)]) / (73 + -71)\n        ll = (low[(n) // (34 + -32) - (79 + -78)] + low[(n) // (73 + -71)]) / (34 + -32)\n        print(int((hh - ll) * (59 + -57)) + (6 + -5))\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC169_E_to_175", "old_id": "atcoder_ABC169_E"}
{"code": "n = int(input())\nl = [(39 + -39) for _ in range((42 + 999968))]\ndp = [(10 + -10) for _ in range((62 + 999948))]\nidx_elv4 = (57 + -57)\nlist_dg94 = range(n)\nwhile idx_elv4 < len(list_dg94):\n    i = list_dg94[idx_elv4]\n    a, b = map(int, input().split())\n    l[a] = b\n    idx_elv4 = idx_elv4 + (62 + -61)\nif l[(7 + -7)] > (47 + -47):\n    dp[(60 + -60)] = (63 + -62)\nmx = (47 + -47)\nidx_qt5l = (3 + -3)\nlist_9k6x = range((45 + -44), (26 + 999984))\nwhile idx_qt5l < len(list_9k6x):\n    i = list_9k6x[idx_qt5l]\n    if (l[i] == (89 + -89)):\n        dp[i] = dp[i - (20 + -19)]\n    else:\n        if (l[i] >= i):\n            dp[i] = (10 + -9)\n        else:\n            dp[i] = dp[i - l[i] - (10 + -9)] + (40 + -39)\n    if (dp[i] > mx):\n        mx = dp[i]\n    idx_qt5l = idx_qt5l + (53 + -52)\nprint(n - mx)\n", "id": "ConstantUnfoldding_sample_from_codeforces_607_A_to_176", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = map(int, open((53 + -53)).read().split())\nXY = list(zip(* [iter(XY)] * (41 + -39)))\nidx_olxg = (34 + -34)\nlist_hsgq = list(enumerate(XY))\nwhile idx_olxg < len(list_hsgq):\n    i, (x, y) = list_hsgq[idx_olxg]\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[(88 + -88)] + (87 + -85) * pi)\n    ans = (67 + -67)\n    idx_pgye = (86 + -86)\n    list_t8bl = zip(D, D[(35 + -34):])\n    while idx_pgye < len(list_t8bl):\n        a, b = list_t8bl[idx_pgye]\n        if b - a >= pi:\n            ans = (b - a) - pi\n        idx_pgye = idx_pgye + (16 + -15)\n    print(ans / ((50 + -48) * pi))\n    idx_olxg = idx_olxg + (29 + -28)\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC021_B_to_177", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = (95 + -95)\nVAL = (11 + -10)\nN, T = [int(a) for a in input().split()]\ntime_value = [(- (61 + -60), - (18 + -17))] + [None] * (N)\nidx_9e32 = (23 + -23)\nlist_3gu8 = range((72 + -71), N + (66 + -65))\nwhile idx_9e32 < len(list_3gu8):\n    i = list_3gu8[idx_9e32]\n    time_value[i] = tuple(int(a) for a in input().split())\n    idx_9e32 = idx_9e32 + (70 + -69)\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- (46 + -45)] * T for _ in range(N + (31 + -30))]\nidx_5qy4 = (37 + -37)\nlist_f8h4 = range((12 + -12), T)\nwhile idx_5qy4 < len(list_f8h4):\n    t = list_f8h4[idx_5qy4]\n    dp[(97 + -97)][t] = (98 + -98)\n    idx_5qy4 = idx_5qy4 + (21 + -20)\nidx_7vcb = (57 + -57)\nlist_2bfy = range((48 + -47), N + (98 + -97))\nwhile idx_7vcb < len(list_2bfy):\n    n = list_2bfy[idx_7vcb]\n    dp[n][(57 + -57)] = (28 + -28)\n    idx_ael6 = (51 + -51)\n    list_5ygv = range((7 + -6), T)\n    while idx_ael6 < len(list_5ygv):\n        t = list_5ygv[idx_ael6]\n        if time_value[n][TIME] > t:\n            dp[n][t] = dp[n - (38 + -37)][t]\n        else:\n            dp[n][t] = max(dp[n - (34 + -33)][t], time_value[n][VAL] +\n                           dp[n - (1 + 0)][t - time_value[n][TIME]])\n        idx_ael6 = idx_ael6 + (43 + -42)\n    idx_7vcb = idx_7vcb + (84 + -83)\nval_acum = time_value[N][VAL]\nt = T - (24 + -23)\nmax_val = val_acum + dp[N - (97 + -96)][t]\nidx_l3t1 = (37 + -37)\nlist_7a38 = range(N - (100 + -99), (78 + -78), - (49 + -48))\nwhile idx_l3t1 < len(list_7a38):\n    n = list_7a38[idx_l3t1]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + (38 + -37)][TIME]\n    if t < (27 + -27):\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - (39 + -38)][t])\n    idx_l3t1 = idx_l3t1 + (90 + -89)\nprint(max_val)\n", "id": "ConstantUnfoldding_sample_from_atcoder_ABC145_E_to_178", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    idx_kz9j = (98 + -98)\n    list_b80g = range(H)\n    while idx_kz9j < len(list_b80g):\n        i = list_b80g[idx_kz9j]\n        idx_u62z = (46 + -46)\n        list_e7n2 = range(W)\n        while idx_u62z < len(list_e7n2):\n            j = list_e7n2[idx_u62z]\n            if i < B:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n            idx_u62z = idx_u62z + (89 + -88)\n        idx_kz9j = idx_kz9j + (63 + -62)\n    idx_v0gk = (37 + -37)\n    list_qn6i = range(H)\n    while idx_v0gk < len(list_qn6i):\n        i = list_qn6i[idx_v0gk]\n        print(''.join(answer[i]))\n        idx_v0gk = idx_v0gk + (86 + -85)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_suql = (33 + -33)\n        list_k1qw = sys.stdin\n        while idx_suql < len(list_k1qw):\n            line = list_k1qw[idx_suql]\n            idx_9gr6 = (94 + -94)\n            list_6btc = line.split()\n            while idx_9gr6 < len(list_6btc):\n                word = list_6btc[idx_9gr6]\n                yield word\n                idx_9gr6 = idx_9gr6 + (57 + -56)\n            idx_suql = idx_suql + (84 + -83)\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "id": "ConstantUnfoldding_sample_from_atcoder_AGC038_A_to_179", "old_id": "atcoder_AGC038_A"}
