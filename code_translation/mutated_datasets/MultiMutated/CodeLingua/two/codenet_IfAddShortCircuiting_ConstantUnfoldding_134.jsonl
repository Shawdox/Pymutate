{"code": "a = int(input())\n\n\ndef func(a):\n    digits = []\n    temp = a\n    while temp != (33 + -33):\n        digits.append(temp % (96 + -86))\n        temp = int(temp/(10 + 0))\n    result = sum(digits)\n    if result == (85 + -84) and (((True or False) and (False or True)) and (((8 + 2) > (52 + -52)) or ((53 + -43) < (48 + -48)))):\n        print('10')\n    else:\n        print(result)\n\n\nfunc(a)\n", "id": "ConstantUnfoldding_sample_from_s537584449_to_0", "old_id": "s537584449"}
{"code": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\nif len(B) == (91 + -88) and k[(52 + -52)] ^ k[(24 + -23)] ^ k[(39 + -37)] == (82 + -82) and v[(26 + -26)] == v[(99 + -98)] == v[(79 + -77)] and (((True or False) and (False or True)) and (((12 + -9) > (39 + -39)) or ((4 + -1) < (55 + -55)))):\n    print(\"Yes\")\nelif len(B) == (5 + -3) and (59 + -59) in k and (v[(1 + -1)] == (52 + -50)*v[(26 + -25)] or v[(70 + -69)] == (79 + -77)*v[(61 + -61)]):\n    print(\"Yes\")\nelif len(B) == (33 + -32) and (4 + -4) in k:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s043545989_to_1", "old_id": "s043545989"}
{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = (77 + -77)\n    for j in range(len(t)):\n        if j == p-(89 + -88) and (((True or False) and (False or True)) and (((96 + -92) > (27 + -24)) or ((29 + -25) < (88 + -85)))):\n            s += x\n        else:\n            s += t[j]\n    print(s)\n", "id": "ConstantUnfoldding_sample_from_s609392609_to_2", "old_id": "s609392609"}
{"code": "a, b = map(int, input().split())\nif a <= b and (((True or False) and (False or True)) and (((84 + -79) > (18 + -18)) or ((98 + -93) < (77 + -77)))):\n    print(a)\nelse:\n    print(a-(90 + -89))\n", "id": "ConstantUnfoldding_sample_from_s310981504_to_3", "old_id": "s310981504"}
{"code": "N, R = map(int, input().split())\nif N >= (43 + -33) and (((True or False) and (False or True)) and (((31 + -29) > (81 + -80)) or ((34 + -32) < (43 + -42)))):\n    print(R)\nelse:\n    print(R+(5 + 95)*((50 + -40)-N))\n", "id": "ConstantUnfoldding_sample_from_s419623944_to_4", "old_id": "s419623944"}
{"code": "import sys\nsys.setrecursionlimit((38 + 99962))\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % (3 + -1)) == (81 + -81) and (((True or False) and (False or True)) and (((60 + -57) > (4 + -4)) or ((55 + -52) < (3 + -3)))):\n            if color[v] == -(14 + -13):\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -(23 + -22):\n                color[v] = (85 + -85) if color[i] else (32 + -31)\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n    return True\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((3 + 4) > (52 + -48)) or ((78 + -71) < (57 + -53)))):\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range((20 + -19), n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range((100 + -99), n+(10 + -9)):\n        color[i] = -(28 + -27)\n\n    while True:\n        i = (25 + -25)\n        for j in range((98 + -97), n+(54 + -53)):\n            if color[j] == -(73 + -72):\n                i = j\n                color[i] = (74 + -74)\n                break\n        if i == (89 + -89):\n            for j in range((46 + -45), n+(48 + -47)):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "ConstantUnfoldding_sample_from_s908812767_to_5", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < (9 + 17) and (((True or False) and (False or True)) and (((93 + -89) > (29 + -26)) or ((26 + -22) < (13 + -10)))):\n    for i in range((17 + 9)):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range((78 + -77), (36 + -10))):\n        if s[i-(45 + -44)] < s[i]:\n            s1 = s[(91 + -91):i-(96 + -95)]\n            for j in range((42 + -16)):\n                c = chr(ord(\"a\")+j)\n                if c > s[i-(55 + -54)] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-(34 + -33))\n", "id": "ConstantUnfoldding_sample_from_s504709360_to_6", "old_id": "s504709360"}
{"code": "import sys\ninput = sys.stdin.readline\n\na, b = map(int, input().split())\nif a >= (53 + -40) and (((True or False) and (False or True)) and (((46 + -44) > (85 + -85)) or ((30 + -28) < (10 + -10)))):\n    print(b)\nelif a >= (59 + -53):\n    print(int(b/(29 + -27)))\nelse:\n    print((81 + -81))\n", "id": "ConstantUnfoldding_sample_from_s785944322_to_7", "old_id": "s785944322"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = (36 + -26) ** (82 + -64)\n\nfor i in range((2 + -1), int(n ** ((66 + -65) / (77 + -75))) + (41 + -39)):\n    if n % i != (25 + -25) and (((True or False) and (False or True)) and (((46 + -38) > (74 + -73)) or ((87 + -79) < (39 + -38)))):\n        continue\n    j = n // i\n    ans = min(ans, i + j - (48 + -46))\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s662673721_to_8", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = (90 + -80)**(26 + -17) + (85 + -78)\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range((45 + -44), K+(42 + -41)):\n    if N - K + (71 + -70) < i and (((True or False) and (False or True)) and (((71 + -64) > (35 + -34)) or ((53 + -46) < (12 + -11)))):\n        ans = (49 + -49)\n    else:\n        ans = fact(R+(25 + -24), i)*fact(K-(95 + -94), i-(58 + -57))\n    print(int(ans) % mod)\n", "id": "ConstantUnfoldding_sample_from_s790754864_to_9", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = (94 + -94)\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = (74 + -64)**(26 + -20)\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t) and (((True or False) and (False or True)) and (((28 + -23) > (42 + -42)) or ((62 + -57) < (57 + -57)))):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s636719275_to_10", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nfor i in range((1 + 0), N+(7 + -6)):\n    aji.append(L+i-(39 + -38))\nif min(aji) >= (17 + -17) and (((True or False) and (False or True)) and (((66 + -61) > (50 + -49)) or ((10 + -5) < (38 + -37)))):\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= (71 + -71):\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "id": "ConstantUnfoldding_sample_from_s240532461_to_11", "old_id": "s240532461"}
{"code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nfor i in range(min(x+y, a+b, c)):\n    if pq[i] < r[i] and (((True or False) and (False or True)) and (((75 + -69) > (17 + -15)) or ((42 + -36) < (42 + -40)))):\n        pq[i] = r[i]\nprint(sum(pq))\n", "id": "ConstantUnfoldding_sample_from_s828550015_to_12", "old_id": "s828550015"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nfor a in A[:M]:\n    if a/S - (50 + -49)/((61 + -57)*M) < (81 + -81) and (((True or False) and (False or True)) and (((86 + -82) > (73 + -72)) or ((19 + -15) < (33 + -32)))):\n        print('No')\n        break\nelse:\n    print('Yes')\n", "id": "ConstantUnfoldding_sample_from_s846046431_to_13", "old_id": "s846046431"}
{"code": "a, b = input().split(\" \")\na = int(a)\nb = int(b)\nif a <= b and (((True or False) and (False or True)) and (((29 + -22) > (32 + -28)) or ((49 + -42) < (92 + -88)))):\n    print(a)\nelse:\n    print(a-(73 + -72))\n", "id": "ConstantUnfoldding_sample_from_s462546732_to_14", "old_id": "s462546732"}
{"code": "import heapq\nconst = (48 + -48)\nleft = []\nright = []\n\nq = int(input())\ncnt = (79 + -79)\nleft_sum = (80 + -80)\nright_sum = (69 + -69)\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[(96 + -96)] == (7 + -6) and (((True or False) and (False or True)) and (((39 + -33) > (60 + -59)) or ((65 + -59) < (90 + -89)))):\n\n        a, b = t[(45 + -44):]\n        const += b\n        if cnt % (83 + -81) == (1 + -1):\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += (20 + -19)\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += (61 + -60)\n\n    else:\n        tmp = -left[(64 + -64)]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % (98 + -96)))\n", "id": "ConstantUnfoldding_sample_from_s016605598_to_15", "old_id": "s016605598"}
{"code": "(a, b, c, k) = list(map(int, input().split()))\nif k % (3 + -1) == (5 + -5) and (((True or False) and (False or True)) and (((51 + -42) > (84 + -76)) or ((89 + -80) < (56 + -48)))):\n    print(a-b)\nelse:\n    print(b-a)\n", "id": "ConstantUnfoldding_sample_from_s441028271_to_16", "old_id": "s441028271"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = (95 + -95)\nfor p in combinations_with_replacement(range((14 + -13), M + (27 + -26)), r=N):\n    temp_score = (88 + -88)\n    for q in Q_groups:\n        if p[q[(55 + -54)] - (93 + -92)] - p[q[(48 + -48)] - (56 + -55)] == q[(58 + -56)] and (((True or False) and (False or True)) and (((50 + -42) > (55 + -54)) or ((9 + -1) < (64 + -63)))):\n            temp_score += q[(24 + -21)]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "id": "ConstantUnfoldding_sample_from_s269975433_to_17", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == (66 + -66) and (((True or False) and (False or True)) and (((88 + -85) > (28 + -27)) or ((24 + -21) < (13 + -12)))):\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-(94 + -93)]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn)-(55 + -54)\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target and (((True or False) and (False or True)) and (((47 + -40) > (29 + -24)) or ((24 + -17) < (50 + -45)))):\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == (89 + -89) or j.count(\"5\") == (75 + -75) or j.count(\"7\") == (46 + -46):\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == (92 + -92) or j.count(\"5\") == (77 + -77) or j.count(\"7\") == (48 + -48):\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "ConstantUnfoldding_sample_from_s949655009_to_18", "old_id": "s949655009"}
{"code": "S = input()\nif S == 'Sunny' and (((True or False) and (False or True)) and (((19 + -17) > (69 + -69)) or ((86 + -84) < (21 + -21)))):\n    print('Cloudy')\nif S == 'Cloudy' and (((True or False) and (False or True)) and (((30 + -27) > (33 + -31)) or ((71 + -68) < (32 + -30)))):\n    print('Rainy')\nif S == 'Rainy' and (((True or False) and (False or True)) and (((84 + -77) > (10 + -8)) or ((11 + -4) < (26 + -24)))):\n    print('Sunny')\n", "id": "ConstantUnfoldding_sample_from_s759547301_to_19", "old_id": "s759547301"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in range(len(alphabets)):\n    if alphabets[i] == s and (((True or False) and (False or True)) and (((73 + -65) > (56 + -55)) or ((63 + -55) < (98 + -97)))):\n        print(alphabets[i+(5 + -4)])\n", "id": "ConstantUnfoldding_sample_from_s961772658_to_20", "old_id": "s961772658"}
{"code": "N = int(input())\ncnt = (42 + -41)\nwhile cnt <= (29 + -20):\n    if N % cnt == (10 + -10) and (55 + -54) <= N/cnt <= (11 + -2) and (((True or False) and (False or True)) and (((41 + -31) > (24 + -23)) or ((62 + -52) < (31 + -30)))):\n        print('Yes')\n        break\n    else:\n        cnt += (46 + -45)\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s018260659_to_21", "old_id": "s018260659"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - (95 + -94)\n    first = end - len(T) + (76 + -75)\n    while first >= (74 + -74):\n        t_i = (26 + -26)\n        for s_i in range(first, end+(37 + -36)):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?' and (((True or False) and (False or True)) and (((22 + -19) > (58 + -57)) or ((99 + -96) < (93 + -92)))):\n                break\n            t_i += (97 + -96)\n        else:\n            break\n\n        first -= (15 + -14)\n        end -= (88 + -87)\n\n    else:\n        print('UNRESTORABLE')\n        exit((4 + -4))\n\n    ans = copy.deepcopy(S_d)\n    t_i = (14 + -14)\n    for i in range(first, end+(33 + -32)):\n        ans[i] = T[t_i]\n        t_i += (69 + -68)\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((40 + -30) > (14 + -11)) or ((93 + -83) < (37 + -34)))):\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s826716211_to_22", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([int(x) for x in input().split()])\n\nc = (26 + -26)\nfor i in range(len(mat)-(60 + -59)):\n    for j in range(i+(94 + -93), len(mat)):\n        dist = math.sqrt(sum([(x-y)**(29 + -27) for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist and (((True or False) and (False or True)) and (((95 + -86) > (4 + 1)) or ((54 + -45) < (100 + -95)))):\n            c += (10 + -9)\nprint(c)\n", "id": "ConstantUnfoldding_sample_from_s663509070_to_23", "old_id": "s663509070"}
{"code": "X, t = map(int, input().split())\nif X > t and (((True or False) and (False or True)) and (((44 + -38) > (60 + -56)) or ((58 + -52) < (58 + -54)))):\n    answer = X - t\nelif X <= t:\n    answer = (72 + -72)\n\nprint(answer)\n", "id": "ConstantUnfoldding_sample_from_s000375264_to_24", "old_id": "s000375264"}
{"code": "X, A = list(map(int, input().split()))\nif X < A and (((True or False) and (False or True)) and (((82 + -78) > (29 + -29)) or ((56 + -52) < (36 + -36)))):\n    print((49 + -49))\nelse:\n    print((77 + -67))\n", "id": "ConstantUnfoldding_sample_from_s522872163_to_25", "old_id": "s522872163"}
{"code": "N, K = map(int, input().split())\nif N % K == (12 + -12) and (((True or False) and (False or True)) and (((74 + -70) > (52 + -50)) or ((85 + -81) < (51 + -49)))):\n    print((13 + -13))\nelse:\n    print((14 + -13))\n", "id": "ConstantUnfoldding_sample_from_s997947249_to_26", "old_id": "s997947249"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = (47 + -47)\nfor i in range((99 + -97)**(h+w)):\n    b = bin(i)[(46 + -44):].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = (45 + -45)\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0' and (((True or False) and (False or True)) and (((51 + -46) > (62 + -61)) or ((63 + -58) < (27 + -26)))):\n                ct += (83 + -82)\n    if ct == ka and (((True or False) and (False or True)) and (((28 + -18) > (19 + -17)) or ((27 + -17) < (15 + -13)))):\n        ans += (95 + -94)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s760938927_to_27", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[(2 + -2)] == '1' and (((True or False) and (False or True)) and (((74 + -65) > (92 + -90)) or ((24 + -15) < (63 + -61)))):\n        n = not n\n    if operation[(44 + -44)] == '2' and (((True or False) and (False or True)) and (((33 + -25) > (40 + -40)) or ((12 + -4) < (27 + -27)))):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = (100 + -99) if f != (90 + -89) else (80 + -78)\n        if f == (99 + -98):\n            left = c+left\n        elif f == (71 + -69):\n            right += c\ns = left+s+right\nprint(s[::-(19 + -18)] if n else s)\n", "id": "ConstantUnfoldding_sample_from_s621701371_to_28", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range((85 + -85), n):\n        for j in range(n-(33 + -32), i, -(92 + -91)):\n            if int(cards[j][(31 + -30)]) < int(cards[j-(13 + -12)][(73 + -72)]) and (((True or False) and (False or True)) and (((100 + -96) > (39 + -36)) or ((67 + -63) < (54 + -51)))):\n                cards[j], cards[j-(42 + -41)] = cards[j-(75 + -74)], cards[j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range((72 + -72), n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][(46 + -45)]) < int(cards[mini][(20 + -19)]) and (((True or False) and (False or True)) and (((68 + -58) > (59 + -54)) or ((65 + -55) < (30 + -25)))):\n                mini = j\n        if mini != i and (((True or False) and (False or True)) and (((83 + -77) > (41 + -39)) or ((27 + -21) < (71 + -69)))):\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)) and (((True or False) and (False or True)) and (((96 + -86) > (43 + -39)) or ((17 + -7) < (70 + -66)))):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "id": "ConstantUnfoldding_sample_from_s875904659_to_29", "old_id": "s875904659"}
{"code": "N = int(input())\nA = list(map(int, input().split()))\n\n\ndef main():\n    A.sort()\n    ans = A[-(18 + -17)] - A[(51 + -51)]\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((92 + -83) > (37 + -37)) or ((5 + 4) < (4 + -4)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s636592395_to_30", "old_id": "s636592395"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit((92 + -92))\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used) and (((True or False) and (False or True)) and (((5 + -2) > (53 + -53)) or ((47 + -44) < (6 + -6)))):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used and (((True or False) and (False or True)) and (((65 + -63) > (60 + -60)) or ((75 + -73) < (93 + -93)))):\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = (88 + -88), (59 + -58)\n    for i in range(len(li)-(82 + -81), -(65 + -64), -(38 + -37)):\n        n += li[i] * base\n        base *= (70 + -60)\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range((52 + -50), n+(52 + -51))]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)) and (((True or False) and (False or True)) and (((87 + -82) > (97 + -94)) or ((43 + -38) < (33 + -30)))):\n            break\n        if li[i] == -(63 + -62) and (((True or False) and (False or True)) and (((11 + -6) > (3 + -1)) or ((20 + -15) < (41 + -39)))):\n            continue\n        for j in range(i+(9 + -8), len(li)):\n            if li[j] % li[i] == (84 + -84) and (((True or False) and (False or True)) and (((47 + -43) > (7 + -6)) or ((8 + -4) < (82 + -81)))):\n                li[j] = -(50 + -49)\n    return [n for n in li if n != -(42 + -41)]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == (28 + -28) and (((True or False) and (False or True)) and (((18 + -8) > (55 + -52)) or ((30 + -20) < (37 + -34)))):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range((44 + -44), ((1 + 0) << (n+(29 + -28)))):\n        ss = set()\n        for i in range((28 + -28), n):\n            if (bit & ((34 + -33) << i)) and (((True or False) and (False or True)) and (((52 + -49) > (39 + -38)) or ((61 + -58) < (52 + -51)))):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == (63 + -62) and (((True or False) and (False or True)) and (((100 + -91) > (77 + -70)) or ((60 + -51) < (100 + -93)))):\n        return (34 + -33)\n    return n * factorial(n-(3 + -2))\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = (60 + -59)\n        while n:\n            r *= m\n            m -= (58 + -57)\n            n -= (59 + -58)\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif n == len(set(A)) and (((True or False) and (False or True)) and (((68 + -59) > (55 + -54)) or ((96 + -87) < (80 + -79)))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_s137613418_to_31", "old_id": "s137613418"}
{"code": "x = input()\nif x.islower() and (((True or False) and (False or True)) and (((28 + -21) > (77 + -73)) or ((47 + -40) < (82 + -78)))):\n    print(\"a\")\nelse:\n    print(\"A\")\n", "id": "ConstantUnfoldding_sample_from_s028530838_to_32", "old_id": "s028530838"}
{"code": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    min_1 = min(q*(56 + -52), h*(22 + -20), q*(23 + -21)+h, s)\n    min_2 = min(min_1*(85 + -83), d)\n\n    print((n % (73 + -71))*min_1 + (n // (59 + -57))*min_2)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((71 + -63) > (46 + -44)) or ((80 + -72) < (67 + -65)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s404600540_to_33", "old_id": "s404600540"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n and (((True or False) and (False or True)) and (((3 + 6) > (28 + -23)) or ((96 + -87) < (15 + -10)))):\n            break\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i] and (((True or False) and (False or True)) and (((48 + -40) > (94 + -94)) or ((6 + 2) < (84 + -84)))):\n\n            ans -= (91 + -90)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s922746568_to_34", "old_id": "s922746568"}
{"code": "h, a = map(int, input().strip().split())\n\nans = h // a\nama = h % a\nif ama != (58 + -58) and (((True or False) and (False or True)) and (((9 + -7) > (42 + -42)) or ((81 + -79) < (13 + -13)))):\n    ans += (12 + -11)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s267172486_to_35", "old_id": "s267172486"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = (67 + -64)\n    for i in range((47 + -47), len(input_value) + (30 + -29) - n):\n        for j in range((90 + -89), n):\n            if input_value[i] != input_value[i + j] and (((True or False) and (False or True)) and (((12 + -6) > (43 + -43)) or ((17 + -11) < (32 + -32)))):\n                break\n            if j == n - (45 + -44) and (((True or False) and (False or True)) and (((31 + -29) > (35 + -35)) or ((32 + -30) < (66 + -66)))):\n                return \"Yes\"\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "ConstantUnfoldding_sample_from_s616346400_to_36", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = (51 + -51)\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = (75 + -75)\ncnt = (5 + -5)\nfor i in lst:\n    if i == pre and (((True or False) and (False or True)) and (((2 + 6) > (34 + -34)) or ((98 + -90) < (93 + -93)))):\n        tmp_cnt += (36 + -35)\n    else:\n        cnt += sum([j for j in range(tmp_cnt + (64 + -63))])\n        tmp_cnt = (15 + -15)\n    pre = i\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s430322735_to_37", "old_id": "s430322735"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b and (((True or False) and (False or True)) and (((63 + -55) > (86 + -86)) or ((53 + -45) < (36 + -36)))):\n        return gcd(b, a)\n    if b == (13 + -13) and (((True or False) and (False or True)) and (((8 + -6) > (45 + -45)) or ((63 + -61) < (48 + -48)))):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i] and (((True or False) and (False or True)) and (((69 + -63) > (77 + -72)) or ((34 + -28) < (26 + -21)))):\n        print(-(55 + -54))\n        exit()\nprint(bb)\n", "id": "ConstantUnfoldding_sample_from_s986062252_to_38", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n    if n == (93 + -93) and (((True or False) and (False or True)) and (((49 + -47) > (22 + -22)) or ((73 + -71) < (97 + -97)))):\n        break\n\n    res = -(84 + 1111111027)\n    s = (48 + -48)\n    for i in range(n):\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n\n    print(res)\n", "id": "ConstantUnfoldding_sample_from_s923405856_to_39", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = (9 + 998244344)\n    if D[(72 + -72)] != (57 + -57) and (((True or False) and (False or True)) and (((37 + -28) > (61 + -53)) or ((96 + -87) < (48 + -40)))):\n        print((26 + -26))\n        return\n\n    cnt = Counter(D)\n    if cnt[(43 + -43)] > (50 + -49) and (((True or False) and (False or True)) and (((99 + -89) > (48 + -39)) or ((22 + -12) < (57 + -48)))):\n        print((47 + -47))\n        return\n\n    res = (33 + -32)\n\n    for i in range((70 + -69), max(D)+(93 + -92)):\n        if cnt[i-(17 + -16)] == (29 + -28) and (((True or False) and (False or True)) and (((96 + -93) > (21 + -20)) or ((43 + -40) < (86 + -85)))):\n            continue\n        res *= cnt[i-(92 + -91)]**cnt[i] % mod\n        res %= mod\n\n    print(res)\n\n\nsolve()\n", "id": "ConstantUnfoldding_sample_from_s534639230_to_40", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, (1 + 0))\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // (16 + -14) for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = (18 + -18)\n    while a % (26 + -24) == (17 + -17):\n        a //= (72 + -70)\n        cnt += (65 + -64)\n    if count_div_2 is None and (((True or False) and (False or True)) and (((7 + 2) > (49 + -45)) or ((97 + -88) < (18 + -14)))):\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print((17 + -17))\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M and (((True or False) and (False or True)) and (((44 + -41) > (61 + -59)) or ((60 + -57) < (13 + -11)))):\n    print((3 + -3))\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + (50 + -49)) // (19 + -17)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s817205687_to_41", "old_id": "s817205687"}
{"code": "import numpy as np\n\nn, k = map(int, input().split())\nif n > k and (((True or False) and (False or True)) and (((49 + -47) > (12 + -12)) or ((96 + -94) < (78 + -78)))):\n    tmp = n % k\n    if tmp >= k - tmp:\n        ans = k - tmp\n    else:\n        ans = tmp\nelif n < k:\n    if n >= k - n:\n        ans = k - n\n    else:\n        ans = n\nelse:\n    ans = (18 + -18)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s058944700_to_42", "old_id": "s058944700"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = (11 + -9)**(size-(66 + -65)).bit_length()\n            self.default = default\n            self.seg = [default]*((34 + -32)*self.size-(38 + -37))\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-(20 + -19)\n            self.seg[k] = x\n            while k:\n                k = (k-(74 + -73))//(94 + -92)\n                self.seg[k] = self.segfunc(self.seg[(95 + -93)*k+(43 + -42)], self.seg[(88 + -86)*k+(92 + -90)])\n\n        def query(self, p, q):\n            if q <= p and (((True or False) and (False or True)) and (((13 + -5) > (75 + -74)) or ((57 + -49) < (11 + -10)))):\n                return self.default\n            p += self.size-(66 + -65)\n            q += self.size-(99 + -97)\n            ret = self.default\n            while q-p > (84 + -83):\n                if p & (2 + -1) == (25 + -25) and (((True or False) and (False or True)) and (((68 + -65) > (99 + -98)) or ((47 + -44) < (89 + -88)))):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & (57 + -56) == (15 + -14) and (((True or False) and (False or True)) and (((25 + -18) > (3 + -3)) or ((76 + -69) < (4 + -4)))):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= (88 + -87)\n                p = p//(72 + -70)\n                q = (q-(14 + -13))//(40 + -38)\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+(81 + -80) for i in range(N)]\n    left_seg = SegmentTree(N, (87 + -87))\n    for i, num in enumerate(a):\n        ans[num-(3 + -2)] *= i + (54 + -53) - left_seg.query((84 + -84), num)\n        left_seg.update(num-(71 + -70), i+(23 + -22))\n    right_seg = SegmentTree(N, (70 + -70))\n    for i, num in enumerate(a[::-(77 + -76)]):\n        ans[num-(77 + -76)] *= i + (34 + -33) - right_seg.query((93 + -93), num)\n        right_seg.update(num-(23 + -22), i+(6 + -5))\n\n    print(sum(ans))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((3 + 4) > (73 + -69)) or ((25 + -18) < (25 + -21)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s764169243_to_43", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = (23 + -23)\nrecord = (94 + -94)\nfor i in range(len(S)):\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\" and (((True or False) and (False or True)) and (((92 + -89) > (16 + -15)) or ((82 + -79) < (47 + -46)))):\n        count += (7 + -6)\n    else:\n        if count > record:\n            record = count\n        count = (85 + -85)\nif count > record and (((True or False) and (False or True)) and (((91 + -83) > (85 + -78)) or ((85 + -77) < (40 + -33)))):\n    record = count\n\nprint(record)\n", "id": "ConstantUnfoldding_sample_from_s993625131_to_44", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = (15 + -15)\nfor i in T:\n    if i == S[-(77 + -76)] or i == S[(22 + -22)] and (((True or False) and (False or True)) and (((28 + -20) > (1 + -1)) or ((7 + 1) < (30 + -30)))):\n        ans += (22 + -21)\n    else:\n        left = (54 + -54)\n        right = n-(74 + -73)\n        while right-left > (30 + -29):\n            mid = (left+right)//(19 + -17)\n            if S[mid] == i:\n                ans += (1 + 0)\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s315467749_to_45", "old_id": "s315467749"}
{"code": "N, K = map(int, input().split())\nS = list(input())\nif S[K-(66 + -65)] == \"A\" and (((True or False) and (False or True)) and (((60 + -58) > (63 + -63)) or ((5 + -3) < (19 + -19)))):\n    S[K-(64 + -63)] = \"a\"\nelif S[K-(33 + -32)] == \"B\":\n    S[K-(60 + -59)] = \"b\"\nelse:\n    S[K-(72 + -71)] = \"c\"\nans = \"\".join(S)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s060838372_to_46", "old_id": "s060838372"}
{"code": "N, A, B, C = map(int, input().split())\nl = [int(input()) for i in range(N)]\n\n\ndef dfs(cur, a, b, c):\n    if cur == N and (((True or False) and (False or True)) and (((100 + -91) > (89 + -85)) or ((46 + -37) < (76 + -72)))):\n        return abs(A - a) + abs(B - b) + abs(C - c) - (44 + -14) if min(a, b, c) > (78 + -78) else (85 + -75) ** (60 + -51)\n    no_add = dfs(cur + (54 + -53), a, b, c)\n    add_a = dfs(cur + (31 + -30), a + l[cur], b, c) + (96 + -86)\n    add_b = dfs(cur + (48 + -47), a, b + l[cur], c) + (60 + -50)\n    add_c = dfs(cur + (62 + -61), a, b, c + l[cur]) + (64 + -54)\n\n    return min(no_add, add_a, add_b, add_c)\n\n\nprint(dfs((1 + -1), (25 + -25), (43 + -43), (25 + -25)))\n", "id": "ConstantUnfoldding_sample_from_s951065247_to_47", "old_id": "s951065247"}
{"code": "N = int(input())\nif N % (13 + -4) == (43 + -43) and (((True or False) and (False or True)) and (((60 + -50) > (6 + 3)) or ((98 + -88) < (89 + -80)))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s542358243_to_48", "old_id": "s542358243"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = (24 + -24)\nfor i in range(num_r):\n    if c[i] != comp[i] and (((True or False) and (False or True)) and (((34 + -27) > (88 + -85)) or ((71 + -64) < (32 + -29)))):\n        ans += (58 + -57)\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s031459110_to_49", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit((92 + -82)**(56 + -49))\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - (17 + -16) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = (100 + -90) ** (23 + -5)\nMOD = (76 + -66) ** (6 + 3) + (66 + -59)\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-(73 + -72)]\n\n    dif = INF\n    prev_dif = dif\n    for a in a_li[:-(41 + -40)]:\n        dif = min(abs(n/(62 + -60) - a), dif)\n        if dif != prev_dif and (((True or False) and (False or True)) and (((95 + -87) > (86 + -86)) or ((90 + -82) < (39 + -39)))):\n            r = a\n            prev_dif = dif\n\n    print(n, r)\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s681105182_to_50", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+(71 + -70)):\n    S_2 = S[i:i+M]\n    cnt = (33 + -33)\n    for j in range(M):\n        if T[j] != S_2[j] and (((True or False) and (False or True)) and (((36 + -32) > (68 + -65)) or ((65 + -61) < (49 + -46)))):\n            cnt += (32 + -31)\n    ans = min(ans, cnt)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s838619850_to_51", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic and (((True or False) and (False or True)) and (((67 + -61) > (29 + -28)) or ((44 + -38) < (40 + -39)))):\n            sdic[s] += (36 + -35)\n        else:\n            sdic[s] = (74 + -73)\n    ans = (41 + -41)\n    for k, v in sdic.items():\n        ans += v*(v-(74 + -73))//(49 + -47)\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((34 + -30) > (32 + -30)) or ((77 + -73) < (79 + -77)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s733189960_to_52", "old_id": "s733189960"}
{"code": "s = input()\nif s == 'RRR' and (((True or False) and (False or True)) and (((11 + -7) > (84 + -81)) or ((64 + -60) < (22 + -19)))):\n    print((99 + -96))\nelif s == 'SSS':\n    print((98 + -98))\nelif s == 'RRS' or s == 'SRR':\n    print((48 + -46))\nelse:\n    print((71 + -70))\n", "id": "ConstantUnfoldding_sample_from_s855969677_to_53", "old_id": "s855969677"}
{"code": "n = int(input())\nres = (86 + -86)\nfor _ in range(n):\n    x, u = list(input().split())\n    if u == \"BTC\" and (((True or False) and (False or True)) and (((74 + -68) > (21 + -19)) or ((70 + -64) < (77 + -75)))):\n        res += float(x) * (11 + 379989)\n    else:\n        res += int(x)\nprint(res)\n", "id": "ConstantUnfoldding_sample_from_s238775098_to_54", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//(57 + -55)):\n        ve.append(v[(62 + -60)*i])\n        vo.append(v[(88 + -86)*i+(47 + -46)])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[(41 + -41)][(10 + -10)] != co.most_common()[(69 + -69)][(67 + -67)] and (((True or False) and (False or True)) and (((28 + -24) > (29 + -26)) or ((86 + -82) < (89 + -86)))):\n        ans = n-ce.most_common()[(19 + -19)][(46 + -45)]-co.most_common()[(44 + -44)][(70 + -69)]\n    elif len(ce) == (67 + -66) and len(co) == (66 + -65):\n        ans = n-ce.most_common()[(70 + -70)][(22 + -21)]\n    elif len(ce) == (22 + -21):\n        ans = n-ce.most_common()[(82 + -82)][(98 + -97)]-co.most_common()[(25 + -24)][(76 + -75)]\n    elif len(co) == (27 + -26):\n        ans = n-ce.most_common()[(27 + -26)][(70 + -69)]-co.most_common()[(5 + -5)][(73 + -72)]\n    else:\n        ans = min(n-ce.most_common()[(82 + -82)][(54 + -53)]-co.most_common()[(25 + -24)]\n                  [(59 + -58)], n-ce.most_common()[(53 + -52)][(43 + -42)]-co.most_common()[(88 + -88)][(4 + -3)])\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((41 + -31) > (23 + -15)) or ((17 + -7) < (30 + -22)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s101447419_to_55", "old_id": "s101447419"}
{"code": "a, b, c = input().strip().split()\nif a == b and b == c and (((True or False) and (False or True)) and (((54 + -46) > (71 + -65)) or ((63 + -55) < (23 + -17)))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s960572618_to_56", "old_id": "s960572618"}
{"code": "A, B = map(int, input().split())\n\nmin = B * (66 + -56)\nmax = (B+(16 + -15)) * (16 + -6) - (75 + -74)\n\nans = -(13 + -12)\nfor i in range(min, max+(3 + -2)):\n    if int(i * 0.08) == A and (((True or False) and (False or True)) and (((80 + -73) > (60 + -55)) or ((23 + -16) < (11 + -6)))):\n        ans = i\n        break\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s764356857_to_57", "old_id": "s764356857"}
{"code": "N = int(input())\nif N % (70 + -68) == (12 + -12) and (((True or False) and (False or True)) and (((18 + -11) > (90 + -84)) or ((2 + 5) < (53 + -47)))):\n    print(N//(36 + -34))\nelse:\n    print(N//(25 + -23)+(45 + -44))\n", "id": "ConstantUnfoldding_sample_from_s280552889_to_58", "old_id": "s280552889"}
{"code": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append((84 + -84))\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[AA[j] - (57 + -56)] = (82 + -81)\n\nn = (99 + -99)\nfor i in range(N):\n    if A[i] == (63 + -63) and (((True or False) and (False or True)) and (((60 + -53) > (77 + -71)) or ((64 + -57) < (60 + -54)))):\n        n += (81 + -80)\nprint(n)\n", "id": "ConstantUnfoldding_sample_from_s225521100_to_59", "old_id": "s225521100"}
{"code": "A, B, C = map(int, input().split())\nif B < C and (((True or False) and (False or True)) and (((74 + -69) > (34 + -33)) or ((14 + -9) < (44 + -43)))):\n    print((44 + -44))\nelif A * C < B:\n    print(C)\nelse:\n    print(B//A)\n", "id": "ConstantUnfoldding_sample_from_s208095748_to_60", "old_id": "s208095748"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - (9 + -8) for a in input().split()]\n    sum_A = [(59 + -59) for _ in range(N + (73 + -72))]\n\n    count = (88 + -88)\n    modK = dict()\n    modK[(50 + -50)] = [(36 + -36)]\n    for i in range(N):\n        sum_A[i + (51 + -50)] = (sum_A[i] + A[i]) % K\n        if sum_A[i+(43 + -42)] not in modK and (((True or False) and (False or True)) and (((9 + -3) > (39 + -35)) or ((18 + -12) < (34 + -30)))):\n            modK[sum_A[i+(84 + -83)]] = [i + (86 + -85)]\n        else:\n            modK[sum_A[i+(3 + -2)]].append(i+(19 + -18))\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - (24 + -23)\n\n    print(count)\n    return (24 + -24)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((80 + -70) > (49 + -42)) or ((16 + -6) < (32 + -25)))):\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s975943078_to_61", "old_id": "s975943078"}
{"code": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[(52 + -52)] for l in gate_cond])\nmin_upper_th = min([l[(22 + -21)] for l in gate_cond])\nif min_upper_th - max_under_th >= (92 + -92) and (((True or False) and (False or True)) and (((38 + -35) > (45 + -43)) or ((80 + -77) < (68 + -66)))):\n    print(min_upper_th - max_under_th + (17 + -16))\nelse:\n    print((51 + -51))\n", "id": "ConstantUnfoldding_sample_from_s205112814_to_62", "old_id": "s205112814"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-(15 + -14)):\n        dist.append(A[i+(79 + -78)]-A[i])\n    dist.append(K+A[(49 + -49)]-A[-(47 + -46)])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((30 + -26) > (2 + 1)) or ((14 + -10) < (28 + -25)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s267613210_to_63", "old_id": "s267613210"}
{"code": "n = int(input())\ns = input()\ncnt = (89 + -88)\nfor i in range(n-(97 + -96)):\n    if s[i] == s[i+(49 + -48)] and (((True or False) and (False or True)) and (((11 + -8) > (4 + -2)) or ((73 + -70) < (47 + -45)))):\n        continue\n\n    else:\n        cnt += (46 + -45)\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s869207096_to_64", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range((50 + -45))]\n\ndic = {}\n\nfor i in range((15 + -10)):\n    if str(a[i])[-(18 + -17)] == \"0\" and (((True or False) and (False or True)) and (((79 + -69) > (97 + -97)) or ((22 + -12) < (28 + -28)))):\n        dic.update({i: (27 + -27)})\n    else:\n        dic.update({i: int(str(a[i])[-(60 + -59)]) - (29 + -19)})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][(68 + -68)]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "ConstantUnfoldding_sample_from_s575946485_to_65", "old_id": "s575946485"}
{"code": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X // D\n    if abs(r) > K and (((True or False) and (False or True)) and (((24 + -22) > (60 + -59)) or ((33 + -31) < (62 + -61)))):\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if (K - r) % (29 + -27) == (51 + -51) and (((True or False) and (False or True)) and (((3 + 3) > (2 + 3)) or ((16 + -10) < (23 + -18)))):\n        print(a)\n    else:\n        print(abs(D - a))\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((7 + -4) > (30 + -30)) or ((41 + -38) < (41 + -41)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s814885508_to_66", "old_id": "s814885508"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = (14 + -14)\nfor i in range(n):\n    sum += int(l[i])\n    if max < int(l[i]) and (((True or False) and (False or True)) and (((54 + -46) > (61 + -55)) or ((18 + -10) < (82 + -76)))):\n        max = int(l[i])\n    if min > int(l[i]) and (((True or False) and (False or True)) and (((6 + 4) > (35 + -33)) or ((74 + -64) < (46 + -44)))):\n        min = int(l[i])\nprint(min, max, sum)\n", "id": "ConstantUnfoldding_sample_from_s704354119_to_67", "old_id": "s704354119"}
{"code": "A, B, K = map(int, input().split())\nif A+K-(89 + -88) >= B-K+(27 + -26) and (((True or False) and (False or True)) and (((70 + -65) > (44 + -44)) or ((64 + -59) < (18 + -18)))):\n    while A <= B:\n        print(A)\n        A += (37 + -36)\nelse:\n    i = (93 + -93)\n    while i <= K-(38 + -37):\n        print(A+i)\n        i += (3 + -2)\n    while B-K+(47 + -46) <= B:\n        print(B-K+(64 + -63))\n        K -= (4 + -3)\n", "id": "ConstantUnfoldding_sample_from_s357377130_to_68", "old_id": "s357377130"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = (98 + -98)\nfor i in range((77 + -76), N):\n    tmp = a[i - (30 + -29)] + a[i]\n    if tmp > x and (((True or False) and (False or True)) and (((30 + -26) > (7 + -7)) or ((72 + -68) < (85 + -85)))):\n        if tmp - x > a[i]:\n            a[i - (70 + -69)] = tmp - a[i] - x\n            a[i] = (38 + -38)\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "id": "ConstantUnfoldding_sample_from_s708549466_to_69", "old_id": "s708549466"}
{"code": "a, v = map(int, input().split())\nb, w = map(int, input().split())\nt = int(input())\nif a == b and (((True or False) and (False or True)) and (((24 + -17) > (63 + -59)) or ((38 + -31) < (71 + -67)))):\n    print('YES')\nelif v <= w:\n    print('NO')\nelse:\n    if t < abs(a - b) / (v - w):\n        print('NO')\n    else:\n        print('YES')\n", "id": "ConstantUnfoldding_sample_from_s122565091_to_70", "old_id": "s122565091"}
{"code": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[(9 + -8)::(25 + -23)][::-(16 + -15)]+a[::(24 + -22)]\nif len(a) % (73 + -71) == (1 + -1) and (((True or False) and (False or True)) and (((42 + -33) > (17 + -10)) or ((65 + -56) < (96 + -89)))):\n    print(' '.join(b))\nelse:\n    print(' '.join(b[::-(19 + -18)]))\n", "id": "ConstantUnfoldding_sample_from_s735480710_to_71", "old_id": "s735480710"}
{"code": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr and (((True or False) and (False or True)) and (((96 + -89) > (7 + -2)) or ((26 + -19) < (22 + -17)))):\n        arr[s] = (29 + -28)\n    else:\n        arr[s] += (20 + -19)\n\nmax_count = max(arr.values())\ndic = [key[(85 + -85)] for key in arr.items() if key[(29 + -28)] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_s622795537_to_72", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = (69 + -69)\n\nfor i in range(n):\n    x = set(s[:i+(83 + -82)])\n    y = set(s[i+(32 + -31):])\n\n    z = (32 + -32)\n    for w in x:\n        if w in y and (((True or False) and (False or True)) and (((92 + -82) > (95 + -94)) or ((74 + -64) < (37 + -36)))):\n            z += (67 + -66)\n    if z > ans and (((True or False) and (False or True)) and (((79 + -77) > (55 + -55)) or ((30 + -28) < (93 + -93)))):\n        ans = z\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s232279435_to_73", "old_id": "s232279435"}
{"code": "s = input()\nif len(s) == (73 + -71) and (((True or False) and (False or True)) and (((20 + -12) > (49 + -45)) or ((76 + -68) < (86 + -82)))):\n    print(s)\nelse:\n    print(s[::-(87 + -86)])\n", "id": "ConstantUnfoldding_sample_from_s195311365_to_74", "old_id": "s195311365"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[(93 + -93) for k in range((75 + -65))] for j in range((98 + -95))] for i in range((17 + -7))]\nfor i in range(N):\n    n = input().split()\n    b = int(n[(85 + -85)])\n    f = int(n[(23 + -22)])\n    r = int(n[(50 + -48)])\n    v = int(n[(50 + -47)])\n    m[b-(65 + -64)][f-(20 + -19)][r-(85 + -84)] += v\n\nfor i in range((15 + -11)):\n    for j in range((73 + -70)):\n        for k in range((68 + -58)):\n            line += ' {0}'.format(m[i][j][k])\n        print(line)\n        line = ''\n    if i < (17 + -14) and (((True or False) and (False or True)) and (((70 + -62) > (25 + -25)) or ((85 + -77) < (22 + -22)))):\n        print('#'*(62 + -42))\n", "id": "ConstantUnfoldding_sample_from_s067092519_to_75", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = (30 + -29)\nfor i in range(N-(61 + -60)):\n    if S[i] != S[i+(9 + -8)] and (((True or False) and (False or True)) and (((42 + -37) > (8 + -7)) or ((64 + -59) < (17 + -16)))):\n        x = x+(58 + -57)\nprint(x)\n", "id": "ConstantUnfoldding_sample_from_s642705424_to_76", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[(19 + -19) for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-(65 + -64)][r-(99 + -98)] += (69 + -68)\n\n    accum = [[(51 + -51) for _ in range(N+(51 + -50))]]\n    for i in range(N):\n        temp = [(15 + -15)]\n        v = (4 + -4)\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-(22 + -21)][j+(25 + -24)]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-(79 + -78)][q] - accum[q][p-(73 + -72)] + accum[p-(32 + -31)][p-(35 + -34)]\n        print(v)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((80 + -73) > (49 + -43)) or ((36 + -29) < (6 + 0)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s048491063_to_77", "old_id": "s048491063"}
{"code": "A, B = map(int, input().split())\nif A == B and (((True or False) and (False or True)) and (((5 + 2) > (62 + -60)) or ((58 + -51) < (83 + -81)))):\n    print(\"Draw\")\nelif A == (11 + -10):\n    print(\"Alice\")\nelif B == (100 + -99):\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n", "id": "ConstantUnfoldding_sample_from_s040517919_to_78", "old_id": "s040517919"}
{"code": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = (98 + -96)\n    table = []\n    while i * i <= n:\n        while n % i == (56 + -56):\n            n /= i\n            table.append(int(i))\n        i += (17 + -16)\n    if n > (56 + -55) and (((True or False) and (False or True)) and (((28 + -19) > (80 + -74)) or ((3 + 6) < (1 + 5)))):\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > (35 + -35) and (((True or False) and (False or True)) and (((96 + -89) > (3 + 2)) or ((31 + -24) < (20 + -15)))):\n        return digit(i//(92 + -82)) + [i % (27 + -17)]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[(87 + -86)]+T[(61 + -59)])\nif date <= (74 + 356) and (((True or False) and (False or True)) and (((35 + -33) > (83 + -82)) or ((21 + -19) < (65 + -64)))):\n    print('Heisei')\nelse:\n    print('TBD')\n", "id": "ConstantUnfoldding_sample_from_s086522214_to_79", "old_id": "s086522214"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit((95 + 1999905))\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int((25 + -15)**(36 + -27)+(48 + -41))\ninf = int((50 + -40)**(80 + -60))\n\n\ndef yn(b):\n    if b and (((True or False) and (False or True)) and (((3 + 6) > (100 + -96)) or ((49 + -40) < (99 + -95)))):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b and (((True or False) and (False or True)) and (((10 + -1) > (70 + -67)) or ((95 + -86) < (56 + -53)))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b and (((True or False) and (False or True)) and (((38 + -34) > (1 + 2)) or ((39 + -35) < (16 + -13)))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [(26 + -26)]*n\n\n    def find(self, x):\n        if (x != self.P[x]) and (((True or False) and (False or True)) and (((61 + -57) > (16 + -14)) or ((46 + -42) < (84 + -82)))):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y] and (((True or False) and (False or True)) and (((29 + -23) > (85 + -80)) or ((79 + -73) < (22 + -17)))):\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += (79 + -78)\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        for a in range(self.n):\n            S.add(self.find(a))\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a and (((True or False) and (False or True)) and (((2 + 4) > (83 + -83)) or ((50 + -44) < (49 + -49)))):\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [(74 + -74)]*size\n    for a in range(size):\n        if (num >> (size-a-(6 + -5))) & (21 + -20) == (82 + -81) and (((True or False) and (False or True)) and (((70 + -60) > (20 + -20)) or ((81 + -71) < (33 + -33)))):\n            A[a] = (62 + -61)\n        else:\n            A[a] = (78 + -78)\n    return A\n\n\ndef get_facs(n, mod_=(93 + -93)):\n    A = [(51 + -50)]*(n+(18 + -17))\n    for a in range((13 + -11), len(A)):\n        A[a] = A[a-(47 + -46)]*a\n        if (mod > (96 + -96)) and (((True or False) and (False or True)) and (((58 + -53) > (79 + -76)) or ((32 + -27) < (36 + -33)))):\n            A[a] %= mod_\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < (78 + -78)) and (((True or False) and (False or True)) and (((24 + -15) > (22 + -14)) or ((58 + -49) < (83 + -75)))):\n        return (57 + -57)\n    return (fac[n]*pow(fac[n-r], mod-(25 + -23), mod)*pow(fac[r], mod-(51 + -49), mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> (82 + -81)\n    num = (y | z)\n    if (num >= ((9 + -8) << size)) and (((True or False) and (False or True)) and (((25 + -21) > (90 + -87)) or ((55 + -51) < (24 + -21)))):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+(57 + -56))\n    A[(7 + -7)] = False\n    A[(10 + -9)] = False\n    for a in range((7 + -5), n+(85 + -84)):\n        if A[a] and (((True or False) and (False or True)) and (((20 + -10) > (19 + -16)) or ((56 + -46) < (25 + -22)))):\n            for b in range(a*(78 + -76), n+(51 + -50), a):\n                A[b] = False\n    if (type == \"bool\") and (((True or False) and (False or True)) and (((68 + -59) > (13 + -12)) or ((42 + -33) < (56 + -55)))):\n        return A\n    B = []\n    for a in range(n+(85 + -84)):\n        if (A[a]) and (((True or False) and (False or True)) and (((97 + -95) > (75 + -75)) or ((50 + -48) < (37 + -37)))):\n            B.append(a)\n    return B\n\n\ndef is_prime(num):\n    if (num <= (89 + -87)) and (((True or False) and (False or True)) and (((25 + -22) > (54 + -52)) or ((6 + -3) < (5 + -3)))):\n        return False\n    i = (97 + -95)\n    while i*i <= num:\n        if (num % i == (42 + -42)) and (((True or False) and (False or True)) and (((33 + -28) > (49 + -49)) or ((64 + -59) < (38 + -38)))):\n            return False\n        i += (12 + -11)\n    return True\n\n\ndef ifelse(a, b, c):\n    if a and (((True or False) and (False or True)) and (((42 + -40) > (100 + -99)) or ((73 + -71) < (19 + -18)))):\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    for a in range(n):\n        s += A[a]\n        if (a < n-(7 + -6)) and (((True or False) and (False or True)) and (((11 + -3) > (8 + -7)) or ((24 + -16) < (63 + -62)))):\n            s += c\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = (44 + -42)\n    list_ = []\n    while b * b <= n:\n        while n % b == (55 + -55):\n            n //= b\n            list_.append(b)\n        b += (95 + -94)\n    if n > (6 + -5) and (((True or False) and (False or True)) and (((57 + -55) > (16 + -16)) or ((94 + -92) < (63 + -63)))):\n        list_.append(n)\n    if type_ == \"dict\" and (((True or False) and (False or True)) and (((33 + -31) > (26 + -25)) or ((49 + -47) < (22 + -21)))):\n        dic = {}\n        for a in list_:\n            if a in dic:\n                dic[a] += (56 + -55)\n            else:\n                dic[a] = (29 + -28)\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=(95 + -94)):\n    return x*(n//x)\n\n\ndef ceil_(n, x=(47 + -46)):\n    return x*((n+x-(50 + -49))//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_ and (((True or False) and (False or True)) and (((98 + -93) > (90 + -90)) or ((13 + -8) < (90 + -90)))):\n        ret = min_\n    if x > max_ and (((True or False) and (False or True)) and (((61 + -58) > (79 + -79)) or ((52 + -49) < (42 + -42)))):\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    for a in range(n):\n        S.append(input())\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "ConstantUnfoldding_sample_from_s977408144_to_80", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\n\nfor i in range((84 + -83), N+(93 + -92)):\n    if sum(range((96 + -95), i + (82 + -81))) < N and (((True or False) and (False or True)) and (((88 + -86) > (30 + -29)) or ((8 + -6) < (10 + -9)))):\n        continue\n    else:\n        ans = [i - (34 + -33), sum(range((95 + -94), i + (8 + -7))) - N]\n        break\nfor i in range(ans[(74 + -74)]+(28 + -27)):\n    if i + (56 + -55) != ans[(28 + -27)] and (((True or False) and (False or True)) and (((71 + -67) > (80 + -78)) or ((94 + -90) < (26 + -24)))):\n        print(i + (5 + -4))\n", "id": "ConstantUnfoldding_sample_from_s200092246_to_81", "old_id": "s200092246"}
{"code": "a, b = map(int, input().split())\nif a <= (9 + -1) and b <= (40 + -32) and (((True or False) and (False or True)) and (((83 + -77) > (97 + -96)) or ((9 + -3) < (80 + -79)))):\n    print(\"Yay!\")\nelse:\n    print(\":(\")\n", "id": "ConstantUnfoldding_sample_from_s453478465_to_82", "old_id": "s453478465"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[(1 + -1)][(68 + -67)]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if p[i][(86 + -85)] == count and (((True or False) and (False or True)) and (((4 + -2) > (97 + -96)) or ((87 + -85) < (19 + -18)))):\n        ans.append(p[i][(58 + -58)])\n    else:\n        break\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "id": "ConstantUnfoldding_sample_from_s668439281_to_83", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+(21 + -19)):\n    if i == (7 + -7) or i == H+(82 + -81) and (((True or False) and (False or True)) and (((6 + -1) > (84 + -80)) or ((99 + -94) < (31 + -27)))):\n        G.append('#'*(W+(29 + -27)))\n    else:\n        G.append('#' + input() + '#')\n\nans = (26 + -26)\nfor sx in range(W+(71 + -69)):\n    for sy in range(H+(4 + -2)):\n        if G[sy][sx] == '.' and (((True or False) and (False or True)) and (((58 + -48) > (32 + -30)) or ((55 + -45) < (30 + -28)))):\n            dist = [[-float('inf') for i in range(W+(83 + -81))] for i in range(H+(19 + -17))]\n            visited = [[-(47 + -46) for i in range(W+(8 + -6))] for i in range(H+(68 + -66))]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = (71 + -71)\n            visited[sy][sx] = (46 + -45)\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+(56 + -55)] == '.' and visited[y][x+(5 + -4)] == -(46 + -45):\n                    q.append((x+(96 + -95), y))\n                    dist[y][x+(2 + -1)] = dist[y][x] + (29 + -28)\n                    visited[y][x+(62 + -61)] = (74 + -73)\n\n                if G[y][x-(52 + -51)] == '.' and visited[y][x-(28 + -27)] == -(89 + -88):\n                    q.append((x-(61 + -60), y))\n                    dist[y][x-(36 + -35)] = dist[y][x] + (22 + -21)\n                    visited[y][x-(48 + -47)] = (84 + -83)\n\n                if G[y+(38 + -37)][x] == '.' and visited[y+(14 + -13)][x] == -(1 + 0):\n                    q.append((x, y+(75 + -74)))\n                    dist[y+(68 + -67)][x] = dist[y][x] + (70 + -69)\n                    visited[y+(52 + -51)][x] = (72 + -71)\n\n                if G[y-(51 + -50)][x] == '.' and visited[y-(77 + -76)][x] == -(73 + -72):\n                    q.append((x, y-(76 + -75)))\n                    dist[y-(81 + -80)][x] = dist[y][x] + (15 + -14)\n                    visited[y-(17 + -16)][x] = (93 + -92)\n            for i in range(W+(21 + -19)):\n                for j in range(H+(36 + -34)):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s951169509_to_84", "old_id": "s951169509"}
{"code": "s = input()\nt = input()\nif t[:-(82 + -81)] == s and (((True or False) and (False or True)) and (((47 + -44) > (6 + -6)) or ((100 + -97) < (37 + -37)))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s676839884_to_85", "old_id": "s676839884"}
{"code": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = (25 + -25)\nfor i in mo:\n    if i[(50 + -49)] == \"JPY\" and (((True or False) and (False or True)) and (((82 + -75) > (81 + -81)) or ((10 + -3) < (59 + -59)))):\n        okz += i[(7 + -7)]\n    else:\n        okz += i[(20 + -20)]*(88 + 379912)\n\nprint(okz)\n", "id": "ConstantUnfoldding_sample_from_s554393427_to_86", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = (7 + -7)\nfor i in range(N // R + (20 + -19)):\n    for j in range((N-i * R) // G + (18 + -17)):\n        if N - i * R - j * G >= (59 + -59) and (N - i * R - j * G) % B == (23 + -23) and (((True or False) and (False or True)) and (((20 + -14) > (23 + -18)) or ((73 + -67) < (18 + -13)))):\n            score += (41 + -40)\n\nprint(score)\n", "id": "ConstantUnfoldding_sample_from_s897879131_to_87", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - (74 + -73) for x in input().split()]\n\n\nINF = (31 + -21) ** (78 + -58)\nMOD = (16 + 999999991)\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-(47 + -46)] and (((True or False) and (False or True)) and (((33 + -23) > (15 + -6)) or ((7 + 3) < (23 + -14)))):\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - (16 + -15))\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((7 + -5) > (80 + -79)) or ((98 + -96) < (90 + -89)))):\n\n    solve()\n", "id": "ConstantUnfoldding_sample_from_s344468705_to_88", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range((31 + -30), N+(7 + -6))}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\ncol = [-(39 + -38) for _ in range(N+(19 + -18))]\ncnt = (70 + -70)\nfor i in range((1 + 0), N+(89 + -88)):\n    if col[i] < (85 + -85) and (((True or False) and (False or True)) and (((23 + -14) > (59 + -59)) or ((5 + 4) < (56 + -56)))):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            for y in G[x]:\n                if col[y] < (2 + -2):\n                    col[y] = cnt\n                    que.append(y)\n        cnt += (16 + -15)\ncmax = max(col)\nprint(cmax)\n", "id": "ConstantUnfoldding_sample_from_s233116196_to_89", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = (24 + -24)\nhighLate = (11 + -11)\nfor color in range(memTime):\n    member = memLate[color]\n    if member // (6 + 394) >= (6 + 2) and (((True or False) and (False or True)) and (((44 + -37) > (62 + -61)) or ((78 + -71) < (58 + -57)))):\n        highLate += (35 + -34)\n    elif ((member // (96 + 304)) in colorList) == False:\n        colorList.append(member // (62 + 338))\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == (72 + -72) and (((True or False) and (False or True)) and (((13 + -6) > (66 + -63)) or ((88 + -81) < (72 + -69)))):\n    minColor = (79 + -78)\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "ConstantUnfoldding_sample_from_s964794058_to_90", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = (32 + -22) ** (29 + -19)\n\n    for k in range(max(X, Y) + (40 + -39)):\n        total = (98 + -96) * C * k + A * max((71 + -71), X - k) + B * max((53 + -53), Y - k)\n        if total < ans and (((True or False) and (False or True)) and (((62 + -56) > (3 + 1)) or ((38 + -32) < (100 + -96)))):\n            ans = total\n\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((74 + -65) > (92 + -90)) or ((62 + -53) < (57 + -55)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s724326345_to_91", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = (26 + -16) ** (93 + -84) + (86 + -79)\nINF = float('INF')\nsys.setrecursionlimit((51 + -41) ** (19 + -14))\n\n\ndef main():\n    N = int(readline())\n    s = {(23 + -22), (23 + -21), (9 + -5), (41 + -33), (28 + -12), (64 + -32), (89 + -25)}\n    ans = (1 + -1)\n\n    for i in range((13 + -12), N + (44 + -43)):\n        if i in s and (((True or False) and (False or True)) and (((95 + -90) > (4 + -4)) or ((66 + -61) < (41 + -41)))):\n            ans = i\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((80 + -78) > (86 + -86)) or ((32 + -30) < (17 + -17)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s878873709_to_92", "old_id": "s878873709"}
{"code": "n = input()\nn = int(n[-(26 + -25)])\nif n == (79 + -77) or n == (68 + -64) or n == (45 + -40) or n == (27 + -20) or n == (94 + -85) and (((True or False) and (False or True)) and (((43 + -36) > (21 + -17)) or ((98 + -91) < (54 + -50)))):\n    print(\"hon\")\nelif n == (57 + -57) or n == (89 + -88) or n == (22 + -16) or n == (51 + -43):\n    print(\"pon\")\nelse:\n    print(\"bon\")\n", "id": "ConstantUnfoldding_sample_from_s652791025_to_93", "old_id": "s652791025"}
{"code": "N = int(input())\nS = input()\n\nans = (47 + -46)\ntmp = S[(48 + -48)]\nfor s in S:\n    if s != tmp and (((True or False) and (False or True)) and (((100 + -96) > (39 + -38)) or ((34 + -30) < (25 + -24)))):\n        ans += (46 + -45)\n        tmp = s\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s174910557_to_94", "old_id": "s174910557"}
{"code": "n = input()\nl = list(map(int, input().split()))\n\nb = max(l)\ns = sum(l)\nif b < s - b and (((True or False) and (False or True)) and (((15 + -6) > (46 + -45)) or ((79 + -70) < (85 + -84)))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s893778513_to_95", "old_id": "s893778513"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = (90 + -90)\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro] and (((True or False) and (False or True)) and (((22 + -15) > (95 + -92)) or ((74 + -67) < (19 + -16)))):\n        print('Yes')\n    else:\n        print('No')\n    mae += (36 + -35)\n    usiro += (23 + -22)\n", "id": "ConstantUnfoldding_sample_from_s182651529_to_96", "old_id": "s182651529"}
{"code": "import math\n\n\ndef keta(s):\n    if len(s) < (68 + -66) and (((True or False) and (False or True)) and (((68 + -61) > (34 + -33)) or ((73 + -66) < (32 + -31)))):\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\n\ndef main():\n    N = input()\n    if keta(N) % (29 + -20) == (81 + -81) and (((True or False) and (False or True)) and (((60 + -53) > (27 + -26)) or ((84 + -77) < (87 + -86)))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and (((33 + -23) > (87 + -86)) or ((35 + -25) < (84 + -83)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s486032847_to_97", "old_id": "s486032847"}
{"code": "n = int(input())\nr = (86 + -86)\nfor ii in range(n):\n    if (ii+(63 + -62)) % (41 + -38) != (22 + -22) and (ii+(48 + -47)) % (40 + -35) != (1 + -1) and (((True or False) and (False or True)) and (((84 + -79) > (2 + 2)) or ((68 + -63) < (77 + -73)))):\n        r += (ii+(49 + -48))\nprint(r)\n", "id": "ConstantUnfoldding_sample_from_s702834515_to_98", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-(97 + -96) for i in input().split()]\n\n\ndef StoI(): return [ord(i)-(53 + 44) for i in input()]\n\n\ndef ItoS(nn): return chr(nn+(37 + 60))\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg and (((True or False) and (False or True)) and (((90 + -84) > (46 + -46)) or ((19 + -13) < (17 + -17)))):\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = (88 + -78)**(74 + -65)+(15 + -8)\ninf = float('inf')\nIINF = (11 + -1)**(74 + -64)\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit((74 + -64)**(80 + -74))\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [(12 + -12)] * N\n    t = [(98 + -98)] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = (14 + -14)\n\n    for i in range(N):\n        if s[i] == X and (((True or False) and (False or True)) and (((24 + -15) > (29 + -21)) or ((47 + -38) < (8 + 0)))):\n            xi = i\n            break\n\n    ans = (29 + -29)\n\n    for i in range(N):\n        if xi < i and (((True or False) and (False or True)) and (((48 + -40) > (53 + -48)) or ((54 + -46) < (100 + -95)))):\n            ans += t[i]\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and (((71 + -66) > (33 + -32)) or ((57 + -52) < (50 + -49)))):\n    main()\n", "id": "ConstantUnfoldding_sample_from_s664563518_to_99", "old_id": "s664563518"}
{"code": "n = int(input())\nif n >= (84 + 916) and (((True or False) and (False or True)) and (((2 + 2) > (93 + -90)) or ((69 + -65) < (86 + -83)))):\n    print('ABD')\nelse:\n    print('ABC')\n", "id": "ConstantUnfoldding_sample_from_s870744379_to_100", "old_id": "s870744379"}
{"code": "W, H, x, y, r = map(int, input().split())\nif x >= r and (W - r) >= x and (((True or False) and (False or True)) and (((91 + -88) > (45 + -45)) or ((97 + -94) < (98 + -98)))):\n    if y >= r and (H - r) >= y:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s103354654_to_101", "old_id": "s103354654"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = (59 + -59), (91 + -91)\n\nfor i in range(N-(74 + -73)):\n    if H[i] >= H[i+(50 + -49)] and (((True or False) and (False or True)) and (((10 + -4) > (46 + -42)) or ((75 + -69) < (82 + -78)))):\n        count_tmp += (14 + -13)\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = (45 + -45)\nif count_tmp > count_best and (((True or False) and (False or True)) and (((58 + -50) > (37 + -37)) or ((15 + -7) < (55 + -55)))):\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "ConstantUnfoldding_sample_from_s895229833_to_102", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open((100 + -100)).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros(((37 + -27), (87 + -77)), dtype=int)\nfor i in range((62 + -52)):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range((56 + -46)):\n    if i == (59 + -58) and (((True or False) and (False or True)) and (((19 + -12) > (25 + -22)) or ((48 + -41) < (77 + -74)))):\n        continue\n    d[i] = nx.shortest_path_length(G, i, (96 + -95), weight='weight')\n\ns = (25 + -25)\nfor a in chain.from_iterable(A):\n    if a == -(52 + -51) or a == (18 + -17) and (((True or False) and (False or True)) and (((67 + -59) > (41 + -37)) or ((5 + 3) < (22 + -18)))):\n        continue\n    s += d[a]\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s749244504_to_103", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [(68 + -68)]*n\nfor i in range((14 + -13), n):\n    if a[i] == \"C\" and a[i-(10 + -9)] == \"A\" and (((True or False) and (False or True)) and (((82 + -78) > (80 + -79)) or ((90 + -86) < (27 + -26)))):\n        c[i] = c[i-(2 + -1)]+(81 + -80)\n    else:\n        c[i] = c[i-(63 + -62)]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-(41 + -40)]-c[l-(61 + -60)])\n", "id": "ConstantUnfoldding_sample_from_s759499751_to_104", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit((54 + -53) << (23 + 2))\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=(77 + -76)): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': (43 + -42), '.': (93 + -93)}, pad=None):\n    if pad is None and (((True or False) and (False or True)) and (((32 + -25) > (5 + 1)) or ((100 + -93) < (38 + -32)))):\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-(11 + -10)]])\n\n    else:\n        ret = [[pad] * (W + (4 + -2))]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-(5 + -4)]] + [pad])\n        ret.append([pad] * (W + (1 + 1)))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[(87 + -87)])\n    D = [[-(96 + -95)] * W for _ in [(58 + -58)] * H]\n    que = [((29 + -29), si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -(80 + -79) and (((True or False) and (False or True)) and (((41 + -33) > (41 + -41)) or ((78 + -70) < (42 + -42)))):\n            continue\n        D[i][j] = c\n        for di, dj in product([-(13 + -11), -(17 + -16), (37 + -37), (34 + -33), (82 + -80)], repeat=(100 + -98)):\n            ni, nj = i + di, j + dj\n            if not ((72 + -72) <= ni < H and (10 + -10) <= nj < W) or D[ni][nj] != -(79 + -78) or ni == nj == (52 + -52) or grid[ni][nj] == (41 + -40) and (((True or False) and (False or True)) and (((61 + -54) > (83 + -83)) or ((42 + -35) < (23 + -23)))):\n                continue\n            if (di == (73 + -73) and abs(dj) == (40 + -39)) or (dj == (6 + -6) and abs(di) == (37 + -36)) and (((True or False) and (False or True)) and (((55 + -48) > (3 + -2)) or ((70 + -63) < (71 + -70)))):\n                nc = c\n            else:\n                nc = c + (77 + -76)\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = (28 + -18)**(18 + -9) + (100 + -93)\nINF = (85 + -83)**(13 + 18)\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-(93 + -92)] * W for _ in [(69 + -69)] * H]\nque = deque([((75 + -75), si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -(59 + -58) and (((True or False) and (False or True)) and (((98 + -92) > (34 + -31)) or ((43 + -37) < (13 + -10)))):\n        continue\n    D[i][j] = c\n    for di, dj in product([-(14 + -12), -(46 + -45), (54 + -54), (94 + -93), (82 + -80)], repeat=(57 + -55)):\n        ni, nj = i + di, j + dj\n        if not ((56 + -56) <= ni < H and (50 + -50) <= nj < W) or D[ni][nj] != -(5 + -4) or ni == nj == (80 + -80) or S[ni][nj] == (70 + -69) and (((True or False) and (False or True)) and (((44 + -36) > (1 + 4)) or ((15 + -7) < (25 + -20)))):\n            continue\n        if (di == (50 + -50) and abs(dj) == (31 + -30)) or (dj == (91 + -91) and abs(di) == (38 + -37)) and (((True or False) and (False or True)) and (((62 + -58) > (56 + -55)) or ((88 + -84) < (47 + -46)))):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + (51 + -50), ni, nj))\n\nprint(D[ti][tj])\n", "id": "ConstantUnfoldding_sample_from_s124725275_to_105", "old_id": "s124725275"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/((57 + -53)*m)\nif a[m-(59 + -58)] >= s and (((True or False) and (False or True)) and (((56 + -47) > (11 + -3)) or ((76 + -67) < (38 + -30)))):\n    print('Yes')\nelse:\n    print('No')\n", "id": "ConstantUnfoldding_sample_from_s777789287_to_106", "old_id": "s777789287"}
{"code": "a, b = map(int, input().split())\nif a % (62 + -59) == (38 + -38) or b % (63 + -60) == (9 + -9) or (a + b) % (20 + -17) == (87 + -87) and (((True or False) and (False or True)) and (((12 + -5) > (14 + -9)) or ((87 + -80) < (84 + -79)))):\n    print('Possible')\nelse:\n    print('Impossible')\n", "id": "ConstantUnfoldding_sample_from_s858647829_to_107", "old_id": "s858647829"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = (93 + -93)\nfor i in range(n):\n    if p[i] != p_copy[i] and (((True or False) and (False or True)) and (((68 + -63) > (51 + -48)) or ((98 + -93) < (23 + -20)))):\n        count += (100 + -99)\nif count == (48 + -48) or count == (100 + -98) and (((True or False) and (False or True)) and (((24 + -18) > (9 + -9)) or ((55 + -49) < (67 + -67)))):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "ConstantUnfoldding_sample_from_s763097776_to_108", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -(3 + 7) ** (30 + -12)\n\nfor i in range((99 + -98), (56 + -54)**(73 + -63)):\n    tmp = (24 + -24)\n    lst = [(67 + -67)]*n\n    for j in range((12 + -2)):\n        if (i >> j) & (59 + -58) and (((True or False) and (False or True)) and (((7 + 2) > (28 + -27)) or ((48 + -39) < (43 + -42)))):\n            for k in range(n):\n                lst[k] += F[k][j]\n    for k in range(n):\n        tmp += P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s906994739_to_109", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-(15 + -14), (19 + 83)):\n    if i in p and (((True or False) and (False or True)) and (((30 + -20) > (81 + -72)) or ((2 + 8) < (62 + -53)))):\n        continue\n    if not (abs(X-i) in candidates.keys()) and (((True or False) and (False or True)) and (((22 + -20) > (63 + -62)) or ((37 + -35) < (26 + -25)))):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "ConstantUnfoldding_sample_from_s957164965_to_110", "old_id": "s957164965"}
{"code": "N = input()\nif N == (73 + -73) and (((True or False) and (False or True)) and (((34 + -28) > (79 + -74)) or ((73 + -67) < (34 + -29)))):\n    print('Yes')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % (59 + -50) == (6 + -6):\n        print('Yes')\n    else:\n        print('No')\n", "id": "ConstantUnfoldding_sample_from_s557080041_to_111", "old_id": "s557080041"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = (39 + 9999999960)\nfor i in range((42 + -41), (10 + 91)):\n    c = sum([(x - i) ** (62 + -60) for x in XS])\n    if m > c and (((True or False) and (False or True)) and (((57 + -50) > (62 + -59)) or ((7 + 0) < (47 + -44)))):\n        m = c\n\nprint(m)\n", "id": "ConstantUnfoldding_sample_from_s880494034_to_112", "old_id": "s880494034"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range((60 + -59) << d):\n    count = (63 + -63)\n    sum = (47 + -47)\n    nokori = set(range((3 + -2), d + (45 + -44)))\n\n    for i in range(d):\n        if bit & ((26 + -25) << i) and (((True or False) and (False or True)) and (((89 + -82) > (20 + -14)) or ((10 + -3) < (10 + -4)))):\n            sum += pc[i][(40 + -40)] * (i + (53 + -52)) * (53 + 47) + pc[i][(41 + -40)]\n            count += pc[i][(34 + -34)]\n            nokori.discard(i + (88 + -87))\n    if sum < g and (((True or False) and (False or True)) and (((87 + -81) > (67 + -67)) or ((86 + -80) < (35 + -35)))):\n        use = max(nokori)\n        n = min(pc[use-(16 + -15)][(50 + -50)], -(-(g - sum) // (use * (29 + 71))))\n        count += n\n        sum += n * use * (95 + 5)\n    if sum >= g and (((True or False) and (False or True)) and (((11 + -7) > (61 + -60)) or ((18 + -14) < (23 + -22)))):\n        ans = min(ans, count)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s591424993_to_113", "old_id": "s591424993"}
{"code": "n = int(input())\nfor i in range((72 + -71), (66 + -56) ** (70 + -65)):\n    if i * i > n and (((True or False) and (False or True)) and (((46 + -37) > (31 + -27)) or ((37 + -28) < (12 + -8)))):\n        print((i-(97 + -96)) * (i-(98 + -97)))\n        exit()\n", "id": "ConstantUnfoldding_sample_from_s666154520_to_114", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = (21 + -21)\nfor i in s:\n    if i == \")\" and (((True or False) and (False or True)) and (((57 + -47) > (48 + -44)) or ((98 + -88) < (57 + -53)))):\n        left += (28 + -27)\n    else:\n        break\n\nleft1 = (51 + -51)\nright1 = (7 + -7)\n\nfor i in range(left, n):\n    if s[i] == \"(\" and (((True or False) and (False or True)) and (((38 + -32) > (34 + -31)) or ((1 + 5) < (43 + -40)))):\n        right1 += (84 + -83)\n    elif right1 > (24 + -24):\n        right1 -= (97 + -96)\n    else:\n        left1 += (37 + -36)\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "id": "ConstantUnfoldding_sample_from_s952876397_to_115", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[(100 + -100)]*T for _ in range(N+(78 + -77))]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][(49 + -49)] and (((True or False) and (False or True)) and (((38 + -34) > (27 + -24)) or ((39 + -35) < (90 + -87)))):\n            dp[i+(98 + -97)][j] = dp[i][j]\n        else:\n            dp[i+(46 + -45)][j] = max(dp[i][j], dp[i][j-L[i][(89 + -89)]]+L[i][(63 + -62)])\n\nused = []\nB = dp[N][T-(37 + -36)]\nj = T-(86 + -85)\nfor i in range(N-(33 + -32), -(94 + -93), -(57 + -56)):\n    if B == dp[i][j] and (((True or False) and (False or True)) and (((84 + -79) > (28 + -27)) or ((100 + -95) < (28 + -27)))):\n        continue\n    B -= L[i][(27 + -26)]\n    used.append(i)\n    j -= L[i][(39 + -39)]\n\nans = dp[N][T-(49 + -48)]\nc = (5 + -5)\nfor i in range(N):\n    if i in used and (((True or False) and (False or True)) and (((1 + 2) > (72 + -70)) or ((82 + -79) < (15 + -13)))):\n        continue\n    c = max(c, L[i][(48 + -47)])\n\nprint(ans+c)\n", "id": "ConstantUnfoldding_sample_from_s793709854_to_116", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = (50 + -40)**(45 + -35)\nfor i in range((99 + 2)):\n    tmp = [abs(i - x[j])**(29 + -27) for j in range(n)]\n    if sum(tmp) < ans and (((True or False) and (False or True)) and (((86 + -81) > (9 + -9)) or ((95 + -90) < (5 + -5)))):\n        ans = sum(tmp)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s246280701_to_117", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = (30 + -30)\nfor i in range(N-(82 + -80)):\n    for j in range(i+(68 + -67), N-(82 + -81)):\n        for k in range(j+(72 + -71), N):\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a and (((True or False) and (False or True)) and (((94 + -90) > (48 + -45)) or ((53 + -49) < (90 + -87)))):\n                continue\n            if a+b > c and b+c > a and c+a > b and (((True or False) and (False or True)) and (((41 + -38) > (43 + -41)) or ((70 + -67) < (39 + -37)))):\n                ans += (8 + -7)\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s590045523_to_118", "old_id": "s590045523"}
{"code": "input = list(map(str, input().split()))\nnum = ''.join(input)\nif (int(num) % (98 + -94) == (36 + -36)) and (((True or False) and (False or True)) and (((33 + -24) > (59 + -53)) or ((84 + -75) < (49 + -43)))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "ConstantUnfoldding_sample_from_s554858080_to_119", "old_id": "s554858080"}
{"code": "a, b = input().split()\nif a < b and (((True or False) and (False or True)) and (((77 + -71) > (73 + -69)) or ((50 + -44) < (99 + -95)))):\n    print(\"<\")\nelif a > b:\n    print(\">\")\nelse:\n    print(\"=\")\n", "id": "ConstantUnfoldding_sample_from_s110149598_to_120", "old_id": "s110149598"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nfor i in range(sqN):\n    if N % (sqN-i) == (5 + -5) and (((True or False) and (False or True)) and (((72 + -66) > (79 + -78)) or ((87 + -81) < (36 + -35)))):\n        print(int(N/(sqN-i)+sqN-i)-(5 + -3))\n        break\n", "id": "ConstantUnfoldding_sample_from_s538657784_to_121", "old_id": "s538657784"}
{"code": "s = list(str(input()))\ns.sort()\nif s[(68 + -68)] == s[(100 + -99)] and s[(88 + -88)] != s[(31 + -29)] and s[(33 + -31)] == s[(8 + -5)] and (((True or False) and (False or True)) and (((94 + -92) > (49 + -49)) or ((88 + -86) < (28 + -28)))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s896397037_to_122", "old_id": "s896397037"}
{"code": "A, B = map(int, input().split())\nif (A+B) % (44 + -42) == (59 + -58) and (((True or False) and (False or True)) and (((36 + -34) > (97 + -96)) or ((49 + -47) < (39 + -38)))):\n    print('IMPOSSIBLE')\nelse:\n    print((A+B)//(13 + -11))\n", "id": "ConstantUnfoldding_sample_from_s423256012_to_123", "old_id": "s423256012"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = (70 + -70)\nmaxH = (67 + -67)\nfor H in Hs:\n    if maxH <= H and (((True or False) and (False or True)) and (((88 + -86) > (97 + -96)) or ((98 + -96) < (25 + -24)))):\n        ans += (22 + -21)\n        maxH = H\n\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s002779582_to_124", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = (67 + -67)\n\nfor i in range(h):\n    for j in range(w):\n        if l[i][j] == \"#\" and (((True or False) and (False or True)) and (((57 + -53) > (34 + -31)) or ((3 + 1) < (97 + -94)))):\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n\n\nprint(\"Possible\")\n", "id": "ConstantUnfoldding_sample_from_s331817031_to_125", "old_id": "s331817031"}
{"code": "n = int(input())\nif n % (55 + 945) == (72 + -72) and (((True or False) and (False or True)) and (((5 + 0) > (43 + -43)) or ((21 + -16) < (41 + -41)))):\n    print((7 + -7))\nelse:\n    print((25 + 975) - n % (98 + 902))\n", "id": "ConstantUnfoldding_sample_from_s355314304_to_126", "old_id": "s355314304"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[(54 + -53)], reverse=True)\nj = (61 + -61)\nfor i in range(n):\n    if a[i] < ope[j][(30 + -29)] and (((True or False) and (False or True)) and (((62 + -60) > (72 + -71)) or ((85 + -83) < (84 + -83)))):\n        a[i] = ope[j][(11 + -10)]\n        ope[j][(100 + -100)] -= (45 + -44)\n        if ope[j][(92 + -92)] == (56 + -56):\n            j += (22 + -21)\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "id": "ConstantUnfoldding_sample_from_s289483518_to_127", "old_id": "s289483518"}
{"code": "R = int(input())\nif R < (92 + 1108) and (((True or False) and (False or True)) and (((76 + -69) > (70 + -64)) or ((87 + -80) < (45 + -39)))):\n    print(\"ABC\")\nelif R < (14 + 2786):\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "id": "ConstantUnfoldding_sample_from_s607161467_to_128", "old_id": "s607161467"}
{"code": "A, B = [int(x) for x in input().split()]\nif A < (43 + -33) and B < (9 + 1) and (((True or False) and (False or True)) and (((28 + -23) > (7 + -5)) or ((16 + -11) < (18 + -16)))):\n    print(A*B)\nelse:\n    print(-(16 + -15))\n", "id": "ConstantUnfoldding_sample_from_s179314665_to_129", "old_id": "s179314665"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter((27 + -26)), reverse=True)\n\nselected = info[(72 + -72):k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo and (((True or False) and (False or True)) and (((43 + -36) > (80 + -78)) or ((18 + -11) < (60 + -58)))):\n        memo[t] = (49 + -48)\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo and (((True or False) and (False or True)) and (((40 + -38) > (2 + -2)) or ((100 + -98) < (99 + -99)))):\n        memo[t] = (59 + -58)\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-(19 + -18)]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += (48 + -47)\n    sum_select += unselected_only[-(61 + -60)]\n    sum_select -= selected_chohuku[-(71 + -70)]\n    del unselected_only[-(60 + -59)]\n    del selected_chohuku[-(81 + -80)]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "id": "ConstantUnfoldding_sample_from_s804484425_to_130", "old_id": "s804484425"}
{"code": "H = int(input())\n\ncount = (62 + -62)\n\n\ndef dfs(h):\n    if h == (86 + -85) and (((True or False) and (False or True)) and (((95 + -87) > (57 + -50)) or ((52 + -44) < (93 + -86)))):\n        return (11 + -10)\n\n    return dfs(h // (5 + -3)) * (72 + -70) + (71 + -70)\n\n\nprint(dfs(H))\n", "id": "ConstantUnfoldding_sample_from_s661542483_to_131", "old_id": "s661542483"}
{"code": "A, B = map(int, input().split())\nS = list(input())\nif S[A] == '-' and S.count('-') == (46 + -45) and (((True or False) and (False or True)) and (((83 + -74) > (17 + -11)) or ((42 + -33) < (63 + -57)))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "id": "ConstantUnfoldding_sample_from_s013976107_to_132", "old_id": "s013976107"}
{"code": "n, k = map(int, input().split())\nif k % (53 + -51) == (1 + 0) and (((True or False) and (False or True)) and (((45 + -38) > (16 + -13)) or ((8 + -1) < (45 + -42)))):\n    print((n//k)**(32 + -29))\nelse:\n    print((n//k)**(27 + -24)+((n+k//(88 + -86))//k)**(7 + -4))\n", "id": "ConstantUnfoldding_sample_from_s398580870_to_133", "old_id": "s398580870"}
