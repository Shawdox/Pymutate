{"code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nidx_j0nq = 0\nlist_zy74 = range(m)\nwhile idx_j0nq < len(list_zy74):\n    i = list_zy74[idx_j0nq]\n    p, x = map(int, input().split())\n    s = 0\n    idx_3c8z = 0\n    list_n79y = range(len(t))\n    while idx_3c8z < len(list_n79y):\n        j = list_n79y[idx_3c8z]\n        if j == p-1 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            s += x\n        else:\n            s += t[j]\n        idx_3c8z = idx_3c8z + 1\n    print(s)\n    idx_j0nq = idx_j0nq + 1\n", "id": "For2While_sample_from_s609392609_to_0", "old_id": "s609392609"}
{"code": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    idx_7d6g = 0\n    list_urdz = V.get(i, [])\n    while idx_7d6g < len(list_urdz):\n        v, w = list_urdz[idx_7d6g]\n        if (w % 2) == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n        idx_7d6g = idx_7d6g + 1\n    return True\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    n = int(input())\n    V = {}\n    color = {}\n    idx_la2r = 0\n    list_pnjb = range(1, n)\n    while idx_la2r < len(list_pnjb):\n        i = list_pnjb[idx_la2r]\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n        idx_la2r = idx_la2r + 1\n    idx_yl9q = 0\n    list_ragd = range(1, n+1)\n    while idx_yl9q < len(list_ragd):\n        i = list_ragd[idx_yl9q]\n        color[i] = -1\n        idx_yl9q = idx_yl9q + 1\n\n    while True:\n        i = 0\n        idx_srk6 = 0\n        list_b16l = range(1, n+1)\n        while idx_srk6 < len(list_b16l):\n            j = list_b16l[idx_srk6]\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n            idx_srk6 = idx_srk6 + 1\n        if i == 0:\n            idx_vn4d = 0\n            list_wpqo = range(1, n+1)\n            while idx_vn4d < len(list_wpqo):\n                j = list_wpqo[idx_vn4d]\n                print(color[j])\n                idx_vn4d = idx_vn4d + 1\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "id": "For2While_sample_from_s908812767_to_1", "old_id": "s908812767"}
{"code": "s = input()\nif len(s) < 26 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    idx_n2lu = 0\n    list_rw6m = range(26)\n    while idx_n2lu < len(list_rw6m):\n        i = list_rw6m[idx_n2lu]\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\n        idx_n2lu = idx_n2lu + 1\nelse:\n    idx_l2nm = 0\n    list_vl3t = reversed(range(1, 26))\n    while idx_l2nm < len(list_vl3t):\n        i = list_vl3t[idx_l2nm]\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            idx_2qm0 = 0\n            list_5b30 = range(26)\n            while idx_2qm0 < len(list_5b30):\n                j = list_5b30[idx_2qm0]\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n                idx_2qm0 = idx_2qm0 + 1\n        idx_l2nm = idx_l2nm + 1\n    print(-1)\n", "id": "For2While_sample_from_s504709360_to_2", "old_id": "s504709360"}
{"code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = 10 ** 18\nidx_x1on = 0\nlist_dfmk = range(1, int(n ** (1 / 2)) + 2)\nwhile idx_x1on < len(list_dfmk):\n    i = list_dfmk[idx_x1on]\n    if n % i != 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        continue\n    j = n // i\n    ans = min(ans, i + j - 2)\n    idx_x1on = idx_x1on + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s662673721_to_3", "old_id": "s662673721"}
{"code": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nidx_cs78 = 0\nlist_a3x7 = range(1, K+1)\nwhile idx_cs78 < len(list_a3x7):\n    i = list_a3x7[idx_cs78]\n    if N - K + 1 < i and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        ans = 0\n    else:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    print(int(ans) % mod)\n    idx_cs78 = idx_cs78 + 1\n", "id": "For2While_sample_from_s790754864_to_4", "old_id": "s790754864"}
{"code": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    idx_fk13 = 0\n    list_jho7 = zip(a, b)\n    while idx_fk13 < len(list_jho7):\n        i, j = list_jho7[idx_fk13]\n        s += i != j\n        idx_fk13 = idx_fk13 + 1\n    return s\n\n\nans = 10**6\nidx_td1u = 0\nlist_gvb8 = range(len(s))\nwhile idx_td1u < len(list_gvb8):\n    i = list_gvb8[idx_td1u]\n    a = s[i:]\n    if len(a) >= len(t) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        ans = min(ans, check(t, a[:len(t)]))\n    idx_td1u = idx_td1u + 1\nprint(ans)\n", "id": "For2While_sample_from_s636719275_to_5", "old_id": "s636719275"}
{"code": "N, L = map(int, input().split())\naji = []\nidx_lxui = 0\nlist_7qjy = range(1, N+1)\nwhile idx_lxui < len(list_7qjy):\n    i = list_7qjy[idx_lxui]\n    aji.append(L+i-1)\n    idx_lxui = idx_lxui + 1\nif min(aji) >= 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= 0:\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "id": "For2While_sample_from_s240532461_to_6", "old_id": "s240532461"}
{"code": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nidx_zlr4 = 0\nlist_i95z = range(min(x+y, a+b, c))\nwhile idx_zlr4 < len(list_i95z):\n    i = list_i95z[idx_zlr4]\n    if pq[i] < r[i] and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        pq[i] = r[i]\n    idx_zlr4 = idx_zlr4 + 1\nprint(sum(pq))\n", "id": "For2While_sample_from_s828550015_to_7", "old_id": "s828550015"}
{"code": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nidx_ejbg = 0\nlist_yvjx = A[:M]\nwhile idx_ejbg < len(list_yvjx):\n    a = list_yvjx[idx_ejbg]\n    if a/S - 1/(4*M) < 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print('No')\n        break\n    idx_ejbg = idx_ejbg + 1\n", "id": "For2While_sample_from_s846046431_to_8", "old_id": "s846046431"}
{"code": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nidx_mazd = 0\nlist_7ors = range(q)\nwhile idx_mazd < len(list_7ors):\n    _ = list_7ors[idx_mazd]\n    t = list(map(int, input().split()))\n    if t[0] == 1 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n    idx_mazd = idx_mazd + 1\n", "id": "For2While_sample_from_s016605598_to_9", "old_id": "s016605598"}
{"code": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nidx_9gke = 0\nlist_3ejt = range(Q)\nwhile idx_9gke < len(list_3ejt):\n    _ = list_3ejt[idx_9gke]\n    Q_groups.append([*LI()])\n    idx_9gke = idx_9gke + 1\n\nmax_score = 0\nidx_bu6l = 0\nlist_wjb7 = combinations_with_replacement(range(1, M + 1), r=N)\nwhile idx_bu6l < len(list_wjb7):\n    p = list_wjb7[idx_bu6l]\n    temp_score = 0\n    idx_8a6g = 0\n    list_8hgj = Q_groups\n    while idx_8a6g < len(list_8hgj):\n        q = list_8hgj[idx_8a6g]\n        if p[q[1] - 1] - p[q[0] - 1] == q[2] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            temp_score += q[3]\n        idx_8a6g = idx_8a6g + 1\n    max_score = max(max_score, temp_score)\n    idx_bu6l = idx_bu6l + 1\n\nprint(max_score)\n", "id": "For2While_sample_from_s269975433_to_10", "old_id": "s269975433"}
{"code": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nidx_mwe3 = 0\nlist_ksyz = range(len(strn))\nwhile idx_mwe3 < len(list_ksyz):\n    i = list_ksyz[idx_mwe3]\n    if i == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        idx_kvwo = 0\n        list_k6hq = shichigolist\n        while idx_kvwo < len(list_k6hq):\n            j = list_k6hq[idx_kvwo]\n            shichigo[i].append(j)\n            idx_kvwo = idx_kvwo + 1\n    else:\n        idx_svxr = 0\n        list_h9ru = shichigo[i-1]\n        while idx_svxr < len(list_h9ru):\n            j = list_h9ru[idx_svxr]\n            idx_kqd9 = 0\n            list_7ga5 = shichigolist\n            while idx_kqd9 < len(list_7ga5):\n                k = list_7ga5[idx_kqd9]\n                shichigo[i].append(j+k)\n                idx_kqd9 = idx_kqd9 + 1\n            idx_svxr = idx_svxr + 1\n    idx_mwe3 = idx_mwe3 + 1\ntarget = len(strn)-1\nidx_o3a2 = 0\nlist_qn43 = range(len(strn))\nwhile idx_o3a2 < len(list_qn43):\n    i = list_qn43[idx_o3a2]\n    idx_0zr8 = 0\n    list_b4te = shichigo[i][:]\n    while idx_0zr8 < len(list_b4te):\n        j = list_b4te[idx_0zr8]\n        if i == target and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n        idx_0zr8 = idx_0zr8 + 1\n    idx_o3a2 = idx_o3a2 + 1\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "id": "For2While_sample_from_s949655009_to_11", "old_id": "s949655009"}
{"code": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nidx_n2rp = 0\nlist_srdc = range(len(alphabets))\nwhile idx_n2rp < len(list_srdc):\n    i = list_srdc[idx_n2rp]\n    if alphabets[i] == s and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print(alphabets[i+1])\n    idx_n2rp = idx_n2rp + 1\n", "id": "For2While_sample_from_s961772658_to_12", "old_id": "s961772658"}
{"code": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        idx_s8ar = 0\n        list_3wv1 = range(first, end+1)\n        while idx_s8ar < len(list_3wv1):\n            s_i = list_3wv1[idx_s8ar]\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?' and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                break\n            t_i += 1\n            idx_s8ar = idx_s8ar + 1\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    idx_jk5g = 0\n    list_lrae = range(first, end+1)\n    while idx_jk5g < len(list_lrae):\n        i = list_lrae[idx_jk5g]\n        ans[i] = T[t_i]\n        t_i += 1\n        idx_jk5g = idx_jk5g + 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    solve()\n", "id": "For2While_sample_from_s826716211_to_13", "old_id": "s826716211"}
{"code": "import math\nN, D = map(int, input().split())\nmat = []\nidx_hfjx = 0\nlist_trzu = range(N)\nwhile idx_hfjx < len(list_trzu):\n    d = list_trzu[idx_hfjx]\n    mat.append([int(x) for x in input().split()])\n    idx_hfjx = idx_hfjx + 1\n\nc = 0\nidx_hpim = 0\nlist_wie7 = range(len(mat)-1)\nwhile idx_hpim < len(list_wie7):\n    i = list_wie7[idx_hpim]\n    idx_ucno = 0\n    list_egp0 = range(i+1, len(mat))\n    while idx_ucno < len(list_egp0):\n        j = list_egp0[idx_ucno]\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            c += 1\n        idx_ucno = idx_ucno + 1\n    idx_hpim = idx_hpim + 1\nprint(c)\n", "id": "For2While_sample_from_s663509070_to_14", "old_id": "s663509070"}
{"code": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nidx_rdho = 0\nlist_bjzs = range(2**(h+w))\nwhile idx_rdho < len(list_bjzs):\n    i = list_bjzs[idx_rdho]\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    idx_lf5h = 0\n    list_nmq8 = range(h)\n    while idx_lf5h < len(list_nmq8):\n        l = list_nmq8[idx_lf5h]\n        idx_8gva = 0\n        list_5qzw = range(w)\n        while idx_8gva < len(list_5qzw):\n            k = list_5qzw[idx_8gva]\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0' and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                ct += 1\n            idx_8gva = idx_8gva + 1\n        idx_lf5h = idx_lf5h + 1\n    if ct == ka and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        ans += 1\n    idx_rdho = idx_rdho + 1\nprint(ans)\n", "id": "For2While_sample_from_s760938927_to_15", "old_id": "s760938927"}
{"code": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nidx_kml1 = 0\nlist_sbu5 = qs\nwhile idx_kml1 < len(list_sbu5):\n    operation = list_sbu5[idx_kml1]\n    if operation[0] == '1' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        n = not n\n    if operation[0] == '2' and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\n    idx_kml1 = idx_kml1 + 1\ns = left+s+right\nprint(s[::-1] if n else s)\n", "id": "For2While_sample_from_s621701371_to_16", "old_id": "s621701371"}
{"code": "def bubbleSort(cards):\n    n = len(cards)\n    idx_vuxf = 0\n    list_jxyf = range(0, n)\n    while idx_vuxf < len(list_jxyf):\n        i = list_jxyf[idx_vuxf]\n        idx_whcd = 0\n        list_j43i = range(n-1, i, -1)\n        while idx_whcd < len(list_j43i):\n            j = list_j43i[idx_whcd]\n            if int(cards[j][1]) < int(cards[j-1][1]) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n            idx_whcd = idx_whcd + 1\n        idx_vuxf = idx_vuxf + 1\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    idx_o329 = 0\n    list_fjvi = range(0, n)\n    while idx_o329 < len(list_fjvi):\n        i = list_fjvi[idx_o329]\n        mini = i\n        idx_6rq9 = 0\n        list_dri9 = range(i, n)\n        while idx_6rq9 < len(list_dri9):\n            j = list_dri9[idx_6rq9]\n            if int(cards[j][1]) < int(cards[mini][1]) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                mini = j\n            idx_6rq9 = idx_6rq9 + 1\n        if mini != i and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            cards[i], cards[mini] = cards[mini], cards[i]\n        idx_o329 = idx_o329 + 1\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "id": "For2While_sample_from_s875904659_to_17", "old_id": "s875904659"}
{"code": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return [deque()]\n    k = []\n    idx_gbaq = 0\n    list_p1vc = range(len(li))\n    while idx_gbaq < len(list_p1vc):\n        i = list_p1vc[idx_gbaq]\n        if i in used and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        idx_0ypb = 0\n        list_fpq5 = sub_list\n        while idx_0ypb < len(list_fpq5):\n            sub = list_fpq5[idx_0ypb]\n            sub.appendleft(li[i])\n            idx_0ypb = idx_0ypb + 1\n        k.extend(sub_list)\n        used.discard(i)\n        idx_gbaq = idx_gbaq + 1\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    idx_1e75 = 0\n    list_yhxm = range(len(li)-1, -1, -1)\n    while idx_1e75 < len(list_yhxm):\n        i = list_yhxm[idx_1e75]\n        n += li[i] * base\n        base *= 10\n        idx_1e75 = idx_1e75 + 1\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    idx_blad = 0\n    list_svb3 = range(len(li))\n    while idx_blad < len(list_svb3):\n        i = list_svb3[idx_blad]\n        if li[i] >= int(math.sqrt(n)) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            break\n        if li[i] == -1 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            continue\n        idx_9xg5 = 0\n        list_imdg = range(i+1, len(li))\n        while idx_9xg5 < len(list_imdg):\n            j = list_imdg[idx_9xg5]\n            if li[j] % li[i] == 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                li[j] = -1\n            idx_9xg5 = idx_9xg5 + 1\n        idx_blad = idx_blad + 1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    idx_u0mb = 0\n    list_9c7t = range(0, (1 << (n+1)))\n    while idx_u0mb < len(list_9c7t):\n        bit = list_9c7t[idx_u0mb]\n        ss = set()\n        idx_pkd1 = 0\n        list_0d9r = range(0, n)\n        while idx_pkd1 < len(list_0d9r):\n            i = list_0d9r[idx_pkd1]\n            if (bit & (1 << i)) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                ss.add(li[i])\n            idx_pkd1 = idx_pkd1 + 1\n        s.append(ss)\n        idx_u0mb = idx_u0mb + 1\n    return s\n\n\ndef factorial(n):\n    if n == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\nif n == len(set(A)) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "For2While_sample_from_s137613418_to_18", "old_id": "s137613418"}
{"code": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\nidx_aiy6 = 0\nlist_bmx3 = range(n)\nwhile idx_aiy6 < len(list_bmx3):\n    i = list_bmx3[idx_aiy6]\n    idx_8d2x = 0\n    list_y0zg = range(n)\n    while idx_8d2x < len(list_y0zg):\n        d = list_y0zg[idx_8d2x]\n        j = i + d\n        k = j + d\n        if k >= n and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            break\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n\n            ans -= 1\n        idx_8d2x = idx_8d2x + 1\n    idx_aiy6 = idx_aiy6 + 1\nprint(ans)\n", "id": "For2While_sample_from_s922746568_to_19", "old_id": "s922746568"}
{"code": "def atc_079a(input_value: str) -> str:\n    n = 3\n    idx_04fk = 0\n    list_3ja0 = range(0, len(input_value) + 1 - n)\n    while idx_04fk < len(list_3ja0):\n        i = list_3ja0[idx_04fk]\n        idx_mgtc = 0\n        list_ygub = range(1, n)\n        while idx_mgtc < len(list_ygub):\n            j = list_ygub[idx_mgtc]\n            if input_value[i] != input_value[i + j] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                break\n            if j == n - 1 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                return \"Yes\"\n            idx_mgtc = idx_mgtc + 1\n        idx_04fk = idx_04fk + 1\n    return \"No\"\n\n\ninput_value = input()\nprint(atc_079a(input_value))\n", "id": "For2While_sample_from_s616346400_to_20", "old_id": "s616346400"}
{"code": "n = int(input())\nlst = []\npair = 0\nidx_pvkz = 0\nlist_y95s = range(n)\nwhile idx_pvkz < len(list_y95s):\n    i = list_y95s[idx_pvkz]\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\n    idx_pvkz = idx_pvkz + 1\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nidx_e5sh = 0\nlist_tipv = lst\nwhile idx_e5sh < len(list_tipv):\n    i = list_tipv[idx_e5sh]\n    if i == pre and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\n    idx_e5sh = idx_e5sh + 1\nprint(cnt)\n", "id": "For2While_sample_from_s430322735_to_21", "old_id": "s430322735"}
{"code": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        return gcd(b, a)\n    if b == 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nidx_o4vy = 0\nlist_y2op = range(aa)\nwhile idx_o4vy < len(list_y2op):\n    i = list_y2op[idx_o4vy]\n    if s[n//aa*i] != t[m//aa*i] and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        print(-1)\n        exit()\n    idx_o4vy = idx_o4vy + 1\nprint(bb)\n", "id": "For2While_sample_from_s986062252_to_22", "old_id": "s986062252"}
{"code": "while True:\n    n = int(input())\n    if n == 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        break\n\n    res = -1111111111\n    s = 0\n    idx_i09x = 0\n    list_46mf = range(n)\n    while idx_i09x < len(list_46mf):\n        i = list_46mf[idx_i09x]\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n        idx_i09x = idx_i09x + 1\n\n    print(res)\n", "id": "For2While_sample_from_s923405856_to_23", "old_id": "s923405856"}
{"code": "from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    D = list(map(int, input().split()))\n\n    mod = 998244353\n    if D[0] != 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print(0)\n        return\n\n    cnt = Counter(D)\n    if cnt[0] > 1 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        print(0)\n        return\n\n    res = 1\n    idx_goc3 = 0\n    list_alnd = range(1, max(D)+1)\n    while idx_goc3 < len(list_alnd):\n        i = list_alnd[idx_goc3]\n        if cnt[i-1] == 1 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            continue\n        res *= cnt[i-1]**cnt[i] % mod\n        res %= mod\n        idx_goc3 = idx_goc3 + 1\n\n    print(res)\n\n\nsolve()\n", "id": "For2While_sample_from_s534639230_to_24", "old_id": "s534639230"}
{"code": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nidx_bnxv = 0\nlist_v8sm = A\nwhile idx_bnxv < len(list_v8sm):\n    a = list_v8sm[idx_bnxv]\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n    if count_div_2 is None and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n    idx_bnxv = idx_bnxv + 1\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "id": "For2While_sample_from_s817205687_to_25", "old_id": "s817205687"}
{"code": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    idx_dg1b = 0\n    list_6wg8 = list(enumerate(a))\n    while idx_dg1b < len(list_6wg8):\n        i, num = list_6wg8[idx_dg1b]\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n        idx_dg1b = idx_dg1b + 1\n    right_seg = SegmentTree(N, 0)\n    idx_042h = 0\n    list_myf9 = list(enumerate(a[::-1]))\n    while idx_042h < len(list_myf9):\n        i, num = list_myf9[idx_042h]\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n        idx_042h = idx_042h + 1\n\n    print(sum(ans))\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n    main()\n", "id": "For2While_sample_from_s764169243_to_26", "old_id": "s764169243"}
{"code": "S = list(input())\n\ncount = 0\nrecord = 0\nidx_ldio = 0\nlist_neqg = range(len(S))\nwhile idx_ldio < len(list_neqg):\n    i = list_neqg[idx_ldio]\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\n    idx_ldio = idx_ldio + 1\nif count > record and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    record = count\n\nprint(record)\n", "id": "For2While_sample_from_s993625131_to_27", "old_id": "s993625131"}
{"code": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nidx_ns2q = 0\nlist_g0ms = T\nwhile idx_ns2q < len(list_g0ms):\n    i = list_g0ms[idx_ns2q]\n    if i == S[-1] or i == S[0] and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n    idx_ns2q = idx_ns2q + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s315467749_to_28", "old_id": "s315467749"}
{"code": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nidx_xzhc = 0\nlist_lzua = range(num_r)\nwhile idx_xzhc < len(list_lzua):\n    i = list_lzua[idx_xzhc]\n    if c[i] != comp[i] and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        ans += 1\n    idx_xzhc = idx_xzhc + 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "id": "For2While_sample_from_s031459110_to_29", "old_id": "s031459110"}
{"code": "import sys\nsys.setrecursionlimit(10**7)\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef II(): return int(sys.stdin.readline())\ndef SI(): return sys.stdin.readline().strip()\n\n\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = II()\n    a_li = LI()\n\n    a_li.sort()\n\n    n = a_li[-1]\n\n    dif = INF\n    prev_dif = dif\n    idx_8i7x = 0\n    list_plrt = a_li[:-1]\n    while idx_8i7x < len(list_plrt):\n        a = list_plrt[idx_8i7x]\n        dif = min(abs(n/2 - a), dif)\n        if dif != prev_dif and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            r = a\n            prev_dif = dif\n        idx_8i7x = idx_8i7x + 1\n\n    print(n, r)\n\n\nmain()\n", "id": "For2While_sample_from_s681105182_to_30", "old_id": "s681105182"}
{"code": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nidx_j29v = 0\nlist_6b4z = range(N-M+1)\nwhile idx_j29v < len(list_6b4z):\n    i = list_6b4z[idx_j29v]\n    S_2 = S[i:i+M]\n    cnt = 0\n    idx_oqlu = 0\n    list_j4w5 = range(M)\n    while idx_oqlu < len(list_j4w5):\n        j = list_j4w5[idx_oqlu]\n        if T[j] != S_2[j] and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            cnt += 1\n        idx_oqlu = idx_oqlu + 1\n    ans = min(ans, cnt)\n    idx_j29v = idx_j29v + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s838619850_to_31", "old_id": "s838619850"}
{"code": "def main():\n    n = int(input())\n    sdic = {}\n    idx_fnad = 0\n    list_ka71 = range(n)\n    while idx_fnad < len(list_ka71):\n        _ = list_ka71[idx_fnad]\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n        idx_fnad = idx_fnad + 1\n    ans = 0\n    idx_91qd = 0\n    list_gipl = list(sdic.items())\n    while idx_91qd < len(list_gipl):\n        k, v = list_gipl[idx_91qd]\n        ans += v*(v-1)//2\n        idx_91qd = idx_91qd + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n    main()\n", "id": "For2While_sample_from_s733189960_to_32", "old_id": "s733189960"}
{"code": "n = int(input())\nres = 0\nidx_u7k5 = 0\nlist_qdlx = range(n)\nwhile idx_u7k5 < len(list_qdlx):\n    _ = list_qdlx[idx_u7k5]\n    x, u = list(input().split())\n    if u == \"BTC\" and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        res += float(x) * 380000\n    else:\n        res += int(x)\n    idx_u7k5 = idx_u7k5 + 1\nprint(res)\n", "id": "For2While_sample_from_s238775098_to_33", "old_id": "s238775098"}
{"code": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    idx_exs5 = 0\n    list_vjd7 = range(n//2)\n    while idx_exs5 < len(list_vjd7):\n        i = list_vjd7[idx_exs5]\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n        idx_exs5 = idx_exs5 + 1\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n    main()\n", "id": "For2While_sample_from_s101447419_to_34", "old_id": "s101447419"}
{"code": "A, B = map(int, input().split())\n\nmin = B * 10\nmax = (B+1) * 10 - 1\n\nans = -1\nidx_in5r = 0\nlist_s3ne = range(min, max+1)\nwhile idx_in5r < len(list_s3ne):\n    i = list_s3ne[idx_in5r]\n    if int(i * 0.08) == A and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        ans = i\n        break\n    idx_in5r = idx_in5r + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s764356857_to_35", "old_id": "s764356857"}
{"code": "N, K = map(int, input().split())\nA = []\nidx_lxtj = 0\nlist_sc7h = range(N)\nwhile idx_lxtj < len(list_sc7h):\n    i = list_sc7h[idx_lxtj]\n    A.append(0)\n    idx_lxtj = idx_lxtj + 1\nidx_dsqc = 0\nlist_iym3 = range(K)\nwhile idx_dsqc < len(list_iym3):\n    i = list_iym3[idx_dsqc]\n    d = int(input())\n    AA = list(map(int, input().split()))\n    idx_2w3y = 0\n    list_naqz = range(d)\n    while idx_2w3y < len(list_naqz):\n        j = list_naqz[idx_2w3y]\n        A[AA[j] - 1] = 1\n        idx_2w3y = idx_2w3y + 1\n    idx_dsqc = idx_dsqc + 1\n\nn = 0\nidx_9oqi = 0\nlist_my4o = range(N)\nwhile idx_9oqi < len(list_my4o):\n    i = list_my4o[idx_9oqi]\n    if A[i] == 0 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        n += 1\n    idx_9oqi = idx_9oqi + 1\nprint(n)\n", "id": "For2While_sample_from_s225521100_to_36", "old_id": "s225521100"}
{"code": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    idx_6hjc = 0\n    list_0vca = range(N)\n    while idx_6hjc < len(list_0vca):\n        i = list_0vca[idx_6hjc]\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n        idx_6hjc = idx_6hjc + 1\n    idx_infg = 0\n    list_hw27 = modK\n    while idx_infg < len(list_hw27):\n        key = list_hw27[idx_infg]\n        lenK = len(modK[key])\n        idx_8anz = 0\n        list_7rta = list(enumerate(modK[key]))\n        while idx_8anz < len(list_7rta):\n            i, a = list_7rta[idx_8anz]\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n            idx_8anz = idx_8anz + 1\n        idx_infg = idx_infg + 1\n\n    print(count)\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n    solve()\n", "id": "For2While_sample_from_s975943078_to_37", "old_id": "s975943078"}
{"code": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    idx_7ngc = 0\n    list_3e8b = range(len(A)-1)\n    while idx_7ngc < len(list_3e8b):\n        i = list_3e8b[idx_7ngc]\n        dist.append(A[i+1]-A[i])\n        idx_7ngc = idx_7ngc + 1\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n    main()\n", "id": "For2While_sample_from_s267613210_to_38", "old_id": "s267613210"}
{"code": "n = int(input())\ns = input()\ncnt = 1\nidx_q5t2 = 0\nlist_al65 = range(n-1)\nwhile idx_q5t2 < len(list_al65):\n    i = list_al65[idx_q5t2]\n    if s[i] == s[i+1] and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        continue\n\n    else:\n        cnt += 1\n    idx_q5t2 = idx_q5t2 + 1\n\nprint(cnt)\n", "id": "For2While_sample_from_s869207096_to_39", "old_id": "s869207096"}
{"code": "a = [int(input()) for i in range(5)]\n\ndic = {}\nidx_6qo7 = 0\nlist_tbzx = range(5)\nwhile idx_6qo7 < len(list_tbzx):\n    i = list_tbzx[idx_6qo7]\n    if str(a[i])[-1] == \"0\" and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n    idx_6qo7 = idx_6qo7 + 1\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "id": "For2While_sample_from_s575946485_to_40", "old_id": "s575946485"}
{"code": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nidx_fyxr = 0\nlist_uwlb = range(n)\nwhile idx_fyxr < len(list_uwlb):\n    i = list_uwlb[idx_fyxr]\n    sum += int(l[i])\n    if max < int(l[i]) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        max = int(l[i])\n    if min > int(l[i]) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        min = int(l[i])\n    idx_fyxr = idx_fyxr + 1\nprint(min, max, sum)\n", "id": "For2While_sample_from_s704354119_to_41", "old_id": "s704354119"}
{"code": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nidx_p2kg = 0\nlist_4you = range(1, N)\nwhile idx_p2kg < len(list_4you):\n    i = list_4you[idx_p2kg]\n    tmp = a[i - 1] + a[i]\n    if tmp > x and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n    idx_p2kg = idx_p2kg + 1\n\nprint(cnt)\n", "id": "For2While_sample_from_s708549466_to_42", "old_id": "s708549466"}
{"code": "n = int(input())\narr = {}\nidx_ibvm = 0\nlist_kh3l = range(n)\nwhile idx_ibvm < len(list_kh3l):\n    i = list_kh3l[idx_ibvm]\n    s = input()\n    if not s in arr and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        arr[s] = 1\n    else:\n        arr[s] += 1\n    idx_ibvm = idx_ibvm + 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nidx_0dlu = 0\nlist_aten = out_sort\nwhile idx_0dlu < len(list_aten):\n    i = list_aten[idx_0dlu]\n    print(i)\n    idx_0dlu = idx_0dlu + 1\n", "id": "For2While_sample_from_s622795537_to_43", "old_id": "s622795537"}
{"code": "n = int(input())\ns = str(input())\n\nans = 0\nidx_pet0 = 0\nlist_7luc = range(n)\nwhile idx_pet0 < len(list_7luc):\n    i = list_7luc[idx_pet0]\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    idx_vxer = 0\n    list_qbv5 = x\n    while idx_vxer < len(list_qbv5):\n        w = list_qbv5[idx_vxer]\n        if w in y and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            z += 1\n        idx_vxer = idx_vxer + 1\n    if z > ans and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ans = z\n    idx_pet0 = idx_pet0 + 1\nprint(ans)\n", "id": "For2While_sample_from_s232279435_to_44", "old_id": "s232279435"}
{"code": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nidx_1mol = 0\nlist_g6wm = range(N)\nwhile idx_1mol < len(list_g6wm):\n    i = list_g6wm[idx_1mol]\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n    idx_1mol = idx_1mol + 1\nidx_l9g2 = 0\nlist_8aer = range(4)\nwhile idx_l9g2 < len(list_8aer):\n    i = list_8aer[idx_l9g2]\n    idx_fb0w = 0\n    list_jmbr = range(3)\n    while idx_fb0w < len(list_jmbr):\n        j = list_jmbr[idx_fb0w]\n        idx_mxp7 = 0\n        list_p4nc = range(10)\n        while idx_mxp7 < len(list_p4nc):\n            k = list_p4nc[idx_mxp7]\n            line += ' {0}'.format(m[i][j][k])\n            idx_mxp7 = idx_mxp7 + 1\n        print(line)\n        line = ''\n        idx_fb0w = idx_fb0w + 1\n    if i < 3 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        print('#'*20)\n    idx_l9g2 = idx_l9g2 + 1\n", "id": "For2While_sample_from_s067092519_to_45", "old_id": "s067092519"}
{"code": "N = int(input())\nS = input()\nx = 1\nidx_tc1l = 0\nlist_msz7 = range(N-1)\nwhile idx_tc1l < len(list_msz7):\n    i = list_msz7[idx_tc1l]\n    if S[i] != S[i+1] and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        x = x+1\n    idx_tc1l = idx_tc1l + 1\nprint(x)\n", "id": "For2While_sample_from_s642705424_to_46", "old_id": "s642705424"}
{"code": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    idx_bqe4 = 0\n    list_47ri = range(M)\n    while idx_bqe4 < len(list_47ri):\n        _ = list_47ri[idx_bqe4]\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n        idx_bqe4 = idx_bqe4 + 1\n\n    accum = [[0 for _ in range(N+1)]]\n    idx_ohsx = 0\n    list_fble = range(N)\n    while idx_ohsx < len(list_fble):\n        i = list_fble[idx_ohsx]\n        temp = [0]\n        v = 0\n        idx_gmlv = 0\n        list_n2zq = range(N)\n        while idx_gmlv < len(list_n2zq):\n            j = list_n2zq[idx_gmlv]\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n            idx_gmlv = idx_gmlv + 1\n        accum.append(temp)\n        idx_ohsx = idx_ohsx + 1\n    idx_mw7a = 0\n    list_hfub = range(Q)\n    while idx_mw7a < len(list_hfub):\n        _ = list_hfub[idx_mw7a]\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n        idx_mw7a = idx_mw7a + 1\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n    main()\n", "id": "For2While_sample_from_s048491063_to_47", "old_id": "s048491063"}
{"code": "import re\nimport math\nfrom collections import defaultdict\nimport itertools\nfrom copy import deepcopy\nimport random\nfrom heapq import heappop, heappush\nimport time\nimport os\nimport queue\nimport sys\nimport datetime\nfrom functools import lru_cache\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(2000000)\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nmod = int(10**9+7)\ninf = int(10**20)\n\n\ndef yn(b):\n    if b and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\ndef Yn(b):\n    if b and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef YN(b):\n    if b and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nclass union_find():\n    def __init__(self, n):\n        self.n = n\n        self.P = [a for a in range(N)]\n        self.rank = [0]*n\n\n    def find(self, x):\n        if (x != self.P[x]) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            self.P[x] = self.find(self.P[x])\n        return self.P[x]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def link(self, x, y):\n        if self.rank[x] < self.rank[y] and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            self.P[x] = y\n        elif self.rank[y] < self.rank[x]:\n            self.P[y] = x\n        else:\n            self.P[x] = y\n            self.rank[y] += 1\n\n    def unite(self, x, y):\n        self.link(self.find(x), self.find(y))\n\n    def size(self):\n        S = set()\n        idx_jcz5 = 0\n        list_ysr5 = range(self.n)\n        while idx_jcz5 < len(list_ysr5):\n            a = list_ysr5[idx_jcz5]\n            S.add(self.find(a))\n            idx_jcz5 = idx_jcz5 + 1\n        return len(S)\n\n\ndef is_power(a, b):\n    now = b\n    while now < a:\n        now *= b\n    if now == a and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return True\n    else:\n        return False\n\n\ndef bin_(num, size):\n    A = [0]*size\n    idx_h7r4 = 0\n    list_5a9m = range(size)\n    while idx_h7r4 < len(list_5a9m):\n        a = list_5a9m[idx_h7r4]\n        if (num >> (size-a-1)) & 1 == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            A[a] = 1\n        else:\n            A[a] = 0\n        idx_h7r4 = idx_h7r4 + 1\n    return A\n\n\ndef get_facs(n, mod_=0):\n    A = [1]*(n+1)\n    idx_hi0v = 0\n    list_jl5o = range(2, len(A))\n    while idx_hi0v < len(list_jl5o):\n        a = list_jl5o[idx_hi0v]\n        A[a] = A[a-1]*a\n        if (mod > 0) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            A[a] %= mod_\n        idx_hi0v = idx_hi0v + 1\n    return A\n\n\ndef comb(n, r, mod, fac):\n    if (n-r < 0) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return 0\n    return (fac[n]*pow(fac[n-r], mod-2, mod)*pow(fac[r], mod-2, mod)) % mod\n\n\ndef next_comb(num, size):\n    x = num & (-num)\n    y = num+x\n    z = num & (~y)\n    z //= x\n    z = z >> 1\n    num = (y | z)\n    if (num >= (1 << size)) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return False\n    else:\n        return num\n\n\ndef get_primes(n, type=\"int\"):\n    A = [True]*(n+1)\n    A[0] = False\n    A[1] = False\n    idx_ki38 = 0\n    list_pbyn = range(2, n+1)\n    while idx_ki38 < len(list_pbyn):\n        a = list_pbyn[idx_ki38]\n        if A[a] and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            idx_1k93 = 0\n            list_mt21 = range(a*2, n+1, a)\n            while idx_1k93 < len(list_mt21):\n                b = list_mt21[idx_1k93]\n                A[b] = False\n                idx_1k93 = idx_1k93 + 1\n        idx_ki38 = idx_ki38 + 1\n    if (type == \"bool\") and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return A\n    B = []\n    idx_l8mr = 0\n    list_ns30 = range(n+1)\n    while idx_l8mr < len(list_ns30):\n        a = list_ns30[idx_l8mr]\n        if (A[a]) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            B.append(a)\n        idx_l8mr = idx_l8mr + 1\n    return B\n\n\ndef is_prime(num):\n    if (num <= 2) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return False\n    i = 2\n    while i*i <= num:\n        if (num % i == 0) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return False\n        i += 1\n    return True\n\n\ndef ifelse(a, b, c):\n    if a and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return b\n    else:\n        return c\n\n\ndef join(A, c=\" \"):\n    n = len(A)\n    A = list(map(str, A))\n    s = \"\"\n    idx_eb8y = 0\n    list_lk78 = range(n)\n    while idx_eb8y < len(list_lk78):\n        a = list_lk78[idx_eb8y]\n        s += A[a]\n        if (a < n-1) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            s += c\n        idx_eb8y = idx_eb8y + 1\n    return s\n\n\ndef factorize(n, type_=\"dict\"):\n    b = 2\n    list_ = []\n    while b * b <= n:\n        while n % b == 0:\n            n //= b\n            list_.append(b)\n        b += 1\n    if n > 1 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        list_.append(n)\n    if type_ == \"dict\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        dic = {}\n        idx_8r1e = 0\n        list_qbls = list_\n        while idx_8r1e < len(list_qbls):\n            a = list_qbls[idx_8r1e]\n            if a in dic:\n                dic[a] += 1\n            else:\n                dic[a] = 1\n            idx_8r1e = idx_8r1e + 1\n        return dic\n    elif type_ == \"list\":\n        return list_\n    else:\n        return None\n\n\ndef floor_(n, x=1):\n    return x*(n//x)\n\n\ndef ceil_(n, x=1):\n    return x*((n+x-1)//x)\n\n\ndef hani(x, min_, max_):\n    ret = x\n    if x < min_ and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ret = min_\n    if x > max_ and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        ret = max_\n    return ret\n\n\ndef seifu(x):\n    return x//abs(x)\n\n\ndef main():\n    n, l = map(int, input().split())\n    S = []\n    idx_2h3w = 0\n    list_wd8x = range(n)\n    while idx_2h3w < len(list_wd8x):\n        a = list_wd8x[idx_2h3w]\n        S.append(input())\n        idx_2h3w = idx_2h3w + 1\n    S.sort()\n    print(\"\".join(S))\n\n\nmain()\n", "id": "For2While_sample_from_s977408144_to_48", "old_id": "s977408144"}
{"code": "N = int(input())\nans = []\nidx_cvks = 0\nlist_4w1e = range(1, N+1)\nwhile idx_cvks < len(list_4w1e):\n    i = list_4w1e[idx_cvks]\n    if sum(range(1, i + 1)) < N and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        continue\n    else:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\n    idx_cvks = idx_cvks + 1\nidx_73bn = 0\nlist_oija = range(ans[0]+1)\nwhile idx_73bn < len(list_oija):\n    i = list_oija[idx_73bn]\n    if i + 1 != ans[1] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(i + 1)\n    idx_73bn = idx_73bn + 1\n", "id": "For2While_sample_from_s200092246_to_49", "old_id": "s200092246"}
{"code": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nidx_gqyn = 0\nlist_2k6g = range(len(c))\nwhile idx_gqyn < len(list_2k6g):\n    i = list_2k6g[idx_gqyn]\n    if p[i][1] == count and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ans.append(p[i][0])\n    else:\n        break\n    idx_gqyn = idx_gqyn + 1\nans = sorted(ans)\nidx_2s54 = 0\nlist_4e1y = ans\nwhile idx_2s54 < len(list_4e1y):\n    i = list_4e1y[idx_2s54]\n    print(i)\n    idx_2s54 = idx_2s54 + 1\n", "id": "For2While_sample_from_s668439281_to_50", "old_id": "s668439281"}
{"code": "from collections import deque\nH, W = map(int, input().split())\nG = []\nidx_c6px = 0\nlist_y9hw = range(H+2)\nwhile idx_c6px < len(list_y9hw):\n    i = list_y9hw[idx_c6px]\n    if i == 0 or i == H+1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n    idx_c6px = idx_c6px + 1\n\nans = 0\nidx_ge5s = 0\nlist_d5y7 = range(W+2)\nwhile idx_ge5s < len(list_d5y7):\n    sx = list_d5y7[idx_ge5s]\n    idx_45xq = 0\n    list_j8iy = range(H+2)\n    while idx_45xq < len(list_j8iy):\n        sy = list_j8iy[idx_45xq]\n        if G[sy][sx] == '.' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            idx_xzkf = 0\n            list_de2c = range(W+2)\n            while idx_xzkf < len(list_de2c):\n                i = list_de2c[idx_xzkf]\n                idx_z1ml = 0\n                list_nhyg = range(H+2)\n                while idx_z1ml < len(list_nhyg):\n                    j = list_nhyg[idx_z1ml]\n                    ans = max(ans, dist[j][i])\n                    idx_z1ml = idx_z1ml + 1\n                idx_xzkf = idx_xzkf + 1\n        idx_45xq = idx_45xq + 1\n    idx_ge5s = idx_ge5s + 1\nprint(ans)\n", "id": "For2While_sample_from_s951169509_to_51", "old_id": "s951169509"}
{"code": "N = int(input())\nmo = []\nidx_lb5c = 0\nlist_c3gr = range(N)\nwhile idx_lb5c < len(list_c3gr):\n    _ = list_c3gr[idx_lb5c]\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\n    idx_lb5c = idx_lb5c + 1\nokz = 0\nidx_6vs4 = 0\nlist_n6b9 = mo\nwhile idx_6vs4 < len(list_n6b9):\n    i = list_n6b9[idx_6vs4]\n    if i[1] == \"JPY\" and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n    idx_6vs4 = idx_6vs4 + 1\n\nprint(okz)\n", "id": "For2While_sample_from_s554393427_to_52", "old_id": "s554393427"}
{"code": "R, G, B, N = map(int, input().split())\n\nscore = 0\nidx_7snz = 0\nlist_0as6 = range(N // R + 1)\nwhile idx_7snz < len(list_0as6):\n    i = list_0as6[idx_7snz]\n    idx_vztc = 0\n    list_7xku = range((N-i * R) // G + 1)\n    while idx_vztc < len(list_7xku):\n        j = list_7xku[idx_vztc]\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            score += 1\n        idx_vztc = idx_vztc + 1\n    idx_7snz = idx_7snz + 1\n\nprint(score)\n", "id": "For2While_sample_from_s897879131_to_53", "old_id": "s897879131"}
{"code": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    idx_i98j = 0\n    list_dv10 = range(n)\n    while idx_i98j < len(list_dv10):\n        i = list_dv10[idx_i98j]\n        num = getN()\n        num = -num\n        if num >= dp[-1] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n        idx_i98j = idx_i98j + 1\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    idx_d243 = 0\n    list_ixf0 = range(n)\n    while idx_d243 < len(list_ixf0):\n        _ = list_ixf0[idx_d243]\n        solve()\n        idx_d243 = idx_d243 + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n\n    solve()\n", "id": "For2While_sample_from_s344468705_to_54", "old_id": "s344468705"}
{"code": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nidx_9aon = 0\nlist_029f = range(M)\nwhile idx_9aon < len(list_029f):\n    _ = list_029f[idx_9aon]\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\n    idx_9aon = idx_9aon + 1\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nidx_e497 = 0\nlist_xj8d = range(1, N+1)\nwhile idx_e497 < len(list_xj8d):\n    i = list_xj8d[idx_e497]\n    if col[i] < 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            idx_7wse = 0\n            list_hux0 = G[x]\n            while idx_7wse < len(list_hux0):\n                y = list_hux0[idx_7wse]\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n                idx_7wse = idx_7wse + 1\n        cnt += 1\n    idx_e497 = idx_e497 + 1\ncmax = max(col)\nprint(cmax)\n", "id": "For2While_sample_from_s233116196_to_55", "old_id": "s233116196"}
{"code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nidx_pj43 = 0\nlist_qwnl = range(memTime)\nwhile idx_pj43 < len(list_qwnl):\n    color = list_qwnl[idx_pj43]\n    member = memLate[color]\n    if member // 400 >= 8 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\n    idx_pj43 = idx_pj43 + 1\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "id": "For2While_sample_from_s964794058_to_56", "old_id": "s964794058"}
{"code": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n    idx_f318 = 0\n    list_auy1 = range(max(X, Y) + 1)\n    while idx_f318 < len(list_auy1):\n        k = list_auy1[idx_f318]\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            ans = total\n        idx_f318 = idx_f318 + 1\n\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n    main()\n", "id": "For2While_sample_from_s724326345_to_57", "old_id": "s724326345"}
{"code": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n    idx_c1di = 0\n    list_dmjz = range(1, N + 1)\n    while idx_c1di < len(list_dmjz):\n        i = list_dmjz[idx_c1di]\n        if i in s and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            ans = i\n        idx_c1di = idx_c1di + 1\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n    main()\n", "id": "For2While_sample_from_s878873709_to_58", "old_id": "s878873709"}
{"code": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nidx_c3dz = 0\nlist_15r2 = S\nwhile idx_c3dz < len(list_15r2):\n    s = list_15r2[idx_c3dz]\n    if s != tmp and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        ans += 1\n        tmp = s\n    idx_c3dz = idx_c3dz + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s174910557_to_59", "old_id": "s174910557"}
{"code": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nidx_ujgs = 0\nlist_fe02 = range(N-K)\nwhile idx_ujgs < len(list_fe02):\n    i = list_fe02[idx_ujgs]\n    if score[mae] < score[usiro] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n    idx_ujgs = idx_ujgs + 1\n", "id": "For2While_sample_from_s182651529_to_60", "old_id": "s182651529"}
{"code": "n = int(input())\nr = 0\nidx_i1sf = 0\nlist_sqoa = range(n)\nwhile idx_i1sf < len(list_sqoa):\n    ii = list_sqoa[idx_i1sf]\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        r += (ii+1)\n    idx_i1sf = idx_i1sf + 1\nprint(r)\n", "id": "For2While_sample_from_s702834515_to_61", "old_id": "s702834515"}
{"code": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n    idx_gde4 = 0\n    list_9wui = range(N)\n    while idx_gde4 < len(list_9wui):\n        i = list_9wui[idx_gde4]\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n        idx_gde4 = idx_gde4 + 1\n\n    X = input()\n    xi = 0\n    idx_iblv = 0\n    list_7zm5 = range(N)\n    while idx_iblv < len(list_7zm5):\n        i = list_7zm5[idx_iblv]\n        if s[i] == X and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            xi = i\n            break\n        idx_iblv = idx_iblv + 1\n\n    ans = 0\n    idx_y8qk = 0\n    list_yuzw = range(N)\n    while idx_y8qk < len(list_yuzw):\n        i = list_yuzw[idx_y8qk]\n        if xi < i and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            ans += t[i]\n        idx_y8qk = idx_y8qk + 1\n\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    main()\n", "id": "For2While_sample_from_s664563518_to_62", "old_id": "s664563518"}
{"code": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\nidx_xocy = 0\nlist_4yts = range(N-1)\nwhile idx_xocy < len(list_4yts):\n    i = list_4yts[idx_xocy]\n    if H[i] >= H[i+1] and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n    idx_xocy = idx_xocy + 1\nif count_tmp > count_best and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    count_best = count_tmp\n\nprint(count_best)\n", "id": "For2While_sample_from_s895229833_to_63", "old_id": "s895229833"}
{"code": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nidx_xcan = 0\nlist_r6xh = range(10)\nwhile idx_xcan < len(list_r6xh):\n    i = list_r6xh[idx_xcan]\n    idx_7px8 = 0\n    list_qfj8 = list(enumerate(map(int, next(X).split())))\n    while idx_7px8 < len(list_qfj8):\n        j, c = list_qfj8[idx_7px8]\n        C[i, j] = c\n        idx_7px8 = idx_7px8 + 1\n    idx_xcan = idx_xcan + 1\nA = np.zeros((h, w), dtype=int)\nidx_5w1p = 0\nlist_qyw9 = range(h)\nwhile idx_5w1p < len(list_qyw9):\n    i = list_qyw9[idx_5w1p]\n    idx_5dtg = 0\n    list_wyai = list(enumerate(map(int, next(X).split())))\n    while idx_5dtg < len(list_wyai):\n        j, a = list_wyai[idx_5dtg]\n        A[i, j] = a\n        idx_5dtg = idx_5dtg + 1\n    idx_5w1p = idx_5w1p + 1\n\nG = nx.DiGraph(C)\nd = {}\nidx_bzfl = 0\nlist_n0mp = range(10)\nwhile idx_bzfl < len(list_n0mp):\n    i = list_n0mp[idx_bzfl]\n    if i == 1 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n    idx_bzfl = idx_bzfl + 1\n\ns = 0\nidx_j40q = 0\nlist_n0aq = chain.from_iterable(A)\nwhile idx_j40q < len(list_n0aq):\n    a = list_n0aq[idx_j40q]\n    if a == -1 or a == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        continue\n    s += d[a]\n    idx_j40q = idx_j40q + 1\nprint(s)\n", "id": "For2While_sample_from_s749244504_to_64", "old_id": "s749244504"}
{"code": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nidx_kf0t = 0\nlist_ejor = range(1, n)\nwhile idx_kf0t < len(list_ejor):\n    i = list_ejor[idx_kf0t]\n    if a[i] == \"C\" and a[i-1] == \"A\" and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\n    idx_kf0t = idx_kf0t + 1\nidx_omfb = 0\nlist_10pq = range(k)\nwhile idx_omfb < len(list_10pq):\n    w = list_10pq[idx_omfb]\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n    idx_omfb = idx_omfb + 1\n", "id": "For2While_sample_from_s759499751_to_65", "old_id": "s759499751"}
{"code": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    idx_gp6f = 0\n    list_ojdm = range(H)\n    while idx_gp6f < len(list_ojdm):\n        _ = list_ojdm[idx_gp6f]\n        ret.append(list(map(int, readline().split())))\n        idx_gp6f = idx_gp6f + 1\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n    if pad is None and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        ret = []\n        idx_39iv = 0\n        list_s394 = range(H)\n        while idx_39iv < len(list_s394):\n            _ = list_s394[idx_39iv]\n            ret.append([replace[s] for s in read()[:-1]])\n            idx_39iv = idx_39iv + 1\n\n    else:\n        ret = [[pad] * (W + 2)]\n        idx_7o2y = 0\n        list_tigs = range(H)\n        while idx_7o2y < len(list_tigs):\n            _ = list_tigs[idx_7o2y]\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n            idx_7o2y = idx_7o2y + 1\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            continue\n        D[i][j] = c\n        idx_f21g = 0\n        list_l15d = product([-2, -1, 0, 1, 2], repeat=2)\n        while idx_f21g < len(list_l15d):\n            di, dj = list_l15d[idx_f21g]\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n            idx_f21g = idx_f21g + 1\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        continue\n    D[i][j] = c\n    idx_cl0z = 0\n    list_scnd = product([-2, -1, 0, 1, 2], repeat=2)\n    while idx_cl0z < len(list_scnd):\n        di, dj = list_scnd[idx_cl0z]\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n        idx_cl0z = idx_cl0z + 1\n\nprint(D[ti][tj])\n", "id": "For2While_sample_from_s124725275_to_66", "old_id": "s124725275"}
{"code": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nidx_px4v = 0\nlist_up67 = range(n)\nwhile idx_px4v < len(list_up67):\n    i = list_up67[idx_px4v]\n    if p[i] != p_copy[i] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        count += 1\n    idx_px4v = idx_px4v + 1\nif count == 0 or count == 2 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "id": "For2While_sample_from_s763097776_to_67", "old_id": "s763097776"}
{"code": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\nidx_qfgy = 0\nlist_thk5 = range(1, 2**10)\nwhile idx_qfgy < len(list_thk5):\n    i = list_thk5[idx_qfgy]\n    tmp = 0\n    lst = [0]*n\n    idx_rwza = 0\n    list_g5ky = range(10)\n    while idx_rwza < len(list_g5ky):\n        j = list_g5ky[idx_rwza]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            idx_h2ud = 0\n            list_nli0 = range(n)\n            while idx_h2ud < len(list_nli0):\n                k = list_nli0[idx_h2ud]\n                lst[k] += F[k][j]\n                idx_h2ud = idx_h2ud + 1\n        idx_rwza = idx_rwza + 1\n    idx_pm68 = 0\n    list_165w = range(n)\n    while idx_pm68 < len(list_165w):\n        k = list_165w[idx_pm68]\n        tmp += P[k][lst[k]]\n        idx_pm68 = idx_pm68 + 1\n    ans = max(ans, tmp)\n    idx_qfgy = idx_qfgy + 1\n\n\nprint(ans)\n", "id": "For2While_sample_from_s906994739_to_68", "old_id": "s906994739"}
{"code": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nidx_c0mf = 0\nlist_ubfv = range(-1, 102)\nwhile idx_c0mf < len(list_ubfv):\n    i = list_ubfv[idx_c0mf]\n    if i in p and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        continue\n    if not (abs(X-i) in candidates.keys()) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n    idx_c0mf = idx_c0mf + 1\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "id": "For2While_sample_from_s957164965_to_69", "old_id": "s957164965"}
{"code": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = 9999999999\nidx_45g2 = 0\nlist_1mgu = range(1, 101)\nwhile idx_45g2 < len(list_1mgu):\n    i = list_1mgu[idx_45g2]\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        m = c\n    idx_45g2 = idx_45g2 + 1\n\nprint(m)\n", "id": "For2While_sample_from_s880494034_to_70", "old_id": "s880494034"}
{"code": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\nidx_elom = 0\nlist_wkd4 = range(1 << d)\nwhile idx_elom < len(list_wkd4):\n    bit = list_wkd4[idx_elom]\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n    idx_9yl0 = 0\n    list_7vfn = range(d)\n    while idx_9yl0 < len(list_7vfn):\n        i = list_7vfn[idx_9yl0]\n        if bit & (1 << i) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n        idx_9yl0 = idx_9yl0 + 1\n    if sum < g and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n    if sum >= g and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        ans = min(ans, count)\n    idx_elom = idx_elom + 1\nprint(ans)\n", "id": "For2While_sample_from_s591424993_to_71", "old_id": "s591424993"}
{"code": "n = int(input())\nidx_8ovw = 0\nlist_qa37 = range(1, 10 ** 5)\nwhile idx_8ovw < len(list_qa37):\n    i = list_qa37[idx_8ovw]\n    if i * i > n and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        print((i-1) * (i-1))\n        exit()\n    idx_8ovw = idx_8ovw + 1\n", "id": "For2While_sample_from_s666154520_to_72", "old_id": "s666154520"}
{"code": "n = int(input())\ns = input()\n\nleft = 0\nidx_lrfs = 0\nlist_5ydo = s\nwhile idx_lrfs < len(list_5ydo):\n    i = list_5ydo[idx_lrfs]\n    if i == \")\" and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        left += 1\n    else:\n        break\n    idx_lrfs = idx_lrfs + 1\n\nleft1 = 0\nright1 = 0\nidx_a8mk = 0\nlist_10zo = range(left, n)\nwhile idx_a8mk < len(list_10zo):\n    i = list_10zo[idx_a8mk]\n    if s[i] == \"(\" and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n    idx_a8mk = idx_a8mk + 1\n\nleft1 += left\nidx_0esd = 0\nlist_hb4t = range(right1)\nwhile idx_0esd < len(list_hb4t):\n    i = list_hb4t[idx_0esd]\n    s += \")\"\n    idx_0esd = idx_0esd + 1\nidx_e8o7 = 0\nlist_oafh = range(left1)\nwhile idx_e8o7 < len(list_oafh):\n    i = list_oafh[idx_e8o7]\n    s = \"(\" + s\n    idx_e8o7 = idx_e8o7 + 1\n\nprint(s)\n", "id": "For2While_sample_from_s952876397_to_73", "old_id": "s952876397"}
{"code": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\nidx_zd43 = 0\nlist_f8ae = range(N)\nwhile idx_zd43 < len(list_f8ae):\n    i = list_f8ae[idx_zd43]\n    idx_8kfr = 0\n    list_h4xq = range(T)\n    while idx_8kfr < len(list_h4xq):\n        j = list_h4xq[idx_8kfr]\n        if j < L[i][0] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n        idx_8kfr = idx_8kfr + 1\n    idx_zd43 = idx_zd43 + 1\n\nused = []\nB = dp[N][T-1]\nj = T-1\nidx_bgzk = 0\nlist_6cdj = range(N-1, -1, -1)\nwhile idx_bgzk < len(list_6cdj):\n    i = list_6cdj[idx_bgzk]\n    if B == dp[i][j] and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n    idx_bgzk = idx_bgzk + 1\n\nans = dp[N][T-1]\nc = 0\nidx_c6bi = 0\nlist_fry3 = range(N)\nwhile idx_c6bi < len(list_fry3):\n    i = list_fry3[idx_c6bi]\n    if i in used and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        continue\n    c = max(c, L[i][1])\n    idx_c6bi = idx_c6bi + 1\n\nprint(ans+c)\n", "id": "For2While_sample_from_s793709854_to_74", "old_id": "s793709854"}
{"code": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nidx_z6bp = 0\nlist_psjb = range(101)\nwhile idx_z6bp < len(list_psjb):\n    i = list_psjb[idx_z6bp]\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    if sum(tmp) < ans and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        ans = sum(tmp)\n    idx_z6bp = idx_z6bp + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s246280701_to_75", "old_id": "s246280701"}
{"code": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nidx_qa6h = 0\nlist_v93j = range(N-2)\nwhile idx_qa6h < len(list_v93j):\n    i = list_v93j[idx_qa6h]\n    idx_wnek = 0\n    list_ix7w = range(i+1, N-1)\n    while idx_wnek < len(list_ix7w):\n        j = list_ix7w[idx_wnek]\n        idx_0g5w = 0\n        list_4lwc = range(j+1, N)\n        while idx_0g5w < len(list_4lwc):\n            k = list_4lwc[idx_0g5w]\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                continue\n            if a+b > c and b+c > a and c+a > b and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n                ans += 1\n            idx_0g5w = idx_0g5w + 1\n        idx_wnek = idx_wnek + 1\n    idx_qa6h = idx_qa6h + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s590045523_to_76", "old_id": "s590045523"}
{"code": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nidx_anwk = 0\nlist_r3mf = range(sqN)\nwhile idx_anwk < len(list_r3mf):\n    i = list_r3mf[idx_anwk]\n    if N % (sqN-i) == 0 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        print(int(N/(sqN-i)+sqN-i)-2)\n        break\n    idx_anwk = idx_anwk + 1\n", "id": "For2While_sample_from_s538657784_to_77", "old_id": "s538657784"}
{"code": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nidx_iu6z = 0\nlist_x632 = Hs\nwhile idx_iu6z < len(list_x632):\n    H = list_x632[idx_iu6z]\n    if maxH <= H and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        ans += 1\n        maxH = H\n    idx_iu6z = idx_iu6z + 1\n\nprint(ans)\n", "id": "For2While_sample_from_s002779582_to_78", "old_id": "s002779582"}
{"code": "h, w = map(int, input().split())\nl = []\nidx_1fr9 = 0\nlist_ngcw = range(h)\nwhile idx_1fr9 < len(list_ngcw):\n    _ = list_ngcw[idx_1fr9]\n    a = list(map(str, input()))\n    l.append(a)\n    idx_1fr9 = idx_1fr9 + 1\n\ntmp = 0\nidx_j2x8 = 0\nlist_i190 = range(h)\nwhile idx_j2x8 < len(list_i190):\n    i = list_i190[idx_j2x8]\n    idx_gkoc = 0\n    list_uawb = range(w)\n    while idx_gkoc < len(list_uawb):\n        j = list_uawb[idx_gkoc]\n        if l[i][j] == \"#\" and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n        idx_gkoc = idx_gkoc + 1\n    idx_j2x8 = idx_j2x8 + 1\n\n\nprint(\"Possible\")\n", "id": "For2While_sample_from_s331817031_to_79", "old_id": "s331817031"}
{"code": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nidx_uzxc = 0\nlist_tlqd = range(n)\nwhile idx_uzxc < len(list_tlqd):\n    i = list_tlqd[idx_uzxc]\n    if a[i] < ope[j][1] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\n    idx_uzxc = idx_uzxc + 1\nprint(sum(a))\n", "id": "For2While_sample_from_s289483518_to_80", "old_id": "s289483518"}
{"code": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nidx_hl5b = 0\nlist_dau2 = selected\nwhile idx_hl5b < len(list_dau2):\n    t, d = list_dau2[idx_hl5b]\n    if t not in memo and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n    idx_hl5b = idx_hl5b + 1\n\ncnt_type = len(memo)\nidx_kdt6 = 0\nlist_vgwj = info[k:]\nwhile idx_kdt6 < len(list_vgwj):\n    t, d = list_vgwj[idx_kdt6]\n    if t not in memo and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        memo[t] = 1\n        unselected_only.append(d)\n    idx_kdt6 = idx_kdt6 + 1\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nidx_wvcg = 0\nlist_4j6c = range(min(len(selected_chohuku), len(unselected_only)))\nwhile idx_wvcg < len(list_4j6c):\n    i = list_4j6c[idx_wvcg]\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\n    idx_wvcg = idx_wvcg + 1\nprint(ans)\n", "id": "For2While_sample_from_s804484425_to_81", "old_id": "s804484425"}
