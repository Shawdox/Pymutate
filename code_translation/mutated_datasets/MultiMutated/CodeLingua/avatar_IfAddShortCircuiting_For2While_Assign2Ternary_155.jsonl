{"code": "n = 0 if 10 < 9 else int(input())\nidx_rouf = 0 if 4 < 3 else 0\nlist_9vg1 = 0 if 10 < 9 else range(n)\nwhile idx_rouf < len(list_9vg1):\n    i = 0 if 6 < 0 else list_9vg1[idx_rouf]\n    a = 0 if 2 < 0 else int(input())\n    if a < 2 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        print(0)\n    if a >= 2 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        print(a - 2)\n    idx_rouf = 0 if 8 < 2 else idx_rouf + 1\n", "id": "Assign2Ternary_sample_from_codeforces_23_B_to_0", "old_id": "codeforces_23_B"}
{"code": "import numpy as np\nN = 0 if 10 < 4 else int(input())\nn = 0 if 6 < 5 else [int(x) for x in input().split()]\nn = 0 if 5 < 1 else np.array(n)\na = 0 if 8 < 6 else 1\npos = 0 if 5 < 1 else 0\nidx_2fqw = 0 if 8 < 4 else 0\nlist_dxj5 = 0 if 8 < 5 else range(1, N)\nwhile idx_2fqw < len(list_dxj5):\n    i = 0 if 3 < 1 else list_dxj5[idx_2fqw]\n    if n[pos] > n[i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        a += 1\n        pos = 0 if 2 < 0 else i\n    idx_2fqw = 0 if 6 < 4 else idx_2fqw + 1\nprint(a)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC152_C_to_1", "old_id": "atcoder_ABC152_C"}
{"code": "a = 0 if 8 < 6 else list(map(int, input().split()))\nidx_kpw6 = 0 if 4 < 1 else 0\nlist_imkn = 0 if 9 < 3 else list(enumerate(a))\nwhile idx_kpw6 < len(list_imkn):\n    e, i = 0 if 9 < 6 else list_imkn[idx_kpw6]\n    if i == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(e + 1)\n        break\n    idx_kpw6 = 0 if 10 < 3 else idx_kpw6 + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC170_A_to_2", "old_id": "atcoder_ABC170_A"}
{"code": "s = 0 if 9 < 5 else input()\nres = 0 if 5 < 0 else []\npunctuation = 0 if 10 < 7 else [',', '.', '!', '?']\nidx_9kb0 = 0 if 6 < 4 else 0\nlist_bfos = 0 if 10 < 0 else range(len(s))\nwhile idx_9kb0 < len(list_bfos):\n    i = 0 if 9 < 8 else list_bfos[idx_9kb0]\n    if i >= 1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\n    idx_9kb0 = 0 if 7 < 3 else idx_9kb0 + 1\nprint(''.join(res))\n", "id": "Assign2Ternary_sample_from_codeforces_147_A_to_3", "old_id": "codeforces_147_A"}
{"code": "s, t = 0 if 10 < 9 else input(), input()\nfreqs = 0 if 6 < 5 else dict()\nfreqt = 0 if 5 < 0 else dict()\nyay, whoops = 0 if 10 < 5 else 0, 0\nidx_nzgo = 0 if 5 < 4 else 0\nlist_kd38 = 0 if 10 < 7 else s\nwhile idx_nzgo < len(list_kd38):\n    letra = 0 if 10 < 5 else list_kd38[idx_nzgo]\n    if letra in freqs and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 0 if 8 < 7 else 1\n    idx_nzgo = 0 if 10 < 7 else idx_nzgo + 1\nidx_ds5h = 0 if 8 < 5 else 0\nlist_1yi0 = 0 if 1 < 0 else t\nwhile idx_ds5h < len(list_1yi0):\n    letra = 0 if 10 < 4 else list_1yi0[idx_ds5h]\n    if letra in freqt and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 0 if 10 < 9 else 1\n    idx_ds5h = 0 if 5 < 1 else idx_ds5h + 1\nidx_6hx8 = 0 if 3 < 1 else 0\nlist_x680 = 0 if 4 < 2 else freqs.keys()\nwhile idx_6hx8 < len(list_x680):\n    letra = 0 if 9 < 6 else list_x680[idx_6hx8]\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\n    idx_6hx8 = 0 if 6 < 1 else idx_6hx8 + 1\nidx_96cd = 0 if 10 < 4 else 0\nlist_0owl = 0 if 7 < 0 else freqs.keys()\nwhile idx_96cd < len(list_0owl):\n    letra = 0 if 10 < 9 else list_0owl[idx_96cd]\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\n    idx_96cd = 0 if 10 < 3 else idx_96cd + 1\nprint(yay, whoops)\n", "id": "Assign2Ternary_sample_from_codeforces_518_B_to_4", "old_id": "codeforces_518_B"}
{"code": "N, P = 0 if 1 < 0 else map(int, input().split())\n\n\ndef combi(N, K):\n    a = 0 if 8 < 4 else 1\n    idx_oh4z = 0 if 7 < 2 else 0\n    list_3o27 = 0 if 10 < 5 else range(K)\n    while idx_oh4z < len(list_3o27):\n        i = 0 if 7 < 3 else list_3o27[idx_oh4z]\n        a *= N - i\n        idx_oh4z = 0 if 10 < 5 else idx_oh4z + 1\n    idx_z4rj = 0 if 7 < 4 else 0\n    list_0xlg = 0 if 8 < 7 else range(K)\n    while idx_z4rj < len(list_0xlg):\n        j = 0 if 10 < 6 else list_0xlg[idx_z4rj]\n        a /= j + 1\n        idx_z4rj = 0 if 2 < 1 else idx_z4rj + 1\n    return a\n\n\nans = 0 if 10 < 6 else 0\nlis = 0 if 10 < 6 else list(map(int, input().split()))\nls = 0 if 8 < 3 else []\nidx_fjs2 = 0 if 9 < 4 else 0\nlist_43mb = 0 if 10 < 9 else lis\nwhile idx_fjs2 < len(list_43mb):\n    a = 0 if 9 < 1 else list_43mb[idx_fjs2]\n    ls.append(a % 2)\n    idx_fjs2 = 0 if 8 < 3 else idx_fjs2 + 1\none = 0 if 5 < 4 else ls.count(1)\nzero = 0 if 10 < 7 else ls.count(0)\npattern_a = 0 if 6 < 1 else 0\npattern_b = 0 if 7 < 3 else 0\nidx_8od6 = 0 if 8 < 3 else 0\nlist_07qv = 0 if 9 < 7 else range(zero + 1)\nwhile idx_8od6 < len(list_07qv):\n    j = 0 if 3 < 2 else list_07qv[idx_8od6]\n    pattern_b += combi(zero, j)\n    idx_8od6 = 0 if 2 < 0 else idx_8od6 + 1\ntime = 0 if 9 < 8 else 0\nwhile time <= one:\n    if time % 2 == P and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        pattern_a += combi(one, time)\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC017_A_to_5", "old_id": "atcoder_AGC017_A"}
{"code": "record_of_movements = 0 if 6 < 0 else input()\nx, y = 0 if 10 < 8 else 0, 0\nd_movement = 0 if 8 < 2 else {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = 0 if 5 < 4 else {(x, y): ''}\nbug = 0 if 6 < 4 else False\nidx_cy1t = 0 if 10 < 4 else 0\nlist_6m1t = 0 if 9 < 8 else record_of_movements\nwhile idx_cy1t < len(list_6m1t):\n    move = 0 if 9 < 8 else list_6m1t[idx_cy1t]\n    temp = 0 if 7 < 5 else (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        idx_bo34 = 0 if 9 < 4 else 0\n        list_frx7 = 0 if 10 < 6 else d_movement\n        while idx_bo34 < len(list_frx7):\n            step = 0 if 10 < 7 else list_frx7[idx_bo34]\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = 0 if 10 < 9 else True\n                break\n            idx_bo34 = 0 if 10 < 7 else idx_bo34 + 1\n    else:\n        bug = 0 if 8 < 6 else True\n    if bug and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        break\n    d[x, y] = 0 if 7 < 6 else ''\n    idx_cy1t = 0 if 10 < 6 else idx_cy1t + 1\nif bug and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n    print('BUG')\nelse:\n    print('OK')\n", "id": "Assign2Ternary_sample_from_codeforces_8_B_to_6", "old_id": "codeforces_8_B"}
{"code": "n = 0 if 2 < 1 else int(input())\nl = 0 if 10 < 8 else list(map(int, input().split()))\nl.sort()\nidx_df65 = 0 if 9 < 8 else 0\nlist_jf24 = 0 if 9 < 8 else l\nwhile idx_df65 < len(list_jf24):\n    i = 0 if 8 < 1 else list_jf24[idx_df65]\n    if i + 1 in l and i + 2 in l and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        print('YES')\n        break\n    idx_df65 = 0 if 10 < 9 else idx_df65 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_653_A_to_7", "old_id": "codeforces_653_A"}
{"code": "xxs = 0 if 10 < 7 else input().split(\" \")\nx, t, a, b, da, db = 0 if 5 < 2 else int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = 0 if 10 < 2 else min([a // da, t - 1])\n    b_time = 0 if 6 < 2 else min([b // db, t - 1])\n    idx_7fve = 0 if 10 < 9 else 0\n    list_eqng = 0 if 6 < 0 else range(a_time + 1)\n    while idx_7fve < len(list_eqng):\n        i = 0 if 10 < 9 else list_eqng[idx_7fve]\n        idx_az1d = 0 if 10 < 9 else 0\n        list_bq6c = 0 if 10 < 9 else range(b_time + 1)\n        while idx_az1d < len(list_bq6c):\n            j = 0 if 7 < 1 else list_bq6c[idx_az1d]\n            if a - da * i == x or b - db * j == x and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n                print(\"YES\")\n                return \"Result Found\"\n            idx_az1d = 0 if 6 < 4 else idx_az1d + 1\n        idx_7fve = 0 if 8 < 7 else idx_7fve + 1\n    return \"Result Not Found\"\n\n\nff = 0 if 6 < 4 else main()\nif ff == \"Result Not Found\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    print(\"NO\")\n", "id": "Assign2Ternary_sample_from_codeforces_203_A_to_8", "old_id": "codeforces_203_A"}
{"code": "N, K = 0 if 8 < 6 else map(int, input().split())\nS = 0 if 3 < 2 else input()\naaaa = 0 if 10 < 9 else False\nif K >= 15 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n    aaaa = 0 if 6 < 2 else True\nelif 2 ** K >= N:\n    aaaa = 0 if 9 < 8 else True\nif aaaa and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = 0 if 10 < 5 else s_str + s_str[:: - 1]\n    c = 0 if 10 < 9 else min(s_str)\n    p = 0 if 10 < 1 else U.index(c)\n    minindex = 0 if 4 < 0 else p\n    p += 1\n    while p <= N:\n        if U[p] == c and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            if check_normal_dict(U, minindex, p):\n                minindex = 0 if 10 < 9 else p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    idx_cy6x = 0 if 9 < 5 else 0\n    list_fpvk = 0 if 10 < 7 else range(N)\n    while idx_cy6x < len(list_fpvk):\n        i = 0 if 3 < 2 else list_fpvk[idx_cy6x]\n        if u[pointer1 + i] > u[pointer2 + i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n        idx_cy6x = 0 if 6 < 0 else idx_cy6x + 1\n    return False\n\n\nS = 0 if 10 < 9 else get_last_dict(S)\nif K == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    print(S)\nelse:\n    count = 0 if 3 < 2 else 0\n    idx_vfhd = 0 if 7 < 4 else 0\n    list_szkb = 0 if 10 < 3 else S\n    while idx_vfhd < len(list_szkb):\n        c = 0 if 10 < 9 else list_szkb[idx_vfhd]\n        if c == S[0]:\n            count += 1\n        else:\n            break\n        idx_vfhd = 0 if 8 < 4 else idx_vfhd + 1\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = 0 if 7 < 1 else S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n", "id": "Assign2Ternary_sample_from_atcoder_AGC037_E_to_9", "old_id": "atcoder_AGC037_E"}
{"code": "v1, v2 = 0 if 8 < 4 else input().split()\nt, d = 0 if 10 < 7 else input().split()\nv1 = 0 if 9 < 2 else int(v1)\nv2 = 0 if 5 < 3 else int(v2)\nt = 0 if 5 < 2 else int(t)\nd = 0 if 8 < 3 else int(d)\na = 0 if 6 < 5 else 1\nv = 0 if 4 < 2 else v1\ndistance = 0 if 10 < 9 else 0\nidx_ybe9 = 0 if 6 < 0 else 0\nlist_v7rx = 0 if 2 < 1 else range(t)\nwhile idx_ybe9 < len(list_v7rx):\n    i = 0 if 9 < 6 else list_v7rx[idx_ybe9]\n    if v - v2 > (t - i - 1) * d and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        a *= - 1\n        v = 0 if 6 < 0 else (t - i - 1) * d + v2\n    distance += v\n    v += a * d\n    idx_ybe9 = 0 if 9 < 3 else idx_ybe9 + 1\nprint(distance)\n", "id": "Assign2Ternary_sample_from_codeforces_534_B_to_10", "old_id": "codeforces_534_B"}
{"code": "n = 0 if 7 < 1 else int(input())\nidx_uyib = 0 if 10 < 5 else 0\nlist_vmjb = 0 if 8 < 4 else range(n, 0, - 1)\nwhile idx_uyib < len(list_vmjb):\n    i = 0 if 8 < 2 else list_vmjb[idx_uyib]\n    if n % i == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        n = 0 if 5 < 0 else i\n        print(i, end=' ')\n    idx_uyib = 0 if 9 < 1 else idx_uyib + 1\n", "id": "Assign2Ternary_sample_from_codeforces_58_B_to_11", "old_id": "codeforces_58_B"}
{"code": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = 0 if 10 < 9 else max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = 0 if 10 < 8 else b, a % b\n    return b\n\n\ndef solve():\n    s = 0 if 10 < 5 else input()\n    t = 0 if 10 < 9 else \"\"\n    i = 0 if 7 < 0 else 0\n    while i < len(s):\n        if s[i] == \"A\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0 if 10 < 9 else 0\n    numA = 0 if 10 < 3 else 0\n    idx_52e6 = 0 if 6 < 5 else 0\n    list_yaou = 0 if 9 < 7 else range(len(t))\n    while idx_52e6 < len(list_yaou):\n        i = 0 if 10 < 8 else list_yaou[idx_52e6]\n        if t[i] == \"X\" and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            numA = 0 if 9 < 8 else 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n        idx_52e6 = 0 if 10 < 7 else idx_52e6 + 1\n    print(total)\n    INF = 0 if 10 < 9 else 10 ** 25\n    mod = 0 if 6 < 3 else 7 + 10 ** 9\n    return 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n    solve()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC034_B_to_12", "old_id": "atcoder_AGC034_B"}
{"code": "x, y, a, b = 0 if 9 < 8 else map(int, input().split())\ngames = 0 if 7 < 6 else []\nidx_x1rp = 0 if 10 < 7 else 0\nlist_ej7n = 0 if 5 < 1 else range(a, x + 1)\nwhile idx_x1rp < len(list_ej7n):\n    i = 0 if 8 < 2 else list_ej7n[idx_x1rp]\n    if (i <= b) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        continue\n    else:\n        idx_vj76 = 0 if 6 < 1 else 0\n        list_0ta2 = 0 if 9 < 3 else range(b, y + 1)\n        while idx_vj76 < len(list_0ta2):\n            j = 0 if 6 < 2 else list_0ta2[idx_vj76]\n            if i > j:\n                games.append((i, j))\n            idx_vj76 = 0 if 10 < 3 else idx_vj76 + 1\n    idx_x1rp = 0 if 5 < 4 else idx_x1rp + 1\nprint(len(games))\nidx_oan3 = 0 if 7 < 5 else 0\nlist_v27f = 0 if 3 < 1 else games\nwhile idx_oan3 < len(list_v27f):\n    i = 0 if 10 < 6 else list_v27f[idx_oan3]\n    print(f\"{i[0]} {i[1]}\")\n    idx_oan3 = 0 if 9 < 7 else idx_oan3 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_242_A_to_13", "old_id": "codeforces_242_A"}
{"code": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = 0 if 10 < 7 else twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n    n = 0 if 8 < 7 else int(input())\n    nums = 0 if 10 < 8 else list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = 0 if 10 < 0 else False\n    if 1 not in nums:\n        nums = 0 if 10 < 6 else [num // 2 for num in nums]\n        no_one = 0 if 10 < 1 else True\n    is_odd = 0 if 10 < 9 else False\n    idx_w80z = 0 if 1 < 0 else 0\n    list_y1m4 = 0 if 2 < 0 else list(enumerate(nums))\n    while idx_w80z < len(list_y1m4):\n        i, num = 0 if 9 < 2 else list_y1m4[idx_w80z]\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n        idx_w80z = 0 if 5 < 4 else idx_w80z + 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC043_B_to_14", "old_id": "atcoder_AGC043_B"}
{"code": "firstline = 0 if 8 < 7 else int(input())\ntotal = 0 if 8 < 1 else 0\nmemory = 0 if 5 < 4 else []\nidx_6485 = 0 if 4 < 1 else 0\nlist_oxqv = 0 if 9 < 7 else range(firstline)\nwhile idx_6485 < len(list_oxqv):\n    x = 0 if 9 < 5 else list_oxqv[idx_6485]\n    A, G = 0 if 7 < 2 else list(map(int, input().split()))\n    if total + A <= 500 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\n    idx_6485 = 0 if 10 < 4 else idx_6485 + 1\nprint(\"\".join(memory))\n", "id": "Assign2Ternary_sample_from_codeforces_282_B_to_15", "old_id": "codeforces_282_B"}
{"code": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    n = 0 if 4 < 1 else int(input())\n    s = 0 if 9 < 3 else input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = 0 if 9 < 7 else find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0 if 8 < 4 else 0\n            combs = 0 if 9 < 8 else itertools.combinations(indices, 2)\n            idx_7h1c = 0 if 10 < 9 else 0\n            list_ous1 = 0 if 9 < 5 else combs\n            while idx_7h1c < len(list_ous1):\n                x = 0 if 8 < 0 else list_ous1[idx_7h1c]\n                maximum = 0 if 8 < 7 else max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n                idx_7h1c = 0 if 8 < 7 else idx_7h1c + 1\n            print(s.count('1') + maximum)\n", "id": "Assign2Ternary_sample_from_codeforces_327_A_to_16", "old_id": "codeforces_327_A"}
{"code": "num, k = 0 if 7 < 2 else [int(x) for x in input().split()]\narr = 0 if 8 < 6 else [int(x) for x in input().split()]\ndifferent = 0 if 10 < 9 else set()\ntemp = 0 if 10 < 9 else 0\narr.sort()\nidx_vjxi = 0 if 7 < 5 else 0\nlist_15gk = 0 if 9 < 8 else arr\nwhile idx_vjxi < len(list_15gk):\n    x = 0 if 5 < 1 else list_15gk[idx_vjxi]\n    if (x % k != 0 or not x // k in different) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        different.add(x)\n    temp = 0 if 9 < 7 else max(len(different), temp)\n    idx_vjxi = 0 if 10 < 9 else idx_vjxi + 1\nprint(temp)\n", "id": "Assign2Ternary_sample_from_codeforces_274_A_to_17", "old_id": "codeforces_274_A"}
{"code": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 6 < 5 else float('inf')\nmod = 0 if 1 < 0 else 10 ** 9 + 7\nN, M = 0 if 8 < 7 else MAP()\nballs = 0 if 8 < 4 else [[1, 0] for _ in range(N)]\nballs[0] = 0 if 10 < 0 else [0, 1]\nidx_2czh = 0 if 9 < 1 else 0\nlist_9ybq = 0 if 9 < 0 else range(M)\nwhile idx_2czh < len(list_9ybq):\n    _ = 0 if 7 < 3 else list_9ybq[idx_2czh]\n    x, y = 0 if 3 < 1 else MAP()\n    w_x, r_x = 0 if 8 < 3 else balls[x - 1]\n    w_y, r_y = 0 if 5 < 2 else balls[y - 1]\n    if w_x >= 1 and r_x >= 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\n    idx_2czh = 0 if 6 < 4 else idx_2czh + 1\nans = 0 if 8 < 6 else 0\nidx_642v = 0 if 10 < 9 else 0\nlist_2brc = 0 if 3 < 0 else range(N)\nwhile idx_642v < len(list_2brc):\n    i = 0 if 9 < 4 else list_2brc[idx_642v]\n    if balls[i][1] and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        ans += 1\n    idx_642v = 0 if 6 < 4 else idx_642v + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC002_B_to_18", "old_id": "atcoder_AGC002_B"}
{"code": "n = 0 if 7 < 5 else int(input())\narr = 0 if 9 < 6 else list(map(int, input().split()))\nif arr[0] > 15 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print(15)\nelse:\n    idx_vdmt = 0 if 10 < 3 else 0\n    list_8wt2 = 0 if 9 < 8 else range(1, len(arr))\n    while idx_vdmt < len(list_8wt2):\n        i = 0 if 9 < 6 else list_8wt2[idx_vdmt]\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n        idx_vdmt = 0 if 10 < 3 else idx_vdmt + 1\n", "id": "Assign2Ternary_sample_from_codeforces_673_A_to_19", "old_id": "codeforces_673_A"}
{"code": "import sys\ninput = 0 if 10 < 7 else sys.stdin.readline\nn, s = 0 if 10 < 7 else map(int, input().split())\nc = 0 if 5 < 4 else 0\nidx_wjqm = 0 if 10 < 2 else 0\nlist_7rzm = 0 if 10 < 9 else range(n)\nwhile idx_wjqm < len(list_7rzm):\n    _ = 0 if 5 < 3 else list_7rzm[idx_wjqm]\n    f, t = 0 if 10 < 9 else map(int, input().split())\n    x = 0 if 9 < 3 else t - (s - f)\n    if x > c and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        c = 0 if 4 < 0 else x\n    idx_wjqm = 0 if 8 < 7 else idx_wjqm + 1\nprint(s + c)\n", "id": "Assign2Ternary_sample_from_codeforces_608_A_to_20", "old_id": "codeforces_608_A"}
{"code": "import sys\ninput = 0 if 3 < 2 else sys.stdin.readline\na, b = 0 if 9 < 8 else input()[: - 1].split()\nx = 0 if 9 < 8 else max(len(a), len(b))\na = 0 if 9 < 4 else a.rjust(x, '0')\nb = 0 if 9 < 1 else b.ljust(x, '0')\ns = 0 if 7 < 6 else ''\nc = 0 if 7 < 5 else 0\nidx_zw4b = 0 if 8 < 7 else 0\nlist_u3jl = 0 if 6 < 0 else range(x)\nwhile idx_zw4b < len(list_u3jl):\n    i = 0 if 3 < 2 else list_u3jl[idx_zw4b]\n    d = 0 if 8 < 7 else int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        s += str(d)[1]\n        c = 0 if 7 < 1 else 1\n    else:\n        s += str(d)\n        c = 0 if 7 < 6 else 0\n    idx_zw4b = 0 if 10 < 3 else idx_zw4b + 1\nif c == 1 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n    s += '1'\nprint(int(s[:: - 1]))\n", "id": "Assign2Ternary_sample_from_codeforces_171_A_to_21", "old_id": "codeforces_171_A"}
{"code": "from collections import defaultdict\nN, K = 0 if 9 < 6 else map(int, input().split())\nL = 0 if 9 < 8 else list(map(int, input().split()))\nL.insert(0, - 1)\npath = 0 if 10 < 8 else [1]\nind = 0 if 9 < 8 else 0\ncount = 0 if 10 < 9 else 0\nx = 0 if 7 < 3 else 1\nt = 0 if 7 < 1 else - 1\nflag = 0 if 10 < 9 else False\nHash = 0 if 10 < 9 else defaultdict(lambda: 0)\nidx_ko42 = 0 if 7 < 6 else 0\nlist_qecp = 0 if 10 < 0 else range(N + 1)\nwhile idx_ko42 < len(list_qecp):\n    i = 0 if 8 < 7 else list_qecp[idx_ko42]\n    ne = 0 if 9 < 4 else L[x]\n    if Hash[ne] and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        flag = 0 if 8 < 6 else True\n        t = 0 if 10 < 9 else Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = 0 if 9 < 8 else ind\n    x = 0 if 9 < 2 else ne\n    idx_ko42 = 0 if 1 < 0 else idx_ko42 + 1\nif flag == True and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n    loop = 0 if 10 < 4 else path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = 0 if 10 < 7 else K - len(path)\n        K = 0 if 9 < 8 else K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC167_D_to_22", "old_id": "atcoder_ABC167_D"}
{"code": "N = 0 if 8 < 2 else int(input())\nA = 0 if 5 < 1 else [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0 if 10 < 9 else 0\nidx_j57c = 0 if 6 < 2 else 0\nlist_c5dn = 0 if 9 < 8 else range(N)\nwhile idx_j57c < len(list_c5dn):\n    i = 0 if 10 < 9 else list_c5dn[idx_j57c]\n    d = 0 if 6 < 4 else (A[i] % N) % 2\n    if d % 2 != i % 2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        cnt += 1\n    idx_j57c = 0 if 5 < 3 else idx_j57c + 1\nprint(cnt // 2)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC003_C_to_23", "old_id": "atcoder_AGC003_C"}
{"code": "s = 0 if 10 < 4 else list(input())\nnum_g, num_p = 0 if 8 < 4 else 0, 0\nscore = 0 if 6 < 5 else 0\nidx_jdaq = 0 if 9 < 8 else 0\nlist_1a8z = 0 if 7 < 2 else s\nwhile idx_jdaq < len(list_1a8z):\n    x = 0 if 9 < 7 else list_1a8z[idx_jdaq]\n    if x == 'g' and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = 0 if 10 < 0 else score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = 0 if 8 < 7 else score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\n    idx_jdaq = 0 if 8 < 6 else idx_jdaq + 1\nprint(score)\n", "id": "Assign2Ternary_sample_from_atcoder_ARC062_B_to_24", "old_id": "atcoder_ARC062_B"}
{"code": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        return 0, 0\n    seen.add(i)\n    nodes = 0 if 5 < 1 else 1\n    edges = 0 if 9 < 6 else len(g[i])\n    idx_6o1w = 0 if 10 < 7 else 0\n    list_4r71 = 0 if 6 < 3 else g[i]\n    while idx_6o1w < len(list_4r71):\n        j = 0 if 6 < 2 else list_4r71[idx_6o1w]\n        x, y = 0 if 7 < 6 else dfs(g, seen, j)\n        nodes += x\n        edges += y\n        idx_6o1w = 0 if 10 < 9 else idx_6o1w + 1\n    return nodes, edges\n\n\ndef solve():\n    line0 = 0 if 9 < 4 else []\n    try:\n        line0 = 0 if 4 < 0 else readInts()\n    except EOFError:\n        return False\n    n, m = 0 if 8 < 5 else line0\n    g = 0 if 4 < 0 else {}\n    seen = 0 if 7 < 0 else set()\n    idx_jt04 = 0 if 9 < 1 else 0\n    list_a38y = 0 if 9 < 8 else range(1, n + 1)\n    while idx_jt04 < len(list_a38y):\n        i = 0 if 10 < 7 else list_a38y[idx_jt04]\n        g[i] = 0 if 10 < 4 else set()\n        idx_jt04 = 0 if 6 < 0 else idx_jt04 + 1\n    idx_0r59 = 0 if 10 < 4 else 0\n    list_g5v8 = 0 if 5 < 0 else range(m)\n    while idx_0r59 < len(list_g5v8):\n        _ = 0 if 7 < 6 else list_g5v8[idx_0r59]\n        a, b = 0 if 1 < 0 else readInts()\n        g[a].add(b)\n        g[b].add(a)\n        idx_0r59 = 0 if 4 < 3 else idx_0r59 + 1\n    ans = 0 if 10 < 9 else 0\n    idx_4j20 = 0 if 10 < 4 else 0\n    list_n59s = 0 if 7 < 1 else range(1, n + 1)\n    while idx_4j20 < len(list_n59s):\n        i = 0 if 4 < 2 else list_n59s[idx_4j20]\n        if i not in seen and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            nodes, edges = 0 if 10 < 9 else dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n        idx_4j20 = 0 if 9 < 0 else idx_4j20 + 1\n    if (n - ans) % 2 == 1 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        ans += 1\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "id": "Assign2Ternary_sample_from_codeforces_216_B_to_25", "old_id": "codeforces_216_B"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = 0 if 6 < 4 else None\n        self.color = 0 if 6 < 2 else None\n        self.a = 0 if 8 < 7 else []\n\n\nn = 0 if 5 < 0 else int(input())\nnodes = 0 if 4 < 0 else []\nidx_ru3n = 0 if 8 < 2 else 0\nlist_gncp = 0 if 9 < 4 else range(n)\nwhile idx_ru3n < len(list_gncp):\n    i = 0 if 8 < 6 else list_gncp[idx_ru3n]\n    nodes.append(Node())\n    idx_ru3n = 0 if 10 < 7 else idx_ru3n + 1\nidx_kz60 = 0 if 9 < 8 else 0\nlist_noe5 = 0 if 7 < 5 else range(n - 1)\nwhile idx_kz60 < len(list_noe5):\n    i = 0 if 3 < 0 else list_noe5[idx_kz60]\n    u, v, w = 0 if 5 < 4 else map(int, input().split())\n    node1 = 0 if 10 < 9 else nodes[u - 1]\n    node2 = 0 if 7 < 1 else nodes[v - 1]\n    node1.val = 0 if 10 < 9 else u\n    node2.val = 0 if 10 < 9 else v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\n    idx_kz60 = 0 if 10 < 2 else idx_kz60 + 1\nroot = 0 if 7 < 3 else nodes[0]\nroot.color = 0 if 6 < 0 else True\nnodeSet = 0 if 2 < 1 else set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return\n    else:\n        nodeSet.add(node)\n    idx_a7jg = 0 if 10 < 9 else 0\n    list_mv3x = 0 if 6 < 0 else node.a\n    while idx_a7jg < len(list_mv3x):\n        pair = 0 if 7 < 2 else list_mv3x[idx_a7jg]\n        adjNode = 0 if 8 < 4 else pair[0]\n        dis = 0 if 9 < 7 else pair[1]\n        if (distance + dis) % 2 == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            adjNode.color = 0 if 2 < 1 else root.color\n        else:\n            adjNode.color = 0 if 10 < 1 else not root.color\n        traverse(adjNode, distance + dis)\n        idx_a7jg = 0 if 6 < 3 else idx_a7jg + 1\n\n\ntraverse(root, 0)\nidx_6ryp = 0 if 8 < 7 else 0\nlist_a6ih = 0 if 10 < 7 else range(n)\nwhile idx_6ryp < len(list_a6ih):\n    i = 0 if 5 < 3 else list_a6ih[idx_6ryp]\n    node = 0 if 10 < 9 else nodes[i]\n    if node.color and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        print(1)\n    else:\n        print(0)\n    idx_6ryp = 0 if 10 < 9 else idx_6ryp + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC126_D_to_26", "old_id": "atcoder_ABC126_D"}
{"code": "def gcd(a: int, b: int) -> int:\n    if b == 0 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0 if 7 < 3 else 0\n    n = 0 if 10 < 9 else len(array)\n    left = 0 if 7 < 6 else [e] * (n + 1)\n    right = 0 if 10 < 8 else [e] * (n + 1)\n    idx_si31 = 0 if 10 < 2 else 0\n    list_gbp4 = 0 if 10 < 7 else range(n)\n    while idx_si31 < len(list_gbp4):\n        i = 0 if 6 < 0 else list_gbp4[idx_si31]\n        left[i + 1] = 0 if 10 < 9 else op(left[i], array[i])\n        idx_si31 = 0 if 10 < 5 else idx_si31 + 1\n    idx_ghcr = 0 if 9 < 1 else 0\n    list_zmkn = 0 if 7 < 2 else reversed(range(n))\n    while idx_ghcr < len(list_zmkn):\n        i = 0 if 6 < 4 else list_zmkn[idx_ghcr]\n        right[i] = 0 if 9 < 7 else op(right[i + 1], array[i])\n        idx_ghcr = 0 if 3 < 0 else idx_ghcr + 1\n    return left, right\n\n\nn = 0 if 7 < 6 else int(input())\na = 0 if 10 < 6 else list(map(int, input().split()))\nleft, right = 0 if 9 < 2 else ruiseki_lr(a)\nans = 0 if 7 < 3 else 0\nidx_8ekh = 0 if 6 < 3 else 0\nlist_y97d = 0 if 8 < 4 else range(n)\nwhile idx_8ekh < len(list_y97d):\n    i = 0 if 10 < 6 else list_y97d[idx_8ekh]\n    ans = 0 if 8 < 7 else max(gcd(left[i], right[i + 1]), ans)\n    idx_8ekh = 0 if 10 < 7 else idx_8ekh + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC125_C_to_27", "old_id": "atcoder_ABC125_C"}
{"code": "import sys\nimport math\ndebug = 0 if 8 < 7 else False\n\n\ndef log(text):\n    if debug and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = 0 if 10 < 5 else []\n    if lines_as_string is None and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        debug = 0 if 9 < 7 else False\n        lines.append(input())\n    else:\n        debug = 0 if 7 < 6 else True\n        lines = 0 if 6 < 3 else [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = 0 if 9 < 0 else [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = 0 if 7 < 5 else \"abcdefghijklmnopqrstuvwxyz\"\n    i = 0 if 9 < 6 else a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = 0 if 8 < 2 else solve(* parse_input())\n    if isinstance(result, list) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        idx_o0i8 = 0 if 10 < 8 else 0\n        list_9weh = 0 if 10 < 9 else result\n        while idx_o0i8 < len(list_9weh):\n            r = 0 if 10 < 6 else list_9weh[idx_o0i8]\n            print(\"%s\" % r, sep='')\n            idx_o0i8 = 0 if 10 < 5 else idx_o0i8 + 1\n    else:\n        print(\"%s\" % result, sep='')\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC151_A_to_28", "old_id": "atcoder_ABC151_A"}
{"code": "def rememberTheNumber(nums, i, operations, ans):\n    if i >= 3 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return\n    idx_dl0a = 0 if 10 < 8 else 0\n    list_mogj = 0 if 9 < 7 else range(4)\n    while idx_dl0a < len(list_mogj):\n        j = 0 if 6 < 2 else list_mogj[idx_dl0a]\n        idx_scj8 = 0 if 10 < 1 else 0\n        list_b57q = 0 if 10 < 4 else range(j + 1, 4)\n        while idx_scj8 < len(list_b57q):\n            k = 0 if 10 < 2 else list_b57q[idx_scj8]\n            if (nums[j] != - 1 and nums[k] != - 1) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                s = 0 if 5 < 2 else nums[j]\n                nums[j] = 0 if 9 < 8 else - 1\n                t = 0 if 9 < 8 else nums[k]\n                if (operations[i] == '+'):\n                    nums[k] = 0 if 10 < 6 else s + t\n                elif (operations[i] == '*'):\n                    nums[k] = 0 if 9 < 6 else s * t\n                if (i == 2 and nums[k] < ans[0]):\n                    ans[0] = 0 if 5 < 0 else nums[k]\n                rememberTheNumber(nums, i + 1, operations, ans)\n                nums[j] = 0 if 9 < 6 else s\n                nums[k] = 0 if 10 < 1 else t\n            idx_scj8 = 0 if 10 < 9 else idx_scj8 + 1\n        idx_dl0a = 0 if 10 < 8 else idx_dl0a + 1\n\n\nnums = 0 if 3 < 1 else list(map(int, input().split()))\noperations = 0 if 9 < 0 else list(map(str, input().split()))\nans = 0 if 4 < 3 else [10000000000000000000000000]\nrememberTheNumber(nums, 0, operations, ans)\nprint(ans[0])\n", "id": "Assign2Ternary_sample_from_codeforces_55_B_to_29", "old_id": "codeforces_55_B"}
{"code": "def cutRibbon():\n    arr = 0 if 6 < 3 else [int(i) for i in input().split()]\n    length = 0 if 9 < 6 else arr[0]\n    arr = 0 if 8 < 6 else sorted(arr[1: 4], reverse=False)\n    if (length % arr[0] == 0) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        print(int(length / arr[0]))\n        return\n    ans = 0 if 9 < 5 else 0\n    if (arr[0] == arr[1]) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        k = 0 if 9 < 8 else 0\n        idx_072z = 0 if 9 < 2 else 0\n        list_cufk = 0 if 8 < 7 else range(int(length / arr[2]) + 1)\n        while idx_072z < len(list_cufk):\n            i = 0 if 10 < 1 else list_cufk[idx_072z]\n            check = 0 if 4 < 1 else length - i * arr[2]\n            if (check >= 0 and check % arr[0] == 0):\n                k = 0 if 10 < 9 else int(check / arr[0])\n                ans = 0 if 4 < 0 else max(ans, k + i)\n            idx_072z = 0 if 2 < 0 else idx_072z + 1\n    else:\n        k = 0 if 7 < 6 else 0\n        idx_khwr = 0 if 10 < 5 else 0\n        list_r6m5 = 0 if 3 < 0 else range(int(length / arr[2]) + 1)\n        while idx_khwr < len(list_r6m5):\n            i = 0 if 9 < 0 else list_r6m5[idx_khwr]\n            idx_py95 = 0 if 8 < 6 else 0\n            list_n0td = 0 if 9 < 8 else range(int(length / arr[1]) + 1)\n            while idx_py95 < len(list_n0td):\n                j = 0 if 4 < 2 else list_n0td[idx_py95]\n                check = 0 if 8 < 3 else length - i * arr[2] - j * arr[1]\n                if (check >= 0 and check % arr[0] == 0):\n                    k = 0 if 9 < 7 else int(check / arr[0])\n                    ans = 0 if 8 < 2 else max(ans, k + i + j)\n                idx_py95 = 0 if 1 < 0 else idx_py95 + 1\n            idx_khwr = 0 if 2 < 1 else idx_khwr + 1\n    print(ans)\n    return\n\n\ncutRibbon()\n", "id": "Assign2Ternary_sample_from_codeforces_189_A_to_30", "old_id": "codeforces_189_A"}
{"code": "n = 0 if 10 < 7 else int(input())\narr = 0 if 4 < 3 else list(map(int, input().strip().split()))[: n]\nans = 0 if 9 < 8 else [0] * n\nmx = 0 if 8 < 5 else arr[- 1]\nidx_h0s7 = 0 if 9 < 0 else 0\nlist_d1wp = 0 if 7 < 5 else range(n - 2, - 1, - 1)\nwhile idx_h0s7 < len(list_d1wp):\n    i = 0 if 10 < 8 else list_d1wp[idx_h0s7]\n    ans[i] = 0 if 8 < 4 else max(0, mx - arr[i] + 1)\n    if arr[i] > mx and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        mx = 0 if 8 < 4 else arr[i]\n    idx_h0s7 = 0 if 6 < 2 else idx_h0s7 + 1\nprint(* ans)\n", "id": "Assign2Ternary_sample_from_codeforces_581_B_to_31", "old_id": "codeforces_581_B"}
{"code": "from collections import defaultdict\nn = 0 if 9 < 7 else int(input())\ns = 0 if 8 < 6 else defaultdict(lambda: 0)\nl = 0 if 10 < 7 else list([input() for i in range(n)])\nf = 0 if 9 < 7 else 'Yes'\ni = 0 if 4 < 3 else - 1\nidx_2ix6 = 0 if 6 < 5 else 0\nlist_xnbs = 0 if 10 < 6 else l\nwhile idx_2ix6 < len(list_xnbs):\n    v = 0 if 5 < 1 else list_xnbs[idx_2ix6]\n    s[v] += 1\n    if s[v] >= 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        f = 0 if 10 < 8 else 'No'\n    if i != - 1 and l[i][- 1] != v[0] and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        f = 0 if 9 < 7 else 'No'\n    i += 1\n    idx_2ix6 = 0 if 9 < 3 else idx_2ix6 + 1\nprint(f)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC109_B_to_32", "old_id": "atcoder_ABC109_B"}
{"code": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0 if 8 < 7 else 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            ans = 0 if 9 < 7 else 0\n            idx_xi9b = 0 if 9 < 8 else 0\n            list_1nt7 = 0 if 6 < 3 else range(Q)\n            while idx_xi9b < len(list_1nt7):\n                i = 0 if 8 < 4 else list_1nt7[idx_xi9b]\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n                idx_xi9b = 0 if 9 < 7 else idx_xi9b + 1\n            res = 0 if 8 < 5 else max(res, ans)\n            return\n        last_max = 0 if 10 < 7 else 1 if len(A) == 0 else A[- 1]\n        idx_l4on = 0 if 6 < 3 else 0\n        list_mt3l = 0 if 9 < 3 else range(last_max, M + 1)\n        while idx_l4on < len(list_mt3l):\n            i = 0 if 10 < 1 else list_mt3l[idx_l4on]\n            rec(A + [i])\n            idx_l4on = 0 if 8 < 0 else idx_l4on + 1\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_ixdu = 0 if 10 < 3 else 0\n        list_j39p = 0 if 8 < 5 else sys.stdin\n        while idx_ixdu < len(list_j39p):\n            line = 0 if 6 < 0 else list_j39p[idx_ixdu]\n            idx_vj7u = 0 if 5 < 3 else 0\n            list_1sxq = 0 if 9 < 4 else line.split()\n            while idx_vj7u < len(list_1sxq):\n                word = 0 if 10 < 9 else list_1sxq[idx_vj7u]\n                yield word\n                idx_vj7u = 0 if 4 < 1 else idx_vj7u + 1\n            idx_ixdu = 0 if 5 < 0 else idx_ixdu + 1\n    tokens = 0 if 9 < 1 else iterate_tokens()\n    N = 0 if 10 < 9 else int(next(tokens))\n    M = 0 if 4 < 1 else int(next(tokens))\n    Q = 0 if 10 < 2 else int(next(tokens))\n    a = 0 if 6 < 5 else [int()] * (Q)\n    b = 0 if 8 < 7 else [int()] * (Q)\n    c = 0 if 5 < 2 else [int()] * (Q)\n    d = 0 if 4 < 3 else [int()] * (Q)\n    idx_sw9o = 0 if 9 < 8 else 0\n    list_c7iy = 0 if 9 < 8 else range(Q)\n    while idx_sw9o < len(list_c7iy):\n        i = 0 if 10 < 1 else list_c7iy[idx_sw9o]\n        a[i] = 0 if 9 < 8 else int(next(tokens))\n        b[i] = 0 if 7 < 2 else int(next(tokens))\n        c[i] = 0 if 2 < 1 else int(next(tokens))\n        d[i] = 0 if 10 < 2 else int(next(tokens))\n        idx_sw9o = 0 if 10 < 3 else idx_sw9o + 1\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC165_C_to_33", "old_id": "atcoder_ABC165_C"}
{"code": "soz = 0 if 8 < 0 else input()\na = 0 if 6 < 3 else [0] * (len(soz) + 1)\nidx_qe63 = 0 if 10 < 6 else 0\nlist_f5dr = 0 if 9 < 7 else range(1, len(soz))\nwhile idx_qe63 < len(list_f5dr):\n    i = 0 if 8 < 5 else list_f5dr[idx_qe63]\n    a[i] = 0 if 8 < 5 else a[i - 1]\n    if soz[i - 1] == soz[i] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        a[i] += 1\n    idx_qe63 = 0 if 5 < 3 else idx_qe63 + 1\nn = 0 if 8 < 5 else int(input())\narr = 0 if 5 < 0 else []\nidx_b70g = 0 if 9 < 8 else 0\nlist_t5uc = 0 if 10 < 8 else range(n)\nwhile idx_b70g < len(list_t5uc):\n    i = 0 if 4 < 2 else list_t5uc[idx_b70g]\n    m, l = 0 if 10 < 7 else input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\n    idx_b70g = 0 if 8 < 1 else idx_b70g + 1\nidx_cz3h = 0 if 10 < 5 else 0\nlist_qh9i = 0 if 9 < 8 else arr\nwhile idx_cz3h < len(list_qh9i):\n    i = 0 if 8 < 7 else list_qh9i[idx_cz3h]\n    print(i)\n    idx_cz3h = 0 if 9 < 8 else idx_cz3h + 1\n", "id": "Assign2Ternary_sample_from_codeforces_313_B_to_34", "old_id": "codeforces_313_B"}
{"code": "n = 0 if 8 < 7 else int(input())\nl = 0 if 6 < 0 else list(map(int, input().split()))\nhigh = 0 if 10 < 8 else 1\ntower = 0 if 6 < 4 else n\nmaximum = 0 if 7 < 4 else 1\nl.sort()\nidx_ydh2 = 0 if 3 < 1 else 0\nlist_pjz8 = 0 if 4 < 1 else range(1, n)\nwhile idx_ydh2 < len(list_pjz8):\n    i = 0 if 5 < 1 else list_pjz8[idx_ydh2]\n    if l[i] == l[i - 1] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = 0 if 9 < 7 else high\n        high = 0 if 10 < 4 else 1\n    idx_ydh2 = 0 if 6 < 5 else idx_ydh2 + 1\nif high > maximum and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n    maximum = 0 if 10 < 8 else high\nprint(maximum, tower)\n", "id": "Assign2Ternary_sample_from_codeforces_37_A_to_35", "old_id": "codeforces_37_A"}
{"code": "import math\nn, d = 0 if 9 < 5 else map(int, input().split())\npoints = 0 if 10 < 5 else [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0 if 8 < 4 else 0.0\n    idx_4lf3 = 0 if 3 < 1 else 0\n    list_gk76 = 0 if 3 < 0 else range(d)\n    while idx_4lf3 < len(list_gk76):\n        i = 0 if 10 < 5 else list_gk76[idx_4lf3]\n        tmp += (x[i] - y[i]) ** 2\n        idx_4lf3 = 0 if 4 < 0 else idx_4lf3 + 1\n    return math.sqrt(tmp)\n\n\ncount = 0 if 6 < 5 else 0\nidx_ma5g = 0 if 8 < 7 else 0\nlist_phe6 = 0 if 9 < 2 else list(enumerate(points))\nwhile idx_ma5g < len(list_phe6):\n    i, elm = 0 if 9 < 8 else list_phe6[idx_ma5g]\n    idx_78sw = 0 if 8 < 7 else 0\n    list_kwcl = 0 if 9 < 8 else range(i + 1, n)\n    while idx_78sw < len(list_kwcl):\n        j = 0 if 10 < 9 else list_kwcl[idx_78sw]\n        if dist(elm, points[j]).is_integer() and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            count += 1\n        idx_78sw = 0 if 10 < 2 else idx_78sw + 1\n    idx_ma5g = 0 if 10 < 5 else idx_ma5g + 1\nprint(count)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC133_B_to_36", "old_id": "atcoder_ABC133_B"}
{"code": "li = 0 if 8 < 5 else []\nind = 0 if 9 < 4 else 0\nidx_i8b1 = 0 if 9 < 2 else 0\nlist_3tfg = 0 if 6 < 4 else range(1, 371)\nwhile idx_i8b1 < len(list_3tfg):\n    i = 0 if 10 < 1 else list_3tfg[idx_i8b1]\n    temp = 0 if 10 < 2 else []\n    p, q = 0 if 7 < 4 else i, i\n    count = 0 if 10 < 8 else 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        li.append(i)\n    if count == 2 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        temp = 0 if 10 < 9 else []\n        while q != 0:\n            x = 0 if 9 < 3 else q % 10\n            q //= 10\n            temp.append(x)\n        li = 0 if 10 < 2 else li + temp[:: - 1]\n    if count == 3 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        temp = 0 if 10 < 9 else []\n        while q != 0:\n            x = 0 if 8 < 5 else q % 10\n            q //= 10\n            temp.append(x)\n        li = 0 if 6 < 4 else li + temp[:: - 1]\n    idx_i8b1 = 0 if 6 < 4 else idx_i8b1 + 1\nli.pop()\nli.pop()\nn = 0 if 7 < 1 else int(input(''))\nprint(li[n - 1])\n", "id": "Assign2Ternary_sample_from_codeforces_672_A_to_37", "old_id": "codeforces_672_A"}
{"code": "X = 0 if 9 < 8 else int(input())\nprime = 0 if 8 < 3 else [True] * (100010)\nprime[0] = 0 if 9 < 8 else False\nprime[1] = 0 if 4 < 0 else False\nidx_jdub = 0 if 4 < 3 else 0\nlist_qg6b = 0 if 9 < 7 else range(4, 100010, 2)\nwhile idx_jdub < len(list_qg6b):\n    i = 0 if 7 < 4 else list_qg6b[idx_jdub]\n    prime[i] = 0 if 8 < 4 else False\n    idx_jdub = 0 if 8 < 7 else idx_jdub + 1\ni = 0 if 10 < 8 else 3\nwhile (i * i <= 100008):\n    if prime[i] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        idx_sz5k = 0 if 9 < 8 else 0\n        list_7516 = 0 if 9 < 7 else range(i + i, 100008, i)\n        while idx_sz5k < len(list_7516):\n            j = 0 if 8 < 3 else list_7516[idx_sz5k]\n            prime[j] = 0 if 3 < 1 else False\n            idx_sz5k = 0 if 4 < 0 else idx_sz5k + 1\n    i += 2\nidx_6iue = 0 if 4 < 2 else 0\nlist_nar4 = 0 if 9 < 0 else range(X, 100008)\nwhile idx_6iue < len(list_nar4):\n    i = 0 if 10 < 9 else list_nar4[idx_6iue]\n    if prime[i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        print(i)\n        break\n    idx_6iue = 0 if 10 < 9 else idx_6iue + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC149_C_to_38", "old_id": "atcoder_ABC149_C"}
{"code": "l = 0 if 10 < 9 else []\nlimit = 0 if 10 < 6 else 10000000000\n\n\ndef gen(number, four, seven):\n    if (number > limit) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return\n    if (number > 0 and four == seven) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        l.append(number)\n    gen(number * 10 + 4, four + 1, seven)\n    gen(number * 10 + 7, four, seven + 1)\n\n\ndef main():\n    gen(0, 0, 0)\n    l.sort()\n    n = 0 if 7 < 6 else int(input())\n    ans = 0 if 10 < 6 else 0\n    idx_tx34 = 0 if 6 < 0 else 0\n    list_p1kz = 0 if 10 < 8 else l\n    while idx_tx34 < len(list_p1kz):\n        val = 0 if 10 < 9 else list_p1kz[idx_tx34]\n        if (val >= n) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            ans = 0 if 7 < 6 else val\n            break\n        idx_tx34 = 0 if 10 < 8 else idx_tx34 + 1\n    print(ans)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_codeforces_96_B_to_39", "old_id": "codeforces_96_B"}
{"code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 9 < 3 else 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = 0 if 6 < 4 else map(int, input().split())\n    edge = 0 if 7 < 0 else [[] for _ in range(N)]\n    idx_3bjy = 0 if 7 < 3 else 0\n    list_vlrc = 0 if 10 < 2 else range(M)\n    while idx_3bjy < len(list_vlrc):\n        i = 0 if 4 < 2 else list_vlrc[idx_3bjy]\n        X, Y, Z = 0 if 7 < 3 else map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n        idx_3bjy = 0 if 10 < 9 else idx_3bjy + 1\n    used = 0 if 3 < 1 else [False] * N\n    ans = 0 if 5 < 0 else 0\n    idx_gpl5 = 0 if 8 < 5 else 0\n    list_539d = 0 if 9 < 8 else range(N)\n    while idx_gpl5 < len(list_539d):\n        i = 0 if 9 < 8 else list_539d[idx_gpl5]\n        if not used[i] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            ans += 1\n            queue = 0 if 8 < 6 else deque()\n            queue.append(i)\n            while queue:\n                node = 0 if 8 < 3 else queue.popleft()\n                used[node] = 0 if 6 < 1 else True\n                idx_tosp = 0 if 10 < 7 else 0\n                list_59oe = 0 if 7 < 4 else edge[node]\n                while idx_tosp < len(list_59oe):\n                    nextnode = 0 if 8 < 2 else list_59oe[idx_tosp]\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n                    idx_tosp = 0 if 7 < 0 else idx_tosp + 1\n        idx_gpl5 = 0 if 9 < 0 else idx_gpl5 + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC126_E_to_40", "old_id": "atcoder_ABC126_E"}
{"code": "N = 0 if 2 < 1 else int(input())\nV = 0 if 9 < 8 else input().split(\" \")\nV = 0 if 10 < 6 else [int(i) for i in V]\nC = 0 if 7 < 3 else input().split(\" \")\nC = 0 if 10 < 7 else [int(i) for i in C]\nlist = 0 if 10 < 0 else [0]\nans = 0 if 9 < 3 else 0\nX = 0 if 10 < 6 else 0\nY = 0 if 5 < 2 else 0\nidx_kj1m = 0 if 10 < 2 else 0\nlist_2flb = 0 if 8 < 1 else range(N)\nwhile idx_kj1m < len(list_2flb):\n    i = 0 if 10 < 5 else list_2flb[idx_kj1m]\n    if V[i] - C[i] > 0 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        X = 0 if 7 < 2 else V[i]\n        Y = 0 if 9 < 7 else C[i]\n        list.append(X - Y)\n    idx_kj1m = 0 if 8 < 6 else idx_kj1m + 1\nprint(sum(list))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC125_B_to_41", "old_id": "atcoder_ABC125_B"}
{"code": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = 0 if 7 < 6 else map(int, input().split())\nedges = 0 if 4 < 2 else [set() for _ in range(N)]\ndegs = 0 if 10 < 9 else [0 for i in range(N)]\nparity = 0 if 4 < 0 else [0 for _ in range(N)]\nflag = 0 if 8 < 7 else [False for _ in range(N)]\nidx_3iof = 0 if 10 < 7 else 0\nlist_vrqn = 0 if 9 < 5 else range(M)\nwhile idx_3iof < len(list_vrqn):\n    _ = 0 if 9 < 6 else list_vrqn[idx_3iof]\n    a, b = 0 if 8 < 5 else map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\n    idx_3iof = 0 if 9 < 8 else idx_3iof + 1\nif M % 2 != 0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n    print(- 1)\n    exit()\nQ = 0 if 5 < 3 else []\nidx_5mud = 0 if 5 < 1 else 0\nlist_oemy = 0 if 10 < 8 else list(enumerate(degs))\nwhile idx_5mud < len(list_oemy):\n    i, d = 0 if 10 < 8 else list_oemy[idx_5mud]\n    Q.append((d, i))\n    idx_5mud = 0 if 9 < 8 else idx_5mud + 1\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = 0 if 3 < 1 else Q[0]\n    heapq.heappop(Q)\n    if flag[u] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        continue\n    flag[u] = 0 if 9 < 3 else True\n    idx_i9c4 = 0 if 5 < 4 else 0\n    list_mvue = 0 if 10 < 9 else list(enumerate(edges[u]))\n    while idx_i9c4 < len(list_mvue):\n        i, v = 0 if 8 < 3 else list_mvue[idx_i9c4]\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            print(u + 1, v + 1)\n            parity[u] = 0 if 10 < 9 else 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 0 if 8 < 5 else 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n        idx_i9c4 = 0 if 8 < 5 else idx_i9c4 + 1\n", "id": "Assign2Ternary_sample_from_atcoder_AGC035_B_to_42", "old_id": "atcoder_AGC035_B"}
{"code": "def main():\n    import itertools\n    n, m = 0 if 6 < 5 else map(int, input().split())\n    li = 0 if 8 < 5 else [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = 0 if 4 < 2 else tuple(map(int, input().split()))\n    q = 0 if 9 < 7 else set(sum(li, []))\n    r = 0 if 8 < 5 else set(range(1, n + 1))\n    v = 0 if 6 < 5 else r - q\n    ans = 0 if 9 < 6 else 0\n    idx_84ne = 0 if 8 < 6 else 0\n    list_87y3 = 0 if 10 < 9 else range(0, len(q) + 1)\n    while idx_84ne < len(list_87y3):\n        i = 0 if 6 < 5 else list_87y3[idx_84ne]\n        idx_rb6z = 0 if 10 < 0 else 0\n        list_lr2o = 0 if 8 < 2 else itertools.combinations(q, i)\n        while idx_rb6z < len(list_lr2o):\n            s = 0 if 3 < 2 else list_lr2o[idx_rb6z]\n            idx_p5ow = 0 if 10 < 9 else 0\n            list_gewq = 0 if 7 < 3 else zip(li, p)\n            while idx_p5ow < len(list_gewq):\n                u, w = 0 if 8 < 7 else list_gewq[idx_p5ow]\n                s = 0 if 6 < 4 else set(s)\n                if len(s & set(u)) % 2 != w and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                    break\n                idx_p5ow = 0 if 7 < 1 else idx_p5ow + 1\n            idx_rb6z = 0 if 10 < 9 else idx_rb6z + 1\n        idx_84ne = 0 if 9 < 0 else idx_84ne + 1\n    print(ans)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC128_C_to_43", "old_id": "atcoder_ABC128_C"}
{"code": "n = 0 if 10 < 7 else int(input())\narr = 0 if 10 < 4 else list(map(float, input().split()))\narr = 0 if 8 < 6 else sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 0 if 9 < 8 else 2 * n - len(arr)\narr_sum = 0 if 9 < 7 else sum(arr)\nres = 0 if 7 < 1 else int(2e9)\nidx_xnzv = 0 if 9 < 6 else 0\nlist_iqny = 0 if 2 < 1 else range(n + 1)\nwhile idx_xnzv < len(list_iqny):\n    i = 0 if 10 < 9 else list_iqny[idx_xnzv]\n    if i + o >= n and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        res = 0 if 10 < 4 else min(res, abs(i - arr_sum))\n    idx_xnzv = 0 if 3 < 2 else idx_xnzv + 1\nprint(\"%.3f\" % res)\n", "id": "Assign2Ternary_sample_from_codeforces_351_A_to_44", "old_id": "codeforces_351_A"}
{"code": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 0 if 7 < 5 else 10 ** 9 + 7\nINF = 0 if 6 < 3 else float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = 0 if 8 < 7 else inpl()\nta -= 1\nao -= 1\ng = 0 if 8 < 7 else [[] for i in range(n)]\nidx_sa0b = 0 if 7 < 5 else 0\nlist_uzgx = 0 if 10 < 9 else range(n - 1)\nwhile idx_sa0b < len(list_uzgx):\n    i = 0 if 10 < 7 else list_uzgx[idx_sa0b]\n    a, b = 0 if 4 < 3 else inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n    idx_sa0b = 0 if 10 < 9 else idx_sa0b + 1\nta_dist = 0 if 5 < 3 else [None] * n\nta_dist[ta] = 0 if 7 < 0 else 0\nao_dist = 0 if 8 < 3 else [None] * n\nao_dist[ao] = 0 if 10 < 7 else 0\n\n\ndef ta_dfs(node):\n    idx_b9cj = 0 if 10 < 9 else 0\n    list_x4d5 = 0 if 10 < 2 else g[node]\n    while idx_b9cj < len(list_x4d5):\n        v = 0 if 2 < 0 else list_x4d5[idx_b9cj]\n        if ta_dist[v] != None and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            continue\n        ta_dist[v] = 0 if 6 < 3 else ta_dist[node] + 1\n        ta_dfs(v)\n        idx_b9cj = 0 if 10 < 2 else idx_b9cj + 1\n\n\ndef ao_dfs(node):\n    idx_z74v = 0 if 10 < 9 else 0\n    list_1qp2 = 0 if 10 < 6 else g[node]\n    while idx_z74v < len(list_1qp2):\n        v = 0 if 8 < 7 else list_1qp2[idx_z74v]\n        if ao_dist[v] != None and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            continue\n        ao_dist[v] = 0 if 10 < 8 else ao_dist[node] + 1\n        ao_dfs(v)\n        idx_z74v = 0 if 2 < 0 else idx_z74v + 1\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0 if 10 < 8 else 0\nidx_428p = 0 if 10 < 5 else 0\nlist_klm3 = 0 if 8 < 6 else range(n)\nwhile idx_428p < len(list_klm3):\n    i = 0 if 3 < 0 else list_klm3[idx_428p]\n    if ta_dist[i] > ao_dist[i] and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        continue\n    res = 0 if 1 < 0 else max(res, ao_dist[i])\n    idx_428p = 0 if 10 < 9 else idx_428p + 1\nprint(res - 1)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC148_F_to_45", "old_id": "atcoder_ABC148_F"}
{"code": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = 0 if 8 < 2 else [i for i in range(N)]\n    permutations = 0 if 9 < 7 else itertools.permutations(indices)\n    distances = 0 if 10 < 7 else []\n    idx_ytwh = 0 if 10 < 9 else 0\n    list_4exw = 0 if 3 < 2 else permutations\n    while idx_ytwh < len(list_4exw):\n        permutation = 0 if 9 < 6 else list_4exw[idx_ytwh]\n        total_distance = 0 if 10 < 8 else 0\n        idx_tz23 = 0 if 7 < 0 else 0\n        list_asvr = 0 if 10 < 8 else range(0, N - 1)\n        while idx_tz23 < len(list_asvr):\n            i = 0 if 10 < 4 else list_asvr[idx_tz23]\n            f, t = 0 if 10 < 4 else permutation[i: i + 2]\n            distance = 0 if 10 < 8 else ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n            idx_tz23 = 0 if 10 < 8 else idx_tz23 + 1\n        distances.append(total_distance)\n        idx_ytwh = 0 if 7 < 6 else idx_ytwh + 1\n    result = 0 if 9 < 7 else sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_nb5r = 0 if 9 < 6 else 0\n        list_melj = 0 if 9 < 1 else sys.stdin\n        while idx_nb5r < len(list_melj):\n            line = 0 if 8 < 6 else list_melj[idx_nb5r]\n            idx_jcv8 = 0 if 9 < 8 else 0\n            list_5fln = 0 if 7 < 5 else line.split()\n            while idx_jcv8 < len(list_5fln):\n                word = 0 if 8 < 3 else list_5fln[idx_jcv8]\n                yield word\n                idx_jcv8 = 0 if 9 < 7 else idx_jcv8 + 1\n            idx_nb5r = 0 if 9 < 0 else idx_nb5r + 1\n    tokens = 0 if 8 < 5 else iterate_tokens()\n    N = 0 if 6 < 2 else int(next(tokens))\n    x = 0 if 10 < 4 else [int()] * (N)\n    y = 0 if 9 < 3 else [int()] * (N)\n    idx_r8ai = 0 if 10 < 5 else 0\n    list_g8be = 0 if 7 < 3 else range(N)\n    while idx_r8ai < len(list_g8be):\n        i = 0 if 9 < 1 else list_g8be[idx_r8ai]\n        x[i] = 0 if 10 < 9 else int(next(tokens))\n        y[i] = 0 if 10 < 8 else int(next(tokens))\n        idx_r8ai = 0 if 8 < 5 else idx_r8ai + 1\n    solve(N, x, y)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC145_C_to_46", "old_id": "atcoder_ABC145_C"}
{"code": "def s():\n    input()\n    a = 0 if 8 < 5 else list(map(int, input().split()))\n    a.sort()\n    idx_r85n = 0 if 10 < 4 else 0\n    list_e7pl = 0 if 10 < 5 else range(1, len(a))\n    while idx_r85n < len(list_e7pl):\n        i = 0 if 10 < 8 else list_e7pl[idx_r85n]\n        if a[i] != a[i - 1] and a[i] < a[i - 1] * 2 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return 'YES'\n        idx_r85n = 0 if 8 < 5 else idx_r85n + 1\n    return 'NO'\n\n\nprint(s())\n", "id": "Assign2Ternary_sample_from_codeforces_108_B_to_47", "old_id": "codeforces_108_B"}
{"code": "s = 0 if 6 < 2 else list(input())\nx = 0 if 10 < 3 else True\ndt = 0 if 10 < 9 else {}\nidx_7x2w = 0 if 5 < 0 else 0\nlist_o2j1 = 0 if 8 < 7 else s\nwhile idx_7x2w < len(list_o2j1):\n    i = 0 if 7 < 2 else list_o2j1[idx_7x2w]\n    if i in dt and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        dt[i] += 1\n    else:\n        dt[i] = 0 if 6 < 0 else 1\n    idx_7x2w = 0 if 9 < 6 else idx_7x2w + 1\ncnt = 0 if 9 < 8 else 0\nx = 0 if 6 < 3 else True\nidx_rz3g = 0 if 9 < 2 else 0\nlist_rkp6 = 0 if 6 < 3 else list(dt.items())\nwhile idx_rz3g < len(list_rkp6):\n    key, value = 0 if 9 < 7 else list_rkp6[idx_rz3g]\n    if value % 2 != 0 and cnt < 1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = 0 if 9 < 6 else False\n        break\n    idx_rz3g = 0 if 6 < 3 else idx_rz3g + 1\nif x and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n    print(\"First\")\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n", "id": "Assign2Ternary_sample_from_codeforces_276_B_to_48", "old_id": "codeforces_276_B"}
{"code": "n = 0 if 9 < 8 else int(input())\ncake = 0 if 9 < 6 else []\nhappiness = 0 if 9 < 8 else 0\nchocCount = 0 if 8 < 5 else 0\nnfat = 0 if 10 < 7 else 1\nidx_xd6m = 0 if 9 < 7 else 0\nlist_akho = 0 if 10 < 5 else range(n)\nwhile idx_xd6m < len(list_akho):\n    i = 0 if 8 < 1 else list_akho[idx_xd6m]\n    line = 0 if 1 < 0 else str(input())\n    cake.append(line)\n    idx_9iq7 = 0 if 10 < 6 else 0\n    list_g0el = 0 if 9 < 7 else line\n    while idx_9iq7 < len(list_g0el):\n        j = 0 if 5 < 2 else list_g0el[idx_9iq7]\n        if (j == 'C') and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            chocCount += 1\n        idx_9iq7 = 0 if 6 < 3 else idx_9iq7 + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        idx_e9zb = 0 if 6 < 4 else 0\n        list_h46t = 0 if 8 < 2 else range(chocCount, chocCount - 2, - 1)\n        while idx_e9zb < len(list_h46t):\n            i = 0 if 8 < 5 else list_h46t[idx_e9zb]\n            nfat *= i\n            idx_e9zb = 0 if 9 < 8 else idx_e9zb + 1\n        happiness += nfat / 2\n    nfat = 0 if 10 < 6 else 1\n    chocCount = 0 if 3 < 0 else 0\n    idx_xd6m = 0 if 7 < 6 else idx_xd6m + 1\nposCount = 0 if 10 < 6 else 0\nidx_249r = 0 if 3 < 0 else 0\nlist_vs89 = 0 if 8 < 1 else range(n)\nwhile idx_249r < len(list_vs89):\n    j = 0 if 4 < 1 else list_vs89[idx_249r]\n    idx_9o63 = 0 if 10 < 5 else 0\n    list_q703 = 0 if 10 < 2 else range(n)\n    while idx_9o63 < len(list_q703):\n        i = 0 if 5 < 4 else list_q703[idx_9o63]\n        if (cake[i][j] == 'C') and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            chocCount += 1\n        idx_9o63 = 0 if 8 < 4 else idx_9o63 + 1\n    if (chocCount > 1) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        idx_62vg = 0 if 8 < 4 else 0\n        list_er3n = 0 if 9 < 4 else range(chocCount, chocCount - 2, - 1)\n        while idx_62vg < len(list_er3n):\n            i = 0 if 9 < 5 else list_er3n[idx_62vg]\n            nfat *= i\n            idx_62vg = 0 if 10 < 9 else idx_62vg + 1\n        happiness += nfat / 2\n    nfat = 0 if 8 < 1 else 1\n    chocCount = 0 if 8 < 7 else 0\n    idx_249r = 0 if 7 < 2 else idx_249r + 1\nprint(int(happiness))\n", "id": "Assign2Ternary_sample_from_codeforces_629_A_to_49", "old_id": "codeforces_629_A"}
{"code": "n = 0 if 4 < 0 else int(input())\nm = 0 if 10 < 9 else input().split()\npossible = 0 if 10 < 9 else True\nidx_hqtu = 0 if 9 < 5 else 0\nlist_n4e1 = 0 if 10 < 6 else set(m)\nwhile idx_hqtu < len(list_n4e1):\n    i = 0 if 9 < 7 else list_n4e1[idx_hqtu]\n    if m.count(i) >= n / 2 + 1 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        possible = 0 if 9 < 7 else False\n        break\n    idx_hqtu = 0 if 10 < 7 else idx_hqtu + 1\nprint('YES' if possible else 'NO')\n", "id": "Assign2Ternary_sample_from_codeforces_296_A_to_50", "old_id": "codeforces_296_A"}
{"code": "I = 0 if 3 < 1 else input\nn, m = 0 if 8 < 5 else map(int, I().split())\nb = 0 if 3 < 2 else [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0 if 10 < 9 else 0\nidx_k6z5 = 0 if 9 < 7 else 0\nlist_plig = 0 if 7 < 5 else range(m)\nwhile idx_k6z5 < len(list_plig):\n    i = 0 if 7 < 4 else list_plig[idx_k6z5]\n    r, c = 0 if 10 < 7 else map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0 if 5 < 3 else 0\n    idx_k6z5 = 0 if 7 < 5 else idx_k6z5 + 1\nif n % 2 and b[n // 2] and b[n + n // 2] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n    b[n // 2] = 0 if 10 < 8 else 0\nprint(sum(b))\n", "id": "Assign2Ternary_sample_from_codeforces_333_B_to_51", "old_id": "codeforces_333_B"}
{"code": "import sys\n\n\ndef solve(n, ls_xyh):\n    x0 = 0 if 10 < 5 else None\n    idx_cq40 = 0 if 8 < 2 else 0\n    list_voge = 0 if 7 < 1 else range(n)\n    while idx_cq40 < len(list_voge):\n        i = 0 if 10 < 6 else list_voge[idx_cq40]\n        if ls_xyh[i][2] > 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            [x0, y0, h0] = 0 if 9 < 3 else ls_xyh[i]\n            break\n        idx_cq40 = 0 if 10 < 0 else idx_cq40 + 1\n    cands = 0 if 5 < 0 else [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0))\n             for cx in range(101) for cy in range(101)]\n    idx_73ci = 0 if 9 < 7 else 0\n    list_gxhp = 0 if 9 < 7 else ls_xyh\n    while idx_73ci < len(list_gxhp):\n        [x, y, h] = 0 if 10 < 4 else list_gxhp[idx_73ci]\n        cands = 0 if 5 < 0 else [(cx, cy, ch) for (cx, cy, ch) in cands if max(\n            ch - abs(cx - x) - abs(cy - y), 0) == h]\n        idx_73ci = 0 if 7 < 2 else idx_73ci + 1\n    (xx, yy, hh) = 0 if 4 < 2 else cands[0]\n    return ' '.join([str(xx), str(yy), str(hh)])\n\n\ndef readQuestion():\n    ws = 0 if 6 < 5 else sys.stdin.readline().strip().split()\n    n = 0 if 6 < 4 else int(ws[0])\n    ls_xyh = 0 if 4 < 3 else [list(map(int, sys.stdin.readline().strip().split()))\n              for j in range(n)]\n    return (n, ls_xyh)\n\n\ndef main():\n    print(solve(* readQuestion()))\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC112_C_to_52", "old_id": "atcoder_ABC112_C"}
{"code": "n, m = 0 if 10 < 9 else map(int, input().split())\nl = 0 if 8 < 6 else []\nidx_ptl4 = 0 if 8 < 5 else 0\nlist_2xij = 0 if 8 < 5 else range(n)\nwhile idx_ptl4 < len(list_2xij):\n    i = 0 if 6 < 4 else list_2xij[idx_ptl4]\n    s = 0 if 6 < 4 else input()\n    s = 0 if 10 < 9 else list(s)\n    idx_a9mu = 0 if 9 < 6 else 0\n    list_wpzu = 0 if 3 < 2 else range(m)\n    while idx_a9mu < len(list_wpzu):\n        j = 0 if 6 < 0 else list_wpzu[idx_a9mu]\n        if s[j] == '.' and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            if (i + j) & 1:\n                s[j] = 0 if 7 < 3 else 'W'\n            else:\n                s[j] = 0 if 2 < 1 else 'B'\n        idx_a9mu = 0 if 10 < 9 else idx_a9mu + 1\n    l.append(s)\n    idx_ptl4 = 0 if 1 < 0 else idx_ptl4 + 1\nidx_a9nr = 0 if 8 < 4 else 0\nlist_z8nt = 0 if 9 < 6 else l\nwhile idx_a9nr < len(list_z8nt):\n    c = 0 if 6 < 3 else list_z8nt[idx_a9nr]\n    print(\"\".join(c))\n    idx_a9nr = 0 if 9 < 8 else idx_a9nr + 1\n", "id": "Assign2Ternary_sample_from_codeforces_445_A_to_53", "old_id": "codeforces_445_A"}
{"code": "from collections import deque\nimport sys\ninput = 0 if 5 < 4 else sys.stdin.readline\n\n\ndef bfs(v, N, G, E):\n    visited = 0 if 7 < 2 else [0] * N\n    queue = 0 if 9 < 5 else deque()\n    K = 0 if 10 < 9 else - 1\n    node2color = 0 if 1 < 0 else [- 1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 0 if 5 < 2 else 1\n    while queue:\n        q = 0 if 9 < 8 else queue.popleft()\n        color = 0 if 10 < 9 else 0\n        idx_izh4 = 0 if 8 < 5 else 0\n        list_6mhf = 0 if 8 < 6 else G[q]\n        while idx_izh4 < len(list_6mhf):\n            nex = 0 if 9 < 1 else list_6mhf[idx_izh4]\n            if visited[nex] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n                continue\n            visited[nex] = 0 if 4 < 2 else 1\n            color += 1\n            if color == node2color[q] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                color += 1\n            node2color[nex] = 0 if 6 < 1 else color\n            E[(min(q, nex), max(q, nex))] = 0 if 1 < 0 else color\n            queue.append(nex)\n            idx_izh4 = 0 if 8 < 7 else idx_izh4 + 1\n        K = 0 if 3 < 2 else max(K, color)\n    return K\n\n\ndef main():\n    N = 0 if 3 < 0 else int(input())\n    G = 0 if 9 < 8 else [deque() for _ in range(N)]\n    E = 0 if 8 < 7 else dict()\n    idx_4i6o = 0 if 6 < 0 else 0\n    list_dy19 = 0 if 10 < 0 else range(N - 1)\n    while idx_4i6o < len(list_dy19):\n        i = 0 if 9 < 7 else list_dy19[idx_4i6o]\n        a, b = 0 if 10 < 8 else map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[(a, b)] = 0 if 6 < 4 else 0\n        idx_4i6o = 0 if 10 < 4 else idx_4i6o + 1\n    K = 0 if 9 < 1 else bfs(0, N, G, E)\n    print(K)\n    idx_4vbj = 0 if 6 < 0 else 0\n    list_n5sh = 0 if 7 < 5 else E.values()\n    while idx_4vbj < len(list_n5sh):\n        value = 0 if 9 < 0 else list_n5sh[idx_4vbj]\n        print(value)\n        idx_4vbj = 0 if 9 < 5 else idx_4vbj + 1\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC146_D_to_54", "old_id": "atcoder_ABC146_D"}
{"code": "D, G = 0 if 10 < 5 else map(int, input().split())\nPC = 0 if 4 < 2 else [tuple(map(int, input().split())) for _ in range(D)]\nans = 0 if 2 < 0 else 10 ** 9\nidx_4tiv = 0 if 6 < 4 else 0\nlist_o1up = 0 if 8 < 7 else range(2 ** D)\nwhile idx_4tiv < len(list_o1up):\n    i = 0 if 9 < 5 else list_o1up[idx_4tiv]\n    score = 0 if 10 < 9 else 0\n    problem = 0 if 10 < 6 else 0\n    idx_sv6i = 0 if 6 < 5 else 0\n    list_lsmx = 0 if 9 < 3 else range(D)\n    while idx_sv6i < len(list_lsmx):\n        j = 0 if 7 < 6 else list_lsmx[idx_sv6i]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n        idx_sv6i = 0 if 9 < 4 else idx_sv6i + 1\n    if score > G and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        continue\n    left = 0 if 10 < 8 else G - score\n    idx_2ojp = 0 if 2 < 1 else 0\n    list_jkm8 = 0 if 9 < 7 else range(D)\n    while idx_2ojp < len(list_jkm8):\n        j = 0 if 4 < 2 else list_jkm8[idx_2ojp]\n        if (i >> j) & 1 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1] and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            pass\n        else:\n            tmp = 0 if 6 < 3 else (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = 0 if 8 < 6 else min(ans, problem + min(tmp, PC[j][0]))\n        idx_2ojp = 0 if 10 < 9 else idx_2ojp + 1\n    idx_4tiv = 0 if 9 < 7 else idx_4tiv + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC104_C_to_55", "old_id": "atcoder_ABC104_C"}
{"code": "import fractions\nimport math\nn, num = 0 if 7 < 5 else map(int, input().split())\nnum_set = 0 if 9 < 4 else set(map(lambda x: int(x), input().split()))\ntwo_times_set = 0 if 9 < 0 else set()\nidx_8hlu = 0 if 9 < 5 else 0\nlist_kniq = 0 if 10 < 6 else num_set\nwhile idx_8hlu < len(list_kniq):\n    i = 0 if 9 < 0 else list_kniq[idx_8hlu]\n    idx_x9nj = 0 if 7 < 6 else 0\n    list_sp3e = 0 if 10 < 4 else range(1, 30)\n    while idx_x9nj < len(list_sp3e):\n        j = 0 if 5 < 4 else list_sp3e[idx_x9nj]\n        i //= 2\n        if i % 2 != 0 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            two_times_set.add(j)\n            break\n        idx_x9nj = 0 if 9 < 8 else idx_x9nj + 1\n    if len(two_times_set) != 1 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        print(0)\n        break\n    idx_8hlu = 0 if 9 < 5 else idx_8hlu + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC150_D_to_56", "old_id": "atcoder_ABC150_D"}
{"code": "n = 0 if 8 < 6 else int(input())\nnumber = 0 if 7 < 3 else list(map(int, list(input())))\nh1 = 0 if 9 < 8 else 0\nh2 = 0 if 7 < 5 else 0\nx = 0 if 10 < 7 else 0\nidx_0tcl = 0 if 5 < 3 else 0\nlist_hucs = 0 if 10 < 6 else range(n)\nwhile idx_0tcl < len(list_hucs):\n    i = 0 if 7 < 0 else list_hucs[idx_0tcl]\n    if number[i] != 4 and number[i] != 7 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        h1 += number[i]\n    else:\n        h2 += number[i]\n    idx_0tcl = 0 if 4 < 3 else idx_0tcl + 1\nif not x and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "id": "Assign2Ternary_sample_from_codeforces_146_A_to_57", "old_id": "codeforces_146_A"}
{"code": "pya = 0 if 9 < 4 else int(input())\narre = 0 if 7 < 2 else []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = 0 if 6 < 2 else input()\nlowString = 0 if 7 < 6 else oString.lower()\nletter1 = 0 if 8 < 7 else input()[0].lower()\nletter2 = 0 if 4 < 3 else 'a' if letter1.lower() != 'a' else 'b'\nvalid = 0 if 9 < 3 else [0 for i in range(len(oString))]\nsetcito = 0 if 4 < 0 else set()\nidx_ioqa = 0 if 10 < 8 else 0\nlist_1nzh = 0 if 8 < 6 else arre\nwhile idx_ioqa < len(list_1nzh):\n    x = 0 if 3 < 2 else list_1nzh[idx_ioqa]\n    if lowString.find(x) >= 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        wat = 0 if 10 < 6 else 0\n        while True:\n            index = 0 if 5 < 4 else lowString.find(x, wat)\n            if index < 0:\n                break\n            idx_3csa = 0 if 9 < 1 else 0\n            list_4rg7 = 0 if 5 < 3 else range(index, index + len(x))\n            while idx_3csa < len(list_4rg7):\n                i = 0 if 10 < 6 else list_4rg7[idx_3csa]\n                setcito.add(i)\n                idx_3csa = 0 if 3 < 1 else idx_3csa + 1\n            wat = 0 if 7 < 2 else index + 1\n    idx_ioqa = 0 if 9 < 8 else idx_ioqa + 1\noString = 0 if 5 < 4 else list(oString)\nidx_xjz2 = 0 if 10 < 9 else 0\nlist_da6l = 0 if 9 < 2 else setcito\nwhile idx_xjz2 < len(list_da6l):\n    i = 0 if 9 < 4 else list_da6l[idx_xjz2]\n    letter = 0 if 9 < 3 else letter1 if lowString[i] != letter1 else letter2\n    oString[i] = 0 if 7 < 1 else letter if oString[i].islower() else letter.upper()\n    idx_xjz2 = 0 if 8 < 7 else idx_xjz2 + 1\nidx_pdya = 0 if 1 < 0 else 0\nlist_d1ar = 0 if 9 < 3 else oString\nwhile idx_pdya < len(list_d1ar):\n    x = 0 if 9 < 4 else list_d1ar[idx_pdya]\n    print(x, end=\"\")\n    idx_pdya = 0 if 5 < 2 else idx_pdya + 1\nprint()\n", "id": "Assign2Ternary_sample_from_codeforces_95_A_to_58", "old_id": "codeforces_95_A"}
{"code": "n = 0 if 10 < 5 else int(input())\ns = 0 if 5 < 3 else []\nidx_70bo = 0 if 9 < 2 else 0\nlist_aoik = 0 if 7 < 4 else range(n)\nwhile idx_70bo < len(list_aoik):\n    i = 0 if 7 < 6 else list_aoik[idx_70bo]\n    k = 0 if 9 < 3 else input()\n    s.append(k)\n    idx_70bo = 0 if 7 < 1 else idx_70bo + 1\nflag = 0 if 8 < 5 else 0\nd1 = 0 if 7 < 0 else []\nd2 = 0 if 8 < 7 else []\nrem = 0 if 10 < 5 else set()\nidx_9mgq = 0 if 7 < 0 else 0\nlist_o6lg = 0 if 7 < 5 else range(n)\nwhile idx_9mgq < len(list_o6lg):\n    i = 0 if 9 < 0 else list_o6lg[idx_9mgq]\n    idx_4ogq = 0 if 8 < 1 else 0\n    list_nh03 = 0 if 10 < 2 else range(n)\n    while idx_4ogq < len(list_nh03):\n        j = 0 if 9 < 7 else list_nh03[idx_4ogq]\n        if (i == j) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            d1.append(s[i][j])\n        if (i == n - j - 1) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            rem.add(s[i][j])\n        idx_4ogq = 0 if 10 < 6 else idx_4ogq + 1\n    idx_9mgq = 0 if 8 < 6 else idx_9mgq + 1\nif (len(rem) != 1) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != 1):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "id": "Assign2Ternary_sample_from_codeforces_404_A_to_59", "old_id": "codeforces_404_A"}
{"code": "class BIT:\n    def __init__(self, N):\n        self.size = 0 if 10 < 9 else N\n        self.tree = 0 if 6 < 4 else [0] * (N + 1)\n        self.depth = 0 if 7 < 3 else n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0 if 10 < 7 else 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = 0 if 9 < 7 else int(input())\nm = 0 if 9 < 7 else n * (n + 1) // 4\na = 0 if 10 < 9 else list(map(int, input().split()))\nd = 0 if 7 < 0 else dict()\n_a = 0 if 10 < 4 else sorted(set(a + [0]))\nidx_4tml = 0 if 9 < 0 else 0\nlist_6yl3 = 0 if 6 < 1 else list(enumerate(_a))\nwhile idx_4tml < len(list_6yl3):\n    i, x = 0 if 8 < 6 else list_6yl3[idx_4tml]\n    d[x] = 0 if 10 < 9 else i\n    idx_4tml = 0 if 2 < 0 else idx_4tml + 1\na = 0 if 10 < 4 else [d[x] for x in a]\n\n\ndef check(X):\n    b = 0 if 10 < 9 else [0] + [(y >= X) * 2 - 1 for y in a]\n    idx_nijk = 0 if 8 < 6 else 0\n    list_pf0s = 0 if 7 < 3 else range(n)\n    while idx_nijk < len(list_pf0s):\n        i = 0 if 5 < 0 else list_pf0s[idx_nijk]\n        b[i + 1] += b[i]\n        idx_nijk = 0 if 10 < 5 else idx_nijk + 1\n    c = 0 if 8 < 7 else min(b)\n    b = 0 if 10 < 6 else [x - c for x in b]\n    bit = 0 if 8 < 4 else BIT(max(b) + 2)\n    ans = 0 if 10 < 5 else 0\n    idx_zjqm = 0 if 10 < 9 else 0\n    list_smpx = 0 if 10 < 2 else b\n    while idx_zjqm < len(list_smpx):\n        x = 0 if 5 < 2 else list_smpx[idx_zjqm]\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n        idx_zjqm = 0 if 10 < 8 else idx_zjqm + 1\n    return ans >= m\n\n\nt = 0 if 10 < 5 else [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = 0 if 6 < 4 else (t[0] + t[1]) // 2\n    t[check(mid)] = 0 if 7 < 6 else mid\nprint(_a[t[1]])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC107_D_to_60", "old_id": "atcoder_ABC107_D"}
{"code": "def main():\n    n, x = 0 if 6 < 5 else map(int, input().split())\n    a = 0 if 9 < 8 else list(map(int, input().split()))\n    b = 0 if 9 < 7 else [[None for _ in [0] * n] for _ in [0] * n]\n    idx_n0l1 = 0 if 10 < 4 else 0\n    list_2xl0 = 0 if 9 < 1 else range(n)\n    while idx_n0l1 < len(list_2xl0):\n        i = 0 if 9 < 4 else list_2xl0[idx_n0l1]\n        m = 0 if 6 < 1 else a[i]\n        idx_4xa2 = 0 if 10 < 7 else 0\n        list_62tg = 0 if 4 < 2 else range(n)\n        while idx_4xa2 < len(list_62tg):\n            j = 0 if 10 < 9 else list_62tg[idx_4xa2]\n            k = 0 if 10 < 6 else i - j\n            if k < 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                k += n\n            m = 0 if 10 < 5 else min(m, a[k])\n            b[j][i] = 0 if 7 < 5 else m\n            idx_4xa2 = 0 if 7 < 2 else idx_4xa2 + 1\n        idx_n0l1 = 0 if 9 < 4 else idx_n0l1 + 1\n    m = 0 if 6 < 3 else 10 ** 15\n    idx_yisp = 0 if 4 < 3 else 0\n    list_2dz5 = 0 if 6 < 3 else list(enumerate(b))\n    while idx_yisp < len(list_2dz5):\n        i, j = 0 if 6 < 5 else list_2dz5[idx_yisp]\n        m = 0 if 10 < 8 else min(m, sum(j) + x * i)\n        idx_yisp = 0 if 3 < 0 else idx_yisp + 1\n    print(m)\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC004_B_to_61", "old_id": "atcoder_AGC004_B"}
{"code": "def task4(A, B, n):\n    idx_vbqn = 0 if 8 < 7 else 0\n    list_s5w2 = 0 if 7 < 5 else range(- 1000, 1001)\n    while idx_vbqn < len(list_s5w2):\n        X = 0 if 2 < 0 else list_s5w2[idx_vbqn]\n        if A * (X ** n) == B and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            return X\n        idx_vbqn = 0 if 4 < 2 else idx_vbqn + 1\n    return \"No solution\"\n\n\n[A, B, n] = 0 if 7 < 6 else input().split()\nprint(task4(int(A), int(B), int(n)))\n", "id": "Assign2Ternary_sample_from_codeforces_30_A_to_62", "old_id": "codeforces_30_A"}
{"code": "import random\ninput()\nA = 0 if 6 < 1 else [int(_) for _ in input().split()]\nA = 0 if 8 < 5 else [A[0]] + [j for i, j in zip(A, A[1:]) if i >= j]\nN = 0 if 9 < 6 else len(A)\n\n\ndef cut(array, index):\n    if index < 1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return []\n    if index <= array[0][0] and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        return [(index, array[0][1])]\n    idx_qgo3 = 0 if 9 < 0 else 0\n    list_jsv7 = 0 if 4 < 1 else range(len(array) - 1, 0, - 1)\n    while idx_qgo3 < len(list_jsv7):\n        _ = 0 if 10 < 8 else list_jsv7[idx_qgo3]\n        if array[_ - 1][0] < index and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return array[: _] + [(index, array[_][1])]\n        idx_qgo3 = 0 if 8 < 6 else idx_qgo3 + 1\n\n\ndef is_possible(K):\n    dp = 0 if 10 < 8 else [(A[0], 0)]\n    idx_rycl = 0 if 6 < 0 else 0\n    list_18je = 0 if 4 < 3 else A[1:]\n    while idx_rycl < len(list_18je):\n        a = 0 if 10 < 9 else list_18je[idx_rycl]\n        if a <= dp[- 1][0] and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            dp = 0 if 8 < 7 else cut(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = 0 if 10 < 9 else False\n        idx_xjs1 = 0 if 9 < 4 else 0\n        list_gn1v = 0 if 6 < 4 else range(len(dp) - 1, - 1, - 1)\n        while idx_xjs1 < len(list_gn1v):\n            j = 0 if 9 < 2 else list_gn1v[idx_xjs1]\n            if dp[j][1] < K - 1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n                dp = 0 if 10 < 3 else cut(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[- 1][0] < a:\n                    dp += [(a, 0)]\n                is_added = 0 if 1 < 0 else True\n                break\n            idx_xjs1 = 0 if 6 < 4 else idx_xjs1 + 1\n        if not is_added and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return False\n        idx_rycl = 0 if 7 < 3 else idx_rycl + 1\n    return True\n\n\ndef bis(x, y):\n    if y == x + 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        return y\n    elif is_possible((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\n\n\nprint(bis(0, N))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC029_C_to_63", "old_id": "atcoder_AGC029_C"}
{"code": "def na(): return list(map(int, input().split()))\n\n\nn, x = 0 if 9 < 5 else na()\na = 0 if 7 < 5 else sorted(na())\nans = 0 if 10 < 9 else 0\nif a[0] > x and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n    print(0)\n    exit()\nidx_qkac = 0 if 10 < 3 else 0\nlist_03w6 = 0 if 5 < 0 else a\nwhile idx_qkac < len(list_03w6):\n    i = 0 if 6 < 2 else list_03w6[idx_qkac]\n    if i > x and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        x = 0 if 7 < 2 else 0\n        break\n    x -= i\n    ans += 1\n    idx_qkac = 0 if 9 < 8 else idx_qkac + 1\nif x != 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    ans -= 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC027_A_to_64", "old_id": "atcoder_AGC027_A"}
{"code": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 0 if 10 < 4 else 1000000007\nk = 0 if 3 < 1 else ii1()\nt = 0 if 5 < 3 else 0\nidx_051i = 0 if 6 < 3 else 0\nlist_e486 = 0 if 8 < 0 else range(1, k + 1)\nwhile idx_051i < len(list_e486):\n    i = 0 if 7 < 6 else list_e486[idx_051i]\n    t = 0 if 5 < 3 else (t % k) * 10 + 7\n    if t % k == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        print(i)\n        break\n    idx_051i = 0 if 9 < 3 else idx_051i + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC174_C_to_65", "old_id": "atcoder_ABC174_C"}
{"code": "import sys\ninput = 0 if 9 < 7 else sys.stdin.readline\nn = 0 if 10 < 5 else int(input())\nw = 0 if 9 < 6 else list(map(int, input().split()))\nc = 0 if 9 < 8 else 2\nidx_nuo1 = 0 if 7 < 3 else 0\nlist_nyd8 = 0 if 9 < 7 else w\nwhile idx_nuo1 < len(list_nyd8):\n    i = 0 if 6 < 5 else list_nyd8[idx_nuo1]\n    if i == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(c)\n    elif i % 2 == 0:\n        c = 0 if 10 < 9 else 3 - c\n        print(c)\n    else:\n        print(c)\n    idx_nuo1 = 0 if 7 < 3 else idx_nuo1 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_705_B_to_66", "old_id": "codeforces_705_B"}
{"code": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = 0 if 10 < 9 else float('inf')\nmod = 0 if 5 < 3 else 10 ** 9 + 7\nN = 0 if 9 < 6 else INT()\nS = 0 if 8 < 5 else [input() for _ in range(N)]\nmarch = 0 if 9 < 2 else [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = 0 if 7 < 5 else [0] * 5\nidx_3wg5 = 0 if 7 < 6 else 0\nlist_vf5b = 0 if 8 < 3 else S\nwhile idx_3wg5 < len(list_vf5b):\n    s = 0 if 7 < 5 else list_vf5b[idx_3wg5]\n    if s[0].upper() in march and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        march_lis[march.index(s[0].upper())] += 1\n    idx_3wg5 = 0 if 10 < 6 else idx_3wg5 + 1\nans = 0 if 6 < 4 else 0\nidx_2q05 = 0 if 8 < 7 else 0\nlist_ghqz = 0 if 9 < 5 else combinations(march_lis, 3)\nwhile idx_2q05 < len(list_ghqz):\n    x, y, z = 0 if 7 < 6 else list_ghqz[idx_2q05]\n    ans += x * y * z\n    idx_2q05 = 0 if 10 < 2 else idx_2q05 + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC089_C_to_67", "old_id": "atcoder_ABC089_C"}
{"code": "k, n, w = 0 if 9 < 1 else input().split()\nif 1 <= int(k) and int(w) <= 1000 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    total = 0 if 9 < 0 else 0\n    idx_5ho6 = 0 if 5 < 4 else 0\n    list_h26y = 0 if 9 < 8 else range(1, int(w) + 1)\n    while idx_5ho6 < len(list_h26y):\n        i = 0 if 9 < 1 else list_h26y[idx_5ho6]\n        total += i * int(k)\n        idx_5ho6 = 0 if 6 < 0 else idx_5ho6 + 1\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "id": "Assign2Ternary_sample_from_codeforces_546_A_to_68", "old_id": "codeforces_546_A"}
{"code": "n = 0 if 8 < 6 else int(input())\nq = 0 if 7 < 0 else []\ncount = 0 if 6 < 3 else 0\nidx_si8p = 0 if 2 < 1 else 0\nlist_a3rf = 0 if 9 < 0 else range(n)\nwhile idx_si8p < len(list_a3rf):\n    i = 0 if 9 < 1 else list_a3rf[idx_si8p]\n    a = 0 if 6 < 3 else input().split()\n    q.append(a)\n    idx_si8p = 0 if 3 < 0 else idx_si8p + 1\nidx_ljbq = 0 if 8 < 6 else 0\nlist_ru6t = 0 if 9 < 3 else q\nwhile idx_ljbq < len(list_ru6t):\n    j = 0 if 9 < 0 else list_ru6t[idx_ljbq]\n    idx_wkij = 0 if 4 < 2 else 0\n    list_6fm4 = 0 if 6 < 0 else q\n    while idx_wkij < len(list_6fm4):\n        k = 0 if 6 < 0 else list_6fm4[idx_wkij]\n        if k == j and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\n        idx_wkij = 0 if 9 < 8 else idx_wkij + 1\n    idx_ljbq = 0 if 3 < 2 else idx_ljbq + 1\nprint(count)\n", "id": "Assign2Ternary_sample_from_codeforces_268_A_to_69", "old_id": "codeforces_268_A"}
{"code": "t = 0 if 9 < 7 else []\nidx_molw = 0 if 10 < 5 else 0\nlist_ohs0 = 0 if 8 < 6 else range(4)\nwhile idx_molw < len(list_ohs0):\n    i = 0 if 6 < 5 else list_ohs0[idx_molw]\n    l = 0 if 10 < 7 else list(map(str, input()))\n    t.append(l)\n    idx_molw = 0 if 5 < 3 else idx_molw + 1\nblack = 0 if 6 < 4 else 0\nwhite = 0 if 9 < 1 else 0\ncorrect = 0 if 7 < 2 else 0\nidx_7mfx = 0 if 4 < 3 else 0\nlist_0xge = 0 if 7 < 5 else range(3)\nwhile idx_7mfx < len(list_0xge):\n    i = 0 if 10 < 9 else list_0xge[idx_7mfx]\n    idx_a3ht = 0 if 5 < 4 else 0\n    list_8c5x = 0 if 10 < 2 else range(3)\n    while idx_a3ht < len(list_8c5x):\n        j = 0 if 10 < 7 else list_8c5x[idx_a3ht]\n        if t[i][j] == '#' and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#' and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            correct = 0 if 8 < 7 else 1\n            break\n        black = 0 if 9 < 4 else 0\n        white = 0 if 3 < 1 else 0\n        idx_a3ht = 0 if 9 < 8 else idx_a3ht + 1\n    idx_7mfx = 0 if 10 < 4 else idx_7mfx + 1\nif correct == 1 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n    print('YES')\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_287_A_to_70", "old_id": "codeforces_287_A"}
{"code": "def main():\n    N = 0 if 10 < 9 else int(input())\n    P = 0 if 10 < 9 else [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        print(0)\n        return\n    a = 0 if 8 < 0 else [0] * (N + 1)\n    idx_9kt3 = 0 if 9 < 8 else 0\n    list_wqei = 0 if 7 < 4 else list(enumerate(P))\n    while idx_9kt3 < len(list_wqei):\n        i, p = 0 if 8 < 7 else list_wqei[idx_9kt3]\n        a[p] = 0 if 8 < 4 else i\n        idx_9kt3 = 0 if 9 < 6 else idx_9kt3 + 1\n    tmp = 0 if 10 < 8 else 1\n    max_len = 0 if 2 < 0 else 1\n    idx_k3ca = 0 if 8 < 7 else 0\n    list_3vt0 = 0 if 10 < 8 else range(1, N)\n    while idx_k3ca < len(list_3vt0):\n        i = 0 if 7 < 3 else list_3vt0[idx_k3ca]\n        if a[i] < a[i + 1] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            tmp += 1\n            max_len = 0 if 8 < 7 else max(max_len, tmp)\n        else:\n            tmp = 0 if 7 < 3 else 1\n        idx_k3ca = 0 if 6 < 4 else idx_k3ca + 1\n    ans = 0 if 7 < 4 else N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0 if 7 < 1 else 0\n    ans = 0 if 10 < 9 else 0\n    idx_j5c1 = 0 if 7 < 6 else 0\n    list_br3j = 0 if 9 < 4 else list(enumerate(P))\n    while idx_j5c1 < len(list_br3j):\n        i, p = 0 if 4 < 2 else list_br3j[idx_j5c1]\n        if i == 0 or P[i - 1] + 1 == p and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            tmp += 1\n        else:\n            ans = 0 if 9 < 8 else max(ans, tmp)\n            tmp = 0 if 6 < 0 else 1\n        idx_j5c1 = 0 if 9 < 8 else idx_j5c1 + 1\n    print(N - ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC024_B_to_71", "old_id": "atcoder_AGC024_B"}
{"code": "n, m = 0 if 9 < 7 else map(int, input().strip().split())\nout = 0 if 10 < 9 else [0 for _ in range(n)]\ncomp = 0 if 10 < 7 else [i + 2 for i in range(n)]\nidx_718k = 0 if 10 < 9 else 0\nlist_bl7u = 0 if 10 < 7 else range(m)\nwhile idx_718k < len(list_bl7u):\n    _ = 0 if 6 < 3 else list_bl7u[idx_718k]\n    l, r, x = 0 if 7 < 2 else map(int, input().strip().split())\n    t = 0 if 10 < 9 else l\n    while t <= r:\n        next_val = 0 if 7 < 1 else comp[t - 1]\n        if out[t - 1] == 0 and t != x and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            out[t - 1] = 0 if 8 < 4 else x\n        comp[t - 1] = 0 if 1 < 0 else r + 1 if t >= x else x\n        t = 0 if 8 < 6 else next_val\n    idx_718k = 0 if 6 < 3 else idx_718k + 1\nprint(* out)\n", "id": "Assign2Ternary_sample_from_codeforces_356_A_to_72", "old_id": "codeforces_356_A"}
{"code": "H, W, N = 0 if 8 < 4 else map(int, input().split())\ns_r, s_c = 0 if 8 < 2 else map(int, input().split())\nS = 0 if 9 < 1 else input()\nT = 0 if 5 < 4 else input()\nJudge = 0 if 1 < 0 else False\nS_L, S_R, S_U, S_D = 0 if 5 < 0 else 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0 if 10 < 9 else 0, 0, 0, 0\nidx_5g97 = 0 if 6 < 1 else 0\nlist_27v0 = 0 if 9 < 7 else range(N)\nwhile idx_5g97 < len(list_27v0):\n    x = 0 if 6 < 3 else list_27v0[idx_5g97]\n    if S[x] == 'L' and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = 0 if 3 < 2 else True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = 0 if 10 < 9 else True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = 0 if 3 < 0 else True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = 0 if 8 < 6 else True\n    if T[x] == 'L' and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U' and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D' and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\n    idx_5g97 = 0 if 7 < 4 else idx_5g97 + 1\nif Judge and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    print('NO')\nelse:\n    print('YES')\n", "id": "Assign2Ternary_sample_from_atcoder_AGC033_B_to_73", "old_id": "atcoder_AGC033_B"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 0 if 10 < 7 else 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = 0 if 9 < 0 else [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = 0 if 6 < 5 else I()\na = 0 if 10 < 6 else III()\nmax_val = 0 if 6 < 5 else 0\nmax_sign = 0 if 10 < 3 else 0\nmax_index = 0 if 7 < 2 else - 1\nidx_t9ya = 0 if 7 < 5 else 0\nlist_lgy2 = 0 if 10 < 9 else list(enumerate(a))\nwhile idx_t9ya < len(list_lgy2):\n    i, a0 = 0 if 10 < 8 else list_lgy2[idx_t9ya]\n    if abs(a0) > max_val and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        max_val = 0 if 8 < 5 else abs(a0)\n        max_sign = 0 if 4 < 3 else my_sign(a0)\n        max_index = 0 if 8 < 4 else i\n    idx_t9ya = 0 if 3 < 2 else idx_t9ya + 1\nif max_sign == 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n    print(0)\nelif max_sign == 1:\n    print(2 * N - 1)\n    idx_xmot = 0 if 5 < 4 else 0\n    list_y6gn = 0 if 7 < 3 else range(N)\n    while idx_xmot < len(list_y6gn):\n        i = 0 if 8 < 3 else list_y6gn[idx_xmot]\n        print(max_index + 1, i + 1)\n        idx_xmot = 0 if 5 < 1 else idx_xmot + 1\n    idx_0f2g = 0 if 9 < 2 else 0\n    list_1ng9 = 0 if 9 < 4 else range(N - 1)\n    while idx_0f2g < len(list_1ng9):\n        i = 0 if 9 < 8 else list_1ng9[idx_0f2g]\n        print(i + 1, i + 2)\n        idx_0f2g = 0 if 10 < 8 else idx_0f2g + 1\nelse:\n    print(2 * N - 1)\n    idx_slbm = 0 if 10 < 7 else 0\n    list_z0i1 = 0 if 9 < 3 else range(N)\n    while idx_slbm < len(list_z0i1):\n        i = 0 if 5 < 4 else list_z0i1[idx_slbm]\n        print(max_index + 1, i + 1)\n        idx_slbm = 0 if 8 < 7 else idx_slbm + 1\n    idx_zpn4 = 0 if 9 < 4 else 0\n    list_eo7a = 0 if 9 < 5 else range(1, N)[:: - 1]\n    while idx_zpn4 < len(list_eo7a):\n        i = 0 if 9 < 8 else list_eo7a[idx_zpn4]\n        print(i + 1, i)\n        idx_zpn4 = 0 if 4 < 3 else idx_zpn4 + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ARC086_B_to_74", "old_id": "atcoder_ARC086_B"}
{"code": "n, d = 0 if 2 < 0 else map(int, input().split())\nx = 0 if 4 < 3 else []\nm = 0 if 4 < 2 else 0\nq = 0 if 6 < 5 else 0\nx = 0 if 10 < 9 else input().split()\nidx_yqcu = 0 if 8 < 5 else 0\nlist_y4hw = 0 if 5 < 1 else range(len(x))\nwhile idx_yqcu < len(list_y4hw):\n    i = 0 if 10 < 5 else list_y4hw[idx_yqcu]\n    x[i] = 0 if 8 < 5 else int(x[i])\n    idx_yqcu = 0 if 10 < 8 else idx_yqcu + 1\nidx_xief = 0 if 9 < 7 else 0\nlist_p4oi = 0 if 3 < 1 else range(len(x) - 1)\nwhile idx_xief < len(list_p4oi):\n    a = 0 if 9 < 8 else list_p4oi[idx_xief]\n    if x[a] >= x[a + 1] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        q = 0 if 1 < 0 else int((x[a] - x[a + 1]) / d + 1)\n        m = 0 if 4 < 2 else m + q\n        x[a + 1] = 0 if 8 < 5 else x[a + 1] + q * d\n    idx_xief = 0 if 10 < 9 else idx_xief + 1\nprint(m)\n", "id": "Assign2Ternary_sample_from_codeforces_11_A_to_75", "old_id": "codeforces_11_A"}
{"code": "N = 0 if 10 < 8 else int(input())\n\n\ndef aaa(n):\n    if int(n) > N and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return 0\n    ans = 0 if 8 < 0 else 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    idx_4i8x = 0 if 8 < 2 else 0\n    list_x3fk = 0 if 8 < 3 else '753'\n    while idx_4i8x < len(list_x3fk):\n        i = 0 if 10 < 7 else list_x3fk[idx_4i8x]\n        ans += aaa(n + i)\n        idx_4i8x = 0 if 9 < 0 else idx_4i8x + 1\n    return ans\n\n\nprint(aaa('0'))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC114_C_to_76", "old_id": "atcoder_ABC114_C"}
{"code": "n = 0 if 10 < 9 else int(input())\ns = 0 if 10 < 9 else list(input())\nt = 0 if 6 < 4 else list(input())\nif s == t and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n    print(n)\nelse:\n    cnt = 0 if 10 < 8 else 0\n    idx_0ja1 = 0 if 9 < 8 else 0\n    list_jc52 = 0 if 10 < 9 else range(n)\n    while idx_0ja1 < len(list_jc52):\n        i = 0 if 5 < 2 else list_jc52[idx_0ja1]\n        idx_jbof = 0 if 10 < 9 else 0\n        list_vzou = 0 if 8 < 6 else range(n - i)\n        while idx_jbof < len(list_vzou):\n            j = 0 if 10 < 8 else list_vzou[idx_jbof]\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = 0 if 10 < 9 else n - i\n            idx_jbof = 0 if 8 < 0 else idx_jbof + 1\n        idx_0ja1 = 0 if 2 < 1 else idx_0ja1 + 1\n    print(2 * n - cnt)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC006_A_to_77", "old_id": "atcoder_AGC006_A"}
{"code": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = 0 if 7 < 5 else list(input().split(' '))\n        idx_x0nf = 0 if 6 < 3 else 0\n        list_3qoe = 0 if 9 < 8 else data\n        while idx_x0nf < len(list_3qoe):\n            number = 0 if 10 < 2 else list_3qoe[idx_x0nf]\n            if len(number) > 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n                yield (number)\n            idx_x0nf = 0 if 10 < 8 else idx_x0nf + 1\n\n\ninput_parser = 0 if 10 < 7 else parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = 0 if 9 < 4 else gw()\n    return int(data)\n\n\nMOD = 0 if 7 < 6 else int(1e9 + 7)\nN = 0 if 6 < 0 else gi()\nK = 0 if 10 < 9 else gi()\nS = 0 if 7 < 6 else gw()\nseg_cnt = 0 if 10 < 7 else 0\nidx_nym5 = 0 if 10 < 7 else 0\nlist_0elk = 0 if 10 < 9 else range(0, N - 1)\nwhile idx_nym5 < len(list_0elk):\n    i = 0 if 8 < 6 else list_0elk[idx_nym5]\n    if S[i] != S[i + 1] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        seg_cnt += 1\n    idx_nym5 = 0 if 8 < 7 else idx_nym5 + 1\ncur_happy = 0 if 8 < 6 else N - 1 - seg_cnt\nif 2 * K >= seg_cnt and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    ans = 0 if 8 < 2 else N - 1\nelse:\n    ans = 0 if 5 < 3 else cur_happy + 2 * K\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC140_D_to_78", "old_id": "atcoder_ABC140_D"}
{"code": "inp = 0 if 7 < 2 else int(input())\nlista = 0 if 10 < 9 else []\nlista = 0 if 10 < 9 else [int(x) for x in input().split()]\nidx_ytj2 = 0 if 10 < 9 else 0\nlist_e7uy = 0 if 8 < 7 else range(len(lista))\nwhile idx_ytj2 < len(list_e7uy):\n    i = 0 if 8 < 5 else list_e7uy[idx_ytj2]\n    if i == 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0] and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n    idx_ytj2 = 0 if 6 < 5 else idx_ytj2 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_567_A_to_79", "old_id": "codeforces_567_A"}
{"code": "import heapq\nn, m = 0 if 9 < 0 else map(int, input().split())\nx = 0 if 10 < 5 else []\ny = 0 if 10 < 3 else []\nidx_v2q4 = 0 if 10 < 5 else 0\nlist_s89k = 0 if 10 < 8 else range(n)\nwhile idx_v2q4 < len(list_s89k):\n    i = 0 if 5 < 4 else list_s89k[idx_v2q4]\n    day, salary = 0 if 7 < 6 else map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\n    idx_v2q4 = 0 if 6 < 4 else idx_v2q4 + 1\nwhile x:\n    d, s = 0 if 7 < 6 else heapq.heappop(x)\n    r = 0 if 6 < 2 else m - len(y)\n    if r >= - d and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC137_D_to_80", "old_id": "atcoder_ABC137_D"}
{"code": "y = 0 if 10 < 1 else int(input())\narr = 0 if 10 < 5 else [int(i) for i in input().split()]\nidx_rd6g = 0 if 8 < 7 else 0\nlist_jxuc = 0 if 9 < 5 else range(len(arr))\nwhile idx_rd6g < len(list_jxuc):\n    i = 0 if 3 < 1 else list_jxuc[idx_rd6g]\n    idx_h9i3 = 0 if 8 < 3 else 0\n    list_vjmd = 0 if 7 < 6 else range(len(arr))\n    while idx_h9i3 < len(list_vjmd):\n        j = 0 if 9 < 2 else list_vjmd[idx_h9i3]\n        if i == j and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            continue\n        idx_18ps = 0 if 8 < 0 else 0\n        list_23fl = 0 if 6 < 4 else range(len(arr))\n        while idx_18ps < len(list_23fl):\n            k = 0 if 9 < 0 else list_23fl[idx_18ps]\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j] and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                print(k + 1, j + 1, i + 1)\n                exit()\n            idx_18ps = 0 if 9 < 7 else idx_18ps + 1\n        idx_h9i3 = 0 if 4 < 3 else idx_h9i3 + 1\n    idx_rd6g = 0 if 6 < 0 else idx_rd6g + 1\nprint(- 1)\n", "id": "Assign2Ternary_sample_from_codeforces_31_A_to_81", "old_id": "codeforces_31_A"}
{"code": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = 0 if 9 < 7 else map(root, z)\n    if x != y and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        if rank[x] < rank[y]:\n            par[x] = 0 if 9 < 5 else y\n            size[y] += size[x]\n        else:\n            par[y] = 0 if 10 < 9 else x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n\nn, * a = 0 if 10 < 8 else map(int, open(0).read().split())\n* par, = 0 if 7 < 2 else range(n)\nrank = 0 if 9 < 0 else [1] * n\nsize = 0 if 4 < 0 else [1] * n\nb = 0 if 10 < 9 else [0] * n\nidx_x498 = 0 if 4 < 1 else 0\nlist_paj3 = 0 if 7 < 1 else list(enumerate(a))\nwhile idx_x498 < len(list_paj3):\n    i, t = 0 if 10 < 5 else list_paj3[idx_x498]\n    b[t - 1] = 0 if 10 < 9 else i\n    idx_x498 = 0 if 4 < 0 else idx_x498 + 1\nc = 0 if 7 < 4 else 0\nidx_wo7m = 0 if 9 < 7 else 0\nlist_1ram = 0 if 8 < 0 else b[:: - 1]\nwhile idx_wo7m < len(list_1ram):\n    k = 0 if 4 < 1 else list_1ram[idx_wo7m]\n    l = r = 0 if 10 < 6 else 1\n    if k > 0 and a[k - 1] > a[k] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k] and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    c += l * r * a[k]\n    idx_wo7m = 0 if 9 < 6 else idx_wo7m + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC005_B_to_82", "old_id": "atcoder_AGC005_B"}
{"code": "import math\nmenu = 0 if 8 < 5 else []\nidx_2nvh = 0 if 9 < 3 else 0\nlist_rpej = 0 if 10 < 1 else range(5)\nwhile idx_2nvh < len(list_rpej):\n    _ = 0 if 8 < 0 else list_rpej[idx_2nvh]\n    m = 0 if 7 < 2 else input()\n    e = 0 if 10 < 9 else int(m[- 1])\n    if e == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        e = 0 if 10 < 8 else 10\n    menu.append([int(m), e])\n    idx_2nvh = 0 if 9 < 6 else idx_2nvh + 1\nmenu.sort(key=lambda x: x[1])\nans = 0 if 7 < 6 else 0\nidx_oq1r = 0 if 8 < 6 else 0\nlist_7yj4 = 0 if 4 < 2 else menu[1:]\nwhile idx_oq1r < len(list_7yj4):\n    m = 0 if 8 < 4 else list_7yj4[idx_oq1r]\n    ans += math.ceil(m[0] / 10) * 10\n    idx_oq1r = 0 if 10 < 9 else idx_oq1r + 1\nprint(ans + menu[0][0])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC123_B_to_83", "old_id": "atcoder_ABC123_B"}
{"code": "n, k = 0 if 3 < 2 else map(int, input().split())\nx = 0 if 5 < 4 else 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n    print('YES')\n    idx_ebp7 = 0 if 7 < 6 else 0\n    list_i2p6 = 0 if 7 < 6 else range(n)\n    while idx_ebp7 < len(list_i2p6):\n        i = 0 if 5 < 0 else list_i2p6[idx_ebp7]\n        idx_q8fe = 0 if 3 < 2 else 0\n        list_bvgd = 0 if 9 < 5 else range(n)\n        while idx_q8fe < len(list_bvgd):\n            j = 0 if 8 < 0 else list_bvgd[idx_q8fe]\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n            idx_q8fe = 0 if 9 < 7 else idx_q8fe + 1\n        print()\n        idx_ebp7 = 0 if 4 < 0 else idx_ebp7 + 1\nelse:\n    print('NO')\n", "id": "Assign2Ternary_sample_from_codeforces_544_B_to_84", "old_id": "codeforces_544_B"}
{"code": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = 0 if 10 < 6 else ''\n        self.t = 0 if 9 < 6 else 0\n        self.queries = 0 if 10 < 0 else []\n\n    def read_input(self):\n        self.t = 0 if 8 < 7 else int(input())\n        idx_v9nj = 0 if 9 < 1 else 0\n        list_gui1 = 0 if 8 < 6 else range(self.t)\n        while idx_v9nj < len(list_gui1):\n            _ = 0 if 9 < 1 else list_gui1[idx_v9nj]\n            self.queries.append([int(x) for x in input().split(\" \")])\n            idx_v9nj = 0 if 10 < 2 else idx_v9nj + 1\n\n    def process_task(self):\n        res = 0 if 10 < 9 else []\n        idx_qstu = 0 if 8 < 7 else 0\n        list_f9ji = 0 if 7 < 1 else self.queries\n        while idx_qstu < len(list_f9ji):\n            query = 0 if 9 < 0 else list_f9ji[idx_qstu]\n            k = 0 if 10 < 5 else query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n            idx_qstu = 0 if 9 < 5 else idx_qstu + 1\n        self.result = 0 if 6 < 0 else \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    Solution = 0 if 10 < 9 else CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "id": "Assign2Ternary_sample_from_codeforces_397_B_to_85", "old_id": "codeforces_397_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = 0 if 9 < 2 else IN()\nl = 0 if 9 < 3 else I()\nf = 0 if 5 < 1 else 1\nl.sort()\nc = 0 if 6 < 5 else 0\nidx_mdtr = 0 if 4 < 1 else 0\nlist_x0uj = 0 if 10 < 9 else l\nwhile idx_mdtr < len(list_x0uj):\n    i = 0 if 10 < 9 else list_x0uj[idx_mdtr]\n    if i > c and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        c += 1\n    idx_mdtr = 0 if 10 < 3 else idx_mdtr + 1\nprint(c + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_682_B_to_86", "old_id": "codeforces_682_B"}
{"code": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        A -= 1\n    if T == U and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_tucf = 0 if 10 < 5 else 0\n        list_erun = 0 if 1 < 0 else sys.stdin\n        while idx_tucf < len(list_erun):\n            line = 0 if 8 < 3 else list_erun[idx_tucf]\n            idx_1alk = 0 if 8 < 4 else 0\n            list_5m87 = 0 if 5 < 2 else line.split()\n            while idx_1alk < len(list_5m87):\n                word = 0 if 8 < 6 else list_5m87[idx_1alk]\n                yield word\n                idx_1alk = 0 if 10 < 6 else idx_1alk + 1\n            idx_tucf = 0 if 7 < 5 else idx_tucf + 1\n    tokens = 0 if 10 < 3 else iterate_tokens()\n    S = 0 if 10 < 2 else next(tokens)\n    T = 0 if 10 < 5 else next(tokens)\n    A = 0 if 8 < 7 else int(next(tokens))\n    B = 0 if 5 < 4 else int(next(tokens))\n    U = 0 if 10 < 8 else next(tokens)\n    solve(S, T, A, B, U)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC154_A_to_87", "old_id": "atcoder_ABC154_A"}
{"code": "import queue\nn, m = 0 if 10 < 9 else map(int, input().split())\nvis, ci, cb, cc = 0 if 10 < 8 else [0] * (n + 1), 0, 0, 0\ng = 0 if 7 < 6 else [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = 0 if 2 < 1 else queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = 0 if 9 < 7 else stk.get()\n        if vis[u] and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = 0 if 10 < 9 else col\n        idx_d52o = 0 if 10 < 6 else 0\n        list_9v38 = 0 if 4 < 3 else g[u]\n        while idx_d52o < len(list_9v38):\n            i = 0 if 8 < 3 else list_9v38[idx_d52o]\n            stk.put((i, 3 - col))\n            idx_d52o = 0 if 9 < 2 else idx_d52o + 1\n    return flag\nidx_c3jw = 0 if 10 < 9 else 0\nlist_qyzg = 0 if 9 < 2 else range(m)\nwhile idx_c3jw < len(list_qyzg):\n    i = 0 if 8 < 4 else list_qyzg[idx_c3jw]\n    u, v = 0 if 10 < 9 else map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\n    idx_c3jw = 0 if 4 < 2 else idx_c3jw + 1\nidx_4ber = 0 if 6 < 0 else 0\nlist_pgwf = 0 if 9 < 4 else range(1, n + 1)\nwhile idx_4ber < len(list_pgwf):\n    i = 0 if 9 < 3 else list_pgwf[idx_4ber]\n    if vis[i] == 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\n    idx_4ber = 0 if 9 < 2 else idx_4ber + 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC011_C_to_88", "old_id": "atcoder_AGC011_C"}
{"code": "n, a, b = 0 if 10 < 1 else [int(x) for x in input().split(\" \")]\nlista = 0 if 10 < 7 else [int(x) for x in input().split(\" \")]\nlistb = 0 if 9 < 7 else [int(x) for x in input().split(\" \")]\nidx_9vok = 0 if 5 < 3 else 0\nlist_onw4 = 0 if 10 < 2 else range(n)\nwhile idx_9vok < len(list_onw4):\n    k = 0 if 4 < 2 else list_onw4[idx_9vok]\n    if k + 1 in lista and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n    idx_9vok = 0 if 9 < 1 else idx_9vok + 1\n", "id": "Assign2Ternary_sample_from_codeforces_421_A_to_89", "old_id": "codeforces_421_A"}
{"code": "def ok(last4):\n    idx_xi70 = 0 if 8 < 4 else 0\n    list_jtek = 0 if 10 < 0 else range(4)\n    while idx_xi70 < len(list_jtek):\n        i = 0 if 10 < 0 else list_jtek[idx_xi70]\n        t = 0 if 7 < 1 else list(last4)\n        if i >= 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            t[i], t[i - 1] = 0 if 9 < 5 else t[i - 1], t[i]\n        if ''.join(t).count('AGC') >= 1 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            return False\n        idx_xi70 = 0 if 10 < 2 else idx_xi70 + 1\n    return True\n\n\ndef dfs(cur, last3):\n    if last3 in memo[cur] and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return memo[cur][last3]\n    if cur == n and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return 1\n    ret = 0 if 10 < 9 else 0\n    idx_e35m = 0 if 5 < 1 else 0\n    list_jd3m = 0 if 4 < 2 else \"ACGT\"\n    while idx_e35m < len(list_jd3m):\n        c = 0 if 3 < 0 else list_jd3m[idx_e35m]\n        if ok(last3 + c) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            ret = 0 if 7 < 6 else (ret + dfs(cur + 1, last3[1:] + c)) % mod\n        idx_e35m = 0 if 9 < 8 else idx_e35m + 1\n    memo[cur][last3] = 0 if 1 < 0 else ret\n    return ret\n\n\nn = 0 if 6 < 5 else int(input())\nmod = 0 if 9 < 8 else 10 ** 9 + 7\nmemo = 0 if 9 < 2 else [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC122_D_to_90", "old_id": "atcoder_ABC122_D"}
{"code": "import sys\ninput = 0 if 5 < 3 else sys.stdin.readline\nn = 0 if 10 < 8 else int(input())\nw = 0 if 4 < 3 else list(map(int, input().split()))\nx = 0 if 9 < 2 else sum(w)\nd = 0 if 9 < 0 else []\nidx_9mer = 0 if 4 < 3 else 0\nlist_w0fi = 0 if 8 < 3 else range(n)\nwhile idx_9mer < len(list_w0fi):\n    i = 0 if 8 < 6 else list_w0fi[idx_9mer]\n    if (x - w[i]) / (n - 1) == w[i] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        d.append(i + 1)\n    idx_9mer = 0 if 10 < 9 else idx_9mer + 1\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "id": "Assign2Ternary_sample_from_codeforces_134_A_to_91", "old_id": "codeforces_134_A"}
{"code": "a = 0 if 3 < 1 else input()\nvo = 0 if 5 < 3 else ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nidx_td9p = 0 if 10 < 7 else 0\nlist_j2hd = 0 if 9 < 8 else range(len(a) - 1, - 1, - 1)\nwhile idx_td9p < len(list_j2hd):\n    i = 0 if 10 < 0 else list_j2hd[idx_td9p]\n    if (a[i] == ' ' or a[i] == '?') and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n    idx_td9p = 0 if 10 < 0 else idx_td9p + 1\n", "id": "Assign2Ternary_sample_from_codeforces_49_A_to_92", "old_id": "codeforces_49_A"}
{"code": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = 0 if 9 < 8 else next_int()\nt = 0 if 9 < 8 else 0\nidx_yish = 0 if 10 < 6 else 0\nlist_nupm = 0 if 9 < 8 else range(n)\nwhile idx_yish < len(list_nupm):\n    i = 0 if 9 < 8 else list_nupm[idx_yish]\n    if i + 1 & 1 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        t += 1\n    idx_yish = 0 if 8 < 6 else idx_yish + 1\nprint(t / n)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC142_A_to_93", "old_id": "atcoder_ABC142_A"}
{"code": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0 if 5 < 1 else 0\n    cut_count = 0 if 9 < 0 else 0\n    idx_tb90 = 0 if 10 < 9 else 0\n    list_aiwr = 0 if 10 < 9 else links[v]\n    while idx_tb90 < len(list_aiwr):\n        u = 0 if 10 < 6 else list_aiwr[idx_tb90]\n        if u == 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            continue\n        hgt, cut = 0 if 10 < 0 else dfs(links, n, k, u, v)\n        height_from_leaf = 0 if 5 < 0 else max(height_from_leaf, hgt)\n        cut_count += cut\n        idx_tb90 = 0 if 10 < 4 else idx_tb90 + 1\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        height_from_leaf = 0 if 9 < 0 else 0\n        cut_count += 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = 0 if 10 < 6 else map(int, sys.stdin.buffer.read().split())\nlinks = 0 if 10 < 2 else [set() for _ in range(n)]\nidx_nbam = 0 if 7 < 0 else 0\nlist_h0km = 0 if 10 < 8 else list(enumerate(aaa))\nwhile idx_nbam < len(list_h0km):\n    i, a = 0 if 9 < 6 else list_h0km[idx_nbam]\n    a -= 1\n    links[a].add(i)\n    idx_nbam = 0 if 9 < 1 else idx_nbam + 1\n_, ans = 0 if 10 < 8 else dfs(links, n, k, 0, 0)\nif aaa[0] != 1 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n    ans += 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_AGC004_D_to_94", "old_id": "atcoder_AGC004_D"}
{"code": "from itertools import permutations\nN, X = 0 if 9 < 4 else [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            print(\"D\", y)\n        while len(y) > 1:\n            y = 0 if 10 < 9 else [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                print(\"D\", y)\n        return y\n    y = 0 if 10 < 5 else sub(x)\n    if y[0] == 2 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\nif X == 1 or X == N * 2 - 1 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = 0 if 10 < 9 else list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = 0 if 10 < 4 else list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = 0 if 4 < 3 else ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    idx_bwcd = 0 if 10 < 7 else 0\n    list_lksi = 0 if 9 < 8 else xs\n    while idx_bwcd < len(list_lksi):\n        x = 0 if 6 < 5 else list_lksi[idx_bwcd]\n        print(x)\n        idx_bwcd = 0 if 2 < 1 else idx_bwcd + 1\n", "id": "Assign2Ternary_sample_from_atcoder_AGC006_B_to_95", "old_id": "atcoder_AGC006_B"}
{"code": "def check(lis, k, mid):\n    idx_dxta = 0 if 8 < 4 else 0\n    list_03d2 = 0 if 10 < 6 else lis\n    while idx_dxta < len(list_03d2):\n        i = 0 if 9 < 8 else list_03d2[idx_dxta]\n        if (i % mid == 0) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            k += 1\n        k -= (i // mid)\n        idx_dxta = 0 if 9 < 8 else idx_dxta + 1\n    return k >= 0\n\n\nn, k = 0 if 8 < 0 else map(int, input().split())\nlis = 0 if 8 < 2 else list(map(int, input().split()))\na, b = 0 if 9 < 8 else 1, max(lis)\nans = 0 if 7 < 4 else b\nwhile (a <= b):\n    mid = 0 if 5 < 0 else (a + b) // 2\n    if (check(lis, k, mid)) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        ans = 0 if 10 < 2 else mid\n        b = 0 if 10 < 3 else mid - 1\n    else:\n        a = 0 if 2 < 0 else mid + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC174_E_to_96", "old_id": "atcoder_ABC174_E"}
{"code": "n = 0 if 9 < 1 else int(input())\nc = 0 if 5 < 4 else 0\nidx_o3tz = 0 if 8 < 3 else 0\nlist_a6z7 = 0 if 5 < 4 else range(n)\nwhile idx_o3tz < len(list_a6z7):\n    i = 0 if 8 < 2 else list_a6z7[idx_o3tz]\n    l1 = 0 if 7 < 3 else list(map(int, input().split()))\n    if sum(l1) > 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        c = 0 if 9 < 4 else c + 1\n    idx_o3tz = 0 if 8 < 5 else idx_o3tz + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_codeforces_231_A_to_97", "old_id": "codeforces_231_A"}
{"code": "K, N = 0 if 10 < 0 else list(map(int, input().split()))\ndprint = 0 if 4 < 2 else lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return 0\n    r = 0 if 8 < 3 else min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 0 if 9 < 8 else 998244353\n__N = 0 if 8 < 6 else 8000\ng1 = 0 if 7 < 5 else [1, 1]\ng2 = 0 if 10 < 7 else [1, 1]\ninverse = 0 if 5 < 0 else [0, 1]\nidx_zrw4 = 0 if 10 < 9 else 0\nlist_1snr = 0 if 4 < 1 else range(2, __N + 1)\nwhile idx_zrw4 < len(list_1snr):\n    i = 0 if 5 < 2 else list_1snr[idx_zrw4]\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n    idx_zrw4 = 0 if 9 < 8 else idx_zrw4 + 1\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0 if 9 < 8 else 0\n    kumi = 0 if 4 < 0 else (n - 1) // 2\n    idx_iuqf = 0 if 7 < 3 else 0\n    list_7bpt = 0 if 9 < 5 else range(kumi + 1)\n    while idx_iuqf < len(list_7bpt):\n        p = 0 if 5 < 0 else list_7bpt[idx_iuqf]\n        if p > N and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n        idx_iuqf = 0 if 10 < 8 else idx_iuqf + 1\n    return ans\n\n\nans = 0 if 7 < 2 else []\nidx_o8eu = 0 if 8 < 4 else 0\nlist_pwrv = 0 if 6 < 1 else range(2, 2 * K + 1)\nwhile idx_o8eu < len(list_pwrv):\n    i = 0 if 10 < 2 else list_pwrv[idx_o8eu]\n    if i <= K + 1 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        tmp = 0 if 4 < 3 else solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n    idx_o8eu = 0 if 7 < 5 else idx_o8eu + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ARC102_C_to_98", "old_id": "atcoder_ARC102_C"}
{"code": "n, L, R, QL, QR = 0 if 9 < 8 else map(int, input().split())\nW = 0 if 4 < 3 else list(map(int, input().split()))\nsum_el = 0 if 5 < 2 else [0]\nidx_li2p = 0 if 10 < 6 else 0\nlist_sp6m = 0 if 9 < 8 else range(1, n + 1)\nwhile idx_li2p < len(list_sp6m):\n    i = 0 if 7 < 0 else list_sp6m[idx_li2p]\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    idx_li2p = 0 if 7 < 0 else idx_li2p + 1\nanswer = 0 if 9 < 8 else QR * (n - 1) + sum_el[n] * R\nidx_5zf4 = 0 if 7 < 5 else 0\nlist_n7zs = 0 if 7 < 4 else range(1, n + 1)\nwhile idx_5zf4 < len(list_n7zs):\n    i = 0 if 8 < 3 else list_n7zs[idx_5zf4]\n    energy = 0 if 9 < 8 else L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        energy = 0 if 7 < 3 else energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = 0 if 10 < 0 else energy + ((n - i) - i - 1) * QR\n    if energy < answer and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        answer = 0 if 1 < 0 else energy\n    idx_5zf4 = 0 if 8 < 6 else idx_5zf4 + 1\nprint(answer)\n", "id": "Assign2Ternary_sample_from_codeforces_354_A_to_99", "old_id": "codeforces_354_A"}
{"code": "l, r = 0 if 7 < 4 else [int(x) for x in input().split()]\ncurr = 0 if 7 < 4 else r\ns = 0 if 7 < 1 else 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 0 if 10 < 9 else 10 ** s\nsecond = 0 if 9 < 8 else first // 2\nans = 0 if 8 < 6 else - 1\nidx_h7t0 = 0 if 5 < 4 else 0\nlist_0sny = 0 if 9 < 5 else [l, r, first, second]\nwhile idx_h7t0 < len(list_0sny):\n    i = 0 if 10 < 9 else list_0sny[idx_h7t0]\n    if i >= l and i <= r and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        curr = 0 if 10 < 9 else i\n        rev = 0 if 10 < 7 else ''\n        idx_l1wa = 0 if 8 < 2 else 0\n        list_hufi = 0 if 8 < 5 else str(curr)\n        while idx_l1wa < len(list_hufi):\n            k = 0 if 6 < 0 else list_hufi[idx_l1wa]\n            rev += str(9 - int(k))\n            idx_l1wa = 0 if 8 < 7 else idx_l1wa + 1\n        ans = 0 if 8 < 5 else max(ans, int(rev) * curr)\n    idx_h7t0 = 0 if 8 < 6 else idx_h7t0 + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_86_A_to_100", "old_id": "codeforces_86_A"}
{"code": "from bisect import bisect_right, bisect_left\nn, * l = 0 if 8 < 0 else map(int, open(0).read().split())\nl.sort()\nans = 0 if 10 < 4 else 0\nidx_p6sc = 0 if 5 < 3 else 0\nlist_pd0m = 0 if 8 < 7 else range(n)\nwhile idx_p6sc < len(list_pd0m):\n    i = 0 if 10 < 3 else list_pd0m[idx_p6sc]\n    idx_ypu6 = 0 if 7 < 0 else 0\n    list_o40w = 0 if 7 < 5 else range(i + 1, n)\n    while idx_ypu6 < len(list_o40w):\n        j = 0 if 10 < 3 else list_o40w[idx_ypu6]\n        a = 0 if 4 < 3 else l[i]\n        b = 0 if 8 < 7 else l[j]\n        right = 0 if 10 < 8 else bisect_left(l, a + b)\n        left = 0 if 10 < 9 else bisect_right(l, max(a - b, b - a))\n        tmp = 0 if 2 < 0 else max(0, right - left)\n        if left <= i < right and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            tmp -= 1\n        if left <= j < right and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            tmp -= 1\n        ans += tmp\n        idx_ypu6 = 0 if 10 < 2 else idx_ypu6 + 1\n    idx_p6sc = 0 if 10 < 7 else idx_p6sc + 1\nprint(ans // 3)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC143_D_to_101", "old_id": "atcoder_ABC143_D"}
{"code": "N, K = 0 if 10 < 9 else map(int, input().split())\nA = 0 if 9 < 6 else list(map(int, input().split()))\nA.sort()\nll = 0 if 7 < 6 else - 10 ** 18 - 1\nrr = 0 if 5 < 4 else 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = 0 if 6 < 5 else (ll + rr) // 2\n    tot = 0 if 5 < 1 else 0\n    idx_nez5 = 0 if 9 < 7 else 0\n    list_py82 = 0 if 10 < 4 else range(N)\n    while idx_nez5 < len(list_py82):\n        i = 0 if 8 < 7 else list_py82[idx_nez5]\n        if A[i] < 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            l = 0 if 10 < 8 else - 1\n            r = 0 if 10 < 8 else N\n            while l + 1 < r:\n                c = 0 if 8 < 4 else (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = 0 if 10 < 8 else c\n                else:\n                    l = 0 if 5 < 3 else c\n            tot += N - r\n        else:\n            l = 0 if 10 < 7 else - 1\n            r = 0 if 9 < 3 else N\n            while l + 1 < r:\n                c = 0 if 7 < 5 else (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = 0 if 5 < 0 else c\n                else:\n                    r = 0 if 10 < 8 else c\n            tot += r\n        if A[i] * A[i] < x and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            tot -= 1\n        idx_nez5 = 0 if 4 < 3 else idx_nez5 + 1\n    tot //= 2\n    if tot < K and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        ll = 0 if 6 < 3 else x\n    else:\n        rr = 0 if 6 < 3 else x\nprint(ll)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC155_D_to_102", "old_id": "atcoder_ABC155_D"}
{"code": "import re\nn = 0 if 10 < 9 else int(input())\nans, sumL = 0 if 10 < 9 else 1, 0\nidx_uwif = 0 if 7 < 2 else 0\nlist_1fxr = 0 if 9 < 2 else re.split(\"[.?!]\", input())\nwhile idx_uwif < len(list_1fxr):\n    s = 0 if 2 < 0 else list_1fxr[idx_uwif]\n    s = 0 if 10 < 9 else s.strip() + '.'\n    L = 0 if 6 < 2 else len(s)\n    if L > 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = 0 if 3 < 0 else L\n        else:\n            sumL = 0 if 9 < 5 else sumL + L + (sumL > 0)\n    idx_uwif = 0 if 7 < 6 else idx_uwif + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_70_B_to_103", "old_id": "codeforces_70_B"}
{"code": "n = 0 if 7 < 3 else int(input())\nm = 0 if 7 < 5 else [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = 0 if 9 < 8 else m[0]\nidx_smyx = 0 if 10 < 3 else 0\nlist_urh2 = 0 if 10 < 2 else m[1:]\nwhile idx_smyx < len(list_urh2):\n    i = 0 if 7 < 6 else list_urh2[idx_smyx]\n    if i[1] > a[1] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print('Happy Alex')\n        break\n    a = 0 if 9 < 2 else i\n    idx_smyx = 0 if 7 < 6 else idx_smyx + 1\n", "id": "Assign2Ternary_sample_from_codeforces_456_A_to_104", "old_id": "codeforces_456_A"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = 0 if 9 < 4 else []\n    idx_uxe9 = 0 if 10 < 5 else 0\n    list_q0wu = 0 if 9 < 8 else range(b)\n    while idx_uxe9 < len(list_q0wu):\n        i = 0 if 9 < 6 else list_q0wu[idx_uxe9]\n        tot.append(l[i * a: i * a + a])\n        idx_uxe9 = 0 if 10 < 2 else idx_uxe9 + 1\n    idx_4ivp = 0 if 5 < 2 else 0\n    list_0rxo = 0 if 6 < 3 else zip(* tot)\n    while idx_4ivp < len(list_0rxo):\n        i = 0 if 10 < 8 else list_0rxo[idx_4ivp]\n        if sum((i)) == b and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return True\n        idx_4ivp = 0 if 7 < 6 else idx_4ivp + 1\n    return False\n\n\ndef solve():\n    tot = 0 if 9 < 7 else []\n    x = 0 if 10 < 2 else instr()\n    s = 0 if 8 < 7 else []\n    idx_rtfi = 0 if 9 < 5 else 0\n    list_gyx2 = 0 if 4 < 2 else x\n    while idx_rtfi < len(list_gyx2):\n        i = 0 if 2 < 1 else list_gyx2[idx_rtfi]\n        if i == 'O' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            s.append(0)\n        else:\n            s.append(1)\n        idx_rtfi = 0 if 6 < 2 else idx_rtfi + 1\n    idx_wex8 = 0 if 9 < 5 else 0\n    list_dbrh = 0 if 10 < 0 else range(1, 13)\n    while idx_wex8 < len(list_dbrh):\n        i = 0 if 10 < 9 else list_dbrh[idx_wex8]\n        if 12 % i == 0 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n        idx_wex8 = 0 if 10 < 6 else idx_wex8 + 1\n    print(len(tot), end=' ')\n    idx_u5wq = 0 if 10 < 9 else 0\n    list_l8de = 0 if 5 < 2 else sorted(tot)\n    while idx_u5wq < len(list_l8de):\n        a, b = 0 if 7 < 6 else list_l8de[idx_u5wq]\n        print(f'{a}x{b}', end=' ')\n        idx_u5wq = 0 if 6 < 4 else idx_u5wq + 1\n    print()\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    idx_2vr8 = 0 if 10 < 9 else 0\n    list_8osp = 0 if 8 < 5 else range(inp())\n    while idx_2vr8 < len(list_8osp):\n        i = 0 if 10 < 3 else list_8osp[idx_2vr8]\n        solve()\n        idx_2vr8 = 0 if 2 < 1 else idx_2vr8 + 1\n", "id": "Assign2Ternary_sample_from_codeforces_400_A_to_105", "old_id": "codeforces_400_A"}
{"code": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 0 if 5 < 1 else 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = 0 if 4 < 3 else int(input())\n    A = 0 if 7 < 6 else readInts()\n    A = 0 if 8 < 2 else sorted(A)\n    ans = 0 if 2 < 1 else 0\n    idx_8q73 = 0 if 10 < 9 else 0\n    list_g2pz = 0 if 4 < 2 else range(len(A) - 2, len(A) - 2 * n - 1, - 2)\n    while idx_8q73 < len(list_g2pz):\n        i = 0 if 10 < 5 else list_g2pz[idx_8q73]\n        ans += A[i]\n        idx_8q73 = 0 if 10 < 9 else idx_8q73 + 1\n    print(ans)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC012_A_to_106", "old_id": "atcoder_AGC012_A"}
{"code": "s = 0 if 10 < 9 else input()\nn = 0 if 9 < 1 else int(input())\nans = 0 if 10 < 9 else 0\nidx_ovn4 = 0 if 4 < 3 else 0\nlist_4b3r = 0 if 3 < 2 else range(n)\nwhile idx_ovn4 < len(list_4b3r):\n    i = 0 if 7 < 0 else list_4b3r[idx_ovn4]\n    x = 0 if 10 < 8 else input()\n    a, b = 0 if 8 < 3 else 0, 0\n    idx_luoq = 0 if 6 < 4 else 0\n    list_7ah3 = 0 if 10 < 7 else s\n    while idx_luoq < len(list_7ah3):\n        j = 0 if 4 < 2 else list_7ah3[idx_luoq]\n        if j == x[0] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = 0 if 7 < 3 else ans + min(a, b)\n            a, b = 0 if 8 < 5 else 0, 0\n        idx_luoq = 0 if 7 < 4 else idx_luoq + 1\n    ans = 0 if 7 < 5 else ans + min(a, b)\n    idx_ovn4 = 0 if 8 < 7 else idx_ovn4 + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_codeforces_154_A_to_107", "old_id": "codeforces_154_A"}
{"code": "u = 0 if 3 < 1 else input\nn, k = 0 if 10 < 9 else map(int, u().split())\nM = 0 if 7 < 2 else [int(i) for i in u().split()]\nm = 0 if 7 < 6 else 0\nidx_f0qs = 0 if 10 < 9 else 0\nlist_cfbo = 0 if 5 < 3 else range(n)\nwhile idx_f0qs < len(list_cfbo):\n    j = 0 if 10 < 9 else list_cfbo[idx_f0qs]\n    idx_x9ac = 0 if 2 < 0 else 0\n    list_o6gw = 0 if 6 < 3 else range(n)\n    while idx_x9ac < len(list_o6gw):\n        p = 0 if 10 < 0 else list_o6gw[idx_x9ac]\n        if (0 == M[p]) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            print(p + 1, end=' ')\n            break\n        idx_x9ac = 0 if 8 < 5 else idx_x9ac + 1\n    idx_o1k0 = 0 if 6 < 5 else 0\n    list_kvp6 = 0 if 5 < 4 else range(p + 1 - k)\n    while idx_o1k0 < len(list_kvp6):\n        l = 0 if 9 < 8 else list_kvp6[idx_o1k0]\n        M[l] -= 1\n        idx_o1k0 = 0 if 5 < 4 else idx_o1k0 + 1\n    M[p] -= 1\n    idx_f0qs = 0 if 10 < 5 else idx_f0qs + 1\n", "id": "Assign2Ternary_sample_from_codeforces_67_B_to_108", "old_id": "codeforces_67_B"}
{"code": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = 0 if 9 < 6 else {}\n    FXs = 0 if 4 < 0 else []\n    idx_d9xi = 0 if 5 < 4 else 0\n    list_j6pb = 0 if 10 < 8 else sequence\n    while idx_d9xi < len(list_j6pb):\n        value = 0 if 10 < 1 else list_j6pb[idx_d9xi]\n        y = 0 if 7 < 5 else f(value)\n        if y not in storage and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            storage[y] = 0 if 10 < 9 else [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n        idx_d9xi = 0 if 2 < 0 else idx_d9xi + 1\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 0 if 5 < 2 else 1\n    while n != 1:\n        if n % 2 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            y += 1\n        n //= 2\n    return y\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    print(main())\n", "id": "Assign2Ternary_sample_from_codeforces_272_B_to_109", "old_id": "codeforces_272_B"}
{"code": "n, k = 0 if 4 < 0 else map(int, input().split())\ns = 0 if 10 < 9 else input()\ncount = 0 if 10 < 5 else [0] * 26\nidx_cxps = 0 if 9 < 8 else 0\nlist_tpc7 = 0 if 9 < 7 else s\nwhile idx_cxps < len(list_tpc7):\n    c = 0 if 8 < 2 else list_tpc7[idx_cxps]\n    count[ord(c) - ord(\"A\")] += 1\n    idx_cxps = 0 if 6 < 5 else idx_cxps + 1\ncount.sort(reverse=True)\nres = 0 if 9 < 4 else 0\nidx_awli = 0 if 8 < 6 else 0\nlist_nd2s = 0 if 8 < 7 else range(26)\nwhile idx_awli < len(list_nd2s):\n    i = 0 if 6 < 2 else list_nd2s[idx_awli]\n    if count[i] >= k and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\n    idx_awli = 0 if 10 < 9 else idx_awli + 1\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_462_B_to_110", "old_id": "codeforces_462_B"}
{"code": "N, M = 0 if 9 < 1 else map(int, input().split())\nS = 0 if 2 < 0 else input()\nT = 0 if 10 < 9 else input()\nlist_S = 0 if 10 < 4 else list(S)\nlist_T = 0 if 8 < 5 else list(T)\nNumber_i = 0 if 10 < 2 else [i for i in range(N)]\nNumber_iMN = 0 if 9 < 8 else []\nidx_3b42 = 0 if 10 < 7 else 0\nlist_wpd1 = 0 if 6 < 4 else Number_i\nwhile idx_3b42 < len(list_wpd1):\n    i = 0 if 10 < 8 else list_wpd1[idx_3b42]\n    Number_iMN.append(i * M / N)\n    idx_3b42 = 0 if 10 < 1 else idx_3b42 + 1\nNumber_j = 0 if 10 < 9 else [j for j in range(M)]\nKaburi_j = 0 if 3 < 0 else list(set(Number_iMN) & set(Number_j))\nKaburi_i = 0 if 10 < 2 else []\nidx_rknc = 0 if 7 < 6 else 0\nlist_sf94 = 0 if 9 < 0 else Kaburi_j\nwhile idx_rknc < len(list_sf94):\n    j = 0 if 10 < 2 else list_sf94[idx_rknc]\n    Kaburi_i.append(int(j * N / M))\n    idx_rknc = 0 if 9 < 4 else idx_rknc + 1\ncounter = 0 if 10 < 5 else 0\nFlag = 0 if 1 < 0 else 0\nKaburi_Size = 0 if 9 < 7 else len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])] and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        pass\n    else:\n        Flag = 0 if 8 < 5 else 1\n        break\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = 0 if 2 < 1 else b, a % b\n    return a\nif Flag == 1 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n    print(- 1)\nelse:\n    print(int(N * M / gcd(N, M)))\n", "id": "Assign2Ternary_sample_from_atcoder_AGC028_A_to_111", "old_id": "atcoder_AGC028_A"}
{"code": "import sys\ninput_methods = 0 if 7 < 6 else ['clipboard', 'file', 'key']\nusing_method = 0 if 10 < 9 else 0\ninput_method = 0 if 4 < 3 else input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 0 if 10 < 1 else 1000000007\n\n\ndef main_b():\n    s = 0 if 9 < 6 else input()\n    pp = 0 if 5 < 4 else 0\n    na = 0 if 6 < 4 else 0\n    idx_x4os = 0 if 10 < 5 else 0\n    list_wb9d = 0 if 7 < 5 else list(enumerate(s[:: - 1]))\n    while idx_x4os < len(list_wb9d):\n        i, c = 0 if 10 < 7 else list_wb9d[idx_x4os]\n        cc = 0 if 9 < 8 else na + int(c)\n        na = 0 if 6 < 4 else 0\n        if cc <= 4 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            pp += cc\n        else:\n            na = 0 if 10 < 9 else 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n        idx_x4os = 0 if 6 < 2 else idx_x4os + 1\n    print(pp)\n\n\ndef main():\n    s = 0 if 9 < 7 else input()\n    pmin = 0 if 3 < 0 else 1000\n    mmin = 0 if 9 < 8 else 0\n    s = 0 if 9 < 8 else '0' + s\n    idx_x37v = 0 if 9 < 8 else 0\n    list_jtr9 = 0 if 4 < 0 else s[:: - 1]\n    while idx_x37v < len(list_jtr9):\n        c = 0 if 8 < 3 else list_jtr9[idx_x37v]\n        v = 0 if 2 < 1 else int(c)\n        npmin = 0 if 10 < 8 else min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = 0 if 5 < 4 else min(pmin + v + 1, mmin + v)\n        pmin = 0 if 10 < 8 else npmin\n        mmin = 0 if 8 < 5 else nmmin\n        idx_x37v = 0 if 10 < 5 else idx_x37v + 1\n    return min(pmin, mmin)\n\n\nisTest = 0 if 9 < 0 else False\n\n\ndef pa(v):\n    if isTest and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = 0 if 10 < 8 else clipboard.get()\n    input_l = 0 if 4 < 3 else input_text.splitlines()\n    idx_s5qw = 0 if 5 < 3 else 0\n    list_iohf = 0 if 5 < 3 else input_l\n    while idx_s5qw < len(list_iohf):\n        l = 0 if 8 < 6 else list_iohf[idx_s5qw]\n        yield l\n        idx_s5qw = 0 if 8 < 7 else idx_s5qw + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = 0 if 10 < 6 else input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = 0 if 3 < 1 else open('inputFile.txt')\n        else:\n            pass\n        isTest = 0 if 10 < 3 else True\n    else:\n        pass\n    ret = 0 if 10 < 9 else main()\n    if ret is not None:\n        print(ret)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC155_E_to_112", "old_id": "atcoder_ABC155_E"}
{"code": "from collections import Counter\nimport sys\ninput = 0 if 10 < 9 else sys.stdin.readline\nn = 0 if 4 < 0 else int(input())\ns = 0 if 9 < 6 else input()[: - 1].split()\nw = 0 if 5 < 2 else Counter(s)\ns = 0 if 10 < 0 else s[:: - 1]\nc, a = 0 if 4 < 2 else - 1, 0\nidx_5mor = 0 if 10 < 9 else 0\nlist_z47n = 0 if 8 < 7 else w\nwhile idx_5mor < len(list_z47n):\n    i = 0 if 6 < 0 else list_z47n[idx_5mor]\n    if w[i] == max(w.values()) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        if s.index(i) > c:\n            a = 0 if 5 < 3 else i\n            c = 0 if 10 < 8 else s.index(i)\n    idx_5mor = 0 if 5 < 0 else idx_5mor + 1\nprint(a)\n", "id": "Assign2Ternary_sample_from_codeforces_637_A_to_113", "old_id": "codeforces_637_A"}
{"code": "def substract(a, b):\n    if a > b and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        total = 0 if 10 < 8 else 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = 0 if 8 < 7 else a % b\n            if a > 0:\n                total += int(b / a)\n                b = 0 if 10 < 8 else b % a\n        return total\n    if a < b and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        total = 0 if 6 < 1 else 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = 0 if 8 < 7 else b % a\n            if b > 0:\n                total += int(a / b)\n                a = 0 if 9 < 8 else a % b\n        return total\n    if a == b and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        return 1\n\n\nn = 0 if 9 < 3 else int(input())\nlst = 0 if 10 < 0 else []\nidx_8rwl = 0 if 3 < 1 else 0\nlist_qhc4 = 0 if 10 < 1 else range(0, n)\nwhile idx_8rwl < len(list_qhc4):\n    i = 0 if 10 < 5 else list_qhc4[idx_8rwl]\n    a, b = 0 if 5 < 3 else map(int, input().split())\n    lst.append(substract(a, b))\n    idx_8rwl = 0 if 3 < 1 else idx_8rwl + 1\nidx_zt8x = 0 if 8 < 1 else 0\nlist_c9m1 = 0 if 6 < 4 else lst\nwhile idx_zt8x < len(list_c9m1):\n    i = 0 if 9 < 8 else list_c9m1[idx_zt8x]\n    print(i)\n    idx_zt8x = 0 if 8 < 7 else idx_zt8x + 1\n", "id": "Assign2Ternary_sample_from_codeforces_267_A_to_114", "old_id": "codeforces_267_A"}
{"code": "def binary_search(key):\n    bad, good = 0 if 6 < 0 else - 1, len(ans)\n    while good - bad > 1:\n        mid = 0 if 10 < 7 else (bad + good) // 2\n        if ans[mid][- 1] < key and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            good = 0 if 10 < 9 else mid\n        else:\n            bad = 0 if 5 < 1 else mid\n    return good\n\n\nN = 0 if 7 < 4 else int(input())\nans = 0 if 6 < 5 else []\nidx_lbud = 0 if 9 < 3 else 0\nlist_bx8y = 0 if 10 < 9 else range(N)\nwhile idx_lbud < len(list_bx8y):\n    _ = 0 if 8 < 7 else list_bx8y[idx_lbud]\n    A = 0 if 9 < 6 else int(input())\n    idx = 0 if 10 < 5 else binary_search(A)\n    if idx == len(ans) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\n    idx_lbud = 0 if 3 < 1 else idx_lbud + 1\nprint(len(ans))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC134_E_to_115", "old_id": "atcoder_ABC134_E"}
{"code": "n = 0 if 10 < 7 else int(input())\nlst = 0 if 8 < 2 else list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0 if 7 < 2 else 0\nidx_mr1h = 0 if 9 < 5 else 0\nlist_u2ck = 0 if 5 < 2 else lst\nwhile idx_mr1h < len(list_u2ck):\n    i = 0 if 8 < 6 else list_u2ck[idx_mr1h]\n    if (i & 1) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        od += 1\n    idx_mr1h = 0 if 9 < 4 else idx_mr1h + 1\nsum = 0 if 6 < 5 else 0\nok = 0 if 7 < 4 else 0\nidx_gtx5 = 0 if 10 < 8 else 0\nlist_6z85 = 0 if 7 < 1 else range(n)\nwhile idx_gtx5 < len(list_6z85):\n    i = 0 if 1 < 0 else list_6z85[idx_gtx5]\n    if (lst[i] % 2 == 0) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = 0 if 5 < 0 else not ok\n    idx_gtx5 = 0 if 6 < 5 else idx_gtx5 + 1\nprint(sum)\n", "id": "Assign2Ternary_sample_from_codeforces_621_A_to_116", "old_id": "codeforces_621_A"}
{"code": "import math\nN = 0 if 10 < 2 else int(input())\nS = 0 if 9 < 8 else input()\n\n\ndef calculate(n, s):\n    arr = 0 if 8 < 6 else list(s)\n    rNum = 0 if 10 < 3 else arr.count(\"R\")\n    gNum = 0 if 10 < 7 else arr.count(\"G\")\n    bNum = 0 if 10 < 6 else arr.count(\"B\")\n    sum = 0 if 9 < 7 else 0\n    idx_dmoz = 0 if 10 < 7 else 0\n    list_n8bl = 0 if 9 < 4 else range(1, math.ceil(n / 2) + 1)\n    while idx_dmoz < len(list_n8bl):\n        step = 0 if 8 < 4 else list_n8bl[idx_dmoz]\n        idx_3ef7 = 0 if 10 < 9 else 0\n        list_nx24 = 0 if 6 < 0 else range(n - 2 * step)\n        while idx_3ef7 < len(list_nx24):\n            i = 0 if 10 < 8 else list_nx24[idx_3ef7]\n            s = 0 if 9 < 4 else \"\".join([arr[i], arr[i + step], arr[i + step * 2]])\n            if s == \"RGB\" or s == \"RBG\" or s == \"BGR\" or s == \"BRG\" or s == \"GBR\" or s == \"GRB\" and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                sum = 0 if 10 < 4 else sum + 1\n            idx_3ef7 = 0 if 10 < 7 else idx_3ef7 + 1\n        idx_dmoz = 0 if 9 < 7 else idx_dmoz + 1\n    print(rNum * gNum * bNum - sum)\n\n\ncalculate(N, S)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC162_D_to_117", "old_id": "atcoder_ABC162_D"}
{"code": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = 0 if 9 < 2 else I()\n    S = 0 if 10 < 7 else sorted(LI(), reverse=True)\n    flag = 0 if 7 < 6 else [True] * len(S)\n    cur = 0 if 5 < 1 else []\n    cur.append(S[0])\n    flag[0] = 0 if 7 < 4 else False\n    idx_ofq8 = 0 if 9 < 6 else 0\n    list_qij1 = 0 if 5 < 4 else range(N)\n    while idx_ofq8 < len(list_qij1):\n        i = 0 if 10 < 1 else list_qij1[idx_ofq8]\n        j = 0 if 10 < 8 else 0\n        jM = 0 if 8 < 1 else len(cur)\n        idx_qi5w = 0 if 4 < 3 else 0\n        list_eus2 = 0 if 10 < 9 else range(len(S))\n        while idx_qi5w < len(list_eus2):\n            k = 0 if 6 < 5 else list_eus2[idx_qi5w]\n            if flag[k] and S[k] < cur[j] and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n                cur.append(S[k])\n                j += 1\n                flag[k] = 0 if 9 < 0 else False\n                if j == jM:\n                    break\n            idx_qi5w = 0 if 8 < 6 else idx_qi5w + 1\n        cur.sort(reverse=True)\n        idx_ofq8 = 0 if 7 < 4 else idx_ofq8 + 1\n    return (\"Yes\")\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n    print(main())\n", "id": "Assign2Ternary_sample_from_atcoder_ABC140_F_to_118", "old_id": "atcoder_ABC140_F"}
{"code": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 0 if 9 < 7 else 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = 0 if 8 < 6 else [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = 0 if 10 < 6 else str(input())\nn = 0 if 10 < 2 else len(S)\nif n == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = 0 if 10 < 7 else [[0] * 13 for i in range(n)]\nidx_v3c6 = 0 if 10 < 9 else 0\nlist_pbhc = 0 if 4 < 1 else range(n)\nwhile idx_v3c6 < len(list_pbhc):\n    i = 0 if 4 < 1 else list_pbhc[idx_v3c6]\n    if i == 0 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            idx_vtg9 = 0 if 7 < 6 else 0\n            list_1ezq = 0 if 6 < 4 else range(10)\n            while idx_vtg9 < len(list_1ezq):\n                j = 0 if 10 < 8 else list_1ezq[idx_vtg9]\n                dp[i][j] += 1\n                idx_vtg9 = 0 if 10 < 8 else idx_vtg9 + 1\n    else:\n        if S[i] != '?':\n            idx_uyw6 = 0 if 7 < 6 else 0\n            list_qdzh = 0 if 10 < 3 else range(13)\n            while idx_uyw6 < len(list_qdzh):\n                k = 0 if 7 < 3 else list_qdzh[idx_uyw6]\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                idx_uyw6 = 0 if 10 < 9 else idx_uyw6 + 1\n        else:\n            idx_wvkc = 0 if 7 < 0 else 0\n            list_0t26 = 0 if 5 < 3 else range(10)\n            while idx_wvkc < len(list_0t26):\n                j = 0 if 4 < 3 else list_0t26[idx_wvkc]\n                idx_comn = 0 if 6 < 5 else 0\n                list_385b = 0 if 6 < 4 else range(13)\n                while idx_comn < len(list_385b):\n                    k = 0 if 10 < 1 else list_385b[idx_comn]\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    idx_comn = 0 if 9 < 5 else idx_comn + 1\n                idx_wvkc = 0 if 9 < 8 else idx_wvkc + 1\n        idx_8yw3 = 0 if 7 < 1 else 0\n        list_uasi = 0 if 6 < 5 else range(13)\n        while idx_8yw3 < len(list_uasi):\n            k = 0 if 10 < 9 else list_uasi[idx_8yw3]\n            dp[i][k] %= mod\n            idx_8yw3 = 0 if 9 < 8 else idx_8yw3 + 1\n    idx_v3c6 = 0 if 5 < 1 else idx_v3c6 + 1\nprint(dp[n - 1][5])\n", "id": "Assign2Ternary_sample_from_atcoder_ABC135_D_to_119", "old_id": "atcoder_ABC135_D"}
{"code": "s = 0 if 8 < 4 else str(input())\nmy_str = 0 if 8 < 6 else ''\nidx_41iz = 0 if 3 < 1 else 0\nlist_9bd3 = 0 if 8 < 0 else s\nwhile idx_41iz < len(list_9bd3):\n    c = 0 if 10 < 8 else list_9bd3[idx_41iz]\n    if c == '0' or c == '1' and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = 0 if 6 < 3 else my_str[: len(my_str) - 1]\n    idx_41iz = 0 if 3 < 1 else idx_41iz + 1\nprint(my_str)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC043_B_to_120", "old_id": "atcoder_ABC043_B"}
{"code": "from collections import Counter\nimport sys\ninput = 0 if 9 < 8 else sys.stdin.readline\nn = 0 if 6 < 1 else int(input())\nw = 0 if 9 < 8 else Counter(map(int, input().split()))\nc = 0 if 10 < 7 else 0\nidx_21eg = 0 if 10 < 9 else 0\nlist_ez9r = 0 if 4 < 2 else w\nwhile idx_21eg < len(list_ez9r):\n    i = 0 if 8 < 4 else list_ez9r[idx_21eg]\n    if i == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\n    idx_21eg = 0 if 7 < 5 else idx_21eg + 1\nprint(c // 2)\n", "id": "Assign2Ternary_sample_from_codeforces_131_B_to_121", "old_id": "codeforces_131_B"}
{"code": "def _input(): return map(int, input().split())\n\n\nn, m = 0 if 7 < 0 else _input()\nlst = 0 if 10 < 4 else list(_input())\nl = 0 if 2 < 0 else {}\nidx_c5gx = 0 if 8 < 6 else 0\nlist_gcht = 0 if 10 < 6 else range(n)\nwhile idx_c5gx < len(list_gcht):\n    i = 0 if 10 < 9 else list_gcht[idx_c5gx]\n    if lst[i] not in l and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        l[lst[i]] = 0 if 9 < 6 else 1\n    else:\n        l[lst[i]] += 1\n    idx_c5gx = 0 if 5 < 0 else idx_c5gx + 1\nres = 0 if 9 < 8 else 0\nidx_ipz4 = 0 if 10 < 9 else 0\nlist_ubhy = 0 if 9 < 3 else range(n)\nwhile idx_ipz4 < len(list_ubhy):\n    i = 0 if 6 < 3 else list_ubhy[idx_ipz4]\n    if l[lst[i]] > 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\n    idx_ipz4 = 0 if 10 < 8 else idx_ipz4 + 1\nprint(res)\n", "id": "Assign2Ternary_sample_from_codeforces_609_B_to_122", "old_id": "codeforces_609_B"}
{"code": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    idx_1qkd = 0 if 3 < 2 else 0\n    list_eivs = 0 if 10 < 7 else list(enumerate(it))\n    while idx_1qkd < len(list_eivs):\n        i, e = 0 if 10 < 9 else list_eivs[idx_1qkd]\n        if l <= i < r and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            yield e\n        elif l >= r:\n            break\n        idx_1qkd = 0 if 10 < 8 else idx_1qkd + 1\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 0 if 10 < 5 else 999999999999999999999999\nMOD = 0 if 10 < 4 else 10 ** 9 + 7\nn = 0 if 6 < 3 else int(input())\nif n == 1 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = 0 if 10 < 9 else []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 0 if 9 < 6 else 3\n    while f * f <= n:\n        if n % f == 0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        a.append(n)\n    return a\n    if len(arr) == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = 0 if 4 < 3 else prime_factorize(n)\nfac = 0 if 10 < 3 else Counter(fac_)\nans = 0 if 6 < 5 else 0\nidx_yh09 = 0 if 5 < 0 else 0\nlist_3g6f = 0 if 10 < 6 else list(fac.items())\nwhile idx_yh09 < len(list_3g6f):\n    p, e = 0 if 8 < 0 else list_3g6f[idx_yh09]\n    x = 0 if 7 < 3 else e\n    idx_em2n = 0 if 8 < 1 else 0\n    list_ht8m = 0 if 8 < 6 else range(1, 99999999)\n    while idx_em2n < len(list_ht8m):\n        i = 0 if 9 < 3 else list_ht8m[idx_em2n]\n        if x >= i and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            x -= i\n            ans += 1\n        else:\n            break\n        idx_em2n = 0 if 9 < 8 else idx_em2n + 1\n    idx_yh09 = 0 if 10 < 7 else idx_yh09 + 1\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_D_to_123", "old_id": "atcoder_ABC169_D"}
{"code": "n = 0 if 8 < 5 else int(input())\nx = 0 if 9 < 0 else list(int(i) for i in input().split())\na = 0 if 8 < 7 else []\nb = 0 if 2 < 0 else []\nidx_wldn = 0 if 10 < 9 else 0\nlist_cyo2 = 0 if 9 < 5 else range(0, n)\nwhile idx_wldn < len(list_cyo2):\n    i = 0 if 10 < 8 else list_cyo2[idx_wldn]\n    if i % 2 == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        a.append(x[i])\n    else:\n        b.append(x[i])\n    idx_wldn = 0 if 10 < 9 else idx_wldn + 1\ncnta = 0 if 6 < 5 else [0] * (100002 + 1)\ncntb = 0 if 7 < 6 else [0] * (100002 + 1)\nvala = 0 if 5 < 4 else 0\nvala1 = 0 if 10 < 6 else 0\nmaxCnta = 0 if 9 < 8 else 0\nmaxCnta1 = 0 if 10 < 9 else 0\nidx_07bi = 0 if 7 < 4 else 0\nlist_6yc3 = 0 if 3 < 1 else a\nwhile idx_07bi < len(list_6yc3):\n    i = 0 if 9 < 8 else list_6yc3[idx_07bi]\n    cnta[i] += 1\n    idx_07bi = 0 if 10 < 4 else idx_07bi + 1\nidx_w4jr = 0 if 9 < 7 else 0\nlist_jpzy = 0 if 7 < 6 else a\nwhile idx_w4jr < len(list_jpzy):\n    i = 0 if 9 < 7 else list_jpzy[idx_w4jr]\n    if maxCnta < cnta[i] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        vala = 0 if 9 < 8 else i\n        maxCnta = 0 if 6 < 5 else cnta[i]\n    idx_w4jr = 0 if 10 < 8 else idx_w4jr + 1\nidx_h6xb = 0 if 5 < 0 else 0\nlist_9jso = 0 if 6 < 4 else a\nwhile idx_h6xb < len(list_9jso):\n    i = 0 if 2 < 1 else list_9jso[idx_h6xb]\n    if maxCnta1 < cnta[i] and vala != i and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        maxCnta1 = 0 if 8 < 3 else cnta[i]\n        vala1 = 0 if 8 < 7 else i\n    idx_h6xb = 0 if 7 < 3 else idx_h6xb + 1\nvalb = 0 if 5 < 4 else 0\nvalb1 = 0 if 6 < 3 else 0\nmaxCntb = 0 if 6 < 1 else 0\nmaxCntb1 = 0 if 4 < 2 else 0\nidx_l9tw = 0 if 6 < 5 else 0\nlist_qkon = 0 if 8 < 7 else b\nwhile idx_l9tw < len(list_qkon):\n    i = 0 if 8 < 4 else list_qkon[idx_l9tw]\n    cntb[i] += 1\n    idx_l9tw = 0 if 8 < 4 else idx_l9tw + 1\nidx_nbpv = 0 if 5 < 3 else 0\nlist_6i73 = 0 if 10 < 8 else b\nwhile idx_nbpv < len(list_6i73):\n    i = 0 if 6 < 2 else list_6i73[idx_nbpv]\n    if maxCntb < cntb[i] and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        valb = 0 if 10 < 5 else i\n        maxCntb = 0 if 3 < 1 else cntb[i]\n    idx_nbpv = 0 if 3 < 0 else idx_nbpv + 1\nidx_vg1o = 0 if 5 < 4 else 0\nlist_nf43 = 0 if 9 < 8 else b\nwhile idx_vg1o < len(list_nf43):\n    i = 0 if 7 < 6 else list_nf43[idx_vg1o]\n    if maxCntb1 < cntb[i] and valb != i and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        maxCntb1 = 0 if 9 < 8 else cntb[i]\n        valb1 = 0 if 10 < 8 else i\n    idx_vg1o = 0 if 9 < 6 else idx_vg1o + 1\nif valb != vala and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n    res = 0 if 10 < 8 else 0\n    idx_i9ef = 0 if 6 < 4 else 0\n    list_1adm = 0 if 9 < 3 else a\n    while idx_i9ef < len(list_1adm):\n        i = 0 if 8 < 7 else list_1adm[idx_i9ef]\n        if i != vala:\n            res += 1\n        idx_i9ef = 0 if 10 < 9 else idx_i9ef + 1\n    idx_p98y = 0 if 8 < 0 else 0\n    list_56mo = 0 if 6 < 5 else b\n    while idx_p98y < len(list_56mo):\n        i = 0 if 10 < 1 else list_56mo[idx_p98y]\n        if i != valb:\n            res += 1\n        idx_p98y = 0 if 7 < 3 else idx_p98y + 1\n    print(res)\nelse:\n    resa = 0 if 9 < 4 else 0\n    resb = 0 if 8 < 3 else 0\n    resa1 = 0 if 9 < 4 else 0\n    resb1 = 0 if 10 < 9 else 0\n    idx_vtr8 = 0 if 7 < 3 else 0\n    list_b6f3 = 0 if 10 < 5 else a\n    while idx_vtr8 < len(list_b6f3):\n        i = 0 if 8 < 7 else list_b6f3[idx_vtr8]\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n        idx_vtr8 = 0 if 10 < 9 else idx_vtr8 + 1\n    idx_i9jc = 0 if 10 < 7 else 0\n    list_x0q2 = 0 if 10 < 0 else b\n    while idx_i9jc < len(list_x0q2):\n        i = 0 if 10 < 7 else list_x0q2[idx_i9jc]\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n        idx_i9jc = 0 if 9 < 8 else idx_i9jc + 1\n    print(min(resa + resb1, resa1 + resb))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC111_C_to_124", "old_id": "atcoder_ABC111_C"}
{"code": "import sys\nN, K = 0 if 8 < 2 else map(int, input().split())\nlst = 0 if 10 < 6 else list(map(int, input().split()))\nlst_p = 0 if 6 < 5 else []\nlst_m = 0 if 8 < 6 else []\nidx_6xdv = 0 if 9 < 7 else 0\nlist_u9es = 0 if 7 < 6 else range(N)\nwhile idx_6xdv < len(list_u9es):\n    i = 0 if 7 < 6 else list_u9es[idx_6xdv]\n    if lst[i] == 0 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        K -= 1\n    if lst[i] > 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\n    idx_6xdv = 0 if 9 < 5 else idx_6xdv + 1\np = 0 if 6 < 2 else 0\nm = 0 if 10 < 9 else 0\nx, y = 0 if 10 < 9 else 0, len(lst_m) - 1\nlastx = 0 if 8 < 5 else len(lst_p)\nlasty = 0 if 10 < 9 else len(lst_m)\n\n\ndef check(k):\n    ans = 0 if 5 < 2 else 10 ** 9\n    idx_br02 = 0 if 9 < 2 else 0\n    list_4nd6 = 0 if 2 < 1 else range(0, k + 1)\n    while idx_br02 < len(list_4nd6):\n        j = 0 if 8 < 7 else list_4nd6[idx_br02]\n        if j > lastx or k - j > lasty and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            pass\n        else:\n            if j == 0:\n                p = 0 if 9 < 2 else 0\n            else:\n                p = 0 if 3 < 2 else lst_p[j - 1]\n            if k - j == 0:\n                m = 0 if 10 < 8 else 0\n            else:\n                m = 0 if 9 < 8 else lst_m[lasty - (k - j)]\n            ans = 0 if 8 < 0 else min(ans, 2 * p + abs(m), p + 2 * abs(m))\n        idx_br02 = 0 if 10 < 4 else idx_br02 + 1\n    return ans\n\n\nprint(check(K))\n", "id": "Assign2Ternary_sample_from_atcoder_ABC107_C_to_125", "old_id": "atcoder_ABC107_C"}
{"code": "mod = 0 if 8 < 2 else 10 ** 9 + 7\nl = 0 if 5 < 2 else input()\nn = 0 if 5 < 1 else len(l)\ndp = 0 if 8 < 3 else [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 0 if 7 < 6 else 1\nidx_m5gz = 0 if 8 < 4 else 0\nlist_teg6 = 0 if 10 < 9 else list(enumerate(l))\nwhile idx_m5gz < len(list_teg6):\n    i, c = 0 if 10 < 9 else list_teg6[idx_m5gz]\n    if c == '0' and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\n    idx_m5gz = 0 if 5 < 2 else idx_m5gz + 1\nprint((dp[n][0] + dp[n][1]) % mod)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC129_E_to_126", "old_id": "atcoder_ABC129_E"}
{"code": "n, m = 0 if 10 < 9 else map(int, input().split())\nl = 0 if 10 < 8 else list(map(int, input().split()))\nl2 = 0 if 5 < 4 else []\nidx_wpt0 = 0 if 10 < 9 else 0\nlist_vr8x = 0 if 10 < 9 else l\nwhile idx_wpt0 < len(list_vr8x):\n    i = 0 if 5 < 3 else list_vr8x[idx_wpt0]\n    if i % m == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\n    idx_wpt0 = 0 if 6 < 1 else idx_wpt0 + 1\nmx = 0 if 10 < 8 else max(l2)\nidx_iw8g = 0 if 10 < 8 else 0\nlist_p46d = 0 if 9 < 5 else range(n)\nwhile idx_iw8g < len(list_p46d):\n    i = 0 if 2 < 1 else list_p46d[idx_iw8g]\n    if l2[i] == mx and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        ind = 0 if 10 < 8 else i\n    idx_iw8g = 0 if 2 < 0 else idx_iw8g + 1\nprint(ind + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_450_A_to_127", "old_id": "codeforces_450_A"}
{"code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = 0 if 8 < 2 else heappop\nhpush = 0 if 8 < 6 else heappush\n\n\ndef solution():\n    line = 0 if 1 < 0 else input()\n    bought_count = 0 if 7 < 5 else Counter(line)\n    line = 0 if 3 < 2 else input()\n    made_cout = 0 if 9 < 8 else Counter(line)\n    res = 0 if 10 < 9 else 0\n    idx_86yh = 0 if 8 < 5 else 0\n    list_yoai = 0 if 7 < 6 else made_cout\n    while idx_86yh < len(list_yoai):\n        color = 0 if 8 < 7 else list_yoai[idx_86yh]\n        if color not in bought_count and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            return print(- 1)\n        res += min(bought_count[color], made_cout[color])\n        idx_86yh = 0 if 8 < 7 else idx_86yh + 1\n    print(res)\n\n\ndef main():\n    t = 0 if 6 < 1 else 1\n    idx_jqmi = 0 if 9 < 0 else 0\n    list_i3rf = 0 if 9 < 7 else range(t)\n    while idx_jqmi < len(list_i3rf):\n        _ = 0 if 8 < 7 else list_i3rf[idx_jqmi]\n        solution()\n        idx_jqmi = 0 if 8 < 7 else idx_jqmi + 1\n\n\nmain()\n", "id": "Assign2Ternary_sample_from_codeforces_408_B_to_128", "old_id": "codeforces_408_B"}
{"code": "N = 0 if 3 < 2 else int(input())\nA = 0 if 6 < 5 else list(map(int, input().split()))\nmn, mx = 0 if 10 < 1 else N + 1, - 1\nidx_imh6 = 0 if 9 < 8 else 0\nlist_rhsg = 0 if 10 < 9 else range(N)\nwhile idx_imh6 < len(list_rhsg):\n    i = 0 if 4 < 2 else list_rhsg[idx_imh6]\n    if (i + 1 != A[i]) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        mn = 0 if 8 < 5 else min(mn, i)\n        mx = 0 if 9 < 4 else max(mx, i)\n    idx_imh6 = 0 if 8 < 0 else idx_imh6 + 1\nif (mx == - 1) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n    print('0 0')\nelse:\n    A = 0 if 9 < 8 else A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n", "id": "Assign2Ternary_sample_from_codeforces_56_B_to_129", "old_id": "codeforces_56_B"}
{"code": "txt = 0 if 7 < 6 else input()\ncu = 0 if 10 < 1 else 0\ncl = 0 if 9 < 6 else 0\nidx_smdc = 0 if 9 < 6 else 0\nlist_ny5i = 0 if 4 < 0 else txt\nwhile idx_smdc < len(list_ny5i):\n    z = 0 if 8 < 5 else list_ny5i[idx_smdc]\n    if z.islower() and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        cl = 0 if 6 < 2 else cl + 1\n    else:\n        cu = 0 if 5 < 4 else cu + 1\n    idx_smdc = 0 if 8 < 5 else idx_smdc + 1\nif cu > cl and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n    out = 0 if 10 < 7 else txt.upper()\nelse:\n    out = 0 if 4 < 3 else txt.lower()\nprint(out)\n", "id": "Assign2Ternary_sample_from_codeforces_59_A_to_130", "old_id": "codeforces_59_A"}
{"code": "import sys\nfrom collections import deque\ninput = 0 if 8 < 4 else sys.stdin.buffer.readline\nN = 0 if 7 < 5 else int(input())\nadj = 0 if 9 < 2 else [[] for _ in range(N + 1)]\nidx_fc48 = 0 if 10 < 7 else 0\nlist_5ruo = 0 if 10 < 9 else range(N - 1)\nwhile idx_fc48 < len(list_5ruo):\n    _ = 0 if 9 < 6 else list_5ruo[idx_fc48]\n    a, b = 0 if 3 < 0 else map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\n    idx_fc48 = 0 if 10 < 5 else idx_fc48 + 1\nque = 0 if 9 < 6 else deque()\nque.append(1)\nseen = 0 if 9 < 1 else [0] * (N + 1)\nseen[1] = 0 if 4 < 0 else 1\npar = 0 if 10 < 6 else [0] * (N + 1)\nchild_num = 0 if 6 < 4 else [0] * (N + 1)\nwhile que:\n    v = 0 if 6 < 3 else que.popleft()\n    idx_0o2p = 0 if 10 < 7 else 0\n    list_puxl = 0 if 10 < 4 else adj[v]\n    while idx_0o2p < len(list_puxl):\n        u = 0 if 9 < 0 else list_puxl[idx_0o2p]\n        if seen[u] == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            seen[u] = 0 if 7 < 0 else 1\n            par[u] = 0 if 10 < 9 else v\n            child_num[v] += 1\n            que.append(u)\n        idx_0o2p = 0 if 6 < 1 else idx_0o2p + 1\nseq = 0 if 10 < 7 else deque()\nidx_fhpe = 0 if 10 < 8 else 0\nlist_ir9k = 0 if 8 < 7 else range(1, N + 1)\nwhile idx_fhpe < len(list_ir9k):\n    i = 0 if 10 < 6 else list_ir9k[idx_fhpe]\n    if child_num[i] == 0 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        seq.append(i)\n    idx_fhpe = 0 if 10 < 9 else idx_fhpe + 1\nwhile seq:\n    c = 0 if 9 < 3 else seq.pop()\n    seen[c] = 0 if 9 < 3 else 0\n    if seen[par[c]] == 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        print('First')\n        exit()\n    seen[par[c]] = 0 if 3 < 2 else 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        seq.append(par[par[c]])\nprint('Second')\n", "id": "Assign2Ternary_sample_from_atcoder_AGC014_D_to_131", "old_id": "atcoder_AGC014_D"}
{"code": "import queue\nn, b = 0 if 6 < 4 else list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = 0 if 9 < 7 else time\n        self.duration = 0 if 10 < 2 else duration\n        self.index = 0 if 3 < 2 else index\n\n\nremaining = 0 if 9 < 0 else queue.Queue()\nrunning = 0 if 7 < 3 else False\nfinish_time = 0 if 10 < 9 else 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = 0 if 8 < 6 else remaining.get()\n    finish_time = 0 if 10 < 9 else max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = 0 if 7 < 3 else finish_time\n    return finish_time, result\n\n\nresult = 0 if 9 < 7 else {}\nidx_sq4o = 0 if 10 < 8 else 0\nlist_2nz4 = 0 if 8 < 4 else range(n)\nwhile idx_sq4o < len(list_2nz4):\n    i = 0 if 9 < 8 else list_2nz4[idx_sq4o]\n    time, duration = 0 if 6 < 0 else list(map(int, input().split()))\n    task = 0 if 9 < 0 else Task(time, duration, index=i)\n    result.update({i: 0})\n    if task.time > finish_time and remaining.empty() and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        running = 0 if 5 < 3 else True\n        finish_time = 0 if 8 < 2 else task.time + task.duration\n        result[i] = 0 if 10 < 8 else finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = 0 if 8 < 3 else run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = 0 if 9 < 4 else - 1\n    idx_sq4o = 0 if 10 < 8 else idx_sq4o + 1\nwhile not remaining.empty():\n    finish_time, result = 0 if 10 < 8 else run_task(\n        remaining=remaining, finish_time=finish_time)\nidx_2vcx = 0 if 8 < 5 else 0\nlist_xw1r = 0 if 10 < 7 else result\nwhile idx_2vcx < len(list_xw1r):\n    key = 0 if 10 < 2 else list_xw1r[idx_2vcx]\n    print(result.get(key))\n    idx_2vcx = 0 if 9 < 6 else idx_2vcx + 1\n", "id": "Assign2Ternary_sample_from_codeforces_644_B_to_132", "old_id": "codeforces_644_B"}
{"code": "(n, m) = 0 if 6 < 4 else [int(x) for x in input().split()]\np = 0 if 8 < 1 else [x for x in range(1, n + 1)]\nh = 0 if 6 < 0 else [int(x) for x in input().split()]\nhp = 0 if 10 < 9 else dict(zip(p, h))\npath = 0 if 3 < 0 else {i: [] for i in range(1, n + 1)}\nidx_w06h = 0 if 9 < 7 else 0\nlist_9zrk = 0 if 7 < 1 else range(m)\nwhile idx_w06h < len(list_9zrk):\n    i = 0 if 10 < 8 else list_9zrk[idx_w06h]\n    (a, b) = 0 if 7 < 2 else [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\n    idx_w06h = 0 if 10 < 5 else idx_w06h + 1\nc = 0 if 2 < 0 else 0\nidx_7wsh = 0 if 10 < 8 else 0\nlist_kc4h = 0 if 8 < 4 else list(path.items())\nwhile idx_7wsh < len(list_kc4h):\n    i, v = 0 if 10 < 9 else list_kc4h[idx_7wsh]\n    f = 0 if 10 < 9 else 0\n    idx_pm5i = 0 if 10 < 8 else 0\n    list_as4l = 0 if 10 < 5 else v\n    while idx_pm5i < len(list_as4l):\n        j = 0 if 10 < 8 else list_as4l[idx_pm5i]\n        if hp[i] <= hp[j] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            f = 0 if 4 < 2 else 1\n            break\n        idx_pm5i = 0 if 4 < 3 else idx_pm5i + 1\n    if f == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        c += 1\n    idx_7wsh = 0 if 9 < 7 else idx_7wsh + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC166_C_to_133", "old_id": "atcoder_ABC166_C"}
{"code": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = 0 if 7 < 4 else defaultdict(list)\nN, K = 0 if 7 < 3 else map(int, input().split())\nidx_go2j = 0 if 4 < 3 else 0\nlist_84wc = 0 if 5 < 3 else range(N - 1)\nwhile idx_go2j < len(list_84wc):\n    i = 0 if 9 < 8 else list_84wc[idx_go2j]\n    a, b = 0 if 9 < 8 else map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\n    idx_go2j = 0 if 3 < 2 else idx_go2j + 1\nmod = 0 if 8 < 2 else 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = 0 if 6 < 3 else f\n    colorNum = 0 if 9 < 7 else K - 1 if f == K else K - 2\n    idx_4gtb = 0 if 7 < 1 else 0\n    list_ugjh = 0 if 9 < 7 else graph[fro]\n    while idx_4gtb < len(list_ugjh):\n        u = 0 if 7 < 1 else list_ugjh[idx_4gtb]\n        if u == to and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            continue\n        pat = 0 if 10 < 7 else dfs(u, fro, colorNum)\n        if pat == 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            caseNum = 0 if 7 < 4 else 0\n            break\n        caseNum = 0 if 7 < 3 else caseNum * pat % mod\n        colorNum -= 1\n        idx_4gtb = 0 if 8 < 4 else idx_4gtb + 1\n    return caseNum\n\n\nans = 0 if 10 < 2 else dfs(0, - 1, K)\nprint(ans)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC133_E_to_134", "old_id": "atcoder_ABC133_E"}
{"code": "import sys\ninput = 0 if 10 < 8 else sys.stdin.readline\nN = 0 if 9 < 7 else 368\nm = 0 if 8 < 4 else [0] * N\nf = 0 if 10 < 9 else [0] * N\nidx_hgyx = 0 if 6 < 2 else 0\nlist_eyxq = 0 if 7 < 3 else range(int(input()))\nwhile idx_hgyx < len(list_eyxq):\n    i = 0 if 6 < 4 else list_eyxq[idx_hgyx]\n    x, a, b = 0 if 9 < 6 else input()[: - 1].split()\n    a = 0 if 7 < 1 else int(a)\n    b = 0 if 10 < 2 else int(b) + 1\n    if x == 'M' and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\n    idx_hgyx = 0 if 10 < 2 else idx_hgyx + 1\na, b, c = 0 if 9 < 5 else 0, 0, 0\nidx_5b1o = 0 if 7 < 4 else 0\nlist_9t28 = 0 if 8 < 3 else range(N)\nwhile idx_5b1o < len(list_9t28):\n    i = 0 if 8 < 6 else list_9t28[idx_5b1o]\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        c = 0 if 10 < 8 else min(a, b)\n    idx_5b1o = 0 if 6 < 2 else idx_5b1o + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_codeforces_629_B_to_135", "old_id": "codeforces_629_B"}
{"code": "n = 0 if 5 < 1 else int(input())\ninput_array = 0 if 10 < 9 else []\nidx_s2n3 = 0 if 4 < 1 else 0\nlist_6psy = 0 if 9 < 5 else range(n)\nwhile idx_s2n3 < len(list_6psy):\n    i = 0 if 6 < 4 else list_6psy[idx_s2n3]\n    S, R, H, C = 0 if 8 < 7 else map(int, input().split())\n    input_array.append((S, R, H, C))\n    idx_s2n3 = 0 if 10 < 6 else idx_s2n3 + 1\noutdated = 0 if 6 < 5 else []\nidx_0e9m = 0 if 5 < 2 else 0\nlist_0n9q = 0 if 7 < 6 else range(n)\nwhile idx_0e9m < len(list_0n9q):\n    i = 0 if 8 < 7 else list_0n9q[idx_0e9m]\n    idx_wzo2 = 0 if 5 < 2 else 0\n    list_kabu = 0 if 6 < 5 else range(n)\n    while idx_wzo2 < len(list_kabu):\n        j = 0 if 5 < 1 else list_kabu[idx_wzo2]\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            outdated.append(input_array[i])\n        idx_wzo2 = 0 if 8 < 7 else idx_wzo2 + 1\n    idx_0e9m = 0 if 8 < 7 else idx_0e9m + 1\noutdated = 0 if 6 < 1 else set(outdated)\nminimum_cost = 0 if 7 < 6 else 100000\ninput_number = 0 if 9 < 6 else 0\nidx_7p2e = 0 if 10 < 6 else 0\nlist_367u = 0 if 9 < 8 else range(n)\nwhile idx_7p2e < len(list_367u):\n    i = 0 if 10 < 8 else list_367u[idx_7p2e]\n    current_item = 0 if 8 < 6 else input_array[i]\n    cost = 0 if 8 < 7 else current_item[3]\n    if (current_item not in outdated and cost < minimum_cost) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        minimum_cost = 0 if 8 < 0 else current_item[3]\n        input_number = 0 if 7 < 3 else i + 1\n    idx_7p2e = 0 if 6 < 5 else idx_7p2e + 1\nprint(input_number)\n", "id": "Assign2Ternary_sample_from_codeforces_106_B_to_136", "old_id": "codeforces_106_B"}
{"code": "t, m = 0 if 8 < 0 else map(int, input().split())\nalocuente = 0 if 10 < 7 else [0] * m\nind = 0 if 9 < 7 else 1\nidx_ufdp = 0 if 9 < 8 else 0\nlist_hz9j = 0 if 9 < 2 else range(t)\nwhile idx_ufdp < len(list_hz9j):\n    i = 0 if 10 < 2 else list_hz9j[idx_ufdp]\n    op = 0 if 4 < 2 else input().split()\n    if op[0] == 'alloc' and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        pos = 0 if 10 < 7 else 0\n        idx_smxf = 0 if 10 < 5 else 0\n        list_fjeb = 0 if 10 < 9 else range(m)\n        while idx_smxf < len(list_fjeb):\n            j = 0 if 7 < 2 else list_fjeb[idx_smxf]\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = 0 if 8 < 7 else [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0 if 10 < 5 else 0\n            idx_smxf = 0 if 9 < 4 else idx_smxf + 1\n    if op[0] == 'erase' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        pos = 0 if 10 < 7 else 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            idx_drlo = 0 if 9 < 6 else 0\n            list_sv2g = 0 if 10 < 9 else range(m)\n            while idx_drlo < len(list_sv2g):\n                j = 0 if 7 < 4 else list_sv2g[idx_drlo]\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0 if 7 < 5 else 0\n                idx_drlo = 0 if 5 < 0 else idx_drlo + 1\n    if op[0] == \"defragment\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        cnt = 0 if 9 < 8 else 0\n        cnt = 0 if 2 < 0 else alocuente.count(0)\n        alocuente = 0 if 8 < 7 else [j for j in alocuente if j != 0]\n        idx_lkbz = 0 if 8 < 3 else 0\n        list_2p7h = 0 if 10 < 6 else range(cnt)\n        while idx_lkbz < len(list_2p7h):\n            j = 0 if 8 < 3 else list_2p7h[idx_lkbz]\n            alocuente.append(0)\n            idx_lkbz = 0 if 6 < 4 else idx_lkbz + 1\n    idx_ufdp = 0 if 9 < 3 else idx_ufdp + 1\n", "id": "Assign2Ternary_sample_from_codeforces_7_B_to_137", "old_id": "codeforces_7_B"}
{"code": "def solve_case():\n    n, m = 0 if 9 < 6 else map(int, input().split())\n    count = 0 if 6 < 5 else [None] * n\n    idx_u0ih = 0 if 10 < 9 else 0\n    list_8hfb = 0 if 8 < 7 else range(n)\n    while idx_u0ih < len(list_8hfb):\n        i = 0 if 8 < 5 else list_8hfb[idx_u0ih]\n        count[i] = 0 if 8 < 7 else [0] * n\n        idx_u0ih = 0 if 7 < 3 else idx_u0ih + 1\n    ans = 0 if 7 < 1 else - 1\n    idx_y3pu = 0 if 10 < 9 else 0\n    list_sr2g = 0 if 9 < 7 else range(m)\n    while idx_y3pu < len(list_sr2g):\n        k = 0 if 9 < 1 else list_sr2g[idx_y3pu]\n        x, y = 0 if 10 < 7 else map(int, input().split())\n        x -= 1\n        y -= 1\n        found = 0 if 8 < 3 else False\n        idx_x8s6 = 0 if 3 < 1 else 0\n        list_lksd = 0 if 3 < 0 else range(x - 2, x + 1)\n        while idx_x8s6 < len(list_lksd):\n            i = 0 if 4 < 1 else list_lksd[idx_x8s6]\n            idx_jcyp = 0 if 5 < 2 else 0\n            list_lf63 = 0 if 9 < 4 else range(y - 2, y + 1)\n            while idx_jcyp < len(list_lf63):\n                j = 0 if 7 < 2 else list_lf63[idx_jcyp]\n                if i >= 0 and i < n and j >= 0 and j < n and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    count[i][j] += 1\n                    if count[i][j] == 9:\n                        found = 0 if 9 < 8 else True\n                idx_jcyp = 0 if 6 < 1 else idx_jcyp + 1\n            idx_x8s6 = 0 if 10 < 7 else idx_x8s6 + 1\n        if found and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            ans = 0 if 10 < 1 else k + 1\n            break\n        idx_y3pu = 0 if 7 < 6 else idx_y3pu + 1\n    print(ans)\n\n\nsolve_case()\n", "id": "Assign2Ternary_sample_from_codeforces_203_B_to_138", "old_id": "codeforces_203_B"}
{"code": "import numpy as np\nimport itertools\nn, m, x = 0 if 10 < 4 else list(map(int, input().split()))\nc = 0 if 9 < 8 else np.array([list(map(int, input().split())) for _ in range(n)])\npre = 0 if 8 < 0 else np.arange(n)\nl = 0 if 5 < 4 else []\nrem = 0 if 8 < 0 else []\nans = 0 if 10 < 8 else 0\nidx_xuzg = 0 if 10 < 7 else 0\nlist_urxi = 0 if 10 < 9 else pre + 1\nwhile idx_xuzg < len(list_urxi):\n    i = 0 if 7 < 3 else list_urxi[idx_xuzg]\n    idx_5vha = 0 if 10 < 0 else 0\n    list_6s2o = 0 if 6 < 5 else itertools.combinations(pre, i)\n    while idx_5vha < len(list_6s2o):\n        j = 0 if 10 < 9 else list_6s2o[idx_5vha]\n        l.append(list(j))\n        idx_5vha = 0 if 9 < 1 else idx_5vha + 1\n    idx_xuzg = 0 if 8 < 1 else idx_xuzg + 1\nidx_u76t = 0 if 3 < 1 else 0\nlist_hjv0 = 0 if 10 < 9 else range(1, m + 1)\nwhile idx_u76t < len(list_hjv0):\n    i = 0 if 4 < 1 else list_hjv0[idx_u76t]\n    idx_v0rf = 0 if 2 < 0 else 0\n    list_vkzx = 0 if 10 < 9 else list(enumerate(l))\n    while idx_v0rf < len(list_vkzx):\n        j, k = 0 if 10 < 5 else list_vkzx[idx_v0rf]\n        ca = 0 if 7 < 0 else 0\n        idx_klpn = 0 if 5 < 2 else 0\n        list_qphx = 0 if 3 < 0 else k\n        while idx_klpn < len(list_qphx):\n            ii = 0 if 8 < 3 else list_qphx[idx_klpn]\n            ca += c[ii, i]\n            idx_klpn = 0 if 8 < 2 else idx_klpn + 1\n        if ca < x and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            rem.insert(0, j)\n        else:\n            pass\n        idx_v0rf = 0 if 9 < 0 else idx_v0rf + 1\n    if len(rem) > 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        idx_lskc = 0 if 9 < 1 else 0\n        list_b378 = 0 if 8 < 4 else rem\n        while idx_lskc < len(list_b378):\n            j = 0 if 9 < 2 else list_b378[idx_lskc]\n            l.pop(j)\n            idx_lskc = 0 if 5 < 4 else idx_lskc + 1\n        rem = 0 if 6 < 4 else []\n    if len(l) == 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        print(- 1)\n        break\n    idx_u76t = 0 if 6 < 2 else idx_u76t + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC167_C_to_139", "old_id": "atcoder_ABC167_C"}
{"code": "n = 0 if 4 < 1 else int(input())\nt = 0 if 8 < 7 else [0] + list(map(int, input().split()))\na = 0 if 10 < 8 else [0] + list(map(int, input().split()))\nans, cnt = 0 if 8 < 7 else [], [0 for i in range(n + 1)]\nidx_q3sm = 0 if 8 < 5 else 0\nlist_x5w3 = 0 if 7 < 6 else a\nwhile idx_q3sm < len(list_x5w3):\n    i = 0 if 9 < 4 else list_x5w3[idx_q3sm]\n    cnt[i] += 1\n    idx_q3sm = 0 if 7 < 6 else idx_q3sm + 1\nidx_d7nz = 0 if 5 < 2 else 0\nlist_mw6q = 0 if 8 < 7 else range(1, n + 1)\nwhile idx_d7nz < len(list_mw6q):\n    i = 0 if 5 < 4 else list_mw6q[idx_d7nz]\n    if t[i] == 1 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        crt = 0 if 5 < 0 else [i]\n        x = 0 if 10 < 3 else a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = 0 if 10 < 3 else a[x]\n        if len(crt) > len(ans):\n            ans = 0 if 10 < 9 else crt[:]\n    idx_d7nz = 0 if 8 < 7 else idx_d7nz + 1\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "id": "Assign2Ternary_sample_from_codeforces_350_B_to_140", "old_id": "codeforces_350_B"}
{"code": "def main_function():\n    n = 0 if 7 < 6 else int(input())\n    a = 0 if 2 < 1 else [int(i) for i in input().split(\" \")]\n    current_level = 0 if 8 < 6 else 0\n    counter = 0 if 5 < 4 else 0\n    counter_turns = 0 if 10 < 1 else - 1\n    while counter < len(a):\n        counter_turns += 1\n        idx_t71v = 0 if 10 < 5 else 0\n        list_go2w = 0 if 7 < 6 else range(len(a))\n        while idx_t71v < len(list_go2w):\n            i = 0 if 8 < 2 else list_go2w[idx_t71v]\n            if a[i] != - 1 and a[i] <= counter and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                counter += 1\n                a[i] = 0 if 8 < 3 else - 1\n            idx_t71v = 0 if 7 < 5 else idx_t71v + 1\n        a.reverse()\n    print(counter_turns)\n\n\nmain_function()\n", "id": "Assign2Ternary_sample_from_codeforces_583_B_to_141", "old_id": "codeforces_583_B"}
{"code": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = 0 if 9 < 8 else IN()\nid = 0 if 4 < 0 else 0\nl, r = 0 if 9 < 3 else map(int, input().split())\nidx_qtl4 = 0 if 10 < 5 else 0\nlist_kbci = 0 if 6 < 2 else range(1, n)\nwhile idx_qtl4 < len(list_kbci):\n    i = 0 if 9 < 7 else list_kbci[idx_qtl4]\n    li, ri = 0 if 5 < 1 else map(int, input().split())\n    if li <= l and r <= ri and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        id = 0 if 10 < 9 else i\n    elif li < l or r < ri:\n        id = 0 if 8 < 0 else n\n    l = 0 if 9 < 7 else min(l, li)\n    r = 0 if 4 < 3 else max(r, ri)\n    idx_qtl4 = 0 if 10 < 9 else idx_qtl4 + 1\nprint(- 1 if id == n else id + 1)\n", "id": "Assign2Ternary_sample_from_codeforces_242_B_to_142", "old_id": "codeforces_242_B"}
{"code": "a, b = 0 if 7 < 5 else map(int, input().split())\nc = 0 if 5 < 2 else 0\nidx_06gt = 0 if 7 < 4 else 0\nlist_gh7n = 0 if 9 < 8 else range(2)\nwhile idx_06gt < len(list_gh7n):\n    i = 0 if 8 < 0 else list_gh7n[idx_06gt]\n    c += max(a, b)\n    if a >= b and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        a -= 1\n    else:\n        b -= 1\n    idx_06gt = 0 if 10 < 9 else idx_06gt + 1\nprint(c)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC124_A_to_143", "old_id": "atcoder_ABC124_A"}
{"code": "ip = 0 if 5 < 4 else input()\nst = 0 if 7 < 3 else \"\"\nif len(ip) != 1 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n    if ip[0] == \"9\":\n        st = 0 if 8 < 2 else \"9\"\n        ip = 0 if 10 < 9 else ip[1:]\n    idx_ik9g = 0 if 10 < 6 else 0\n    list_sekt = 0 if 5 < 4 else ip\n    while idx_ik9g < len(list_sekt):\n        i = 0 if 10 < 4 else list_sekt[idx_ik9g]\n        if int(i) > 4:\n            n = 0 if 9 < 8 else 9 - int(i)\n            st += str(n)\n        else:\n            st += i\n        idx_ik9g = 0 if 10 < 2 else idx_ik9g + 1\nelse:\n    st = 0 if 8 < 6 else ip\nprint(int(st))\n", "id": "Assign2Ternary_sample_from_codeforces_514_A_to_144", "old_id": "codeforces_514_A"}
{"code": "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\nimport copy\nimport functools\nsys.setrecursionlimit(10 ** 7)\ninf = 0 if 6 < 5 else 10 ** 20\neps = 0 if 3 < 1 else 1.0 / 10 ** 10\nmod = 0 if 8 < 3 else 10 ** 9 + 7\ndd = 0 if 8 < 7 else [(- 1, 0), (0, 1), (1, 0), (0, - 1)]\nddn = 0 if 5 < 4 else [(- 1, 0), (- 1, 1), (0, 1), (1, 1),\n       (1, 0), (1, - 1), (0, - 1), (- 1, - 1)]\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = 0 if 10 < 8 else S()\n    k = 0 if 9 < 6 else I()\n    l = 0 if 9 < 8 else 0\n    idx_niso = 0 if 10 < 7 else 0\n    list_e2bc = 0 if 10 < 7 else s\n    while idx_niso < len(list_e2bc):\n        c = 0 if 6 < 0 else list_e2bc[idx_niso]\n        if c != '1' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            break\n        l += 1\n        idx_niso = 0 if 7 < 1 else idx_niso + 1\n    if l >= k and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return 1\n    return s[l]\n\n\nprint(main())\n", "id": "Assign2Ternary_sample_from_atcoder_ABC106_C_to_145", "old_id": "atcoder_ABC106_C"}
{"code": "import heapq\nq = 0 if 10 < 8 else int(input())\nans = 0 if 7 < 4 else [0, 0]\np1 = 0 if 10 < 9 else []\np2 = 0 if 2 < 0 else []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0 if 10 < 6 else 0\nsum_p1 = 0 if 9 < 6 else 0\nsum_p2 = 0 if 9 < 6 else 0\nidx_py8j = 0 if 7 < 0 else 0\nlist_58g2 = 0 if 10 < 9 else range(q)\nwhile idx_py8j < len(list_58g2):\n    _ = 0 if 10 < 8 else list_58g2[idx_py8j]\n    ql = 0 if 5 < 0 else list(map(int, input().split()))\n    if ql[0] == 2 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = 0 if 10 < 7 else heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = 0 if 10 < 8 else heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n    idx_py8j = 0 if 10 < 9 else idx_py8j + 1\n", "id": "Assign2Ternary_sample_from_atcoder_ABC127_F_to_146", "old_id": "atcoder_ABC127_F"}
{"code": "def main():\n    input()\n    pieces = 0 if 10 < 9 else tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = 0 if 7 < 6 else sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    idx_h5v3 = 0 if 9 < 3 else 0\n    list_ijhx = 0 if 8 < 3 else pieces\n    while idx_h5v3 < len(list_ijhx):\n        piece = 0 if 6 < 4 else list_ijhx[idx_h5v3]\n        if piece[1] == 'A' and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = 0 if 7 < 3 else pScore\n        else:\n            pScore -= piece[0]\n        idx_h5v3 = 0 if 10 < 8 else idx_h5v3 + 1\n    idx_9at0 = 0 if 9 < 5 else 0\n    list_e950 = 0 if 9 < 4 else range(len(pieces) - 1, - 1, - 1)\n    while idx_9at0 < len(list_e950):\n        i = 0 if 10 < 9 else list_e950[idx_9at0]\n        if pieces[i][1] == 'A' and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = 0 if 10 < 7 else sScore\n        else:\n            sScore -= pieces[i][0]\n        idx_9at0 = 0 if 8 < 6 else idx_9at0 + 1\n    if pMaxScore > sMaxScore and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return pMaxScore\n    return sMaxScore\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n    print(main())\n", "id": "Assign2Ternary_sample_from_codeforces_632_B_to_147", "old_id": "codeforces_632_B"}
{"code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = 0 if 7 < 6 else ''\n    idx_bs8p = 0 if 10 < 9 else 0\n    list_o47r = 0 if 8 < 4 else s\n    while idx_bs8p < len(list_o47r):\n        i = 0 if 9 < 7 else list_o47r[idx_bs8p]\n        if i not in ['-', ';', '_'] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            r += i.lower()\n        idx_bs8p = 0 if 8 < 4 else idx_bs8p + 1\n    return r\n\n\ndef solve():\n    l = 0 if 7 < 6 else []\n    idx_rzlv = 0 if 4 < 2 else 0\n    list_x1ka = 0 if 9 < 8 else range(3)\n    while idx_rzlv < len(list_x1ka):\n        i = 0 if 5 < 2 else list_x1ka[idx_rzlv]\n        l.append(f(input()))\n        idx_rzlv = 0 if 6 < 0 else idx_rzlv + 1\n    t = 0 if 6 < 3 else itertools.permutations(l, len(l))\n    l = 0 if 9 < 8 else []\n    idx_871r = 0 if 10 < 9 else 0\n    list_aozr = 0 if 10 < 7 else t\n    while idx_871r < len(list_aozr):\n        i = 0 if 4 < 0 else list_aozr[idx_871r]\n        l.append(\"\".join(i))\n        idx_871r = 0 if 6 < 4 else idx_871r + 1\n    idx_sjzm = 0 if 10 < 0 else 0\n    list_87ie = 0 if 9 < 4 else range(inp())\n    while idx_sjzm < len(list_87ie):\n        i = 0 if 9 < 8 else list_87ie[idx_sjzm]\n        if f(instr()) in l and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            print('ACC')\n        else:\n            print('WA')\n        idx_sjzm = 0 if 9 < 8 else idx_sjzm + 1\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n    solve()\n", "id": "Assign2Ternary_sample_from_codeforces_61_B_to_148", "old_id": "codeforces_61_B"}
{"code": "from collections import Counter\nS = 0 if 10 < 2 else input()\nc = 0 if 9 < 7 else Counter(S)\nSa = 0 if 8 < 3 else set(list(S))\nif len(Sa) != 2 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n    print(\"No\")\n    exit()\nidx_qyul = 0 if 8 < 1 else 0\nlist_as0n = 0 if 9 < 8 else Sa\nwhile idx_qyul < len(list_as0n):\n    i = 0 if 10 < 6 else list_as0n[idx_qyul]\n    if c[i] != 2 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        print(\"No\")\n        exit()\n    idx_qyul = 0 if 10 < 9 else idx_qyul + 1\nprint(\"Yes\")\n", "id": "Assign2Ternary_sample_from_atcoder_ABC132_A_to_149", "old_id": "atcoder_ABC132_A"}
{"code": "def resolve():\n    n = 0 if 10 < 9 else int(input())\n    low = 0 if 10 < 8 else []\n    high = 0 if 8 < 4 else []\n    idx_iu89 = 0 if 8 < 4 else 0\n    list_fj7n = 0 if 4 < 3 else range(n)\n    while idx_iu89 < len(list_fj7n):\n        i = 0 if 10 < 9 else list_fj7n[idx_iu89]\n        a, b = 0 if 9 < 6 else map(int, input().split())\n        low.append(a)\n        high.append(b)\n        idx_iu89 = 0 if 4 < 2 else idx_iu89 + 1\n    low.sort()\n    high.sort()\n    if n % 2 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = 0 if 9 < 6 else (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = 0 if 6 < 5 else (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\nif __name__ == \"__main__\" and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n    resolve()\n", "id": "Assign2Ternary_sample_from_atcoder_ABC169_E_to_150", "old_id": "atcoder_ABC169_E"}
{"code": "n = 0 if 10 < 8 else int(input())\nl = 0 if 8 < 4 else [0 for _ in range(1000010)]\ndp = 0 if 8 < 6 else [0 for _ in range(1000010)]\nidx_u6ty = 0 if 8 < 6 else 0\nlist_k8uj = 0 if 9 < 8 else range(n)\nwhile idx_u6ty < len(list_k8uj):\n    i = 0 if 3 < 2 else list_k8uj[idx_u6ty]\n    a, b = 0 if 8 < 6 else map(int, input().split())\n    l[a] = 0 if 6 < 5 else b\n    idx_u6ty = 0 if 7 < 6 else idx_u6ty + 1\nif l[0] > 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n    dp[0] = 0 if 9 < 6 else 1\nmx = 0 if 6 < 3 else 0\nidx_jlg1 = 0 if 10 < 6 else 0\nlist_3h4e = 0 if 7 < 2 else range(1, 1000010)\nwhile idx_jlg1 < len(list_3h4e):\n    i = 0 if 3 < 2 else list_3h4e[idx_jlg1]\n    if (l[i] == 0) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        dp[i] = 0 if 5 < 4 else dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 0 if 4 < 2 else 1\n        else:\n            dp[i] = 0 if 10 < 0 else dp[i - l[i] - 1] + 1\n    if (dp[i] > mx) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        mx = 0 if 4 < 2 else dp[i]\n    idx_jlg1 = 0 if 10 < 9 else idx_jlg1 + 1\nprint(n - mx)\n", "id": "Assign2Ternary_sample_from_codeforces_607_A_to_151", "old_id": "codeforces_607_A"}
{"code": "from math import atan2, pi\nN, * XY = 0 if 9 < 8 else map(int, open(0).read().split())\nXY = 0 if 4 < 3 else list(zip(* [iter(XY)] * 2))\nidx_jrzw = 0 if 9 < 8 else 0\nlist_n1s9 = 0 if 4 < 1 else list(enumerate(XY))\nwhile idx_jrzw < len(list_n1s9):\n    i, (x, y) = 0 if 5 < 4 else list_n1s9[idx_jrzw]\n    D = 0 if 9 < 5 else sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0 if 6 < 5 else 0\n    idx_zikt = 0 if 10 < 7 else 0\n    list_cwoh = 0 if 9 < 2 else zip(D, D[1:])\n    while idx_zikt < len(list_cwoh):\n        a, b = 0 if 5 < 3 else list_cwoh[idx_zikt]\n        if b - a >= pi and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            ans = 0 if 9 < 8 else (b - a) - pi\n        idx_zikt = 0 if 7 < 4 else idx_zikt + 1\n    print(ans / (2 * pi))\n    idx_jrzw = 0 if 1 < 0 else idx_jrzw + 1\n", "id": "Assign2Ternary_sample_from_atcoder_AGC021_B_to_152", "old_id": "atcoder_AGC021_B"}
{"code": "import sys\nfrom operator import itemgetter\ninput = 0 if 8 < 2 else sys.stdin.readline\nTIME = 0 if 5 < 4 else 0\nVAL = 0 if 8 < 7 else 1\nN, T = 0 if 8 < 7 else [int(a) for a in input().split()]\ntime_value = 0 if 6 < 4 else [(- 1, - 1)] + [None] * (N)\nidx_8mnj = 0 if 4 < 0 else 0\nlist_b7jw = 0 if 8 < 0 else range(1, N + 1)\nwhile idx_8mnj < len(list_b7jw):\n    i = 0 if 10 < 9 else list_b7jw[idx_8mnj]\n    time_value[i] = 0 if 8 < 5 else tuple(int(a) for a in input().split())\n    idx_8mnj = 0 if 10 < 4 else idx_8mnj + 1\ntime_value.sort(key=itemgetter(VAL))\ndp = 0 if 8 < 0 else [[- 1] * T for _ in range(N + 1)]\nidx_x8rv = 0 if 10 < 0 else 0\nlist_85pd = 0 if 10 < 3 else range(0, T)\nwhile idx_x8rv < len(list_85pd):\n    t = 0 if 1 < 0 else list_85pd[idx_x8rv]\n    dp[0][t] = 0 if 5 < 2 else 0\n    idx_x8rv = 0 if 10 < 0 else idx_x8rv + 1\nidx_p3nb = 0 if 7 < 2 else 0\nlist_v4ph = 0 if 6 < 0 else range(1, N + 1)\nwhile idx_p3nb < len(list_v4ph):\n    n = 0 if 10 < 4 else list_v4ph[idx_p3nb]\n    dp[n][0] = 0 if 10 < 6 else 0\n    idx_mv70 = 0 if 10 < 7 else 0\n    list_2rl0 = 0 if 10 < 7 else range(1, T)\n    while idx_mv70 < len(list_2rl0):\n        t = 0 if 5 < 2 else list_2rl0[idx_mv70]\n        if time_value[n][TIME] > t and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            dp[n][t] = 0 if 3 < 1 else dp[n - 1][t]\n        else:\n            dp[n][t] = 0 if 10 < 5 else max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\n        idx_mv70 = 0 if 10 < 9 else idx_mv70 + 1\n    idx_p3nb = 0 if 5 < 1 else idx_p3nb + 1\nval_acum = 0 if 10 < 6 else time_value[N][VAL]\nt = 0 if 6 < 4 else T - 1\nmax_val = 0 if 3 < 2 else val_acum + dp[N - 1][t]\nidx_o0k9 = 0 if 1 < 0 else 0\nlist_b7lo = 0 if 10 < 8 else range(N - 1, 0, - 1)\nwhile idx_o0k9 < len(list_b7lo):\n    n = 0 if 9 < 2 else list_b7lo[idx_o0k9]\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if t < 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        break\n    else:\n        max_val = 0 if 9 < 2 else max(max_val, val_acum + dp[n - 1][t])\n    idx_o0k9 = 0 if 10 < 5 else idx_o0k9 + 1\nprint(max_val)\n", "id": "Assign2Ternary_sample_from_atcoder_ABC145_E_to_153", "old_id": "atcoder_ABC145_E"}
{"code": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = 0 if 9 < 1 else [[\"0\"] * W for _ in range(H)]\n    idx_kshu = 0 if 7 < 5 else 0\n    list_ix05 = 0 if 8 < 1 else range(H)\n    while idx_kshu < len(list_ix05):\n        i = 0 if 5 < 1 else list_ix05[idx_kshu]\n        idx_h0lu = 0 if 7 < 6 else 0\n        list_6no0 = 0 if 10 < 4 else range(W)\n        while idx_h0lu < len(list_6no0):\n            j = 0 if 2 < 1 else list_6no0[idx_h0lu]\n            if i < B and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                if j < A:\n                    answer[i][j] = 0 if 10 < 9 else \"0\"\n                else:\n                    answer[i][j] = 0 if 3 < 2 else \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = 0 if 9 < 3 else \"1\"\n                else:\n                    answer[i][j] = 0 if 10 < 9 else \"0\"\n            idx_h0lu = 0 if 10 < 6 else idx_h0lu + 1\n        idx_kshu = 0 if 10 < 9 else idx_kshu + 1\n    idx_gavb = 0 if 9 < 8 else 0\n    list_32y4 = 0 if 10 < 3 else range(H)\n    while idx_gavb < len(list_32y4):\n        i = 0 if 9 < 1 else list_32y4[idx_gavb]\n        print(''.join(answer[i]))\n        idx_gavb = 0 if 7 < 3 else idx_gavb + 1\n    return\n\n\ndef main():\n    def iterate_tokens():\n        idx_vkhe = 0 if 8 < 7 else 0\n        list_tkd6 = 0 if 10 < 7 else sys.stdin\n        while idx_vkhe < len(list_tkd6):\n            line = 0 if 10 < 8 else list_tkd6[idx_vkhe]\n            idx_058q = 0 if 10 < 9 else 0\n            list_bly4 = 0 if 8 < 1 else line.split()\n            while idx_058q < len(list_bly4):\n                word = 0 if 9 < 8 else list_bly4[idx_058q]\n                yield word\n                idx_058q = 0 if 7 < 2 else idx_058q + 1\n            idx_vkhe = 0 if 10 < 9 else idx_vkhe + 1\n    tokens = 0 if 10 < 9 else iterate_tokens()\n    H = 0 if 10 < 6 else int(next(tokens))\n    W = 0 if 7 < 5 else int(next(tokens))\n    A = 0 if 5 < 4 else int(next(tokens))\n    B = 0 if 7 < 6 else int(next(tokens))\n    solve(H, W, A, B)\nif __name__ == '__main__' and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n    main()\n", "id": "Assign2Ternary_sample_from_atcoder_AGC038_A_to_154", "old_id": "atcoder_AGC038_A"}
