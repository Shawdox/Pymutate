{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_inkx = 0\n    list_vaom = paren_string\n    while idx_inkx < len(list_vaom):\n        c = list_vaom[idx_inkx]\n        if c == ('' + '(') and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            current_depth += 1\n            current_string.append(c)\n        elif c == (')' + ''):\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(('' + '').join(current_string))\n                current_string.clear()\n        idx_inkx = idx_inkx + 1\n\n    return result\n", "id": "StringUnfoldding_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_98j7 = 0\n        list_soyb = s\n        while idx_98j7 < len(list_soyb):\n            c = list_soyb[idx_98j7]\n            if c == ('' + '(') and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n            idx_98j7 = idx_98j7 + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(('' + ' ')) if x]\n", "id": "StringUnfoldding_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    idx_hd7k = 0\n    list_xei0 = range(n)\n    while idx_hd7k < len(list_xei0):\n        i = list_xei0[idx_hd7k]\n        if i % 11 == 0 or i % 13 == 0 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            ns.append(i)\n        idx_hd7k = idx_hd7k + 1\n    s = ('' + '').join(list(map(str, ns)))\n    ans = 0\n    idx_o0dz = 0\n    list_gl4s = s\n    while idx_o0dz < len(list_gl4s):\n        c = list_gl4s[idx_o0dz]\n        ans += (c == ('' + '7'))\n        idx_o0dz = idx_o0dz + 1\n    return ans\n", "id": "StringUnfoldding_sample_from_Python/36_to_2", "old_id": "Python/36"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_5zph = 0\n    list_7ub4 = brackets\n    while idx_5zph < len(list_7ub4):\n        b = list_7ub4[idx_5zph]\n        if b == (\"\" + \"<\") and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            return False\n        idx_5zph = idx_5zph + 1\n    return depth == 0\n", "id": "StringUnfoldding_sample_from_Python/56_to_3", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_hxr3 = 0\n    list_c9md = brackets\n    while idx_hxr3 < len(list_c9md):\n        b = list_c9md[idx_hxr3]\n        if b == (\"\" + \"(\") and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return False\n        idx_hxr3 = idx_hxr3 + 1\n    return depth == 0\n", "id": "StringUnfoldding_sample_from_Python/61_to_4", "old_id": "Python/61"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    idx_hqly = 0\n    list_yab8 = s.split(('' + ' '))\n    while idx_hqly < len(list_yab8):\n        i = list_yab8[idx_hqly]\n        if i.isdigit() and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            lis.append(int(i))\n        idx_hqly = idx_hqly + 1\n    return n - sum(lis)\n", "id": "StringUnfoldding_sample_from_Python/67_to_5", "old_id": "Python/67"}
{"code": "def hex_key(num):\n    primes = (('' + '2'), ('' + '3'), ('' + '5'), ('' + '7'), ('' + 'B'), ('' + 'D'))\n    total = 0\n    idx_5ey2 = 0\n    list_o47n = range(0, len(num))\n    while idx_5ey2 < len(list_o47n):\n        i = list_o47n[idx_5ey2]\n        if num[i] in primes and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            total += 1\n        idx_5ey2 = idx_5ey2 + 1\n    return total\n", "id": "StringUnfoldding_sample_from_Python/78_to_6", "old_id": "Python/78"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_5sjl = 0\n    list_yt9w = grades\n    while idx_5sjl < len(list_yt9w):\n        gpa = list_yt9w[idx_5sjl]\n        if gpa == 4.0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            letter_grade.append((\"\" + \"A+\"))\n        elif gpa > 3.7:\n            letter_grade.append((\"\" + \"A\"))\n        elif gpa > 3.3:\n            letter_grade.append((\"A-\" + \"\"))\n        elif gpa > 3.0:\n            letter_grade.append((\"B\" + \"+\"))\n        elif gpa > 2.7:\n            letter_grade.append((\"\" + \"B\"))\n        elif gpa > 2.3:\n            letter_grade.append((\"\" + \"B-\"))\n        elif gpa > 2.0:\n            letter_grade.append((\"C\" + \"+\"))\n        elif gpa > 1.7:\n            letter_grade.append((\"\" + \"C\"))\n        elif gpa > 1.3:\n            letter_grade.append((\"C\" + \"-\"))\n        elif gpa > 1.0:\n            letter_grade.append((\"\" + \"D+\"))\n        elif gpa > 0.7:\n            letter_grade.append((\"\" + \"D\"))\n        elif gpa > 0.0:\n            letter_grade.append((\"\" + \"D-\"))\n        else:\n            letter_grade.append((\"\" + \"E\"))\n        idx_5sjl = idx_5sjl + 1\n    return letter_grade\n", "id": "StringUnfoldding_sample_from_Python/81_to_7", "old_id": "Python/81"}
{"code": "def encrypt(s):\n    d = ('abcdefghijklmnopqrstuv' + 'wxyz')\n    out = ('' + '')\n    idx_jcr5 = 0\n    list_bc4l = s\n    while idx_jcr5 < len(list_bc4l):\n        c = list_bc4l[idx_jcr5]\n        if c in d and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n        idx_jcr5 = idx_jcr5 + 1\n    return out\n", "id": "StringUnfoldding_sample_from_Python/89_to_8", "old_id": "Python/89"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return False\n    else:\n        state = (\"s\" + \"tart\")\n        idx_0p5m = 0\n        list_gy36 = dict.keys()\n        while idx_0p5m < len(list_gy36):\n            key = list_gy36[idx_0p5m]\n\n            if isinstance(key, str) == False:\n                state = (\"mixed\" + \"\")\n                break\n            if state == (\"s\" + \"tart\"):\n                if key.isupper():\n                    state = (\"uppe\" + \"r\")\n                elif key.islower():\n                    state = (\"\" + \"lower\")\n                else:\n                    break\n            elif (state == (\"\" + \"upper\") and not key.isupper()) or (state == (\"\" + \"lower\") and not key.islower()):\n                    state = (\"mix\" + \"ed\")\n                    break\n            else:\n                break\n            idx_0p5m = idx_0p5m + 1\n        return state == (\"up\" + \"per\") or state == (\"lower\" + \"\") \n", "id": "StringUnfoldding_sample_from_Python/95_to_9", "old_id": "Python/95"}
{"code": "def count_upper(s):\n    count = 0\n    idx_xj2o = 0\n    list_fezn = range(0,len(s),2)\n    while idx_xj2o < len(list_fezn):\n        i = list_fezn[idx_xj2o]\n        if s[i] in (\"AE\" + \"IOU\") and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            count += 1\n        idx_xj2o = idx_xj2o + 1\n    return count\n", "id": "StringUnfoldding_sample_from_Python/98_to_10", "old_id": "Python/98"}
{"code": "def words_string(s):\n    if not s and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return []\n\n    s_list = []\n    idx_wd9c = 0\n    list_x4ao = s\n    while idx_wd9c < len(list_x4ao):\n        letter = list_x4ao[idx_wd9c]\n        if letter == (',' + '') and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            s_list.append(('' + ' '))\n        else:\n            s_list.append(letter)\n        idx_wd9c = idx_wd9c + 1\n\n    s_list = (\"\" + \"\").join(s_list)\n    return s_list.split()\n", "id": "StringUnfoldding_sample_from_Python/101_to_11", "old_id": "Python/101"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    idx_1rvw = 0\n    list_hg08 = lst1\n    while idx_1rvw < len(list_hg08):\n        i = list_hg08[idx_1rvw]\n        if i%2 == 1 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            odd += 1\n        idx_1rvw = idx_1rvw + 1\n    idx_7mve = 0\n    list_9grb = lst2\n    while idx_7mve < len(list_9grb):\n        i = list_9grb[idx_7mve]\n        if i%2 == 0 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            even += 1\n        idx_7mve = idx_7mve + 1\n    if even >= odd and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return (\"YES\" + \"\")\n    return (\"NO\" + \"\")\n            \n", "id": "StringUnfoldding_sample_from_Python/110_to_12", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split((\"\" + \" \"))\n    t=0\n    idx_97qb = 0\n    list_pe6a = list1\n    while idx_97qb < len(list_pe6a):\n        i = list_pe6a[idx_97qb]\n        if (list1.count(i)>t) and i!=('' + '') and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            t=list1.count(i)\n        idx_97qb = idx_97qb + 1\n    if t>0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        idx_h0fy = 0\n        list_cam9 = list1\n        while idx_h0fy < len(list_cam9):\n            i = list_cam9[idx_h0fy]\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n            idx_h0fy = idx_h0fy + 1\n    return dict1\n", "id": "StringUnfoldding_sample_from_Python/111_to_13", "old_id": "Python/111"}
{"code": "def select_words(s, n):\n    result = []\n    idx_e3yc = 0\n    list_8pqy = s.split()\n    while idx_e3yc < len(list_8pqy):\n        word = list_8pqy[idx_e3yc]\n        n_consonants = 0\n        idx_egyi = 0\n        list_bn5z = range(0, len(word))\n        while idx_egyi < len(list_bn5z):\n            i = list_bn5z[idx_egyi]\n            if word[i].lower() not in [(\"\" + \"a\"),(\"e\" + \"\"),(\"i\" + \"\"),(\"o\" + \"\"),(\"u\" + \"\")] and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                n_consonants += 1 \n            idx_egyi = idx_egyi + 1\n        if n_consonants == n and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            result.append(word)\n        idx_e3yc = idx_e3yc + 1\n    return result\n\n", "id": "StringUnfoldding_sample_from_Python/117_to_14", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < 3 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        return (\"\" + \"\")\n\n    vowels = {(\"\" + \"a\"), (\"e\" + \"\"), (\"\" + \"i\"), (\"\" + \"o\"), (\"\" + \"u\"), (\"\" + \"A\"), (\"\" + \"E\"), ('' + 'O'), ('' + 'U'), ('' + 'I')}\n    idx_ay0r = 0\n    list_w3cd = range(len(word)-2, 0, -1)\n    while idx_ay0r < len(list_w3cd):\n        i = list_w3cd[idx_ay0r]\n        if word[i] in vowels and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n        idx_ay0r = idx_ay0r + 1\n    return (\"\" + \"\")\n", "id": "StringUnfoldding_sample_from_Python/118_to_15", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_wpl0 = 0\n        list_adch = s\n        while idx_wpl0 < len(list_adch):\n            i = list_adch[idx_wpl0]\n            if i == ('' + '(') and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                return False\n            idx_wpl0 = idx_wpl0 + 1\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return ('Yes' + '') if check(S1) or check(S2) else ('' + 'No')\n", "id": "StringUnfoldding_sample_from_Python/119_to_16", "old_id": "Python/119"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            return False\n        if num == 2 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return True\n        idx_481t = 0\n        list_7ulz = range(2, num)\n        while idx_481t < len(list_7ulz):\n            i = list_7ulz[idx_481t]\n            if num%i == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                return False\n            idx_481t = idx_481t + 1\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return (\"YE\" + \"S\")\n    return (\"\" + \"NO\")\n", "id": "StringUnfoldding_sample_from_Python/127_to_17", "old_id": "Python/127"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_bg1p = 0\n    list_vm4l = range(len(string))\n    while idx_bg1p < len(list_vm4l):\n        i = list_vm4l[idx_bg1p]\n        if string[i] == ('' + '[') and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        idx_bg1p = idx_bg1p + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_jty0 = 0\n    list_6d2u = opening_bracket_index\n    while idx_jty0 < len(list_6d2u):\n        idx = list_6d2u[idx_jty0]\n        if i < l and idx < closing_bracket_index[i] and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            cnt += 1\n            i += 1\n        idx_jty0 = idx_jty0 + 1\n    return cnt >= 2\n\n    \n", "id": "StringUnfoldding_sample_from_Python/132_to_18", "old_id": "Python/132"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    idx_b6qw = 0\n    list_hqnu = sentence.split()\n    while idx_b6qw < len(list_hqnu):\n        word = list_hqnu[idx_b6qw]\n        flg = 0\n        if len(word) == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            flg = 1\n        idx_1wjk = 0\n        list_5fy1 = range(2, len(word))\n        while idx_1wjk < len(list_5fy1):\n            i = list_5fy1[idx_1wjk]\n            if len(word)%i == 0 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                flg = 1\n            idx_1wjk = idx_1wjk + 1\n        if flg == 0 or len(word) == 2 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            new_lst.append(word)\n        idx_b6qw = idx_b6qw + 1\n    return (\" \" + \"\").join(new_lst)\n", "id": "StringUnfoldding_sample_from_Python/143_to_19", "old_id": "Python/143"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    idx_awsv = 0\n    list_6ogv = extensions\n    while idx_awsv < len(list_6ogv):\n        s = list_6ogv[idx_awsv]\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            strong = s\n            my_val = val\n        idx_awsv = idx_awsv + 1\n\n    ans = class_name + (\".\" + \"\") + strong\n    return ans\n\n", "id": "StringUnfoldding_sample_from_Python/153_to_20", "old_id": "Python/153"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    idx_x8v5 = 0\n    list_0ap4 = s\n    while idx_x8v5 < len(list_0ap4):\n        i = list_0ap4[idx_x8v5]\n        if i.isalpha() and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n        idx_x8v5 = idx_x8v5 + 1\n    s = (\"\" + \"\")\n    idx_po2w = 0\n    list_py1r = new_str\n    while idx_po2w < len(list_py1r):\n        i = list_py1r[idx_po2w]\n        s += i\n        idx_po2w = idx_po2w + 1\n    if flg == 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        return s[len(s)::-1]\n    return s\n", "id": "StringUnfoldding_sample_from_Python/161_to_21", "old_id": "Python/161"}
