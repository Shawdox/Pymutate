{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    var_uzv = 3\n    idx_7no8 = 0\n    list_x73v = paren_string\n    while idx_7no8 < len(list_x73v):\n        c = list_x73v[idx_7no8]\n        if not c == '(':\n            if c == ')':\n                current_depth -= 1\n                current_string.append(c)\n\n                if current_depth == 0:\n                    result.append(''.join(current_string))\n                    current_string.clear()\n        else:\n            current_depth += 1\n            current_string.append(c)\n        idx_7no8 = idx_7no8 + 1\n\n    return result\n", "id": "Add_IndependentVar_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_kp9n = 0\n        list_skl5 = s\n        while idx_kp9n < len(list_skl5):\n            c = list_skl5[idx_kp9n]\n            if not c == '(':\n                depth -= 1\n            else:\n                depth += 1\n                max_depth = max(depth, max_depth)\n            idx_kp9n = idx_kp9n + 1\n\n        return max_depth\n    var_mzw = 94\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "Add_IndependentVar_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n    idx_yquo = 0\n    var_7ju = 24\n    list_934r = numbers\n    while idx_yquo < len(list_934r):\n        n = list_934r[idx_yquo]\n        if not running_max is None:\n            running_max = max(running_max, n)\n        else:\n            running_max = n\n\n        result.append(running_max)\n        idx_yquo = idx_yquo + 1\n\n    return result\n", "id": "Add_IndependentVar_sample_from_Python/9_to_2", "old_id": "Python/9"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_17ku = 0\n    list_90cf = brackets\n    while idx_17ku < len(list_90cf):\n        b = list_90cf[idx_17ku]\n        if not b == \"<\":\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n        idx_17ku = idx_17ku + 1\n    return depth == 0\n    var_l5c = 8\n", "id": "Add_IndependentVar_sample_from_Python/56_to_3", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_t24u = 0\n    list_lda0 = brackets\n    var_z6l = 85\n    while idx_t24u < len(list_lda0):\n        b = list_lda0[idx_t24u]\n        if not b == \"(\":\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n        idx_t24u = idx_t24u + 1\n    return depth == 0\n", "id": "Add_IndependentVar_sample_from_Python/61_to_4", "old_id": "Python/61"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    idx_jzm3 = 0\n    list_zbcy = lst1\n    while idx_jzm3 < len(list_zbcy):\n        st = list_zbcy[idx_jzm3]\n        l1 += len(st)\n        idx_jzm3 = idx_jzm3 + 1\n    var_flu = 70\n    \n    l2 = 0\n    idx_9hea = 0\n    list_wyei = lst2\n    while idx_9hea < len(list_wyei):\n        st = list_wyei[idx_9hea]\n        l2 += len(st)\n        idx_9hea = idx_9hea + 1\n    if not l1 <= l2:\n        return lst2\n    else:\n        return lst1\n", "id": "Add_IndependentVar_sample_from_Python/74_to_5", "old_id": "Python/74"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_7jo0 = 0\n    list_i5r8 = grades\n    while idx_7jo0 < len(list_i5r8):\n        gpa = list_i5r8[idx_7jo0]\n        if not gpa == 4.0:\n            if gpa > 3.7:\n                letter_grade.append(\"A\")\n            elif gpa > 3.3:\n                letter_grade.append(\"A-\")\n            elif gpa > 3.0:\n                letter_grade.append(\"B+\")\n            elif gpa > 2.7:\n                letter_grade.append(\"B\")\n            elif gpa > 2.3:\n                letter_grade.append(\"B-\")\n            elif gpa > 2.0:\n                letter_grade.append(\"C+\")\n            elif gpa > 1.7:\n                letter_grade.append(\"C\")\n            elif gpa > 1.3:\n                letter_grade.append(\"C-\")\n            elif gpa > 1.0:\n                letter_grade.append(\"D+\")\n            elif gpa > 0.7:\n                letter_grade.append(\"D\")\n            elif gpa > 0.0:\n                letter_grade.append(\"D-\")\n            else:\n                letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"A+\")\n        idx_7jo0 = idx_7jo0 + 1\n    var_8fc = 3\n    return letter_grade\n", "id": "Add_IndependentVar_sample_from_Python/81_to_6", "old_id": "Python/81"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_jeg3 = 0\n    var_b6m = 86\n    list_2pnm = s\n    while idx_jeg3 < len(list_2pnm):\n        c = list_2pnm[idx_jeg3]\n        if not c in d:\n            out += c\n        else:\n            out += d[(d.index(c)+2*2) % 26]\n        idx_jeg3 = idx_jeg3 + 1\n    return out\n", "id": "Add_IndependentVar_sample_from_Python/89_to_7", "old_id": "Python/89"}
{"code": "def check_dict_case(dict):\n    if not len(dict.keys()) == 0:\n        state = \"start\"\n        idx_52ns = 0\n        list_jysq = dict.keys()\n        while idx_52ns < len(list_jysq):\n            key = list_jysq[idx_52ns]\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n            idx_52ns = idx_52ns + 1\n        return state == \"upper\" or state == \"lower\" \n    else:\n        return False\n    var_0yi = 66\n", "id": "Add_IndependentVar_sample_from_Python/95_to_8", "old_id": "Python/95"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n    var_8on = 60\n    idx_6ot9 = 0\n    list_g1ay = s\n    while idx_6ot9 < len(list_g1ay):\n        letter = list_g1ay[idx_6ot9]\n        if not letter == ',':\n            s_list.append(letter)\n        else:\n            s_list.append(' ')\n        idx_6ot9 = idx_6ot9 + 1\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "Add_IndependentVar_sample_from_Python/101_to_9", "old_id": "Python/101"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    var_1tn = 3\n    odd_palindrome_count = 0\n    idx_14ju = 0\n    list_2wdx = range(1, n+1)\n    while idx_14ju < len(list_2wdx):\n        i = list_2wdx[idx_14ju]\n        if not i%2 == 1 and is_palindrome(i):\n            if i%2 == 0 and is_palindrome(i):\n                even_palindrome_count += 1\n        else:\n                odd_palindrome_count += 1\n        idx_14ju = idx_14ju + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "Add_IndependentVar_sample_from_Python/107_to_10", "old_id": "Python/107"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_9gkc = 0\n        list_0gep = s\n        while idx_9gkc < len(list_0gep):\n            i = list_0gep[idx_9gkc]\n            if not i == '(':\n                val = val - 1\n            else:\n                val = val + 1\n            if val < 0:\n                return False\n            idx_9gkc = idx_9gkc + 1\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    var_h6i = 60\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "Add_IndependentVar_sample_from_Python/119_to_11", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    var_7lq = 94\n    idx_p5a1 = 0\n    list_brm6 = lst\n    while idx_p5a1 < len(list_brm6):\n        i = list_brm6[idx_p5a1]\n        count_digit[i]+=1 \n        idx_p5a1 = idx_p5a1 + 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    else:\n        return True\n", "id": "Add_IndependentVar_sample_from_Python/126_to_12", "old_id": "Python/126"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    idx_lbq9 = 0\n    list_30qe = range(n)\n    while idx_lbq9 < len(list_30qe):\n        i = list_30qe[idx_lbq9]\n        idx_aeo8 = 0\n        list_ba7d = range(n)\n        while idx_aeo8 < len(list_ba7d):\n            j = list_ba7d[idx_aeo8]\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n            idx_aeo8 = idx_aeo8 + 1\n        idx_lbq9 = idx_lbq9 + 1\n    var_kcs = 16\n\n    ans = []\n    idx_96p5 = 0\n    list_t7i5 = range(k)\n    while idx_96p5 < len(list_t7i5):\n        i = list_t7i5[idx_96p5]\n        if not i % 2 == 0:\n            ans.append(val)\n        else:\n            ans.append(1)\n        idx_96p5 = idx_96p5 + 1\n    return ans\n", "id": "Add_IndependentVar_sample_from_Python/129_to_13", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    var_5br = 56\n    idx_q8uv = 0\n    list_3flx = range(2, n + 1)\n    while idx_q8uv < len(list_3flx):\n        i = list_3flx[idx_q8uv]\n        if not i % 2 == 0:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n        else:\n            my_tri.append(i / 2 + 1)\n        idx_q8uv = idx_q8uv + 1\n    return my_tri\n", "id": "Add_IndependentVar_sample_from_Python/130_to_14", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 1\n    var_p70 = 23\n    odd_count = 0\n    idx_d4mc = 0\n    list_dzyf = str(n)\n    while idx_d4mc < len(list_dzyf):\n        digit = list_dzyf[idx_d4mc]\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n        idx_d4mc = idx_d4mc + 1\n    if not odd_count ==0:\n        return product\n    else:\n        return 0\n", "id": "Add_IndependentVar_sample_from_Python/131_to_15", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_1cbj = 0\n    list_4km0 = range(len(string))\n    while idx_1cbj < len(list_4km0):\n        i = list_4km0[idx_1cbj]\n        if not string[i] == '[':\n            closing_bracket_index.append(i)\n        else:\n            opening_bracket_index.append(i)\n        idx_1cbj = idx_1cbj + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    var_l78 = 77\n    l = len(closing_bracket_index)\n    idx_8aub = 0\n    list_ju6p = opening_bracket_index\n    while idx_8aub < len(list_ju6p):\n        idx = list_ju6p[idx_8aub]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n        idx_8aub = idx_8aub + 1\n    return cnt >= 2\n", "id": "Add_IndependentVar_sample_from_Python/132_to_16", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    idx_0fgm = 0\n    list_rz1n = range(len(lst))\n    while idx_0fgm < len(list_rz1n):\n        i = list_rz1n[idx_0fgm]\n        if not i %3 == 0:\n            if i % 4 == 0 and i%3 != 0:\n                result.append(lst[i]**3)\n            else:\n                result.append(lst[i])\n        else:\n            result.append(lst[i]**2)\n        idx_0fgm = idx_0fgm + 1\n    var_7qb = 51\n    return sum(result)\n", "id": "Add_IndependentVar_sample_from_Python/142_to_17", "old_id": "Python/142"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    var_od1 = 39\n    idx_a6p2 = 0\n    list_1dfl = str(abs(num))\n    while idx_a6p2 < len(list_1dfl):\n        i = list_1dfl[idx_a6p2]\n        if not int(i)%2==0:\n            odd_count +=1\n        else:\n            even_count +=1\n        idx_a6p2 = idx_a6p2 + 1\n    return (even_count, odd_count)\n", "id": "Add_IndependentVar_sample_from_Python/155_to_18", "old_id": "Python/155"}
