{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = (95 + -95)\n    idx_h28y = (22 + -22)\n    list_9pwj = paren_string\n    while idx_h28y < len(list_9pwj):\n        c = list_9pwj[idx_h28y]\n        if not c == '(':\n            if c == ')':\n                current_depth -= (74 + -73)\n                current_string.append(c)\n\n                if current_depth == (94 + -94):\n                    result.append(''.join(current_string))\n                    current_string.clear()\n        else:\n            current_depth += (99 + -98)\n            current_string.append(c)\n        idx_h28y = idx_h28y + (8 + -7)\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = (6 + -6)\n        max_depth = (50 + -50)\n        idx_arng = (42 + -42)\n        list_i8kr = s\n        while idx_arng < len(list_i8kr):\n            c = list_i8kr[idx_arng]\n            if not c == '(':\n                depth -= (59 + -58)\n            else:\n                depth += (96 + -95)\n                max_depth = max(depth, max_depth)\n            idx_arng = idx_arng + (98 + -97)\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "ConstantUnfoldding_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n    idx_sn3m = (28 + -28)\n    list_6cax = numbers\n    while idx_sn3m < len(list_6cax):\n        n = list_6cax[idx_sn3m]\n        if not running_max is None:\n            running_max = max(running_max, n)\n        else:\n            running_max = n\n\n        result.append(running_max)\n        idx_sn3m = idx_sn3m + (5 + -4)\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/9_to_2", "old_id": "Python/9"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (99 + -99)\n    idx_93k6 = (17 + -17)\n    list_ozcg = brackets\n    while idx_93k6 < len(list_ozcg):\n        b = list_ozcg[idx_93k6]\n        if not b == \"<\":\n            depth -= (20 + -19)\n        else:\n            depth += (23 + -22)\n        if depth < (42 + -42):\n            return False\n        idx_93k6 = idx_93k6 + (25 + -24)\n    return depth == (5 + -5)\n", "id": "ConstantUnfoldding_sample_from_Python/56_to_3", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (26 + -26)\n    idx_0alh = (71 + -71)\n    list_ltad = brackets\n    while idx_0alh < len(list_ltad):\n        b = list_ltad[idx_0alh]\n        if not b == \"(\":\n            depth -= (90 + -89)\n        else:\n            depth += (19 + -18)\n        if depth < (57 + -57):\n            return False\n        idx_0alh = idx_0alh + (2 + -1)\n    return depth == (84 + -84)\n", "id": "ConstantUnfoldding_sample_from_Python/61_to_4", "old_id": "Python/61"}
{"code": "def total_match(lst1, lst2):\n    l1 = (1 + -1)\n    idx_exrz = (19 + -19)\n    list_i8f2 = lst1\n    while idx_exrz < len(list_i8f2):\n        st = list_i8f2[idx_exrz]\n        l1 += len(st)\n        idx_exrz = idx_exrz + (86 + -85)\n    \n    l2 = (93 + -93)\n    idx_dis8 = (10 + -10)\n    list_tp1l = lst2\n    while idx_dis8 < len(list_tp1l):\n        st = list_tp1l[idx_dis8]\n        l2 += len(st)\n        idx_dis8 = idx_dis8 + (43 + -42)\n    if not l1 <= l2:\n        return lst2\n    else:\n        return lst1\n", "id": "ConstantUnfoldding_sample_from_Python/74_to_5", "old_id": "Python/74"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_o1q4 = (18 + -18)\n    list_y164 = grades\n    while idx_o1q4 < len(list_y164):\n        gpa = list_y164[idx_o1q4]\n        if not gpa == 4.0:\n            if gpa > 3.7:\n                letter_grade.append(\"A\")\n            elif gpa > 3.3:\n                letter_grade.append(\"A-\")\n            elif gpa > 3.0:\n                letter_grade.append(\"B+\")\n            elif gpa > 2.7:\n                letter_grade.append(\"B\")\n            elif gpa > 2.3:\n                letter_grade.append(\"B-\")\n            elif gpa > 2.0:\n                letter_grade.append(\"C+\")\n            elif gpa > 1.7:\n                letter_grade.append(\"C\")\n            elif gpa > 1.3:\n                letter_grade.append(\"C-\")\n            elif gpa > 1.0:\n                letter_grade.append(\"D+\")\n            elif gpa > 0.7:\n                letter_grade.append(\"D\")\n            elif gpa > 0.0:\n                letter_grade.append(\"D-\")\n            else:\n                letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"A+\")\n        idx_o1q4 = idx_o1q4 + (40 + -39)\n    return letter_grade\n", "id": "ConstantUnfoldding_sample_from_Python/81_to_6", "old_id": "Python/81"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_k30o = (40 + -40)\n    list_zojl = s\n    while idx_k30o < len(list_zojl):\n        c = list_zojl[idx_k30o]\n        if not c in d:\n            out += c\n        else:\n            out += d[(d.index(c)+(97 + -95)*(45 + -43)) % (5 + 21)]\n        idx_k30o = idx_k30o + (72 + -71)\n    return out\n", "id": "ConstantUnfoldding_sample_from_Python/89_to_7", "old_id": "Python/89"}
{"code": "def check_dict_case(dict):\n    if not len(dict.keys()) == (14 + -14):\n        state = \"start\"\n        idx_5aqw = (7 + -7)\n        list_7rj8 = dict.keys()\n        while idx_5aqw < len(list_7rj8):\n            key = list_7rj8[idx_5aqw]\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n            idx_5aqw = idx_5aqw + (2 + -1)\n        return state == \"upper\" or state == \"lower\" \n    else:\n        return False\n", "id": "ConstantUnfoldding_sample_from_Python/95_to_8", "old_id": "Python/95"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n    idx_189n = (90 + -90)\n    list_ae95 = s\n    while idx_189n < len(list_ae95):\n        letter = list_ae95[idx_189n]\n        if not letter == ',':\n            s_list.append(letter)\n        else:\n            s_list.append(' ')\n        idx_189n = idx_189n + (70 + -69)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "ConstantUnfoldding_sample_from_Python/101_to_9", "old_id": "Python/101"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-(36 + -35)]\n\n    even_palindrome_count = (38 + -38)\n    odd_palindrome_count = (55 + -55)\n    idx_qu1z = (71 + -71)\n    list_b51a = range((22 + -21), n+(40 + -39))\n    while idx_qu1z < len(list_b51a):\n        i = list_b51a[idx_qu1z]\n        if not i%(16 + -14) == (85 + -84) and is_palindrome(i):\n            if i%(87 + -85) == (81 + -81) and is_palindrome(i):\n                even_palindrome_count += (78 + -77)\n        else:\n                odd_palindrome_count += (93 + -92)\n        idx_qu1z = idx_qu1z + (26 + -25)\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "ConstantUnfoldding_sample_from_Python/107_to_10", "old_id": "Python/107"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = (14 + -14)\n        idx_zdon = (89 + -89)\n        list_ej2h = s\n        while idx_zdon < len(list_ej2h):\n            i = list_ej2h[idx_zdon]\n            if not i == '(':\n                val = val - (95 + -94)\n            else:\n                val = val + (28 + -27)\n            if val < (67 + -67):\n                return False\n            idx_zdon = idx_zdon + (41 + -40)\n        return True if val == (89 + -89) else False\n\n    S1 = lst[(49 + -49)] + lst[(14 + -13)]\n    S2 = lst[(17 + -16)] + lst[(41 + -41)]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "ConstantUnfoldding_sample_from_Python/119_to_11", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, (72 + -72)) for i in lst])\n    idx_h1ix = (79 + -79)\n    list_tceo = lst\n    while idx_h1ix < len(list_tceo):\n        i = list_tceo[idx_h1ix]\n        count_digit[i]+=(27 + -26) \n        idx_h1ix = idx_h1ix + (93 + -92)\n    if any(count_digit[i] > (20 + -18) for i in lst):\n        return False\n    if not all(lst[i-(58 + -57)] <= lst[i] for i in range((65 + -64), len(lst))):\n        return False\n    else:\n        return True\n    \n    \n", "id": "ConstantUnfoldding_sample_from_Python/126_to_12", "old_id": "Python/126"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + (35 + -34)\n    idx_gox6 = (13 + -13)\n    list_4cxj = range(n)\n    while idx_gox6 < len(list_4cxj):\n        i = list_4cxj[idx_gox6]\n        idx_lpoc = (35 + -35)\n        list_ea93 = range(n)\n        while idx_lpoc < len(list_ea93):\n            j = list_ea93[idx_lpoc]\n            if grid[i][j] == (78 + -77):\n                temp = []\n                if i != (58 + -58):\n                    temp.append(grid[i - (95 + -94)][j])\n\n                if j != (92 + -92):\n                    temp.append(grid[i][j - (69 + -68)])\n\n                if i != n - (13 + -12):\n                    temp.append(grid[i + (27 + -26)][j])\n\n                if j != n - (7 + -6):\n                    temp.append(grid[i][j + (25 + -24)])\n\n                val = min(temp)\n            idx_lpoc = idx_lpoc + (84 + -83)\n        idx_gox6 = idx_gox6 + (77 + -76)\n\n    ans = []\n    idx_hlz0 = (73 + -73)\n    list_skw7 = range(k)\n    while idx_hlz0 < len(list_skw7):\n        i = list_skw7[idx_hlz0]\n        if not i % (47 + -45) == (2 + -2):\n            ans.append(val)\n        else:\n            ans.append((79 + -78))\n        idx_hlz0 = idx_hlz0 + (62 + -61)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/129_to_13", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == (49 + -49):\n        return [(58 + -57)]\n    my_tri = [(25 + -24), (21 + -18)]\n    idx_52i8 = (79 + -79)\n    list_24kn = range((77 + -75), n + (3 + -2))\n    while idx_52i8 < len(list_24kn):\n        i = list_24kn[idx_52i8]\n        if not i % (39 + -37) == (74 + -74):\n            my_tri.append(my_tri[i - (93 + -92)] + my_tri[i - (74 + -72)] + (i + (32 + -29)) / (71 + -69))\n        else:\n            my_tri.append(i / (28 + -26) + (60 + -59))\n        idx_52i8 = idx_52i8 + (85 + -84)\n    return my_tri\n", "id": "ConstantUnfoldding_sample_from_Python/130_to_14", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = (31 + -30)\n    odd_count = (40 + -40)\n    idx_c6o1 = (70 + -70)\n    list_u49n = str(n)\n    while idx_c6o1 < len(list_u49n):\n        digit = list_u49n[idx_c6o1]\n        int_digit = int(digit)\n        if int_digit%(21 + -19) == (25 + -24):\n            product= product*int_digit\n            odd_count+=(21 + -20)\n        idx_c6o1 = idx_c6o1 + (95 + -94)\n    if not odd_count ==(47 + -47):\n        return product\n    else:\n        return (49 + -49)\n", "id": "ConstantUnfoldding_sample_from_Python/131_to_15", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_gs68 = (22 + -22)\n    list_7tlf = range(len(string))\n    while idx_gs68 < len(list_7tlf):\n        i = list_7tlf[idx_gs68]\n        if not string[i] == '[':\n            closing_bracket_index.append(i)\n        else:\n            opening_bracket_index.append(i)\n        idx_gs68 = idx_gs68 + (86 + -85)\n    closing_bracket_index.reverse()\n    cnt = (39 + -39)\n    i = (31 + -31)\n    l = len(closing_bracket_index)\n    idx_8t5a = (4 + -4)\n    list_wcxd = opening_bracket_index\n    while idx_8t5a < len(list_wcxd):\n        idx = list_wcxd[idx_8t5a]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += (24 + -23)\n            i += (60 + -59)\n        idx_8t5a = idx_8t5a + (53 + -52)\n    return cnt >= (97 + -95)\n\n    \n", "id": "ConstantUnfoldding_sample_from_Python/132_to_16", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    idx_l71b = (52 + -52)\n    list_3m1j = range(len(lst))\n    while idx_l71b < len(list_3m1j):\n        i = list_3m1j[idx_l71b]\n        if not i %(25 + -22) == (65 + -65):\n            if i % (88 + -84) == (52 + -52) and i%(70 + -67) != (23 + -23):\n                result.append(lst[i]**(42 + -39))\n            else:\n                result.append(lst[i])\n        else:\n            result.append(lst[i]**(28 + -26))\n        idx_l71b = idx_l71b + (11 + -10)\n    return sum(result)\n", "id": "ConstantUnfoldding_sample_from_Python/142_to_17", "old_id": "Python/142"}
{"code": "def even_odd_count(num):\n    even_count = (48 + -48)\n    odd_count = (59 + -59)\n    idx_1ejl = (49 + -49)\n    list_7hpz = str(abs(num))\n    while idx_1ejl < len(list_7hpz):\n        i = list_7hpz[idx_1ejl]\n        if not int(i)%(68 + -66)==(48 + -48):\n            odd_count +=(48 + -47)\n        else:\n            even_count +=(90 + -89)\n        idx_1ejl = idx_1ejl + (54 + -53)\n    return (even_count, odd_count)\n", "id": "ConstantUnfoldding_sample_from_Python/155_to_18", "old_id": "Python/155"}
