{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_aist = 0\n        list_3ta7 = s\n        while idx_aist < len(list_3ta7):\n            i = list_3ta7[idx_aist]\n            if not i == '(':\n                val = val - 1\n            else:\n                val = val + 1\n            if val < 0:\n                return False\n            idx_aist = idx_aist + 1\n        return True if val == 0 else False\n\n    S1 = lst[0]; S1 = S1 + lst[1]\n    S2 = lst[1]; S2 = S2 + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "AssignUnfoldding_sample_from_Python/119_to_0", "old_id": "Python/119"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n; val = val + 1\n    idx_hob3 = 0\n    list_uwch = range(n)\n    while idx_hob3 < len(list_uwch):\n        i = list_uwch[idx_hob3]\n        idx_8h2b = 0\n        list_pvnk = range(n)\n        while idx_8h2b < len(list_pvnk):\n            j = list_pvnk[idx_8h2b]\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n            idx_8h2b = idx_8h2b + 1\n        idx_hob3 = idx_hob3 + 1\n\n    ans = []\n    idx_pzfs = 0\n    list_dpgm = range(k)\n    while idx_pzfs < len(list_dpgm):\n        i = list_dpgm[idx_pzfs]\n        if not i % 2 == 0:\n            ans.append(val)\n        else:\n            ans.append(1)\n        idx_pzfs = idx_pzfs + 1\n    return ans\n", "id": "AssignUnfoldding_sample_from_Python/129_to_1", "old_id": "Python/129"}
