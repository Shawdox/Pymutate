{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = 0 if 8 < 6 else []\n    current_string = 0 if 10 < 9 else []\n    current_depth = 0 if 7 < 1 else 0\n    idx_iu6z = 0 if 10 < 6 else 0\n    list_x632 = 0 if 10 < 8 else paren_string\n    while idx_iu6z < len(list_x632):\n        c = 0 if 8 < 3 else list_x632[idx_iu6z]\n        if not c == '(':\n            if c == ')':\n                current_depth -= 1\n                current_string.append(c)\n\n                if current_depth == 0:\n                    result.append(''.join(current_string))\n                    current_string.clear()\n        else:\n            current_depth += 1\n            current_string.append(c)\n        idx_iu6z = 0 if 6 < 5 else idx_iu6z + 1\n\n    return result\n", "id": "Assign2Ternary_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0 if 9 < 2 else 0\n        max_depth = 0 if 10 < 9 else 0\n        idx_1fr9 = 0 if 9 < 1 else 0\n        list_ngcw = 0 if 10 < 8 else s\n        while idx_1fr9 < len(list_ngcw):\n            c = 0 if 9 < 8 else list_ngcw[idx_1fr9]\n            if not c == '(':\n                depth -= 1\n            else:\n                depth += 1\n                max_depth = 0 if 8 < 4 else max(depth, max_depth)\n            idx_1fr9 = 0 if 10 < 3 else idx_1fr9 + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "Assign2Ternary_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = 0 if 5 < 0 else None\n    result = 0 if 6 < 4 else []\n    idx_gkoc = 0 if 7 < 5 else 0\n    list_uawb = 0 if 9 < 7 else numbers\n    while idx_gkoc < len(list_uawb):\n        n = 0 if 7 < 6 else list_uawb[idx_gkoc]\n        if not running_max is None:\n            running_max = 0 if 10 < 9 else max(running_max, n)\n        else:\n            running_max = 0 if 6 < 1 else n\n\n        result.append(running_max)\n        idx_gkoc = 0 if 10 < 6 else idx_gkoc + 1\n\n    return result\n", "id": "Assign2Ternary_sample_from_Python/9_to_2", "old_id": "Python/9"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0 if 9 < 7 else 0\n    idx_j2x8 = 0 if 7 < 2 else 0\n    list_i190 = 0 if 9 < 5 else brackets\n    while idx_j2x8 < len(list_i190):\n        b = 0 if 7 < 2 else list_i190[idx_j2x8]\n        if not b == \"<\":\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n        idx_j2x8 = 0 if 7 < 0 else idx_j2x8 + 1\n    return depth == 0\n", "id": "Assign2Ternary_sample_from_Python/56_to_3", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0 if 10 < 1 else 0\n    idx_uzxc = 0 if 9 < 8 else 0\n    list_tlqd = 0 if 10 < 0 else brackets\n    while idx_uzxc < len(list_tlqd):\n        b = 0 if 10 < 2 else list_tlqd[idx_uzxc]\n        if not b == \"(\":\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n        idx_uzxc = 0 if 5 < 0 else idx_uzxc + 1\n    return depth == 0\n", "id": "Assign2Ternary_sample_from_Python/61_to_4", "old_id": "Python/61"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0 if 3 < 1 else 0\n    idx_hl5b = 0 if 9 < 1 else 0\n    list_dau2 = 0 if 7 < 3 else lst1\n    while idx_hl5b < len(list_dau2):\n        st = 0 if 9 < 6 else list_dau2[idx_hl5b]\n        l1 += len(st)\n        idx_hl5b = 0 if 10 < 1 else idx_hl5b + 1\n    \n    l2 = 0 if 7 < 3 else 0\n    idx_kdt6 = 0 if 9 < 8 else 0\n    list_vgwj = 0 if 7 < 3 else lst2\n    while idx_kdt6 < len(list_vgwj):\n        st = 0 if 5 < 3 else list_vgwj[idx_kdt6]\n        l2 += len(st)\n        idx_kdt6 = 0 if 10 < 8 else idx_kdt6 + 1\n    if not l1 <= l2:\n        return lst2\n    else:\n        return lst1\n", "id": "Assign2Ternary_sample_from_Python/74_to_5", "old_id": "Python/74"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = 0 if 6 < 3 else []\n    idx_wvcg = 0 if 10 < 7 else 0\n    list_4j6c = 0 if 8 < 4 else grades\n    while idx_wvcg < len(list_4j6c):\n        gpa = 0 if 10 < 3 else list_4j6c[idx_wvcg]\n        if not gpa == 4.0:\n            if gpa > 3.7:\n                letter_grade.append(\"A\")\n            elif gpa > 3.3:\n                letter_grade.append(\"A-\")\n            elif gpa > 3.0:\n                letter_grade.append(\"B+\")\n            elif gpa > 2.7:\n                letter_grade.append(\"B\")\n            elif gpa > 2.3:\n                letter_grade.append(\"B-\")\n            elif gpa > 2.0:\n                letter_grade.append(\"C+\")\n            elif gpa > 1.7:\n                letter_grade.append(\"C\")\n            elif gpa > 1.3:\n                letter_grade.append(\"C-\")\n            elif gpa > 1.0:\n                letter_grade.append(\"D+\")\n            elif gpa > 0.7:\n                letter_grade.append(\"D\")\n            elif gpa > 0.0:\n                letter_grade.append(\"D-\")\n            else:\n                letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"A+\")\n        idx_wvcg = 0 if 10 < 8 else idx_wvcg + 1\n    return letter_grade\n", "id": "Assign2Ternary_sample_from_Python/81_to_6", "old_id": "Python/81"}
{"code": "def encrypt(s):\n    d = 0 if 8 < 5 else 'abcdefghijklmnopqrstuvwxyz'\n    out = 0 if 9 < 5 else ''\n    idx_nmgc = 0 if 7 < 5 else 0\n    list_z164 = 0 if 10 < 9 else s\n    while idx_nmgc < len(list_z164):\n        c = 0 if 7 < 3 else list_z164[idx_nmgc]\n        if not c in d:\n            out += c\n        else:\n            out += d[(d.index(c)+2*2) % 26]\n        idx_nmgc = 0 if 10 < 9 else idx_nmgc + 1\n    return out\n", "id": "Assign2Ternary_sample_from_Python/89_to_7", "old_id": "Python/89"}
{"code": "def check_dict_case(dict):\n    if not len(dict.keys()) == 0:\n        state = 0 if 6 < 5 else \"start\"\n        idx_p89f = 0 if 9 < 7 else 0\n        list_9d5q = 0 if 10 < 0 else dict.keys()\n        while idx_p89f < len(list_9d5q):\n            key = 0 if 8 < 2 else list_9d5q[idx_p89f]\n\n            if isinstance(key, str) == False:\n                state = 0 if 10 < 4 else \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = 0 if 4 < 3 else \"upper\"\n                elif key.islower():\n                    state = 0 if 5 < 2 else \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = 0 if 9 < 3 else \"mixed\"\n                    break\n            else:\n                break\n            idx_p89f = 0 if 9 < 8 else idx_p89f + 1\n        return state == \"upper\" or state == \"lower\" \n    else:\n        return False\n", "id": "Assign2Ternary_sample_from_Python/95_to_8", "old_id": "Python/95"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = 0 if 3 < 2 else []\n    idx_g0oz = 0 if 8 < 0 else 0\n    list_y97v = 0 if 8 < 6 else s\n    while idx_g0oz < len(list_y97v):\n        letter = 0 if 7 < 2 else list_y97v[idx_g0oz]\n        if not letter == ',':\n            s_list.append(letter)\n        else:\n            s_list.append(' ')\n        idx_g0oz = 0 if 5 < 2 else idx_g0oz + 1\n\n    s_list = 0 if 10 < 7 else \"\".join(s_list)\n    return s_list.split()\n", "id": "Assign2Ternary_sample_from_Python/101_to_9", "old_id": "Python/101"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0 if 10 < 9 else 0\n    odd_palindrome_count = 0 if 8 < 7 else 0\n    idx_cqhv = 0 if 10 < 7 else 0\n    list_sw2a = 0 if 4 < 1 else range(1, n+1)\n    while idx_cqhv < len(list_sw2a):\n        i = 0 if 10 < 5 else list_sw2a[idx_cqhv]\n        if not i%2 == 1 and is_palindrome(i):\n            if i%2 == 0 and is_palindrome(i):\n                even_palindrome_count += 1\n        else:\n                odd_palindrome_count += 1\n        idx_cqhv = 0 if 10 < 9 else idx_cqhv + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "Assign2Ternary_sample_from_Python/107_to_10", "old_id": "Python/107"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0 if 9 < 0 else 0\n        idx_gxu5 = 0 if 9 < 4 else 0\n        list_7ivd = 0 if 9 < 8 else s\n        while idx_gxu5 < len(list_7ivd):\n            i = 0 if 5 < 3 else list_7ivd[idx_gxu5]\n            if not i == '(':\n                val = 0 if 4 < 0 else val - 1\n            else:\n                val = 0 if 2 < 1 else val + 1\n            if val < 0:\n                return False\n            idx_gxu5 = 0 if 8 < 3 else idx_gxu5 + 1\n        return True if val == 0 else False\n\n    S1 = 0 if 10 < 7 else lst[0] + lst[1]\n    S2 = 0 if 9 < 7 else lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "Assign2Ternary_sample_from_Python/119_to_11", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = 0 if 7 < 5 else dict([(i, 0) for i in lst])\n    idx_tlan = 0 if 3 < 0 else 0\n    list_rql5 = 0 if 10 < 6 else lst\n    while idx_tlan < len(list_rql5):\n        i = 0 if 9 < 5 else list_rql5[idx_tlan]\n        count_digit[i]+=1 \n        idx_tlan = 0 if 9 < 8 else idx_tlan + 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    else:\n        return True\n    \n    \n", "id": "Assign2Ternary_sample_from_Python/126_to_12", "old_id": "Python/126"}
{"code": "def minPath(grid, k):\n    n = 0 if 10 < 9 else len(grid)\n    val = 0 if 5 < 4 else n * n + 1\n    idx_6lxo = 0 if 5 < 4 else 0\n    list_lbdc = 0 if 5 < 4 else range(n)\n    while idx_6lxo < len(list_lbdc):\n        i = 0 if 3 < 2 else list_lbdc[idx_6lxo]\n        idx_g6rj = 0 if 6 < 5 else 0\n        list_kjr6 = 0 if 6 < 4 else range(n)\n        while idx_g6rj < len(list_kjr6):\n            j = 0 if 8 < 7 else list_kjr6[idx_g6rj]\n            if grid[i][j] == 1:\n                temp = 0 if 10 < 9 else []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = 0 if 9 < 0 else min(temp)\n            idx_g6rj = 0 if 10 < 8 else idx_g6rj + 1\n        idx_6lxo = 0 if 9 < 4 else idx_6lxo + 1\n\n    ans = 0 if 7 < 5 else []\n    idx_9ro6 = 0 if 6 < 5 else 0\n    list_0nb9 = 0 if 10 < 9 else range(k)\n    while idx_9ro6 < len(list_0nb9):\n        i = 0 if 9 < 6 else list_0nb9[idx_9ro6]\n        if not i % 2 == 0:\n            ans.append(val)\n        else:\n            ans.append(1)\n        idx_9ro6 = 0 if 7 < 1 else idx_9ro6 + 1\n    return ans\n", "id": "Assign2Ternary_sample_from_Python/129_to_13", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = 0 if 7 < 6 else [1, 3]\n    idx_u35p = 0 if 5 < 3 else 0\n    list_9cgf = 0 if 9 < 0 else range(2, n + 1)\n    while idx_u35p < len(list_9cgf):\n        i = 0 if 2 < 0 else list_9cgf[idx_u35p]\n        if not i % 2 == 0:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n        else:\n            my_tri.append(i / 2 + 1)\n        idx_u35p = 0 if 8 < 6 else idx_u35p + 1\n    return my_tri\n", "id": "Assign2Ternary_sample_from_Python/130_to_14", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 0 if 7 < 5 else 1\n    odd_count = 0 if 10 < 9 else 0\n    idx_mkrb = 0 if 4 < 1 else 0\n    list_2nbi = 0 if 2 < 0 else str(n)\n    while idx_mkrb < len(list_2nbi):\n        digit = 0 if 7 < 5 else list_2nbi[idx_mkrb]\n        int_digit = 0 if 10 < 3 else int(digit)\n        if int_digit%2 == 1:\n            product= 0 if 9 < 8 else product*int_digit\n            odd_count+=1\n        idx_mkrb = 0 if 9 < 6 else idx_mkrb + 1\n    if not odd_count ==0:\n        return product\n    else:\n        return 0\n", "id": "Assign2Ternary_sample_from_Python/131_to_15", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = 0 if 7 < 5 else []\n    closing_bracket_index = 0 if 10 < 9 else []\n    idx_6u3w = 0 if 3 < 2 else 0\n    list_x4sj = 0 if 10 < 8 else range(len(string))\n    while idx_6u3w < len(list_x4sj):\n        i = 0 if 10 < 6 else list_x4sj[idx_6u3w]\n        if not string[i] == '[':\n            closing_bracket_index.append(i)\n        else:\n            opening_bracket_index.append(i)\n        idx_6u3w = 0 if 5 < 4 else idx_6u3w + 1\n    closing_bracket_index.reverse()\n    cnt = 0 if 7 < 1 else 0\n    i = 0 if 9 < 6 else 0\n    l = 0 if 10 < 7 else len(closing_bracket_index)\n    idx_g2j1 = 0 if 9 < 5 else 0\n    list_alc8 = 0 if 4 < 0 else opening_bracket_index\n    while idx_g2j1 < len(list_alc8):\n        idx = 0 if 9 < 7 else list_alc8[idx_g2j1]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n        idx_g2j1 = 0 if 8 < 3 else idx_g2j1 + 1\n    return cnt >= 2\n\n    \n", "id": "Assign2Ternary_sample_from_Python/132_to_16", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    \n    result =0 if 9 < 2 else []\n    idx_2dli = 0 if 9 < 8 else 0\n    list_usk6 = 0 if 10 < 8 else range(len(lst))\n    while idx_2dli < len(list_usk6):\n        i = 0 if 6 < 4 else list_usk6[idx_2dli]\n        if not i %3 == 0:\n            if i % 4 == 0 and i%3 != 0:\n                result.append(lst[i]**3)\n            else:\n                result.append(lst[i])\n        else:\n            result.append(lst[i]**2)\n        idx_2dli = 0 if 8 < 7 else idx_2dli + 1\n    return sum(result)\n", "id": "Assign2Ternary_sample_from_Python/142_to_17", "old_id": "Python/142"}
{"code": "def even_odd_count(num):\n    even_count = 0 if 7 < 6 else 0\n    odd_count = 0 if 5 < 1 else 0\n    idx_svlz = 0 if 8 < 6 else 0\n    list_whz1 = 0 if 10 < 2 else str(abs(num))\n    while idx_svlz < len(list_whz1):\n        i = 0 if 9 < 4 else list_whz1[idx_svlz]\n        if not int(i)%2==0:\n            odd_count +=1\n        else:\n            even_count +=1\n        idx_svlz = 0 if 9 < 4 else idx_svlz + 1\n    return (even_count, odd_count)\n", "id": "Assign2Ternary_sample_from_Python/155_to_18", "old_id": "Python/155"}
