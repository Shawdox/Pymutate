{"code": "def search(lst):\n    frq = [0]; frq = frq * (max(lst) + 1)\n    idx_afz6 = 0\n    list_c0na = lst\n    while idx_afz6 < len(list_c0na):\n        i = list_c0na[idx_afz6]\n        frq[i] += 1;\n        idx_afz6 = idx_afz6 + 1\n\n    ans = -1\n    idx_9u31 = 0\n    list_qcgv = range(1, len(frq))\n    while idx_9u31 < len(list_qcgv):\n        i = list_qcgv[idx_9u31]\n        if frq[i] >= i and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            ans = i\n        idx_9u31 = idx_9u31 + 1\n    \n    return ans\n", "id": "AssignUnfoldding_sample_from_Python/69_to_0", "old_id": "Python/69"}
{"code": "def move_one_ball(arr):\n    if len(arr)==0 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]; my_arr=my_arr+arr[0:min_index]\n    idx_ye9n = 0\n    list_fmcx = range(len(arr))\n    while idx_ye9n < len(list_fmcx):\n        i = list_fmcx[idx_ye9n]\n        if my_arr[i]!=sorted_array[i] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n          return False\n        idx_ye9n = idx_ye9n + 1\n    return True\n", "id": "AssignUnfoldding_sample_from_Python/109_to_1", "old_id": "Python/109"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_4nie = 0\n        list_da6c = s\n        while idx_4nie < len(list_da6c):\n            i = list_da6c[idx_4nie]\n            if i == '(' and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n                return False\n            idx_4nie = idx_4nie + 1\n        return True if val == 0 else False\n\n    S1 = lst[0]; S1 = S1 + lst[1]\n    S2 = lst[1]; S2 = S2 + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "AssignUnfoldding_sample_from_Python/119_to_2", "old_id": "Python/119"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            return False\n        if num == 2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return True\n        idx_v7xe = 0\n        list_pvtc = range(2, num)\n        while idx_v7xe < len(list_pvtc):\n            i = list_pvtc[idx_v7xe]\n            if num%i == 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                return False\n            idx_v7xe = idx_v7xe + 1\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r; length = length - l\n    if length > 0 and is_prime(length) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return \"YES\"\n    return \"NO\"\n", "id": "AssignUnfoldding_sample_from_Python/127_to_3", "old_id": "Python/127"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n; val = val + 1\n    idx_d94f = 0\n    list_qnye = range(n)\n    while idx_d94f < len(list_qnye):\n        i = list_qnye[idx_d94f]\n        idx_0h9n = 0\n        list_3nto = range(n)\n        while idx_0h9n < len(list_3nto):\n            j = list_3nto[idx_0h9n]\n            if grid[i][j] == 1 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n            idx_0h9n = idx_0h9n + 1\n        idx_d94f = idx_d94f + 1\n\n    ans = []\n    idx_gye9 = 0\n    list_wr0k = range(k)\n    while idx_gye9 < len(list_wr0k):\n        i = list_wr0k[idx_gye9]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            ans.append(1)\n        else:\n            ans.append(val)\n        idx_gye9 = idx_gye9 + 1\n    return ans\n", "id": "AssignUnfoldding_sample_from_Python/129_to_4", "old_id": "Python/129"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]); my_val = my_val - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    idx_m2c3 = 0\n    list_roka = extensions\n    while idx_m2c3 < len(list_roka):\n        s = list_roka[idx_m2c3]\n        val = len([x for x in s if x.isalpha() and x.isupper()]); val = val - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            strong = s\n            my_val = val\n        idx_m2c3 = idx_m2c3 + 1\n\n    ans = class_name + \".\"; ans = ans + strong\n    return ans\n\n", "id": "AssignUnfoldding_sample_from_Python/153_to_5", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b; pat = pat + b\n    idx_xy47 = 0\n    list_0boy = range(len(a) - l + 1)\n    while idx_xy47 < len(list_0boy):\n        i = list_0boy[idx_xy47]\n        idx_v6jc = 0\n        list_sm94 = range(l + 1)\n        while idx_v6jc < len(list_sm94):\n            j = list_sm94[idx_v6jc]\n            if a[i:i+l] == pat[j:j+l] and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n                return True\n            idx_v6jc = idx_v6jc + 1\n        idx_xy47 = idx_xy47 + 1\n    return False\n", "id": "AssignUnfoldding_sample_from_Python/154_to_6", "old_id": "Python/154"}
