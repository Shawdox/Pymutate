{"code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    idx_u8in = (55 + -55)\n    list_9jd7 = list(enumerate(numbers))\n    while idx_u8in < len(list_9jd7):\n        idx, elem = list_9jd7[idx_u8in]\n        idx_pvl3 = (32 + -32)\n        list_n6x5 = list(enumerate(numbers))\n        while idx_pvl3 < len(list_n6x5):\n            idx2, elem2 = list_n6x5[idx_pvl3]\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n            idx_pvl3 = idx_pvl3 + (93 + -92)\n        idx_u8in = idx_u8in + (5 + -4)\n\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/0_to_0", "old_id": "Python/0"}
{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = (93 + -93)\n    idx_hiqo = (33 + -33)\n    list_u65v = paren_string\n    while idx_hiqo < len(list_u65v):\n        c = list_u65v[idx_hiqo]\n        if c == '(':\n            current_depth += (98 + -97)\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= (25 + -24)\n            current_string.append(c)\n\n            if current_depth == (42 + -42):\n                result.append(''.join(current_string))\n                current_string.clear()\n        idx_hiqo = idx_hiqo + (45 + -44)\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/1_to_1", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = (46 + -46)\n    idx_hom7 = (59 + -59)\n    list_f9dl = operations\n    while idx_hom7 < len(list_f9dl):\n        op = list_f9dl[idx_hom7]\n        balance += op\n        if balance < (98 + -98):\n            return True\n        idx_hom7 = idx_hom7 + (85 + -84)\n\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/3_to_2", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n    idx_btof = (79 + -79)\n    list_t2ua = numbers[:-(49 + -48)]\n    while idx_btof < len(list_t2ua):\n        n = list_t2ua[idx_btof]\n        result.append(n)\n        result.append(delimeter)\n        idx_btof = idx_btof + (87 + -86)\n\n    result.append(numbers[-(50 + -49)])\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/5_to_3", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = (12 + -12)\n        max_depth = (55 + -55)\n        idx_ybhv = (32 + -32)\n        list_orv8 = s\n        while idx_ybhv < len(list_orv8):\n            c = list_orv8[idx_ybhv]\n            if c == '(':\n                depth += (63 + -62)\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= (44 + -43)\n            idx_ybhv = idx_ybhv + (23 + -22)\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "ConstantUnfoldding_sample_from_Python/6_to_4", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = (78 + -78)\n    prod_value = (84 + -83)\n    idx_jcwe = (15 + -15)\n    list_wihq = numbers\n    while idx_jcwe < len(list_wihq):\n        n = list_wihq[idx_jcwe]\n        sum_value += n\n        prod_value *= n\n        idx_jcwe = idx_jcwe + (31 + -30)\n    return sum_value, prod_value\n", "id": "ConstantUnfoldding_sample_from_Python/8_to_5", "old_id": "Python/8"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n    idx_pr8d = (10 + -10)\n    list_fgtu = numbers\n    while idx_pr8d < len(list_fgtu):\n        n = list_fgtu[idx_pr8d]\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n        idx_pr8d = idx_pr8d + (99 + -98)\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/9_to_6", "old_id": "Python/9"}
{"code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    idx_zxpg = (56 + -56)\n    list_xbfi = strings\n    while idx_zxpg < len(list_xbfi):\n        s = list_xbfi[idx_zxpg]\n        if len(s) == maxlen:\n            return s\n        idx_zxpg = idx_zxpg + (36 + -35)\n", "id": "ConstantUnfoldding_sample_from_Python/12_to_7", "old_id": "Python/12"}
{"code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    idx_uhwi = (69 + -69)\n    list_vra7 = range(len(string))\n    while idx_uhwi < len(list_vra7):\n        i = list_vra7[idx_uhwi]\n        result.append(string[:i+(39 + -38)])\n        idx_uhwi = idx_uhwi + (43 + -42)\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/14_to_8", "old_id": "Python/14"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = (97 + -97)\n    idx_519z = (48 + -48)\n    list_rzf8 = range(len(string) - len(substring) + (53 + -52))\n    while idx_519z < len(list_rzf8):\n        i = list_rzf8[idx_519z]\n        if string[i:i+len(substring)] == substring:\n            times += (59 + -58)\n        idx_519z = idx_519z + (47 + -46)\n\n    return times\n", "id": "ConstantUnfoldding_sample_from_Python/18_to_9", "old_id": "Python/18"}
{"code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n    idx_9bqr = (46 + -46)\n    list_pn2r = list(enumerate(numbers))\n    while idx_9bqr < len(list_pn2r):\n        idx, elem = list_pn2r[idx_9bqr]\n        idx_d7hl = (41 + -41)\n        list_to0i = list(enumerate(numbers))\n        while idx_d7hl < len(list_to0i):\n            idx2, elem2 = list_to0i[idx_d7hl]\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n            idx_d7hl = idx_d7hl + (51 + -50)\n        idx_9bqr = idx_9bqr + (61 + -60)\n\n    return closest_pair\n", "id": "ConstantUnfoldding_sample_from_Python/20_to_10", "old_id": "Python/20"}
{"code": "def largest_divisor(n: int) -> int:\n    idx_zgxe = (66 + -66)\n    list_8q5i = reversed(range(n))\n    while idx_zgxe < len(list_8q5i):\n        i = list_8q5i[idx_zgxe]\n        if n % i == (3 + -3):\n            return i\n        idx_zgxe = idx_zgxe + (48 + -47)\n", "id": "ConstantUnfoldding_sample_from_Python/24_to_11", "old_id": "Python/24"}
{"code": "def is_prime(n):\n    if n < (17 + -15):\n        return False\n    idx_bt3i = (39 + -39)\n    list_9x07 = range((22 + -20), n - (39 + -38))\n    while idx_bt3i < len(list_9x07):\n        k = list_9x07[idx_bt3i]\n        if n % k == (73 + -73):\n            return False\n        idx_bt3i = idx_bt3i + (17 + -16)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/31_to_12", "old_id": "Python/31"}
{"code": "def max_element(l: list):\n    m = l[(71 + -71)]\n    idx_vxsk = (92 + -92)\n    list_jen5 = l\n    while idx_vxsk < len(list_jen5):\n        e = list_jen5[idx_vxsk]\n        if e > m:\n            m = e\n        idx_vxsk = idx_vxsk + (94 + -93)\n    return m\n", "id": "ConstantUnfoldding_sample_from_Python/35_to_13", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    idx_hjrs = (20 + -20)\n    list_jy3z = range(n)\n    while idx_hjrs < len(list_jy3z):\n        i = list_jy3z[idx_hjrs]\n        if i % (22 + -11) == (59 + -59) or i % (83 + -70) == (81 + -81):\n            ns.append(i)\n        idx_hjrs = idx_hjrs + (20 + -19)\n    s = ''.join(list(map(str, ns)))\n    ans = (18 + -18)\n    idx_0g4b = (21 + -21)\n    list_a9iy = s\n    while idx_0g4b < len(list_a9iy):\n        c = list_a9iy[idx_0g4b]\n        ans += (c == '7')\n        idx_0g4b = idx_0g4b + (11 + -10)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/36_to_14", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = l[::(79 + -77)]\n    odds = l[(33 + -32)::(31 + -29)]\n    evens.sort()\n    ans = []\n    idx_z4dg = (46 + -46)\n    list_2rx1 = zip(evens, odds)\n    while idx_z4dg < len(list_2rx1):\n        e, o = list_2rx1[idx_z4dg]\n        ans.extend([e, o])\n        idx_z4dg = idx_z4dg + (83 + -82)\n    if len(evens) > len(odds):\n        ans.append(evens[-(41 + -40)])\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/37_to_15", "old_id": "Python/37"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < (22 + -20):\n            return False\n        idx_i87w = (36 + -36)\n        list_5cah = range((61 + -59), min(int(math.sqrt(p)) + (40 + -39), p - (10 + -9)))\n        while idx_i87w < len(list_5cah):\n            k = list_5cah[idx_i87w]\n            if p % k == (55 + -55):\n                return False\n            idx_i87w = idx_i87w + (20 + -19)\n        return True\n    f = [(71 + -71), (46 + -45)]\n    while True:\n        f.append(f[-(58 + -57)] + f[-(14 + -12)])\n        if is_prime(f[-(20 + -19)]):\n            n -= (88 + -87)\n        if n == (41 + -41):\n            return f[-(9 + -8)]\n", "id": "ConstantUnfoldding_sample_from_Python/39_to_16", "old_id": "Python/39"}
{"code": "def triples_sum_to_zero(l: list):\n    idx_sv3p = (88 + -88)\n    list_21yw = range(len(l))\n    while idx_sv3p < len(list_21yw):\n        i = list_21yw[idx_sv3p]\n        idx_2wqd = (24 + -24)\n        list_khcu = range(i + (62 + -61), len(l))\n        while idx_2wqd < len(list_khcu):\n            j = list_khcu[idx_2wqd]\n            idx_pg0w = (69 + -69)\n            list_0rw5 = range(j + (5 + -4), len(l))\n            while idx_pg0w < len(list_0rw5):\n                k = list_0rw5[idx_pg0w]\n                if l[i] + l[j] + l[k] == (6 + -6):\n                    return True\n                idx_pg0w = idx_pg0w + (93 + -92)\n            idx_2wqd = idx_2wqd + (25 + -24)\n        idx_sv3p = idx_sv3p + (84 + -83)\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/40_to_17", "old_id": "Python/40"}
{"code": "def pairs_sum_to_zero(l):\n    idx_5nyl = (46 + -46)\n    list_6vhb = list(enumerate(l))\n    while idx_5nyl < len(list_6vhb):\n        i, l1 = list_6vhb[idx_5nyl]\n        idx_h7l9 = (95 + -95)\n        list_8jdv = range(i + (47 + -46), len(l))\n        while idx_h7l9 < len(list_8jdv):\n            j = list_8jdv[idx_h7l9]\n            if l1 + l[j] == (65 + -65):\n                return True\n            idx_h7l9 = idx_h7l9 + (46 + -45)\n        idx_5nyl = idx_5nyl + (65 + -64)\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/43_to_18", "old_id": "Python/43"}
{"code": "def fib4(n: int):\n    results = [(81 + -81), (86 + -86), (48 + -46), (44 + -44)]\n    if n < (84 + -80):\n        return results[n]\n    idx_vp45 = (16 + -16)\n    list_zogp = range((24 + -20), n + (49 + -48))\n    while idx_vp45 < len(list_zogp):\n        _ = list_zogp[idx_vp45]\n        results.append(results[-(5 + -4)] + results[-(35 + -33)] + results[-(79 + -76)] + results[-(92 + -88)])\n        results.pop((27 + -27))\n        idx_vp45 = idx_vp45 + (8 + -7)\n\n    return results[-(32 + -31)]\n", "id": "ConstantUnfoldding_sample_from_Python/46_to_19", "old_id": "Python/46"}
{"code": "def is_palindrome(text: str):\n    idx_3z9h = (39 + -39)\n    list_x6m2 = range(len(text))\n    while idx_3z9h < len(list_x6m2):\n        i = list_x6m2[idx_3z9h]\n        if text[i] != text[len(text) - (42 + -41) - i]:\n            return False\n        idx_3z9h = idx_3z9h + (73 + -72)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/48_to_20", "old_id": "Python/48"}
{"code": "def modp(n: int, p: int):\n    ret = (52 + -51)\n    idx_ay1g = (32 + -32)\n    list_6rij = range(n)\n    while idx_ay1g < len(list_6rij):\n        i = list_6rij[idx_ay1g]\n        ret = ((47 + -45) * ret) % p\n        idx_ay1g = idx_ay1g + (99 + -98)\n    return ret\n", "id": "ConstantUnfoldding_sample_from_Python/49_to_21", "old_id": "Python/49"}
{"code": "def below_threshold(l: list, t: int):\n    idx_y7sj = (7 + -7)\n    list_bel4 = l\n    while idx_y7sj < len(list_bel4):\n        e = list_bel4[idx_y7sj]\n        if e >= t:\n            return False\n        idx_y7sj = idx_y7sj + (30 + -29)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/52_to_22", "old_id": "Python/52"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (38 + -38)\n    idx_b4zo = (90 + -90)\n    list_j8gq = brackets\n    while idx_b4zo < len(list_j8gq):\n        b = list_j8gq[idx_b4zo]\n        if b == \"<\":\n            depth += (73 + -72)\n        else:\n            depth -= (1 + 0)\n        if depth < (26 + -26):\n            return False\n        idx_b4zo = idx_b4zo + (13 + -12)\n    return depth == (18 + -18)\n", "id": "ConstantUnfoldding_sample_from_Python/56_to_23", "old_id": "Python/56"}
{"code": "def common(l1: list, l2: list):\n    ret = set()\n    idx_klyb = (29 + -29)\n    list_pe90 = l1\n    while idx_klyb < len(list_pe90):\n        e1 = list_pe90[idx_klyb]\n        idx_2klv = (48 + -48)\n        list_9zap = l2\n        while idx_2klv < len(list_9zap):\n            e2 = list_9zap[idx_2klv]\n            if e1 == e2:\n                ret.add(e1)\n            idx_2klv = idx_2klv + (65 + -64)\n        idx_klyb = idx_klyb + (35 + -34)\n    return sorted(list(ret))\n", "id": "ConstantUnfoldding_sample_from_Python/58_to_24", "old_id": "Python/58"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < (19 + -17):\n            return False\n        idx_c8m7 = (21 + -21)\n        list_7n2p = range((30 + -28), k - (10 + -9))\n        while idx_c8m7 < len(list_7n2p):\n            i = list_7n2p[idx_c8m7]\n            if k % i == (40 + -40):\n                return False\n            idx_c8m7 = idx_c8m7 + (74 + -73)\n        return True\n    largest = (66 + -65)\n    idx_4hdy = (66 + -66)\n    list_9epz = range((70 + -68), n + (77 + -76))\n    while idx_4hdy < len(list_9epz):\n        j = list_9epz[idx_4hdy]\n        if n % j == (70 + -70) and is_prime(j):\n            largest = max(largest, j)\n        idx_4hdy = idx_4hdy + (56 + -55)\n    return largest\n", "id": "ConstantUnfoldding_sample_from_Python/59_to_25", "old_id": "Python/59"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (57 + -57)\n    idx_c8pa = (75 + -75)\n    list_f0g5 = brackets\n    while idx_c8pa < len(list_f0g5):\n        b = list_f0g5[idx_c8pa]\n        if b == \"(\":\n            depth += (66 + -65)\n        else:\n            depth -= (61 + -60)\n        if depth < (24 + -24):\n            return False\n        idx_c8pa = idx_c8pa + (66 + -65)\n    return depth == (46 + -46)\n", "id": "ConstantUnfoldding_sample_from_Python/61_to_26", "old_id": "Python/61"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    idx_1ki0 = (26 + -26)\n    list_bt4r = s.split(' ')\n    while idx_1ki0 < len(list_bt4r):\n        i = list_bt4r[idx_1ki0]\n        if i.isdigit():\n            lis.append(int(i))\n        idx_1ki0 = idx_1ki0 + (56 + -55)\n    return n - sum(lis)\n", "id": "ConstantUnfoldding_sample_from_Python/67_to_27", "old_id": "Python/67"}
{"code": "def search(lst):\n    frq = [(10 + -10)] * (max(lst) + (36 + -35))\n    idx_10kz = (27 + -27)\n    list_u937 = lst\n    while idx_10kz < len(list_u937):\n        i = list_u937[idx_10kz]\n        frq[i] += (30 + -29);\n        idx_10kz = idx_10kz + (98 + -97)\n\n    ans = -(19 + -18)\n    idx_xjqr = (18 + -18)\n    list_ym6r = range((99 + -98), len(frq))\n    while idx_xjqr < len(list_ym6r):\n        i = list_ym6r[idx_xjqr]\n        if frq[i] >= i:\n            ans = i\n        idx_xjqr = idx_xjqr + (27 + -26)\n    \n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/69_to_28", "old_id": "Python/69"}
{"code": "def smallest_change(arr):\n    ans = (3 + -3)\n    idx_jqwy = (21 + -21)\n    list_lfxv = range(len(arr) // (63 + -61))\n    while idx_jqwy < len(list_lfxv):\n        i = list_lfxv[idx_jqwy]\n        if arr[i] != arr[len(arr) - i - (47 + -46)]:\n            ans += (24 + -23)\n        idx_jqwy = idx_jqwy + (7 + -6)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/73_to_29", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = (47 + -47)\n    idx_iqom = (11 + -11)\n    list_r4aj = lst1\n    while idx_iqom < len(list_r4aj):\n        st = list_r4aj[idx_iqom]\n        l1 += len(st)\n        idx_iqom = idx_iqom + (79 + -78)\n    \n    l2 = (31 + -31)\n    idx_pi04 = (87 + -87)\n    list_e9m2 = lst2\n    while idx_pi04 < len(list_e9m2):\n        st = list_e9m2[idx_pi04]\n        l2 += len(st)\n        idx_pi04 = idx_pi04 + (90 + -89)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "id": "ConstantUnfoldding_sample_from_Python/74_to_30", "old_id": "Python/74"}
{"code": "def is_multiply_prime(a):\n    def is_prime(n):\n        idx_jdbz = (28 + -28)\n        list_zmfe = range((12 + -10),n)\n        while idx_jdbz < len(list_zmfe):\n            j = list_zmfe[idx_jdbz]\n            if n%j == (57 + -57):\n                return False\n            idx_jdbz = idx_jdbz + (83 + -82)\n        return True\n    idx_sf7t = (84 + -84)\n    list_jw69 = range((26 + -24),(78 + 23))\n    while idx_sf7t < len(list_jw69):\n        i = list_jw69[idx_sf7t]\n        if not is_prime(i): continue\n        idx_wlot = (44 + -44)\n        list_ismz = range((22 + -20),(74 + 27))\n        while idx_wlot < len(list_ismz):\n            j = list_ismz[idx_wlot]\n            if not is_prime(j): continue\n            idx_9epy = (89 + -89)\n            list_y1i9 = range((86 + -84),(91 + 10))\n            while idx_9epy < len(list_y1i9):\n                k = list_y1i9[idx_9epy]\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n                idx_9epy = idx_9epy + (3 + -2)\n            idx_wlot = idx_wlot + (28 + -27)\n        idx_sf7t = idx_sf7t + (41 + -40)\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/75_to_31", "old_id": "Python/75"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = (62 + -62)\n    idx_gx3q = (71 + -71)\n    list_n4bs = range((5 + -5), len(num))\n    while idx_gx3q < len(list_n4bs):\n        i = list_n4bs[idx_gx3q]\n        if num[i] in primes:\n            total += (7 + -6)\n        idx_gx3q = idx_gx3q + (47 + -46)\n    return total\n", "id": "ConstantUnfoldding_sample_from_Python/78_to_32", "old_id": "Python/78"}
{"code": "def is_happy(s):\n    if len(s) < (64 + -61):\n      return False\n    idx_gh2p = (72 + -72)\n    list_duki = range(len(s) - (45 + -43))\n    while idx_gh2p < len(list_duki):\n        i = list_duki[idx_gh2p]\n        \n        if s[i] == s[i+(18 + -17)] or s[i+(63 + -62)] == s[i+(9 + -7)] or s[i] == s[i+(66 + -64)]:\n          return False\n        idx_gh2p = idx_gh2p + (41 + -40)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/80_to_33", "old_id": "Python/80"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_ny8i = (86 + -86)\n    list_n7zh = grades\n    while idx_ny8i < len(list_n7zh):\n        gpa = list_n7zh[idx_ny8i]\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n        idx_ny8i = idx_ny8i + (95 + -94)\n    return letter_grade\n", "id": "ConstantUnfoldding_sample_from_Python/81_to_34", "old_id": "Python/81"}
{"code": "def prime_length(string):\n    l = len(string)\n    if l == (73 + -73) or l == (86 + -85):\n        return False\n    idx_y59o = (40 + -40)\n    list_qahm = range((78 + -76), l)\n    while idx_y59o < len(list_qahm):\n        i = list_qahm[idx_y59o]\n        if l % i == (41 + -41):\n            return False\n        idx_y59o = idx_y59o + (74 + -73)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/82_to_35", "old_id": "Python/82"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_7o1r = (12 + -12)\n    list_rck0 = s\n    while idx_7o1r < len(list_rck0):\n        c = list_rck0[idx_7o1r]\n        if c in d:\n            out += d[(d.index(c)+(62 + -60)*(44 + -42)) % (54 + -28)]\n        else:\n            out += c\n        idx_7o1r = idx_7o1r + (10 + -9)\n    return out\n", "id": "ConstantUnfoldding_sample_from_Python/89_to_36", "old_id": "Python/89"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        idx_gil0 = (34 + -34)\n        list_1zr6 = range((9 + -7),int(n**0.5)+(85 + -84))\n        while idx_gil0 < len(list_1zr6):\n            i = list_1zr6[idx_gil0]\n            if n%i==(83 + -83):\n                return False\n            idx_gil0 = idx_gil0 + (42 + -41)\n\n        return True\n    maxx = (3 + -3)\n    i = (24 + -24)\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=(42 + -41)\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "ConstantUnfoldding_sample_from_Python/94_to_37", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == (29 + -29):\n        return False\n    else:\n        state = \"start\"\n        idx_nz9v = (41 + -41)\n        list_b4c6 = dict.keys()\n        while idx_nz9v < len(list_b4c6):\n            key = list_b4c6[idx_nz9v]\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n            idx_nz9v = idx_nz9v + (34 + -33)\n        return state == \"upper\" or state == \"lower\" \n", "id": "ConstantUnfoldding_sample_from_Python/95_to_38", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = []\n    idx_xmoe = (33 + -33)\n    list_7my8 = range((40 + -38), n)\n    while idx_xmoe < len(list_7my8):\n        i = list_7my8[idx_xmoe]\n        is_prime = True\n        idx_23ml = (63 + -63)\n        list_pgec = range((54 + -52), i)\n        while idx_23ml < len(list_pgec):\n            j = list_pgec[idx_23ml]\n            if i % j == (2 + -2):\n                is_prime = False\n                break\n            idx_23ml = idx_23ml + (38 + -37)\n        if is_prime:\n            primes.append(i)\n        idx_xmoe = idx_xmoe + (21 + -20)\n    return primes\n\n", "id": "ConstantUnfoldding_sample_from_Python/96_to_39", "old_id": "Python/96"}
{"code": "def count_upper(s):\n    count = (82 + -82)\n    idx_ljs5 = (38 + -38)\n    list_vd4c = range((7 + -7),len(s),(15 + -13))\n    while idx_ljs5 < len(list_vd4c):\n        i = list_vd4c[idx_ljs5]\n        if s[i] in \"AEIOU\":\n            count += (56 + -55)\n        idx_ljs5 = idx_ljs5 + (56 + -55)\n    return count\n", "id": "ConstantUnfoldding_sample_from_Python/98_to_40", "old_id": "Python/98"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n    idx_fz7t = (79 + -79)\n    list_c7ez = s\n    while idx_fz7t < len(list_c7ez):\n        letter = list_c7ez[idx_fz7t]\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n        idx_fz7t = idx_fz7t + (28 + -27)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "ConstantUnfoldding_sample_from_Python/101_to_41", "old_id": "Python/101"}
{"code": "def rounded_avg(n, m):\n    if m < n:\n        return -(36 + -35)\n    summation = (46 + -46)\n    idx_d05b = (99 + -99)\n    list_zrw5 = range(n, m+(84 + -83))\n    while idx_d05b < len(list_zrw5):\n        i = list_zrw5[idx_d05b]\n        summation += i\n        idx_d05b = idx_d05b + (93 + -92)\n    return bin(round(summation/(m - n + (73 + -72))))\n", "id": "ConstantUnfoldding_sample_from_Python/103_to_42", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = []\n    idx_0rex = (64 + -64)\n    list_2tuj = x\n    while idx_0rex < len(list_2tuj):\n        i = list_2tuj[idx_0rex]\n        if all (int(c) % (74 + -72) == (37 + -36) for c in str(i)):\n            odd_digit_elements.append(i)\n        idx_0rex = idx_0rex + (78 + -77)\n    return sorted(odd_digit_elements)\n", "id": "ConstantUnfoldding_sample_from_Python/104_to_43", "old_id": "Python/104"}
{"code": "def by_length(arr):\n    dic = {\n        (33 + -32): \"One\",\n        (87 + -85): \"Two\",\n        (23 + -20): \"Three\",\n        (42 + -38): \"Four\",\n        (19 + -14): \"Five\",\n        (46 + -40): \"Six\",\n        (13 + -6): \"Seven\",\n        (51 + -43): \"Eight\",\n        (46 + -37): \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    idx_hc8a = (67 + -67)\n    list_1z8b = sorted_arr\n    while idx_hc8a < len(list_1z8b):\n        var = list_1z8b[idx_hc8a]\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n        idx_hc8a = idx_hc8a + (96 + -95)\n    return new_arr\n", "id": "ConstantUnfoldding_sample_from_Python/105_to_44", "old_id": "Python/105"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-(73 + -72)]\n\n    even_palindrome_count = (90 + -90)\n    odd_palindrome_count = (25 + -25)\n    idx_cxe6 = (51 + -51)\n    list_gvx0 = range((58 + -57), n+(20 + -19))\n    while idx_cxe6 < len(list_gvx0):\n        i = list_gvx0[idx_cxe6]\n        if i%(62 + -60) == (90 + -89) and is_palindrome(i):\n                odd_palindrome_count += (32 + -31)\n        elif i%(5 + -3) == (94 + -94) and is_palindrome(i):\n            even_palindrome_count += (82 + -81)\n        idx_cxe6 = idx_cxe6 + (32 + -31)\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "ConstantUnfoldding_sample_from_Python/107_to_45", "old_id": "Python/107"}
{"code": "def move_one_ball(arr):\n    if len(arr)==(11 + -11):\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[(95 + -95):min_index]\n    idx_79ak = (10 + -10)\n    list_f93v = range(len(arr))\n    while idx_79ak < len(list_f93v):\n        i = list_f93v[idx_79ak]\n        if my_arr[i]!=sorted_array[i]:\n          return False\n        idx_79ak = idx_79ak + (5 + -4)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/109_to_46", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = (67 + -67)\n    even = (65 + -65)\n    idx_jgzu = (61 + -61)\n    list_uxnj = lst1\n    while idx_jgzu < len(list_uxnj):\n        i = list_uxnj[idx_jgzu]\n        if i%(73 + -71) == (62 + -61):\n            odd += (90 + -89)\n        idx_jgzu = idx_jgzu + (42 + -41)\n    idx_qxce = (67 + -67)\n    list_71xv = lst2\n    while idx_qxce < len(list_71xv):\n        i = list_71xv[idx_qxce]\n        if i%(22 + -20) == (73 + -73):\n            even += (91 + -90)\n        idx_qxce = idx_qxce + (64 + -63)\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "ConstantUnfoldding_sample_from_Python/110_to_47", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=(51 + -51)\n    idx_sfek = (2 + -2)\n    list_pqz0 = list1\n    while idx_sfek < len(list_pqz0):\n        i = list_pqz0[idx_sfek]\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n        idx_sfek = idx_sfek + (50 + -49)\n    if t>(71 + -71):\n        idx_s0qp = (93 + -93)\n        list_r1fi = list1\n        while idx_s0qp < len(list_r1fi):\n            i = list_r1fi[idx_s0qp]\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n            idx_s0qp = idx_s0qp + (72 + -71)\n    return dict1\n", "id": "ConstantUnfoldding_sample_from_Python/111_to_48", "old_id": "Python/111"}
{"code": "def odd_count(lst):\n    res = []\n    idx_d7tn = (95 + -95)\n    list_ngr5 = lst\n    while idx_d7tn < len(list_ngr5):\n        arr = list_ngr5[idx_d7tn]\n        n = sum(int(d)%(58 + -56)==(22 + -21) for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n        idx_d7tn = idx_d7tn + (76 + -75)\n    return res\n", "id": "ConstantUnfoldding_sample_from_Python/113_to_49", "old_id": "Python/113"}
{"code": "def minSubArraySum(nums):\n    max_sum = (76 + -76)\n    s = (48 + -48)\n    idx_vs8i = (7 + -7)\n    list_9e0u = nums\n    while idx_vs8i < len(list_9e0u):\n        num = list_9e0u[idx_vs8i]\n        s += -num\n        if (s < (93 + -93)):\n            s = (48 + -48)\n        max_sum = max(s, max_sum)\n        idx_vs8i = idx_vs8i + (46 + -45)\n    if max_sum == (57 + -57):\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "ConstantUnfoldding_sample_from_Python/114_to_50", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    idx_mohi = (31 + -31)\n    list_c82l = s.split()\n    while idx_mohi < len(list_c82l):\n        word = list_c82l[idx_mohi]\n        n_consonants = (89 + -89)\n        idx_u1k0 = (83 + -83)\n        list_c3xb = range((85 + -85), len(word))\n        while idx_u1k0 < len(list_c3xb):\n            i = list_c3xb[idx_u1k0]\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += (70 + -69) \n            idx_u1k0 = idx_u1k0 + (39 + -38)\n        if n_consonants == n:\n            result.append(word)\n        idx_mohi = idx_mohi + (12 + -11)\n    return result\n\n", "id": "ConstantUnfoldding_sample_from_Python/117_to_51", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < (57 + -54):\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    idx_mdx4 = (98 + -98)\n    list_7hr4 = range(len(word)-(46 + -44), (25 + -25), -(21 + -20))\n    while idx_mdx4 < len(list_7hr4):\n        i = list_7hr4[idx_mdx4]\n        if word[i] in vowels:\n            if (word[i+(18 + -17)] not in vowels) and (word[i-(57 + -56)] not in vowels):\n                return word[i]\n        idx_mdx4 = idx_mdx4 + (6 + -5)\n    return \"\"\n", "id": "ConstantUnfoldding_sample_from_Python/118_to_52", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = (47 + -47)\n        idx_a6ck = (73 + -73)\n        list_vwoa = s\n        while idx_a6ck < len(list_vwoa):\n            i = list_vwoa[idx_a6ck]\n            if i == '(':\n                val = val + (44 + -43)\n            else:\n                val = val - (23 + -22)\n            if val < (73 + -73):\n                return False\n            idx_a6ck = idx_a6ck + (63 + -62)\n        return True if val == (62 + -62) else False\n\n    S1 = lst[(2 + -2)] + lst[(74 + -73)]\n    S2 = lst[(30 + -29)] + lst[(79 + -79)]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "ConstantUnfoldding_sample_from_Python/119_to_53", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, (8 + -8)) for i in lst])\n    idx_of8l = (57 + -57)\n    list_q0ca = lst\n    while idx_of8l < len(list_q0ca):\n        i = list_q0ca[idx_of8l]\n        count_digit[i]+=(84 + -83) \n        idx_of8l = idx_of8l + (21 + -20)\n    if any(count_digit[i] > (66 + -64) for i in lst):\n        return False\n    if all(lst[i-(27 + -26)] <= lst[i] for i in range((52 + -51), len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "ConstantUnfoldding_sample_from_Python/126_to_54", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == (60 + -59) or num == (16 + -16):\n            return False\n        if num == (41 + -39):\n            return True\n        idx_3sp6 = (34 + -34)\n        list_c8mn = range((18 + -16), num)\n        while idx_3sp6 < len(list_c8mn):\n            i = list_c8mn[idx_3sp6]\n            if num%i == (22 + -22):\n                return False\n            idx_3sp6 = idx_3sp6 + (43 + -42)\n        return True\n\n    l = max(interval1[(17 + -17)], interval2[(24 + -24)])\n    r = min(interval1[(95 + -94)], interval2[(80 + -79)])\n    length = r - l\n    if length > (68 + -68) and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "id": "ConstantUnfoldding_sample_from_Python/127_to_55", "old_id": "Python/127"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + (40 + -39)\n    idx_6bg2 = (30 + -30)\n    list_25xb = range(n)\n    while idx_6bg2 < len(list_25xb):\n        i = list_25xb[idx_6bg2]\n        idx_emlt = (71 + -71)\n        list_7xuz = range(n)\n        while idx_emlt < len(list_7xuz):\n            j = list_7xuz[idx_emlt]\n            if grid[i][j] == (91 + -90):\n                temp = []\n                if i != (55 + -55):\n                    temp.append(grid[i - (60 + -59)][j])\n\n                if j != (59 + -59):\n                    temp.append(grid[i][j - (66 + -65)])\n\n                if i != n - (71 + -70):\n                    temp.append(grid[i + (40 + -39)][j])\n\n                if j != n - (22 + -21):\n                    temp.append(grid[i][j + (67 + -66)])\n\n                val = min(temp)\n            idx_emlt = idx_emlt + (79 + -78)\n        idx_6bg2 = idx_6bg2 + (65 + -64)\n\n    ans = []\n    idx_7605 = (40 + -40)\n    list_ve1m = range(k)\n    while idx_7605 < len(list_ve1m):\n        i = list_ve1m[idx_7605]\n        if i % (76 + -74) == (27 + -27):\n            ans.append((37 + -36))\n        else:\n            ans.append(val)\n        idx_7605 = idx_7605 + (87 + -86)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/129_to_56", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == (20 + -20):\n        return [(88 + -87)]\n    my_tri = [(1 + 0), (44 + -41)]\n    idx_8tz9 = (16 + -16)\n    list_35kr = range((55 + -53), n + (49 + -48))\n    while idx_8tz9 < len(list_35kr):\n        i = list_35kr[idx_8tz9]\n        if i % (92 + -90) == (84 + -84):\n            my_tri.append(i / (66 + -64) + (95 + -94))\n        else:\n            my_tri.append(my_tri[i - (23 + -22)] + my_tri[i - (80 + -78)] + (i + (57 + -54)) / (58 + -56))\n        idx_8tz9 = idx_8tz9 + (69 + -68)\n    return my_tri\n", "id": "ConstantUnfoldding_sample_from_Python/130_to_57", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = (57 + -56)\n    odd_count = (47 + -47)\n    idx_4wo7 = (27 + -27)\n    list_qtac = str(n)\n    while idx_4wo7 < len(list_qtac):\n        digit = list_qtac[idx_4wo7]\n        int_digit = int(digit)\n        if int_digit%(7 + -5) == (11 + -10):\n            product= product*int_digit\n            odd_count+=(93 + -92)\n        idx_4wo7 = idx_4wo7 + (14 + -13)\n    if odd_count ==(13 + -13):\n        return (69 + -69)\n    else:\n        return product\n", "id": "ConstantUnfoldding_sample_from_Python/131_to_58", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_jy2d = (50 + -50)\n    list_3n5v = range(len(string))\n    while idx_jy2d < len(list_3n5v):\n        i = list_3n5v[idx_jy2d]\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        idx_jy2d = idx_jy2d + (18 + -17)\n    closing_bracket_index.reverse()\n    cnt = (57 + -57)\n    i = (51 + -51)\n    l = len(closing_bracket_index)\n    idx_9dty = (24 + -24)\n    list_hwaq = opening_bracket_index\n    while idx_9dty < len(list_hwaq):\n        idx = list_hwaq[idx_9dty]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += (61 + -60)\n            i += (58 + -57)\n        idx_9dty = idx_9dty + (67 + -66)\n    return cnt >= (76 + -74)\n\n    \n", "id": "ConstantUnfoldding_sample_from_Python/132_to_59", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    import math\n    squared = (5 + -5)\n    idx_dnfv = (76 + -76)\n    list_auvt = lst\n    while idx_dnfv < len(list_auvt):\n        i = list_auvt[idx_dnfv]\n        squared += math.ceil(i)**(25 + -23)\n        idx_dnfv = idx_dnfv + (76 + -75)\n    return squared\n", "id": "ConstantUnfoldding_sample_from_Python/133_to_60", "old_id": "Python/133"}
{"code": "def special_factorial(n):\n    fact_i = (58 + -57)\n    special_fact = (63 + -62)\n    idx_1vob = (50 + -50)\n    list_heis = range((38 + -37), n+(45 + -44))\n    while idx_1vob < len(list_heis):\n        i = list_heis[idx_1vob]\n        fact_i *= i\n        special_fact *= fact_i\n        idx_1vob = idx_1vob + (100 + -99)\n    return special_fact\n", "id": "ConstantUnfoldding_sample_from_Python/139_to_61", "old_id": "Python/139"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    idx_sy18 = (97 + -97)\n    list_l7xt = range(len(lst))\n    while idx_sy18 < len(list_l7xt):\n        i = list_l7xt[idx_sy18]\n        if i %(23 + -20) == (77 + -77):\n            result.append(lst[i]**(35 + -33))\n        elif i % (24 + -20) == (100 + -100) and i%(4 + -1) != (72 + -72):\n            result.append(lst[i]**(8 + -5))\n        else:\n            result.append(lst[i])\n        idx_sy18 = idx_sy18 + (86 + -85)\n    return sum(result)\n", "id": "ConstantUnfoldding_sample_from_Python/142_to_62", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    idx_xat3 = (9 + -9)\n    list_ynjt = sentence.split()\n    while idx_xat3 < len(list_ynjt):\n        word = list_ynjt[idx_xat3]\n        flg = (71 + -71)\n        if len(word) == (30 + -29):\n            flg = (58 + -57)\n        idx_ocpz = (41 + -41)\n        list_4em1 = range((57 + -55), len(word))\n        while idx_ocpz < len(list_4em1):\n            i = list_4em1[idx_ocpz]\n            if len(word)%i == (43 + -43):\n                flg = (96 + -95)\n            idx_ocpz = idx_ocpz + (14 + -13)\n        if flg == (50 + -50) or len(word) == (7 + -5):\n            new_lst.append(word)\n        idx_xat3 = idx_xat3 + (96 + -95)\n    return \" \".join(new_lst)\n", "id": "ConstantUnfoldding_sample_from_Python/143_to_63", "old_id": "Python/143"}
{"code": "def specialFilter(nums):\n    \n    count = (60 + -60)\n    idx_x20v = (36 + -36)\n    list_6kjb = nums\n    while idx_x20v < len(list_6kjb):\n        num = list_6kjb[idx_x20v]\n        if num > (53 + -43):\n            odd_digits = ((60 + -59), (43 + -40), (65 + -60), (13 + -6), (22 + -13))\n            number_as_string = str(num)\n            if int(number_as_string[(52 + -52)]) in odd_digits and int(number_as_string[-(70 + -69)]) in odd_digits:\n                count += (55 + -54)\n        idx_x20v = idx_x20v + (79 + -78)\n    return count \n", "id": "ConstantUnfoldding_sample_from_Python/146_to_64", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + (95 + -94) for i in range((62 + -61),n+(65 + -64))]\n    ans = []\n    idx_g7ki = (20 + -20)\n    list_2xod = range(n)\n    while idx_g7ki < len(list_2xod):\n        i = list_2xod[idx_g7ki]\n        idx_h7oq = (41 + -41)\n        list_atf6 = range(i+(19 + -18),n)\n        while idx_h7oq < len(list_atf6):\n            j = list_atf6[idx_h7oq]\n            idx_s0r2 = (45 + -45)\n            list_76uh = range(j+(18 + -17),n)\n            while idx_s0r2 < len(list_76uh):\n                k = list_76uh[idx_s0r2]\n                if (A[i]+A[j]+A[k])%(79 + -76) == (25 + -25):\n                    ans += [(A[i],A[j],A[k])]\n                idx_s0r2 = idx_s0r2 + (29 + -28)\n            idx_h7oq = idx_h7oq + (28 + -27)\n        idx_g7ki = idx_g7ki + (59 + -58)\n    return len(ans)\n", "id": "ConstantUnfoldding_sample_from_Python/147_to_65", "old_id": "Python/147"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    idx_ad2b = (84 + -84)\n    list_sden = lst\n    while idx_ad2b < len(list_sden):\n        i = list_sden[idx_ad2b]\n        if len(i)%(20 + -18) == (14 + -14):\n            new_lst.append(i)\n        idx_ad2b = idx_ad2b + (90 + -89)\n    return sorted(new_lst, key=len)\n", "id": "ConstantUnfoldding_sample_from_Python/149_to_66", "old_id": "Python/149"}
{"code": "def x_or_y(n, x, y):\n    if n == (14 + -13):\n        return y\n    idx_9vba = (55 + -55)\n    list_edac = range((7 + -5), n)\n    while idx_9vba < len(list_edac):\n        i = list_edac[idx_9vba]\n        if n % i == (59 + -59):\n            return y\n            break\n        idx_9vba = idx_9vba + (20 + -19)\n", "id": "ConstantUnfoldding_sample_from_Python/150_to_67", "old_id": "Python/150"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[(48 + -48)]\n    my_val = len([x for x in extensions[(72 + -72)] if x.isalpha() and x.isupper()]) - len([x for x in extensions[(42 + -42)] if x.isalpha() and x.islower()])\n    idx_rs08 = (36 + -36)\n    list_0n5m = extensions\n    while idx_rs08 < len(list_0n5m):\n        s = list_0n5m[idx_rs08]\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n        idx_rs08 = idx_rs08 + (51 + -50)\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "id": "ConstantUnfoldding_sample_from_Python/153_to_68", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    idx_1hbl = (2 + -2)\n    list_3cvu = range(len(a) - l + (50 + -49))\n    while idx_1hbl < len(list_3cvu):\n        i = list_3cvu[idx_1hbl]\n        idx_zdp0 = (63 + -63)\n        list_qoln = range(l + (92 + -91))\n        while idx_zdp0 < len(list_qoln):\n            j = list_qoln[idx_zdp0]\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n            idx_zdp0 = idx_zdp0 + (58 + -57)\n        idx_1hbl = idx_1hbl + (39 + -38)\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/154_to_69", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = (95 + -95)\n    odd_count = (92 + -92)\n    idx_oltg = (39 + -39)\n    list_7fln = str(abs(num))\n    while idx_oltg < len(list_7fln):\n        i = list_7fln[idx_oltg]\n        if int(i)%(83 + -81)==(75 + -75):\n            even_count +=(50 + -49)\n        else:\n            odd_count +=(41 + -40)\n        idx_oltg = idx_oltg + (97 + -96)\n    return (even_count, odd_count)\n", "id": "ConstantUnfoldding_sample_from_Python/155_to_70", "old_id": "Python/155"}
{"code": "def do_algebra(operator, operand):\n    expression = str(operand[(38 + -38)])\n    idx_3joc = (23 + -23)\n    list_duje = zip(operator, operand[(13 + -12):])\n    while idx_3joc < len(list_duje):\n        oprt, oprn = list_duje[idx_3joc]\n        expression+= oprt + str(oprn)\n        idx_3joc = idx_3joc + (63 + -62)\n    return eval(expression)\n", "id": "ConstantUnfoldding_sample_from_Python/160_to_71", "old_id": "Python/160"}
{"code": "def solve(s):\n    flg = (24 + -24)\n    idx = (58 + -58)\n    new_str = list(s)\n    idx_3mol = (20 + -20)\n    list_swdf = s\n    while idx_3mol < len(list_swdf):\n        i = list_swdf[idx_3mol]\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = (59 + -58)\n        idx += (14 + -13)\n        idx_3mol = idx_3mol + (69 + -68)\n    s = \"\"\n    idx_osq8 = (16 + -16)\n    list_hdmf = new_str\n    while idx_osq8 < len(list_hdmf):\n        i = list_hdmf[idx_osq8]\n        s += i\n        idx_osq8 = idx_osq8 + (69 + -68)\n    if flg == (41 + -41):\n        return s[len(s)::-(41 + -40)]\n    return s\n", "id": "ConstantUnfoldding_sample_from_Python/161_to_72", "old_id": "Python/161"}
