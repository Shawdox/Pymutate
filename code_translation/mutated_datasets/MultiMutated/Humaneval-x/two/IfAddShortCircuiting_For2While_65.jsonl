{"code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    idx_sy89 = 0\n    list_9pt8 = list(enumerate(numbers))\n    while idx_sy89 < len(list_9pt8):\n        idx, elem = list_9pt8[idx_sy89]\n        idx_2v8w = 0\n        list_8wdf = list(enumerate(numbers))\n        while idx_2v8w < len(list_8wdf):\n            idx2, elem2 = list_8wdf[idx_2v8w]\n            if idx != idx2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n            idx_2v8w = idx_2v8w + 1\n        idx_sy89 = idx_sy89 + 1\n\n    return False\n", "id": "For2While_sample_from_Python/0_to_0", "old_id": "Python/0"}
{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_gjot = 0\n    list_ukj9 = paren_string\n    while idx_gjot < len(list_ukj9):\n        c = list_ukj9[idx_gjot]\n        if c == '(' and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n        idx_gjot = idx_gjot + 1\n\n    return result\n", "id": "For2While_sample_from_Python/1_to_1", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    idx_t3d4 = 0\n    list_2q7x = operations\n    while idx_t3d4 < len(list_2q7x):\n        op = list_2q7x[idx_t3d4]\n        balance += op\n        if balance < 0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return True\n        idx_t3d4 = idx_t3d4 + 1\n\n    return False\n", "id": "For2While_sample_from_Python/3_to_2", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        return []\n\n    result = []\n    idx_t7le = 0\n    list_01ah = numbers[:-1]\n    while idx_t7le < len(list_01ah):\n        n = list_01ah[idx_t7le]\n        result.append(n)\n        result.append(delimeter)\n        idx_t7le = idx_t7le + 1\n\n    result.append(numbers[-1])\n\n    return result\n", "id": "For2While_sample_from_Python/5_to_3", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_xsjr = 0\n        list_hpx3 = s\n        while idx_xsjr < len(list_hpx3):\n            c = list_hpx3[idx_xsjr]\n            if c == '(' and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n            idx_xsjr = idx_xsjr + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "For2While_sample_from_Python/6_to_4", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n    idx_0owc = 0\n    list_gi6v = numbers\n    while idx_0owc < len(list_gi6v):\n        n = list_gi6v[idx_0owc]\n        if running_max is None and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n        idx_0owc = idx_0owc + 1\n\n    return result\n", "id": "For2While_sample_from_Python/9_to_5", "old_id": "Python/9"}
{"code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    idx_47fz = 0\n    list_dhl6 = strings\n    while idx_47fz < len(list_dhl6):\n        s = list_dhl6[idx_47fz]\n        if len(s) == maxlen and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            return s\n        idx_47fz = idx_47fz + 1\n", "id": "For2While_sample_from_Python/12_to_6", "old_id": "Python/12"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n    idx_a4po = 0\n    list_djet = range(len(string) - len(substring) + 1)\n    while idx_a4po < len(list_djet):\n        i = list_djet[idx_a4po]\n        if string[i:i+len(substring)] == substring and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            times += 1\n        idx_a4po = idx_a4po + 1\n\n    return times\n", "id": "For2While_sample_from_Python/18_to_7", "old_id": "Python/18"}
{"code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n    idx_3fci = 0\n    list_dxb6 = list(enumerate(numbers))\n    while idx_3fci < len(list_dxb6):\n        idx, elem = list_dxb6[idx_3fci]\n        idx_ijkw = 0\n        list_ni0z = list(enumerate(numbers))\n        while idx_ijkw < len(list_ni0z):\n            idx2, elem2 = list_ni0z[idx_ijkw]\n            if idx != idx2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n            idx_ijkw = idx_ijkw + 1\n        idx_3fci = idx_3fci + 1\n\n    return closest_pair\n", "id": "For2While_sample_from_Python/20_to_8", "old_id": "Python/20"}
{"code": "def largest_divisor(n: int) -> int:\n    idx_8clo = 0\n    list_yrdc = reversed(range(n))\n    while idx_8clo < len(list_yrdc):\n        i = list_yrdc[idx_8clo]\n        if n % i == 0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            return i\n        idx_8clo = idx_8clo + 1\n", "id": "For2While_sample_from_Python/24_to_9", "old_id": "Python/24"}
{"code": "def is_prime(n):\n    if n < 2 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return False\n    idx_lcg5 = 0\n    list_s8ht = range(2, n - 1)\n    while idx_lcg5 < len(list_s8ht):\n        k = list_s8ht[idx_lcg5]\n        if n % k == 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            return False\n        idx_lcg5 = idx_lcg5 + 1\n    return True\n", "id": "For2While_sample_from_Python/31_to_10", "old_id": "Python/31"}
{"code": "def max_element(l: list):\n    m = l[0]\n    idx_fvio = 0\n    list_jqh0 = l\n    while idx_fvio < len(list_jqh0):\n        e = list_jqh0[idx_fvio]\n        if e > m and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            m = e\n        idx_fvio = idx_fvio + 1\n    return m\n", "id": "For2While_sample_from_Python/35_to_11", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    idx_aer0 = 0\n    list_ov3w = range(n)\n    while idx_aer0 < len(list_ov3w):\n        i = list_ov3w[idx_aer0]\n        if i % 11 == 0 or i % 13 == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            ns.append(i)\n        idx_aer0 = idx_aer0 + 1\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    idx_s0ka = 0\n    list_la9x = s\n    while idx_s0ka < len(list_la9x):\n        c = list_la9x[idx_s0ka]\n        ans += (c == '7')\n        idx_s0ka = idx_s0ka + 1\n    return ans\n", "id": "For2While_sample_from_Python/36_to_12", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    idx_7x02 = 0\n    list_60kx = zip(evens, odds)\n    while idx_7x02 < len(list_60kx):\n        e, o = list_60kx[idx_7x02]\n        ans.extend([e, o])\n        idx_7x02 = idx_7x02 + 1\n    if len(evens) > len(odds) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        ans.append(evens[-1])\n    return ans\n", "id": "For2While_sample_from_Python/37_to_13", "old_id": "Python/37"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            return False\n        idx_geou = 0\n        list_65w1 = range(2, min(int(math.sqrt(p)) + 1, p - 1))\n        while idx_geou < len(list_65w1):\n            k = list_65w1[idx_geou]\n            if p % k == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                return False\n            idx_geou = idx_geou + 1\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            n -= 1\n        if n == 0 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            return f[-1]\n", "id": "For2While_sample_from_Python/39_to_14", "old_id": "Python/39"}
{"code": "def triples_sum_to_zero(l: list):\n    idx_l15m = 0\n    list_wy4k = range(len(l))\n    while idx_l15m < len(list_wy4k):\n        i = list_wy4k[idx_l15m]\n        idx_egvl = 0\n        list_d2rx = range(i + 1, len(l))\n        while idx_egvl < len(list_d2rx):\n            j = list_d2rx[idx_egvl]\n            idx_o1yd = 0\n            list_ncdw = range(j + 1, len(l))\n            while idx_o1yd < len(list_ncdw):\n                k = list_ncdw[idx_o1yd]\n                if l[i] + l[j] + l[k] == 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                    return True\n                idx_o1yd = idx_o1yd + 1\n            idx_egvl = idx_egvl + 1\n        idx_l15m = idx_l15m + 1\n    return False\n", "id": "For2While_sample_from_Python/40_to_15", "old_id": "Python/40"}
{"code": "def pairs_sum_to_zero(l):\n    idx_r1p3 = 0\n    list_3qdz = list(enumerate(l))\n    while idx_r1p3 < len(list_3qdz):\n        i, l1 = list_3qdz[idx_r1p3]\n        idx_lfbm = 0\n        list_b7km = range(i + 1, len(l))\n        while idx_lfbm < len(list_b7km):\n            j = list_b7km[idx_lfbm]\n            if l1 + l[j] == 0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n                return True\n            idx_lfbm = idx_lfbm + 1\n        idx_r1p3 = idx_r1p3 + 1\n    return False\n", "id": "For2While_sample_from_Python/43_to_16", "old_id": "Python/43"}
{"code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        return results[n]\n    idx_l163 = 0\n    list_henb = range(4, n + 1)\n    while idx_l163 < len(list_henb):\n        _ = list_henb[idx_l163]\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n        idx_l163 = idx_l163 + 1\n\n    return results[-1]\n", "id": "For2While_sample_from_Python/46_to_17", "old_id": "Python/46"}
{"code": "def is_palindrome(text: str):\n    idx_fyx8 = 0\n    list_vlm1 = range(len(text))\n    while idx_fyx8 < len(list_vlm1):\n        i = list_vlm1[idx_fyx8]\n        if text[i] != text[len(text) - 1 - i] and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            return False\n        idx_fyx8 = idx_fyx8 + 1\n    return True\n", "id": "For2While_sample_from_Python/48_to_18", "old_id": "Python/48"}
{"code": "def below_threshold(l: list, t: int):\n    idx_mrwb = 0\n    list_480a = l\n    while idx_mrwb < len(list_480a):\n        e = list_480a[idx_mrwb]\n        if e >= t and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return False\n        idx_mrwb = idx_mrwb + 1\n    return True\n", "id": "For2While_sample_from_Python/52_to_19", "old_id": "Python/52"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_x34h = 0\n    list_mp2u = brackets\n    while idx_x34h < len(list_mp2u):\n        b = list_mp2u[idx_x34h]\n        if b == \"<\" and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return False\n        idx_x34h = idx_x34h + 1\n    return depth == 0\n", "id": "For2While_sample_from_Python/56_to_20", "old_id": "Python/56"}
{"code": "def common(l1: list, l2: list):\n    ret = set()\n    idx_2x8f = 0\n    list_dtgj = l1\n    while idx_2x8f < len(list_dtgj):\n        e1 = list_dtgj[idx_2x8f]\n        idx_e2qp = 0\n        list_0cnv = l2\n        while idx_e2qp < len(list_0cnv):\n            e2 = list_0cnv[idx_e2qp]\n            if e1 == e2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                ret.add(e1)\n            idx_e2qp = idx_e2qp + 1\n        idx_2x8f = idx_2x8f + 1\n    return sorted(list(ret))\n", "id": "For2While_sample_from_Python/58_to_21", "old_id": "Python/58"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return False\n        idx_kpa9 = 0\n        list_te35 = range(2, k - 1)\n        while idx_kpa9 < len(list_te35):\n            i = list_te35[idx_kpa9]\n            if k % i == 0 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                return False\n            idx_kpa9 = idx_kpa9 + 1\n        return True\n    largest = 1\n    idx_fy17 = 0\n    list_bmnu = range(2, n + 1)\n    while idx_fy17 < len(list_bmnu):\n        j = list_bmnu[idx_fy17]\n        if n % j == 0 and is_prime(j) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            largest = max(largest, j)\n        idx_fy17 = idx_fy17 + 1\n    return largest\n", "id": "For2While_sample_from_Python/59_to_22", "old_id": "Python/59"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_7wmi = 0\n    list_yv3s = brackets\n    while idx_7wmi < len(list_yv3s):\n        b = list_yv3s[idx_7wmi]\n        if b == \"(\" and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            return False\n        idx_7wmi = idx_7wmi + 1\n    return depth == 0\n", "id": "For2While_sample_from_Python/61_to_23", "old_id": "Python/61"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    idx_wzlc = 0\n    list_9tg6 = s.split(' ')\n    while idx_wzlc < len(list_9tg6):\n        i = list_9tg6[idx_wzlc]\n        if i.isdigit() and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            lis.append(int(i))\n        idx_wzlc = idx_wzlc + 1\n    return n - sum(lis)\n", "id": "For2While_sample_from_Python/67_to_24", "old_id": "Python/67"}
{"code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    idx_jil7 = 0\n    list_f6dz = lst\n    while idx_jil7 < len(list_f6dz):\n        i = list_f6dz[idx_jil7]\n        frq[i] += 1;\n        idx_jil7 = idx_jil7 + 1\n\n    ans = -1\n    idx_8zw1 = 0\n    list_ez0m = range(1, len(frq))\n    while idx_8zw1 < len(list_ez0m):\n        i = list_ez0m[idx_8zw1]\n        if frq[i] >= i and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            ans = i\n        idx_8zw1 = idx_8zw1 + 1\n    \n    return ans\n", "id": "For2While_sample_from_Python/69_to_25", "old_id": "Python/69"}
{"code": "def smallest_change(arr):\n    ans = 0\n    idx_x8as = 0\n    list_l1ro = range(len(arr) // 2)\n    while idx_x8as < len(list_l1ro):\n        i = list_l1ro[idx_x8as]\n        if arr[i] != arr[len(arr) - i - 1] and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            ans += 1\n        idx_x8as = idx_x8as + 1\n    return ans\n", "id": "For2While_sample_from_Python/73_to_26", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    idx_n4cr = 0\n    list_s7rj = lst1\n    while idx_n4cr < len(list_s7rj):\n        st = list_s7rj[idx_n4cr]\n        l1 += len(st)\n        idx_n4cr = idx_n4cr + 1\n    \n    l2 = 0\n    idx_6i4y = 0\n    list_hfde = lst2\n    while idx_6i4y < len(list_hfde):\n        st = list_hfde[idx_6i4y]\n        l2 += len(st)\n        idx_6i4y = idx_6i4y + 1\n    if l1 <= l2 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return lst1\n    else:\n        return lst2\n", "id": "For2While_sample_from_Python/74_to_27", "old_id": "Python/74"}
{"code": "def is_multiply_prime(a):\n    def is_prime(n):\n        idx_ds4c = 0\n        list_od1k = range(2,n)\n        while idx_ds4c < len(list_od1k):\n            j = list_od1k[idx_ds4c]\n            if n%j == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n                return False\n            idx_ds4c = idx_ds4c + 1\n        return True\n    idx_u4kf = 0\n    list_u9vd = range(2,101)\n    while idx_u4kf < len(list_u9vd):\n        i = list_u9vd[idx_u4kf]\n        if not is_prime(i) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))): continue\n        idx_xvju = 0\n        list_ybzx = range(2,101)\n        while idx_xvju < len(list_ybzx):\n            j = list_ybzx[idx_xvju]\n            if not is_prime(j) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))): continue\n            idx_knib = 0\n            list_j7mn = range(2,101)\n            while idx_knib < len(list_j7mn):\n                k = list_j7mn[idx_knib]\n                if not is_prime(k) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))): continue\n                if i*j*k == a and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))): return True\n                idx_knib = idx_knib + 1\n            idx_xvju = idx_xvju + 1\n        idx_u4kf = idx_u4kf + 1\n    return False\n", "id": "For2While_sample_from_Python/75_to_28", "old_id": "Python/75"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    idx_my81 = 0\n    list_ab6g = range(0, len(num))\n    while idx_my81 < len(list_ab6g):\n        i = list_ab6g[idx_my81]\n        if num[i] in primes and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            total += 1\n        idx_my81 = idx_my81 + 1\n    return total\n", "id": "For2While_sample_from_Python/78_to_29", "old_id": "Python/78"}
{"code": "def is_happy(s):\n    if len(s) < 3 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n      return False\n    idx_c4n0 = 0\n    list_hq82 = range(len(s) - 2)\n    while idx_c4n0 < len(list_hq82):\n        i = list_hq82[idx_c4n0]\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2] and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n          return False\n        idx_c4n0 = idx_c4n0 + 1\n    return True\n", "id": "For2While_sample_from_Python/80_to_30", "old_id": "Python/80"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_vwzd = 0\n    list_as1e = grades\n    while idx_vwzd < len(list_as1e):\n        gpa = list_as1e[idx_vwzd]\n        if gpa == 4.0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n        idx_vwzd = idx_vwzd + 1\n    return letter_grade\n", "id": "For2While_sample_from_Python/81_to_31", "old_id": "Python/81"}
{"code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        return False\n    idx_k3d1 = 0\n    list_rina = range(2, l)\n    while idx_k3d1 < len(list_rina):\n        i = list_rina[idx_k3d1]\n        if l % i == 0 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            return False\n        idx_k3d1 = idx_k3d1 + 1\n    return True\n", "id": "For2While_sample_from_Python/82_to_32", "old_id": "Python/82"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_k4ea = 0\n    list_g0c8 = s\n    while idx_k4ea < len(list_g0c8):\n        c = list_g0c8[idx_k4ea]\n        if c in d and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n        idx_k4ea = idx_k4ea + 1\n    return out\n", "id": "For2While_sample_from_Python/89_to_33", "old_id": "Python/89"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        idx_a9c7 = 0\n        list_0ajo = range(2,int(n**0.5)+1)\n        while idx_a9c7 < len(list_0ajo):\n            i = list_0ajo[idx_a9c7]\n            if n%i==0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                return False\n            idx_a9c7 = idx_a9c7 + 1\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if (lst[i] > maxx and isPrime(lst[i])) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "For2While_sample_from_Python/94_to_34", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return False\n    else:\n        state = \"start\"\n        idx_xvkn = 0\n        list_p2g6 = dict.keys()\n        while idx_xvkn < len(list_p2g6):\n            key = list_p2g6[idx_xvkn]\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n            idx_xvkn = idx_xvkn + 1\n        return state == \"upper\" or state == \"lower\" \n", "id": "For2While_sample_from_Python/95_to_35", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = []\n    idx_pjl2 = 0\n    list_e3qx = range(2, n)\n    while idx_pjl2 < len(list_e3qx):\n        i = list_e3qx[idx_pjl2]\n        is_prime = True\n        idx_tfni = 0\n        list_pfnk = range(2, i)\n        while idx_tfni < len(list_pfnk):\n            j = list_pfnk[idx_tfni]\n            if i % j == 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                is_prime = False\n                break\n            idx_tfni = idx_tfni + 1\n        if is_prime and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            primes.append(i)\n        idx_pjl2 = idx_pjl2 + 1\n    return primes\n\n", "id": "For2While_sample_from_Python/96_to_36", "old_id": "Python/96"}
{"code": "def count_upper(s):\n    count = 0\n    idx_ld9c = 0\n    list_ex89 = range(0,len(s),2)\n    while idx_ld9c < len(list_ex89):\n        i = list_ex89[idx_ld9c]\n        if s[i] in \"AEIOU\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            count += 1\n        idx_ld9c = idx_ld9c + 1\n    return count\n", "id": "For2While_sample_from_Python/98_to_37", "old_id": "Python/98"}
{"code": "def words_string(s):\n    if not s and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return []\n\n    s_list = []\n    idx_1mhw = 0\n    list_ra05 = s\n    while idx_1mhw < len(list_ra05):\n        letter = list_ra05[idx_1mhw]\n        if letter == ',' and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n        idx_1mhw = idx_1mhw + 1\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "For2While_sample_from_Python/101_to_38", "old_id": "Python/101"}
{"code": "def rounded_avg(n, m):\n    if m < n and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return -1\n    summation = 0\n    idx_s67u = 0\n    list_v7qk = range(n, m+1)\n    while idx_s67u < len(list_v7qk):\n        i = list_v7qk[idx_s67u]\n        summation += i\n        idx_s67u = idx_s67u + 1\n    return bin(round(summation/(m - n + 1)))\n", "id": "For2While_sample_from_Python/103_to_39", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = []\n    idx_et1y = 0\n    list_72hd = x\n    while idx_et1y < len(list_72hd):\n        i = list_72hd[idx_et1y]\n        if all (int(c) % 2 == 1 for c in str(i)) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            odd_digit_elements.append(i)\n        idx_et1y = idx_et1y + 1\n    return sorted(odd_digit_elements)\n", "id": "For2While_sample_from_Python/104_to_40", "old_id": "Python/104"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    idx_0371 = 0\n    list_xvfj = range(1, n+1)\n    while idx_0371 < len(list_xvfj):\n        i = list_xvfj[idx_0371]\n        if i%2 == 1 and is_palindrome(i) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n        idx_0371 = idx_0371 + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "For2While_sample_from_Python/107_to_41", "old_id": "Python/107"}
{"code": "def move_one_ball(arr):\n    if len(arr)==0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    idx_vtlc = 0\n    list_o0q1 = range(len(arr))\n    while idx_vtlc < len(list_o0q1):\n        i = list_o0q1[idx_vtlc]\n        if my_arr[i]!=sorted_array[i] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n          return False\n        idx_vtlc = idx_vtlc + 1\n    return True\n", "id": "For2While_sample_from_Python/109_to_42", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    idx_wrhu = 0\n    list_hg35 = lst1\n    while idx_wrhu < len(list_hg35):\n        i = list_hg35[idx_wrhu]\n        if i%2 == 1 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            odd += 1\n        idx_wrhu = idx_wrhu + 1\n    idx_937f = 0\n    list_yhk8 = lst2\n    while idx_937f < len(list_yhk8):\n        i = list_yhk8[idx_937f]\n        if i%2 == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            even += 1\n        idx_937f = idx_937f + 1\n    if even >= odd and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "For2While_sample_from_Python/110_to_43", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n    idx_g0p6 = 0\n    list_6vhu = list1\n    while idx_g0p6 < len(list_6vhu):\n        i = list_6vhu[idx_g0p6]\n        if (list1.count(i)>t) and i!='' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            t=list1.count(i)\n        idx_g0p6 = idx_g0p6 + 1\n    if t>0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        idx_kda2 = 0\n        list_p6vc = list1\n        while idx_kda2 < len(list_p6vc):\n            i = list_p6vc[idx_kda2]\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n            idx_kda2 = idx_kda2 + 1\n    return dict1\n", "id": "For2While_sample_from_Python/111_to_44", "old_id": "Python/111"}
{"code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    idx_wjem = 0\n    list_vt0p = nums\n    while idx_wjem < len(list_vt0p):\n        num = list_vt0p[idx_wjem]\n        s += -num\n        if (s < 0) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            s = 0\n        max_sum = max(s, max_sum)\n        idx_wjem = idx_wjem + 1\n    if max_sum == 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "For2While_sample_from_Python/114_to_45", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    idx_jsuk = 0\n    list_8lp4 = s.split()\n    while idx_jsuk < len(list_8lp4):\n        word = list_8lp4[idx_jsuk]\n        n_consonants = 0\n        idx_qnkz = 0\n        list_clw2 = range(0, len(word))\n        while idx_qnkz < len(list_clw2):\n            i = list_clw2[idx_qnkz]\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"] and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n                n_consonants += 1 \n            idx_qnkz = idx_qnkz + 1\n        if n_consonants == n and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            result.append(word)\n        idx_jsuk = idx_jsuk + 1\n    return result\n\n", "id": "For2While_sample_from_Python/117_to_46", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < 3 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    idx_mksc = 0\n    list_u9sp = range(len(word)-2, 0, -1)\n    while idx_mksc < len(list_u9sp):\n        i = list_u9sp[idx_mksc]\n        if word[i] in vowels and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n        idx_mksc = idx_mksc + 1\n    return \"\"\n", "id": "For2While_sample_from_Python/118_to_47", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_dw3j = 0\n        list_jib2 = s\n        while idx_dw3j < len(list_jib2):\n            i = list_jib2[idx_dw3j]\n            if i == '(' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                return False\n            idx_dw3j = idx_dw3j + 1\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "For2While_sample_from_Python/119_to_48", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    idx_wleq = 0\n    list_2nk9 = lst\n    while idx_wleq < len(list_2nk9):\n        i = list_2nk9[idx_wleq]\n        count_digit[i]+=1 \n        idx_wleq = idx_wleq + 1\n    if any(count_digit[i] > 2 for i in lst) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "For2While_sample_from_Python/126_to_49", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return False\n        if num == 2 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            return True\n        idx_tj5d = 0\n        list_xvd8 = range(2, num)\n        while idx_tj5d < len(list_xvd8):\n            i = list_xvd8[idx_tj5d]\n            if num%i == 0 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n                return False\n            idx_tj5d = idx_tj5d + 1\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return \"YES\"\n    return \"NO\"\n", "id": "For2While_sample_from_Python/127_to_50", "old_id": "Python/127"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    idx_dotm = 0\n    list_xn3c = range(n)\n    while idx_dotm < len(list_xn3c):\n        i = list_xn3c[idx_dotm]\n        idx_acbn = 0\n        list_41fb = range(n)\n        while idx_acbn < len(list_41fb):\n            j = list_41fb[idx_acbn]\n            if grid[i][j] == 1 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n            idx_acbn = idx_acbn + 1\n        idx_dotm = idx_dotm + 1\n\n    ans = []\n    idx_9nig = 0\n    list_0lmx = range(k)\n    while idx_9nig < len(list_0lmx):\n        i = list_0lmx[idx_9nig]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            ans.append(1)\n        else:\n            ans.append(val)\n        idx_9nig = idx_9nig + 1\n    return ans\n", "id": "For2While_sample_from_Python/129_to_51", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        return [1]\n    my_tri = [1, 3]\n    idx_6b95 = 0\n    list_uk94 = range(2, n + 1)\n    while idx_6b95 < len(list_uk94):\n        i = list_uk94[idx_6b95]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n        idx_6b95 = idx_6b95 + 1\n    return my_tri\n", "id": "For2While_sample_from_Python/130_to_52", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    idx_w1jh = 0\n    list_ea4u = str(n)\n    while idx_w1jh < len(list_ea4u):\n        digit = list_ea4u[idx_w1jh]\n        int_digit = int(digit)\n        if int_digit%2 == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            product= product*int_digit\n            odd_count+=1\n        idx_w1jh = idx_w1jh + 1\n    if odd_count ==0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return 0\n    else:\n        return product\n", "id": "For2While_sample_from_Python/131_to_53", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_eyb7 = 0\n    list_g4uk = range(len(string))\n    while idx_eyb7 < len(list_g4uk):\n        i = list_g4uk[idx_eyb7]\n        if string[i] == '[' and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        idx_eyb7 = idx_eyb7 + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_rtd5 = 0\n    list_3ais = opening_bracket_index\n    while idx_rtd5 < len(list_3ais):\n        idx = list_3ais[idx_rtd5]\n        if i < l and idx < closing_bracket_index[i] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            cnt += 1\n            i += 1\n        idx_rtd5 = idx_rtd5 + 1\n    return cnt >= 2\n\n    \n", "id": "For2While_sample_from_Python/132_to_54", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    idx_61cp = 0\n    list_5dja = range(len(lst))\n    while idx_61cp < len(list_5dja):\n        i = list_5dja[idx_61cp]\n        if i %3 == 0 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n        idx_61cp = idx_61cp + 1\n    return sum(result)\n", "id": "For2While_sample_from_Python/142_to_55", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    idx_an23 = 0\n    list_8yrx = sentence.split()\n    while idx_an23 < len(list_8yrx):\n        word = list_8yrx[idx_an23]\n        flg = 0\n        if len(word) == 1 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            flg = 1\n        idx_btap = 0\n        list_hy98 = range(2, len(word))\n        while idx_btap < len(list_hy98):\n            i = list_hy98[idx_btap]\n            if len(word)%i == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                flg = 1\n            idx_btap = idx_btap + 1\n        if flg == 0 or len(word) == 2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            new_lst.append(word)\n        idx_an23 = idx_an23 + 1\n    return \" \".join(new_lst)\n", "id": "For2While_sample_from_Python/143_to_56", "old_id": "Python/143"}
{"code": "def specialFilter(nums):\n    \n    count = 0\n    idx_rcgz = 0\n    list_7di9 = nums\n    while idx_rcgz < len(list_7di9):\n        num = list_7di9[idx_rcgz]\n        if num > 10 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        idx_rcgz = idx_rcgz + 1\n    return count \n", "id": "For2While_sample_from_Python/146_to_57", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    idx_qt5l = 0\n    list_9k6x = range(n)\n    while idx_qt5l < len(list_9k6x):\n        i = list_9k6x[idx_qt5l]\n        idx_elv4 = 0\n        list_dg94 = range(i+1,n)\n        while idx_elv4 < len(list_dg94):\n            j = list_dg94[idx_elv4]\n            idx_h6ql = 0\n            list_gd6j = range(j+1,n)\n            while idx_h6ql < len(list_gd6j):\n                k = list_gd6j[idx_h6ql]\n                if (A[i]+A[j]+A[k])%3 == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                    ans += [(A[i],A[j],A[k])]\n                idx_h6ql = idx_h6ql + 1\n            idx_elv4 = idx_elv4 + 1\n        idx_qt5l = idx_qt5l + 1\n    return len(ans)\n", "id": "For2While_sample_from_Python/147_to_58", "old_id": "Python/147"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    idx_pgye = 0\n    list_t8bl = lst\n    while idx_pgye < len(list_t8bl):\n        i = list_t8bl[idx_pgye]\n        if len(i)%2 == 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            new_lst.append(i)\n        idx_pgye = idx_pgye + 1\n    return sorted(new_lst, key=len)\n", "id": "For2While_sample_from_Python/149_to_59", "old_id": "Python/149"}
{"code": "def x_or_y(n, x, y):\n    if n == 1 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        return y\n    idx_olxg = 0\n    list_hsgq = range(2, n)\n    while idx_olxg < len(list_hsgq):\n        i = list_hsgq[idx_olxg]\n        if n % i == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            return y\n            break\n        idx_olxg = idx_olxg + 1\n", "id": "For2While_sample_from_Python/150_to_60", "old_id": "Python/150"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    idx_9e32 = 0\n    list_3gu8 = extensions\n    while idx_9e32 < len(list_3gu8):\n        s = list_3gu8[idx_9e32]\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            strong = s\n            my_val = val\n        idx_9e32 = idx_9e32 + 1\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "id": "For2While_sample_from_Python/153_to_61", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    idx_ael6 = 0\n    list_5ygv = range(len(a) - l + 1)\n    while idx_ael6 < len(list_5ygv):\n        i = list_5ygv[idx_ael6]\n        idx_5qy4 = 0\n        list_f8h4 = range(l + 1)\n        while idx_5qy4 < len(list_f8h4):\n            j = list_f8h4[idx_5qy4]\n            if a[i:i+l] == pat[j:j+l] and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                return True\n            idx_5qy4 = idx_5qy4 + 1\n        idx_ael6 = idx_ael6 + 1\n    return False\n", "id": "For2While_sample_from_Python/154_to_62", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    idx_7vcb = 0\n    list_2bfy = str(abs(num))\n    while idx_7vcb < len(list_2bfy):\n        i = list_2bfy[idx_7vcb]\n        if int(i)%2==0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            even_count +=1\n        else:\n            odd_count +=1\n        idx_7vcb = idx_7vcb + 1\n    return (even_count, odd_count)\n", "id": "For2While_sample_from_Python/155_to_63", "old_id": "Python/155"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    idx_l3t1 = 0\n    list_7a38 = s\n    while idx_l3t1 < len(list_7a38):\n        i = list_7a38[idx_l3t1]\n        if i.isalpha() and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n        idx_l3t1 = idx_l3t1 + 1\n    s = \"\"\n    idx_u62z = 0\n    list_e7n2 = new_str\n    while idx_u62z < len(list_e7n2):\n        i = list_e7n2[idx_u62z]\n        s += i\n        idx_u62z = idx_u62z + 1\n    if flg == 0 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return s[len(s)::-1]\n    return s\n", "id": "For2While_sample_from_Python/161_to_64", "old_id": "Python/161"}
