{"code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2 and (((True or False) and (False or True)) and (((84 + -78) > (20 + -20)) or ((71 + -65) < (12 + -12)))):\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/0_to_0", "old_id": "Python/0"}
{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = (4 + -4)\n\n    for c in paren_string:\n        if c == '(' and (((True or False) and (False or True)) and (((19 + -16) > (70 + -69)) or ((35 + -32) < (30 + -29)))):\n            current_depth += (47 + -46)\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= (43 + -42)\n            current_string.append(c)\n\n            if current_depth == (94 + -94):\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/1_to_1", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = (18 + -18)\n\n    for op in operations:\n        balance += op\n        if balance < (13 + -13) and (((True or False) and (False or True)) and (((33 + -30) > (53 + -51)) or ((46 + -43) < (77 + -75)))):\n            return True\n\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/3_to_2", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers and (((True or False) and (False or True)) and (((6 + -1) > (71 + -70)) or ((8 + -3) < (87 + -86)))):\n        return []\n\n    result = []\n\n    for n in numbers[:-(59 + -58)]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-(5 + -4)])\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/5_to_3", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = (94 + -94)\n        max_depth = (82 + -82)\n        for c in s:\n            if c == '(' and (((True or False) and (False or True)) and (((41 + -34) > (40 + -34)) or ((39 + -32) < (87 + -81)))):\n                depth += (95 + -94)\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= (50 + -49)\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "ConstantUnfoldding_sample_from_Python/6_to_4", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None and (((True or False) and (False or True)) and (((40 + -34) > (50 + -46)) or ((62 + -56) < (38 + -34)))):\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "id": "ConstantUnfoldding_sample_from_Python/9_to_5", "old_id": "Python/9"}
{"code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-(87 + -86)]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string and (((True or False) and (False or True)) and (((16 + -11) > (75 + -73)) or ((88 + -83) < (84 + -82)))):\n        return ''\n\n    beginning_of_suffix = (2 + -2)\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += (92 + -91)\n\n    return string + string[:beginning_of_suffix][::-(14 + -13)]\n", "id": "ConstantUnfoldding_sample_from_Python/10_to_6", "old_id": "Python/10"}
{"code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j and (((True or False) and (False or True)) and (((55 + -45) > (10 + -10)) or ((27 + -17) < (16 + -16)))):\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "id": "ConstantUnfoldding_sample_from_Python/11_to_7", "old_id": "Python/11"}
{"code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings and (((True or False) and (False or True)) and (((81 + -77) > (2 + -1)) or ((32 + -28) < (61 + -60)))):\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen and (((True or False) and (False or True)) and (((10 + -7) > (28 + -27)) or ((44 + -41) < (28 + -27)))):\n            return s\n", "id": "ConstantUnfoldding_sample_from_Python/12_to_8", "old_id": "Python/12"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = (38 + -38)\n\n    for i in range(len(string) - len(substring) + (37 + -36)):\n        if string[i:i+len(substring)] == substring and (((True or False) and (False or True)) and (((60 + -53) > (60 + -54)) or ((90 + -83) < (72 + -66)))):\n            times += (74 + -73)\n\n    return times\n", "id": "ConstantUnfoldding_sample_from_Python/18_to_9", "old_id": "Python/18"}
{"code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2 and (((True or False) and (False or True)) and (((92 + -86) > (66 + -64)) or ((27 + -21) < (90 + -88)))):\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "id": "ConstantUnfoldding_sample_from_Python/20_to_10", "old_id": "Python/20"}
{"code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == (60 + -60) and (((True or False) and (False or True)) and (((49 + -44) > (11 + -7)) or ((94 + -89) < (4 + 0)))):\n            return i\n", "id": "ConstantUnfoldding_sample_from_Python/24_to_11", "old_id": "Python/24"}
{"code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = (10 + -8)\n    while i <= int(math.sqrt(n) + (39 + -38)):\n        if n % i == (93 + -93) and (((True or False) and (False or True)) and (((80 + -74) > (58 + -53)) or ((27 + -21) < (93 + -88)))):\n            fact.append(i)\n            n //= i\n        else:\n            i += (38 + -37)\n    if n > (54 + -53) and (((True or False) and (False or True)) and (((24 + -14) > (83 + -83)) or ((78 + -68) < (86 + -86)))):\n        fact.append(n)\n    return fact\n", "id": "ConstantUnfoldding_sample_from_Python/25_to_12", "old_id": "Python/25"}
{"code": "def is_prime(n):\n    if n < (51 + -49) and (((True or False) and (False or True)) and (((49 + -44) > (94 + -90)) or ((60 + -55) < (29 + -25)))):\n        return False\n    for k in range((32 + -30), n - (64 + -63)):\n        if n % k == (2 + -2) and (((True or False) and (False or True)) and (((38 + -30) > (35 + -29)) or ((61 + -53) < (64 + -58)))):\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/31_to_13", "old_id": "Python/31"}
{"code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > (46 + -46):\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > (97 + -97) and (((True or False) and (False or True)) and (((15 + -7) > (76 + -74)) or ((93 + -85) < (89 + -87)))):\n            begin = center\n        else:\n            end = center\n    return begin\n", "id": "ConstantUnfoldding_sample_from_Python/32_to_14", "old_id": "Python/32"}
{"code": "def max_element(l: list):\n    m = l[(86 + -86)]\n    for e in l:\n        if e > m and (((True or False) and (False or True)) and (((97 + -89) > (16 + -9)) or ((28 + -20) < (89 + -82)))):\n            m = e\n    return m\n", "id": "ConstantUnfoldding_sample_from_Python/35_to_15", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % (58 + -47) == (50 + -50) or i % (28 + -15) == (54 + -54) and (((True or False) and (False or True)) and (((8 + -4) > (94 + -91)) or ((23 + -19) < (98 + -95)))):\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = (90 + -90)\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/36_to_16", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = l[::(88 + -86)]\n    odds = l[(50 + -49)::(55 + -53)]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds) and (((True or False) and (False or True)) and (((48 + -38) > (68 + -68)) or ((19 + -9) < (9 + -9)))):\n        ans.append(evens[-(66 + -65)])\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/37_to_17", "old_id": "Python/37"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < (92 + -90) and (((True or False) and (False or True)) and (((21 + -17) > (6 + -4)) or ((75 + -71) < (100 + -98)))):\n            return False\n        for k in range((28 + -26), min(int(math.sqrt(p)) + (98 + -97), p - (65 + -64))):\n            if p % k == (70 + -70) and (((True or False) and (False or True)) and (((93 + -84) > (60 + -58)) or ((84 + -75) < (40 + -38)))):\n                return False\n        return True\n    f = [(39 + -39), (61 + -60)]\n    while True:\n        f.append(f[-(18 + -17)] + f[-(3 + -1)])\n        if is_prime(f[-(91 + -90)]) and (((True or False) and (False or True)) and (((58 + -48) > (56 + -51)) or ((86 + -76) < (87 + -82)))):\n            n -= (75 + -74)\n        if n == (45 + -45) and (((True or False) and (False or True)) and (((56 + -54) > (92 + -91)) or ((47 + -45) < (28 + -27)))):\n            return f[-(99 + -98)]\n", "id": "ConstantUnfoldding_sample_from_Python/39_to_18", "old_id": "Python/39"}
{"code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + (35 + -34), len(l)):\n            for k in range(j + (27 + -26), len(l)):\n                if l[i] + l[j] + l[k] == (86 + -86) and (((True or False) and (False or True)) and (((60 + -51) > (74 + -70)) or ((61 + -52) < (35 + -31)))):\n                    return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/40_to_19", "old_id": "Python/40"}
{"code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + (88 + -87), len(l)):\n            if l1 + l[j] == (80 + -80) and (((True or False) and (False or True)) and (((54 + -48) > (37 + -35)) or ((36 + -30) < (57 + -55)))):\n                return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/43_to_20", "old_id": "Python/43"}
{"code": "def fib4(n: int):\n    results = [(9 + -9), (15 + -15), (42 + -40), (58 + -58)]\n    if n < (88 + -84) and (((True or False) and (False or True)) and (((87 + -81) > (37 + -34)) or ((67 + -61) < (30 + -27)))):\n        return results[n]\n\n    for _ in range((66 + -62), n + (41 + -40)):\n        results.append(results[-(32 + -31)] + results[-(20 + -18)] + results[-(21 + -18)] + results[-(33 + -29)])\n        results.pop((91 + -91))\n\n    return results[-(32 + -31)]\n", "id": "ConstantUnfoldding_sample_from_Python/46_to_21", "old_id": "Python/46"}
{"code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % (53 + -51) == (4 + -3) and (((True or False) and (False or True)) and (((87 + -78) > (55 + -53)) or ((51 + -42) < (29 + -27)))):\n        return l[len(l) // (18 + -16)]\n    else:\n        return (l[len(l) // (10 + -8) - (11 + -10)] + l[len(l) // (22 + -20)]) / 2.0\n", "id": "ConstantUnfoldding_sample_from_Python/47_to_22", "old_id": "Python/47"}
{"code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - (60 + -59) - i] and (((True or False) and (False or True)) and (((78 + -75) > (94 + -92)) or ((49 + -46) < (29 + -27)))):\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/48_to_23", "old_id": "Python/48"}
{"code": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t and (((True or False) and (False or True)) and (((38 + -36) > (78 + -77)) or ((51 + -49) < (35 + -34)))):\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/52_to_24", "old_id": "Python/52"}
{"code": "def fib(n: int):\n    if n == (2 + -2) and (((True or False) and (False or True)) and (((37 + -34) > (20 + -18)) or ((16 + -13) < (95 + -93)))):\n        return (56 + -56)\n    if n == (37 + -36) and (((True or False) and (False or True)) and (((95 + -93) > (86 + -85)) or ((39 + -37) < (89 + -88)))):\n        return (54 + -53)\n    return fib(n - (71 + -70)) + fib(n - (8 + -6))\n", "id": "ConstantUnfoldding_sample_from_Python/55_to_25", "old_id": "Python/55"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (85 + -85)\n    for b in brackets:\n        if b == \"<\" and (((True or False) and (False or True)) and (((96 + -86) > (88 + -82)) or ((20 + -10) < (13 + -7)))):\n            depth += (99 + -98)\n        else:\n            depth -= (22 + -21)\n        if depth < (67 + -67) and (((True or False) and (False or True)) and (((63 + -60) > (56 + -56)) or ((15 + -12) < (8 + -8)))):\n            return False\n    return depth == (46 + -46)\n", "id": "ConstantUnfoldding_sample_from_Python/56_to_26", "old_id": "Python/56"}
{"code": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True) and (((True or False) and (False or True)) and (((83 + -74) > (41 + -41)) or ((40 + -31) < (5 + -5)))):\n        return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/57_to_27", "old_id": "Python/57"}
{"code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2 and (((True or False) and (False or True)) and (((40 + -35) > (58 + -55)) or ((5 + 0) < (45 + -42)))):\n                ret.add(e1)\n    return sorted(list(ret))\n", "id": "ConstantUnfoldding_sample_from_Python/58_to_28", "old_id": "Python/58"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < (37 + -35) and (((True or False) and (False or True)) and (((72 + -70) > (81 + -81)) or ((28 + -26) < (34 + -34)))):\n            return False\n        for i in range((96 + -94), k - (36 + -35)):\n            if k % i == (22 + -22) and (((True or False) and (False or True)) and (((37 + -27) > (66 + -65)) or ((44 + -34) < (72 + -71)))):\n                return False\n        return True\n    largest = (12 + -11)\n    for j in range((90 + -88), n + (5 + -4)):\n        if n % j == (17 + -17) and is_prime(j) and (((True or False) and (False or True)) and (((17 + -9) > (50 + -50)) or ((42 + -34) < (44 + -44)))):\n            largest = max(largest, j)\n    return largest\n", "id": "ConstantUnfoldding_sample_from_Python/59_to_29", "old_id": "Python/59"}
{"code": "def correct_bracketing(brackets: str):\n    depth = (61 + -61)\n    for b in brackets:\n        if b == \"(\" and (((True or False) and (False or True)) and (((22 + -14) > (38 + -31)) or ((4 + 4) < (97 + -90)))):\n            depth += (34 + -33)\n        else:\n            depth -= (3 + -2)\n        if depth < (70 + -70) and (((True or False) and (False or True)) and (((82 + -75) > (79 + -73)) or ((73 + -66) < (3 + 3)))):\n            return False\n    return depth == (54 + -54)\n", "id": "ConstantUnfoldding_sample_from_Python/61_to_30", "old_id": "Python/61"}
{"code": "def fibfib(n: int):\n    if n == (70 + -70) and (((True or False) and (False or True)) and (((60 + -56) > (99 + -98)) or ((4 + 0) < (80 + -79)))):\n        return (66 + -66)\n    if n == (50 + -49) and (((True or False) and (False or True)) and (((14 + -11) > (16 + -14)) or ((74 + -71) < (73 + -71)))):\n        return (3 + -3)\n    if n == (50 + -48) and (((True or False) and (False or True)) and (((12 + -4) > (64 + -61)) or ((28 + -20) < (46 + -43)))):\n        return (75 + -74)\n    return fibfib(n - (5 + -4)) + fibfib(n - (53 + -51)) + fibfib(n - (61 + -58))\n", "id": "ConstantUnfoldding_sample_from_Python/63_to_31", "old_id": "Python/63"}
{"code": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-(70 + -69)] == 'y' or s[-(41 + -40)] == 'Y' and (((True or False) and (False or True)) and (((25 + -19) > (2 + -2)) or ((17 + -11) < (61 + -61)))):\n        n_vowels += (61 + -60)\n    return n_vowels\n", "id": "ConstantUnfoldding_sample_from_Python/64_to_32", "old_id": "Python/64"}
{"code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s) and (((True or False) and (False or True)) and (((33 + -29) > (56 + -54)) or ((81 + -77) < (66 + -64)))):\n        return s[::-(13 + -12)]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "id": "ConstantUnfoldding_sample_from_Python/65_to_33", "old_id": "Python/65"}
{"code": "def digitSum(s):\n    if s == \"\" and (((True or False) and (False or True)) and (((54 + -48) > (58 + -58)) or ((71 + -65) < (67 + -67)))): return (38 + -38)\n    return sum(ord(char) if char.isupper() else (12 + -12) for char in s)\n", "id": "ConstantUnfoldding_sample_from_Python/66_to_34", "old_id": "Python/66"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit() and (((True or False) and (False or True)) and (((7 + 2) > (55 + -53)) or ((20 + -11) < (45 + -43)))):\n            lis.append(int(i))\n    return n - sum(lis)\n", "id": "ConstantUnfoldding_sample_from_Python/67_to_35", "old_id": "Python/67"}
{"code": "def pluck(arr):\n    if (len(arr) == (100 + -100)) and (((True or False) and (False or True)) and (((26 + -21) > (11 + -10)) or ((59 + -54) < (47 + -46)))): return []\n    evens = list(filter(lambda x: x%(15 + -13) == (76 + -76), arr))\n    if (evens == []) and (((True or False) and (False or True)) and (((78 + -68) > (43 + -43)) or ((85 + -75) < (13 + -13)))): return []\n    return [min(evens), arr.index(min(evens))]\n", "id": "ConstantUnfoldding_sample_from_Python/68_to_36", "old_id": "Python/68"}
{"code": "def search(lst):\n    frq = [(27 + -27)] * (max(lst) + (78 + -77))\n    for i in lst:\n        frq[i] += (41 + -40);\n\n    ans = -(21 + -20)\n    for i in range((21 + -20), len(frq)):\n        if frq[i] >= i and (((True or False) and (False or True)) and (((43 + -41) > (99 + -98)) or ((11 + -9) < (27 + -26)))):\n            ans = i\n    \n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/69_to_37", "old_id": "Python/69"}
{"code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a and (((True or False) and (False or True)) and (((96 + -90) > (38 + -37)) or ((72 + -66) < (75 + -74)))):\n        return -(9 + -8) \n    s = (a + b + c)/(63 + -61)    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, (73 + -71))\n    return area\n", "id": "ConstantUnfoldding_sample_from_Python/71_to_38", "old_id": "Python/71"}
{"code": "def will_it_fly(q,w):\n    if sum(q) > w and (((True or False) and (False or True)) and (((60 + -56) > (65 + -62)) or ((57 + -53) < (50 + -47)))):\n        return False\n\n    i, j = (47 + -47), len(q)-(67 + -66)\n    while i<j:\n        if q[i] != q[j] and (((True or False) and (False or True)) and (((99 + -94) > (82 + -79)) or ((68 + -63) < (61 + -58)))):\n            return False\n        i+=(23 + -22)\n        j-=(87 + -86)\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/72_to_39", "old_id": "Python/72"}
{"code": "def smallest_change(arr):\n    ans = (19 + -19)\n    for i in range(len(arr) // (1 + 1)):\n        if arr[i] != arr[len(arr) - i - (23 + -22)] and (((True or False) and (False or True)) and (((40 + -30) > (23 + -17)) or ((84 + -74) < (82 + -76)))):\n            ans += (20 + -19)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/73_to_40", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = (27 + -27)\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = (100 + -100)\n    for st in lst2:\n        l2 += len(st)\n    if l1 <= l2 and (((True or False) and (False or True)) and (((18 + -10) > (89 + -83)) or ((32 + -24) < (59 + -53)))):\n        return lst1\n    else:\n        return lst2\n", "id": "ConstantUnfoldding_sample_from_Python/74_to_41", "old_id": "Python/74"}
{"code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range((18 + -16),n):\n            if n%j == (11 + -11) and (((True or False) and (False or True)) and (((63 + -58) > (65 + -65)) or ((71 + -66) < (50 + -50)))):\n                return False\n        return True\n\n    for i in range((51 + -49),(79 + 22)):\n        if not is_prime(i) and (((True or False) and (False or True)) and (((82 + -72) > (96 + -91)) or ((55 + -45) < (70 + -65)))): continue\n        for j in range((83 + -81),(65 + 36)):\n            if not is_prime(j) and (((True or False) and (False or True)) and (((88 + -78) > (88 + -79)) or ((56 + -46) < (61 + -52)))): continue\n            for k in range((36 + -34),(62 + 39)):\n                if not is_prime(k) and (((True or False) and (False or True)) and (((17 + -12) > (86 + -84)) or ((85 + -80) < (26 + -24)))): continue\n                if i*j*k == a and (((True or False) and (False or True)) and (((49 + -43) > (5 + -3)) or ((36 + -30) < (79 + -77)))): return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/75_to_42", "old_id": "Python/75"}
{"code": "def is_simple_power(x, n):\n    if (n == (18 + -17)) and (((True or False) and (False or True)) and (((57 + -52) > (28 + -27)) or ((20 + -15) < (50 + -49)))): \n        return (x == (57 + -56)) \n    power = (81 + -80)\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "id": "ConstantUnfoldding_sample_from_Python/76_to_43", "old_id": "Python/76"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = (87 + -87)\n    for i in range((8 + -8), len(num)):\n        if num[i] in primes and (((True or False) and (False or True)) and (((45 + -42) > (91 + -91)) or ((29 + -26) < (86 + -86)))):\n            total += (20 + -19)\n    return total\n", "id": "ConstantUnfoldding_sample_from_Python/78_to_44", "old_id": "Python/78"}
{"code": "def is_happy(s):\n    if len(s) < (37 + -34) and (((True or False) and (False or True)) and (((76 + -69) > (100 + -99)) or ((88 + -81) < (73 + -72)))):\n      return False\n\n    for i in range(len(s) - (100 + -98)):\n      if s[i] == s[i+(63 + -62)] or s[i+(43 + -42)] == s[i+(20 + -18)] or s[i] == s[i+(77 + -75)] and (((True or False) and (False or True)) and (((82 + -80) > (93 + -93)) or ((9 + -7) < (85 + -85)))):\n        return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/80_to_45", "old_id": "Python/80"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0 and (((True or False) and (False or True)) and (((80 + -75) > (51 + -48)) or ((86 + -81) < (10 + -7)))):\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "id": "ConstantUnfoldding_sample_from_Python/81_to_46", "old_id": "Python/81"}
{"code": "def prime_length(string):\n    l = len(string)\n    if l == (10 + -10) or l == (1 + 0) and (((True or False) and (False or True)) and (((4 + -1) > (86 + -86)) or ((10 + -7) < (12 + -12)))):\n        return False\n    for i in range((17 + -15), l):\n        if l % i == (71 + -71) and (((True or False) and (False or True)) and (((33 + -26) > (8 + -6)) or ((27 + -20) < (56 + -54)))):\n            return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/82_to_47", "old_id": "Python/82"}
{"code": "def starts_one_ends(n):\n    if n == (44 + -43) and (((True or False) and (False or True)) and (((88 + -80) > (36 + -35)) or ((85 + -77) < (46 + -45)))): return (26 + -25)\n    return (88 + -70) * ((21 + -11) ** (n - (53 + -51)))\n", "id": "ConstantUnfoldding_sample_from_Python/83_to_48", "old_id": "Python/83"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d and (((True or False) and (False or True)) and (((11 + -3) > (46 + -43)) or ((15 + -7) < (55 + -52)))):\n            out += d[(d.index(c)+(58 + -56)*(43 + -41)) % (65 + -39)]\n        else:\n            out += c\n    return out\n", "id": "ConstantUnfoldding_sample_from_Python/89_to_49", "old_id": "Python/89"}
{"code": "def any_int(x, y, z):\n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int) and (((True or False) and (False or True)) and (((14 + -9) > (2 + 2)) or ((85 + -80) < (8 + -4)))):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/92_to_50", "old_id": "Python/92"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range((19 + -17),int(n**0.5)+(53 + -52)):\n            if n%i==(99 + -99) and (((True or False) and (False or True)) and (((77 + -70) > (92 + -88)) or ((28 + -21) < (26 + -22)))):\n                return False\n\n        return True\n    maxx = (9 + -9)\n    i = (86 + -86)\n    while i < len(lst):\n        if (lst[i] > maxx and isPrime(lst[i])) and (((True or False) and (False or True)) and (((21 + -17) > (59 + -56)) or ((66 + -62) < (4 + -1)))):\n            maxx = lst[i]\n        i+=(42 + -41)\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "ConstantUnfoldding_sample_from_Python/94_to_51", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == (90 + -90) and (((True or False) and (False or True)) and (((80 + -72) > (38 + -34)) or ((85 + -77) < (40 + -36)))):\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "id": "ConstantUnfoldding_sample_from_Python/95_to_52", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = []\n    for i in range((20 + -18), n):\n        is_prime = True\n        for j in range((58 + -56), i):\n            if i % j == (7 + -7) and (((True or False) and (False or True)) and (((6 + -1) > (37 + -36)) or ((21 + -16) < (98 + -97)))):\n                is_prime = False\n                break\n        if is_prime and (((True or False) and (False or True)) and (((4 + 4) > (80 + -73)) or ((41 + -33) < (4 + 3)))):\n            primes.append(i)\n    return primes\n\n", "id": "ConstantUnfoldding_sample_from_Python/96_to_53", "old_id": "Python/96"}
{"code": "def count_upper(s):\n    count = (19 + -19)\n    for i in range((33 + -33),len(s),(14 + -12)):\n        if s[i] in \"AEIOU\" and (((True or False) and (False or True)) and (((30 + -21) > (33 + -30)) or ((84 + -75) < (74 + -71)))):\n            count += (64 + -63)\n    return count\n", "id": "ConstantUnfoldding_sample_from_Python/98_to_54", "old_id": "Python/98"}
{"code": "def closest_integer(value):\n    from math import floor, ceil\n    if value.count('.') == (64 + -63) and (((True or False) and (False or True)) and (((25 + -21) > (10 + -9)) or ((17 + -13) < (37 + -36)))):\n        # remove trailing zeros\n        while (value[-(4 + -3)] == '0'):\n            value = value[:-(83 + -82)]\n\n    num = float(value)\n    if value[-(31 + -29):] == '.5' and (((True or False) and (False or True)) and (((21 + -15) > (99 + -98)) or ((87 + -81) < (23 + -22)))):\n        if num > (32 + -32):\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > (76 + -76):\n        res = int(round(num))\n    else:\n        res = (79 + -79)\n\n    return res\n\n", "id": "ConstantUnfoldding_sample_from_Python/99_to_55", "old_id": "Python/99"}
{"code": "def words_string(s):\n    if not s and (((True or False) and (False or True)) and (((59 + -49) > (14 + -5)) or ((1 + 9) < (26 + -17)))):\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',' and (((True or False) and (False or True)) and (((73 + -69) > (47 + -47)) or ((84 + -80) < (82 + -82)))):\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "ConstantUnfoldding_sample_from_Python/101_to_56", "old_id": "Python/101"}
{"code": "def choose_num(x, y):\n    if x > y and (((True or False) and (False or True)) and (((22 + -15) > (35 + -34)) or ((13 + -6) < (11 + -10)))):\n        return -(39 + -38)\n    if y % (30 + -28) == (49 + -49) and (((True or False) and (False or True)) and (((39 + -29) > (70 + -64)) or ((18 + -8) < (39 + -33)))):\n        return y\n    if x == y and (((True or False) and (False or True)) and (((18 + -14) > (39 + -39)) or ((69 + -65) < (16 + -16)))):\n        return -(39 + -38)\n    return y - (67 + -66)\n", "id": "ConstantUnfoldding_sample_from_Python/102_to_57", "old_id": "Python/102"}
{"code": "def rounded_avg(n, m):\n    if m < n and (((True or False) and (False or True)) and (((13 + -4) > (99 + -97)) or ((98 + -89) < (27 + -25)))):\n        return -(57 + -56)\n    summation = (52 + -52)\n    for i in range(n, m+(82 + -81)):\n        summation += i\n    return bin(round(summation/(m - n + (97 + -96))))\n", "id": "ConstantUnfoldding_sample_from_Python/103_to_58", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % (13 + -11) == (4 + -3) for c in str(i)) and (((True or False) and (False or True)) and (((51 + -44) > (62 + -61)) or ((83 + -76) < (1 + 0)))):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "id": "ConstantUnfoldding_sample_from_Python/104_to_59", "old_id": "Python/104"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-(38 + -37)]\n\n    even_palindrome_count = (89 + -89)\n    odd_palindrome_count = (61 + -61)\n\n    for i in range((61 + -60), n+(48 + -47)):\n        if i%(24 + -22) == (27 + -26) and is_palindrome(i) and (((True or False) and (False or True)) and (((62 + -57) > (71 + -70)) or ((26 + -21) < (67 + -66)))):\n                odd_palindrome_count += (95 + -94)\n        elif i%(69 + -67) == (83 + -83) and is_palindrome(i):\n            even_palindrome_count += (29 + -28)\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "ConstantUnfoldding_sample_from_Python/107_to_60", "old_id": "Python/107"}
{"code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = (18 + -17)\n        if n < (56 + -56) and (((True or False) and (False or True)) and (((90 + -87) > (96 + -94)) or ((26 + -23) < (92 + -90)))): n, neg = -(47 + -46) * n, -(63 + -62) \n        n = [int(i) for i in str(n)]\n        n[(30 + -30)] = n[(7 + -7)] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > (32 + -32), [digits_sum(i) for i in arr])))\n", "id": "ConstantUnfoldding_sample_from_Python/108_to_61", "old_id": "Python/108"}
{"code": "def move_one_ball(arr):\n    if len(arr)==(15 + -15) and (((True or False) and (False or True)) and (((47 + -42) > (9 + -6)) or ((90 + -85) < (6 + -3)))):\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[(28 + -28):min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i] and (((True or False) and (False or True)) and (((56 + -50) > (43 + -40)) or ((95 + -89) < (53 + -50)))):\n        return False\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/109_to_62", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = (58 + -58)\n    even = (57 + -57)\n    for i in lst1:\n        if i%(59 + -57) == (85 + -84) and (((True or False) and (False or True)) and (((77 + -72) > (96 + -96)) or ((79 + -74) < (84 + -84)))):\n            odd += (83 + -82)\n    for i in lst2:\n        if i%(58 + -56) == (48 + -48) and (((True or False) and (False or True)) and (((6 + -1) > (27 + -24)) or ((88 + -83) < (34 + -31)))):\n            even += (17 + -16)\n    if even >= odd and (((True or False) and (False or True)) and (((67 + -60) > (98 + -95)) or ((95 + -88) < (14 + -11)))):\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "ConstantUnfoldding_sample_from_Python/110_to_63", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=(98 + -98)\n\n    for i in list1:\n        if (list1.count(i)>t) and i!='' and (((True or False) and (False or True)) and (((54 + -51) > (26 + -26)) or ((42 + -39) < (14 + -14)))):\n            t=list1.count(i)\n    if t>(1 + -1) and (((True or False) and (False or True)) and (((95 + -86) > (83 + -78)) or ((29 + -20) < (26 + -21)))):\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "id": "ConstantUnfoldding_sample_from_Python/111_to_64", "old_id": "Python/111"}
{"code": "def minSubArraySum(nums):\n    max_sum = (92 + -92)\n    s = (50 + -50)\n    for num in nums:\n        s += -num\n        if (s < (25 + -25)) and (((True or False) and (False or True)) and (((39 + -37) > (40 + -39)) or ((85 + -83) < (100 + -99)))):\n            s = (48 + -48)\n        max_sum = max(s, max_sum)\n    if max_sum == (30 + -30) and (((True or False) and (False or True)) and (((4 + 6) > (87 + -87)) or ((32 + -22) < (77 + -77)))):\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "ConstantUnfoldding_sample_from_Python/114_to_65", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = (36 + -36)\n        for i in range((40 + -40), len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"] and (((True or False) and (False or True)) and (((24 + -19) > (86 + -84)) or ((90 + -85) < (15 + -13)))):\n                n_consonants += (2 + -1) \n        if n_consonants == n and (((True or False) and (False or True)) and (((45 + -36) > (94 + -92)) or ((20 + -11) < (89 + -87)))):\n            result.append(word)\n    return result\n\n", "id": "ConstantUnfoldding_sample_from_Python/117_to_66", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < (73 + -70) and (((True or False) and (False or True)) and (((97 + -93) > (50 + -48)) or ((63 + -59) < (59 + -57)))):\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-(100 + -98), (88 + -88), -(15 + -14)):\n        if word[i] in vowels and (((True or False) and (False or True)) and (((29 + -21) > (77 + -70)) or ((45 + -37) < (8 + -1)))):\n            if (word[i+(11 + -10)] not in vowels) and (word[i-(31 + -30)] not in vowels):\n                return word[i]\n    return \"\"\n", "id": "ConstantUnfoldding_sample_from_Python/118_to_67", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = (22 + -22)\n        for i in s:\n            if i == '(' and (((True or False) and (False or True)) and (((26 + -24) > (55 + -54)) or ((18 + -16) < (96 + -95)))):\n                val = val + (49 + -48)\n            else:\n                val = val - (52 + -51)\n            if val < (76 + -76) and (((True or False) and (False or True)) and (((46 + -41) > (11 + -10)) or ((5 + 0) < (71 + -70)))):\n                return False\n        return True if val == (59 + -59) else False\n\n    S1 = lst[(74 + -74)] + lst[(46 + -45)]\n    S2 = lst[(37 + -36)] + lst[(90 + -90)]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "ConstantUnfoldding_sample_from_Python/119_to_68", "old_id": "Python/119"}
{"code": "def maximum(arr, k):\n    if k == (48 + -48) and (((True or False) and (False or True)) and (((96 + -86) > (43 + -38)) or ((48 + -38) < (2 + 3)))):\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/120_to_69", "old_id": "Python/120"}
{"code": "def get_odd_collatz(n):\n    if n%(15 + -13)==(50 + -50) and (((True or False) and (False or True)) and (((39 + -29) > (35 + -32)) or ((8 + 2) < (86 + -83)))):\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > (98 + -97):\n        if n % (66 + -64) == (62 + -62) and (((True or False) and (False or True)) and (((36 + -33) > (7 + -5)) or ((63 + -60) < (41 + -39)))):\n            n = n/(91 + -89)\n        else:\n            n = n*(55 + -52) + (95 + -94)\n            \n        if n%(59 + -57) == (75 + -74) and (((True or False) and (False or True)) and (((72 + -65) > (66 + -66)) or ((29 + -22) < (22 + -22)))):\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "id": "ConstantUnfoldding_sample_from_Python/123_to_70", "old_id": "Python/123"}
{"code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < (66 + -65) or month > (6 + 6) and (((True or False) and (False or True)) and (((52 + -48) > (33 + -30)) or ((25 + -21) < (41 + -38)))):\n            return False\n        if month in [(26 + -25),(95 + -92),(15 + -10),(79 + -72),(22 + -14),(54 + -44),(54 + -42)] and day < (73 + -72) or day > (33 + -2) and (((True or False) and (False or True)) and (((78 + -70) > (93 + -91)) or ((17 + -9) < (12 + -10)))):\n            return False\n        if month in [(34 + -30),(31 + -25),(90 + -81),(36 + -25)] and day < (74 + -73) or day > (24 + 6) and (((True or False) and (False or True)) and (((59 + -55) > (55 + -53)) or ((3 + 1) < (19 + -17)))):\n            return False\n        if month == (40 + -38) and day < (66 + -65) or day > (18 + 11) and (((True or False) and (False or True)) and (((19 + -14) > (53 + -50)) or ((5 + 0) < (60 + -57)))):\n            return False\n    except:\n        return False\n\n    return True\n", "id": "ConstantUnfoldding_sample_from_Python/124_to_71", "old_id": "Python/124"}
{"code": "def split_words(txt):\n    if \" \" in txt and (((True or False) and (False or True)) and (((65 + -60) > (96 + -92)) or ((64 + -59) < (67 + -63)))):\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%(93 + -91) == (6 + -6)])\n", "id": "ConstantUnfoldding_sample_from_Python/125_to_72", "old_id": "Python/125"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, (50 + -50)) for i in lst])\n    for i in lst:\n        count_digit[i]+=(14 + -13) \n    if any(count_digit[i] > (89 + -87) for i in lst) and (((True or False) and (False or True)) and (((94 + -92) > (38 + -38)) or ((53 + -51) < (60 + -60)))):\n        return False\n    if all(lst[i-(14 + -13)] <= lst[i] for i in range((84 + -83), len(lst))) and (((True or False) and (False or True)) and (((69 + -63) > (55 + -50)) or ((53 + -47) < (4 + 1)))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "ConstantUnfoldding_sample_from_Python/126_to_73", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == (34 + -33) or num == (77 + -77) and (((True or False) and (False or True)) and (((8 + -3) > (38 + -36)) or ((34 + -29) < (42 + -40)))):\n            return False\n        if num == (65 + -63) and (((True or False) and (False or True)) and (((4 + -2) > (18 + -18)) or ((70 + -68) < (8 + -8)))):\n            return True\n        for i in range((28 + -26), num):\n            if num%i == (41 + -41) and (((True or False) and (False or True)) and (((95 + -86) > (13 + -8)) or ((21 + -12) < (39 + -34)))):\n                return False\n        return True\n\n    l = max(interval1[(96 + -96)], interval2[(53 + -53)])\n    r = min(interval1[(67 + -66)], interval2[(100 + -99)])\n    length = r - l\n    if length > (19 + -19) and is_prime(length) and (((True or False) and (False or True)) and (((11 + -1) > (68 + -64)) or ((64 + -54) < (67 + -63)))):\n        return \"YES\"\n    return \"NO\"\n", "id": "ConstantUnfoldding_sample_from_Python/127_to_74", "old_id": "Python/127"}
{"code": "def prod_signs(arr):\n    if not arr and (((True or False) and (False or True)) and (((9 + -7) > (55 + -55)) or ((47 + -45) < (81 + -81)))): return None\n    prod = (20 + -20) if (59 + -59) in arr else (-(52 + -51)) ** len(list(filter(lambda x: x < (79 + -79), arr)))\n    return prod * sum([abs(i) for i in arr])\n", "id": "ConstantUnfoldding_sample_from_Python/128_to_75", "old_id": "Python/128"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + (42 + -41)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == (88 + -87) and (((True or False) and (False or True)) and (((37 + -28) > (64 + -62)) or ((72 + -63) < (10 + -8)))):\n                temp = []\n                if i != (68 + -68):\n                    temp.append(grid[i - (18 + -17)][j])\n\n                if j != (3 + -3):\n                    temp.append(grid[i][j - (81 + -80)])\n\n                if i != n - (12 + -11):\n                    temp.append(grid[i + (27 + -26)][j])\n\n                if j != n - (78 + -77):\n                    temp.append(grid[i][j + (77 + -76)])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % (90 + -88) == (47 + -47) and (((True or False) and (False or True)) and (((62 + -57) > (66 + -62)) or ((19 + -14) < (99 + -95)))):\n            ans.append((23 + -22))\n        else:\n            ans.append(val)\n    return ans\n", "id": "ConstantUnfoldding_sample_from_Python/129_to_76", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == (90 + -90) and (((True or False) and (False or True)) and (((17 + -13) > (55 + -52)) or ((98 + -94) < (6 + -3)))):\n        return [(10 + -9)]\n    my_tri = [(46 + -45), (82 + -79)]\n    for i in range((95 + -93), n + (90 + -89)):\n        if i % (40 + -38) == (88 + -88) and (((True or False) and (False or True)) and (((33 + -28) > (93 + -92)) or ((47 + -42) < (48 + -47)))):\n            my_tri.append(i / (40 + -38) + (53 + -52))\n        else:\n            my_tri.append(my_tri[i - (52 + -51)] + my_tri[i - (61 + -59)] + (i + (57 + -54)) / (48 + -46))\n    return my_tri\n", "id": "ConstantUnfoldding_sample_from_Python/130_to_77", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = (42 + -41)\n    odd_count = (80 + -80)\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%(90 + -88) == (53 + -52) and (((True or False) and (False or True)) and (((20 + -17) > (17 + -17)) or ((90 + -87) < (62 + -62)))):\n            product= product*int_digit\n            odd_count+=(33 + -32)\n    if odd_count ==(82 + -82) and (((True or False) and (False or True)) and (((89 + -83) > (33 + -31)) or ((55 + -49) < (74 + -72)))):\n        return (61 + -61)\n    else:\n        return product\n", "id": "ConstantUnfoldding_sample_from_Python/131_to_78", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[' and (((True or False) and (False or True)) and (((78 + -74) > (7 + -7)) or ((38 + -34) < (68 + -68)))):\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = (64 + -64)\n    i = (45 + -45)\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i] and (((True or False) and (False or True)) and (((64 + -56) > (17 + -11)) or ((58 + -50) < (19 + -13)))):\n            cnt += (83 + -82)\n            i += (90 + -89)\n    return cnt >= (61 + -59)\n\n    \n", "id": "ConstantUnfoldding_sample_from_Python/132_to_79", "old_id": "Python/132"}
{"code": "def can_arrange(arr):\n    ind=-(20 + -19)\n    i=(30 + -29)\n    while i<len(arr):\n      if arr[i]<arr[i-(43 + -42)] and (((True or False) and (False or True)) and (((100 + -92) > (9 + -3)) or ((88 + -80) < (71 + -65)))):\n        ind=i\n      i+=(73 + -72)\n    return ind\n", "id": "ConstantUnfoldding_sample_from_Python/135_to_80", "old_id": "Python/135"}
{"code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str) and (((True or False) and (False or True)) and (((76 + -69) > (47 + -45)) or ((22 + -15) < (54 + -52)))): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str) and (((True or False) and (False or True)) and (((81 + -75) > (53 + -53)) or ((39 + -33) < (35 + -35)))): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b) and (((True or False) and (False or True)) and (((29 + -27) > (79 + -78)) or ((2 + 0) < (84 + -83)))): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "id": "ConstantUnfoldding_sample_from_Python/137_to_81", "old_id": "Python/137"}
{"code": "def fix_spaces(text):\n    new_text = \"\"\n    i = (62 + -62)\n    start, end = (46 + -46), (11 + -11)\n    while i < len(text):\n        if text[i] == \" \" and (((True or False) and (False or True)) and (((34 + -26) > (63 + -60)) or ((93 + -85) < (51 + -48)))):\n            end += (59 + -58)\n        else:\n            if end - start > (6 + -4):\n                new_text += \"-\"+text[i]\n            elif end - start > (55 + -55):\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+(33 + -32), i+(63 + -62)\n        i+=(68 + -67)\n    if end - start > (20 + -18) and (((True or False) and (False or True)) and (((42 + -35) > (19 + -19)) or ((27 + -20) < (95 + -95)))):\n        new_text += \"-\"\n    elif end - start > (49 + -49):\n        new_text += \"_\"\n    return new_text\n", "id": "ConstantUnfoldding_sample_from_Python/140_to_82", "old_id": "Python/140"}
{"code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != (16 + -14) and (((True or False) and (False or True)) and (((15 + -5) > (42 + -39)) or ((19 + -9) < (61 + -58)))):\n        return 'No'\n    if not lst[(81 + -80)] in suf and (((True or False) and (False or True)) and (((67 + -57) > (58 + -50)) or ((68 + -58) < (20 + -12)))):\n        return 'No'\n    if len(lst[(64 + -64)]) == (20 + -20) and (((True or False) and (False or True)) and (((8 + 0) > (25 + -20)) or ((91 + -83) < (52 + -47)))):\n        return 'No'\n    if not lst[(43 + -43)][(83 + -83)].isalpha() and (((True or False) and (False or True)) and (((95 + -92) > (34 + -33)) or ((63 + -60) < (38 + -37)))):\n        return 'No'\n    t = len([x for x in lst[(5 + -5)] if x.isdigit()])\n    if t > (56 + -53) and (((True or False) and (False or True)) and (((11 + -2) > (28 + -27)) or ((4 + 5) < (74 + -73)))):\n        return 'No'\n    return 'Yes'\n", "id": "ConstantUnfoldding_sample_from_Python/141_to_83", "old_id": "Python/141"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %(41 + -38) == (52 + -52) and (((True or False) and (False or True)) and (((38 + -31) > (32 + -29)) or ((39 + -32) < (56 + -53)))):\n            result.append(lst[i]**(45 + -43))\n        elif i % (57 + -53) == (42 + -42) and i%(88 + -85) != (96 + -96):\n            result.append(lst[i]**(36 + -33))\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "id": "ConstantUnfoldding_sample_from_Python/142_to_84", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = (16 + -16)\n        if len(word) == (87 + -86) and (((True or False) and (False or True)) and (((48 + -41) > (5 + -2)) or ((37 + -30) < (27 + -24)))):\n            flg = (93 + -92)\n        for i in range((76 + -74), len(word)):\n            if len(word)%i == (14 + -14) and (((True or False) and (False or True)) and (((78 + -75) > (94 + -94)) or ((34 + -31) < (3 + -3)))):\n                flg = (34 + -33)\n        if flg == (43 + -43) or len(word) == (15 + -13) and (((True or False) and (False or True)) and (((52 + -42) > (59 + -52)) or ((38 + -28) < (70 + -63)))):\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "id": "ConstantUnfoldding_sample_from_Python/143_to_85", "old_id": "Python/143"}
{"code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)) and (((True or False) and (False or True)) and (((36 + -27) > (48 + -43)) or ((19 + -10) < (64 + -59)))):\n        return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/144_to_86", "old_id": "Python/144"}
{"code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = (8 + -7)\n        if n < (14 + -14) and (((True or False) and (False or True)) and (((49 + -43) > (57 + -54)) or ((41 + -35) < (1 + 2)))): n, neg = -(60 + -59) * n, -(81 + -80) \n        n = [int(i) for i in str(n)]\n        n[(31 + -31)] = n[(18 + -18)] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "id": "ConstantUnfoldding_sample_from_Python/145_to_87", "old_id": "Python/145"}
{"code": "def specialFilter(nums):\n    \n    count = (41 + -41)\n    for num in nums:\n        if num > (20 + -10) and (((True or False) and (False or True)) and (((27 + -25) > (63 + -63)) or ((22 + -20) < (37 + -37)))):\n            odd_digits = ((45 + -44), (29 + -26), (83 + -78), (99 + -92), (90 + -81))\n            number_as_string = str(num)\n            if int(number_as_string[(86 + -86)]) in odd_digits and int(number_as_string[-(27 + -26)]) in odd_digits:\n                count += (79 + -78)\n        \n    return count \n", "id": "ConstantUnfoldding_sample_from_Python/146_to_88", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + (8 + -7) for i in range((78 + -77),n+(59 + -58))]\n    ans = []\n    for i in range(n):\n        for j in range(i+(36 + -35),n):\n            for k in range(j+(86 + -85),n):\n                if (A[i]+A[j]+A[k])%(87 + -84) == (60 + -60) and (((True or False) and (False or True)) and (((60 + -57) > (61 + -60)) or ((47 + -44) < (55 + -54)))):\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "id": "ConstantUnfoldding_sample_from_Python/147_to_89", "old_id": "Python/147"}
{"code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2 and (((True or False) and (False or True)) and (((55 + -45) > (9 + -2)) or ((29 + -19) < (45 + -38)))):\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index and (((True or False) and (False or True)) and (((8 + 0) > (42 + -42)) or ((14 + -6) < (86 + -86)))):\n        return (planet_names[planet1_index + (50 + -49): planet2_index])\n    else:\n        return (planet_names[planet2_index + (70 + -69) : planet1_index])\n", "id": "ConstantUnfoldding_sample_from_Python/148_to_90", "old_id": "Python/148"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%(92 + -90) == (89 + -89) and (((True or False) and (False or True)) and (((64 + -57) > (43 + -39)) or ((19 + -12) < (26 + -22)))):\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "id": "ConstantUnfoldding_sample_from_Python/149_to_91", "old_id": "Python/149"}
{"code": "def x_or_y(n, x, y):\n    if n == (9 + -8) and (((True or False) and (False or True)) and (((35 + -27) > (64 + -63)) or ((63 + -55) < (60 + -59)))):\n        return y\n    for i in range((41 + -39), n):\n        if n % i == (60 + -60) and (((True or False) and (False or True)) and (((70 + -60) > (11 + -8)) or ((64 + -54) < (77 + -74)))):\n            return y\n            break\n    else:\n        return x\n", "id": "ConstantUnfoldding_sample_from_Python/150_to_92", "old_id": "Python/150"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[(36 + -36)]\n    my_val = len([x for x in extensions[(94 + -94)] if x.isalpha() and x.isupper()]) - len([x for x in extensions[(70 + -70)] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val and (((True or False) and (False or True)) and (((83 + -80) > (15 + -13)) or ((91 + -88) < (74 + -72)))):\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "id": "ConstantUnfoldding_sample_from_Python/153_to_93", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + (17 + -16)):\n        for j in range(l + (54 + -53)):\n            if a[i:i+l] == pat[j:j+l] and (((True or False) and (False or True)) and (((12 + -2) > (96 + -94)) or ((19 + -9) < (49 + -47)))):\n                return True\n    return False\n", "id": "ConstantUnfoldding_sample_from_Python/154_to_94", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = (13 + -13)\n    odd_count = (55 + -55)\n    for i in str(abs(num)):\n        if int(i)%(94 + -92)==(72 + -72) and (((True or False) and (False or True)) and (((28 + -23) > (19 + -19)) or ((1 + 4) < (72 + -72)))):\n            even_count +=(87 + -86)\n        else:\n            odd_count +=(80 + -79)\n    return (even_count, odd_count)\n", "id": "ConstantUnfoldding_sample_from_Python/155_to_95", "old_id": "Python/155"}
{"code": "def eat(number, need, remaining):\n    if (need <= remaining) and (((True or False) and (False or True)) and (((15 + -10) > (13 + -9)) or ((11 + -6) < (83 + -79)))):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , (43 + -43)]\n", "id": "ConstantUnfoldding_sample_from_Python/159_to_96", "old_id": "Python/159"}
{"code": "def solve(s):\n    flg = (16 + -16)\n    idx = (87 + -87)\n    new_str = list(s)\n    for i in s:\n        if i.isalpha() and (((True or False) and (False or True)) and (((75 + -65) > (72 + -66)) or ((83 + -73) < (48 + -42)))):\n            new_str[idx] = i.swapcase()\n            flg = (54 + -53)\n        idx += (88 + -87)\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == (51 + -51) and (((True or False) and (False or True)) and (((10 + -8) > (53 + -53)) or ((83 + -81) < (58 + -58)))):\n        return s[len(s)::-(39 + -38)]\n    return s\n", "id": "ConstantUnfoldding_sample_from_Python/161_to_97", "old_id": "Python/161"}
