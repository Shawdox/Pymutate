{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_73ai = 0\n    list_keyb = paren_string\n    while idx_73ai < len(list_keyb):\n        c = list_keyb[idx_73ai]\n        if c == '(' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            current_depth = current_depth + 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth = current_depth - 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n        idx_73ai = idx_73ai + 1\n\n    return result\n", "id": "AugAssign2Assign_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    idx_5dja = 0\n    list_srtd = operations\n    while idx_5dja < len(list_srtd):\n        op = list_srtd[idx_5dja]\n        balance = balance + op\n        if balance < 0 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            return True\n        idx_5dja = idx_5dja + 1\n\n    return False\n", "id": "AugAssign2Assign_sample_from_Python/3_to_1", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_8yrx = 0\n        list_btap = s\n        while idx_8yrx < len(list_btap):\n            c = list_btap[idx_8yrx]\n            if c == '(' and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n                depth = depth + 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth = depth - 1\n            idx_8yrx = idx_8yrx + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "AugAssign2Assign_sample_from_Python/6_to_2", "old_id": "Python/6"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n    idx_dg94 = 0\n    list_h6ql = range(len(string) - len(substring) + 1)\n    while idx_dg94 < len(list_h6ql):\n        i = list_h6ql[idx_dg94]\n        if string[i:i+len(substring)] == substring and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            times = times + 1\n        idx_dg94 = idx_dg94 + 1\n\n    return times\n", "id": "AugAssign2Assign_sample_from_Python/18_to_3", "old_id": "Python/18"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    idx_5ygv = 0\n    list_5qy4 = range(n)\n    while idx_5ygv < len(list_5qy4):\n        i = list_5qy4[idx_5ygv]\n        if i % 11 == 0 or i % 13 == 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            ns.append(i)\n        idx_5ygv = idx_5ygv + 1\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    idx_2bfy = 0\n    list_ael6 = s\n    while idx_2bfy < len(list_ael6):\n        c = list_ael6[idx_2bfy]\n        ans = ans + (c == '7')\n        idx_2bfy = idx_2bfy + 1\n    return ans\n", "id": "AugAssign2Assign_sample_from_Python/36_to_4", "old_id": "Python/36"}
{"code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            return False\n        idx_e7n2 = 0\n        list_l3t1 = range(2, min(int(math.sqrt(p)) + 1, p - 1))\n        while idx_e7n2 < len(list_l3t1):\n            k = list_l3t1[idx_e7n2]\n            if p % k == 0 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                return False\n            idx_e7n2 = idx_e7n2 + 1\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            n = n - 1\n        if n == 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            return f[-1]\n", "id": "AugAssign2Assign_sample_from_Python/39_to_5", "old_id": "Python/39"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_p5sr = 0\n    list_1kun = brackets\n    while idx_p5sr < len(list_1kun):\n        b = list_1kun[idx_p5sr]\n        if b == \"<\" and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            depth = depth + 1\n        else:\n            depth = depth - 1\n        if depth < 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            return False\n        idx_p5sr = idx_p5sr + 1\n    return depth == 0\n", "id": "AugAssign2Assign_sample_from_Python/56_to_6", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_sngw = 0\n    list_p8je = brackets\n    while idx_sngw < len(list_p8je):\n        b = list_p8je[idx_sngw]\n        if b == \"(\" and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            depth = depth + 1\n        else:\n            depth = depth - 1\n        if depth < 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            return False\n        idx_sngw = idx_sngw + 1\n    return depth == 0\n", "id": "AugAssign2Assign_sample_from_Python/61_to_7", "old_id": "Python/61"}
{"code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    idx_vynx = 0\n    list_tpec = lst\n    while idx_vynx < len(list_tpec):\n        i = list_tpec[idx_vynx]\n        frq[i] = frq[i] + 1\n        idx_vynx = idx_vynx + 1\n\n    ans = -1\n    idx_v8b7 = 0\n    list_e4vs = range(1, len(frq))\n    while idx_v8b7 < len(list_e4vs):\n        i = list_e4vs[idx_v8b7]\n        if frq[i] >= i and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            ans = i\n        idx_v8b7 = idx_v8b7 + 1\n    \n    return ans\n", "id": "AugAssign2Assign_sample_from_Python/69_to_8", "old_id": "Python/69"}
{"code": "def smallest_change(arr):\n    ans = 0\n    idx_bpn2 = 0\n    list_fikb = range(len(arr) // 2)\n    while idx_bpn2 < len(list_fikb):\n        i = list_fikb[idx_bpn2]\n        if arr[i] != arr[len(arr) - i - 1] and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            ans = ans + 1\n        idx_bpn2 = idx_bpn2 + 1\n    return ans\n", "id": "AugAssign2Assign_sample_from_Python/73_to_9", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    idx_8ame = 0\n    list_tlgy = lst1\n    while idx_8ame < len(list_tlgy):\n        st = list_tlgy[idx_8ame]\n        l1 = l1 + len(st)\n        idx_8ame = idx_8ame + 1\n    \n    l2 = 0\n    idx_qwzu = 0\n    list_nkuo = lst2\n    while idx_qwzu < len(list_nkuo):\n        st = list_nkuo[idx_qwzu]\n        l2 = l2 + len(st)\n        idx_qwzu = idx_qwzu + 1\n    if l1 <= l2 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return lst1\n    else:\n        return lst2\n", "id": "AugAssign2Assign_sample_from_Python/74_to_10", "old_id": "Python/74"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    idx_tzam = 0\n    list_nrk9 = range(0, len(num))\n    while idx_tzam < len(list_nrk9):\n        i = list_nrk9[idx_tzam]\n        if num[i] in primes and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            total = total + 1\n        idx_tzam = idx_tzam + 1\n    return total\n", "id": "AugAssign2Assign_sample_from_Python/78_to_11", "old_id": "Python/78"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_ydam = 0\n    list_p13e = s\n    while idx_ydam < len(list_p13e):\n        c = list_p13e[idx_ydam]\n        if c in d and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            out = out + d[(d.index(c)+2*2) % 26]\n        else:\n            out = out + c\n        idx_ydam = idx_ydam + 1\n    return out\n", "id": "AugAssign2Assign_sample_from_Python/89_to_12", "old_id": "Python/89"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        idx_5mdl = 0\n        list_wmgc = range(2,int(n**0.5)+1)\n        while idx_5mdl < len(list_wmgc):\n            i = list_wmgc[idx_5mdl]\n            if n%i==0 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                return False\n            idx_5mdl = idx_5mdl + 1\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if (lst[i] > maxx and isPrime(lst[i])) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            maxx = lst[i]\n        i = i + 1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "AugAssign2Assign_sample_from_Python/94_to_13", "old_id": "Python/94"}
{"code": "def count_upper(s):\n    count = 0\n    idx_54ek = 0\n    list_7bnf = range(0,len(s),2)\n    while idx_54ek < len(list_7bnf):\n        i = list_7bnf[idx_54ek]\n        if s[i] in \"AEIOU\" and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            count = count + 1\n        idx_54ek = idx_54ek + 1\n    return count\n", "id": "AugAssign2Assign_sample_from_Python/98_to_14", "old_id": "Python/98"}
{"code": "def rounded_avg(n, m):\n    if m < n and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        return -1\n    summation = 0\n    idx_m8ha = 0\n    list_ugst = range(n, m+1)\n    while idx_m8ha < len(list_ugst):\n        i = list_ugst[idx_m8ha]\n        summation = summation + i\n        idx_m8ha = idx_m8ha + 1\n    return bin(round(summation/(m - n + 1)))\n", "id": "AugAssign2Assign_sample_from_Python/103_to_15", "old_id": "Python/103"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    idx_4q5d = 0\n    list_5gxe = range(1, n+1)\n    while idx_4q5d < len(list_5gxe):\n        i = list_5gxe[idx_4q5d]\n        if i%2 == 1 and is_palindrome(i) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n                odd_palindrome_count = odd_palindrome_count + 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count = even_palindrome_count + 1\n        idx_4q5d = idx_4q5d + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "AugAssign2Assign_sample_from_Python/107_to_16", "old_id": "Python/107"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    idx_txgr = 0\n    list_zgod = lst1\n    while idx_txgr < len(list_zgod):\n        i = list_zgod[idx_txgr]\n        if i%2 == 1 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            odd = odd + 1\n        idx_txgr = idx_txgr + 1\n    idx_j5d1 = 0\n    list_rjp9 = lst2\n    while idx_j5d1 < len(list_rjp9):\n        i = list_rjp9[idx_j5d1]\n        if i%2 == 0 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            even = even + 1\n        idx_j5d1 = idx_j5d1 + 1\n    if even >= odd and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        return \"YES\"\n    return \"NO\"\n            \n", "id": "AugAssign2Assign_sample_from_Python/110_to_17", "old_id": "Python/110"}
{"code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    idx_9t8u = 0\n    list_ejuz = nums\n    while idx_9t8u < len(list_ejuz):\n        num = list_ejuz[idx_9t8u]\n        s = s + -num\n        if (s < 0) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            s = 0\n        max_sum = max(s, max_sum)\n        idx_9t8u = idx_9t8u + 1\n    if max_sum == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "id": "AugAssign2Assign_sample_from_Python/114_to_18", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    idx_48el = 0\n    list_kabf = s.split()\n    while idx_48el < len(list_kabf):\n        word = list_kabf[idx_48el]\n        n_consonants = 0\n        idx_1ngf = 0\n        list_x6jn = range(0, len(word))\n        while idx_1ngf < len(list_x6jn):\n            i = list_x6jn[idx_1ngf]\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                n_consonants = n_consonants + 1 \n            idx_1ngf = idx_1ngf + 1\n        if n_consonants == n and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            result.append(word)\n        idx_48el = idx_48el + 1\n    return result\n\n", "id": "AugAssign2Assign_sample_from_Python/117_to_19", "old_id": "Python/117"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    idx_89gt = 0\n    list_pyum = lst\n    while idx_89gt < len(list_pyum):\n        i = list_pyum[idx_89gt]\n        count_digit[i] = count_digit[i] + 1 \n        idx_89gt = idx_89gt + 1\n    if any(count_digit[i] > 2 for i in lst) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        return True\n    else:\n        return False\n    \n    \n", "id": "AugAssign2Assign_sample_from_Python/126_to_20", "old_id": "Python/126"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    idx_xzu1 = 0\n    list_y1cm = str(n)\n    while idx_xzu1 < len(list_y1cm):\n        digit = list_y1cm[idx_xzu1]\n        int_digit = int(digit)\n        if int_digit%2 == 1 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            product= product*int_digit\n            odd_count = odd_count + 1\n        idx_xzu1 = idx_xzu1 + 1\n    if odd_count ==0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        return 0\n    else:\n        return product\n", "id": "AugAssign2Assign_sample_from_Python/131_to_21", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_i2wx = 0\n    list_r3zl = range(len(string))\n    while idx_i2wx < len(list_r3zl):\n        i = list_r3zl[idx_i2wx]\n        if string[i] == '[' and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        idx_i2wx = idx_i2wx + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_xhvd = 0\n    list_x72c = opening_bracket_index\n    while idx_xhvd < len(list_x72c):\n        idx = list_x72c[idx_xhvd]\n        if i < l and idx < closing_bracket_index[i] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            cnt = cnt + 1\n            i = i + 1\n        idx_xhvd = idx_xhvd + 1\n    return cnt >= 2\n\n    \n", "id": "AugAssign2Assign_sample_from_Python/132_to_22", "old_id": "Python/132"}
{"code": "def specialFilter(nums):\n    \n    count = 0\n    idx_0m3h = 0\n    list_t1rf = nums\n    while idx_0m3h < len(list_t1rf):\n        num = list_t1rf[idx_0m3h]\n        if num > 10 and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count = count + 1\n        idx_0m3h = idx_0m3h + 1\n    return count \n", "id": "AugAssign2Assign_sample_from_Python/146_to_23", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    idx_d7tf = 0\n    list_x32v = range(n)\n    while idx_d7tf < len(list_x32v):\n        i = list_x32v[idx_d7tf]\n        idx_trgi = 0\n        list_nmhb = range(i+1,n)\n        while idx_trgi < len(list_nmhb):\n            j = list_nmhb[idx_trgi]\n            idx_pc6v = 0\n            list_ca9o = range(j+1,n)\n            while idx_pc6v < len(list_ca9o):\n                k = list_ca9o[idx_pc6v]\n                if (A[i]+A[j]+A[k])%3 == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                    ans = ans + [(A[i],A[j],A[k])]\n                idx_pc6v = idx_pc6v + 1\n            idx_trgi = idx_trgi + 1\n        idx_d7tf = idx_d7tf + 1\n    return len(ans)\n", "id": "AugAssign2Assign_sample_from_Python/147_to_24", "old_id": "Python/147"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    idx_k5oq = 0\n    list_4zsp = str(abs(num))\n    while idx_k5oq < len(list_4zsp):\n        i = list_4zsp[idx_k5oq]\n        if int(i)%2==0 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            even_count = even_count + 1\n        else:\n            odd_count = odd_count + 1\n        idx_k5oq = idx_k5oq + 1\n    return (even_count, odd_count)\n", "id": "AugAssign2Assign_sample_from_Python/155_to_25", "old_id": "Python/155"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    idx_i7c9 = 0\n    list_814s = s\n    while idx_i7c9 < len(list_814s):\n        i = list_814s[idx_i7c9]\n        if i.isalpha() and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx = idx + 1\n        idx_i7c9 = idx_i7c9 + 1\n    s = \"\"\n    idx_90lc = 0\n    list_ja8q = new_str\n    while idx_90lc < len(list_ja8q):\n        i = list_ja8q[idx_90lc]\n        s = s + i\n        idx_90lc = idx_90lc + 1\n    if flg == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return s[len(s)::-1]\n    return s\n", "id": "AugAssign2Assign_sample_from_Python/161_to_26", "old_id": "Python/161"}
