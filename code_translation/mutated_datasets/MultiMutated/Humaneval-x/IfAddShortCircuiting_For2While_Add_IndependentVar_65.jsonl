{"code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    idx_413r = 0\n    list_mc1w = list(enumerate(numbers))\n    var_esc = 14\n    while idx_413r < len(list_mc1w):\n        idx, elem = list_mc1w[idx_413r]\n        idx_3ldi = 0\n        list_6flu = list(enumerate(numbers))\n        while idx_3ldi < len(list_6flu):\n            idx2, elem2 = list_6flu[idx_3ldi]\n            if idx != idx2 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n            idx_3ldi = idx_3ldi + 1\n        idx_413r = idx_413r + 1\n\n    return False\n", "id": "Add_IndependentVar_sample_from_Python/0_to_0", "old_id": "Python/0"}
{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_uk94 = 0\n    list_5r4g = paren_string\n    while idx_uk94 < len(list_5r4g):\n        c = list_5r4g[idx_uk94]\n        if c == '(' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n        idx_uk94 = idx_uk94 + 1\n    var_1fc = 88\n\n    return result\n", "id": "Add_IndependentVar_sample_from_Python/1_to_1", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    idx_p48h = 0\n    list_fc9m = operations\n    while idx_p48h < len(list_fc9m):\n        op = list_fc9m[idx_p48h]\n        balance += op\n        if balance < 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            return True\n        idx_p48h = idx_p48h + 1\n    var_rim = 42\n\n    return False\n", "id": "Add_IndependentVar_sample_from_Python/3_to_2", "old_id": "Python/3"}
{"code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return []\n\n    result = []\n    idx_562p = 0\n    list_whyn = numbers[:-1]\n    while idx_562p < len(list_whyn):\n        n = list_whyn[idx_562p]\n        result.append(n)\n        result.append(delimeter)\n        idx_562p = idx_562p + 1\n\n    result.append(numbers[-1])\n    var_oxs = 48\n\n    return result\n", "id": "Add_IndependentVar_sample_from_Python/5_to_3", "old_id": "Python/5"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_re8m = 0\n        list_i0te = s\n        while idx_re8m < len(list_i0te):\n            c = list_i0te[idx_re8m]\n            if c == '(' and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n            idx_re8m = idx_re8m + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n    var_rg9 = 79\n", "id": "Add_IndependentVar_sample_from_Python/6_to_4", "old_id": "Python/6"}
{"code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    var_87p = 21\n    result = []\n    idx_h6yl = 0\n    list_ckwa = numbers\n    while idx_h6yl < len(list_ckwa):\n        n = list_ckwa[idx_h6yl]\n        if running_max is None and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n        idx_h6yl = idx_h6yl + 1\n\n    return result\n", "id": "Add_IndependentVar_sample_from_Python/9_to_5", "old_id": "Python/9"}
{"code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        return None\n    var_p6y = 11\n\n    maxlen = max(len(x) for x in strings)\n    idx_qw1y = 0\n    list_cwkv = strings\n    while idx_qw1y < len(list_cwkv):\n        s = list_cwkv[idx_qw1y]\n        if len(s) == maxlen and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return s\n        idx_qw1y = idx_qw1y + 1\n", "id": "Add_IndependentVar_sample_from_Python/12_to_6", "old_id": "Python/12"}
{"code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n    idx_jruk = 0\n    list_mjwh = range(len(string) - len(substring) + 1)\n    while idx_jruk < len(list_mjwh):\n        i = list_mjwh[idx_jruk]\n        if string[i:i+len(substring)] == substring and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            times += 1\n        idx_jruk = idx_jruk + 1\n    var_cve = 73\n\n    return times\n", "id": "Add_IndependentVar_sample_from_Python/18_to_7", "old_id": "Python/18"}
{"code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n    var_uaz = 91\n    idx_6iah = 0\n    list_ktzx = list(enumerate(numbers))\n    while idx_6iah < len(list_ktzx):\n        idx, elem = list_ktzx[idx_6iah]\n        idx_kgic = 0\n        list_setk = list(enumerate(numbers))\n        while idx_kgic < len(list_setk):\n            idx2, elem2 = list_setk[idx_kgic]\n            if idx != idx2 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n            idx_kgic = idx_kgic + 1\n        idx_6iah = idx_6iah + 1\n\n    return closest_pair\n", "id": "Add_IndependentVar_sample_from_Python/20_to_8", "old_id": "Python/20"}
{"code": "def largest_divisor(n: int) -> int:\n    idx_g9xe = 0\n    list_rxdm = reversed(range(n))\n    while idx_g9xe < len(list_rxdm):\n        i = list_rxdm[idx_g9xe]\n        if n % i == 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            return i\n        idx_g9xe = idx_g9xe + 1\n    var_tf4 = 20\n", "id": "Add_IndependentVar_sample_from_Python/24_to_9", "old_id": "Python/24"}
{"code": "def is_prime(n):\n    if n < 2 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return False\n    idx_gq30 = 0\n    list_4gps = range(2, n - 1)\n    while idx_gq30 < len(list_4gps):\n        k = list_4gps[idx_gq30]\n        if n % k == 0 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return False\n        idx_gq30 = idx_gq30 + 1\n    return True\n    var_kx0 = 63\n", "id": "Add_IndependentVar_sample_from_Python/31_to_10", "old_id": "Python/31"}
{"code": "def max_element(l: list):\n    m = l[0]\n    idx_enkc = 0\n    list_6wkb = l\n    var_qxg = 65\n    while idx_enkc < len(list_6wkb):\n        e = list_6wkb[idx_enkc]\n        if e > m and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            m = e\n        idx_enkc = idx_enkc + 1\n    return m\n", "id": "Add_IndependentVar_sample_from_Python/35_to_11", "old_id": "Python/35"}
{"code": "def fizz_buzz(n: int):\n    ns = []\n    idx_6pk3 = 0\n    list_ub47 = range(n)\n    while idx_6pk3 < len(list_ub47):\n        i = list_ub47[idx_6pk3]\n        if i % 11 == 0 or i % 13 == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            ns.append(i)\n        idx_6pk3 = idx_6pk3 + 1\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    idx_l8kt = 0\n    list_yog2 = s\n    var_296 = 20\n    while idx_l8kt < len(list_yog2):\n        c = list_yog2[idx_l8kt]\n        ans += (c == '7')\n        idx_l8kt = idx_l8kt + 1\n    return ans\n", "id": "Add_IndependentVar_sample_from_Python/36_to_12", "old_id": "Python/36"}
{"code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    idx_fa41 = 0\n    list_t69c = zip(evens, odds)\n    var_4xb = 93\n    while idx_fa41 < len(list_t69c):\n        e, o = list_t69c[idx_fa41]\n        ans.extend([e, o])\n        idx_fa41 = idx_fa41 + 1\n    if len(evens) > len(odds) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        ans.append(evens[-1])\n    return ans\n", "id": "Add_IndependentVar_sample_from_Python/37_to_13", "old_id": "Python/37"}
{"code": "def prime_fib(n: int):\n    import math\n    var_9ra = 11\n\n    def is_prime(p):\n        if p < 2 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            return False\n        idx_wute = 0\n        list_9nlo = range(2, min(int(math.sqrt(p)) + 1, p - 1))\n        while idx_wute < len(list_9nlo):\n            k = list_9nlo[idx_wute]\n            if p % k == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                return False\n            idx_wute = idx_wute + 1\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            n -= 1\n        if n == 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return f[-1]\n", "id": "Add_IndependentVar_sample_from_Python/39_to_14", "old_id": "Python/39"}
{"code": "def triples_sum_to_zero(l: list):\n    idx_bdlw = 0\n    list_cxhj = range(len(l))\n    while idx_bdlw < len(list_cxhj):\n        i = list_cxhj[idx_bdlw]\n        idx_yz47 = 0\n        list_e3gx = range(i + 1, len(l))\n        while idx_yz47 < len(list_e3gx):\n            j = list_e3gx[idx_yz47]\n            idx_5cs1 = 0\n            list_nogf = range(j + 1, len(l))\n            while idx_5cs1 < len(list_nogf):\n                k = list_nogf[idx_5cs1]\n                if l[i] + l[j] + l[k] == 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                    return True\n                idx_5cs1 = idx_5cs1 + 1\n            idx_yz47 = idx_yz47 + 1\n        idx_bdlw = idx_bdlw + 1\n    return False\n    var_r1q = 10\n", "id": "Add_IndependentVar_sample_from_Python/40_to_15", "old_id": "Python/40"}
{"code": "def pairs_sum_to_zero(l):\n    idx_op5d = 0\n    var_bdn = 71\n    list_icg7 = list(enumerate(l))\n    while idx_op5d < len(list_icg7):\n        i, l1 = list_icg7[idx_op5d]\n        idx_kxhz = 0\n        list_8yws = range(i + 1, len(l))\n        while idx_kxhz < len(list_8yws):\n            j = list_8yws[idx_kxhz]\n            if l1 + l[j] == 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n                return True\n            idx_kxhz = idx_kxhz + 1\n        idx_op5d = idx_op5d + 1\n    return False\n", "id": "Add_IndependentVar_sample_from_Python/43_to_16", "old_id": "Python/43"}
{"code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return results[n]\n    idx_7mp2 = 0\n    list_5avq = range(4, n + 1)\n    while idx_7mp2 < len(list_5avq):\n        _ = list_5avq[idx_7mp2]\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n        idx_7mp2 = idx_7mp2 + 1\n\n    return results[-1]\n    var_u2w = 39\n", "id": "Add_IndependentVar_sample_from_Python/46_to_17", "old_id": "Python/46"}
{"code": "def is_palindrome(text: str):\n    idx_ugpx = 0\n    list_ipgy = range(len(text))\n    var_it7 = 61\n    while idx_ugpx < len(list_ipgy):\n        i = list_ipgy[idx_ugpx]\n        if text[i] != text[len(text) - 1 - i] and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            return False\n        idx_ugpx = idx_ugpx + 1\n    return True\n", "id": "Add_IndependentVar_sample_from_Python/48_to_18", "old_id": "Python/48"}
{"code": "def below_threshold(l: list, t: int):\n    idx_82ox = 0\n    list_l831 = l\n    var_z4v = 99\n    while idx_82ox < len(list_l831):\n        e = list_l831[idx_82ox]\n        if e >= t and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return False\n        idx_82ox = idx_82ox + 1\n    return True\n", "id": "Add_IndependentVar_sample_from_Python/52_to_19", "old_id": "Python/52"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_6opc = 0\n    list_aiwd = brackets\n    var_106 = 52\n    while idx_6opc < len(list_aiwd):\n        b = list_aiwd[idx_6opc]\n        if b == \"<\" and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            return False\n        idx_6opc = idx_6opc + 1\n    return depth == 0\n", "id": "Add_IndependentVar_sample_from_Python/56_to_20", "old_id": "Python/56"}
{"code": "def common(l1: list, l2: list):\n    ret = set()\n    idx_tn95 = 0\n    list_9kvy = l1\n    while idx_tn95 < len(list_9kvy):\n        e1 = list_9kvy[idx_tn95]\n        idx_48dg = 0\n        list_v5nb = l2\n        while idx_48dg < len(list_v5nb):\n            e2 = list_v5nb[idx_48dg]\n            if e1 == e2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                ret.add(e1)\n            idx_48dg = idx_48dg + 1\n        idx_tn95 = idx_tn95 + 1\n    var_1r4 = 37\n    return sorted(list(ret))\n", "id": "Add_IndependentVar_sample_from_Python/58_to_21", "old_id": "Python/58"}
{"code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return False\n        idx_qklg = 0\n        list_mo45 = range(2, k - 1)\n        while idx_qklg < len(list_mo45):\n            i = list_mo45[idx_qklg]\n            if k % i == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                return False\n            idx_qklg = idx_qklg + 1\n        return True\n    var_szq = 19\n    largest = 1\n    idx_e01z = 0\n    list_oi6f = range(2, n + 1)\n    while idx_e01z < len(list_oi6f):\n        j = list_oi6f[idx_e01z]\n        if n % j == 0 and is_prime(j) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            largest = max(largest, j)\n        idx_e01z = idx_e01z + 1\n    return largest\n", "id": "Add_IndependentVar_sample_from_Python/59_to_22", "old_id": "Python/59"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    var_k4y = 54\n    idx_kyum = 0\n    list_5rq4 = brackets\n    while idx_kyum < len(list_5rq4):\n        b = list_5rq4[idx_kyum]\n        if b == \"(\" and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            return False\n        idx_kyum = idx_kyum + 1\n    return depth == 0\n", "id": "Add_IndependentVar_sample_from_Python/61_to_23", "old_id": "Python/61"}
{"code": "def fruit_distribution(s,n):\n    lis = list()\n    idx_5ozh = 0\n    list_oi3q = s.split(' ')\n    var_0nu = 49\n    while idx_5ozh < len(list_oi3q):\n        i = list_oi3q[idx_5ozh]\n        if i.isdigit() and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            lis.append(int(i))\n        idx_5ozh = idx_5ozh + 1\n    return n - sum(lis)\n", "id": "Add_IndependentVar_sample_from_Python/67_to_24", "old_id": "Python/67"}
{"code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    idx_cfyx = 0\n    list_3vog = lst\n    var_vj9 = 45\n    while idx_cfyx < len(list_3vog):\n        i = list_3vog[idx_cfyx]\n        frq[i] += 1;\n        idx_cfyx = idx_cfyx + 1\n\n    ans = -1\n    idx_vh4l = 0\n    list_b4kw = range(1, len(frq))\n    while idx_vh4l < len(list_b4kw):\n        i = list_b4kw[idx_vh4l]\n        if frq[i] >= i and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            ans = i\n        idx_vh4l = idx_vh4l + 1\n    \n    return ans\n", "id": "Add_IndependentVar_sample_from_Python/69_to_25", "old_id": "Python/69"}
{"code": "def smallest_change(arr):\n    ans = 0\n    idx_79vx = 0\n    list_4b9m = range(len(arr) // 2)\n    var_m0o = 35\n    while idx_79vx < len(list_4b9m):\n        i = list_4b9m[idx_79vx]\n        if arr[i] != arr[len(arr) - i - 1] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            ans += 1\n        idx_79vx = idx_79vx + 1\n    return ans\n", "id": "Add_IndependentVar_sample_from_Python/73_to_26", "old_id": "Python/73"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    idx_byhq = 0\n    list_et3l = lst1\n    while idx_byhq < len(list_et3l):\n        st = list_et3l[idx_byhq]\n        l1 += len(st)\n        idx_byhq = idx_byhq + 1\n    \n    l2 = 0\n    var_5pu = 43\n    idx_lr83 = 0\n    list_ulg3 = lst2\n    while idx_lr83 < len(list_ulg3):\n        st = list_ulg3[idx_lr83]\n        l2 += len(st)\n        idx_lr83 = idx_lr83 + 1\n    if l1 <= l2 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return lst1\n    else:\n        return lst2\n", "id": "Add_IndependentVar_sample_from_Python/74_to_27", "old_id": "Python/74"}
{"code": "def is_multiply_prime(a):\n    def is_prime(n):\n        idx_0qzw = 0\n        list_by9o = range(2,n)\n        while idx_0qzw < len(list_by9o):\n            j = list_by9o[idx_0qzw]\n            if n%j == 0 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                return False\n            idx_0qzw = idx_0qzw + 1\n        return True\n    idx_pav0 = 0\n    list_30qp = range(2,101)\n    while idx_pav0 < len(list_30qp):\n        i = list_30qp[idx_pav0]\n        if not is_prime(i) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))): continue\n        idx_9chp = 0\n        list_7qb5 = range(2,101)\n        while idx_9chp < len(list_7qb5):\n            j = list_7qb5[idx_9chp]\n            if not is_prime(j) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))): continue\n            idx_n5cb = 0\n            list_84rt = range(2,101)\n            while idx_n5cb < len(list_84rt):\n                k = list_84rt[idx_n5cb]\n                if not is_prime(k) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))): continue\n                if i*j*k == a and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))): return True\n                idx_n5cb = idx_n5cb + 1\n            idx_9chp = idx_9chp + 1\n        idx_pav0 = idx_pav0 + 1\n    return False\n    var_z9o = 53\n", "id": "Add_IndependentVar_sample_from_Python/75_to_28", "old_id": "Python/75"}
{"code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    var_7p1 = 43\n    total = 0\n    idx_5oqr = 0\n    list_l4iw = range(0, len(num))\n    while idx_5oqr < len(list_l4iw):\n        i = list_l4iw[idx_5oqr]\n        if num[i] in primes and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            total += 1\n        idx_5oqr = idx_5oqr + 1\n    return total\n", "id": "Add_IndependentVar_sample_from_Python/78_to_29", "old_id": "Python/78"}
{"code": "def is_happy(s):\n    if len(s) < 3 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n      return False\n    idx_di06 = 0\n    list_96lg = range(len(s) - 2)\n    var_jlz = 79\n    while idx_di06 < len(list_96lg):\n        i = list_96lg[idx_di06]\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n          return False\n        idx_di06 = idx_di06 + 1\n    return True\n", "id": "Add_IndependentVar_sample_from_Python/80_to_30", "old_id": "Python/80"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_xy7l = 0\n    list_lu3r = grades\n    while idx_xy7l < len(list_lu3r):\n        gpa = list_lu3r[idx_xy7l]\n        if gpa == 4.0 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n        idx_xy7l = idx_xy7l + 1\n    return letter_grade\n    var_9gb = 89\n", "id": "Add_IndependentVar_sample_from_Python/81_to_31", "old_id": "Python/81"}
{"code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return False\n    idx_ctey = 0\n    list_5zj7 = range(2, l)\n    var_gyp = 25\n    while idx_ctey < len(list_5zj7):\n        i = list_5zj7[idx_ctey]\n        if l % i == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            return False\n        idx_ctey = idx_ctey + 1\n    return True\n", "id": "Add_IndependentVar_sample_from_Python/82_to_32", "old_id": "Python/82"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    var_lyu = 72\n    out = ''\n    idx_djw9 = 0\n    list_lirw = s\n    while idx_djw9 < len(list_lirw):\n        c = list_lirw[idx_djw9]\n        if c in d and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n        idx_djw9 = idx_djw9 + 1\n    return out\n", "id": "Add_IndependentVar_sample_from_Python/89_to_33", "old_id": "Python/89"}
{"code": "def skjkasdkd(lst):\n    def isPrime(n):\n        idx_e4qo = 0\n        list_rmk1 = range(2,int(n**0.5)+1)\n        while idx_e4qo < len(list_rmk1):\n            i = list_rmk1[idx_e4qo]\n            if n%i==0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                return False\n            idx_e4qo = idx_e4qo + 1\n\n        return True\n    maxx = 0\n    var_m7p = 17\n    i = 0\n    while i < len(lst):\n        if (lst[i] > maxx and isPrime(lst[i])) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "id": "Add_IndependentVar_sample_from_Python/94_to_34", "old_id": "Python/94"}
{"code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return False\n    else:\n        state = \"start\"\n        idx_xb1s = 0\n        list_re08 = dict.keys()\n        while idx_xb1s < len(list_re08):\n            key = list_re08[idx_xb1s]\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n            idx_xb1s = idx_xb1s + 1\n        return state == \"upper\" or state == \"lower\" \n    var_1ya = 62\n", "id": "Add_IndependentVar_sample_from_Python/95_to_35", "old_id": "Python/95"}
{"code": "def count_up_to(n):\n    primes = []\n    idx_vz2d = 0\n    list_jt5s = range(2, n)\n    while idx_vz2d < len(list_jt5s):\n        i = list_jt5s[idx_vz2d]\n        is_prime = True\n        idx_rume = 0\n        list_ldek = range(2, i)\n        while idx_rume < len(list_ldek):\n            j = list_ldek[idx_rume]\n            if i % j == 0 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                is_prime = False\n                break\n            idx_rume = idx_rume + 1\n        if is_prime and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            primes.append(i)\n        idx_vz2d = idx_vz2d + 1\n    return primes\n    var_tjh = 33\n\n", "id": "Add_IndependentVar_sample_from_Python/96_to_36", "old_id": "Python/96"}
{"code": "def count_upper(s):\n    count = 0\n    idx_7ucl = 0\n    var_4lc = 51\n    list_hfu4 = range(0,len(s),2)\n    while idx_7ucl < len(list_hfu4):\n        i = list_hfu4[idx_7ucl]\n        if s[i] in \"AEIOU\" and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            count += 1\n        idx_7ucl = idx_7ucl + 1\n    return count\n", "id": "Add_IndependentVar_sample_from_Python/98_to_37", "old_id": "Python/98"}
{"code": "def words_string(s):\n    if not s and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return []\n\n    s_list = []\n    idx_o7k4 = 0\n    list_jrxo = s\n    while idx_o7k4 < len(list_jrxo):\n        letter = list_jrxo[idx_o7k4]\n        if letter == ',' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n        idx_o7k4 = idx_o7k4 + 1\n    var_ec4 = 22\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "id": "Add_IndependentVar_sample_from_Python/101_to_38", "old_id": "Python/101"}
{"code": "def rounded_avg(n, m):\n    if m < n and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        return -1\n    var_rzx = 19\n    summation = 0\n    idx_5l7r = 0\n    list_pcnk = range(n, m+1)\n    while idx_5l7r < len(list_pcnk):\n        i = list_pcnk[idx_5l7r]\n        summation += i\n        idx_5l7r = idx_5l7r + 1\n    return bin(round(summation/(m - n + 1)))\n", "id": "Add_IndependentVar_sample_from_Python/103_to_39", "old_id": "Python/103"}
{"code": "def unique_digits(x):\n    odd_digit_elements = []\n    idx_fkg2 = 0\n    list_7n8v = x\n    while idx_fkg2 < len(list_7n8v):\n        i = list_7n8v[idx_fkg2]\n        if all (int(c) % 2 == 1 for c in str(i)) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            odd_digit_elements.append(i)\n        idx_fkg2 = idx_fkg2 + 1\n    return sorted(odd_digit_elements)\n    var_qf3 = 78\n", "id": "Add_IndependentVar_sample_from_Python/104_to_40", "old_id": "Python/104"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    idx_is0w = 0\n    list_10n7 = range(1, n+1)\n    while idx_is0w < len(list_10n7):\n        i = list_10n7[idx_is0w]\n        if i%2 == 1 and is_palindrome(i) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n        idx_is0w = idx_is0w + 1\n    var_gez = 100\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "Add_IndependentVar_sample_from_Python/107_to_41", "old_id": "Python/107"}
{"code": "def move_one_ball(arr):\n    if len(arr)==0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    idx_4fuq = 0\n    var_e8r = 50\n    list_efhq = range(len(arr))\n    while idx_4fuq < len(list_efhq):\n        i = list_efhq[idx_4fuq]\n        if my_arr[i]!=sorted_array[i] and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n          return False\n        idx_4fuq = idx_4fuq + 1\n    return True\n", "id": "Add_IndependentVar_sample_from_Python/109_to_42", "old_id": "Python/109"}
{"code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    idx_gjeu = 0\n    list_ngp4 = lst1\n    while idx_gjeu < len(list_ngp4):\n        i = list_ngp4[idx_gjeu]\n        if i%2 == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            odd += 1\n        idx_gjeu = idx_gjeu + 1\n    idx_1xdn = 0\n    list_3jyi = lst2\n    var_8gx = 38\n    while idx_1xdn < len(list_3jyi):\n        i = list_3jyi[idx_1xdn]\n        if i%2 == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            even += 1\n        idx_1xdn = idx_1xdn + 1\n    if even >= odd and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        return \"YES\"\n    return \"NO\"\n", "id": "Add_IndependentVar_sample_from_Python/110_to_43", "old_id": "Python/110"}
{"code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n    idx_cz6v = 0\n    list_0bpx = list1\n    var_r8i = 77\n    while idx_cz6v < len(list_0bpx):\n        i = list_0bpx[idx_cz6v]\n        if (list1.count(i)>t) and i!='' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            t=list1.count(i)\n        idx_cz6v = idx_cz6v + 1\n    if t>0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        idx_0ch9 = 0\n        list_w2la = list1\n        while idx_0ch9 < len(list_w2la):\n            i = list_w2la[idx_0ch9]\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n            idx_0ch9 = idx_0ch9 + 1\n    return dict1\n", "id": "Add_IndependentVar_sample_from_Python/111_to_44", "old_id": "Python/111"}
{"code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    idx_bl6d = 0\n    list_nfzk = nums\n    while idx_bl6d < len(list_nfzk):\n        num = list_nfzk[idx_bl6d]\n        s += -num\n        if (s < 0) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            s = 0\n        max_sum = max(s, max_sum)\n        idx_bl6d = idx_bl6d + 1\n    if max_sum == 0 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        max_sum = max(-i for i in nums)\n    var_upg = 99\n    min_sum = -max_sum\n    return min_sum\n", "id": "Add_IndependentVar_sample_from_Python/114_to_45", "old_id": "Python/114"}
{"code": "def select_words(s, n):\n    result = []\n    idx_ozsr = 0\n    list_sqwv = s.split()\n    var_jhw = 49\n    while idx_ozsr < len(list_sqwv):\n        word = list_sqwv[idx_ozsr]\n        n_consonants = 0\n        idx_jpam = 0\n        list_zqes = range(0, len(word))\n        while idx_jpam < len(list_zqes):\n            i = list_zqes[idx_jpam]\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                n_consonants += 1 \n            idx_jpam = idx_jpam + 1\n        if n_consonants == n and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            result.append(word)\n        idx_ozsr = idx_ozsr + 1\n    return result\n\n", "id": "Add_IndependentVar_sample_from_Python/117_to_46", "old_id": "Python/117"}
{"code": "def get_closest_vowel(word):\n    if len(word) < 3 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    idx_jxtq = 0\n    list_f2hk = range(len(word)-2, 0, -1)\n    while idx_jxtq < len(list_f2hk):\n        i = list_f2hk[idx_jxtq]\n        if word[i] in vowels and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n        idx_jxtq = idx_jxtq + 1\n    return \"\"\n    var_bu8 = 37\n", "id": "Add_IndependentVar_sample_from_Python/118_to_47", "old_id": "Python/118"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_9mne = 0\n        list_jie8 = s\n        while idx_9mne < len(list_jie8):\n            i = list_jie8[idx_9mne]\n            if i == '(' and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                return False\n            idx_9mne = idx_9mne + 1\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    var_soz = 83\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "id": "Add_IndependentVar_sample_from_Python/119_to_48", "old_id": "Python/119"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    idx_gfan = 0\n    var_iut = 24\n    list_ursg = lst\n    while idx_gfan < len(list_ursg):\n        i = list_ursg[idx_gfan]\n        count_digit[i]+=1 \n        idx_gfan = idx_gfan + 1\n    if any(count_digit[i] > 2 for i in lst) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return True\n    else:\n        return False\n", "id": "Add_IndependentVar_sample_from_Python/126_to_49", "old_id": "Python/126"}
{"code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return False\n        if num == 2 and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            return True\n        idx_amit = 0\n        list_6hpq = range(2, num)\n        while idx_amit < len(list_6hpq):\n            i = list_6hpq[idx_amit]\n            if num%i == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                return False\n            idx_amit = idx_amit + 1\n        return True\n\n    l = max(interval1[0], interval2[0])\n    var_ah1 = 80\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return \"YES\"\n    return \"NO\"\n", "id": "Add_IndependentVar_sample_from_Python/127_to_50", "old_id": "Python/127"}
{"code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    idx_j659 = 0\n    list_7toc = range(n)\n    while idx_j659 < len(list_7toc):\n        i = list_7toc[idx_j659]\n        idx_63or = 0\n        list_rmqc = range(n)\n        while idx_63or < len(list_rmqc):\n            j = list_rmqc[idx_63or]\n            if grid[i][j] == 1 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n            idx_63or = idx_63or + 1\n        idx_j659 = idx_j659 + 1\n\n    ans = []\n    var_kaj = 57\n    idx_uayt = 0\n    list_w4o6 = range(k)\n    while idx_uayt < len(list_w4o6):\n        i = list_w4o6[idx_uayt]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            ans.append(1)\n        else:\n            ans.append(val)\n        idx_uayt = idx_uayt + 1\n    return ans\n", "id": "Add_IndependentVar_sample_from_Python/129_to_51", "old_id": "Python/129"}
{"code": "def tri(n):\n    if n == 0 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        return [1]\n    my_tri = [1, 3]\n    idx_8d76 = 0\n    list_y4e9 = range(2, n + 1)\n    while idx_8d76 < len(list_y4e9):\n        i = list_y4e9[idx_8d76]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n        idx_8d76 = idx_8d76 + 1\n    return my_tri\n    var_lmk = 90\n", "id": "Add_IndependentVar_sample_from_Python/130_to_52", "old_id": "Python/130"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    idx_io1x = 0\n    var_61t = 85\n    list_otk0 = str(n)\n    while idx_io1x < len(list_otk0):\n        digit = list_otk0[idx_io1x]\n        int_digit = int(digit)\n        if int_digit%2 == 1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            product= product*int_digit\n            odd_count+=1\n        idx_io1x = idx_io1x + 1\n    if odd_count ==0 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        return 0\n    else:\n        return product\n", "id": "Add_IndependentVar_sample_from_Python/131_to_53", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_5ewj = 0\n    list_2hqs = range(len(string))\n    while idx_5ewj < len(list_2hqs):\n        i = list_2hqs[idx_5ewj]\n        if string[i] == '[' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        idx_5ewj = idx_5ewj + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_4kxy = 0\n    list_ey3l = opening_bracket_index\n    while idx_4kxy < len(list_ey3l):\n        idx = list_ey3l[idx_4kxy]\n        if i < l and idx < closing_bracket_index[i] and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            cnt += 1\n            i += 1\n        idx_4kxy = idx_4kxy + 1\n    return cnt >= 2\n    var_exn = 90\n", "id": "Add_IndependentVar_sample_from_Python/132_to_54", "old_id": "Python/132"}
{"code": "def sum_squares(lst):\n    \n    result =[]\n    idx_lguy = 0\n    list_qtsf = range(len(lst))\n    while idx_lguy < len(list_qtsf):\n        i = list_qtsf[idx_lguy]\n        if i %3 == 0 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n        idx_lguy = idx_lguy + 1\n    return sum(result)\n    var_ym0 = 27\n", "id": "Add_IndependentVar_sample_from_Python/142_to_55", "old_id": "Python/142"}
{"code": "def words_in_sentence(sentence):\n    new_lst = []\n    idx_o4w1 = 0\n    var_5m0 = 33\n    list_ku8b = sentence.split()\n    while idx_o4w1 < len(list_ku8b):\n        word = list_ku8b[idx_o4w1]\n        flg = 0\n        if len(word) == 1 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            flg = 1\n        idx_9bkz = 0\n        list_d0tk = range(2, len(word))\n        while idx_9bkz < len(list_d0tk):\n            i = list_d0tk[idx_9bkz]\n            if len(word)%i == 0 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n                flg = 1\n            idx_9bkz = idx_9bkz + 1\n        if flg == 0 or len(word) == 2 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            new_lst.append(word)\n        idx_o4w1 = idx_o4w1 + 1\n    return \" \".join(new_lst)\n", "id": "Add_IndependentVar_sample_from_Python/143_to_56", "old_id": "Python/143"}
{"code": "def specialFilter(nums):\n    \n    count = 0\n    idx_d38c = 0\n    list_xgmj = nums\n    while idx_d38c < len(list_xgmj):\n        num = list_xgmj[idx_d38c]\n        if num > 10 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        idx_d38c = idx_d38c + 1\n    var_ak6 = 86\n    return count \n", "id": "Add_IndependentVar_sample_from_Python/146_to_57", "old_id": "Python/146"}
{"code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    idx_igjb = 0\n    list_jyde = range(n)\n    while idx_igjb < len(list_jyde):\n        i = list_jyde[idx_igjb]\n        idx_1cdv = 0\n        list_s0go = range(i+1,n)\n        while idx_1cdv < len(list_s0go):\n            j = list_s0go[idx_1cdv]\n            idx_a8mr = 0\n            list_ecdw = range(j+1,n)\n            while idx_a8mr < len(list_ecdw):\n                k = list_ecdw[idx_a8mr]\n                if (A[i]+A[j]+A[k])%3 == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                    ans += [(A[i],A[j],A[k])]\n                idx_a8mr = idx_a8mr + 1\n            idx_1cdv = idx_1cdv + 1\n        idx_igjb = idx_igjb + 1\n    return len(ans)\n    var_syj = 39\n", "id": "Add_IndependentVar_sample_from_Python/147_to_58", "old_id": "Python/147"}
{"code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    idx_ftsl = 0\n    list_qs38 = lst\n    while idx_ftsl < len(list_qs38):\n        i = list_qs38[idx_ftsl]\n        if len(i)%2 == 0 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            new_lst.append(i)\n        idx_ftsl = idx_ftsl + 1\n    return sorted(new_lst, key=len)\n    var_zft = 92\n", "id": "Add_IndependentVar_sample_from_Python/149_to_59", "old_id": "Python/149"}
{"code": "def x_or_y(n, x, y):\n    if n == 1 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return y\n    idx_9ecd = 0\n    list_48ey = range(2, n)\n    while idx_9ecd < len(list_48ey):\n        i = list_48ey[idx_9ecd]\n        if n % i == 0 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return y\n            break\n        idx_9ecd = idx_9ecd + 1\n    var_z3o = 22\n", "id": "Add_IndependentVar_sample_from_Python/150_to_60", "old_id": "Python/150"}
{"code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    idx_4yfe = 0\n    list_bw7q = extensions\n    while idx_4yfe < len(list_bw7q):\n        s = list_bw7q[idx_4yfe]\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            strong = s\n            my_val = val\n        idx_4yfe = idx_4yfe + 1\n    var_qgh = 63\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "id": "Add_IndependentVar_sample_from_Python/153_to_61", "old_id": "Python/153"}
{"code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    var_eq4 = 33\n    idx_fsrq = 0\n    list_cxm4 = range(len(a) - l + 1)\n    while idx_fsrq < len(list_cxm4):\n        i = list_cxm4[idx_fsrq]\n        idx_iv4r = 0\n        list_es3u = range(l + 1)\n        while idx_iv4r < len(list_es3u):\n            j = list_es3u[idx_iv4r]\n            if a[i:i+l] == pat[j:j+l] and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                return True\n            idx_iv4r = idx_iv4r + 1\n        idx_fsrq = idx_fsrq + 1\n    return False\n", "id": "Add_IndependentVar_sample_from_Python/154_to_62", "old_id": "Python/154"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    idx_4oif = 0\n    list_1xwm = str(abs(num))\n    while idx_4oif < len(list_1xwm):\n        i = list_1xwm[idx_4oif]\n        if int(i)%2==0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            even_count +=1\n        else:\n            odd_count +=1\n        idx_4oif = idx_4oif + 1\n    return (even_count, odd_count)\n    var_7kt = 74\n", "id": "Add_IndependentVar_sample_from_Python/155_to_63", "old_id": "Python/155"}
{"code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    idx_83hn = 0\n    list_l1zw = s\n    while idx_83hn < len(list_l1zw):\n        i = list_l1zw[idx_83hn]\n        if i.isalpha() and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n        idx_83hn = idx_83hn + 1\n    s = \"\"\n    idx_nspz = 0\n    list_hrwq = new_str\n    while idx_nspz < len(list_hrwq):\n        i = list_hrwq[idx_nspz]\n        s += i\n        idx_nspz = idx_nspz + 1\n    var_tq2 = 32\n    if flg == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return s[len(s)::-1]\n    return s\n", "id": "Add_IndependentVar_sample_from_Python/161_to_64", "old_id": "Python/161"}
