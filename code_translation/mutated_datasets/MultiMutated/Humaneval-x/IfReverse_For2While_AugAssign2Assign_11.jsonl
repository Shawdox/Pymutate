{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_4huq = 0\n    list_k7nz = paren_string\n    while idx_4huq < len(list_k7nz):\n        c = list_k7nz[idx_4huq]\n        if not c == '(':\n            if c == ')':\n                current_depth = current_depth - 1\n                current_string.append(c)\n\n                if current_depth == 0:\n                    result.append(''.join(current_string))\n                    current_string.clear()\n        else:\n            current_depth = current_depth + 1\n            current_string.append(c)\n        idx_4huq = idx_4huq + 1\n\n    return result\n", "id": "AugAssign2Assign_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_8to0 = 0\n        list_ikvl = s\n        while idx_8to0 < len(list_ikvl):\n            c = list_ikvl[idx_8to0]\n            if not c == '(':\n                depth = depth - 1\n            else:\n                depth = depth + 1\n                max_depth = max(depth, max_depth)\n            idx_8to0 = idx_8to0 + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "id": "AugAssign2Assign_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_avh2 = 0\n    list_tnsj = brackets\n    while idx_avh2 < len(list_tnsj):\n        b = list_tnsj[idx_avh2]\n        if not b == \"<\":\n            depth = depth - 1\n        else:\n            depth = depth + 1\n        if depth < 0:\n            return False\n        idx_avh2 = idx_avh2 + 1\n    return depth == 0\n", "id": "AugAssign2Assign_sample_from_Python/56_to_2", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_39xn = 0\n    list_y7l3 = brackets\n    while idx_39xn < len(list_y7l3):\n        b = list_y7l3[idx_39xn]\n        if not b == \"(\":\n            depth = depth - 1\n        else:\n            depth = depth + 1\n        if depth < 0:\n            return False\n        idx_39xn = idx_39xn + 1\n    return depth == 0\n", "id": "AugAssign2Assign_sample_from_Python/61_to_3", "old_id": "Python/61"}
{"code": "def total_match(lst1, lst2):\n    l1 = 0\n    idx_yi3z = 0\n    list_dfg9 = lst1\n    while idx_yi3z < len(list_dfg9):\n        st = list_dfg9[idx_yi3z]\n        l1 = l1 + len(st)\n        idx_yi3z = idx_yi3z + 1\n    \n    l2 = 0\n    idx_cm36 = 0\n    list_l538 = lst2\n    while idx_cm36 < len(list_l538):\n        st = list_l538[idx_cm36]\n        l2 = l2 + len(st)\n        idx_cm36 = idx_cm36 + 1\n    if not l1 <= l2:\n        return lst2\n    else:\n        return lst1\n", "id": "AugAssign2Assign_sample_from_Python/74_to_4", "old_id": "Python/74"}
{"code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    idx_3uvg = 0\n    list_de0o = s\n    while idx_3uvg < len(list_de0o):\n        c = list_de0o[idx_3uvg]\n        if not c in d:\n            out = out + c\n        else:\n            out = out + d[(d.index(c)+2*2) % 26]\n        idx_3uvg = idx_3uvg + 1\n    return out\n", "id": "AugAssign2Assign_sample_from_Python/89_to_5", "old_id": "Python/89"}
{"code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    idx_mon4 = 0\n    list_ujwi = range(1, n+1)\n    while idx_mon4 < len(list_ujwi):\n        i = list_ujwi[idx_mon4]\n        if not i%2 == 1 and is_palindrome(i):\n            if i%2 == 0 and is_palindrome(i):\n                even_palindrome_count = even_palindrome_count + 1\n        else:\n                odd_palindrome_count = odd_palindrome_count + 1\n        idx_mon4 = idx_mon4 + 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "id": "AugAssign2Assign_sample_from_Python/107_to_6", "old_id": "Python/107"}
{"code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    idx_y63t = 0\n    list_urza = lst\n    while idx_y63t < len(list_urza):\n        i = list_urza[idx_y63t]\n        count_digit[i] = count_digit[i] + 1 \n        idx_y63t = idx_y63t + 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if not all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return False\n    else:\n        return True\n    \n    \n", "id": "AugAssign2Assign_sample_from_Python/126_to_7", "old_id": "Python/126"}
{"code": "def digits(n):\n    product = 1\n    odd_count = 0\n    idx_wx1n = 0\n    list_dv1b = str(n)\n    while idx_wx1n < len(list_dv1b):\n        digit = list_dv1b[idx_wx1n]\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count = odd_count + 1\n        idx_wx1n = idx_wx1n + 1\n    if not odd_count ==0:\n        return product\n    else:\n        return 0\n", "id": "AugAssign2Assign_sample_from_Python/131_to_8", "old_id": "Python/131"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_ylaw = 0\n    list_souz = range(len(string))\n    while idx_ylaw < len(list_souz):\n        i = list_souz[idx_ylaw]\n        if not string[i] == '[':\n            closing_bracket_index.append(i)\n        else:\n            opening_bracket_index.append(i)\n        idx_ylaw = idx_ylaw + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_nsg2 = 0\n    list_oeuy = opening_bracket_index\n    while idx_nsg2 < len(list_oeuy):\n        idx = list_oeuy[idx_nsg2]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt = cnt + 1\n            i = i + 1\n        idx_nsg2 = idx_nsg2 + 1\n    return cnt >= 2\n\n    \n", "id": "AugAssign2Assign_sample_from_Python/132_to_9", "old_id": "Python/132"}
{"code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    idx_u98r = 0\n    list_vjy2 = str(abs(num))\n    while idx_u98r < len(list_vjy2):\n        i = list_vjy2[idx_u98r]\n        if not int(i)%2==0:\n            odd_count = odd_count + 1\n        else:\n            even_count = even_count + 1\n        idx_u98r = idx_u98r + 1\n    return (even_count, odd_count)\n", "id": "AugAssign2Assign_sample_from_Python/155_to_10", "old_id": "Python/155"}
