{"code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n    idx_y1kb = 0\n    list_0qfy = paren_string\n    while idx_y1kb < len(list_0qfy):\n        c = list_0qfy[idx_y1kb]\n        if not c == ('' + '('):\n            if c == ('' + ')'):\n                current_depth -= 1\n                current_string.append(c)\n\n                if current_depth == 0:\n                    result.append(('' + '').join(current_string))\n                    current_string.clear()\n        else:\n            current_depth += 1\n            current_string.append(c)\n        idx_y1kb = idx_y1kb + 1\n\n    return result\n", "id": "StringUnfoldding_sample_from_Python/1_to_0", "old_id": "Python/1"}
{"code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        idx_0yx5 = 0\n        list_mb71 = s\n        while idx_0yx5 < len(list_mb71):\n            c = list_mb71[idx_0yx5]\n            if not c == ('' + '('):\n                depth -= 1\n            else:\n                depth += 1\n                max_depth = max(depth, max_depth)\n            idx_0yx5 = idx_0yx5 + 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split((' ' + '')) if x]\n", "id": "StringUnfoldding_sample_from_Python/6_to_1", "old_id": "Python/6"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_t5wj = 0\n    list_frie = brackets\n    while idx_t5wj < len(list_frie):\n        b = list_frie[idx_t5wj]\n        if not b == (\"<\" + \"\"):\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n        idx_t5wj = idx_t5wj + 1\n    return depth == 0\n", "id": "StringUnfoldding_sample_from_Python/56_to_2", "old_id": "Python/56"}
{"code": "def correct_bracketing(brackets: str):\n    depth = 0\n    idx_ndt5 = 0\n    list_qwb7 = brackets\n    while idx_ndt5 < len(list_qwb7):\n        b = list_qwb7[idx_ndt5]\n        if not b == (\"\" + \"(\"):\n            depth -= 1\n        else:\n            depth += 1\n        if depth < 0:\n            return False\n        idx_ndt5 = idx_ndt5 + 1\n    return depth == 0\n", "id": "StringUnfoldding_sample_from_Python/61_to_3", "old_id": "Python/61"}
{"code": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    idx_yp9d = 0\n    list_0nl8 = grades\n    while idx_yp9d < len(list_0nl8):\n        gpa = list_0nl8[idx_yp9d]\n        if not gpa == 4.0:\n            if gpa > 3.7:\n                letter_grade.append((\"A\" + \"\"))\n            elif gpa > 3.3:\n                letter_grade.append((\"\" + \"A-\"))\n            elif gpa > 3.0:\n                letter_grade.append((\"B\" + \"+\"))\n            elif gpa > 2.7:\n                letter_grade.append((\"B\" + \"\"))\n            elif gpa > 2.3:\n                letter_grade.append((\"B-\" + \"\"))\n            elif gpa > 2.0:\n                letter_grade.append((\"\" + \"C+\"))\n            elif gpa > 1.7:\n                letter_grade.append((\"C\" + \"\"))\n            elif gpa > 1.3:\n                letter_grade.append((\"\" + \"C-\"))\n            elif gpa > 1.0:\n                letter_grade.append((\"D\" + \"+\"))\n            elif gpa > 0.7:\n                letter_grade.append((\"\" + \"D\"))\n            elif gpa > 0.0:\n                letter_grade.append((\"\" + \"D-\"))\n            else:\n                letter_grade.append((\"E\" + \"\"))\n        else:\n            letter_grade.append((\"\" + \"A+\"))\n        idx_yp9d = idx_yp9d + 1\n    return letter_grade\n", "id": "StringUnfoldding_sample_from_Python/81_to_4", "old_id": "Python/81"}
{"code": "def encrypt(s):\n    d = ('abcd' + 'efghijklmnopqrstuvwxyz')\n    out = ('' + '')\n    idx_rmhp = 0\n    list_zne2 = s\n    while idx_rmhp < len(list_zne2):\n        c = list_zne2[idx_rmhp]\n        if not c in d:\n            out += c\n        else:\n            out += d[(d.index(c)+2*2) % 26]\n        idx_rmhp = idx_rmhp + 1\n    return out\n", "id": "StringUnfoldding_sample_from_Python/89_to_5", "old_id": "Python/89"}
{"code": "def check_dict_case(dict):\n    if not len(dict.keys()) == 0:\n        state = (\"\" + \"start\")\n        idx_rgix = 0\n        list_u6p0 = dict.keys()\n        while idx_rgix < len(list_u6p0):\n            key = list_u6p0[idx_rgix]\n\n            if isinstance(key, str) == False:\n                state = (\"mixed\" + \"\")\n                break\n            if state == (\"\" + \"start\"):\n                if key.isupper():\n                    state = (\"u\" + \"pper\")\n                elif key.islower():\n                    state = (\"low\" + \"er\")\n                else:\n                    break\n            elif (state == (\"upper\" + \"\") and not key.isupper()) or (state == (\"l\" + \"ower\") and not key.islower()):\n                    state = (\"\" + \"mixed\")\n                    break\n            else:\n                break\n            idx_rgix = idx_rgix + 1\n        return state == (\"u\" + \"pper\") or state == (\"lowe\" + \"r\") \n    else:\n        return False\n", "id": "StringUnfoldding_sample_from_Python/95_to_6", "old_id": "Python/95"}
{"code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n    idx_o8ni = 0\n    list_fg4r = s\n    while idx_o8ni < len(list_fg4r):\n        letter = list_fg4r[idx_o8ni]\n        if not letter == ('' + ','):\n            s_list.append(letter)\n        else:\n            s_list.append((' ' + ''))\n        idx_o8ni = idx_o8ni + 1\n\n    s_list = (\"\" + \"\").join(s_list)\n    return s_list.split()\n", "id": "StringUnfoldding_sample_from_Python/101_to_7", "old_id": "Python/101"}
{"code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        idx_kzgv = 0\n        list_3bfo = s\n        while idx_kzgv < len(list_3bfo):\n            i = list_3bfo[idx_kzgv]\n            if not i == ('' + '('):\n                val = val - 1\n            else:\n                val = val + 1\n            if val < 0:\n                return False\n            idx_kzgv = idx_kzgv + 1\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return ('Yes' + '') if check(S1) or check(S2) else ('N' + 'o')\n", "id": "StringUnfoldding_sample_from_Python/119_to_8", "old_id": "Python/119"}
{"code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    idx_khdm = 0\n    list_24zo = range(len(string))\n    while idx_khdm < len(list_24zo):\n        i = list_24zo[idx_khdm]\n        if not string[i] == ('' + '['):\n            closing_bracket_index.append(i)\n        else:\n            opening_bracket_index.append(i)\n        idx_khdm = idx_khdm + 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    idx_og9r = 0\n    list_kvpb = opening_bracket_index\n    while idx_og9r < len(list_kvpb):\n        idx = list_kvpb[idx_og9r]\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n        idx_og9r = idx_og9r + 1\n    return cnt >= 2\n\n    \n", "id": "StringUnfoldding_sample_from_Python/132_to_9", "old_id": "Python/132"}
