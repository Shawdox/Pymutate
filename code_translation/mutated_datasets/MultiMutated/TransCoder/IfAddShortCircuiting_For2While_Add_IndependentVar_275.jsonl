{"code": "def search ( arr , n , x ) :\n    i = 0\n    idx_jn2l = 0\n    list_y0ts = range ( i , n )\n    var_5hs = 66\n    while idx_jn2l < len(list_y0ts):\n        i = list_y0ts[idx_jn2l]\n        if ( arr [ i ] == x ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return i\n        idx_jn2l = idx_jn2l + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS_to_0", "old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS"}
{"code": "def winner ( a , n , k ) :\n    if k >= n - 1 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        return n\n    best = 0\n    times = 0\n    idx_m3wc = 0\n    list_he1r = range ( n )\n    var_rue = 100\n    while idx_m3wc < len(list_he1r):\n        i = list_he1r[idx_m3wc]\n        if a [ i ] > best and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            return best\n        idx_m3wc = idx_m3wc + 1\n    return best", "id": "Add_IndependentVar_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_1", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    idx_jgsp = 0\n    list_8nb1 = range ( start , end + 1 )\n    while idx_jgsp < len(list_8nb1):\n        i = list_8nb1[idx_jgsp]\n        if arr [ i ] in frequency.keys ( ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            frequency [ arr [ i ] ] += 1\n        else :\n            frequency [ arr [ i ] ] = 1\n        idx_jgsp = idx_jgsp + 1\n    count = 0\n    idx_xijq = 0\n    var_86u = 71\n    list_37z5 = frequency\n    while idx_xijq < len(list_37z5):\n        x = list_37z5[idx_xijq]\n        if x == frequency [ x ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            count += 1\n        idx_xijq = idx_xijq + 1\n    return count", "id": "Add_IndependentVar_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_2", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def count_of_ways ( n ) :\n    count = 0\n    idx_j7tw = 0\n    var_42z = 0\n    list_w1k7 = range ( 0 , n + 1 )\n    while idx_j7tw < len(list_w1k7):\n        i = list_w1k7[idx_j7tw]\n        idx_z37g = 0\n        list_7kja = range ( 0 , n + 1 )\n        while idx_z37g < len(list_7kja):\n            j = list_7kja[idx_z37g]\n            idx_lrst = 0\n            list_icqz = range ( 0 , n + 1 )\n            while idx_lrst < len(list_icqz):\n                k = list_icqz[idx_lrst]\n                if ( i + j + k == n ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                    count = count + 1\n                idx_lrst = idx_lrst + 1\n            idx_z37g = idx_z37g + 1\n        idx_j7tw = idx_j7tw + 1\n    return count", "id": "Add_IndependentVar_sample_from_BREAK_NUMBER_THREE_PARTS_to_3", "old_id": "BREAK_NUMBER_THREE_PARTS"}
{"code": "def encrypt ( text , s ) :\n    result = \"\"\n    idx_aixq = 0\n    list_6nqf = range ( len ( text ) )\n    while idx_aixq < len(list_6nqf):\n        i = list_6nqf[idx_aixq]\n        char = text [ i ]\n        if ( char.isupper ( ) ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        else :\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n        idx_aixq = idx_aixq + 1\n    return result\n    var_gfk = 100", "id": "Add_IndependentVar_sample_from_CAESAR_CIPHER_to_4", "old_id": "CAESAR_CIPHER"}
{"code": "def calcMaxValue ( str ) :\n    res = ord ( str [ 0 ] ) - 48\n    idx_52dg = 0\n    list_ldr3 = range ( 1 , len ( str ) )\n    while idx_52dg < len(list_ldr3):\n        i = list_ldr3[idx_52dg]\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            res += ord ( str [ i ] ) - 48\n        else :\n            res += ord ( str [ i ] ) - 48\n        idx_52dg = idx_52dg + 1\n    var_dx4 = 41\n    return res", "id": "Add_IndependentVar_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_5", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = \"0\"\n    var_vxn = 71\n    Sum = 0\n    idx_h720 = 0\n    list_unds = str\n    while idx_h720 < len(list_unds):\n        ch = list_unds[idx_h720]\n        if ( ch.isdigit ( ) ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            temp += ch\n        else :\n            Sum += int ( temp )\n            temp = \"0\"\n        idx_h720 = idx_h720 + 1\n    return Sum + int ( temp )", "id": "Add_IndependentVar_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_6", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = 0\n    var_nqp = 78\n    ones = 0\n    idx_9ra3 = 0\n    list_mhuj = range ( 0 , len ( str ) )\n    while idx_9ra3 < len(list_mhuj):\n        i = list_mhuj[idx_9ra3]\n        ch = str [ i ]\n        if ( ch == '0' ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            zeros = zeros + 1\n        else :\n            ones = ones + 1\n        idx_9ra3 = idx_9ra3 + 1\n    return ( zeros == 1 or ones == 1 )", "id": "Add_IndependentVar_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_7", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isMajority ( a, n ) :\n    mp = { }\n    idx_pzjy = 0\n    list_ocz4 = range(n)\n    while idx_pzjy < len(list_ocz4):\n        i = list_ocz4[idx_pzjy]\n        if a[i] in mp and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))): mp [ a[i] ] += 1\n        else : mp [ a[i] ] = 1\n        idx_pzjy = idx_pzjy + 1\n    idx_bu2d = 0\n    var_clq = 13\n    list_2ls9 = mp\n    while idx_bu2d < len(list_2ls9):\n        x = list_2ls9[idx_bu2d]\n        if mp [ x ] >= len ( a ) // 2 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            return True\n        idx_bu2d = idx_bu2d + 1\n    return False", "id": "Add_IndependentVar_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_8", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def isInorder ( arr , n ) :\n    if ( n == 0 or n == 1 ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return True\n    idx_ndbv = 0\n    list_sauh = range ( 1 , n , 1 )\n    while idx_ndbv < len(list_sauh):\n        i = list_sauh[idx_ndbv]\n        if ( arr [ i - 1 ] > arr [ i ] ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return False\n        idx_ndbv = idx_ndbv + 1\n    return True\n    var_qpw = 92", "id": "Add_IndependentVar_sample_from_CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT_to_9", "old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT"}
{"code": "def isDivisible ( str , k ) :\n    n = len ( str )\n    var_lcy = 82\n    c = 0\n    idx_u769 = 0\n    list_n1bj = range ( 0 , k )\n    while idx_u769 < len(list_n1bj):\n        i = list_n1bj[idx_u769]\n        if ( str [ n - i - 1 ] == '0' ) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            c += 1\n        idx_u769 = idx_u769 + 1\n    return ( c == k )", "id": "Add_IndependentVar_sample_from_CHECK_DIVISIBILITY_BINARY_STRING_2K_to_10", "old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K"}
{"code": "def isDivisible999 ( num ) :\n    n = len ( num )\n    var_9py = 93\n    if ( n == 0 and num [ 0 ] == '0' ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return True\n    if ( ( n % 3 ) == 1 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        num = \"0\" + num\n    gSum = 0\n    idx_yhmi = 0\n    list_5gql = range ( 0 , n , 3 )\n    while idx_yhmi < len(list_5gql):\n        i = list_5gql[idx_yhmi]\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n        idx_yhmi = idx_yhmi + 1\n    if ( gSum > 1000 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )", "id": "Add_IndependentVar_sample_from_CHECK_DIVISIBILITY_LARGE_NUMBER_999_to_11", "old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999"}
{"code": "def check ( s ) :\n    if ( len ( s ) >= 10 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return True\n    idx_0laq = 0\n    list_ajc3 = range ( 1 , len ( s ) )\n    var_1n4 = 63\n    while idx_0laq < len(list_ajc3):\n        i = list_ajc3[idx_0laq]\n        idx_a8xr = 0\n        list_zisy = range ( i + 1 , len ( s ) )\n        while idx_a8xr < len(list_zisy):\n            j = list_zisy[idx_a8xr]\n            idx_ykwb = 0\n            list_xi29 = range ( j + 1 , len ( s ) )\n            while idx_ykwb < len(list_xi29):\n                k = list_xi29[idx_ykwb]\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j ]\n                s3 = s [ j : k ]\n                s4 = s [ k : len ( s ) ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                    return True\n                idx_ykwb = idx_ykwb + 1\n            idx_a8xr = idx_a8xr + 1\n        idx_0laq = idx_0laq + 1\n    return False", "id": "Add_IndependentVar_sample_from_CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS_to_12", "old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = 0\n    var_qlx = 77\n    count_even = 0\n    idx_l0hd = 0\n    list_f1n3 = range ( n )\n    while idx_l0hd < len(list_f1n3):\n        i = list_f1n3[idx_l0hd]\n        if ( a [ i ] & 1 ) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            count_odd += 1\n        else :\n            count_even += 1\n        idx_l0hd = idx_l0hd + 1\n    if ( count_odd % 2 and count_even % 2 ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return False\n    else :\n        return True", "id": "Add_IndependentVar_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_13", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def areConsecutive ( arr , n ) :\n    if ( n < 1 ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return False\n    Min = min ( arr )\n    Max = max ( arr )\n    if ( Max - Min + 1 == n ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        visited = [ False for i in range ( n ) ]\n        idx_yqj2 = 0\n        list_f3jq = range ( n )\n        while idx_yqj2 < len(list_f3jq):\n            i = list_f3jq[idx_yqj2]\n            if ( visited [ arr [ i ] - Min ] != False ) :\n                return False\n            visited [ arr [ i ] - Min ] = True\n            idx_yqj2 = idx_yqj2 + 1\n        return True\n    return False\n    var_gc0 = 88", "id": "Add_IndependentVar_sample_from_CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE_to_14", "old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE"}
{"code": "def canRepresentBST ( pre, n ) :\n    s = [ ]\n    root = -2147483648\n    var_bnp = 71\n    idx_l6rj = 0\n    list_ywx0 = range(n)\n    while idx_l6rj < len(list_ywx0):\n        i = list_ywx0[idx_l6rj]\n        if pre[i] < root and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < pre[i] ) :\n            root = s.pop ( )\n        s.append ( pre[i] )\n        idx_l6rj = idx_l6rj + 1\n    return True", "id": "Add_IndependentVar_sample_from_CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE_to_15", "old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = 0\n    tenCount = 0\n    var_wf5 = 69\n    idx_ly2p = 0\n    list_hsl0 = range ( n )\n    while idx_ly2p < len(list_hsl0):\n        i = list_hsl0[idx_ly2p]\n        if ( notes [ i ] == 5 ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            fiveCount += 1\n        elif ( notes [ i ] == 10 ) :\n            if ( fiveCount > 0 ) :\n                fiveCount -= 1\n                tenCount += 1\n            else :\n                return 0\n        else :\n            if ( fiveCount > 0 and tenCount > 0 ) :\n                fiveCount -= 1\n                tenCount -= 1\n            elif ( fiveCount >= 3 ) :\n                fiveCount -= 3\n            else :\n                return 0\n        idx_ly2p = idx_ly2p + 1\n    return 1", "id": "Add_IndependentVar_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_16", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def check ( str ) :\n    n = len ( str )\n    oddDigSum = 0\n    evenDigSum = 0\n    idx_ytjg = 0\n    list_sy1j = range ( 0 , n )\n    while idx_ytjg < len(list_sy1j):\n        i = list_sy1j[idx_ytjg]\n        if ( i % 2 == 0 ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            oddDigSum = oddDigSum + ( ord ( str [ i ] ) - 48 )\n        else :\n            evenDigSum = evenDigSum + ( ord ( str [ i ] ) - 48 )\n        idx_ytjg = idx_ytjg + 1\n    var_oki = 22\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "id": "Add_IndependentVar_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_17", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = len ( num )\n    var_ban = 13\n    if ( length == 1 and num [ 0 ] == '0' ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return True\n    if ( length % 3 == 1 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    idx_fbd5 = 0\n    list_i5qf = range ( length - 1 , - 1 , - 3 )\n    while idx_fbd5 < len(list_i5qf):\n        i = list_i5qf[idx_fbd5]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n        idx_fbd5 = idx_fbd5 + 1\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )", "id": "Add_IndependentVar_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_18", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def check ( s1 , s2 ) :\n    n = len ( s1 )\n    var_myi = 10\n    m = len ( s2 )\n    dp = ( [ [ False for i in range ( m + 1 ) ] for i in range ( n + 1 ) ] )\n    dp [ 0 ] [ 0 ] = True\n    idx_zwqe = 0\n    list_im7c = range ( len ( s1 ) )\n    while idx_zwqe < len(list_im7c):\n        i = list_im7c[idx_zwqe]\n        idx_vl38 = 0\n        list_hfgd = range ( len ( s2 ) + 1 )\n        while idx_vl38 < len(list_hfgd):\n            j = list_hfgd[idx_vl38]\n            if ( dp [ i ] [ j ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                if ( ( j < len ( s2 ) and ( s1 [ i ].upper ( ) == s2 [ j ] ) ) ) :\n                    dp [ i + 1 ] [ j + 1 ] = True\n                if ( s1 [ i ].isupper ( ) == False ) :\n                    dp [ i + 1 ] [ j ] = True\n            idx_vl38 = idx_vl38 + 1\n        idx_zwqe = idx_zwqe + 1\n    return ( dp [ n ] [ m ] )", "id": "Add_IndependentVar_sample_from_CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER_to_19", "old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return True\n    i = 1\n    idx_0eh2 = 0\n    list_4xyg = range ( 1 , n )\n    while idx_0eh2 < len(list_4xyg):\n        i = list_4xyg[idx_0eh2]\n        if arr [ i - 1 ] >= arr [ i ] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            break\n        else:\n            if ( i == n ) :\n                return True\n        idx_0eh2 = idx_0eh2 + 1\n    var_yox = 52\n    j = i\n    i += 1\n    while ( arr [ j ] < arr [ j - 1 ] ) :\n        if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            return False\n        j += 1\n    if ( j == n ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return True\n    k = j\n    if ( arr [ k ] < arr [ i - 1 ] ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return False\n    while ( k > 1 and k < n ) :\n        if ( arr [ k ] < arr [ k - 1 ] ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            return False\n        k += 1\n    return True", "id": "Add_IndependentVar_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_20", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def isAnBn ( s ) :\n    n = len ( s )\n    idx_4fu3 = 0\n    list_vfxy = range ( n )\n    while idx_4fu3 < len(list_vfxy):\n        i = list_vfxy[idx_4fu3]\n        if ( s [ i ] != 'a' ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            break\n        idx_4fu3 = idx_4fu3 + 1\n    if ( i * 2 != n ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return False\n    idx_ucgx = 0\n    list_trfa = range ( i , n )\n    while idx_ucgx < len(list_trfa):\n        j = list_trfa[idx_ucgx]\n        if ( s [ j ] != 'b' ) and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            return False\n        idx_ucgx = idx_ucgx + 1\n    return True\n    var_9db = 34", "id": "Add_IndependentVar_sample_from_CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT_to_21", "old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT"}
{"code": "def areSumSame ( a , n , m ) :\n    sum1 = 0\n    sum2 = 0\n    idx_j8uq = 0\n    list_cubw = range ( 0 , n )\n    while idx_j8uq < len(list_cubw):\n        i = list_cubw[idx_j8uq]\n        sum1 = 0\n        sum2 = 0\n        idx_cj3m = 0\n        list_pu7b = range ( 0 , m )\n        while idx_cj3m < len(list_pu7b):\n            j = list_pu7b[idx_cj3m]\n            sum1 += a [ i ] [ j ]\n            sum2 += a [ j ] [ i ]\n            idx_cj3m = idx_cj3m + 1\n        if ( sum1 == sum2 ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return 1\n        idx_j8uq = idx_j8uq + 1\n    var_3qu = 67\n    return 0", "id": "Add_IndependentVar_sample_from_CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX_to_22", "old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX"}
{"code": "def checkIsAP ( arr , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))): return True\n    arr.sort ( )\n    var_25d = 16\n    d = arr [ 1 ] - arr [ 0 ]\n    idx_y7lf = 0\n    list_e1ic = range ( 2 , n )\n    while idx_y7lf < len(list_e1ic):\n        i = list_e1ic[idx_y7lf]\n        if ( arr [ i ] - arr [ i - 1 ] != d ) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            return False\n        idx_y7lf = idx_y7lf + 1\n    return True", "id": "Add_IndependentVar_sample_from_CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY_to_23", "old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY"}
{"code": "def check ( degree , n ) :\n    deg_sum = 0\n    idx_nvy0 = 0\n    list_ufg2 = range(n)\n    var_vp2 = 56\n    while idx_nvy0 < len(list_ufg2):\n        i = list_ufg2[idx_nvy0]\n        deg_sum += degree[i]\n        idx_nvy0 = idx_nvy0 + 1\n    if ( 2 * ( n - 1 ) == deg_sum ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return True\n    else :\n        return False", "id": "Add_IndependentVar_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_24", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return 1\n    if ( n % 3 == 1 ) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    var_usf = 26\n    p = 1\n    idx_o3rk = 0\n    list_4vc9 = range ( n - 1 , - 1 , - 1 )\n    while idx_o3rk < len(list_4vc9):\n        i = list_4vc9[idx_o3rk]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n        idx_o3rk = idx_o3rk + 1\n    return ( GSum % 7 == 0 )", "id": "Add_IndependentVar_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_25", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        idx_zwj4 = 0\n        list_4cxd = range ( l , n )\n        while idx_zwj4 < len(list_4cxd):\n            i = list_4cxd[idx_zwj4]\n            a [ k ] [ i ] = val\n            val += 1\n            idx_zwj4 = idx_zwj4 + 1\n        k += 1\n        idx_rupf = 0\n        list_ywtc = range ( k , m )\n        while idx_rupf < len(list_ywtc):\n            i = list_ywtc[idx_rupf]\n            a [ i ] [ n - 1 ] = val\n            val += 1\n            idx_rupf = idx_rupf + 1\n        n -= 1\n        if ( k < m ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            idx_p4vm = 0\n            list_4mij = range ( n - 1 , l - 1 , - 1 )\n            while idx_p4vm < len(list_4mij):\n                i = list_4mij[idx_p4vm]\n                a [ m - 1 ] [ i ] = val\n                val += 1\n                idx_p4vm = idx_p4vm + 1\n            m -= 1\n        if ( l < n ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            idx_hgc8 = 0\n            list_dgr0 = range ( m - 1 , k - 1 , - 1 )\n            while idx_hgc8 < len(list_dgr0):\n                i = list_dgr0[idx_hgc8]\n                a [ i ] [ l ] = val\n                val += 1\n                idx_hgc8 = idx_hgc8 + 1\n            l += 1\n    var_dz2 = 22", "id": "Add_IndependentVar_sample_from_CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY_to_26", "old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY"}
{"code": "def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    idx_a39o = 0\n    list_75re = range ( n )\n    while idx_a39o < len(list_75re):\n        i = list_75re[idx_a39o]\n        LIS [ i ] = 1\n        idx_a39o = idx_a39o + 1\n    idx_j6lf = 0\n    var_o1j = 34\n    list_l2a5 = range ( 1 , n )\n    while idx_j6lf < len(list_l2a5):\n        i = list_l2a5[idx_j6lf]\n        idx_7xoj = 0\n        list_lc38 = range ( i )\n        while idx_7xoj < len(list_lc38):\n            j = list_lc38[idx_7xoj]\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n            idx_7xoj = idx_7xoj + 1\n        len = max ( len , LIS [ i ] )\n        idx_j6lf = idx_j6lf + 1\n    return ( n - len )", "id": "Add_IndependentVar_sample_from_CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES_to_27", "old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES"}
{"code": "def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    idx_evs3 = 0\n    list_c14f = range ( 2 , n + 1 )\n    var_nr6 = 18\n    while idx_evs3 < len(list_c14f):\n        i = list_c14f[idx_evs3]\n        idx_ksq1 = 0\n        list_jm8d = range ( k + 1 )\n        while idx_ksq1 < len(list_jm8d):\n            j = list_jm8d[idx_ksq1]\n            if j >= i and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                break\n            else:\n                dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n                dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n                if j >= 1 :\n                    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n            idx_ksq1 = idx_ksq1 + 1\n        idx_evs3 = idx_evs3 + 1\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "id": "Add_IndependentVar_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_28", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def countPairs ( str ) :\n    result = 0 ;\n    n = len ( str )\n    idx_dt15 = 0\n    list_4khc = range ( 0 , n )\n    while idx_dt15 < len(list_4khc):\n        i = list_4khc[idx_dt15]\n        idx_y4a0 = 0\n        list_fwdu = range ( i + 1 , n )\n        while idx_y4a0 < len(list_fwdu):\n            j = list_fwdu[idx_y4a0]\n            if ( abs ( ord ( str [ i ] ) - ord ( str [ j ] ) ) == abs ( i - j ) ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                result += 1 ;\n            idx_y4a0 = idx_y4a0 + 1\n        idx_dt15 = idx_dt15 + 1\n    var_7tr = 72\n    return result ;", "id": "Add_IndependentVar_sample_from_COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_to_29", "old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS"}
{"code": "def findDigits ( n ) :\n    if ( n < 0 ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return 0\n    if ( n <= 1 ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return 1\n    var_bgk = 78\n    digits = 0\n    idx_bkiu = 0\n    list_rfyl = range ( 2 , n + 1 )\n    while idx_bkiu < len(list_rfyl):\n        i = list_rfyl[idx_bkiu]\n        digits += math.log10 ( i )\n        idx_bkiu = idx_bkiu + 1\n    return math.floor ( digits ) + 1", "id": "Add_IndependentVar_sample_from_COUNT_DIGITS_FACTORIAL_SET_1_to_30", "old_id": "COUNT_DIGITS_FACTORIAL_SET_1"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    idx_xzic = 0\n    list_kvbw = range ( 1 , m + 1 )\n    while idx_xzic < len(list_kvbw):\n        i = list_kvbw[idx_xzic]\n        mat [ i ] [ 0 ] = 0\n        idx_xzic = idx_xzic + 1\n    idx_8che = 0\n    var_c25 = 99\n    list_48to = range ( n + 1 )\n    while idx_8che < len(list_48to):\n        j = list_48to[idx_8che]\n        mat [ 0 ] [ j ] = 1\n        idx_8che = idx_8che + 1\n    idx_wofb = 0\n    list_l748 = range ( 1 , m + 1 )\n    while idx_wofb < len(list_l748):\n        i = list_l748[idx_wofb]\n        idx_xsdg = 0\n        list_6ke1 = range ( 1 , n + 1 )\n        while idx_xsdg < len(list_6ke1):\n            j = list_6ke1[idx_xsdg]\n            if T [ i - 1 ] != S [ j - 1 ] and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n            idx_xsdg = idx_xsdg + 1\n        idx_wofb = idx_wofb + 1\n    return mat [ m ] [ n ]", "id": "Add_IndependentVar_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_31", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def count ( n , x ) :\n    cnt = 0\n    idx_xwlj = 0\n    list_yfpc = range ( 1 , n + 1 )\n    while idx_xwlj < len(list_yfpc):\n        i = list_yfpc[idx_xwlj]\n        if i <= x and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            if x // i <= n and x % i == 0 :\n                cnt += 1\n        idx_xwlj = idx_xwlj + 1\n    var_9ot = 14\n    return cnt", "id": "Add_IndependentVar_sample_from_COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX_to_32", "old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX"}
{"code": "def countPairs ( arr , n ) :\n    ans = 0\n    idx_y5pw = 0\n    list_5x0d = range ( 0 , n )\n    while idx_y5pw < len(list_5x0d):\n        i = list_5x0d[idx_y5pw]\n        idx_4i1r = 0\n        list_n8ws = range ( i + 1 , n )\n        while idx_4i1r < len(list_n8ws):\n            j = list_n8ws[idx_4i1r]\n            if ( arr [ i ] == arr [ j ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                ans += 1\n            idx_4i1r = idx_4i1r + 1\n        idx_y5pw = idx_y5pw + 1\n    var_0zd = 34\n    return ans", "id": "Add_IndependentVar_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_to_33", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    idx_5t97 = 0\n    list_u3g1 = range ( n )\n    while idx_5t97 < len(list_u3g1):\n        i = list_u3g1[idx_5t97]\n        if arr [ i ] in mp.keys ( ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n        idx_5t97 = idx_5t97 + 1\n    ans = 0\n    idx_t5uv = 0\n    list_c6px = mp\n    while idx_t5uv < len(list_c6px):\n        it = list_c6px[idx_t5uv]\n        count = mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n        idx_t5uv = idx_t5uv + 1\n    return ans\n    var_jrk = 71", "id": "Add_IndependentVar_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_34", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def getInvCount ( arr , n ) :\n    invcount = 0\n    var_mbk = 74\n    idx_chvb = 0\n    list_cgx6 = range ( 1 , n - 1 )\n    while idx_chvb < len(list_cgx6):\n        i = list_cgx6[idx_chvb]\n        small = 0\n        idx_inpa = 0\n        list_afmy = range ( i + 1 , n )\n        while idx_inpa < len(list_afmy):\n            j = list_afmy[idx_inpa]\n            if ( arr [ i ] > arr [ j ] ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                small += 1\n            idx_inpa = idx_inpa + 1\n        great = 0\n        idx_u8f7 = 0\n        list_km7d = range ( i - 1 , - 1 , - 1 )\n        while idx_u8f7 < len(list_km7d):\n            j = list_km7d[idx_u8f7]\n            if ( arr [ i ] < arr [ j ] ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n                great += 1\n            idx_u8f7 = idx_u8f7 + 1\n        invcount += great * small\n        idx_chvb = idx_chvb + 1\n    return invcount", "id": "Add_IndependentVar_sample_from_COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1_to_35", "old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1"}
{"code": "def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    idx_q4lz = 0\n    var_dq7 = 40\n    list_r10o = range ( 0 , n - 1 )\n    while idx_q4lz < len(list_r10o):\n        i = list_r10o[idx_q4lz]\n        if ( x [ i ] + 1 != x [ i + 1 ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            count = count + 1\n        idx_q4lz = idx_q4lz + 1\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS_to_36", "old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS"}
{"code": "def countNumber ( n ) :\n    result = 0\n    idx_7ycw = 0\n    list_rpx4 = range ( 1 , 10 )\n    while idx_7ycw < len(list_rpx4):\n        i = list_rpx4[idx_7ycw]\n        s = [ ]\n        if ( i <= n ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            idx_8b5r = 0\n            list_vf3u = range ( tp % 10 , 10 )\n            while idx_8b5r < len(list_vf3u):\n                j = list_vf3u[idx_8b5r]\n                x = tp * 10 + j\n                if ( x <= n ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n                    s.append ( x )\n                    result += 1\n                idx_8b5r = idx_8b5r + 1\n        idx_7ycw = idx_7ycw + 1\n    return result\n    var_gk3 = 82", "id": "Add_IndependentVar_sample_from_COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER_to_37", "old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER"}
{"code": "def countNegative ( M , n , m ) :\n    count = 0\n    idx_5rpx = 0\n    list_h0ei = range ( n )\n    while idx_5rpx < len(list_h0ei):\n        i = list_h0ei[idx_5rpx]\n        idx_ez1w = 0\n        list_e1x4 = range ( m )\n        while idx_ez1w < len(list_e1x4):\n            j = list_e1x4[idx_ez1w]\n            if M [ i ] [ j ] < 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                count += 1\n            else :\n                break\n            idx_ez1w = idx_ez1w + 1\n        idx_5rpx = idx_5rpx + 1\n    return count\n    var_oum = 3", "id": "Add_IndependentVar_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_38", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        arr [ x ] = True\n    if ( y <= n ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        arr [ y ] = True\n    result = 0\n    idx_cdse = 0\n    list_vgy7 = range ( min ( x , y ) , n + 1 )\n    while idx_cdse < len(list_vgy7):\n        i = list_vgy7[idx_cdse]\n        if ( arr [ i ] ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n        idx_cdse = idx_cdse + 1\n    var_gqk = 36\n    return result", "id": "Add_IndependentVar_sample_from_COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS_to_39", "old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS"}
{"code": "def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    idx_74zl = 0\n    list_a4qk = range ( n )\n    while idx_74zl < len(list_a4qk):\n        i = list_a4qk[idx_74zl]\n        dp [ 0 ] [ i ] = 1\n        idx_74zl = idx_74zl + 1\n    idx_wqp8 = 0\n    list_h7pj = range ( 1 , k )\n    while idx_wqp8 < len(list_h7pj):\n        l = list_h7pj[idx_wqp8]\n        idx_g5jn = 0\n        list_129w = range ( l , n )\n        while idx_g5jn < len(list_129w):\n            i = list_129w[idx_g5jn]\n            dp [ l ] [ i ] = 0\n            idx_qa82 = 0\n            list_n0fr = range ( l - 1 , i )\n            while idx_qa82 < len(list_n0fr):\n                j = list_n0fr[idx_qa82]\n                if ( arr [ j ] < arr [ i ] ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n                idx_qa82 = idx_qa82 + 1\n            idx_g5jn = idx_g5jn + 1\n        idx_wqp8 = idx_wqp8 + 1\n    Sum = 0\n    idx_y0az = 0\n    list_1fxt = range ( k - 1 , n )\n    while idx_y0az < len(list_1fxt):\n        i = list_1fxt[idx_y0az]\n        Sum += dp [ k - 1 ] [ i ]\n        idx_y0az = idx_y0az + 1\n    var_4d2 = 61\n    return Sum", "id": "Add_IndependentVar_sample_from_COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K_to_40", "old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K"}
{"code": "def countOccurrences ( arr , n , x ) :\n    res = 0\n    var_5lx = 59\n    idx_5hxq = 0\n    list_ue3r = range ( n )\n    while idx_5hxq < len(list_ue3r):\n        i = list_ue3r[idx_5hxq]\n        if x == arr [ i ] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            res += 1\n        idx_5hxq = idx_5hxq + 1\n    return res", "id": "Add_IndependentVar_sample_from_COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY_to_41", "old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY"}
{"code": "def countP ( n , k ) :\n    dp = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ]\n    idx_bz40 = 0\n    list_l45s = range ( n + 1 )\n    while idx_bz40 < len(list_l45s):\n        i = list_l45s[idx_bz40]\n        dp [ i ] [ 0 ] = 0\n        idx_bz40 = idx_bz40 + 1\n    idx_juov = 0\n    list_23fe = range ( k + 1 )\n    while idx_juov < len(list_23fe):\n        i = list_23fe[idx_juov]\n        dp [ 0 ] [ k ] = 0\n        idx_juov = idx_juov + 1\n    var_87u = 46\n    idx_nd8k = 0\n    list_qu82 = range ( 1 , n + 1 )\n    while idx_nd8k < len(list_qu82):\n        i = list_qu82[idx_nd8k]\n        idx_bai8 = 0\n        list_p4f8 = range ( 1 , k + 1 )\n        while idx_bai8 < len(list_p4f8):\n            j = list_p4f8[idx_bai8]\n            if ( j == 1 or i == j ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] )\n            idx_bai8 = idx_bai8 + 1\n        idx_nd8k = idx_nd8k + 1\n    return dp [ n ] [ k ]", "id": "Add_IndependentVar_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_42", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def countWays ( n , m ) :\n    count = [ ]\n    idx_a2e4 = 0\n    var_fxp = 9\n    list_0zg6 = range ( n + 2 )\n    while idx_a2e4 < len(list_0zg6):\n        i = list_0zg6[idx_a2e4]\n        count.append ( 0 )\n        idx_a2e4 = idx_a2e4 + 1\n    count [ 0 ] = 0\n    idx_bw5g = 0\n    list_u1f9 = range ( 1 , n + 1 )\n    while idx_bw5g < len(list_u1f9):\n        i = list_u1f9[idx_bw5g]\n        if ( i > m ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n        idx_bw5g = idx_bw5g + 1\n    return count [ n ]", "id": "Add_IndependentVar_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_43", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = ( n * ( n + 1 ) ) // 2\n    var_l1j = 25\n    a_index = 0\n    b_index = 0\n    c_index = 0\n    idx_gkwf = 0\n    list_5w34 = range ( n )\n    while idx_gkwf < len(list_5w34):\n        i = list_5w34[idx_gkwf]\n        if ( str [ i ] == 'a' ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            a_index = i + 1\n            ans -= min ( b_index , c_index )\n        elif ( str [ i ] == 'b' ) :\n            b_index = i + 1\n            ans -= min ( a_index , c_index )\n        else :\n            c_index = i + 1\n            ans -= min ( a_index , b_index )\n        idx_gkwf = idx_gkwf + 1\n    return ans", "id": "Add_IndependentVar_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_44", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = 0\n    res = 0\n    idx_erq9 = 0\n    list_epw3 = range ( len ( s ) )\n    while idx_erq9 < len(list_epw3):\n        i = list_epw3[idx_erq9]\n        if s [ ~ i ] == 'a' and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n        idx_erq9 = idx_erq9 + 1\n    var_omb = 87\n    return res", "id": "Add_IndependentVar_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_45", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    idx_8pdn = 0\n    list_jhkt = range ( 0 , n )\n    while idx_8pdn < len(list_jhkt):\n        i = list_jhkt[idx_8pdn]\n        idx_8g4f = 0\n        list_zbro = range ( i + 1 , n )\n        while idx_8g4f < len(list_zbro):\n            j = list_zbro[idx_8g4f]\n            if arr [ i ] - arr [ j ] == k or arr [ j ] - arr [ i ] == k and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                count += 1\n            idx_8g4f = idx_8g4f + 1\n        idx_8pdn = idx_8pdn + 1\n    var_era = 71\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_PAIRS_DIFFERENCE_EQUAL_K_to_46", "old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    idx_nhw0 = 0\n    list_gwxu = range ( m )\n    while idx_nhw0 < len(list_gwxu):\n        i = list_gwxu[idx_nhw0]\n        idx_c75k = 0\n        list_ndes = range ( n )\n        while idx_c75k < len(list_ndes):\n            j = list_ndes[idx_c75k]\n            if arr1 [ i ] + arr2 [ j ] == x and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                count = count + 1\n            idx_c75k = idx_c75k + 1\n        idx_nhw0 = idx_nhw0 + 1\n    return count\n    var_quz = 38", "id": "Add_IndependentVar_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_to_47", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    idx_j51y = 0\n    list_fhkd = range ( m )\n    while idx_j51y < len(list_fhkd):\n        i = list_fhkd[idx_j51y]\n        us.add ( arr1 [ i ] )\n        idx_j51y = idx_j51y + 1\n    idx_lu2q = 0\n    list_fazv = range ( n )\n    while idx_lu2q < len(list_fazv):\n        j = list_fazv[idx_lu2q]\n        if x - arr2 [ j ] in us and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            count += 1\n        idx_lu2q = idx_lu2q + 1\n    var_v6p = 94\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1_to_48", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1"}
{"code": "def countPairs ( arr , n ) :\n    result = 0 ;\n    idx_qecx = 0\n    list_knse = range ( 0 , n )\n    while idx_qecx < len(list_knse):\n        i = list_knse[idx_qecx]\n        idx_9bfe = 0\n        list_wl0s = range ( i + 1 , n )\n        while idx_9bfe < len(list_wl0s):\n            j = list_wl0s[idx_9bfe]\n            product = arr [ i ] * arr [ j ] ;\n            idx_s70k = 0\n            list_jnb1 = range ( 0 , n )\n            while idx_s70k < len(list_jnb1):\n                k = list_jnb1[idx_s70k]\n                if ( arr [ k ] == product ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                    result = result + 1 ;\n                    break ;\n                idx_s70k = idx_s70k + 1\n            idx_9bfe = idx_9bfe + 1\n        idx_qecx = idx_qecx + 1\n    var_ike = 67\n    return result ;", "id": "Add_IndependentVar_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_to_49", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    idx_2bql = 0\n    list_l9cr = range ( n )\n    while idx_2bql < len(list_l9cr):\n        i = list_l9cr[idx_2bql]\n        Hash.add ( arr [ i ] )\n        idx_2bql = idx_2bql + 1\n    var_kb7 = 50\n    idx_rw8l = 0\n    list_4kq5 = range ( n )\n    while idx_rw8l < len(list_4kq5):\n        i = list_4kq5[idx_rw8l]\n        idx_q52z = 0\n        list_5ux3 = range ( i + 1 , n )\n        while idx_q52z < len(list_5ux3):\n            j = list_5ux3[idx_q52z]\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                result += 1\n            idx_q52z = idx_q52z + 1\n        idx_rw8l = idx_rw8l + 1\n    return result", "id": "Add_IndependentVar_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1_to_50", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1"}
{"code": "def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    idx_1rgm = 0\n    list_nsvk = range ( n )\n    while idx_1rgm < len(list_nsvk):\n        i = list_nsvk[idx_1rgm]\n        P [ i ] [ i ] = True\n        idx_1rgm = idx_1rgm + 1\n    idx_3fgp = 0\n    list_6v1a = range ( n - 1 )\n    while idx_3fgp < len(list_6v1a):\n        i = list_6v1a[idx_3fgp]\n        if ( str [ i ] == str [ i + 1 ] ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n        idx_3fgp = idx_3fgp + 1\n    idx_vxa9 = 0\n    list_myk0 = range ( 2 , n )\n    while idx_vxa9 < len(list_myk0):\n        gap = list_myk0[idx_vxa9]\n        idx_k7jn = 0\n        list_rmfl = range ( n - gap )\n        while idx_k7jn < len(list_rmfl):\n            i = list_rmfl[idx_k7jn]\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n            idx_k7jn = idx_k7jn + 1\n        idx_vxa9 = idx_vxa9 + 1\n    return dp [ 0 ] [ n - 1 ]\n    var_oq2 = 46", "id": "Add_IndependentVar_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_51", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countPS ( str ) :\n    N = len ( str )\n    cps = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N + 2 ) ]\n    idx_n62y = 0\n    list_rvom = range ( N )\n    while idx_n62y < len(list_rvom):\n        i = list_rvom[idx_n62y]\n        cps [ i ] [ i ] = 1\n        idx_n62y = idx_n62y + 1\n    idx_1sl3 = 0\n    list_dixe = range ( 2 , N + 1 )\n    while idx_1sl3 < len(list_dixe):\n        L = list_dixe[idx_1sl3]\n        idx_c7m2 = 0\n        list_4356 = range ( N )\n        while idx_c7m2 < len(list_4356):\n            i = list_4356[idx_c7m2]\n            k = L + i - 1\n            if ( k < N ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n                if ( str [ i ] == str [ k ] ) :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] + 1 )\n                else :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] - cps [ i + 1 ] [ k - 1 ] )\n            idx_c7m2 = idx_c7m2 + 1\n        idx_1sl3 = idx_1sl3 + 1\n    return cps [ 0 ] [ N - 1 ]\n    var_kw3 = 87", "id": "Add_IndependentVar_sample_from_COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_to_52", "old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING"}
{"code": "def countDecodingDP ( digits , n ) :\n    count = [ 0 ] * ( n + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    if digits [ 0 ] == '0' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return 0\n    var_ux5 = 56\n    idx_iun1 = 0\n    list_ch6z = range ( 2 , n + 1 )\n    while idx_iun1 < len(list_ch6z):\n        i = list_ch6z[idx_iun1]\n        count [ i ] = 0\n        if ( digits [ i - 1 ] > '0' ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            count [ i ] = count [ i - 1 ]\n        if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == '2' and digits [ i - 1 ] < '7' ) ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            count [ i ] += count [ i - 2 ]\n        idx_iun1 = idx_iun1 + 1\n    return count [ n ]", "id": "Add_IndependentVar_sample_from_COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1_to_53", "old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1"}
{"code": "def countRotations ( n ) :\n    l = len ( n )\n    var_elr = 78\n    if ( l == 1 ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        oneDigit = ( int ) ( n [ 0 ] )\n        if ( oneDigit % 4 == 0 ) :\n            return 1\n        return 0\n    count = 0\n    idx_zofx = 0\n    list_706a = range ( 0 , l - 1 )\n    while idx_zofx < len(list_706a):\n        i = list_706a[idx_zofx]\n        twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i + 1 ] )\n        if ( twoDigit % 4 == 0 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            count = count + 1\n        idx_zofx = idx_zofx + 1\n    twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 ] )\n    if ( twoDigit % 4 == 0 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        count = count + 1\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_ROTATIONS_DIVISIBLE_4_to_54", "old_id": "COUNT_ROTATIONS_DIVISIBLE_4"}
{"code": "def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    var_nic = 3\n    threeDigit = 0\n    idx_i70g = 0\n    list_ecgs = range ( 0 , ( l - 2 ) )\n    while idx_i70g < len(list_ecgs):\n        i = list_ecgs[idx_i70g]\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            count += 1\n        idx_i70g = idx_i70g + 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        count += 1\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_ROTATIONS_DIVISIBLE_8_to_55", "old_id": "COUNT_ROTATIONS_DIVISIBLE_8"}
{"code": "def sortedCount ( mat , r , c ) :\n    result = 0\n    var_f9s = 95\n    idx_j45a = 0\n    list_4ynt = range ( r )\n    while idx_j45a < len(list_4ynt):\n        i = list_4ynt[idx_j45a]\n        j = 0\n        idx_bwvo = 0\n        list_co8b = range ( c - 1 )\n        while idx_bwvo < len(list_co8b):\n            j = list_co8b[idx_bwvo]\n            if mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n                break\n            idx_bwvo = idx_bwvo + 1\n        if j == c - 2 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            result += 1\n        idx_j45a = idx_j45a + 1\n    idx_h9uo = 0\n    list_mro2 = range ( 0 , r )\n    while idx_h9uo < len(list_mro2):\n        i = list_mro2[idx_h9uo]\n        j = 0\n        idx_dt1q = 0\n        list_v3o4 = range ( c - 1 , 0 , - 1 )\n        while idx_dt1q < len(list_v3o4):\n            j = list_v3o4[idx_dt1q]\n            if mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n                break\n            idx_dt1q = idx_dt1q + 1\n        if c > 1 and j == 1 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            result += 1\n        idx_h9uo = idx_h9uo + 1\n    return result", "id": "Add_IndependentVar_sample_from_COUNT_SORTED_ROWS_MATRIX_to_56", "old_id": "COUNT_SORTED_ROWS_MATRIX"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = 0\n    ans = 0\n    hash_positive = [ 0 ] * ( n + 1 )\n    var_sbk = 11\n    hash_negative = [ 0 ] * ( n + 1 )\n    hash_positive [ 0 ] = 1\n    idx_p5h9 = 0\n    list_ygtr = range ( n )\n    while idx_p5h9 < len(list_ygtr):\n        i = list_ygtr[idx_p5h9]\n        if ( arr [ i ] & 1 == 1 ) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            difference = difference + 1\n        else :\n            difference = difference - 1\n        if ( difference < 0 ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = hash_negative [ - difference ] + 1\n        else :\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = hash_positive [ difference ] + 1\n        idx_p5h9 = idx_p5h9 + 1\n    return ans", "id": "Add_IndependentVar_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_57", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSubstringWithEqualEnds ( s ) :\n    result = 0\n    n = len ( s )\n    idx_1x8z = 0\n    list_trlw = range ( n )\n    var_vfq = 87\n    while idx_1x8z < len(list_trlw):\n        i = list_trlw[idx_1x8z]\n        idx_1k5w = 0\n        list_1k7c = range ( i , n )\n        while idx_1k5w < len(list_1k7c):\n            j = list_1k7c[idx_1k5w]\n            if ( s [ i ] == s [ j ] ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n                result = result + 1\n            idx_1k5w = idx_1k5w + 1\n        idx_1x8z = idx_1x8z + 1\n    return result", "id": "Add_IndependentVar_sample_from_COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_to_58", "old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS"}
{"code": "def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        idx_l401 = 0\n        list_e8dy = range ( 0 , n + 1 )\n        while idx_l401 < len(list_e8dy):\n            j = list_e8dy[idx_l401]\n            ans += k\n            if change == 1 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n            idx_l401 = idx_l401 + 1\n        i += 1\n    return ans\n    var_ftg = 98", "id": "Add_IndependentVar_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_59", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def countWords ( str , n ) :\n    m = dict ( )\n    var_q7d = 4\n    idx_l4m2 = 0\n    list_jxdg = range ( n )\n    while idx_l4m2 < len(list_jxdg):\n        i = list_jxdg[idx_l4m2]\n        m [ str [ i ] ] = m.get ( str [ i ] , 0 ) + 1\n        idx_l4m2 = idx_l4m2 + 1\n    res = 0\n    idx_7gc5 = 0\n    list_07ya = m.values ( )\n    while idx_7gc5 < len(list_07ya):\n        i = list_07ya[idx_7gc5]\n        if i == 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            res += 1\n        idx_7gc5 = idx_7gc5 + 1\n    return res", "id": "Add_IndependentVar_sample_from_COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS_to_60", "old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS"}
{"code": "def countWords ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return count\n    if ( str [ 0 ] == str [ 1 ] ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        count *= 1\n    else :\n        count *= 2\n    idx_si29 = 0\n    list_teuc = range ( 1 , len - 1 )\n    var_og8 = 81\n    while idx_si29 < len(list_teuc):\n        j = list_teuc[idx_si29]\n        if ( str [ j ] == str [ j - 1 ] and str [ j ] == str [ j + 1 ] ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            count *= 1\n        elif ( str [ j ] == str [ j - 1 ] or str [ j ] == str [ j + 1 ] or str [ j - 1 ] == str [ j + 1 ] ) :\n            count *= 2\n        else :\n            count *= 3\n        idx_si29 = idx_si29 + 1\n    if ( str [ len - 1 ] == str [ len - 2 ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        count *= 1\n    else :\n        count *= 2\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_61", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = 256\n    count = [ 0 ] * NO_OF_CHARS\n    idx_qb6d = 0\n    list_16ze = range ( len ( str ) )\n    var_72o = 0\n    while idx_qb6d < len(list_16ze):\n        i = list_16ze[idx_qb6d]\n        count [ ord ( str [ i ] ) ] += 1\n        idx_qb6d = idx_qb6d + 1\n    first , second = 0 , 0\n    idx_djlq = 0\n    list_k1l7 = range ( NO_OF_CHARS )\n    while idx_djlq < len(list_k1l7):\n        i = list_k1l7[idx_djlq]\n        if count [ i ] > count [ first ] and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n        idx_djlq = idx_djlq + 1\n    return chr ( second )", "id": "Add_IndependentVar_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_62", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decode ( Str ) :\n    integerstack = [ ]\n    var_n2o = 1\n    stringstack = [ ]\n    temp = \"\"\n    result = \"\"\n    idx_cjqt = 0\n    list_ubqj = range ( len ( Str ) )\n    while idx_cjqt < len(list_ubqj):\n        i = list_ubqj[idx_cjqt]\n        count = 0\n        if ( Str [ i ] >= '0' and Str [ i ] <= '9' ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = count * 10 + ord ( Str [ i ] ) - ord ( '0' )\n                i += 1\n            i -= 1\n            integerstack.append ( count )\n        elif ( Str [ i ] == ']' ) :\n            temp = \"\"\n            count = 0\n            if ( len ( integerstack ) != 0 ) :\n                count = integerstack [ - 1 ]\n                integerstack.pop ( )\n            while ( len ( stringstack ) != 0 and stringstack [ - 1 ] != '[' ) :\n                temp = stringstack [ - 1 ] + temp\n                stringstack.pop ( )\n            if ( len ( stringstack ) != 0 and stringstack [ - 1 ] == '[' ) :\n                stringstack.pop ( )\n            idx_opqe = 0\n            list_prf1 = range ( count )\n            while idx_opqe < len(list_prf1):\n                j = list_prf1[idx_opqe]\n                result = result + temp\n                idx_opqe = idx_opqe + 1\n            idx_um1g = 0\n            list_w4vc = range ( len ( result ) )\n            while idx_um1g < len(list_w4vc):\n                j = list_w4vc[idx_um1g]\n                stringstack.append ( result [ j ] )\n                idx_um1g = idx_um1g + 1\n            result = \"\"\n        elif ( Str [ i ] == '[' ) :\n            if ( Str [ i - 1 ] >= '0' and Str [ i - 1 ] <= '9' ) :\n                stringstack.append ( Str [ i ] )\n            else :\n                stringstack.append ( Str [ i ] )\n                integerstack.append ( 1 )\n        else :\n            stringstack.append ( Str [ i ] )\n        idx_cjqt = idx_cjqt + 1\n    while len ( stringstack ) != 0 :\n        result = stringstack [ - 1 ] + result\n        stringstack.pop ( )\n    return result", "id": "Add_IndependentVar_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_63", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def isDDM ( m , n ) :\n    idx_jbe0 = 0\n    list_batu = range ( 0 , n )\n    while idx_jbe0 < len(list_batu):\n        i = list_batu[idx_jbe0]\n        sum = 0\n        idx_e61x = 0\n        list_8c4g = range ( 0 , n )\n        while idx_e61x < len(list_8c4g):\n            j = list_8c4g[idx_e61x]\n            sum = sum + abs ( m [ i ] [ j ] )\n            idx_e61x = idx_e61x + 1\n        sum = sum - abs ( m [ i ] [ i ] )\n        if ( abs ( m [ i ] [ i ] ) < sum ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return False\n        idx_jbe0 = idx_jbe0 + 1\n    return True\n    var_wa2 = 1", "id": "Add_IndependentVar_sample_from_DIAGONALLY_DOMINANT_MATRIX_to_64", "old_id": "DIAGONALLY_DOMINANT_MATRIX"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = 0\n    max_count = 0\n    min_count = n\n    idx_xb1w = 0\n    list_fsrz = range ( 0 , ( n - 1 ) )\n    while idx_xb1w < len(list_fsrz):\n        i = list_fsrz[idx_xb1w]\n        if arr [ i ] == arr [ i + 1 ] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            count += 1\n            continue\n        else :\n            max_count = max ( max_count , count )\n            min_count = min ( min_count , count )\n            count = 0\n        idx_xb1w = idx_xb1w + 1\n    return max_count - min_count\n    var_eft = 60", "id": "Add_IndependentVar_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_65", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def numberofways ( n , m ) :\n    dp = np.zeros ( ( n + 2 , n + 2 ) )\n    dp [ 0 ] [ n + 1 ] = 1\n    idx_v30e = 0\n    list_9j08 = range ( n , m - 1 , - 1 )\n    while idx_v30e < len(list_9j08):\n        k = list_9j08[idx_v30e]\n        idx_7xyw = 0\n        list_xa2z = range ( n + 1 )\n        while idx_7xyw < len(list_xa2z):\n            i = list_xa2z[idx_7xyw]\n            dp [ i ] [ k ] = dp [ i ] [ k + 1 ]\n            if ( i - k >= 0 ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] )\n            idx_7xyw = idx_7xyw + 1\n        idx_v30e = idx_v30e + 1\n    var_1bp = 80\n    return dp [ n ] [ m ]", "id": "Add_IndependentVar_sample_from_DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M_to_66", "old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M"}
{"code": "def discreteLogarithm ( a , b , m ) :\n    n = int ( math.sqrt ( m ) + 1 )\n    an = 1\n    idx_umyq = 0\n    list_4x0s = range ( n )\n    while idx_umyq < len(list_4x0s):\n        i = list_4x0s[idx_umyq]\n        an = ( an * a ) % m\n        idx_umyq = idx_umyq + 1\n    var_i9b = 99\n    value = [ 0 ] * m\n    cur = an\n    idx_47nb = 0\n    list_pgqf = range ( 1 , n + 1 )\n    while idx_47nb < len(list_pgqf):\n        i = list_pgqf[idx_47nb]\n        if ( value [ cur ] == 0 ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            value [ cur ] = i\n        cur = ( cur * an ) % m\n        idx_47nb = idx_47nb + 1\n    cur = b\n    idx_wutz = 0\n    list_lniz = range ( n + 1 )\n    while idx_wutz < len(list_lniz):\n        i = list_lniz[idx_wutz]\n        if ( value [ cur ] > 0 ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            ans = value [ cur ] * n - i\n            if ( ans < m ) :\n                return ans\n        cur = ( cur * a ) % m\n        idx_wutz = idx_wutz + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B_to_67", "old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B"}
{"code": "def checkCount ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_atfe = 0\n    var_4lu = 61\n    list_vz6j = range ( n )\n    while idx_atfe < len(list_vz6j):\n        i = list_vz6j[idx_atfe]\n        mp [ arr [ i ] ] += 1\n        idx_atfe = idx_atfe + 1\n    idx_yafv = 0\n    list_ukpe = list(mp.items ( ))\n    while idx_yafv < len(list_ukpe):\n        key , values = list_ukpe[idx_yafv]\n        if values > 2 * k and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            return False\n        idx_yafv = idx_yafv + 1\n    return True", "id": "Add_IndependentVar_sample_from_DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1_to_68", "old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1"}
{"code": "def isDvisibleBy12 ( num ) :\n    if ( len ( num ) >= 3 ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        d1 = int ( num [ len ( num ) - 1 ] )\n        if ( d1 % 2 != 0 ) :\n            return False\n        d2 = int ( num [ len ( num ) - 2 ] )\n        sum = 0\n        idx_5cf1 = 0\n        list_cvi5 = range ( 0 , len ( num ) )\n        while idx_5cf1 < len(list_cvi5):\n            i = list_cvi5[idx_5cf1]\n            sum += int ( num [ i ] )\n            idx_5cf1 = idx_5cf1 + 1\n        return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 )\n    else :\n        number = int ( num )\n        return ( number % 12 == 0 )\n    var_h4j = 57", "id": "Add_IndependentVar_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_69", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def doublefactorial ( n ) :\n    res = 1\n    idx_1zpr = 0\n    list_cma4 = range ( n , - 1 , - 2 )\n    var_wez = 61\n    while idx_1zpr < len(list_cma4):\n        i = list_cma4[idx_1zpr]\n        if ( i == 0 or i == 1 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return res\n        else :\n            res *= i\n        idx_1zpr = idx_1zpr + 1\n    return res;", "id": "Add_IndependentVar_sample_from_DOUBLE_FACTORIAL_1_to_70", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def eggDrop ( n , k ) :\n    eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in range ( n + 1 ) ]\n    idx_pjos = 0\n    list_zcg4 = range ( 1 , n + 1 )\n    while idx_pjos < len(list_zcg4):\n        i = list_zcg4[idx_pjos]\n        eggFloor [ i ] [ 1 ] = 1\n        eggFloor [ i ] [ 0 ] = 0\n        idx_pjos = idx_pjos + 1\n    idx_zl0j = 0\n    list_qi8l = range ( 1 , k + 1 )\n    while idx_zl0j < len(list_qi8l):\n        j = list_qi8l[idx_zl0j]\n        eggFloor [ 1 ] [ j ] = j\n        idx_zl0j = idx_zl0j + 1\n    idx_x2t1 = 0\n    list_naum = range ( 2 , n + 1 )\n    while idx_x2t1 < len(list_naum):\n        i = list_naum[idx_x2t1]\n        idx_mhyk = 0\n        list_243b = range ( 2 , k + 1 )\n        while idx_mhyk < len(list_243b):\n            j = list_243b[idx_mhyk]\n            eggFloor [ i ] [ j ] = INT_MAX\n            idx_bsdx = 0\n            list_mazf = range ( 1 , j + 1 )\n            while idx_bsdx < len(list_mazf):\n                x = list_mazf[idx_bsdx]\n                res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] )\n                if res < eggFloor [ i ] [ j ] and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n                    eggFloor [ i ] [ j ] = res\n                idx_bsdx = idx_bsdx + 1\n            idx_mhyk = idx_mhyk + 1\n        idx_x2t1 = idx_x2t1 + 1\n    return eggFloor [ n ] [ k ]\n    var_e0r = 55", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1_to_71", "old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1"}
{"code": "def lps ( seq ) :\n    n = len ( seq )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    var_itq = 11\n    idx_27ti = 0\n    list_n63u = range ( n )\n    while idx_27ti < len(list_n63u):\n        i = list_n63u[idx_27ti]\n        L [ i ] [ i ] = 1\n        idx_27ti = idx_27ti + 1\n    idx_ocr7 = 0\n    list_wqgb = range ( 2 , n + 1 )\n    while idx_ocr7 < len(list_wqgb):\n        cl = list_wqgb[idx_ocr7]\n        idx_isne = 0\n        list_bczf = range ( n - cl + 1 )\n        while idx_isne < len(list_bczf):\n            i = list_bczf[idx_isne]\n            j = i + cl - 1\n            if seq [ i ] == seq [ j ] and cl == 2 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n                L [ i ] [ j ] = 2\n            elif seq [ i ] == seq [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n            idx_isne = idx_isne + 1\n        idx_ocr7 = idx_ocr7 + 1\n    return L [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_72", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def maxSumIS ( arr , n ) :\n    max = 0\n    msis = [ 0 for x in range ( n ) ]\n    idx_h4g8 = 0\n    list_9agw = range ( n )\n    while idx_h4g8 < len(list_9agw):\n        i = list_9agw[idx_h4g8]\n        msis [ i ] = arr [ i ]\n        idx_h4g8 = idx_h4g8 + 1\n    idx_gta1 = 0\n    list_9c8d = range ( 1 , n )\n    while idx_gta1 < len(list_9c8d):\n        i = list_9c8d[idx_gta1]\n        idx_1gvz = 0\n        list_k3rj = range ( i )\n        while idx_1gvz < len(list_k3rj):\n            j = list_k3rj[idx_1gvz]\n            if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                msis [ i ] = msis [ j ] + arr [ i ]\n            idx_1gvz = idx_1gvz + 1\n        idx_gta1 = idx_gta1 + 1\n    idx_f1ts = 0\n    list_jxvi = range ( n )\n    while idx_f1ts < len(list_jxvi):\n        i = list_jxvi[idx_f1ts]\n        if max < msis [ i ] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            max = msis [ i ]\n        idx_f1ts = idx_f1ts + 1\n    var_3v6 = 62\n    return max", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE_to_73", "old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE"}
{"code": "def lbs ( arr , n ) :\n    lis = [ 1 for i in range ( n + 1 ) ]\n    idx_k1ga = 0\n    list_wiqf = range ( 1 , n )\n    while idx_k1ga < len(list_wiqf):\n        i = list_wiqf[idx_k1ga]\n        idx_5qz3 = 0\n        list_pzni = range ( 0 , i )\n        while idx_5qz3 < len(list_pzni):\n            j = list_pzni[idx_5qz3]\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                lis [ i ] = lis [ j ] + 1\n            idx_5qz3 = idx_5qz3 + 1\n        idx_k1ga = idx_k1ga + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    idx_cql8 = 0\n    var_2fn = 27\n    list_vfrj = reversed ( range ( n - 1 ) )\n    while idx_cql8 < len(list_vfrj):\n        i = list_vfrj[idx_cql8]\n        idx_cp1j = 0\n        list_mb6w = reversed ( range ( i - 1 , n ) )\n        while idx_cp1j < len(list_mb6w):\n            j = list_mb6w[idx_cp1j]\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n                lds [ i ] = lds [ j ] + 1\n            idx_cp1j = idx_cp1j + 1\n        idx_cql8 = idx_cql8 + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    idx_u6kn = 0\n    list_t6v8 = range ( 1 , n )\n    while idx_u6kn < len(list_t6v8):\n        i = list_t6v8[idx_u6kn]\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n        idx_u6kn = idx_u6kn + 1\n    return maximum", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE_to_74", "old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    idx_2u8j = 0\n    list_pt57 = range ( n )\n    while idx_2u8j < len(list_pt57):\n        i = list_pt57[idx_2u8j]\n        P [ i ] [ i ] = True\n        C [ i ] [ i ] = 0\n        idx_2u8j = idx_2u8j + 1\n    idx_l2rx = 0\n    list_q9b3 = range ( 2 , n + 1 )\n    while idx_l2rx < len(list_q9b3):\n        L = list_q9b3[idx_l2rx]\n        idx_zk7y = 0\n        list_2qoi = range ( n - L + 1 )\n        while idx_zk7y < len(list_2qoi):\n            i = list_2qoi[idx_zk7y]\n            j = i + L - 1\n            if L == 2 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                idx_nt28 = 0\n                list_o0cs = range ( i , j )\n                while idx_nt28 < len(list_o0cs):\n                    k = list_o0cs[idx_nt28]\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n                    idx_nt28 = idx_nt28 + 1\n            idx_zk7y = idx_zk7y + 1\n        idx_l2rx = idx_l2rx + 1\n    var_9tf = 15\n    return C [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_75", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    var_lqi = 0\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    idx_v7rd = 0\n    list_3m4j = range ( n )\n    while idx_v7rd < len(list_3m4j):\n        i = list_3m4j[idx_v7rd]\n        if symb [ i ] == 'F' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            F [ i ] [ i ] = 1\n        else :\n            F [ i ] [ i ] = 0\n        if symb [ i ] == 'T' and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            T [ i ] [ i ] = 1\n        else :\n            T [ i ] [ i ] = 0\n        idx_v7rd = idx_v7rd + 1\n    idx_j0ih = 0\n    list_25fm = range ( 1 , n )\n    while idx_j0ih < len(list_25fm):\n        gap = list_25fm[idx_j0ih]\n        i = 0\n        idx_9zmv = 0\n        list_i3rn = range ( gap , n )\n        while idx_9zmv < len(list_i3rn):\n            j = list_i3rn[idx_9zmv]\n            T [ i ] [ j ] = F [ i ] [ j ] = 0\n            idx_do4e = 0\n            list_qdvp = range ( gap )\n            while idx_do4e < len(list_qdvp):\n                g = list_qdvp[idx_do4e]\n                k = i + g\n                tik = T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ]\n                if oper [ k ] == '&' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] )\n                if oper [ k ] == '|' and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                if oper [ k ] == '^' and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + 1 ] [ j ] + T [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + 1 ] [ j ] + F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                idx_do4e = idx_do4e + 1\n            i += 1\n            idx_9zmv = idx_9zmv + 1\n        idx_j0ih = idx_j0ih + 1\n    return T [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_76", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def lis ( arr , n) :\n    lis = [ 1 ] * n\n    idx_tn8v = 0\n    list_upse = range ( 1 , n )\n    while idx_tn8v < len(list_upse):\n        i = list_upse[idx_tn8v]\n        idx_6ojc = 0\n        list_nxjs = range ( 0 , i )\n        while idx_6ojc < len(list_nxjs):\n            j = list_nxjs[idx_6ojc]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                lis [ i ] = lis [ j ] + 1\n            idx_6ojc = idx_6ojc + 1\n        idx_tn8v = idx_tn8v + 1\n    maximum = 0\n    idx_4x1a = 0\n    var_ni5 = 44\n    list_i5e2 = range ( n )\n    while idx_4x1a < len(list_i5e2):\n        i = list_i5e2[idx_4x1a]\n        maximum = max ( maximum , lis [ i ] )\n        idx_4x1a = idx_4x1a + 1\n    return maximum", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1_to_77", "old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def MatrixChainOrder ( p , i , j ) :\n    if i == j and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        return 0\n    _min = sys.maxsize\n    var_29f = 66\n    idx_0n8c = 0\n    list_1z95 = range ( i , j )\n    while idx_0n8c < len(list_1z95):\n        k = list_1z95[idx_0n8c]\n        count = ( MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] )\n        if count < _min and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            _min = count\n        idx_0n8c = idx_0n8c + 1\n    return _min", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION_to_78", "old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION"}
{"code": "def isSubsetSum ( set , n , sum ) :\n    subset = ( [ [ False for i in range ( sum + 1 ) ] for i in range ( n + 1 ) ] )\n    idx_lmw3 = 0\n    list_wxuj = range ( n + 1 )\n    while idx_lmw3 < len(list_wxuj):\n        i = list_wxuj[idx_lmw3]\n        subset [ i ] [ 0 ] = True\n        idx_lmw3 = idx_lmw3 + 1\n    idx_2rfn = 0\n    list_xq1a = range ( 1 , sum + 1 )\n    while idx_2rfn < len(list_xq1a):\n        i = list_xq1a[idx_2rfn]\n        subset [ 0 ] [ i ] = False\n        idx_2rfn = idx_2rfn + 1\n    idx_4oji = 0\n    list_stxi = range ( 1 , n + 1 )\n    while idx_4oji < len(list_stxi):\n        i = list_stxi[idx_4oji]\n        idx_w8ox = 0\n        list_og1l = range ( 1 , sum + 1 )\n        while idx_w8ox < len(list_og1l):\n            j = list_og1l[idx_w8ox]\n            if j < set [ i - 1 ] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                subset [ i ] [ j ] = subset [ i - 1 ] [ j ]\n            if j >= set [ i - 1 ] and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n                subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] or subset [ i - 1 ] [ j - set [ i - 1 ] ] )\n            idx_w8ox = idx_w8ox + 1\n        idx_4oji = idx_4oji + 1\n    var_v6c = 83\n    return subset [ n ] [ sum ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1_to_79", "old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1"}
{"code": "def countNum ( arr , n ) :\n    count = 0\n    arr = arr[:n]\n    arr.sort ( )\n    idx_4l7y = 0\n    list_r8c7 = range ( 0 , n - 1 )\n    while idx_4l7y < len(list_r8c7):\n        i = list_r8c7[idx_4l7y]\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            count += arr [ i + 1 ] - arr [ i ] - 1\n        idx_4l7y = idx_4l7y + 1\n    var_sjd = 71\n    return count", "id": "Add_IndependentVar_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_to_80", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY"}
{"code": "def countNum ( arr , n ) :\n    s = dict ( )\n    var_9sr = 60\n    count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9\n    idx_wzry = 0\n    list_avq5 = range ( n )\n    while idx_wzry < len(list_avq5):\n        i = list_avq5[idx_wzry]\n        s [ arr [ i ] ] = 1\n        if ( arr [ i ] < minm ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            minm = arr [ i ]\n        if ( arr [ i ] > maxm ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            maxm = arr [ i ]\n        idx_wzry = idx_wzry + 1\n    idx_cvbq = 0\n    list_xlgp = range ( minm , maxm + 1 )\n    while idx_cvbq < len(list_xlgp):\n        i = list_xlgp[idx_cvbq]\n        if i not in s.keys ( ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            count += 1\n        idx_cvbq = idx_cvbq + 1\n    return count", "id": "Add_IndependentVar_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1_to_81", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1"}
{"code": "def equilibrium ( arr , n) :\n    leftsum = 0\n    var_coy = 39\n    rightsum = 0\n    idx_wj1y = 0\n    list_vglc = range ( n )\n    while idx_wj1y < len(list_vglc):\n        i = list_vglc[idx_wj1y]\n        leftsum = 0\n        rightsum = 0\n        idx_fqdt = 0\n        list_ynf8 = range ( i )\n        while idx_fqdt < len(list_ynf8):\n            j = list_ynf8[idx_fqdt]\n            leftsum += arr [ j ]\n            idx_fqdt = idx_fqdt + 1\n        idx_z8rv = 0\n        list_0fne = range ( i + 1 , n )\n        while idx_z8rv < len(list_0fne):\n            j = list_0fne[idx_z8rv]\n            rightsum += arr [ j ]\n            idx_z8rv = idx_z8rv + 1\n        if leftsum == rightsum and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            return i\n        idx_wj1y = idx_wj1y + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_to_82", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY"}
{"code": "def equilibrium ( arr ,n) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    idx_xajf = 0\n    list_bel5 = list(enumerate ( arr ))\n    while idx_xajf < len(list_bel5):\n        i , num = list_bel5[idx_xajf]\n        total_sum -= num\n        if leftsum == total_sum and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            return i\n        leftsum += num\n        idx_xajf = idx_xajf + 1\n    return - 1\n    var_nor = 75", "id": "Add_IndependentVar_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_1_to_83", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1"}
{"code": "def squareRootExists ( n , p ) :\n    n = n % p\n    idx_smgr = 0\n    list_dy5s = range ( 2 , p , 1 )\n    var_12u = 0\n    while idx_smgr < len(list_dy5s):\n        x = list_dy5s[idx_smgr]\n        if ( ( x * x ) % p == n ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            return True\n        idx_smgr = idx_smgr + 1\n    return False", "id": "Add_IndependentVar_sample_from_EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS_to_84", "old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS"}
{"code": "def maxHamming ( arr , n ) :\n    brr = [ 0 ] * ( 2 * n + 1 )\n    idx_64an = 0\n    list_obx2 = range ( n )\n    while idx_64an < len(list_obx2):\n        i = list_obx2[idx_64an]\n        brr [ i ] = arr [ i ]\n        idx_64an = idx_64an + 1\n    idx_t2q9 = 0\n    list_hwdq = range ( n )\n    while idx_t2q9 < len(list_hwdq):\n        i = list_hwdq[idx_t2q9]\n        brr [ n + i ] = arr [ i ]\n        idx_t2q9 = idx_t2q9 + 1\n    maxHam = 0\n    var_7g1 = 51\n    idx_s5lh = 0\n    list_xsbv = range ( 1 , n )\n    while idx_s5lh < len(list_xsbv):\n        i = list_xsbv[idx_s5lh]\n        currHam = 0\n        k = 0\n        idx_fgy8 = 0\n        list_dec4 = range ( i , i + n )\n        while idx_fgy8 < len(list_dec4):\n            j = list_dec4[idx_fgy8]\n            if brr [ j ] != arr [ k ] and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                currHam += 1\n                k = k + 1\n            idx_fgy8 = idx_fgy8 + 1\n        if currHam == n and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return n\n        maxHam = max ( maxHam , currHam )\n        idx_s5lh = idx_s5lh + 1\n    return maxHam", "id": "Add_IndependentVar_sample_from_FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE_to_85", "old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE"}
{"code": "def find3Numbers ( A , arr_size , sum ) :\n    idx_ilk0 = 0\n    list_flq5 = range ( 0 , arr_size - 2 )\n    while idx_ilk0 < len(list_flq5):\n        i = list_flq5[idx_ilk0]\n        idx_gzfw = 0\n        list_xd34 = range ( i + 1 , arr_size - 1 )\n        while idx_gzfw < len(list_xd34):\n            j = list_xd34[idx_gzfw]\n            idx_sxe8 = 0\n            list_hebr = range ( j + 1 , arr_size )\n            while idx_sxe8 < len(list_hebr):\n                k = list_hebr[idx_sxe8]\n                if A [ i ] + A [ j ] + A [ k ] == sum and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n                    print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , A [ k ] )\n                    return True\n                idx_sxe8 = idx_sxe8 + 1\n            idx_gzfw = idx_gzfw + 1\n        idx_ilk0 = idx_ilk0 + 1\n    return False\n    var_mu5 = 61", "id": "Add_IndependentVar_sample_from_FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_to_86", "old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = [ ]\n    idx_ncyd = 0\n    list_jvhx = string\n    while idx_ncyd < len(list_jvhx):\n        ch = list_jvhx[idx_ncyd]\n        if ch == ')' and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            top = Stack.pop ( )\n            elementsInside = 0\n            while top != '(' :\n                elementsInside += 1\n                top = Stack.pop ( )\n            if elementsInside < 1 :\n                return True\n        else :\n            Stack.append ( ch )\n        idx_ncyd = idx_ncyd + 1\n    return False\n    var_r83 = 94", "id": "Add_IndependentVar_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_87", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def firstFactorialDivisibleNumber ( x ) :\n    i = 1\n    fact = 1\n    idx_15ue = 0\n    list_7i4s = range ( 1 , x )\n    var_nqv = 34\n    while idx_15ue < len(list_7i4s):\n        i = list_7i4s[idx_15ue]\n        fact = fact * i\n        if ( fact % x == 0 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            break\n        idx_15ue = idx_15ue + 1\n    return i", "id": "Add_IndependentVar_sample_from_FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X_to_88", "old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X"}
{"code": "def findExtra ( arr1 , arr2 , n ) :\n    idx_x7de = 0\n    list_1rg4 = range ( 0 , n )\n    while idx_x7de < len(list_1rg4):\n        i = list_1rg4[idx_x7de]\n        if ( arr1 [ i ] != arr2 [ i ] ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return i\n        idx_x7de = idx_x7de + 1\n    return n\n    var_exa = 99", "id": "Add_IndependentVar_sample_from_FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_to_89", "old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY"}
{"code": "def findLargestd ( S , n ) :\n    found = False\n    S = S[:n]\n    S.sort ( )\n    idx_82p1 = 0\n    list_1okb = range ( n - 1 , - 1 , - 1 )\n    var_4rl = 85\n    while idx_82p1 < len(list_1okb):\n        i = list_1okb[idx_82p1]\n        idx_uiop = 0\n        list_prnx = range ( 0 , n )\n        while idx_uiop < len(list_prnx):\n            j = list_prnx[idx_uiop]\n            if ( i == j ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                continue\n            idx_1bjg = 0\n            list_6n2o = range ( j + 1 , n )\n            while idx_1bjg < len(list_6n2o):\n                k = list_6n2o[idx_1bjg]\n                if ( i == k ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                    continue\n                idx_v4jb = 0\n                list_4hay = range ( k + 1 , n )\n                while idx_v4jb < len(list_4hay):\n                    l = list_4hay[idx_v4jb]\n                    if ( i == l ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                        found = True\n                        return S [ i ]\n                    idx_v4jb = idx_v4jb + 1\n                idx_1bjg = idx_1bjg + 1\n            idx_uiop = idx_uiop + 1\n        idx_82p1 = idx_82p1 + 1\n    if ( found == False ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        return - 1", "id": "Add_IndependentVar_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_to_90", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D"}
{"code": "def findFourElements ( arr , n ) :\n    mp = dict ( )\n    idx_24bl = 0\n    var_guz = 1\n    list_0qjg = range ( n - 1 )\n    while idx_24bl < len(list_0qjg):\n        i = list_0qjg[idx_24bl]\n        idx_zn1u = 0\n        list_7irk = range ( i + 1 , n )\n        while idx_zn1u < len(list_7irk):\n            j = list_7irk[idx_zn1u]\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n            idx_zn1u = idx_zn1u + 1\n        idx_24bl = idx_24bl + 1\n    d = - 10 ** 9\n    idx_wrtq = 0\n    list_ksl9 = range ( n - 1 )\n    while idx_wrtq < len(list_ksl9):\n        i = list_ksl9[idx_wrtq]\n        idx_qsu8 = 0\n        list_9ej6 = range ( i + 1 , n )\n        while idx_qsu8 < len(list_9ej6):\n            j = list_9ej6[idx_qsu8]\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                p = mp [ abs_diff ]\n                if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1 ] != i and p [ 1 ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n            idx_qsu8 = idx_qsu8 + 1\n        idx_wrtq = idx_wrtq + 1\n    return d", "id": "Add_IndependentVar_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1_to_91", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1"}
{"code": "def maxPrimeFactors ( n ) :\n    maxPrime = - 1\n    var_5h2 = 34\n    while n % 2 == 0 :\n        maxPrime = 2\n        n >>= 1\n    idx_ky4t = 0\n    list_06o8 = range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 )\n    while idx_ky4t < len(list_06o8):\n        i = list_06o8[idx_ky4t]\n        while n % i == 0 :\n            maxPrime = i\n            n = n / i\n        idx_ky4t = idx_ky4t + 1\n    if n > 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        maxPrime = n\n    return int ( maxPrime )", "id": "Add_IndependentVar_sample_from_FIND_LARGEST_PRIME_FACTOR_NUMBER_to_92", "old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = 1\n    var_gn6 = 42\n    if ( A == B ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        return 1\n    elif ( ( B - A ) >= 5 ) :\n        return 0\n    else :\n        idx_pofc = 0\n        list_8d5s = range ( A + 1 , B + 1 )\n        while idx_pofc < len(list_8d5s):\n            i = list_8d5s[idx_pofc]\n            variable = ( variable * ( i % 10 ) ) % 10\n            idx_pofc = idx_pofc + 1\n        return variable % 10", "id": "Add_IndependentVar_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_93", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if k > n and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        return - 1\n    var_scq = 61\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    idx_093p = 0\n    list_0p4d = range ( 1 , n )\n    while idx_093p < len(list_0p4d):\n        i = list_0p4d[idx_093p]\n        csum [ i ] = csum [ i - 1 ] + arr [ i ]\n        idx_093p = idx_093p + 1\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    idx_r3y9 = 0\n    list_4u9z = range ( k , n )\n    while idx_r3y9 < len(list_4u9z):\n        i = list_4u9z[idx_r3y9]\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            max_sum = curr_sum\n            max_end = i\n        idx_r3y9 = idx_r3y9 + 1\n    return max_end - k + 1", "id": "Add_IndependentVar_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_to_94", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return - 1\n    sum = arr [ 0 ]\n    idx_fkmb = 0\n    list_j4ki = range ( 1 , k )\n    while idx_fkmb < len(list_j4ki):\n        i = list_j4ki[idx_fkmb]\n        sum += arr [ i ]\n        idx_fkmb = idx_fkmb + 1\n    max_sum = sum\n    max_end = k - 1\n    idx_ens7 = 0\n    list_85kw = range ( k , n )\n    while idx_ens7 < len(list_85kw):\n        i = list_85kw[idx_ens7]\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            max_sum = sum\n            max_end = i\n        idx_ens7 = idx_ens7 + 1\n    var_snd = 41\n    return max_end - k + 1", "id": "Add_IndependentVar_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1_to_95", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1"}
{"code": "def maxProduct ( arr , n ) :\n    if n < 3 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return - 1\n    max_product = - ( sys.maxsize - 1 )\n    var_i1t = 75\n    idx_nlpo = 0\n    list_0zkj = range ( 0 , n - 2 )\n    while idx_nlpo < len(list_0zkj):\n        i = list_0zkj[idx_nlpo]\n        idx_iekj = 0\n        list_j91p = range ( i + 1 , n - 1 )\n        while idx_iekj < len(list_j91p):\n            j = list_j91p[idx_iekj]\n            idx_4a6x = 0\n            list_4a2e = range ( j + 1 , n )\n            while idx_4a6x < len(list_4a2e):\n                k = list_4a2e[idx_4a6x]\n                max_product = max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] )\n                idx_4a6x = idx_4a6x + 1\n            idx_iekj = idx_iekj + 1\n        idx_nlpo = idx_nlpo + 1\n    return max_product", "id": "Add_IndependentVar_sample_from_FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_to_96", "old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = 0 , 0 , 0\n    idx_v9t4 = 0\n    list_yplj = range ( n1 )\n    while idx_v9t4 < len(list_yplj):\n        i = list_yplj[idx_v9t4]\n        sum1 += stack1 [ i ]\n        idx_v9t4 = idx_v9t4 + 1\n    idx_6lkz = 0\n    list_ykz8 = range ( n2 )\n    while idx_6lkz < len(list_ykz8):\n        i = list_ykz8[idx_6lkz]\n        sum2 += stack2 [ i ]\n        idx_6lkz = idx_6lkz + 1\n    var_a8s = 24\n    idx_d42z = 0\n    list_wpqd = range ( n3 )\n    while idx_d42z < len(list_wpqd):\n        i = list_wpqd[idx_d42z]\n        sum3 += stack3 [ i ]\n        idx_d42z = idx_d42z + 1\n    top1 , top2 , top3 = 0 , 0 , 0\n    ans = 0\n    while ( 1 ) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            return 0\n        if ( sum1 == sum2 and sum2 == sum3 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return sum1\n        if ( sum1 >= sum2 and sum1 >= sum3 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            sum1 -= stack1 [ top1 ]\n            top1 = top1 + 1\n        elif ( sum2 >= sum3 and sum2 >= sum3 ) :\n            sum2 -= stack2 [ top2 ]\n            top2 = top2 + 1\n        elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n            sum3 -= stack3 [ top3 ]\n            top3 = top3 + 1", "id": "Add_IndependentVar_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_97", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = sys.maxsize\n    mx = - sys.maxsize - 1\n    idx_cnu3 = 0\n    list_27mo = range ( r )\n    while idx_cnu3 < len(list_27mo):\n        i = list_27mo[idx_cnu3]\n        if m [ i ] [ 0 ] < mi and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ c - 1 ] > mx and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            mx = m [ i ] [ c - 1 ]\n        idx_cnu3 = idx_cnu3 + 1\n    desired = ( r * c + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ]\n        idx_84mf = 0\n        list_8iag = range ( r )\n        while idx_84mf < len(list_8iag):\n            i = list_8iag[idx_84mf]\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n            idx_84mf = idx_84mf + 1\n        if place [ 0 ] < desired and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return mi\n    var_muv = 73", "id": "Add_IndependentVar_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_98", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    idx_2eji = 0\n    var_7lm = 46\n    list_9gxm = range ( n - 1 )\n    while idx_2eji < len(list_9gxm):\n        i = list_9gxm[idx_2eji]\n        idx_kjyo = 0\n        list_c3vx = range ( i + 1 , n )\n        while idx_kjyo < len(list_c3vx):\n            j = list_c3vx[idx_kjyo]\n            if abs ( arr [ i ] - arr [ j ] ) < diff and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                diff = abs ( arr [ i ] - arr [ j ] )\n            idx_kjyo = idx_kjyo + 1\n        idx_2eji = idx_2eji + 1\n    return diff", "id": "Add_IndependentVar_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_to_99", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR"}
{"code": "def findMinDiff ( arr , n ) :\n    arr = arr[:n]\n    arr = sorted ( arr )\n    diff = 10 ** 20\n    idx_r13n = 0\n    list_kty3 = range ( n - 1 )\n    var_nuj = 87\n    while idx_r13n < len(list_kty3):\n        i = list_kty3[idx_r13n]\n        if arr [ i + 1 ] - arr [ i ] < diff and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            diff = arr [ i + 1 ] - arr [ i ]\n        idx_r13n = idx_r13n + 1\n    return diff", "id": "Add_IndependentVar_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_1_to_100", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1"}
{"code": "def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        ans *= 2\n    idx_ave5 = 0\n    list_fsru = range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 )\n    while idx_ave5 < len(list_fsru):\n        i = list_fsru[idx_ave5]\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            ans *= i\n        idx_ave5 = idx_ave5 + 1\n    var_2y3 = 51\n    if n > 2 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        ans *= n\n    return ans", "id": "Add_IndependentVar_sample_from_FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE_to_101", "old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE"}
{"code": "def minCoins ( coins , m , V ) :\n    table = [ 0 for i in range ( V + 1 ) ]\n    table [ 0 ] = 0\n    idx_yz7u = 0\n    list_pmse = range ( 1 , V + 1 )\n    while idx_yz7u < len(list_pmse):\n        i = list_pmse[idx_yz7u]\n        table [ i ] = sys.maxsize\n        idx_yz7u = idx_yz7u + 1\n    idx_k6le = 0\n    list_hbk7 = range ( 1 , V + 1 )\n    while idx_k6le < len(list_hbk7):\n        i = list_hbk7[idx_k6le]\n        idx_07c4 = 0\n        list_ahjw = range ( m )\n        while idx_07c4 < len(list_ahjw):\n            j = list_ahjw[idx_07c4]\n            if ( coins [ j ] <= i ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                sub_res = table [ i - coins [ j ] ]\n                if ( sub_res != sys.maxsize and sub_res + 1 < table [ i ] ) :\n                    table [ i ] = sub_res + 1\n            idx_07c4 = idx_07c4 + 1\n        idx_k6le = idx_k6le + 1\n    var_x3u = 50\n    return table [ V ]", "id": "Add_IndependentVar_sample_from_FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1_to_102", "old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1"}
{"code": "def countEndless ( input , n ) :\n    row = np.zeros ( ( n , n ) )\n    col = np.zeros ( ( n , n ) )\n    idx_7qco = 0\n    list_w8of = range ( n )\n    while idx_7qco < len(list_w8of):\n        j = list_w8of[idx_7qco]\n        isEndless = 1\n        idx_e6s9 = 0\n        list_ev1g = range ( n - 1 , - 1 , - 1 )\n        while idx_e6s9 < len(list_ev1g):\n            i = list_ev1g[idx_e6s9]\n            if ( input [ i ] [ j ] == 0 ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                isEndless = 0\n            col [ i ] [ j ] = isEndless\n            idx_e6s9 = idx_e6s9 + 1\n        idx_7qco = idx_7qco + 1\n    idx_jhk4 = 0\n    list_t6ub = range ( n )\n    while idx_jhk4 < len(list_t6ub):\n        i = list_t6ub[idx_jhk4]\n        isEndless = 1\n        idx_gcq7 = 0\n        list_bgq6 = range ( n - 1 , - 1 , - 1 )\n        while idx_gcq7 < len(list_bgq6):\n            j = list_bgq6[idx_gcq7]\n            if ( input [ i ] [ j ] == 0 ) and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n                isEndless = 0\n            row [ i ] [ j ] = isEndless\n            idx_gcq7 = idx_gcq7 + 1\n        idx_jhk4 = idx_jhk4 + 1\n    ans = 0\n    idx_yxd2 = 0\n    list_b45o = range ( n )\n    while idx_yxd2 < len(list_b45o):\n        i = list_b45o[idx_yxd2]\n        idx_7p9v = 0\n        list_nkr3 = range ( 1 , n )\n        while idx_7p9v < len(list_nkr3):\n            j = list_nkr3[idx_7p9v]\n            if ( row [ i ] [ j ] and col [ i ] [ j ] ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                ans += 1\n            idx_7p9v = idx_7p9v + 1\n        idx_yxd2 = idx_yxd2 + 1\n    var_w9e = 42\n    return ans", "id": "Add_IndependentVar_sample_from_FIND_NUMBER_ENDLESS_POINTS_to_103", "old_id": "FIND_NUMBER_ENDLESS_POINTS"}
{"code": "def CountSquares ( a , b ) :\n    cnt = 0\n    idx_vt7q = 0\n    list_he5u = range ( a , b + 1 )\n    var_w05 = 36\n    while idx_vt7q < len(list_he5u):\n        i = list_he5u[idx_vt7q]\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n        idx_vt7q = idx_vt7q + 1\n    return cnt", "id": "Add_IndependentVar_sample_from_FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_to_104", "old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS"}
{"code": "def count ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    lookup = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    idx_xt1v = 0\n    list_y3kj = range ( n + 1 )\n    while idx_xt1v < len(list_y3kj):\n        i = list_y3kj[idx_xt1v]\n        lookup [ 0 ] [ i ] = 0\n        idx_xt1v = idx_xt1v + 1\n    idx_afxv = 0\n    list_elyp = range ( m + 1 )\n    while idx_afxv < len(list_elyp):\n        i = list_elyp[idx_afxv]\n        lookup [ i ] [ 0 ] = 1\n        idx_afxv = idx_afxv + 1\n    var_zyn = 66\n    idx_hytk = 0\n    list_ikfy = range ( 1 , m + 1 )\n    while idx_hytk < len(list_ikfy):\n        i = list_ikfy[idx_hytk]\n        idx_wyki = 0\n        list_ey7d = range ( 1 , n + 1 )\n        while idx_wyki < len(list_ey7d):\n            j = list_ey7d[idx_wyki]\n            if a [ i - 1 ] == b [ j - 1 ] and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ]\n            else :\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ]\n            idx_wyki = idx_wyki + 1\n        idx_hytk = idx_hytk + 1\n    return lookup [ m ] [ n ]", "id": "Add_IndependentVar_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_105", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def countOps ( A , B , m , n ) :\n    idx_inh9 = 0\n    list_cgpt = range ( n )\n    while idx_inh9 < len(list_cgpt):\n        i = list_cgpt[idx_inh9]\n        idx_p56z = 0\n        list_8dqi = range ( m )\n        while idx_p56z < len(list_8dqi):\n            j = list_8dqi[idx_p56z]\n            A [ i ] [ j ] -= B [ i ] [ j ]\n            idx_p56z = idx_p56z + 1\n        idx_inh9 = idx_inh9 + 1\n    idx_wy3m = 0\n    list_do6m = range ( 1 , n )\n    while idx_wy3m < len(list_do6m):\n        i = list_do6m[idx_wy3m]\n        idx_z56w = 0\n        list_lifk = range ( 1 , n )\n        while idx_z56w < len(list_lifk):\n            j = list_lifk[idx_z56w]\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n                return - 1\n            idx_z56w = idx_z56w + 1\n        idx_wy3m = idx_wy3m + 1\n    result = 0\n    idx_tk2l = 0\n    list_2ie3 = range ( n )\n    while idx_tk2l < len(list_2ie3):\n        i = list_2ie3[idx_tk2l]\n        result += abs ( A [ i ] [ 0 ] )\n        idx_tk2l = idx_tk2l + 1\n    idx_f394 = 0\n    var_sqr = 26\n    list_nkh9 = range ( m )\n    while idx_f394 < len(list_nkh9):\n        j = list_nkh9[idx_f394]\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] )\n        idx_f394 = idx_f394 + 1\n    return ( result )", "id": "Add_IndependentVar_sample_from_FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL_to_106", "old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL"}
{"code": "def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    var_3bv = 13\n    idx_j1lz = 0\n    list_wgur = range ( 2 , n + 1 )\n    while idx_j1lz < len(list_wgur):\n        i = list_wgur[idx_j1lz]\n        if ( int ( i % 2 ) == 0 ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n        idx_j1lz = idx_j1lz + 1\n    return DP [ n ]", "id": "Add_IndependentVar_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_107", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def pairSum ( mat , n , sum ) :\n    idx_r3aj = 0\n    list_yk0e = range ( n )\n    while idx_r3aj < len(list_yk0e):\n        i = list_yk0e[idx_r3aj]\n        mat [ i ].sort ( )\n        idx_r3aj = idx_r3aj + 1\n    idx_mqwk = 0\n    list_7zou = range ( n - 1 )\n    while idx_mqwk < len(list_7zou):\n        i = list_7zou[idx_mqwk]\n        idx_ga94 = 0\n        list_iz8q = range ( i + 1 , n )\n        while idx_ga94 < len(list_iz8q):\n            j = list_iz8q[idx_ga94]\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1\n            idx_ga94 = idx_ga94 + 1\n        idx_mqwk = idx_mqwk + 1\n    var_2o9 = 69", "id": "Add_IndependentVar_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_108", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def findMaxGCD ( arr , n ) :\n    high = 0\n    idx_egr0 = 0\n    list_hj8v = range ( 0 , n )\n    while idx_egr0 < len(list_hj8v):\n        i = list_hj8v[idx_egr0]\n        high = max ( high , arr [ i ] )\n        idx_egr0 = idx_egr0 + 1\n    count = [ 0 ] * ( high + 1 )\n    idx_ru6h = 0\n    list_u4be = range ( 0 , n )\n    while idx_ru6h < len(list_u4be):\n        i = list_u4be[idx_ru6h]\n        count [ arr [ i ] ] += 1\n        idx_ru6h = idx_ru6h + 1\n    counter = 0\n    idx_pkih = 0\n    var_uhr = 71\n    list_x0jr = range ( high , 0 , - 1 )\n    while idx_pkih < len(list_x0jr):\n        i = list_x0jr[idx_pkih]\n        j = i\n        while ( j <= high ) :\n            if ( count [ j ] > 0 ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n                counter += count [ j ]\n            j += i\n            if ( counter == 2 ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n                return i\n        counter = 0\n        idx_pkih = idx_pkih + 1\n    return 1\n", "id": "Add_IndependentVar_sample_from_FIND_PAIR_MAXIMUM_GCD_ARRAY_1_to_109", "old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1"}
{"code": "def findGreatest ( arr , n ) :\n    result = - 1\n    idx_t6wl = 0\n    list_meco = range ( n )\n    var_oje = 26\n    while idx_t6wl < len(list_meco):\n        i = list_meco[idx_t6wl]\n        idx_40kx = 0\n        list_h3u8 = range ( n - 1 )\n        while idx_40kx < len(list_h3u8):\n            j = list_h3u8[idx_40kx]\n            idx_7eml = 0\n            list_r3av = range ( j + 1 , n )\n            while idx_7eml < len(list_r3av):\n                k = list_r3av[idx_7eml]\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                    result = max ( result , arr [ i ] )\n                idx_7eml = idx_7eml + 1\n            idx_40kx = idx_40kx + 1\n        idx_t6wl = idx_t6wl + 1\n    return result", "id": "Add_IndependentVar_sample_from_FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_to_110", "old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY"}
{"code": "def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return False\n    columns = len ( m [ 0 ] )\n    var_yuf = 88\n    idx_tol9 = 0\n    list_dw9v = range ( rows )\n    while idx_tol9 < len(list_dw9v):\n        y1 = list_dw9v[idx_tol9]\n        idx_dmuw = 0\n        list_h1xv = range ( columns )\n        while idx_dmuw < len(list_h1xv):\n            x1 = list_h1xv[idx_dmuw]\n            if ( m [ y1 ] [ x1 ] == 1 ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                idx_kmyn = 0\n                list_w54c = range ( y1 + 1 , rows )\n                while idx_kmyn < len(list_w54c):\n                    y2 = list_w54c[idx_kmyn]\n                    idx_a0ch = 0\n                    list_aonl = range ( x1 + 1 , columns )\n                    while idx_a0ch < len(list_aonl):\n                        x2 = list_aonl[idx_a0ch]\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n                        idx_a0ch = idx_a0ch + 1\n                    idx_kmyn = idx_kmyn + 1\n            idx_dmuw = idx_dmuw + 1\n        idx_tol9 = idx_tol9 + 1\n    return False", "id": "Add_IndependentVar_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_to_111", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1"}
{"code": "def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    idx_fknw = 0\n    list_xq7n = range ( rows )\n    var_e7r = 25\n    while idx_fknw < len(list_xq7n):\n        i = list_xq7n[idx_fknw]\n        idx_i5y0 = 0\n        list_6pej = range ( columns - 1 )\n        while idx_i5y0 < len(list_6pej):\n            j = list_6pej[idx_i5y0]\n            idx_0c4x = 0\n            list_xiqs = range ( j + 1 , columns )\n            while idx_0c4x < len(list_xiqs):\n                k = list_xiqs[idx_0c4x]\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n                idx_0c4x = idx_0c4x + 1\n            idx_i5y0 = idx_i5y0 + 1\n        idx_fknw = idx_fknw + 1\n    return False", "id": "Add_IndependentVar_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1_to_112", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1"}
{"code": "def findRepeating ( arr , n ) :\n    s = set ( )\n    idx_98xe = 0\n    list_2xzn = range ( n )\n    while idx_98xe < len(list_2xzn):\n        i = list_2xzn[idx_98xe]\n        if arr [ i ] in s and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return arr [ i ]\n        s.add ( arr [ i ] )\n        idx_98xe = idx_98xe + 1\n    rteurn - 1\n    var_ok3 = 31", "id": "Add_IndependentVar_sample_from_FIND_REPETITIVE_ELEMENT_1_N_1_1_to_113", "old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1"}
{"code": "def subArraySum ( arr , n , sum ) :\n    idx_935p = 0\n    list_qiv2 = range ( n )\n    var_573 = 44\n    while idx_935p < len(list_qiv2):\n        i = list_qiv2[idx_935p]\n        curr_sum = arr [ i ]\n        j = i + 1\n        while j <= n :\n            if curr_sum == sum and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( i , j - 1 ) )\n                return 1\n            if curr_sum > sum or j == n and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                break\n            curr_sum = curr_sum + arr [ j ]\n            j += 1\n        idx_935p = idx_935p + 1\n    print ( \"No subarray found\" )\n    return 0", "id": "Add_IndependentVar_sample_from_FIND_SUBARRAY_WITH_GIVEN_SUM_to_114", "old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM"}
{"code": "def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return 0\n    var_c7h = 72\n    res = 1\n    idx_0nsa = 0\n    list_3qol = range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 )\n    while idx_0nsa < len(list_3qol):\n        i = list_3qol[idx_0nsa]\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n        idx_0nsa = idx_0nsa + 1\n    if ( n >= 2 ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        res = res * ( 1 + n )\n    return res", "id": "Add_IndependentVar_sample_from_FIND_SUM_EVEN_FACTORS_NUMBER_to_115", "old_id": "FIND_SUM_EVEN_FACTORS_NUMBER"}
{"code": "def evenSum ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_b052 = 0\n    list_1xfp = range ( 0 , n + 1 )\n    var_71p = 83\n    while idx_b052 < len(list_1xfp):\n        i = list_1xfp[idx_b052]\n        idx_3oj1 = 0\n        list_1con = range ( 0 , min ( i , n ) + 1 )\n        while idx_3oj1 < len(list_1con):\n            j = list_1con[idx_3oj1]\n            if j == 0 or j == i and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            idx_3oj1 = idx_3oj1 + 1\n        idx_b052 = idx_b052 + 1\n    sum = 0 ;\n    idx_ld1b = 0\n    list_8etv = range ( 0 , n + 1 )\n    while idx_ld1b < len(list_8etv):\n        i = list_8etv[idx_ld1b]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            sum = sum + C [ n ] [ i ]\n        idx_ld1b = idx_ld1b + 1\n    return sum", "id": "Add_IndependentVar_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_116", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def sumofoddFactors ( n ) :\n    res = 1\n    while n % 2 == 0 :\n        n = n // 2\n    idx_k0wj = 0\n    var_gcm = 55\n    list_134b = range ( 3 , int ( math.sqrt ( n ) + 1 ) )\n    while idx_k0wj < len(list_134b):\n        i = list_134b[idx_k0wj]\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n        idx_k0wj = idx_k0wj + 1\n    if n >= 2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        res *= ( 1 + n )\n    return res", "id": "Add_IndependentVar_sample_from_FIND_SUM_ODD_FACTORS_NUMBER_to_117", "old_id": "FIND_SUM_ODD_FACTORS_NUMBER"}
{"code": "def findSubarraySum ( arr , n ) :\n    res = 0\n    m = dict ( )\n    idx_fjhs = 0\n    list_hge3 = range ( n )\n    while idx_fjhs < len(list_hge3):\n        i = list_hge3[idx_fjhs]\n        Sum = 0\n        idx_b2m1 = 0\n        list_r1z6 = range ( i , n )\n        while idx_b2m1 < len(list_r1z6):\n            j = list_r1z6[idx_b2m1]\n            Sum += arr [ j ]\n            m [ Sum ] = m.get ( Sum , 0 ) + 1\n            idx_b2m1 = idx_b2m1 + 1\n        idx_fjhs = idx_fjhs + 1\n    idx_hojb = 0\n    list_3wvs = m\n    while idx_hojb < len(list_3wvs):\n        x = list_3wvs[idx_hojb]\n        if m [ x ] == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            res += x\n        idx_hojb = idx_hojb + 1\n    var_542 = 63\n    return res", "id": "Add_IndependentVar_sample_from_FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY_to_118", "old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY"}
{"code": "def findElement ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ 0 ] = float ( '-inf' )\n    idx_rn9v = 0\n    list_as6g = range ( 1 , n )\n    while idx_rn9v < len(list_as6g):\n        i = list_as6g[idx_rn9v]\n        leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] )\n        idx_rn9v = idx_rn9v + 1\n    var_iej = 11\n    rightMin = float ( 'inf' )\n    idx_1trf = 0\n    list_k92w = range ( n - 1 , - 1 , - 1 )\n    while idx_1trf < len(list_k92w):\n        i = list_k92w[idx_1trf]\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n        idx_1trf = idx_1trf + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT_to_119", "old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT"}
{"code": "def maxLen ( arr , n ) :\n    max_len = 0\n    idx_m1xe = 0\n    list_w8xz = range ( n )\n    while idx_m1xe < len(list_w8xz):\n        i = list_w8xz[idx_m1xe]\n        curr_sum = 0\n        idx_i1a4 = 0\n        list_k8bo = range ( i , n )\n        while idx_i1a4 < len(list_k8bo):\n            j = list_k8bo[idx_i1a4]\n            curr_sum += arr [ j ]\n            if curr_sum == 0 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                max_len = max ( max_len , j - i + 1 )\n            idx_i1a4 = idx_i1a4 + 1\n        idx_m1xe = idx_m1xe + 1\n    return max_len\n    var_m13 = 63\n", "id": "Add_IndependentVar_sample_from_FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_to_120", "old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM"}
{"code": "def findMaximum ( arr , low , high ) :\n    max = arr[low]\n    idx_fgy4 = 0\n    list_cb5f = range(low, high + 1)\n    var_8of = 6\n    while idx_fgy4 < len(list_cb5f):\n        i = list_cb5f[idx_fgy4]\n        if arr[i] > max and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            max = arr[i]\n        idx_fgy4 = idx_fgy4 + 1\n    return max", "id": "Add_IndependentVar_sample_from_FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING_to_121", "old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING"}
{"code": "def minDist ( arr , n , x , y ) :\n    min_dist = 2147483647\n    var_lci = 32\n    idx_gv6h = 0\n    list_8t01 = range ( n )\n    while idx_gv6h < len(list_8t01):\n        i = list_8t01[idx_gv6h]\n        idx_9ctw = 0\n        list_leoh = range ( i + 1 , n )\n        while idx_9ctw < len(list_leoh):\n            j = list_leoh[idx_9ctw]\n            if ( x == arr [ i ] and y == arr [ j ] or y == arr [ i ] and x == arr [ j ] ) and min_dist > abs ( i - j ) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n                min_dist = abs ( i - j )\n            idx_9ctw = idx_9ctw + 1\n        idx_gv6h = idx_gv6h + 1\n    return min_dist\n\n", "id": "Add_IndependentVar_sample_from_FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_to_122", "old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS"}
{"code": "def getOddOccurrence ( arr , arr_size ) :\n    idx_6lur = 0\n    list_1zyc = range ( 0 , arr_size )\n    while idx_6lur < len(list_1zyc):\n        i = list_1zyc[idx_6lur]\n        count = 0\n        idx_1qkw = 0\n        list_ng5y = range ( 0 , arr_size )\n        while idx_1qkw < len(list_ng5y):\n            j = list_ng5y[idx_1qkw]\n            if arr [ i ] == arr [ j ] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n                count += 1\n            idx_1qkw = idx_1qkw + 1\n        if ( count % 2 != 0 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return arr [ i ]\n        idx_6lur = idx_6lur + 1\n    var_gj1 = 57\n    return - 1", "id": "Add_IndependentVar_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_to_123", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES"}
{"code": "def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    idx_y8du = 0\n    list_j53q = range ( n1 )\n    while idx_y8du < len(list_j53q):\n        i = list_j53q[idx_y8du]\n        s.add ( a1 [ i ] )\n        idx_y8du = idx_y8du + 1\n    var_hy9 = 0\n    idx_jk4d = 0\n    list_7mie = range ( n2 )\n    while idx_jk4d < len(list_7mie):\n        i = list_7mie[idx_jk4d]\n        idx_w8ec = 0\n        list_hijd = range ( n3 )\n        while idx_w8ec < len(list_hijd):\n            j = list_hijd[idx_w8ec]\n            if sum - a2 [ i ] - a3 [ j ] in s and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n                return True\n            idx_w8ec = idx_w8ec + 1\n        idx_jk4d = idx_jk4d + 1\n    return False", "id": "Add_IndependentVar_sample_from_FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1_to_124", "old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    idx_c0p2 = 0\n    list_m49k = range ( n - 1 )\n    while idx_c0p2 < len(list_m49k):\n        i = list_m49k[idx_c0p2]\n        s = set ( )\n        idx_fbwl = 0\n        list_v0p8 = range ( i + 1 , n )\n        while idx_fbwl < len(list_v0p8):\n            j = list_v0p8[idx_fbwl]\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n            idx_fbwl = idx_fbwl + 1\n        idx_c0p2 = idx_c0p2 + 1\n    var_wjv = 26\n    if found == False and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        print ( \"No Triplet Found\" )", "id": "Add_IndependentVar_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_125", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    var_vco = 22\n    idx_9suw = 0\n    list_e2fu = range ( 0 , n - 1 )\n    while idx_9suw < len(list_e2fu):\n        i = list_e2fu[idx_9suw]\n        l = i + 1\n        r = n - 1\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < 0 ) :\n                l += 1\n            else :\n                r -= 1\n        idx_9suw = idx_9suw + 1\n    if ( found == False ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        print ( \" No Triplet Found\" )", "id": "Add_IndependentVar_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_126", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = { }\n    var_n8g = 20\n    idx_j4ya = 0\n    list_4cmi = range ( 0 , n )\n    while idx_j4ya < len(list_4cmi):\n        i = list_4cmi[idx_j4ya]\n        if ( arr [ i ] in count_map.keys ( ) ) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n        idx_j4ya = idx_j4ya + 1\n    idx_jd05 = 0\n    list_tsgv = range ( 0 , n )\n    while idx_jd05 < len(list_tsgv):\n        i = list_tsgv[idx_jd05]\n        if ( count_map [ arr [ i ] ] == k ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            return arr [ i ]\n        i += 1\n        idx_jd05 = idx_jd05 + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_127", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def first ( str ) :\n    idx_4sfd = 0\n    list_2r87 = range ( 0 , len ( str ) )\n    while idx_4sfd < len(list_2r87):\n        i = list_2r87[idx_4sfd]\n        if ( str [ i ].istitle ( ) ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return str [ i ]\n        idx_4sfd = idx_4sfd + 1\n    return 0\n    var_ehc = 73", "id": "Add_IndependentVar_sample_from_FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_to_128", "old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE"}
{"code": "def floorSearch ( arr , n , x ) :\n    if x >= arr [ n - 1 ] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))): return n - 1\n    if x < arr [ 0 ] and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))): return - 1\n    idx_si9w = 0\n    list_ocde = range ( 1, n )\n    while idx_si9w < len(list_ocde):\n        i = list_ocde[idx_si9w]\n        if arr [ i ] > x and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))): return i - 1\n        idx_si9w = idx_si9w + 1\n    return - 1\n    var_msp = 2", "id": "Add_IndependentVar_sample_from_FLOOR_IN_A_SORTED_ARRAY_to_129", "old_id": "FLOOR_IN_A_SORTED_ARRAY"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    var_zl4 = 86\n    count = 1\n    idx_dbnp = 0\n    list_3e6t = range ( n + 1 )\n    while idx_dbnp < len(list_3e6t):\n        i = list_3e6t[idx_dbnp]\n        if ( i == n or seq [ i ] == 'I' ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            idx_bt47 = 0\n            list_udy1 = range ( i - 1 , - 2 , - 1 )\n            while idx_bt47 < len(list_udy1):\n                j = list_udy1[idx_bt47]\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n                idx_bt47 = idx_bt47 + 1\n        idx_dbnp = idx_dbnp + 1\n    return result", "id": "Add_IndependentVar_sample_from_FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1_to_130", "old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    idx_e4i7 = 0\n    list_0mhc = range ( n )\n    while idx_e4i7 < len(list_0mhc):\n        i = list_0mhc[idx_e4i7]\n        if arr [ i ] in Hash.keys ( ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n        idx_e4i7 = idx_e4i7 + 1\n    max_count = 0\n    res = - 1\n    idx_zeyl = 0\n    var_7lf = 72\n    list_fu3c = Hash\n    while idx_zeyl < len(list_fu3c):\n        i = list_fu3c[idx_zeyl]\n        if ( max_count < Hash [ i ] ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            res = i\n            max_count = Hash [ i ]\n        idx_zeyl = idx_zeyl + 1\n    return res", "id": "Add_IndependentVar_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_131", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    idx_21ex = 0\n    list_xhrq = range ( n + 1 )\n    while idx_21ex < len(list_xhrq):\n        i = list_xhrq[idx_21ex]\n        if ( i <= 2 ) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n        idx_21ex = idx_21ex + 1\n    return dp [ n ]\n    var_o6u = 86", "id": "Add_IndependentVar_sample_from_FRIENDS_PAIRING_PROBLEM_to_132", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0\n    if ( n <= 2 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return n\n    idx_6bz7 = 0\n    list_cns4 = range ( 3 , n + 1 )\n    while idx_6bz7 < len(list_cns4):\n        i = list_cns4[idx_6bz7]\n        c = b + ( i - 1 ) * a\n        a = b\n        b = c\n        idx_6bz7 = idx_6bz7 + 1\n    var_y7m = 65\n    return c", "id": "Add_IndependentVar_sample_from_FRIENDS_PAIRING_PROBLEM_2_to_133", "old_id": "FRIENDS_PAIRING_PROBLEM_2"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    var_0bl = 98\n    idx_3rp9 = 0\n    list_y7be = range ( n + 1 )\n    while idx_3rp9 < len(list_y7be):\n        i = list_y7be[idx_3rp9]\n        if ( i == n or seq [ i ] == 'I' ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            idx_afo9 = 0\n            list_5h8x = range ( i - 1 , - 2 , - 1 )\n            while idx_afo9 < len(list_5h8x):\n                j = list_5h8x[idx_afo9]\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n                idx_afo9 = idx_afo9 + 1\n        idx_3rp9 = idx_3rp9 + 1\n    return \"\".join(str(i) for i in result)", "id": "Add_IndependentVar_sample_from_GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1_to_134", "old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = len ( str )\n    arr = [ 0 ] * l\n    idx_xpi4 = 0\n    list_b34r = range ( 0 , l )\n    var_cly = 89\n    while idx_xpi4 < len(list_b34r):\n        i = list_b34r[idx_xpi4]\n        idx_x18j = 0\n        list_lm64 = range ( i , l )\n        while idx_x18j < len(list_lm64):\n            j = list_lm64[idx_x18j]\n            idx_820k = 0\n            list_brfe = range ( j , l )\n            while idx_820k < len(list_brfe):\n                k = list_brfe[idx_820k]\n                if ( arr [ i ] % 8 == 0 ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n                    return True\n                elif ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 and i != j ) :\n                    return True\n                elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 and i != j and j != k and i != k ) :\n                    return True\n                idx_820k = idx_820k + 1\n            idx_x18j = idx_x18j + 1\n        idx_xpi4 = idx_xpi4 + 1\n    return False", "id": "Add_IndependentVar_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_135", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    idx_ep8c = 0\n    list_fxqj = range ( 1 , n + 1 )\n    while idx_ep8c < len(list_fxqj):\n        i = list_fxqj[idx_ep8c]\n        arr [ i ] = int ( str [ i - 1 ] )\n        idx_ep8c = idx_ep8c + 1\n    idx_oh85 = 0\n    list_5piy = range ( 1 , n + 1 )\n    while idx_oh85 < len(list_5piy):\n        i = list_5piy[idx_oh85]\n        dp [ i ] [ arr [ i ] % 8 ] = 1\n        idx_dly2 = 0\n        list_j9oh = range ( 8 )\n        while idx_dly2 < len(list_j9oh):\n            j = list_j9oh[idx_dly2]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n            idx_dly2 = idx_dly2 + 1\n        idx_oh85 = idx_oh85 + 1\n    idx_banr = 0\n    var_5zh = 68\n    list_7tck = range ( 1 , n + 1 )\n    while idx_banr < len(list_7tck):\n        i = list_7tck[idx_banr]\n        if ( dp [ i ] [ 0 ] == 1 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            return True\n        idx_banr = idx_banr + 1\n    return False", "id": "Add_IndependentVar_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1_to_136", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    var_7ir = 94\n    nxtbb = 0\n    idx_38jv = 0\n    list_kt4z = range ( 1 , m + 1 )\n    while idx_38jv < len(list_kt4z):\n        i = list_kt4z[idx_38jv]\n        if ( nxtbb < n ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] )\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n        idx_38jv = idx_38jv + 1\n    return maxRev [ m ]", "id": "Add_IndependentVar_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_137", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def search ( arr , x ) :\n    n = len ( arr )\n    idx_o6p7 = 0\n    list_e1bd = range ( 0 , n )\n    while idx_o6p7 < len(list_e1bd):\n        j = list_e1bd[idx_o6p7]\n        if ( x == arr [ j ] ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return j\n        idx_o6p7 = idx_o6p7 + 1\n    var_8s3 = 2\n    return - 1", "id": "Add_IndependentVar_sample_from_HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING_to_138", "old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING"}
{"code": "def isHeap ( arr , n ) :\n    idx_19gu = 0\n    list_085j = range ( int ( ( n - 2 ) / 2 ) + 1 )\n    var_f4a = 38\n    while idx_19gu < len(list_085j):\n        i = list_085j[idx_19gu]\n        if arr [ 2 * i + 1 ] > arr [ i ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return False\n        if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            return False\n        idx_19gu = idx_19gu + 1\n    return True", "id": "Add_IndependentVar_sample_from_HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1_to_139", "old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1"}
{"code": "def search ( arr , n , x ) :\n    idx_zrjx = 0\n    list_r13s = range ( 0 , n )\n    while idx_zrjx < len(list_r13s):\n        j = list_r13s[idx_zrjx]\n        if ( x == arr [ j ] ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return j\n        idx_zrjx = idx_zrjx + 1\n    return - 1\n    var_ry4 = 38", "id": "Add_IndependentVar_sample_from_HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS_to_140", "old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS"}
{"code": "def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    idx_da1c = 0\n    list_2jpz = arr\n    var_r39 = 69\n    while idx_da1c < len(list_2jpz):\n        i = list_2jpz[idx_da1c]\n        if ( i < 0 ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n        idx_da1c = idx_da1c + 1\n    idx_6oyn = 0\n    list_3x56 = arr\n    while idx_6oyn < len(list_3x56):\n        i = list_3x56[idx_6oyn]\n        if i in hash.keys ( ) and hash [ i ] > 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            return i\n        idx_6oyn = idx_6oyn + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_141", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( arr [ 0 ] )\n    idx_cbxf = 0\n    list_uahi = range ( 2 , n + 1 )\n    while idx_cbxf < len(list_uahi):\n        i = list_uahi[idx_cbxf]\n        sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )\n        idx_cbxf = idx_cbxf + 1\n    Q = [ ]\n    var_fhr = 63\n    heapq.heapify ( Q )\n    idx_isxz = 0\n    list_4db0 = range ( 1 , n + 1 )\n    while idx_isxz < len(list_4db0):\n        i = list_4db0[idx_isxz]\n        idx_2jvq = 0\n        list_lynx = range ( i , n + 1 )\n        while idx_2jvq < len(list_lynx):\n            j = list_lynx[idx_2jvq]\n            x = sum [ j ] - sum [ i - 1 ]\n            if len ( Q ) < k and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n                heapq.heappush ( Q , x )\n            else :\n                if Q [ 0 ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n            idx_2jvq = idx_2jvq + 1\n        idx_isxz = idx_isxz + 1\n    return Q [ 0 ]", "id": "Add_IndependentVar_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_142", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def find ( a , b , k , n1 , n2 ) :\n    s = set ( )\n    idx_465n = 0\n    list_2hrn = range ( n2 )\n    while idx_465n < len(list_2hrn):\n        i = list_2hrn[idx_465n]\n        s.add ( b [ i ] )\n        idx_465n = idx_465n + 1\n    missing = 0\n    idx_9qok = 0\n    var_7vm = 75\n    list_eisc = range ( n1 )\n    while idx_9qok < len(list_eisc):\n        i = list_eisc[idx_9qok]\n        if a [ i ] not in s and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            missing += 1\n        if missing == k and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return a [ i ]\n        idx_9qok = idx_9qok + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE_to_143", "old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE"}
{"code": "def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    idx_p9dy = 0\n    list_53zb = range ( 0 , n - 1 )\n    var_psn = 70\n    while idx_p9dy < len(list_53zb):\n        i = list_53zb[idx_p9dy]\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        idx_h3vo = 0\n        list_5gst = range ( i + 1 , n )\n        while idx_h3vo < len(list_5gst):\n            j = list_5gst[idx_h3vo]\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                maxsize = j - i + 1\n                startindex = i\n            idx_h3vo = idx_h3vo + 1\n        idx_p9dy = idx_p9dy + 1\n    if ( maxsize == - 1 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        print ( \"No such subarray\" )\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 )\n    return maxsize", "id": "Add_IndependentVar_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_144", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = { }\n    curr_sum = 0\n    max_len = 0\n    ending_index = - 1\n    idx_fm2z = 0\n    list_8lfz = range ( 0 , n )\n    while idx_fm2z < len(list_8lfz):\n        i = list_8lfz[idx_fm2z]\n        if ( arr [ i ] == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            arr [ i ] = - 1\n        else :\n            arr [ i ] = 1\n        idx_fm2z = idx_fm2z + 1\n    idx_d8p6 = 0\n    list_j6x7 = range ( 0 , n )\n    while idx_d8p6 < len(list_j6x7):\n        i = list_j6x7[idx_d8p6]\n        curr_sum = curr_sum + arr [ i ]\n        if ( curr_sum == 0 ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            max_len = i + 1\n            ending_index = i\n        if ( curr_sum + n ) in hash_map and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = i - hash_map [ curr_sum + n ]\n                ending_index = i\n        else :\n            hash_map[curr_sum + n] = i\n        idx_d8p6 = idx_d8p6 + 1\n    idx_itop = 0\n    list_b7zm = range ( 0 , n )\n    while idx_itop < len(list_b7zm):\n        i = list_b7zm[idx_itop]\n        if ( arr [ i ] == - 1 ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            arr [ i ] = 0\n        else :\n            arr [ i ] = 1\n        idx_itop = idx_itop + 1\n    print ( ending_index - max_len + 1 , end = \" \" )\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    var_gys = 82\n    return max_len", "id": "Add_IndependentVar_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_145", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    var_hxr = 57\n    idx_sxny = 0\n    list_zryl = range ( 2 , maxele + 1 )\n    while idx_sxny < len(list_zryl):\n        i = list_zryl[idx_sxny]\n        count = 0\n        idx_fea4 = 0\n        list_g8is = range ( n )\n        while idx_fea4 < len(list_g8is):\n            j = list_g8is[idx_fea4]\n            if ( arr [ j ] % i == 0 ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                count += 1\n            idx_fea4 = idx_fea4 + 1\n        ans = max ( ans , count )\n        idx_sxny = idx_sxny + 1\n    return ans", "id": "Add_IndependentVar_sample_from_LARGEST_SUBSEQUENCE_GCD_GREATER_1_to_146", "old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1"}
{"code": "def longestSubsequenceCommonSegment ( k , s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    lcs = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    cnt = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    idx_5jxp = 0\n    list_vncy = range ( 1 , n + 1 )\n    while idx_5jxp < len(list_vncy):\n        i = list_vncy[idx_5jxp]\n        idx_4uxe = 0\n        list_de7t = range ( 1 , m + 1 )\n        while idx_4uxe < len(list_de7t):\n            j = list_de7t[idx_4uxe]\n            lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs [ i ] [ j - 1 ] )\n            if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n                cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1\n            if ( cnt [ i ] [ j ] >= k ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                idx_z5i1 = 0\n                list_f731 = range ( k , cnt [ i ] [ j ] + 1 )\n                while idx_z5i1 < len(list_f731):\n                    a = list_f731[idx_z5i1]\n                    lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a )\n                    idx_z5i1 = idx_z5i1 + 1\n            idx_4uxe = idx_4uxe + 1\n        idx_5jxp = idx_5jxp + 1\n    return lcs [ n ] [ m ]\n    var_wbg = 71", "id": "Add_IndependentVar_sample_from_LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K_to_147", "old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K"}
{"code": "def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    idx_09ak = 0\n    list_wjx5 = range ( n - 1 )\n    while idx_09ak < len(list_wjx5):\n        i = list_wjx5[idx_09ak]\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            dp [ i ] [ i + 1 ] = 2\n        idx_09ak = idx_09ak + 1\n    idx_kbay = 0\n    list_mgiu = range ( 2 , n )\n    var_9tk = 6\n    while idx_kbay < len(list_mgiu):\n        l = list_mgiu[idx_kbay]\n        i = - 1\n        idx_7do2 = 0\n        list_pd6t = range ( l , n )\n        while idx_7do2 < len(list_pd6t):\n            j = list_pd6t[idx_7do2]\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            idx_mrb1 = 0\n            list_m41u = range ( i , j )\n            while idx_mrb1 < len(list_m41u):\n                k = list_m41u[idx_mrb1]\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n                idx_mrb1 = idx_mrb1 + 1\n            idx_7do2 = idx_7do2 + 1\n        idx_kbay = idx_kbay + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_to_148", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = 0\n    var_sva = 55\n    invalidCloseBraces = 0\n    idx_g7do = 0\n    list_p7b2 = range ( n )\n    while idx_g7do < len(list_p7b2):\n        i = list_p7b2[idx_g7do]\n        if ( s [ i ] == '(' ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            invalidOpenBraces += 1\n        else :\n            if ( invalidOpenBraces == 0 ) :\n                invalidCloseBraces += 1\n            else :\n                invalidOpenBraces -= 1\n        idx_g7do = idx_g7do + 1\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "Add_IndependentVar_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_149", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    idx_pnj0 = 0\n    list_8q3o = range ( n )\n    var_hm3 = 1\n    while idx_pnj0 < len(list_8q3o):\n        i = list_8q3o[idx_pnj0]\n        L [ i ] [ n - 1 ] = 2\n        idx_pnj0 = idx_pnj0 + 1\n    idx_wz80 = 0\n    list_g1vk = range ( n - 2 , 0 , - 1 )\n    while idx_wz80 < len(list_g1vk):\n        j = list_g1vk[idx_wz80]\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n        while ( i >= 0 ) :\n            L [ i ] [ j ] = 2\n            i -= 1\n        idx_wz80 = idx_wz80 + 1\n    return llap", "id": "Add_IndependentVar_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_150", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def subsequence ( s , t , n , k ) :\n    last = 0\n    cnt = 0\n    new_last = 0\n    var_7oj = 50\n    size = 0\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    idx_6mlt = 0\n    list_lmx5 = string\n    while idx_6mlt < len(list_lmx5):\n        ch = list_lmx5[idx_6mlt]\n        cnt = 0\n        idx_6cdy = 0\n        list_piqv = range ( last , n )\n        while idx_6cdy < len(list_piqv):\n            i = list_piqv[idx_6cdy]\n            if s [ i ] == ch and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                cnt += 1\n            idx_6cdy = idx_6cdy + 1\n        if cnt >= k and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            idx_mqec = 0\n            list_g86y = range ( last , n )\n            while idx_mqec < len(list_g86y):\n                i = list_g86y[idx_mqec]\n                if s [ i ] == ch :\n                    t [ size ] = ch\n                    new_last = i\n                    size += 1\n                idx_mqec = idx_mqec + 1\n            last = new_last\n        idx_6mlt = idx_6mlt + 1\n    t[size] = '\\0';", "id": "Add_IndependentVar_sample_from_LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES_to_151", "old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES"}
{"code": "def minimizeWithKSwaps ( arr , n , k ) :\n    idx_9jxa = 0\n    list_qadl = range ( n - 1 )\n    while idx_9jxa < len(list_qadl):\n        i = list_qadl[idx_9jxa]\n        pos = i\n        idx_tiza = 0\n        list_b4q8 = range ( i + 1 , n )\n        while idx_tiza < len(list_b4q8):\n            j = list_b4q8[idx_tiza]\n            if ( j - i > k ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                break\n            if ( arr [ j ] < arr [ pos ] ) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                pos = j\n            idx_tiza = idx_tiza + 1\n        idx_upmw = 0\n        list_k3i8 = range ( pos , i , - 1 )\n        while idx_upmw < len(list_k3i8):\n            j = list_k3i8[idx_upmw]\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n            idx_upmw = idx_upmw + 1\n        k -= pos - i\n        idx_9jxa = idx_9jxa + 1\n    var_jo7 = 28", "id": "Add_IndependentVar_sample_from_LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS_to_152", "old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = [ [ 0 for k in range ( n + 1 ) ] for l in range ( m + 1 ) ]\n    result = 0\n    idx_xhry = 0\n    var_0ba = 48\n    list_wtg5 = range ( m + 1 )\n    while idx_xhry < len(list_wtg5):\n        i = list_wtg5[idx_xhry]\n        idx_m1qa = 0\n        list_mjds = range ( n + 1 )\n        while idx_m1qa < len(list_mjds):\n            j = list_mjds[idx_m1qa]\n            if ( i == 0 or j == 0 ) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                LCSuff [ i ] [ j ] = 0\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1\n                result = max ( result , LCSuff [ i ] [ j ] )\n            else :\n                LCSuff [ i ] [ j ] = 0\n            idx_m1qa = idx_m1qa + 1\n        idx_xhry = idx_xhry + 1\n    return result", "id": "Add_IndependentVar_sample_from_LONGEST_COMMON_SUBSTRING_to_153", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def findLength ( str ) :\n    n = len ( str )\n    maxlen = 0\n    var_q71 = 66\n    idx_69r3 = 0\n    list_tnsu = range ( 0 , n )\n    while idx_69r3 < len(list_tnsu):\n        i = list_tnsu[idx_69r3]\n        idx_v5a0 = 0\n        list_hklc = range ( i + 1 , n , 2 )\n        while idx_v5a0 < len(list_hklc):\n            j = list_hklc[idx_v5a0]\n            length = j - i + 1\n            leftsum = 0\n            rightsum = 0\n            idx_t81a = 0\n            list_utf5 = range ( 0 , int ( length / 2 ) )\n            while idx_t81a < len(list_utf5):\n                k = list_utf5[idx_t81a]\n                leftsum += ( int ( str [ i + k ] ) - int ( '0' ) )\n                rightsum += ( int ( str [ i + k + int ( length / 2 ) ] ) - int ( '0' ) )\n                idx_t81a = idx_t81a + 1\n            if ( leftsum == rightsum and maxlen < length ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                maxlen = length\n            idx_v5a0 = idx_v5a0 + 1\n        idx_69r3 = idx_69r3 + 1\n    return maxlen", "id": "Add_IndependentVar_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_to_154", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF"}
{"code": "def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    var_df1 = 44\n    idx_e1il = 0\n    list_nq1a = range ( 0 , n )\n    while idx_e1il < len(list_nq1a):\n        i = list_nq1a[idx_e1il]\n        Sum [ i ] [ i ] = int ( string [ i ] )\n        idx_e1il = idx_e1il + 1\n    idx_u3w7 = 0\n    list_fjt1 = range ( 2 , n + 1 )\n    while idx_u3w7 < len(list_fjt1):\n        length = list_fjt1[idx_u3w7]\n        idx_gx58 = 0\n        list_dujw = range ( 0 , n - length + 1 )\n        while idx_gx58 < len(list_dujw):\n            i = list_dujw[idx_gx58]\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                maxlen = length\n            idx_gx58 = idx_gx58 + 1\n        idx_u3w7 = idx_u3w7 + 1\n    return maxlen", "id": "Add_IndependentVar_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1_to_155", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1"}
{"code": "def longOddEvenIncSeq ( arr , n ) :\n    lioes = list ( )\n    maxLen = 0\n    idx_3fis = 0\n    list_by4p = range ( n )\n    while idx_3fis < len(list_by4p):\n        i = list_by4p[idx_3fis]\n        lioes.append ( 1 )\n        idx_3fis = idx_3fis + 1\n    i = 1\n    idx_p0ik = 0\n    list_hp7u = range ( n )\n    while idx_p0ik < len(list_hp7u):\n        i = list_hp7u[idx_p0ik]\n        idx_oqga = 0\n        list_cie7 = range ( i )\n        while idx_oqga < len(list_cie7):\n            j = list_cie7[idx_oqga]\n            if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr [ j ] ) % 2 != 0 and lioes [ i ] < lioes [ j ] + 1 ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n                lioes [ i ] = lioes [ j ] + 1\n            idx_oqga = idx_oqga + 1\n        idx_p0ik = idx_p0ik + 1\n    idx_cpai = 0\n    var_cfo = 76\n    list_bxh4 = range ( n )\n    while idx_cpai < len(list_bxh4):\n        i = list_bxh4[idx_cpai]\n        if maxLen < lioes [ i ] and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            maxLen = lioes [ i ]\n        idx_cpai = idx_cpai + 1\n    return maxLen", "id": "Add_IndependentVar_sample_from_LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE_to_156", "old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE"}
{"code": "def lis ( arr , n ) :\n    lis = [ 1 ] * n\n    idx_qy6c = 0\n    list_uh5p = range ( 1 , n )\n    while idx_qy6c < len(list_uh5p):\n        i = list_uh5p[idx_qy6c]\n        idx_3hyd = 0\n        list_9ugn = range ( 0 , i )\n        while idx_3hyd < len(list_9ugn):\n            j = list_9ugn[idx_3hyd]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n                lis [ i ] = lis [ j ] + 1\n            idx_3hyd = idx_3hyd + 1\n        idx_qy6c = idx_qy6c + 1\n    maximum = 0\n    idx_07ip = 0\n    var_aoy = 41\n    list_hip1 = range ( n )\n    while idx_07ip < len(list_hip1):\n        i = list_hip1[idx_07ip]\n        maximum = max ( maximum , lis [ i ] )\n        idx_07ip = idx_07ip + 1\n    return maximum", "id": "Add_IndependentVar_sample_from_LONGEST_INCREASING_SUBSEQUENCE_1_to_157", "old_id": "LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    var_86b = 52\n    idx_4q91 = 0\n    list_if7v = range ( 1 , n + 1 )\n    while idx_4q91 < len(list_if7v):\n        i = list_if7v[idx_4q91]\n        idx_n0qi = 0\n        list_z53j = range ( 1 , n + 1 )\n        while idx_n0qi < len(list_z53j):\n            j = list_z53j[idx_n0qi]\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_n0qi = idx_n0qi + 1\n        idx_4q91 = idx_4q91 + 1\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res", "id": "Add_IndependentVar_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_158", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    idx_em08 = 0\n    list_mhxt = range ( 1 , n + 1 )\n    while idx_em08 < len(list_mhxt):\n        i = list_mhxt[idx_em08]\n        idx_qo9u = 0\n        list_gjfb = range ( 1 , n + 1 )\n        while idx_qo9u < len(list_gjfb):\n            j = list_gjfb[idx_qo9u]\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_qo9u = idx_qo9u + 1\n        idx_em08 = idx_em08 + 1\n    return dp [ n ] [ n ]\n    var_xwe = 5", "id": "Add_IndependentVar_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_159", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = { }\n    sum = 0\n    maxLen = 0\n    idx_k67a = 0\n    list_mlwt = range ( n )\n    while idx_k67a < len(list_mlwt):\n        i = list_mlwt[idx_k67a]\n        if arr [ i ] == 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n        idx_k67a = idx_k67a + 1\n    var_6x3 = 93\n    return maxLen", "id": "Add_IndependentVar_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_160", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = { }\n    mod_arr = [ 0 for i in range ( n ) ]\n    max = 0\n    curr_sum = 0\n    idx_uqg6 = 0\n    list_hio4 = range ( n )\n    while idx_uqg6 < len(list_hio4):\n        i = list_hio4[idx_uqg6]\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k\n        idx_uqg6 = idx_uqg6 + 1\n    idx_51od = 0\n    list_od8n = range ( n )\n    while idx_51od < len(list_od8n):\n        i = list_od8n[idx_51od]\n        if ( mod_arr [ i ] == 0 ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            max = i + 1\n        elif ( mod_arr [ i ] in um ) :\n            um [ mod_arr [ i ] ] = i\n        else :\n            if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                max = i - um [ mod_arr [ i ] ]\n        idx_51od = idx_51od + 1\n    return max\n    var_dm0 = 34", "id": "Add_IndependentVar_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_161", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    var_lrn = 6\n    idx_xgz6 = 0\n    list_17rj = range ( n )\n    while idx_xgz6 < len(list_17rj):\n        i = list_17rj[idx_xgz6]\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            longLen = um [ arr [ i ] ]\n        idx_xgz6 = idx_xgz6 + 1\n    return longLen", "id": "Add_IndependentVar_sample_from_LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2_to_162", "old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2"}
{"code": "def longestSubseqWithDiffOne ( arr , n ) :\n    dp = [ 1 for i in range ( n ) ]\n    idx_06g2 = 0\n    list_tew0 = range ( n )\n    while idx_06g2 < len(list_tew0):\n        i = list_tew0[idx_06g2]\n        idx_izlu = 0\n        list_wjxf = range ( i )\n        while idx_izlu < len(list_wjxf):\n            j = list_wjxf[idx_izlu]\n            if ( ( arr [ i ] == arr [ j ] + 1 ) or ( arr [ i ] == arr [ j ] - 1 ) ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 )\n            idx_izlu = idx_izlu + 1\n        idx_06g2 = idx_06g2 + 1\n    result = 1\n    idx_4bzf = 0\n    list_94r6 = range ( n )\n    while idx_4bzf < len(list_94r6):\n        i = list_94r6[idx_4bzf]\n        if ( result < dp [ i ] ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            result = dp [ i ]\n        idx_4bzf = idx_4bzf + 1\n    return result\n    var_uvq = 0", "id": "Add_IndependentVar_sample_from_LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE_to_163", "old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE"}
{"code": "def to_upper(in_list):\n    idx_a7kb = 0\n    var_iey = 37\n    list_am0s = range(len(in_list))\n    while idx_a7kb < len(list_am0s):\n        i = list_am0s[idx_a7kb]\n        if 'a' <= in_list[i] <= 'z' and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            in_list[i] = chr(ord(in_list[i]) - ord('a') + ord('A'))\n        idx_a7kb = idx_a7kb + 1\n    return ''.join(in_list)", "id": "Add_IndependentVar_sample_from_LOWER_CASE_UPPER_CASE_INTERESTING_FACT_to_164", "old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT"}
{"code": "def checkMarkov ( m ) :\n    idx_zvgb = 0\n    var_bwv = 92\n    list_l6rt = range ( 0 , len ( m ) )\n    while idx_zvgb < len(list_l6rt):\n        i = list_l6rt[idx_zvgb]\n        sm = 0\n        idx_2mhj = 0\n        list_30wu = range ( 0 , len ( m [ i ] ) )\n        while idx_2mhj < len(list_30wu):\n            j = list_30wu[idx_2mhj]\n            sm = sm + m [ i ] [ j ]\n            idx_2mhj = idx_2mhj + 1\n        if ( sm != 1 ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            return False\n        idx_zvgb = idx_zvgb + 1\n    return True", "id": "Add_IndependentVar_sample_from_MARKOV_MATRIX_to_165", "old_id": "MARKOV_MATRIX"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = - 1\n    val = - 1\n    dp = [ [ 0 for i in range ( maxLimit + 1 ) ] for j in range ( n ) ]\n    idx_v94q = 0\n    list_e1l4 = range ( n )\n    while idx_v94q < len(list_e1l4):\n        ind = list_e1l4[idx_v94q]\n        idx_uf8x = 0\n        list_48ak = range ( maxLimit + 1 )\n        while idx_uf8x < len(list_48ak):\n            val = list_48ak[idx_uf8x]\n            if ( ind == 0 ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = 1\n                else :\n                    dp [ ind ] [ val ] = 0\n            else :\n                if ( val - arr [ ind ] >= 0 and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 or dp [ ind - 1 ] [ val + arr [ ind ] ] == 1 ) :\n                        dp [ ind ] [ val ] = 1\n                elif ( val - arr [ ind ] >= 0 ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = 0\n            idx_uf8x = idx_uf8x + 1\n        idx_v94q = idx_v94q + 1\n    idx_fikj = 0\n    list_ji6c = range ( maxLimit , - 1 , - 1 )\n    while idx_fikj < len(list_ji6c):\n        val = list_ji6c[idx_fikj]\n        if ( dp [ n - 1 ] [ val ] == 1 ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            return val\n        idx_fikj = idx_fikj + 1\n    var_98y = 16\n    return - 1", "id": "Add_IndependentVar_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_166", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def findMaxValue ( arr , n ) :\n    if n < 4 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    idx_n2k8 = 0\n    list_njxz = range ( n - 1 , - 1 , - 1 )\n    var_xyw = 5\n    while idx_n2k8 < len(list_njxz):\n        i = list_njxz[idx_n2k8]\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n        idx_n2k8 = idx_n2k8 + 1\n    idx_ul7k = 0\n    list_134n = range ( n - 2 , - 1 , - 1 )\n    while idx_ul7k < len(list_134n):\n        i = list_134n[idx_ul7k]\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n        idx_ul7k = idx_ul7k + 1\n    idx_cuea = 0\n    list_4tjl = range ( n - 3 , - 1 , - 1 )\n    while idx_cuea < len(list_4tjl):\n        i = list_4tjl[idx_cuea]\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n        idx_cuea = idx_cuea + 1\n    idx_70b9 = 0\n    list_3mcp = range ( n - 4 , - 1 , - 1 )\n    while idx_70b9 < len(list_3mcp):\n        i = list_3mcp[idx_70b9]\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n        idx_70b9 = idx_70b9 + 1\n    return table4 [ 0 ]", "id": "Add_IndependentVar_sample_from_MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L_to_167", "old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    var_u78 = 10\n    idx_4e5f = 0\n    list_minu = range ( n + 1 )\n    while idx_4e5f < len(list_minu):\n        i = list_minu[idx_4e5f]\n        idx_xj9m = 0\n        list_bj4i = range ( min ( i , n ) + 1 )\n        while idx_xj9m < len(list_bj4i):\n            j = list_bj4i[idx_xj9m]\n            if ( j == 0 or j == i ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            idx_xj9m = idx_xj9m + 1\n        idx_4e5f = idx_4e5f + 1\n    maxvalue = 0\n    idx_uhc5 = 0\n    list_aspu = range ( n + 1 )\n    while idx_uhc5 < len(list_aspu):\n        i = list_aspu[idx_uhc5]\n        maxvalue = max ( maxvalue , C [ n ] [ i ] )\n        idx_uhc5 = idx_uhc5 + 1\n    return maxvalue", "id": "Add_IndependentVar_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_168", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def findLongestConseqSubseq ( arr , n ) :\n    S = set ( )\n    idx_4dek = 0\n    var_k8t = 57\n    list_s6jw = range ( n )\n    while idx_4dek < len(list_s6jw):\n        i = list_s6jw[idx_4dek]\n        S.add ( arr [ i ] )\n        idx_4dek = idx_4dek + 1\n    ans = 0\n    idx_vf71 = 0\n    list_l2ea = range ( n )\n    while idx_vf71 < len(list_l2ea):\n        i = list_l2ea[idx_vf71]\n        if S.__contains__ ( arr [ i ] ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            j = arr [ i ]\n            while ( S.__contains__ ( j ) ) :\n                j += 1\n            ans = max ( ans , j - arr [ i ] )\n        idx_vf71 = idx_vf71 + 1\n    return ans", "id": "Add_IndependentVar_sample_from_MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY_to_169", "old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY"}
{"code": "def maxRepeating ( str ) :\n    n = len ( str )\n    count = 0\n    res = str [ 0 ]\n    cur_count = 1\n    idx_92ut = 0\n    list_me95 = range ( n )\n    var_3h8 = 18\n    while idx_92ut < len(list_me95):\n        i = list_me95[idx_92ut]\n        if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            cur_count += 1\n        else :\n            if cur_count > count :\n                count = cur_count\n                res = str [ i ]\n            cur_count = 1\n        idx_92ut = idx_92ut + 1\n    return res", "id": "Add_IndependentVar_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_170", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    idx_w6p5 = 0\n    list_0drh = range ( n )\n    while idx_w6p5 < len(list_0drh):\n        i = list_0drh[idx_w6p5]\n        freq [ arr [ i ] ] += 1\n        idx_w6p5 = idx_w6p5 + 1\n    ans = 0\n    var_gya = 78\n    idx_d1iz = 0\n    list_u45e = range ( n )\n    while idx_d1iz < len(list_u45e):\n        i = list_u45e[idx_d1iz]\n        idx_t59h = 0\n        list_rwna = range ( n )\n        while idx_t59h < len(list_rwna):\n            j = list_rwna[idx_t59h]\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n            idx_t59h = idx_t59h + 1\n        idx_d1iz = idx_d1iz + 1\n    return ans", "id": "Add_IndependentVar_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_171", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxRowDiff ( mat , m , n ) :\n    rowSum = [ 0 ] * m\n    idx_tj9y = 0\n    list_nofp = range ( 0 , m )\n    while idx_tj9y < len(list_nofp):\n        i = list_nofp[idx_tj9y]\n        sum = 0\n        idx_t156 = 0\n        list_vz60 = range ( 0 , n )\n        while idx_t156 < len(list_vz60):\n            j = list_vz60[idx_t156]\n            sum += mat [ i ] [ j ]\n            idx_t156 = idx_t156 + 1\n        rowSum [ i ] = sum\n        idx_tj9y = idx_tj9y + 1\n    max_diff = rowSum [ 1 ] - rowSum [ 0 ]\n    min_element = rowSum [ 0 ]\n    idx_uykc = 0\n    list_q1td = range ( 1 , m )\n    while idx_uykc < len(list_q1td):\n        i = list_q1td[idx_uykc]\n        if ( rowSum [ i ] - min_element > max_diff ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            max_diff = rowSum [ i ] - min_element\n        if ( rowSum [ i ] < min_element ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            min_element = rowSum [ i ]\n        idx_uykc = idx_uykc + 1\n    var_e5v = 74\n    return max_diff", "id": "Add_IndependentVar_sample_from_MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX_to_172", "old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX"}
{"code": "def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    idx_utmo = 0\n    list_01jp = range ( n )\n    while idx_utmo < len(list_01jp):\n        i = list_01jp[idx_utmo]\n        if arr [ i ] not in mp.keys ( ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n        idx_utmo = idx_utmo + 1\n    var_yzx = 71\n    return maxDict", "id": "Add_IndependentVar_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_173", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxPrefix ( s , t ) :\n    count = 0\n    idx_7e1l = 0\n    list_zq5m = range ( 0 , len ( t ) )\n    while idx_7e1l < len(list_zq5m):\n        i = list_zq5m[idx_7e1l]\n        if ( count == len ( s ) ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            break\n        if ( t [ i ] == s [ count ] ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            count = count + 1\n        idx_7e1l = idx_7e1l + 1\n    return count\n    var_5kv = 4", "id": "Add_IndependentVar_sample_from_MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER_to_174", "old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER"}
{"code": "def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    idx_bcdq = 0\n    list_lmcp = range ( n )\n    while idx_bcdq < len(list_lmcp):\n        i = list_lmcp[idx_bcdq]\n        mls.append ( 1 )\n        idx_bcdq = idx_bcdq + 1\n    idx_xqe7 = 0\n    list_pjyv = range ( n )\n    while idx_xqe7 < len(list_pjyv):\n        i = list_pjyv[idx_xqe7]\n        idx_395g = 0\n        list_f89j = range ( i )\n        while idx_395g < len(list_f89j):\n            j = list_f89j[idx_395g]\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                mls [ i ] = mls [ j ] + 1\n            idx_395g = idx_395g + 1\n        idx_xqe7 = idx_xqe7 + 1\n    idx_89tw = 0\n    var_3ab = 64\n    list_bo46 = range ( n )\n    while idx_89tw < len(list_bo46):\n        i = list_bo46[idx_89tw]\n        if ( max < mls [ i ] ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            max = mls [ i ]\n        idx_89tw = idx_89tw + 1\n    return max", "id": "Add_IndependentVar_sample_from_MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1_to_175", "old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , 0 , 0\n    sm = [ 0 ] * n\n    sm [ 0 ] = arr [ 0 ]\n    idx_wv65 = 0\n    list_9f25 = range ( 1 , n )\n    while idx_wv65 < len(list_9f25):\n        i = list_9f25[idx_wv65]\n        sm [ i ] = sm [ i - 1 ] + arr [ i ]\n        idx_wv65 = idx_wv65 + 1\n    idx_n4ji = 0\n    list_7vmt = range ( n )\n    while idx_n4ji < len(list_7vmt):\n        i = list_7vmt[idx_n4ji]\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n        idx_n4ji = idx_n4ji + 1\n    var_1pa = 40\n    return maxSum // k", "id": "Add_IndependentVar_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_176", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    idx_spka = 0\n    var_cej = 47\n    list_zh8j = range ( 0 , n )\n    while idx_spka < len(list_zh8j):\n        i = list_zh8j[idx_spka]\n        if ( dp [ i ] != - 1 ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n        idx_spka = idx_spka + 1\n    return dp [ n ]", "id": "Add_IndependentVar_sample_from_MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C_to_177", "old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C"}
{"code": "def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    idx_jex0 = 0\n    list_ovin = range ( 0 , n )\n    while idx_jex0 < len(list_ovin):\n        i = list_ovin[idx_jex0]\n        isSingleOccurance = True\n        idx_kq8d = 0\n        list_un35 = range ( i + 1 , n )\n        while idx_kq8d < len(list_un35):\n            j = list_un35[idx_kq8d]\n            if ( arr [ i ] == arr [ j ] ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n            idx_kq8d = idx_kq8d + 1\n        if ( isSingleOccurance == True ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n        idx_jex0 = idx_jex0 + 1\n    return abs ( SubsetSum_1 - SubsetSum_2 )\n    var_yf3 = 67", "id": "Add_IndependentVar_sample_from_MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_to_178", "old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY"}
{"code": "def lis ( arr , n ) :\n    mpis = [ 0 ] * ( n )\n    idx_ij1f = 0\n    list_k9gl = range ( n )\n    while idx_ij1f < len(list_k9gl):\n        i = list_k9gl[idx_ij1f]\n        mpis [ i ] = arr [ i ]\n        idx_ij1f = idx_ij1f + 1\n    idx_8120 = 0\n    var_rlh = 100\n    list_nwrg = range ( 1 , n )\n    while idx_8120 < len(list_nwrg):\n        i = list_nwrg[idx_8120]\n        idx_6rnp = 0\n        list_h693 = range ( i )\n        while idx_6rnp < len(list_h693):\n            j = list_h693[idx_6rnp]\n            if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                mpis [ i ] = mpis [ j ] * arr [ i ]\n            idx_6rnp = idx_6rnp + 1\n        idx_8120 = idx_8120 + 1\n    return max ( mpis )", "id": "Add_IndependentVar_sample_from_MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE_to_179", "old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE"}
{"code": "def maxProductSubset ( a , n ) :\n    if n == 1 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return a [ 0 ]\n    max_neg = - 999999999999\n    count_neg = 0\n    count_zero = 0\n    var_yul = 35\n    prod = 1\n    idx_7p0u = 0\n    list_mxu0 = range ( n )\n    while idx_7p0u < len(list_mxu0):\n        i = list_mxu0[idx_7p0u]\n        if a [ i ] == 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            count_zero += 1\n            continue\n        if a [ i ] < 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            count_neg += 1\n            max_neg = max ( max_neg , a [ i ] )\n        prod = prod + a [ i ]\n        idx_7p0u = idx_7p0u + 1\n    if count_zero == n and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return 0\n    if count_neg & 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        if ( count_neg == 1 and count_zero > 0 and count_zero + count_neg == n ) :\n            return 0\n        prod = int(prod / max_neg)\n    return prod", "id": "Add_IndependentVar_sample_from_MAXIMUM_PRODUCT_SUBSET_ARRAY_to_180", "old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    idx_qtb5 = 0\n    list_dmgz = range ( n - 2 , 0 , - 1 )\n    while idx_qtb5 < len(list_dmgz):\n        i = list_dmgz[idx_qtb5]\n        if price [ i ] > max_price and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n        idx_qtb5 = idx_qtb5 + 1\n    min_price = price [ 0 ]\n    idx_fbyo = 0\n    var_ugk = 53\n    list_2tan = range ( 1 , n )\n    while idx_fbyo < len(list_2tan):\n        i = list_2tan[idx_fbyo]\n        if price [ i ] < min_price and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n        idx_fbyo = idx_fbyo + 1\n    result = profit [ n - 1 ]\n    return result", "id": "Add_IndependentVar_sample_from_MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE_to_181", "old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE"}
{"code": "def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    idx_zpm5 = 0\n    list_hg4r = range ( n * k )\n    var_th2 = 65\n    while idx_zpm5 < len(list_hg4r):\n        i = list_hg4r[idx_zpm5]\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            max_ending_here = 0\n        idx_zpm5 = idx_zpm5 + 1\n    return max_so_far", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION_to_182", "old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION"}
{"code": "def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    var_rn2 = 55\n    idx_bzpe = 0\n    list_hmdt = range ( 3 , n )\n    while idx_bzpe < len(list_hmdt):\n        i = list_hmdt[idx_bzpe]\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n        idx_bzpe = idx_bzpe + 1\n    return sum [ n - 1 ]", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_to_183", "old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    idx_aubq = 0\n    var_40u = 12\n    list_mltb = range ( 1 , n )\n    while idx_aubq < len(list_mltb):\n        i = list_mltb[idx_aubq]\n        idx_wbz8 = 0\n        list_fjbl = range ( i )\n        while idx_wbz8 < len(list_fjbl):\n            j = list_fjbl[idx_wbz8]\n            if ( arr [ j ] > arr [ i ] ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n            idx_wbz8 = idx_wbz8 + 1\n        idx_aubq = idx_aubq + 1\n    result = - 2147483648\n    idx_s69o = 0\n    list_rhe4 = range ( n )\n    while idx_s69o < len(list_rhe4):\n        i = list_rhe4[idx_s69o]\n        if ( result < inc [ i ] ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            result = inc [ i ]\n        if ( result < dec [ i ] ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            result = dec [ i ]\n        idx_s69o = idx_s69o + 1\n    return result", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_184", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    idx_dnix = 0\n    list_0s26 = range ( 1 , n )\n    while idx_dnix < len(list_0s26):\n        i = list_0s26[idx_dnix]\n        if ( arr [ i ] > arr [ i - 1 ] ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n        idx_dnix = idx_dnix + 1\n    msds [ n - 1 ] = arr [ n - 1 ]\n    idx_y1w4 = 0\n    list_18s6 = range ( n - 2 , - 1 , - 1 )\n    while idx_y1w4 < len(list_18s6):\n        i = list_18s6[idx_y1w4]\n        if ( arr [ i ] > arr [ i + 1 ] ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n        idx_y1w4 = idx_y1w4 + 1\n    idx_n6bs = 0\n    list_62yk = range ( n )\n    while idx_n6bs < len(list_62yk):\n        i = list_62yk[idx_n6bs]\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n        idx_n6bs = idx_n6bs + 1\n    return max_sum\n    var_n3b = 6", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_185", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    idx_2p9i = 0\n    list_xrvg = range ( 1 , N )\n    var_nwo = 72\n    while idx_2p9i < len(list_xrvg):\n        i = list_xrvg[idx_2p9i]\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] )\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] )\n        idx_2p9i = idx_2p9i + 1\n    return dp [ N - 1 ]", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_to_186", "old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = [ 0 for i in range ( N ) ]\n    MS [ N - 1 ] = arr [ N - 1 ]\n    idx_9xbs = 0\n    list_r6y9 = range ( N - 2 , - 1 , - 1 )\n    var_9mq = 95\n    while idx_9xbs < len(list_r6y9):\n        i = list_r6y9[idx_9xbs]\n        if ( i + k + 1 >= N ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] )\n        else :\n            MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] )\n        idx_9xbs = idx_9xbs + 1\n    return MS [ 0 ]", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_187", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    idx_l875 = 0\n    list_204v = range ( 0 , n )\n    var_lv9 = 65\n    while idx_l875 < len(list_204v):\n        i = list_204v[idx_l875]\n        idx_hopk = 0\n        list_8viz = range ( i + 1 , n )\n        while idx_hopk < len(list_8viz):\n            j = list_8viz[idx_hopk]\n            idx_lwog = 0\n            list_qheg = range ( j + 1 , n )\n            while idx_lwog < len(list_qheg):\n                k = list_qheg[idx_lwog]\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n                idx_lwog = idx_lwog + 1\n            idx_hopk = idx_hopk + 1\n        idx_l875 = idx_l875 + 1\n    return sm", "id": "Add_IndependentVar_sample_from_MAXIMUM_TRIPLET_SUM_ARRAY_to_188", "old_id": "MAXIMUM_TRIPLET_SUM_ARRAY"}
{"code": "def maxCost ( mat , N ) :\n    dp = [ [ 0 for i in range ( N ) ] for j in range ( N ) ]\n    dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ]\n    idx_cehl = 0\n    list_i75w = range ( 1 , N )\n    while idx_cehl < len(list_i75w):\n        i = list_i75w[idx_cehl]\n        dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ]\n        idx_cehl = idx_cehl + 1\n    idx_hiqr = 0\n    list_y1kh = range ( 1 , N )\n    while idx_hiqr < len(list_y1kh):\n        i = list_y1kh[idx_hiqr]\n        idx_exry = 0\n        list_r81h = range ( 1 , min ( i + 1 , N ) )\n        while idx_exry < len(list_r81h):\n            j = list_r81h[idx_exry]\n            dp [ i ] [ j ] = mat [ i ] [ j ] + \\\n                max ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_exry = idx_exry + 1\n        idx_hiqr = idx_hiqr + 1\n    result = 0\n    idx_np38 = 0\n    list_8tv6 = range ( N )\n    while idx_np38 < len(list_8tv6):\n        i = list_8tv6[idx_np38]\n        if ( result < dp [ N - 1 ] [ i ] ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            result = dp [ N - 1 ] [ i ]\n        idx_np38 = idx_np38 + 1\n    return result\n    var_g0o = 7", "id": "Add_IndependentVar_sample_from_MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX_to_189", "old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return 0\n    arr.sort ( )\n    ans = arr [ n - 1 ] - arr [ 0 ]\n    small = arr [ 0 ] + k\n    big = arr [ n - 1 ] - k\n    if ( small > big ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        small , big = big , small\n    idx_3b6g = 0\n    var_5xk = 3\n    list_rumv = range ( 1 , n - 1 )\n    while idx_3b6g < len(list_rumv):\n        i = list_rumv[idx_3b6g]\n        subtract = arr [ i ] - k\n        add = arr [ i ] + k\n        if ( subtract >= small or add <= big ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        if ( big - subtract <= add - small ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            small = subtract\n        else :\n            big = add\n        idx_3b6g = idx_3b6g + 1\n    return min ( ans , big - small )", "id": "Add_IndependentVar_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_190", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    var_8zf = 20\n    idx_o1en = 0\n    list_317y = range ( n )\n    while idx_o1en < len(list_317y):\n        i = list_317y[idx_o1en]\n        if ( cost [ i ] != - 1 ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n        idx_o1en = idx_o1en + 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    idx_0a2f = 0\n    list_07g9 = range ( W + 1 )\n    while idx_0a2f < len(list_07g9):\n        i = list_07g9[idx_0a2f]\n        min_cost [ 0 ] [ i ] = INF\n        idx_0a2f = idx_0a2f + 1\n    idx_2z9j = 0\n    list_5c4q = range ( 1 , n + 1 )\n    while idx_2z9j < len(list_5c4q):\n        i = list_5c4q[idx_2z9j]\n        min_cost [ i ] [ 0 ] = 0\n        idx_2z9j = idx_2z9j + 1\n    idx_hy52 = 0\n    list_0irc = range ( 1 , n + 1 )\n    while idx_hy52 < len(list_0irc):\n        i = list_0irc[idx_hy52]\n        idx_dmwl = 0\n        list_gdh6 = range ( 1 , W + 1 )\n        while idx_dmwl < len(list_gdh6):\n            j = list_gdh6[idx_dmwl]\n            if ( wt [ i - 1 ] > j ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n            idx_dmwl = idx_dmwl + 1\n        idx_hy52 = idx_hy52 + 1\n    if ( min_cost [ n ] [ W ] == INF ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]", "id": "Add_IndependentVar_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_191", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minimumflip ( mat , n ) :\n    flip = 0\n    idx_8arc = 0\n    list_2ova = range ( n )\n    while idx_8arc < len(list_2ova):\n        i = list_2ova[idx_8arc]\n        idx_wmtg = 0\n        list_cfjo = range ( i )\n        while idx_wmtg < len(list_cfjo):\n            j = list_cfjo[idx_wmtg]\n            if mat [ i ] [ j ] != mat [ j ] [ i ] and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                flip += 1\n            idx_wmtg = idx_wmtg + 1\n        idx_8arc = idx_8arc + 1\n    var_h0l = 60\n    return flip", "id": "Add_IndependentVar_sample_from_MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1_to_192", "old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = 0\n    var_zu3 = 42\n    idx_qj3b = 0\n    list_12ly = range ( 0 , n )\n    while idx_qj3b < len(list_12ly):\n        i = list_12ly[idx_qj3b]\n        if ( ( max1 - arr [ i ] ) % k != 0 ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            return - 1\n        else :\n            res += ( max1 - arr [ i ] ) / k\n        idx_qj3b = idx_qj3b + 1\n    return int ( res )", "id": "Add_IndependentVar_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_193", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    idx_je4p = 0\n    list_cmuy = range ( N )\n    while idx_je4p < len(list_cmuy):\n        i = list_cmuy[idx_je4p]\n        lis [ i ] = 1\n        idx_je4p = idx_je4p + 1\n    idx_yeih = 0\n    list_q79b = range ( 1 , N )\n    while idx_yeih < len(list_q79b):\n        i = list_q79b[idx_yeih]\n        idx_t05a = 0\n        list_o0q6 = range ( i )\n        while idx_t05a < len(list_o0q6):\n            j = list_o0q6[idx_t05a]\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                lis [ i ] = lis [ j ] + 1\n            idx_t05a = idx_t05a + 1\n        idx_yeih = idx_yeih + 1\n    max = 0\n    var_xh3 = 4\n    idx_upqo = 0\n    list_tg4w = range ( N )\n    while idx_upqo < len(list_tg4w):\n        i = list_tg4w[idx_upqo]\n        if ( max < lis [ i ] ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            max = lis [ i ]\n        idx_upqo = idx_upqo + 1\n    return ( N - max )", "id": "Add_IndependentVar_sample_from_MINIMUM_INSERTIONS_SORT_ARRAY_to_194", "old_id": "MINIMUM_INSERTIONS_SORT_ARRAY"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    if ( n == 0 ) or ( arr [ 0 ] == 0 ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return float ( 'inf' )\n    jumps [ 0 ] = 0\n    idx_z3wg = 0\n    var_u8p = 70\n    list_0dos = range ( 1 , n )\n    while idx_z3wg < len(list_0dos):\n        i = list_0dos[idx_z3wg]\n        jumps [ i ] = float ( 'inf' )\n        idx_t4a6 = 0\n        list_8o3l = range ( i )\n        while idx_t4a6 < len(list_8o3l):\n            j = list_8o3l[idx_t4a6]\n            if ( i <= j + arr [ j ] ) and ( jumps [ j ] != float ( 'inf' ) ) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n                jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 )\n                break\n            idx_t4a6 = idx_t4a6 + 1\n        idx_z3wg = idx_z3wg + 1\n    return jumps [ n - 1 ]", "id": "Add_IndependentVar_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1_to_195", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    idx_7pnf = 0\n    list_qig0 = range ( n - 2 , - 1 , - 1 )\n    while idx_7pnf < len(list_qig0):\n        i = list_qig0[idx_7pnf]\n        if ( arr [ i ] == 0 ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            idx_e8la = 0\n            list_j38v = range ( i + 1 , n )\n            while idx_e8la < len(list_j38v):\n                j = list_j38v[idx_e8la]\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n                idx_e8la = idx_e8la + 1\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n        idx_7pnf = idx_7pnf + 1\n    var_fge = 81\n    return jumps [ 0 ]", "id": "Add_IndependentVar_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_196", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    idx_48zb = 0\n    list_r5jh = range ( 4 , n + 1 )\n    while idx_48zb < len(list_r5jh):\n        i = list_r5jh[idx_48zb]\n        dp.append ( i )\n        idx_3xe9 = 0\n        list_r3z9 = range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 )\n        while idx_3xe9 < len(list_r3z9):\n            x = list_r3z9[idx_3xe9]\n            temp = x * x ;\n            if temp > i and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n            idx_3xe9 = idx_3xe9 + 1\n        idx_48zb = idx_48zb + 1\n    return dp [ n ]\n    var_4b8 = 65", "id": "Add_IndependentVar_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_197", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def minOperation ( arr , n ) :\n    Hash = defaultdict ( lambda : 0 )\n    idx_la0p = 0\n    list_tfdb = range ( 0 , n )\n    while idx_la0p < len(list_tfdb):\n        i = list_tfdb[idx_la0p]\n        Hash [ arr [ i ] ] += 1\n        idx_la0p = idx_la0p + 1\n    max_count = 0\n    idx_nbje = 0\n    list_h90g = Hash\n    while idx_nbje < len(list_h90g):\n        i = list_h90g[idx_nbje]\n        if max_count < Hash [ i ] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            max_count = Hash [ i ]\n        idx_nbje = idx_nbje + 1\n    return n - max_count\n    var_04m = 24", "id": "Add_IndependentVar_sample_from_MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY_to_198", "old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY"}
{"code": "def minProductSubset ( a , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        return a [ 0 ]\n    max_neg = float ( '-inf' )\n    min_pos = float ( 'inf' )\n    var_0os = 66\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    idx_6cex = 0\n    list_n8g3 = range ( 0 , n )\n    while idx_6cex < len(list_n8g3):\n        i = list_n8g3[idx_6cex]\n        if ( a [ i ] == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            count_zero = count_zero + 1\n            continue\n        if ( a [ i ] < 0 ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            count_neg = count_neg + 1\n            max_neg = max ( max_neg , a [ i ] )\n        if ( a [ i ] > 0 ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            min_pos = min ( min_pos , a [ i ] )\n        prod = prod * a [ i ]\n        idx_6cex = idx_6cex + 1\n    if ( count_zero == n or ( count_neg == 0 and count_zero > 0 ) ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return 0\n    if ( count_neg == 0 ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return min_pos\n    if ( ( count_neg & 1 ) == 0 and count_neg != 0 ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        prod = int ( prod / max_neg )\n    return prod", "id": "Add_IndependentVar_sample_from_MINIMUM_PRODUCT_SUBSET_ARRAY_to_199", "old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def findMinRooms ( slots , n , m ) :\n    counts = [ 0 ] * m\n    idx_8bj1 = 0\n    list_p1r8 = range ( n )\n    var_gxu = 81\n    while idx_8bj1 < len(list_p1r8):\n        i = list_p1r8[idx_8bj1]\n        idx_nui5 = 0\n        list_ea9w = range ( m )\n        while idx_nui5 < len(list_ea9w):\n            j = list_ea9w[idx_nui5]\n            if i < len(slots) and j < len(slots[i]) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n                if ( slots [ i ] [ j ] == '1' ) :\n                    counts [ j ] += 1\n            idx_nui5 = idx_nui5 + 1\n        idx_8bj1 = idx_8bj1 + 1\n    return max ( counts )", "id": "Add_IndependentVar_sample_from_MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE_to_200", "old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE"}
{"code": "def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    idx_lfip = 0\n    list_j59c = range ( 1 , n + 1 )\n    while idx_lfip < len(list_j59c):\n        i = list_j59c[idx_lfip]\n        substring = tmp [ i : n ]\n        if ( str == substring ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return i\n        idx_lfip = idx_lfip + 1\n    var_uy9 = 93\n    return n", "id": "Add_IndependentVar_sample_from_MINIMUM_ROTATIONS_REQUIRED_GET_STRING_to_201", "old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING"}
{"code": "def getMinSteps ( n ) :\n    table = [ 0 ] * ( n + 1 )\n    idx_8bk0 = 0\n    list_6j9v = range ( n + 1 )\n    while idx_8bk0 < len(list_6j9v):\n        i = list_6j9v[idx_8bk0]\n        table [ i ] = n - i\n        idx_8bk0 = idx_8bk0 + 1\n    var_1go = 11\n    idx_3m2t = 0\n    list_t1o7 = range ( n , 0 , - 1 )\n    while idx_3m2t < len(list_t1o7):\n        i = list_t1o7[idx_3m2t]\n        if ( not ( i % 2 ) ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            table [ i // 2 ] = min ( table [ i ] + 1 , table [ i // 2 ] )\n        if ( not ( i % 3 ) ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            table [ i // 3 ] = min ( table [ i ] + 1 , table [ i // 3 ] )\n        idx_3m2t = idx_3m2t + 1\n    return table [ 1 ]", "id": "Add_IndependentVar_sample_from_MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION_to_202", "old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    var_7cn = 17\n    temp = 0\n    idx_2s6n = 0\n    list_85rz = range ( n )\n    while idx_2s6n < len(list_85rz):\n        i = list_85rz[idx_2s6n]\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            diff = d\n        idx_2s6n = idx_2s6n + 1\n    return res - diff", "id": "Add_IndependentVar_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_203", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        return arr [ 0 ]\n    if ( n == 2 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    var_hu8 = 37\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    idx_y0wu = 0\n    list_3lga = range ( 4 , n )\n    while idx_y0wu < len(list_3lga):\n        i = list_3lga[idx_y0wu]\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n        idx_y0wu = idx_y0wu + 1\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )", "id": "Add_IndependentVar_sample_from_MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED_to_204", "old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0\n    b = 0\n    idx_reog = 0\n    var_m0s = 81\n    list_xt2h = range ( n )\n    while idx_reog < len(list_xt2h):\n        i = list_xt2h[idx_reog]\n        if ( i % 2 != 0 ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n        idx_reog = idx_reog + 1\n    return a + b", "id": "Add_IndependentVar_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_205", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == 0 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        return 0\n    if N == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return insert\n    dp = [ 0 ] * ( N + 1 )\n    idx_wp0i = 0\n    list_ec3a = range ( 1 , N + 1 )\n    while idx_wp0i < len(list_ec3a):\n        i = list_ec3a[idx_wp0i]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ i // 2 ] + copy )\n        else :\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ ( i + 1 ) // 2 ] + copy + remove )\n        idx_wp0i = idx_wp0i + 1\n    return dp [ N ]\n    var_x37 = 22", "id": "Add_IndependentVar_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_206", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def compute ( str , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( str )\n    answer = \"\"\n    var_rmh = 11\n    idx_hwes = 0\n    list_gsfo = range ( 0 , n )\n    while idx_hwes < len(list_gsfo):\n        i = list_gsfo[idx_hwes]\n        if i < l and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            answer = answer + str [ i ]\n        idx_hwes = idx_hwes + 1\n    idx_8met = 0\n    list_zx7c = range ( n , l )\n    while idx_8met < len(list_zx7c):\n        i = list_zx7c[idx_8met]\n        answer = ( answer + reverseAlphabet [ ord ( str [ i ] ) - ord ( \"a\" ) ] )\n        idx_8met = idx_8met + 1\n    return answer", "id": "Add_IndependentVar_sample_from_MIRROR_CHARACTERS_STRING_to_207", "old_id": "MIRROR_CHARACTERS_STRING"}
{"code": "def segregateElements ( arr , n ) :\n    temp = [ 0 for k in range ( n ) ]\n    j = 0\n    idx_gtse = 0\n    list_cgr4 = range ( n )\n    while idx_gtse < len(list_cgr4):\n        i = list_cgr4[idx_gtse]\n        if ( arr [ i ] >= 0 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            temp [ j ] = arr [ i ]\n            j += 1\n        idx_gtse = idx_gtse + 1\n    if ( j == n or j == 0 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return\n    idx_qxbj = 0\n    list_vbr9 = range ( n )\n    while idx_qxbj < len(list_vbr9):\n        i = list_vbr9[idx_qxbj]\n        if ( arr [ i ] < 0 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            temp [ j ] = arr [ i ]\n            j += 1\n        idx_qxbj = idx_qxbj + 1\n    idx_n0k9 = 0\n    var_yks = 65\n    list_yiq5 = range ( n )\n    while idx_n0k9 < len(list_yiq5):\n        k = list_yiq5[idx_n0k9]\n        arr [ k ] = temp [ k ]\n        idx_n0k9 = idx_n0k9 + 1", "id": "Add_IndependentVar_sample_from_MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED_to_208", "old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED"}
{"code": "def firstNonRepeating ( arr , n ) :\n    idx_qiks = 0\n    list_rnxl = range ( n )\n    var_lhx = 84\n    while idx_qiks < len(list_rnxl):\n        i = list_rnxl[idx_qiks]\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                break\n            j += 1\n        if ( j == n ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return arr [ i ]\n        idx_qiks = idx_qiks + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_NON_REPEATING_ELEMENT_to_209", "old_id": "NON_REPEATING_ELEMENT"}
{"code": "def firstNonRepeating ( arr , n ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_vwsk = 0\n    list_mf8k = range ( n )\n    var_aml = 78\n    while idx_vwsk < len(list_mf8k):\n        i = list_mf8k[idx_vwsk]\n        mp [ arr [ i ] ] += 1\n        idx_vwsk = idx_vwsk + 1\n    idx_un6g = 0\n    list_ozlw = range ( n )\n    while idx_un6g < len(list_ozlw):\n        i = list_ozlw[idx_un6g]\n        if mp [ arr [ i ] ] == 1 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            return arr [ i ]\n        idx_un6g = idx_un6g + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_NON_REPEATING_ELEMENT_1_to_210", "old_id": "NON_REPEATING_ELEMENT_1"}
{"code": "def divisible ( num ) :\n    n = len ( num )\n    sum = 0\n    idx_4l3h = 0\n    list_ewl3 = range ( n )\n    while idx_4l3h < len(list_ewl3):\n        i = list_ewl3[idx_4l3h]\n        sum += ord ( num [ i ] )\n        idx_4l3h = idx_4l3h + 1\n    if ( sum % 3 == 0 ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return 0\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        return - 1\n    idx_i4wz = 0\n    list_kzvg = range ( n )\n    while idx_i4wz < len(list_kzvg):\n        i = list_kzvg[idx_i4wz]\n        if ( sum % 3 == ord ( num [ i ] ) % 3 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return 1\n        idx_i4wz = idx_i4wz + 1\n    var_1x7 = 39\n    if ( n == 2 ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        return - 1\n    return 2", "id": "Add_IndependentVar_sample_from_NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3_to_211", "old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3"}
{"code": "def answer_query ( a , n , l , r ) :\n    count = 0\n    idx_s0nk = 0\n    var_p2x = 11\n    list_ntlg = range ( l , r )\n    while idx_s0nk < len(list_ntlg):\n        i = list_ntlg[idx_s0nk]\n        if ( a [ i ] == a [ i + 1 ] ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            count += 1\n        idx_s0nk = idx_s0nk + 1\n    return count", "id": "Add_IndependentVar_sample_from_NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE_to_212", "old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE"}
{"code": "def countIntegralSolutions ( n ) :\n    result = 0\n    idx_6sgw = 0\n    list_wzu7 = range ( n + 1 )\n    while idx_6sgw < len(list_wzu7):\n        i = list_wzu7[idx_6sgw]\n        idx_34ez = 0\n        list_zbuh = range ( n + 1 )\n        while idx_34ez < len(list_zbuh):\n            j = list_zbuh[idx_34ez]\n            idx_21je = 0\n            list_5x7h = range ( n + 1 )\n            while idx_21je < len(list_5x7h):\n                k = list_5x7h[idx_21je]\n                if i + j + k == n and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    result += 1\n                idx_21je = idx_21je + 1\n            idx_34ez = idx_34ez + 1\n        idx_6sgw = idx_6sgw + 1\n    return result\n    var_g3z = 90", "id": "Add_IndependentVar_sample_from_NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_to_213", "old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N"}
{"code": "def answer ( n ) :\n    dp = [ [ 0 for x in range ( 10 ) ] for y in range ( n + 1 ) ]\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return 10\n    idx_6bs4 = 0\n    list_i35b = range ( 10 )\n    while idx_6bs4 < len(list_i35b):\n        j = list_i35b[idx_6bs4]\n        dp [ 1 ] [ j ] = 1\n        idx_6bs4 = idx_6bs4 + 1\n    idx_31lm = 0\n    list_vcuo = range ( 2 , n + 1 )\n    while idx_31lm < len(list_vcuo):\n        i = list_vcuo[idx_31lm]\n        idx_1mer = 0\n        list_n5y2 = range ( 10 )\n        while idx_1mer < len(list_n5y2):\n            j = list_n5y2[idx_1mer]\n            if ( j == 0 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ]\n            elif ( j == 9 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n            idx_1mer = idx_1mer + 1\n        idx_31lm = idx_31lm + 1\n    sum = 0\n    var_8a9 = 65\n    idx_kz9f = 0\n    list_6z5r = range ( 1 , 10 )\n    while idx_kz9f < len(list_6z5r):\n        j = list_6z5r[idx_kz9f]\n        sum = sum + dp [ n ] [ j ]\n        idx_kz9f = idx_kz9f + 1\n    return sum", "id": "Add_IndependentVar_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_214", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    idx_ebac = 0\n    list_yq70 = range ( n )\n    var_ibs = 88\n    while idx_ebac < len(list_yq70):\n        i = list_yq70[idx_ebac]\n        if a [ i ] == 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            zero += 1\n        if a [ i ] == 2 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            two += 1\n        idx_ebac = idx_ebac + 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt", "id": "Add_IndependentVar_sample_from_NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT_to_215", "old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT"}
{"code": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    idx_vpet = 0\n    list_m63g = range ( n )\n    var_5ad = 97\n    while idx_vpet < len(list_m63g):\n        i = list_m63g[idx_vpet]\n        if s [ i ] == 'a' and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            c1 += 1\n        if s [ i ] == 'b' and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            c2 += 1\n            C += c1\n        idx_vpet = idx_vpet + 1\n    return C * K + int ( K * ( K - 1 ) / 2 ) * c1 * c2", "id": "Add_IndependentVar_sample_from_NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES_to_216", "old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES"}
{"code": "def minimumBox ( arr , n ) :\n    q = collections.deque ( [ ] )\n    var_yz4 = 33\n    arr = arr [ : n ]\n    arr.sort ( )\n    q.append ( arr [ 0 ] )\n    idx_dv41 = 0\n    list_8bhe = range ( 1 , n )\n    while idx_dv41 < len(list_8bhe):\n        i = list_8bhe[idx_dv41]\n        now = q [ 0 ]\n        if ( arr [ i ] >= 2 * now ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            q.popleft ( )\n        q.append ( arr [ i ] )\n        idx_dv41 = idx_dv41 + 1\n    return len ( q )", "id": "Add_IndependentVar_sample_from_NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER_to_217", "old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER"}
{"code": "def maximumNumberDistinctPrimeRange ( m , n ) :\n    factorCount = [ 0 ] * ( n + 1 )\n    prime = [ False ] * ( n + 1 )\n    idx_wpn7 = 0\n    list_c3pg = range ( n + 1 )\n    while idx_wpn7 < len(list_c3pg):\n        i = list_c3pg[idx_wpn7]\n        factorCount [ i ] = 0\n        prime [ i ] = True\n        idx_wpn7 = idx_wpn7 + 1\n    idx_k25z = 0\n    list_3ude = range ( 2 , n + 1 )\n    while idx_k25z < len(list_3ude):\n        i = list_3ude[idx_k25z]\n        if ( prime [ i ] == True ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            factorCount [ i ] = 1\n            idx_57wb = 0\n            list_jaie = range ( i * 2 , n + 1 , i )\n            while idx_57wb < len(list_jaie):\n                j = list_jaie[idx_57wb]\n                factorCount [ j ] += 1\n                prime [ j ] = False\n                idx_57wb = idx_57wb + 1\n        idx_k25z = idx_k25z + 1\n    max = factorCount [ m ]\n    num = m\n    idx_fju9 = 0\n    list_7csa = range ( m , n + 1 )\n    while idx_fju9 < len(list_7csa):\n        i = list_7csa[idx_fju9]\n        if ( factorCount [ i ] > max ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            max = factorCount [ i ]\n            num = i\n        idx_fju9 = idx_fju9 + 1\n    return num\n    var_4k0 = 18", "id": "Add_IndependentVar_sample_from_NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N_to_218", "old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N"}
{"code": "def findNth ( n ) :\n    count = 0\n    idx_046o = 0\n    list_y8u9 = itertools.count ( )\n    var_uc8 = 86\n    while idx_046o < len(list_y8u9):\n        curr = list_y8u9[idx_046o]\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            count = count + 1\n        if ( count == n ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return curr\n        idx_046o = idx_046o + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_to_219", "old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN"}
{"code": "def findSum ( A , B , n ) :\n    Hash = defaultdict ( lambda : 0 )\n    idx_srg5 = 0\n    var_drk = 76\n    list_s40w = range ( 0 , n )\n    while idx_srg5 < len(list_s40w):\n        i = list_s40w[idx_srg5]\n        Hash [ A [ i ] ] += 1\n        Hash [ B [ i ] ] += 1\n        idx_srg5 = idx_srg5 + 1\n    Sum = 0\n    idx_4kj5 = 0\n    list_goym = Hash\n    while idx_4kj5 < len(list_goym):\n        x = list_goym[idx_4kj5]\n        if Hash [ x ] == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            Sum += x\n        idx_4kj5 = idx_4kj5 + 1\n    return Sum", "id": "Add_IndependentVar_sample_from_OVERLAPPING_SUM_TWO_ARRAY_to_220", "old_id": "OVERLAPPING_SUM_TWO_ARRAY"}
{"code": "def isProduct ( arr , n , x ) :\n    if n < 2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return False\n    s = set ( )\n    idx_ns8y = 0\n    list_o23z = range ( 0 , n )\n    while idx_ns8y < len(list_o23z):\n        i = list_o23z[idx_ns8y]\n        if arr [ i ] == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n        idx_ns8y = idx_ns8y + 1\n    return False\n    var_mr1 = 60", "id": "Add_IndependentVar_sample_from_PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1_to_221", "old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1"}
{"code": "def checkPangram ( s ) :\n    List = [ ]\n    idx_76oy = 0\n    list_ldm0 = range ( 26 )\n    while idx_76oy < len(list_ldm0):\n        i = list_ldm0[idx_76oy]\n        List.append ( False )\n        idx_76oy = idx_76oy + 1\n    idx_nuve = 0\n    list_odmy = s\n    var_w56 = 59\n    while idx_nuve < len(list_odmy):\n        c = list_odmy[idx_nuve]\n        if 'A' <= c and c <= 'Z' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            List [ ord ( c ) - ord ( 'A' ) ] = True\n        elif 'a' <= c and c <= 'z':\n            List [ ord ( c ) - ord ( 'a' ) ] = True\n        idx_nuve = idx_nuve + 1\n    idx_1nwz = 0\n    list_arh7 = List\n    while idx_1nwz < len(list_arh7):\n        ch = list_arh7[idx_1nwz]\n        if ch == False and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return False\n        idx_1nwz = idx_1nwz + 1\n    return True", "id": "Add_IndependentVar_sample_from_PANGRAM_CHECKING_to_222", "old_id": "PANGRAM_CHECKING"}
{"code": "def isPossible ( a , b , n , k ) :\n    a = a [ : n ]\n    b = b [ : n ]\n    a.sort ( reverse = True )\n    b.sort ( )\n    idx_qcwf = 0\n    list_c94s = range ( n )\n    while idx_qcwf < len(list_c94s):\n        i = list_c94s[idx_qcwf]\n        if ( a [ i ] + b [ i ] < k ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return False\n        idx_qcwf = idx_qcwf + 1\n    return True\n    var_36i = 18", "id": "Add_IndependentVar_sample_from_PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K_to_223", "old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K"}
{"code": "def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :\n    print ( \"Point inside the viewing pane:\" )\n    idx_l4oy = 0\n    list_hjwo = range ( n )\n    while idx_l4oy < len(list_hjwo):\n        i = list_hjwo[idx_l4oy]\n        if ( ( XY [ i ] [ 0 ] >= Xmin ) and ( XY [ i ] [ 0 ] <= Xmax ) ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            if ( ( XY [ i ] [ 1 ] >= Ymin ) and ( XY [ i ] [ 1 ] <= Ymax ) ) :\n                print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_l4oy = idx_l4oy + 1\n    var_hnz = 40\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    idx_6aod = 0\n    list_28un = range ( n )\n    while idx_6aod < len(list_28un):\n        i = list_28un[idx_6aod]\n        if ( ( XY [ i ] [ 0 ] < Xmin ) or ( XY [ i ] [ 0 ] > Xmax ) ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        if ( ( XY [ i ] [ 1 ] < Ymin ) or ( XY [ i ] [ 1 ] > Ymax ) ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_6aod = idx_6aod + 1", "id": "Add_IndependentVar_sample_from_POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS_to_224", "old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS"}
{"code": "def isPossibleTriangle ( arr , N ) :\n    arr = arr [ : N ]\n    if N < 3 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return False\n    arr.sort ( )\n    idx_mgv8 = 0\n    list_k7bl = range ( N - 2 )\n    while idx_mgv8 < len(list_k7bl):\n        i = list_k7bl[idx_mgv8]\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            return True\n        idx_mgv8 = idx_mgv8 + 1\n    var_32k = 45\n    return False", "id": "Add_IndependentVar_sample_from_POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES_to_225", "old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES"}
{"code": "def isPrime ( p ) :\n    checkNumber = 2 ** p - 1\n    var_eh0 = 71\n    nextval = 4 % checkNumber\n    idx_l13q = 0\n    list_rc5l = range ( 1 , p - 1 )\n    while idx_l13q < len(list_rc5l):\n        i = list_rc5l[idx_l13q]\n        nextval = ( nextval * nextval - 2 ) % checkNumber\n        idx_l13q = idx_l13q + 1\n    if ( nextval == 0 ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))): return True\n    else : return False", "id": "Add_IndependentVar_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_226", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def isPrime ( n ) :\n    if ( n <= 1 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return False\n    idx_4b92 = 0\n    list_sg8m = range ( 2 , n )\n    while idx_4b92 < len(list_sg8m):\n        i = list_sg8m[idx_4b92]\n        if ( n % i == 0 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return False\n        idx_4b92 = idx_4b92 + 1\n    var_8lo = 80\n    return True", "id": "Add_IndependentVar_sample_from_PRIME_NUMBERS_to_227", "old_id": "PRIME_NUMBERS"}
{"code": "def noAdjacentDup ( s ) :\n    n = len ( s )\n    idx_v85z = 0\n    list_azli = range ( 1 , n )\n    while idx_v85z < len(list_azli):\n        i = list_azli[idx_v85z]\n        if ( s [ i ] == s [ i - 1 ] ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            s [ i ] = \"a\"\n            while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and s [ i ] == s [ i + 1 ] ) ) :\n                s [ i ] += 1\n            i += 1\n        idx_v85z = idx_v85z + 1\n    return s\n    var_7dl = 38", "id": "Add_IndependentVar_sample_from_PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES_to_228", "old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES"}
{"code": "def antiSpiralTraversal ( m , n , a ) :\n    k = 0\n    l = 0\n    stk = [ ]\n    while ( k <= m and l <= n ) :\n        idx_6jxy = 0\n        list_8n3f = range ( l , n + 1 )\n        while idx_6jxy < len(list_8n3f):\n            i = list_8n3f[idx_6jxy]\n            stk.append ( a [ k ] [ i ] )\n            idx_6jxy = idx_6jxy + 1\n        k += 1\n        idx_nc5g = 0\n        list_75pi = range ( k , m + 1 )\n        while idx_nc5g < len(list_75pi):\n            i = list_75pi[idx_nc5g]\n            stk.append ( a [ i ] [ n ] )\n            idx_nc5g = idx_nc5g + 1\n        n -= 1\n        if ( k <= m ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            idx_i7zv = 0\n            list_9iy1 = range ( n , l - 1 , - 1 )\n            while idx_i7zv < len(list_9iy1):\n                i = list_9iy1[idx_i7zv]\n                stk.append ( a [ m ] [ i ] )\n                idx_i7zv = idx_i7zv + 1\n            m -= 1\n        if ( l <= n ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            idx_sjei = 0\n            list_r5qy = range ( m , k - 1 , - 1 )\n            while idx_sjei < len(list_r5qy):\n                i = list_r5qy[idx_sjei]\n                stk.append ( a [ i ] [ l ] )\n                idx_sjei = idx_sjei + 1\n            l += 1\n    while len ( stk ) != 0 :\n        print ( str ( stk [ - 1 ] ) , end = \" \" )\n        stk.pop ( )\n    var_q52 = 49", "id": "Add_IndependentVar_sample_from_PRINT_MATRIX_ANTISPIRAL_FORM_to_229", "old_id": "PRINT_MATRIX_ANTISPIRAL_FORM"}
{"code": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    idx_yp67 = 0\n    list_snxl = range ( n )\n    var_z5u = 100\n    while idx_yp67 < len(list_snxl):\n        i = list_snxl[idx_yp67]\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n        idx_yp67 = idx_yp67 + 1\n    ans = sys.maxsize\n    idx_l7it = 0\n    list_7lm2 = range ( n )\n    while idx_l7it < len(list_7lm2):\n        i = list_7lm2[idx_l7it]\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n        idx_l7it = idx_l7it + 1\n    return ans", "id": "Add_IndependentVar_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_230", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    var_0uk = 91\n    idx_p2it = 0\n    list_ti2l = range ( n )\n    while idx_p2it < len(list_ti2l):\n        i = list_ti2l[idx_p2it]\n        bestIdx = - 1\n        idx_7ufk = 0\n        list_236w = range ( m )\n        while idx_7ufk < len(list_236w):\n            j = list_236w[idx_7ufk]\n            if blockSize [ j ] >= processSize [ i ] and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n            idx_7ufk = idx_7ufk + 1\n        if bestIdx != - 1 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n        idx_p2it = idx_p2it + 1\n    print ( \"Process No.Process Size     Block no.\" )\n    idx_gh0q = 0\n    list_sai5 = range ( n )\n    while idx_gh0q < len(list_sai5):\n        i = list_sai5[idx_gh0q]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n        idx_gh0q = idx_gh0q + 1", "id": "Add_IndependentVar_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_231", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def binaryToDecimal ( n ) :\n    num = n\n    dec_value = 0\n    var_kf2 = 17\n    base1 = 1\n    len1 = len ( num )\n    idx_d30o = 0\n    list_3w6n = range ( len1 - 1 , - 1 , - 1 )\n    while idx_d30o < len(list_3w6n):\n        i = list_3w6n[idx_d30o]\n        if ( num [ i ] == '1' ) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            dec_value += base1\n        base1 = base1 * 2\n        idx_d30o = idx_d30o + 1\n    return dec_value", "id": "Add_IndependentVar_sample_from_PROGRAM_BINARY_DECIMAL_CONVERSION_1_to_232", "old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1"}
{"code": "def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    var_g6z = 40\n    index = 0\n    idx_76t1 = 0\n    list_mclp = word_list\n    while idx_76t1 < len(list_mclp):\n        i = list_mclp[idx_76t1]\n        if i == word and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            word_list [ index ] = stars\n        index += 1\n        idx_76t1 = idx_76t1 + 1\n    result = ' '.join ( word_list )\n    return result", "id": "Add_IndependentVar_sample_from_PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE_to_233", "old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE"}
{"code": "def arraySortedOrNot ( arr , n ) :\n    if ( n == 0 or n == 1 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return True\n    idx_fbo7 = 0\n    var_e9m = 70\n    list_yb73 = range ( 1 , n )\n    while idx_fbo7 < len(list_yb73):\n        i = list_yb73[idx_fbo7]\n        if ( arr [ i - 1 ] > arr [ i ] ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            return False\n        idx_fbo7 = idx_fbo7 + 1\n    return True", "id": "Add_IndependentVar_sample_from_PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1_to_234", "old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1"}
{"code": "def isNumber ( s ) :\n    idx_52zk = 0\n    list_digh = range ( len ( s ) )\n    while idx_52zk < len(list_digh):\n        i = list_digh[idx_52zk]\n        if s [ i ].isdigit ( ) != True and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            return False\n        idx_52zk = idx_52zk + 1\n    var_eyd = 22\n    return True", "id": "Add_IndependentVar_sample_from_PROGRAM_CHECK_INPUT_INTEGER_STRING_to_235", "old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != 10 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        return False\n    var_58f = 24\n    _sum = 0\n    idx_61dg = 0\n    list_lime = range ( 9 )\n    while idx_61dg < len(list_lime):\n        i = list_lime[idx_61dg]\n        if 0 <= int ( isbn [ i ] ) <= 9 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            _sum += int ( isbn [ i ] ) * ( 10 - i )\n        else :\n            return False\n        idx_61dg = idx_61dg + 1\n    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        return False\n    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )\n    return ( _sum % 11 == 0 )", "id": "Add_IndependentVar_sample_from_PROGRAM_CHECK_ISBN_to_236", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def count ( s , c ) :\n    res = 0\n    var_4rc = 26\n    idx_mtr3 = 0\n    list_c0zo = range ( len ( s ) )\n    while idx_mtr3 < len(list_c0zo):\n        i = list_c0zo[idx_mtr3]\n        if ( s [ i ] == c ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            res = res + 1\n        idx_mtr3 = idx_mtr3 + 1\n    return res", "id": "Add_IndependentVar_sample_from_PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING_to_237", "old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING"}
{"code": "def isIdentity ( mat , N ) :\n    idx_ewcr = 0\n    list_emg1 = range ( N )\n    var_swy = 10\n    while idx_ewcr < len(list_emg1):\n        row = list_emg1[idx_ewcr]\n        idx_jdk4 = 0\n        list_jcsb = range ( N )\n        while idx_jdk4 < len(list_jcsb):\n            col = list_jcsb[idx_jdk4]\n            if ( row == col and mat [ row ] [ col ] != 1 ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                return False\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False\n            idx_jdk4 = idx_jdk4 + 1\n        idx_ewcr = idx_ewcr + 1\n    return True", "id": "Add_IndependentVar_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_238", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def isSymmetric ( mat , N ) :\n    idx_pei8 = 0\n    var_wj5 = 33\n    list_gd1z = range ( N )\n    while idx_pei8 < len(list_gd1z):\n        i = list_gd1z[idx_pei8]\n        idx_fw70 = 0\n        list_7cnp = range ( N )\n        while idx_fw70 < len(list_7cnp):\n            j = list_7cnp[idx_fw70]\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                return False\n            idx_fw70 = idx_fw70 + 1\n        idx_pei8 = idx_pei8 + 1\n    return True", "id": "Add_IndependentVar_sample_from_PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC_to_239", "old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    var_7z4 = 48\n    idx_rzwy = 0\n    list_u87b = range ( n )\n    while idx_rzwy < len(list_u87b):\n        i = list_u87b[idx_rzwy]\n        wstIdx = - 1\n        idx_reb7 = 0\n        list_k1rv = range ( m )\n        while idx_reb7 < len(list_k1rv):\n            j = list_k1rv[idx_reb7]\n            if blockSize [ j ] >= processSize [ i ] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                if wstIdx == - 1 :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n            idx_reb7 = idx_reb7 + 1\n        if wstIdx != - 1 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n        idx_rzwy = idx_rzwy + 1\n    print ( \"Process No.Process Size Block no.\" )\n    idx_746e = 0\n    list_i58y = range ( n )\n    while idx_746e < len(list_i58y):\n        i = list_i58y[idx_746e]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n        idx_746e = idx_746e + 1", "id": "Add_IndependentVar_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_240", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    idx_j4v2 = 0\n    var_3uo = 33\n    list_bzkn = range ( n )\n    while idx_j4v2 < len(list_bzkn):\n        i = list_bzkn[idx_j4v2]\n        if ( arr [ i ] >= x and arr [ i ] <= y ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            count += 1\n        idx_j4v2 = idx_j4v2 + 1\n    return count", "id": "Add_IndependentVar_sample_from_QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE_to_241", "old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE"}
{"code": "def allCharactersSame ( s ) :\n    n = len ( s )\n    var_9kl = 41\n    idx_xsn8 = 0\n    list_xcbm = range ( 1 , n )\n    while idx_xsn8 < len(list_xcbm):\n        i = list_xcbm[idx_xsn8]\n        if s [ i ] != s [ 0 ] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return False\n        idx_xsn8 = idx_xsn8 + 1\n    return True", "id": "Add_IndependentVar_sample_from_QUICK_WAY_CHECK_CHARACTERS_STRING_to_242", "old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING"}
{"code": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    idx_qcjl = 0\n    list_qlc4 = range ( n )\n    while idx_qcjl < len(list_qlc4):\n        i = list_qlc4[idx_qcjl]\n        if flag is True and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n        idx_qcjl = idx_qcjl + 1\n    idx_kayu = 0\n    list_f9zh = range ( n )\n    var_b7m = 9\n    while idx_kayu < len(list_f9zh):\n        i = list_f9zh[idx_kayu]\n        arr [ i ] = temp [ i ]\n        idx_kayu = idx_kayu + 1\n    return arr", "id": "Add_IndependentVar_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_243", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = n - 1\n    min_idx = 0\n    max_elem = arr [ n - 1 ] + 1\n    idx_agwf = 0\n    list_s91o = range ( 0 , n )\n    while idx_agwf < len(list_s91o):\n        i = list_s91o[idx_agwf]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n        idx_agwf = idx_agwf + 1\n    var_35v = 84\n    idx_nwmi = 0\n    list_mhvg = range ( 0 , n )\n    while idx_nwmi < len(list_mhvg):\n        i = list_mhvg[idx_nwmi]\n        arr [ i ] = int ( arr [ i ] / max_elem )\n        idx_nwmi = idx_nwmi + 1", "id": "Add_IndependentVar_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_244", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def rearrange ( arr , n ) :\n    i = - 1\n    var_wgs = 11\n    idx_gyjb = 0\n    list_zwol = range ( n )\n    while idx_gyjb < len(list_zwol):\n        j = list_zwol[idx_gyjb]\n        if ( arr [ j ] < 0 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        idx_gyjb = idx_gyjb + 1\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2", "id": "Add_IndependentVar_sample_from_REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH_to_245", "old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH"}
{"code": "def remainderWith7 ( num ) :\n    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]\n    series_index = 0\n    result = 0\n    idx_ojkn = 0\n    list_mgfv = range ( ( len ( num ) - 1 ) , - 1 , - 1 )\n    var_xzw = 91\n    while idx_ojkn < len(list_mgfv):\n        i = list_mgfv[idx_ojkn]\n        digit = ord ( num [ i ] ) - 48\n        result += digit * series [ series_index ]\n        series_index = ( series_index + 1 ) % 6\n        result %= 7\n        idx_ojkn = idx_ojkn + 1\n    if ( result < 0 ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        result = ( result + 7 ) % 7\n    return result", "id": "Add_IndependentVar_sample_from_REMAINDER_7_LARGE_NUMBERS_to_246", "old_id": "REMAINDER_7_LARGE_NUMBERS"}
{"code": "def removeDuplicates ( S ) :\n    n = len ( S )\n    if ( n < 2 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return\n    j = 0\n    var_imz = 6\n    idx_o709 = 0\n    list_pmje = range ( 1 , n )\n    while idx_o709 < len(list_pmje):\n        i = list_pmje[idx_o709]\n        if ( S [ j ] != S [ i ] ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            j += 1\n            S [ j ] = S [ i ]\n        idx_o709 = idx_o709 + 1\n    j += 1\n    S = S [ : j ]", "id": "Add_IndependentVar_sample_from_REMOVE_CONSECUTIVE_DUPLICATES_STRING_to_247", "old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING"}
{"code": "def minRemovalsDP ( arr , n ) :\n    longest_start = - 1\n    longest_end = 0\n    idx_y0o5 = 0\n    list_fxom = range ( n )\n    var_cuq = 56\n    while idx_y0o5 < len(list_fxom):\n        start = list_fxom[idx_y0o5]\n        min = sys.maxsize\n        max = - sys.maxsize\n        idx_o0r9 = 0\n        list_ptsv = range ( start , n )\n        while idx_o0r9 < len(list_ptsv):\n            end = list_ptsv[idx_o0r9]\n            val = arr [ end ]\n            if ( val < min ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                min = val\n            if ( val > max ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                max = val\n            if ( 2 * min <= max ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                break\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                longest_start = start\n                longest_end = end\n            idx_o0r9 = idx_o0r9 + 1\n        idx_y0o5 = idx_y0o5 + 1\n    if ( longest_start == - 1 ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return n\n    return ( n - ( longest_end - longest_start + 1 ) )", "id": "Add_IndependentVar_sample_from_REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX_to_248", "old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    var_4qi = 56\n    idx_ugai = 0\n    list_kfqt = range ( l )\n    while idx_ugai < len(list_kfqt):\n        i = list_kfqt[idx_ugai]\n        if ( s [ i ] == c1 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n        idx_ugai = idx_ugai + 1\n    return s", "id": "Add_IndependentVar_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_249", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def countCommon ( mat , n ) :\n    res = 0\n    idx_pukj = 0\n    list_ky2n = range ( n )\n    while idx_pukj < len(list_ky2n):\n        i = list_ky2n[idx_pukj]\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            res = res + 1\n        idx_pukj = idx_pukj + 1\n    return res\n    var_mfl = 1", "id": "Add_IndependentVar_sample_from_ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX_to_250", "old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX"}
{"code": "def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    idx_8pcy = 0\n    list_akuh = arr\n    while idx_8pcy < len(list_akuh):\n        i = list_akuh[idx_8pcy]\n        print ( str ( i ) + \" \" , end = '' )\n        idx_8pcy = idx_8pcy + 1\n    var_089 = 54", "id": "Add_IndependentVar_sample_from_SEGREGATE_EVEN_ODD_NUMBERS_SET_3_to_251", "old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 1 ) ]\n    var_coy = 10\n    idx_dski = 0\n    list_jsk7 = range ( m + 1 )\n    while idx_dski < len(list_jsk7):\n        i = list_jsk7[idx_dski]\n        idx_pgk7 = 0\n        list_i3f8 = range ( n + 1 )\n        while idx_pgk7 < len(list_i3f8):\n            j = list_i3f8[idx_pgk7]\n            if i == 0 or j == 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                T [ i ] [ j ] = 0\n            elif i < j :\n                T [ i ] [ j ] = 0\n            elif j == 1 :\n                T [ i ] [ j ] = i\n            else :\n                T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i // 2 ] [ j - 1 ]\n            idx_pgk7 = idx_pgk7 + 1\n        idx_dski = idx_dski + 1\n    return T [ m ] [ n ]", "id": "Add_IndependentVar_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_252", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    idx_k1g8 = 0\n    list_d9ut = range ( 0 , size )\n    var_7qf = 72\n    while idx_k1g8 < len(list_d9ut):\n        i = list_d9ut[idx_k1g8]\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            max_ending_here = 0\n            s = i + 1\n        idx_k1g8 = idx_k1g8 + 1\n    return ( end - start + 1 )", "id": "Add_IndependentVar_sample_from_SIZE_SUBARRAY_MAXIMUM_SUM_to_253", "old_id": "SIZE_SUBARRAY_MAXIMUM_SUM"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    idx_io4z = 0\n    list_z82j = range ( n )\n    while idx_io4z < len(list_z82j):\n        i = list_z82j[idx_io4z]\n        arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n        idx_io4z = idx_io4z + 1\n    index = - ( sys.maxsize - 1 )\n    maximum = - ( sys.maxsize - 1 )\n    idx_odhb = 0\n    list_ha9g = range ( n )\n    while idx_odhb < len(list_ha9g):\n        i = list_ha9g[idx_odhb]\n        if maximum < arr [ i ] and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            index = i\n            maximum = arr [ i ]\n        idx_odhb = idx_odhb + 1\n    i = 0\n    j = n - 1\n    new_arr = [ 0 ] * n\n    var_8ry = 5\n    k = 0\n    while i < index and j > index :\n        if arr [ i ] < arr [ j ] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            new_arr [ k ] = arr [ i ]\n            k += 1\n            i += 1\n        else :\n            new_arr [ k ] = arr [ j ]\n            k += 1\n            j -= 1\n    while i < index :\n        new_arr [ k ] = arr [ i ]\n        k += 1\n        i += 1\n    while j > index :\n        new_arr [ k ] = arr [ j ]\n        k += 1\n        j -= 1\n        new_arr [ n - 1 ] = maximum\n    idx_snrx = 0\n    list_7z36 = range ( n )\n    while idx_snrx < len(list_7z36):\n        i = list_7z36[idx_snrx]\n        arr [ i ] = new_arr [ i ]\n        idx_snrx = idx_snrx + 1", "id": "Add_IndependentVar_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_254", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def sortInWave ( arr , n ) :\n    idx_odwy = 0\n    var_yrq = 63\n    list_toys = range ( 0 , n , 2 )\n    while idx_odwy < len(list_toys):\n        i = list_toys[idx_odwy]\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n        idx_odwy = idx_odwy + 1", "id": "Add_IndependentVar_sample_from_SORT_ARRAY_WAVE_FORM_2_1_to_255", "old_id": "SORT_ARRAY_WAVE_FORM_2_1"}
{"code": "def twoWaySort ( arr , n ) :\n    idx_m2vc = 0\n    list_swc5 = range ( 0 , n )\n    while idx_m2vc < len(list_swc5):\n        i = list_swc5[idx_m2vc]\n        if ( arr [ i ] & 1 ) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            arr [ i ] *= - 1\n        idx_m2vc = idx_m2vc + 1\n    arr.sort ( )\n    idx_la84 = 0\n    list_ycrp = range ( 0 , n )\n    var_uoi = 66\n    while idx_la84 < len(list_ycrp):\n        i = list_ycrp[idx_la84]\n        if ( arr [ i ] & 1 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            arr [ i ] *= - 1\n        idx_la84 = idx_la84 + 1", "id": "Add_IndependentVar_sample_from_SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1_to_256", "old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    var_8sg = 12\n    idx_rp09 = 0\n    list_krt9 = range ( n )\n    while idx_rp09 < len(list_krt9):\n        i = list_krt9[idx_rp09]\n        if ( ( i % 2 ) == 0 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n        idx_rp09 = idx_rp09 + 1\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    idx_3udi = 0\n    list_587r = range ( len ( evenArr ) )\n    while idx_3udi < len(list_587r):\n        j = list_587r[idx_3udi]\n        arr [ i ] = evenArr [ j ]\n        i += 1\n        idx_3udi = idx_3udi + 1\n    idx_1qkl = 0\n    list_yfas = range ( len ( oddArr ) )\n    while idx_1qkl < len(list_yfas):\n        j = list_yfas[idx_1qkl]\n        arr [ i ] = oddArr [ j ]\n        i += 1\n        idx_1qkl = idx_1qkl + 1", "id": "Add_IndependentVar_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_257", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 )\n    idx_l0m6 = 0\n    list_klc6 = range ( n )\n    while idx_l0m6 < len(list_klc6):\n        i = list_klc6[idx_l0m6]\n        idx_f4a5 = 0\n        list_fl58 = range ( W , -1 , - 1 )\n        while idx_f4a5 < len(list_fl58):\n            j = list_fl58[idx_f4a5]\n            if j - wt [ i ] < W + 1 and j - wt [ i ] >= 0 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] )\n            idx_f4a5 = idx_f4a5 + 1\n        idx_l0m6 = idx_l0m6 + 1\n    var_uq5 = 39\n    return dp [ W ]", "id": "Add_IndependentVar_sample_from_SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1_to_258", "old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1"}
{"code": "def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    idx_fwmr = 0\n    list_o71f = range ( 0 , row )\n    while idx_fwmr < len(list_o71f):\n        i = list_o71f[idx_fwmr]\n        idx_gcon = 0\n        list_q2ol = range ( 0 , column )\n        while idx_gcon < len(list_q2ol):\n            j = list_q2ol[idx_gcon]\n            if ( i == j ) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_gcon = idx_gcon + 1\n        idx_fwmr = idx_fwmr + 1\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    idx_xgl9 = 0\n    list_rjwg = range ( 0 , row )\n    var_mwp = 95\n    while idx_xgl9 < len(list_rjwg):\n        i = list_rjwg[idx_xgl9]\n        idx_278u = 0\n        list_o2l4 = range ( 0 , column )\n        while idx_278u < len(list_o2l4):\n            j = list_o2l4[idx_278u]\n            if ( i + j == column - 1 ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_278u = idx_278u + 1\n        idx_xgl9 = idx_xgl9 + 1", "id": "Add_IndependentVar_sample_from_SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_to_259", "old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS"}
{"code": "def firstLetterWord ( str ) :\n    result = \"\"\n    var_ytb = 7\n    v = True\n    idx_kt2v = 0\n    list_9vq4 = range ( len ( str ) )\n    while idx_kt2v < len(list_9vq4):\n        i = list_9vq4[idx_kt2v]\n        if ( str [ i ] == ' ' ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n        idx_kt2v = idx_kt2v + 1\n    return result", "id": "Add_IndependentVar_sample_from_STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES_to_260", "old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ]\n    idx_6p53 = 0\n    var_q54 = 97\n    list_69a8 = range ( n + 1 )\n    while idx_6p53 < len(list_69a8):\n        i = list_69a8[idx_6p53]\n        idx_5emw = 0\n        list_y5uh = range ( sum + 1 )\n        while idx_5emw < len(list_y5uh):\n            j = list_y5uh[idx_5emw]\n            if ( j == 0 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                subset [ i % 2 ] [ j ] = True\n            elif ( i == 0 ) :\n                subset [ i % 2 ] [ j ] = False\n            elif ( arr [ i - 1 ] <= j ) :\n                subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ]\n            else :\n                subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ]\n            idx_5emw = idx_5emw + 1\n        idx_6p53 = idx_6p53 + 1\n    return subset [ n % 2 ] [ sum ]", "id": "Add_IndependentVar_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_261", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def binomialCoeffSum ( n ) :\n    C = [ [ 0 ] * ( n + 2 ) for i in range ( 0 , n + 2 ) ]\n    idx_7deq = 0\n    list_owr5 = range ( 0 , n + 1 )\n    while idx_7deq < len(list_owr5):\n        i = list_owr5[idx_7deq]\n        idx_vna8 = 0\n        list_4vcq = range ( 0 , min ( i , n ) + 1 )\n        while idx_vna8 < len(list_4vcq):\n            j = list_4vcq[idx_vna8]\n            if ( j == 0 or j == i ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            idx_vna8 = idx_vna8 + 1\n        idx_7deq = idx_7deq + 1\n    sum = 0\n    idx_e79v = 0\n    var_cvz = 53\n    list_hm45 = range ( 0 , n + 1 )\n    while idx_e79v < len(list_hm45):\n        i = list_hm45[idx_e79v]\n        sum += C [ n ] [ i ]\n        idx_e79v = idx_e79v + 1\n    return sum", "id": "Add_IndependentVar_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_262", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def divSum ( n ) :\n    result = 0\n    idx_2x8h = 0\n    list_qocl = range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 )\n    while idx_2x8h < len(list_qocl):\n        i = list_qocl[idx_2x8h]\n        if ( n % i == 0 ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n        idx_2x8h = idx_2x8h + 1\n    var_5pg = 63\n    return ( result + n + 1 )", "id": "Add_IndependentVar_sample_from_SUM_FACTORS_NUMBER_to_263", "old_id": "SUM_FACTORS_NUMBER"}
{"code": "def calculateSum ( n ) :\n    if ( n <= 0 ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    idx_k9i2 = 0\n    list_jd0b = range ( 2 , n + 1 )\n    while idx_k9i2 < len(list_jd0b):\n        i = list_jd0b[idx_k9i2]\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n        idx_k9i2 = idx_k9i2 + 1\n    var_6ul = 93\n    return sm", "id": "Add_IndependentVar_sample_from_SUM_FIBONACCI_NUMBERS_to_264", "old_id": "SUM_FIBONACCI_NUMBERS"}
{"code": "def findSum ( n ) :\n    ans = 0\n    temp = 0\n    idx_mh21 = 0\n    var_xwd = 85\n    list_931x = range ( 1 , n + 1 )\n    while idx_mh21 < len(list_931x):\n        i = list_931x[idx_mh21]\n        if temp < n and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n        idx_mh21 = idx_mh21 + 1\n    return ans", "id": "Add_IndependentVar_sample_from_SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1_to_265", "old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    var_ulb = 56\n    idx_ba7z = 0\n    list_cy64 = range ( n )\n    while idx_ba7z < len(list_cy64):\n        i = list_cy64[idx_ba7z]\n        if ( tree [ i ] == '(' ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n        idx_ba7z = idx_ba7z + 1\n    return sum", "id": "Add_IndependentVar_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_266", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def sumofsquare ( n ) :\n    C = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_7rux = 0\n    list_rij5 = range ( 0 , n + 1 )\n    while idx_7rux < len(list_rij5):\n        i = list_rij5[idx_7rux]\n        idx_p056 = 0\n        list_uajf = range ( 0 , min ( i , n ) + 1 )\n        while idx_p056 < len(list_uajf):\n            j = list_uajf[idx_p056]\n            if ( j == 0 or j == i ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            idx_p056 = idx_p056 + 1\n        idx_7rux = idx_7rux + 1\n    sum = 0\n    idx_sjhr = 0\n    list_hb83 = range ( 0 , n + 1 )\n    while idx_sjhr < len(list_hb83):\n        i = list_hb83[idx_sjhr]\n        sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n        idx_sjhr = idx_sjhr + 1\n    return sum\n    var_x7p = 39", "id": "Add_IndependentVar_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_267", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    var_l7j = 31\n    str1 = str1[:: - 1]\n    str2 = str2[:: - 1]\n    carry = 0\n    idx_yqzc = 0\n    list_x7hc = range(n1)\n    while idx_yqzc < len(list_x7hc):\n        i = list_x7hc[idx_yqzc]\n        sum = ((ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry))\n        if sum < 0 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        carry = int(sum / 10)\n        idx_yqzc = idx_yqzc + 1\n    idx_y0l7 = 0\n    list_csav = range(n1, n2)\n    while idx_y0l7 < len(list_csav):\n        i = list_csav[idx_y0l7]\n        sum = ((ord(str2[i]) - 48) + carry)\n        if sum < 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        carry = (int)(sum / 10)\n        idx_y0l7 = idx_y0l7 + 1\n    if (carry) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        str += chr(carry + 48)\n    str = str[:: - 1]\n    return str", "id": "Add_IndependentVar_sample_from_SUM_TWO_LARGE_NUMBERS_to_268", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = 0\n    idx_5qul = 0\n    list_1gvs = range ( n )\n    var_31w = 60\n    while idx_5qul < len(list_1gvs):\n        i = list_1gvs[idx_5qul]\n        left = 0\n        right = 0\n        idx_q1rb = 0\n        list_vhw2 = range ( i - 1 , - 1 , - 1 )\n        while idx_q1rb < len(list_vhw2):\n            j = list_vhw2[idx_q1rb]\n            if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                left += 1\n            else :\n                break\n            idx_q1rb = idx_q1rb + 1\n        idx_8e7q = 0\n        list_2e6v = range ( i + 1 , n )\n        while idx_8e7q < len(list_2e6v):\n            j = list_2e6v[idx_8e7q]\n            if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                right += 1\n            else :\n                break\n            idx_8e7q = idx_8e7q + 1\n        sum += max ( right , left ) + 1\n        idx_5qul = idx_5qul + 1\n    return sum", "id": "Add_IndependentVar_sample_from_TEMPLE_OFFERINGS_to_269", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    idx_rk8q = 0\n    list_krel = range ( 1 , arr_size )\n    while idx_rk8q < len(list_krel):\n        i = list_krel[idx_rk8q]\n        if ( arr [ i ] > first ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            first = arr [ i ]\n        idx_rk8q = idx_rk8q + 1\n    second = - sys.maxsize\n    var_v8r = 34\n    idx_opi3 = 0\n    list_o54n = range ( 0 , arr_size )\n    while idx_opi3 < len(list_o54n):\n        i = list_o54n[idx_opi3]\n        if ( arr [ i ] > second and arr [ i ] < first ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            second = arr [ i ]\n        idx_opi3 = idx_opi3 + 1\n    third = - sys.maxsize\n    idx_j9sy = 0\n    list_z2eq = range ( 0 , arr_size )\n    while idx_j9sy < len(list_z2eq):\n        i = list_z2eq[idx_j9sy]\n        if ( arr [ i ] > third and arr [ i ] < second ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            third = arr [ i ]\n        idx_j9sy = idx_j9sy + 1\n    print ( \"The Third Largest\" , \"element is\" , third )", "id": "Add_IndependentVar_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_to_270", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    second = - sys.maxsize\n    var_y5s = 13\n    third = - sys.maxsize\n    idx_cvx5 = 0\n    list_6qko = range ( 1 , arr_size )\n    while idx_cvx5 < len(list_6qko):\n        i = list_6qko[idx_cvx5]\n        if ( arr [ i ] > first ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            third = second\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            third = second\n            second = arr [ i ]\n        elif ( arr [ i ] > third ) :\n            third = arr [ i ]\n        idx_cvx5 = idx_cvx5 + 1\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "Add_IndependentVar_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_271", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def countUnique ( mat , n , m ) :\n    rowsum = [ 0 ] * n\n    colsum = [ 0 ] * m\n    idx_igpz = 0\n    list_4b0m = range ( n )\n    while idx_igpz < len(list_4b0m):\n        i = list_4b0m[idx_igpz]\n        idx_j7iz = 0\n        list_wifx = range ( m )\n        while idx_j7iz < len(list_wifx):\n            j = list_wifx[idx_j7iz]\n            if ( mat [ i ] [ j ] != 0 ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n                rowsum [ i ] += 1\n                colsum [ j ] += 1\n            idx_j7iz = idx_j7iz + 1\n        idx_igpz = idx_igpz + 1\n    uniquecount = 0\n    idx_4b7y = 0\n    var_l7h = 53\n    list_9ay1 = range ( n )\n    while idx_4b7y < len(list_9ay1):\n        i = list_9ay1[idx_4b7y]\n        idx_m1vg = 0\n        list_gtf4 = range ( m )\n        while idx_m1vg < len(list_gtf4):\n            j = list_gtf4[idx_m1vg]\n            if ( mat [ i ] [ j ] != 0 and rowsum [ i ] == 1 and colsum [ j ] == 1 ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n                uniquecount += 1\n            idx_m1vg = idx_m1vg + 1\n        idx_4b7y = idx_4b7y + 1\n    return uniquecount", "id": "Add_IndependentVar_sample_from_UNIQUE_CELLS_BINARY_MATRIX_to_272", "old_id": "UNIQUE_CELLS_BINARY_MATRIX"}
{"code": "def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    idx_p7vz = 0\n    var_ngp = 3\n    list_8c1t = range ( 0 , n , 1 )\n    while idx_p7vz < len(list_8c1t):\n        i = list_8c1t[idx_p7vz]\n        if ( str [ i ] == '1' ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            one_count += 1\n        else :\n            zero_count += 1\n        idx_p7vz = idx_p7vz + 1\n    if ( one_count % 2 == 0 ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return zero_count\n    return one_count", "id": "Add_IndependentVar_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_273", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def countTransformation ( a , b ) :\n    n = len ( a )\n    m = len ( b )\n    if m == 0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        return 1\n    dp = [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ]\n    var_jix = 88\n    idx_v0rg = 0\n    list_afbr = range ( m )\n    while idx_v0rg < len(list_afbr):\n        i = list_afbr[idx_v0rg]\n        idx_1c4x = 0\n        list_1g97 = range ( i , n )\n        while idx_1c4x < len(list_1g97):\n            j = list_1g97[idx_1c4x]\n            if i == 0 and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                if j == 0 :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = 1\n                    else :\n                        dp [ i ] [ j ] = 0\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            else :\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] )\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            idx_1c4x = idx_1c4x + 1\n        idx_v0rg = idx_v0rg + 1\n    return dp [ m - 1 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_274", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
