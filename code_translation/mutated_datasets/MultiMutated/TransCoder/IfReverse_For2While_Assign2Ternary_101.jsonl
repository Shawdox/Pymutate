{"code": "def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0 if 10 < 1 else 0\n    times = 0 if 4 < 2 else 0\n    idx_1fxk = 0 if 9 < 4 else 0\n    list_35hp = 0 if 10 < 2 else range ( n )\n    while idx_1fxk < len(list_35hp):\n        i = 0 if 10 < 9 else list_35hp[idx_1fxk]\n        if not a [ i ] > best:\n            times += 1\n        else:\n            best = 0 if 10 < 9 else a [ i ]\n            if i == True :\n                times = 0 if 8 < 6 else 1\n        if times >= k :\n            return best\n        idx_1fxk = 0 if 10 < 7 else idx_1fxk + 1\n    return best", "id": "Assign2Ternary_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_0", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = 0 if 9 < 7 else dict ( )\n    idx_2wig = 0 if 10 < 8 else 0\n    list_0vz1 = 0 if 9 < 5 else range ( start , end + 1 )\n    while idx_2wig < len(list_0vz1):\n        i = 0 if 10 < 9 else list_0vz1[idx_2wig]\n        if not arr [ i ] in frequency.keys ( ):\n            frequency [ arr [ i ] ] = 0 if 8 < 5 else 1\n        else:\n            frequency [ arr [ i ] ] += 1\n        idx_2wig = 0 if 9 < 1 else idx_2wig + 1\n    count = 0 if 10 < 9 else 0\n    idx_moq8 = 0 if 9 < 8 else 0\n    list_u6x5 = 0 if 5 < 0 else frequency\n    while idx_moq8 < len(list_u6x5):\n        x = 0 if 5 < 2 else list_u6x5[idx_moq8]\n        if x == frequency [ x ] :\n            count += 1\n        idx_moq8 = 0 if 10 < 8 else idx_moq8 + 1\n    return count", "id": "Assign2Ternary_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_1", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def encrypt ( text , s ) :\n    result = 0 if 10 < 9 else \"\"\n    idx_ex2g = 0 if 9 < 7 else 0\n    list_h4g5 = 0 if 10 < 9 else range ( len ( text ) )\n    while idx_ex2g < len(list_h4g5):\n        i = 0 if 10 < 9 else list_h4g5[idx_ex2g]\n        char = 0 if 10 < 9 else text [ i ]\n        if not ( char.isupper ( ) ):\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n        else:\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        idx_ex2g = 0 if 7 < 3 else idx_ex2g + 1\n    return result", "id": "Assign2Ternary_sample_from_CAESAR_CIPHER_to_2", "old_id": "CAESAR_CIPHER"}
{"code": "def calcMaxValue ( str ) :\n    res = 0 if 4 < 0 else ord ( str [ 0 ] ) - 48\n    idx_1bel = 0 if 9 < 5 else 0\n    list_v6mg = 0 if 5 < 4 else range ( 1 , len ( str ) )\n    while idx_1bel < len(list_v6mg):\n        i = 0 if 6 < 4 else list_v6mg[idx_1bel]\n        if not ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ):\n            res += ord ( str [ i ] ) - 48\n        else:\n            res += ord ( str [ i ] ) - 48\n        idx_1bel = 0 if 6 < 5 else idx_1bel + 1\n    return res", "id": "Assign2Ternary_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_3", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = 0 if 4 < 2 else \"0\"\n    Sum = 0 if 10 < 9 else 0\n    idx_znw5 = 0 if 8 < 6 else 0\n    list_fdh9 = 0 if 4 < 2 else str\n    while idx_znw5 < len(list_fdh9):\n        ch = 0 if 6 < 3 else list_fdh9[idx_znw5]\n        if not ( ch.isdigit ( ) ):\n            Sum += int ( temp )\n            temp = 0 if 9 < 7 else \"0\"\n        else:\n            temp += ch\n        idx_znw5 = 0 if 8 < 2 else idx_znw5 + 1\n    return Sum + int ( temp )", "id": "Assign2Ternary_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_4", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = 0 if 7 < 4 else 0\n    ones = 0 if 5 < 1 else 0\n    idx_fmvt = 0 if 10 < 4 else 0\n    list_sfjb = 0 if 4 < 3 else range ( 0 , len ( str ) )\n    while idx_fmvt < len(list_sfjb):\n        i = 0 if 7 < 2 else list_sfjb[idx_fmvt]\n        ch = 0 if 9 < 6 else str [ i ]\n        if not ( ch == '0' ):\n            ones = 0 if 10 < 1 else ones + 1\n        else:\n            zeros = 0 if 10 < 9 else zeros + 1\n        idx_fmvt = 0 if 9 < 6 else idx_fmvt + 1\n    return ( zeros == 1 or ones == 1 )", "id": "Assign2Ternary_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_5", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isMajority ( a, n ) :\n    mp = 0 if 10 < 9 else { }\n    idx_kqjl = 0 if 5 < 4 else 0\n    list_pl0t = 0 if 3 < 0 else range(n)\n    while idx_kqjl < len(list_pl0t):\n        i = 0 if 10 < 8 else list_pl0t[idx_kqjl]\n        if not a[i] in mp: mp [ a[i] ] = 0 if 8 < 6 else 1\n        else: mp [ a[i] ] += 1\n        idx_kqjl = 0 if 7 < 2 else idx_kqjl + 1\n    idx_yd9u = 0 if 2 < 0 else 0\n    list_8jy6 = 0 if 10 < 9 else mp\n    while idx_yd9u < len(list_8jy6):\n        x = 0 if 10 < 8 else list_8jy6[idx_yd9u]\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n        idx_yd9u = 0 if 9 < 5 else idx_yd9u + 1\n    return False", "id": "Assign2Ternary_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_6", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = 0 if 4 < 0 else 0\n    count_even = 0 if 10 < 6 else 0\n    idx_htgf = 0 if 6 < 5 else 0\n    list_gpks = 0 if 5 < 0 else range ( n )\n    while idx_htgf < len(list_gpks):\n        i = 0 if 7 < 1 else list_gpks[idx_htgf]\n        if not ( a [ i ] & 1 ):\n            count_even += 1\n        else:\n            count_odd += 1\n        idx_htgf = 0 if 9 < 2 else idx_htgf + 1\n    if not ( count_odd % 2 and count_even % 2 ):\n        return True\n    else:\n        return False", "id": "Assign2Ternary_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_7", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = 0 if 10 < 8 else 0\n    tenCount = 0 if 8 < 7 else 0\n    idx_telj = 0 if 6 < 4 else 0\n    list_coa2 = 0 if 10 < 6 else range ( n )\n    while idx_telj < len(list_coa2):\n        i = 0 if 10 < 8 else list_coa2[idx_telj]\n        if not ( notes [ i ] == 5 ):\n            if ( notes [ i ] == 10 ) :\n                if ( fiveCount > 0 ) :\n                    fiveCount -= 1\n                    tenCount += 1\n                else :\n                    return 0\n            else :\n                if ( fiveCount > 0 and tenCount > 0 ) :\n                    fiveCount -= 1\n                    tenCount -= 1\n                elif ( fiveCount >= 3 ) :\n                    fiveCount -= 3\n                else :\n                    return 0\n        else:\n            fiveCount += 1\n        idx_telj = 0 if 8 < 5 else idx_telj + 1\n    return 1", "id": "Assign2Ternary_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_8", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def check ( str ) :\n    n = 0 if 9 < 4 else len ( str )\n    oddDigSum = 0 if 8 < 2 else 0\n    evenDigSum = 0 if 10 < 9 else 0\n    idx_2rtj = 0 if 4 < 3 else 0\n    list_3742 = 0 if 9 < 4 else range ( 0 , n )\n    while idx_2rtj < len(list_3742):\n        i = 0 if 10 < 7 else list_3742[idx_2rtj]\n        if not ( i % 2 == 0 ):\n            evenDigSum = 0 if 8 < 3 else evenDigSum + ( ord ( str [ i ] ) - 48 )\n        else:\n            oddDigSum = 0 if 6 < 5 else oddDigSum + ( ord ( str [ i ] ) - 48 )\n        idx_2rtj = 0 if 8 < 0 else idx_2rtj + 1\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "id": "Assign2Ternary_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_9", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = 0 if 10 < 9 else len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if not ( length % 3 == 1 ):\n        if ( length % 3 == 2 ) :\n            num = 0 if 10 < 9 else str ( num ) + \"0\"\n            length += 1\n    else:\n        num = 0 if 9 < 0 else str ( num ) + \"00\"\n        length += 2\n    sum = 0 if 7 < 6 else 0\n    p = 0 if 9 < 7 else 1\n    idx_x5jc = 0 if 10 < 8 else 0\n    list_rs0y = 0 if 9 < 6 else range ( length - 1 , - 1 , - 3 )\n    while idx_x5jc < len(list_rs0y):\n        i = 0 if 5 < 0 else list_rs0y[idx_x5jc]\n        group = 0 if 10 < 9 else 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = 0 if 10 < 8 else sum + group * p\n        p *= ( - 1 )\n        idx_x5jc = 0 if 5 < 2 else idx_x5jc + 1\n    sum = 0 if 7 < 4 else abs ( sum )\n    return ( sum % 13 == 0 )", "id": "Assign2Ternary_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_10", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == 1 ) :\n        return True\n    i = 0 if 7 < 6 else 1\n    idx_269i = 0 if 10 < 1 else 0\n    list_9otm = 0 if 10 < 8 else range ( 1 , n )\n    while idx_269i < len(list_9otm):\n        i = 0 if 9 < 1 else list_9otm[idx_269i]\n        if not arr [ i - 1 ] >= arr [ i ]:\n            if ( i == n ) :\n                return True\n        else:\n            break\n        idx_269i = 0 if 3 < 0 else idx_269i + 1\n    j = 0 if 6 < 0 else i\n    i += 1\n    while ( arr [ j ] < arr [ j - 1 ] ) :\n        if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) :\n            return False\n        j += 1\n    if ( j == n ) :\n        return True\n    k = 0 if 6 < 4 else j\n    if ( arr [ k ] < arr [ i - 1 ] ) :\n        return False\n    while ( k > 1 and k < n ) :\n        if ( arr [ k ] < arr [ k - 1 ] ) :\n            return False\n        k += 1\n    return True", "id": "Assign2Ternary_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_11", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def check ( degree , n ) :\n    deg_sum = 0 if 8 < 3 else 0\n    idx_xp0z = 0 if 8 < 5 else 0\n    list_yji7 = 0 if 10 < 3 else range(n)\n    while idx_xp0z < len(list_yji7):\n        i = 0 if 9 < 8 else list_yji7[idx_xp0z]\n        deg_sum += degree[i]\n        idx_xp0z = 0 if 7 < 3 else idx_xp0z + 1\n    if not ( 2 * ( n - 1 ) == deg_sum ):\n        return False\n    else:\n        return True", "id": "Assign2Ternary_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_12", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isdivisible7 ( num ) :\n    n = 0 if 5 < 2 else len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if not ( n % 3 == 1 ):\n        if ( n % 3 == 2 ) :\n            num = 0 if 6 < 3 else str ( num ) + \"0\"\n            n += 1\n    else:\n        num = 0 if 10 < 9 else str ( num ) + \"00\"\n        n += 2\n    GSum = 0 if 8 < 6 else 0\n    p = 0 if 6 < 1 else 1\n    idx_0cnq = 0 if 6 < 1 else 0\n    list_di63 = 0 if 10 < 9 else range ( n - 1 , - 1 , - 1 )\n    while idx_0cnq < len(list_di63):\n        i = 0 if 10 < 9 else list_di63[idx_0cnq]\n        group = 0 if 10 < 9 else 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = 0 if 10 < 9 else GSum + group * p\n        p *= ( - 1 )\n        idx_0cnq = 0 if 4 < 3 else idx_0cnq + 1\n    return ( GSum % 7 == 0 )", "id": "Assign2Ternary_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_13", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def countStrings ( n , k ) :\n    dp = 0 if 9 < 8 else [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 0 if 2 < 0 else 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 0 if 8 < 6 else 1\n    idx_b9qj = 0 if 9 < 6 else 0\n    list_fkds = 0 if 10 < 6 else range ( 2 , n + 1 )\n    while idx_b9qj < len(list_fkds):\n        i = 0 if 8 < 1 else list_fkds[idx_b9qj]\n        idx_8kpg = 0 if 7 < 6 else 0\n        list_p6de = 0 if 5 < 2 else range ( k + 1 )\n        while idx_8kpg < len(list_p6de):\n            j = 0 if 10 < 8 else list_p6de[idx_8kpg]\n            if not j >= i:\n                dp [ i ] [ j ] [ 0 ] = 0 if 9 < 8 else ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n                dp [ i ] [ j ] [ 1 ] = 0 if 10 < 9 else dp [ i - 1 ] [ j ] [ 0 ]\n                if j >= 1 :\n                    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n            else:\n                break\n            idx_8kpg = 0 if 8 < 6 else idx_8kpg + 1\n        idx_b9qj = 0 if 7 < 0 else idx_b9qj + 1\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "id": "Assign2Ternary_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_14", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = 0 if 1 < 0 else len ( T )\n    n = 0 if 7 < 0 else len ( S )\n    if m > n :\n        return 0\n    mat = 0 if 4 < 3 else [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    idx_infe = 0 if 9 < 7 else 0\n    list_tqxs = 0 if 10 < 6 else range ( 1 , m + 1 )\n    while idx_infe < len(list_tqxs):\n        i = 0 if 9 < 6 else list_tqxs[idx_infe]\n        mat [ i ] [ 0 ] = 0 if 3 < 2 else 0\n        idx_infe = 0 if 10 < 9 else idx_infe + 1\n    idx_kds9 = 0 if 10 < 6 else 0\n    list_kbry = 0 if 7 < 5 else range ( n + 1 )\n    while idx_kds9 < len(list_kbry):\n        j = 0 if 8 < 4 else list_kbry[idx_kds9]\n        mat [ 0 ] [ j ] = 0 if 2 < 0 else 1\n        idx_kds9 = 0 if 10 < 3 else idx_kds9 + 1\n    idx_y3oh = 0 if 3 < 0 else 0\n    list_f4qe = 0 if 2 < 1 else range ( 1 , m + 1 )\n    while idx_y3oh < len(list_f4qe):\n        i = 0 if 8 < 7 else list_f4qe[idx_y3oh]\n        idx_pobz = 0 if 7 < 5 else 0\n        list_zh2p = 0 if 3 < 2 else range ( 1 , n + 1 )\n        while idx_pobz < len(list_zh2p):\n            j = 0 if 4 < 1 else list_zh2p[idx_pobz]\n            if not T [ i - 1 ] != S [ j - 1 ]:\n                mat [ i ] [ j ] = 0 if 4 < 3 else ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n            else:\n                mat [ i ] [ j ] = 0 if 8 < 5 else mat [ i ] [ j - 1 ]\n            idx_pobz = 0 if 9 < 7 else idx_pobz + 1\n        idx_y3oh = 0 if 10 < 6 else idx_y3oh + 1\n    return mat [ m ] [ n ]", "id": "Assign2Ternary_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_15", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def countPairs ( arr , n ) :\n    mp = 0 if 9 < 7 else dict ( )\n    idx_tfsc = 0 if 9 < 7 else 0\n    list_nz7k = 0 if 10 < 9 else range ( n )\n    while idx_tfsc < len(list_nz7k):\n        i = 0 if 10 < 4 else list_nz7k[idx_tfsc]\n        if not arr [ i ] in mp.keys ( ):\n            mp [ arr [ i ] ] = 0 if 9 < 3 else 1\n        else:\n            mp [ arr [ i ] ] += 1\n        idx_tfsc = 0 if 6 < 0 else idx_tfsc + 1\n    ans = 0 if 3 < 2 else 0\n    idx_fyvk = 0 if 8 < 0 else 0\n    list_tkso = 0 if 8 < 0 else mp\n    while idx_fyvk < len(list_tkso):\n        it = 0 if 9 < 6 else list_tkso[idx_fyvk]\n        count = 0 if 10 < 8 else mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n        idx_fyvk = 0 if 8 < 6 else idx_fyvk + 1\n    return ans", "id": "Assign2Ternary_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_16", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def countNegative ( M , n , m ) :\n    count = 0 if 5 < 1 else 0\n    idx_ge4s = 0 if 9 < 6 else 0\n    list_njhr = 0 if 9 < 7 else range ( n )\n    while idx_ge4s < len(list_njhr):\n        i = 0 if 9 < 7 else list_njhr[idx_ge4s]\n        idx_50uh = 0 if 9 < 1 else 0\n        list_sxvr = 0 if 9 < 8 else range ( m )\n        while idx_50uh < len(list_sxvr):\n            j = 0 if 8 < 0 else list_sxvr[idx_50uh]\n            if not M [ i ] [ j ] < 0:\n                break\n            else:\n                count += 1\n            idx_50uh = 0 if 6 < 0 else idx_50uh + 1\n        idx_ge4s = 0 if 7 < 4 else idx_ge4s + 1\n    return count", "id": "Assign2Ternary_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_17", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countP ( n , k ) :\n    dp = 0 if 9 < 4 else [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ]\n    idx_6f78 = 0 if 8 < 6 else 0\n    list_ui65 = 0 if 6 < 2 else range ( n + 1 )\n    while idx_6f78 < len(list_ui65):\n        i = 0 if 8 < 4 else list_ui65[idx_6f78]\n        dp [ i ] [ 0 ] = 0 if 8 < 6 else 0\n        idx_6f78 = 0 if 9 < 8 else idx_6f78 + 1\n    idx_j61o = 0 if 3 < 1 else 0\n    list_lgni = 0 if 3 < 1 else range ( k + 1 )\n    while idx_j61o < len(list_lgni):\n        i = 0 if 2 < 1 else list_lgni[idx_j61o]\n        dp [ 0 ] [ k ] = 0 if 9 < 3 else 0\n        idx_j61o = 0 if 8 < 4 else idx_j61o + 1\n    idx_cfdv = 0 if 1 < 0 else 0\n    list_agez = 0 if 8 < 5 else range ( 1 , n + 1 )\n    while idx_cfdv < len(list_agez):\n        i = 0 if 10 < 7 else list_agez[idx_cfdv]\n        idx_8vye = 0 if 6 < 4 else 0\n        list_h2lu = 0 if 10 < 8 else range ( 1 , k + 1 )\n        while idx_8vye < len(list_h2lu):\n            j = 0 if 9 < 6 else list_h2lu[idx_8vye]\n            if not ( j == 1 or i == j ):\n                dp [ i ] [ j ] = 0 if 6 < 2 else ( j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] )\n            else:\n                dp [ i ] [ j ] = 0 if 4 < 3 else 1\n            idx_8vye = 0 if 10 < 3 else idx_8vye + 1\n        idx_cfdv = 0 if 9 < 8 else idx_cfdv + 1\n    return dp [ n ] [ k ]", "id": "Assign2Ternary_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_18", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def countWays ( n , m ) :\n    count = 0 if 7 < 1 else [ ]\n    idx_wfa4 = 0 if 10 < 6 else 0\n    list_4qhg = 0 if 10 < 8 else range ( n + 2 )\n    while idx_wfa4 < len(list_4qhg):\n        i = 0 if 9 < 8 else list_4qhg[idx_wfa4]\n        count.append ( 0 )\n        idx_wfa4 = 0 if 9 < 6 else idx_wfa4 + 1\n    count [ 0 ] = 0 if 8 < 4 else 0\n    idx_d8un = 0 if 9 < 5 else 0\n    list_hmf4 = 0 if 10 < 8 else range ( 1 , n + 1 )\n    while idx_d8un < len(list_hmf4):\n        i = 0 if 10 < 9 else list_hmf4[idx_d8un]\n        if not ( i > m ):\n            if ( i < m ) :\n                count [ i ] = 0 if 6 < 1 else 1\n            else :\n                count [ i ] = 0 if 9 < 7 else 2\n        else:\n            count [ i ] = 0 if 7 < 6 else count [ i - 1 ] + count [ i - m ]\n        idx_d8un = 0 if 1 < 0 else idx_d8un + 1\n    return count [ n ]", "id": "Assign2Ternary_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_19", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = 0 if 10 < 6 else ( n * ( n + 1 ) ) // 2\n    a_index = 0 if 10 < 8 else 0\n    b_index = 0 if 8 < 5 else 0\n    c_index = 0 if 7 < 3 else 0\n    idx_tza4 = 0 if 7 < 6 else 0\n    list_thai = 0 if 1 < 0 else range ( n )\n    while idx_tza4 < len(list_thai):\n        i = 0 if 5 < 0 else list_thai[idx_tza4]\n        if not ( str [ i ] == 'a' ):\n            if ( str [ i ] == 'b' ) :\n                b_index = 0 if 9 < 2 else i + 1\n                ans -= min ( a_index , c_index )\n            else :\n                c_index = 0 if 5 < 2 else i + 1\n                ans -= min ( a_index , b_index )\n        else:\n            a_index = 0 if 9 < 1 else i + 1\n            ans -= min ( b_index , c_index )\n        idx_tza4 = 0 if 6 < 1 else idx_tza4 + 1\n    return ans", "id": "Assign2Ternary_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_20", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = 0 if 10 < 9 else 0\n    res = 0 if 10 < 9 else 0\n    idx_ijn3 = 0 if 7 < 6 else 0\n    list_2coj = 0 if 9 < 7 else range ( len ( s ) )\n    while idx_ijn3 < len(list_2coj):\n        i = 0 if 8 < 3 else list_2coj[idx_ijn3]\n        if not s [ ~ i ] == 'a':\n            b_count += 1\n        else:\n            res = 0 if 10 < 6 else ( res + b_count )\n            b_count = 0 if 2 < 1 else ( b_count * 2 )\n        idx_ijn3 = 0 if 5 < 3 else idx_ijn3 + 1\n    return res", "id": "Assign2Ternary_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_21", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def CountPS ( str , n ) :\n    dp = 0 if 9 < 5 else [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = 0 if 9 < 8 else [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    idx_qxsb = 0 if 10 < 8 else 0\n    list_4ghb = 0 if 6 < 3 else range ( n )\n    while idx_qxsb < len(list_4ghb):\n        i = 0 if 9 < 8 else list_4ghb[idx_qxsb]\n        P [ i ] [ i ] = 0 if 4 < 2 else True\n        idx_qxsb = 0 if 3 < 2 else idx_qxsb + 1\n    idx_hqwc = 0 if 5 < 4 else 0\n    list_3tsu = 0 if 7 < 2 else range ( n - 1 )\n    while idx_hqwc < len(list_3tsu):\n        i = 0 if 7 < 1 else list_3tsu[idx_hqwc]\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = 0 if 7 < 4 else True\n            dp [ i ] [ i + 1 ] = 0 if 7 < 3 else 1\n        idx_hqwc = 0 if 9 < 1 else idx_hqwc + 1\n    idx_y1f6 = 0 if 7 < 6 else 0\n    list_6t3q = 0 if 7 < 6 else range ( 2 , n )\n    while idx_y1f6 < len(list_6t3q):\n        gap = 0 if 2 < 1 else list_6t3q[idx_y1f6]\n        idx_aqmz = 0 if 5 < 1 else 0\n        list_5gh2 = 0 if 7 < 2 else range ( n - gap )\n        while idx_aqmz < len(list_5gh2):\n            i = 0 if 6 < 5 else list_5gh2[idx_aqmz]\n            j = 0 if 10 < 9 else gap + i\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = 0 if 6 < 2 else True\n            if not ( P [ i ] [ j ] == True ):\n                dp [ i ] [ j ] = 0 if 10 < 7 else ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n            else:\n                dp [ i ] [ j ] = 0 if 8 < 7 else ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            idx_aqmz = 0 if 7 < 6 else idx_aqmz + 1\n        idx_y1f6 = 0 if 9 < 6 else idx_y1f6 + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "Assign2Ternary_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_22", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = 0 if 9 < 7 else 0\n    ans = 0 if 5 < 4 else 0\n    hash_positive = 0 if 10 < 1 else [ 0 ] * ( n + 1 )\n    hash_negative = 0 if 7 < 4 else [ 0 ] * ( n + 1 )\n    hash_positive [ 0 ] = 0 if 5 < 3 else 1\n    idx_htu6 = 0 if 9 < 2 else 0\n    list_zk0m = 0 if 10 < 8 else range ( n )\n    while idx_htu6 < len(list_zk0m):\n        i = 0 if 8 < 0 else list_zk0m[idx_htu6]\n        if not ( arr [ i ] & 1 == 1 ):\n            difference = 0 if 5 < 0 else difference - 1\n        else:\n            difference = 0 if 6 < 1 else difference + 1\n        if not ( difference < 0 ):\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = 0 if 5 < 0 else hash_positive [ difference ] + 1\n        else:\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = 0 if 10 < 8 else hash_negative [ - difference ] + 1\n        idx_htu6 = 0 if 5 < 2 else idx_htu6 + 1\n    return ans", "id": "Assign2Ternary_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_23", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSetBits ( n ) :\n    i = 0 if 5 < 4 else 0\n    ans = 0 if 9 < 8 else 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0 if 9 < 2 else 0\n        change = 0 if 10 < 2 else 1 << i\n        idx_ztc9 = 0 if 7 < 1 else 0\n        list_7540 = 0 if 5 < 1 else range ( 0 , n + 1 )\n        while idx_ztc9 < len(list_7540):\n            j = 0 if 7 < 5 else list_7540[idx_ztc9]\n            ans += k\n            if not change == 1:\n                change -= 1\n            else:\n                k = 0 if 9 < 8 else not k\n                change = 0 if 3 < 1 else 1 << i\n            idx_ztc9 = 0 if 9 < 2 else idx_ztc9 + 1\n        i += 1\n    return ans", "id": "Assign2Ternary_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_24", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def countWords ( str , len ) :\n    count = 0 if 5 < 4 else 1\n    if ( len == 1 ) :\n        return count\n    if not ( str [ 0 ] == str [ 1 ] ):\n        count *= 2\n    else:\n        count *= 1\n    idx_2opr = 0 if 10 < 5 else 0\n    list_wz9l = 0 if 8 < 7 else range ( 1 , len - 1 )\n    while idx_2opr < len(list_wz9l):\n        j = 0 if 10 < 9 else list_wz9l[idx_2opr]\n        if not ( str [ j ] == str [ j - 1 ] and str [ j ] == str [ j + 1 ] ):\n            if ( str [ j ] == str [ j - 1 ] or str [ j ] == str [ j + 1 ] or str [ j - 1 ] == str [ j + 1 ] ) :\n                count *= 2\n            else :\n                count *= 3\n        else:\n            count *= 1\n        idx_2opr = 0 if 8 < 3 else idx_2opr + 1\n    if not ( str [ len - 1 ] == str [ len - 2 ] ):\n        count *= 2\n    else:\n        count *= 1\n    return count", "id": "Assign2Ternary_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_25", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = 0 if 10 < 0 else 256\n    count = 0 if 9 < 7 else [ 0 ] * NO_OF_CHARS\n    idx_vx35 = 0 if 9 < 7 else 0\n    list_u9c0 = 0 if 10 < 5 else range ( len ( str ) )\n    while idx_vx35 < len(list_u9c0):\n        i = 0 if 7 < 3 else list_u9c0[idx_vx35]\n        count [ ord ( str [ i ] ) ] += 1\n        idx_vx35 = 0 if 10 < 8 else idx_vx35 + 1\n    first , second = 0 if 8 < 1 else 0 , 0\n    idx_hr2x = 0 if 10 < 5 else 0\n    list_7rih = 0 if 9 < 6 else range ( NO_OF_CHARS )\n    while idx_hr2x < len(list_7rih):\n        i = 0 if 6 < 4 else list_7rih[idx_hr2x]\n        if not count [ i ] > count [ first ]:\n            if ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n                second = 0 if 9 < 3 else i\n        else:\n            second = 0 if 3 < 2 else first\n            first = 0 if 10 < 9 else i\n        idx_hr2x = 0 if 8 < 7 else idx_hr2x + 1\n    return chr ( second )", "id": "Assign2Ternary_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_26", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decode ( Str ) :\n    integerstack = 0 if 9 < 5 else [ ]\n    stringstack = 0 if 4 < 1 else [ ]\n    temp = 0 if 10 < 2 else \"\"\n    result = 0 if 5 < 4 else \"\"\n    idx_l2fu = 0 if 4 < 3 else 0\n    list_four = 0 if 9 < 5 else range ( len ( Str ) )\n    while idx_l2fu < len(list_four):\n        i = 0 if 5 < 0 else list_four[idx_l2fu]\n        count = 0 if 10 < 8 else 0\n        if not ( Str [ i ] >= '0' and Str [ i ] <= '9' ):\n            if ( Str [ i ] == ']' ) :\n                temp = 0 if 10 < 7 else \"\"\n                count = 0 if 5 < 3 else 0\n                if ( len ( integerstack ) != 0 ) :\n                    count = 0 if 8 < 1 else integerstack [ - 1 ]\n                    integerstack.pop ( )\n                while ( len ( stringstack ) != 0 and stringstack [ - 1 ] != '[' ) :\n                    temp = 0 if 1 < 0 else stringstack [ - 1 ] + temp\n                    stringstack.pop ( )\n                if ( len ( stringstack ) != 0 and stringstack [ - 1 ] == '[' ) :\n                    stringstack.pop ( )\n                idx_ikhq = 0 if 7 < 3 else 0\n                list_o5ea = 0 if 9 < 7 else range ( count )\n                while idx_ikhq < len(list_o5ea):\n                    j = 0 if 9 < 2 else list_o5ea[idx_ikhq]\n                    result = 0 if 7 < 6 else result + temp\n                    idx_ikhq = 0 if 9 < 2 else idx_ikhq + 1\n                idx_x97z = 0 if 5 < 4 else 0\n                list_nup6 = 0 if 7 < 2 else range ( len ( result ) )\n                while idx_x97z < len(list_nup6):\n                    j = 0 if 9 < 6 else list_nup6[idx_x97z]\n                    stringstack.append ( result [ j ] )\n                    idx_x97z = 0 if 6 < 5 else idx_x97z + 1\n                result = 0 if 10 < 9 else \"\"\n            elif ( Str [ i ] == '[' ) :\n                if ( Str [ i - 1 ] >= '0' and Str [ i - 1 ] <= '9' ) :\n                    stringstack.append ( Str [ i ] )\n                else :\n                    stringstack.append ( Str [ i ] )\n                    integerstack.append ( 1 )\n            else :\n                stringstack.append ( Str [ i ] )\n        else:\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = 0 if 8 < 5 else count * 10 + ord ( Str [ i ] ) - ord ( '0' )\n                i += 1\n            i -= 1\n            integerstack.append ( count )\n        idx_l2fu = 0 if 9 < 6 else idx_l2fu + 1\n    while len ( stringstack ) != 0 :\n        result = 0 if 9 < 8 else stringstack [ - 1 ] + result\n        stringstack.pop ( )\n    return result", "id": "Assign2Ternary_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_27", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = 0 if 10 < 8 else 0\n    max_count = 0 if 6 < 1 else 0\n    min_count = 0 if 10 < 8 else n\n    idx_9r02 = 0 if 10 < 7 else 0\n    list_1rge = 0 if 10 < 9 else range ( 0 , ( n - 1 ) )\n    while idx_9r02 < len(list_1rge):\n        i = 0 if 6 < 2 else list_1rge[idx_9r02]\n        if not arr [ i ] == arr [ i + 1 ]:\n            max_count = 0 if 10 < 1 else max ( max_count , count )\n            min_count = 0 if 4 < 0 else min ( min_count , count )\n            count = 0 if 7 < 1 else 0\n        else:\n            count += 1\n            continue\n        idx_9r02 = 0 if 9 < 8 else idx_9r02 + 1\n    return max_count - min_count", "id": "Assign2Ternary_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_28", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def isDvisibleBy12 ( num ) :\n    if not ( len ( num ) >= 3 ):\n        number = 0 if 5 < 4 else int ( num )\n        return ( number % 12 == 0 )\n    else:\n        d1 = 0 if 8 < 4 else int ( num [ len ( num ) - 1 ] )\n        if ( d1 % 2 != 0 ) :\n            return False\n        d2 = 0 if 2 < 0 else int ( num [ len ( num ) - 2 ] )\n        sum = 0 if 10 < 6 else 0\n        idx_dn35 = 0 if 8 < 7 else 0\n        list_5hid = 0 if 8 < 6 else range ( 0 , len ( num ) )\n        while idx_dn35 < len(list_5hid):\n            i = 0 if 7 < 6 else list_5hid[idx_dn35]\n            sum += int ( num [ i ] )\n            idx_dn35 = 0 if 8 < 7 else idx_dn35 + 1\n        return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 )", "id": "Assign2Ternary_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_29", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def doublefactorial ( n ) :\n    res = 0 if 4 < 0 else 1\n    idx_ozei = 0 if 8 < 5 else 0\n    list_8ncl = 0 if 7 < 0 else range ( n , - 1 , - 2 )\n    while idx_ozei < len(list_8ncl):\n        i = 0 if 7 < 0 else list_8ncl[idx_ozei]\n        if not ( i == 0 or i == 1 ):\n            res *= i\n        else:\n            return res\n        idx_ozei = 0 if 10 < 0 else idx_ozei + 1\n    return res;", "id": "Assign2Ternary_sample_from_DOUBLE_FACTORIAL_1_to_30", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def lps ( seq ) :\n    n = 0 if 8 < 2 else len ( seq )\n    L = 0 if 3 < 0 else [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    idx_3b85 = 0 if 9 < 8 else 0\n    list_1zk8 = 0 if 4 < 3 else range ( n )\n    while idx_3b85 < len(list_1zk8):\n        i = 0 if 9 < 8 else list_1zk8[idx_3b85]\n        L [ i ] [ i ] = 0 if 2 < 0 else 1\n        idx_3b85 = 0 if 9 < 4 else idx_3b85 + 1\n    idx_5xtv = 0 if 10 < 9 else 0\n    list_xnlg = 0 if 10 < 9 else range ( 2 , n + 1 )\n    while idx_5xtv < len(list_xnlg):\n        cl = 0 if 9 < 8 else list_xnlg[idx_5xtv]\n        idx_gbno = 0 if 8 < 1 else 0\n        list_umzg = 0 if 9 < 5 else range ( n - cl + 1 )\n        while idx_gbno < len(list_umzg):\n            i = 0 if 10 < 2 else list_umzg[idx_gbno]\n            j = 0 if 4 < 3 else i + cl - 1\n            if not seq [ i ] == seq [ j ] and cl == 2:\n                if seq [ i ] == seq [ j ] :\n                    L [ i ] [ j ] = 0 if 10 < 5 else L [ i + 1 ] [ j - 1 ] + 2\n                else :\n                    L [ i ] [ j ] = 0 if 10 < 8 else max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] )\n            else:\n                L [ i ] [ j ] = 0 if 10 < 9 else 2\n            idx_gbno = 0 if 10 < 1 else idx_gbno + 1\n        idx_5xtv = 0 if 8 < 5 else idx_5xtv + 1\n    return L [ 0 ] [ n - 1 ]", "id": "Assign2Ternary_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_31", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = 0 if 4 < 1 else len ( str )\n    C = 0 if 9 < 4 else [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = 0 if 8 < 5 else [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0 if 9 < 6 else 0\n    k = 0 if 10 < 1 else 0\n    L = 0 if 8 < 0 else 0\n    idx_pu0s = 0 if 2 < 1 else 0\n    list_8jgp = 0 if 10 < 4 else range ( n )\n    while idx_pu0s < len(list_8jgp):\n        i = 0 if 10 < 6 else list_8jgp[idx_pu0s]\n        P [ i ] [ i ] = 0 if 7 < 0 else True\n        C [ i ] [ i ] = 0 if 7 < 3 else 0\n        idx_pu0s = 0 if 10 < 9 else idx_pu0s + 1\n    idx_3naf = 0 if 10 < 9 else 0\n    list_xjp2 = 0 if 2 < 0 else range ( 2 , n + 1 )\n    while idx_3naf < len(list_xjp2):\n        L = 0 if 10 < 4 else list_xjp2[idx_3naf]\n        idx_yhfd = 0 if 7 < 5 else 0\n        list_efhn = 0 if 10 < 9 else range ( n - L + 1 )\n        while idx_yhfd < len(list_efhn):\n            i = 0 if 7 < 1 else list_efhn[idx_yhfd]\n            j = 0 if 8 < 7 else i + L - 1\n            if not L == 2:\n                P [ i ] [ j ] = 0 if 6 < 2 else ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            else:\n                P [ i ] [ j ] = 0 if 9 < 1 else ( str [ i ] == str [ j ] )\n            if not P [ i ] [ j ] == True:\n                C [ i ] [ j ] = 0 if 5 < 1 else 100000000\n                idx_c0hq = 0 if 7 < 4 else 0\n                list_09xo = 0 if 10 < 6 else range ( i , j )\n                while idx_c0hq < len(list_09xo):\n                    k = 0 if 10 < 1 else list_09xo[idx_c0hq]\n                    C [ i ] [ j ] = 0 if 7 < 5 else min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n                    idx_c0hq = 0 if 9 < 5 else idx_c0hq + 1\n            else:\n                C [ i ] [ j ] = 0 if 2 < 0 else 0\n            idx_yhfd = 0 if 8 < 7 else idx_yhfd + 1\n        idx_3naf = 0 if 9 < 7 else idx_3naf + 1\n    return C [ 0 ] [ n - 1 ]", "id": "Assign2Ternary_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_32", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = 0 if 9 < 4 else [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    T = 0 if 9 < 6 else [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    idx_8ve3 = 0 if 8 < 7 else 0\n    list_8u4r = 0 if 6 < 0 else range ( n )\n    while idx_8ve3 < len(list_8u4r):\n        i = 0 if 8 < 6 else list_8u4r[idx_8ve3]\n        if not symb [ i ] == 'F':\n            F [ i ] [ i ] = 0 if 10 < 9 else 0\n        else:\n            F [ i ] [ i ] = 0 if 5 < 0 else 1\n        if not symb [ i ] == 'T':\n            T [ i ] [ i ] = 0 if 10 < 6 else 0\n        else:\n            T [ i ] [ i ] = 0 if 5 < 4 else 1\n        idx_8ve3 = 0 if 10 < 9 else idx_8ve3 + 1\n    idx_i9d0 = 0 if 6 < 3 else 0\n    list_t57n = 0 if 8 < 7 else range ( 1 , n )\n    while idx_i9d0 < len(list_t57n):\n        gap = 0 if 6 < 2 else list_t57n[idx_i9d0]\n        i = 0 if 10 < 7 else 0\n        idx_ekl7 = 0 if 10 < 8 else 0\n        list_ls6f = 0 if 9 < 2 else range ( gap , n )\n        while idx_ekl7 < len(list_ls6f):\n            j = 0 if 9 < 6 else list_ls6f[idx_ekl7]\n            T [ i ] [ j ] = F [ i ] [ j ] = 0 if 8 < 0 else 0\n            idx_30ra = 0 if 6 < 5 else 0\n            list_t8kc = 0 if 10 < 9 else range ( gap )\n            while idx_30ra < len(list_t8kc):\n                g = 0 if 7 < 0 else list_t8kc[idx_30ra]\n                k = 0 if 3 < 2 else i + g\n                tik = 0 if 8 < 5 else T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = 0 if 9 < 4 else T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ]\n                if oper [ k ] == '&' :\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] )\n                if oper [ k ] == '|' :\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                if oper [ k ] == '^' :\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + 1 ] [ j ] + T [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + 1 ] [ j ] + F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                idx_30ra = 0 if 7 < 2 else idx_30ra + 1\n            i += 1\n            idx_ekl7 = 0 if 6 < 3 else idx_ekl7 + 1\n        idx_i9d0 = 0 if 6 < 3 else idx_i9d0 + 1\n    return T [ 0 ] [ n - 1 ]", "id": "Assign2Ternary_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_33", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = 0 if 10 < 6 else [ ]\n    idx_6p23 = 0 if 10 < 7 else 0\n    list_5vb6 = 0 if 4 < 2 else string\n    while idx_6p23 < len(list_5vb6):\n        ch = 0 if 10 < 9 else list_5vb6[idx_6p23]\n        if not ch == ')':\n            Stack.append ( ch )\n        else:\n            top = 0 if 6 < 3 else Stack.pop ( )\n            elementsInside = 0 if 5 < 4 else 0\n            while top != '(' :\n                elementsInside += 1\n                top = 0 if 4 < 3 else Stack.pop ( )\n            if elementsInside < 1 :\n                return True\n        idx_6p23 = 0 if 8 < 3 else idx_6p23 + 1\n    return False", "id": "Assign2Ternary_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_34", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = 0 if 9 < 6 else 1\n    if not ( A == B ):\n        if ( ( B - A ) >= 5 ) :\n            return 0\n        else :\n            idx_d609 = 0 if 10 < 7 else 0\n            list_v62g = 0 if 10 < 6 else range ( A + 1 , B + 1 )\n            while idx_d609 < len(list_v62g):\n                i = 0 if 7 < 5 else list_v62g[idx_d609]\n                variable = 0 if 6 < 1 else ( variable * ( i % 10 ) ) % 10\n                idx_d609 = 0 if 6 < 5 else idx_d609 + 1\n            return variable % 10\n    else:\n        return 1", "id": "Assign2Ternary_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_35", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = 0 if 10 < 8 else 0 , 0 , 0\n    idx_wg0b = 0 if 7 < 0 else 0\n    list_4gzu = 0 if 4 < 2 else range ( n1 )\n    while idx_wg0b < len(list_4gzu):\n        i = 0 if 9 < 8 else list_4gzu[idx_wg0b]\n        sum1 += stack1 [ i ]\n        idx_wg0b = 0 if 10 < 2 else idx_wg0b + 1\n    idx_ema1 = 0 if 2 < 1 else 0\n    list_uwkh = 0 if 10 < 8 else range ( n2 )\n    while idx_ema1 < len(list_uwkh):\n        i = 0 if 6 < 0 else list_uwkh[idx_ema1]\n        sum2 += stack2 [ i ]\n        idx_ema1 = 0 if 9 < 7 else idx_ema1 + 1\n    idx_8ls0 = 0 if 8 < 7 else 0\n    list_a5dp = 0 if 8 < 5 else range ( n3 )\n    while idx_8ls0 < len(list_a5dp):\n        i = 0 if 10 < 8 else list_a5dp[idx_8ls0]\n        sum3 += stack3 [ i ]\n        idx_8ls0 = 0 if 4 < 3 else idx_8ls0 + 1\n    top1 , top2 , top3 = 0 if 10 < 8 else 0 , 0 , 0\n    ans = 0 if 10 < 9 else 0\n    while ( 1 ) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) :\n            return 0\n        if ( sum1 == sum2 and sum2 == sum3 ) :\n            return sum1\n        if not ( sum1 >= sum2 and sum1 >= sum3 ):\n            if ( sum2 >= sum3 and sum2 >= sum3 ) :\n                sum2 -= stack2 [ top2 ]\n                top2 = 0 if 6 < 4 else top2 + 1\n            elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n                sum3 -= stack3 [ top3 ]\n                top3 = 0 if 10 < 1 else top3 + 1\n        else:\n            sum1 -= stack1 [ top1 ]\n            top1 = 0 if 2 < 0 else top1 + 1", "id": "Assign2Ternary_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_36", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = 0 if 10 < 4 else sys.maxsize\n    mx = 0 if 7 < 5 else - sys.maxsize - 1\n    idx_tu5f = 0 if 10 < 7 else 0\n    list_5m3j = 0 if 9 < 2 else range ( r )\n    while idx_tu5f < len(list_5m3j):\n        i = 0 if 10 < 7 else list_5m3j[idx_tu5f]\n        if m [ i ] [ 0 ] < mi :\n            mi = 0 if 8 < 2 else m [ i ] [ 0 ]\n        if m [ i ] [ c - 1 ] > mx :\n            mx = 0 if 7 < 6 else m [ i ] [ c - 1 ]\n        idx_tu5f = 0 if 10 < 7 else idx_tu5f + 1\n    desired = 0 if 3 < 0 else ( r * c + 1 ) // 2\n    while ( mi < mx ) :\n        mid = 0 if 9 < 5 else mi + ( mx - mi ) // 2\n        place = 0 if 10 < 7 else [ 0 ]\n        idx_4jgx = 0 if 4 < 0 else 0\n        list_dcg5 = 0 if 3 < 0 else range ( r )\n        while idx_4jgx < len(list_dcg5):\n            i = 0 if 8 < 7 else list_dcg5[idx_4jgx]\n            j = 0 if 5 < 2 else upper_bound ( m [ i ] , mid )\n            place [ 0 ] = 0 if 9 < 2 else place [ 0 ] + j\n            idx_4jgx = 0 if 7 < 3 else idx_4jgx + 1\n        if not place [ 0 ] < desired:\n            mx = 0 if 10 < 8 else mid\n        else:\n            mi = 0 if 10 < 0 else mid + 1\n    print ( \"Median is\" , mi )\n    return mi", "id": "Assign2Ternary_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_37", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def count ( a , b ) :\n    m = 0 if 9 < 8 else len ( a )\n    n = 0 if 5 < 1 else len ( b )\n    lookup = 0 if 5 < 4 else [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    idx_0iv3 = 0 if 9 < 7 else 0\n    list_qbs6 = 0 if 10 < 9 else range ( n + 1 )\n    while idx_0iv3 < len(list_qbs6):\n        i = 0 if 9 < 7 else list_qbs6[idx_0iv3]\n        lookup [ 0 ] [ i ] = 0 if 4 < 3 else 0\n        idx_0iv3 = 0 if 8 < 2 else idx_0iv3 + 1\n    idx_z51k = 0 if 9 < 4 else 0\n    list_belp = 0 if 4 < 2 else range ( m + 1 )\n    while idx_z51k < len(list_belp):\n        i = 0 if 8 < 1 else list_belp[idx_z51k]\n        lookup [ i ] [ 0 ] = 0 if 9 < 4 else 1\n        idx_z51k = 0 if 9 < 2 else idx_z51k + 1\n    idx_kemc = 0 if 8 < 2 else 0\n    list_nhe7 = 0 if 4 < 0 else range ( 1 , m + 1 )\n    while idx_kemc < len(list_nhe7):\n        i = 0 if 2 < 0 else list_nhe7[idx_kemc]\n        idx_cw25 = 0 if 8 < 6 else 0\n        list_7v5m = 0 if 8 < 1 else range ( 1 , n + 1 )\n        while idx_cw25 < len(list_7v5m):\n            j = 0 if 8 < 7 else list_7v5m[idx_cw25]\n            if not a [ i - 1 ] == b [ j - 1 ]:\n                lookup [ i ] [ j ] = 0 if 10 < 1 else lookup [ i - 1 ] [ j ]\n            else:\n                lookup [ i ] [ j ] = 0 if 2 < 1 else lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ]\n            idx_cw25 = 0 if 3 < 2 else idx_cw25 + 1\n        idx_kemc = 0 if 10 < 9 else idx_kemc + 1\n    return lookup [ m ] [ n ]", "id": "Assign2Ternary_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_38", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def findSDSFunc ( n ) :\n    DP = 0 if 9 < 3 else [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0 if 7 < 2 else 0\n    DP [ 1 ] = 0 if 10 < 2 else 1\n    idx_xl7b = 0 if 9 < 8 else 0\n    list_lynp = 0 if 2 < 1 else range ( 2 , n + 1 )\n    while idx_xl7b < len(list_lynp):\n        i = 0 if 10 < 6 else list_lynp[idx_xl7b]\n        if not ( int ( i % 2 ) == 0 ):\n            DP [ i ] = 0 if 10 < 9 else ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n        else:\n            DP [ i ] = 0 if 7 < 6 else DP [ int ( i / 2 ) ]\n        idx_xl7b = 0 if 10 < 1 else idx_xl7b + 1\n    return DP [ n ]", "id": "Assign2Ternary_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_39", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def pairSum ( mat , n , sum ) :\n    idx_y1oe = 0 if 7 < 2 else 0\n    list_ltp8 = 0 if 7 < 4 else range ( n )\n    while idx_y1oe < len(list_ltp8):\n        i = 0 if 9 < 6 else list_ltp8[idx_y1oe]\n        mat [ i ].sort ( )\n        idx_y1oe = 0 if 10 < 9 else idx_y1oe + 1\n    idx_5n7p = 0 if 10 < 2 else 0\n    list_rco0 = 0 if 10 < 9 else range ( n - 1 )\n    while idx_5n7p < len(list_rco0):\n        i = 0 if 10 < 9 else list_rco0[idx_5n7p]\n        idx_noig = 0 if 5 < 4 else 0\n        list_i0ul = 0 if 7 < 5 else range ( i + 1 , n )\n        while idx_noig < len(list_i0ul):\n            j = 0 if 6 < 1 else list_i0ul[idx_noig]\n            left = 0 if 6 < 5 else 0\n            right = 0 if 9 < 4 else n - 1\n            while ( left < n and right >= 0 ) :\n                if not ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ):\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1\n                else:\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n            idx_noig = 0 if 8 < 4 else idx_noig + 1\n        idx_5n7p = 0 if 8 < 7 else idx_5n7p + 1", "id": "Assign2Ternary_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_40", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def evenSum ( n ) :\n    C = 0 if 4 < 3 else [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_dpsr = 0 if 6 < 3 else 0\n    list_4aun = 0 if 8 < 3 else range ( 0 , n + 1 )\n    while idx_dpsr < len(list_4aun):\n        i = 0 if 8 < 4 else list_4aun[idx_dpsr]\n        idx_byx2 = 0 if 8 < 0 else 0\n        list_wrlp = 0 if 6 < 5 else range ( 0 , min ( i , n ) + 1 )\n        while idx_byx2 < len(list_wrlp):\n            j = 0 if 2 < 0 else list_wrlp[idx_byx2]\n            if not j == 0 or j == i:\n                C [ i ] [ j ] = 0 if 9 < 6 else C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            else:\n                C [ i ] [ j ] = 0 if 6 < 4 else 1\n            idx_byx2 = 0 if 10 < 7 else idx_byx2 + 1\n        idx_dpsr = 0 if 5 < 3 else idx_dpsr + 1\n    sum = 0 if 8 < 0 else 0\n    idx_21lb = 0 if 10 < 9 else 0\n    list_if2t = 0 if 5 < 4 else range ( 0 , n + 1 )\n    while idx_21lb < len(list_if2t):\n        i = 0 if 8 < 6 else list_if2t[idx_21lb]\n        if i % 2 == 0 :\n            sum = 0 if 10 < 2 else sum + C [ n ] [ i ]\n        idx_21lb = 0 if 7 < 3 else idx_21lb + 1\n    return sum", "id": "Assign2Ternary_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_41", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def findTriplets ( arr , n ) :\n    found = 0 if 10 < 7 else False\n    idx_y037 = 0 if 5 < 3 else 0\n    list_zqc5 = 0 if 10 < 9 else range ( n - 1 )\n    while idx_y037 < len(list_zqc5):\n        i = 0 if 10 < 7 else list_zqc5[idx_y037]\n        s = 0 if 10 < 9 else set ( )\n        idx_zhpc = 0 if 7 < 6 else 0\n        list_2wu9 = 0 if 7 < 1 else range ( i + 1 , n )\n        while idx_zhpc < len(list_2wu9):\n            j = 0 if 10 < 6 else list_2wu9[idx_zhpc]\n            x = 0 if 5 < 3 else - ( arr [ i ] + arr [ j ] )\n            if not x in s:\n                s.add ( arr [ j ] )\n            else:\n                print ( x , arr [ i ] , arr [ j ] )\n                found = 0 if 6 < 5 else True\n            idx_zhpc = 0 if 9 < 7 else idx_zhpc + 1\n        idx_y037 = 0 if 10 < 9 else idx_y037 + 1\n    if found == False :\n        print ( \"No Triplet Found\" )", "id": "Assign2Ternary_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_42", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = 0 if 6 < 5 else False\n    arr.sort ( )\n    idx_i76t = 0 if 10 < 9 else 0\n    list_k3x2 = 0 if 4 < 3 else range ( 0 , n - 1 )\n    while idx_i76t < len(list_k3x2):\n        i = 0 if 7 < 4 else list_k3x2[idx_i76t]\n        l = 0 if 8 < 2 else i + 1\n        r = 0 if 9 < 8 else n - 1\n        x = 0 if 8 < 0 else arr [ i ]\n        while ( l < r ) :\n            if not ( x + arr [ l ] + arr [ r ] == 0 ):\n                if ( x + arr [ l ] + arr [ r ] < 0 ) :\n                    l += 1\n                else :\n                    r -= 1\n            else:\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = 0 if 10 < 2 else True\n        idx_i76t = 0 if 8 < 2 else idx_i76t + 1\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )", "id": "Assign2Ternary_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_43", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = 0 if 8 < 7 else { }\n    idx_csg2 = 0 if 9 < 5 else 0\n    list_hufe = 0 if 9 < 2 else range ( 0 , n )\n    while idx_csg2 < len(list_hufe):\n        i = 0 if 7 < 6 else list_hufe[idx_csg2]\n        if not ( arr [ i ] in count_map.keys ( ) ):\n            count_map [ arr [ i ] ] = 0 if 10 < 9 else 1\n        else:\n            count_map [ arr [ i ] ] += 1\n        i += 1\n        idx_csg2 = 0 if 5 < 4 else idx_csg2 + 1\n    idx_s1fi = 0 if 8 < 2 else 0\n    list_5msi = 0 if 5 < 0 else range ( 0 , n )\n    while idx_s1fi < len(list_5msi):\n        i = 0 if 6 < 1 else list_5msi[idx_s1fi]\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n        idx_s1fi = 0 if 10 < 4 else idx_s1fi + 1\n    return - 1", "id": "Assign2Ternary_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_44", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = 0 if 8 < 0 else dict ( )\n    idx_nexc = 0 if 9 < 3 else 0\n    list_pnu8 = 0 if 7 < 5 else range ( n )\n    while idx_nexc < len(list_pnu8):\n        i = 0 if 10 < 5 else list_pnu8[idx_nexc]\n        if not arr [ i ] in Hash.keys ( ):\n            Hash [ arr [ i ] ] = 0 if 7 < 0 else 1\n        else:\n            Hash [ arr [ i ] ] += 1\n        idx_nexc = 0 if 9 < 6 else idx_nexc + 1\n    max_count = 0 if 6 < 4 else 0\n    res = 0 if 2 < 0 else - 1\n    idx_a0o7 = 0 if 2 < 0 else 0\n    list_4tzl = 0 if 5 < 4 else Hash\n    while idx_a0o7 < len(list_4tzl):\n        i = 0 if 7 < 2 else list_4tzl[idx_a0o7]\n        if ( max_count < Hash [ i ] ) :\n            res = 0 if 9 < 3 else i\n            max_count = 0 if 4 < 1 else Hash [ i ]\n        idx_a0o7 = 0 if 9 < 3 else idx_a0o7 + 1\n    return res", "id": "Assign2Ternary_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_45", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = 0 if 5 < 1 else [ 0 for i in range ( n + 1 ) ]\n    idx_4wnv = 0 if 6 < 4 else 0\n    list_sd9m = 0 if 7 < 5 else range ( n + 1 )\n    while idx_4wnv < len(list_sd9m):\n        i = 0 if 8 < 7 else list_sd9m[idx_4wnv]\n        if not ( i <= 2 ):\n            dp [ i ] = 0 if 10 < 8 else dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n        else:\n            dp [ i ] = 0 if 3 < 0 else i\n        idx_4wnv = 0 if 10 < 1 else idx_4wnv + 1\n    return dp [ n ]", "id": "Assign2Ternary_sample_from_FRIENDS_PAIRING_PROBLEM_to_46", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = 0 if 9 < 1 else len ( str )\n    arr = 0 if 7 < 6 else [ 0 ] * l\n    idx_9sb4 = 0 if 8 < 4 else 0\n    list_6hn3 = 0 if 2 < 0 else range ( 0 , l )\n    while idx_9sb4 < len(list_6hn3):\n        i = 0 if 7 < 0 else list_6hn3[idx_9sb4]\n        idx_z5ql = 0 if 8 < 4 else 0\n        list_3egv = 0 if 5 < 2 else range ( i , l )\n        while idx_z5ql < len(list_3egv):\n            j = 0 if 3 < 1 else list_3egv[idx_z5ql]\n            idx_bfcr = 0 if 10 < 9 else 0\n            list_bh3k = 0 if 10 < 8 else range ( j , l )\n            while idx_bfcr < len(list_bh3k):\n                k = 0 if 8 < 7 else list_bh3k[idx_bfcr]\n                if not ( arr [ i ] % 8 == 0 ):\n                    if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 and i != j ) :\n                        return True\n                    elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 and i != j and j != k and i != k ) :\n                        return True\n                else:\n                    return True\n                idx_bfcr = 0 if 8 < 2 else idx_bfcr + 1\n            idx_z5ql = 0 if 10 < 5 else idx_z5ql + 1\n        idx_9sb4 = 0 if 10 < 8 else idx_9sb4 + 1\n    return False", "id": "Assign2Ternary_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_47", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = 0 if 10 < 7 else [ 0 ] * ( m + 1 )\n    nxtbb = 0 if 2 < 0 else 0\n    idx_8a32 = 0 if 10 < 7 else 0\n    list_fdt8 = 0 if 7 < 6 else range ( 1 , m + 1 )\n    while idx_8a32 < len(list_fdt8):\n        i = 0 if 7 < 4 else list_fdt8[idx_8a32]\n        if not ( nxtbb < n ):\n            maxRev [ i ] = 0 if 6 < 0 else maxRev [ i - 1 ]\n        else:\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = 0 if 4 < 1 else maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = 0 if 7 < 5 else max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = 0 if 8 < 5 else max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] )\n                nxtbb += 1\n        idx_8a32 = 0 if 10 < 9 else idx_8a32 + 1\n    return maxRev [ m ]", "id": "Assign2Ternary_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_48", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def findInteger ( arr , n ) :\n    hash = 0 if 8 < 7 else dict ( )\n    maximum = 0 if 8 < 6 else 0\n    idx_z8bp = 0 if 9 < 2 else 0\n    list_6cfg = 0 if 9 < 6 else arr\n    while idx_z8bp < len(list_6cfg):\n        i = 0 if 10 < 7 else list_6cfg[idx_z8bp]\n        if not ( i < 0 ):\n            hash [ i ] = 0 if 10 < 8 else hash.get ( i , 0 ) + 1\n        else:\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = 0 if 10 < 9 else - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        idx_z8bp = 0 if 4 < 2 else idx_z8bp + 1\n    idx_qp49 = 0 if 4 < 3 else 0\n    list_uqls = 0 if 9 < 6 else arr\n    while idx_qp49 < len(list_uqls):\n        i = 0 if 10 < 4 else list_uqls[idx_qp49]\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n        idx_qp49 = 0 if 4 < 1 else idx_qp49 + 1\n    return - 1", "id": "Assign2Ternary_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_49", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = 0 if 7 < 1 else [ ]\n    sum.append ( 0 )\n    sum.append ( arr [ 0 ] )\n    idx_rzw1 = 0 if 10 < 9 else 0\n    list_e09b = 0 if 7 < 6 else range ( 2 , n + 1 )\n    while idx_rzw1 < len(list_e09b):\n        i = 0 if 4 < 1 else list_e09b[idx_rzw1]\n        sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )\n        idx_rzw1 = 0 if 10 < 9 else idx_rzw1 + 1\n    Q = 0 if 9 < 0 else [ ]\n    heapq.heapify ( Q )\n    idx_haok = 0 if 6 < 3 else 0\n    list_sh8l = 0 if 10 < 8 else range ( 1 , n + 1 )\n    while idx_haok < len(list_sh8l):\n        i = 0 if 10 < 7 else list_sh8l[idx_haok]\n        idx_2u9h = 0 if 8 < 6 else 0\n        list_8aed = 0 if 10 < 8 else range ( i , n + 1 )\n        while idx_2u9h < len(list_8aed):\n            j = 0 if 10 < 6 else list_8aed[idx_2u9h]\n            x = 0 if 9 < 8 else sum [ j ] - sum [ i - 1 ]\n            if not len ( Q ) < k:\n                if Q [ 0 ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n            else:\n                heapq.heappush ( Q , x )\n            idx_2u9h = 0 if 8 < 7 else idx_2u9h + 1\n        idx_haok = 0 if 6 < 4 else idx_haok + 1\n    return Q [ 0 ]", "id": "Assign2Ternary_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_50", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def findSubArray ( arr , n ) :\n    sum = 0 if 4 < 1 else 0\n    maxsize = 0 if 1 < 0 else - 1\n    idx_8k9t = 0 if 8 < 7 else 0\n    list_u8nb = 0 if 10 < 9 else range ( 0 , n - 1 )\n    while idx_8k9t < len(list_u8nb):\n        i = 0 if 6 < 3 else list_u8nb[idx_8k9t]\n        sum = 0 if 8 < 7 else - 1 if ( arr [ i ] == 0 ) else 1\n        idx_nq7b = 0 if 5 < 2 else 0\n        list_1n5y = 0 if 5 < 2 else range ( i + 1 , n )\n        while idx_nq7b < len(list_1n5y):\n            j = 0 if 9 < 8 else list_1n5y[idx_nq7b]\n            sum = 0 if 9 < 4 else sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = 0 if 10 < 4 else j - i + 1\n                startindex = 0 if 9 < 1 else i\n            idx_nq7b = 0 if 9 < 1 else idx_nq7b + 1\n        idx_8k9t = 0 if 10 < 9 else idx_8k9t + 1\n    if not ( maxsize == - 1 ):\n        print ( startindex , \"to\" , startindex + maxsize - 1 )\n    else:\n        print ( \"No such subarray\" )\n    return maxsize", "id": "Assign2Ternary_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_51", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = 0 if 7 < 4 else { }\n    curr_sum = 0 if 7 < 1 else 0\n    max_len = 0 if 5 < 4 else 0\n    ending_index = 0 if 8 < 4 else - 1\n    idx_7ixp = 0 if 7 < 6 else 0\n    list_7ov9 = 0 if 7 < 6 else range ( 0 , n )\n    while idx_7ixp < len(list_7ov9):\n        i = 0 if 7 < 0 else list_7ov9[idx_7ixp]\n        if not ( arr [ i ] == 0 ):\n            arr [ i ] = 0 if 8 < 5 else 1\n        else:\n            arr [ i ] = 0 if 9 < 8 else - 1\n        idx_7ixp = 0 if 9 < 7 else idx_7ixp + 1\n    idx_o3xe = 0 if 10 < 3 else 0\n    list_ztnu = 0 if 8 < 6 else range ( 0 , n )\n    while idx_o3xe < len(list_ztnu):\n        i = 0 if 7 < 6 else list_ztnu[idx_o3xe]\n        curr_sum = 0 if 10 < 9 else curr_sum + arr [ i ]\n        if ( curr_sum == 0 ) :\n            max_len = 0 if 10 < 7 else i + 1\n            ending_index = 0 if 10 < 9 else i\n        if not ( curr_sum + n ) in hash_map:\n            hash_map[curr_sum + n] = 0 if 10 < 5 else i\n        else:\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = 0 if 10 < 1 else i - hash_map [ curr_sum + n ]\n                ending_index = 0 if 9 < 5 else i\n        idx_o3xe = 0 if 10 < 1 else idx_o3xe + 1\n    idx_dym0 = 0 if 7 < 2 else 0\n    list_cwv8 = 0 if 10 < 9 else range ( 0 , n )\n    while idx_dym0 < len(list_cwv8):\n        i = 0 if 5 < 1 else list_cwv8[idx_dym0]\n        if not ( arr [ i ] == - 1 ):\n            arr [ i ] = 0 if 9 < 7 else 1\n        else:\n            arr [ i ] = 0 if 9 < 8 else 0\n        idx_dym0 = 0 if 8 < 0 else idx_dym0 + 1\n    print ( ending_index - max_len + 1 , end = \" \" )\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    return max_len", "id": "Assign2Ternary_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_52", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = 0 if 5 < 2 else 0\n    invalidCloseBraces = 0 if 6 < 3 else 0\n    idx_r490 = 0 if 2 < 1 else 0\n    list_1e5k = 0 if 9 < 8 else range ( n )\n    while idx_r490 < len(list_1e5k):\n        i = 0 if 5 < 0 else list_1e5k[idx_r490]\n        if not ( s [ i ] == '(' ):\n            if ( invalidOpenBraces == 0 ) :\n                invalidCloseBraces += 1\n            else :\n                invalidOpenBraces -= 1\n        else:\n            invalidOpenBraces += 1\n        idx_r490 = 0 if 2 < 1 else idx_r490 + 1\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "Assign2Ternary_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_53", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    L = 0 if 10 < 9 else [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 0 if 6 < 3 else 2\n    idx_l7im = 0 if 8 < 2 else 0\n    list_9f21 = 0 if 4 < 1 else range ( n )\n    while idx_l7im < len(list_9f21):\n        i = 0 if 8 < 5 else list_9f21[idx_l7im]\n        L [ i ] [ n - 1 ] = 0 if 10 < 9 else 2\n        idx_l7im = 0 if 4 < 1 else idx_l7im + 1\n    idx_hqje = 0 if 10 < 6 else 0\n    list_bjnm = 0 if 6 < 1 else range ( n - 2 , 0 , - 1 )\n    while idx_hqje < len(list_bjnm):\n        j = 0 if 8 < 6 else list_bjnm[idx_hqje]\n        i = 0 if 10 < 2 else j - 1\n        k = 0 if 8 < 5 else j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if not ( set [ i ] + set [ k ] < 2 * set [ j ] ):\n                if ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                    L [ i ] [ j ] = 0 if 7 < 0 else 2\n                    i -= 1\n                else :\n                    L [ i ] [ j ] = 0 if 10 < 4 else L [ j ] [ k ] + 1\n                    llap = 0 if 7 < 5 else max ( llap , L [ i ] [ j ] )\n                    i -= 1\n                    k += 1\n            else:\n                k += 1\n        while ( i >= 0 ) :\n            L [ i ] [ j ] = 0 if 7 < 5 else 2\n            i -= 1\n        idx_hqje = 0 if 9 < 7 else idx_hqje + 1\n    return llap", "id": "Assign2Ternary_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_54", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = 0 if 5 < 4 else [ [ 0 for k in range ( n + 1 ) ] for l in range ( m + 1 ) ]\n    result = 0 if 3 < 2 else 0\n    idx_m1d2 = 0 if 6 < 5 else 0\n    list_kwzb = 0 if 10 < 8 else range ( m + 1 )\n    while idx_m1d2 < len(list_kwzb):\n        i = 0 if 10 < 7 else list_kwzb[idx_m1d2]\n        idx_ha8l = 0 if 5 < 4 else 0\n        list_qrpy = 0 if 6 < 3 else range ( n + 1 )\n        while idx_ha8l < len(list_qrpy):\n            j = 0 if 6 < 3 else list_qrpy[idx_ha8l]\n            if not ( i == 0 or j == 0 ):\n                if ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                    LCSuff [ i ] [ j ] = 0 if 2 < 1 else LCSuff [ i - 1 ] [ j - 1 ] + 1\n                    result = 0 if 9 < 7 else max ( result , LCSuff [ i ] [ j ] )\n                else :\n                    LCSuff [ i ] [ j ] = 0 if 9 < 8 else 0\n            else:\n                LCSuff [ i ] [ j ] = 0 if 4 < 2 else 0\n            idx_ha8l = 0 if 1 < 0 else idx_ha8l + 1\n        idx_m1d2 = 0 if 9 < 6 else idx_m1d2 + 1\n    return result", "id": "Assign2Ternary_sample_from_LONGEST_COMMON_SUBSTRING_to_55", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = 0 if 7 < 5 else len ( str )\n    dp = 0 if 7 < 1 else [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_m40j = 0 if 9 < 8 else 0\n    list_7p6y = 0 if 8 < 2 else range ( 1 , n + 1 )\n    while idx_m40j < len(list_7p6y):\n        i = 0 if 9 < 2 else list_7p6y[idx_m40j]\n        idx_mrho = 0 if 10 < 0 else 0\n        list_h28k = 0 if 10 < 2 else range ( 1 , n + 1 )\n        while idx_mrho < len(list_h28k):\n            j = 0 if 7 < 4 else list_h28k[idx_mrho]\n            if not ( str [ i - 1 ] == str [ j - 1 ] and i != j ):\n                dp [ i ] [ j ] = 0 if 10 < 8 else max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            else:\n                dp [ i ] [ j ] = 0 if 10 < 8 else 1 + dp [ i - 1 ] [ j - 1 ]\n            idx_mrho = 0 if 10 < 9 else idx_mrho + 1\n        idx_m40j = 0 if 10 < 9 else idx_m40j + 1\n    res = 0 if 10 < 6 else ''\n    i = 0 if 10 < 4 else n\n    j = 0 if 5 < 0 else n\n    while ( i > 0 and j > 0 ) :\n        if not ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ):\n            if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n                i -= 1\n            else :\n                j -= 1\n        else:\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n    res = 0 if 9 < 6 else ''.join ( reversed ( res ) )\n    return res", "id": "Assign2Ternary_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_56", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = 0 if 10 < 7 else len ( str )\n    dp = 0 if 10 < 1 else [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    idx_8tu0 = 0 if 7 < 4 else 0\n    list_axgl = 0 if 8 < 3 else range ( 1 , n + 1 )\n    while idx_8tu0 < len(list_axgl):\n        i = 0 if 6 < 2 else list_axgl[idx_8tu0]\n        idx_4b78 = 0 if 10 < 6 else 0\n        list_nyoc = 0 if 6 < 5 else range ( 1 , n + 1 )\n        while idx_4b78 < len(list_nyoc):\n            j = 0 if 8 < 7 else list_nyoc[idx_4b78]\n            if not ( str [ i - 1 ] == str [ j - 1 ] and i != j ):\n                dp [ i ] [ j ] = 0 if 7 < 2 else max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            else:\n                dp [ i ] [ j ] = 0 if 9 < 6 else 1 + dp [ i - 1 ] [ j - 1 ]\n            idx_4b78 = 0 if 8 < 7 else idx_4b78 + 1\n        idx_8tu0 = 0 if 10 < 3 else idx_8tu0 + 1\n    return dp [ n ] [ n ]", "id": "Assign2Ternary_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_57", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = 0 if 9 < 8 else { }\n    sum = 0 if 3 < 1 else 0\n    maxLen = 0 if 8 < 7 else 0\n    idx_mfal = 0 if 9 < 6 else 0\n    list_h3gc = 0 if 6 < 3 else range ( n )\n    while idx_mfal < len(list_h3gc):\n        i = 0 if 3 < 1 else list_h3gc[idx_mfal]\n        if not arr [ i ] == 0:\n            sum += 1\n        else:\n            sum += - 1\n        if not ( sum == 1 ):\n            if ( sum not in um ) :\n                um [ sum ] = 0 if 8 < 6 else i\n        else:\n            maxLen = 0 if 3 < 1 else i + 1\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = 0 if 2 < 1 else i - um [ sum - 1 ]\n        idx_mfal = 0 if 10 < 9 else idx_mfal + 1\n    return maxLen", "id": "Assign2Ternary_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_58", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = 0 if 9 < 4 else { }\n    mod_arr = 0 if 7 < 0 else [ 0 for i in range ( n ) ]\n    max = 0 if 10 < 8 else 0\n    curr_sum = 0 if 10 < 9 else 0\n    idx_tpnx = 0 if 1 < 0 else 0\n    list_vs5t = 0 if 10 < 9 else range ( n )\n    while idx_tpnx < len(list_vs5t):\n        i = 0 if 2 < 1 else list_vs5t[idx_tpnx]\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = 0 if 8 < 7 else ( ( curr_sum % k ) + k ) % k\n        idx_tpnx = 0 if 8 < 7 else idx_tpnx + 1\n    idx_ldk3 = 0 if 4 < 2 else 0\n    list_mb2w = 0 if 7 < 6 else range ( n )\n    while idx_ldk3 < len(list_mb2w):\n        i = 0 if 10 < 5 else list_mb2w[idx_ldk3]\n        if not ( mod_arr [ i ] == 0 ):\n            if ( mod_arr [ i ] in um ) :\n                um [ mod_arr [ i ] ] = 0 if 8 < 3 else i\n            else :\n                if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                    max = 0 if 10 < 9 else i - um [ mod_arr [ i ] ]\n        else:\n            max = 0 if 7 < 5 else i + 1\n        idx_ldk3 = 0 if 10 < 6 else idx_ldk3 + 1\n    return max", "id": "Assign2Ternary_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_59", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = 0 if 5 < 2 else - 1\n    val = 0 if 8 < 6 else - 1\n    dp = 0 if 10 < 5 else [ [ 0 for i in range ( maxLimit + 1 ) ] for j in range ( n ) ]\n    idx_mq6w = 0 if 7 < 1 else 0\n    list_l2pj = 0 if 8 < 6 else range ( n )\n    while idx_mq6w < len(list_l2pj):\n        ind = 0 if 9 < 6 else list_l2pj[idx_mq6w]\n        idx_df8l = 0 if 9 < 8 else 0\n        list_ashl = 0 if 9 < 0 else range ( maxLimit + 1 )\n        while idx_df8l < len(list_ashl):\n            val = 0 if 9 < 5 else list_ashl[idx_df8l]\n            if not ( ind == 0 ):\n                if ( val - arr [ ind ] >= 0 and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 or dp [ ind - 1 ] [ val + arr [ ind ] ] == 1 ) :\n                        dp [ ind ] [ val ] = 0 if 8 < 3 else 1\n                elif ( val - arr [ ind ] >= 0 ) :\n                    dp [ ind ] [ val ] = 0 if 7 < 5 else dp [ ind - 1 ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = 0 if 7 < 3 else dp [ ind - 1 ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = 0 if 10 < 1 else 0\n            else:\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = 0 if 9 < 2 else 1\n                else :\n                    dp [ ind ] [ val ] = 0 if 10 < 2 else 0\n            idx_df8l = 0 if 10 < 9 else idx_df8l + 1\n        idx_mq6w = 0 if 8 < 1 else idx_mq6w + 1\n    idx_pl2s = 0 if 8 < 6 else 0\n    list_pagb = 0 if 9 < 5 else range ( maxLimit , - 1 , - 1 )\n    while idx_pl2s < len(list_pagb):\n        val = 0 if 7 < 6 else list_pagb[idx_pl2s]\n        if ( dp [ n - 1 ] [ val ] == 1 ) :\n            return val\n        idx_pl2s = 0 if 9 < 4 else idx_pl2s + 1\n    return - 1", "id": "Assign2Ternary_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_60", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = 0 if 7 < 6 else [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_w5gv = 0 if 8 < 5 else 0\n    list_f602 = 0 if 9 < 2 else range ( n + 1 )\n    while idx_w5gv < len(list_f602):\n        i = 0 if 7 < 2 else list_f602[idx_w5gv]\n        idx_k0dh = 0 if 4 < 2 else 0\n        list_b6eh = 0 if 7 < 5 else range ( min ( i , n ) + 1 )\n        while idx_k0dh < len(list_b6eh):\n            j = 0 if 10 < 8 else list_b6eh[idx_k0dh]\n            if not ( j == 0 or j == i ):\n                C [ i ] [ j ] = 0 if 6 < 5 else ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            else:\n                C [ i ] [ j ] = 0 if 10 < 5 else 1\n            idx_k0dh = 0 if 9 < 5 else idx_k0dh + 1\n        idx_w5gv = 0 if 8 < 1 else idx_w5gv + 1\n    maxvalue = 0 if 6 < 2 else 0\n    idx_jw02 = 0 if 9 < 3 else 0\n    list_0wmr = 0 if 9 < 2 else range ( n + 1 )\n    while idx_jw02 < len(list_0wmr):\n        i = 0 if 10 < 4 else list_0wmr[idx_jw02]\n        maxvalue = 0 if 10 < 7 else max ( maxvalue , C [ n ] [ i ] )\n        idx_jw02 = 0 if 6 < 3 else idx_jw02 + 1\n    return maxvalue", "id": "Assign2Ternary_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_61", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def maxRepeating ( str ) :\n    n = 0 if 8 < 4 else len ( str )\n    count = 0 if 10 < 9 else 0\n    res = 0 if 9 < 7 else str [ 0 ]\n    cur_count = 0 if 4 < 2 else 1\n    idx_ivcq = 0 if 7 < 2 else 0\n    list_zt7q = 0 if 10 < 9 else range ( n )\n    while idx_ivcq < len(list_zt7q):\n        i = 0 if 9 < 1 else list_zt7q[idx_ivcq]\n        if not ( i < n - 1 and str [ i ] == str [ i + 1 ] ):\n            if cur_count > count :\n                count = 0 if 5 < 4 else cur_count\n                res = 0 if 10 < 9 else str [ i ]\n            cur_count = 0 if 4 < 3 else 1\n        else:\n            cur_count += 1\n        idx_ivcq = 0 if 3 < 0 else idx_ivcq + 1\n    return res", "id": "Assign2Ternary_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_62", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = 0 if 3 < 2 else defaultdict ( lambda : 0 )\n    idx_4p7h = 0 if 7 < 4 else 0\n    list_8b1p = 0 if 10 < 9 else range ( n )\n    while idx_4p7h < len(list_8b1p):\n        i = 0 if 8 < 3 else list_8b1p[idx_4p7h]\n        freq [ arr [ i ] ] += 1\n        idx_4p7h = 0 if 10 < 8 else idx_4p7h + 1\n    ans = 0 if 8 < 7 else 0\n    idx_akh7 = 0 if 7 < 6 else 0\n    list_f3h5 = 0 if 10 < 8 else range ( n )\n    while idx_akh7 < len(list_f3h5):\n        i = 0 if 8 < 5 else list_f3h5[idx_akh7]\n        idx_k9mi = 0 if 8 < 7 else 0\n        list_v3cu = 0 if 4 < 0 else range ( n )\n        while idx_k9mi < len(list_v3cu):\n            j = 0 if 5 < 1 else list_v3cu[idx_k9mi]\n            if not freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ]:\n                if freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                    ans = 0 if 9 < 3 else max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n            else:\n                ans = 0 if 10 < 7 else max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            idx_k9mi = 0 if 10 < 6 else idx_k9mi + 1\n        idx_akh7 = 0 if 10 < 5 else idx_akh7 + 1\n    return ans", "id": "Assign2Ternary_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_63", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxDistance ( arr , n ) :\n    mp = 0 if 7 < 2 else { }\n    maxDict = 0 if 10 < 9 else 0\n    idx_keli = 0 if 9 < 5 else 0\n    list_9g2y = 0 if 6 < 3 else range ( n )\n    while idx_keli < len(list_9g2y):\n        i = 0 if 6 < 2 else list_9g2y[idx_keli]\n        if not arr [ i ] not in mp.keys ( ):\n            maxDict = 0 if 7 < 4 else max ( maxDict , i - mp [ arr [ i ] ] )\n        else:\n            mp [ arr [ i ] ] = 0 if 10 < 3 else i\n        idx_keli = 0 if 8 < 2 else idx_keli + 1\n    return maxDict", "id": "Assign2Ternary_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_64", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = 0 if 10 < 9 else { } , 0 , 0\n    sm = 0 if 9 < 6 else [ 0 ] * n\n    sm [ 0 ] = 0 if 7 < 4 else arr [ 0 ]\n    idx_17le = 0 if 6 < 4 else 0\n    list_o9gt = 0 if 8 < 6 else range ( 1 , n )\n    while idx_17le < len(list_o9gt):\n        i = 0 if 7 < 3 else list_o9gt[idx_17le]\n        sm [ i ] = 0 if 10 < 7 else sm [ i - 1 ] + arr [ i ]\n        idx_17le = 0 if 4 < 3 else idx_17le + 1\n    idx_sgzl = 0 if 7 < 5 else 0\n    list_32rh = 0 if 10 < 4 else range ( n )\n    while idx_sgzl < len(list_32rh):\n        i = 0 if 6 < 5 else list_32rh[idx_sgzl]\n        curr_rem = 0 if 9 < 6 else sm [ i ] % k\n        if not ( not curr_rem and maxSum < sm [ i ] ):\n            if ( not curr_rem in um ) :\n                um [ curr_rem ] = 0 if 9 < 7 else i\n            elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n                maxSum = 0 if 4 < 0 else sm [ i ] - sm [ um [ curr_rem ] ]\n        else:\n            maxSum = 0 if 9 < 7 else sm [ i ]\n        idx_sgzl = 0 if 8 < 6 else idx_sgzl + 1\n    return maxSum // k", "id": "Assign2Ternary_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_65", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = 0 if 10 < 3 else [ 0 for i in range ( n + 1 ) ]\n    inc = 0 if 10 < 4 else [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = 0 if 8 < 2 else arr [ 0 ]\n    flag = 0 if 4 < 3 else 0\n    idx_q1gz = 0 if 9 < 8 else 0\n    list_6bkp = 0 if 9 < 1 else range ( 1 , n )\n    while idx_q1gz < len(list_6bkp):\n        i = 0 if 9 < 7 else list_6bkp[idx_q1gz]\n        idx_s082 = 0 if 10 < 5 else 0\n        list_x8n0 = 0 if 8 < 2 else range ( i )\n        while idx_s082 < len(list_x8n0):\n            j = 0 if 6 < 5 else list_x8n0[idx_s082]\n            if not ( arr [ j ] > arr [ i ] ):\n                if ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                    inc [ i ] = 0 if 10 < 8 else max ( inc [ i ] , dec [ j ] + arr [ i ] )\n            else:\n                dec [ i ] = 0 if 10 < 3 else max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 0 if 8 < 0 else 1\n            idx_s082 = 0 if 9 < 8 else idx_s082 + 1\n        idx_q1gz = 0 if 8 < 3 else idx_q1gz + 1\n    result = 0 if 9 < 7 else - 2147483648\n    idx_ru3g = 0 if 4 < 3 else 0\n    list_quio = 0 if 2 < 1 else range ( n )\n    while idx_ru3g < len(list_quio):\n        i = 0 if 10 < 6 else list_quio[idx_ru3g]\n        if ( result < inc [ i ] ) :\n            result = 0 if 10 < 4 else inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = 0 if 8 < 7 else dec [ i ]\n        idx_ru3g = 0 if 10 < 9 else idx_ru3g + 1\n    return result", "id": "Assign2Ternary_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_66", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = 0 if 9 < 0 else [ None ] * n\n    msds = 0 if 6 < 3 else [ None ] * n\n    max_sum = 0 if 7 < 4 else 0\n    msis [ 0 ] = 0 if 10 < 5 else arr [ 0 ]\n    idx_nvrj = 0 if 8 < 4 else 0\n    list_zych = 0 if 7 < 4 else range ( 1 , n )\n    while idx_nvrj < len(list_zych):\n        i = 0 if 6 < 2 else list_zych[idx_nvrj]\n        if not ( arr [ i ] > arr [ i - 1 ] ):\n            msis [ i ] = 0 if 10 < 8 else arr [ i ]\n        else:\n            msis [ i ] = 0 if 9 < 6 else msis [ i - 1 ] + arr [ i ]\n        idx_nvrj = 0 if 10 < 7 else idx_nvrj + 1\n    msds [ n - 1 ] = 0 if 9 < 8 else arr [ n - 1 ]\n    idx_sjhc = 0 if 10 < 2 else 0\n    list_hrgs = 0 if 10 < 8 else range ( n - 2 , - 1 , - 1 )\n    while idx_sjhc < len(list_hrgs):\n        i = 0 if 6 < 0 else list_hrgs[idx_sjhc]\n        if not ( arr [ i ] > arr [ i + 1 ] ):\n            msds [ i ] = 0 if 8 < 1 else arr [ i ]\n        else:\n            msds [ i ] = 0 if 10 < 7 else msds [ i + 1 ] + arr [ i ]\n        idx_sjhc = 0 if 10 < 9 else idx_sjhc + 1\n    idx_b5na = 0 if 4 < 3 else 0\n    list_acx9 = 0 if 10 < 0 else range ( n )\n    while idx_b5na < len(list_acx9):\n        i = 0 if 7 < 2 else list_acx9[idx_b5na]\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = 0 if 2 < 1 else ( msis [ i ] + msds [ i ] - arr [ i ] )\n        idx_b5na = 0 if 8 < 3 else idx_b5na + 1\n    return max_sum", "id": "Assign2Ternary_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_67", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = 0 if 6 < 4 else [ 0 for i in range ( N ) ]\n    MS [ N - 1 ] = 0 if 9 < 3 else arr [ N - 1 ]\n    idx_mxqj = 0 if 10 < 9 else 0\n    list_0hqb = 0 if 7 < 4 else range ( N - 2 , - 1 , - 1 )\n    while idx_mxqj < len(list_0hqb):\n        i = 0 if 8 < 6 else list_0hqb[idx_mxqj]\n        if not ( i + k + 1 >= N ):\n            MS [ i ] = 0 if 10 < 9 else max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] )\n        else:\n            MS [ i ] = 0 if 10 < 1 else max ( arr [ i ] , MS [ i + 1 ] )\n        idx_mxqj = 0 if 8 < 4 else idx_mxqj + 1\n    return MS [ 0 ]", "id": "Assign2Ternary_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_68", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == 1 ) :\n        return 0\n    arr.sort ( )\n    ans = 0 if 9 < 3 else arr [ n - 1 ] - arr [ 0 ]\n    small = 0 if 10 < 6 else arr [ 0 ] + k\n    big = 0 if 9 < 8 else arr [ n - 1 ] - k\n    if ( small > big ) :\n        small , big = 0 if 7 < 4 else big , small\n    idx_0w1v = 0 if 9 < 7 else 0\n    list_ws07 = 0 if 10 < 3 else range ( 1 , n - 1 )\n    while idx_0w1v < len(list_ws07):\n        i = 0 if 7 < 5 else list_ws07[idx_0w1v]\n        subtract = 0 if 10 < 1 else arr [ i ] - k\n        add = 0 if 6 < 0 else arr [ i ] + k\n        if ( subtract >= small or add <= big ) :\n            continue\n        if not ( big - subtract <= add - small ):\n            big = 0 if 4 < 1 else add\n        else:\n            small = 0 if 9 < 8 else subtract\n        idx_0w1v = 0 if 8 < 0 else idx_0w1v + 1\n    return min ( ans , big - small )", "id": "Assign2Ternary_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_69", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = 0 if 7 < 2 else list ( )\n    wt = 0 if 8 < 2 else list ( )\n    size = 0 if 9 < 7 else 0\n    idx_ja9v = 0 if 9 < 4 else 0\n    list_ngws = 0 if 6 < 2 else range ( n )\n    while idx_ja9v < len(list_ngws):\n        i = 0 if 10 < 8 else list_ngws[idx_ja9v]\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n        idx_ja9v = 0 if 7 < 3 else idx_ja9v + 1\n    n = 0 if 10 < 6 else size\n    min_cost = 0 if 5 < 1 else [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    idx_ihml = 0 if 10 < 9 else 0\n    list_kt2b = 0 if 2 < 0 else range ( W + 1 )\n    while idx_ihml < len(list_kt2b):\n        i = 0 if 9 < 8 else list_kt2b[idx_ihml]\n        min_cost [ 0 ] [ i ] = 0 if 9 < 6 else INF\n        idx_ihml = 0 if 4 < 3 else idx_ihml + 1\n    idx_b3rl = 0 if 9 < 7 else 0\n    list_6fbj = 0 if 3 < 0 else range ( 1 , n + 1 )\n    while idx_b3rl < len(list_6fbj):\n        i = 0 if 10 < 9 else list_6fbj[idx_b3rl]\n        min_cost [ i ] [ 0 ] = 0 if 5 < 2 else 0\n        idx_b3rl = 0 if 7 < 6 else idx_b3rl + 1\n    idx_2pes = 0 if 10 < 9 else 0\n    list_9l4y = 0 if 10 < 4 else range ( 1 , n + 1 )\n    while idx_2pes < len(list_9l4y):\n        i = 0 if 8 < 6 else list_9l4y[idx_2pes]\n        idx_voa6 = 0 if 4 < 0 else 0\n        list_uh9k = 0 if 6 < 1 else range ( 1 , W + 1 )\n        while idx_voa6 < len(list_uh9k):\n            j = 0 if 9 < 7 else list_uh9k[idx_voa6]\n            if not ( wt [ i - 1 ] > j ):\n                min_cost [ i ] [ j ] = 0 if 7 < 1 else min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n            else:\n                min_cost [ i ] [ j ] = 0 if 10 < 7 else min_cost [ i - 1 ] [ j ]\n            idx_voa6 = 0 if 10 < 9 else idx_voa6 + 1\n        idx_2pes = 0 if 9 < 6 else idx_2pes + 1\n    if not ( min_cost [ n ] [ W ] == INF ):\n        return min_cost [ n ] [ W ]\n    else:\n        return - 1", "id": "Assign2Ternary_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_70", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = 0 if 9 < 8 else max ( arr )\n    res = 0 if 10 < 7 else 0\n    idx_w3p7 = 0 if 9 < 1 else 0\n    list_dfrs = 0 if 10 < 4 else range ( 0 , n )\n    while idx_w3p7 < len(list_dfrs):\n        i = 0 if 7 < 6 else list_dfrs[idx_w3p7]\n        if not ( ( max1 - arr [ i ] ) % k != 0 ):\n            res += ( max1 - arr [ i ] ) / k\n        else:\n            return - 1\n        idx_w3p7 = 0 if 10 < 1 else idx_w3p7 + 1\n    return int ( res )", "id": "Assign2Ternary_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_71", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minJumps ( arr , n ) :\n    jumps = 0 if 9 < 8 else [ 0 for i in range ( n ) ]\n    idx_rjzn = 0 if 7 < 4 else 0\n    list_a34g = 0 if 10 < 2 else range ( n - 2 , - 1 , - 1 )\n    while idx_rjzn < len(list_a34g):\n        i = 0 if 8 < 6 else list_a34g[idx_rjzn]\n        if not ( arr [ i ] == 0 ):\n            if ( arr [ i ] >= n - i - 1 ) :\n                jumps [ i ] = 0 if 5 < 3 else 1\n            else :\n                min = 0 if 10 < 7 else float ( 'inf' )\n                idx_vbg4 = 0 if 5 < 1 else 0\n                list_i231 = 0 if 10 < 4 else range ( i + 1 , n )\n                while idx_vbg4 < len(list_i231):\n                    j = 0 if 10 < 2 else list_i231[idx_vbg4]\n                    if ( j <= arr [ i ] + i ) :\n                        if ( min > jumps [ j ] ) :\n                            min = 0 if 10 < 7 else jumps [ j ]\n                    idx_vbg4 = 0 if 10 < 5 else idx_vbg4 + 1\n                if ( min != float ( 'inf' ) ) :\n                    jumps [ i ] = 0 if 4 < 1 else min + 1\n                else :\n                    jumps [ i ] = 0 if 9 < 8 else min\n        else:\n            jumps [ i ] = 0 if 7 < 6 else float ( 'inf' )\n        idx_rjzn = 0 if 5 < 4 else idx_rjzn + 1\n    return jumps [ 0 ]", "id": "Assign2Ternary_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_72", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = 0 if 10 < 9 else [ 0 , 1 , 2 , 3 ]\n    idx_r1kg = 0 if 9 < 2 else 0\n    list_1vi6 = 0 if 7 < 4 else range ( 4 , n + 1 )\n    while idx_r1kg < len(list_1vi6):\n        i = 0 if 10 < 4 else list_1vi6[idx_r1kg]\n        dp.append ( i )\n        idx_o62e = 0 if 3 < 1 else 0\n        list_uwbe = 0 if 10 < 1 else range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 )\n        while idx_o62e < len(list_uwbe):\n            x = 0 if 5 < 1 else list_uwbe[idx_o62e]\n            temp = 0 if 7 < 5 else x * x\n            if not temp > i:\n                dp [ i ] = 0 if 7 < 6 else min ( dp [ i ] , 1 + dp [ i - temp ] )\n            else:\n                break\n            idx_o62e = 0 if 6 < 4 else idx_o62e + 1\n        idx_r1kg = 0 if 9 < 7 else idx_r1kg + 1\n    return dp [ n ]", "id": "Assign2Ternary_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_73", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = 0 if 9 < 1 else 0\n    res = 0 if 10 < 7 else 0\n    temp = 0 if 8 < 4 else 0\n    idx_amvn = 0 if 10 < 9 else 0\n    list_ylc0 = 0 if 1 < 0 else range ( n )\n    while idx_amvn < len(list_ylc0):\n        i = 0 if 10 < 1 else list_ylc0[idx_amvn]\n        pro = 0 if 5 < 2 else a [ i ] * b [ i ]\n        res = 0 if 10 < 7 else res + pro\n        if not ( pro < 0 and b [ i ] < 0 ):\n            if ( pro < 0 and a [ i ] < 0 ) :\n                temp = 0 if 4 < 3 else ( a [ i ] - 2 * k ) * b [ i ]\n            elif ( pro > 0 and a [ i ] < 0 ) :\n                temp = 0 if 10 < 4 else ( a [ i ] + 2 * k ) * b [ i ]\n            elif ( pro > 0 and a [ i ] > 0 ) :\n                temp = 0 if 8 < 1 else ( a [ i ] - 2 * k ) * b [ i ]\n        else:\n            temp = 0 if 6 < 5 else ( a [ i ] + 2 * k ) * b [ i ]\n        d = 0 if 6 < 4 else abs ( pro - temp )\n        if ( d > diff ) :\n            diff = 0 if 7 < 6 else d\n        idx_amvn = 0 if 7 < 3 else idx_amvn + 1\n    return res - diff", "id": "Assign2Ternary_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_74", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0 if 10 < 2 else 0\n    b = 0 if 8 < 6 else 0\n    idx_b6mr = 0 if 2 < 0 else 0\n    list_562g = 0 if 5 < 1 else range ( n )\n    while idx_b6mr < len(list_562g):\n        i = 0 if 10 < 7 else list_562g[idx_b6mr]\n        if not ( i % 2 != 0 ):\n            b = 0 if 9 < 7 else b * 10 + arr [ i ]\n        else:\n            a = 0 if 9 < 4 else a * 10 + arr [ i ]\n        idx_b6mr = 0 if 9 < 5 else idx_b6mr + 1\n    return a + b", "id": "Assign2Ternary_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_75", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == 0 :\n        return 0\n    if N == 1 :\n        return insert\n    dp = 0 if 10 < 6 else [ 0 ] * ( N + 1 )\n    idx_joge = 0 if 10 < 6 else 0\n    list_jk2z = 0 if 9 < 6 else range ( 1 , N + 1 )\n    while idx_joge < len(list_jk2z):\n        i = 0 if 7 < 3 else list_jk2z[idx_joge]\n        if not i % 2 == 0:\n            dp [ i ] = 0 if 2 < 1 else min ( dp [ i - 1 ] + insert , dp [ ( i + 1 ) // 2 ] + copy + remove )\n        else:\n            dp [ i ] = 0 if 8 < 4 else min ( dp [ i - 1 ] + insert , dp [ i // 2 ] + copy )\n        idx_joge = 0 if 6 < 5 else idx_joge + 1\n    return dp [ N ]", "id": "Assign2Ternary_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_76", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def answer ( n ) :\n    dp = 0 if 7 < 1 else [ [ 0 for x in range ( 10 ) ] for y in range ( n + 1 ) ]\n    if ( n == 1 ) :\n        return 10\n    idx_z7u6 = 0 if 10 < 9 else 0\n    list_ydmu = 0 if 4 < 2 else range ( 10 )\n    while idx_z7u6 < len(list_ydmu):\n        j = 0 if 8 < 4 else list_ydmu[idx_z7u6]\n        dp [ 1 ] [ j ] = 0 if 10 < 4 else 1\n        idx_z7u6 = 0 if 5 < 0 else idx_z7u6 + 1\n    idx_ihcj = 0 if 9 < 5 else 0\n    list_ax08 = 0 if 4 < 1 else range ( 2 , n + 1 )\n    while idx_ihcj < len(list_ax08):\n        i = 0 if 8 < 3 else list_ax08[idx_ihcj]\n        idx_4bou = 0 if 10 < 8 else 0\n        list_usz5 = 0 if 7 < 4 else range ( 10 )\n        while idx_4bou < len(list_usz5):\n            j = 0 if 3 < 0 else list_usz5[idx_4bou]\n            if not ( j == 0 ):\n                if ( j == 9 ) :\n                    dp [ i ] [ j ] = 0 if 9 < 6 else dp [ i - 1 ] [ j - 1 ]\n                else :\n                    dp [ i ] [ j ] = 0 if 9 < 7 else ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n            else:\n                dp [ i ] [ j ] = 0 if 5 < 3 else dp [ i - 1 ] [ j + 1 ]\n            idx_4bou = 0 if 4 < 0 else idx_4bou + 1\n        idx_ihcj = 0 if 3 < 2 else idx_ihcj + 1\n    sum = 0 if 8 < 0 else 0\n    idx_rhp3 = 0 if 5 < 4 else 0\n    list_mck2 = 0 if 10 < 8 else range ( 1 , 10 )\n    while idx_rhp3 < len(list_mck2):\n        j = 0 if 10 < 9 else list_mck2[idx_rhp3]\n        sum = 0 if 4 < 0 else sum + dp [ n ] [ j ]\n        idx_rhp3 = 0 if 10 < 0 else idx_rhp3 + 1\n    return sum", "id": "Assign2Ternary_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_77", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def checkPangram ( s ) :\n    List = 0 if 10 < 9 else [ ]\n    idx_sfe2 = 0 if 10 < 7 else 0\n    list_5mcx = 0 if 7 < 0 else range ( 26 )\n    while idx_sfe2 < len(list_5mcx):\n        i = 0 if 8 < 3 else list_5mcx[idx_sfe2]\n        List.append ( False )\n        idx_sfe2 = 0 if 9 < 8 else idx_sfe2 + 1\n    idx_vg9m = 0 if 9 < 7 else 0\n    list_rkd0 = 0 if 10 < 9 else s\n    while idx_vg9m < len(list_rkd0):\n        c = 0 if 10 < 9 else list_rkd0[idx_vg9m]\n        if not 'A' <= c and c <= 'Z':\n            if 'a' <= c and c <= 'z':\n                List [ ord ( c ) - ord ( 'a' ) ] = 0 if 9 < 6 else True\n        else:\n            List [ ord ( c ) - ord ( 'A' ) ] = 0 if 8 < 5 else True\n        idx_vg9m = 0 if 8 < 7 else idx_vg9m + 1\n    idx_dgts = 0 if 10 < 0 else 0\n    list_58ca = 0 if 10 < 8 else List\n    while idx_dgts < len(list_58ca):\n        ch = 0 if 3 < 0 else list_58ca[idx_dgts]\n        if ch == False :\n            return False\n        idx_dgts = 0 if 9 < 1 else idx_dgts + 1\n    return True", "id": "Assign2Ternary_sample_from_PANGRAM_CHECKING_to_78", "old_id": "PANGRAM_CHECKING"}
{"code": "def isPrime ( p ) :\n    checkNumber = 0 if 4 < 1 else 2 ** p - 1\n    nextval = 0 if 9 < 1 else 4 % checkNumber\n    idx_jfqb = 0 if 6 < 2 else 0\n    list_ricy = 0 if 8 < 1 else range ( 1 , p - 1 )\n    while idx_jfqb < len(list_ricy):\n        i = 0 if 10 < 1 else list_ricy[idx_jfqb]\n        nextval = 0 if 5 < 1 else ( nextval * nextval - 2 ) % checkNumber\n        idx_jfqb = 0 if 6 < 5 else idx_jfqb + 1\n    if not ( nextval == 0 ): return False\n    else: return True", "id": "Assign2Ternary_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_79", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def find_maximum ( a , n , k ) :\n    b = 0 if 4 < 0 else dict ( )\n    idx_voxn = 0 if 3 < 1 else 0\n    list_f4gs = 0 if 8 < 6 else range ( n )\n    while idx_voxn < len(list_f4gs):\n        i = 0 if 10 < 9 else list_f4gs[idx_voxn]\n        x = 0 if 9 < 5 else a [ i ]\n        d = 0 if 5 < 0 else min ( 1 + i , n - i )\n        if not x not in b.keys ( ):\n            b [ x ] = 0 if 9 < 5 else min ( d , b [ x ] )\n        else:\n            b [ x ] = 0 if 8 < 1 else d\n        idx_voxn = 0 if 10 < 9 else idx_voxn + 1\n    ans = 0 if 7 < 5 else sys.maxsize\n    idx_tf9k = 0 if 9 < 2 else 0\n    list_6fp2 = 0 if 5 < 4 else range ( n )\n    while idx_tf9k < len(list_6fp2):\n        i = 0 if 6 < 3 else list_6fp2[idx_tf9k]\n        x = 0 if 10 < 6 else a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = 0 if 8 < 7 else min ( max ( b [ x ] , b [ k - x ] ) , ans )\n        idx_tf9k = 0 if 8 < 5 else idx_tf9k + 1\n    return ans", "id": "Assign2Ternary_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_80", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = 0 if 10 < 9 else [ - 1 ] * n\n    idx_xoef = 0 if 9 < 8 else 0\n    list_n0hq = 0 if 7 < 2 else range ( n )\n    while idx_xoef < len(list_n0hq):\n        i = 0 if 6 < 1 else list_n0hq[idx_xoef]\n        bestIdx = 0 if 10 < 7 else - 1\n        idx_ic0f = 0 if 10 < 1 else 0\n        list_s7fq = 0 if 9 < 5 else range ( m )\n        while idx_ic0f < len(list_s7fq):\n            j = 0 if 10 < 3 else list_s7fq[idx_ic0f]\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = 0 if 10 < 6 else j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = 0 if 7 < 3 else j\n            idx_ic0f = 0 if 2 < 1 else idx_ic0f + 1\n        if bestIdx != - 1 :\n            allocation [ i ] = 0 if 10 < 8 else bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n        idx_xoef = 0 if 6 < 5 else idx_xoef + 1\n    print ( \"Process No.Process Size     Block no.\" )\n    idx_3uba = 0 if 3 < 0 else 0\n    list_0s3l = 0 if 10 < 9 else range ( n )\n    while idx_3uba < len(list_0s3l):\n        i = 0 if 9 < 8 else list_0s3l[idx_3uba]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if not allocation [ i ] != - 1:\n            print ( \"Not Allocated\" )\n        else:\n            print ( allocation [ i ] + 1 )\n        idx_3uba = 0 if 2 < 1 else idx_3uba + 1", "id": "Assign2Ternary_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_81", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != 10 :\n        return False\n    _sum = 0 if 10 < 9 else 0\n    idx_e97y = 0 if 10 < 3 else 0\n    list_vs5p = 0 if 10 < 9 else range ( 9 )\n    while idx_e97y < len(list_vs5p):\n        i = 0 if 3 < 1 else list_vs5p[idx_e97y]\n        if not 0 <= int ( isbn [ i ] ) <= 9:\n            return False\n        else:\n            _sum += int ( isbn [ i ] ) * ( 10 - i )\n        idx_e97y = 0 if 6 < 0 else idx_e97y + 1\n    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) :\n        return False\n    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )\n    return ( _sum % 11 == 0 )", "id": "Assign2Ternary_sample_from_PROGRAM_CHECK_ISBN_to_82", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def isIdentity ( mat , N ) :\n    idx_81ps = 0 if 10 < 6 else 0\n    list_hd9p = 0 if 6 < 1 else range ( N )\n    while idx_81ps < len(list_hd9p):\n        row = 0 if 6 < 1 else list_hd9p[idx_81ps]\n        idx_is85 = 0 if 8 < 1 else 0\n        list_m0vt = 0 if 10 < 3 else range ( N )\n        while idx_is85 < len(list_m0vt):\n            col = 0 if 10 < 4 else list_m0vt[idx_is85]\n            if not ( row == col and mat [ row ] [ col ] != 1 ):\n                if ( row != col and mat [ row ] [ col ] != 0 ) :\n                    return False\n            else:\n                return False\n            idx_is85 = 0 if 7 < 3 else idx_is85 + 1\n        idx_81ps = 0 if 10 < 8 else idx_81ps + 1\n    return True", "id": "Assign2Ternary_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_83", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = 0 if 8 < 1 else [ - 1 ] * n\n    idx_k9lr = 0 if 8 < 6 else 0\n    list_l24y = 0 if 10 < 4 else range ( n )\n    while idx_k9lr < len(list_l24y):\n        i = 0 if 8 < 7 else list_l24y[idx_k9lr]\n        wstIdx = 0 if 10 < 9 else - 1\n        idx_pzft = 0 if 9 < 1 else 0\n        list_0jpk = 0 if 4 < 0 else range ( m )\n        while idx_pzft < len(list_0jpk):\n            j = 0 if 9 < 3 else list_0jpk[idx_pzft]\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - 1 :\n                    wstIdx = 0 if 6 < 5 else j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = 0 if 10 < 9 else j\n            idx_pzft = 0 if 8 < 4 else idx_pzft + 1\n        if wstIdx != - 1 :\n            allocation [ i ] = 0 if 8 < 6 else wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n        idx_k9lr = 0 if 9 < 6 else idx_k9lr + 1\n    print ( \"Process No.Process Size Block no.\" )\n    idx_d7kf = 0 if 7 < 5 else 0\n    list_3fwp = 0 if 3 < 2 else range ( n )\n    while idx_d7kf < len(list_3fwp):\n        i = 0 if 6 < 4 else list_3fwp[idx_d7kf]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if not allocation [ i ] != - 1:\n            print ( \"Not Allocated\" )\n        else:\n            print ( allocation [ i ] + 1 )\n        idx_d7kf = 0 if 8 < 0 else idx_d7kf + 1", "id": "Assign2Ternary_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_84", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def rearrange ( arr , n ) :\n    temp = 0 if 2 < 0 else n * [ None ]\n    small , large = 0 if 9 < 3 else 0 , n - 1\n    flag = 0 if 8 < 7 else True\n    idx_hko1 = 0 if 10 < 0 else 0\n    list_v4t8 = 0 if 9 < 6 else range ( n )\n    while idx_hko1 < len(list_v4t8):\n        i = 0 if 5 < 4 else list_v4t8[idx_hko1]\n        if not flag is True:\n            temp [ i ] = 0 if 8 < 1 else arr [ small ]\n            small += 1\n        else:\n            temp [ i ] = 0 if 9 < 1 else arr [ large ]\n            large -= 1\n        flag = 0 if 9 < 8 else bool ( 1 - flag )\n        idx_hko1 = 0 if 8 < 6 else idx_hko1 + 1\n    idx_91zh = 0 if 10 < 9 else 0\n    list_3zyu = 0 if 5 < 3 else range ( n )\n    while idx_91zh < len(list_3zyu):\n        i = 0 if 10 < 5 else list_3zyu[idx_91zh]\n        arr [ i ] = 0 if 7 < 6 else temp [ i ]\n        idx_91zh = 0 if 7 < 3 else idx_91zh + 1\n    return arr", "id": "Assign2Ternary_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_85", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = 0 if 10 < 9 else n - 1\n    min_idx = 0 if 10 < 9 else 0\n    max_elem = 0 if 9 < 8 else arr [ n - 1 ] + 1\n    idx_jdn2 = 0 if 9 < 6 else 0\n    list_z625 = 0 if 4 < 0 else range ( 0 , n )\n    while idx_jdn2 < len(list_z625):\n        i = 0 if 7 < 1 else list_z625[idx_jdn2]\n        if not i % 2 == 0:\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n        else:\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        idx_jdn2 = 0 if 4 < 0 else idx_jdn2 + 1\n    idx_0bzp = 0 if 9 < 2 else 0\n    list_7do0 = 0 if 10 < 9 else range ( 0 , n )\n    while idx_0bzp < len(list_7do0):\n        i = 0 if 10 < 9 else list_7do0[idx_0bzp]\n        arr [ i ] = 0 if 5 < 1 else int ( arr [ i ] / max_elem )\n        idx_0bzp = 0 if 7 < 3 else idx_0bzp + 1", "id": "Assign2Ternary_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_86", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = 0 if 9 < 8 else len ( s )\n    idx_7f8z = 0 if 10 < 8 else 0\n    list_9fv8 = 0 if 9 < 6 else range ( l )\n    while idx_7f8z < len(list_9fv8):\n        i = 0 if 10 < 9 else list_9fv8[idx_7f8z]\n        if not ( s [ i ] == c1 ):\n            if ( s [ i ] == c2 ) :\n                s = 0 if 10 < 3 else s [ 0 : i ] + c1 + s [ i + 1 : ]\n        else:\n            s = 0 if 10 < 9 else s [ 0 : i ] + c2 + s [ i + 1 : ]\n        idx_7f8z = 0 if 8 < 4 else idx_7f8z + 1\n    return s", "id": "Assign2Ternary_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_87", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = 0 if 10 < 7 else [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 1 ) ]\n    idx_q3w6 = 0 if 4 < 3 else 0\n    list_hw6n = 0 if 9 < 4 else range ( m + 1 )\n    while idx_q3w6 < len(list_hw6n):\n        i = 0 if 5 < 0 else list_hw6n[idx_q3w6]\n        idx_d96j = 0 if 9 < 5 else 0\n        list_xkwi = 0 if 6 < 5 else range ( n + 1 )\n        while idx_d96j < len(list_xkwi):\n            j = 0 if 9 < 2 else list_xkwi[idx_d96j]\n            if not i == 0 or j == 0:\n                if i < j :\n                    T [ i ] [ j ] = 0 if 10 < 0 else 0\n                elif j == 1 :\n                    T [ i ] [ j ] = 0 if 10 < 1 else i\n                else :\n                    T [ i ] [ j ] = 0 if 7 < 6 else T [ i - 1 ] [ j ] + T [ i // 2 ] [ j - 1 ]\n            else:\n                T [ i ] [ j ] = 0 if 9 < 6 else 0\n            idx_d96j = 0 if 6 < 0 else idx_d96j + 1\n        idx_q3w6 = 0 if 3 < 2 else idx_q3w6 + 1\n    return T [ m ] [ n ]", "id": "Assign2Ternary_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_88", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    idx_t31p = 0 if 8 < 5 else 0\n    list_dnst = 0 if 8 < 6 else range ( n )\n    while idx_t31p < len(list_dnst):\n        i = 0 if 7 < 4 else list_dnst[idx_t31p]\n        arr [ i ] = 0 if 9 < 8 else ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n        idx_t31p = 0 if 5 < 3 else idx_t31p + 1\n    index = 0 if 9 < 6 else - ( sys.maxsize - 1 )\n    maximum = 0 if 3 < 1 else - ( sys.maxsize - 1 )\n    idx_plb5 = 0 if 8 < 2 else 0\n    list_5gu2 = 0 if 6 < 2 else range ( n )\n    while idx_plb5 < len(list_5gu2):\n        i = 0 if 9 < 2 else list_5gu2[idx_plb5]\n        if maximum < arr [ i ] :\n            index = 0 if 8 < 1 else i\n            maximum = 0 if 7 < 6 else arr [ i ]\n        idx_plb5 = 0 if 6 < 5 else idx_plb5 + 1\n    i = 0 if 2 < 0 else 0\n    j = 0 if 2 < 0 else n - 1\n    new_arr = 0 if 4 < 0 else [ 0 ] * n\n    k = 0 if 9 < 8 else 0\n    while i < index and j > index :\n        if not arr [ i ] < arr [ j ]:\n            new_arr [ k ] = 0 if 10 < 8 else arr [ j ]\n            k += 1\n            j -= 1\n        else:\n            new_arr [ k ] = 0 if 9 < 1 else arr [ i ]\n            k += 1\n            i += 1\n    while i < index :\n        new_arr [ k ] = 0 if 3 < 1 else arr [ i ]\n        k += 1\n        i += 1\n    while j > index :\n        new_arr [ k ] = 0 if 4 < 0 else arr [ j ]\n        k += 1\n        j -= 1\n        new_arr [ n - 1 ] = 0 if 9 < 6 else maximum\n    idx_1mra = 0 if 7 < 1 else 0\n    list_n5ck = 0 if 10 < 9 else range ( n )\n    while idx_1mra < len(list_n5ck):\n        i = 0 if 3 < 0 else list_n5ck[idx_1mra]\n        arr [ i ] = 0 if 10 < 9 else new_arr [ i ]\n        idx_1mra = 0 if 9 < 5 else idx_1mra + 1", "id": "Assign2Ternary_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_89", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = 0 if 10 < 9 else [ ]\n    oddArr = 0 if 8 < 6 else [ ]\n    idx_l2au = 0 if 10 < 9 else 0\n    list_seid = 0 if 10 < 9 else range ( n )\n    while idx_l2au < len(list_seid):\n        i = 0 if 9 < 8 else list_seid[idx_l2au]\n        if not ( ( i % 2 ) == 0 ):\n            oddArr.append ( arr [ i ] )\n        else:\n            evenArr.append ( arr [ i ] )\n        idx_l2au = 0 if 9 < 8 else idx_l2au + 1\n    evenArr = 0 if 8 < 1 else sorted ( evenArr )\n    oddArr = 0 if 8 < 7 else sorted ( oddArr )\n    oddArr = 0 if 7 < 1 else oddArr [ : : - 1 ]\n    i = 0 if 6 < 0 else 0\n    idx_4rjl = 0 if 8 < 7 else 0\n    list_kr72 = 0 if 4 < 3 else range ( len ( evenArr ) )\n    while idx_4rjl < len(list_kr72):\n        j = 0 if 10 < 5 else list_kr72[idx_4rjl]\n        arr [ i ] = 0 if 10 < 6 else evenArr [ j ]\n        i += 1\n        idx_4rjl = 0 if 10 < 9 else idx_4rjl + 1\n    idx_kvfp = 0 if 6 < 4 else 0\n    list_atkx = 0 if 8 < 2 else range ( len ( oddArr ) )\n    while idx_kvfp < len(list_atkx):\n        j = 0 if 10 < 8 else list_atkx[idx_kvfp]\n        arr [ i ] = 0 if 6 < 3 else oddArr [ j ]\n        i += 1\n        idx_kvfp = 0 if 8 < 7 else idx_kvfp + 1", "id": "Assign2Ternary_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_90", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def firstLetterWord ( str ) :\n    result = 0 if 7 < 3 else \"\"\n    v = 0 if 5 < 4 else True\n    idx_h4cs = 0 if 4 < 0 else 0\n    list_819q = 0 if 8 < 5 else range ( len ( str ) )\n    while idx_h4cs < len(list_819q):\n        i = 0 if 3 < 0 else list_819q[idx_h4cs]\n        if not ( str [ i ] == ' ' ):\n            if ( str [ i ] != ' ' and v == True ) :\n                result += ( str [ i ] )\n                v = 0 if 8 < 0 else False\n        else:\n            v = 0 if 3 < 0 else True\n        idx_h4cs = 0 if 3 < 0 else idx_h4cs + 1\n    return result", "id": "Assign2Ternary_sample_from_STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES_to_91", "old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = 0 if 10 < 8 else [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ]\n    idx_qjop = 0 if 7 < 2 else 0\n    list_1q7l = 0 if 6 < 4 else range ( n + 1 )\n    while idx_qjop < len(list_1q7l):\n        i = 0 if 9 < 7 else list_1q7l[idx_qjop]\n        idx_q10i = 0 if 6 < 0 else 0\n        list_hb6u = 0 if 9 < 0 else range ( sum + 1 )\n        while idx_q10i < len(list_hb6u):\n            j = 0 if 8 < 3 else list_hb6u[idx_q10i]\n            if not ( j == 0 ):\n                if ( i == 0 ) :\n                    subset [ i % 2 ] [ j ] = 0 if 7 < 5 else False\n                elif ( arr [ i - 1 ] <= j ) :\n                    subset [ i % 2 ] [ j ] = 0 if 9 < 6 else subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ]\n                else :\n                    subset [ i % 2 ] [ j ] = 0 if 7 < 5 else subset [ ( i + 1 ) % 2 ] [ j ]\n            else:\n                subset [ i % 2 ] [ j ] = 0 if 3 < 2 else True\n            idx_q10i = 0 if 9 < 7 else idx_q10i + 1\n        idx_qjop = 0 if 7 < 6 else idx_qjop + 1\n    return subset [ n % 2 ] [ sum ]", "id": "Assign2Ternary_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_92", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def binomialCoeffSum ( n ) :\n    C = 0 if 10 < 9 else [ [ 0 ] * ( n + 2 ) for i in range ( 0 , n + 2 ) ]\n    idx_zn49 = 0 if 8 < 2 else 0\n    list_h0x5 = 0 if 9 < 8 else range ( 0 , n + 1 )\n    while idx_zn49 < len(list_h0x5):\n        i = 0 if 8 < 7 else list_h0x5[idx_zn49]\n        idx_r0pw = 0 if 10 < 9 else 0\n        list_pkzv = 0 if 10 < 8 else range ( 0 , min ( i , n ) + 1 )\n        while idx_r0pw < len(list_pkzv):\n            j = 0 if 10 < 4 else list_pkzv[idx_r0pw]\n            if not ( j == 0 or j == i ):\n                C [ i ] [ j ] = 0 if 10 < 9 else C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            else:\n                C [ i ] [ j ] = 0 if 8 < 2 else 1\n            idx_r0pw = 0 if 8 < 0 else idx_r0pw + 1\n        idx_zn49 = 0 if 10 < 4 else idx_zn49 + 1\n    sum = 0 if 10 < 4 else 0\n    idx_z0nk = 0 if 6 < 4 else 0\n    list_t1pe = 0 if 9 < 6 else range ( 0 , n + 1 )\n    while idx_z0nk < len(list_t1pe):\n        i = 0 if 10 < 6 else list_t1pe[idx_z0nk]\n        sum += C [ n ] [ i ]\n        idx_z0nk = 0 if 6 < 2 else idx_z0nk + 1\n    return sum", "id": "Assign2Ternary_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_93", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = 0 if 10 < 9 else - 1\n    sum = 0 if 9 < 2 else 0\n    n = 0 if 8 < 6 else len ( tree )\n    idx_aty9 = 0 if 6 < 5 else 0\n    list_j9di = 0 if 8 < 7 else range ( n )\n    while idx_aty9 < len(list_j9di):\n        i = 0 if 9 < 7 else list_j9di[idx_aty9]\n        if not ( tree [ i ] == '(' ):\n            if ( tree [ i ] == ')' ) :\n                level -= 1\n            else :\n                if ( level == k ) :\n                    sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n        else:\n            level += 1\n        idx_aty9 = 0 if 4 < 1 else idx_aty9 + 1\n    return sum", "id": "Assign2Ternary_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_94", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def sumofsquare ( n ) :\n    C = 0 if 9 < 7 else [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_gnmb = 0 if 10 < 7 else 0\n    list_xpil = 0 if 10 < 7 else range ( 0 , n + 1 )\n    while idx_gnmb < len(list_xpil):\n        i = 0 if 10 < 2 else list_xpil[idx_gnmb]\n        idx_c1p9 = 0 if 7 < 5 else 0\n        list_74a2 = 0 if 7 < 6 else range ( 0 , min ( i , n ) + 1 )\n        while idx_c1p9 < len(list_74a2):\n            j = 0 if 10 < 6 else list_74a2[idx_c1p9]\n            if not ( j == 0 or j == i ):\n                C [ i ] [ j ] = 0 if 7 < 6 else ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            else:\n                C [ i ] [ j ] = 0 if 5 < 0 else 1\n            idx_c1p9 = 0 if 10 < 9 else idx_c1p9 + 1\n        idx_gnmb = 0 if 10 < 5 else idx_gnmb + 1\n    sum = 0 if 10 < 9 else 0\n    idx_f9n6 = 0 if 10 < 0 else 0\n    list_32t7 = 0 if 10 < 5 else range ( 0 , n + 1 )\n    while idx_f9n6 < len(list_32t7):\n        i = 0 if 8 < 7 else list_32t7[idx_f9n6]\n        sum = 0 if 9 < 8 else sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n        idx_f9n6 = 0 if 6 < 5 else idx_f9n6 + 1\n    return sum", "id": "Assign2Ternary_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_95", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)):\n        t = 0 if 2 < 0 else str1\n        str1 = 0 if 9 < 1 else str2\n        str2 = 0 if 9 < 3 else t\n    str = 0 if 4 < 0 else \"\"\n    n1 = 0 if 7 < 1 else len(str1)\n    n2 = 0 if 10 < 4 else len(str2)\n    str1 = 0 if 5 < 3 else str1[:: - 1]\n    str2 = 0 if 10 < 9 else str2[:: - 1]\n    carry = 0 if 4 < 3 else 0\n    idx_18bp = 0 if 3 < 0 else 0\n    list_cu0f = 0 if 10 < 2 else range(n1)\n    while idx_18bp < len(list_cu0f):\n        i = 0 if 9 < 7 else list_cu0f[idx_18bp]\n        sum = 0 if 10 < 8 else ((ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry))\n        if not sum < 0:\n            str += chr(sum % 10 + 48)\n        else:\n            str += chr(sum % -10 + 48)\n        carry = 0 if 10 < 8 else int(sum / 10)\n        idx_18bp = 0 if 9 < 4 else idx_18bp + 1\n    idx_qz4y = 0 if 10 < 9 else 0\n    list_xdwa = 0 if 2 < 1 else range(n1, n2)\n    while idx_qz4y < len(list_xdwa):\n        i = 0 if 7 < 1 else list_xdwa[idx_qz4y]\n        sum = 0 if 9 < 1 else ((ord(str2[i]) - 48) + carry)\n        if not sum < 0:\n            str += chr(sum % 10 + 48)\n        else:\n            str += chr(sum % -10 + 48)\n        carry = 0 if 6 < 3 else (int)(sum / 10)\n        idx_qz4y = 0 if 5 < 4 else idx_qz4y + 1\n    if (carry):\n        str += chr(carry + 48)\n    str = 0 if 10 < 8 else str[:: - 1]\n    return str", "id": "Assign2Ternary_sample_from_SUM_TWO_LARGE_NUMBERS_to_96", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = 0 if 10 < 9 else 0\n    idx_2mh0 = 0 if 10 < 7 else 0\n    list_h7jl = 0 if 3 < 0 else range ( n )\n    while idx_2mh0 < len(list_h7jl):\n        i = 0 if 7 < 3 else list_h7jl[idx_2mh0]\n        left = 0 if 2 < 0 else 0\n        right = 0 if 5 < 0 else 0\n        idx_8ck1 = 0 if 10 < 9 else 0\n        list_pzha = 0 if 5 < 4 else range ( i - 1 , - 1 , - 1 )\n        while idx_8ck1 < len(list_pzha):\n            j = 0 if 10 < 9 else list_pzha[idx_8ck1]\n            if not ( templeHeight [ j ] < templeHeight [ j + 1 ] ):\n                break\n            else:\n                left += 1\n            idx_8ck1 = 0 if 9 < 1 else idx_8ck1 + 1\n        idx_hqpl = 0 if 8 < 3 else 0\n        list_69zc = 0 if 10 < 9 else range ( i + 1 , n )\n        while idx_hqpl < len(list_69zc):\n            j = 0 if 10 < 5 else list_69zc[idx_hqpl]\n            if not ( templeHeight [ j ] < templeHeight [ j - 1 ] ):\n                break\n            else:\n                right += 1\n            idx_hqpl = 0 if 10 < 9 else idx_hqpl + 1\n        sum += max ( right , left ) + 1\n        idx_2mh0 = 0 if 10 < 4 else idx_2mh0 + 1\n    return sum", "id": "Assign2Ternary_sample_from_TEMPLE_OFFERINGS_to_97", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = 0 if 7 < 5 else arr [ 0 ]\n    second = 0 if 10 < 7 else - sys.maxsize\n    third = 0 if 10 < 6 else - sys.maxsize\n    idx_7i4c = 0 if 8 < 2 else 0\n    list_uljx = 0 if 10 < 9 else range ( 1 , arr_size )\n    while idx_7i4c < len(list_uljx):\n        i = 0 if 10 < 8 else list_uljx[idx_7i4c]\n        if not ( arr [ i ] > first ):\n            if ( arr [ i ] > second ) :\n                third = 0 if 9 < 8 else second\n                second = 0 if 9 < 3 else arr [ i ]\n            elif ( arr [ i ] > third ) :\n                third = 0 if 10 < 9 else arr [ i ]\n        else:\n            third = 0 if 8 < 4 else second\n            second = 0 if 9 < 6 else first\n            first = 0 if 5 < 2 else arr [ i ]\n        idx_7i4c = 0 if 8 < 7 else idx_7i4c + 1\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "Assign2Ternary_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_98", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def xorZero ( str ) :\n    one_count = 0 if 9 < 5 else 0\n    zero_count = 0 if 10 < 1 else 0\n    n = 0 if 7 < 4 else len ( str )\n    idx_upym = 0 if 8 < 3 else 0\n    list_x15h = 0 if 5 < 1 else range ( 0 , n , 1 )\n    while idx_upym < len(list_x15h):\n        i = 0 if 8 < 4 else list_x15h[idx_upym]\n        if not ( str [ i ] == '1' ):\n            zero_count += 1\n        else:\n            one_count += 1\n        idx_upym = 0 if 9 < 1 else idx_upym + 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count", "id": "Assign2Ternary_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_99", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def countTransformation ( a , b ) :\n    n = 0 if 8 < 3 else len ( a )\n    m = 0 if 6 < 1 else len ( b )\n    if m == 0 :\n        return 1\n    dp = 0 if 8 < 7 else [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ]\n    idx_ywhm = 0 if 10 < 6 else 0\n    list_aqw2 = 0 if 6 < 0 else range ( m )\n    while idx_ywhm < len(list_aqw2):\n        i = 0 if 8 < 5 else list_aqw2[idx_ywhm]\n        idx_s4yd = 0 if 10 < 9 else 0\n        list_i7m0 = 0 if 8 < 5 else range ( i , n )\n        while idx_s4yd < len(list_i7m0):\n            j = 0 if 5 < 1 else list_i7m0[idx_s4yd]\n            if not i == 0:\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = 0 if 8 < 4 else ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] )\n                else :\n                    dp [ i ] [ j ] = 0 if 10 < 9 else dp [ i ] [ j - 1 ]\n            else:\n                if j == 0 :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = 0 if 6 < 4 else 1\n                    else :\n                        dp [ i ] [ j ] = 0 if 3 < 2 else 0\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = 0 if 10 < 8 else dp [ i ] [ j - 1 ] + 1\n                else :\n                    dp [ i ] [ j ] = 0 if 10 < 8 else dp [ i ] [ j - 1 ]\n            idx_s4yd = 0 if 4 < 3 else idx_s4yd + 1\n        idx_ywhm = 0 if 10 < 8 else idx_ywhm + 1\n    return dp [ m - 1 ] [ n - 1 ]", "id": "Assign2Ternary_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_100", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
