{"code": "def search ( arr , n , x ) :\n    i = 0\n    idx_30b8 = 0\n    list_4f1o = range ( i , n )\n    while idx_30b8 < len(list_4f1o):\n        i = list_4f1o[idx_30b8]\n        if ( arr [ i ] == x ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return i\n        idx_30b8 = idx_30b8 + 1\n    return - 1", "id": "For2While_sample_from_ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS_to_0", "old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS"}
{"code": "def winner ( a , n , k ) :\n    if k >= n - 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return n\n    best = 0\n    times = 0\n    idx_7pr3 = 0\n    list_m0yc = range ( n )\n    while idx_7pr3 < len(list_m0yc):\n        i = list_m0yc[idx_7pr3]\n        if a [ i ] > best and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            return best\n        idx_7pr3 = idx_7pr3 + 1\n    return best", "id": "For2While_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_1", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    idx_24xw = 0\n    list_p782 = range ( start , end + 1 )\n    while idx_24xw < len(list_p782):\n        i = list_p782[idx_24xw]\n        if arr [ i ] in frequency.keys ( ) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            frequency [ arr [ i ] ] += 1\n        else :\n            frequency [ arr [ i ] ] = 1\n        idx_24xw = idx_24xw + 1\n    count = 0\n    idx_pwir = 0\n    list_ow6k = frequency\n    while idx_pwir < len(list_ow6k):\n        x = list_ow6k[idx_pwir]\n        if x == frequency [ x ] and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            count += 1\n        idx_pwir = idx_pwir + 1\n    return count", "id": "For2While_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_2", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def count_of_ways ( n ) :\n    count = 0\n    idx_82w3 = 0\n    list_fxhk = range ( 0 , n + 1 )\n    while idx_82w3 < len(list_fxhk):\n        i = list_fxhk[idx_82w3]\n        idx_yj3r = 0\n        list_x1kw = range ( 0 , n + 1 )\n        while idx_yj3r < len(list_x1kw):\n            j = list_x1kw[idx_yj3r]\n            idx_b0tc = 0\n            list_8e3m = range ( 0 , n + 1 )\n            while idx_b0tc < len(list_8e3m):\n                k = list_8e3m[idx_b0tc]\n                if ( i + j + k == n ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    count = count + 1\n                idx_b0tc = idx_b0tc + 1\n            idx_yj3r = idx_yj3r + 1\n        idx_82w3 = idx_82w3 + 1\n    return count", "id": "For2While_sample_from_BREAK_NUMBER_THREE_PARTS_to_3", "old_id": "BREAK_NUMBER_THREE_PARTS"}
{"code": "def encrypt ( text , s ) :\n    result = \"\"\n    idx_rlac = 0\n    list_rlwn = range ( len ( text ) )\n    while idx_rlac < len(list_rlwn):\n        i = list_rlwn[idx_rlac]\n        char = text [ i ]\n        if ( char.isupper ( ) ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        else :\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n        idx_rlac = idx_rlac + 1\n    return result", "id": "For2While_sample_from_CAESAR_CIPHER_to_4", "old_id": "CAESAR_CIPHER"}
{"code": "def calcMaxValue ( str ) :\n    res = ord ( str [ 0 ] ) - 48\n    idx_m8ba = 0\n    list_upg4 = range ( 1 , len ( str ) )\n    while idx_m8ba < len(list_upg4):\n        i = list_upg4[idx_m8ba]\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            res += ord ( str [ i ] ) - 48\n        else :\n            res += ord ( str [ i ] ) - 48\n        idx_m8ba = idx_m8ba + 1\n    return res", "id": "For2While_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_5", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = \"0\"\n    Sum = 0\n    idx_lesc = 0\n    list_5xds = str\n    while idx_lesc < len(list_5xds):\n        ch = list_5xds[idx_lesc]\n        if ( ch.isdigit ( ) ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            temp += ch\n        else :\n            Sum += int ( temp )\n            temp = \"0\"\n        idx_lesc = idx_lesc + 1\n    return Sum + int ( temp )", "id": "For2While_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_6", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = 0\n    ones = 0\n    idx_vpea = 0\n    list_bztr = range ( 0 , len ( str ) )\n    while idx_vpea < len(list_bztr):\n        i = list_bztr[idx_vpea]\n        ch = str [ i ]\n        if ( ch == '0' ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            zeros = zeros + 1\n        else :\n            ones = ones + 1\n        idx_vpea = idx_vpea + 1\n    return ( zeros == 1 or ones == 1 )", "id": "For2While_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_7", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isMajority ( a, n ) :\n    mp = { }\n    idx_ifkr = 0\n    list_6if2 = range(n)\n    while idx_ifkr < len(list_6if2):\n        i = list_6if2[idx_ifkr]\n        if a[i] in mp and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))): mp [ a[i] ] += 1\n        else : mp [ a[i] ] = 1\n        idx_ifkr = idx_ifkr + 1\n    idx_nzre = 0\n    list_jmko = mp\n    while idx_nzre < len(list_jmko):\n        x = list_jmko[idx_nzre]\n        if mp [ x ] >= len ( a ) // 2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return True\n        idx_nzre = idx_nzre + 1\n    return False", "id": "For2While_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_8", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def isInorder ( arr , n ) :\n    if ( n == 0 or n == 1 ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return True\n    idx_653n = 0\n    list_7z1x = range ( 1 , n , 1 )\n    while idx_653n < len(list_7z1x):\n        i = list_7z1x[idx_653n]\n        if ( arr [ i - 1 ] > arr [ i ] ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return False\n        idx_653n = idx_653n + 1\n    return True", "id": "For2While_sample_from_CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT_to_9", "old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT"}
{"code": "def isDivisible ( str , k ) :\n    n = len ( str )\n    c = 0\n    idx_jk7p = 0\n    list_tje4 = range ( 0 , k )\n    while idx_jk7p < len(list_tje4):\n        i = list_tje4[idx_jk7p]\n        if ( str [ n - i - 1 ] == '0' ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            c += 1\n        idx_jk7p = idx_jk7p + 1\n    return ( c == k )", "id": "For2While_sample_from_CHECK_DIVISIBILITY_BINARY_STRING_2K_to_10", "old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K"}
{"code": "def isDivisible999 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '0' ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return True\n    if ( ( n % 3 ) == 1 ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        num = \"0\" + num\n    gSum = 0\n    idx_95nu = 0\n    list_fgs7 = range ( 0 , n , 3 )\n    while idx_95nu < len(list_fgs7):\n        i = list_fgs7[idx_95nu]\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n        idx_95nu = idx_95nu + 1\n    if ( gSum > 1000 ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )", "id": "For2While_sample_from_CHECK_DIVISIBILITY_LARGE_NUMBER_999_to_11", "old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999"}
{"code": "def check ( s ) :\n    if ( len ( s ) >= 10 ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return True\n    idx_ng7s = 0\n    list_d7zg = range ( 1 , len ( s ) )\n    while idx_ng7s < len(list_d7zg):\n        i = list_d7zg[idx_ng7s]\n        idx_puxj = 0\n        list_yi9g = range ( i + 1 , len ( s ) )\n        while idx_puxj < len(list_yi9g):\n            j = list_yi9g[idx_puxj]\n            idx_cbg7 = 0\n            list_ak2s = range ( j + 1 , len ( s ) )\n            while idx_cbg7 < len(list_ak2s):\n                k = list_ak2s[idx_cbg7]\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j ]\n                s3 = s [ j : k ]\n                s4 = s [ k : len ( s ) ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                    return True\n                idx_cbg7 = idx_cbg7 + 1\n            idx_puxj = idx_puxj + 1\n        idx_ng7s = idx_ng7s + 1\n    return False", "id": "For2While_sample_from_CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS_to_12", "old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = 0\n    count_even = 0\n    idx_5ey6 = 0\n    list_itg3 = range ( n )\n    while idx_5ey6 < len(list_itg3):\n        i = list_itg3[idx_5ey6]\n        if ( a [ i ] & 1 ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            count_odd += 1\n        else :\n            count_even += 1\n        idx_5ey6 = idx_5ey6 + 1\n    if ( count_odd % 2 and count_even % 2 ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        return False\n    else :\n        return True", "id": "For2While_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_13", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def areConsecutive ( arr , n ) :\n    if ( n < 1 ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return False\n    Min = min ( arr )\n    Max = max ( arr )\n    if ( Max - Min + 1 == n ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        visited = [ False for i in range ( n ) ]\n        idx_gh19 = 0\n        list_2sf5 = range ( n )\n        while idx_gh19 < len(list_2sf5):\n            i = list_2sf5[idx_gh19]\n            if ( visited [ arr [ i ] - Min ] != False ) :\n                return False\n            visited [ arr [ i ] - Min ] = True\n            idx_gh19 = idx_gh19 + 1\n        return True\n    return False", "id": "For2While_sample_from_CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE_to_14", "old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE"}
{"code": "def canRepresentBST ( pre, n ) :\n    s = [ ]\n    root = -2147483648\n    idx_tb2q = 0\n    list_f1r0 = range(n)\n    while idx_tb2q < len(list_f1r0):\n        i = list_f1r0[idx_tb2q]\n        if pre[i] < root and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < pre[i] ) :\n            root = s.pop ( )\n        s.append ( pre[i] )\n        idx_tb2q = idx_tb2q + 1\n    return True", "id": "For2While_sample_from_CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE_to_15", "old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = 0\n    tenCount = 0\n    idx_ruqb = 0\n    list_o2gj = range ( n )\n    while idx_ruqb < len(list_o2gj):\n        i = list_o2gj[idx_ruqb]\n        if ( notes [ i ] == 5 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            fiveCount += 1\n        elif ( notes [ i ] == 10 ) :\n            if ( fiveCount > 0 ) :\n                fiveCount -= 1\n                tenCount += 1\n            else :\n                return 0\n        else :\n            if ( fiveCount > 0 and tenCount > 0 ) :\n                fiveCount -= 1\n                tenCount -= 1\n            elif ( fiveCount >= 3 ) :\n                fiveCount -= 3\n            else :\n                return 0\n        idx_ruqb = idx_ruqb + 1\n    return 1", "id": "For2While_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_16", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def check ( str ) :\n    n = len ( str )\n    oddDigSum = 0\n    evenDigSum = 0\n    idx_inkm = 0\n    list_zyo1 = range ( 0 , n )\n    while idx_inkm < len(list_zyo1):\n        i = list_zyo1[idx_inkm]\n        if ( i % 2 == 0 ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            oddDigSum = oddDigSum + ( ord ( str [ i ] ) - 48 )\n        else :\n            evenDigSum = evenDigSum + ( ord ( str [ i ] ) - 48 )\n        idx_inkm = idx_inkm + 1\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "id": "For2While_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_17", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        return True\n    if ( length % 3 == 1 ) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    idx_8kpx = 0\n    list_pfma = range ( length - 1 , - 1 , - 3 )\n    while idx_8kpx < len(list_pfma):\n        i = list_pfma[idx_8kpx]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n        idx_8kpx = idx_8kpx + 1\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )", "id": "For2While_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_18", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def check ( s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    dp = ( [ [ False for i in range ( m + 1 ) ] for i in range ( n + 1 ) ] )\n    dp [ 0 ] [ 0 ] = True\n    idx_ya6i = 0\n    list_dg8u = range ( len ( s1 ) )\n    while idx_ya6i < len(list_dg8u):\n        i = list_dg8u[idx_ya6i]\n        idx_qdit = 0\n        list_1zeg = range ( len ( s2 ) + 1 )\n        while idx_qdit < len(list_1zeg):\n            j = list_1zeg[idx_qdit]\n            if ( dp [ i ] [ j ] ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n                if ( ( j < len ( s2 ) and ( s1 [ i ].upper ( ) == s2 [ j ] ) ) ) :\n                    dp [ i + 1 ] [ j + 1 ] = True\n                if ( s1 [ i ].isupper ( ) == False ) :\n                    dp [ i + 1 ] [ j ] = True\n            idx_qdit = idx_qdit + 1\n        idx_ya6i = idx_ya6i + 1\n    return ( dp [ n ] [ m ] )", "id": "For2While_sample_from_CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER_to_19", "old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return True\n    i = 1\n    idx_wp4l = 0\n    list_whm2 = range ( 1 , n )\n    while idx_wp4l < len(list_whm2):\n        i = list_whm2[idx_wp4l]\n        if arr [ i - 1 ] >= arr [ i ] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            break\n        else:\n            if ( i == n ) :\n                return True\n        idx_wp4l = idx_wp4l + 1\n    j = i\n    i += 1\n    while ( arr [ j ] < arr [ j - 1 ] ) :\n        if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return False\n        j += 1\n    if ( j == n ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        return True\n    k = j\n    if ( arr [ k ] < arr [ i - 1 ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return False\n    while ( k > 1 and k < n ) :\n        if ( arr [ k ] < arr [ k - 1 ] ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            return False\n        k += 1\n    return True", "id": "For2While_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_20", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def isAnBn ( s ) :\n    n = len ( s )\n    idx_7vqn = 0\n    list_bhjq = range ( n )\n    while idx_7vqn < len(list_bhjq):\n        i = list_bhjq[idx_7vqn]\n        if ( s [ i ] != 'a' ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            break\n        idx_7vqn = idx_7vqn + 1\n    if ( i * 2 != n ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return False\n    idx_u1nv = 0\n    list_nk0x = range ( i , n )\n    while idx_u1nv < len(list_nk0x):\n        j = list_nk0x[idx_u1nv]\n        if ( s [ j ] != 'b' ) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return False\n        idx_u1nv = idx_u1nv + 1\n    return True", "id": "For2While_sample_from_CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT_to_21", "old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT"}
{"code": "def areSumSame ( a , n , m ) :\n    sum1 = 0\n    sum2 = 0\n    idx_8vwq = 0\n    list_9c8w = range ( 0 , n )\n    while idx_8vwq < len(list_9c8w):\n        i = list_9c8w[idx_8vwq]\n        sum1 = 0\n        sum2 = 0\n        idx_msdu = 0\n        list_u31n = range ( 0 , m )\n        while idx_msdu < len(list_u31n):\n            j = list_u31n[idx_msdu]\n            sum1 += a [ i ] [ j ]\n            sum2 += a [ j ] [ i ]\n            idx_msdu = idx_msdu + 1\n        if ( sum1 == sum2 ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            return 1\n        idx_8vwq = idx_8vwq + 1\n    return 0", "id": "For2While_sample_from_CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX_to_22", "old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX"}
{"code": "def checkIsAP ( arr , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))): return True\n    arr.sort ( )\n    d = arr [ 1 ] - arr [ 0 ]\n    idx_0tfu = 0\n    list_ns4a = range ( 2 , n )\n    while idx_0tfu < len(list_ns4a):\n        i = list_ns4a[idx_0tfu]\n        if ( arr [ i ] - arr [ i - 1 ] != d ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            return False\n        idx_0tfu = idx_0tfu + 1\n    return True", "id": "For2While_sample_from_CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY_to_23", "old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY"}
{"code": "def check ( degree , n ) :\n    deg_sum = 0\n    idx_9ip3 = 0\n    list_bekt = range(n)\n    while idx_9ip3 < len(list_bekt):\n        i = list_bekt[idx_9ip3]\n        deg_sum += degree[i]\n        idx_9ip3 = idx_9ip3 + 1\n    if ( 2 * ( n - 1 ) == deg_sum ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        return True\n    else :\n        return False", "id": "For2While_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_24", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n        return 1\n    if ( n % 3 == 1 ) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    p = 1\n    idx_9ucx = 0\n    list_gi1c = range ( n - 1 , - 1 , - 1 )\n    while idx_9ucx < len(list_gi1c):\n        i = list_gi1c[idx_9ucx]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n        idx_9ucx = idx_9ucx + 1\n    return ( GSum % 7 == 0 )", "id": "For2While_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_25", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        idx_7no8 = 0\n        list_x73v = range ( l , n )\n        while idx_7no8 < len(list_x73v):\n            i = list_x73v[idx_7no8]\n            a [ k ] [ i ] = val\n            val += 1\n            idx_7no8 = idx_7no8 + 1\n        k += 1\n        idx_kp9n = 0\n        list_skl5 = range ( k , m )\n        while idx_kp9n < len(list_skl5):\n            i = list_skl5[idx_kp9n]\n            a [ i ] [ n - 1 ] = val\n            val += 1\n            idx_kp9n = idx_kp9n + 1\n        n -= 1\n        if ( k < m ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            idx_yquo = 0\n            list_934r = range ( n - 1 , l - 1 , - 1 )\n            while idx_yquo < len(list_934r):\n                i = list_934r[idx_yquo]\n                a [ m - 1 ] [ i ] = val\n                val += 1\n                idx_yquo = idx_yquo + 1\n            m -= 1\n        if ( l < n ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            idx_17ku = 0\n            list_90cf = range ( m - 1 , k - 1 , - 1 )\n            while idx_17ku < len(list_90cf):\n                i = list_90cf[idx_17ku]\n                a [ i ] [ l ] = val\n                val += 1\n                idx_17ku = idx_17ku + 1\n            l += 1", "id": "For2While_sample_from_CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY_to_26", "old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY"}
{"code": "def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    idx_t24u = 0\n    list_lda0 = range ( n )\n    while idx_t24u < len(list_lda0):\n        i = list_lda0[idx_t24u]\n        LIS [ i ] = 1\n        idx_t24u = idx_t24u + 1\n    idx_9hea = 0\n    list_wyei = range ( 1 , n )\n    while idx_9hea < len(list_wyei):\n        i = list_wyei[idx_9hea]\n        idx_jzm3 = 0\n        list_zbcy = range ( i )\n        while idx_jzm3 < len(list_zbcy):\n            j = list_zbcy[idx_jzm3]\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n            idx_jzm3 = idx_jzm3 + 1\n        len = max ( len , LIS [ i ] )\n        idx_9hea = idx_9hea + 1\n    return ( n - len )", "id": "For2While_sample_from_CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES_to_27", "old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES"}
{"code": "def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    idx_jeg3 = 0\n    list_2pnm = range ( 2 , n + 1 )\n    while idx_jeg3 < len(list_2pnm):\n        i = list_2pnm[idx_jeg3]\n        idx_7jo0 = 0\n        list_i5r8 = range ( k + 1 )\n        while idx_7jo0 < len(list_i5r8):\n            j = list_i5r8[idx_7jo0]\n            if j >= i and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                break\n            else:\n                dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n                dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n                if j >= 1 :\n                    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n            idx_7jo0 = idx_7jo0 + 1\n        idx_jeg3 = idx_jeg3 + 1\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "id": "For2While_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_28", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def countPairs ( str ) :\n    result = 0 ;\n    n = len ( str )\n    idx_6ot9 = 0\n    list_g1ay = range ( 0 , n )\n    while idx_6ot9 < len(list_g1ay):\n        i = list_g1ay[idx_6ot9]\n        idx_52ns = 0\n        list_jysq = range ( i + 1 , n )\n        while idx_52ns < len(list_jysq):\n            j = list_jysq[idx_52ns]\n            if ( abs ( ord ( str [ i ] ) - ord ( str [ j ] ) ) == abs ( i - j ) ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                result += 1 ;\n            idx_52ns = idx_52ns + 1\n        idx_6ot9 = idx_6ot9 + 1\n    return result ;", "id": "For2While_sample_from_COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_to_29", "old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS"}
{"code": "def findDigits ( n ) :\n    if ( n < 0 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return 0\n    if ( n <= 1 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return 1\n    digits = 0\n    idx_14ju = 0\n    list_2wdx = range ( 2 , n + 1 )\n    while idx_14ju < len(list_2wdx):\n        i = list_2wdx[idx_14ju]\n        digits += math.log10 ( i )\n        idx_14ju = idx_14ju + 1\n    return math.floor ( digits ) + 1", "id": "For2While_sample_from_COUNT_DIGITS_FACTORIAL_SET_1_to_30", "old_id": "COUNT_DIGITS_FACTORIAL_SET_1"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    idx_9gkc = 0\n    list_0gep = range ( 1 , m + 1 )\n    while idx_9gkc < len(list_0gep):\n        i = list_0gep[idx_9gkc]\n        mat [ i ] [ 0 ] = 0\n        idx_9gkc = idx_9gkc + 1\n    idx_p5a1 = 0\n    list_brm6 = range ( n + 1 )\n    while idx_p5a1 < len(list_brm6):\n        j = list_brm6[idx_p5a1]\n        mat [ 0 ] [ j ] = 1\n        idx_p5a1 = idx_p5a1 + 1\n    idx_lbq9 = 0\n    list_30qe = range ( 1 , m + 1 )\n    while idx_lbq9 < len(list_30qe):\n        i = list_30qe[idx_lbq9]\n        idx_aeo8 = 0\n        list_ba7d = range ( 1 , n + 1 )\n        while idx_aeo8 < len(list_ba7d):\n            j = list_ba7d[idx_aeo8]\n            if T [ i - 1 ] != S [ j - 1 ] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n            idx_aeo8 = idx_aeo8 + 1\n        idx_lbq9 = idx_lbq9 + 1\n    return mat [ m ] [ n ]", "id": "For2While_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_31", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def count ( n , x ) :\n    cnt = 0\n    idx_96p5 = 0\n    list_t7i5 = range ( 1 , n + 1 )\n    while idx_96p5 < len(list_t7i5):\n        i = list_t7i5[idx_96p5]\n        if i <= x and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            if x // i <= n and x % i == 0 :\n                cnt += 1\n        idx_96p5 = idx_96p5 + 1\n    return cnt", "id": "For2While_sample_from_COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX_to_32", "old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX"}
{"code": "def countPairs ( arr , n ) :\n    ans = 0\n    idx_d4mc = 0\n    list_dzyf = range ( 0 , n )\n    while idx_d4mc < len(list_dzyf):\n        i = list_dzyf[idx_d4mc]\n        idx_q8uv = 0\n        list_3flx = range ( i + 1 , n )\n        while idx_q8uv < len(list_3flx):\n            j = list_3flx[idx_q8uv]\n            if ( arr [ i ] == arr [ j ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                ans += 1\n            idx_q8uv = idx_q8uv + 1\n        idx_d4mc = idx_d4mc + 1\n    return ans", "id": "For2While_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_to_33", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    idx_1cbj = 0\n    list_4km0 = range ( n )\n    while idx_1cbj < len(list_4km0):\n        i = list_4km0[idx_1cbj]\n        if arr [ i ] in mp.keys ( ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            mp [ arr [ i ] ] += 1\n        else :\n            mp [ arr [ i ] ] = 1\n        idx_1cbj = idx_1cbj + 1\n    ans = 0\n    idx_8aub = 0\n    list_ju6p = mp\n    while idx_8aub < len(list_ju6p):\n        it = list_ju6p[idx_8aub]\n        count = mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n        idx_8aub = idx_8aub + 1\n    return ans", "id": "For2While_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_34", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def getInvCount ( arr , n ) :\n    invcount = 0\n    idx_ds1i = 0\n    list_j26b = range ( 1 , n - 1 )\n    while idx_ds1i < len(list_j26b):\n        i = list_j26b[idx_ds1i]\n        small = 0\n        idx_0fgm = 0\n        list_rz1n = range ( i + 1 , n )\n        while idx_0fgm < len(list_rz1n):\n            j = list_rz1n[idx_0fgm]\n            if ( arr [ i ] > arr [ j ] ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                small += 1\n            idx_0fgm = idx_0fgm + 1\n        great = 0\n        idx_a6p2 = 0\n        list_1dfl = range ( i - 1 , - 1 , - 1 )\n        while idx_a6p2 < len(list_1dfl):\n            j = list_1dfl[idx_a6p2]\n            if ( arr [ i ] < arr [ j ] ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                great += 1\n            idx_a6p2 = idx_a6p2 + 1\n        invcount += great * small\n        idx_ds1i = idx_ds1i + 1\n    return invcount", "id": "For2While_sample_from_COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1_to_35", "old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1"}
{"code": "def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    idx_h4jr = 0\n    list_l1te = range ( 0 , n - 1 )\n    while idx_h4jr < len(list_l1te):\n        i = list_l1te[idx_h4jr]\n        if ( x [ i ] + 1 != x [ i + 1 ] ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            count = count + 1\n        idx_h4jr = idx_h4jr + 1\n    return count", "id": "For2While_sample_from_COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS_to_36", "old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS"}
{"code": "def countNumber ( n ) :\n    result = 0\n    idx_euzv = 0\n    list_khdq = range ( 1 , 10 )\n    while idx_euzv < len(list_khdq):\n        i = list_khdq[idx_euzv]\n        s = [ ]\n        if ( i <= n ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            idx_5ufx = 0\n            list_aq47 = range ( tp % 10 , 10 )\n            while idx_5ufx < len(list_aq47):\n                j = list_aq47[idx_5ufx]\n                x = tp * 10 + j\n                if ( x <= n ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                    s.append ( x )\n                    result += 1\n                idx_5ufx = idx_5ufx + 1\n        idx_euzv = idx_euzv + 1\n    return result", "id": "For2While_sample_from_COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER_to_37", "old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER"}
{"code": "def countNegative ( M , n , m ) :\n    count = 0\n    idx_7bp6 = 0\n    list_gt05 = range ( n )\n    while idx_7bp6 < len(list_gt05):\n        i = list_gt05[idx_7bp6]\n        idx_f98o = 0\n        list_brsw = range ( m )\n        while idx_f98o < len(list_brsw):\n            j = list_brsw[idx_f98o]\n            if M [ i ] [ j ] < 0 and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                count += 1\n            else :\n                break\n            idx_f98o = idx_f98o + 1\n        idx_7bp6 = idx_7bp6 + 1\n    return count", "id": "For2While_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_38", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        arr [ x ] = True\n    if ( y <= n ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        arr [ y ] = True\n    result = 0\n    idx_7z8b = 0\n    list_i592 = range ( min ( x , y ) , n + 1 )\n    while idx_7z8b < len(list_i592):\n        i = list_i592[idx_7z8b]\n        if ( arr [ i ] ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n        idx_7z8b = idx_7z8b + 1\n    return result", "id": "For2While_sample_from_COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS_to_39", "old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS"}
{"code": "def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    idx_mzwi = 0\n    list_03gd = range ( n )\n    while idx_mzwi < len(list_03gd):\n        i = list_03gd[idx_mzwi]\n        dp [ 0 ] [ i ] = 1\n        idx_mzwi = idx_mzwi + 1\n    idx_7qju = 0\n    list_cg8e = range ( 1 , k )\n    while idx_7qju < len(list_cg8e):\n        l = list_cg8e[idx_7qju]\n        idx_ovrk = 0\n        list_jwqz = range ( l , n )\n        while idx_ovrk < len(list_jwqz):\n            i = list_jwqz[idx_ovrk]\n            dp [ l ] [ i ] = 0\n            idx_e9mz = 0\n            list_834c = range ( l - 1 , i )\n            while idx_e9mz < len(list_834c):\n                j = list_834c[idx_e9mz]\n                if ( arr [ j ] < arr [ i ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n                idx_e9mz = idx_e9mz + 1\n            idx_ovrk = idx_ovrk + 1\n        idx_7qju = idx_7qju + 1\n    Sum = 0\n    idx_k7s8 = 0\n    list_mwz4 = range ( k - 1 , n )\n    while idx_k7s8 < len(list_mwz4):\n        i = list_mwz4[idx_k7s8]\n        Sum += dp [ k - 1 ] [ i ]\n        idx_k7s8 = idx_k7s8 + 1\n    return Sum", "id": "For2While_sample_from_COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K_to_40", "old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K"}
{"code": "def countOccurrences ( arr , n , x ) :\n    res = 0\n    idx_rtuo = 0\n    list_k36x = range ( n )\n    while idx_rtuo < len(list_k36x):\n        i = list_k36x[idx_rtuo]\n        if x == arr [ i ] and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            res += 1\n        idx_rtuo = idx_rtuo + 1\n    return res", "id": "For2While_sample_from_COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY_to_41", "old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY"}
{"code": "def countP ( n , k ) :\n    dp = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ]\n    idx_7mxb = 0\n    list_8od6 = range ( n + 1 )\n    while idx_7mxb < len(list_8od6):\n        i = list_8od6[idx_7mxb]\n        dp [ i ] [ 0 ] = 0\n        idx_7mxb = idx_7mxb + 1\n    idx_e92p = 0\n    list_ol5c = range ( k + 1 )\n    while idx_e92p < len(list_ol5c):\n        i = list_ol5c[idx_e92p]\n        dp [ 0 ] [ k ] = 0\n        idx_e92p = idx_e92p + 1\n    idx_gpbe = 0\n    list_rvpd = range ( 1 , n + 1 )\n    while idx_gpbe < len(list_rvpd):\n        i = list_rvpd[idx_gpbe]\n        idx_j9i2 = 0\n        list_nr5s = range ( 1 , k + 1 )\n        while idx_j9i2 < len(list_nr5s):\n            j = list_nr5s[idx_j9i2]\n            if ( j == 1 or i == j ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] )\n            idx_j9i2 = idx_j9i2 + 1\n        idx_gpbe = idx_gpbe + 1\n    return dp [ n ] [ k ]", "id": "For2While_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_42", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def countWays ( n , m ) :\n    count = [ ]\n    idx_56yu = 0\n    list_u0z1 = range ( n + 2 )\n    while idx_56yu < len(list_u0z1):\n        i = list_u0z1[idx_56yu]\n        count.append ( 0 )\n        idx_56yu = idx_56yu + 1\n    count [ 0 ] = 0\n    idx_6lqy = 0\n    list_6d5z = range ( 1 , n + 1 )\n    while idx_6lqy < len(list_6d5z):\n        i = list_6d5z[idx_6lqy]\n        if ( i > m ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n        idx_6lqy = idx_6lqy + 1\n    return count [ n ]", "id": "For2While_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_43", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = ( n * ( n + 1 ) ) // 2\n    a_index = 0\n    b_index = 0\n    c_index = 0\n    idx_e6jn = 0\n    list_yt0o = range ( n )\n    while idx_e6jn < len(list_yt0o):\n        i = list_yt0o[idx_e6jn]\n        if ( str [ i ] == 'a' ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            a_index = i + 1\n            ans -= min ( b_index , c_index )\n        elif ( str [ i ] == 'b' ) :\n            b_index = i + 1\n            ans -= min ( a_index , c_index )\n        else :\n            c_index = i + 1\n            ans -= min ( a_index , b_index )\n        idx_e6jn = idx_e6jn + 1\n    return ans", "id": "For2While_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_44", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = 0\n    res = 0\n    idx_b3qn = 0\n    list_gt1z = range ( len ( s ) )\n    while idx_b3qn < len(list_gt1z):\n        i = list_gt1z[idx_b3qn]\n        if s [ ~ i ] == 'a' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n        idx_b3qn = idx_b3qn + 1\n    return res", "id": "For2While_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_45", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    idx_0npb = 0\n    list_vflu = range ( 0 , n )\n    while idx_0npb < len(list_vflu):\n        i = list_vflu[idx_0npb]\n        idx_qt8v = 0\n        list_kcsh = range ( i + 1 , n )\n        while idx_qt8v < len(list_kcsh):\n            j = list_kcsh[idx_qt8v]\n            if arr [ i ] - arr [ j ] == k or arr [ j ] - arr [ i ] == k and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                count += 1\n            idx_qt8v = idx_qt8v + 1\n        idx_0npb = idx_0npb + 1\n    return count", "id": "For2While_sample_from_COUNT_PAIRS_DIFFERENCE_EQUAL_K_to_46", "old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    idx_59o4 = 0\n    list_sb1x = range ( m )\n    while idx_59o4 < len(list_sb1x):\n        i = list_sb1x[idx_59o4]\n        idx_akbs = 0\n        list_fmp2 = range ( n )\n        while idx_akbs < len(list_fmp2):\n            j = list_fmp2[idx_akbs]\n            if arr1 [ i ] + arr2 [ j ] == x and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                count = count + 1\n            idx_akbs = idx_akbs + 1\n        idx_59o4 = idx_59o4 + 1\n    return count", "id": "For2While_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_to_47", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    idx_b83u = 0\n    list_48f2 = range ( m )\n    while idx_b83u < len(list_48f2):\n        i = list_48f2[idx_b83u]\n        us.add ( arr1 [ i ] )\n        idx_b83u = idx_b83u + 1\n    idx_l126 = 0\n    list_k1lc = range ( n )\n    while idx_l126 < len(list_k1lc):\n        j = list_k1lc[idx_l126]\n        if x - arr2 [ j ] in us and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            count += 1\n        idx_l126 = idx_l126 + 1\n    return count", "id": "For2While_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1_to_48", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1"}
{"code": "def countPairs ( arr , n ) :\n    result = 0 ;\n    idx_nshr = 0\n    list_0hgu = range ( 0 , n )\n    while idx_nshr < len(list_0hgu):\n        i = list_0hgu[idx_nshr]\n        idx_n1f8 = 0\n        list_0lf4 = range ( i + 1 , n )\n        while idx_n1f8 < len(list_0lf4):\n            j = list_0lf4[idx_n1f8]\n            product = arr [ i ] * arr [ j ] ;\n            idx_pb6y = 0\n            list_m0yl = range ( 0 , n )\n            while idx_pb6y < len(list_m0yl):\n                k = list_m0yl[idx_pb6y]\n                if ( arr [ k ] == product ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    result = result + 1 ;\n                    break ;\n                idx_pb6y = idx_pb6y + 1\n            idx_n1f8 = idx_n1f8 + 1\n        idx_nshr = idx_nshr + 1\n    return result ;", "id": "For2While_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_to_49", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    idx_89gx = 0\n    list_ego7 = range ( n )\n    while idx_89gx < len(list_ego7):\n        i = list_ego7[idx_89gx]\n        Hash.add ( arr [ i ] )\n        idx_89gx = idx_89gx + 1\n    idx_jays = 0\n    list_ruty = range ( n )\n    while idx_jays < len(list_ruty):\n        i = list_ruty[idx_jays]\n        idx_f5ty = 0\n        list_7lb0 = range ( i + 1 , n )\n        while idx_f5ty < len(list_7lb0):\n            j = list_7lb0[idx_f5ty]\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                result += 1\n            idx_f5ty = idx_f5ty + 1\n        idx_jays = idx_jays + 1\n    return result", "id": "For2While_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1_to_50", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1"}
{"code": "def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    idx_dnhb = 0\n    list_ytxp = range ( n )\n    while idx_dnhb < len(list_ytxp):\n        i = list_ytxp[idx_dnhb]\n        P [ i ] [ i ] = True\n        idx_dnhb = idx_dnhb + 1\n    idx_cby1 = 0\n    list_zd8f = range ( n - 1 )\n    while idx_cby1 < len(list_zd8f):\n        i = list_zd8f[idx_cby1]\n        if ( str [ i ] == str [ i + 1 ] ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n        idx_cby1 = idx_cby1 + 1\n    idx_fb6m = 0\n    list_bixv = range ( 2 , n )\n    while idx_fb6m < len(list_bixv):\n        gap = list_bixv[idx_fb6m]\n        idx_0diy = 0\n        list_apqz = range ( n - gap )\n        while idx_0diy < len(list_apqz):\n            i = list_apqz[idx_0diy]\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n            idx_0diy = idx_0diy + 1\n        idx_fb6m = idx_fb6m + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_51", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countPS ( str ) :\n    N = len ( str )\n    cps = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N + 2 ) ]\n    idx_ofxl = 0\n    list_wpxm = range ( N )\n    while idx_ofxl < len(list_wpxm):\n        i = list_wpxm[idx_ofxl]\n        cps [ i ] [ i ] = 1\n        idx_ofxl = idx_ofxl + 1\n    idx_hn9f = 0\n    list_cn7o = range ( 2 , N + 1 )\n    while idx_hn9f < len(list_cn7o):\n        L = list_cn7o[idx_hn9f]\n        idx_zg9p = 0\n        list_3she = range ( N )\n        while idx_zg9p < len(list_3she):\n            i = list_3she[idx_zg9p]\n            k = L + i - 1\n            if ( k < N ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                if ( str [ i ] == str [ k ] ) :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] + 1 )\n                else :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] - cps [ i + 1 ] [ k - 1 ] )\n            idx_zg9p = idx_zg9p + 1\n        idx_hn9f = idx_hn9f + 1\n    return cps [ 0 ] [ N - 1 ]", "id": "For2While_sample_from_COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_to_52", "old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING"}
{"code": "def countDecodingDP ( digits , n ) :\n    count = [ 0 ] * ( n + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    if digits [ 0 ] == '0' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return 0\n    idx_oht5 = 0\n    list_1ar5 = range ( 2 , n + 1 )\n    while idx_oht5 < len(list_1ar5):\n        i = list_1ar5[idx_oht5]\n        count [ i ] = 0\n        if ( digits [ i - 1 ] > '0' ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            count [ i ] = count [ i - 1 ]\n        if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == '2' and digits [ i - 1 ] < '7' ) ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            count [ i ] += count [ i - 2 ]\n        idx_oht5 = idx_oht5 + 1\n    return count [ n ]", "id": "For2While_sample_from_COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1_to_53", "old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1"}
{"code": "def countRotations ( n ) :\n    l = len ( n )\n    if ( l == 1 ) and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        oneDigit = ( int ) ( n [ 0 ] )\n        if ( oneDigit % 4 == 0 ) :\n            return 1\n        return 0\n    count = 0\n    idx_kiyn = 0\n    list_31y5 = range ( 0 , l - 1 )\n    while idx_kiyn < len(list_31y5):\n        i = list_31y5[idx_kiyn]\n        twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i + 1 ] )\n        if ( twoDigit % 4 == 0 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            count = count + 1\n        idx_kiyn = idx_kiyn + 1\n    twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 ] )\n    if ( twoDigit % 4 == 0 ) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        count = count + 1\n    return count", "id": "For2While_sample_from_COUNT_ROTATIONS_DIVISIBLE_4_to_54", "old_id": "COUNT_ROTATIONS_DIVISIBLE_4"}
{"code": "def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    threeDigit = 0\n    idx_pc3s = 0\n    list_tfhq = range ( 0 , ( l - 2 ) )\n    while idx_pc3s < len(list_tfhq):\n        i = list_tfhq[idx_pc3s]\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            count += 1\n        idx_pc3s = idx_pc3s + 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        count += 1\n    return count", "id": "For2While_sample_from_COUNT_ROTATIONS_DIVISIBLE_8_to_55", "old_id": "COUNT_ROTATIONS_DIVISIBLE_8"}
{"code": "def sortedCount ( mat , r , c ) :\n    result = 0\n    idx_qo0y = 0\n    list_t84y = range ( r )\n    while idx_qo0y < len(list_t84y):\n        i = list_t84y[idx_qo0y]\n        j = 0\n        idx_45am = 0\n        list_8a52 = range ( c - 1 )\n        while idx_45am < len(list_8a52):\n            j = list_8a52[idx_45am]\n            if mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                break\n            idx_45am = idx_45am + 1\n        if j == c - 2 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            result += 1\n        idx_qo0y = idx_qo0y + 1\n    idx_hp8w = 0\n    list_hgr6 = range ( 0 , r )\n    while idx_hp8w < len(list_hgr6):\n        i = list_hgr6[idx_hp8w]\n        j = 0\n        idx_7jox = 0\n        list_i8af = range ( c - 1 , 0 , - 1 )\n        while idx_7jox < len(list_i8af):\n            j = list_i8af[idx_7jox]\n            if mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                break\n            idx_7jox = idx_7jox + 1\n        if c > 1 and j == 1 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            result += 1\n        idx_hp8w = idx_hp8w + 1\n    return result", "id": "For2While_sample_from_COUNT_SORTED_ROWS_MATRIX_to_56", "old_id": "COUNT_SORTED_ROWS_MATRIX"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = 0\n    ans = 0\n    hash_positive = [ 0 ] * ( n + 1 )\n    hash_negative = [ 0 ] * ( n + 1 )\n    hash_positive [ 0 ] = 1\n    idx_jh2x = 0\n    list_64g5 = range ( n )\n    while idx_jh2x < len(list_64g5):\n        i = list_64g5[idx_jh2x]\n        if ( arr [ i ] & 1 == 1 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            difference = difference + 1\n        else :\n            difference = difference - 1\n        if ( difference < 0 ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = hash_negative [ - difference ] + 1\n        else :\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = hash_positive [ difference ] + 1\n        idx_jh2x = idx_jh2x + 1\n    return ans", "id": "For2While_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_57", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSubstringWithEqualEnds ( s ) :\n    result = 0\n    n = len ( s )\n    idx_giab = 0\n    list_on5m = range ( n )\n    while idx_giab < len(list_on5m):\n        i = list_on5m[idx_giab]\n        idx_cf48 = 0\n        list_hxpj = range ( i , n )\n        while idx_cf48 < len(list_hxpj):\n            j = list_hxpj[idx_cf48]\n            if ( s [ i ] == s [ j ] ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                result = result + 1\n            idx_cf48 = idx_cf48 + 1\n        idx_giab = idx_giab + 1\n    return result", "id": "For2While_sample_from_COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_to_58", "old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS"}
{"code": "def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        idx_0mds = 0\n        list_97ul = range ( 0 , n + 1 )\n        while idx_0mds < len(list_97ul):\n            j = list_97ul[idx_0mds]\n            ans += k\n            if change == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n            idx_0mds = idx_0mds + 1\n        i += 1\n    return ans", "id": "For2While_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_59", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def countWords ( str , n ) :\n    m = dict ( )\n    idx_ah4w = 0\n    list_sewb = range ( n )\n    while idx_ah4w < len(list_sewb):\n        i = list_sewb[idx_ah4w]\n        m [ str [ i ] ] = m.get ( str [ i ] , 0 ) + 1\n        idx_ah4w = idx_ah4w + 1\n    res = 0\n    idx_1sh5 = 0\n    list_cebx = m.values ( )\n    while idx_1sh5 < len(list_cebx):\n        i = list_cebx[idx_1sh5]\n        if i == 2 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            res += 1\n        idx_1sh5 = idx_1sh5 + 1\n    return res", "id": "For2While_sample_from_COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS_to_60", "old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS"}
{"code": "def countWords ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return count\n    if ( str [ 0 ] == str [ 1 ] ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        count *= 1\n    else :\n        count *= 2\n    idx_iza6 = 0\n    list_1tnb = range ( 1 , len - 1 )\n    while idx_iza6 < len(list_1tnb):\n        j = list_1tnb[idx_iza6]\n        if ( str [ j ] == str [ j - 1 ] and str [ j ] == str [ j + 1 ] ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            count *= 1\n        elif ( str [ j ] == str [ j - 1 ] or str [ j ] == str [ j + 1 ] or str [ j - 1 ] == str [ j + 1 ] ) :\n            count *= 2\n        else :\n            count *= 3\n        idx_iza6 = idx_iza6 + 1\n    if ( str [ len - 1 ] == str [ len - 2 ] ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        count *= 1\n    else :\n        count *= 2\n    return count", "id": "For2While_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_61", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = 256\n    count = [ 0 ] * NO_OF_CHARS\n    idx_p2fy = 0\n    list_3rmh = range ( len ( str ) )\n    while idx_p2fy < len(list_3rmh):\n        i = list_3rmh[idx_p2fy]\n        count [ ord ( str [ i ] ) ] += 1\n        idx_p2fy = idx_p2fy + 1\n    first , second = 0 , 0\n    idx_ivdu = 0\n    list_mgwk = range ( NO_OF_CHARS )\n    while idx_ivdu < len(list_mgwk):\n        i = list_mgwk[idx_ivdu]\n        if count [ i ] > count [ first ] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n        idx_ivdu = idx_ivdu + 1\n    return chr ( second )", "id": "For2While_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_62", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decode ( Str ) :\n    integerstack = [ ]\n    stringstack = [ ]\n    temp = \"\"\n    result = \"\"\n    idx_npzq = 0\n    list_hz1b = range ( len ( Str ) )\n    while idx_npzq < len(list_hz1b):\n        i = list_hz1b[idx_npzq]\n        count = 0\n        if ( Str [ i ] >= '0' and Str [ i ] <= '9' ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = count * 10 + ord ( Str [ i ] ) - ord ( '0' )\n                i += 1\n            i -= 1\n            integerstack.append ( count )\n        elif ( Str [ i ] == ']' ) :\n            temp = \"\"\n            count = 0\n            if ( len ( integerstack ) != 0 ) :\n                count = integerstack [ - 1 ]\n                integerstack.pop ( )\n            while ( len ( stringstack ) != 0 and stringstack [ - 1 ] != '[' ) :\n                temp = stringstack [ - 1 ] + temp\n                stringstack.pop ( )\n            if ( len ( stringstack ) != 0 and stringstack [ - 1 ] == '[' ) :\n                stringstack.pop ( )\n            idx_902h = 0\n            list_ver2 = range ( count )\n            while idx_902h < len(list_ver2):\n                j = list_ver2[idx_902h]\n                result = result + temp\n                idx_902h = idx_902h + 1\n            idx_id30 = 0\n            list_6i5v = range ( len ( result ) )\n            while idx_id30 < len(list_6i5v):\n                j = list_6i5v[idx_id30]\n                stringstack.append ( result [ j ] )\n                idx_id30 = idx_id30 + 1\n            result = \"\"\n        elif ( Str [ i ] == '[' ) :\n            if ( Str [ i - 1 ] >= '0' and Str [ i - 1 ] <= '9' ) :\n                stringstack.append ( Str [ i ] )\n            else :\n                stringstack.append ( Str [ i ] )\n                integerstack.append ( 1 )\n        else :\n            stringstack.append ( Str [ i ] )\n        idx_npzq = idx_npzq + 1\n    while len ( stringstack ) != 0 :\n        result = stringstack [ - 1 ] + result\n        stringstack.pop ( )\n    return result", "id": "For2While_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_63", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def isDDM ( m , n ) :\n    idx_g8p9 = 0\n    list_g7lq = range ( 0 , n )\n    while idx_g8p9 < len(list_g7lq):\n        i = list_g7lq[idx_g8p9]\n        sum = 0\n        idx_nzja = 0\n        list_dy32 = range ( 0 , n )\n        while idx_nzja < len(list_dy32):\n            j = list_dy32[idx_nzja]\n            sum = sum + abs ( m [ i ] [ j ] )\n            idx_nzja = idx_nzja + 1\n        sum = sum - abs ( m [ i ] [ i ] )\n        if ( abs ( m [ i ] [ i ] ) < sum ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            return False\n        idx_g8p9 = idx_g8p9 + 1\n    return True", "id": "For2While_sample_from_DIAGONALLY_DOMINANT_MATRIX_to_64", "old_id": "DIAGONALLY_DOMINANT_MATRIX"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = 0\n    max_count = 0\n    min_count = n\n    idx_xvof = 0\n    list_h2bf = range ( 0 , ( n - 1 ) )\n    while idx_xvof < len(list_h2bf):\n        i = list_h2bf[idx_xvof]\n        if arr [ i ] == arr [ i + 1 ] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            count += 1\n            continue\n        else :\n            max_count = max ( max_count , count )\n            min_count = min ( min_count , count )\n            count = 0\n        idx_xvof = idx_xvof + 1\n    return max_count - min_count", "id": "For2While_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_65", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def numberofways ( n , m ) :\n    dp = np.zeros ( ( n + 2 , n + 2 ) )\n    dp [ 0 ] [ n + 1 ] = 1\n    idx_xu4d = 0\n    list_w9pv = range ( n , m - 1 , - 1 )\n    while idx_xu4d < len(list_w9pv):\n        k = list_w9pv[idx_xu4d]\n        idx_cuya = 0\n        list_sgui = range ( n + 1 )\n        while idx_cuya < len(list_sgui):\n            i = list_sgui[idx_cuya]\n            dp [ i ] [ k ] = dp [ i ] [ k + 1 ]\n            if ( i - k >= 0 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] )\n            idx_cuya = idx_cuya + 1\n        idx_xu4d = idx_xu4d + 1\n    return dp [ n ] [ m ]", "id": "For2While_sample_from_DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M_to_66", "old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M"}
{"code": "def discreteLogarithm ( a , b , m ) :\n    n = int ( math.sqrt ( m ) + 1 )\n    an = 1\n    idx_pzbl = 0\n    list_n2or = range ( n )\n    while idx_pzbl < len(list_n2or):\n        i = list_n2or[idx_pzbl]\n        an = ( an * a ) % m\n        idx_pzbl = idx_pzbl + 1\n    value = [ 0 ] * m\n    cur = an\n    idx_c5d7 = 0\n    list_ijuw = range ( 1 , n + 1 )\n    while idx_c5d7 < len(list_ijuw):\n        i = list_ijuw[idx_c5d7]\n        if ( value [ cur ] == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            value [ cur ] = i\n        cur = ( cur * an ) % m\n        idx_c5d7 = idx_c5d7 + 1\n    cur = b\n    idx_tx6f = 0\n    list_m1dy = range ( n + 1 )\n    while idx_tx6f < len(list_m1dy):\n        i = list_m1dy[idx_tx6f]\n        if ( value [ cur ] > 0 ) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            ans = value [ cur ] * n - i\n            if ( ans < m ) :\n                return ans\n        cur = ( cur * a ) % m\n        idx_tx6f = idx_tx6f + 1\n    return - 1", "id": "For2While_sample_from_DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B_to_67", "old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B"}
{"code": "def checkCount ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_2ofs = 0\n    list_w1c5 = range ( n )\n    while idx_2ofs < len(list_w1c5):\n        i = list_w1c5[idx_2ofs]\n        mp [ arr [ i ] ] += 1\n        idx_2ofs = idx_2ofs + 1\n    idx_csik = 0\n    list_28xk = list(mp.items ( ))\n    while idx_csik < len(list_28xk):\n        key , values = list_28xk[idx_csik]\n        if values > 2 * k and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return False\n        idx_csik = idx_csik + 1\n    return True", "id": "For2While_sample_from_DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1_to_68", "old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1"}
{"code": "def isDvisibleBy12 ( num ) :\n    if ( len ( num ) >= 3 ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        d1 = int ( num [ len ( num ) - 1 ] )\n        if ( d1 % 2 != 0 ) :\n            return False\n        d2 = int ( num [ len ( num ) - 2 ] )\n        sum = 0\n        idx_784h = 0\n        list_3tqr = range ( 0 , len ( num ) )\n        while idx_784h < len(list_3tqr):\n            i = list_3tqr[idx_784h]\n            sum += int ( num [ i ] )\n            idx_784h = idx_784h + 1\n        return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 )\n    else :\n        number = int ( num )\n        return ( number % 12 == 0 )", "id": "For2While_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_69", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def doublefactorial ( n ) :\n    res = 1\n    idx_tvl5 = 0\n    list_vaok = range ( n , - 1 , - 2 )\n    while idx_tvl5 < len(list_vaok):\n        i = list_vaok[idx_tvl5]\n        if ( i == 0 or i == 1 ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            return res\n        else :\n            res *= i\n        idx_tvl5 = idx_tvl5 + 1\n    return res;", "id": "For2While_sample_from_DOUBLE_FACTORIAL_1_to_70", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def eggDrop ( n , k ) :\n    eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in range ( n + 1 ) ]\n    idx_up7a = 0\n    list_jxb3 = range ( 1 , n + 1 )\n    while idx_up7a < len(list_jxb3):\n        i = list_jxb3[idx_up7a]\n        eggFloor [ i ] [ 1 ] = 1\n        eggFloor [ i ] [ 0 ] = 0\n        idx_up7a = idx_up7a + 1\n    idx_i2z6 = 0\n    list_5br3 = range ( 1 , k + 1 )\n    while idx_i2z6 < len(list_5br3):\n        j = list_5br3[idx_i2z6]\n        eggFloor [ 1 ] [ j ] = j\n        idx_i2z6 = idx_i2z6 + 1\n    idx_jofp = 0\n    list_2top = range ( 2 , n + 1 )\n    while idx_jofp < len(list_2top):\n        i = list_2top[idx_jofp]\n        idx_zuc7 = 0\n        list_0q8f = range ( 2 , k + 1 )\n        while idx_zuc7 < len(list_0q8f):\n            j = list_0q8f[idx_zuc7]\n            eggFloor [ i ] [ j ] = INT_MAX\n            idx_7ip9 = 0\n            list_s3dv = range ( 1 , j + 1 )\n            while idx_7ip9 < len(list_s3dv):\n                x = list_s3dv[idx_7ip9]\n                res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFloor [ i ] [ j - x ] )\n                if res < eggFloor [ i ] [ j ] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n                    eggFloor [ i ] [ j ] = res\n                idx_7ip9 = idx_7ip9 + 1\n            idx_zuc7 = idx_zuc7 + 1\n        idx_jofp = idx_jofp + 1\n    return eggFloor [ n ] [ k ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1_to_71", "old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1"}
{"code": "def lps ( seq ) :\n    n = len ( seq )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    idx_69oi = 0\n    list_70le = range ( n )\n    while idx_69oi < len(list_70le):\n        i = list_70le[idx_69oi]\n        L [ i ] [ i ] = 1\n        idx_69oi = idx_69oi + 1\n    idx_dotp = 0\n    list_05uh = range ( 2 , n + 1 )\n    while idx_dotp < len(list_05uh):\n        cl = list_05uh[idx_dotp]\n        idx_3qj8 = 0\n        list_ipvk = range ( n - cl + 1 )\n        while idx_3qj8 < len(list_ipvk):\n            i = list_ipvk[idx_3qj8]\n            j = i + cl - 1\n            if seq [ i ] == seq [ j ] and cl == 2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                L [ i ] [ j ] = 2\n            elif seq [ i ] == seq [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n            idx_3qj8 = idx_3qj8 + 1\n        idx_dotp = idx_dotp + 1\n    return L [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_72", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def maxSumIS ( arr , n ) :\n    max = 0\n    msis = [ 0 for x in range ( n ) ]\n    idx_t2hl = 0\n    list_97ma = range ( n )\n    while idx_t2hl < len(list_97ma):\n        i = list_97ma[idx_t2hl]\n        msis [ i ] = arr [ i ]\n        idx_t2hl = idx_t2hl + 1\n    idx_tr42 = 0\n    list_ds5l = range ( 1 , n )\n    while idx_tr42 < len(list_ds5l):\n        i = list_ds5l[idx_tr42]\n        idx_785p = 0\n        list_7wal = range ( i )\n        while idx_785p < len(list_7wal):\n            j = list_7wal[idx_785p]\n            if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n                msis [ i ] = msis [ j ] + arr [ i ]\n            idx_785p = idx_785p + 1\n        idx_tr42 = idx_tr42 + 1\n    idx_s1un = 0\n    list_u1ai = range ( n )\n    while idx_s1un < len(list_u1ai):\n        i = list_u1ai[idx_s1un]\n        if max < msis [ i ] and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            max = msis [ i ]\n        idx_s1un = idx_s1un + 1\n    return max", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE_to_73", "old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE"}
{"code": "def lbs ( arr , n ) :\n    lis = [ 1 for i in range ( n + 1 ) ]\n    idx_y7qb = 0\n    list_9kw8 = range ( 1 , n )\n    while idx_y7qb < len(list_9kw8):\n        i = list_9kw8[idx_y7qb]\n        idx_5l6i = 0\n        list_3p5v = range ( 0 , i )\n        while idx_5l6i < len(list_3p5v):\n            j = list_3p5v[idx_5l6i]\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                lis [ i ] = lis [ j ] + 1\n            idx_5l6i = idx_5l6i + 1\n        idx_y7qb = idx_y7qb + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    idx_qs3y = 0\n    list_erh6 = reversed ( range ( n - 1 ) )\n    while idx_qs3y < len(list_erh6):\n        i = list_erh6[idx_qs3y]\n        idx_nhgj = 0\n        list_z6jc = reversed ( range ( i - 1 , n ) )\n        while idx_nhgj < len(list_z6jc):\n            j = list_z6jc[idx_nhgj]\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                lds [ i ] = lds [ j ] + 1\n            idx_nhgj = idx_nhgj + 1\n        idx_qs3y = idx_qs3y + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    idx_od1t = 0\n    list_hpgo = range ( 1 , n )\n    while idx_od1t < len(list_hpgo):\n        i = list_hpgo[idx_od1t]\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n        idx_od1t = idx_od1t + 1\n    return maximum", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE_to_74", "old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    idx_e05b = 0\n    list_ixl8 = range ( n )\n    while idx_e05b < len(list_ixl8):\n        i = list_ixl8[idx_e05b]\n        P [ i ] [ i ] = True\n        C [ i ] [ i ] = 0\n        idx_e05b = idx_e05b + 1\n    idx_0wi3 = 0\n    list_8jv6 = range ( 2 , n + 1 )\n    while idx_0wi3 < len(list_8jv6):\n        L = list_8jv6[idx_0wi3]\n        idx_ztce = 0\n        list_r249 = range ( n - L + 1 )\n        while idx_ztce < len(list_r249):\n            i = list_r249[idx_ztce]\n            j = i + L - 1\n            if L == 2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                idx_st3h = 0\n                list_huak = range ( i , j )\n                while idx_st3h < len(list_huak):\n                    k = list_huak[idx_st3h]\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n                    idx_st3h = idx_st3h + 1\n            idx_ztce = idx_ztce + 1\n        idx_0wi3 = idx_0wi3 + 1\n    return C [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_75", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    idx_9lo0 = 0\n    list_20m1 = range ( n )\n    while idx_9lo0 < len(list_20m1):\n        i = list_20m1[idx_9lo0]\n        if symb [ i ] == 'F' and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            F [ i ] [ i ] = 1\n        else :\n            F [ i ] [ i ] = 0\n        if symb [ i ] == 'T' and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            T [ i ] [ i ] = 1\n        else :\n            T [ i ] [ i ] = 0\n        idx_9lo0 = idx_9lo0 + 1\n    idx_pvyi = 0\n    list_q26s = range ( 1 , n )\n    while idx_pvyi < len(list_q26s):\n        gap = list_q26s[idx_pvyi]\n        i = 0\n        idx_qxi9 = 0\n        list_z2e7 = range ( gap , n )\n        while idx_qxi9 < len(list_z2e7):\n            j = list_z2e7[idx_qxi9]\n            T [ i ] [ j ] = F [ i ] [ j ] = 0\n            idx_06tp = 0\n            list_4gkl = range ( gap )\n            while idx_06tp < len(list_4gkl):\n                g = list_4gkl[idx_06tp]\n                k = i + g\n                tik = T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ]\n                if oper [ k ] == '&' and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] )\n                if oper [ k ] == '|' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                if oper [ k ] == '^' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + 1 ] [ j ] + T [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + 1 ] [ j ] + F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                idx_06tp = idx_06tp + 1\n            i += 1\n            idx_qxi9 = idx_qxi9 + 1\n        idx_pvyi = idx_pvyi + 1\n    return T [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_76", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def lis ( arr , n) :\n    lis = [ 1 ] * n\n    idx_ftkh = 0\n    list_ofjg = range ( 1 , n )\n    while idx_ftkh < len(list_ofjg):\n        i = list_ofjg[idx_ftkh]\n        idx_6huv = 0\n        list_3mzp = range ( 0 , i )\n        while idx_6huv < len(list_3mzp):\n            j = list_3mzp[idx_6huv]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                lis [ i ] = lis [ j ] + 1\n            idx_6huv = idx_6huv + 1\n        idx_ftkh = idx_ftkh + 1\n    maximum = 0\n    idx_rdpv = 0\n    list_dvie = range ( n )\n    while idx_rdpv < len(list_dvie):\n        i = list_dvie[idx_rdpv]\n        maximum = max ( maximum , lis [ i ] )\n        idx_rdpv = idx_rdpv + 1\n    return maximum", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1_to_77", "old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def MatrixChainOrder ( p , i , j ) :\n    if i == j and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        return 0\n    _min = sys.maxsize\n    idx_p1lo = 0\n    list_z1ie = range ( i , j )\n    while idx_p1lo < len(list_z1ie):\n        k = list_z1ie[idx_p1lo]\n        count = ( MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] )\n        if count < _min and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            _min = count\n        idx_p1lo = idx_p1lo + 1\n    return _min", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION_to_78", "old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION"}
{"code": "def isSubsetSum ( set , n , sum ) :\n    subset = ( [ [ False for i in range ( sum + 1 ) ] for i in range ( n + 1 ) ] )\n    idx_hm7v = 0\n    list_0l1f = range ( n + 1 )\n    while idx_hm7v < len(list_0l1f):\n        i = list_0l1f[idx_hm7v]\n        subset [ i ] [ 0 ] = True\n        idx_hm7v = idx_hm7v + 1\n    idx_js4q = 0\n    list_jvrq = range ( 1 , sum + 1 )\n    while idx_js4q < len(list_jvrq):\n        i = list_jvrq[idx_js4q]\n        subset [ 0 ] [ i ] = False\n        idx_js4q = idx_js4q + 1\n    idx_1vic = 0\n    list_p5t1 = range ( 1 , n + 1 )\n    while idx_1vic < len(list_p5t1):\n        i = list_p5t1[idx_1vic]\n        idx_stkg = 0\n        list_ughm = range ( 1 , sum + 1 )\n        while idx_stkg < len(list_ughm):\n            j = list_ughm[idx_stkg]\n            if j < set [ i - 1 ] and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                subset [ i ] [ j ] = subset [ i - 1 ] [ j ]\n            if j >= set [ i - 1 ] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] or subset [ i - 1 ] [ j - set [ i - 1 ] ] )\n            idx_stkg = idx_stkg + 1\n        idx_1vic = idx_1vic + 1\n    return subset [ n ] [ sum ]", "id": "For2While_sample_from_DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1_to_79", "old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1"}
{"code": "def countNum ( arr , n ) :\n    count = 0\n    arr = arr[:n]\n    arr.sort ( )\n    idx_hnc7 = 0\n    list_spfd = range ( 0 , n - 1 )\n    while idx_hnc7 < len(list_spfd):\n        i = list_spfd[idx_hnc7]\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            count += arr [ i + 1 ] - arr [ i ] - 1\n        idx_hnc7 = idx_hnc7 + 1\n    return count", "id": "For2While_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_to_80", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY"}
{"code": "def countNum ( arr , n ) :\n    s = dict ( )\n    count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9\n    idx_23ob = 0\n    list_zp0y = range ( n )\n    while idx_23ob < len(list_zp0y):\n        i = list_zp0y[idx_23ob]\n        s [ arr [ i ] ] = 1\n        if ( arr [ i ] < minm ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            minm = arr [ i ]\n        if ( arr [ i ] > maxm ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            maxm = arr [ i ]\n        idx_23ob = idx_23ob + 1\n    idx_yqxc = 0\n    list_ep9k = range ( minm , maxm + 1 )\n    while idx_yqxc < len(list_ep9k):\n        i = list_ep9k[idx_yqxc]\n        if i not in s.keys ( ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            count += 1\n        idx_yqxc = idx_yqxc + 1\n    return count", "id": "For2While_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1_to_81", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1"}
{"code": "def equilibrium ( arr , n) :\n    leftsum = 0\n    rightsum = 0\n    idx_h508 = 0\n    list_3bwu = range ( n )\n    while idx_h508 < len(list_3bwu):\n        i = list_3bwu[idx_h508]\n        leftsum = 0\n        rightsum = 0\n        idx_owu0 = 0\n        list_jr9p = range ( i )\n        while idx_owu0 < len(list_jr9p):\n            j = list_jr9p[idx_owu0]\n            leftsum += arr [ j ]\n            idx_owu0 = idx_owu0 + 1\n        idx_bdlz = 0\n        list_0mn1 = range ( i + 1 , n )\n        while idx_bdlz < len(list_0mn1):\n            j = list_0mn1[idx_bdlz]\n            rightsum += arr [ j ]\n            idx_bdlz = idx_bdlz + 1\n        if leftsum == rightsum and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            return i\n        idx_h508 = idx_h508 + 1\n    return - 1", "id": "For2While_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_to_82", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY"}
{"code": "def equilibrium ( arr ,n) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    idx_ucf8 = 0\n    list_rom7 = list(enumerate ( arr ))\n    while idx_ucf8 < len(list_rom7):\n        i , num = list_rom7[idx_ucf8]\n        total_sum -= num\n        if leftsum == total_sum and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            return i\n        leftsum += num\n        idx_ucf8 = idx_ucf8 + 1\n    return - 1", "id": "For2While_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_1_to_83", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1"}
{"code": "def squareRootExists ( n , p ) :\n    n = n % p\n    idx_1kq5 = 0\n    list_swjn = range ( 2 , p , 1 )\n    while idx_1kq5 < len(list_swjn):\n        x = list_swjn[idx_1kq5]\n        if ( ( x * x ) % p == n ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            return True\n        idx_1kq5 = idx_1kq5 + 1\n    return False", "id": "For2While_sample_from_EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS_to_84", "old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS"}
{"code": "def maxHamming ( arr , n ) :\n    brr = [ 0 ] * ( 2 * n + 1 )\n    idx_2k94 = 0\n    list_fmgl = range ( n )\n    while idx_2k94 < len(list_fmgl):\n        i = list_fmgl[idx_2k94]\n        brr [ i ] = arr [ i ]\n        idx_2k94 = idx_2k94 + 1\n    idx_uxz6 = 0\n    list_qral = range ( n )\n    while idx_uxz6 < len(list_qral):\n        i = list_qral[idx_uxz6]\n        brr [ n + i ] = arr [ i ]\n        idx_uxz6 = idx_uxz6 + 1\n    maxHam = 0\n    idx_iejk = 0\n    list_w3vl = range ( 1 , n )\n    while idx_iejk < len(list_w3vl):\n        i = list_w3vl[idx_iejk]\n        currHam = 0\n        k = 0\n        idx_rxlk = 0\n        list_1h9k = range ( i , i + n )\n        while idx_rxlk < len(list_1h9k):\n            j = list_1h9k[idx_rxlk]\n            if brr [ j ] != arr [ k ] and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                currHam += 1\n                k = k + 1\n            idx_rxlk = idx_rxlk + 1\n        if currHam == n and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return n\n        maxHam = max ( maxHam , currHam )\n        idx_iejk = idx_iejk + 1\n    return maxHam", "id": "For2While_sample_from_FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE_to_85", "old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE"}
{"code": "def find3Numbers ( A , arr_size , sum ) :\n    idx_5g7s = 0\n    list_vb65 = range ( 0 , arr_size - 2 )\n    while idx_5g7s < len(list_vb65):\n        i = list_vb65[idx_5g7s]\n        idx_iq10 = 0\n        list_sn7i = range ( i + 1 , arr_size - 1 )\n        while idx_iq10 < len(list_sn7i):\n            j = list_sn7i[idx_iq10]\n            idx_4f5z = 0\n            list_z8bi = range ( j + 1 , arr_size )\n            while idx_4f5z < len(list_z8bi):\n                k = list_z8bi[idx_4f5z]\n                if A [ i ] + A [ j ] + A [ k ] == sum and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                    print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , A [ k ] )\n                    return True\n                idx_4f5z = idx_4f5z + 1\n            idx_iq10 = idx_iq10 + 1\n        idx_5g7s = idx_5g7s + 1\n    return False", "id": "For2While_sample_from_FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_to_86", "old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = [ ]\n    idx_s3o6 = 0\n    list_5bf4 = string\n    while idx_s3o6 < len(list_5bf4):\n        ch = list_5bf4[idx_s3o6]\n        if ch == ')' and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            top = Stack.pop ( )\n            elementsInside = 0\n            while top != '(' :\n                elementsInside += 1\n                top = Stack.pop ( )\n            if elementsInside < 1 :\n                return True\n        else :\n            Stack.append ( ch )\n        idx_s3o6 = idx_s3o6 + 1\n    return False", "id": "For2While_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_87", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def firstFactorialDivisibleNumber ( x ) :\n    i = 1\n    fact = 1\n    idx_532h = 0\n    list_5eho = range ( 1 , x )\n    while idx_532h < len(list_5eho):\n        i = list_5eho[idx_532h]\n        fact = fact * i\n        if ( fact % x == 0 ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            break\n        idx_532h = idx_532h + 1\n    return i", "id": "For2While_sample_from_FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X_to_88", "old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X"}
{"code": "def findExtra ( arr1 , arr2 , n ) :\n    idx_1lgm = 0\n    list_u9xf = range ( 0 , n )\n    while idx_1lgm < len(list_u9xf):\n        i = list_u9xf[idx_1lgm]\n        if ( arr1 [ i ] != arr2 [ i ] ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return i\n        idx_1lgm = idx_1lgm + 1\n    return n", "id": "For2While_sample_from_FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_to_89", "old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY"}
{"code": "def findLargestd ( S , n ) :\n    found = False\n    S = S[:n]\n    S.sort ( )\n    idx_2y3c = 0\n    list_mbs7 = range ( n - 1 , - 1 , - 1 )\n    while idx_2y3c < len(list_mbs7):\n        i = list_mbs7[idx_2y3c]\n        idx_k0dl = 0\n        list_768i = range ( 0 , n )\n        while idx_k0dl < len(list_768i):\n            j = list_768i[idx_k0dl]\n            if ( i == j ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                continue\n            idx_oif1 = 0\n            list_zjd2 = range ( j + 1 , n )\n            while idx_oif1 < len(list_zjd2):\n                k = list_zjd2[idx_oif1]\n                if ( i == k ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                    continue\n                idx_e0sh = 0\n                list_hy8b = range ( k + 1 , n )\n                while idx_e0sh < len(list_hy8b):\n                    l = list_hy8b[idx_e0sh]\n                    if ( i == l ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                        found = True\n                        return S [ i ]\n                    idx_e0sh = idx_e0sh + 1\n                idx_oif1 = idx_oif1 + 1\n            idx_k0dl = idx_k0dl + 1\n        idx_2y3c = idx_2y3c + 1\n    if ( found == False ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        return - 1", "id": "For2While_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_to_90", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D"}
{"code": "def findFourElements ( arr , n ) :\n    mp = dict ( )\n    idx_a7k0 = 0\n    list_dmvk = range ( n - 1 )\n    while idx_a7k0 < len(list_dmvk):\n        i = list_dmvk[idx_a7k0]\n        idx_hj05 = 0\n        list_oxr5 = range ( i + 1 , n )\n        while idx_hj05 < len(list_oxr5):\n            j = list_oxr5[idx_hj05]\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n            idx_hj05 = idx_hj05 + 1\n        idx_a7k0 = idx_a7k0 + 1\n    d = - 10 ** 9\n    idx_2bw7 = 0\n    list_gae3 = range ( n - 1 )\n    while idx_2bw7 < len(list_gae3):\n        i = list_gae3[idx_2bw7]\n        idx_bsqi = 0\n        list_i5qf = range ( i + 1 , n )\n        while idx_bsqi < len(list_i5qf):\n            j = list_i5qf[idx_bsqi]\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                p = mp [ abs_diff ]\n                if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1 ] != i and p [ 1 ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n            idx_bsqi = idx_bsqi + 1\n        idx_2bw7 = idx_2bw7 + 1\n    return d", "id": "For2While_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1_to_91", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1"}
{"code": "def maxPrimeFactors ( n ) :\n    maxPrime = - 1\n    while n % 2 == 0 :\n        maxPrime = 2\n        n >>= 1\n    idx_kqoc = 0\n    list_bf9n = range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 )\n    while idx_kqoc < len(list_bf9n):\n        i = list_bf9n[idx_kqoc]\n        while n % i == 0 :\n            maxPrime = i\n            n = n / i\n        idx_kqoc = idx_kqoc + 1\n    if n > 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        maxPrime = n\n    return int ( maxPrime )", "id": "For2While_sample_from_FIND_LARGEST_PRIME_FACTOR_NUMBER_to_92", "old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = 1\n    if ( A == B ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 1\n    elif ( ( B - A ) >= 5 ) :\n        return 0\n    else :\n        idx_s7rx = 0\n        list_5pbd = range ( A + 1 , B + 1 )\n        while idx_s7rx < len(list_5pbd):\n            i = list_5pbd[idx_s7rx]\n            variable = ( variable * ( i % 10 ) ) % 10\n            idx_s7rx = idx_s7rx + 1\n        return variable % 10", "id": "For2While_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_93", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if k > n and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        return - 1\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    idx_ytra = 0\n    list_1o95 = range ( 1 , n )\n    while idx_ytra < len(list_1o95):\n        i = list_1o95[idx_ytra]\n        csum [ i ] = csum [ i - 1 ] + arr [ i ]\n        idx_ytra = idx_ytra + 1\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    idx_ay7w = 0\n    list_rvxt = range ( k , n )\n    while idx_ay7w < len(list_rvxt):\n        i = list_rvxt[idx_ay7w]\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            max_sum = curr_sum\n            max_end = i\n        idx_ay7w = idx_ay7w + 1\n    return max_end - k + 1", "id": "For2While_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_to_94", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return - 1\n    sum = arr [ 0 ]\n    idx_jvmr = 0\n    list_6a3g = range ( 1 , k )\n    while idx_jvmr < len(list_6a3g):\n        i = list_6a3g[idx_jvmr]\n        sum += arr [ i ]\n        idx_jvmr = idx_jvmr + 1\n    max_sum = sum\n    max_end = k - 1\n    idx_vwdj = 0\n    list_kmwo = range ( k , n )\n    while idx_vwdj < len(list_kmwo):\n        i = list_kmwo[idx_vwdj]\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            max_sum = sum\n            max_end = i\n        idx_vwdj = idx_vwdj + 1\n    return max_end - k + 1", "id": "For2While_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1_to_95", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1"}
{"code": "def maxProduct ( arr , n ) :\n    if n < 3 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return - 1\n    max_product = - ( sys.maxsize - 1 )\n    idx_jz3w = 0\n    list_1cms = range ( 0 , n - 2 )\n    while idx_jz3w < len(list_1cms):\n        i = list_1cms[idx_jz3w]\n        idx_scq8 = 0\n        list_0ift = range ( i + 1 , n - 1 )\n        while idx_scq8 < len(list_0ift):\n            j = list_0ift[idx_scq8]\n            idx_9io7 = 0\n            list_ujt2 = range ( j + 1 , n )\n            while idx_9io7 < len(list_ujt2):\n                k = list_ujt2[idx_9io7]\n                max_product = max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] )\n                idx_9io7 = idx_9io7 + 1\n            idx_scq8 = idx_scq8 + 1\n        idx_jz3w = idx_jz3w + 1\n    return max_product", "id": "For2While_sample_from_FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_to_96", "old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = 0 , 0 , 0\n    idx_5t9l = 0\n    list_cq5b = range ( n1 )\n    while idx_5t9l < len(list_cq5b):\n        i = list_cq5b[idx_5t9l]\n        sum1 += stack1 [ i ]\n        idx_5t9l = idx_5t9l + 1\n    idx_s8r5 = 0\n    list_24mp = range ( n2 )\n    while idx_s8r5 < len(list_24mp):\n        i = list_24mp[idx_s8r5]\n        sum2 += stack2 [ i ]\n        idx_s8r5 = idx_s8r5 + 1\n    idx_ub0o = 0\n    list_4tqn = range ( n3 )\n    while idx_ub0o < len(list_4tqn):\n        i = list_4tqn[idx_ub0o]\n        sum3 += stack3 [ i ]\n        idx_ub0o = idx_ub0o + 1\n    top1 , top2 , top3 = 0 , 0 , 0\n    ans = 0\n    while ( 1 ) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            return 0\n        if ( sum1 == sum2 and sum2 == sum3 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            return sum1\n        if ( sum1 >= sum2 and sum1 >= sum3 ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            sum1 -= stack1 [ top1 ]\n            top1 = top1 + 1\n        elif ( sum2 >= sum3 and sum2 >= sum3 ) :\n            sum2 -= stack2 [ top2 ]\n            top2 = top2 + 1\n        elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n            sum3 -= stack3 [ top3 ]\n            top3 = top3 + 1", "id": "For2While_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_97", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = sys.maxsize\n    mx = - sys.maxsize - 1\n    idx_a40h = 0\n    list_td2j = range ( r )\n    while idx_a40h < len(list_td2j):\n        i = list_td2j[idx_a40h]\n        if m [ i ] [ 0 ] < mi and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ c - 1 ] > mx and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            mx = m [ i ] [ c - 1 ]\n        idx_a40h = idx_a40h + 1\n    desired = ( r * c + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ]\n        idx_ftk0 = 0\n        list_ysaf = range ( r )\n        while idx_ftk0 < len(list_ysaf):\n            i = list_ysaf[idx_ftk0]\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n            idx_ftk0 = idx_ftk0 + 1\n        if place [ 0 ] < desired and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return mi", "id": "For2While_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_98", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    idx_xvul = 0\n    list_8uze = range ( n - 1 )\n    while idx_xvul < len(list_8uze):\n        i = list_8uze[idx_xvul]\n        idx_x3je = 0\n        list_bnyw = range ( i + 1 , n )\n        while idx_x3je < len(list_bnyw):\n            j = list_bnyw[idx_x3je]\n            if abs ( arr [ i ] - arr [ j ] ) < diff and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                diff = abs ( arr [ i ] - arr [ j ] )\n            idx_x3je = idx_x3je + 1\n        idx_xvul = idx_xvul + 1\n    return diff", "id": "For2While_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_to_99", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR"}
{"code": "def findMinDiff ( arr , n ) :\n    arr = arr[:n]\n    arr = sorted ( arr )\n    diff = 10 ** 20\n    idx_lyc3 = 0\n    list_kb2r = range ( n - 1 )\n    while idx_lyc3 < len(list_kb2r):\n        i = list_kb2r[idx_lyc3]\n        if arr [ i + 1 ] - arr [ i ] < diff and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            diff = arr [ i + 1 ] - arr [ i ]\n        idx_lyc3 = idx_lyc3 + 1\n    return diff", "id": "For2While_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_1_to_100", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1"}
{"code": "def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        ans *= 2\n    idx_g81c = 0\n    list_19fi = range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 )\n    while idx_g81c < len(list_19fi):\n        i = list_19fi[idx_g81c]\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            ans *= i\n        idx_g81c = idx_g81c + 1\n    if n > 2 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        ans *= n\n    return ans", "id": "For2While_sample_from_FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE_to_101", "old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE"}
{"code": "def minCoins ( coins , m , V ) :\n    table = [ 0 for i in range ( V + 1 ) ]\n    table [ 0 ] = 0\n    idx_moh1 = 0\n    list_afmc = range ( 1 , V + 1 )\n    while idx_moh1 < len(list_afmc):\n        i = list_afmc[idx_moh1]\n        table [ i ] = sys.maxsize\n        idx_moh1 = idx_moh1 + 1\n    idx_y3jb = 0\n    list_ohpa = range ( 1 , V + 1 )\n    while idx_y3jb < len(list_ohpa):\n        i = list_ohpa[idx_y3jb]\n        idx_x14z = 0\n        list_jvhy = range ( m )\n        while idx_x14z < len(list_jvhy):\n            j = list_jvhy[idx_x14z]\n            if ( coins [ j ] <= i ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n                sub_res = table [ i - coins [ j ] ]\n                if ( sub_res != sys.maxsize and sub_res + 1 < table [ i ] ) :\n                    table [ i ] = sub_res + 1\n            idx_x14z = idx_x14z + 1\n        idx_y3jb = idx_y3jb + 1\n    return table [ V ]", "id": "For2While_sample_from_FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1_to_102", "old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1"}
{"code": "def countEndless ( input , n ) :\n    row = np.zeros ( ( n , n ) )\n    col = np.zeros ( ( n , n ) )\n    idx_3e65 = 0\n    list_yvne = range ( n )\n    while idx_3e65 < len(list_yvne):\n        j = list_yvne[idx_3e65]\n        isEndless = 1\n        idx_82ac = 0\n        list_7qo5 = range ( n - 1 , - 1 , - 1 )\n        while idx_82ac < len(list_7qo5):\n            i = list_7qo5[idx_82ac]\n            if ( input [ i ] [ j ] == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                isEndless = 0\n            col [ i ] [ j ] = isEndless\n            idx_82ac = idx_82ac + 1\n        idx_3e65 = idx_3e65 + 1\n    idx_rn10 = 0\n    list_h18p = range ( n )\n    while idx_rn10 < len(list_h18p):\n        i = list_h18p[idx_rn10]\n        isEndless = 1\n        idx_xt6q = 0\n        list_v4wx = range ( n - 1 , - 1 , - 1 )\n        while idx_xt6q < len(list_v4wx):\n            j = list_v4wx[idx_xt6q]\n            if ( input [ i ] [ j ] == 0 ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n                isEndless = 0\n            row [ i ] [ j ] = isEndless\n            idx_xt6q = idx_xt6q + 1\n        idx_rn10 = idx_rn10 + 1\n    ans = 0\n    idx_uhby = 0\n    list_dpme = range ( n )\n    while idx_uhby < len(list_dpme):\n        i = list_dpme[idx_uhby]\n        idx_hybu = 0\n        list_25np = range ( 1 , n )\n        while idx_hybu < len(list_25np):\n            j = list_25np[idx_hybu]\n            if ( row [ i ] [ j ] and col [ i ] [ j ] ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                ans += 1\n            idx_hybu = idx_hybu + 1\n        idx_uhby = idx_uhby + 1\n    return ans", "id": "For2While_sample_from_FIND_NUMBER_ENDLESS_POINTS_to_103", "old_id": "FIND_NUMBER_ENDLESS_POINTS"}
{"code": "def CountSquares ( a , b ) :\n    cnt = 0\n    idx_f0vt = 0\n    list_6mnz = range ( a , b + 1 )\n    while idx_f0vt < len(list_6mnz):\n        i = list_6mnz[idx_f0vt]\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n        idx_f0vt = idx_f0vt + 1\n    return cnt", "id": "For2While_sample_from_FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_to_104", "old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS"}
{"code": "def count ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    lookup = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    idx_rfj3 = 0\n    list_c2g5 = range ( n + 1 )\n    while idx_rfj3 < len(list_c2g5):\n        i = list_c2g5[idx_rfj3]\n        lookup [ 0 ] [ i ] = 0\n        idx_rfj3 = idx_rfj3 + 1\n    idx_xvky = 0\n    list_7ch8 = range ( m + 1 )\n    while idx_xvky < len(list_7ch8):\n        i = list_7ch8[idx_xvky]\n        lookup [ i ] [ 0 ] = 1\n        idx_xvky = idx_xvky + 1\n    idx_agqc = 0\n    list_bj2p = range ( 1 , m + 1 )\n    while idx_agqc < len(list_bj2p):\n        i = list_bj2p[idx_agqc]\n        idx_0znb = 0\n        list_13kg = range ( 1 , n + 1 )\n        while idx_0znb < len(list_13kg):\n            j = list_13kg[idx_0znb]\n            if a [ i - 1 ] == b [ j - 1 ] and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ]\n            else :\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ]\n            idx_0znb = idx_0znb + 1\n        idx_agqc = idx_agqc + 1\n    return lookup [ m ] [ n ]", "id": "For2While_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_105", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def countOps ( A , B , m , n ) :\n    idx_15uf = 0\n    list_mj2z = range ( n )\n    while idx_15uf < len(list_mj2z):\n        i = list_mj2z[idx_15uf]\n        idx_daic = 0\n        list_az3h = range ( m )\n        while idx_daic < len(list_az3h):\n            j = list_az3h[idx_daic]\n            A [ i ] [ j ] -= B [ i ] [ j ]\n            idx_daic = idx_daic + 1\n        idx_15uf = idx_15uf + 1\n    idx_cgxb = 0\n    list_u6qh = range ( 1 , n )\n    while idx_cgxb < len(list_u6qh):\n        i = list_u6qh[idx_cgxb]\n        idx_zolg = 0\n        list_7amx = range ( 1 , n )\n        while idx_zolg < len(list_7amx):\n            j = list_7amx[idx_zolg]\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                return - 1\n            idx_zolg = idx_zolg + 1\n        idx_cgxb = idx_cgxb + 1\n    result = 0\n    idx_0qya = 0\n    list_mdgn = range ( n )\n    while idx_0qya < len(list_mdgn):\n        i = list_mdgn[idx_0qya]\n        result += abs ( A [ i ] [ 0 ] )\n        idx_0qya = idx_0qya + 1\n    idx_w172 = 0\n    list_wipr = range ( m )\n    while idx_w172 < len(list_wipr):\n        j = list_wipr[idx_w172]\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] )\n        idx_w172 = idx_w172 + 1\n    return ( result )", "id": "For2While_sample_from_FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL_to_106", "old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL"}
{"code": "def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    idx_ow95 = 0\n    list_d9zj = range ( 2 , n + 1 )\n    while idx_ow95 < len(list_d9zj):\n        i = list_d9zj[idx_ow95]\n        if ( int ( i % 2 ) == 0 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n        idx_ow95 = idx_ow95 + 1\n    return DP [ n ]", "id": "For2While_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_107", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def pairSum ( mat , n , sum ) :\n    idx_j9xk = 0\n    list_igd7 = range ( n )\n    while idx_j9xk < len(list_igd7):\n        i = list_igd7[idx_j9xk]\n        mat [ i ].sort ( )\n        idx_j9xk = idx_j9xk + 1\n    idx_joz1 = 0\n    list_iu1w = range ( n - 1 )\n    while idx_joz1 < len(list_iu1w):\n        i = list_iu1w[idx_joz1]\n        idx_08pr = 0\n        list_zaei = range ( i + 1 , n )\n        while idx_08pr < len(list_zaei):\n            j = list_zaei[idx_08pr]\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1\n            idx_08pr = idx_08pr + 1\n        idx_joz1 = idx_joz1 + 1", "id": "For2While_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_108", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def findMaxGCD ( arr , n ) :\n    high = 0\n    idx_6o7m = 0\n    list_48qf = range ( 0 , n )\n    while idx_6o7m < len(list_48qf):\n        i = list_48qf[idx_6o7m]\n        high = max ( high , arr [ i ] )\n        idx_6o7m = idx_6o7m + 1\n    count = [ 0 ] * ( high + 1 )\n    idx_pmvx = 0\n    list_rzjp = range ( 0 , n )\n    while idx_pmvx < len(list_rzjp):\n        i = list_rzjp[idx_pmvx]\n        count [ arr [ i ] ] += 1\n        idx_pmvx = idx_pmvx + 1\n    counter = 0\n    idx_pabe = 0\n    list_ne8g = range ( high , 0 , - 1 )\n    while idx_pabe < len(list_ne8g):\n        i = list_ne8g[idx_pabe]\n        j = i\n        while ( j <= high ) :\n            if ( count [ j ] > 0 ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n                counter += count [ j ]\n            j += i\n            if ( counter == 2 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                return i\n        counter = 0\n        idx_pabe = idx_pabe + 1\n    return 1\n", "id": "For2While_sample_from_FIND_PAIR_MAXIMUM_GCD_ARRAY_1_to_109", "old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1"}
{"code": "def findGreatest ( arr , n ) :\n    result = - 1\n    idx_6zrl = 0\n    list_n2my = range ( n )\n    while idx_6zrl < len(list_n2my):\n        i = list_n2my[idx_6zrl]\n        idx_q7j5 = 0\n        list_ezg6 = range ( n - 1 )\n        while idx_q7j5 < len(list_ezg6):\n            j = list_ezg6[idx_q7j5]\n            idx_1csh = 0\n            list_k54h = range ( j + 1 , n )\n            while idx_1csh < len(list_k54h):\n                k = list_k54h[idx_1csh]\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    result = max ( result , arr [ i ] )\n                idx_1csh = idx_1csh + 1\n            idx_q7j5 = idx_q7j5 + 1\n        idx_6zrl = idx_6zrl + 1\n    return result", "id": "For2While_sample_from_FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_to_110", "old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY"}
{"code": "def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return False\n    columns = len ( m [ 0 ] )\n    idx_5lae = 0\n    list_1hqe = range ( rows )\n    while idx_5lae < len(list_1hqe):\n        y1 = list_1hqe[idx_5lae]\n        idx_pias = 0\n        list_ox7y = range ( columns )\n        while idx_pias < len(list_ox7y):\n            x1 = list_ox7y[idx_pias]\n            if ( m [ y1 ] [ x1 ] == 1 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                idx_xhsm = 0\n                list_oilf = range ( y1 + 1 , rows )\n                while idx_xhsm < len(list_oilf):\n                    y2 = list_oilf[idx_xhsm]\n                    idx_bekv = 0\n                    list_i90f = range ( x1 + 1 , columns )\n                    while idx_bekv < len(list_i90f):\n                        x2 = list_i90f[idx_bekv]\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n                        idx_bekv = idx_bekv + 1\n                    idx_xhsm = idx_xhsm + 1\n            idx_pias = idx_pias + 1\n        idx_5lae = idx_5lae + 1\n    return False", "id": "For2While_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_to_111", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1"}
{"code": "def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    idx_dqyo = 0\n    list_5qgc = range ( rows )\n    while idx_dqyo < len(list_5qgc):\n        i = list_5qgc[idx_dqyo]\n        idx_z9xg = 0\n        list_4vla = range ( columns - 1 )\n        while idx_z9xg < len(list_4vla):\n            j = list_4vla[idx_z9xg]\n            idx_q5pg = 0\n            list_fsg8 = range ( j + 1 , columns )\n            while idx_q5pg < len(list_fsg8):\n                k = list_fsg8[idx_q5pg]\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n                idx_q5pg = idx_q5pg + 1\n            idx_z9xg = idx_z9xg + 1\n        idx_dqyo = idx_dqyo + 1\n    return False", "id": "For2While_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1_to_112", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1"}
{"code": "def findRepeating ( arr , n ) :\n    s = set ( )\n    idx_j0o8 = 0\n    list_gtqz = range ( n )\n    while idx_j0o8 < len(list_gtqz):\n        i = list_gtqz[idx_j0o8]\n        if arr [ i ] in s and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return arr [ i ]\n        s.add ( arr [ i ] )\n        idx_j0o8 = idx_j0o8 + 1\n    rteurn - 1", "id": "For2While_sample_from_FIND_REPETITIVE_ELEMENT_1_N_1_1_to_113", "old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1"}
{"code": "def subArraySum ( arr , n , sum ) :\n    idx_bzai = 0\n    list_g2wz = range ( n )\n    while idx_bzai < len(list_g2wz):\n        i = list_g2wz[idx_bzai]\n        curr_sum = arr [ i ]\n        j = i + 1\n        while j <= n :\n            if curr_sum == sum and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( i , j - 1 ) )\n                return 1\n            if curr_sum > sum or j == n and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n                break\n            curr_sum = curr_sum + arr [ j ]\n            j += 1\n        idx_bzai = idx_bzai + 1\n    print ( \"No subarray found\" )\n    return 0", "id": "For2While_sample_from_FIND_SUBARRAY_WITH_GIVEN_SUM_to_114", "old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM"}
{"code": "def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return 0\n    res = 1\n    idx_1nvg = 0\n    list_b8vd = range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 )\n    while idx_1nvg < len(list_b8vd):\n        i = list_b8vd[idx_1nvg]\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n        idx_1nvg = idx_1nvg + 1\n    if ( n >= 2 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        res = res * ( 1 + n )\n    return res", "id": "For2While_sample_from_FIND_SUM_EVEN_FACTORS_NUMBER_to_115", "old_id": "FIND_SUM_EVEN_FACTORS_NUMBER"}
{"code": "def evenSum ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_3la4 = 0\n    list_vgik = range ( 0 , n + 1 )\n    while idx_3la4 < len(list_vgik):\n        i = list_vgik[idx_3la4]\n        idx_o6km = 0\n        list_8f4p = range ( 0 , min ( i , n ) + 1 )\n        while idx_o6km < len(list_8f4p):\n            j = list_8f4p[idx_o6km]\n            if j == 0 or j == i and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            idx_o6km = idx_o6km + 1\n        idx_3la4 = idx_3la4 + 1\n    sum = 0 ;\n    idx_govy = 0\n    list_jog0 = range ( 0 , n + 1 )\n    while idx_govy < len(list_jog0):\n        i = list_jog0[idx_govy]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            sum = sum + C [ n ] [ i ]\n        idx_govy = idx_govy + 1\n    return sum", "id": "For2While_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_116", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def sumofoddFactors ( n ) :\n    res = 1\n    while n % 2 == 0 :\n        n = n // 2\n    idx_x1ab = 0\n    list_za1s = range ( 3 , int ( math.sqrt ( n ) + 1 ) )\n    while idx_x1ab < len(list_za1s):\n        i = list_za1s[idx_x1ab]\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n        idx_x1ab = idx_x1ab + 1\n    if n >= 2 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        res *= ( 1 + n )\n    return res", "id": "For2While_sample_from_FIND_SUM_ODD_FACTORS_NUMBER_to_117", "old_id": "FIND_SUM_ODD_FACTORS_NUMBER"}
{"code": "def findSubarraySum ( arr , n ) :\n    res = 0\n    m = dict ( )\n    idx_a4hi = 0\n    list_45xk = range ( n )\n    while idx_a4hi < len(list_45xk):\n        i = list_45xk[idx_a4hi]\n        Sum = 0\n        idx_isvh = 0\n        list_p2ez = range ( i , n )\n        while idx_isvh < len(list_p2ez):\n            j = list_p2ez[idx_isvh]\n            Sum += arr [ j ]\n            m [ Sum ] = m.get ( Sum , 0 ) + 1\n            idx_isvh = idx_isvh + 1\n        idx_a4hi = idx_a4hi + 1\n    idx_3gz5 = 0\n    list_8q7t = m\n    while idx_3gz5 < len(list_8q7t):\n        x = list_8q7t[idx_3gz5]\n        if m [ x ] == 1 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            res += x\n        idx_3gz5 = idx_3gz5 + 1\n    return res", "id": "For2While_sample_from_FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY_to_118", "old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY"}
{"code": "def findElement ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ 0 ] = float ( '-inf' )\n    idx_zm5r = 0\n    list_w4m1 = range ( 1 , n )\n    while idx_zm5r < len(list_w4m1):\n        i = list_w4m1[idx_zm5r]\n        leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 ] )\n        idx_zm5r = idx_zm5r + 1\n    rightMin = float ( 'inf' )\n    idx_vwyq = 0\n    list_0q8k = range ( n - 1 , - 1 , - 1 )\n    while idx_vwyq < len(list_0q8k):\n        i = list_0q8k[idx_vwyq]\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n        idx_vwyq = idx_vwyq + 1\n    return - 1", "id": "For2While_sample_from_FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT_to_119", "old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT"}
{"code": "def maxLen ( arr , n ) :\n    max_len = 0\n    idx_oac5 = 0\n    list_8x07 = range ( n )\n    while idx_oac5 < len(list_8x07):\n        i = list_8x07[idx_oac5]\n        curr_sum = 0\n        idx_xztd = 0\n        list_nbus = range ( i , n )\n        while idx_xztd < len(list_nbus):\n            j = list_nbus[idx_xztd]\n            curr_sum += arr [ j ]\n            if curr_sum == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                max_len = max ( max_len , j - i + 1 )\n            idx_xztd = idx_xztd + 1\n        idx_oac5 = idx_oac5 + 1\n    return max_len\n", "id": "For2While_sample_from_FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_to_120", "old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM"}
{"code": "def findMaximum ( arr , low , high ) :\n    max = arr[low]\n    idx_9ow6 = 0\n    list_hp9d = range(low, high + 1)\n    while idx_9ow6 < len(list_hp9d):\n        i = list_hp9d[idx_9ow6]\n        if arr[i] > max and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            max = arr[i]\n        idx_9ow6 = idx_9ow6 + 1\n    return max", "id": "For2While_sample_from_FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING_to_121", "old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING"}
{"code": "def minDist ( arr , n , x , y ) :\n    min_dist = 2147483647\n    idx_wqsd = 0\n    list_szna = range ( n )\n    while idx_wqsd < len(list_szna):\n        i = list_szna[idx_wqsd]\n        idx_5jmp = 0\n        list_9kmg = range ( i + 1 , n )\n        while idx_5jmp < len(list_9kmg):\n            j = list_9kmg[idx_5jmp]\n            if ( x == arr [ i ] and y == arr [ j ] or y == arr [ i ] and x == arr [ j ] ) and min_dist > abs ( i - j ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                min_dist = abs ( i - j )\n            idx_5jmp = idx_5jmp + 1\n        idx_wqsd = idx_wqsd + 1\n    return min_dist\n\n", "id": "For2While_sample_from_FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_to_122", "old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS"}
{"code": "def getOddOccurrence ( arr , arr_size ) :\n    idx_fns0 = 0\n    list_o7nq = range ( 0 , arr_size )\n    while idx_fns0 < len(list_o7nq):\n        i = list_o7nq[idx_fns0]\n        count = 0\n        idx_myhg = 0\n        list_lbyk = range ( 0 , arr_size )\n        while idx_myhg < len(list_lbyk):\n            j = list_lbyk[idx_myhg]\n            if arr [ i ] == arr [ j ] and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n                count += 1\n            idx_myhg = idx_myhg + 1\n        if ( count % 2 != 0 ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return arr [ i ]\n        idx_fns0 = idx_fns0 + 1\n    return - 1", "id": "For2While_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_to_123", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES"}
{"code": "def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    idx_vcgx = 0\n    list_8buc = range ( n1 )\n    while idx_vcgx < len(list_8buc):\n        i = list_8buc[idx_vcgx]\n        s.add ( a1 [ i ] )\n        idx_vcgx = idx_vcgx + 1\n    idx_jdl9 = 0\n    list_mcqd = range ( n2 )\n    while idx_jdl9 < len(list_mcqd):\n        i = list_mcqd[idx_jdl9]\n        idx_fhk0 = 0\n        list_8cmu = range ( n3 )\n        while idx_fhk0 < len(list_8cmu):\n            j = list_8cmu[idx_fhk0]\n            if sum - a2 [ i ] - a3 [ j ] in s and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                return True\n            idx_fhk0 = idx_fhk0 + 1\n        idx_jdl9 = idx_jdl9 + 1\n    return False", "id": "For2While_sample_from_FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1_to_124", "old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    idx_qy8a = 0\n    list_0wbn = range ( n - 1 )\n    while idx_qy8a < len(list_0wbn):\n        i = list_0wbn[idx_qy8a]\n        s = set ( )\n        idx_klc1 = 0\n        list_q4bx = range ( i + 1 , n )\n        while idx_klc1 < len(list_q4bx):\n            j = list_q4bx[idx_klc1]\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n            idx_klc1 = idx_klc1 + 1\n        idx_qy8a = idx_qy8a + 1\n    if found == False and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        print ( \"No Triplet Found\" )", "id": "For2While_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_125", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    idx_zd5s = 0\n    list_vodb = range ( 0 , n - 1 )\n    while idx_zd5s < len(list_vodb):\n        i = list_vodb[idx_zd5s]\n        l = i + 1\n        r = n - 1\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < 0 ) :\n                l += 1\n            else :\n                r -= 1\n        idx_zd5s = idx_zd5s + 1\n    if ( found == False ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        print ( \" No Triplet Found\" )", "id": "For2While_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_126", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = { }\n    idx_42fx = 0\n    list_79b2 = range ( 0 , n )\n    while idx_42fx < len(list_79b2):\n        i = list_79b2[idx_42fx]\n        if ( arr [ i ] in count_map.keys ( ) ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n        idx_42fx = idx_42fx + 1\n    idx_3xqc = 0\n    list_oi47 = range ( 0 , n )\n    while idx_3xqc < len(list_oi47):\n        i = list_oi47[idx_3xqc]\n        if ( count_map [ arr [ i ] ] == k ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            return arr [ i ]\n        i += 1\n        idx_3xqc = idx_3xqc + 1\n    return - 1", "id": "For2While_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_127", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def first ( str ) :\n    idx_jflz = 0\n    list_zckf = range ( 0 , len ( str ) )\n    while idx_jflz < len(list_zckf):\n        i = list_zckf[idx_jflz]\n        if ( str [ i ].istitle ( ) ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            return str [ i ]\n        idx_jflz = idx_jflz + 1\n    return 0", "id": "For2While_sample_from_FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_to_128", "old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE"}
{"code": "def floorSearch ( arr , n , x ) :\n    if x >= arr [ n - 1 ] and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))): return n - 1\n    if x < arr [ 0 ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))): return - 1\n    idx_egft = 0\n    list_dl1p = range ( 1, n )\n    while idx_egft < len(list_dl1p):\n        i = list_dl1p[idx_egft]\n        if arr [ i ] > x and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))): return i - 1\n        idx_egft = idx_egft + 1\n    return - 1", "id": "For2While_sample_from_FLOOR_IN_A_SORTED_ARRAY_to_129", "old_id": "FLOOR_IN_A_SORTED_ARRAY"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    idx_7nas = 0\n    list_g506 = range ( n + 1 )\n    while idx_7nas < len(list_g506):\n        i = list_g506[idx_7nas]\n        if ( i == n or seq [ i ] == 'I' ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            idx_ips9 = 0\n            list_siyb = range ( i - 1 , - 2 , - 1 )\n            while idx_ips9 < len(list_siyb):\n                j = list_siyb[idx_ips9]\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n                idx_ips9 = idx_ips9 + 1\n        idx_7nas = idx_7nas + 1\n    return result", "id": "For2While_sample_from_FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1_to_130", "old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    idx_olhc = 0\n    list_c7u3 = range ( n )\n    while idx_olhc < len(list_c7u3):\n        i = list_c7u3[idx_olhc]\n        if arr [ i ] in Hash.keys ( ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n        idx_olhc = idx_olhc + 1\n    max_count = 0\n    res = - 1\n    idx_8dnq = 0\n    list_jvrx = Hash\n    while idx_8dnq < len(list_jvrx):\n        i = list_jvrx[idx_8dnq]\n        if ( max_count < Hash [ i ] ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            res = i\n            max_count = Hash [ i ]\n        idx_8dnq = idx_8dnq + 1\n    return res", "id": "For2While_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_131", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    idx_w4l2 = 0\n    list_m3hl = range ( n + 1 )\n    while idx_w4l2 < len(list_m3hl):\n        i = list_m3hl[idx_w4l2]\n        if ( i <= 2 ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n        idx_w4l2 = idx_w4l2 + 1\n    return dp [ n ]", "id": "For2While_sample_from_FRIENDS_PAIRING_PROBLEM_to_132", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0\n    if ( n <= 2 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return n\n    idx_czqb = 0\n    list_vm6p = range ( 3 , n + 1 )\n    while idx_czqb < len(list_vm6p):\n        i = list_vm6p[idx_czqb]\n        c = b + ( i - 1 ) * a\n        a = b\n        b = c\n        idx_czqb = idx_czqb + 1\n    return c", "id": "For2While_sample_from_FRIENDS_PAIRING_PROBLEM_2_to_133", "old_id": "FRIENDS_PAIRING_PROBLEM_2"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= 9 ) and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return \"-1\"\n    result = [ None ] * ( n + 1 )\n    count = 1\n    idx_01we = 0\n    list_woea = range ( n + 1 )\n    while idx_01we < len(list_woea):\n        i = list_woea[idx_01we]\n        if ( i == n or seq [ i ] == 'I' ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            idx_lc3r = 0\n            list_4k6a = range ( i - 1 , - 2 , - 1 )\n            while idx_lc3r < len(list_4k6a):\n                j = list_4k6a[idx_lc3r]\n                result [ j + 1 ] = int ( '0' + str ( count ) )\n                count += 1\n                if ( j >= 0 and seq [ j ] == 'I' ) :\n                    break\n                idx_lc3r = idx_lc3r + 1\n        idx_01we = idx_01we + 1\n    return \"\".join(str(i) for i in result)", "id": "For2While_sample_from_GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1_to_134", "old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = len ( str )\n    arr = [ 0 ] * l\n    idx_zwif = 0\n    list_38kr = range ( 0 , l )\n    while idx_zwif < len(list_38kr):\n        i = list_38kr[idx_zwif]\n        idx_c4ne = 0\n        list_vk35 = range ( i , l )\n        while idx_c4ne < len(list_vk35):\n            j = list_vk35[idx_c4ne]\n            idx_rtwf = 0\n            list_ol0f = range ( j , l )\n            while idx_rtwf < len(list_ol0f):\n                k = list_ol0f[idx_rtwf]\n                if ( arr [ i ] % 8 == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                    return True\n                elif ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 and i != j ) :\n                    return True\n                elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 and i != j and j != k and i != k ) :\n                    return True\n                idx_rtwf = idx_rtwf + 1\n            idx_c4ne = idx_c4ne + 1\n        idx_zwif = idx_zwif + 1\n    return False", "id": "For2While_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_135", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    idx_a0lm = 0\n    list_059k = range ( 1 , n + 1 )\n    while idx_a0lm < len(list_059k):\n        i = list_059k[idx_a0lm]\n        arr [ i ] = int ( str [ i - 1 ] )\n        idx_a0lm = idx_a0lm + 1\n    idx_2qb9 = 0\n    list_p3af = range ( 1 , n + 1 )\n    while idx_2qb9 < len(list_p3af):\n        i = list_p3af[idx_2qb9]\n        dp [ i ] [ arr [ i ] % 8 ] = 1\n        idx_rvew = 0\n        list_zxa3 = range ( 8 )\n        while idx_rvew < len(list_zxa3):\n            j = list_zxa3[idx_rvew]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n            idx_rvew = idx_rvew + 1\n        idx_2qb9 = idx_2qb9 + 1\n    idx_dh1v = 0\n    list_3t6w = range ( 1 , n + 1 )\n    while idx_dh1v < len(list_3t6w):\n        i = list_3t6w[idx_dh1v]\n        if ( dp [ i ] [ 0 ] == 1 ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            return True\n        idx_dh1v = idx_dh1v + 1\n    return False", "id": "For2While_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1_to_136", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0\n    idx_dp95 = 0\n    list_4ihy = range ( 1 , m + 1 )\n    while idx_dp95 < len(list_4ihy):\n        i = list_4ihy[idx_dp95]\n        if ( nxtbb < n ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] )\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n        idx_dp95 = idx_dp95 + 1\n    return maxRev [ m ]", "id": "For2While_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_137", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def search ( arr , x ) :\n    n = len ( arr )\n    idx_08ai = 0\n    list_eg06 = range ( 0 , n )\n    while idx_08ai < len(list_eg06):\n        j = list_eg06[idx_08ai]\n        if ( x == arr [ j ] ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return j\n        idx_08ai = idx_08ai + 1\n    return - 1", "id": "For2While_sample_from_HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING_to_138", "old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING"}
{"code": "def isHeap ( arr , n ) :\n    idx_5rej = 0\n    list_1cgx = range ( int ( ( n - 2 ) / 2 ) + 1 )\n    while idx_5rej < len(list_1cgx):\n        i = list_1cgx[idx_5rej]\n        if arr [ 2 * i + 1 ] > arr [ i ] and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return False\n        if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            return False\n        idx_5rej = idx_5rej + 1\n    return True", "id": "For2While_sample_from_HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1_to_139", "old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1"}
{"code": "def search ( arr , n , x ) :\n    idx_divw = 0\n    list_gau4 = range ( 0 , n )\n    while idx_divw < len(list_gau4):\n        j = list_gau4[idx_divw]\n        if ( x == arr [ j ] ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            return j\n        idx_divw = idx_divw + 1\n    return - 1", "id": "For2While_sample_from_HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS_to_140", "old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS"}
{"code": "def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    idx_px8f = 0\n    list_24kl = arr\n    while idx_px8f < len(list_24kl):\n        i = list_24kl[idx_px8f]\n        if ( i < 0 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n        idx_px8f = idx_px8f + 1\n    idx_x6b2 = 0\n    list_e5rt = arr\n    while idx_x6b2 < len(list_e5rt):\n        i = list_e5rt[idx_x6b2]\n        if i in hash.keys ( ) and hash [ i ] > 0 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            return i\n        idx_x6b2 = idx_x6b2 + 1\n    return - 1", "id": "For2While_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_141", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( arr [ 0 ] )\n    idx_rkc4 = 0\n    list_0sap = range ( 2 , n + 1 )\n    while idx_rkc4 < len(list_0sap):\n        i = list_0sap[idx_rkc4]\n        sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )\n        idx_rkc4 = idx_rkc4 + 1\n    Q = [ ]\n    heapq.heapify ( Q )\n    idx_n5bx = 0\n    list_3pew = range ( 1 , n + 1 )\n    while idx_n5bx < len(list_3pew):\n        i = list_3pew[idx_n5bx]\n        idx_zjkh = 0\n        list_c47u = range ( i , n + 1 )\n        while idx_zjkh < len(list_c47u):\n            j = list_c47u[idx_zjkh]\n            x = sum [ j ] - sum [ i - 1 ]\n            if len ( Q ) < k and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                heapq.heappush ( Q , x )\n            else :\n                if Q [ 0 ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n            idx_zjkh = idx_zjkh + 1\n        idx_n5bx = idx_n5bx + 1\n    return Q [ 0 ]", "id": "For2While_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_142", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def find ( a , b , k , n1 , n2 ) :\n    s = set ( )\n    idx_epok = 0\n    list_8s7t = range ( n2 )\n    while idx_epok < len(list_8s7t):\n        i = list_8s7t[idx_epok]\n        s.add ( b [ i ] )\n        idx_epok = idx_epok + 1\n    missing = 0\n    idx_ewj7 = 0\n    list_076b = range ( n1 )\n    while idx_ewj7 < len(list_076b):\n        i = list_076b[idx_ewj7]\n        if a [ i ] not in s and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            missing += 1\n        if missing == k and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            return a [ i ]\n        idx_ewj7 = idx_ewj7 + 1\n    return - 1", "id": "For2While_sample_from_K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE_to_143", "old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE"}
{"code": "def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    idx_hufr = 0\n    list_xzd8 = range ( 0 , n - 1 )\n    while idx_hufr < len(list_xzd8):\n        i = list_xzd8[idx_hufr]\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        idx_bsvx = 0\n        list_fgps = range ( i + 1 , n )\n        while idx_bsvx < len(list_fgps):\n            j = list_fgps[idx_bsvx]\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                maxsize = j - i + 1\n                startindex = i\n            idx_bsvx = idx_bsvx + 1\n        idx_hufr = idx_hufr + 1\n    if ( maxsize == - 1 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        print ( \"No such subarray\" )\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 )\n    return maxsize", "id": "For2While_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_144", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = { }\n    curr_sum = 0\n    max_len = 0\n    ending_index = - 1\n    idx_3w27 = 0\n    list_tesk = range ( 0 , n )\n    while idx_3w27 < len(list_tesk):\n        i = list_tesk[idx_3w27]\n        if ( arr [ i ] == 0 ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            arr [ i ] = - 1\n        else :\n            arr [ i ] = 1\n        idx_3w27 = idx_3w27 + 1\n    idx_jdrm = 0\n    list_9oct = range ( 0 , n )\n    while idx_jdrm < len(list_9oct):\n        i = list_9oct[idx_jdrm]\n        curr_sum = curr_sum + arr [ i ]\n        if ( curr_sum == 0 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            max_len = i + 1\n            ending_index = i\n        if ( curr_sum + n ) in hash_map and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = i - hash_map [ curr_sum + n ]\n                ending_index = i\n        else :\n            hash_map[curr_sum + n] = i\n        idx_jdrm = idx_jdrm + 1\n    idx_35a1 = 0\n    list_hwap = range ( 0 , n )\n    while idx_35a1 < len(list_hwap):\n        i = list_hwap[idx_35a1]\n        if ( arr [ i ] == - 1 ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            arr [ i ] = 0\n        else :\n            arr [ i ] = 1\n        idx_35a1 = idx_35a1 + 1\n    print ( ending_index - max_len + 1 , end = \" \" )\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    return max_len", "id": "For2While_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_145", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    idx_x5o1 = 0\n    list_vndu = range ( 2 , maxele + 1 )\n    while idx_x5o1 < len(list_vndu):\n        i = list_vndu[idx_x5o1]\n        count = 0\n        idx_qs54 = 0\n        list_yrhx = range ( n )\n        while idx_qs54 < len(list_yrhx):\n            j = list_yrhx[idx_qs54]\n            if ( arr [ j ] % i == 0 ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                count += 1\n            idx_qs54 = idx_qs54 + 1\n        ans = max ( ans , count )\n        idx_x5o1 = idx_x5o1 + 1\n    return ans", "id": "For2While_sample_from_LARGEST_SUBSEQUENCE_GCD_GREATER_1_to_146", "old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1"}
{"code": "def longestSubsequenceCommonSegment ( k , s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    lcs = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    cnt = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    idx_36q4 = 0\n    list_z8m1 = range ( 1 , n + 1 )\n    while idx_36q4 < len(list_z8m1):\n        i = list_z8m1[idx_36q4]\n        idx_3mk6 = 0\n        list_kvul = range ( 1 , m + 1 )\n        while idx_3mk6 < len(list_kvul):\n            j = list_kvul[idx_3mk6]\n            lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs [ i ] [ j - 1 ] )\n            if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n                cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1\n            if ( cnt [ i ] [ j ] >= k ) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n                idx_2il9 = 0\n                list_xprh = range ( k , cnt [ i ] [ j ] + 1 )\n                while idx_2il9 < len(list_xprh):\n                    a = list_xprh[idx_2il9]\n                    lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a )\n                    idx_2il9 = idx_2il9 + 1\n            idx_3mk6 = idx_3mk6 + 1\n        idx_36q4 = idx_36q4 + 1\n    return lcs [ n ] [ m ]", "id": "For2While_sample_from_LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K_to_147", "old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K"}
{"code": "def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    idx_1uom = 0\n    list_ws2f = range ( n - 1 )\n    while idx_1uom < len(list_ws2f):\n        i = list_ws2f[idx_1uom]\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            dp [ i ] [ i + 1 ] = 2\n        idx_1uom = idx_1uom + 1\n    idx_fn73 = 0\n    list_ieyr = range ( 2 , n )\n    while idx_fn73 < len(list_ieyr):\n        l = list_ieyr[idx_fn73]\n        i = - 1\n        idx_guwz = 0\n        list_j4my = range ( l , n )\n        while idx_guwz < len(list_j4my):\n            j = list_j4my[idx_guwz]\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            idx_mfi1 = 0\n            list_ij70 = range ( i , j )\n            while idx_mfi1 < len(list_ij70):\n                k = list_ij70[idx_mfi1]\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n                idx_mfi1 = idx_mfi1 + 1\n            idx_guwz = idx_guwz + 1\n        idx_fn73 = idx_fn73 + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "For2While_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_to_148", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = 0\n    invalidCloseBraces = 0\n    idx_58tj = 0\n    list_smqa = range ( n )\n    while idx_58tj < len(list_smqa):\n        i = list_smqa[idx_58tj]\n        if ( s [ i ] == '(' ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            invalidOpenBraces += 1\n        else :\n            if ( invalidOpenBraces == 0 ) :\n                invalidCloseBraces += 1\n            else :\n                invalidOpenBraces -= 1\n        idx_58tj = idx_58tj + 1\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "For2While_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_149", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    idx_472l = 0\n    list_bg40 = range ( n )\n    while idx_472l < len(list_bg40):\n        i = list_bg40[idx_472l]\n        L [ i ] [ n - 1 ] = 2\n        idx_472l = idx_472l + 1\n    idx_tp6s = 0\n    list_8cqy = range ( n - 2 , 0 , - 1 )\n    while idx_tp6s < len(list_8cqy):\n        j = list_8cqy[idx_tp6s]\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n        while ( i >= 0 ) :\n            L [ i ] [ j ] = 2\n            i -= 1\n        idx_tp6s = idx_tp6s + 1\n    return llap", "id": "For2While_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_150", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def subsequence ( s , t , n , k ) :\n    last = 0\n    cnt = 0\n    new_last = 0\n    size = 0\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    idx_qtb6 = 0\n    list_tavb = string\n    while idx_qtb6 < len(list_tavb):\n        ch = list_tavb[idx_qtb6]\n        cnt = 0\n        idx_mtx8 = 0\n        list_tuab = range ( last , n )\n        while idx_mtx8 < len(list_tuab):\n            i = list_tuab[idx_mtx8]\n            if s [ i ] == ch and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                cnt += 1\n            idx_mtx8 = idx_mtx8 + 1\n        if cnt >= k and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            idx_rpey = 0\n            list_50xq = range ( last , n )\n            while idx_rpey < len(list_50xq):\n                i = list_50xq[idx_rpey]\n                if s [ i ] == ch :\n                    t [ size ] = ch\n                    new_last = i\n                    size += 1\n                idx_rpey = idx_rpey + 1\n            last = new_last\n        idx_qtb6 = idx_qtb6 + 1\n    t[size] = '\\0';", "id": "For2While_sample_from_LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES_to_151", "old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES"}
{"code": "def minimizeWithKSwaps ( arr , n , k ) :\n    idx_6cxe = 0\n    list_k2cf = range ( n - 1 )\n    while idx_6cxe < len(list_k2cf):\n        i = list_k2cf[idx_6cxe]\n        pos = i\n        idx_h0mz = 0\n        list_1vq5 = range ( i + 1 , n )\n        while idx_h0mz < len(list_1vq5):\n            j = list_1vq5[idx_h0mz]\n            if ( j - i > k ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                break\n            if ( arr [ j ] < arr [ pos ] ) and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n                pos = j\n            idx_h0mz = idx_h0mz + 1\n        idx_js7m = 0\n        list_dfnl = range ( pos , i , - 1 )\n        while idx_js7m < len(list_dfnl):\n            j = list_dfnl[idx_js7m]\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n            idx_js7m = idx_js7m + 1\n        k -= pos - i\n        idx_6cxe = idx_6cxe + 1", "id": "For2While_sample_from_LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS_to_152", "old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = [ [ 0 for k in range ( n + 1 ) ] for l in range ( m + 1 ) ]\n    result = 0\n    idx_as96 = 0\n    list_zs0r = range ( m + 1 )\n    while idx_as96 < len(list_zs0r):\n        i = list_zs0r[idx_as96]\n        idx_1azi = 0\n        list_x0ku = range ( n + 1 )\n        while idx_1azi < len(list_x0ku):\n            j = list_x0ku[idx_1azi]\n            if ( i == 0 or j == 0 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                LCSuff [ i ] [ j ] = 0\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1\n                result = max ( result , LCSuff [ i ] [ j ] )\n            else :\n                LCSuff [ i ] [ j ] = 0\n            idx_1azi = idx_1azi + 1\n        idx_as96 = idx_as96 + 1\n    return result", "id": "For2While_sample_from_LONGEST_COMMON_SUBSTRING_to_153", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def findLength ( str ) :\n    n = len ( str )\n    maxlen = 0\n    idx_vpoh = 0\n    list_yav0 = range ( 0 , n )\n    while idx_vpoh < len(list_yav0):\n        i = list_yav0[idx_vpoh]\n        idx_xt9d = 0\n        list_u0tb = range ( i + 1 , n , 2 )\n        while idx_xt9d < len(list_u0tb):\n            j = list_u0tb[idx_xt9d]\n            length = j - i + 1\n            leftsum = 0\n            rightsum = 0\n            idx_c8tz = 0\n            list_y91q = range ( 0 , int ( length / 2 ) )\n            while idx_c8tz < len(list_y91q):\n                k = list_y91q[idx_c8tz]\n                leftsum += ( int ( str [ i + k ] ) - int ( '0' ) )\n                rightsum += ( int ( str [ i + k + int ( length / 2 ) ] ) - int ( '0' ) )\n                idx_c8tz = idx_c8tz + 1\n            if ( leftsum == rightsum and maxlen < length ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                maxlen = length\n            idx_xt9d = idx_xt9d + 1\n        idx_vpoh = idx_vpoh + 1\n    return maxlen", "id": "For2While_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_to_154", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF"}
{"code": "def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    idx_veua = 0\n    list_05s6 = range ( 0 , n )\n    while idx_veua < len(list_05s6):\n        i = list_05s6[idx_veua]\n        Sum [ i ] [ i ] = int ( string [ i ] )\n        idx_veua = idx_veua + 1\n    idx_l7ym = 0\n    list_kzco = range ( 2 , n + 1 )\n    while idx_l7ym < len(list_kzco):\n        length = list_kzco[idx_l7ym]\n        idx_dqug = 0\n        list_9ysr = range ( 0 , n - length + 1 )\n        while idx_dqug < len(list_9ysr):\n            i = list_9ysr[idx_dqug]\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n                maxlen = length\n            idx_dqug = idx_dqug + 1\n        idx_l7ym = idx_l7ym + 1\n    return maxlen", "id": "For2While_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1_to_155", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1"}
{"code": "def longOddEvenIncSeq ( arr , n ) :\n    lioes = list ( )\n    maxLen = 0\n    idx_exah = 0\n    list_bje5 = range ( n )\n    while idx_exah < len(list_bje5):\n        i = list_bje5[idx_exah]\n        lioes.append ( 1 )\n        idx_exah = idx_exah + 1\n    i = 1\n    idx_l47s = 0\n    list_2fte = range ( n )\n    while idx_l47s < len(list_2fte):\n        i = list_2fte[idx_l47s]\n        idx_jrxn = 0\n        list_s3de = range ( i )\n        while idx_jrxn < len(list_s3de):\n            j = list_s3de[idx_jrxn]\n            if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr [ j ] ) % 2 != 0 and lioes [ i ] < lioes [ j ] + 1 ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n                lioes [ i ] = lioes [ j ] + 1\n            idx_jrxn = idx_jrxn + 1\n        idx_l47s = idx_l47s + 1\n    idx_39dj = 0\n    list_9k85 = range ( n )\n    while idx_39dj < len(list_9k85):\n        i = list_9k85[idx_39dj]\n        if maxLen < lioes [ i ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            maxLen = lioes [ i ]\n        idx_39dj = idx_39dj + 1\n    return maxLen", "id": "For2While_sample_from_LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE_to_156", "old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE"}
{"code": "def lis ( arr , n ) :\n    lis = [ 1 ] * n\n    idx_imbw = 0\n    list_b0lp = range ( 1 , n )\n    while idx_imbw < len(list_b0lp):\n        i = list_b0lp[idx_imbw]\n        idx_khce = 0\n        list_b927 = range ( 0 , i )\n        while idx_khce < len(list_b927):\n            j = list_b927[idx_khce]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                lis [ i ] = lis [ j ] + 1\n            idx_khce = idx_khce + 1\n        idx_imbw = idx_imbw + 1\n    maximum = 0\n    idx_v4kz = 0\n    list_oy3j = range ( n )\n    while idx_v4kz < len(list_oy3j):\n        i = list_oy3j[idx_v4kz]\n        maximum = max ( maximum , lis [ i ] )\n        idx_v4kz = idx_v4kz + 1\n    return maximum", "id": "For2While_sample_from_LONGEST_INCREASING_SUBSEQUENCE_1_to_157", "old_id": "LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_h3g0 = 0\n    list_m8ku = range ( 1 , n + 1 )\n    while idx_h3g0 < len(list_m8ku):\n        i = list_m8ku[idx_h3g0]\n        idx_yxm9 = 0\n        list_qer1 = range ( 1 , n + 1 )\n        while idx_yxm9 < len(list_qer1):\n            j = list_qer1[idx_yxm9]\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_yxm9 = idx_yxm9 + 1\n        idx_h3g0 = idx_h3g0 + 1\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res", "id": "For2While_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_158", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    idx_6gmi = 0\n    list_snex = range ( 1 , n + 1 )\n    while idx_6gmi < len(list_snex):\n        i = list_snex[idx_6gmi]\n        idx_y8br = 0\n        list_8yzn = range ( 1 , n + 1 )\n        while idx_y8br < len(list_8yzn):\n            j = list_8yzn[idx_y8br]\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_y8br = idx_y8br + 1\n        idx_6gmi = idx_6gmi + 1\n    return dp [ n ] [ n ]", "id": "For2While_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_159", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = { }\n    sum = 0\n    maxLen = 0\n    idx_k9se = 0\n    list_ycze = range ( n )\n    while idx_k9se < len(list_ycze):\n        i = list_ycze[idx_k9se]\n        if arr [ i ] == 0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n        idx_k9se = idx_k9se + 1\n    return maxLen", "id": "For2While_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_160", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = { }\n    mod_arr = [ 0 for i in range ( n ) ]\n    max = 0\n    curr_sum = 0\n    idx_9xsy = 0\n    list_c348 = range ( n )\n    while idx_9xsy < len(list_c348):\n        i = list_c348[idx_9xsy]\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k\n        idx_9xsy = idx_9xsy + 1\n    idx_gnua = 0\n    list_zso3 = range ( n )\n    while idx_gnua < len(list_zso3):\n        i = list_zso3[idx_gnua]\n        if ( mod_arr [ i ] == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            max = i + 1\n        elif ( mod_arr [ i ] in um ) :\n            um [ mod_arr [ i ] ] = i\n        else :\n            if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                max = i - um [ mod_arr [ i ] ]\n        idx_gnua = idx_gnua + 1\n    return max", "id": "For2While_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_161", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    idx_vt90 = 0\n    list_9x2f = range ( n )\n    while idx_vt90 < len(list_9x2f):\n        i = list_9x2f[idx_vt90]\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            longLen = um [ arr [ i ] ]\n        idx_vt90 = idx_vt90 + 1\n    return longLen", "id": "For2While_sample_from_LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2_to_162", "old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2"}
{"code": "def longestSubseqWithDiffOne ( arr , n ) :\n    dp = [ 1 for i in range ( n ) ]\n    idx_l7te = 0\n    list_kgsp = range ( n )\n    while idx_l7te < len(list_kgsp):\n        i = list_kgsp[idx_l7te]\n        idx_dlr3 = 0\n        list_y30h = range ( i )\n        while idx_dlr3 < len(list_y30h):\n            j = list_y30h[idx_dlr3]\n            if ( ( arr [ i ] == arr [ j ] + 1 ) or ( arr [ i ] == arr [ j ] - 1 ) ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 )\n            idx_dlr3 = idx_dlr3 + 1\n        idx_l7te = idx_l7te + 1\n    result = 1\n    idx_gvmk = 0\n    list_ujly = range ( n )\n    while idx_gvmk < len(list_ujly):\n        i = list_ujly[idx_gvmk]\n        if ( result < dp [ i ] ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            result = dp [ i ]\n        idx_gvmk = idx_gvmk + 1\n    return result", "id": "For2While_sample_from_LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE_to_163", "old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE"}
{"code": "def to_upper(in_list):\n    idx_0w6p = 0\n    list_sawk = range(len(in_list))\n    while idx_0w6p < len(list_sawk):\n        i = list_sawk[idx_0w6p]\n        if 'a' <= in_list[i] <= 'z' and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            in_list[i] = chr(ord(in_list[i]) - ord('a') + ord('A'))\n        idx_0w6p = idx_0w6p + 1\n    return ''.join(in_list)", "id": "For2While_sample_from_LOWER_CASE_UPPER_CASE_INTERESTING_FACT_to_164", "old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT"}
{"code": "def checkMarkov ( m ) :\n    idx_itk4 = 0\n    list_revb = range ( 0 , len ( m ) )\n    while idx_itk4 < len(list_revb):\n        i = list_revb[idx_itk4]\n        sm = 0\n        idx_uap2 = 0\n        list_hqu2 = range ( 0 , len ( m [ i ] ) )\n        while idx_uap2 < len(list_hqu2):\n            j = list_hqu2[idx_uap2]\n            sm = sm + m [ i ] [ j ]\n            idx_uap2 = idx_uap2 + 1\n        if ( sm != 1 ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n            return False\n        idx_itk4 = idx_itk4 + 1\n    return True", "id": "For2While_sample_from_MARKOV_MATRIX_to_165", "old_id": "MARKOV_MATRIX"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = - 1\n    val = - 1\n    dp = [ [ 0 for i in range ( maxLimit + 1 ) ] for j in range ( n ) ]\n    idx_urv9 = 0\n    list_9ezp = range ( n )\n    while idx_urv9 < len(list_9ezp):\n        ind = list_9ezp[idx_urv9]\n        idx_rxpi = 0\n        list_ke8s = range ( maxLimit + 1 )\n        while idx_rxpi < len(list_ke8s):\n            val = list_ke8s[idx_rxpi]\n            if ( ind == 0 ) and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = 1\n                else :\n                    dp [ ind ] [ val ] = 0\n            else :\n                if ( val - arr [ ind ] >= 0 and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 or dp [ ind - 1 ] [ val + arr [ ind ] ] == 1 ) :\n                        dp [ ind ] [ val ] = 1\n                elif ( val - arr [ ind ] >= 0 ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = 0\n            idx_rxpi = idx_rxpi + 1\n        idx_urv9 = idx_urv9 + 1\n    idx_56hv = 0\n    list_z1wi = range ( maxLimit , - 1 , - 1 )\n    while idx_56hv < len(list_z1wi):\n        val = list_z1wi[idx_56hv]\n        if ( dp [ n - 1 ] [ val ] == 1 ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            return val\n        idx_56hv = idx_56hv + 1\n    return - 1", "id": "For2While_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_166", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def findMaxValue ( arr , n ) :\n    if n < 4 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    idx_8tjl = 0\n    list_svl4 = range ( n - 1 , - 1 , - 1 )\n    while idx_8tjl < len(list_svl4):\n        i = list_svl4[idx_8tjl]\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n        idx_8tjl = idx_8tjl + 1\n    idx_oilz = 0\n    list_m46c = range ( n - 2 , - 1 , - 1 )\n    while idx_oilz < len(list_m46c):\n        i = list_m46c[idx_oilz]\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n        idx_oilz = idx_oilz + 1\n    idx_qed5 = 0\n    list_4d8f = range ( n - 3 , - 1 , - 1 )\n    while idx_qed5 < len(list_4d8f):\n        i = list_4d8f[idx_qed5]\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n        idx_qed5 = idx_qed5 + 1\n    idx_yzx1 = 0\n    list_ukwd = range ( n - 4 , - 1 , - 1 )\n    while idx_yzx1 < len(list_ukwd):\n        i = list_ukwd[idx_yzx1]\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n        idx_yzx1 = idx_yzx1 + 1\n    return table4 [ 0 ]", "id": "For2While_sample_from_MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L_to_167", "old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_a9fu = 0\n    list_epb7 = range ( n + 1 )\n    while idx_a9fu < len(list_epb7):\n        i = list_epb7[idx_a9fu]\n        idx_gcub = 0\n        list_m5bq = range ( min ( i , n ) + 1 )\n        while idx_gcub < len(list_m5bq):\n            j = list_m5bq[idx_gcub]\n            if ( j == 0 or j == i ) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            idx_gcub = idx_gcub + 1\n        idx_a9fu = idx_a9fu + 1\n    maxvalue = 0\n    idx_caf1 = 0\n    list_tslz = range ( n + 1 )\n    while idx_caf1 < len(list_tslz):\n        i = list_tslz[idx_caf1]\n        maxvalue = max ( maxvalue , C [ n ] [ i ] )\n        idx_caf1 = idx_caf1 + 1\n    return maxvalue", "id": "For2While_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_168", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def findLongestConseqSubseq ( arr , n ) :\n    S = set ( )\n    idx_dl4y = 0\n    list_ru5i = range ( n )\n    while idx_dl4y < len(list_ru5i):\n        i = list_ru5i[idx_dl4y]\n        S.add ( arr [ i ] )\n        idx_dl4y = idx_dl4y + 1\n    ans = 0\n    idx_0u75 = 0\n    list_a42x = range ( n )\n    while idx_0u75 < len(list_a42x):\n        i = list_a42x[idx_0u75]\n        if S.__contains__ ( arr [ i ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            j = arr [ i ]\n            while ( S.__contains__ ( j ) ) :\n                j += 1\n            ans = max ( ans , j - arr [ i ] )\n        idx_0u75 = idx_0u75 + 1\n    return ans", "id": "For2While_sample_from_MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY_to_169", "old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY"}
{"code": "def maxRepeating ( str ) :\n    n = len ( str )\n    count = 0\n    res = str [ 0 ]\n    cur_count = 1\n    idx_s6m5 = 0\n    list_bhfg = range ( n )\n    while idx_s6m5 < len(list_bhfg):\n        i = list_bhfg[idx_s6m5]\n        if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            cur_count += 1\n        else :\n            if cur_count > count :\n                count = cur_count\n                res = str [ i ]\n            cur_count = 1\n        idx_s6m5 = idx_s6m5 + 1\n    return res", "id": "For2While_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_170", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    idx_hpds = 0\n    list_onk4 = range ( n )\n    while idx_hpds < len(list_onk4):\n        i = list_onk4[idx_hpds]\n        freq [ arr [ i ] ] += 1\n        idx_hpds = idx_hpds + 1\n    ans = 0\n    idx_wmrf = 0\n    list_asu4 = range ( n )\n    while idx_wmrf < len(list_asu4):\n        i = list_asu4[idx_wmrf]\n        idx_078i = 0\n        list_y4lc = range ( n )\n        while idx_078i < len(list_y4lc):\n            j = list_y4lc[idx_078i]\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n            idx_078i = idx_078i + 1\n        idx_wmrf = idx_wmrf + 1\n    return ans", "id": "For2While_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_171", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxRowDiff ( mat , m , n ) :\n    rowSum = [ 0 ] * m\n    idx_hvby = 0\n    list_dy04 = range ( 0 , m )\n    while idx_hvby < len(list_dy04):\n        i = list_dy04[idx_hvby]\n        sum = 0\n        idx_4e5t = 0\n        list_fv6a = range ( 0 , n )\n        while idx_4e5t < len(list_fv6a):\n            j = list_fv6a[idx_4e5t]\n            sum += mat [ i ] [ j ]\n            idx_4e5t = idx_4e5t + 1\n        rowSum [ i ] = sum\n        idx_hvby = idx_hvby + 1\n    max_diff = rowSum [ 1 ] - rowSum [ 0 ]\n    min_element = rowSum [ 0 ]\n    idx_uvs9 = 0\n    list_trw0 = range ( 1 , m )\n    while idx_uvs9 < len(list_trw0):\n        i = list_trw0[idx_uvs9]\n        if ( rowSum [ i ] - min_element > max_diff ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            max_diff = rowSum [ i ] - min_element\n        if ( rowSum [ i ] < min_element ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            min_element = rowSum [ i ]\n        idx_uvs9 = idx_uvs9 + 1\n    return max_diff", "id": "For2While_sample_from_MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX_to_172", "old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX"}
{"code": "def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    idx_a45b = 0\n    list_zx13 = range ( n )\n    while idx_a45b < len(list_zx13):\n        i = list_zx13[idx_a45b]\n        if arr [ i ] not in mp.keys ( ) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n        idx_a45b = idx_a45b + 1\n    return maxDict", "id": "For2While_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_173", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxPrefix ( s , t ) :\n    count = 0\n    idx_8649 = 0\n    list_z0in = range ( 0 , len ( t ) )\n    while idx_8649 < len(list_z0in):\n        i = list_z0in[idx_8649]\n        if ( count == len ( s ) ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            break\n        if ( t [ i ] == s [ count ] ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            count = count + 1\n        idx_8649 = idx_8649 + 1\n    return count", "id": "For2While_sample_from_MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER_to_174", "old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER"}
{"code": "def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    idx_0xua = 0\n    list_5fac = range ( n )\n    while idx_0xua < len(list_5fac):\n        i = list_5fac[idx_0xua]\n        mls.append ( 1 )\n        idx_0xua = idx_0xua + 1\n    idx_6g1i = 0\n    list_3rpu = range ( n )\n    while idx_6g1i < len(list_3rpu):\n        i = list_3rpu[idx_6g1i]\n        idx_ha7m = 0\n        list_tpn7 = range ( i )\n        while idx_ha7m < len(list_tpn7):\n            j = list_tpn7[idx_ha7m]\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n                mls [ i ] = mls [ j ] + 1\n            idx_ha7m = idx_ha7m + 1\n        idx_6g1i = idx_6g1i + 1\n    idx_vt4a = 0\n    list_74tw = range ( n )\n    while idx_vt4a < len(list_74tw):\n        i = list_74tw[idx_vt4a]\n        if ( max < mls [ i ] ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            max = mls [ i ]\n        idx_vt4a = idx_vt4a + 1\n    return max", "id": "For2While_sample_from_MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1_to_175", "old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , 0 , 0\n    sm = [ 0 ] * n\n    sm [ 0 ] = arr [ 0 ]\n    idx_bu5z = 0\n    list_8ygc = range ( 1 , n )\n    while idx_bu5z < len(list_8ygc):\n        i = list_8ygc[idx_bu5z]\n        sm [ i ] = sm [ i - 1 ] + arr [ i ]\n        idx_bu5z = idx_bu5z + 1\n    idx_d74w = 0\n    list_0thd = range ( n )\n    while idx_d74w < len(list_0thd):\n        i = list_0thd[idx_d74w]\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n        idx_d74w = idx_d74w + 1\n    return maxSum // k", "id": "For2While_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_176", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    idx_lzyr = 0\n    list_mjks = range ( 0 , n )\n    while idx_lzyr < len(list_mjks):\n        i = list_mjks[idx_lzyr]\n        if ( dp [ i ] != - 1 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n        idx_lzyr = idx_lzyr + 1\n    return dp [ n ]", "id": "For2While_sample_from_MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C_to_177", "old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C"}
{"code": "def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    idx_y8ti = 0\n    list_1kht = range ( 0 , n )\n    while idx_y8ti < len(list_1kht):\n        i = list_1kht[idx_y8ti]\n        isSingleOccurance = True\n        idx_bl8a = 0\n        list_o0zp = range ( i + 1 , n )\n        while idx_bl8a < len(list_o0zp):\n            j = list_o0zp[idx_bl8a]\n            if ( arr [ i ] == arr [ j ] ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n            idx_bl8a = idx_bl8a + 1\n        if ( isSingleOccurance == True ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n        idx_y8ti = idx_y8ti + 1\n    return abs ( SubsetSum_1 - SubsetSum_2 )", "id": "For2While_sample_from_MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_to_178", "old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY"}
{"code": "def lis ( arr , n ) :\n    mpis = [ 0 ] * ( n )\n    idx_pk0n = 0\n    list_ixo3 = range ( n )\n    while idx_pk0n < len(list_ixo3):\n        i = list_ixo3[idx_pk0n]\n        mpis [ i ] = arr [ i ]\n        idx_pk0n = idx_pk0n + 1\n    idx_vlat = 0\n    list_dgcl = range ( 1 , n )\n    while idx_vlat < len(list_dgcl):\n        i = list_dgcl[idx_vlat]\n        idx_rag1 = 0\n        list_u92m = range ( i )\n        while idx_rag1 < len(list_u92m):\n            j = list_u92m[idx_rag1]\n            if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                mpis [ i ] = mpis [ j ] * arr [ i ]\n            idx_rag1 = idx_rag1 + 1\n        idx_vlat = idx_vlat + 1\n    return max ( mpis )", "id": "For2While_sample_from_MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE_to_179", "old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE"}
{"code": "def maxProductSubset ( a , n ) :\n    if n == 1 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        return a [ 0 ]\n    max_neg = - 999999999999\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    idx_scri = 0\n    list_8kzv = range ( n )\n    while idx_scri < len(list_8kzv):\n        i = list_8kzv[idx_scri]\n        if a [ i ] == 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            count_zero += 1\n            continue\n        if a [ i ] < 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            count_neg += 1\n            max_neg = max ( max_neg , a [ i ] )\n        prod = prod + a [ i ]\n        idx_scri = idx_scri + 1\n    if count_zero == n and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return 0\n    if count_neg & 1 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        if ( count_neg == 1 and count_zero > 0 and count_zero + count_neg == n ) :\n            return 0\n        prod = int(prod / max_neg)\n    return prod", "id": "For2While_sample_from_MAXIMUM_PRODUCT_SUBSET_ARRAY_to_180", "old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    idx_q2ez = 0\n    list_x15y = range ( n - 2 , 0 , - 1 )\n    while idx_q2ez < len(list_x15y):\n        i = list_x15y[idx_q2ez]\n        if price [ i ] > max_price and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n        idx_q2ez = idx_q2ez + 1\n    min_price = price [ 0 ]\n    idx_f1sq = 0\n    list_9djk = range ( 1 , n )\n    while idx_f1sq < len(list_9djk):\n        i = list_9djk[idx_f1sq]\n        if price [ i ] < min_price and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n        idx_f1sq = idx_f1sq + 1\n    result = profit [ n - 1 ]\n    return result", "id": "For2While_sample_from_MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE_to_181", "old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE"}
{"code": "def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    idx_zfba = 0\n    list_jix8 = range ( n * k )\n    while idx_zfba < len(list_jix8):\n        i = list_jix8[idx_zfba]\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            max_ending_here = 0\n        idx_zfba = idx_zfba + 1\n    return max_so_far", "id": "For2While_sample_from_MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION_to_182", "old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION"}
{"code": "def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    idx_f93e = 0\n    list_mrfg = range ( 3 , n )\n    while idx_f93e < len(list_mrfg):\n        i = list_mrfg[idx_f93e]\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n        idx_f93e = idx_f93e + 1\n    return sum [ n - 1 ]", "id": "For2While_sample_from_MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_to_183", "old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    idx_9tle = 0\n    list_p80f = range ( 1 , n )\n    while idx_9tle < len(list_p80f):\n        i = list_p80f[idx_9tle]\n        idx_2tzd = 0\n        list_2nzb = range ( i )\n        while idx_2tzd < len(list_2nzb):\n            j = list_2nzb[idx_2tzd]\n            if ( arr [ j ] > arr [ i ] ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n            idx_2tzd = idx_2tzd + 1\n        idx_9tle = idx_9tle + 1\n    result = - 2147483648\n    idx_l4kv = 0\n    list_uzy9 = range ( n )\n    while idx_l4kv < len(list_uzy9):\n        i = list_uzy9[idx_l4kv]\n        if ( result < inc [ i ] ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            result = inc [ i ]\n        if ( result < dec [ i ] ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            result = dec [ i ]\n        idx_l4kv = idx_l4kv + 1\n    return result", "id": "For2While_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_184", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    idx_d74t = 0\n    list_4ljq = range ( 1 , n )\n    while idx_d74t < len(list_4ljq):\n        i = list_4ljq[idx_d74t]\n        if ( arr [ i ] > arr [ i - 1 ] ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n        idx_d74t = idx_d74t + 1\n    msds [ n - 1 ] = arr [ n - 1 ]\n    idx_3do0 = 0\n    list_3i8x = range ( n - 2 , - 1 , - 1 )\n    while idx_3do0 < len(list_3i8x):\n        i = list_3i8x[idx_3do0]\n        if ( arr [ i ] > arr [ i + 1 ] ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n        idx_3do0 = idx_3do0 + 1\n    idx_mw7p = 0\n    list_5h7u = range ( n )\n    while idx_mw7p < len(list_5h7u):\n        i = list_5h7u[idx_mw7p]\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n        idx_mw7p = idx_mw7p + 1\n    return max_sum", "id": "For2While_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_185", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    idx_375g = 0\n    list_rynw = range ( 1 , N )\n    while idx_375g < len(list_rynw):\n        i = list_rynw[idx_375g]\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] )\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] )\n        idx_375g = idx_375g + 1\n    return dp [ N - 1 ]", "id": "For2While_sample_from_MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_to_186", "old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = [ 0 for i in range ( N ) ]\n    MS [ N - 1 ] = arr [ N - 1 ]\n    idx_zxs5 = 0\n    list_57od = range ( N - 2 , - 1 , - 1 )\n    while idx_zxs5 < len(list_57od):\n        i = list_57od[idx_zxs5]\n        if ( i + k + 1 >= N ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] )\n        else :\n            MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] )\n        idx_zxs5 = idx_zxs5 + 1\n    return MS [ 0 ]", "id": "For2While_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_187", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    idx_e3sb = 0\n    list_wanl = range ( 0 , n )\n    while idx_e3sb < len(list_wanl):\n        i = list_wanl[idx_e3sb]\n        idx_hfqo = 0\n        list_pel0 = range ( i + 1 , n )\n        while idx_hfqo < len(list_pel0):\n            j = list_pel0[idx_hfqo]\n            idx_6r7k = 0\n            list_ibwl = range ( j + 1 , n )\n            while idx_6r7k < len(list_ibwl):\n                k = list_ibwl[idx_6r7k]\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n                idx_6r7k = idx_6r7k + 1\n            idx_hfqo = idx_hfqo + 1\n        idx_e3sb = idx_e3sb + 1\n    return sm", "id": "For2While_sample_from_MAXIMUM_TRIPLET_SUM_ARRAY_to_188", "old_id": "MAXIMUM_TRIPLET_SUM_ARRAY"}
{"code": "def maxCost ( mat , N ) :\n    dp = [ [ 0 for i in range ( N ) ] for j in range ( N ) ]\n    dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ]\n    idx_wkjy = 0\n    list_ft18 = range ( 1 , N )\n    while idx_wkjy < len(list_ft18):\n        i = list_ft18[idx_wkjy]\n        dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ]\n        idx_wkjy = idx_wkjy + 1\n    idx_su9g = 0\n    list_u1qh = range ( 1 , N )\n    while idx_su9g < len(list_u1qh):\n        i = list_u1qh[idx_su9g]\n        idx_fgrk = 0\n        list_6tv4 = range ( 1 , min ( i + 1 , N ) )\n        while idx_fgrk < len(list_6tv4):\n            j = list_6tv4[idx_fgrk]\n            dp [ i ] [ j ] = mat [ i ] [ j ] + \\\n                max ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            idx_fgrk = idx_fgrk + 1\n        idx_su9g = idx_su9g + 1\n    result = 0\n    idx_z0p2 = 0\n    list_qkf1 = range ( N )\n    while idx_z0p2 < len(list_qkf1):\n        i = list_qkf1[idx_z0p2]\n        if ( result < dp [ N - 1 ] [ i ] ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            result = dp [ N - 1 ] [ i ]\n        idx_z0p2 = idx_z0p2 + 1\n    return result", "id": "For2While_sample_from_MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX_to_189", "old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        return 0\n    arr.sort ( )\n    ans = arr [ n - 1 ] - arr [ 0 ]\n    small = arr [ 0 ] + k\n    big = arr [ n - 1 ] - k\n    if ( small > big ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        small , big = big , small\n    idx_xq27 = 0\n    list_8d4q = range ( 1 , n - 1 )\n    while idx_xq27 < len(list_8d4q):\n        i = list_8d4q[idx_xq27]\n        subtract = arr [ i ] - k\n        add = arr [ i ] + k\n        if ( subtract >= small or add <= big ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        if ( big - subtract <= add - small ) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            small = subtract\n        else :\n            big = add\n        idx_xq27 = idx_xq27 + 1\n    return min ( ans , big - small )", "id": "For2While_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_190", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    idx_jz13 = 0\n    list_rm8n = range ( n )\n    while idx_jz13 < len(list_rm8n):\n        i = list_rm8n[idx_jz13]\n        if ( cost [ i ] != - 1 ) and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n        idx_jz13 = idx_jz13 + 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    idx_elnv = 0\n    list_qt3n = range ( W + 1 )\n    while idx_elnv < len(list_qt3n):\n        i = list_qt3n[idx_elnv]\n        min_cost [ 0 ] [ i ] = INF\n        idx_elnv = idx_elnv + 1\n    idx_k9cg = 0\n    list_3wte = range ( 1 , n + 1 )\n    while idx_k9cg < len(list_3wte):\n        i = list_3wte[idx_k9cg]\n        min_cost [ i ] [ 0 ] = 0\n        idx_k9cg = idx_k9cg + 1\n    idx_4af9 = 0\n    list_w5n9 = range ( 1 , n + 1 )\n    while idx_4af9 < len(list_w5n9):\n        i = list_w5n9[idx_4af9]\n        idx_uiz0 = 0\n        list_yjna = range ( 1 , W + 1 )\n        while idx_uiz0 < len(list_yjna):\n            j = list_yjna[idx_uiz0]\n            if ( wt [ i - 1 ] > j ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n            idx_uiz0 = idx_uiz0 + 1\n        idx_4af9 = idx_4af9 + 1\n    if ( min_cost [ n ] [ W ] == INF ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]", "id": "For2While_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_191", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minimumflip ( mat , n ) :\n    flip = 0\n    idx_fn93 = 0\n    list_ub46 = range ( n )\n    while idx_fn93 < len(list_ub46):\n        i = list_ub46[idx_fn93]\n        idx_x2qp = 0\n        list_fbmg = range ( i )\n        while idx_x2qp < len(list_fbmg):\n            j = list_fbmg[idx_x2qp]\n            if mat [ i ] [ j ] != mat [ j ] [ i ] and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n                flip += 1\n            idx_x2qp = idx_x2qp + 1\n        idx_fn93 = idx_fn93 + 1\n    return flip", "id": "For2While_sample_from_MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1_to_192", "old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = 0\n    idx_rqc2 = 0\n    list_5gkh = range ( 0 , n )\n    while idx_rqc2 < len(list_5gkh):\n        i = list_5gkh[idx_rqc2]\n        if ( ( max1 - arr [ i ] ) % k != 0 ) and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            return - 1\n        else :\n            res += ( max1 - arr [ i ] ) / k\n        idx_rqc2 = idx_rqc2 + 1\n    return int ( res )", "id": "For2While_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_193", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    idx_u265 = 0\n    list_86u9 = range ( N )\n    while idx_u265 < len(list_86u9):\n        i = list_86u9[idx_u265]\n        lis [ i ] = 1\n        idx_u265 = idx_u265 + 1\n    idx_3ars = 0\n    list_v1d9 = range ( 1 , N )\n    while idx_3ars < len(list_v1d9):\n        i = list_v1d9[idx_3ars]\n        idx_ual1 = 0\n        list_i8m3 = range ( i )\n        while idx_ual1 < len(list_i8m3):\n            j = list_i8m3[idx_ual1]\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n                lis [ i ] = lis [ j ] + 1\n            idx_ual1 = idx_ual1 + 1\n        idx_3ars = idx_3ars + 1\n    max = 0\n    idx_9xa5 = 0\n    list_s621 = range ( N )\n    while idx_9xa5 < len(list_s621):\n        i = list_s621[idx_9xa5]\n        if ( max < lis [ i ] ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            max = lis [ i ]\n        idx_9xa5 = idx_9xa5 + 1\n    return ( N - max )", "id": "For2While_sample_from_MINIMUM_INSERTIONS_SORT_ARRAY_to_194", "old_id": "MINIMUM_INSERTIONS_SORT_ARRAY"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    if ( n == 0 ) or ( arr [ 0 ] == 0 ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        return float ( 'inf' )\n    jumps [ 0 ] = 0\n    idx_bauo = 0\n    list_sce9 = range ( 1 , n )\n    while idx_bauo < len(list_sce9):\n        i = list_sce9[idx_bauo]\n        jumps [ i ] = float ( 'inf' )\n        idx_ecv2 = 0\n        list_a3yf = range ( i )\n        while idx_ecv2 < len(list_a3yf):\n            j = list_a3yf[idx_ecv2]\n            if ( i <= j + arr [ j ] ) and ( jumps [ j ] != float ( 'inf' ) ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 )\n                break\n            idx_ecv2 = idx_ecv2 + 1\n        idx_bauo = idx_bauo + 1\n    return jumps [ n - 1 ]", "id": "For2While_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1_to_195", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    idx_l7a3 = 0\n    list_vl84 = range ( n - 2 , - 1 , - 1 )\n    while idx_l7a3 < len(list_vl84):\n        i = list_vl84[idx_l7a3]\n        if ( arr [ i ] == 0 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            idx_yds0 = 0\n            list_1sml = range ( i + 1 , n )\n            while idx_yds0 < len(list_1sml):\n                j = list_1sml[idx_yds0]\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n                idx_yds0 = idx_yds0 + 1\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n        idx_l7a3 = idx_l7a3 + 1\n    return jumps [ 0 ]", "id": "For2While_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_196", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    idx_ylq2 = 0\n    list_j2nq = range ( 4 , n + 1 )\n    while idx_ylq2 < len(list_j2nq):\n        i = list_j2nq[idx_ylq2]\n        dp.append ( i )\n        idx_zck2 = 0\n        list_2ixq = range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 )\n        while idx_zck2 < len(list_2ixq):\n            x = list_2ixq[idx_zck2]\n            temp = x * x ;\n            if temp > i and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n            idx_zck2 = idx_zck2 + 1\n        idx_ylq2 = idx_ylq2 + 1\n    return dp [ n ]", "id": "For2While_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_197", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def minOperation ( arr , n ) :\n    Hash = defaultdict ( lambda : 0 )\n    idx_u987 = 0\n    list_wf9l = range ( 0 , n )\n    while idx_u987 < len(list_wf9l):\n        i = list_wf9l[idx_u987]\n        Hash [ arr [ i ] ] += 1\n        idx_u987 = idx_u987 + 1\n    max_count = 0\n    idx_zq8w = 0\n    list_75y1 = Hash\n    while idx_zq8w < len(list_75y1):\n        i = list_75y1[idx_zq8w]\n        if max_count < Hash [ i ] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            max_count = Hash [ i ]\n        idx_zq8w = idx_zq8w + 1\n    return n - max_count", "id": "For2While_sample_from_MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY_to_198", "old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY"}
{"code": "def minProductSubset ( a , n ) :\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return a [ 0 ]\n    max_neg = float ( '-inf' )\n    min_pos = float ( 'inf' )\n    count_neg = 0\n    count_zero = 0\n    prod = 1\n    idx_j9gb = 0\n    list_vde9 = range ( 0 , n )\n    while idx_j9gb < len(list_vde9):\n        i = list_vde9[idx_j9gb]\n        if ( a [ i ] == 0 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            count_zero = count_zero + 1\n            continue\n        if ( a [ i ] < 0 ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            count_neg = count_neg + 1\n            max_neg = max ( max_neg , a [ i ] )\n        if ( a [ i ] > 0 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            min_pos = min ( min_pos , a [ i ] )\n        prod = prod * a [ i ]\n        idx_j9gb = idx_j9gb + 1\n    if ( count_zero == n or ( count_neg == 0 and count_zero > 0 ) ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return 0\n    if ( count_neg == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return min_pos\n    if ( ( count_neg & 1 ) == 0 and count_neg != 0 ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        prod = int ( prod / max_neg )\n    return prod", "id": "For2While_sample_from_MINIMUM_PRODUCT_SUBSET_ARRAY_to_199", "old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def findMinRooms ( slots , n , m ) :\n    counts = [ 0 ] * m\n    idx_v2zi = 0\n    list_wo21 = range ( n )\n    while idx_v2zi < len(list_wo21):\n        i = list_wo21[idx_v2zi]\n        idx_bsxk = 0\n        list_fqwn = range ( m )\n        while idx_bsxk < len(list_fqwn):\n            j = list_fqwn[idx_bsxk]\n            if i < len(slots) and j < len(slots[i]) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n                if ( slots [ i ] [ j ] == '1' ) :\n                    counts [ j ] += 1\n            idx_bsxk = idx_bsxk + 1\n        idx_v2zi = idx_v2zi + 1\n    return max ( counts )", "id": "For2While_sample_from_MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE_to_200", "old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE"}
{"code": "def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    idx_xpyf = 0\n    list_386s = range ( 1 , n + 1 )\n    while idx_xpyf < len(list_386s):\n        i = list_386s[idx_xpyf]\n        substring = tmp [ i : n ]\n        if ( str == substring ) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n            return i\n        idx_xpyf = idx_xpyf + 1\n    return n", "id": "For2While_sample_from_MINIMUM_ROTATIONS_REQUIRED_GET_STRING_to_201", "old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING"}
{"code": "def getMinSteps ( n ) :\n    table = [ 0 ] * ( n + 1 )\n    idx_oxmr = 0\n    list_imuq = range ( n + 1 )\n    while idx_oxmr < len(list_imuq):\n        i = list_imuq[idx_oxmr]\n        table [ i ] = n - i\n        idx_oxmr = idx_oxmr + 1\n    idx_4xvt = 0\n    list_6v3w = range ( n , 0 , - 1 )\n    while idx_4xvt < len(list_6v3w):\n        i = list_6v3w[idx_4xvt]\n        if ( not ( i % 2 ) ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            table [ i // 2 ] = min ( table [ i ] + 1 , table [ i // 2 ] )\n        if ( not ( i % 3 ) ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            table [ i // 3 ] = min ( table [ i ] + 1 , table [ i // 3 ] )\n        idx_4xvt = idx_4xvt + 1\n    return table [ 1 ]", "id": "For2While_sample_from_MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION_to_202", "old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    temp = 0\n    idx_dipw = 0\n    list_0k3s = range ( n )\n    while idx_dipw < len(list_0k3s):\n        i = list_0k3s[idx_dipw]\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            diff = d\n        idx_dipw = idx_dipw + 1\n    return res - diff", "id": "For2While_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_203", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return arr [ 0 ]\n    if ( n == 2 ) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    idx_bc8r = 0\n    list_a26i = range ( 4 , n )\n    while idx_bc8r < len(list_a26i):\n        i = list_a26i[idx_bc8r]\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n        idx_bc8r = idx_bc8r + 1\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )", "id": "For2While_sample_from_MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED_to_204", "old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0\n    b = 0\n    idx_qjce = 0\n    list_c8p9 = range ( n )\n    while idx_qjce < len(list_c8p9):\n        i = list_c8p9[idx_qjce]\n        if ( i % 2 != 0 ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n        idx_qjce = idx_qjce + 1\n    return a + b", "id": "For2While_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_205", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return 0\n    if N == 1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        return insert\n    dp = [ 0 ] * ( N + 1 )\n    idx_4yzd = 0\n    list_eu09 = range ( 1 , N + 1 )\n    while idx_4yzd < len(list_eu09):\n        i = list_eu09[idx_4yzd]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ i // 2 ] + copy )\n        else :\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ ( i + 1 ) // 2 ] + copy + remove )\n        idx_4yzd = idx_4yzd + 1\n    return dp [ N ]", "id": "For2While_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_206", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def compute ( str , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( str )\n    answer = \"\"\n    idx_mf1p = 0\n    list_7ka9 = range ( 0 , n )\n    while idx_mf1p < len(list_7ka9):\n        i = list_7ka9[idx_mf1p]\n        if i < l and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            answer = answer + str [ i ]\n        idx_mf1p = idx_mf1p + 1\n    idx_9fx6 = 0\n    list_m1ou = range ( n , l )\n    while idx_9fx6 < len(list_m1ou):\n        i = list_m1ou[idx_9fx6]\n        answer = ( answer + reverseAlphabet [ ord ( str [ i ] ) - ord ( \"a\" ) ] )\n        idx_9fx6 = idx_9fx6 + 1\n    return answer", "id": "For2While_sample_from_MIRROR_CHARACTERS_STRING_to_207", "old_id": "MIRROR_CHARACTERS_STRING"}
{"code": "def segregateElements ( arr , n ) :\n    temp = [ 0 for k in range ( n ) ]\n    j = 0\n    idx_xy7d = 0\n    list_ne5d = range ( n )\n    while idx_xy7d < len(list_ne5d):\n        i = list_ne5d[idx_xy7d]\n        if ( arr [ i ] >= 0 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            temp [ j ] = arr [ i ]\n            j += 1\n        idx_xy7d = idx_xy7d + 1\n    if ( j == n or j == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return\n    idx_4phf = 0\n    list_nmjh = range ( n )\n    while idx_4phf < len(list_nmjh):\n        i = list_nmjh[idx_4phf]\n        if ( arr [ i ] < 0 ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            temp [ j ] = arr [ i ]\n            j += 1\n        idx_4phf = idx_4phf + 1\n    idx_lny1 = 0\n    list_hxmf = range ( n )\n    while idx_lny1 < len(list_hxmf):\n        k = list_hxmf[idx_lny1]\n        arr [ k ] = temp [ k ]\n        idx_lny1 = idx_lny1 + 1", "id": "For2While_sample_from_MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED_to_208", "old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED"}
{"code": "def firstNonRepeating ( arr , n ) :\n    idx_efgo = 0\n    list_462p = range ( n )\n    while idx_efgo < len(list_462p):\n        i = list_462p[idx_efgo]\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n                break\n            j += 1\n        if ( j == n ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            return arr [ i ]\n        idx_efgo = idx_efgo + 1\n    return - 1", "id": "For2While_sample_from_NON_REPEATING_ELEMENT_to_209", "old_id": "NON_REPEATING_ELEMENT"}
{"code": "def firstNonRepeating ( arr , n ) :\n    mp = defaultdict ( lambda : 0 )\n    idx_fvrk = 0\n    list_87x0 = range ( n )\n    while idx_fvrk < len(list_87x0):\n        i = list_87x0[idx_fvrk]\n        mp [ arr [ i ] ] += 1\n        idx_fvrk = idx_fvrk + 1\n    idx_xm1e = 0\n    list_a825 = range ( n )\n    while idx_xm1e < len(list_a825):\n        i = list_a825[idx_xm1e]\n        if mp [ arr [ i ] ] == 1 and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            return arr [ i ]\n        idx_xm1e = idx_xm1e + 1\n    return - 1", "id": "For2While_sample_from_NON_REPEATING_ELEMENT_1_to_210", "old_id": "NON_REPEATING_ELEMENT_1"}
{"code": "def divisible ( num ) :\n    n = len ( num )\n    sum = 0\n    idx_cj96 = 0\n    list_ehr1 = range ( n )\n    while idx_cj96 < len(list_ehr1):\n        i = list_ehr1[idx_cj96]\n        sum += ord ( num [ i ] )\n        idx_cj96 = idx_cj96 + 1\n    if ( sum % 3 == 0 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return 0\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        return - 1\n    idx_agmd = 0\n    list_j4dx = range ( n )\n    while idx_agmd < len(list_j4dx):\n        i = list_j4dx[idx_agmd]\n        if ( sum % 3 == ord ( num [ i ] ) % 3 ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return 1\n        idx_agmd = idx_agmd + 1\n    if ( n == 2 ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        return - 1\n    return 2", "id": "For2While_sample_from_NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3_to_211", "old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3"}
{"code": "def answer_query ( a , n , l , r ) :\n    count = 0\n    idx_rjq4 = 0\n    list_4t9s = range ( l , r )\n    while idx_rjq4 < len(list_4t9s):\n        i = list_4t9s[idx_rjq4]\n        if ( a [ i ] == a [ i + 1 ] ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            count += 1\n        idx_rjq4 = idx_rjq4 + 1\n    return count", "id": "For2While_sample_from_NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE_to_212", "old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE"}
{"code": "def countIntegralSolutions ( n ) :\n    result = 0\n    idx_01hv = 0\n    list_kgpe = range ( n + 1 )\n    while idx_01hv < len(list_kgpe):\n        i = list_kgpe[idx_01hv]\n        idx_76fs = 0\n        list_29sc = range ( n + 1 )\n        while idx_76fs < len(list_29sc):\n            j = list_29sc[idx_76fs]\n            idx_6lfb = 0\n            list_nj42 = range ( n + 1 )\n            while idx_6lfb < len(list_nj42):\n                k = list_nj42[idx_6lfb]\n                if i + j + k == n and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n                    result += 1\n                idx_6lfb = idx_6lfb + 1\n            idx_76fs = idx_76fs + 1\n        idx_01hv = idx_01hv + 1\n    return result", "id": "For2While_sample_from_NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_to_213", "old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N"}
{"code": "def answer ( n ) :\n    dp = [ [ 0 for x in range ( 10 ) ] for y in range ( n + 1 ) ]\n    if ( n == 1 ) and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        return 10\n    idx_ukry = 0\n    list_ver4 = range ( 10 )\n    while idx_ukry < len(list_ver4):\n        j = list_ver4[idx_ukry]\n        dp [ 1 ] [ j ] = 1\n        idx_ukry = idx_ukry + 1\n    idx_u27s = 0\n    list_rvol = range ( 2 , n + 1 )\n    while idx_u27s < len(list_rvol):\n        i = list_rvol[idx_u27s]\n        idx_f7di = 0\n        list_do49 = range ( 10 )\n        while idx_f7di < len(list_do49):\n            j = list_do49[idx_f7di]\n            if ( j == 0 ) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ]\n            elif ( j == 9 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n            idx_f7di = idx_f7di + 1\n        idx_u27s = idx_u27s + 1\n    sum = 0\n    idx_lcy0 = 0\n    list_iow4 = range ( 1 , 10 )\n    while idx_lcy0 < len(list_iow4):\n        j = list_iow4[idx_lcy0]\n        sum = sum + dp [ n ] [ j ]\n        idx_lcy0 = idx_lcy0 + 1\n    return sum", "id": "For2While_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_214", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    idx_1foj = 0\n    list_31f2 = range ( n )\n    while idx_1foj < len(list_31f2):\n        i = list_31f2[idx_1foj]\n        if a [ i ] == 0 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            zero += 1\n        if a [ i ] == 2 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            two += 1\n        idx_1foj = idx_1foj + 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt", "id": "For2While_sample_from_NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT_to_215", "old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT"}
{"code": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    idx_atr8 = 0\n    list_nkv6 = range ( n )\n    while idx_atr8 < len(list_nkv6):\n        i = list_nkv6[idx_atr8]\n        if s [ i ] == 'a' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            c1 += 1\n        if s [ i ] == 'b' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            c2 += 1\n            C += c1\n        idx_atr8 = idx_atr8 + 1\n    return C * K + int ( K * ( K - 1 ) / 2 ) * c1 * c2", "id": "For2While_sample_from_NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES_to_216", "old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES"}
{"code": "def minimumBox ( arr , n ) :\n    q = collections.deque ( [ ] )\n    arr = arr [ : n ]\n    arr.sort ( )\n    q.append ( arr [ 0 ] )\n    idx_1aqi = 0\n    list_ob39 = range ( 1 , n )\n    while idx_1aqi < len(list_ob39):\n        i = list_ob39[idx_1aqi]\n        now = q [ 0 ]\n        if ( arr [ i ] >= 2 * now ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            q.popleft ( )\n        q.append ( arr [ i ] )\n        idx_1aqi = idx_1aqi + 1\n    return len ( q )", "id": "For2While_sample_from_NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER_to_217", "old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER"}
{"code": "def maximumNumberDistinctPrimeRange ( m , n ) :\n    factorCount = [ 0 ] * ( n + 1 )\n    prime = [ False ] * ( n + 1 )\n    idx_65u8 = 0\n    list_kavf = range ( n + 1 )\n    while idx_65u8 < len(list_kavf):\n        i = list_kavf[idx_65u8]\n        factorCount [ i ] = 0\n        prime [ i ] = True\n        idx_65u8 = idx_65u8 + 1\n    idx_iwck = 0\n    list_wx90 = range ( 2 , n + 1 )\n    while idx_iwck < len(list_wx90):\n        i = list_wx90[idx_iwck]\n        if ( prime [ i ] == True ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            factorCount [ i ] = 1\n            idx_jqd8 = 0\n            list_m7bq = range ( i * 2 , n + 1 , i )\n            while idx_jqd8 < len(list_m7bq):\n                j = list_m7bq[idx_jqd8]\n                factorCount [ j ] += 1\n                prime [ j ] = False\n                idx_jqd8 = idx_jqd8 + 1\n        idx_iwck = idx_iwck + 1\n    max = factorCount [ m ]\n    num = m\n    idx_o5zr = 0\n    list_nj6l = range ( m , n + 1 )\n    while idx_o5zr < len(list_nj6l):\n        i = list_nj6l[idx_o5zr]\n        if ( factorCount [ i ] > max ) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n            max = factorCount [ i ]\n            num = i\n        idx_o5zr = idx_o5zr + 1\n    return num", "id": "For2While_sample_from_NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N_to_218", "old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N"}
{"code": "def findNth ( n ) :\n    count = 0\n    idx_jf2b = 0\n    list_gjqk = itertools.count ( )\n    while idx_jf2b < len(list_gjqk):\n        curr = list_gjqk[idx_jf2b]\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            count = count + 1\n        if ( count == n ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return curr\n        idx_jf2b = idx_jf2b + 1\n    return - 1", "id": "For2While_sample_from_N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_to_219", "old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN"}
{"code": "def findSum ( A , B , n ) :\n    Hash = defaultdict ( lambda : 0 )\n    idx_2sxk = 0\n    list_isr1 = range ( 0 , n )\n    while idx_2sxk < len(list_isr1):\n        i = list_isr1[idx_2sxk]\n        Hash [ A [ i ] ] += 1\n        Hash [ B [ i ] ] += 1\n        idx_2sxk = idx_2sxk + 1\n    Sum = 0\n    idx_wv46 = 0\n    list_pxeb = Hash\n    while idx_wv46 < len(list_pxeb):\n        x = list_pxeb[idx_wv46]\n        if Hash [ x ] == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            Sum += x\n        idx_wv46 = idx_wv46 + 1\n    return Sum", "id": "For2While_sample_from_OVERLAPPING_SUM_TWO_ARRAY_to_220", "old_id": "OVERLAPPING_SUM_TWO_ARRAY"}
{"code": "def isProduct ( arr , n , x ) :\n    if n < 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return False\n    s = set ( )\n    idx_i9ym = 0\n    list_drmk = range ( 0 , n )\n    while idx_i9ym < len(list_drmk):\n        i = list_drmk[idx_i9ym]\n        if arr [ i ] == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n        idx_i9ym = idx_i9ym + 1\n    return False", "id": "For2While_sample_from_PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1_to_221", "old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1"}
{"code": "def checkPangram ( s ) :\n    List = [ ]\n    idx_a6m2 = 0\n    list_bxw2 = range ( 26 )\n    while idx_a6m2 < len(list_bxw2):\n        i = list_bxw2[idx_a6m2]\n        List.append ( False )\n        idx_a6m2 = idx_a6m2 + 1\n    idx_4gka = 0\n    list_chi5 = s\n    while idx_4gka < len(list_chi5):\n        c = list_chi5[idx_4gka]\n        if 'A' <= c and c <= 'Z' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            List [ ord ( c ) - ord ( 'A' ) ] = True\n        elif 'a' <= c and c <= 'z':\n            List [ ord ( c ) - ord ( 'a' ) ] = True\n        idx_4gka = idx_4gka + 1\n    idx_kp0b = 0\n    list_x837 = List\n    while idx_kp0b < len(list_x837):\n        ch = list_x837[idx_kp0b]\n        if ch == False and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n            return False\n        idx_kp0b = idx_kp0b + 1\n    return True", "id": "For2While_sample_from_PANGRAM_CHECKING_to_222", "old_id": "PANGRAM_CHECKING"}
{"code": "def isPossible ( a , b , n , k ) :\n    a = a [ : n ]\n    b = b [ : n ]\n    a.sort ( reverse = True )\n    b.sort ( )\n    idx_dsla = 0\n    list_utcy = range ( n )\n    while idx_dsla < len(list_utcy):\n        i = list_utcy[idx_dsla]\n        if ( a [ i ] + b [ i ] < k ) and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            return False\n        idx_dsla = idx_dsla + 1\n    return True", "id": "For2While_sample_from_PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K_to_223", "old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K"}
{"code": "def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :\n    print ( \"Point inside the viewing pane:\" )\n    idx_zo7v = 0\n    list_n5lm = range ( n )\n    while idx_zo7v < len(list_n5lm):\n        i = list_n5lm[idx_zo7v]\n        if ( ( XY [ i ] [ 0 ] >= Xmin ) and ( XY [ i ] [ 0 ] <= Xmax ) ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            if ( ( XY [ i ] [ 1 ] >= Ymin ) and ( XY [ i ] [ 1 ] <= Ymax ) ) :\n                print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_zo7v = idx_zo7v + 1\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    idx_r35m = 0\n    list_c0om = range ( n )\n    while idx_r35m < len(list_c0om):\n        i = list_c0om[idx_r35m]\n        if ( ( XY [ i ] [ 0 ] < Xmin ) or ( XY [ i ] [ 0 ] > Xmax ) ) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        if ( ( XY [ i ] [ 1 ] < Ymin ) or ( XY [ i ] [ 1 ] > Ymax ) ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            print ( \"[\" , XY [ i ] [ 0 ] , \", \" , XY [ i ] [ 1 ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_r35m = idx_r35m + 1", "id": "For2While_sample_from_POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS_to_224", "old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS"}
{"code": "def isPossibleTriangle ( arr , N ) :\n    arr = arr [ : N ]\n    if N < 3 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return False\n    arr.sort ( )\n    idx_mwba = 0\n    list_nsd6 = range ( N - 2 )\n    while idx_mwba < len(list_nsd6):\n        i = list_nsd6[idx_mwba]\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return True\n        idx_mwba = idx_mwba + 1\n    return False", "id": "For2While_sample_from_POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES_to_225", "old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES"}
{"code": "def isPrime ( p ) :\n    checkNumber = 2 ** p - 1\n    nextval = 4 % checkNumber\n    idx_ptz9 = 0\n    list_no87 = range ( 1 , p - 1 )\n    while idx_ptz9 < len(list_no87):\n        i = list_no87[idx_ptz9]\n        nextval = ( nextval * nextval - 2 ) % checkNumber\n        idx_ptz9 = idx_ptz9 + 1\n    if ( nextval == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))): return True\n    else : return False", "id": "For2While_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_226", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def isPrime ( n ) :\n    if ( n <= 1 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return False\n    idx_4xh6 = 0\n    list_hgrq = range ( 2 , n )\n    while idx_4xh6 < len(list_hgrq):\n        i = list_hgrq[idx_4xh6]\n        if ( n % i == 0 ) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return False\n        idx_4xh6 = idx_4xh6 + 1\n    return True", "id": "For2While_sample_from_PRIME_NUMBERS_to_227", "old_id": "PRIME_NUMBERS"}
{"code": "def noAdjacentDup ( s ) :\n    n = len ( s )\n    idx_j4do = 0\n    list_v04h = range ( 1 , n )\n    while idx_j4do < len(list_v04h):\n        i = list_v04h[idx_j4do]\n        if ( s [ i ] == s [ i - 1 ] ) and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            s [ i ] = \"a\"\n            while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and s [ i ] == s [ i + 1 ] ) ) :\n                s [ i ] += 1\n            i += 1\n        idx_j4do = idx_j4do + 1\n    return s", "id": "For2While_sample_from_PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES_to_228", "old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES"}
{"code": "def antiSpiralTraversal ( m , n , a ) :\n    k = 0\n    l = 0\n    stk = [ ]\n    while ( k <= m and l <= n ) :\n        idx_udg7 = 0\n        list_2wkp = range ( l , n + 1 )\n        while idx_udg7 < len(list_2wkp):\n            i = list_2wkp[idx_udg7]\n            stk.append ( a [ k ] [ i ] )\n            idx_udg7 = idx_udg7 + 1\n        k += 1\n        idx_34jv = 0\n        list_p3xo = range ( k , m + 1 )\n        while idx_34jv < len(list_p3xo):\n            i = list_p3xo[idx_34jv]\n            stk.append ( a [ i ] [ n ] )\n            idx_34jv = idx_34jv + 1\n        n -= 1\n        if ( k <= m ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            idx_etsv = 0\n            list_mpbu = range ( n , l - 1 , - 1 )\n            while idx_etsv < len(list_mpbu):\n                i = list_mpbu[idx_etsv]\n                stk.append ( a [ m ] [ i ] )\n                idx_etsv = idx_etsv + 1\n            m -= 1\n        if ( l <= n ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            idx_5yel = 0\n            list_av6u = range ( m , k - 1 , - 1 )\n            while idx_5yel < len(list_av6u):\n                i = list_av6u[idx_5yel]\n                stk.append ( a [ i ] [ l ] )\n                idx_5yel = idx_5yel + 1\n            l += 1\n    while len ( stk ) != 0 :\n        print ( str ( stk [ - 1 ] ) , end = \" \" )\n        stk.pop ( )", "id": "For2While_sample_from_PRINT_MATRIX_ANTISPIRAL_FORM_to_229", "old_id": "PRINT_MATRIX_ANTISPIRAL_FORM"}
{"code": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    idx_al0m = 0\n    list_i5kl = range ( n )\n    while idx_al0m < len(list_i5kl):\n        i = list_i5kl[idx_al0m]\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n        idx_al0m = idx_al0m + 1\n    ans = sys.maxsize\n    idx_sfm9 = 0\n    list_3178 = range ( n )\n    while idx_sfm9 < len(list_3178):\n        i = list_3178[idx_sfm9]\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n        idx_sfm9 = idx_sfm9 + 1\n    return ans", "id": "For2While_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_230", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    idx_tl8e = 0\n    list_mntj = range ( n )\n    while idx_tl8e < len(list_mntj):\n        i = list_mntj[idx_tl8e]\n        bestIdx = - 1\n        idx_f4nq = 0\n        list_p7nl = range ( m )\n        while idx_f4nq < len(list_p7nl):\n            j = list_p7nl[idx_f4nq]\n            if blockSize [ j ] >= processSize [ i ] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n            idx_f4nq = idx_f4nq + 1\n        if bestIdx != - 1 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n        idx_tl8e = idx_tl8e + 1\n    print ( \"Process No.Process Size     Block no.\" )\n    idx_notd = 0\n    list_pt0u = range ( n )\n    while idx_notd < len(list_pt0u):\n        i = list_pt0u[idx_notd]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n        idx_notd = idx_notd + 1", "id": "For2While_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_231", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def binaryToDecimal ( n ) :\n    num = n\n    dec_value = 0\n    base1 = 1\n    len1 = len ( num )\n    idx_rdab = 0\n    list_v672 = range ( len1 - 1 , - 1 , - 1 )\n    while idx_rdab < len(list_v672):\n        i = list_v672[idx_rdab]\n        if ( num [ i ] == '1' ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            dec_value += base1\n        base1 = base1 * 2\n        idx_rdab = idx_rdab + 1\n    return dec_value", "id": "For2While_sample_from_PROGRAM_BINARY_DECIMAL_CONVERSION_1_to_232", "old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1"}
{"code": "def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    index = 0\n    idx_mrfp = 0\n    list_mb3d = word_list\n    while idx_mrfp < len(list_mb3d):\n        i = list_mb3d[idx_mrfp]\n        if i == word and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            word_list [ index ] = stars\n        index += 1\n        idx_mrfp = idx_mrfp + 1\n    result = ' '.join ( word_list )\n    return result", "id": "For2While_sample_from_PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE_to_233", "old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE"}
{"code": "def arraySortedOrNot ( arr , n ) :\n    if ( n == 0 or n == 1 ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return True\n    idx_ham0 = 0\n    list_n7cp = range ( 1 , n )\n    while idx_ham0 < len(list_n7cp):\n        i = list_n7cp[idx_ham0]\n        if ( arr [ i - 1 ] > arr [ i ] ) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return False\n        idx_ham0 = idx_ham0 + 1\n    return True", "id": "For2While_sample_from_PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1_to_234", "old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1"}
{"code": "def isNumber ( s ) :\n    idx_jkca = 0\n    list_2wz6 = range ( len ( s ) )\n    while idx_jkca < len(list_2wz6):\n        i = list_2wz6[idx_jkca]\n        if s [ i ].isdigit ( ) != True and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return False\n        idx_jkca = idx_jkca + 1\n    return True", "id": "For2While_sample_from_PROGRAM_CHECK_INPUT_INTEGER_STRING_to_235", "old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != 10 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return False\n    _sum = 0\n    idx_4ivt = 0\n    list_3erx = range ( 9 )\n    while idx_4ivt < len(list_3erx):\n        i = list_3erx[idx_4ivt]\n        if 0 <= int ( isbn [ i ] ) <= 9 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            _sum += int ( isbn [ i ] ) * ( 10 - i )\n        else :\n            return False\n        idx_4ivt = idx_4ivt + 1\n    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        return False\n    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )\n    return ( _sum % 11 == 0 )", "id": "For2While_sample_from_PROGRAM_CHECK_ISBN_to_236", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def count ( s , c ) :\n    res = 0\n    idx_gd8s = 0\n    list_vfsl = range ( len ( s ) )\n    while idx_gd8s < len(list_vfsl):\n        i = list_vfsl[idx_gd8s]\n        if ( s [ i ] == c ) and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            res = res + 1\n        idx_gd8s = idx_gd8s + 1\n    return res", "id": "For2While_sample_from_PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING_to_237", "old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING"}
{"code": "def isIdentity ( mat , N ) :\n    idx_rda0 = 0\n    list_bltj = range ( N )\n    while idx_rda0 < len(list_bltj):\n        row = list_bltj[idx_rda0]\n        idx_gb9r = 0\n        list_2vs0 = range ( N )\n        while idx_gb9r < len(list_2vs0):\n            col = list_2vs0[idx_gb9r]\n            if ( row == col and mat [ row ] [ col ] != 1 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                return False\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False\n            idx_gb9r = idx_gb9r + 1\n        idx_rda0 = idx_rda0 + 1\n    return True", "id": "For2While_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_238", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def isSymmetric ( mat , N ) :\n    idx_4nsj = 0\n    list_flyi = range ( N )\n    while idx_4nsj < len(list_flyi):\n        i = list_flyi[idx_4nsj]\n        idx_gu83 = 0\n        list_10se = range ( N )\n        while idx_gu83 < len(list_10se):\n            j = list_10se[idx_gu83]\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n                return False\n            idx_gu83 = idx_gu83 + 1\n        idx_4nsj = idx_4nsj + 1\n    return True", "id": "For2While_sample_from_PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC_to_239", "old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    idx_wy0t = 0\n    list_w342 = range ( n )\n    while idx_wy0t < len(list_w342):\n        i = list_w342[idx_wy0t]\n        wstIdx = - 1\n        idx_nf5s = 0\n        list_ekpn = range ( m )\n        while idx_nf5s < len(list_ekpn):\n            j = list_ekpn[idx_nf5s]\n            if blockSize [ j ] >= processSize [ i ] and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n                if wstIdx == - 1 :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n            idx_nf5s = idx_nf5s + 1\n        if wstIdx != - 1 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n        idx_wy0t = idx_wy0t + 1\n    print ( \"Process No.Process Size Block no.\" )\n    idx_r937 = 0\n    list_zow7 = range ( n )\n    while idx_r937 < len(list_zow7):\n        i = list_zow7[idx_r937]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )\n        idx_r937 = idx_r937 + 1", "id": "For2While_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_240", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    idx_l350 = 0\n    list_d14h = range ( n )\n    while idx_l350 < len(list_d14h):\n        i = list_d14h[idx_l350]\n        if ( arr [ i ] >= x and arr [ i ] <= y ) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            count += 1\n        idx_l350 = idx_l350 + 1\n    return count", "id": "For2While_sample_from_QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE_to_241", "old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE"}
{"code": "def allCharactersSame ( s ) :\n    n = len ( s )\n    idx_f1mo = 0\n    list_t9fs = range ( 1 , n )\n    while idx_f1mo < len(list_t9fs):\n        i = list_t9fs[idx_f1mo]\n        if s [ i ] != s [ 0 ] and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            return False\n        idx_f1mo = idx_f1mo + 1\n    return True", "id": "For2While_sample_from_QUICK_WAY_CHECK_CHARACTERS_STRING_to_242", "old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING"}
{"code": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    idx_uopf = 0\n    list_ykqv = range ( n )\n    while idx_uopf < len(list_ykqv):\n        i = list_ykqv[idx_uopf]\n        if flag is True and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n        idx_uopf = idx_uopf + 1\n    idx_yos2 = 0\n    list_i3n9 = range ( n )\n    while idx_yos2 < len(list_i3n9):\n        i = list_i3n9[idx_yos2]\n        arr [ i ] = temp [ i ]\n        idx_yos2 = idx_yos2 + 1\n    return arr", "id": "For2While_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_243", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = n - 1\n    min_idx = 0\n    max_elem = arr [ n - 1 ] + 1\n    idx_gwu6 = 0\n    list_9jhd = range ( 0 , n )\n    while idx_gwu6 < len(list_9jhd):\n        i = list_9jhd[idx_gwu6]\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n        idx_gwu6 = idx_gwu6 + 1\n    idx_doux = 0\n    list_79af = range ( 0 , n )\n    while idx_doux < len(list_79af):\n        i = list_79af[idx_doux]\n        arr [ i ] = int ( arr [ i ] / max_elem )\n        idx_doux = idx_doux + 1", "id": "For2While_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_244", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def rearrange ( arr , n ) :\n    i = - 1\n    idx_vtog = 0\n    list_sy3t = range ( n )\n    while idx_vtog < len(list_sy3t):\n        j = list_sy3t[idx_vtog]\n        if ( arr [ j ] < 0 ) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        idx_vtog = idx_vtog + 1\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2", "id": "For2While_sample_from_REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH_to_245", "old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH"}
{"code": "def remainderWith7 ( num ) :\n    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]\n    series_index = 0\n    result = 0\n    idx_hmla = 0\n    list_0kgm = range ( ( len ( num ) - 1 ) , - 1 , - 1 )\n    while idx_hmla < len(list_0kgm):\n        i = list_0kgm[idx_hmla]\n        digit = ord ( num [ i ] ) - 48\n        result += digit * series [ series_index ]\n        series_index = ( series_index + 1 ) % 6\n        result %= 7\n        idx_hmla = idx_hmla + 1\n    if ( result < 0 ) and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        result = ( result + 7 ) % 7\n    return result", "id": "For2While_sample_from_REMAINDER_7_LARGE_NUMBERS_to_246", "old_id": "REMAINDER_7_LARGE_NUMBERS"}
{"code": "def removeDuplicates ( S ) :\n    n = len ( S )\n    if ( n < 2 ) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return\n    j = 0\n    idx_p3l0 = 0\n    list_jugp = range ( 1 , n )\n    while idx_p3l0 < len(list_jugp):\n        i = list_jugp[idx_p3l0]\n        if ( S [ j ] != S [ i ] ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            j += 1\n            S [ j ] = S [ i ]\n        idx_p3l0 = idx_p3l0 + 1\n    j += 1\n    S = S [ : j ]", "id": "For2While_sample_from_REMOVE_CONSECUTIVE_DUPLICATES_STRING_to_247", "old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING"}
{"code": "def minRemovalsDP ( arr , n ) :\n    longest_start = - 1\n    longest_end = 0\n    idx_4386 = 0\n    list_fgb3 = range ( n )\n    while idx_4386 < len(list_fgb3):\n        start = list_fgb3[idx_4386]\n        min = sys.maxsize\n        max = - sys.maxsize\n        idx_nwru = 0\n        list_mbo7 = range ( start , n )\n        while idx_nwru < len(list_mbo7):\n            end = list_mbo7[idx_nwru]\n            val = arr [ end ]\n            if ( val < min ) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n                min = val\n            if ( val > max ) and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n                max = val\n            if ( 2 * min <= max ) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                break\n            if ( end - start > longest_end - longest_start or longest_start == - 1 ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                longest_start = start\n                longest_end = end\n            idx_nwru = idx_nwru + 1\n        idx_4386 = idx_4386 + 1\n    if ( longest_start == - 1 ) and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return n\n    return ( n - ( longest_end - longest_start + 1 ) )", "id": "For2While_sample_from_REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX_to_248", "old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    idx_3t8n = 0\n    list_v69o = range ( l )\n    while idx_3t8n < len(list_v69o):\n        i = list_v69o[idx_3t8n]\n        if ( s [ i ] == c1 ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n        idx_3t8n = idx_3t8n + 1\n    return s", "id": "For2While_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_249", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def countCommon ( mat , n ) :\n    res = 0\n    idx_jt5y = 0\n    list_ax25 = range ( n )\n    while idx_jt5y < len(list_ax25):\n        i = list_ax25[idx_jt5y]\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            res = res + 1\n        idx_jt5y = idx_jt5y + 1\n    return res", "id": "For2While_sample_from_ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX_to_250", "old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX"}
{"code": "def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    idx_z0yw = 0\n    list_hqdf = arr\n    while idx_z0yw < len(list_hqdf):\n        i = list_hqdf[idx_z0yw]\n        print ( str ( i ) + \" \" , end = '' )\n        idx_z0yw = idx_z0yw + 1", "id": "For2While_sample_from_SEGREGATE_EVEN_ODD_NUMBERS_SET_3_to_251", "old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 1 ) ]\n    idx_ax0q = 0\n    list_zh40 = range ( m + 1 )\n    while idx_ax0q < len(list_zh40):\n        i = list_zh40[idx_ax0q]\n        idx_vb3z = 0\n        list_y3fr = range ( n + 1 )\n        while idx_vb3z < len(list_y3fr):\n            j = list_y3fr[idx_vb3z]\n            if i == 0 or j == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n                T [ i ] [ j ] = 0\n            elif i < j :\n                T [ i ] [ j ] = 0\n            elif j == 1 :\n                T [ i ] [ j ] = i\n            else :\n                T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i // 2 ] [ j - 1 ]\n            idx_vb3z = idx_vb3z + 1\n        idx_ax0q = idx_ax0q + 1\n    return T [ m ] [ n ]", "id": "For2While_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_252", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    idx_znk7 = 0\n    list_3txw = range ( 0 , size )\n    while idx_znk7 < len(list_3txw):\n        i = list_3txw[idx_znk7]\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            max_ending_here = 0\n            s = i + 1\n        idx_znk7 = idx_znk7 + 1\n    return ( end - start + 1 )", "id": "For2While_sample_from_SIZE_SUBARRAY_MAXIMUM_SUM_to_253", "old_id": "SIZE_SUBARRAY_MAXIMUM_SUM"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    idx_vitw = 0\n    list_xt64 = range ( n )\n    while idx_vitw < len(list_xt64):\n        i = list_xt64[idx_vitw]\n        arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n        idx_vitw = idx_vitw + 1\n    index = - ( sys.maxsize - 1 )\n    maximum = - ( sys.maxsize - 1 )\n    idx_y3gj = 0\n    list_7pzh = range ( n )\n    while idx_y3gj < len(list_7pzh):\n        i = list_7pzh[idx_y3gj]\n        if maximum < arr [ i ] and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            index = i\n            maximum = arr [ i ]\n        idx_y3gj = idx_y3gj + 1\n    i = 0\n    j = n - 1\n    new_arr = [ 0 ] * n\n    k = 0\n    while i < index and j > index :\n        if arr [ i ] < arr [ j ] and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            new_arr [ k ] = arr [ i ]\n            k += 1\n            i += 1\n        else :\n            new_arr [ k ] = arr [ j ]\n            k += 1\n            j -= 1\n    while i < index :\n        new_arr [ k ] = arr [ i ]\n        k += 1\n        i += 1\n    while j > index :\n        new_arr [ k ] = arr [ j ]\n        k += 1\n        j -= 1\n        new_arr [ n - 1 ] = maximum\n    idx_4my0 = 0\n    list_w6bc = range ( n )\n    while idx_4my0 < len(list_w6bc):\n        i = list_w6bc[idx_4my0]\n        arr [ i ] = new_arr [ i ]\n        idx_4my0 = idx_4my0 + 1", "id": "For2While_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_254", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def sortInWave ( arr , n ) :\n    idx_xs9d = 0\n    list_3i2g = range ( 0 , n , 2 )\n    while idx_xs9d < len(list_3i2g):\n        i = list_3i2g[idx_xs9d]\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n        idx_xs9d = idx_xs9d + 1", "id": "For2While_sample_from_SORT_ARRAY_WAVE_FORM_2_1_to_255", "old_id": "SORT_ARRAY_WAVE_FORM_2_1"}
{"code": "def twoWaySort ( arr , n ) :\n    idx_wfoc = 0\n    list_umgz = range ( 0 , n )\n    while idx_wfoc < len(list_umgz):\n        i = list_umgz[idx_wfoc]\n        if ( arr [ i ] & 1 ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            arr [ i ] *= - 1\n        idx_wfoc = idx_wfoc + 1\n    arr.sort ( )\n    idx_ajd7 = 0\n    list_6iv2 = range ( 0 , n )\n    while idx_ajd7 < len(list_6iv2):\n        i = list_6iv2[idx_ajd7]\n        if ( arr [ i ] & 1 ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            arr [ i ] *= - 1\n        idx_ajd7 = idx_ajd7 + 1", "id": "For2While_sample_from_SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1_to_256", "old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    idx_7ost = 0\n    list_eopy = range ( n )\n    while idx_7ost < len(list_eopy):\n        i = list_eopy[idx_7ost]\n        if ( ( i % 2 ) == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n        idx_7ost = idx_7ost + 1\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    idx_yqru = 0\n    list_148h = range ( len ( evenArr ) )\n    while idx_yqru < len(list_148h):\n        j = list_148h[idx_yqru]\n        arr [ i ] = evenArr [ j ]\n        i += 1\n        idx_yqru = idx_yqru + 1\n    idx_dezj = 0\n    list_yozd = range ( len ( oddArr ) )\n    while idx_dezj < len(list_yozd):\n        j = list_yozd[idx_dezj]\n        arr [ i ] = oddArr [ j ]\n        i += 1\n        idx_dezj = idx_dezj + 1", "id": "For2While_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_257", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 )\n    idx_4dp7 = 0\n    list_wxdu = range ( n )\n    while idx_4dp7 < len(list_wxdu):\n        i = list_wxdu[idx_4dp7]\n        idx_3zm7 = 0\n        list_chi5 = range ( W , -1 , - 1 )\n        while idx_3zm7 < len(list_chi5):\n            j = list_chi5[idx_3zm7]\n            if j - wt [ i ] < W + 1 and j - wt [ i ] >= 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n                dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] )\n            idx_3zm7 = idx_3zm7 + 1\n        idx_4dp7 = idx_4dp7 + 1\n    return dp [ W ]", "id": "For2While_sample_from_SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1_to_258", "old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1"}
{"code": "def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    idx_t12g = 0\n    list_fgn8 = range ( 0 , row )\n    while idx_t12g < len(list_fgn8):\n        i = list_fgn8[idx_t12g]\n        idx_5ocx = 0\n        list_ge05 = range ( 0 , column )\n        while idx_5ocx < len(list_ge05):\n            j = list_ge05[idx_5ocx]\n            if ( i == j ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_5ocx = idx_5ocx + 1\n        idx_t12g = idx_t12g + 1\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    idx_h947 = 0\n    list_2kpv = range ( 0 , row )\n    while idx_h947 < len(list_2kpv):\n        i = list_2kpv[idx_h947]\n        idx_dc46 = 0\n        list_dsli = range ( 0 , column )\n        while idx_dc46 < len(list_dsli):\n            j = list_dsli[idx_dc46]\n            if ( i + j == column - 1 ) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_dc46 = idx_dc46 + 1\n        idx_h947 = idx_h947 + 1", "id": "For2While_sample_from_SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_to_259", "old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS"}
{"code": "def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    idx_n6di = 0\n    list_0t1u = range ( len ( str ) )\n    while idx_n6di < len(list_0t1u):\n        i = list_0t1u[idx_n6di]\n        if ( str [ i ] == ' ' ) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n        idx_n6di = idx_n6di + 1\n    return result", "id": "For2While_sample_from_STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES_to_260", "old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ]\n    idx_m74l = 0\n    list_y6nd = range ( n + 1 )\n    while idx_m74l < len(list_y6nd):\n        i = list_y6nd[idx_m74l]\n        idx_kmyl = 0\n        list_cszp = range ( sum + 1 )\n        while idx_kmyl < len(list_cszp):\n            j = list_cszp[idx_kmyl]\n            if ( j == 0 ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                subset [ i % 2 ] [ j ] = True\n            elif ( i == 0 ) :\n                subset [ i % 2 ] [ j ] = False\n            elif ( arr [ i - 1 ] <= j ) :\n                subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ]\n            else :\n                subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ]\n            idx_kmyl = idx_kmyl + 1\n        idx_m74l = idx_m74l + 1\n    return subset [ n % 2 ] [ sum ]", "id": "For2While_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_261", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def binomialCoeffSum ( n ) :\n    C = [ [ 0 ] * ( n + 2 ) for i in range ( 0 , n + 2 ) ]\n    idx_53qa = 0\n    list_pzx8 = range ( 0 , n + 1 )\n    while idx_53qa < len(list_pzx8):\n        i = list_pzx8[idx_53qa]\n        idx_g1pq = 0\n        list_jmg2 = range ( 0 , min ( i , n ) + 1 )\n        while idx_g1pq < len(list_jmg2):\n            j = list_jmg2[idx_g1pq]\n            if ( j == 0 or j == i ) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            idx_g1pq = idx_g1pq + 1\n        idx_53qa = idx_53qa + 1\n    sum = 0\n    idx_0389 = 0\n    list_7v1h = range ( 0 , n + 1 )\n    while idx_0389 < len(list_7v1h):\n        i = list_7v1h[idx_0389]\n        sum += C [ n ] [ i ]\n        idx_0389 = idx_0389 + 1\n    return sum", "id": "For2While_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_262", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def divSum ( n ) :\n    result = 0\n    idx_0ts5 = 0\n    list_3cjh = range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 )\n    while idx_0ts5 < len(list_3cjh):\n        i = list_3cjh[idx_0ts5]\n        if ( n % i == 0 ) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n        idx_0ts5 = idx_0ts5 + 1\n    return ( result + n + 1 )", "id": "For2While_sample_from_SUM_FACTORS_NUMBER_to_263", "old_id": "SUM_FACTORS_NUMBER"}
{"code": "def calculateSum ( n ) :\n    if ( n <= 0 ) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    idx_pa89 = 0\n    list_sm1j = range ( 2 , n + 1 )\n    while idx_pa89 < len(list_sm1j):\n        i = list_sm1j[idx_pa89]\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n        idx_pa89 = idx_pa89 + 1\n    return sm", "id": "For2While_sample_from_SUM_FIBONACCI_NUMBERS_to_264", "old_id": "SUM_FIBONACCI_NUMBERS"}
{"code": "def findSum ( n ) :\n    ans = 0\n    temp = 0\n    idx_c8jq = 0\n    list_catg = range ( 1 , n + 1 )\n    while idx_c8jq < len(list_catg):\n        i = list_catg[idx_c8jq]\n        if temp < n and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n        idx_c8jq = idx_c8jq + 1\n    return ans", "id": "For2While_sample_from_SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1_to_265", "old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    idx_8c0i = 0\n    list_y8ur = range ( n )\n    while idx_8c0i < len(list_y8ur):\n        i = list_y8ur[idx_8c0i]\n        if ( tree [ i ] == '(' ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n        idx_8c0i = idx_8c0i + 1\n    return sum", "id": "For2While_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_266", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def sumofsquare ( n ) :\n    C = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_dspe = 0\n    list_278k = range ( 0 , n + 1 )\n    while idx_dspe < len(list_278k):\n        i = list_278k[idx_dspe]\n        idx_i1q5 = 0\n        list_uq03 = range ( 0 , min ( i , n ) + 1 )\n        while idx_i1q5 < len(list_uq03):\n            j = list_uq03[idx_i1q5]\n            if ( j == 0 or j == i ) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n                C [ i ] [ j ] = 1\n            else :\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            idx_i1q5 = idx_i1q5 + 1\n        idx_dspe = idx_dspe + 1\n    sum = 0\n    idx_xnbl = 0\n    list_wmj3 = range ( 0 , n + 1 )\n    while idx_xnbl < len(list_wmj3):\n        i = list_wmj3[idx_xnbl]\n        sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n        idx_xnbl = idx_xnbl + 1\n    return sum", "id": "For2While_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_267", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)) and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[:: - 1]\n    str2 = str2[:: - 1]\n    carry = 0\n    idx_cw46 = 0\n    list_621a = range(n1)\n    while idx_cw46 < len(list_621a):\n        i = list_621a[idx_cw46]\n        sum = ((ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry))\n        if sum < 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        carry = int(sum / 10)\n        idx_cw46 = idx_cw46 + 1\n    idx_jokg = 0\n    list_ie9n = range(n1, n2)\n    while idx_jokg < len(list_ie9n):\n        i = list_ie9n[idx_jokg]\n        sum = ((ord(str2[i]) - 48) + carry)\n        if sum < 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            str += chr(sum % -10 + 48)\n        else:\n            str += chr(sum % 10 + 48)\n        carry = (int)(sum / 10)\n        idx_jokg = idx_jokg + 1\n    if (carry) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        str += chr(carry + 48)\n    str = str[:: - 1]\n    return str", "id": "For2While_sample_from_SUM_TWO_LARGE_NUMBERS_to_268", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = 0\n    idx_3q5z = 0\n    list_k901 = range ( n )\n    while idx_3q5z < len(list_k901):\n        i = list_k901[idx_3q5z]\n        left = 0\n        right = 0\n        idx_st5x = 0\n        list_6jsc = range ( i - 1 , - 1 , - 1 )\n        while idx_st5x < len(list_6jsc):\n            j = list_6jsc[idx_st5x]\n            if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                left += 1\n            else :\n                break\n            idx_st5x = idx_st5x + 1\n        idx_jmek = 0\n        list_u3kn = range ( i + 1 , n )\n        while idx_jmek < len(list_u3kn):\n            j = list_u3kn[idx_jmek]\n            if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n                right += 1\n            else :\n                break\n            idx_jmek = idx_jmek + 1\n        sum += max ( right , left ) + 1\n        idx_3q5z = idx_3q5z + 1\n    return sum", "id": "For2While_sample_from_TEMPLE_OFFERINGS_to_269", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    idx_4vzy = 0\n    list_lo5w = range ( 1 , arr_size )\n    while idx_4vzy < len(list_lo5w):\n        i = list_lo5w[idx_4vzy]\n        if ( arr [ i ] > first ) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            first = arr [ i ]\n        idx_4vzy = idx_4vzy + 1\n    second = - sys.maxsize\n    idx_vqgf = 0\n    list_7biw = range ( 0 , arr_size )\n    while idx_vqgf < len(list_7biw):\n        i = list_7biw[idx_vqgf]\n        if ( arr [ i ] > second and arr [ i ] < first ) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            second = arr [ i ]\n        idx_vqgf = idx_vqgf + 1\n    third = - sys.maxsize\n    idx_iej7 = 0\n    list_xbd9 = range ( 0 , arr_size )\n    while idx_iej7 < len(list_xbd9):\n        i = list_xbd9[idx_iej7]\n        if ( arr [ i ] > third and arr [ i ] < second ) and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            third = arr [ i ]\n        idx_iej7 = idx_iej7 + 1\n    print ( \"The Third Largest\" , \"element is\" , third )", "id": "For2While_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_to_270", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    second = - sys.maxsize\n    third = - sys.maxsize\n    idx_jcg2 = 0\n    list_pire = range ( 1 , arr_size )\n    while idx_jcg2 < len(list_pire):\n        i = list_pire[idx_jcg2]\n        if ( arr [ i ] > first ) and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            third = second\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            third = second\n            second = arr [ i ]\n        elif ( arr [ i ] > third ) :\n            third = arr [ i ]\n        idx_jcg2 = idx_jcg2 + 1\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "For2While_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_271", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def countUnique ( mat , n , m ) :\n    rowsum = [ 0 ] * n\n    colsum = [ 0 ] * m\n    idx_ilmq = 0\n    list_bnd4 = range ( n )\n    while idx_ilmq < len(list_bnd4):\n        i = list_bnd4[idx_ilmq]\n        idx_vltq = 0\n        list_9zkx = range ( m )\n        while idx_vltq < len(list_9zkx):\n            j = list_9zkx[idx_vltq]\n            if ( mat [ i ] [ j ] != 0 ) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n                rowsum [ i ] += 1\n                colsum [ j ] += 1\n            idx_vltq = idx_vltq + 1\n        idx_ilmq = idx_ilmq + 1\n    uniquecount = 0\n    idx_jfyh = 0\n    list_36vs = range ( n )\n    while idx_jfyh < len(list_36vs):\n        i = list_36vs[idx_jfyh]\n        idx_urx8 = 0\n        list_xi49 = range ( m )\n        while idx_urx8 < len(list_xi49):\n            j = list_xi49[idx_urx8]\n            if ( mat [ i ] [ j ] != 0 and rowsum [ i ] == 1 and colsum [ j ] == 1 ) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n                uniquecount += 1\n            idx_urx8 = idx_urx8 + 1\n        idx_jfyh = idx_jfyh + 1\n    return uniquecount", "id": "For2While_sample_from_UNIQUE_CELLS_BINARY_MATRIX_to_272", "old_id": "UNIQUE_CELLS_BINARY_MATRIX"}
{"code": "def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    idx_dg0i = 0\n    list_w08m = range ( 0 , n , 1 )\n    while idx_dg0i < len(list_w08m):\n        i = list_w08m[idx_dg0i]\n        if ( str [ i ] == '1' ) and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            one_count += 1\n        else :\n            zero_count += 1\n        idx_dg0i = idx_dg0i + 1\n    if ( one_count % 2 == 0 ) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return zero_count\n    return one_count", "id": "For2While_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_273", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def countTransformation ( a , b ) :\n    n = len ( a )\n    m = len ( b )\n    if m == 0 and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return 1\n    dp = [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ]\n    idx_9ya2 = 0\n    list_ctnh = range ( m )\n    while idx_9ya2 < len(list_ctnh):\n        i = list_ctnh[idx_9ya2]\n        idx_8w2n = 0\n        list_xt6d = range ( i , n )\n        while idx_8w2n < len(list_xt6d):\n            j = list_xt6d[idx_8w2n]\n            if i == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n                if j == 0 :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = 1\n                    else :\n                        dp [ i ] [ j ] = 0\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            else :\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] )\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            idx_8w2n = idx_8w2n + 1\n        idx_9ya2 = idx_9ya2 + 1\n    return dp [ m - 1 ] [ n - 1 ]", "id": "For2While_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_274", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
