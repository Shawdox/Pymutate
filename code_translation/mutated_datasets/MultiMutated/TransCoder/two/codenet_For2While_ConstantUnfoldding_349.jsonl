{"code": "def search ( arr , n , x ) :\n    i = (7 + -7)\n    idx_n0vi = (61 + -61)\n    list_47ou = range ( i , n )\n    while idx_n0vi < len(list_47ou):\n        i = list_47ou[idx_n0vi]\n        if ( arr [ i ] == x ) :\n            return i\n        idx_n0vi = idx_n0vi + (49 + -48)\n    return - (50 + -49)", "id": "ConstantUnfoldding_sample_from_ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS_to_0", "old_id": "ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS"}
{"code": "def winner ( a , n , k ) :\n    if k >= n - (82 + -81) :\n        return n\n    best = (49 + -49)\n    times = (65 + -65)\n    idx_cb1x = (83 + -83)\n    list_9izs = range ( n )\n    while idx_cb1x < len(list_9izs):\n        i = list_9izs[idx_cb1x]\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = (14 + -13)\n        else :\n            times += (81 + -80)\n        if times >= k :\n            return best\n        idx_cb1x = idx_cb1x + (10 + -9)\n    return best", "id": "ConstantUnfoldding_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_1", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    idx_9zvq = (62 + -62)\n    list_c74s = range ( start , end + (91 + -90) )\n    while idx_9zvq < len(list_c74s):\n        i = list_c74s[idx_9zvq]\n        if arr [ i ] in frequency.keys ( ) :\n            frequency [ arr [ i ] ] += (38 + -37)\n        else :\n            frequency [ arr [ i ] ] = (6 + -5)\n        idx_9zvq = idx_9zvq + (78 + -77)\n    count = (91 + -91)\n    idx_uexd = (58 + -58)\n    list_6fbj = frequency\n    while idx_uexd < len(list_6fbj):\n        x = list_6fbj[idx_uexd]\n        if x == frequency [ x ] :\n            count += (14 + -13)\n        idx_uexd = idx_uexd + (93 + -92)\n    return count", "id": "ConstantUnfoldding_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_2", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def count_of_ways ( n ) :\n    count = (36 + -36)\n    idx_b438 = (75 + -75)\n    list_z64q = range ( (91 + -91) , n + (23 + -22) )\n    while idx_b438 < len(list_z64q):\n        i = list_z64q[idx_b438]\n        idx_qzt5 = (4 + -4)\n        list_vaon = range ( (62 + -62) , n + (5 + -4) )\n        while idx_qzt5 < len(list_vaon):\n            j = list_vaon[idx_qzt5]\n            idx_i2os = (82 + -82)\n            list_dyun = range ( (97 + -97) , n + (27 + -26) )\n            while idx_i2os < len(list_dyun):\n                k = list_dyun[idx_i2os]\n                if ( i + j + k == n ) :\n                    count = count + (91 + -90)\n                idx_i2os = idx_i2os + (63 + -62)\n            idx_qzt5 = idx_qzt5 + (4 + -3)\n        idx_b438 = idx_b438 + (69 + -68)\n    return count", "id": "ConstantUnfoldding_sample_from_BREAK_NUMBER_THREE_PARTS_to_3", "old_id": "BREAK_NUMBER_THREE_PARTS"}
{"code": "def encrypt ( text , s ) :\n    result = \"\"\n    idx_l40w = (64 + -64)\n    list_2nxk = range ( len ( text ) )\n    while idx_l40w < len(list_2nxk):\n        i = list_2nxk[idx_l40w]\n        char = text [ i ]\n        if ( char.isupper ( ) ) :\n            result += chr ( ( ord ( char ) + s - (44 + 21) ) % (63 + -37) + (38 + 27) )\n        else :\n            result += chr ( ( ord ( char ) + s - (60 + 37) ) % (65 + -39) + (47 + 50) )\n        idx_l40w = idx_l40w + (22 + -21)\n    return result", "id": "ConstantUnfoldding_sample_from_CAESAR_CIPHER_to_4", "old_id": "CAESAR_CIPHER"}
{"code": "def calcMaxValue ( str ) :\n    res = ord ( str [ (41 + -41) ] ) - (43 + 5)\n    idx_xc3e = (52 + -52)\n    list_8bnh = range ( (39 + -38) , len ( str ) )\n    while idx_xc3e < len(list_8bnh):\n        i = list_8bnh[idx_xc3e]\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < (6 + -4) ) :\n            res += ord ( str [ i ] ) - (71 + -23)\n        else :\n            res += ord ( str [ i ] ) - (2 + 46)\n        idx_xc3e = idx_xc3e + (37 + -36)\n    return res", "id": "ConstantUnfoldding_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_5", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = \"0\"\n    Sum = (90 + -90)\n    idx_xofv = (63 + -63)\n    list_ugf8 = str\n    while idx_xofv < len(list_ugf8):\n        ch = list_ugf8[idx_xofv]\n        if ( ch.isdigit ( ) ) :\n            temp += ch\n        else :\n            Sum += int ( temp )\n            temp = \"0\"\n        idx_xofv = idx_xofv + (66 + -65)\n    return Sum + int ( temp )", "id": "ConstantUnfoldding_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_6", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = (38 + -38)\n    ones = (28 + -28)\n    idx_p7zc = (51 + -51)\n    list_ipwr = range ( (7 + -7) , len ( str ) )\n    while idx_p7zc < len(list_ipwr):\n        i = list_ipwr[idx_p7zc]\n        ch = str [ i ]\n        if ( ch == '0' ) :\n            zeros = zeros + (44 + -43)\n        else :\n            ones = ones + (53 + -52)\n        idx_p7zc = idx_p7zc + (75 + -74)\n    return ( zeros == (91 + -90) or ones == (71 + -70) )", "id": "ConstantUnfoldding_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_7", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isOneFlip ( str ) :\n    sum = (99 + -99)\n    n = len ( str )\n    idx_h61r = (18 + -18)\n    list_aqr6 = range ( (88 + -88) , n )\n    while idx_h61r < len(list_aqr6):\n        i = list_aqr6[idx_h61r]\n        sum += ord ( str [ i ] ) - ord ( '0' )\n        idx_h61r = idx_h61r + (69 + -68)\n    return ( sum == n - (67 + -66) or sum == (19 + -18) )", "id": "ConstantUnfoldding_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_1_to_8", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP_1"}
{"code": "def isMajority ( a, n ) :\n    mp = { }\n    idx_x9qm = (18 + -18)\n    list_gdw6 = range(n)\n    while idx_x9qm < len(list_gdw6):\n        i = list_gdw6[idx_x9qm]\n        if a[i] in mp : mp [ a[i] ] += (47 + -46)\n        else : mp [ a[i] ] = (11 + -10)\n        idx_x9qm = idx_x9qm + (83 + -82)\n    idx_e03s = (76 + -76)\n    list_2ykx = mp\n    while idx_e03s < len(list_2ykx):\n        x = list_2ykx[idx_e03s]\n        if mp [ x ] >= len ( a ) // (72 + -70) :\n            return True\n        idx_e03s = idx_e03s + (7 + -6)\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_9", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def isInorder ( arr , n ) :\n    if ( n == (55 + -55) or n == (59 + -58) ) :\n        return True\n    idx_yxk3 = (58 + -58)\n    list_5xmv = range ( (71 + -70) , n , (71 + -70) )\n    while idx_yxk3 < len(list_5xmv):\n        i = list_5xmv[idx_yxk3]\n        if ( arr [ i - (56 + -55) ] > arr [ i ] ) :\n            return False\n        idx_yxk3 = idx_yxk3 + (69 + -68)\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT_to_10", "old_id": "CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT"}
{"code": "def isDivisible ( str , k ) :\n    n = len ( str )\n    c = (82 + -82)\n    idx_okva = (11 + -11)\n    list_xq9i = range ( (70 + -70) , k )\n    while idx_okva < len(list_xq9i):\n        i = list_xq9i[idx_okva]\n        if ( str [ n - i - (73 + -72) ] == '0' ) :\n            c += (2 + -1)\n        idx_okva = idx_okva + (1 + 0)\n    return ( c == k )", "id": "ConstantUnfoldding_sample_from_CHECK_DIVISIBILITY_BINARY_STRING_2K_to_11", "old_id": "CHECK_DIVISIBILITY_BINARY_STRING_2K"}
{"code": "def isDivisible999 ( num ) :\n    n = len ( num )\n    if ( n == (29 + -29) and num [ (27 + -27) ] == '0' ) :\n        return True\n    if ( ( n % (15 + -12) ) == (42 + -41) ) :\n        num = \"00\" + num\n    if ( ( n % (48 + -45) ) == (72 + -70) ) :\n        num = \"0\" + num\n    gSum = (84 + -84)\n    idx_7dyi = (77 + -77)\n    list_him0 = range ( (66 + -66) , n , (46 + -43) )\n    while idx_7dyi < len(list_him0):\n        i = list_him0[idx_7dyi]\n        group = (38 + -38)\n        group += ( ord ( num [ i ] ) - (96 + -48) ) * (10 + 90)\n        group += ( ord ( num [ i + (95 + -94) ] ) - (48 + 0) ) * (20 + -10)\n        group += ( ord ( num [ i + (85 + -83) ] ) - (68 + -20) )\n        gSum += group\n        idx_7dyi = idx_7dyi + (7 + -6)\n    if ( gSum > (9 + 991) ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == (60 + 939) )", "id": "ConstantUnfoldding_sample_from_CHECK_DIVISIBILITY_LARGE_NUMBER_999_to_12", "old_id": "CHECK_DIVISIBILITY_LARGE_NUMBER_999"}
{"code": "def check ( s ) :\n    if ( len ( s ) >= (69 + -59) ) :\n        return True\n    idx_am8x = (66 + -66)\n    list_g3f7 = range ( (34 + -33) , len ( s ) )\n    while idx_am8x < len(list_g3f7):\n        i = list_g3f7[idx_am8x]\n        idx_qsjv = (45 + -45)\n        list_yfi7 = range ( i + (77 + -76) , len ( s ) )\n        while idx_qsjv < len(list_yfi7):\n            j = list_yfi7[idx_qsjv]\n            idx_gbyj = (27 + -27)\n            list_iv54 = range ( j + (23 + -22) , len ( s ) )\n            while idx_gbyj < len(list_iv54):\n                k = list_iv54[idx_gbyj]\n                s1 = s [ (32 + -32) : i ]\n                s2 = s [ i : j ]\n                s3 = s [ j : k ]\n                s4 = s [ k : len ( s ) ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n                idx_gbyj = idx_gbyj + (20 + -19)\n            idx_qsjv = idx_qsjv + (60 + -59)\n        idx_am8x = idx_am8x + (57 + -56)\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS_to_13", "old_id": "CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = (1 + -1)\n    count_even = (41 + -41)\n    idx_b0gt = (94 + -94)\n    list_3hmb = range ( n )\n    while idx_b0gt < len(list_3hmb):\n        i = list_3hmb[idx_b0gt]\n        if ( a [ i ] & (85 + -84) ) :\n            count_odd += (49 + -48)\n        else :\n            count_even += (54 + -53)\n        idx_b0gt = idx_b0gt + (92 + -91)\n    if ( count_odd % (92 + -90) and count_even % (12 + -10) ) :\n        return False\n    else :\n        return True", "id": "ConstantUnfoldding_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_14", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def areConsecutive ( arr , n ) :\n    if ( n < (57 + -56) ) :\n        return False\n    Min = min ( arr )\n    Max = max ( arr )\n    if ( Max - Min + (53 + -52) == n ) :\n        visited = [ False for i in range ( n ) ]\n        idx_9qlc = (54 + -54)\n        list_b10l = range ( n )\n        while idx_9qlc < len(list_b10l):\n            i = list_b10l[idx_9qlc]\n            if ( visited [ arr [ i ] - Min ] != False ) :\n                return False\n            visited [ arr [ i ] - Min ] = True\n            idx_9qlc = idx_9qlc + (68 + -67)\n        return True\n    return False", "id": "ConstantUnfoldding_sample_from_CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE_to_15", "old_id": "CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE"}
{"code": "def canRepresentBST ( pre, n ) :\n    s = [ ]\n    root = -(7 + 2147483641)\n    idx_xdth = (97 + -97)\n    list_bmlh = range(n)\n    while idx_xdth < len(list_bmlh):\n        i = list_bmlh[idx_xdth]\n        if pre[i] < root :\n            return False\n        while ( len ( s ) > (78 + -78) and s [ - (25 + -24) ] < pre[i] ) :\n            root = s.pop ( )\n        s.append ( pre[i] )\n        idx_xdth = idx_xdth + (90 + -89)\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE_to_16", "old_id": "CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_TREE"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = (73 + -73)\n    tenCount = (80 + -80)\n    idx_ok1j = (20 + -20)\n    list_knad = range ( n )\n    while idx_ok1j < len(list_knad):\n        i = list_knad[idx_ok1j]\n        if ( notes [ i ] == (51 + -46) ) :\n            fiveCount += (5 + -4)\n        elif ( notes [ i ] == (53 + -43) ) :\n            if ( fiveCount > (8 + -8) ) :\n                fiveCount -= (17 + -16)\n                tenCount += (92 + -91)\n            else :\n                return (76 + -76)\n        else :\n            if ( fiveCount > (53 + -53) and tenCount > (62 + -62) ) :\n                fiveCount -= (36 + -35)\n                tenCount -= (55 + -54)\n            elif ( fiveCount >= (5 + -2) ) :\n                fiveCount -= (58 + -55)\n            else :\n                return (8 + -8)\n        idx_ok1j = idx_ok1j + (52 + -51)\n    return (11 + -10)", "id": "ConstantUnfoldding_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_17", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def check ( str ) :\n    n = len ( str )\n    oddDigSum = (74 + -74)\n    evenDigSum = (10 + -10)\n    idx_cj6q = (72 + -72)\n    list_a746 = range ( (76 + -76) , n )\n    while idx_cj6q < len(list_a746):\n        i = list_a746[idx_cj6q]\n        if ( i % (55 + -53) == (41 + -41) ) :\n            oddDigSum = oddDigSum + ( ord ( str [ i ] ) - (20 + 28) )\n        else :\n            evenDigSum = evenDigSum + ( ord ( str [ i ] ) - (13 + 35) )\n        idx_cj6q = idx_cj6q + (38 + -37)\n    return ( ( oddDigSum - evenDigSum ) % (37 + -26) == (34 + -34) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_18", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == (30 + -29) and num [ (1 + -1) ] == '0' ) :\n        return True\n    if ( length % (17 + -14) == (54 + -53) ) :\n        num = str ( num ) + \"00\"\n        length += (37 + -35)\n    elif ( length % (12 + -9) == (70 + -68) ) :\n        num = str ( num ) + \"0\"\n        length += (45 + -44)\n    sum = (41 + -41)\n    p = (18 + -17)\n    idx_41px = (95 + -95)\n    list_40wv = range ( length - (13 + -12) , - (7 + -6) , - (9 + -6) )\n    while idx_41px < len(list_40wv):\n        i = list_40wv[idx_41px]\n        group = (60 + -60)\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= (66 + -65)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (52 + -42)\n        i -= (90 + -89)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (91 + 9)\n        sum = sum + group * p\n        p *= ( - (26 + -25) )\n        idx_41px = idx_41px + (73 + -72)\n    sum = abs ( sum )\n    return ( sum % (62 + -49) == (18 + -18) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_19", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def check ( str ) :\n    n = len ( str )\n    digitSum = (3 + -3)\n    idx_mvg4 = (23 + -23)\n    list_456a = range ( (3 + -3) , n )\n    while idx_mvg4 < len(list_456a):\n        i = list_456a[idx_mvg4]\n        digitSum = digitSum + ord ( str [ i ] ) - (44 + 4)\n        idx_mvg4 = idx_mvg4 + (86 + -85)\n    return ( digitSum % (50 + -41) == (42 + -42) )", "id": "ConstantUnfoldding_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT_to_20", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT"}
{"code": "def check ( s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    dp = ( [ [ False for i in range ( m + (51 + -50) ) ] for i in range ( n + (46 + -45) ) ] )\n    dp [ (49 + -49) ] [ (77 + -77) ] = True\n    idx_5t0q = (68 + -68)\n    list_lc7u = range ( len ( s1 ) )\n    while idx_5t0q < len(list_lc7u):\n        i = list_lc7u[idx_5t0q]\n        idx_p32i = (34 + -34)\n        list_clq0 = range ( len ( s2 ) + (78 + -77) )\n        while idx_p32i < len(list_clq0):\n            j = list_clq0[idx_p32i]\n            if ( dp [ i ] [ j ] ) :\n                if ( ( j < len ( s2 ) and ( s1 [ i ].upper ( ) == s2 [ j ] ) ) ) :\n                    dp [ i + (21 + -20) ] [ j + (60 + -59) ] = True\n                if ( s1 [ i ].isupper ( ) == False ) :\n                    dp [ i + (80 + -79) ] [ j ] = True\n            idx_p32i = idx_p32i + (50 + -49)\n        idx_5t0q = idx_5t0q + (40 + -39)\n    return ( dp [ n ] [ m ] )", "id": "ConstantUnfoldding_sample_from_CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER_to_21", "old_id": "CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == (38 + -37) ) :\n        return True\n    i = (47 + -46)\n    idx_p8ov = (30 + -30)\n    list_r87y = range ( (6 + -5) , n )\n    while idx_p8ov < len(list_r87y):\n        i = list_r87y[idx_p8ov]\n        if arr [ i - (78 + -77) ] >= arr [ i ] :\n            break\n        else:\n            if ( i == n ) :\n                return True\n        idx_p8ov = idx_p8ov + (49 + -48)\n    j = i\n    i += (79 + -78)\n    while ( arr [ j ] < arr [ j - (88 + -87) ] ) :\n        if ( i > (81 + -80) and arr [ j ] < arr [ i - (33 + -31) ] ) :\n            return False\n        j += (12 + -11)\n    if ( j == n ) :\n        return True\n    k = j\n    if ( arr [ k ] < arr [ i - (20 + -19) ] ) :\n        return False\n    while ( k > (67 + -66) and k < n ) :\n        if ( arr [ k ] < arr [ k - (65 + -64) ] ) :\n            return False\n        k += (32 + -31)\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_22", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def isAnBn ( s ) :\n    n = len ( s )\n    idx_qpf6 = (47 + -47)\n    list_truy = range ( n )\n    while idx_qpf6 < len(list_truy):\n        i = list_truy[idx_qpf6]\n        if ( s [ i ] != 'a' ) :\n            break\n        idx_qpf6 = idx_qpf6 + (95 + -94)\n    if ( i * (68 + -66) != n ) :\n        return False\n    idx_f35x = (36 + -36)\n    list_kx09 = range ( i , n )\n    while idx_f35x < len(list_kx09):\n        j = list_kx09[idx_f35x]\n        if ( s [ j ] != 'b' ) :\n            return False\n        idx_f35x = idx_f35x + (63 + -62)\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT_to_23", "old_id": "CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT"}
{"code": "def areSumSame ( a , n , m ) :\n    sum1 = (48 + -48)\n    sum2 = (86 + -86)\n    idx_9kmn = (16 + -16)\n    list_v987 = range ( (48 + -48) , n )\n    while idx_9kmn < len(list_v987):\n        i = list_v987[idx_9kmn]\n        sum1 = (5 + -5)\n        sum2 = (92 + -92)\n        idx_nojw = (90 + -90)\n        list_ue98 = range ( (1 + -1) , m )\n        while idx_nojw < len(list_ue98):\n            j = list_ue98[idx_nojw]\n            sum1 += a [ i ] [ j ]\n            sum2 += a [ j ] [ i ]\n            idx_nojw = idx_nojw + (27 + -26)\n        if ( sum1 == sum2 ) :\n            return (45 + -44)\n        idx_9kmn = idx_9kmn + (75 + -74)\n    return (49 + -49)", "id": "ConstantUnfoldding_sample_from_CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX_to_24", "old_id": "CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX"}
{"code": "def checkIsAP ( arr , n ) :\n    if ( n == (2 + -1) ) : return True\n    arr.sort ( )\n    d = arr [ (82 + -81) ] - arr [ (17 + -17) ]\n    idx_m41v = (61 + -61)\n    list_n9c1 = range ( (7 + -5) , n )\n    while idx_m41v < len(list_n9c1):\n        i = list_n9c1[idx_m41v]\n        if ( arr [ i ] - arr [ i - (96 + -95) ] != d ) :\n            return False\n        idx_m41v = idx_m41v + (89 + -88)\n    return True", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY_to_25", "old_id": "CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY"}
{"code": "def check ( degree , n ) :\n    deg_sum = (39 + -39)\n    idx_o106 = (78 + -78)\n    list_buli = range(n)\n    while idx_o106 < len(list_buli):\n        i = list_buli[idx_o106]\n        deg_sum += degree[i]\n        idx_o106 = idx_o106 + (77 + -76)\n    if ( (13 + -11) * ( n - (79 + -78) ) == deg_sum ) :\n        return True\n    else :\n        return False", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_26", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == (97 + -97) and num [ (33 + -33) ] == '\\n' ) :\n        return (50 + -49)\n    if ( n % (45 + -42) == (74 + -73) ) :\n        num = str ( num ) + \"00\"\n        n += (33 + -31)\n    elif ( n % (45 + -42) == (82 + -80) ) :\n        num = str ( num ) + \"0\"\n        n += (92 + -91)\n    GSum = (70 + -70)\n    p = (62 + -61)\n    idx_b4lf = (45 + -45)\n    list_l7hg = range ( n - (53 + -52) , - (32 + -31) , - (79 + -78) )\n    while idx_b4lf < len(list_l7hg):\n        i = list_l7hg[idx_b4lf]\n        group = (27 + -27)\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= (72 + -71)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (79 + -69)\n        i -= (25 + -24)\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * (86 + 14)\n        GSum = GSum + group * p\n        p *= ( - (31 + -30) )\n        idx_b4lf = idx_b4lf + (88 + -87)\n    return ( GSum % (3 + 4) == (52 + -52) )", "id": "ConstantUnfoldding_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_27", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def spiralFill ( m , n , a ) :\n    val = (11 + -10)\n    k , l = (23 + -23) , (27 + -27)\n    while ( k < m and l < n ) :\n        idx_1rmw = (72 + -72)\n        list_9fia = range ( l , n )\n        while idx_1rmw < len(list_9fia):\n            i = list_9fia[idx_1rmw]\n            a [ k ] [ i ] = val\n            val += (1 + 0)\n            idx_1rmw = idx_1rmw + (96 + -95)\n        k += (33 + -32)\n        idx_gve4 = (82 + -82)\n        list_364q = range ( k , m )\n        while idx_gve4 < len(list_364q):\n            i = list_364q[idx_gve4]\n            a [ i ] [ n - (19 + -18) ] = val\n            val += (59 + -58)\n            idx_gve4 = idx_gve4 + (71 + -70)\n        n -= (33 + -32)\n        if ( k < m ) :\n            idx_etiq = (10 + -10)\n            list_yrzv = range ( n - (20 + -19) , l - (29 + -28) , - (73 + -72) )\n            while idx_etiq < len(list_yrzv):\n                i = list_yrzv[idx_etiq]\n                a [ m - (36 + -35) ] [ i ] = val\n                val += (22 + -21)\n                idx_etiq = idx_etiq + (12 + -11)\n            m -= (93 + -92)\n        if ( l < n ) :\n            idx_hpzk = (71 + -71)\n            list_bjly = range ( m - (39 + -38) , k - (54 + -53) , - (91 + -90) )\n            while idx_hpzk < len(list_bjly):\n                i = list_bjly[idx_hpzk]\n                a [ i ] [ l ] = val\n                val += (72 + -71)\n                idx_hpzk = idx_hpzk + (32 + -31)\n            l += (33 + -32)", "id": "ConstantUnfoldding_sample_from_CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY_to_28", "old_id": "CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SPIRAL_WAY"}
{"code": "def nCrModp ( n , r , p ) :\n    C = [ (99 + -99) for i in range ( r + (30 + -29) ) ]\n    C [ (25 + -25) ] = (93 + -92)\n    idx_yfbx = (12 + -12)\n    list_oagn = range ( (3 + -2) , n + (29 + -28) )\n    while idx_yfbx < len(list_oagn):\n        i = list_oagn[idx_yfbx]\n        idx_zhyx = (20 + -20)\n        list_sw8i = range ( min ( i , r ) , (7 + -7) , - (81 + -80) )\n        while idx_zhyx < len(list_sw8i):\n            j = list_sw8i[idx_zhyx]\n            C [ j ] = ( C [ j ] + C [ j - (29 + -28) ] ) % p\n            idx_zhyx = idx_zhyx + (25 + -24)\n        idx_yfbx = idx_yfbx + (88 + -87)\n    return C [ r ]", "id": "ConstantUnfoldding_sample_from_COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION_to_29", "old_id": "COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION"}
{"code": "def minRemove ( arr , n ) :\n    LIS = [ (96 + -96) for i in range ( n ) ]\n    len = (14 + -14)\n    idx_kn4o = (32 + -32)\n    list_wyhi = range ( n )\n    while idx_kn4o < len(list_wyhi):\n        i = list_wyhi[idx_kn4o]\n        LIS [ i ] = (63 + -62)\n        idx_kn4o = idx_kn4o + (83 + -82)\n    idx_oug1 = (12 + -12)\n    list_ahld = range ( (37 + -36) , n )\n    while idx_oug1 < len(list_ahld):\n        i = list_ahld[idx_oug1]\n        idx_5ozb = (58 + -58)\n        list_8l4q = range ( i )\n        while idx_5ozb < len(list_8l4q):\n            j = list_8l4q[idx_5ozb]\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + (77 + -76) )\n            idx_5ozb = idx_5ozb + (69 + -68)\n        len = max ( len , LIS [ i ] )\n        idx_oug1 = idx_oug1 + (60 + -59)\n    return ( n - len )", "id": "ConstantUnfoldding_sample_from_CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES_to_30", "old_id": "CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES"}
{"code": "def numberOfWays ( x ) :\n    dp = [ (57 + -57) for _ in range (x + (69 + -68))]\n    dp[(90 + -90)] = dp[(75 + -74)] = (58 + -57)\n    idx_wn9v = (78 + -78)\n    list_5icr = range((18 + -16), x + (98 + -97))\n    while idx_wn9v < len(list_5icr):\n        i = list_5icr[idx_wn9v]\n        dp[i] = dp[i - (89 + -88)] + (i - (44 + -43)) * dp[i - (88 + -86)]\n        idx_wn9v = idx_wn9v + (40 + -39)\n    return dp[x]", "id": "ConstantUnfoldding_sample_from_COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1_to_31", "old_id": "COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1"}
{"code": "def countBT ( h ) :\n    MOD = (98 + 999999909)\n    dp = [ (17 + -17) for i in range ( h + (14 + -13) ) ]\n    dp [ (18 + -18) ] = (17 + -16)\n    dp [ (93 + -92) ] = (91 + -90)\n    idx_x6bo = (90 + -90)\n    list_6isb = range ( (85 + -83) , h + (38 + -37) )\n    while idx_x6bo < len(list_6isb):\n        i = list_6isb[idx_x6bo]\n        dp [ i ] = ( dp [ i - (66 + -65) ] * ( ( (29 + -27) * dp [ i - (55 + -53) ] ) % MOD + dp [ i - (85 + -84) ] ) % MOD ) % MOD\n        idx_x6bo = idx_x6bo + (49 + -48)\n    return dp [ h ]", "id": "ConstantUnfoldding_sample_from_COUNT_BALANCED_BINARY_TREES_HEIGHT_H_to_32", "old_id": "COUNT_BALANCED_BINARY_TREES_HEIGHT_H"}
{"code": "def countStrings ( n , k ) :\n    dp = [ [ [ (23 + -23) , (80 + -80) ] for __ in range ( k + (78 + -77) ) ] for _ in range ( n + (53 + -52) ) ]\n    dp [ (23 + -22) ] [ (62 + -62) ] [ (8 + -8) ] = (97 + -96)\n    dp [ (11 + -10) ] [ (56 + -56) ] [ (53 + -52) ] = (13 + -12)\n    idx_aui7 = (81 + -81)\n    list_emhl = range ( (95 + -93) , n + (37 + -36) )\n    while idx_aui7 < len(list_emhl):\n        i = list_emhl[idx_aui7]\n        idx_sl60 = (5 + -5)\n        list_od09 = range ( k + (87 + -86) )\n        while idx_sl60 < len(list_od09):\n            j = list_od09[idx_sl60]\n            if j >= i:\n                break\n            else:\n                dp [ i ] [ j ] [ (28 + -28) ] = ( dp [ i - (7 + -6) ] [ j ] [ (75 + -75) ] + dp [ i - (5 + -4) ] [ j ] [ (80 + -79) ] )\n                dp [ i ] [ j ] [ (23 + -22) ] = dp [ i - (72 + -71) ] [ j ] [ (51 + -51) ]\n                if j >= (42 + -41) :\n                    dp [ i ] [ j ] [ (31 + -30) ] += dp [ i - (63 + -62) ] [ j - (65 + -64) ] [ (31 + -30) ]\n            idx_sl60 = idx_sl60 + (47 + -46)\n        idx_aui7 = idx_aui7 + (60 + -59)\n    return dp [ n ] [ k ] [ (43 + -43) ] + dp [ n ] [ k ] [ (95 + -94) ]", "id": "ConstantUnfoldding_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_33", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def countPairs ( str ) :\n    result = (84 + -84) ;\n    n = len ( str )\n    idx_ojyi = (75 + -75)\n    list_ps82 = range ( (28 + -28) , n )\n    while idx_ojyi < len(list_ps82):\n        i = list_ps82[idx_ojyi]\n        idx_oj9p = (92 + -92)\n        list_jdmk = range ( i + (89 + -88) , n )\n        while idx_oj9p < len(list_jdmk):\n            j = list_jdmk[idx_oj9p]\n            if ( abs ( ord ( str [ i ] ) - ord ( str [ j ] ) ) == abs ( i - j ) ) :\n                result += (23 + -22) ;\n            idx_oj9p = idx_oj9p + (76 + -75)\n        idx_ojyi = idx_ojyi + (18 + -17)\n    return result ;", "id": "ConstantUnfoldding_sample_from_COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_to_34", "old_id": "COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS"}
{"code": "def countDer ( n ) :\n    der = [ (71 + -71) for i in range ( n + (15 + -14) ) ]\n    der [ (56 + -56) ] = (42 + -41)\n    der [ (8 + -7) ] = (14 + -14)\n    der [ (61 + -59) ] = (22 + -21)\n    idx_h8i9 = (50 + -50)\n    list_ly7j = range ( (35 + -32) , n + (45 + -44) )\n    while idx_h8i9 < len(list_ly7j):\n        i = list_ly7j[idx_h8i9]\n        der [ i ] = ( i - (51 + -50) ) * ( der [ i - (1 + 0) ] + der [ i - (53 + -51) ] )\n        idx_h8i9 = idx_h8i9 + (64 + -63)\n    return der [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1_to_35", "old_id": "COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_IN_ITS_ORIGINAL_POSITION_1"}
{"code": "def findDigits ( n ) :\n    if ( n < (62 + -62) ) :\n        return (99 + -99)\n    if ( n <= (89 + -88) ) :\n        return (75 + -74)\n    digits = (46 + -46)\n    idx_5eud = (32 + -32)\n    list_mk5o = range ( (89 + -87) , n + (25 + -24) )\n    while idx_5eud < len(list_mk5o):\n        i = list_mk5o[idx_5eud]\n        digits += math.log10 ( i )\n        idx_5eud = idx_5eud + (63 + -62)\n    return math.floor ( digits ) + (67 + -66)", "id": "ConstantUnfoldding_sample_from_COUNT_DIGITS_FACTORIAL_SET_1_to_36", "old_id": "COUNT_DIGITS_FACTORIAL_SET_1"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return (40 + -40)\n    mat = [ [ (16 + -16) for _ in range ( n + (22 + -21) ) ] for __ in range ( m + (61 + -60) ) ]\n    idx_79zh = (99 + -99)\n    list_6i3j = range ( (33 + -32) , m + (11 + -10) )\n    while idx_79zh < len(list_6i3j):\n        i = list_6i3j[idx_79zh]\n        mat [ i ] [ (13 + -13) ] = (49 + -49)\n        idx_79zh = idx_79zh + (41 + -40)\n    idx_ryc5 = (3 + -3)\n    list_bkmp = range ( n + (11 + -10) )\n    while idx_ryc5 < len(list_bkmp):\n        j = list_bkmp[idx_ryc5]\n        mat [ (44 + -44) ] [ j ] = (5 + -4)\n        idx_ryc5 = idx_ryc5 + (72 + -71)\n    idx_n5rk = (26 + -26)\n    list_rbpj = range ( (71 + -70) , m + (11 + -10) )\n    while idx_n5rk < len(list_rbpj):\n        i = list_rbpj[idx_n5rk]\n        idx_2nba = (53 + -53)\n        list_3f2i = range ( (26 + -25) , n + (14 + -13) )\n        while idx_2nba < len(list_3f2i):\n            j = list_3f2i[idx_2nba]\n            if T [ i - (41 + -40) ] != S [ j - (59 + -58) ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - (97 + -96) ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - (62 + -61) ] + mat [ i - (13 + -12) ] [ j - (75 + -74) ] )\n            idx_2nba = idx_2nba + (56 + -55)\n        idx_n5rk = idx_n5rk + (65 + -64)\n    return mat [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_37", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def count ( n , x ) :\n    cnt = (44 + -44)\n    idx_ybe9 = (12 + -12)\n    list_7mrx = range ( (28 + -27) , n + (70 + -69) )\n    while idx_ybe9 < len(list_7mrx):\n        i = list_7mrx[idx_ybe9]\n        if i <= x :\n            if x // i <= n and x % i == (87 + -87) :\n                cnt += (95 + -94)\n        idx_ybe9 = idx_ybe9 + (73 + -72)\n    return cnt", "id": "ConstantUnfoldding_sample_from_COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX_to_38", "old_id": "COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX"}
{"code": "def countSeq ( n ) :\n    nCr = (50 + -49)\n    res = (23 + -22)\n    idx_hm5w = (71 + -71)\n    list_2sat = range ( (46 + -45) , n + (21 + -20) )\n    while idx_hm5w < len(list_2sat):\n        r = list_2sat[idx_hm5w]\n        nCr = int ( ( nCr * ( n + (7 + -6) - r ) ) / r )\n        res += nCr * nCr \n        idx_hm5w = idx_hm5w + (59 + -58)\n    return res ", "id": "ConstantUnfoldding_sample_from_COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1_to_39", "old_id": "COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND_SECOND_HALF_BITS_1"}
{"code": "def countPairs ( arr , n ) :\n    ans = (10 + -10)\n    idx_igx3 = (23 + -23)\n    list_jq5z = range ( (85 + -85) , n )\n    while idx_igx3 < len(list_jq5z):\n        i = list_jq5z[idx_igx3]\n        idx_yck9 = (30 + -30)\n        list_okay = range ( i + (25 + -24) , n )\n        while idx_yck9 < len(list_okay):\n            j = list_okay[idx_yck9]\n            if ( arr [ i ] == arr [ j ] ) :\n                ans += (34 + -33)\n            idx_yck9 = idx_yck9 + (1 + 0)\n        idx_igx3 = idx_igx3 + (57 + -56)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_to_40", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    idx_3mze = (66 + -66)\n    list_prlk = range ( n )\n    while idx_3mze < len(list_prlk):\n        i = list_prlk[idx_3mze]\n        if arr [ i ] in mp.keys ( ) :\n            mp [ arr [ i ] ] += (84 + -83)\n        else :\n            mp [ arr [ i ] ] = (67 + -66)\n        idx_3mze = idx_3mze + (29 + -28)\n    ans = (43 + -43)\n    idx_dej2 = (45 + -45)\n    list_m2l3 = mp\n    while idx_dej2 < len(list_m2l3):\n        it = list_m2l3[idx_dej2]\n        count = mp [ it ]\n        ans += ( count * ( count - (62 + -61) ) ) // (49 + -47)\n        idx_dej2 = idx_dej2 + (8 + -7)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_41", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def getInvCount ( arr , n ) :\n    invcount = (30 + -30)\n    idx_fdl6 = (24 + -24)\n    list_fujd = range ( (35 + -34) , n - (11 + -10) )\n    while idx_fdl6 < len(list_fujd):\n        i = list_fujd[idx_fdl6]\n        small = (91 + -91)\n        idx_u2ys = (91 + -91)\n        list_mz8g = range ( i + (95 + -94) , n )\n        while idx_u2ys < len(list_mz8g):\n            j = list_mz8g[idx_u2ys]\n            if ( arr [ i ] > arr [ j ] ) :\n                small += (38 + -37)\n            idx_u2ys = idx_u2ys + (53 + -52)\n        great = (72 + -72)\n        idx_qy6s = (51 + -51)\n        list_m1cu = range ( i - (30 + -29) , - (1 + 0) , - (82 + -81) )\n        while idx_qy6s < len(list_m1cu):\n            j = list_m1cu[idx_qy6s]\n            if ( arr [ i ] < arr [ j ] ) :\n                great += (67 + -66)\n            idx_qy6s = idx_qy6s + (25 + -24)\n        invcount += great * small\n        idx_fdl6 = idx_fdl6 + (76 + -75)\n    return invcount", "id": "ConstantUnfoldding_sample_from_COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1_to_42", "old_id": "COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1"}
{"code": "def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = (21 + -20)\n    idx_h6qm = (16 + -16)\n    list_v2c3 = range ( (3 + -3) , n - (59 + -58) )\n    while idx_h6qm < len(list_v2c3):\n        i = list_v2c3[idx_h6qm]\n        if ( x [ i ] + (93 + -92) != x [ i + (40 + -39) ] ) :\n            count = count + (72 + -71)\n        idx_h6qm = idx_h6qm + (10 + -9)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS_to_43", "old_id": "COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS"}
{"code": "def countNumber ( n ) :\n    result = (38 + -38)\n    idx_eqdn = (7 + -7)\n    list_zuod = range ( (29 + -28) , (75 + -65) )\n    while idx_eqdn < len(list_zuod):\n        i = list_zuod[idx_eqdn]\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += (100 + -99)\n        while len ( s ) != (2 + -2) :\n            tp = s [ - (11 + -10) ]\n            s.pop ( )\n            idx_xyg5 = (15 + -15)\n            list_yk2o = range ( tp % (9 + 1) , (68 + -58) )\n            while idx_xyg5 < len(list_yk2o):\n                j = list_yk2o[idx_xyg5]\n                x = tp * (95 + -85) + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += (30 + -29)\n                idx_xyg5 = idx_xyg5 + (65 + -64)\n        idx_eqdn = idx_eqdn + (99 + -98)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER_to_44", "old_id": "COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER"}
{"code": "def countNegative ( M , n , m ) :\n    count = (15 + -15)\n    idx_kdcp = (59 + -59)\n    list_8bj3 = range ( n )\n    while idx_kdcp < len(list_8bj3):\n        i = list_8bj3[idx_kdcp]\n        idx_ceta = (47 + -47)\n        list_2n0m = range ( m )\n        while idx_ceta < len(list_2n0m):\n            j = list_2n0m[idx_ceta]\n            if M [ i ] [ j ] < (93 + -93) :\n                count += (92 + -91)\n            else :\n                break\n            idx_ceta = idx_ceta + (92 + -91)\n        idx_kdcp = idx_kdcp + (33 + -32)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_45", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + (73 + -71) ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = (67 + -67)\n    idx_3p2o = (99 + -99)\n    list_om0b = range ( min ( x , y ) , n + (22 + -21) )\n    while idx_3p2o < len(list_om0b):\n        i = list_om0b[idx_3p2o]\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + (12 + -11)\n        idx_3p2o = idx_3p2o + (35 + -34)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS_to_46", "old_id": "COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS"}
{"code": "def countStrings ( n ) :\n    a = [ (11 + -11) for i in range ( n ) ]\n    b = [ (87 + -87) for i in range ( n ) ]\n    a [ (68 + -68) ] = b [ (1 + -1) ] = (96 + -95)\n    idx_0w2c = (9 + -9)\n    list_jxd8 = range ( (52 + -51) , n )\n    while idx_0w2c < len(list_jxd8):\n        i = list_jxd8[idx_0w2c]\n        a [ i ] = a [ i - (82 + -81) ] + b [ i - (7 + -6) ]\n        b [ i ] = a [ i - (60 + -59) ]\n        idx_0w2c = idx_0w2c + (83 + -82)\n    return a [ n - (58 + -57) ] + b [ n - (63 + -62) ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S_to_47", "old_id": "COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S"}
{"code": "def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ (6 + -6) for i in range ( n ) ] for i in range ( k ) ]\n    idx_zn5r = (7 + -7)\n    list_wao5 = range ( n )\n    while idx_zn5r < len(list_wao5):\n        i = list_wao5[idx_zn5r]\n        dp [ (20 + -20) ] [ i ] = (88 + -87)\n        idx_zn5r = idx_zn5r + (4 + -3)\n    idx_4dji = (14 + -14)\n    list_smye = range ( (87 + -86) , k )\n    while idx_4dji < len(list_smye):\n        l = list_smye[idx_4dji]\n        idx_krxc = (97 + -97)\n        list_0zhi = range ( l , n )\n        while idx_krxc < len(list_0zhi):\n            i = list_0zhi[idx_krxc]\n            dp [ l ] [ i ] = (95 + -95)\n            idx_a89z = (99 + -99)\n            list_kxsg = range ( l - (98 + -97) , i )\n            while idx_a89z < len(list_kxsg):\n                j = list_kxsg[idx_a89z]\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - (51 + -50) ] [ j ]\n                idx_a89z = idx_a89z + (21 + -20)\n            idx_krxc = idx_krxc + (11 + -10)\n        idx_4dji = idx_4dji + (36 + -35)\n    Sum = (95 + -95)\n    idx_uphx = (49 + -49)\n    list_4lji = range ( k - (90 + -89) , n )\n    while idx_uphx < len(list_4lji):\n        i = list_4lji[idx_uphx]\n        Sum += dp [ k - (57 + -56) ] [ i ]\n        idx_uphx = idx_uphx + (81 + -80)\n    return Sum", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K_to_48", "old_id": "COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K"}
{"code": "def countOccurrences ( arr , n , x ) :\n    res = (6 + -6)\n    idx_hdpt = (81 + -81)\n    list_qhdl = range ( n )\n    while idx_hdpt < len(list_qhdl):\n        i = list_qhdl[idx_hdpt]\n        if x == arr [ i ] :\n            res += (64 + -63)\n        idx_hdpt = idx_hdpt + (4 + -3)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY_to_49", "old_id": "COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY"}
{"code": "def possibleStrings ( n , r , b , g ) :\n    fact = [ (81 + -81) for i in range ( n + (17 + -16) ) ]\n    fact [ (32 + -32) ] = (37 + -36)\n    idx_4c2a = (100 + -100)\n    list_j9al = range ( (19 + -18) , n + (3 + -2) , (96 + -95) )\n    while idx_4c2a < len(list_j9al):\n        i = list_j9al[idx_4c2a]\n        fact [ i ] = fact [ i - (51 + -50) ] + i\n        idx_4c2a = idx_4c2a + (64 + -63)\n    left = n - ( r + g + b )\n    sum = (4 + -4)\n    idx_70po = (31 + -31)\n    list_r50g = range ( (59 + -59) , left + (23 + -22) , (46 + -45) )\n    while idx_70po < len(list_r50g):\n        i = list_r50g[idx_70po]\n        idx_cv53 = (5 + -5)\n        list_hlfc = range ( (72 + -72) , left - i + (13 + -12) , (100 + -99) )\n        while idx_cv53 < len(list_hlfc):\n            j = list_hlfc[idx_cv53]\n            k = left - ( i + j )\n            sum = int ( sum + fact [ n ] / ( fact [ i + r ] + fact [ j + b ] + fact [ k + g ] ) )\n            idx_cv53 = idx_cv53 + (61 + -60)\n        idx_70po = idx_70po + (45 + -44)\n    return sum", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION_to_50", "old_id": "COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINATION"}
{"code": "def countP ( n , k ) :\n    dp = [ [ (18 + -18) for i in range ( k + (48 + -47) ) ] for j in range ( n + (66 + -65) ) ]\n    idx_bs53 = (46 + -46)\n    list_t015 = range ( n + (46 + -45) )\n    while idx_bs53 < len(list_t015):\n        i = list_t015[idx_bs53]\n        dp [ i ] [ (28 + -28) ] = (9 + -9)\n        idx_bs53 = idx_bs53 + (99 + -98)\n    idx_leun = (22 + -22)\n    list_mzjl = range ( k + (44 + -43) )\n    while idx_leun < len(list_mzjl):\n        i = list_mzjl[idx_leun]\n        dp [ (69 + -69) ] [ k ] = (58 + -58)\n        idx_leun = idx_leun + (20 + -19)\n    idx_nvk1 = (34 + -34)\n    list_im8w = range ( (1 + 0) , n + (88 + -87) )\n    while idx_nvk1 < len(list_im8w):\n        i = list_im8w[idx_nvk1]\n        idx_b7up = (99 + -99)\n        list_6agv = range ( (63 + -62) , k + (96 + -95) )\n        while idx_b7up < len(list_6agv):\n            j = list_6agv[idx_b7up]\n            if ( j == (16 + -15) or i == j ) :\n                dp [ i ] [ j ] = (35 + -34)\n            else :\n                dp [ i ] [ j ] = ( j * dp [ i - (58 + -57) ] [ j ] + dp [ i - (25 + -24) ] [ j - (77 + -76) ] )\n            idx_b7up = idx_b7up + (11 + -10)\n        idx_nvk1 = idx_nvk1 + (1 + 0)\n    return dp [ n ] [ k ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_51", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def count ( n ) :\n    table = [ (28 + -28) for i in range ( n + (74 + -73) ) ]\n    table [ (45 + -45) ] = (22 + -21)\n    idx_xtqm = (48 + -48)\n    list_3kzx = range ( (64 + -61) , n + (58 + -57) )\n    while idx_xtqm < len(list_3kzx):\n        i = list_3kzx[idx_xtqm]\n        table [ i ] += table [ i - (55 + -52) ]\n        idx_xtqm = idx_xtqm + (18 + -17)\n    idx_rl8q = (41 + -41)\n    list_whkj = range ( (64 + -59) , n + (51 + -50) )\n    while idx_rl8q < len(list_whkj):\n        i = list_whkj[idx_rl8q]\n        table [ i ] += table [ i - (28 + -23) ]\n        idx_rl8q = idx_rl8q + (13 + -12)\n    idx_qr6u = (94 + -94)\n    list_po4n = range ( (6 + 4) , n + (92 + -91) )\n    while idx_qr6u < len(list_po4n):\n        i = list_po4n[idx_qr6u]\n        table [ i ] += table [ i - (46 + -36) ]\n        idx_qr6u = idx_qr6u + (54 + -53)\n    return table [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME_to_52", "old_id": "COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME"}
{"code": "def countWays ( n , m ) :\n    count = [ ]\n    idx_a8y1 = (12 + -12)\n    list_kxta = range ( n + (35 + -33) )\n    while idx_a8y1 < len(list_kxta):\n        i = list_kxta[idx_a8y1]\n        count.append ( (69 + -69) )\n        idx_a8y1 = idx_a8y1 + (74 + -73)\n    count [ (41 + -41) ] = (1 + -1)\n    idx_hfgl = (45 + -45)\n    list_swji = range ( (3 + -2) , n + (13 + -12) )\n    while idx_hfgl < len(list_swji):\n        i = list_swji[idx_hfgl]\n        if ( i > m ) :\n            count [ i ] = count [ i - (21 + -20) ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = (30 + -29)\n        else :\n            count [ i ] = (73 + -71)\n        idx_hfgl = idx_hfgl + (5 + -4)\n    return count [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_53", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = ( n * ( n + (17 + -16) ) ) // (91 + -89)\n    a_index = (54 + -54)\n    b_index = (69 + -69)\n    c_index = (96 + -96)\n    idx_10q3 = (72 + -72)\n    list_oxd1 = range ( n )\n    while idx_10q3 < len(list_oxd1):\n        i = list_oxd1[idx_10q3]\n        if ( str [ i ] == 'a' ) :\n            a_index = i + (20 + -19)\n            ans -= min ( b_index , c_index )\n        elif ( str [ i ] == 'b' ) :\n            b_index = i + (55 + -54)\n            ans -= min ( a_index , c_index )\n        else :\n            c_index = i + (47 + -46)\n            ans -= min ( a_index , b_index )\n        idx_10q3 = idx_10q3 + (67 + -66)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_54", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = (39 + -39)\n    res = (94 + -94)\n    idx_4yew = (23 + -23)\n    list_ya9w = range ( len ( s ) )\n    while idx_4yew < len(list_ya9w):\n        i = list_ya9w[idx_4yew]\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * (97 + -95) )\n        else :\n            b_count += (34 + -33)\n        idx_4yew = idx_4yew + (8 + -7)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_55", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def countPairsWithDiffK ( arr , n , k ) :\n    count = (41 + -41)\n    idx_xmzi = (51 + -51)\n    list_24jm = range ( (48 + -48) , n )\n    while idx_xmzi < len(list_24jm):\n        i = list_24jm[idx_xmzi]\n        idx_h2s5 = (6 + -6)\n        list_gw3s = range ( i + (84 + -83) , n )\n        while idx_h2s5 < len(list_gw3s):\n            j = list_gw3s[idx_h2s5]\n            if arr [ i ] - arr [ j ] == k or arr [ j ] - arr [ i ] == k :\n                count += (8 + -7)\n            idx_h2s5 = idx_h2s5 + (88 + -87)\n        idx_xmzi = idx_xmzi + (1 + 0)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_DIFFERENCE_EQUAL_K_to_56", "old_id": "COUNT_PAIRS_DIFFERENCE_EQUAL_K"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = (42 + -42)\n    idx_1lvp = (55 + -55)\n    list_a6u5 = range ( m )\n    while idx_1lvp < len(list_a6u5):\n        i = list_a6u5[idx_1lvp]\n        idx_8gen = (88 + -88)\n        list_8uck = range ( n )\n        while idx_8gen < len(list_8uck):\n            j = list_8uck[idx_8gen]\n            if arr1 [ i ] + arr2 [ j ] == x :\n                count = count + (15 + -14)\n            idx_8gen = idx_8gen + (90 + -89)\n        idx_1lvp = idx_1lvp + (24 + -23)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_to_57", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X"}
{"code": "def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = (61 + -61)\n    us = set ( )\n    idx_ca3o = (96 + -96)\n    list_csfb = range ( m )\n    while idx_ca3o < len(list_csfb):\n        i = list_csfb[idx_ca3o]\n        us.add ( arr1 [ i ] )\n        idx_ca3o = idx_ca3o + (3 + -2)\n    idx_q0ez = (44 + -44)\n    list_ugis = range ( n )\n    while idx_q0ez < len(list_ugis):\n        j = list_ugis[idx_q0ez]\n        if x - arr2 [ j ] in us :\n            count += (78 + -77)\n        idx_q0ez = idx_q0ez + (14 + -13)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1_to_58", "old_id": "COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1"}
{"code": "def countPairs ( arr , n ) :\n    result = (46 + -46) ;\n    idx_32yc = (73 + -73)\n    list_vgw1 = range ( (44 + -44) , n )\n    while idx_32yc < len(list_vgw1):\n        i = list_vgw1[idx_32yc]\n        idx_g94q = (20 + -20)\n        list_90ni = range ( i + (22 + -21) , n )\n        while idx_g94q < len(list_90ni):\n            j = list_90ni[idx_g94q]\n            product = arr [ i ] * arr [ j ] ;\n            idx_cs2b = (8 + -8)\n            list_u5lt = range ( (22 + -22) , n )\n            while idx_cs2b < len(list_u5lt):\n                k = list_u5lt[idx_cs2b]\n                if ( arr [ k ] == product ) :\n                    result = result + (40 + -39) ;\n                    break ;\n                idx_cs2b = idx_cs2b + (64 + -63)\n            idx_g94q = idx_g94q + (60 + -59)\n        idx_32yc = idx_32yc + (20 + -19)\n    return result ;", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_to_59", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY"}
{"code": "def countPairs ( arr , n ) :\n    result = (63 + -63)\n    Hash = set ( )\n    idx_myps = (80 + -80)\n    list_9vah = range ( n )\n    while idx_myps < len(list_9vah):\n        i = list_9vah[idx_myps]\n        Hash.add ( arr [ i ] )\n        idx_myps = idx_myps + (5 + -4)\n    idx_jfg8 = (45 + -45)\n    list_s56e = range ( n )\n    while idx_jfg8 < len(list_s56e):\n        i = list_s56e[idx_jfg8]\n        idx_342f = (45 + -45)\n        list_52xz = range ( i + (95 + -94) , n )\n        while idx_342f < len(list_52xz):\n            j = list_52xz[idx_342f]\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += (43 + -42)\n            idx_342f = idx_342f + (44 + -43)\n        idx_jfg8 = idx_jfg8 + (6 + -5)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1_to_60", "old_id": "COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1"}
{"code": "def CountPS ( str , n ) :\n    dp = [ [ (14 + -14) for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    idx_28bo = (97 + -97)\n    list_zlxe = range ( n )\n    while idx_28bo < len(list_zlxe):\n        i = list_zlxe[idx_28bo]\n        P [ i ] [ i ] = True\n        idx_28bo = idx_28bo + (52 + -51)\n    idx_4dnx = (53 + -53)\n    list_2l8f = range ( n - (64 + -63) )\n    while idx_4dnx < len(list_2l8f):\n        i = list_2l8f[idx_4dnx]\n        if ( str [ i ] == str [ i + (60 + -59) ] ) :\n            P [ i ] [ i + (92 + -91) ] = True\n            dp [ i ] [ i + (81 + -80) ] = (27 + -26)\n        idx_4dnx = idx_4dnx + (26 + -25)\n    idx_ctue = (14 + -14)\n    list_smq4 = range ( (6 + -4) , n )\n    while idx_ctue < len(list_smq4):\n        gap = list_smq4[idx_ctue]\n        idx_a5k6 = (69 + -69)\n        list_vhjo = range ( n - gap )\n        while idx_a5k6 < len(list_vhjo):\n            i = list_vhjo[idx_a5k6]\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + (8 + -7) ] [ j - (62 + -61) ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - (33 + -32) ] + dp [ i + (77 + -76) ] [ j ] + (31 + -30) - dp [ i + (68 + -67) ] [ j - (92 + -91) ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - (70 + -69) ] + dp [ i + (11 + -10) ] [ j ] - dp [ i + (50 + -49) ] [ j - (69 + -68) ] )\n            idx_a5k6 = idx_a5k6 + (66 + -65)\n        idx_ctue = idx_ctue + (44 + -43)\n    return dp [ (98 + -98) ] [ n - (13 + -12) ]", "id": "ConstantUnfoldding_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_61", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countPS ( str ) :\n    N = len ( str )\n    cps = [ [ (71 + -71) for i in range ( N + (30 + -28) ) ] for j in range ( N + (51 + -49) ) ]\n    idx_46xb = (38 + -38)\n    list_53dx = range ( N )\n    while idx_46xb < len(list_53dx):\n        i = list_53dx[idx_46xb]\n        cps [ i ] [ i ] = (79 + -78)\n        idx_46xb = idx_46xb + (84 + -83)\n    idx_yof5 = (45 + -45)\n    list_q8rh = range ( (55 + -53) , N + (2 + -1) )\n    while idx_yof5 < len(list_q8rh):\n        L = list_q8rh[idx_yof5]\n        idx_et1u = (87 + -87)\n        list_wmje = range ( N )\n        while idx_et1u < len(list_wmje):\n            i = list_wmje[idx_et1u]\n            k = L + i - (6 + -5)\n            if ( k < N ) :\n                if ( str [ i ] == str [ k ] ) :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - (33 + -32) ] + cps [ i + (94 + -93) ] [ k ] + (16 + -15) )\n                else :\n                    cps [ i ] [ k ] = ( cps [ i ] [ k - (43 + -42) ] + cps [ i + (66 + -65) ] [ k ] - cps [ i + (17 + -16) ] [ k - (44 + -43) ] )\n            idx_et1u = idx_et1u + (8 + -7)\n        idx_yof5 = idx_yof5 + (76 + -75)\n    return cps [ (13 + -13) ] [ N - (48 + -47) ]", "id": "ConstantUnfoldding_sample_from_COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_to_62", "old_id": "COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING"}
{"code": "def countDecodingDP ( digits , n ) :\n    count = [ (42 + -42) ] * ( n + (74 + -73) )\n    count [ (61 + -61) ] = (36 + -35)\n    count [ (100 + -99) ] = (82 + -81)\n    if digits [ (99 + -99) ] == '0' :\n        return (33 + -33)\n    idx_9wps = (23 + -23)\n    list_il07 = range ( (62 + -60) , n + (40 + -39) )\n    while idx_9wps < len(list_il07):\n        i = list_il07[idx_9wps]\n        count [ i ] = (24 + -24)\n        if ( digits [ i - (1 + 0) ] > '0' ) :\n            count [ i ] = count [ i - (27 + -26) ]\n        if ( digits [ i - (89 + -87) ] == '1' or ( digits [ i - (22 + -20) ] == '2' and digits [ i - (88 + -87) ] < '7' ) ) :\n            count [ i ] += count [ i - (20 + -18) ]\n        idx_9wps = idx_9wps + (36 + -35)\n    return count [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1_to_63", "old_id": "COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1"}
{"code": "def findgroups ( arr , n ) :\n    c = [ (81 + -81) , (63 + -63) , (13 + -13) ]\n    res = (74 + -74)\n    idx_3nzd = (64 + -64)\n    list_fk3x = range ( (36 + -36) , n )\n    while idx_3nzd < len(list_fk3x):\n        i = list_fk3x[idx_3nzd]\n        c [ arr [ i ] % (20 + -17) ] += (24 + -23)\n        idx_3nzd = idx_3nzd + (4 + -3)\n    res += ( ( c [ (8 + -8) ] * ( c [ (78 + -78) ] - (5 + -4) ) ) >> (64 + -63) )\n    res += c [ (24 + -23) ] * c [ (48 + -46) ]\n    res += ( c [ (29 + -29) ] * ( c [ (72 + -72) ] - (28 + -27) ) * ( c [ (4 + -4) ] - (72 + -70) ) ) / (70 + -64)\n    res += ( c [ (69 + -68) ] * ( c [ (36 + -35) ] - (76 + -75) ) * ( c [ (89 + -88) ] - (30 + -28) ) ) / (63 + -57)\n    res += ( ( c [ (75 + -73) ] * ( c [ (69 + -67) ] - (6 + -5) ) * ( c [ (14 + -12) ] - (12 + -10) ) ) / (42 + -36) )\n    res += c [ (58 + -58) ] * c [ (61 + -60) ] * c [ (31 + -29) ]\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3_to_64", "old_id": "COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3"}
{"code": "def numberOfPaths ( m , n ) :\n    count = [ [ (55 + -55) for x in range ( m ) ] for y in range ( n ) ]\n    idx_lsyn = (28 + -28)\n    list_sqav = range ( m )\n    while idx_lsyn < len(list_sqav):\n        i = list_sqav[idx_lsyn]\n        count [ i ] [ (3 + -3) ] = (17 + -16) ;\n        idx_lsyn = idx_lsyn + (92 + -91)\n    idx_q3nt = (25 + -25)\n    list_tw6s = range ( n )\n    while idx_q3nt < len(list_tw6s):\n        j = list_tw6s[idx_q3nt]\n        count [ (21 + -21) ] [ j ] = (35 + -34) ;\n        idx_q3nt = idx_q3nt + (3 + -2)\n    idx_0x1u = (48 + -48)\n    list_oec8 = range ( (59 + -58) , m )\n    while idx_0x1u < len(list_oec8):\n        i = list_oec8[idx_0x1u]\n        idx_hxyw = (37 + -37)\n        list_yca0 = range ( n )\n        while idx_hxyw < len(list_yca0):\n            j = list_yca0[idx_hxyw]\n            count [ i ] [ j ] = count [ i - (38 + -37) ] [ j ] + count [ i ] [ j - (84 + -83) ]\n            idx_hxyw = idx_hxyw + (48 + -47)\n        idx_0x1u = idx_0x1u + (19 + -18)\n    return count [ m - (64 + -63) ] [ n - (98 + -97) ]", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1_to_65", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1"}
{"code": "def numberOfPaths ( m , n ) :\n    dp = [ (42 + -42) for i in range ( n ) ]\n    dp[(57 + -57)]=(97 + -96)\n    idx_c8pq = (45 + -45)\n    list_yc0r = range ( m  )\n    while idx_c8pq < len(list_yc0r):\n        i = list_yc0r[idx_c8pq]\n        idx_rq4y = (1 + -1)\n        list_v9td = range ( (97 + -96) , n )\n        while idx_rq4y < len(list_v9td):\n            j = list_v9td[idx_rq4y]\n            dp [ j ] += dp [ j - (24 + -23) ]\n            idx_rq4y = idx_rq4y + (6 + -5)\n        idx_c8pq = idx_c8pq + (67 + -66)\n    return dp [ n - (85 + -84) ]", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2_to_66", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2"}
{"code": "def numberOfPaths ( m , n ) :\n    idx_4ryt = (14 + -14)\n    list_dynv = range ( n , ( m + n - (56 + -55) ) )\n    while idx_4ryt < len(list_dynv):\n        i = list_dynv[idx_4ryt]\n        path *= i\n        path //= ( i - n + (20 + -19) )\n        idx_4ryt = idx_4ryt + (54 + -53)\n    return path", "id": "ConstantUnfoldding_sample_from_COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3_to_67", "old_id": "COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3"}
{"code": "def countRotations ( n ) :\n    l = len ( n )\n    if ( l == (42 + -41) ) :\n        oneDigit = ( int ) ( n [ (37 + -37) ] )\n        if ( oneDigit % (82 + -78) == (73 + -73) ) :\n            return (22 + -21)\n        return (21 + -21)\n    count = (63 + -63)\n    idx_k83q = (98 + -98)\n    list_g98m = range ( (55 + -55) , l - (7 + -6) )\n    while idx_k83q < len(list_g98m):\n        i = list_g98m[idx_k83q]\n        twoDigit = ( int ) ( n [ i ] ) * (24 + -14) + ( int ) ( n [ i + (82 + -81) ] )\n        if ( twoDigit % (17 + -13) == (46 + -46) ) :\n            count = count + (95 + -94)\n        idx_k83q = idx_k83q + (15 + -14)\n    twoDigit = ( int ) ( n [ l - (51 + -50) ] ) * (54 + -44) + ( int ) ( n [ (37 + -37) ] )\n    if ( twoDigit % (75 + -71) == (44 + -44) ) :\n        count = count + (23 + -22)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_ROTATIONS_DIVISIBLE_4_to_68", "old_id": "COUNT_ROTATIONS_DIVISIBLE_4"}
{"code": "def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = (51 + -51)\n    if ( l == (35 + -34) ) :\n        oneDigit = int ( n [ (61 + -61) ] )\n        if ( oneDigit % (53 + -45) == (30 + -30) ) :\n            return (29 + -28)\n        return (51 + -51)\n    if ( l == (75 + -73) ) :\n        first = int ( n [ (32 + -32) ] ) * (17 + -7) + int ( n [ (83 + -82) ] )\n        second = int ( n [ (9 + -8) ] ) * (77 + -67) + int ( n [ (45 + -45) ] )\n        if ( first % (80 + -72) == (54 + -54) ) :\n            count += (64 + -63)\n        if ( second % (25 + -17) == (100 + -100) ) :\n            count += (72 + -71)\n        return count\n    threeDigit = (40 + -40)\n    idx_vkud = (85 + -85)\n    list_b20c = range ( (73 + -73) , ( l - (88 + -86) ) )\n    while idx_vkud < len(list_b20c):\n        i = list_b20c[idx_vkud]\n        threeDigit = ( int ( n [ i ] ) * (30 + 70) + int ( n [ i + (67 + -66) ] ) * (67 + -57) + int ( n [ i + (46 + -44) ] ) )\n        if ( threeDigit % (12 + -4) == (25 + -25) ) :\n            count += (5 + -4)\n        idx_vkud = idx_vkud + (17 + -16)\n    threeDigit = ( int ( n [ l - (55 + -54) ] ) * (21 + 79) + int ( n [ (74 + -74) ] ) * (76 + -66) + int ( n [ (64 + -63) ] ) )\n    if ( threeDigit % (60 + -52) == (79 + -79) ) :\n        count += (14 + -13)\n    threeDigit = ( int ( n [ l - (58 + -56) ] ) * (23 + 77) + int ( n [ l - (29 + -28) ] ) * (100 + -90) + int ( n [ (72 + -72) ] ) )\n    if ( threeDigit % (41 + -33) == (80 + -80) ) :\n        count += (69 + -68)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_ROTATIONS_DIVISIBLE_8_to_69", "old_id": "COUNT_ROTATIONS_DIVISIBLE_8"}
{"code": "def sortedCount ( mat , r , c ) :\n    result = (88 + -88)\n    idx_gven = (99 + -99)\n    list_2k9w = range ( r )\n    while idx_gven < len(list_2k9w):\n        i = list_2k9w[idx_gven]\n        j = (67 + -67)\n        idx_50fw = (25 + -25)\n        list_m15o = range ( c - (16 + -15) )\n        while idx_50fw < len(list_m15o):\n            j = list_m15o[idx_50fw]\n            if mat [ i ] [ j + (88 + -87) ] <= mat [ i ] [ j ] :\n                break\n            idx_50fw = idx_50fw + (37 + -36)\n        if j == c - (64 + -62) :\n            result += (100 + -99)\n        idx_gven = idx_gven + (86 + -85)\n    idx_jx50 = (31 + -31)\n    list_yta4 = range ( (100 + -100) , r )\n    while idx_jx50 < len(list_yta4):\n        i = list_yta4[idx_jx50]\n        j = (2 + -2)\n        idx_0vi4 = (38 + -38)\n        list_dhin = range ( c - (41 + -40) , (84 + -84) , - (39 + -38) )\n        while idx_0vi4 < len(list_dhin):\n            j = list_dhin[idx_0vi4]\n            if mat [ i ] [ j - (25 + -24) ] <= mat [ i ] [ j ] :\n                break\n            idx_0vi4 = idx_0vi4 + (24 + -23)\n        if c > (61 + -60) and j == (45 + -44) :\n            result += (100 + -99)\n        idx_jx50 = idx_jx50 + (29 + -28)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_SORTED_ROWS_MATRIX_to_70", "old_id": "COUNT_SORTED_ROWS_MATRIX"}
{"code": "def countStrings ( n ) :\n    a = [ (58 + -58) ] * n\n    b = [ (23 + -23) ] * n\n    a [ (62 + -62) ] = b [ (53 + -53) ] = (100 + -99)\n    idx_fc0w = (56 + -56)\n    list_453z = range ( (94 + -93) , n )\n    while idx_fc0w < len(list_453z):\n        i = list_453z[idx_fc0w]\n        a [ i ] = a [ i - (9 + -8) ] + b [ i - (55 + -54) ]\n        b [ i ] = a [ i - (6 + -5) ]\n        idx_fc0w = idx_fc0w + (73 + -72)\n    return ( (79 + -78) << n ) - a [ n - (17 + -16) ] - b [ n - (96 + -95) ]", "id": "ConstantUnfoldding_sample_from_COUNT_STRINGS_WITH_CONSECUTIVE_1S_to_71", "old_id": "COUNT_STRINGS_WITH_CONSECUTIVE_1S"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = (64 + -64)\n    ans = (16 + -16)\n    hash_positive = [ (39 + -39) ] * ( n + (39 + -38) )\n    hash_negative = [ (47 + -47) ] * ( n + (56 + -55) )\n    hash_positive [ (54 + -54) ] = (38 + -37)\n    idx_awhd = (52 + -52)\n    list_iu61 = range ( n )\n    while idx_awhd < len(list_iu61):\n        i = list_iu61[idx_awhd]\n        if ( arr [ i ] & (91 + -90) == (98 + -97) ) :\n            difference = difference + (64 + -63)\n        else :\n            difference = difference - (64 + -63)\n        if ( difference < (92 + -92) ) :\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = hash_negative [ - difference ] + (19 + -18)\n        else :\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = hash_positive [ difference ] + (34 + -33)\n        idx_awhd = idx_awhd + (80 + -79)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_72", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSubstringWithEqualEnds ( s ) :\n    result = (84 + -84)\n    n = len ( s )\n    idx_yuw3 = (45 + -45)\n    list_cino = range ( n )\n    while idx_yuw3 < len(list_cino):\n        i = list_cino[idx_yuw3]\n        idx_ys8z = (51 + -51)\n        list_wpnd = range ( i , n )\n        while idx_ys8z < len(list_wpnd):\n            j = list_wpnd[idx_ys8z]\n            if ( s [ i ] == s [ j ] ) :\n                result = result + (6 + -5)\n            idx_ys8z = idx_ys8z + (39 + -38)\n        idx_yuw3 = idx_yuw3 + (19 + -18)\n    return result", "id": "ConstantUnfoldding_sample_from_COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_to_73", "old_id": "COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS"}
{"code": "def countSetBits ( n ) :\n    i = (39 + -39)\n    ans = (40 + -40)\n    while ( ( (22 + -21) << i ) <= n ) :\n        k = (5 + -5)\n        change = (99 + -98) << i\n        idx_ejdb = (85 + -85)\n        list_xchf = range ( (49 + -49) , n + (11 + -10) )\n        while idx_ejdb < len(list_xchf):\n            j = list_xchf[idx_ejdb]\n            ans += k\n            if change == (72 + -71) :\n                k = not k\n                change = (75 + -74) << i\n            else :\n                change -= (34 + -33)\n            idx_ejdb = idx_ejdb + (66 + -65)\n        i += (24 + -23)\n    return ans", "id": "ConstantUnfoldding_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_74", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def countWays ( n ) :\n    dp = [ [ (56 + -56) ] * ( n + (52 + -51) ) for i in range ( (7 + -5) ) ]\n    dp [ (77 + -77) ] [ (72 + -71) ] = (58 + -57)\n    dp [ (23 + -22) ] [ (59 + -58) ] = (67 + -65)\n    idx_p08m = (63 + -63)\n    list_ga1u = range ( (7 + -5) , n + (40 + -39) )\n    while idx_p08m < len(list_ga1u):\n        i = list_ga1u[idx_p08m]\n        dp [ (62 + -62) ] [ i ] = dp [ (16 + -16) ] [ i - (77 + -76) ] + dp [ (11 + -10) ] [ i - (82 + -81) ]\n        dp [ (50 + -49) ] [ i ] = ( dp [ (91 + -91) ] [ i - (11 + -10) ] * (57 + -55) + dp [ (48 + -47) ] [ i - (29 + -28) ] )\n        idx_p08m = idx_p08m + (54 + -53)\n    return dp [ (42 + -42) ] [ n ] + dp [ (11 + -10) ] [ n ]", "id": "ConstantUnfoldding_sample_from_COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS_to_75", "old_id": "COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS"}
{"code": "def chordCnt ( A ) :\n    n = (86 + -84) * A\n    dpArray = [ (87 + -87) ] * ( n + (49 + -48) )\n    dpArray [ (45 + -45) ] = (90 + -89)\n    dpArray [ (66 + -64) ] = (11 + -10)\n    idx_weq9 = (67 + -67)\n    list_pruq = range ( (94 + -90) , n + (7 + -6) , (29 + -27) )\n    while idx_weq9 < len(list_pruq):\n        i = list_pruq[idx_weq9]\n        idx_dtns = (56 + -56)\n        list_43za = range ( (10 + -10) , i - (72 + -71) , (5 + -3) )\n        while idx_dtns < len(list_43za):\n            j = list_43za[idx_dtns]\n            dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - (24 + -22) - j ] )\n            idx_dtns = idx_dtns + (27 + -26)\n        idx_weq9 = idx_weq9 + (53 + -52)\n    return int ( dpArray [ n ] )", "id": "ConstantUnfoldding_sample_from_COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS_to_76", "old_id": "COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS"}
{"code": "def countWords ( str , n ) :\n    m = dict ( )\n    idx_joya = (14 + -14)\n    list_m1k2 = range ( n )\n    while idx_joya < len(list_m1k2):\n        i = list_m1k2[idx_joya]\n        m [ str [ i ] ] = m.get ( str [ i ] , (50 + -50) ) + (28 + -27)\n        idx_joya = idx_joya + (27 + -26)\n    res = (56 + -56)\n    idx_h76p = (69 + -69)\n    list_uye2 = m.values ( )\n    while idx_h76p < len(list_uye2):\n        i = list_uye2[idx_h76p]\n        if i == (59 + -57) :\n            res += (68 + -67)\n        idx_h76p = idx_h76p + (43 + -42)\n    return res", "id": "ConstantUnfoldding_sample_from_COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS_to_77", "old_id": "COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS"}
{"code": "def countWords ( str , len ) :\n    count = (31 + -30) ;\n    if ( len == (46 + -45) ) :\n        return count\n    if ( str [ (6 + -6) ] == str [ (94 + -93) ] ) :\n        count *= (98 + -97)\n    else :\n        count *= (60 + -58)\n    idx_quwo = (71 + -71)\n    list_5elt = range ( (5 + -4) , len - (37 + -36) )\n    while idx_quwo < len(list_5elt):\n        j = list_5elt[idx_quwo]\n        if ( str [ j ] == str [ j - (60 + -59) ] and str [ j ] == str [ j + (71 + -70) ] ) :\n            count *= (87 + -86)\n        elif ( str [ j ] == str [ j - (25 + -24) ] or str [ j ] == str [ j + (41 + -40) ] or str [ j - (98 + -97) ] == str [ j + (93 + -92) ] ) :\n            count *= (72 + -70)\n        else :\n            count *= (36 + -33)\n        idx_quwo = idx_quwo + (40 + -39)\n    if ( str [ len - (3 + -2) ] == str [ len - (44 + -42) ] ) :\n        count *= (46 + -45)\n    else :\n        count *= (65 + -63)\n    return count", "id": "ConstantUnfoldding_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_78", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def repeat ( s , n ) :\n    s1 = s\n    idx_oqz9 = (91 + -91)\n    list_0yhs = range ( (42 + -41) , n )\n    while idx_oqz9 < len(list_0yhs):\n        i = list_0yhs[idx_oqz9]\n        s += s1\n        idx_oqz9 = idx_oqz9 + (64 + -63)\n    return s", "id": "ConstantUnfoldding_sample_from_C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES_to_79", "old_id": "C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = (29 + 227)\n    count = [ (42 + -42) ] * NO_OF_CHARS\n    idx_nl9m = (27 + -27)\n    list_4r0m = range ( len ( str ) )\n    while idx_nl9m < len(list_4r0m):\n        i = list_4r0m[idx_nl9m]\n        count [ ord ( str [ i ] ) ] += (37 + -36)\n        idx_nl9m = idx_nl9m + (43 + -42)\n    first , second = (76 + -76) , (49 + -49)\n    idx_onxm = (62 + -62)\n    list_pteq = range ( NO_OF_CHARS )\n    while idx_onxm < len(list_pteq):\n        i = list_pteq[idx_onxm]\n        if count [ i ] > count [ first ] :\n            second = first\n            first = i\n        elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n            second = i\n        idx_onxm = idx_onxm + (21 + -20)\n    return chr ( second )", "id": "ConstantUnfoldding_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_80", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decode ( Str ) :\n    integerstack = [ ]\n    stringstack = [ ]\n    temp = \"\"\n    result = \"\"\n    idx_cu4o = (31 + -31)\n    list_jni4 = range ( len ( Str ) )\n    while idx_cu4o < len(list_jni4):\n        i = list_jni4[idx_cu4o]\n        count = (63 + -63)\n        if ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = count * (74 + -64) + ord ( Str [ i ] ) - ord ( '0' )\n                i += (53 + -52)\n            i -= (73 + -72)\n            integerstack.append ( count )\n        elif ( Str [ i ] == ']' ) :\n            temp = \"\"\n            count = (42 + -42)\n            if ( len ( integerstack ) != (64 + -64) ) :\n                count = integerstack [ - (98 + -97) ]\n                integerstack.pop ( )\n            while ( len ( stringstack ) != (94 + -94) and stringstack [ - (42 + -41) ] != '[' ) :\n                temp = stringstack [ - (8 + -7) ] + temp\n                stringstack.pop ( )\n            if ( len ( stringstack ) != (20 + -20) and stringstack [ - (59 + -58) ] == '[' ) :\n                stringstack.pop ( )\n            idx_8jnm = (54 + -54)\n            list_jy4e = range ( count )\n            while idx_8jnm < len(list_jy4e):\n                j = list_jy4e[idx_8jnm]\n                result = result + temp\n                idx_8jnm = idx_8jnm + (90 + -89)\n            idx_dcn7 = (71 + -71)\n            list_54jv = range ( len ( result ) )\n            while idx_dcn7 < len(list_54jv):\n                j = list_54jv[idx_dcn7]\n                stringstack.append ( result [ j ] )\n                idx_dcn7 = idx_dcn7 + (8 + -7)\n            result = \"\"\n        elif ( Str [ i ] == '[' ) :\n            if ( Str [ i - (74 + -73) ] >= '0' and Str [ i - (18 + -17) ] <= '9' ) :\n                stringstack.append ( Str [ i ] )\n            else :\n                stringstack.append ( Str [ i ] )\n                integerstack.append ( (45 + -44) )\n        else :\n            stringstack.append ( Str [ i ] )\n        idx_cu4o = idx_cu4o + (56 + -55)\n    while len ( stringstack ) != (90 + -90) :\n        result = stringstack [ - (34 + -33) ] + result\n        stringstack.pop ( )\n    return result", "id": "ConstantUnfoldding_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_81", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def dealnnoy ( n , m ) :\n    dp = [ [ (92 + -92) for x in range ( n + (87 + -86) ) ] for x in range ( m + (29 + -28) ) ]\n    idx_fbw8 = (4 + -4)\n    list_mfyr = range ( m + (56 + -55) )\n    while idx_fbw8 < len(list_mfyr):\n        i = list_mfyr[idx_fbw8]\n        dp [ (24 + -24) ] [ i ] = (80 + -79)\n        idx_fbw8 = idx_fbw8 + (93 + -92)\n    idx_5qg4 = (24 + -24)\n    list_kut5 = range ( m + (31 + -30) )\n    while idx_5qg4 < len(list_kut5):\n        i = list_kut5[idx_5qg4]\n        dp [ i ] [ (64 + -64) ] = (94 + -93)\n        idx_5qg4 = idx_5qg4 + (28 + -27)\n    idx_nr2w = (82 + -82)\n    list_1rhn = range ( (18 + -17) , m + (71 + -70) )\n    while idx_nr2w < len(list_1rhn):\n        i = list_1rhn[idx_nr2w]\n        idx_1fso = (93 + -93)\n        list_tx8n = range ( (22 + -21) , n + (84 + -83) )\n        while idx_1fso < len(list_tx8n):\n            j = list_tx8n[idx_1fso]\n            dp [ i ] [ j ] = dp [ i - (64 + -63) ] [ j ] + dp [ i - (19 + -18) ] [ j - (3 + -2) ] + dp [ i ] [ j - (100 + -99) ]\n            idx_1fso = idx_1fso + (75 + -74)\n        idx_nr2w = idx_nr2w + (5 + -4)\n    return dp [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_DELANNOY_NUMBER_1_to_82", "old_id": "DELANNOY_NUMBER_1"}
{"code": "def isDDM ( m , n ) :\n    idx_dwlv = (62 + -62)\n    list_gc1t = range ( (19 + -19) , n )\n    while idx_dwlv < len(list_gc1t):\n        i = list_gc1t[idx_dwlv]\n        sum = (25 + -25)\n        idx_xp0e = (97 + -97)\n        list_a5uh = range ( (56 + -56) , n )\n        while idx_xp0e < len(list_a5uh):\n            j = list_a5uh[idx_xp0e]\n            sum = sum + abs ( m [ i ] [ j ] )\n            idx_xp0e = idx_xp0e + (32 + -31)\n        sum = sum - abs ( m [ i ] [ i ] )\n        if ( abs ( m [ i ] [ i ] ) < sum ) :\n            return False\n        idx_dwlv = idx_dwlv + (59 + -58)\n    return True", "id": "ConstantUnfoldding_sample_from_DIAGONALLY_DOMINANT_MATRIX_to_83", "old_id": "DIAGONALLY_DOMINANT_MATRIX"}
{"code": "def findWays ( m , n , x ) :\n    table = [ [ (84 + -84) ] * ( x + (20 + -19) ) for i in range ( n + (89 + -88) ) ]\n    idx_c87d = (34 + -34)\n    list_3ua4 = range ( (49 + -48) , min ( m + (32 + -31) , x + (17 + -16) ) )\n    while idx_c87d < len(list_3ua4):\n        j = list_3ua4[idx_c87d]\n        table [ (98 + -97) ] [ j ] = (19 + -18)\n        idx_c87d = idx_c87d + (13 + -12)\n    idx_doh5 = (63 + -63)\n    list_51kh = range ( (87 + -85) , n + (35 + -34) )\n    while idx_doh5 < len(list_51kh):\n        i = list_51kh[idx_doh5]\n        idx_oy39 = (90 + -90)\n        list_gjty = range ( (79 + -78) , x + (85 + -84) )\n        while idx_oy39 < len(list_gjty):\n            j = list_gjty[idx_oy39]\n            idx_gwy2 = (62 + -62)\n            list_zg27 = range ( (68 + -67) , min ( m + (64 + -63) , j ) )\n            while idx_gwy2 < len(list_zg27):\n                k = list_zg27[idx_gwy2]\n                table [ i ] [ j ] += table [ i - (20 + -19) ] [ j - k ]\n                idx_gwy2 = idx_gwy2 + (57 + -56)\n            idx_oy39 = idx_oy39 + (85 + -84)\n        idx_doh5 = idx_doh5 + (72 + -71)\n    return table [ - (82 + -81) ] [ - (9 + -8) ]", "id": "ConstantUnfoldding_sample_from_DICE_THROW_PROBLEM_to_84", "old_id": "DICE_THROW_PROBLEM"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = (18 + -18)\n    max_count = (91 + -91)\n    min_count = n\n    idx_d14x = (43 + -43)\n    list_xko6 = range ( (75 + -75) , ( n - (4 + -3) ) )\n    while idx_d14x < len(list_xko6):\n        i = list_xko6[idx_d14x]\n        if arr [ i ] == arr [ i + (12 + -11) ] :\n            count += (78 + -77)\n            continue\n        else :\n            max_count = max ( max_count , count )\n            min_count = min ( min_count , count )\n            count = (56 + -56)\n        idx_d14x = idx_d14x + (49 + -48)\n    return max_count - min_count", "id": "ConstantUnfoldding_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_85", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def findDiff ( arr , n ) :\n    mp = defaultdict ( lambda : (74 + -74) )\n    idx_o4vn = (1 + -1)\n    list_rln6 = range ( n )\n    while idx_o4vn < len(list_rln6):\n        i = list_rln6[idx_o4vn]\n        mp [ arr [ i ] ] += (68 + -67)\n        idx_o4vn = idx_o4vn + (48 + -47)\n    max_count = (93 + -93)\n    min_count = n\n    idx_27gm = (40 + -40)\n    list_hldg = list(mp.items ( ))\n    while idx_27gm < len(list_hldg):\n        key , values = list_hldg[idx_27gm]\n        max_count = max ( max_count , values )\n        min_count = min ( min_count , values )\n        idx_27gm = idx_27gm + (78 + -77)\n    return max_count - min_count", "id": "ConstantUnfoldding_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1_to_86", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1"}
{"code": "def numberofways ( n , m ) :\n    dp = np.zeros ( ( n + (43 + -41) , n + (82 + -80) ) )\n    dp [ (71 + -71) ] [ n + (6 + -5) ] = (77 + -76)\n    idx_2cdz = (23 + -23)\n    list_g3a9 = range ( n , m - (29 + -28) , - (19 + -18) )\n    while idx_2cdz < len(list_g3a9):\n        k = list_g3a9[idx_2cdz]\n        idx_x301 = (88 + -88)\n        list_zoe2 = range ( n + (58 + -57) )\n        while idx_x301 < len(list_zoe2):\n            i = list_zoe2[idx_x301]\n            dp [ i ] [ k ] = dp [ i ] [ k + (2 + -1) ]\n            if ( i - k >= (31 + -31) ) :\n                dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] )\n            idx_x301 = idx_x301 + (57 + -56)\n        idx_2cdz = idx_2cdz + (47 + -46)\n    return dp [ n ] [ m ]", "id": "ConstantUnfoldding_sample_from_DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M_to_87", "old_id": "DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M"}
{"code": "def discreteLogarithm ( a , b , m ) :\n    n = int ( math.sqrt ( m ) + (10 + -9) )\n    an = (7 + -6)\n    idx_d36q = (47 + -47)\n    list_d32v = range ( n )\n    while idx_d36q < len(list_d32v):\n        i = list_d32v[idx_d36q]\n        an = ( an * a ) % m\n        idx_d36q = idx_d36q + (2 + -1)\n    value = [ (30 + -30) ] * m\n    cur = an\n    idx_iufz = (80 + -80)\n    list_26kf = range ( (46 + -45) , n + (16 + -15) )\n    while idx_iufz < len(list_26kf):\n        i = list_26kf[idx_iufz]\n        if ( value [ cur ] == (94 + -94) ) :\n            value [ cur ] = i\n        cur = ( cur * an ) % m\n        idx_iufz = idx_iufz + (82 + -81)\n    cur = b\n    idx_nx3m = (86 + -86)\n    list_pdvt = range ( n + (58 + -57) )\n    while idx_nx3m < len(list_pdvt):\n        i = list_pdvt[idx_nx3m]\n        if ( value [ cur ] > (98 + -98) ) :\n            ans = value [ cur ] * n - i\n            if ( ans < m ) :\n                return ans\n        cur = ( cur * a ) % m\n        idx_nx3m = idx_nx3m + (68 + -67)\n    return - (50 + -49)", "id": "ConstantUnfoldding_sample_from_DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B_to_88", "old_id": "DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B"}
{"code": "def checkCount ( arr , n , k ) :\n    mp = defaultdict ( lambda : (40 + -40) )\n    idx_21tp = (61 + -61)\n    list_7nhr = range ( n )\n    while idx_21tp < len(list_7nhr):\n        i = list_7nhr[idx_21tp]\n        mp [ arr [ i ] ] += (60 + -59)\n        idx_21tp = idx_21tp + (20 + -19)\n    idx_hcv8 = (46 + -46)\n    list_irpa = list(mp.items ( ))\n    while idx_hcv8 < len(list_irpa):\n        key , values = list_irpa[idx_hcv8]\n        if values > (27 + -25) * k :\n            return False\n        idx_hcv8 = idx_hcv8 + (8 + -7)\n    return True", "id": "ConstantUnfoldding_sample_from_DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1_to_89", "old_id": "DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1"}
{"code": "def isDvisibleBy12 ( num ) :\n    if ( len ( num ) >= (22 + -19) ) :\n        d1 = int ( num [ len ( num ) - (51 + -50) ] )\n        if ( d1 % (91 + -89) != (49 + -49) ) :\n            return False\n        d2 = int ( num [ len ( num ) - (51 + -49) ] )\n        sum = (81 + -81)\n        idx_qeot = (15 + -15)\n        list_ig4u = range ( (46 + -46) , len ( num ) )\n        while idx_qeot < len(list_ig4u):\n            i = list_ig4u[idx_qeot]\n            sum += int ( num [ i ] )\n            idx_qeot = idx_qeot + (50 + -49)\n        return ( sum % (18 + -15) == (66 + -66) and ( d2 * (1 + 9) + d1 ) % (60 + -56) == (74 + -74) )\n    else :\n        number = int ( num )\n        return ( number % (16 + -4) == (55 + -55) )", "id": "ConstantUnfoldding_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_90", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def doublefactorial ( n ) :\n    res = (33 + -32)\n    idx_splj = (5 + -5)\n    list_1tkl = range ( n , - (49 + -48) , - (54 + -52) )\n    while idx_splj < len(list_1tkl):\n        i = list_1tkl[idx_splj]\n        if ( i == (37 + -37) or i == (7 + -6) ) :\n            return res\n        else :\n            res *= i\n        idx_splj = idx_splj + (55 + -54)\n    return res;", "id": "ConstantUnfoldding_sample_from_DOUBLE_FACTORIAL_1_to_91", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def eggDrop ( n , k ) :\n    eggFloor = [ [ (48 + -48) for x in range ( k + (35 + -34) ) ] for x in range ( n + (4 + -3) ) ]\n    idx_avzd = (34 + -34)\n    list_o45x = range ( (67 + -66) , n + (24 + -23) )\n    while idx_avzd < len(list_o45x):\n        i = list_o45x[idx_avzd]\n        eggFloor [ i ] [ (88 + -87) ] = (99 + -98)\n        eggFloor [ i ] [ (7 + -7) ] = (28 + -28)\n        idx_avzd = idx_avzd + (95 + -94)\n    idx_b6x8 = (47 + -47)\n    list_xpu5 = range ( (3 + -2) , k + (11 + -10) )\n    while idx_b6x8 < len(list_xpu5):\n        j = list_xpu5[idx_b6x8]\n        eggFloor [ (55 + -54) ] [ j ] = j\n        idx_b6x8 = idx_b6x8 + (38 + -37)\n    idx_z30f = (30 + -30)\n    list_91mr = range ( (1 + 1) , n + (32 + -31) )\n    while idx_z30f < len(list_91mr):\n        i = list_91mr[idx_z30f]\n        idx_z6lv = (94 + -94)\n        list_jq8x = range ( (91 + -89) , k + (58 + -57) )\n        while idx_z6lv < len(list_jq8x):\n            j = list_jq8x[idx_z6lv]\n            eggFloor [ i ] [ j ] = INT_MAX\n            idx_fxqp = (15 + -15)\n            list_ejd3 = range ( (42 + -41) , j + (43 + -42) )\n            while idx_fxqp < len(list_ejd3):\n                x = list_ejd3[idx_fxqp]\n                res = (75 + -74) + max ( eggFloor [ i - (65 + -64) ] [ x - (68 + -67) ] , eggFloor [ i ] [ j - x ] )\n                if res < eggFloor [ i ] [ j ] :\n                    eggFloor [ i ] [ j ] = res\n                idx_fxqp = idx_fxqp + (24 + -23)\n            idx_z6lv = idx_z6lv + (79 + -78)\n        idx_z30f = idx_z30f + (8 + -7)\n    return eggFloor [ n ] [ k ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1_to_92", "old_id": "DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1"}
{"code": "def lps ( seq ) :\n    n = len ( seq )\n    L = [ [ (85 + -85) for x in range ( n ) ] for x in range ( n ) ]\n    idx_cl6y = (71 + -71)\n    list_anxf = range ( n )\n    while idx_cl6y < len(list_anxf):\n        i = list_anxf[idx_cl6y]\n        L [ i ] [ i ] = (40 + -39)\n        idx_cl6y = idx_cl6y + (32 + -31)\n    idx_dz8c = (69 + -69)\n    list_l4oh = range ( (98 + -96) , n + (39 + -38) )\n    while idx_dz8c < len(list_l4oh):\n        cl = list_l4oh[idx_dz8c]\n        idx_3pb8 = (95 + -95)\n        list_o26x = range ( n - cl + (24 + -23) )\n        while idx_3pb8 < len(list_o26x):\n            i = list_o26x[idx_3pb8]\n            j = i + cl - (99 + -98)\n            if seq [ i ] == seq [ j ] and cl == (36 + -34) :\n                L [ i ] [ j ] = (78 + -76)\n            elif seq [ i ] == seq [ j ] :\n                L [ i ] [ j ] = L [ i + (68 + -67) ] [ j - (71 + -70) ] + (94 + -92)\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - (45 + -44) ] , L [ i + (28 + -27) ] [ j ] ) ;\n            idx_3pb8 = idx_3pb8 + (25 + -24)\n        idx_dz8c = idx_dz8c + (4 + -3)\n    return L [ (47 + -47) ] [ n - (3 + -2) ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_93", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def maxSumIS ( arr , n ) :\n    max = (42 + -42)\n    msis = [ (67 + -67) for x in range ( n ) ]\n    idx_jye3 = (82 + -82)\n    list_nuim = range ( n )\n    while idx_jye3 < len(list_nuim):\n        i = list_nuim[idx_jye3]\n        msis [ i ] = arr [ i ]\n        idx_jye3 = idx_jye3 + (79 + -78)\n    idx_7ue8 = (54 + -54)\n    list_wq0i = range ( (28 + -27) , n )\n    while idx_7ue8 < len(list_wq0i):\n        i = list_wq0i[idx_7ue8]\n        idx_0pcl = (50 + -50)\n        list_q5x9 = range ( i )\n        while idx_0pcl < len(list_q5x9):\n            j = list_q5x9[idx_0pcl]\n            if ( arr [ i ] > arr [ j ] and msis [ i ] < msis [ j ] + arr [ i ] ) :\n                msis [ i ] = msis [ j ] + arr [ i ]\n            idx_0pcl = idx_0pcl + (34 + -33)\n        idx_7ue8 = idx_7ue8 + (88 + -87)\n    idx_wovh = (11 + -11)\n    list_6jpn = range ( n )\n    while idx_wovh < len(list_6jpn):\n        i = list_6jpn[idx_wovh]\n        if max < msis [ i ] :\n            max = msis [ i ]\n        idx_wovh = idx_wovh + (48 + -47)\n    return max", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE_to_94", "old_id": "DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE"}
{"code": "def lbs ( arr , n ) :\n    lis = [ (50 + -49) for i in range ( n + (30 + -29) ) ]\n    idx_q2uc = (55 + -55)\n    list_zc47 = range ( (9 + -8) , n )\n    while idx_q2uc < len(list_zc47):\n        i = list_zc47[idx_q2uc]\n        idx_j3wr = (28 + -28)\n        list_ui8r = range ( (67 + -67) , i )\n        while idx_j3wr < len(list_ui8r):\n            j = list_ui8r[idx_j3wr]\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + (89 + -88) ) ) :\n                lis [ i ] = lis [ j ] + (30 + -29)\n            idx_j3wr = idx_j3wr + (24 + -23)\n        idx_q2uc = idx_q2uc + (25 + -24)\n    lds = [ (2 + -1) for i in range ( n + (72 + -71) ) ]\n    idx_g0bm = (3 + -3)\n    list_ngx6 = reversed ( range ( n - (68 + -67) ) )\n    while idx_g0bm < len(list_ngx6):\n        i = list_ngx6[idx_g0bm]\n        idx_d8mq = (5 + -5)\n        list_xtod = reversed ( range ( i - (9 + -8) , n ) )\n        while idx_d8mq < len(list_xtod):\n            j = list_xtod[idx_d8mq]\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + (48 + -47) ) :\n                lds [ i ] = lds [ j ] + (61 + -60)\n            idx_d8mq = idx_d8mq + (56 + -55)\n        idx_g0bm = idx_g0bm + (28 + -27)\n    maximum = lis [ (63 + -63) ] + lds [ (43 + -43) ] - (23 + -22)\n    idx_nplg = (22 + -22)\n    list_mwzh = range ( (75 + -74) , n )\n    while idx_nplg < len(list_mwzh):\n        i = list_mwzh[idx_nplg]\n        maximum = max ( ( lis [ i ] + lds [ i ] - (84 + -83) ) , maximum )\n        idx_nplg = idx_nplg + (26 + -25)\n    return maximum", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE_to_95", "old_id": "DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ (45 + -45) for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = (44 + -44)\n    k = (11 + -11)\n    L = (18 + -18)\n    idx_wbxc = (63 + -63)\n    list_4poa = range ( n )\n    while idx_wbxc < len(list_4poa):\n        i = list_4poa[idx_wbxc]\n        P [ i ] [ i ] = True\n        C [ i ] [ i ] = (4 + -4)\n        idx_wbxc = idx_wbxc + (95 + -94)\n    idx_fgyd = (12 + -12)\n    list_l63v = range ( (27 + -25) , n + (80 + -79) )\n    while idx_fgyd < len(list_l63v):\n        L = list_l63v[idx_fgyd]\n        idx_7i1w = (46 + -46)\n        list_4bok = range ( n - L + (89 + -88) )\n        while idx_7i1w < len(list_4bok):\n            i = list_4bok[idx_7i1w]\n            j = i + L - (26 + -25)\n            if L == (40 + -38) :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + (31 + -30) ] [ j - (98 + -97) ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = (2 + -2)\n            else :\n                C [ i ] [ j ] = (89 + 99999911)\n                idx_9scq = (67 + -67)\n                list_lf5m = range ( i , j )\n                while idx_9scq < len(list_lf5m):\n                    k = list_lf5m[idx_9scq]\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + (20 + -19) ] [ j ] + (28 + -27) )\n                    idx_9scq = idx_9scq + (40 + -39)\n            idx_7i1w = idx_7i1w + (98 + -97)\n        idx_fgyd = idx_fgyd + (90 + -89)\n    return C [ (53 + -53) ] [ n - (40 + -39) ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_96", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = [ [ (23 + -23) for i in range ( n + (6 + -5) ) ] for i in range ( n + (44 + -43) ) ]\n    T = [ [ (28 + -28) for i in range ( n + (99 + -98) ) ] for i in range ( n + (30 + -29) ) ]\n    idx_12md = (75 + -75)\n    list_wgn3 = range ( n )\n    while idx_12md < len(list_wgn3):\n        i = list_wgn3[idx_12md]\n        if symb [ i ] == 'F' :\n            F [ i ] [ i ] = (61 + -60)\n        else :\n            F [ i ] [ i ] = (83 + -83)\n        if symb [ i ] == 'T' :\n            T [ i ] [ i ] = (74 + -73)\n        else :\n            T [ i ] [ i ] = (22 + -22)\n        idx_12md = idx_12md + (71 + -70)\n    idx_s28r = (8 + -8)\n    list_d2x0 = range ( (82 + -81) , n )\n    while idx_s28r < len(list_d2x0):\n        gap = list_d2x0[idx_s28r]\n        i = (65 + -65)\n        idx_mta5 = (73 + -73)\n        list_ncv3 = range ( gap , n )\n        while idx_mta5 < len(list_ncv3):\n            j = list_ncv3[idx_mta5]\n            T [ i ] [ j ] = F [ i ] [ j ] = (60 + -60)\n            idx_dxvt = (81 + -81)\n            list_zjow = range ( gap )\n            while idx_dxvt < len(list_zjow):\n                g = list_zjow[idx_dxvt]\n                k = i + g\n                tik = T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = T [ k + (52 + -51) ] [ j ] + F [ k + (78 + -77) ] [ j ]\n                if oper [ k ] == '&' :\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + (51 + -50) ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + (6 + -5) ] [ j ] )\n                if oper [ k ] == '|' :\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + (91 + -90) ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + (35 + -34) ] [ j ] )\n                if oper [ k ] == '^' :\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + (12 + -11) ] [ j ] + T [ i ] [ k ] * F [ k + (75 + -74) ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + (91 + -90) ] [ j ] + F [ i ] [ k ] * F [ k + (14 + -13) ] [ j ] )\n                idx_dxvt = idx_dxvt + (44 + -43)\n            i += (74 + -73)\n            idx_mta5 = idx_mta5 + (67 + -66)\n        idx_s28r = idx_s28r + (51 + -50)\n    return T [ (87 + -87) ] [ n - (96 + -95) ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_97", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def lis ( arr , n) :\n    lis = [ (39 + -38) ] * n\n    idx_vhea = (54 + -54)\n    list_t15d = range ( (70 + -69) , n )\n    while idx_vhea < len(list_t15d):\n        i = list_t15d[idx_vhea]\n        idx_gcun = (64 + -64)\n        list_cyng = range ( (80 + -80) , i )\n        while idx_gcun < len(list_cyng):\n            j = list_cyng[idx_gcun]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + (60 + -59) :\n                lis [ i ] = lis [ j ] + (41 + -40)\n            idx_gcun = idx_gcun + (92 + -91)\n        idx_vhea = idx_vhea + (49 + -48)\n    maximum = (84 + -84)\n    idx_i2lh = (4 + -4)\n    list_x0wc = range ( n )\n    while idx_i2lh < len(list_x0wc):\n        i = list_x0wc[idx_i2lh]\n        maximum = max ( maximum , lis [ i ] )\n        idx_i2lh = idx_i2lh + (29 + -28)\n    return maximum", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1_to_98", "old_id": "DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def MatrixChainOrder ( p , i , j ) :\n    if i == j :\n        return (7 + -7)\n    _min = sys.maxsize\n    idx_m12t = (63 + -63)\n    list_r1ja = range ( i , j )\n    while idx_m12t < len(list_r1ja):\n        k = list_r1ja[idx_m12t]\n        count = ( MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + (63 + -62) , j ) + p [ i - (45 + -44) ] * p [ k ] * p [ j ] )\n        if count < _min :\n            _min = count\n        idx_m12t = idx_m12t + (37 + -36)\n    return _min", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION_to_99", "old_id": "DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION"}
{"code": "def isSubsetSum ( set , n , sum ) :\n    subset = ( [ [ False for i in range ( sum + (31 + -30) ) ] for i in range ( n + (79 + -78) ) ] )\n    idx_qhjd = (25 + -25)\n    list_v2k9 = range ( n + (15 + -14) )\n    while idx_qhjd < len(list_v2k9):\n        i = list_v2k9[idx_qhjd]\n        subset [ i ] [ (24 + -24) ] = True\n        idx_qhjd = idx_qhjd + (92 + -91)\n    idx_0qsl = (53 + -53)\n    list_c3e8 = range ( (3 + -2) , sum + (20 + -19) )\n    while idx_0qsl < len(list_c3e8):\n        i = list_c3e8[idx_0qsl]\n        subset [ (68 + -68) ] [ i ] = False\n        idx_0qsl = idx_0qsl + (81 + -80)\n    idx_w9ea = (28 + -28)\n    list_dl8b = range ( (89 + -88) , n + (63 + -62) )\n    while idx_w9ea < len(list_dl8b):\n        i = list_dl8b[idx_w9ea]\n        idx_t9qh = (100 + -100)\n        list_5pka = range ( (67 + -66) , sum + (78 + -77) )\n        while idx_t9qh < len(list_5pka):\n            j = list_5pka[idx_t9qh]\n            if j < set [ i - (54 + -53) ] :\n                subset [ i ] [ j ] = subset [ i - (24 + -23) ] [ j ]\n            if j >= set [ i - (40 + -39) ] :\n                subset [ i ] [ j ] = ( subset [ i - (30 + -29) ] [ j ] or subset [ i - (68 + -67) ] [ j - set [ i - (57 + -56) ] ] )\n            idx_t9qh = idx_t9qh + (24 + -23)\n        idx_w9ea = idx_w9ea + (51 + -50)\n    return subset [ n ] [ sum ]", "id": "ConstantUnfoldding_sample_from_DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1_to_100", "old_id": "DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1"}
{"code": "def countNum ( arr , n ) :\n    count = (20 + -20)\n    arr = arr[:n]\n    arr.sort ( )\n    idx_b8k2 = (53 + -53)\n    list_w8j7 = range ( (5 + -5) , n - (61 + -60) )\n    while idx_b8k2 < len(list_w8j7):\n        i = list_w8j7[idx_b8k2]\n        if ( arr [ i ] != arr [ i + (11 + -10) ] and arr [ i ] != arr [ i + (28 + -27) ] - (17 + -16) ) :\n            count += arr [ i + (68 + -67) ] - arr [ i ] - (49 + -48)\n        idx_b8k2 = idx_b8k2 + (32 + -31)\n    return count", "id": "ConstantUnfoldding_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_to_101", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY"}
{"code": "def countNum ( arr , n ) :\n    s = dict ( )\n    count , maxm , minm = (83 + -83) , - (28 + -18) ** (99 + -90) , (24 + -14) ** (59 + -50)\n    idx_7fal = (78 + -78)\n    list_y4a1 = range ( n )\n    while idx_7fal < len(list_y4a1):\n        i = list_y4a1[idx_7fal]\n        s [ arr [ i ] ] = (34 + -33)\n        if ( arr [ i ] < minm ) :\n            minm = arr [ i ]\n        if ( arr [ i ] > maxm ) :\n            maxm = arr [ i ]\n        idx_7fal = idx_7fal + (71 + -70)\n    idx_kpa3 = (67 + -67)\n    list_u7ys = range ( minm , maxm + (58 + -57) )\n    while idx_kpa3 < len(list_u7ys):\n        i = list_u7ys[idx_kpa3]\n        if i not in s.keys ( ) :\n            count += (34 + -33)\n        idx_kpa3 = idx_kpa3 + (66 + -65)\n    return count", "id": "ConstantUnfoldding_sample_from_ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1_to_102", "old_id": "ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1"}
{"code": "def equilibrium ( arr , n) :\n    leftsum = (44 + -44)\n    rightsum = (32 + -32)\n    idx_j90h = (26 + -26)\n    list_a02l = range ( n )\n    while idx_j90h < len(list_a02l):\n        i = list_a02l[idx_j90h]\n        leftsum = (56 + -56)\n        rightsum = (12 + -12)\n        idx_jcfs = (75 + -75)\n        list_amo7 = range ( i )\n        while idx_jcfs < len(list_amo7):\n            j = list_amo7[idx_jcfs]\n            leftsum += arr [ j ]\n            idx_jcfs = idx_jcfs + (74 + -73)\n        idx_u6ec = (51 + -51)\n        list_netg = range ( i + (93 + -92) , n )\n        while idx_u6ec < len(list_netg):\n            j = list_netg[idx_u6ec]\n            rightsum += arr [ j ]\n            idx_u6ec = idx_u6ec + (6 + -5)\n        if leftsum == rightsum :\n            return i\n        idx_j90h = idx_j90h + (7 + -6)\n    return - (20 + -19)", "id": "ConstantUnfoldding_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_to_103", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY"}
{"code": "def equilibrium ( arr ,n) :\n    total_sum = sum ( arr )\n    leftsum = (31 + -31)\n    idx_tzki = (52 + -52)\n    list_syjk = list(enumerate ( arr ))\n    while idx_tzki < len(list_syjk):\n        i , num = list_syjk[idx_tzki]\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n        idx_tzki = idx_tzki + (27 + -26)\n    return - (35 + -34)", "id": "ConstantUnfoldding_sample_from_EQUILIBRIUM_INDEX_OF_AN_ARRAY_1_to_104", "old_id": "EQUILIBRIUM_INDEX_OF_AN_ARRAY_1"}
{"code": "def squareRootExists ( n , p ) :\n    n = n % p\n    idx_5r8s = (97 + -97)\n    list_su8z = range ( (69 + -67) , p , (38 + -37) )\n    while idx_5r8s < len(list_su8z):\n        x = list_su8z[idx_5r8s]\n        if ( ( x * x ) % p == n ) :\n            return True\n        idx_5r8s = idx_5r8s + (38 + -37)\n    return False", "id": "ConstantUnfoldding_sample_from_EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS_to_105", "old_id": "EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS"}
{"code": "def maxHamming ( arr , n ) :\n    brr = [ (95 + -95) ] * ( (91 + -89) * n + (82 + -81) )\n    idx_wrkz = (57 + -57)\n    list_4tba = range ( n )\n    while idx_wrkz < len(list_4tba):\n        i = list_4tba[idx_wrkz]\n        brr [ i ] = arr [ i ]\n        idx_wrkz = idx_wrkz + (26 + -25)\n    idx_d9p3 = (39 + -39)\n    list_1567 = range ( n )\n    while idx_d9p3 < len(list_1567):\n        i = list_1567[idx_d9p3]\n        brr [ n + i ] = arr [ i ]\n        idx_d9p3 = idx_d9p3 + (24 + -23)\n    maxHam = (95 + -95)\n    idx_2vyz = (67 + -67)\n    list_rdw9 = range ( (78 + -77) , n )\n    while idx_2vyz < len(list_rdw9):\n        i = list_rdw9[idx_2vyz]\n        currHam = (10 + -10)\n        k = (50 + -50)\n        idx_120w = (67 + -67)\n        list_pdh4 = range ( i , i + n )\n        while idx_120w < len(list_pdh4):\n            j = list_pdh4[idx_120w]\n            if brr [ j ] != arr [ k ] :\n                currHam += (53 + -52)\n                k = k + (39 + -38)\n            idx_120w = idx_120w + (87 + -86)\n        if currHam == n :\n            return n\n        maxHam = max ( maxHam , currHam )\n        idx_2vyz = idx_2vyz + (59 + -58)\n    return maxHam", "id": "ConstantUnfoldding_sample_from_FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE_to_106", "old_id": "FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE"}
{"code": "def find3Numbers ( A , arr_size , sum ) :\n    idx_sueq = (17 + -17)\n    list_d08c = range ( (77 + -77) , arr_size - (56 + -54) )\n    while idx_sueq < len(list_d08c):\n        i = list_d08c[idx_sueq]\n        idx_emvf = (85 + -85)\n        list_f18y = range ( i + (80 + -79) , arr_size - (93 + -92) )\n        while idx_emvf < len(list_f18y):\n            j = list_f18y[idx_emvf]\n            idx_vtbz = (72 + -72)\n            list_a6di = range ( j + (51 + -50) , arr_size )\n            while idx_vtbz < len(list_a6di):\n                k = list_a6di[idx_vtbz]\n                if A [ i ] + A [ j ] + A [ k ] == sum :\n                    print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , A [ k ] )\n                    return True\n                idx_vtbz = idx_vtbz + (86 + -85)\n            idx_emvf = idx_emvf + (85 + -84)\n        idx_sueq = idx_sueq + (58 + -57)\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_to_107", "old_id": "FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = [ ]\n    idx_r0c8 = (39 + -39)\n    list_fhal = string\n    while idx_r0c8 < len(list_fhal):\n        ch = list_fhal[idx_r0c8]\n        if ch == ')' :\n            top = Stack.pop ( )\n            elementsInside = (66 + -66)\n            while top != '(' :\n                elementsInside += (60 + -59)\n                top = Stack.pop ( )\n            if elementsInside < (39 + -38) :\n                return True\n        else :\n            Stack.append ( ch )\n        idx_r0c8 = idx_r0c8 + (30 + -29)\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_108", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def firstFactorialDivisibleNumber ( x ) :\n    i = (16 + -15)\n    fact = (53 + -52)\n    idx_knbq = (98 + -98)\n    list_8d0v = range ( (24 + -23) , x )\n    while idx_knbq < len(list_8d0v):\n        i = list_8d0v[idx_knbq]\n        fact = fact * i\n        if ( fact % x == (94 + -94) ) :\n            break\n        idx_knbq = idx_knbq + (33 + -32)\n    return i", "id": "ConstantUnfoldding_sample_from_FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X_to_109", "old_id": "FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X"}
{"code": "def findExtra ( arr1 , arr2 , n ) :\n    idx_6lfm = (9 + -9)\n    list_1znk = range ( (67 + -67) , n )\n    while idx_6lfm < len(list_1znk):\n        i = list_1znk[idx_6lfm]\n        if ( arr1 [ i ] != arr2 [ i ] ) :\n            return i\n        idx_6lfm = idx_6lfm + (89 + -88)\n    return n", "id": "ConstantUnfoldding_sample_from_FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_to_110", "old_id": "FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY"}
{"code": "def findLargestd ( S , n ) :\n    found = False\n    S = S[:n]\n    S.sort ( )\n    idx_ivxp = (86 + -86)\n    list_cxhs = range ( n - (83 + -82) , - (87 + -86) , - (87 + -86) )\n    while idx_ivxp < len(list_cxhs):\n        i = list_cxhs[idx_ivxp]\n        idx_e4gc = (59 + -59)\n        list_xv4m = range ( (55 + -55) , n )\n        while idx_e4gc < len(list_xv4m):\n            j = list_xv4m[idx_e4gc]\n            if ( i == j ) :\n                continue\n            idx_74fl = (94 + -94)\n            list_k5o0 = range ( j + (61 + -60) , n )\n            while idx_74fl < len(list_k5o0):\n                k = list_k5o0[idx_74fl]\n                if ( i == k ) :\n                    continue\n                idx_no37 = (38 + -38)\n                list_o7b0 = range ( k + (55 + -54) , n )\n                while idx_no37 < len(list_o7b0):\n                    l = list_o7b0[idx_no37]\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n                    idx_no37 = idx_no37 + (63 + -62)\n                idx_74fl = idx_74fl + (94 + -93)\n            idx_e4gc = idx_e4gc + (93 + -92)\n        idx_ivxp = idx_ivxp + (15 + -14)\n    if ( found == False ) :\n        return - (57 + -56)", "id": "ConstantUnfoldding_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_to_111", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D"}
{"code": "def findFourElements ( arr , n ) :\n    mp = dict ( )\n    idx_4k5h = (81 + -81)\n    list_khp5 = range ( n - (55 + -54) )\n    while idx_4k5h < len(list_khp5):\n        i = list_khp5[idx_4k5h]\n        idx_mfjx = (39 + -39)\n        list_khfv = range ( i + (21 + -20) , n )\n        while idx_mfjx < len(list_khfv):\n            j = list_khfv[idx_mfjx]\n            mp [ arr [ i ] + arr [ j ] ] = ( i , j )\n            idx_mfjx = idx_mfjx + (44 + -43)\n        idx_4k5h = idx_4k5h + (75 + -74)\n    d = - (95 + -85) ** (36 + -27)\n    idx_ckig = (79 + -79)\n    list_x7v3 = range ( n - (55 + -54) )\n    while idx_ckig < len(list_x7v3):\n        i = list_x7v3[idx_ckig]\n        idx_w1uc = (63 + -63)\n        list_e5g8 = range ( i + (35 + -34) , n )\n        while idx_w1uc < len(list_e5g8):\n            j = list_e5g8[idx_w1uc]\n            abs_diff = abs ( arr [ i ] - arr [ j ] )\n            if abs_diff in mp.keys ( ) :\n                p = mp [ abs_diff ]\n                if ( p [ (75 + -75) ] != i and p [ (57 + -57) ] != j and p [ (25 + -24) ] != i and p [ (98 + -97) ] != j ) :\n                    d = max ( d , max ( arr [ i ] , arr [ j ] ) )\n            idx_w1uc = idx_w1uc + (90 + -89)\n        idx_ckig = idx_ckig + (21 + -20)\n    return d", "id": "ConstantUnfoldding_sample_from_FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1_to_112", "old_id": "FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1"}
{"code": "def maxPrimeFactors ( n ) :\n    maxPrime = - (50 + -49)\n    while n % (78 + -76) == (67 + -67) :\n        maxPrime = (77 + -75)\n        n >>= (4 + -3)\n    idx_owbv = (99 + -99)\n    list_ktwp = range ( (83 + -80) , int ( math.sqrt ( n ) ) + (92 + -91) , (64 + -62) )\n    while idx_owbv < len(list_ktwp):\n        i = list_ktwp[idx_owbv]\n        while n % i == (33 + -33) :\n            maxPrime = i\n            n = n / i\n        idx_owbv = idx_owbv + (50 + -49)\n    if n > (65 + -63) :\n        maxPrime = n\n    return int ( maxPrime )", "id": "ConstantUnfoldding_sample_from_FIND_LARGEST_PRIME_FACTOR_NUMBER_to_113", "old_id": "FIND_LARGEST_PRIME_FACTOR_NUMBER"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = (1 + 0)\n    if ( A == B ) :\n        return (38 + -37)\n    elif ( ( B - A ) >= (52 + -47) ) :\n        return (15 + -15)\n    else :\n        idx_8w54 = (91 + -91)\n        list_jefx = range ( A + (38 + -37) , B + (73 + -72) )\n        while idx_8w54 < len(list_jefx):\n            i = list_jefx[idx_8w54]\n            variable = ( variable * ( i % (92 + -82) ) ) % (94 + -84)\n            idx_8w54 = idx_8w54 + (77 + -76)\n        return variable % (4 + 6)", "id": "ConstantUnfoldding_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_114", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - (69 + -68)\n    csum = [ (21 + -21) ] * n\n    csum [ (37 + -37) ] = arr [ (5 + -5) ]\n    idx_dym0 = (76 + -76)\n    list_wf41 = range ( (8 + -7) , n )\n    while idx_dym0 < len(list_wf41):\n        i = list_wf41[idx_dym0]\n        csum [ i ] = csum [ i - (40 + -39) ] + arr [ i ]\n        idx_dym0 = idx_dym0 + (41 + -40)\n    max_sum = csum [ k - (49 + -48) ]\n    max_end = k - (97 + -96)\n    idx_zb62 = (28 + -28)\n    list_scuo = range ( k , n )\n    while idx_zb62 < len(list_scuo):\n        i = list_scuo[idx_zb62]\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n        idx_zb62 = idx_zb62 + (43 + -42)\n    return max_end - k + (2 + -1)", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_to_115", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH"}
{"code": "def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - (53 + -52)\n    sum = arr [ (43 + -43) ]\n    idx_rfja = (79 + -79)\n    list_t3ny = range ( (65 + -64) , k )\n    while idx_rfja < len(list_t3ny):\n        i = list_t3ny[idx_rfja]\n        sum += arr [ i ]\n        idx_rfja = idx_rfja + (46 + -45)\n    max_sum = sum\n    max_end = k - (41 + -40)\n    idx_tjla = (77 + -77)\n    list_p6uf = range ( k , n )\n    while idx_tjla < len(list_p6uf):\n        i = list_p6uf[idx_tjla]\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n        idx_tjla = idx_tjla + (32 + -31)\n    return max_end - k + (49 + -48)", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1_to_116", "old_id": "FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1"}
{"code": "def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ (42 + -42) for i in range ( m + (66 + -65) ) ] for j in range ( n + (17 + -16) ) ]\n    idx_9m4e = (11 + -11)\n    list_trxo = range ( (6 + -5) , n + (45 + -44) , (63 + -62) )\n    while idx_9m4e < len(list_trxo):\n        i = list_trxo[idx_9m4e]\n        idx_5gqv = (41 + -41)\n        list_7mdr = range ( i , m + (32 + -31) , (21 + -20) )\n        while idx_5gqv < len(list_7mdr):\n            j = list_7mdr[idx_5gqv]\n            dp [ i ] [ j ] = max ( ( dp [ i - (82 + -81) ] [ j - (10 + -9) ] + ( A [ j - (45 + -44) ] * B [ i - (19 + -18) ] ) ) , dp [ i ] [ j - (91 + -90) ] )\n            idx_5gqv = idx_5gqv + (82 + -81)\n        idx_9m4e = idx_9m4e + (87 + -86)\n    return dp [ n ] [ m ]", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S_to_117", "old_id": "FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S"}
{"code": "def maxProduct ( arr , n ) :\n    if n < (74 + -71) :\n        return - (76 + -75)\n    max_product = - ( sys.maxsize - (17 + -16) )\n    idx_4i5l = (14 + -14)\n    list_pfmr = range ( (89 + -89) , n - (63 + -61) )\n    while idx_4i5l < len(list_pfmr):\n        i = list_pfmr[idx_4i5l]\n        idx_ja1k = (84 + -84)\n        list_htjd = range ( i + (13 + -12) , n - (19 + -18) )\n        while idx_ja1k < len(list_htjd):\n            j = list_htjd[idx_ja1k]\n            idx_0jgv = (64 + -64)\n            list_9ryi = range ( j + (94 + -93) , n )\n            while idx_0jgv < len(list_9ryi):\n                k = list_9ryi[idx_0jgv]\n                max_product = max ( max_product , arr [ i ] * arr [ j ] * arr [ k ] )\n                idx_0jgv = idx_0jgv + (7 + -6)\n            idx_ja1k = idx_ja1k + (27 + -26)\n        idx_4i5l = idx_4i5l + (30 + -29)\n    return max_product", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_to_118", "old_id": "FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = (39 + -39) , (15 + -15) , (94 + -94)\n    idx_yfri = (17 + -17)\n    list_2xtb = range ( n1 )\n    while idx_yfri < len(list_2xtb):\n        i = list_2xtb[idx_yfri]\n        sum1 += stack1 [ i ]\n        idx_yfri = idx_yfri + (72 + -71)\n    idx_xker = (10 + -10)\n    list_5atl = range ( n2 )\n    while idx_xker < len(list_5atl):\n        i = list_5atl[idx_xker]\n        sum2 += stack2 [ i ]\n        idx_xker = idx_xker + (15 + -14)\n    idx_79jh = (32 + -32)\n    list_aivx = range ( n3 )\n    while idx_79jh < len(list_aivx):\n        i = list_aivx[idx_79jh]\n        sum3 += stack3 [ i ]\n        idx_79jh = idx_79jh + (68 + -67)\n    top1 , top2 , top3 = (67 + -67) , (2 + -2) , (23 + -23)\n    ans = (13 + -13)\n    while (55 + -54) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) :\n            return (13 + -13)\n        if ( sum1 == sum2 and sum2 == sum3 ) :\n            return sum1\n        if ( sum1 >= sum2 and sum1 >= sum3 ) :\n            sum1 -= stack1 [ top1 ]\n            top1 = top1 + (40 + -39)\n        elif ( sum2 >= sum3 and sum2 >= sum3 ) :\n            sum2 -= stack2 [ top2 ]\n            top2 = top2 + (38 + -37)\n        elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n            sum3 -= stack3 [ top3 ]\n            top3 = top3 + (86 + -85)", "id": "ConstantUnfoldding_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_119", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = sys.maxsize\n    mx = - sys.maxsize - (37 + -36)\n    idx_n3m8 = (12 + -12)\n    list_m3rn = range ( r )\n    while idx_n3m8 < len(list_m3rn):\n        i = list_m3rn[idx_n3m8]\n        if m [ i ] [ (61 + -61) ] < mi :\n            mi = m [ i ] [ (81 + -81) ]\n        if m [ i ] [ c - (21 + -20) ] > mx :\n            mx = m [ i ] [ c - (60 + -59) ]\n        idx_n3m8 = idx_n3m8 + (71 + -70)\n    desired = ( r * c + (46 + -45) ) // (100 + -98)\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // (17 + -15)\n        place = [ (48 + -48) ]\n        idx_04l6 = (92 + -92)\n        list_ef12 = range ( r )\n        while idx_04l6 < len(list_ef12):\n            i = list_ef12[idx_04l6]\n            j = upper_bound ( m [ i ] , mid )\n            place [ (19 + -19) ] = place [ (66 + -66) ] + j\n            idx_04l6 = idx_04l6 + (99 + -98)\n        if place [ (51 + -51) ] < desired :\n            mi = mid + (79 + -78)\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return mi", "id": "ConstantUnfoldding_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_120", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def findMinDiff ( arr , n ) :\n    diff = (53 + -43) ** (53 + -33)\n    idx_gn3z = (58 + -58)\n    list_fanu = range ( n - (19 + -18) )\n    while idx_gn3z < len(list_fanu):\n        i = list_fanu[idx_gn3z]\n        idx_gxtw = (79 + -79)\n        list_qgmt = range ( i + (47 + -46) , n )\n        while idx_gxtw < len(list_qgmt):\n            j = list_qgmt[idx_gxtw]\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n            idx_gxtw = idx_gxtw + (61 + -60)\n        idx_gn3z = idx_gn3z + (18 + -17)\n    return diff", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_to_121", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR"}
{"code": "def findMinDiff ( arr , n ) :\n    arr = arr[:n]\n    arr = sorted ( arr )\n    diff = (22 + -12) ** (34 + -14)\n    idx_2iwr = (28 + -28)\n    list_y9mp = range ( n - (50 + -49) )\n    while idx_2iwr < len(list_y9mp):\n        i = list_y9mp[idx_2iwr]\n        if arr [ i + (68 + -67) ] - arr [ i ] < diff :\n            diff = arr [ i + (86 + -85) ] - arr [ i ]\n        idx_2iwr = idx_2iwr + (20 + -19)\n    return diff", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_DIFFERENCE_PAIR_1_to_122", "old_id": "FIND_MINIMUM_DIFFERENCE_PAIR_1"}
{"code": "def findMinNumber ( n ) :\n    count = (69 + -69)\n    ans = (90 + -89)\n    while n % (91 + -89) == (37 + -37) :\n        count += (23 + -22)\n        n //= (94 + -92)\n    if count % (78 + -76) is not (15 + -15) :\n        ans *= (3 + -1)\n    idx_x6lu = (32 + -32)\n    list_xhcy = range ( (69 + -66) , ( int ) ( math.sqrt ( n ) ) + (23 + -22) , (75 + -73) )\n    while idx_x6lu < len(list_xhcy):\n        i = list_xhcy[idx_x6lu]\n        count = (90 + -90)\n        while n % i == (24 + -24) :\n            count += (77 + -76)\n            n //= i\n        if count % (81 + -79) is not (32 + -32) :\n            ans *= i\n        idx_x6lu = idx_x6lu + (73 + -72)\n    if n > (60 + -58) :\n        ans *= n\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE_to_123", "old_id": "FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE"}
{"code": "def minCoins ( coins , m , V ) :\n    table = [ (85 + -85) for i in range ( V + (74 + -73) ) ]\n    table [ (90 + -90) ] = (62 + -62)\n    idx_910z = (23 + -23)\n    list_f4pt = range ( (76 + -75) , V + (66 + -65) )\n    while idx_910z < len(list_f4pt):\n        i = list_f4pt[idx_910z]\n        table [ i ] = sys.maxsize\n        idx_910z = idx_910z + (98 + -97)\n    idx_dq7m = (86 + -86)\n    list_tufb = range ( (14 + -13) , V + (32 + -31) )\n    while idx_dq7m < len(list_tufb):\n        i = list_tufb[idx_dq7m]\n        idx_bkwi = (76 + -76)\n        list_zinm = range ( m )\n        while idx_bkwi < len(list_zinm):\n            j = list_zinm[idx_bkwi]\n            if ( coins [ j ] <= i ) :\n                sub_res = table [ i - coins [ j ] ]\n                if ( sub_res != sys.maxsize and sub_res + (26 + -25) < table [ i ] ) :\n                    table [ i ] = sub_res + (47 + -46)\n            idx_bkwi = idx_bkwi + (42 + -41)\n        idx_dq7m = idx_dq7m + (100 + -99)\n    return table [ V ]", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1_to_124", "old_id": "FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1"}
{"code": "def minRadius ( k , x , y , n ) :\n    dis = [ (77 + -77) ] * n\n    idx_7ynf = (50 + -50)\n    list_m9pv = range ( (52 + -52) , n )\n    while idx_7ynf < len(list_m9pv):\n        i = list_m9pv[idx_7ynf]\n        dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]\n        idx_7ynf = idx_7ynf + (44 + -43)\n    dis.sort ( )\n    return dis [ k - (62 + -61) ]", "id": "ConstantUnfoldding_sample_from_FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE_to_125", "old_id": "FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE"}
{"code": "def countEndless ( input , n ) :\n    row = np.zeros ( ( n , n ) )\n    col = np.zeros ( ( n , n ) )\n    idx_bw1f = (18 + -18)\n    list_rfmu = range ( n )\n    while idx_bw1f < len(list_rfmu):\n        j = list_rfmu[idx_bw1f]\n        isEndless = (37 + -36)\n        idx_qx9i = (50 + -50)\n        list_shng = range ( n - (9 + -8) , - (76 + -75) , - (55 + -54) )\n        while idx_qx9i < len(list_shng):\n            i = list_shng[idx_qx9i]\n            if ( input [ i ] [ j ] == (69 + -69) ) :\n                isEndless = (65 + -65)\n            col [ i ] [ j ] = isEndless\n            idx_qx9i = idx_qx9i + (22 + -21)\n        idx_bw1f = idx_bw1f + (68 + -67)\n    idx_39ca = (35 + -35)\n    list_by4l = range ( n )\n    while idx_39ca < len(list_by4l):\n        i = list_by4l[idx_39ca]\n        isEndless = (77 + -76)\n        idx_t0p7 = (68 + -68)\n        list_ncb3 = range ( n - (30 + -29) , - (49 + -48) , - (91 + -90) )\n        while idx_t0p7 < len(list_ncb3):\n            j = list_ncb3[idx_t0p7]\n            if ( input [ i ] [ j ] == (94 + -94) ) :\n                isEndless = (80 + -80)\n            row [ i ] [ j ] = isEndless\n            idx_t0p7 = idx_t0p7 + (78 + -77)\n        idx_39ca = idx_39ca + (57 + -56)\n    ans = (23 + -23)\n    idx_ad9r = (67 + -67)\n    list_ea2j = range ( n )\n    while idx_ad9r < len(list_ea2j):\n        i = list_ea2j[idx_ad9r]\n        idx_c3pm = (72 + -72)\n        list_it50 = range ( (92 + -91) , n )\n        while idx_c3pm < len(list_it50):\n            j = list_it50[idx_c3pm]\n            if ( row [ i ] [ j ] and col [ i ] [ j ] ) :\n                ans += (96 + -95)\n            idx_c3pm = idx_c3pm + (68 + -67)\n        idx_ad9r = idx_ad9r + (59 + -58)\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_ENDLESS_POINTS_to_126", "old_id": "FIND_NUMBER_ENDLESS_POINTS"}
{"code": "def CountSquares ( a , b ) :\n    cnt = (31 + -31)\n    idx_9igw = (30 + -30)\n    list_ueoa = range ( a , b + (62 + -61) )\n    while idx_9igw < len(list_ueoa):\n        i = list_ueoa[idx_9igw]\n        j = (21 + -20) ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + (49 + -48)\n            j = j + (44 + -43)\n        i = i + (39 + -38)\n        idx_9igw = idx_9igw + (82 + -81)\n    return cnt", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_to_127", "old_id": "FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS"}
{"code": "def count ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    lookup = [ [ (12 + -12) ] * ( n + (74 + -73) ) for i in range ( m + (62 + -61) ) ]\n    idx_4j9u = (8 + -8)\n    list_mr5l = range ( n + (33 + -32) )\n    while idx_4j9u < len(list_mr5l):\n        i = list_mr5l[idx_4j9u]\n        lookup [ (80 + -80) ] [ i ] = (20 + -20)\n        idx_4j9u = idx_4j9u + (33 + -32)\n    idx_q43i = (41 + -41)\n    list_kznt = range ( m + (65 + -64) )\n    while idx_q43i < len(list_kznt):\n        i = list_kznt[idx_q43i]\n        lookup [ i ] [ (92 + -92) ] = (68 + -67)\n        idx_q43i = idx_q43i + (52 + -51)\n    idx_l9wg = (65 + -65)\n    list_9bzr = range ( (28 + -27) , m + (1 + 0) )\n    while idx_l9wg < len(list_9bzr):\n        i = list_9bzr[idx_l9wg]\n        idx_ukiq = (52 + -52)\n        list_lk61 = range ( (13 + -12) , n + (60 + -59) )\n        while idx_ukiq < len(list_lk61):\n            j = list_lk61[idx_ukiq]\n            if a [ i - (69 + -68) ] == b [ j - (63 + -62) ] :\n                lookup [ i ] [ j ] = lookup [ i - (14 + -13) ] [ j - (38 + -37) ] + lookup [ i - (46 + -45) ] [ j ]\n            else :\n                lookup [ i ] [ j ] = lookup [ i - (14 + -13) ] [ j ]\n            idx_ukiq = idx_ukiq + (88 + -87)\n        idx_l9wg = idx_l9wg + (51 + -50)\n    return lookup [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_128", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def countOps ( A , B , m , n ) :\n    idx_xjld = (67 + -67)\n    list_a492 = range ( n )\n    while idx_xjld < len(list_a492):\n        i = list_a492[idx_xjld]\n        idx_2be9 = (45 + -45)\n        list_9qcl = range ( m )\n        while idx_2be9 < len(list_9qcl):\n            j = list_9qcl[idx_2be9]\n            A [ i ] [ j ] -= B [ i ] [ j ]\n            idx_2be9 = idx_2be9 + (37 + -36)\n        idx_xjld = idx_xjld + (81 + -80)\n    idx_1w6y = (62 + -62)\n    list_omew = range ( (80 + -79) , n )\n    while idx_1w6y < len(list_omew):\n        i = list_omew[idx_1w6y]\n        idx_hjbq = (71 + -71)\n        list_axfd = range ( (24 + -23) , n )\n        while idx_hjbq < len(list_axfd):\n            j = list_axfd[idx_hjbq]\n            if ( A [ i ] [ j ] - A [ i ] [ (20 + -20) ] - A [ (31 + -31) ] [ j ] + A [ (80 + -80) ] [ (70 + -70) ] != (57 + -57) ) :\n                return - (19 + -18)\n            idx_hjbq = idx_hjbq + (77 + -76)\n        idx_1w6y = idx_1w6y + (74 + -73)\n    result = (56 + -56)\n    idx_m1py = (68 + -68)\n    list_7mr0 = range ( n )\n    while idx_m1py < len(list_7mr0):\n        i = list_7mr0[idx_m1py]\n        result += abs ( A [ i ] [ (32 + -32) ] )\n        idx_m1py = idx_m1py + (9 + -8)\n    idx_zpu9 = (18 + -18)\n    list_nguk = range ( m )\n    while idx_zpu9 < len(list_nguk):\n        j = list_nguk[idx_zpu9]\n        result += abs ( A [ (56 + -56) ] [ j ] - A [ (48 + -48) ] [ (8 + -8) ] )\n        idx_zpu9 = idx_zpu9 + (18 + -17)\n    return ( result )", "id": "ConstantUnfoldding_sample_from_FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL_to_129", "old_id": "FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL"}
{"code": "def findSDSFunc ( n ) :\n    DP = [ (98 + -98) ] * ( n + (23 + -22) )\n    DP [ (51 + -51) ] = (67 + -67)\n    DP [ (84 + -83) ] = (89 + -88)\n    idx_ut4g = (27 + -27)\n    list_xcnk = range ( (54 + -52) , n + (73 + -72) )\n    while idx_ut4g < len(list_xcnk):\n        i = list_xcnk[idx_ut4g]\n        if ( int ( i % (50 + -48) ) == (75 + -75) ) :\n            DP [ i ] = DP [ int ( i / (51 + -49) ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - (98 + -97) ) / (74 + -72) ) ] + DP [ int ( ( i + (70 + -69) ) / (24 + -22) ) ] )\n        idx_ut4g = idx_ut4g + (87 + -86)\n    return DP [ n ]", "id": "ConstantUnfoldding_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_130", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def findExtraCharcter ( strA , strB ) :\n    res = (27 + -27)\n    idx_mkrh = (49 + -49)\n    list_al9x = range ( (55 + -55) , len ( strA ) )\n    while idx_mkrh < len(list_al9x):\n        i = list_al9x[idx_mkrh]\n        res = res ^ ( ord ) ( strA [ i ] )\n        idx_mkrh = idx_mkrh + (92 + -91)\n    idx_tnes = (89 + -89)\n    list_my02 = range ( (43 + -43) , len ( strB ) )\n    while idx_tnes < len(list_my02):\n        i = list_my02[idx_tnes]\n        res = res ^ ( ord ) ( strB [ i ] )\n        idx_tnes = idx_tnes + (19 + -18)\n    return ( ( chr ) ( res ) ) ;", "id": "ConstantUnfoldding_sample_from_FIND_ONE_EXTRA_CHARACTER_STRING_1_to_131", "old_id": "FIND_ONE_EXTRA_CHARACTER_STRING_1"}
{"code": "def pairSum ( mat , n , sum ) :\n    idx_dquz = (29 + -29)\n    list_674o = range ( n )\n    while idx_dquz < len(list_674o):\n        i = list_674o[idx_dquz]\n        mat [ i ].sort ( )\n        idx_dquz = idx_dquz + (90 + -89)\n    idx_ig0n = (70 + -70)\n    list_jayk = range ( n - (92 + -91) )\n    while idx_ig0n < len(list_jayk):\n        i = list_jayk[idx_ig0n]\n        idx_8g4i = (64 + -64)\n        list_jv3k = range ( i + (41 + -40) , n )\n        while idx_8g4i < len(list_jv3k):\n            j = list_jv3k[idx_8g4i]\n            left = (78 + -78)\n            right = n - (54 + -53)\n            while ( left < n and right >= (22 + -22) ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += (87 + -86)\n                    right -= (84 + -83)\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += (93 + -92)\n                    else :\n                        right -= (74 + -73)\n            idx_8g4i = idx_8g4i + (2 + -1)\n        idx_ig0n = idx_ig0n + (14 + -13)", "id": "ConstantUnfoldding_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_132", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def findMaxGCD ( arr , n ) :\n    high = (26 + -26)\n    idx_9zws = (50 + -50)\n    list_hd6o = range ( (53 + -53) , n )\n    while idx_9zws < len(list_hd6o):\n        i = list_hd6o[idx_9zws]\n        high = max ( high , arr [ i ] )\n        idx_9zws = idx_9zws + (78 + -77)\n    count = [ (2 + -2) ] * ( high + (27 + -26) )\n    idx_gqrs = (98 + -98)\n    list_foxb = range ( (8 + -8) , n )\n    while idx_gqrs < len(list_foxb):\n        i = list_foxb[idx_gqrs]\n        count [ arr [ i ] ] += (100 + -99)\n        idx_gqrs = idx_gqrs + (25 + -24)\n    counter = (72 + -72)\n    idx_6uyr = (64 + -64)\n    list_0tl2 = range ( high , (15 + -15) , - (54 + -53) )\n    while idx_6uyr < len(list_0tl2):\n        i = list_0tl2[idx_6uyr]\n        j = i\n        while ( j <= high ) :\n            if ( count [ j ] > (13 + -13) ) :\n                counter += count [ j ]\n            j += i\n            if ( counter == (26 + -24) ) :\n                return i\n        counter = (90 + -90)\n        idx_6uyr = idx_6uyr + (41 + -40)\n    return (46 + -45)\n", "id": "ConstantUnfoldding_sample_from_FIND_PAIR_MAXIMUM_GCD_ARRAY_1_to_133", "old_id": "FIND_PAIR_MAXIMUM_GCD_ARRAY_1"}
{"code": "def findGreatest ( arr , n ) :\n    result = - (85 + -84)\n    idx_cwkq = (66 + -66)\n    list_p8vi = range ( n )\n    while idx_cwkq < len(list_p8vi):\n        i = list_p8vi[idx_cwkq]\n        idx_sihu = (46 + -46)\n        list_tzwb = range ( n - (39 + -38) )\n        while idx_sihu < len(list_tzwb):\n            j = list_tzwb[idx_sihu]\n            idx_we93 = (59 + -59)\n            list_0zn1 = range ( j + (62 + -61) , n )\n            while idx_we93 < len(list_0zn1):\n                k = list_0zn1[idx_we93]\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n                idx_we93 = idx_we93 + (83 + -82)\n            idx_sihu = idx_sihu + (100 + -99)\n        idx_cwkq = idx_cwkq + (48 + -47)\n    return result", "id": "ConstantUnfoldding_sample_from_FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_to_134", "old_id": "FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY"}
{"code": "def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == (88 + -88) ) :\n        return False\n    columns = len ( m [ (79 + -79) ] )\n    idx_u6ci = (19 + -19)\n    list_rx7o = range ( rows )\n    while idx_u6ci < len(list_rx7o):\n        y1 = list_rx7o[idx_u6ci]\n        idx_dnmw = (20 + -20)\n        list_rd56 = range ( columns )\n        while idx_dnmw < len(list_rd56):\n            x1 = list_rd56[idx_dnmw]\n            if ( m [ y1 ] [ x1 ] == (57 + -56) ) :\n                idx_isgc = (2 + -2)\n                list_a1sg = range ( y1 + (99 + -98) , rows )\n                while idx_isgc < len(list_a1sg):\n                    y2 = list_a1sg[idx_isgc]\n                    idx_tv7c = (48 + -48)\n                    list_8zdo = range ( x1 + (44 + -43) , columns )\n                    while idx_tv7c < len(list_8zdo):\n                        x2 = list_8zdo[idx_tv7c]\n                        if ( m [ y1 ] [ x2 ] == (25 + -24) and m [ y2 ] [ x1 ] == (76 + -75) and m [ y2 ] [ x2 ] == (6 + -5) ) :\n                            return True\n                        idx_tv7c = idx_tv7c + (35 + -34)\n                    idx_isgc = idx_isgc + (15 + -14)\n            idx_dnmw = idx_dnmw + (50 + -49)\n        idx_u6ci = idx_u6ci + (17 + -16)\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_to_135", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1"}
{"code": "def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == (89 + -89) ) :\n        return False\n    columns = len ( matrix [ (72 + -72) ] )\n    table = { }\n    idx_yivg = (41 + -41)\n    list_b1u0 = range ( rows )\n    while idx_yivg < len(list_b1u0):\n        i = list_b1u0[idx_yivg]\n        idx_nxpo = (4 + -4)\n        list_w1km = range ( columns - (60 + -59) )\n        while idx_nxpo < len(list_w1km):\n            j = list_w1km[idx_nxpo]\n            idx_fcdm = (19 + -19)\n            list_impd = range ( j + (74 + -73) , columns )\n            while idx_fcdm < len(list_impd):\n                k = list_impd[idx_fcdm]\n                if ( matrix [ i ] [ j ] == (83 + -82) and matrix [ i ] [ k ] == (67 + -66) ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n                idx_fcdm = idx_fcdm + (18 + -17)\n            idx_nxpo = idx_nxpo + (23 + -22)\n        idx_yivg = idx_yivg + (90 + -89)\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1_to_136", "old_id": "FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1"}
{"code": "def findRepeating ( arr , n ) :\n    s = set ( )\n    idx_nuwz = (47 + -47)\n    list_3szg = range ( n )\n    while idx_nuwz < len(list_3szg):\n        i = list_3szg[idx_nuwz]\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n        idx_nuwz = idx_nuwz + (21 + -20)\n    rteurn - (24 + -23)", "id": "ConstantUnfoldding_sample_from_FIND_REPETITIVE_ELEMENT_1_N_1_1_to_137", "old_id": "FIND_REPETITIVE_ELEMENT_1_N_1_1"}
{"code": "def subArraySum ( arr , n , sum ) :\n    idx_5d6h = (46 + -46)\n    list_y4te = range ( n )\n    while idx_5d6h < len(list_y4te):\n        i = list_y4te[idx_5d6h]\n        curr_sum = arr [ i ]\n        j = i + (23 + -22)\n        while j <= n :\n            if curr_sum == sum :\n                print ( \"Sum found between\" )\n                print ( \"indexes %d and %d\" % ( i , j - (91 + -90) ) )\n                return (96 + -95)\n            if curr_sum > sum or j == n :\n                break\n            curr_sum = curr_sum + arr [ j ]\n            j += (98 + -97)\n        idx_5d6h = idx_5d6h + (85 + -84)\n    print ( \"No subarray found\" )\n    return (88 + -88)", "id": "ConstantUnfoldding_sample_from_FIND_SUBARRAY_WITH_GIVEN_SUM_to_138", "old_id": "FIND_SUBARRAY_WITH_GIVEN_SUM"}
{"code": "def sumofFactors ( n ) :\n    if ( n % (69 + -67) != (57 + -57) ) :\n        return (63 + -63)\n    res = (46 + -45)\n    idx_lxzf = (13 + -13)\n    list_ul1j = range ( (5 + -3) , ( int ) ( math.sqrt ( n ) ) + (56 + -55) )\n    while idx_lxzf < len(list_ul1j):\n        i = list_ul1j[idx_lxzf]\n        count = (39 + -39)\n        curr_sum = (51 + -50)\n        curr_term = (26 + -25)\n        while ( n % i == (66 + -66) ) :\n            count = count + (34 + -33)\n            n = n // i\n            if ( i == (32 + -30) and count == (94 + -93) ) :\n                curr_sum = (12 + -12)\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n        idx_lxzf = idx_lxzf + (66 + -65)\n    if ( n >= (60 + -58) ) :\n        res = res * ( (64 + -63) + n )\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_SUM_EVEN_FACTORS_NUMBER_to_139", "old_id": "FIND_SUM_EVEN_FACTORS_NUMBER"}
{"code": "def evenSum ( n ) :\n    C = [ [ (7 + -7) for x in range ( n + (59 + -58) ) ] for y in range ( n + (35 + -34) ) ]\n    idx_tvhw = (55 + -55)\n    list_cyi4 = range ( (11 + -11) , n + (1 + 0) )\n    while idx_tvhw < len(list_cyi4):\n        i = list_cyi4[idx_tvhw]\n        idx_rlt5 = (55 + -55)\n        list_nj6x = range ( (56 + -56) , min ( i , n ) + (52 + -51) )\n        while idx_rlt5 < len(list_nj6x):\n            j = list_nj6x[idx_rlt5]\n            if j == (6 + -6) or j == i :\n                C [ i ] [ j ] = (6 + -5)\n            else :\n                C [ i ] [ j ] = C [ i - (29 + -28) ] [ j - (36 + -35) ] + C [ i - (15 + -14) ] [ j ]\n            idx_rlt5 = idx_rlt5 + (96 + -95)\n        idx_tvhw = idx_tvhw + (95 + -94)\n    sum = (61 + -61) ;\n    idx_4hu6 = (80 + -80)\n    list_2pga = range ( (41 + -41) , n + (36 + -35) )\n    while idx_4hu6 < len(list_2pga):\n        i = list_2pga[idx_4hu6]\n        if i % (29 + -27) == (84 + -84) :\n            sum = sum + C [ n ] [ i ]\n        idx_4hu6 = idx_4hu6 + (71 + -70)\n    return sum", "id": "ConstantUnfoldding_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_140", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum ( N , K ) :\n    ans = (19 + -19)\n    idx_9t1n = (67 + -67)\n    list_ng7b = range ( (60 + -59) , N + (9 + -8) )\n    while idx_9t1n < len(list_ng7b):\n        i = list_ng7b[idx_9t1n]\n        ans += ( i % K )\n        idx_9t1n = idx_9t1n + (82 + -81)\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_to_141", "old_id": "FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER"}
{"code": "def sumofoddFactors ( n ) :\n    res = (63 + -62)\n    while n % (3 + -1) == (57 + -57) :\n        n = n // (70 + -68)\n    idx_ld62 = (53 + -53)\n    list_u2mk = range ( (53 + -50) , int ( math.sqrt ( n ) + (66 + -65) ) )\n    while idx_ld62 < len(list_u2mk):\n        i = list_u2mk[idx_ld62]\n        count = (61 + -61)\n        curr_sum = (59 + -58)\n        curr_term = (61 + -60)\n        while n % i == (55 + -55) :\n            count += (6 + -5)\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n        idx_ld62 = idx_ld62 + (1 + 0)\n    if n >= (51 + -49) :\n        res *= ( (10 + -9) + n )\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_SUM_ODD_FACTORS_NUMBER_to_142", "old_id": "FIND_SUM_ODD_FACTORS_NUMBER"}
{"code": "def findSubarraySum ( arr , n ) :\n    res = (4 + -4)\n    m = dict ( )\n    idx_5fxl = (7 + -7)\n    list_m8dw = range ( n )\n    while idx_5fxl < len(list_m8dw):\n        i = list_m8dw[idx_5fxl]\n        Sum = (22 + -22)\n        idx_f42w = (66 + -66)\n        list_hlac = range ( i , n )\n        while idx_f42w < len(list_hlac):\n            j = list_hlac[idx_f42w]\n            Sum += arr [ j ]\n            m [ Sum ] = m.get ( Sum , (15 + -15) ) + (88 + -87)\n            idx_f42w = idx_f42w + (1 + 0)\n        idx_5fxl = idx_5fxl + (91 + -90)\n    idx_q0c1 = (67 + -67)\n    list_ypf8 = m\n    while idx_q0c1 < len(list_ypf8):\n        x = list_ypf8[idx_q0c1]\n        if m [ x ] == (59 + -58) :\n            res += x\n        idx_q0c1 = idx_q0c1 + (26 + -25)\n    return res", "id": "ConstantUnfoldding_sample_from_FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY_to_143", "old_id": "FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY"}
{"code": "def findElement ( arr , n ) :\n    leftMax = [ None ] * n\n    leftMax [ (24 + -24) ] = float ( '-inf' )\n    idx_ou2n = (36 + -36)\n    list_j7r2 = range ( (82 + -81) , n )\n    while idx_ou2n < len(list_j7r2):\n        i = list_j7r2[idx_ou2n]\n        leftMax [ i ] = max ( leftMax [ i - (70 + -69) ] , arr [ i - (85 + -84) ] )\n        idx_ou2n = idx_ou2n + (72 + -71)\n    rightMin = float ( 'inf' )\n    idx_960k = (58 + -58)\n    list_0gnx = range ( n - (75 + -74) , - (2 + -1) , - (62 + -61) )\n    while idx_960k < len(list_0gnx):\n        i = list_0gnx[idx_960k]\n        if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] :\n            return i\n        rightMin = min ( rightMin , arr [ i ] )\n        idx_960k = idx_960k + (36 + -35)\n    return - (71 + -70)", "id": "ConstantUnfoldding_sample_from_FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT_to_144", "old_id": "FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT"}
{"code": "def getSingle ( arr , n ) :\n    ones = (46 + -46)\n    twos = (70 + -70)\n    idx_z24s = (16 + -16)\n    list_uyho = range ( n )\n    while idx_z24s < len(list_uyho):\n        i = list_uyho[idx_z24s]\n        twos = twos | ( ones & arr [ i ] )\n        ones = ones ^ arr [ i ]\n        common_bit_mask = ~ ( ones & twos )\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n        idx_z24s = idx_z24s + (53 + -52)\n    return ones", "id": "ConstantUnfoldding_sample_from_FIND_THE_ELEMENT_THAT_APPEARS_ONCE_to_145", "old_id": "FIND_THE_ELEMENT_THAT_APPEARS_ONCE"}
{"code": "def maxLen ( arr , n ) :\n    max_len = (95 + -95)\n    idx_ha4p = (3 + -3)\n    list_2d68 = range ( n )\n    while idx_ha4p < len(list_2d68):\n        i = list_2d68[idx_ha4p]\n        curr_sum = (69 + -69)\n        idx_9efu = (74 + -74)\n        list_inub = range ( i , n )\n        while idx_9efu < len(list_inub):\n            j = list_inub[idx_9efu]\n            curr_sum += arr [ j ]\n            if curr_sum == (66 + -66) :\n                max_len = max ( max_len , j - i + (87 + -86) )\n            idx_9efu = idx_9efu + (72 + -71)\n        idx_ha4p = idx_ha4p + (54 + -53)\n    return max_len\n", "id": "ConstantUnfoldding_sample_from_FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_to_146", "old_id": "FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM"}
{"code": "def findMaximum ( arr , low , high ) :\n    max = arr[low]\n    idx_q9nd = (53 + -53)\n    list_5syw = range(low, high + (75 + -74))\n    while idx_q9nd < len(list_5syw):\n        i = list_5syw[idx_q9nd]\n        if arr[i] > max:\n            max = arr[i]\n        idx_q9nd = idx_q9nd + (50 + -49)\n    return max", "id": "ConstantUnfoldding_sample_from_FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING_to_147", "old_id": "FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING"}
{"code": "def maxSubarrayXOR ( arr , n ) :\n    ans = - (93 + 2147483555)\n    idx_fhmj = (68 + -68)\n    list_ls1d = range ( n )\n    while idx_fhmj < len(list_ls1d):\n        i = list_ls1d[idx_fhmj]\n        curr_xor = (79 + -79)\n        idx_9hcf = (15 + -15)\n        list_9hg0 = range ( i , n )\n        while idx_9hcf < len(list_9hg0):\n            j = list_9hg0[idx_9hcf]\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n            idx_9hcf = idx_9hcf + (45 + -44)\n        idx_fhmj = idx_fhmj + (97 + -96)\n    return ans", "id": "ConstantUnfoldding_sample_from_FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY_to_148", "old_id": "FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY"}
{"code": "def minDist ( arr , n , x , y ) :\n    min_dist = (34 + 2147483613)\n    idx_jkhp = (57 + -57)\n    list_7boc = range ( n )\n    while idx_jkhp < len(list_7boc):\n        i = list_7boc[idx_jkhp]\n        idx_nkax = (65 + -65)\n        list_3alm = range ( i + (14 + -13) , n )\n        while idx_nkax < len(list_3alm):\n            j = list_3alm[idx_nkax]\n            if ( x == arr [ i ] and y == arr [ j ] or y == arr [ i ] and x == arr [ j ] ) and min_dist > abs ( i - j ) :\n                min_dist = abs ( i - j )\n            idx_nkax = idx_nkax + (65 + -64)\n        idx_jkhp = idx_jkhp + (59 + -58)\n    return min_dist\n\n", "id": "ConstantUnfoldding_sample_from_FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS_to_149", "old_id": "FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS"}
{"code": "def getMissingNo ( a , n ) :\n    i , total = (81 + -81) , (77 + -76)\n    idx_dexs = (37 + -37)\n    list_1jnw = range ( (27 + -25) , n + (83 + -81) )\n    while idx_dexs < len(list_1jnw):\n        i = list_1jnw[idx_dexs]\n        total += i\n        total -= a [ i - (54 + -52) ]\n        idx_dexs = idx_dexs + (89 + -88)\n    return total", "id": "ConstantUnfoldding_sample_from_FIND_THE_MISSING_NUMBER_1_to_150", "old_id": "FIND_THE_MISSING_NUMBER_1"}
{"code": "def getOddOccurrence ( arr , arr_size ) :\n    idx_hbc1 = (86 + -86)\n    list_f6nh = range ( (98 + -98) , arr_size )\n    while idx_hbc1 < len(list_f6nh):\n        i = list_f6nh[idx_hbc1]\n        count = (34 + -34)\n        idx_bf8c = (13 + -13)\n        list_tdn5 = range ( (53 + -53) , arr_size )\n        while idx_bf8c < len(list_tdn5):\n            j = list_tdn5[idx_bf8c]\n            if arr [ i ] == arr [ j ] :\n                count += (100 + -99)\n            idx_bf8c = idx_bf8c + (63 + -62)\n        if ( count % (9 + -7) != (23 + -23) ) :\n            return arr [ i ]\n        idx_hbc1 = idx_hbc1 + (47 + -46)\n    return - (69 + -68)", "id": "ConstantUnfoldding_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_to_151", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES"}
{"code": "def getOddOccurrence ( ar , ar_size) :\n    res = (38 + -38)\n    idx_0aqg = (53 + -53)\n    list_3hcb = range ( (62 + -62), ar_size )\n    while idx_0aqg < len(list_3hcb):\n        i = list_3hcb[idx_0aqg]\n        res = res ^ ar [ i ]\n        idx_0aqg = idx_0aqg + (68 + -67)\n    return res\n", "id": "ConstantUnfoldding_sample_from_FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2_to_152", "old_id": "FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2"}
{"code": "def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    idx_dg9v = (76 + -76)\n    list_qtkx = range ( n1 )\n    while idx_dg9v < len(list_qtkx):\n        i = list_qtkx[idx_dg9v]\n        s.add ( a1 [ i ] )\n        idx_dg9v = idx_dg9v + (72 + -71)\n    idx_hdec = (40 + -40)\n    list_9f3g = range ( n2 )\n    while idx_hdec < len(list_9f3g):\n        i = list_9f3g[idx_hdec]\n        idx_1f9r = (50 + -50)\n        list_vj70 = range ( n3 )\n        while idx_1f9r < len(list_vj70):\n            j = list_vj70[idx_1f9r]\n            if sum - a2 [ i ] - a3 [ j ] in s :\n                return True\n            idx_1f9r = idx_1f9r + (37 + -36)\n        idx_hdec = idx_hdec + (10 + -9)\n    return False", "id": "ConstantUnfoldding_sample_from_FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1_to_153", "old_id": "FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT_A_B_C_K_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    idx_7t36 = (59 + -59)\n    list_f8eq = range ( n - (67 + -66) )\n    while idx_7t36 < len(list_f8eq):\n        i = list_f8eq[idx_7t36]\n        s = set ( )\n        idx_90os = (85 + -85)\n        list_jm1t = range ( i + (8 + -7) , n )\n        while idx_90os < len(list_jm1t):\n            j = list_jm1t[idx_90os]\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n            idx_90os = idx_90os + (88 + -87)\n        idx_7t36 = idx_7t36 + (70 + -69)\n    if found == False :\n        print ( \"No Triplet Found\" )", "id": "ConstantUnfoldding_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_154", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    idx_xgkj = (54 + -54)\n    list_r2pb = range ( (28 + -28) , n - (49 + -48) )\n    while idx_xgkj < len(list_r2pb):\n        i = list_r2pb[idx_xgkj]\n        l = i + (33 + -32)\n        r = n - (26 + -25)\n        x = arr [ i ]\n        while ( l < r ) :\n            if ( x + arr [ l ] + arr [ r ] == (2 + -2) ) :\n                print ( x , arr [ l ] , arr [ r ] )\n                l += (47 + -46)\n                r -= (92 + -91)\n                found = True\n            elif ( x + arr [ l ] + arr [ r ] < (57 + -57) ) :\n                l += (53 + -52)\n            else :\n                r -= (39 + -38)\n        idx_xgkj = idx_xgkj + (42 + -41)\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )", "id": "ConstantUnfoldding_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_155", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = { }\n    idx_a1yu = (45 + -45)\n    list_7j4k = range ( (22 + -22) , n )\n    while idx_a1yu < len(list_7j4k):\n        i = list_7j4k[idx_a1yu]\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += (98 + -97)\n        else :\n            count_map [ arr [ i ] ] = (39 + -38)\n        i += (73 + -72)\n        idx_a1yu = idx_a1yu + (63 + -62)\n    idx_afip = (22 + -22)\n    list_75sb = range ( (3 + -3) , n )\n    while idx_afip < len(list_75sb):\n        i = list_75sb[idx_afip]\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += (55 + -54)\n        idx_afip = idx_afip + (74 + -73)\n    return - (72 + -71)", "id": "ConstantUnfoldding_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_156", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def first ( str ) :\n    idx_rgmi = (93 + -93)\n    list_6mgf = range ( (30 + -30) , len ( str ) )\n    while idx_rgmi < len(list_6mgf):\n        i = list_6mgf[idx_rgmi]\n        if ( str [ i ].istitle ( ) ) :\n            return str [ i ]\n        idx_rgmi = idx_rgmi + (44 + -43)\n    return (13 + -13)", "id": "ConstantUnfoldding_sample_from_FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_to_157", "old_id": "FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE"}
{"code": "def floorSearch ( arr , n , x ) :\n    if x >= arr [ n - (47 + -46) ]: return n - (43 + -42)\n    if x < arr [ (74 + -74) ]: return - (31 + -30)\n    idx_9igz = (45 + -45)\n    list_tivj = range ( (14 + -13), n )\n    while idx_9igz < len(list_tivj):\n        i = list_tivj[idx_9igz]\n        if arr [ i ] > x: return i - (84 + -83)\n        idx_9igz = idx_9igz + (2 + -1)\n    return - (87 + -86)", "id": "ConstantUnfoldding_sample_from_FLOOR_IN_A_SORTED_ARRAY_to_158", "old_id": "FLOOR_IN_A_SORTED_ARRAY"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= (33 + -24) ) :\n        return \"-1\"\n    result = [ None ] * ( n + (99 + -98) )\n    count = (69 + -68)\n    idx_b58k = (59 + -59)\n    list_ntxs = range ( n + (84 + -83) )\n    while idx_b58k < len(list_ntxs):\n        i = list_ntxs[idx_b58k]\n        if ( i == n or seq [ i ] == 'I' ) :\n            idx_o075 = (51 + -51)\n            list_5od4 = range ( i - (64 + -63) , - (2 + 0) , - (44 + -43) )\n            while idx_o075 < len(list_5od4):\n                j = list_5od4[idx_o075]\n                result [ j + (35 + -34) ] = int ( '0' + str ( count ) )\n                count += (35 + -34)\n                if ( j >= (16 + -16) and seq [ j ] == 'I' ) :\n                    break\n                idx_o075 = idx_o075 + (37 + -36)\n        idx_b58k = idx_b58k + (41 + -40)\n    return result", "id": "ConstantUnfoldding_sample_from_FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1_to_159", "old_id": "FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    idx_ykb3 = (82 + -82)\n    list_zrj3 = range ( n )\n    while idx_ykb3 < len(list_zrj3):\n        i = list_zrj3[idx_ykb3]\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += (100 + -99)\n        else :\n            Hash [ arr [ i ] ] = (44 + -43)\n        idx_ykb3 = idx_ykb3 + (44 + -43)\n    max_count = (34 + -34)\n    res = - (65 + -64)\n    idx_l9ym = (80 + -80)\n    list_t21y = Hash\n    while idx_l9ym < len(list_t21y):\n        i = list_t21y[idx_l9ym]\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n        idx_l9ym = idx_l9ym + (27 + -26)\n    return res", "id": "ConstantUnfoldding_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_160", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = [ (55 + -55) for i in range ( n + (61 + -60) ) ]\n    idx_uoye = (96 + -96)\n    list_me48 = range ( n + (12 + -11) )\n    while idx_uoye < len(list_me48):\n        i = list_me48[idx_uoye]\n        if ( i <= (28 + -26) ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - (68 + -67) ] + ( i - (23 + -22) ) * dp [ i - (73 + -71) ]\n        idx_uoye = idx_uoye + (95 + -94)\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_FRIENDS_PAIRING_PROBLEM_to_161", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def countFriendsPairings ( n ) :\n    a , b , c = (96 + -95) , (52 + -50) , (41 + -41)\n    if ( n <= (17 + -15) ) :\n        return n\n    idx_bnz0 = (25 + -25)\n    list_sghy = range ( (65 + -62) , n + (30 + -29) )\n    while idx_bnz0 < len(list_sghy):\n        i = list_sghy[idx_bnz0]\n        c = b + ( i - (83 + -82) ) * a\n        a = b\n        b = c\n        idx_bnz0 = idx_bnz0 + (17 + -16)\n    return c", "id": "ConstantUnfoldding_sample_from_FRIENDS_PAIRING_PROBLEM_2_to_162", "old_id": "FRIENDS_PAIRING_PROBLEM_2"}
{"code": "def getMinNumberForPattern ( seq ) :\n    n = len ( seq )\n    if ( n >= (9 + 0) ) :\n        return \"-1\"\n    result = [ None ] * ( n + (4 + -3) )\n    count = (96 + -95)\n    idx_84pw = (15 + -15)\n    list_s3q2 = range ( n + (97 + -96) )\n    while idx_84pw < len(list_s3q2):\n        i = list_s3q2[idx_84pw]\n        if ( i == n or seq [ i ] == 'I' ) :\n            idx_pzg7 = (93 + -93)\n            list_4zqf = range ( i - (59 + -58) , - (61 + -59) , - (23 + -22) )\n            while idx_pzg7 < len(list_4zqf):\n                j = list_4zqf[idx_pzg7]\n                result [ j + (3 + -2) ] = int ( '0' + str ( count ) )\n                count += (76 + -75)\n                if ( j >= (83 + -83) and seq [ j ] == 'I' ) :\n                    break\n                idx_pzg7 = idx_pzg7 + (59 + -58)\n        idx_84pw = idx_84pw + (34 + -33)\n    return \"\".join(str(i) for i in result)", "id": "ConstantUnfoldding_sample_from_GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1_to_163", "old_id": "GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = len ( str )\n    arr = [ (64 + -64) ] * l\n    idx_uto7 = (96 + -96)\n    list_fvqa = range ( (74 + -74) , l )\n    while idx_uto7 < len(list_fvqa):\n        i = list_fvqa[idx_uto7]\n        idx_r9zl = (99 + -99)\n        list_utdc = range ( i , l )\n        while idx_r9zl < len(list_utdc):\n            j = list_utdc[idx_r9zl]\n            idx_q7h5 = (90 + -90)\n            list_uowb = range ( j , l )\n            while idx_q7h5 < len(list_uowb):\n                k = list_uowb[idx_q7h5]\n                if ( arr [ i ] % (16 + -8) == (87 + -87) ) :\n                    return True\n                elif ( ( arr [ i ] * (1 + 9) + arr [ j ] ) % (33 + -25) == (18 + -18) and i != j ) :\n                    return True\n                elif ( ( arr [ i ] * (29 + 71) + arr [ j ] * (60 + -50) + arr [ k ] ) % (72 + -64) == (32 + -32) and i != j and j != k and i != k ) :\n                    return True\n                idx_q7h5 = idx_q7h5 + (90 + -89)\n            idx_r9zl = idx_r9zl + (9 + -8)\n        idx_uto7 = idx_uto7 + (40 + -39)\n    return False", "id": "ConstantUnfoldding_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_164", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ (21 + -21) for i in range ( (8 + 2) ) ] for i in range ( n + (49 + -48) ) ]\n    arr = [ (19 + -19) for i in range ( n + (17 + -16) ) ]\n    idx_xvr5 = (46 + -46)\n    list_gy37 = range ( (55 + -54) , n + (37 + -36) )\n    while idx_xvr5 < len(list_gy37):\n        i = list_gy37[idx_xvr5]\n        arr [ i ] = int ( str [ i - (56 + -55) ] )\n        idx_xvr5 = idx_xvr5 + (12 + -11)\n    idx_348g = (9 + -9)\n    list_5bhv = range ( (100 + -99) , n + (61 + -60) )\n    while idx_348g < len(list_5bhv):\n        i = list_5bhv[idx_348g]\n        dp [ i ] [ arr [ i ] % (8 + 0) ] = (70 + -69)\n        idx_z19u = (65 + -65)\n        list_n7wd = range ( (77 + -69) )\n        while idx_z19u < len(list_n7wd):\n            j = list_n7wd[idx_z19u]\n            if ( dp [ i - (55 + -54) ] [ j ] > dp [ i ] [ ( j * (68 + -58) + arr [ i ] ) % (98 + -90) ] ) :\n                dp [ i ] [ ( j * (46 + -36) + arr [ i ] ) % (19 + -11) ] = dp [ i - (66 + -65) ] [ j ]\n            if ( dp [ i - (90 + -89) ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - (52 + -51) ] [ j ]\n            idx_z19u = idx_z19u + (98 + -97)\n        idx_348g = idx_348g + (86 + -85)\n    idx_39ae = (16 + -16)\n    list_qina = range ( (37 + -36) , n + (93 + -92) )\n    while idx_39ae < len(list_qina):\n        i = list_qina[idx_39ae]\n        if ( dp [ i ] [ (45 + -45) ] == (67 + -66) ) :\n            return True\n        idx_39ae = idx_39ae + (7 + -6)\n    return False", "id": "ConstantUnfoldding_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1_to_165", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ (94 + -94) ] * ( m + (24 + -23) )\n    nxtbb = (82 + -82)\n    idx_ae46 = (28 + -28)\n    list_ib0d = range ( (80 + -79) , m + (80 + -79) )\n    while idx_ae46 < len(list_ib0d):\n        i = list_ib0d[idx_ae46]\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - (4 + -3) ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - (56 + -55) ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - (36 + -35) ] + revenue [ nxtbb ] , maxRev [ i - (50 + -49) ] )\n                nxtbb += (53 + -52)\n        else :\n            maxRev [ i ] = maxRev [ i - (72 + -71) ]\n        idx_ae46 = idx_ae46 + (53 + -52)\n    return maxRev [ m ]", "id": "ConstantUnfoldding_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_166", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def horner ( poly , n , x ) :\n    result = poly [ (55 + -55) ]\n    idx_mkbi = (71 + -71)\n    list_yw1b = range ( (84 + -83) , n )\n    while idx_mkbi < len(list_yw1b):\n        i = list_yw1b[idx_mkbi]\n        result = result * x + poly [ i ]\n        idx_mkbi = idx_mkbi + (73 + -72)\n    return result", "id": "ConstantUnfoldding_sample_from_HORNERS_METHOD_POLYNOMIAL_EVALUATION_to_167", "old_id": "HORNERS_METHOD_POLYNOMIAL_EVALUATION"}
{"code": "def search ( arr , x ) :\n    n = len ( arr )\n    idx_a5up = (51 + -51)\n    list_fnmp = range ( (89 + -89) , n )\n    while idx_a5up < len(list_fnmp):\n        j = list_fnmp[idx_a5up]\n        if ( x == arr [ j ] ) :\n            return j\n        idx_a5up = idx_a5up + (53 + -52)\n    return - (47 + -46)", "id": "ConstantUnfoldding_sample_from_HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING_to_168", "old_id": "HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING"}
{"code": "def isHeap ( arr , n ) :\n    idx_6mzq = (15 + -15)\n    list_i1y8 = range ( int ( ( n - (79 + -77) ) / (56 + -54) ) + (45 + -44) )\n    while idx_6mzq < len(list_i1y8):\n        i = list_i1y8[idx_6mzq]\n        if arr [ (4 + -2) * i + (18 + -17) ] > arr [ i ] :\n            return False\n        if ( (27 + -25) * i + (18 + -16) < n and arr [ (100 + -98) * i + (94 + -92) ] > arr [ i ] ) :\n            return False\n        idx_6mzq = idx_6mzq + (93 + -92)\n    return True", "id": "ConstantUnfoldding_sample_from_HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1_to_169", "old_id": "HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1"}
{"code": "def search ( arr , n , x ) :\n    idx_xb2r = (36 + -36)\n    list_8sok = range ( (23 + -23) , n )\n    while idx_xb2r < len(list_8sok):\n        j = list_8sok[idx_xb2r]\n        if ( x == arr [ j ] ) :\n            return j\n        idx_xb2r = idx_xb2r + (45 + -44)\n    return - (83 + -82)", "id": "ConstantUnfoldding_sample_from_HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS_to_170", "old_id": "HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS"}
{"code": "def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = (2 + -2)\n    idx_1feo = (86 + -86)\n    list_xgwl = arr\n    while idx_1feo < len(list_xgwl):\n        i = list_xgwl[idx_1feo]\n        if ( i < (55 + -55) ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - (82 + -81)\n            else :\n                hash [ abs ( i ) ] -= (76 + -75)\n        else :\n            hash [ i ] = hash.get ( i , (52 + -52) ) + (44 + -43)\n        idx_1feo = idx_1feo + (88 + -87)\n    idx_iumc = (35 + -35)\n    list_ocnr = arr\n    while idx_iumc < len(list_ocnr):\n        i = list_ocnr[idx_iumc]\n        if i in hash.keys ( ) and hash [ i ] > (10 + -10) :\n            return i\n        idx_iumc = idx_iumc + (10 + -9)\n    return - (27 + -26)", "id": "ConstantUnfoldding_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_171", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = [ ]\n    sum.append ( (51 + -51) )\n    sum.append ( arr [ (35 + -35) ] )\n    idx_b79r = (48 + -48)\n    list_5mgp = range ( (25 + -23) , n + (17 + -16) )\n    while idx_b79r < len(list_5mgp):\n        i = list_5mgp[idx_b79r]\n        sum.append ( sum [ i - (72 + -71) ] + arr [ i - (9 + -8) ] )\n        idx_b79r = idx_b79r + (6 + -5)\n    Q = [ ]\n    heapq.heapify ( Q )\n    idx_u4q7 = (10 + -10)\n    list_zw5x = range ( (35 + -34) , n + (49 + -48) )\n    while idx_u4q7 < len(list_zw5x):\n        i = list_zw5x[idx_u4q7]\n        idx_7zh2 = (51 + -51)\n        list_af5c = range ( i , n + (79 + -78) )\n        while idx_7zh2 < len(list_af5c):\n            j = list_af5c[idx_7zh2]\n            x = sum [ j ] - sum [ i - (80 + -79) ]\n            if len ( Q ) < k :\n                heapq.heappush ( Q , x )\n            else :\n                if Q [ (90 + -90) ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n            idx_7zh2 = idx_7zh2 + (26 + -25)\n        idx_u4q7 = idx_u4q7 + (16 + -15)\n    return Q [ (2 + -2) ]", "id": "ConstantUnfoldding_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_172", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def find ( a , b , k , n1 , n2 ) :\n    s = set ( )\n    idx_2iem = (94 + -94)\n    list_j0kh = range ( n2 )\n    while idx_2iem < len(list_j0kh):\n        i = list_j0kh[idx_2iem]\n        s.add ( b [ i ] )\n        idx_2iem = idx_2iem + (1 + 0)\n    missing = (50 + -50)\n    idx_3dul = (99 + -99)\n    list_z1s7 = range ( n1 )\n    while idx_3dul < len(list_z1s7):\n        i = list_z1s7[idx_3dul]\n        if a [ i ] not in s :\n            missing += (84 + -83)\n        if missing == k :\n            return a [ i ]\n        idx_3dul = idx_3dul + (12 + -11)\n    return - (100 + -99)", "id": "ConstantUnfoldding_sample_from_K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE_to_173", "old_id": "K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE"}
{"code": "def findSubArray ( arr , n ) :\n    sum = (37 + -37)\n    maxsize = - (26 + -25)\n    idx_pya5 = (47 + -47)\n    list_pjvn = range ( (22 + -22) , n - (19 + -18) )\n    while idx_pya5 < len(list_pjvn):\n        i = list_pjvn[idx_pya5]\n        sum = - (93 + -92) if ( arr [ i ] == (42 + -42) ) else (42 + -41)\n        idx_4j9z = (41 + -41)\n        list_mvyr = range ( i + (21 + -20) , n )\n        while idx_4j9z < len(list_mvyr):\n            j = list_mvyr[idx_4j9z]\n            sum = sum + ( - (84 + -83) ) if ( arr [ j ] == (96 + -96) ) else sum + (23 + -22)\n            if ( sum == (39 + -39) and maxsize < j - i + (72 + -71) ) :\n                maxsize = j - i + (66 + -65)\n                startindex = i\n            idx_4j9z = idx_4j9z + (34 + -33)\n        idx_pya5 = idx_pya5 + (3 + -2)\n    if ( maxsize == - (30 + -29) ) :\n        print ( \"No such subarray\" )\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - (11 + -10) )\n    return maxsize", "id": "ConstantUnfoldding_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_174", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = { }\n    curr_sum = (68 + -68)\n    max_len = (100 + -100)\n    ending_index = - (97 + -96)\n    idx_vqdb = (62 + -62)\n    list_sinv = range ( (45 + -45) , n )\n    while idx_vqdb < len(list_sinv):\n        i = list_sinv[idx_vqdb]\n        if ( arr [ i ] == (60 + -60) ) :\n            arr [ i ] = - (43 + -42)\n        else :\n            arr [ i ] = (47 + -46)\n        idx_vqdb = idx_vqdb + (8 + -7)\n    idx_l80c = (13 + -13)\n    list_7epz = range ( (83 + -83) , n )\n    while idx_l80c < len(list_7epz):\n        i = list_7epz[idx_l80c]\n        curr_sum = curr_sum + arr [ i ]\n        if ( curr_sum == (51 + -51) ) :\n            max_len = i + (92 + -91)\n            ending_index = i\n        if ( curr_sum + n ) in hash_map :\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = i - hash_map [ curr_sum + n ]\n                ending_index = i\n        else :\n            hash_map[curr_sum + n] = i\n        idx_l80c = idx_l80c + (53 + -52)\n    idx_v2ud = (18 + -18)\n    list_8mp7 = range ( (15 + -15) , n )\n    while idx_v2ud < len(list_8mp7):\n        i = list_8mp7[idx_v2ud]\n        if ( arr [ i ] == - (37 + -36) ) :\n            arr [ i ] = (6 + -6)\n        else :\n            arr [ i ] = (86 + -85)\n        idx_v2ud = idx_v2ud + (69 + -68)\n    print ( ending_index - max_len + (52 + -51) , end = \" \" )\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    return max_len", "id": "ConstantUnfoldding_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_175", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def largestGCDSubsequence ( arr , n ) :\n    ans = (74 + -74)\n    maxele = max ( arr )\n    idx_02as = (46 + -46)\n    list_azcs = range ( (34 + -32) , maxele + (83 + -82) )\n    while idx_02as < len(list_azcs):\n        i = list_azcs[idx_02as]\n        count = (51 + -51)\n        idx_vko6 = (33 + -33)\n        list_a03v = range ( n )\n        while idx_vko6 < len(list_a03v):\n            j = list_a03v[idx_vko6]\n            if ( arr [ j ] % i == (56 + -56) ) :\n                count += (77 + -76)\n            idx_vko6 = idx_vko6 + (1 + 0)\n        ans = max ( ans , count )\n        idx_02as = idx_02as + (84 + -83)\n    return ans", "id": "ConstantUnfoldding_sample_from_LARGEST_SUBSEQUENCE_GCD_GREATER_1_to_176", "old_id": "LARGEST_SUBSEQUENCE_GCD_GREATER_1"}
{"code": "def longestSubsequenceCommonSegment ( k , s1 , s2 ) :\n    n = len ( s1 )\n    m = len ( s2 )\n    lcs = [ [ (88 + -88) for x in range ( m + (2 + -1) ) ] for y in range ( n + (11 + -10) ) ]\n    cnt = [ [ (61 + -61) for x in range ( m + (40 + -39) ) ] for y in range ( n + (38 + -37) ) ]\n    idx_10i7 = (43 + -43)\n    list_en1h = range ( (40 + -39) , n + (29 + -28) )\n    while idx_10i7 < len(list_en1h):\n        i = list_en1h[idx_10i7]\n        idx_euwn = (70 + -70)\n        list_hu62 = range ( (63 + -62) , m + (84 + -83) )\n        while idx_euwn < len(list_hu62):\n            j = list_hu62[idx_euwn]\n            lcs [ i ] [ j ] = max ( lcs [ i - (48 + -47) ] [ j ] , lcs [ i ] [ j - (78 + -77) ] )\n            if ( s1 [ i - (68 + -67) ] == s2 [ j - (78 + -77) ] ) :\n                cnt [ i ] [ j ] = cnt [ i - (77 + -76) ] [ j - (43 + -42) ] + (18 + -17)\n            if ( cnt [ i ] [ j ] >= k ) :\n                idx_26jm = (9 + -9)\n                list_jiza = range ( k , cnt [ i ] [ j ] + (90 + -89) )\n                while idx_26jm < len(list_jiza):\n                    a = list_jiza[idx_26jm]\n                    lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs [ i - a ] [ j - a ] + a )\n                    idx_26jm = idx_26jm + (11 + -10)\n            idx_euwn = idx_euwn + (10 + -9)\n        idx_10i7 = idx_10i7 + (8 + -7)\n    return lcs [ n ] [ m ]", "id": "ConstantUnfoldding_sample_from_LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K_to_177", "old_id": "LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K"}
{"code": "def maxLength ( s , n ) :\n    dp = [ [ (24 + -24) for i in range ( n ) ] for i in range ( n ) ]\n    idx_5p2e = (55 + -55)\n    list_y124 = range ( n - (74 + -73) )\n    while idx_5p2e < len(list_y124):\n        i = list_y124[idx_5p2e]\n        if ( s [ i ] == '(' and s [ i + (100 + -99) ] == ')' ) :\n            dp [ i ] [ i + (54 + -53) ] = (64 + -62)\n        idx_5p2e = idx_5p2e + (71 + -70)\n    idx_v50x = (50 + -50)\n    list_9cyx = range ( (77 + -75) , n )\n    while idx_v50x < len(list_9cyx):\n        l = list_9cyx[idx_v50x]\n        i = - (23 + -22)\n        idx_6kjo = (89 + -89)\n        list_wpmi = range ( l , n )\n        while idx_6kjo < len(list_wpmi):\n            j = list_wpmi[idx_6kjo]\n            i += (82 + -81)\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = (85 + -83) + dp [ i + (14 + -13) ] [ j - (52 + -51) ]\n            idx_r1uk = (70 + -70)\n            list_buwo = range ( i , j )\n            while idx_r1uk < len(list_buwo):\n                k = list_buwo[idx_r1uk]\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + (29 + -28) ] [ j ] )\n                idx_r1uk = idx_r1uk + (48 + -47)\n            idx_6kjo = idx_6kjo + (10 + -9)\n        idx_v50x = idx_v50x + (50 + -49)\n    return dp [ (93 + -93) ] [ n - (3 + -2) ]", "id": "ConstantUnfoldding_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_to_178", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = (39 + -39)\n    invalidCloseBraces = (65 + -65)\n    idx_4p8g = (28 + -28)\n    list_wo51 = range ( n )\n    while idx_4p8g < len(list_wo51):\n        i = list_wo51[idx_4p8g]\n        if ( s [ i ] == '(' ) :\n            invalidOpenBraces += (82 + -81)\n        else :\n            if ( invalidOpenBraces == (33 + -33) ) :\n                invalidCloseBraces += (14 + -13)\n            else :\n                invalidOpenBraces -= (55 + -54)\n        idx_4p8g = idx_4p8g + (41 + -40)\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "ConstantUnfoldding_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_179", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def longestNull ( S ) :\n    arr = [ ]\n    arr.append ( [ '@' , - (72 + -71) ] )\n    maxlen = (88 + -88)\n    idx_v143 = (21 + -21)\n    list_jmoi = range ( len ( S ) )\n    while idx_v143 < len(list_jmoi):\n        i = list_jmoi[idx_v143]\n        arr.append ( [ S [ i ] , i ] )\n        while ( len ( arr ) >= (28 + -25) and arr [ len ( arr ) - (17 + -14) ] [ (77 + -77) ] == '1' and arr [ len ( arr ) - (73 + -71) ] [ (1 + -1) ] == '0' and arr [ len ( arr ) - (33 + -32) ] [ (58 + -58) ] == '0' ) :\n            arr.pop ( )\n            arr.pop ( )\n            arr.pop ( )\n        tmp = arr [ - (34 + -33) ]\n        maxlen = max ( maxlen , i - tmp [ (77 + -76) ] )\n        idx_v143 = idx_v143 + (13 + -12)\n    return maxlen", "id": "ConstantUnfoldding_sample_from_LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED_to_180", "old_id": "LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= (33 + -31) ) :\n        return n\n    L = [ [ (7 + -7) for x in range ( n ) ] for y in range ( n ) ]\n    llap = (97 + -95)\n    idx_4z6m = (22 + -22)\n    list_4gma = range ( n )\n    while idx_4z6m < len(list_4gma):\n        i = list_4gma[idx_4z6m]\n        L [ i ] [ n - (54 + -53) ] = (87 + -85)\n        idx_4z6m = idx_4z6m + (1 + 0)\n    idx_tdys = (34 + -34)\n    list_3ek4 = range ( n - (15 + -13) , (66 + -66) , - (29 + -28) )\n    while idx_tdys < len(list_3ek4):\n        j = list_3ek4[idx_tdys]\n        i = j - (28 + -27)\n        k = j + (38 + -37)\n        while ( i >= (64 + -64) and k <= n - (24 + -23) ) :\n            if ( set [ i ] + set [ k ] < (47 + -45) * set [ j ] ) :\n                k += (80 + -79)\n            elif ( set [ i ] + set [ k ] > (25 + -23) * set [ j ] ) :\n                L [ i ] [ j ] = (66 + -64)\n                i -= (39 + -38)\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + (79 + -78)\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= (56 + -55)\n                k += (9 + -8)\n        while ( i >= (27 + -27) ) :\n            L [ i ] [ j ] = (43 + -41)\n            i -= (31 + -30)\n        idx_tdys = idx_tdys + (71 + -70)\n    return llap", "id": "ConstantUnfoldding_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_181", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def leonardo ( n ) :\n    dp = [ ]\n    dp.append ( (85 + -84) )\n    dp.append ( (35 + -34) )\n    idx_tb5s = (54 + -54)\n    list_lk3t = range ( (81 + -79) , n + (21 + -20) )\n    while idx_tb5s < len(list_lk3t):\n        i = list_lk3t[idx_tb5s]\n        dp.append ( dp [ i - (76 + -75) ] + dp [ i - (35 + -33) ] + (31 + -30) )\n        idx_tb5s = idx_tb5s + (39 + -38)\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_LEONARDO_NUMBER_1_to_182", "old_id": "LEONARDO_NUMBER_1"}
{"code": "def subsequence ( s , t , n , k ) :\n    last = (99 + -99)\n    cnt = (44 + -44)\n    new_last = (50 + -50)\n    size = (12 + -12)\n    string = 'zyxwvutsrqponmlkjihgfedcba'\n    idx_93w6 = (51 + -51)\n    list_vaf3 = string\n    while idx_93w6 < len(list_vaf3):\n        ch = list_vaf3[idx_93w6]\n        cnt = (65 + -65)\n        idx_f50l = (75 + -75)\n        list_x95u = range ( last , n )\n        while idx_f50l < len(list_x95u):\n            i = list_x95u[idx_f50l]\n            if s [ i ] == ch :\n                cnt += (95 + -94)\n            idx_f50l = idx_f50l + (78 + -77)\n        if cnt >= k :\n            idx_riqy = (18 + -18)\n            list_42mv = range ( last , n )\n            while idx_riqy < len(list_42mv):\n                i = list_42mv[idx_riqy]\n                if s [ i ] == ch :\n                    t [ size ] = ch\n                    new_last = i\n                    size += (77 + -76)\n                idx_riqy = idx_riqy + (45 + -44)\n            last = new_last\n        idx_93w6 = idx_93w6 + (38 + -37)\n    t[size] = '\\0';", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES_to_183", "old_id": "LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES"}
{"code": "def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ (15 + -15) ] * n\n    concat = str_ + str_\n    idx_adbj = (30 + -30)\n    list_syth = range ( n )\n    while idx_adbj < len(list_syth):\n        i = list_syth[idx_adbj]\n        arr [ i ] = concat [ i : n + i ]\n        idx_adbj = idx_adbj + (51 + -50)\n    arr.sort ( )\n    return arr [ (43 + -43) ]", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION_to_184", "old_id": "LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION"}
{"code": "def minimizeWithKSwaps ( arr , n , k ) :\n    idx_i6mv = (21 + -21)\n    list_zopn = range ( n - (21 + -20) )\n    while idx_i6mv < len(list_zopn):\n        i = list_zopn[idx_i6mv]\n        pos = i\n        idx_621u = (16 + -16)\n        list_bqkc = range ( i + (12 + -11) , n )\n        while idx_621u < len(list_bqkc):\n            j = list_bqkc[idx_621u]\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n            idx_621u = idx_621u + (16 + -15)\n        idx_b1v7 = (70 + -70)\n        list_z7nj = range ( pos , i , - (21 + -20) )\n        while idx_b1v7 < len(list_z7nj):\n            j = list_z7nj[idx_b1v7]\n            arr [ j ] , arr [ j - (36 + -35) ] = arr [ j - (43 + -42) ] , arr [ j ]\n            idx_b1v7 = idx_b1v7 + (33 + -32)\n        k -= pos - i\n        idx_i6mv = idx_i6mv + (85 + -84)", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS_to_185", "old_id": "LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS"}
{"code": "def lexicographicSubConcat ( s ) :\n    n = len ( s )\n    sub_count = ( n * ( n + (61 + -60) ) ) // (23 + -21)\n    arr = [ (99 + -99) ] * sub_count\n    index = (50 + -50)\n    idx_8tog = (94 + -94)\n    list_m6b7 = range ( n )\n    while idx_8tog < len(list_m6b7):\n        i = list_m6b7[idx_8tog]\n        idx_2tcn = (96 + -96)\n        list_clfa = range ( (86 + -85) , n - i + (1 + 0) )\n        while idx_2tcn < len(list_clfa):\n            j = list_clfa[idx_2tcn]\n            arr [ index ] = s [ i : i + j ]\n            index += (52 + -51)\n            idx_2tcn = idx_2tcn + (3 + -2)\n        idx_8tog = idx_8tog + (84 + -83)\n    arr.sort ( )\n    res = \"\"\n    idx_no4k = (97 + -97)\n    list_va61 = range ( sub_count )\n    while idx_no4k < len(list_va61):\n        i = list_va61[idx_no4k]\n        res += arr [ i ]\n        idx_no4k = idx_no4k + (85 + -84)\n    return res", "id": "ConstantUnfoldding_sample_from_LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING_to_186", "old_id": "LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = [ [ (60 + -60) for k in range ( n + (13 + -12) ) ] for l in range ( m + (14 + -13) ) ]\n    result = (98 + -98)\n    idx_j28q = (39 + -39)\n    list_23az = range ( m + (70 + -69) )\n    while idx_j28q < len(list_23az):\n        i = list_23az[idx_j28q]\n        idx_wgps = (78 + -78)\n        list_kj94 = range ( n + (33 + -32) )\n        while idx_wgps < len(list_kj94):\n            j = list_kj94[idx_wgps]\n            if ( i == (30 + -30) or j == (23 + -23) ) :\n                LCSuff [ i ] [ j ] = (28 + -28)\n            elif ( X [ i - (20 + -19) ] == Y [ j - (84 + -83) ] ) :\n                LCSuff [ i ] [ j ] = LCSuff [ i - (40 + -39) ] [ j - (63 + -62) ] + (87 + -86)\n                result = max ( result , LCSuff [ i ] [ j ] )\n            else :\n                LCSuff [ i ] [ j ] = (90 + -90)\n            idx_wgps = idx_wgps + (25 + -24)\n        idx_j28q = idx_j28q + (16 + -15)\n    return result", "id": "ConstantUnfoldding_sample_from_LONGEST_COMMON_SUBSTRING_to_187", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def findLength ( str ) :\n    n = len ( str )\n    maxlen = (87 + -87)\n    idx_y0xt = (22 + -22)\n    list_g895 = range ( (62 + -62) , n )\n    while idx_y0xt < len(list_g895):\n        i = list_g895[idx_y0xt]\n        idx_f361 = (61 + -61)\n        list_jt8l = range ( i + (98 + -97) , n , (54 + -52) )\n        while idx_f361 < len(list_jt8l):\n            j = list_jt8l[idx_f361]\n            length = j - i + (24 + -23)\n            leftsum = (55 + -55)\n            rightsum = (13 + -13)\n            idx_5gvk = (8 + -8)\n            list_yxt2 = range ( (100 + -100) , int ( length / (73 + -71) ) )\n            while idx_5gvk < len(list_yxt2):\n                k = list_yxt2[idx_5gvk]\n                leftsum += ( int ( str [ i + k ] ) - int ( '0' ) )\n                rightsum += ( int ( str [ i + k + int ( length / (34 + -32) ) ] ) - int ( '0' ) )\n                idx_5gvk = idx_5gvk + (42 + -41)\n            if ( leftsum == rightsum and maxlen < length ) :\n                maxlen = length\n            idx_f361 = idx_f361 + (56 + -55)\n        idx_y0xt = idx_y0xt + (34 + -33)\n    return maxlen", "id": "ConstantUnfoldding_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_to_188", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF"}
{"code": "def findLength ( string ) :\n    n = len ( string )\n    maxlen = (25 + -25)\n    Sum = [ [ (95 + -95) for x in range ( n ) ] for y in range ( n ) ]\n    idx_tq5p = (12 + -12)\n    list_t354 = range ( (52 + -52) , n )\n    while idx_tq5p < len(list_t354):\n        i = list_t354[idx_tq5p]\n        Sum [ i ] [ i ] = int ( string [ i ] )\n        idx_tq5p = idx_tq5p + (47 + -46)\n    idx_5geh = (76 + -76)\n    list_0cvy = range ( (23 + -21) , n + (93 + -92) )\n    while idx_5geh < len(list_0cvy):\n        length = list_0cvy[idx_5geh]\n        idx_02th = (69 + -69)\n        list_vn89 = range ( (41 + -41) , n - length + (3 + -2) )\n        while idx_02th < len(list_vn89):\n            i = list_vn89[idx_02th]\n            j = i + length - (89 + -88)\n            k = length // (47 + -45)\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + (93 + -92) ] [ j ] )\n            if ( length % (17 + -15) == (14 + -14) and Sum [ i ] [ j - k ] == Sum [ ( j - k + (5 + -4) ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n            idx_02th = idx_02th + (26 + -25)\n        idx_5geh = idx_5geh + (69 + -68)\n    return maxlen", "id": "ConstantUnfoldding_sample_from_LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1_to_189", "old_id": "LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1"}
{"code": "def longOddEvenIncSeq ( arr , n ) :\n    lioes = list ( )\n    maxLen = (9 + -9)\n    idx_exm6 = (33 + -33)\n    list_4vsy = range ( n )\n    while idx_exm6 < len(list_4vsy):\n        i = list_4vsy[idx_exm6]\n        lioes.append ( (15 + -14) )\n        idx_exm6 = idx_exm6 + (9 + -8)\n    i = (4 + -3)\n    idx_hswp = (99 + -99)\n    list_dn45 = range ( n )\n    while idx_hswp < len(list_dn45):\n        i = list_dn45[idx_hswp]\n        idx_vthy = (78 + -78)\n        list_ef3x = range ( i )\n        while idx_vthy < len(list_ef3x):\n            j = list_ef3x[idx_vthy]\n            if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr [ j ] ) % (53 + -51) != (41 + -41) and lioes [ i ] < lioes [ j ] + (19 + -18) ) :\n                lioes [ i ] = lioes [ j ] + (42 + -41)\n            idx_vthy = idx_vthy + (81 + -80)\n        idx_hswp = idx_hswp + (68 + -67)\n    idx_dcbg = (48 + -48)\n    list_h5j2 = range ( n )\n    while idx_dcbg < len(list_h5j2):\n        i = list_h5j2[idx_dcbg]\n        if maxLen < lioes [ i ] :\n            maxLen = lioes [ i ]\n        idx_dcbg = idx_dcbg + (58 + -57)\n    return maxLen", "id": "ConstantUnfoldding_sample_from_LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE_to_190", "old_id": "LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE"}
{"code": "def lis ( arr , n ) :\n    lis = [ (47 + -46) ] * n\n    idx_lmz4 = (54 + -54)\n    list_sk4i = range ( (56 + -55) , n )\n    while idx_lmz4 < len(list_sk4i):\n        i = list_sk4i[idx_lmz4]\n        idx_b79f = (93 + -93)\n        list_rgnq = range ( (71 + -71) , i )\n        while idx_b79f < len(list_rgnq):\n            j = list_rgnq[idx_b79f]\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + (46 + -45) :\n                lis [ i ] = lis [ j ] + (26 + -25)\n            idx_b79f = idx_b79f + (58 + -57)\n        idx_lmz4 = idx_lmz4 + (59 + -58)\n    maximum = (32 + -32)\n    idx_wqcm = (91 + -91)\n    list_fei5 = range ( n )\n    while idx_wqcm < len(list_fei5):\n        i = list_fei5[idx_wqcm]\n        maximum = max ( maximum , lis [ i ] )\n        idx_wqcm = idx_wqcm + (85 + -84)\n    return maximum", "id": "ConstantUnfoldding_sample_from_LONGEST_INCREASING_SUBSEQUENCE_1_to_191", "old_id": "LONGEST_INCREASING_SUBSEQUENCE_1"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ (8 + -8) for i in range ( n + (93 + -92) ) ] for j in range ( n + (51 + -50) ) ]\n    idx_scdl = (18 + -18)\n    list_1jpa = range ( (82 + -81) , n + (82 + -81) )\n    while idx_scdl < len(list_1jpa):\n        i = list_1jpa[idx_scdl]\n        idx_k402 = (22 + -22)\n        list_8l07 = range ( (62 + -61) , n + (15 + -14) )\n        while idx_k402 < len(list_8l07):\n            j = list_8l07[idx_k402]\n            if ( str [ i - (43 + -42) ] == str [ j - (17 + -16) ] and i != j ) :\n                dp [ i ] [ j ] = (88 + -87) + dp [ i - (83 + -82) ] [ j - (2 + -1) ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - (32 + -31) ] , dp [ i - (39 + -38) ] [ j ] )\n            idx_k402 = idx_k402 + (95 + -94)\n        idx_scdl = idx_scdl + (89 + -88)\n    res = ''\n    i = n\n    j = n\n    while ( i > (58 + -58) and j > (67 + -67) ) :\n        if ( dp [ i ] [ j ] == dp [ i - (82 + -81) ] [ j - (79 + -78) ] + (69 + -68) ) :\n            res += str [ i - (91 + -90) ]\n            i -= (60 + -59)\n            j -= (79 + -78)\n        elif ( dp [ i ] [ j ] == dp [ i - (80 + -79) ] [ j ] ) :\n            i -= (13 + -12)\n        else :\n            j -= (82 + -81)\n    res = ''.join ( reversed ( res ) )\n    return res", "id": "ConstantUnfoldding_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_192", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ (97 + -97) ] * ( n + (25 + -24) ) ] * ( n + (33 + -32) )\n    idx_sb0w = (91 + -91)\n    list_gi0q = range ( (60 + -59) , n + (33 + -32) )\n    while idx_sb0w < len(list_gi0q):\n        i = list_gi0q[idx_sb0w]\n        idx_n04m = (70 + -70)\n        list_z3j8 = range ( (7 + -6) , n + (35 + -34) )\n        while idx_n04m < len(list_z3j8):\n            j = list_z3j8[idx_n04m]\n            if ( str [ i - (31 + -30) ] == str [ j - (6 + -5) ] and i != j ) :\n                dp [ i ] [ j ] = (15 + -14) + dp [ i - (2 + -1) ] [ j - (90 + -89) ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - (88 + -87) ] , dp [ i - (85 + -84) ] [ j ] )\n            idx_n04m = idx_n04m + (61 + -60)\n        idx_sb0w = idx_sb0w + (98 + -97)\n    return dp [ n ] [ n ]", "id": "ConstantUnfoldding_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_193", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = { }\n    sum = (67 + -67)\n    maxLen = (99 + -99)\n    idx_ubay = (56 + -56)\n    list_us8c = range ( n )\n    while idx_ubay < len(list_us8c):\n        i = list_us8c[idx_ubay]\n        if arr [ i ] == (96 + -96) :\n            sum += - (24 + -23)\n        else :\n            sum += (47 + -46)\n        if ( sum == (13 + -12) ) :\n            maxLen = i + (33 + -32)\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - (55 + -54) ) in um ) :\n            if ( maxLen < ( i - um [ sum - (100 + -99) ] ) ) :\n                maxLen = i - um [ sum - (32 + -31) ]\n        idx_ubay = idx_ubay + (29 + -28)\n    return maxLen", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_194", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = { }\n    mod_arr = [ (43 + -43) for i in range ( n ) ]\n    max = (30 + -30)\n    curr_sum = (68 + -68)\n    idx_amj6 = (67 + -67)\n    list_4lyn = range ( n )\n    while idx_amj6 < len(list_4lyn):\n        i = list_4lyn[idx_amj6]\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k\n        idx_amj6 = idx_amj6 + (41 + -40)\n    idx_l5k8 = (84 + -84)\n    list_dxy1 = range ( n )\n    while idx_l5k8 < len(list_dxy1):\n        i = list_dxy1[idx_l5k8]\n        if ( mod_arr [ i ] == (32 + -32) ) :\n            max = i + (98 + -97)\n        elif ( mod_arr [ i ] in um ) :\n            um [ mod_arr [ i ] ] = i\n        else :\n            if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                max = i - um [ mod_arr [ i ] ]\n        idx_l5k8 = idx_l5k8 + (80 + -79)\n    return max", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_195", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : (72 + -72) )\n    longLen = (80 + -80)\n    idx_nbqx = (14 + -14)\n    list_l4h0 = range ( n )\n    while idx_nbqx < len(list_l4h0):\n        i = list_l4h0[idx_nbqx]\n        len1 = (89 + -89)\n        if ( arr [ i - (24 + -23) ] in um and len1 < um [ arr [ i ] - (25 + -24) ] ) :\n            len1 = um [ arr [ i ] - (68 + -67) ]\n        if ( arr [ i ] + (48 + -47) in um and len1 < um [ arr [ i ] + (58 + -57) ] ) :\n            len1 = um [ arr [ i ] + (35 + -34) ]\n        um [ arr [ i ] ] = len1 + (98 + -97)\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n        idx_nbqx = idx_nbqx + (4 + -3)\n    return longLen", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2_to_196", "old_id": "LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2"}
{"code": "def longestSubseqWithDiffOne ( arr , n ) :\n    dp = [ (85 + -84) for i in range ( n ) ]\n    idx_4ots = (62 + -62)\n    list_s567 = range ( n )\n    while idx_4ots < len(list_s567):\n        i = list_s567[idx_4ots]\n        idx_52qf = (1 + -1)\n        list_fu1w = range ( i )\n        while idx_52qf < len(list_fu1w):\n            j = list_fu1w[idx_52qf]\n            if ( ( arr [ i ] == arr [ j ] + (3 + -2) ) or ( arr [ i ] == arr [ j ] - (97 + -96) ) ) :\n                dp [ i ] = max ( dp [ i ] , dp [ j ] + (80 + -79) )\n            idx_52qf = idx_52qf + (45 + -44)\n        idx_4ots = idx_4ots + (24 + -23)\n    result = (45 + -44)\n    idx_gm6p = (16 + -16)\n    list_i9yd = range ( n )\n    while idx_gm6p < len(list_i9yd):\n        i = list_i9yd[idx_gm6p]\n        if ( result < dp [ i ] ) :\n            result = dp [ i ]\n        idx_gm6p = idx_gm6p + (40 + -39)\n    return result", "id": "ConstantUnfoldding_sample_from_LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE_to_197", "old_id": "LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS_ONE"}
{"code": "def to_upper(in_list):\n    idx_iucp = (26 + -26)\n    list_b1tl = range(len(in_list))\n    while idx_iucp < len(list_b1tl):\n        i = list_b1tl[idx_iucp]\n        if 'a' <= in_list[i] <= 'z':\n            in_list[i] = chr(ord(in_list[i]) - ord('a') + ord('A'))\n        idx_iucp = idx_iucp + (86 + -85)\n    return ''.join(in_list)", "id": "ConstantUnfoldding_sample_from_LOWER_CASE_UPPER_CASE_INTERESTING_FACT_to_198", "old_id": "LOWER_CASE_UPPER_CASE_INTERESTING_FACT"}
{"code": "def checkMarkov ( m ) :\n    idx_nwpf = (34 + -34)\n    list_okza = range ( (82 + -82) , len ( m ) )\n    while idx_nwpf < len(list_okza):\n        i = list_okza[idx_nwpf]\n        sm = (53 + -53)\n        idx_1dh0 = (2 + -2)\n        list_xhqv = range ( (66 + -66) , len ( m [ i ] ) )\n        while idx_1dh0 < len(list_xhqv):\n            j = list_xhqv[idx_1dh0]\n            sm = sm + m [ i ] [ j ]\n            idx_1dh0 = idx_1dh0 + (9 + -8)\n        if ( sm != (3 + -2) ) :\n            return False\n        idx_nwpf = idx_nwpf + (69 + -68)\n    return True", "id": "ConstantUnfoldding_sample_from_MARKOV_MATRIX_to_199", "old_id": "MARKOV_MATRIX"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = - (12 + -11)\n    val = - (39 + -38)\n    dp = [ [ (65 + -65) for i in range ( maxLimit + (28 + -27) ) ] for j in range ( n ) ]\n    idx_gi62 = (24 + -24)\n    list_0bx2 = range ( n )\n    while idx_gi62 < len(list_0bx2):\n        ind = list_0bx2[idx_gi62]\n        idx_76i1 = (17 + -17)\n        list_8m0n = range ( maxLimit + (48 + -47) )\n        while idx_76i1 < len(list_8m0n):\n            val = list_8m0n[idx_76i1]\n            if ( ind == (68 + -68) ) :\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = (88 + -87)\n                else :\n                    dp [ ind ] [ val ] = (95 + -95)\n            else :\n                if ( val - arr [ ind ] >= (29 + -29) and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - (63 + -62) ] [ val - arr [ ind ] ] == (85 + -84) or dp [ ind - (59 + -58) ] [ val + arr [ ind ] ] == (24 + -23) ) :\n                        dp [ ind ] [ val ] = (14 + -13)\n                elif ( val - arr [ ind ] >= (6 + -6) ) :\n                    dp [ ind ] [ val ] = dp [ ind - (85 + -84) ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = dp [ ind - (40 + -39) ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = (78 + -78)\n            idx_76i1 = idx_76i1 + (50 + -49)\n        idx_gi62 = idx_gi62 + (31 + -30)\n    idx_2qa4 = (2 + -2)\n    list_uh49 = range ( maxLimit , - (9 + -8) , - (6 + -5) )\n    while idx_2qa4 < len(list_uh49):\n        val = list_uh49[idx_2qa4]\n        if ( dp [ n - (3 + -2) ] [ val ] == (24 + -23) ) :\n            return val\n        idx_2qa4 = idx_2qa4 + (39 + -38)\n    return - (62 + -61)", "id": "ConstantUnfoldding_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_200", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def findMaxValue ( arr , n ) :\n    if n < (35 + -31) :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + (5 + -4) ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - (73 + -72) ) , [ MIN ] * ( n - (90 + -88) )\n    idx_jzv9 = (16 + -16)\n    list_xasu = range ( n - (13 + -12) , - (59 + -58) , - (24 + -23) )\n    while idx_jzv9 < len(list_xasu):\n        i = list_xasu[idx_jzv9]\n        table1 [ i ] = max ( table1 [ i + (82 + -81) ] , arr [ i ] )\n        idx_jzv9 = idx_jzv9 + (10 + -9)\n    idx_yd9a = (41 + -41)\n    list_6fv8 = range ( n - (8 + -6) , - (20 + -19) , - (14 + -13) )\n    while idx_yd9a < len(list_6fv8):\n        i = list_6fv8[idx_yd9a]\n        table2 [ i ] = max ( table2 [ i + (50 + -49) ] , table1 [ i + (93 + -92) ] - arr [ i ] )\n        idx_yd9a = idx_yd9a + (78 + -77)\n    idx_pgvh = (32 + -32)\n    list_746j = range ( n - (58 + -55) , - (74 + -73) , - (40 + -39) )\n    while idx_pgvh < len(list_746j):\n        i = list_746j[idx_pgvh]\n        table3 [ i ] = max ( table3 [ i + (90 + -89) ] , table2 [ i + (11 + -10) ] + arr [ i ] )\n        idx_pgvh = idx_pgvh + (25 + -24)\n    idx_rjd1 = (76 + -76)\n    list_miox = range ( n - (94 + -90) , - (32 + -31) , - (96 + -95) )\n    while idx_rjd1 < len(list_miox):\n        i = list_miox[idx_rjd1]\n        table4 [ i ] = max ( table4 [ i + (27 + -26) ] , table3 [ i + (52 + -51) ] - arr [ i ] )\n        idx_rjd1 = idx_rjd1 + (1 + 0)\n    return table4 [ (94 + -94) ]", "id": "ConstantUnfoldding_sample_from_MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L_to_201", "old_id": "MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L"}
{"code": "def largestSumOfAverages ( A , K ) :\n    n = len ( A )\n    pre_sum = [ (47 + -47) ] * ( n + (23 + -22) )\n    pre_sum [ (70 + -70) ] = (77 + -77)\n    idx_f8br = (19 + -19)\n    list_tsr1 = range ( n )\n    while idx_f8br < len(list_tsr1):\n        i = list_tsr1[idx_f8br]\n        pre_sum [ i + (98 + -97) ] = pre_sum [ i ] + A [ i ]\n        idx_f8br = idx_f8br + (61 + -60)\n    dp = [ (91 + -91) ] * n\n    sum = (70 + -70)\n    idx_rch5 = (36 + -36)\n    list_gsdn = range ( n )\n    while idx_rch5 < len(list_gsdn):\n        i = list_gsdn[idx_rch5]\n        dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i )\n        idx_rch5 = idx_rch5 + (53 + -52)\n    idx_kgja = (42 + -42)\n    list_fd04 = range ( K - (91 + -90) )\n    while idx_kgja < len(list_fd04):\n        k = list_fd04[idx_kgja]\n        idx_horp = (35 + -35)\n        list_w8cj = range ( n )\n        while idx_horp < len(list_w8cj):\n            i = list_w8cj[idx_horp]\n            idx_4m5j = (63 + -63)\n            list_mao4 = range ( i + (73 + -72) , n )\n            while idx_4m5j < len(list_mao4):\n                j = list_mao4[idx_4m5j]\n                dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] )\n                idx_4m5j = idx_4m5j + (44 + -43)\n            idx_horp = idx_horp + (55 + -54)\n        idx_kgja = idx_kgja + (66 + -65)\n    return  dp [ (90 + -90) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY_to_202", "old_id": "MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = [ [ (21 + -21) for x in range ( n + (12 + -11) ) ] for y in range ( n + (25 + -24) ) ]\n    idx_7xep = (20 + -20)\n    list_z9st = range ( n + (1 + 0) )\n    while idx_7xep < len(list_z9st):\n        i = list_z9st[idx_7xep]\n        idx_dzft = (4 + -4)\n        list_k3ib = range ( min ( i , n ) + (8 + -7) )\n        while idx_dzft < len(list_k3ib):\n            j = list_k3ib[idx_dzft]\n            if ( j == (55 + -55) or j == i ) :\n                C [ i ] [ j ] = (53 + -52)\n            else :\n                C [ i ] [ j ] = ( C [ i - (86 + -85) ] [ j - (31 + -30) ] + C [ i - (52 + -51) ] [ j ] )\n            idx_dzft = idx_dzft + (85 + -84)\n        idx_7xep = idx_7xep + (55 + -54)\n    maxvalue = (61 + -61)\n    idx_rx37 = (13 + -13)\n    list_daqe = range ( n + (73 + -72) )\n    while idx_rx37 < len(list_daqe):\n        i = list_daqe[idx_rx37]\n        maxvalue = max ( maxvalue , C [ n ] [ i ] )\n        idx_rx37 = idx_rx37 + (49 + -48)\n    return maxvalue", "id": "ConstantUnfoldding_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_203", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def findLongestConseqSubseq ( arr , n ) :\n    S = set ( )\n    idx_cm97 = (33 + -33)\n    list_qkm9 = range ( n )\n    while idx_cm97 < len(list_qkm9):\n        i = list_qkm9[idx_cm97]\n        S.add ( arr [ i ] )\n        idx_cm97 = idx_cm97 + (64 + -63)\n    ans = (61 + -61)\n    idx_osxg = (27 + -27)\n    list_2qy9 = range ( n )\n    while idx_osxg < len(list_2qy9):\n        i = list_2qy9[idx_osxg]\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ]\n            while ( S.__contains__ ( j ) ) :\n                j += (42 + -41)\n            ans = max ( ans , j - arr [ i ] )\n        idx_osxg = idx_osxg + (20 + -19)\n    return ans", "id": "ConstantUnfoldding_sample_from_MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY_to_204", "old_id": "MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY"}
{"code": "def maxRepeating ( str ) :\n    n = len ( str )\n    count = (50 + -50)\n    res = str [ (92 + -92) ]\n    cur_count = (85 + -84)\n    idx_1zx9 = (32 + -32)\n    list_oqh5 = range ( n )\n    while idx_1zx9 < len(list_oqh5):\n        i = list_oqh5[idx_1zx9]\n        if ( i < n - (64 + -63) and str [ i ] == str [ i + (93 + -92) ] ) :\n            cur_count += (64 + -63)\n        else :\n            if cur_count > count :\n                count = cur_count\n                res = str [ i ]\n            cur_count = (9 + -8)\n        idx_1zx9 = idx_1zx9 + (75 + -74)\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_205", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : (41 + -41) )\n    idx_p8xl = (17 + -17)\n    list_w4r1 = range ( n )\n    while idx_p8xl < len(list_w4r1):\n        i = list_w4r1[idx_p8xl]\n        freq [ arr [ i ] ] += (17 + -16)\n        idx_p8xl = idx_p8xl + (72 + -71)\n    ans = (9 + -9)\n    idx_yl7q = (87 + -87)\n    list_gum5 = range ( n )\n    while idx_yl7q < len(list_gum5):\n        i = list_gum5[idx_yl7q]\n        idx_mn2f = (64 + -64)\n        list_kjfx = range ( n )\n        while idx_mn2f < len(list_kjfx):\n            j = list_kjfx[idx_mn2f]\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n            idx_mn2f = idx_mn2f + (19 + -18)\n        idx_yl7q = idx_yl7q + (33 + -32)\n    return ans", "id": "ConstantUnfoldding_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_206", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxRowDiff ( mat , m , n ) :\n    rowSum = [ (88 + -88) ] * m\n    idx_le3m = (36 + -36)\n    list_0zj8 = range ( (64 + -64) , m )\n    while idx_le3m < len(list_0zj8):\n        i = list_0zj8[idx_le3m]\n        sum = (97 + -97)\n        idx_2hye = (46 + -46)\n        list_yxok = range ( (81 + -81) , n )\n        while idx_2hye < len(list_yxok):\n            j = list_yxok[idx_2hye]\n            sum += mat [ i ] [ j ]\n            idx_2hye = idx_2hye + (7 + -6)\n        rowSum [ i ] = sum\n        idx_le3m = idx_le3m + (62 + -61)\n    max_diff = rowSum [ (86 + -85) ] - rowSum [ (57 + -57) ]\n    min_element = rowSum [ (44 + -44) ]\n    idx_9j0v = (25 + -25)\n    list_kyrj = range ( (3 + -2) , m )\n    while idx_9j0v < len(list_kyrj):\n        i = list_kyrj[idx_9j0v]\n        if ( rowSum [ i ] - min_element > max_diff ) :\n            max_diff = rowSum [ i ] - min_element\n        if ( rowSum [ i ] < min_element ) :\n            min_element = rowSum [ i ]\n        idx_9j0v = idx_9j0v + (74 + -73)\n    return max_diff", "id": "ConstantUnfoldding_sample_from_MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX_to_207", "old_id": "MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX"}
{"code": "def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = (48 + -48)\n    idx_wokd = (77 + -77)\n    list_vqjh = range ( n )\n    while idx_wokd < len(list_vqjh):\n        i = list_vqjh[idx_wokd]\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n        idx_wokd = idx_wokd + (16 + -15)\n    return maxDict", "id": "ConstantUnfoldding_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_208", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxPrefix ( s , t ) :\n    count = (42 + -42)\n    idx_l0a8 = (48 + -48)\n    list_qlin = range ( (78 + -78) , len ( t ) )\n    while idx_l0a8 < len(list_qlin):\n        i = list_qlin[idx_l0a8]\n        if ( count == len ( s ) ) :\n            break\n        if ( t [ i ] == s [ count ] ) :\n            count = count + (94 + -93)\n        idx_l0a8 = idx_l0a8 + (18 + -17)\n    return count", "id": "ConstantUnfoldding_sample_from_MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER_to_209", "old_id": "MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER"}
{"code": "def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = (86 + -86)\n    idx_svm8 = (96 + -96)\n    list_83c9 = range ( n )\n    while idx_svm8 < len(list_83c9):\n        i = list_83c9[idx_svm8]\n        mls.append ( (96 + -95) )\n        idx_svm8 = idx_svm8 + (76 + -75)\n    idx_b7wg = (94 + -94)\n    list_ow8q = range ( n )\n    while idx_b7wg < len(list_ow8q):\n        i = list_ow8q[idx_b7wg]\n        idx_n7d2 = (9 + -9)\n        list_vl61 = range ( i )\n        while idx_n7d2 < len(list_vl61):\n            j = list_vl61[idx_n7d2]\n            if ( abs ( arr [ i ] - arr [ j ] ) <= (94 + -93) and mls [ i ] < mls [ j ] + (6 + -5) ) :\n                mls [ i ] = mls [ j ] + (5 + -4)\n            idx_n7d2 = idx_n7d2 + (15 + -14)\n        idx_b7wg = idx_b7wg + (90 + -89)\n    idx_d59z = (36 + -36)\n    list_od6s = range ( n )\n    while idx_d59z < len(list_od6s):\n        i = list_od6s[idx_d59z]\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n        idx_d59z = idx_d59z + (44 + -43)\n    return max", "id": "ConstantUnfoldding_sample_from_MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1_to_210", "old_id": "MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHER_0_1"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , (8 + -8) , (59 + -59)\n    sm = [ (42 + -42) ] * n\n    sm [ (80 + -80) ] = arr [ (20 + -20) ]\n    idx_crs9 = (42 + -42)\n    list_y89x = range ( (56 + -55) , n )\n    while idx_crs9 < len(list_y89x):\n        i = list_y89x[idx_crs9]\n        sm [ i ] = sm [ i - (52 + -51) ] + arr [ i ]\n        idx_crs9 = idx_crs9 + (31 + -30)\n    idx_l5rs = (7 + -7)\n    list_3mas = range ( n )\n    while idx_l5rs < len(list_3mas):\n        i = list_3mas[idx_l5rs]\n        curr_rem = sm [ i ] % k\n        if ( not curr_rem and maxSum < sm [ i ] ) :\n            maxSum = sm [ i ]\n        elif ( not curr_rem in um ) :\n            um [ curr_rem ] = i\n        elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n            maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n        idx_l5rs = idx_l5rs + (46 + -45)\n    return maxSum // k", "id": "ConstantUnfoldding_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_211", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maximumSegments ( n , a , b , c ) :\n    dp = [ - (23 + -22) ] * ( n + (31 + -21) )\n    dp [ (56 + -56) ] = (79 + -79)\n    idx_s8ej = (56 + -56)\n    list_xt93 = range ( (80 + -80) , n )\n    while idx_s8ej < len(list_xt93):\n        i = list_xt93[idx_s8ej]\n        if ( dp [ i ] != - (66 + -65) ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + (83 + -82) , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + (2 + -1) , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + (26 + -25) , dp [ i + c ] )\n        idx_s8ej = idx_s8ej + (65 + -64)\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C_to_212", "old_id": "MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C"}
{"code": "def maxDiff ( arr , n ) :\n    SubsetSum_1 = (72 + -72)\n    SubsetSum_2 = (63 + -63)\n    idx_903k = (92 + -92)\n    list_0lfg = range ( (33 + -33) , n )\n    while idx_903k < len(list_0lfg):\n        i = list_0lfg[idx_903k]\n        isSingleOccurance = True\n        idx_ao8t = (2 + -2)\n        list_utvi = range ( i + (26 + -25) , n )\n        while idx_ao8t < len(list_utvi):\n            j = list_utvi[idx_ao8t]\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = (23 + -23)\n                break\n            idx_ao8t = idx_ao8t + (57 + -56)\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > (47 + -47) ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n        idx_903k = idx_903k + (55 + -54)\n    return abs ( SubsetSum_1 - SubsetSum_2 )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_to_213", "old_id": "MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY"}
{"code": "def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = (29 + -29)\n    curr_sum = curr_begin = (60 + -60)\n    idx_nv4e = (99 + -99)\n    list_1lnt = range ( (68 + -68) , n )\n    while idx_nv4e < len(list_1lnt):\n        i = list_1lnt[idx_nv4e]\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += (66 + -65)\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n        idx_nv4e = idx_nv4e + (78 + -77)\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE_to_214", "old_id": "MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQUE"}
{"code": "def lis ( arr , n ) :\n    mpis = [ (76 + -76) ] * ( n )\n    idx_vmuq = (89 + -89)\n    list_wrkf = range ( n )\n    while idx_vmuq < len(list_wrkf):\n        i = list_wrkf[idx_vmuq]\n        mpis [ i ] = arr [ i ]\n        idx_vmuq = idx_vmuq + (32 + -31)\n    idx_byqs = (6 + -6)\n    list_w7hv = range ( (20 + -19) , n )\n    while idx_byqs < len(list_w7hv):\n        i = list_w7hv[idx_byqs]\n        idx_yn2x = (59 + -59)\n        list_zvn8 = range ( i )\n        while idx_yn2x < len(list_zvn8):\n            j = list_zvn8[idx_yn2x]\n            if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) :\n                mpis [ i ] = mpis [ j ] * arr [ i ]\n            idx_yn2x = idx_yn2x + (20 + -19)\n        idx_byqs = idx_byqs + (44 + -43)\n    return max ( mpis )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE_to_215", "old_id": "MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE"}
{"code": "def maxProductSubset ( a , n ) :\n    if n == (31 + -30) :\n        return a [ (23 + -23) ]\n    max_neg = - (79 + 999999999920)\n    count_neg = (48 + -48)\n    count_zero = (36 + -36)\n    prod = (14 + -13)\n    idx_j6vc = (15 + -15)\n    list_4s7l = range ( n )\n    while idx_j6vc < len(list_4s7l):\n        i = list_4s7l[idx_j6vc]\n        if a [ i ] == (98 + -98) :\n            count_zero += (68 + -67)\n            continue\n        if a [ i ] < (81 + -81) :\n            count_neg += (23 + -22)\n            max_neg = max ( max_neg , a [ i ] )\n        prod = prod + a [ i ]\n        idx_j6vc = idx_j6vc + (3 + -2)\n    if count_zero == n :\n        return (77 + -77)\n    if count_neg & (77 + -76) :\n        if ( count_neg == (19 + -18) and count_zero > (33 + -33) and count_zero + count_neg == n ) :\n            return (57 + -57)\n        prod = int(prod / max_neg)\n    return prod", "id": "ConstantUnfoldding_sample_from_MAXIMUM_PRODUCT_SUBSET_ARRAY_to_216", "old_id": "MAXIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def maxProfit ( price , n ) :\n    profit = [ (92 + -92) ] * n\n    max_price = price [ n - (97 + -96) ]\n    idx_c39k = (36 + -36)\n    list_u4p1 = range ( n - (18 + -16) , (72 + -72) , - (51 + -50) )\n    while idx_c39k < len(list_u4p1):\n        i = list_u4p1[idx_c39k]\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + (84 + -83) ] , max_price - price [ i ] )\n        idx_c39k = idx_c39k + (75 + -74)\n    min_price = price [ (55 + -55) ]\n    idx_owb2 = (77 + -77)\n    list_ozgj = range ( (31 + -30) , n )\n    while idx_owb2 < len(list_ozgj):\n        i = list_ozgj[idx_owb2]\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - (67 + -66) ] , profit [ i ] + ( price [ i ] - min_price ) )\n        idx_owb2 = idx_owb2 + (24 + -23)\n    result = profit [ n - (24 + -23) ]\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE_to_217", "old_id": "MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE"}
{"code": "def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - (90 + 2147483558)\n    max_ending_here = (43 + -43)\n    idx_50lb = (41 + -41)\n    list_438i = range ( n * k )\n    while idx_50lb < len(list_438i):\n        i = list_438i[idx_50lb]\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < (26 + -26) ) :\n            max_ending_here = (84 + -84)\n        idx_50lb = idx_50lb + (2 + -1)\n    return max_so_far", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION_to_218", "old_id": "MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION"}
{"code": "def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = (37 + -37)\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ (82 + -82) ] )\n    idx_adzs = (76 + -76)\n    list_ys05 = range ( (12 + -11) , n )\n    while idx_adzs < len(list_ys05):\n        i = list_ys05[idx_adzs]\n        prefix_sum.append ( prefix_sum [ i - (85 + -84) ] + arr [ i ] )\n        idx_adzs = idx_adzs + (46 + -45)\n    idx_c0pk = (20 + -20)\n    list_fzli = range ( n )\n    while idx_c0pk < len(list_fzli):\n        i = list_fzli[idx_c0pk]\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n        idx_c0pk = idx_c0pk + (20 + -19)\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM_to_219", "old_id": "MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM"}
{"code": "def maxSumWO3Consec ( arr , n ) :\n    sum = [ (12 + -12) for k in range ( n ) ]\n    if n >= (7 + -6) :\n        sum [ (68 + -68) ] = arr [ (92 + -92) ]\n    if n >= (19 + -17) :\n        sum [ (88 + -87) ] = arr [ (5 + -5) ] + arr [ (98 + -97) ]\n    if n > (87 + -85) :\n        sum [ (14 + -12) ] = max ( sum [ (60 + -59) ] , max ( arr [ (67 + -66) ] + arr [ (51 + -49) ] , arr [ (7 + -7) ] + arr [ (11 + -9) ] ) )\n    idx_jqb0 = (19 + -19)\n    list_bl1v = range ( (32 + -29) , n )\n    while idx_jqb0 < len(list_bl1v):\n        i = list_bl1v[idx_jqb0]\n        sum [ i ] = max ( max ( sum [ i - (57 + -56) ] , sum [ i - (61 + -59) ] + arr [ i ] ) , arr [ i ] + arr [ i - (65 + -64) ] + sum [ i - (55 + -52) ] )\n        idx_jqb0 = idx_jqb0 + (69 + -68)\n    return sum [ n - (15 + -14) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_to_220", "old_id": "MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE"}
{"code": "def maxSum ( grid , n ) :\n    incl = max ( grid [ (28 + -28) ] [ (51 + -51) ] , grid [ (97 + -96) ] [ (13 + -13) ] )\n    excl = (9 + -9)\n    idx_niu0 = (44 + -44)\n    list_ufat = range ( (39 + -38) , n )\n    while idx_niu0 < len(list_ufat):\n        i = list_ufat[idx_niu0]\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ (33 + -33) ] [ i ] , grid [ (52 + -51) ] [ i ] )\n        excl = excl_new\n        idx_niu0 = idx_niu0 + (44 + -43)\n    return max ( excl , incl )", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT_to_221", "old_id": "MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == (5 + -4) ) :\n        return arr [ (6 + -6) ]\n    dec = [ (16 + -16) for i in range ( n + (96 + -95) ) ]\n    inc = [ (32 + -32) for i in range ( n + (7 + -6) ) ]\n    dec [ (3 + -3) ] = inc [ (13 + -13) ] = arr [ (57 + -57) ]\n    flag = (12 + -12)\n    idx_e5pl = (98 + -98)\n    list_xsc6 = range ( (99 + -98) , n )\n    while idx_e5pl < len(list_xsc6):\n        i = list_xsc6[idx_e5pl]\n        idx_utcg = (6 + -6)\n        list_xols = range ( i )\n        while idx_utcg < len(list_xols):\n            j = list_xols[idx_utcg]\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = (56 + -55)\n            elif ( arr [ j ] < arr [ i ] and flag == (92 + -91) ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n            idx_utcg = idx_utcg + (74 + -73)\n        idx_e5pl = idx_e5pl + (21 + -20)\n    result = - (55 + 2147483593)\n    idx_6e7v = (9 + -9)\n    list_uqvk = range ( n )\n    while idx_6e7v < len(list_uqvk):\n        i = list_uqvk[idx_6e7v]\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n        idx_6e7v = idx_6e7v + (58 + -57)\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_222", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = (91 + -91)\n    msis [ (86 + -86) ] = arr [ (68 + -68) ]\n    idx_od3k = (30 + -30)\n    list_lgzc = range ( (13 + -12) , n )\n    while idx_od3k < len(list_lgzc):\n        i = list_lgzc[idx_od3k]\n        if ( arr [ i ] > arr [ i - (16 + -15) ] ) :\n            msis [ i ] = msis [ i - (25 + -24) ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n        idx_od3k = idx_od3k + (34 + -33)\n    msds [ n - (92 + -91) ] = arr [ n - (85 + -84) ]\n    idx_c7xd = (30 + -30)\n    list_07dp = range ( n - (35 + -33) , - (44 + -43) , - (96 + -95) )\n    while idx_c7xd < len(list_07dp):\n        i = list_07dp[idx_c7xd]\n        if ( arr [ i ] > arr [ i + (2 + -1) ] ) :\n            msds [ i ] = msds [ i + (20 + -19) ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n        idx_c7xd = idx_c7xd + (26 + -25)\n    idx_ot2d = (60 + -60)\n    list_w0io = range ( n )\n    while idx_ot2d < len(list_w0io):\n        i = list_w0io[idx_ot2d]\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n        idx_ot2d = idx_ot2d + (50 + -49)\n    return max_sum", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_223", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSum ( arr , n ) :\n    res = - sys.maxsize\n    idx_768s = (51 + -51)\n    list_wjoq = range ( (45 + -45) , n )\n    while idx_768s < len(list_wjoq):\n        i = list_wjoq[idx_768s]\n        curr_sum = (87 + -87)\n        idx_o7pe = (91 + -91)\n        list_ui7h = range ( (33 + -33) , n )\n        while idx_o7pe < len(list_ui7h):\n            j = list_ui7h[idx_o7pe]\n            index = int ( ( i + j ) % n )\n            curr_sum += j * arr [ index ]\n            idx_o7pe = idx_o7pe + (69 + -68)\n        res = max ( res , curr_sum )\n        idx_768s = idx_768s + (16 + -15)\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_to_224", "old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY"}
{"code": "def maxSum ( arr , n ) :\n    cum_sum = (62 + -62)\n    idx_1vgj = (67 + -67)\n    list_aiv3 = range ( (21 + -21) , n )\n    while idx_1vgj < len(list_aiv3):\n        i = list_aiv3[idx_1vgj]\n        cum_sum += arr [ i ]\n        idx_1vgj = idx_1vgj + (36 + -35)\n    curr_val = (78 + -78)\n    idx_34x1 = (33 + -33)\n    list_n7xk = range ( (57 + -57) , n )\n    while idx_34x1 < len(list_n7xk):\n        i = list_n7xk[idx_34x1]\n        curr_val += i * arr [ i ]\n        idx_34x1 = idx_34x1 + (77 + -76)\n    res = curr_val\n    idx_7caw = (99 + -99)\n    list_g32r = range ( (75 + -74) , n )\n    while idx_7caw < len(list_g32r):\n        i = list_g32r[idx_7caw]\n        next_val = ( curr_val - ( cum_sum - arr [ i - (7 + -6) ] ) + arr [ i - (77 + -76) ] * ( n - (21 + -20) ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n        idx_7caw = idx_7caw + (17 + -16)\n    return res", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1_to_225", "old_id": "MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1"}
{"code": "def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ (48 + -48) ] * N\n    dp [ (22 + -22) ] = (41 + -41)\n    idx_lcgb = (53 + -53)\n    list_ygmw = range ( (63 + -62) , N )\n    while idx_lcgb < len(list_ygmw):\n        i = list_ygmw[idx_lcgb]\n        dp [ i ] = dp [ i - (69 + -68) ]\n        if ( arr [ i ] - arr [ i - (2 + -1) ] < K ) :\n            if ( i >= (52 + -50) ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - (46 + -44) ] + arr [ i ] + arr [ i - (44 + -43) ] )\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - (25 + -24) ] )\n        idx_lcgb = idx_lcgb + (1 + 0)\n    return dp [ N - (57 + -56) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_to_226", "old_id": "MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE"}
{"code": "def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ (17 + -17) for k in range ( n ) ]\n    bw = [ (47 + -47) for k in range ( n ) ]\n    cur_max , max_so_far = arr [ (43 + -43) ] , arr [ (91 + -91) ]\n    idx_o4kr = (12 + -12)\n    list_85b9 = range ((40 + -39), n )\n    while idx_o4kr < len(list_85b9):\n        i = list_85b9[idx_o4kr]\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n        idx_o4kr = idx_o4kr + (1 + 0)\n    cur_max = max_so_far = bw [ n - (89 + -88) ] = arr [ n - (85 + -84) ]\n    i = n - (40 + -38)\n    while i >= (64 + -64) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= (14 + -13)\n    fans = max_so_far\n    idx_0up7 = (23 + -23)\n    list_ygdh = range ( (10 + -9) , n - (59 + -58) )\n    while idx_0up7 < len(list_ygdh):\n        i = list_ygdh[idx_0up7]\n        fans = max ( fans , fw [ i - (30 + -29) ] + bw [ i + (32 + -31) ] )\n        idx_0up7 = idx_0up7 + (96 + -95)\n    return fans", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT_to_227", "old_id": "MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = [ (97 + -97) for i in range ( N ) ]\n    MS [ N - (40 + -39) ] = arr [ N - (4 + -3) ]\n    idx_d2ho = (30 + -30)\n    list_n4jv = range ( N - (49 + -47) , - (6 + -5) , - (7 + -6) )\n    while idx_d2ho < len(list_n4jv):\n        i = list_n4jv[idx_d2ho]\n        if ( i + k + (82 + -81) >= N ) :\n            MS [ i ] = max ( arr [ i ] , MS [ i + (90 + -89) ] )\n        else :\n            MS [ i ] = max ( arr [ i ] + MS [ i + k + (57 + -56) ] , MS [ i + (57 + -56) ] )\n        idx_d2ho = idx_d2ho + (40 + -39)\n    return MS [ (99 + -99) ]", "id": "ConstantUnfoldding_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_228", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def maxTripletSum ( arr , n ) :\n    sm = - (20 + 999980)\n    idx_094o = (92 + -92)\n    list_mwe2 = range ( (92 + -92) , n )\n    while idx_094o < len(list_mwe2):\n        i = list_mwe2[idx_094o]\n        idx_ec8d = (79 + -79)\n        list_ogsl = range ( i + (40 + -39) , n )\n        while idx_ec8d < len(list_ogsl):\n            j = list_ogsl[idx_ec8d]\n            idx_5cre = (63 + -63)\n            list_guiy = range ( j + (33 + -32) , n )\n            while idx_5cre < len(list_guiy):\n                k = list_guiy[idx_5cre]\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n                idx_5cre = idx_5cre + (11 + -10)\n            idx_ec8d = idx_ec8d + (20 + -19)\n        idx_094o = idx_094o + (31 + -30)\n    return sm", "id": "ConstantUnfoldding_sample_from_MAXIMUM_TRIPLET_SUM_ARRAY_to_229", "old_id": "MAXIMUM_TRIPLET_SUM_ARRAY"}
{"code": "def maxCost ( mat , N ) :\n    dp = [ [ (81 + -81) for i in range ( N ) ] for j in range ( N ) ]\n    dp [ (12 + -12) ] [ (46 + -46) ] = mat [ (32 + -32) ] [ (19 + -19) ]\n    idx_qfo3 = (14 + -14)\n    list_ebtc = range ( (1 + 0) , N )\n    while idx_qfo3 < len(list_ebtc):\n        i = list_ebtc[idx_qfo3]\n        dp [ i ] [ (82 + -82) ] = mat [ i ] [ (3 + -3) ] + dp [ i - (8 + -7) ] [ (21 + -21) ]\n        idx_qfo3 = idx_qfo3 + (15 + -14)\n    idx_alce = (8 + -8)\n    list_wuze = range ( (74 + -73) , N )\n    while idx_alce < len(list_wuze):\n        i = list_wuze[idx_alce]\n        idx_58rf = (78 + -78)\n        list_wstr = range ( (14 + -13) , min ( i + (48 + -47) , N ) )\n        while idx_58rf < len(list_wstr):\n            j = list_wstr[idx_58rf]\n            dp [ i ] [ j ] = mat [ i ] [ j ] + \\\n                max ( dp [ i - (81 + -80) ] [ j - (77 + -76) ] , dp [ i - (9 + -8) ] [ j ] )\n            idx_58rf = idx_58rf + (15 + -14)\n        idx_alce = idx_alce + (74 + -73)\n    result = (99 + -99)\n    idx_ogjc = (32 + -32)\n    list_iz3v = range ( N )\n    while idx_ogjc < len(list_iz3v):\n        i = list_iz3v[idx_ogjc]\n        if ( result < dp [ N - (91 + -90) ] [ i ] ) :\n            result = dp [ N - (64 + -63) ] [ i ]\n        idx_ogjc = idx_ogjc + (99 + -98)\n    return result", "id": "ConstantUnfoldding_sample_from_MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX_to_230", "old_id": "MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX"}
{"code": "def minValue ( A , B , n ) :\n    sorted ( A )\n    sorted ( B )\n    result = (9 + -9)\n    idx_2udq = (8 + -8)\n    list_vozh = range ( n )\n    while idx_2udq < len(list_vozh):\n        i = list_vozh[idx_2udq]\n        result += ( A [ i ] * B [ n - i - (32 + -31) ] )\n        idx_2udq = idx_2udq + (3 + -2)\n    return result", "id": "ConstantUnfoldding_sample_from_MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED_to_231", "old_id": "MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == (64 + -63) ) :\n        return (38 + -38)\n    arr.sort ( )\n    ans = arr [ n - (65 + -64) ] - arr [ (32 + -32) ]\n    small = arr [ (18 + -18) ] + k\n    big = arr [ n - (43 + -42) ] - k\n    if ( small > big ) :\n        small , big = big , small\n    idx_czq1 = (51 + -51)\n    list_8hmj = range ( (90 + -89) , n - (14 + -13) )\n    while idx_czq1 < len(list_8hmj):\n        i = list_8hmj[idx_czq1]\n        subtract = arr [ i ] - k\n        add = arr [ i ] + k\n        if ( subtract >= small or add <= big ) :\n            continue\n        if ( big - subtract <= add - small ) :\n            small = subtract\n        else :\n            big = add\n        idx_czq1 = idx_czq1 + (66 + -65)\n    return min ( ans , big - small )", "id": "ConstantUnfoldding_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_232", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = (89 + -89)\n    idx_b8wx = (32 + -32)\n    list_k0ir = range ( n )\n    while idx_b8wx < len(list_k0ir):\n        i = list_k0ir[idx_b8wx]\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n        idx_b8wx = idx_b8wx + (62 + -61)\n    return mn * ( sum - mn )", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY_to_233", "old_id": "MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY"}
{"code": "def calculateEnergy ( mat , n ) :\n    tot_energy = (15 + -15)\n    idx_xsit = (91 + -91)\n    list_nfw5 = range ( n )\n    while idx_xsit < len(list_nfw5):\n        i = list_nfw5[idx_xsit]\n        idx_qru4 = (27 + -27)\n        list_e3ly = range ( n )\n        while idx_qru4 < len(list_e3ly):\n            j = list_e3ly[idx_qru4]\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n            idx_qru4 = idx_qru4 + (10 + -9)\n        idx_xsit = idx_xsit + (28 + -27)\n    return tot_energy", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1_to_234", "old_id": "MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = (94 + -94)\n    idx_37mr = (13 + -13)\n    list_a1ge = range ( n )\n    while idx_37mr < len(list_a1ge):\n        i = list_a1ge[idx_37mr]\n        if ( cost [ i ] != - (92 + -91) ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + (22 + -21) )\n            size += (97 + -96)\n        idx_37mr = idx_37mr + (33 + -32)\n    n = size\n    min_cost = [ [ (19 + -19) for i in range ( W + (26 + -25) ) ] for j in range ( n + (27 + -26) ) ]\n    idx_q5fi = (64 + -64)\n    list_7r3m = range ( W + (31 + -30) )\n    while idx_q5fi < len(list_7r3m):\n        i = list_7r3m[idx_q5fi]\n        min_cost [ (80 + -80) ] [ i ] = INF\n        idx_q5fi = idx_q5fi + (56 + -55)\n    idx_rie7 = (73 + -73)\n    list_l0pv = range ( (10 + -9) , n + (89 + -88) )\n    while idx_rie7 < len(list_l0pv):\n        i = list_l0pv[idx_rie7]\n        min_cost [ i ] [ (92 + -92) ] = (86 + -86)\n        idx_rie7 = idx_rie7 + (68 + -67)\n    idx_5fp4 = (18 + -18)\n    list_nu4v = range ( (77 + -76) , n + (15 + -14) )\n    while idx_5fp4 < len(list_nu4v):\n        i = list_nu4v[idx_5fp4]\n        idx_biav = (40 + -40)\n        list_ij01 = range ( (11 + -10) , W + (13 + -12) )\n        while idx_biav < len(list_ij01):\n            j = list_ij01[idx_biav]\n            if ( wt [ i - (21 + -20) ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - (67 + -66) ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - (100 + -99) ] [ j ] , min_cost [ i ] [ j - wt [ i - (11 + -10) ] ] + val [ i - (73 + -72) ] )\n            idx_biav = idx_biav + (16 + -15)\n        idx_5fp4 = idx_5fp4 + (79 + -78)\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - (4 + -3)\n    else :\n        return min_cost [ n ] [ W ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_235", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minimumflip ( mat , n ) :\n    flip = (48 + -48)\n    idx_s9br = (64 + -64)\n    list_g1a8 = range ( n )\n    while idx_s9br < len(list_g1a8):\n        i = list_g1a8[idx_s9br]\n        idx_dt0y = (84 + -84)\n        list_etoy = range ( i )\n        while idx_dt0y < len(list_etoy):\n            j = list_etoy[idx_dt0y]\n            if mat [ i ] [ j ] != mat [ j ] [ i ] :\n                flip += (55 + -54)\n            idx_dt0y = idx_dt0y + (52 + -51)\n        idx_s9br = idx_s9br + (41 + -40)\n    return flip", "id": "ConstantUnfoldding_sample_from_MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1_to_236", "old_id": "MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = (85 + -85)\n    idx_y2px = (46 + -46)\n    list_drny = range ( (82 + -82) , n )\n    while idx_y2px < len(list_drny):\n        i = list_drny[idx_y2px]\n        if ( ( max1 - arr [ i ] ) % k != (84 + -84) ) :\n            return - (68 + -67)\n        else :\n            res += ( max1 - arr [ i ] ) / k\n        idx_y2px = idx_y2px + (66 + -65)\n    return int ( res )", "id": "ConstantUnfoldding_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_237", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ (43 + -43) ] * N\n    idx_umnk = (57 + -57)\n    list_ofbg = range ( N )\n    while idx_umnk < len(list_ofbg):\n        i = list_ofbg[idx_umnk]\n        lis [ i ] = (4 + -3)\n        idx_umnk = idx_umnk + (12 + -11)\n    idx_4bfd = (68 + -68)\n    list_dhy5 = range ( (29 + -28) , N )\n    while idx_4bfd < len(list_dhy5):\n        i = list_dhy5[idx_4bfd]\n        idx_2xa9 = (37 + -37)\n        list_3wt8 = range ( i )\n        while idx_2xa9 < len(list_3wt8):\n            j = list_3wt8[idx_2xa9]\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + (92 + -91) ) :\n                lis [ i ] = lis [ j ] + (33 + -32)\n            idx_2xa9 = idx_2xa9 + (50 + -49)\n        idx_4bfd = idx_4bfd + (24 + -23)\n    max = (21 + -21)\n    idx_ul5c = (95 + -95)\n    list_7uj8 = range ( N )\n    while idx_ul5c < len(list_7uj8):\n        i = list_7uj8[idx_ul5c]\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n        idx_ul5c = idx_ul5c + (13 + -12)\n    return ( N - max )", "id": "ConstantUnfoldding_sample_from_MINIMUM_INSERTIONS_SORT_ARRAY_to_238", "old_id": "MINIMUM_INSERTIONS_SORT_ARRAY"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ (44 + -44) for i in range ( n ) ]\n    if ( n == (34 + -34) ) or ( arr [ (2 + -2) ] == (12 + -12) ) :\n        return float ( 'inf' )\n    jumps [ (94 + -94) ] = (80 + -80)\n    idx_9w7u = (35 + -35)\n    list_le4y = range ( (15 + -14) , n )\n    while idx_9w7u < len(list_le4y):\n        i = list_le4y[idx_9w7u]\n        jumps [ i ] = float ( 'inf' )\n        idx_i0ox = (28 + -28)\n        list_0vnh = range ( i )\n        while idx_i0ox < len(list_0vnh):\n            j = list_0vnh[idx_i0ox]\n            if ( i <= j + arr [ j ] ) and ( jumps [ j ] != float ( 'inf' ) ) :\n                jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + (72 + -71) )\n                break\n            idx_i0ox = idx_i0ox + (90 + -89)\n        idx_9w7u = idx_9w7u + (56 + -55)\n    return jumps [ n - (63 + -62) ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1_to_239", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ (64 + -64) for i in range ( n ) ]\n    idx_7pdf = (89 + -89)\n    list_u9rf = range ( n - (64 + -62) , - (92 + -91) , - (5 + -4) )\n    while idx_7pdf < len(list_u9rf):\n        i = list_u9rf[idx_7pdf]\n        if ( arr [ i ] == (77 + -77) ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - (19 + -18) ) :\n            jumps [ i ] = (78 + -77)\n        else :\n            min = float ( 'inf' )\n            idx_im7q = (41 + -41)\n            list_t9s4 = range ( i + (96 + -95) , n )\n            while idx_im7q < len(list_t9s4):\n                j = list_t9s4[idx_im7q]\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n                idx_im7q = idx_im7q + (36 + -35)\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + (8 + -7)\n            else :\n                jumps [ i ] = min\n        idx_7pdf = idx_7pdf + (93 + -92)\n    return jumps [ (85 + -85) ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_240", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = [ (97 + -97) , (51 + -50) , (9 + -7) , (91 + -88) ]\n    idx_9g6p = (100 + -100)\n    list_u576 = range ( (10 + -6) , n + (69 + -68) )\n    while idx_9g6p < len(list_u576):\n        i = list_u576[idx_9g6p]\n        dp.append ( i )\n        idx_cs62 = (92 + -92)\n        list_d1ys = range ( (45 + -44) , int ( ceil ( sqrt ( i ) ) ) + (3 + -2) )\n        while idx_cs62 < len(list_d1ys):\n            x = list_d1ys[idx_cs62]\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , (84 + -83) + dp [ i - temp ] )\n            idx_cs62 = idx_cs62 + (42 + -41)\n        idx_9g6p = idx_9g6p + (93 + -92)\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_241", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def subset ( arr , n ) :\n    maxv = max(arr)\n    minv = min(arr)\n    mp = { i : (90 + -90) for i in range ( minv, maxv+(28 + -27) ) }\n    idx_izqe = (21 + -21)\n    list_e8xq = range ( n )\n    while idx_izqe < len(list_e8xq):\n        i = list_e8xq[idx_izqe]\n        mp [ arr [ i ] ] += (65 + -64)\n        idx_izqe = idx_izqe + (45 + -44)\n    res = (53 + -53)\n    idx_6rmx = (65 + -65)\n    list_z2qr = list(mp.items ( ))\n    while idx_6rmx < len(list_z2qr):\n        key , value = list_z2qr[idx_6rmx]\n        res = max ( res , value )\n        idx_6rmx = idx_6rmx + (32 + -31)\n    return res", "id": "ConstantUnfoldding_sample_from_MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1_to_242", "old_id": "MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1"}
{"code": "def minOperation ( arr , n ) :\n    Hash = defaultdict ( lambda : (38 + -38) )\n    idx_6ubv = (83 + -83)\n    list_uwel = range ( (55 + -55) , n )\n    while idx_6ubv < len(list_uwel):\n        i = list_uwel[idx_6ubv]\n        Hash [ arr [ i ] ] += (91 + -90)\n        idx_6ubv = idx_6ubv + (73 + -72)\n    max_count = (51 + -51)\n    idx_m8u4 = (84 + -84)\n    list_utyf = Hash\n    while idx_m8u4 < len(list_utyf):\n        i = list_utyf[idx_m8u4]\n        if max_count < Hash [ i ] :\n            max_count = Hash [ i ]\n        idx_m8u4 = idx_m8u4 + (4 + -3)\n    return n - max_count", "id": "ConstantUnfoldding_sample_from_MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY_to_243", "old_id": "MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY"}
{"code": "def minProduct(arr, n, k):\n    pq = []\n    idx_7bmn = (84 + -84)\n    list_6y8h = range(n)\n    while idx_7bmn < len(list_6y8h):\n        i = list_6y8h[idx_7bmn]\n        heapq.heappush(pq, arr[i])\n        idx_7bmn = idx_7bmn + (81 + -80)\n    count = (34 + -34)\n    ans = (62 + -61)\n    while pq and count < k:\n        ans += heapq.heappop(pq)\n        count += (14 + -13)\n    return ans", "id": "ConstantUnfoldding_sample_from_MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS_to_244", "old_id": "MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS"}
{"code": "def minProductSubset ( a , n ) :\n    if ( n == (69 + -68) ) :\n        return a [ (14 + -14) ]\n    max_neg = float ( '-inf' )\n    min_pos = float ( 'inf' )\n    count_neg = (99 + -99)\n    count_zero = (34 + -34)\n    prod = (47 + -46)\n    idx_dntk = (19 + -19)\n    list_8mue = range ( (50 + -50) , n )\n    while idx_dntk < len(list_8mue):\n        i = list_8mue[idx_dntk]\n        if ( a [ i ] == (91 + -91) ) :\n            count_zero = count_zero + (82 + -81)\n            continue\n        if ( a [ i ] < (36 + -36) ) :\n            count_neg = count_neg + (11 + -10)\n            max_neg = max ( max_neg , a [ i ] )\n        if ( a [ i ] > (38 + -38) ) :\n            min_pos = min ( min_pos , a [ i ] )\n        prod = prod * a [ i ]\n        idx_dntk = idx_dntk + (85 + -84)\n    if ( count_zero == n or ( count_neg == (68 + -68) and count_zero > (64 + -64) ) ) :\n        return (45 + -45)\n    if ( count_neg == (30 + -30) ) :\n        return min_pos\n    if ( ( count_neg & (56 + -55) ) == (34 + -34) and count_neg != (27 + -27) ) :\n        prod = int ( prod / max_neg )\n    return prod", "id": "ConstantUnfoldding_sample_from_MINIMUM_PRODUCT_SUBSET_ARRAY_to_245", "old_id": "MINIMUM_PRODUCT_SUBSET_ARRAY"}
{"code": "def findMinRooms ( slots , n , m ) :\n    counts = [ (76 + -76) ] * m\n    idx_to4i = (58 + -58)\n    list_9sfe = range ( n )\n    while idx_to4i < len(list_9sfe):\n        i = list_9sfe[idx_to4i]\n        idx_qdpa = (47 + -47)\n        list_lsbj = range ( m )\n        while idx_qdpa < len(list_lsbj):\n            j = list_lsbj[idx_qdpa]\n            if i < len(slots) and j < len(slots[i]):\n                if ( slots [ i ] [ j ] == '1' ) :\n                    counts [ j ] += (62 + -61)\n            idx_qdpa = idx_qdpa + (31 + -30)\n        idx_to4i = idx_to4i + (40 + -39)\n    return max ( counts )", "id": "ConstantUnfoldding_sample_from_MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE_to_246", "old_id": "MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE"}
{"code": "def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    idx_eb8t = (25 + -25)\n    list_3ygh = range ( (92 + -91) , n + (75 + -74) )\n    while idx_eb8t < len(list_3ygh):\n        i = list_3ygh[idx_eb8t]\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n        idx_eb8t = idx_eb8t + (11 + -10)\n    return n", "id": "ConstantUnfoldding_sample_from_MINIMUM_ROTATIONS_REQUIRED_GET_STRING_to_247", "old_id": "MINIMUM_ROTATIONS_REQUIRED_GET_STRING"}
{"code": "def getMinSteps ( n ) :\n    table = [ (60 + -60) ] * ( n + (7 + -6) )\n    idx_vr58 = (84 + -84)\n    list_eq4h = range ( n + (54 + -53) )\n    while idx_vr58 < len(list_eq4h):\n        i = list_eq4h[idx_vr58]\n        table [ i ] = n - i\n        idx_vr58 = idx_vr58 + (11 + -10)\n    idx_co65 = (10 + -10)\n    list_uh0e = range ( n , (63 + -63) , - (90 + -89) )\n    while idx_co65 < len(list_uh0e):\n        i = list_uh0e[idx_co65]\n        if ( not ( i % (76 + -74) ) ) :\n            table [ i // (36 + -34) ] = min ( table [ i ] + (45 + -44) , table [ i // (92 + -90) ] )\n        if ( not ( i % (54 + -51) ) ) :\n            table [ i // (50 + -47) ] = min ( table [ i ] + (60 + -59) , table [ i // (69 + -66) ] )\n        idx_co65 = idx_co65 + (66 + -65)\n    return table [ (45 + -44) ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION_to_248", "old_id": "MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = (72 + -72)\n    res = (5 + -5)\n    temp = (58 + -58)\n    idx_b7xq = (53 + -53)\n    list_ny5x = range ( n )\n    while idx_b7xq < len(list_ny5x):\n        i = list_ny5x[idx_b7xq]\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < (46 + -46) and b [ i ] < (34 + -34) ) :\n            temp = ( a [ i ] + (14 + -12) * k ) * b [ i ]\n        elif ( pro < (95 + -95) and a [ i ] < (22 + -22) ) :\n            temp = ( a [ i ] - (31 + -29) * k ) * b [ i ]\n        elif ( pro > (34 + -34) and a [ i ] < (36 + -36) ) :\n            temp = ( a [ i ] + (99 + -97) * k ) * b [ i ]\n        elif ( pro > (52 + -52) and a [ i ] > (72 + -72) ) :\n            temp = ( a [ i ] - (16 + -14) * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n        idx_b7xq = idx_b7xq + (18 + -17)\n    return res - diff", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_249", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def minSum ( arr , n ) :\n    dp = [ (52 + -52) ] * n\n    if ( n == (88 + -87) ) :\n        return arr [ (36 + -36) ]\n    if ( n == (25 + -23) ) :\n        return min ( arr [ (96 + -96) ] , arr [ (81 + -80) ] )\n    if ( n == (11 + -8) ) :\n        return min ( arr [ (54 + -54) ] , min ( arr [ (11 + -10) ] , arr [ (63 + -61) ] ) )\n    if ( n == (97 + -93) ) :\n        return min ( min ( arr [ (51 + -51) ] , arr [ (7 + -6) ] ) , min ( arr [ (14 + -12) ] , arr [ (27 + -24) ] ) )\n    dp [ (79 + -79) ] = arr [ (57 + -57) ]\n    dp [ (57 + -56) ] = arr [ (41 + -40) ]\n    dp [ (68 + -66) ] = arr [ (43 + -41) ]\n    dp [ (27 + -24) ] = arr [ (58 + -55) ]\n    idx_97ms = (96 + -96)\n    list_9mrl = range ( (36 + -32) , n )\n    while idx_97ms < len(list_9mrl):\n        i = list_9mrl[idx_97ms]\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - (51 + -50) ] , dp [ i - (9 + -7) ] ) , min ( dp [ i - (25 + -22) ] , dp [ i - (32 + -28) ] ) )\n        idx_97ms = idx_97ms + (84 + -83)\n    return min ( min ( dp [ n - (12 + -11) ] , dp [ n - (92 + -90) ] ) , min ( dp [ n - (70 + -66) ] , dp [ n - (81 + -78) ] ) )", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED_to_250", "old_id": "MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    a = (12 + -12)\n    b = (66 + -66)\n    idx_hy2j = (63 + -63)\n    list_aro8 = range ( n )\n    while idx_hy2j < len(list_aro8):\n        i = list_aro8[idx_hy2j]\n        if ( i % (54 + -52) != (22 + -22) ) :\n            a = a * (35 + -25) + arr [ i ]\n        else :\n            b = b * (13 + -3) + arr [ i ]\n        idx_hy2j = idx_hy2j + (97 + -96)\n    return a + b", "id": "ConstantUnfoldding_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_251", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == (100 + -100) :\n        return (2 + -2)\n    if N == (16 + -15) :\n        return insert\n    dp = [ (34 + -34) ] * ( N + (50 + -49) )\n    idx_tj03 = (59 + -59)\n    list_pxm3 = range ( (80 + -79) , N + (78 + -77) )\n    while idx_tj03 < len(list_pxm3):\n        i = list_pxm3[idx_tj03]\n        if i % (78 + -76) == (100 + -100) :\n            dp [ i ] = min ( dp [ i - (58 + -57) ] + insert , dp [ i // (84 + -82) ] + copy )\n        else :\n            dp [ i ] = min ( dp [ i - (26 + -25) ] + insert , dp [ ( i + (46 + -45) ) // (5 + -3) ] + copy + remove )\n        idx_tj03 = idx_tj03 + (4 + -3)\n    return dp [ N ]", "id": "ConstantUnfoldding_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_252", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def minXOR ( arr , n ) :\n    min_xor = (100 + 999899)\n    val = (49 + -49)\n    idx_io9e = (57 + -57)\n    list_wbz8 = range ( (77 + -77) , n )\n    while idx_io9e < len(list_wbz8):\n        i = list_wbz8[idx_io9e]\n        idx_h7f2 = (37 + -37)\n        list_z4a1 = range ( i + (53 + -52) , n )\n        while idx_h7f2 < len(list_z4a1):\n            j = list_z4a1[idx_h7f2]\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n            idx_h7f2 = idx_h7f2 + (46 + -45)\n        idx_io9e = idx_io9e + (30 + -29)\n    return min_xor", "id": "ConstantUnfoldding_sample_from_MINIMUM_XOR_VALUE_PAIR_to_253", "old_id": "MINIMUM_XOR_VALUE_PAIR"}
{"code": "def minXOR ( arr , n ) :\n    arr = arr [ : n ]\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = (81 + -81)\n    idx_y9w6 = (41 + -41)\n    list_t9fb = range ( (17 + -17) , n - (95 + -94) )\n    while idx_y9w6 < len(list_t9fb):\n        i = list_t9fb[idx_y9w6]\n        val = arr [ i ] ^ arr [ i + (30 + -29) ]\n        minXor = min ( minXor , val )\n        idx_y9w6 = idx_y9w6 + (90 + -89)\n    return minXor", "id": "ConstantUnfoldding_sample_from_MINIMUM_XOR_VALUE_PAIR_1_to_254", "old_id": "MINIMUM_XOR_VALUE_PAIR_1"}
{"code": "def compute ( str , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( str )\n    answer = \"\"\n    idx_v8ir = (28 + -28)\n    list_five = range ( (82 + -82) , n )\n    while idx_v8ir < len(list_five):\n        i = list_five[idx_v8ir]\n        if i < l:\n            answer = answer + str [ i ]\n        idx_v8ir = idx_v8ir + (97 + -96)\n    idx_oair = (91 + -91)\n    list_9l7k = range ( n , l )\n    while idx_oair < len(list_9l7k):\n        i = list_9l7k[idx_oair]\n        answer = ( answer + reverseAlphabet [ ord ( str [ i ] ) - ord ( \"a\" ) ] )\n        idx_oair = idx_oair + (87 + -86)\n    return answer", "id": "ConstantUnfoldding_sample_from_MIRROR_CHARACTERS_STRING_to_255", "old_id": "MIRROR_CHARACTERS_STRING"}
{"code": "def segregateElements ( arr , n ) :\n    temp = [ (60 + -60) for k in range ( n ) ]\n    j = (11 + -11)\n    idx_9xiu = (76 + -76)\n    list_2paw = range ( n )\n    while idx_9xiu < len(list_2paw):\n        i = list_2paw[idx_9xiu]\n        if ( arr [ i ] >= (61 + -61) ) :\n            temp [ j ] = arr [ i ]\n            j += (84 + -83)\n        idx_9xiu = idx_9xiu + (42 + -41)\n    if ( j == n or j == (30 + -30) ) :\n        return\n    idx_y5n2 = (1 + -1)\n    list_ofk3 = range ( n )\n    while idx_y5n2 < len(list_ofk3):\n        i = list_ofk3[idx_y5n2]\n        if ( arr [ i ] < (88 + -88) ) :\n            temp [ j ] = arr [ i ]\n            j += (35 + -34)\n        idx_y5n2 = idx_y5n2 + (66 + -65)\n    idx_p0hd = (55 + -55)\n    list_1shx = range ( n )\n    while idx_p0hd < len(list_1shx):\n        k = list_1shx[idx_p0hd]\n        arr [ k ] = temp [ k ]\n        idx_p0hd = idx_p0hd + (32 + -31)", "id": "ConstantUnfoldding_sample_from_MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED_to_256", "old_id": "MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED"}
{"code": "def sequence ( n ) :\n    f = array.array ( 'i' , [ (83 + -83) , (66 + -65) , (58 + -57) ] )\n    idx_oln5 = (29 + -29)\n    list_5r2m = range ( (71 + -68) , n + (89 + -88) )\n    while idx_oln5 < len(list_5r2m):\n        i = list_5r2m[idx_oln5]\n        r = f [ f [ i - (22 + -21) ] ] + f [ i - f [ i - (39 + -38) ] ]\n        f.append ( r )\n        idx_oln5 = idx_oln5 + (51 + -50)\n    return f[n]", "id": "ConstantUnfoldding_sample_from_NEWMAN_CONWAY_SEQUENCE_1_to_257", "old_id": "NEWMAN_CONWAY_SEQUENCE_1"}
{"code": "def firstNonRepeating ( arr , n ) :\n    idx_zt9h = (25 + -25)\n    list_75ke = range ( n )\n    while idx_zt9h < len(list_75ke):\n        i = list_75ke[idx_zt9h]\n        j = (62 + -62)\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += (9 + -8)\n        if ( j == n ) :\n            return arr [ i ]\n        idx_zt9h = idx_zt9h + (2 + -1)\n    return - (61 + -60)", "id": "ConstantUnfoldding_sample_from_NON_REPEATING_ELEMENT_to_258", "old_id": "NON_REPEATING_ELEMENT"}
{"code": "def firstNonRepeating ( arr , n ) :\n    mp = defaultdict ( lambda : (62 + -62) )\n    idx_xoza = (60 + -60)\n    list_24bq = range ( n )\n    while idx_xoza < len(list_24bq):\n        i = list_24bq[idx_xoza]\n        mp [ arr [ i ] ] += (92 + -91)\n        idx_xoza = idx_xoza + (74 + -73)\n    idx_v2wl = (83 + -83)\n    list_i05d = range ( n )\n    while idx_v2wl < len(list_i05d):\n        i = list_i05d[idx_v2wl]\n        if mp [ arr [ i ] ] == (56 + -55) :\n            return arr [ i ]\n        idx_v2wl = idx_v2wl + (91 + -90)\n    return - (13 + -12)", "id": "ConstantUnfoldding_sample_from_NON_REPEATING_ELEMENT_1_to_259", "old_id": "NON_REPEATING_ELEMENT_1"}
{"code": "def evenlength ( n ) :\n    res = n\n    idx_cisk = (74 + -74)\n    list_exfd = range ( len ( n ) - (47 + -46) , - (48 + -47) , - (77 + -76) )\n    while idx_cisk < len(list_exfd):\n        j = list_exfd[idx_cisk]\n        res += n [ j ]\n        idx_cisk = idx_cisk + (33 + -32)\n    return res", "id": "ConstantUnfoldding_sample_from_NTH_EVEN_LENGTH_PALINDROME_to_260", "old_id": "NTH_EVEN_LENGTH_PALINDROME"}
{"code": "def divisible ( num ) :\n    n = len ( num )\n    sum = (39 + -39)\n    idx_yzv8 = (36 + -36)\n    list_nmi0 = range ( n )\n    while idx_yzv8 < len(list_nmi0):\n        i = list_nmi0[idx_yzv8]\n        sum += ord ( num [ i ] )\n        idx_yzv8 = idx_yzv8 + (59 + -58)\n    if ( sum % (73 + -70) == (14 + -14) ) :\n        return (95 + -95)\n    if ( n == (35 + -34) ) :\n        return - (13 + -12)\n    idx_jhou = (64 + -64)\n    list_2ezw = range ( n )\n    while idx_jhou < len(list_2ezw):\n        i = list_2ezw[idx_jhou]\n        if ( sum % (1 + 2) == ord ( num [ i ] ) % (41 + -38) ) :\n            return (63 + -62)\n        idx_jhou = idx_jhou + (89 + -88)\n    if ( n == (94 + -92) ) :\n        return - (80 + -79)\n    return (33 + -31)", "id": "ConstantUnfoldding_sample_from_NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3_to_261", "old_id": "NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3"}
{"code": "def answer_query ( a , n , l , r ) :\n    count = (64 + -64)\n    idx_o7il = (59 + -59)\n    list_48yw = range ( l , r )\n    while idx_o7il < len(list_48yw):\n        i = list_48yw[idx_o7il]\n        if ( a [ i ] == a [ i + (25 + -24) ] ) :\n            count += (84 + -83)\n        idx_o7il = idx_o7il + (97 + -96)\n    return count", "id": "ConstantUnfoldding_sample_from_NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE_to_262", "old_id": "NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE"}
{"code": "def countIntegralSolutions ( n ) :\n    result = (15 + -15)\n    idx_jfsr = (52 + -52)\n    list_sogv = range ( n + (12 + -11) )\n    while idx_jfsr < len(list_sogv):\n        i = list_sogv[idx_jfsr]\n        idx_sjdr = (34 + -34)\n        list_wjr4 = range ( n + (44 + -43) )\n        while idx_sjdr < len(list_wjr4):\n            j = list_wjr4[idx_sjdr]\n            idx_o5jk = (76 + -76)\n            list_lrsp = range ( n + (83 + -82) )\n            while idx_o5jk < len(list_lrsp):\n                k = list_lrsp[idx_o5jk]\n                if i + j + k == n :\n                    result += (19 + -18)\n                idx_o5jk = idx_o5jk + (12 + -11)\n            idx_sjdr = idx_sjdr + (69 + -68)\n        idx_jfsr = idx_jfsr + (28 + -27)\n    return result", "id": "ConstantUnfoldding_sample_from_NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_to_263", "old_id": "NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N"}
{"code": "def nonDecNums ( n ) :\n    a = np.zeros ( ( n + (47 + -46) , (38 + -28) ) )\n    idx_acty = (35 + -35)\n    list_6v13 = range ( (59 + -49) )\n    while idx_acty < len(list_6v13):\n        i = list_6v13[idx_acty]\n        a [ (25 + -25) ] [ i ] = (73 + -72)\n        idx_acty = idx_acty + (4 + -3)\n    idx_h15z = (26 + -26)\n    list_2i8s = range ( (45 + -44) , n + (100 + -99) )\n    while idx_h15z < len(list_2i8s):\n        i = list_2i8s[idx_h15z]\n        a [ i ] [ (69 + -60) ] = (3 + -2)\n        idx_h15z = idx_h15z + (55 + -54)\n    idx_s4j3 = (78 + -78)\n    list_0rbi = range ( (23 + -22) , n + (34 + -33) )\n    while idx_s4j3 < len(list_0rbi):\n        i = list_0rbi[idx_s4j3]\n        idx_13tp = (82 + -82)\n        list_h6ge = range ( (58 + -50) , - (27 + -26) , - (9 + -8) )\n        while idx_13tp < len(list_h6ge):\n            j = list_h6ge[idx_13tp]\n            a [ i ] [ j ] = a [ i - (96 + -95) ] [ j ] + a [ i ] [ j + (23 + -22) ]\n            idx_13tp = idx_13tp + (25 + -24)\n        idx_s4j3 = idx_s4j3 + (16 + -15)\n    return int ( a [ n ] [ (95 + -95) ] )", "id": "ConstantUnfoldding_sample_from_NUMBER_N_DIGITS_NON_DECREASING_INTEGERS_to_264", "old_id": "NUMBER_N_DIGITS_NON_DECREASING_INTEGERS"}
{"code": "def answer ( n ) :\n    dp = [ [ (12 + -12) for x in range ( (34 + -24) ) ] for y in range ( n + (7 + -6) ) ]\n    if ( n == (97 + -96) ) :\n        return (68 + -58)\n    idx_nkph = (94 + -94)\n    list_k2tr = range ( (89 + -79) )\n    while idx_nkph < len(list_k2tr):\n        j = list_k2tr[idx_nkph]\n        dp [ (2 + -1) ] [ j ] = (60 + -59)\n        idx_nkph = idx_nkph + (71 + -70)\n    idx_3xi9 = (13 + -13)\n    list_jk01 = range ( (17 + -15) , n + (77 + -76) )\n    while idx_3xi9 < len(list_jk01):\n        i = list_jk01[idx_3xi9]\n        idx_ytpx = (10 + -10)\n        list_zb6j = range ( (77 + -67) )\n        while idx_ytpx < len(list_zb6j):\n            j = list_zb6j[idx_ytpx]\n            if ( j == (12 + -12) ) :\n                dp [ i ] [ j ] = dp [ i - (31 + -30) ] [ j + (26 + -25) ]\n            elif ( j == (5 + 4) ) :\n                dp [ i ] [ j ] = dp [ i - (68 + -67) ] [ j - (49 + -48) ]\n            else :\n                dp [ i ] [ j ] = ( dp [ i - (74 + -73) ] [ j - (40 + -39) ] + dp [ i - (22 + -21) ] [ j + (64 + -63) ] )\n            idx_ytpx = idx_ytpx + (52 + -51)\n        idx_3xi9 = idx_3xi9 + (100 + -99)\n    sum = (43 + -43)\n    idx_032v = (68 + -68)\n    list_5sr1 = range ( (63 + -62) , (88 + -78) )\n    while idx_032v < len(list_5sr1):\n        j = list_5sr1[idx_032v]\n        sum = sum + dp [ n ] [ j ]\n        idx_032v = idx_032v + (53 + -52)\n    return sum", "id": "ConstantUnfoldding_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_265", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def sumEqualProduct ( a , n ) :\n    zero = (97 + -97)\n    two = (84 + -84)\n    idx_shup = (38 + -38)\n    list_jxb7 = range ( n )\n    while idx_shup < len(list_jxb7):\n        i = list_jxb7[idx_shup]\n        if a [ i ] == (12 + -12) :\n            zero += (23 + -22)\n        if a [ i ] == (63 + -61) :\n            two += (46 + -45)\n        idx_shup = idx_shup + (35 + -34)\n    cnt = ( zero * ( zero - (85 + -84) ) ) // (23 + -21) + \\\n        ( two * ( two - (53 + -52) ) ) // (16 + -14)\n    return cnt", "id": "ConstantUnfoldding_sample_from_NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT_to_266", "old_id": "NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT"}
{"code": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = (60 + -60)\n    c2 = (83 + -83)\n    C = (61 + -61)\n    idx_ivly = (83 + -83)\n    list_yaot = range ( n )\n    while idx_ivly < len(list_yaot):\n        i = list_yaot[idx_ivly]\n        if s [ i ] == 'a' :\n            c1 += (29 + -28)\n        if s [ i ] == 'b' :\n            c2 += (47 + -46)\n            C += c1\n        idx_ivly = idx_ivly + (38 + -37)\n    return C * K + int ( K * ( K - (53 + -52) ) / (14 + -12) ) * c1 * c2", "id": "ConstantUnfoldding_sample_from_NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES_to_267", "old_id": "NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES"}
{"code": "def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ (11 + -11) for x in range ( n ) ] for y in range ( l ) ]\n    dp [ (12 + -12) ] [ ( ord ( str [ (46 + -46) ] ) - ord ( '0' ) ) % n ] += (38 + -37)\n    idx_032x = (63 + -63)\n    list_fx5u = range ( (28 + -27) , l )\n    while idx_032x < len(list_fx5u):\n        i = list_fx5u[idx_032x]\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += (26 + -25)\n        idx_m5he = (51 + -51)\n        list_5lh3 = range ( n )\n        while idx_m5he < len(list_5lh3):\n            j = list_5lh3[idx_m5he]\n            dp [ i ] [ j ] += dp [ i - (38 + -37) ] [ j ]\n            dp [ i ] [ ( j * (51 + -41) + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - (66 + -65) ] [ j ]\n            idx_m5he = idx_m5he + (33 + -32)\n        idx_032x = idx_032x + (67 + -66)\n    return dp [ l - (22 + -21) ] [ (94 + -94) ]", "id": "ConstantUnfoldding_sample_from_NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N_to_268", "old_id": "NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N"}
{"code": "def countRect ( n ) :\n    ans = (27 + -27)\n    idx_e96v = (59 + -59)\n    list_lny6 = range ( (6 + -5) , int ( math.sqrt ( n ) ) + (67 + -66) )\n    while idx_e96v < len(list_lny6):\n        length = list_lny6[idx_e96v]\n        height = length\n        while ( height * length <= n ) :\n            ans += (53 + -52)\n            height += (46 + -45)\n        idx_e96v = idx_e96v + (93 + -92)\n    return ans", "id": "ConstantUnfoldding_sample_from_NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES_to_269", "old_id": "NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES"}
{"code": "def minimumBox ( arr , n ) :\n    q = collections.deque ( [ ] )\n    arr = arr [ : n ]\n    arr.sort ( )\n    q.append ( arr [ (27 + -27) ] )\n    idx_fwxi = (73 + -73)\n    list_9au1 = range ( (69 + -68) , n )\n    while idx_fwxi < len(list_9au1):\n        i = list_9au1[idx_fwxi]\n        now = q [ (85 + -85) ]\n        if ( arr [ i ] >= (82 + -80) * now ) :\n            q.popleft ( )\n        q.append ( arr [ i ] )\n        idx_fwxi = idx_fwxi + (80 + -79)\n    return len ( q )", "id": "ConstantUnfoldding_sample_from_NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER_to_270", "old_id": "NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER"}
{"code": "def maximumNumberDistinctPrimeRange ( m , n ) :\n    factorCount = [ (31 + -31) ] * ( n + (45 + -44) )\n    prime = [ False ] * ( n + (43 + -42) )\n    idx_zi0t = (79 + -79)\n    list_hr8n = range ( n + (95 + -94) )\n    while idx_zi0t < len(list_hr8n):\n        i = list_hr8n[idx_zi0t]\n        factorCount [ i ] = (91 + -91)\n        prime [ i ] = True\n        idx_zi0t = idx_zi0t + (43 + -42)\n    idx_768k = (52 + -52)\n    list_dylq = range ( (76 + -74) , n + (97 + -96) )\n    while idx_768k < len(list_dylq):\n        i = list_dylq[idx_768k]\n        if ( prime [ i ] == True ) :\n            factorCount [ i ] = (51 + -50)\n            idx_nx5g = (31 + -31)\n            list_u8ie = range ( i * (24 + -22) , n + (75 + -74) , i )\n            while idx_nx5g < len(list_u8ie):\n                j = list_u8ie[idx_nx5g]\n                factorCount [ j ] += (5 + -4)\n                prime [ j ] = False\n                idx_nx5g = idx_nx5g + (59 + -58)\n        idx_768k = idx_768k + (2 + -1)\n    max = factorCount [ m ]\n    num = m\n    idx_3ide = (76 + -76)\n    list_y9ih = range ( m , n + (46 + -45) )\n    while idx_3ide < len(list_y9ih):\n        i = list_y9ih[idx_3ide]\n        if ( factorCount [ i ] > max ) :\n            max = factorCount [ i ]\n            num = i\n        idx_3ide = idx_3ide + (84 + -83)\n    return num", "id": "ConstantUnfoldding_sample_from_NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N_to_271", "old_id": "NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N"}
{"code": "def findNth ( n ) :\n    count = (7 + -7)\n    idx_kflt = (84 + -84)\n    list_4in9 = itertools.count ( )\n    while idx_kflt < len(list_4in9):\n        curr = list_4in9[idx_kflt]\n        sum = (9 + -9)\n        x = curr\n        while ( x ) :\n            sum = sum + x % (76 + -66)\n            x = x // (3 + 7)\n        if ( sum == (57 + -47) ) :\n            count = count + (76 + -75)\n        if ( count == n ) :\n            return curr\n        idx_kflt = idx_kflt + (82 + -81)\n    return - (57 + -56)", "id": "ConstantUnfoldding_sample_from_N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_to_272", "old_id": "N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN"}
{"code": "def findSum ( A , B , n ) :\n    Hash = defaultdict ( lambda : (99 + -99) )\n    idx_d6su = (96 + -96)\n    list_q346 = range ( (5 + -5) , n )\n    while idx_d6su < len(list_q346):\n        i = list_q346[idx_d6su]\n        Hash [ A [ i ] ] += (98 + -97)\n        Hash [ B [ i ] ] += (52 + -51)\n        idx_d6su = idx_d6su + (100 + -99)\n    Sum = (49 + -49)\n    idx_3wcz = (58 + -58)\n    list_j5qo = Hash\n    while idx_3wcz < len(list_j5qo):\n        x = list_j5qo[idx_3wcz]\n        if Hash [ x ] == (89 + -88) :\n            Sum += x\n        idx_3wcz = idx_3wcz + (18 + -17)\n    return Sum", "id": "ConstantUnfoldding_sample_from_OVERLAPPING_SUM_TWO_ARRAY_to_273", "old_id": "OVERLAPPING_SUM_TWO_ARRAY"}
{"code": "def isProduct ( arr , n , x ) :\n    if n < (22 + -20) :\n        return False\n    s = set ( )\n    idx_v6o3 = (100 + -100)\n    list_ts8z = range ( (64 + -64) , n )\n    while idx_v6o3 < len(list_ts8z):\n        i = list_ts8z[idx_v6o3]\n        if arr [ i ] == (79 + -79) :\n            if x == (24 + -24) :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == (51 + -51) :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n        idx_v6o3 = idx_v6o3 + (85 + -84)\n    return False", "id": "ConstantUnfoldding_sample_from_PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1_to_274", "old_id": "PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1"}
{"code": "def checkPangram ( s ) :\n    List = [ ]\n    idx_jol6 = (23 + -23)\n    list_nqwo = range ( (10 + 16) )\n    while idx_jol6 < len(list_nqwo):\n        i = list_nqwo[idx_jol6]\n        List.append ( False )\n        idx_jol6 = idx_jol6 + (43 + -42)\n    idx_8ls7 = (26 + -26)\n    list_is9x = s\n    while idx_8ls7 < len(list_is9x):\n        c = list_is9x[idx_8ls7]\n        if 'A' <= c and c <= 'Z':\n            List [ ord ( c ) - ord ( 'A' ) ] = True\n        elif 'a' <= c and c <= 'z':\n            List [ ord ( c ) - ord ( 'a' ) ] = True\n        idx_8ls7 = idx_8ls7 + (22 + -21)\n    idx_u3sr = (21 + -21)\n    list_1b2v = List\n    while idx_u3sr < len(list_1b2v):\n        ch = list_1b2v[idx_u3sr]\n        if ch == False :\n            return False\n        idx_u3sr = idx_u3sr + (49 + -48)\n    return True", "id": "ConstantUnfoldding_sample_from_PANGRAM_CHECKING_to_275", "old_id": "PANGRAM_CHECKING"}
{"code": "def maxDifference ( arr , N , k ) :\n    S = (57 + -57)\n    S1 = (24 + -24)\n    max_difference = (67 + -67)\n    idx_d7g5 = (26 + -26)\n    list_s7te = range ( N )\n    while idx_d7g5 < len(list_s7te):\n        i = list_s7te[idx_d7g5]\n        S += arr [ i ]\n        idx_d7g5 = idx_d7g5 + (64 + -63)\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    idx_kwj3 = (59 + -59)\n    list_ev67 = range ( M )\n    while idx_kwj3 < len(list_ev67):\n        i = list_ev67[idx_kwj3]\n        S1 += arr [ i ]\n        idx_kwj3 = idx_kwj3 + (38 + -37)\n    max_difference = S1 - ( S - S1 )\n    return max_difference", "id": "ConstantUnfoldding_sample_from_PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM_to_276", "old_id": "PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMUM"}
{"code": "def maxAverageOfPath ( cost , N ) :\n    dp = [ [ (18 + -18) for i in range ( N + (55 + -54) ) ] for j in range ( N + (32 + -31) ) ]\n    dp [ (62 + -62) ] [ (50 + -50) ] = cost [ (17 + -17) ] [ (49 + -49) ]\n    idx_ichl = (59 + -59)\n    list_8ieq = range ( (81 + -80) , N )\n    while idx_ichl < len(list_8ieq):\n        i = list_8ieq[idx_ichl]\n        dp [ i ] [ (23 + -23) ] = dp [ i - (100 + -99) ] [ (38 + -38) ] + cost [ i ] [ (92 + -92) ]\n        idx_ichl = idx_ichl + (12 + -11)\n    idx_09dk = (40 + -40)\n    list_qaid = range ( (36 + -35) , N )\n    while idx_09dk < len(list_qaid):\n        j = list_qaid[idx_09dk]\n        dp [ (61 + -61) ] [ j ] = dp [ (80 + -80) ] [ j - (74 + -73) ] + cost [ (96 + -96) ] [ j ]\n        idx_09dk = idx_09dk + (26 + -25)\n    idx_tngk = (32 + -32)\n    list_24d6 = range ( (17 + -16) , N )\n    while idx_tngk < len(list_24d6):\n        i = list_24d6[idx_tngk]\n        idx_yjvp = (33 + -33)\n        list_n0pr = range ( (1 + 0) , N )\n        while idx_yjvp < len(list_n0pr):\n            j = list_n0pr[idx_yjvp]\n            dp [ i ] [ j ] = max ( dp [ i - (20 + -19) ] [ j ] , dp [ i ] [ j - (6 + -5) ] ) + cost [ i ] [ j ]\n            idx_yjvp = idx_yjvp + (67 + -66)\n        idx_tngk = idx_tngk + (87 + -86)\n    return dp [ N - (51 + -50) ] [ N - (51 + -50) ] / ( (37 + -35) * N - (14 + -13) )", "id": "ConstantUnfoldding_sample_from_PATH_MAXIMUM_AVERAGE_VALUE_to_277", "old_id": "PATH_MAXIMUM_AVERAGE_VALUE"}
{"code": "def isPossible ( a , b , n , k ) :\n    a = a [ : n ]\n    b = b [ : n ]\n    a.sort ( reverse = True )\n    b.sort ( )\n    idx_zuxe = (39 + -39)\n    list_u8hg = range ( n )\n    while idx_zuxe < len(list_u8hg):\n        i = list_u8hg[idx_zuxe]\n        if ( a [ i ] + b [ i ] < k ) :\n            return False\n        idx_zuxe = idx_zuxe + (9 + -8)\n    return True", "id": "ConstantUnfoldding_sample_from_PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K_to_278", "old_id": "PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K"}
{"code": "def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :\n    print ( \"Point inside the viewing pane:\" )\n    idx_blqe = (42 + -42)\n    list_ilex = range ( n )\n    while idx_blqe < len(list_ilex):\n        i = list_ilex[idx_blqe]\n        if ( ( XY [ i ] [ (68 + -68) ] >= Xmin ) and ( XY [ i ] [ (24 + -24) ] <= Xmax ) ) :\n            if ( ( XY [ i ] [ (89 + -88) ] >= Ymin ) and ( XY [ i ] [ (94 + -93) ] <= Ymax ) ) :\n                print ( \"[\" , XY [ i ] [ (20 + -20) ] , \", \" , XY [ i ] [ (95 + -94) ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_blqe = idx_blqe + (9 + -8)\n    print ( \"\\n\\nPoint outside the viewing pane:\" )\n    idx_l5hp = (8 + -8)\n    list_9u1i = range ( n )\n    while idx_l5hp < len(list_9u1i):\n        i = list_9u1i[idx_l5hp]\n        if ( ( XY [ i ] [ (34 + -34) ] < Xmin ) or ( XY [ i ] [ (27 + -27) ] > Xmax ) ) :\n            print ( \"[\" , XY [ i ] [ (49 + -49) ] , \", \" , XY [ i ] [ (11 + -10) ] , \"]\" , sep = \"\" , end = \"\" )\n        if ( ( XY [ i ] [ (77 + -76) ] < Ymin ) or ( XY [ i ] [ (55 + -54) ] > Ymax ) ) :\n            print ( \"[\" , XY [ i ] [ (56 + -56) ] , \", \" , XY [ i ] [ (76 + -75) ] , \"]\" , sep = \"\" , end = \"\" )\n        idx_l5hp = idx_l5hp + (85 + -84)", "id": "ConstantUnfoldding_sample_from_POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS_to_279", "old_id": "POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS"}
{"code": "def isPossibleTriangle ( arr , N ) :\n    arr = arr [ : N ]\n    if N < (40 + -37) :\n        return False\n    arr.sort ( )\n    idx_hiv9 = (8 + -8)\n    list_lzyn = range ( N - (11 + -9) )\n    while idx_hiv9 < len(list_lzyn):\n        i = list_lzyn[idx_hiv9]\n        if arr [ i ] + arr [ i + (30 + -29) ] > arr [ i + (63 + -61) ] :\n            return True\n        idx_hiv9 = idx_hiv9 + (44 + -43)\n    return False", "id": "ConstantUnfoldding_sample_from_POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES_to_280", "old_id": "POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES"}
{"code": "def isPrime ( p ) :\n    checkNumber = (73 + -71) ** p - (86 + -85)\n    nextval = (3 + 1) % checkNumber\n    idx_0tin = (46 + -46)\n    list_8amg = range ( (98 + -97) , p - (25 + -24) )\n    while idx_0tin < len(list_8amg):\n        i = list_8amg[idx_0tin]\n        nextval = ( nextval * nextval - (15 + -13) ) % checkNumber\n        idx_0tin = idx_0tin + (72 + -71)\n    if ( nextval == (24 + -24) ) : return True\n    else : return False", "id": "ConstantUnfoldding_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_281", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def isPrime ( n ) :\n    if ( n <= (31 + -30) ) :\n        return False\n    idx_c8zy = (59 + -59)\n    list_79y3 = range ( (41 + -39) , n )\n    while idx_c8zy < len(list_79y3):\n        i = list_79y3[idx_c8zy]\n        if ( n % i == (37 + -37) ) :\n            return False\n        idx_c8zy = idx_c8zy + (34 + -33)\n    return True", "id": "ConstantUnfoldding_sample_from_PRIME_NUMBERS_to_282", "old_id": "PRIME_NUMBERS"}
{"code": "def noAdjacentDup ( s ) :\n    n = len ( s )\n    idx_nqur = (7 + -7)\n    list_74j0 = range ( (34 + -33) , n )\n    while idx_nqur < len(list_74j0):\n        i = list_74j0[idx_nqur]\n        if ( s [ i ] == s [ i - (73 + -72) ] ) :\n            s [ i ] = \"a\"\n            while ( s [ i ] == s [ i - (94 + -93) ] or ( i + (66 + -65) < n and s [ i ] == s [ i + (38 + -37) ] ) ) :\n                s [ i ] += (23 + -22)\n            i += (10 + -9)\n        idx_nqur = idx_nqur + (4 + -3)\n    return s", "id": "ConstantUnfoldding_sample_from_PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES_to_283", "old_id": "PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES"}
{"code": "def antiSpiralTraversal ( m , n , a ) :\n    k = (3 + -3)\n    l = (9 + -9)\n    stk = [ ]\n    while ( k <= m and l <= n ) :\n        idx_d76g = (16 + -16)\n        list_duz7 = range ( l , n + (4 + -3) )\n        while idx_d76g < len(list_duz7):\n            i = list_duz7[idx_d76g]\n            stk.append ( a [ k ] [ i ] )\n            idx_d76g = idx_d76g + (52 + -51)\n        k += (45 + -44)\n        idx_la2r = (44 + -44)\n        list_pnjb = range ( k , m + (98 + -97) )\n        while idx_la2r < len(list_pnjb):\n            i = list_pnjb[idx_la2r]\n            stk.append ( a [ i ] [ n ] )\n            idx_la2r = idx_la2r + (81 + -80)\n        n -= (40 + -39)\n        if ( k <= m ) :\n            idx_yl9q = (34 + -34)\n            list_ragd = range ( n , l - (15 + -14) , - (91 + -90) )\n            while idx_yl9q < len(list_ragd):\n                i = list_ragd[idx_yl9q]\n                stk.append ( a [ m ] [ i ] )\n                idx_yl9q = idx_yl9q + (15 + -14)\n            m -= (32 + -31)\n        if ( l <= n ) :\n            idx_srk6 = (48 + -48)\n            list_b16l = range ( m , k - (56 + -55) , - (23 + -22) )\n            while idx_srk6 < len(list_b16l):\n                i = list_b16l[idx_srk6]\n                stk.append ( a [ i ] [ l ] )\n                idx_srk6 = idx_srk6 + (37 + -36)\n            l += (4 + -3)\n    while len ( stk ) != (16 + -16) :\n        print ( str ( stk [ - (1 + 0) ] ) , end = \" \" )\n        stk.pop ( )", "id": "ConstantUnfoldding_sample_from_PRINT_MATRIX_ANTISPIRAL_FORM_to_284", "old_id": "PRINT_MATRIX_ANTISPIRAL_FORM"}
{"code": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    idx_vn4d = (68 + -68)\n    list_wpqo = range ( n )\n    while idx_vn4d < len(list_wpqo):\n        i = list_wpqo[idx_vn4d]\n        x = a [ i ]\n        d = min ( (77 + -76) + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n        idx_vn4d = idx_vn4d + (75 + -74)\n    ans = sys.maxsize\n    idx_n2lu = (28 + -28)\n    list_rw6m = range ( n )\n    while idx_n2lu < len(list_rw6m):\n        i = list_rw6m[idx_n2lu]\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n        idx_n2lu = idx_n2lu + (17 + -16)\n    return ans", "id": "ConstantUnfoldding_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_285", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - (14 + -13) ] * n\n    idx_l2nm = (71 + -71)\n    list_vl3t = range ( n )\n    while idx_l2nm < len(list_vl3t):\n        i = list_vl3t[idx_l2nm]\n        bestIdx = - (58 + -57)\n        idx_2qm0 = (25 + -25)\n        list_5b30 = range ( m )\n        while idx_2qm0 < len(list_5b30):\n            j = list_5b30[idx_2qm0]\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - (29 + -28) :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n            idx_2qm0 = idx_2qm0 + (33 + -32)\n        if bestIdx != - (98 + -97) :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n        idx_l2nm = idx_l2nm + (84 + -83)\n    print ( \"Process No.Process Size     Block no.\" )\n    idx_x1on = (20 + -20)\n    list_dfmk = range ( n )\n    while idx_x1on < len(list_dfmk):\n        i = list_dfmk[idx_x1on]\n        print ( i + (93 + -92) , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - (6 + -5) :\n            print ( allocation [ i ] + (8 + -7) )\n        else :\n            print ( \"Not Allocated\" )\n        idx_x1on = idx_x1on + (98 + -97)", "id": "ConstantUnfoldding_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_286", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def binaryToDecimal ( n ) :\n    num = n\n    dec_value = (81 + -81)\n    base1 = (32 + -31)\n    len1 = len ( num )\n    idx_cs78 = (26 + -26)\n    list_a3x7 = range ( len1 - (51 + -50) , - (86 + -85) , - (98 + -97) )\n    while idx_cs78 < len(list_a3x7):\n        i = list_a3x7[idx_cs78]\n        if ( num [ i ] == '1' ) :\n            dec_value += base1\n        base1 = base1 * (52 + -50)\n        idx_cs78 = idx_cs78 + (80 + -79)\n    return dec_value", "id": "ConstantUnfoldding_sample_from_PROGRAM_BINARY_DECIMAL_CONVERSION_1_to_287", "old_id": "PROGRAM_BINARY_DECIMAL_CONVERSION_1"}
{"code": "def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = (62 + -62)\n    index = (83 + -83)\n    idx_fk13 = (46 + -46)\n    list_jho7 = word_list\n    while idx_fk13 < len(list_jho7):\n        i = list_jho7[idx_fk13]\n        if i == word :\n            word_list [ index ] = stars\n        index += (32 + -31)\n        idx_fk13 = idx_fk13 + (12 + -11)\n    result = ' '.join ( word_list )\n    return result", "id": "ConstantUnfoldding_sample_from_PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE_to_288", "old_id": "PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE"}
{"code": "def arraySortedOrNot ( arr , n ) :\n    if ( n == (6 + -6) or n == (61 + -60) ) :\n        return True\n    idx_td1u = (13 + -13)\n    list_gvb8 = range ( (52 + -51) , n )\n    while idx_td1u < len(list_gvb8):\n        i = list_gvb8[idx_td1u]\n        if ( arr [ i - (93 + -92) ] > arr [ i ] ) :\n            return False\n        idx_td1u = idx_td1u + (72 + -71)\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1_to_289", "old_id": "PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1"}
{"code": "def isNumber ( s ) :\n    idx_lxui = (93 + -93)\n    list_7qjy = range ( len ( s ) )\n    while idx_lxui < len(list_7qjy):\n        i = list_7qjy[idx_lxui]\n        if s [ i ].isdigit ( ) != True :\n            return False\n        idx_lxui = idx_lxui + (27 + -26)\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_CHECK_INPUT_INTEGER_STRING_to_290", "old_id": "PROGRAM_CHECK_INPUT_INTEGER_STRING"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != (54 + -44) :\n        return False\n    _sum = (41 + -41)\n    idx_zlr4 = (68 + -68)\n    list_i95z = range ( (12 + -3) )\n    while idx_zlr4 < len(list_i95z):\n        i = list_i95z[idx_zlr4]\n        if (64 + -64) <= int ( isbn [ i ] ) <= (93 + -84) :\n            _sum += int ( isbn [ i ] ) * ( (82 + -72) - i )\n        else :\n            return False\n        idx_zlr4 = idx_zlr4 + (56 + -55)\n    if ( isbn [ (59 + -50) ] != 'X' and (2 + -2) <= int ( isbn [ (9 + 0) ] ) <= (33 + -24) ) :\n        return False\n    _sum += (56 + -46) if isbn [ (20 + -11) ] == 'X' else int ( isbn [ (74 + -65) ] )\n    return ( _sum % (4 + 7) == (42 + -42) )", "id": "ConstantUnfoldding_sample_from_PROGRAM_CHECK_ISBN_to_291", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def count ( s , c ) :\n    res = (25 + -25)\n    idx_ejbg = (50 + -50)\n    list_yvjx = range ( len ( s ) )\n    while idx_ejbg < len(list_yvjx):\n        i = list_yvjx[idx_ejbg]\n        if ( s [ i ] == c ) :\n            res = res + (23 + -22)\n        idx_ejbg = idx_ejbg + (20 + -19)\n    return res", "id": "ConstantUnfoldding_sample_from_PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING_to_292", "old_id": "PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING"}
{"code": "def remainder ( str ) :\n    ln = len ( str )\n    rem = (54 + -54)\n    idx_mazd = (60 + -60)\n    list_7ors = range ( (64 + -64) , ln )\n    while idx_mazd < len(list_7ors):\n        i = list_7ors[idx_mazd]\n        num = rem * (89 + -79) + ( int ) ( str [ i ] )\n        rem = num % (2 + 9)\n        idx_mazd = idx_mazd + (27 + -26)\n    return rem", "id": "ConstantUnfoldding_sample_from_PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11_to_293", "old_id": "PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11"}
{"code": "def findMinimumAngle ( arr , n ) :\n    l = (77 + -77)\n    _sum = (47 + -47)\n    ans = (88 + 272)\n    idx_9gke = (44 + -44)\n    list_3ejt = range ( n )\n    while idx_9gke < len(list_3ejt):\n        i = list_3ejt[idx_9gke]\n        _sum += arr [ i ]\n        while _sum >= (61 + 119) :\n            ans = min ( ans , (4 + -2) * abs ( (10 + 170) - _sum ) )\n            _sum -= arr [ l ]\n            l += (26 + -25)\n        ans = min ( ans , (30 + -28) * abs ( (12 + 168) - _sum ) )\n        idx_9gke = idx_9gke + (93 + -92)\n    return ans", "id": "ConstantUnfoldding_sample_from_PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE_to_294", "old_id": "PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCLE"}
{"code": "def isIdentity ( mat , N ) :\n    idx_bu6l = (18 + -18)\n    list_wjb7 = range ( N )\n    while idx_bu6l < len(list_wjb7):\n        row = list_wjb7[idx_bu6l]\n        idx_8a6g = (30 + -30)\n        list_8hgj = range ( N )\n        while idx_8a6g < len(list_8hgj):\n            col = list_8hgj[idx_8a6g]\n            if ( row == col and mat [ row ] [ col ] != (31 + -30) ) :\n                return False\n            elif ( row != col and mat [ row ] [ col ] != (66 + -66) ) :\n                return False\n            idx_8a6g = idx_8a6g + (74 + -73)\n        idx_bu6l = idx_bu6l + (67 + -66)\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_295", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def recursiveReverse ( str ) :\n    stack = [ ]\n    idx_kvwo = (45 + -45)\n    list_k6hq = range ( len ( str ) )\n    while idx_kvwo < len(list_k6hq):\n        i = list_k6hq[idx_kvwo]\n        stack.append ( str [ i ] )\n        idx_kvwo = idx_kvwo + (46 + -45)\n    idx_kqd9 = (14 + -14)\n    list_7ga5 = range ( len ( str ) )\n    while idx_kqd9 < len(list_7ga5):\n        i = list_7ga5[idx_kqd9]\n        str [ i ] = stack.pop ( )\n        idx_kqd9 = idx_kqd9 + (17 + -16)", "id": "ConstantUnfoldding_sample_from_PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_to_296", "old_id": "PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE"}
{"code": "def isSymmetric ( mat , N ) :\n    idx_mwe3 = (19 + -19)\n    list_ksyz = range ( N )\n    while idx_mwe3 < len(list_ksyz):\n        i = list_ksyz[idx_mwe3]\n        idx_svxr = (61 + -61)\n        list_h9ru = range ( N )\n        while idx_svxr < len(list_h9ru):\n            j = list_h9ru[idx_svxr]\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :\n                return False\n            idx_svxr = idx_svxr + (66 + -65)\n        idx_mwe3 = idx_mwe3 + (77 + -76)\n    return True", "id": "ConstantUnfoldding_sample_from_PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC_to_297", "old_id": "PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - (62 + -61) ] * n\n    idx_o3a2 = (31 + -31)\n    list_qn43 = range ( n )\n    while idx_o3a2 < len(list_qn43):\n        i = list_qn43[idx_o3a2]\n        wstIdx = - (99 + -98)\n        idx_0zr8 = (60 + -60)\n        list_b4te = range ( m )\n        while idx_0zr8 < len(list_b4te):\n            j = list_b4te[idx_0zr8]\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - (21 + -20) :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n            idx_0zr8 = idx_0zr8 + (21 + -20)\n        if wstIdx != - (17 + -16) :\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n        idx_o3a2 = idx_o3a2 + (17 + -16)\n    print ( \"Process No.Process Size Block no.\" )\n    idx_n2rp = (7 + -7)\n    list_srdc = range ( n )\n    while idx_n2rp < len(list_srdc):\n        i = list_srdc[idx_n2rp]\n        print ( i + (31 + -30) , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - (95 + -94) :\n            print ( allocation [ i ] + (75 + -74) )\n        else :\n            print ( \"Not Allocated\" )\n        idx_n2rp = idx_n2rp + (5 + -4)", "id": "ConstantUnfoldding_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_298", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def countInRange ( arr , n , x , y ) :\n    count = (47 + -47) ;\n    idx_s8ar = (22 + -22)\n    list_3wv1 = range ( n )\n    while idx_s8ar < len(list_3wv1):\n        i = list_3wv1[idx_s8ar]\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += (10 + -9)\n        idx_s8ar = idx_s8ar + (31 + -30)\n    return count", "id": "ConstantUnfoldding_sample_from_QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE_to_299", "old_id": "QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE"}
{"code": "def allCharactersSame ( s ) :\n    n = len ( s )\n    idx_jk5g = (8 + -8)\n    list_lrae = range ( (19 + -18) , n )\n    while idx_jk5g < len(list_lrae):\n        i = list_lrae[idx_jk5g]\n        if s [ i ] != s [ (29 + -29) ] :\n            return False\n        idx_jk5g = idx_jk5g + (61 + -60)\n    return True", "id": "ConstantUnfoldding_sample_from_QUICK_WAY_CHECK_CHARACTERS_STRING_to_300", "old_id": "QUICK_WAY_CHECK_CHARACTERS_STRING"}
{"code": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = (66 + -66) , n - (89 + -88)\n    flag = True\n    idx_hfjx = (55 + -55)\n    list_trzu = range ( n )\n    while idx_hfjx < len(list_trzu):\n        i = list_trzu[idx_hfjx]\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= (78 + -77)\n        else :\n            temp [ i ] = arr [ small ]\n            small += (30 + -29)\n        flag = bool ( (9 + -8) - flag )\n        idx_hfjx = idx_hfjx + (9 + -8)\n    idx_ucno = (20 + -20)\n    list_egp0 = range ( n )\n    while idx_ucno < len(list_egp0):\n        i = list_egp0[idx_ucno]\n        arr [ i ] = temp [ i ]\n        idx_ucno = idx_ucno + (49 + -48)\n    return arr", "id": "ConstantUnfoldding_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_301", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = n - (63 + -62)\n    min_idx = (67 + -67)\n    max_elem = arr [ n - (12 + -11) ] + (71 + -70)\n    idx_hpim = (83 + -83)\n    list_wie7 = range ( (78 + -78) , n )\n    while idx_hpim < len(list_wie7):\n        i = list_wie7[idx_hpim]\n        if i % (68 + -66) == (14 + -14) :\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= (46 + -45)\n        else :\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += (7 + -6)\n        idx_hpim = idx_hpim + (24 + -23)\n    idx_8gva = (65 + -65)\n    list_5qzw = range ( (19 + -19) , n )\n    while idx_8gva < len(list_5qzw):\n        i = list_5qzw[idx_8gva]\n        arr [ i ] = int ( arr [ i ] / max_elem )\n        idx_8gva = idx_8gva + (47 + -46)", "id": "ConstantUnfoldding_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_302", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def rearrange ( arr , n ) :\n    i = - (62 + -61)\n    idx_lf5h = (30 + -30)\n    list_nmq8 = range ( n )\n    while idx_lf5h < len(list_nmq8):\n        j = list_nmq8[idx_lf5h]\n        if ( arr [ j ] < (52 + -52) ) :\n            i += (69 + -68)\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        idx_lf5h = idx_lf5h + (94 + -93)\n    pos , neg = i + (70 + -69) , (82 + -82)\n    while ( pos < n and neg < pos and arr [ neg ] < (81 + -81) ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += (55 + -54)\n        neg += (10 + -8)", "id": "ConstantUnfoldding_sample_from_REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH_to_303", "old_id": "REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH"}
{"code": "def breakSum ( n ) :\n    dp = [ (18 + -18) ] * ( n + (58 + -57) )\n    dp [ (65 + -65) ] = (25 + -25)\n    dp [ (11 + -10) ] = (30 + -29)\n    idx_rdho = (70 + -70)\n    list_bjzs = range ( (31 + -29) , n + (57 + -56) )\n    while idx_rdho < len(list_bjzs):\n        i = list_bjzs[idx_rdho]\n        dp [ i ] = max ( dp [ int ( i / (60 + -58) ) ] + dp [ int ( i / (39 + -36) ) ] + dp [ int ( i / (86 + -82) ) ] , i )\n        idx_rdho = idx_rdho + (1 + 0)\n    return dp [ n ]", "id": "ConstantUnfoldding_sample_from_RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1_to_304", "old_id": "RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1"}
{"code": "def remainderWith7 ( num ) :\n    series = [ (16 + -15) , (25 + -22) , (81 + -79) , - (1 + 0) , - (18 + -15) , - (88 + -86) ]\n    series_index = (65 + -65)\n    result = (39 + -39)\n    idx_kml1 = (90 + -90)\n    list_sbu5 = range ( ( len ( num ) - (42 + -41) ) , - (90 + -89) , - (41 + -40) )\n    while idx_kml1 < len(list_sbu5):\n        i = list_sbu5[idx_kml1]\n        digit = ord ( num [ i ] ) - (20 + 28)\n        result += digit * series [ series_index ]\n        series_index = ( series_index + (85 + -84) ) % (4 + 2)\n        result %= (81 + -74)\n        idx_kml1 = idx_kml1 + (15 + -14)\n    if ( result < (34 + -34) ) :\n        result = ( result + (46 + -39) ) % (38 + -31)\n    return result", "id": "ConstantUnfoldding_sample_from_REMAINDER_7_LARGE_NUMBERS_to_305", "old_id": "REMAINDER_7_LARGE_NUMBERS"}
{"code": "def removeDuplicates ( S ) :\n    n = len ( S )\n    if ( n < (17 + -15) ) :\n        return\n    j = (52 + -52)\n    idx_whcd = (60 + -60)\n    list_j43i = range ( (65 + -64) , n )\n    while idx_whcd < len(list_j43i):\n        i = list_j43i[idx_whcd]\n        if ( S [ j ] != S [ i ] ) :\n            j += (42 + -41)\n            S [ j ] = S [ i ]\n        idx_whcd = idx_whcd + (19 + -18)\n    j += (21 + -20)\n    S = S [ : j ]", "id": "ConstantUnfoldding_sample_from_REMOVE_CONSECUTIVE_DUPLICATES_STRING_to_306", "old_id": "REMOVE_CONSECUTIVE_DUPLICATES_STRING"}
{"code": "def minRemovalsDP ( arr , n ) :\n    longest_start = - (42 + -41)\n    longest_end = (25 + -25)\n    idx_6rq9 = (26 + -26)\n    list_dri9 = range ( n )\n    while idx_6rq9 < len(list_dri9):\n        start = list_dri9[idx_6rq9]\n        min = sys.maxsize\n        max = - sys.maxsize\n        idx_vuxf = (22 + -22)\n        list_jxyf = range ( start , n )\n        while idx_vuxf < len(list_jxyf):\n            end = list_jxyf[idx_vuxf]\n            val = arr [ end ]\n            if ( val < min ) :\n                min = val\n            if ( val > max ) :\n                max = val\n            if ( (54 + -52) * min <= max ) :\n                break\n            if ( end - start > longest_end - longest_start or longest_start == - (36 + -35) ) :\n                longest_start = start\n                longest_end = end\n            idx_vuxf = idx_vuxf + (44 + -43)\n        idx_6rq9 = idx_6rq9 + (77 + -76)\n    if ( longest_start == - (30 + -29) ) :\n        return n\n    return ( n - ( longest_end - longest_start + (91 + -90) ) )", "id": "ConstantUnfoldding_sample_from_REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX_to_307", "old_id": "REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    idx_o329 = (100 + -100)\n    list_fjvi = range ( l )\n    while idx_o329 < len(list_fjvi):\n        i = list_fjvi[idx_o329]\n        if ( s [ i ] == c1 ) :\n            s = s [ (74 + -74) : i ] + c2 + s [ i + (100 + -99) : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ (91 + -91) : i ] + c1 + s [ i + (43 + -42) : ]\n        idx_o329 = idx_o329 + (75 + -74)\n    return s", "id": "ConstantUnfoldding_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_308", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def countCommon ( mat , n ) :\n    res = (4 + -4)\n    idx_0ypb = (42 + -42)\n    list_fpq5 = range ( n )\n    while idx_0ypb < len(list_fpq5):\n        i = list_fpq5[idx_0ypb]\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - (46 + -45) ] :\n            res = res + (82 + -81)\n        idx_0ypb = idx_0ypb + (90 + -89)\n    return res", "id": "ConstantUnfoldding_sample_from_ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX_to_309", "old_id": "ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX"}
{"code": "def arrayEvenAndOdd ( arr , n ) :\n    i = - (78 + -77)\n    j = (90 + -90)\n    while ( j != n ) :\n        if ( arr [ j ] % (78 + -76) == (61 + -61) ) :\n            i = i + (41 + -40)\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + (96 + -95)\n    idx_gbaq = (97 + -97)\n    list_p1vc = arr\n    while idx_gbaq < len(list_p1vc):\n        i = list_p1vc[idx_gbaq]\n        print ( str ( i ) + \" \" , end = '' )\n        idx_gbaq = idx_gbaq + (74 + -73)", "id": "ConstantUnfoldding_sample_from_SEGREGATE_EVEN_ODD_NUMBERS_SET_3_to_310", "old_id": "SEGREGATE_EVEN_ODD_NUMBERS_SET_3"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = [ [ (91 + -91) for i in range ( n + (45 + -44) ) ] for i in range ( m + (4 + -3) ) ]\n    idx_9xg5 = (68 + -68)\n    list_imdg = range ( m + (99 + -98) )\n    while idx_9xg5 < len(list_imdg):\n        i = list_imdg[idx_9xg5]\n        idx_1e75 = (1 + -1)\n        list_yhxm = range ( n + (61 + -60) )\n        while idx_1e75 < len(list_yhxm):\n            j = list_yhxm[idx_1e75]\n            if i == (31 + -31) or j == (94 + -94) :\n                T [ i ] [ j ] = (57 + -57)\n            elif i < j :\n                T [ i ] [ j ] = (89 + -89)\n            elif j == (76 + -75) :\n                T [ i ] [ j ] = i\n            else :\n                T [ i ] [ j ] = T [ i - (78 + -77) ] [ j ] + T [ i // (57 + -55) ] [ j - (52 + -51) ]\n            idx_1e75 = idx_1e75 + (30 + -29)\n        idx_9xg5 = idx_9xg5 + (46 + -45)\n    return T [ m ] [ n ]", "id": "ConstantUnfoldding_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_311", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def randomize ( arr , n ) :\n    idx_blad = (77 + -77)\n    list_svb3 = range ( n - (25 + -24) , (47 + -47) , - (72 + -71) )\n    while idx_blad < len(list_svb3):\n        i = list_svb3[idx_blad]\n        j = random.randint ( (84 + -84) , i + (93 + -92) )\n        arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        idx_blad = idx_blad + (76 + -75)\n    return arr", "id": "ConstantUnfoldding_sample_from_SHUFFLE_A_GIVEN_ARRAY_to_312", "old_id": "SHUFFLE_A_GIVEN_ARRAY"}
{"code": "def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - (98 + -97)\n    max_ending_here = (88 + -88)\n    start = (19 + -19)\n    end = (74 + -74)\n    s = (45 + -45)\n    idx_pkd1 = (28 + -28)\n    list_0d9r = range ( (81 + -81) , size )\n    while idx_pkd1 < len(list_0d9r):\n        i = list_0d9r[idx_pkd1]\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < (36 + -36) :\n            max_ending_here = (46 + -46)\n            s = i + (75 + -74)\n        idx_pkd1 = idx_pkd1 + (44 + -43)\n    return ( end - start + (46 + -45) )", "id": "ConstantUnfoldding_sample_from_SIZE_SUBARRAY_MAXIMUM_SUM_to_313", "old_id": "SIZE_SUBARRAY_MAXIMUM_SUM"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    idx_u0mb = (61 + -61)\n    list_9c7t = range ( n )\n    while idx_u0mb < len(list_9c7t):\n        i = list_9c7t[idx_u0mb]\n        arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n        idx_u0mb = idx_u0mb + (8 + -7)\n    index = - ( sys.maxsize - (42 + -41) )\n    maximum = - ( sys.maxsize - (54 + -53) )\n    idx_8d2x = (97 + -97)\n    list_y0zg = range ( n )\n    while idx_8d2x < len(list_y0zg):\n        i = list_y0zg[idx_8d2x]\n        if maximum < arr [ i ] :\n            index = i\n            maximum = arr [ i ]\n        idx_8d2x = idx_8d2x + (52 + -51)\n    i = (60 + -60)\n    j = n - (95 + -94)\n    new_arr = [ (29 + -29) ] * n\n    k = (30 + -30)\n    while i < index and j > index :\n        if arr [ i ] < arr [ j ] :\n            new_arr [ k ] = arr [ i ]\n            k += (86 + -85)\n            i += (55 + -54)\n        else :\n            new_arr [ k ] = arr [ j ]\n            k += (12 + -11)\n            j -= (91 + -90)\n    while i < index :\n        new_arr [ k ] = arr [ i ]\n        k += (27 + -26)\n        i += (39 + -38)\n    while j > index :\n        new_arr [ k ] = arr [ j ]\n        k += (42 + -41)\n        j -= (54 + -53)\n        new_arr [ n - (43 + -42) ] = maximum\n    idx_aiy6 = (35 + -35)\n    list_bmx3 = range ( n )\n    while idx_aiy6 < len(list_bmx3):\n        i = list_bmx3[idx_aiy6]\n        arr [ i ] = new_arr [ i ]\n        idx_aiy6 = idx_aiy6 + (4 + -3)", "id": "ConstantUnfoldding_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_314", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def sortit ( arr , n ) :\n    idx_mgtc = (62 + -62)\n    list_ygub = range ( n )\n    while idx_mgtc < len(list_ygub):\n        i = list_ygub[idx_mgtc]\n        arr [ i ] = i + (75 + -74)\n        idx_mgtc = idx_mgtc + (99 + -98)", "id": "ConstantUnfoldding_sample_from_SORT_ARRAY_CONTAIN_1_N_VALUES_to_315", "old_id": "SORT_ARRAY_CONTAIN_1_N_VALUES"}
{"code": "def sortInWave ( arr , n ) :\n    idx_04fk = (65 + -65)\n    list_3ja0 = range ( (12 + -12) , n , (46 + -44) )\n    while idx_04fk < len(list_3ja0):\n        i = list_3ja0[idx_04fk]\n        if ( i > (64 + -64) and arr [ i ] < arr [ i - (24 + -23) ] ) :\n            arr [ i ] , arr [ i - (22 + -21) ] = arr [ i - (57 + -56) ] , arr [ i ]\n        if ( i < n - (35 + -34) and arr [ i ] < arr [ i + (82 + -81) ] ) :\n            arr [ i ] , arr [ i + (42 + -41) ] = arr [ i + (21 + -20) ] , arr [ i ]\n        idx_04fk = idx_04fk + (11 + -10)", "id": "ConstantUnfoldding_sample_from_SORT_ARRAY_WAVE_FORM_2_1_to_316", "old_id": "SORT_ARRAY_WAVE_FORM_2_1"}
{"code": "def twoWaySort ( arr , n ) :\n    idx_pvkz = (37 + -37)\n    list_y95s = range ( (55 + -55) , n )\n    while idx_pvkz < len(list_y95s):\n        i = list_y95s[idx_pvkz]\n        if ( arr [ i ] & (14 + -13) ) :\n            arr [ i ] *= - (74 + -73)\n        idx_pvkz = idx_pvkz + (47 + -46)\n    arr.sort ( )\n    idx_e5sh = (51 + -51)\n    list_tipv = range ( (43 + -43) , n )\n    while idx_e5sh < len(list_tipv):\n        i = list_tipv[idx_e5sh]\n        if ( arr [ i ] & (87 + -86) ) :\n            arr [ i ] *= - (21 + -20)\n        idx_e5sh = idx_e5sh + (45 + -44)", "id": "ConstantUnfoldding_sample_from_SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1_to_317", "old_id": "SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    idx_o4vy = (78 + -78)\n    list_y2op = range ( n )\n    while idx_o4vy < len(list_y2op):\n        i = list_y2op[idx_o4vy]\n        if ( ( i % (74 + -72) ) == (2 + -2) ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n        idx_o4vy = idx_o4vy + (7 + -6)\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - (90 + -89) ]\n    i = (92 + -92)\n    idx_i09x = (89 + -89)\n    list_46mf = range ( len ( evenArr ) )\n    while idx_i09x < len(list_46mf):\n        j = list_46mf[idx_i09x]\n        arr [ i ] = evenArr [ j ]\n        i += (46 + -45)\n        idx_i09x = idx_i09x + (76 + -75)\n    idx_goc3 = (91 + -91)\n    list_alnd = range ( len ( oddArr ) )\n    while idx_goc3 < len(list_alnd):\n        j = list_alnd[idx_goc3]\n        arr [ i ] = oddArr [ j ]\n        i += (40 + -39)\n        idx_goc3 = idx_goc3 + (98 + -97)", "id": "ConstantUnfoldding_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_318", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def KnapSack ( val , wt , n , W ) :\n    dp = [ (94 + -94) ] * ( W + (78 + -77) )\n    idx_dg1b = (40 + -40)\n    list_6wg8 = range ( n )\n    while idx_dg1b < len(list_6wg8):\n        i = list_6wg8[idx_dg1b]\n        idx_bnxv = (15 + -15)\n        list_v8sm = range ( W , -(36 + -35) , - (53 + -52) )\n        while idx_bnxv < len(list_v8sm):\n            j = list_v8sm[idx_bnxv]\n            if j - wt [ i ] < W + (61 + -60) and j - wt [ i ] >= (89 + -89):\n                dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] )\n            idx_bnxv = idx_bnxv + (12 + -11)\n        idx_dg1b = idx_dg1b + (73 + -72)\n    return dp [ W ]", "id": "ConstantUnfoldding_sample_from_SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1_to_319", "old_id": "SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1"}
{"code": "def splitArr ( arr , n , k ) :\n    idx_ldio = (55 + -55)\n    list_neqg = range ( (100 + -100) , k )\n    while idx_ldio < len(list_neqg):\n        i = list_neqg[idx_ldio]\n        x = arr [ (29 + -29) ]\n        idx_042h = (36 + -36)\n        list_myf9 = range ( (87 + -87) , n - (94 + -93) )\n        while idx_042h < len(list_myf9):\n            j = list_myf9[idx_042h]\n            arr [ j ] = arr [ j + (62 + -61) ]\n            idx_042h = idx_042h + (14 + -13)\n        arr [ n - (31 + -30) ] = x\n        idx_ldio = idx_ldio + (2 + -1)", "id": "ConstantUnfoldding_sample_from_SPLIT_ARRAY_ADD_FIRST_PART_END_to_320", "old_id": "SPLIT_ARRAY_ADD_FIRST_PART_END"}
{"code": "def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    idx_xzhc = (9 + -9)\n    list_lzua = range ( (96 + -96) , row )\n    while idx_xzhc < len(list_lzua):\n        i = list_lzua[idx_xzhc]\n        idx_ns2q = (24 + -24)\n        list_g0ms = range ( (21 + -21) , column )\n        while idx_ns2q < len(list_g0ms):\n            j = list_g0ms[idx_ns2q]\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_ns2q = idx_ns2q + (30 + -29)\n        idx_xzhc = idx_xzhc + (3 + -2)\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    idx_oqlu = (93 + -93)\n    list_j4w5 = range ( (65 + -65) , row )\n    while idx_oqlu < len(list_j4w5):\n        i = list_j4w5[idx_oqlu]\n        idx_8i7x = (99 + -99)\n        list_plrt = range ( (17 + -17) , column )\n        while idx_8i7x < len(list_plrt):\n            j = list_plrt[idx_8i7x]\n            if ( i + j == column - (47 + -46) ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n            idx_8i7x = idx_8i7x + (12 + -11)\n        idx_oqlu = idx_oqlu + (31 + -30)", "id": "ConstantUnfoldding_sample_from_SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_to_321", "old_id": "SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS"}
{"code": "def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    idx_j29v = (87 + -87)\n    list_6b4z = range ( len ( str ) )\n    while idx_j29v < len(list_6b4z):\n        i = list_6b4z[idx_j29v]\n        if ( str [ i ] == ' ' ) :\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n        idx_j29v = idx_j29v + (85 + -84)\n    return result", "id": "ConstantUnfoldding_sample_from_STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES_to_322", "old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"}
{"code": "def sumoflength ( arr , n ) :\n    s = [ ]\n    j = (84 + -84)\n    ans = (18 + -18)\n    idx_fnad = (47 + -47)\n    list_ka71 = range ( n )\n    while idx_fnad < len(list_ka71):\n        i = list_ka71[idx_fnad]\n        while ( j < n and ( arr [ j ] not in s ) ) :\n            s.append ( arr [ j ] )\n            j += (78 + -77)\n        ans += ( ( j - i ) * ( j - i + (73 + -72) ) ) // (81 + -79)\n        s.remove ( arr [ i ] )\n        idx_fnad = idx_fnad + (76 + -75)\n    return ans", "id": "ConstantUnfoldding_sample_from_SUBARRAYS_DISTINCT_ELEMENTS_to_323", "old_id": "SUBARRAYS_DISTINCT_ELEMENTS"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = [ [ False for j in range ( sum + (12 + -11) ) ] for i in range ( (90 + -87) ) ]\n    idx_u7k5 = (3 + -3)\n    list_qdlx = range ( n + (69 + -68) )\n    while idx_u7k5 < len(list_qdlx):\n        i = list_qdlx[idx_u7k5]\n        idx_91qd = (42 + -42)\n        list_gipl = range ( sum + (69 + -68) )\n        while idx_91qd < len(list_gipl):\n            j = list_gipl[idx_91qd]\n            if ( j == (86 + -86) ) :\n                subset [ i % (78 + -76) ] [ j ] = True\n            elif ( i == (92 + -92) ) :\n                subset [ i % (46 + -44) ] [ j ] = False\n            elif ( arr [ i - (85 + -84) ] <= j ) :\n                subset [ i % (47 + -45) ] [ j ] = subset [ ( i + (33 + -32) ) % (61 + -59) ] [ j - arr [ i - (70 + -69) ] ] or subset [ ( i + (39 + -38) ) % (10 + -8) ] [ j ]\n            else :\n                subset [ i % (28 + -26) ] [ j ] = subset [ ( i + (75 + -74) ) % (62 + -60) ] [ j ]\n            idx_91qd = idx_91qd + (5 + -4)\n        idx_u7k5 = idx_u7k5 + (40 + -39)\n    return subset [ n % (17 + -15) ] [ sum ]", "id": "ConstantUnfoldding_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_324", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def binomialCoeffSum ( n ) :\n    C = [ [ (32 + -32) ] * ( n + (81 + -79) ) for i in range ( (66 + -66) , n + (54 + -52) ) ]\n    idx_in5r = (12 + -12)\n    list_s3ne = range ( (32 + -32) , n + (40 + -39) )\n    while idx_in5r < len(list_s3ne):\n        i = list_s3ne[idx_in5r]\n        idx_exs5 = (71 + -71)\n        list_vjd7 = range ( (56 + -56) , min ( i , n ) + (55 + -54) )\n        while idx_exs5 < len(list_vjd7):\n            j = list_vjd7[idx_exs5]\n            if ( j == (40 + -40) or j == i ) :\n                C [ i ] [ j ] = (56 + -55)\n            else :\n                C [ i ] [ j ] = C [ i - (16 + -15) ] [ j - (30 + -29) ] + C [ i - (55 + -54) ] [ j ]\n            idx_exs5 = idx_exs5 + (6 + -5)\n        idx_in5r = idx_in5r + (69 + -68)\n    sum = (97 + -97)\n    idx_lxtj = (25 + -25)\n    list_sc7h = range ( (28 + -28) , n + (66 + -65) )\n    while idx_lxtj < len(list_sc7h):\n        i = list_sc7h[idx_lxtj]\n        sum += C [ n ] [ i ]\n        idx_lxtj = idx_lxtj + (66 + -65)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_325", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def divisorSum ( n ) :\n    sum = (62 + -62)\n    idx_2w3y = (80 + -80)\n    list_naqz = range ( (64 + -63) , n + (100 + -99) )\n    while idx_2w3y < len(list_naqz):\n        i = list_naqz[idx_2w3y]\n        sum += int ( n / i ) * i\n        idx_2w3y = idx_2w3y + (63 + -62)\n    return int ( sum )", "id": "ConstantUnfoldding_sample_from_SUM_DIVISORS_1_N_1_to_326", "old_id": "SUM_DIVISORS_1_N_1"}
{"code": "def divSum ( n ) :\n    result = (52 + -52)\n    idx_dsqc = (15 + -15)\n    list_iym3 = range ( (37 + -35) , ( int ) ( math.sqrt ( n ) ) + (65 + -64) )\n    while idx_dsqc < len(list_iym3):\n        i = list_iym3[idx_dsqc]\n        if ( n % i == (51 + -51) ) :\n            if ( i == ( n / i ) ) :\n                result = result + i\n            else :\n                result = result + ( i + n // i )\n        idx_dsqc = idx_dsqc + (61 + -60)\n    return ( result + n + (37 + -36) )", "id": "ConstantUnfoldding_sample_from_SUM_FACTORS_NUMBER_to_327", "old_id": "SUM_FACTORS_NUMBER"}
{"code": "def calculateSum ( n ) :\n    if ( n <= (66 + -66) ) :\n        return (69 + -69)\n    fibo = [ (77 + -77) ] * ( n + (47 + -46) )\n    fibo [ (85 + -84) ] = (43 + -42)\n    sm = fibo [ (13 + -13) ] + fibo [ (61 + -60) ]\n    idx_9oqi = (54 + -54)\n    list_my4o = range ( (92 + -90) , n + (11 + -10) )\n    while idx_9oqi < len(list_my4o):\n        i = list_my4o[idx_9oqi]\n        fibo [ i ] = fibo [ i - (6 + -5) ] + fibo [ i - (65 + -63) ]\n        sm = sm + fibo [ i ]\n        idx_9oqi = idx_9oqi + (64 + -63)\n    return sm", "id": "ConstantUnfoldding_sample_from_SUM_FIBONACCI_NUMBERS_to_328", "old_id": "SUM_FIBONACCI_NUMBERS"}
{"code": "def distancesum ( x , y , n ) :\n    sum = (84 + -84)\n    idx_8anz = (59 + -59)\n    list_7rta = range ( n )\n    while idx_8anz < len(list_7rta):\n        i = list_7rta[idx_8anz]\n        idx_6hjc = (14 + -14)\n        list_0vca = range ( i + (31 + -30) , n )\n        while idx_6hjc < len(list_0vca):\n            j = list_0vca[idx_6hjc]\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n            idx_6hjc = idx_6hjc + (26 + -25)\n        idx_8anz = idx_8anz + (49 + -48)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_MANHATTAN_DISTANCES_PAIRS_POINTS_to_329", "old_id": "SUM_MANHATTAN_DISTANCES_PAIRS_POINTS"}
{"code": "def findSum ( n ) :\n    arr = [ [ (60 + -60) for x in range ( n ) ] for y in range ( n ) ]\n    idx_7ngc = (29 + -29)\n    list_3e8b = range ( n )\n    while idx_7ngc < len(list_3e8b):\n        i = list_3e8b[idx_7ngc]\n        idx_infg = (16 + -16)\n        list_hw27 = range ( n )\n        while idx_infg < len(list_hw27):\n            j = list_hw27[idx_infg]\n            arr [ i ] [ j ] = abs ( i - j )\n            idx_infg = idx_infg + (88 + -87)\n        idx_7ngc = idx_7ngc + (72 + -71)\n    sum = (48 + -48)\n    idx_6qo7 = (70 + -70)\n    list_tbzx = range ( n )\n    while idx_6qo7 < len(list_tbzx):\n        i = list_tbzx[idx_6qo7]\n        idx_q5t2 = (1 + -1)\n        list_al65 = range ( n )\n        while idx_q5t2 < len(list_al65):\n            j = list_al65[idx_q5t2]\n            sum += arr [ i ] [ j ]\n            idx_q5t2 = idx_q5t2 + (34 + -33)\n        idx_6qo7 = idx_6qo7 + (6 + -5)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_to_330", "old_id": "SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS"}
{"code": "def findSum ( n ) :\n    ans = (27 + -27)\n    temp = (15 + -15)\n    idx_fyxr = (57 + -57)\n    list_uwlb = range ( (86 + -85) , n + (24 + -23) )\n    while idx_fyxr < len(list_uwlb):\n        i = list_uwlb[idx_fyxr]\n        if temp < n :\n            temp = i - (61 + -60)\n            num = (58 + -57)\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += (58 + -57)\n        idx_fyxr = idx_fyxr + (30 + -29)\n    return ans", "id": "ConstantUnfoldding_sample_from_SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1_to_331", "old_id": "SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1"}
{"code": "def middlesum ( mat , n ) :\n    row_sum = (16 + -16)\n    col_sum = (50 + -50)\n    idx_p2kg = (8 + -8)\n    list_4you = range ( n )\n    while idx_p2kg < len(list_4you):\n        i = list_4you[idx_p2kg]\n        row_sum += mat [ n // (47 + -45) ] [ i ]\n        idx_p2kg = idx_p2kg + (91 + -90)\n    print ( \"Sum of middle row = \" , row_sum )\n    idx_ibvm = (83 + -83)\n    list_kh3l = range ( n )\n    while idx_ibvm < len(list_kh3l):\n        i = list_kh3l[idx_ibvm]\n        col_sum += mat [ i ] [ n // (82 + -80) ]\n        idx_ibvm = idx_ibvm + (20 + -19)\n    print ( \"Sum of middle column = \" , col_sum )", "id": "ConstantUnfoldding_sample_from_SUM_MIDDLE_ROW_COLUMN_MATRIX_to_332", "old_id": "SUM_MIDDLE_ROW_COLUMN_MATRIX"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = - (73 + -72)\n    sum = (16 + -16)\n    n = len ( tree )\n    idx_0dlu = (3 + -3)\n    list_aten = range ( n )\n    while idx_0dlu < len(list_aten):\n        i = list_aten[idx_0dlu]\n        if ( tree [ i ] == '(' ) :\n            level += (15 + -14)\n        elif ( tree [ i ] == ')' ) :\n            level -= (11 + -10)\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n        idx_0dlu = idx_0dlu + (78 + -77)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_333", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( ord ( num [ (6 + -6) ] ) - ord('0') )\n    res = sumofdigit [ (63 + -63) ]\n    idx_vxer = (74 + -74)\n    list_qbv5 = range ( (40 + -39) , n )\n    while idx_vxer < len(list_qbv5):\n        i = list_qbv5[idx_vxer]\n        numi = ord ( num [ i ] ) - ord ( '0' )\n        sumofdigit.append ( ( i + (57 + -56) ) + numi + (54 + -44) + sumofdigit [ i - (36 + -35) ] )\n        res += sumofdigit [ i ]\n        idx_vxer = idx_vxer + (28 + -27)\n    return res", "id": "ConstantUnfoldding_sample_from_SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER_to_334", "old_id": "SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER"}
{"code": "def findSum ( n ) :\n    sm = (43 + -43)\n    idx_1mol = (48 + -48)\n    list_g6wm = range ( (14 + -13) , n + (90 + -89) )\n    while idx_1mol < len(list_g6wm):\n        i = list_g6wm[idx_1mol]\n        idx_pet0 = (13 + -13)\n        list_7luc = range ( i , n + (59 + -58) )\n        while idx_pet0 < len(list_7luc):\n            j = list_7luc[idx_pet0]\n            sm = sm + i * j\n            idx_pet0 = idx_pet0 + (64 + -63)\n        idx_1mol = idx_1mol + (14 + -13)\n    return sm", "id": "ConstantUnfoldding_sample_from_SUM_PAIRWISE_PRODUCTS_to_335", "old_id": "SUM_PAIRWISE_PRODUCTS"}
{"code": "def findSum ( n ) :\n    multiTerms = n * ( n + (32 + -31) ) // (6 + -4)\n    sm = multiTerms\n    idx_mxp7 = (62 + -62)\n    list_p4nc = range ( (75 + -73) , n + (30 + -29) )\n    while idx_mxp7 < len(list_p4nc):\n        i = list_p4nc[idx_mxp7]\n        multiTerms = multiTerms - ( i - (43 + -42) )\n        sm = sm + multiTerms * i\n        idx_mxp7 = idx_mxp7 + (12 + -11)\n    return sm", "id": "ConstantUnfoldding_sample_from_SUM_PAIRWISE_PRODUCTS_1_to_336", "old_id": "SUM_PAIRWISE_PRODUCTS_1"}
{"code": "def sumOfSeries ( n ) :\n    sum = (75 + -75)\n    idx_fb0w = (47 + -47)\n    list_jmbr = range ( (92 + -91) , n + (82 + -81) )\n    while idx_fb0w < len(list_jmbr):\n        i = list_jmbr[idx_fb0w]\n        sum = sum + ( (5 + -3) * i - (35 + -34) ) * ( (63 + -61) * i - (31 + -30) )\n        idx_fb0w = idx_fb0w + (88 + -87)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_SERIES_12_32_52_2N_12_to_337", "old_id": "SUM_SERIES_12_32_52_2N_12"}
{"code": "def sumofsquare ( n ) :\n    C = [ [ (69 + -69) for i in range ( n + (40 + -39) ) ] for j in range ( n + (13 + -12) ) ]\n    idx_tc1l = (29 + -29)\n    list_msz7 = range ( (9 + -9) , n + (40 + -39) )\n    while idx_tc1l < len(list_msz7):\n        i = list_msz7[idx_tc1l]\n        idx_l9g2 = (80 + -80)\n        list_8aer = range ( (61 + -61) , min ( i , n ) + (31 + -30) )\n        while idx_l9g2 < len(list_8aer):\n            j = list_8aer[idx_l9g2]\n            if ( j == (56 + -56) or j == i ) :\n                C [ i ] [ j ] = (63 + -62)\n            else :\n                C [ i ] [ j ] = ( C [ i - (55 + -54) ] [ j - (94 + -93) ] + C [ i - (23 + -22) ] [ j ] )\n            idx_l9g2 = idx_l9g2 + (4 + -3)\n        idx_tc1l = idx_tc1l + (49 + -48)\n    sum = (9 + -9)\n    idx_bqe4 = (19 + -19)\n    list_47ri = range ( (61 + -61) , n + (46 + -45) )\n    while idx_bqe4 < len(list_47ri):\n        i = list_47ri[idx_bqe4]\n        sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n        idx_bqe4 = idx_bqe4 + (3 + -2)\n    return sum", "id": "ConstantUnfoldding_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_338", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[:: - (79 + -78)]\n    str2 = str2[:: - (57 + -56)]\n    carry = (61 + -61)\n    idx_gmlv = (83 + -83)\n    list_n2zq = range(n1)\n    while idx_gmlv < len(list_n2zq):\n        i = list_n2zq[idx_gmlv]\n        sum = ((ord(str1[i]) - (64 + -16)) + ((ord(str2[i]) - (21 + 27)) + carry))\n        if sum < (89 + -89):\n            str += chr(sum % -(18 + -8) + (64 + -16))\n        else:\n            str += chr(sum % (18 + -8) + (58 + -10))\n        carry = int(sum / (25 + -15))\n        idx_gmlv = idx_gmlv + (88 + -87)\n    idx_ohsx = (75 + -75)\n    list_fble = range(n1, n2)\n    while idx_ohsx < len(list_fble):\n        i = list_fble[idx_ohsx]\n        sum = ((ord(str2[i]) - (56 + -8)) + carry)\n        if sum < (89 + -89):\n            str += chr(sum % -(81 + -71) + (69 + -21))\n        else:\n            str += chr(sum % (68 + -58) + (81 + -33))\n        carry = (int)(sum / (51 + -41))\n        idx_ohsx = idx_ohsx + (9 + -8)\n    if (carry):\n        str += chr(carry + (69 + -21))\n    str = str[:: - (26 + -25)]\n    return str", "id": "ConstantUnfoldding_sample_from_SUM_TWO_LARGE_NUMBERS_to_339", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = (26 + -26)\n    idx_h7r4 = (42 + -42)\n    list_5a9m = range ( n )\n    while idx_h7r4 < len(list_5a9m):\n        i = list_5a9m[idx_h7r4]\n        left = (86 + -86)\n        right = (29 + -29)\n        idx_mw7a = (37 + -37)\n        list_hfub = range ( i - (88 + -87) , - (61 + -60) , - (37 + -36) )\n        while idx_mw7a < len(list_hfub):\n            j = list_hfub[idx_mw7a]\n            if ( templeHeight [ j ] < templeHeight [ j + (68 + -67) ] ) :\n                left += (39 + -38)\n            else :\n                break\n            idx_mw7a = idx_mw7a + (56 + -55)\n        idx_jcz5 = (55 + -55)\n        list_ysr5 = range ( i + (37 + -36) , n )\n        while idx_jcz5 < len(list_ysr5):\n            j = list_ysr5[idx_jcz5]\n            if ( templeHeight [ j ] < templeHeight [ j - (41 + -40) ] ) :\n                right += (92 + -91)\n            else :\n                break\n            idx_jcz5 = idx_jcz5 + (81 + -80)\n        sum += max ( right , left ) + (61 + -60)\n        idx_h7r4 = idx_h7r4 + (59 + -58)\n    return sum", "id": "ConstantUnfoldding_sample_from_TEMPLE_OFFERINGS_to_340", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < (89 + -86) ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ (81 + -81) ]\n    idx_hi0v = (77 + -77)\n    list_jl5o = range ( (92 + -91) , arr_size )\n    while idx_hi0v < len(list_jl5o):\n        i = list_jl5o[idx_hi0v]\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n        idx_hi0v = idx_hi0v + (55 + -54)\n    second = - sys.maxsize\n    idx_1k93 = (49 + -49)\n    list_mt21 = range ( (59 + -59) , arr_size )\n    while idx_1k93 < len(list_mt21):\n        i = list_mt21[idx_1k93]\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n        idx_1k93 = idx_1k93 + (94 + -93)\n    third = - sys.maxsize\n    idx_ki38 = (100 + -100)\n    list_pbyn = range ( (26 + -26) , arr_size )\n    while idx_ki38 < len(list_pbyn):\n        i = list_pbyn[idx_ki38]\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n        idx_ki38 = idx_ki38 + (25 + -24)\n    print ( \"The Third Largest\" , \"element is\" , third )", "id": "ConstantUnfoldding_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_to_341", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < (24 + -21) ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ (28 + -28) ]\n    second = - sys.maxsize\n    third = - sys.maxsize\n    idx_l8mr = (45 + -45)\n    list_ns30 = range ( (27 + -26) , arr_size )\n    while idx_l8mr < len(list_ns30):\n        i = list_ns30[idx_l8mr]\n        if ( arr [ i ] > first ) :\n            third = second\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            third = second\n            second = arr [ i ]\n        elif ( arr [ i ] > third ) :\n            third = arr [ i ]\n        idx_l8mr = idx_l8mr + (58 + -57)\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "ConstantUnfoldding_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_342", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def countWays ( n ) :\n    A = [ (53 + -53) ] * ( n + (72 + -71) )\n    B = [ (95 + -95) ] * ( n + (74 + -73) )\n    A [ (2 + -2) ] = (53 + -52)\n    A [ (40 + -39) ] = (29 + -29)\n    B [ (81 + -81) ] = (12 + -12)\n    B [ (59 + -58) ] = (65 + -64)\n    idx_eb8y = (69 + -69)\n    list_lk78 = range ( (83 + -81) , n + (58 + -57) )\n    while idx_eb8y < len(list_lk78):\n        i = list_lk78[idx_eb8y]\n        A [ i ] = A [ i - (37 + -35) ] + (66 + -64) * B [ i - (24 + -23) ]\n        B [ i ] = A [ i - (67 + -66) ] + B [ i - (28 + -26) ]\n        idx_eb8y = idx_eb8y + (45 + -44)\n    return A [ n ]", "id": "ConstantUnfoldding_sample_from_TILING_WITH_DOMINOES_to_343", "old_id": "TILING_WITH_DOMINOES"}
{"code": "def countNonDecreasing ( n ) :\n    N = (61 + -51)\n    count = (96 + -95)\n    idx_8r1e = (54 + -54)\n    list_qbls = range ( (35 + -34) , n + (94 + -93) )\n    while idx_8r1e < len(list_qbls):\n        i = list_qbls[idx_8r1e]\n        count = int ( count * ( N + i - (36 + -35) ) )\n        count = int ( count / i )\n        idx_8r1e = idx_8r1e + (61 + -60)\n    return count", "id": "ConstantUnfoldding_sample_from_TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1_to_344", "old_id": "TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1"}
{"code": "def countUnique ( mat , n , m ) :\n    rowsum = [ (80 + -80) ] * n\n    colsum = [ (54 + -54) ] * m\n    idx_cvks = (33 + -33)\n    list_4w1e = range ( n )\n    while idx_cvks < len(list_4w1e):\n        i = list_4w1e[idx_cvks]\n        idx_2h3w = (96 + -96)\n        list_wd8x = range ( m )\n        while idx_2h3w < len(list_wd8x):\n            j = list_wd8x[idx_2h3w]\n            if ( mat [ i ] [ j ] != (17 + -17) ) :\n                rowsum [ i ] += (7 + -6)\n                colsum [ j ] += (82 + -81)\n            idx_2h3w = idx_2h3w + (100 + -99)\n        idx_cvks = idx_cvks + (82 + -81)\n    uniquecount = (18 + -18)\n    idx_gqyn = (83 + -83)\n    list_2k6g = range ( n )\n    while idx_gqyn < len(list_2k6g):\n        i = list_2k6g[idx_gqyn]\n        idx_73bn = (97 + -97)\n        list_oija = range ( m )\n        while idx_73bn < len(list_oija):\n            j = list_oija[idx_73bn]\n            if ( mat [ i ] [ j ] != (49 + -49) and rowsum [ i ] == (90 + -89) and colsum [ j ] == (45 + -44) ) :\n                uniquecount += (29 + -28)\n            idx_73bn = idx_73bn + (31 + -30)\n        idx_gqyn = idx_gqyn + (83 + -82)\n    return uniquecount", "id": "ConstantUnfoldding_sample_from_UNIQUE_CELLS_BINARY_MATRIX_to_345", "old_id": "UNIQUE_CELLS_BINARY_MATRIX"}
{"code": "def xorZero ( str ) :\n    one_count = (36 + -36)\n    zero_count = (29 + -29)\n    n = len ( str )\n    idx_2s54 = (50 + -50)\n    list_4e1y = range ( (93 + -93) , n , (29 + -28) )\n    while idx_2s54 < len(list_4e1y):\n        i = list_4e1y[idx_2s54]\n        if ( str [ i ] == '1' ) :\n            one_count += (3 + -2)\n        else :\n            zero_count += (94 + -93)\n        idx_2s54 = idx_2s54 + (12 + -11)\n    if ( one_count % (84 + -82) == (73 + -73) ) :\n        return zero_count\n    return one_count", "id": "ConstantUnfoldding_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_346", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def CountWays ( n ) :\n    table = [ (63 + -63) ] * ( n + (78 + -77) )\n    table [ (60 + -60) ] = (45 + -44)\n    idx_z1ml = (51 + -51)\n    list_nhyg = range ( (82 + -81) , n )\n    while idx_z1ml < len(list_nhyg):\n        i = list_nhyg[idx_z1ml]\n        idx_c6px = (55 + -55)\n        list_y9hw = range ( i , n + (62 + -61) )\n        while idx_c6px < len(list_y9hw):\n            j = list_y9hw[idx_c6px]\n            table [ j ] += table [ j - i ]\n            idx_c6px = idx_c6px + (32 + -31)\n        idx_z1ml = idx_z1ml + (47 + -46)\n    return table [ n ]", "id": "ConstantUnfoldding_sample_from_WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS_to_347", "old_id": "WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS"}
{"code": "def countTransformation ( a , b ) :\n    n = len ( a )\n    m = len ( b )\n    if m == (97 + -97) :\n        return (99 + -98)\n    dp = [ [ (43 + -43) ] * ( n + (8 + -7) ) for _ in range ( m + (90 + -89) ) ]\n    idx_45xq = (64 + -64)\n    list_j8iy = range ( m )\n    while idx_45xq < len(list_j8iy):\n        i = list_j8iy[idx_45xq]\n        idx_xzkf = (48 + -48)\n        list_de2c = range ( i , n )\n        while idx_xzkf < len(list_de2c):\n            j = list_de2c[idx_xzkf]\n            if i == (23 + -23) :\n                if j == (85 + -85) :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = (88 + -87)\n                    else :\n                        dp [ i ] [ j ] = (28 + -28)\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = dp [ i ] [ j - (42 + -41) ] + (97 + -96)\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - (60 + -59) ]\n            else :\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = ( dp [ i ] [ j - (59 + -58) ] + dp [ i - (6 + -5) ] [ j - (26 + -25) ] )\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - (56 + -55) ]\n            idx_xzkf = idx_xzkf + (34 + -33)\n        idx_45xq = idx_45xq + (43 + -42)\n    return dp [ m - (97 + -96) ] [ n - (42 + -41) ]", "id": "ConstantUnfoldding_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_348", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
