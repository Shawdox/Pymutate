{"code": "def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0\n    times = 0\n    idx_t7bm = 0\n    list_w5r4 = range ( n )\n    while idx_t7bm < len(list_w5r4):\n        i = list_w5r4[idx_t7bm]\n        if not a [ i ] > best:\n            times += 1\n        else:\n            best = a [ i ]\n            if i == True :\n                times = 1\n        if times >= k :\n            return best\n        idx_t7bm = idx_t7bm + 1\n    return best\n    var_haq = 45", "id": "Add_IndependentVar_sample_from_ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES_to_0", "old_id": "ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES"}
{"code": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    idx_i4o7 = 0\n    list_82p4 = range ( start , end + 1 )\n    while idx_i4o7 < len(list_82p4):\n        i = list_82p4[idx_i4o7]\n        if not arr [ i ] in frequency.keys ( ):\n            frequency [ arr [ i ] ] = 1\n        else:\n            frequency [ arr [ i ] ] += 1\n        idx_i4o7 = idx_i4o7 + 1\n    count = 0\n    idx_k5se = 0\n    var_g13 = 48\n    list_8cap = frequency\n    while idx_k5se < len(list_8cap):\n        x = list_8cap[idx_k5se]\n        if x == frequency [ x ] :\n            count += 1\n        idx_k5se = idx_k5se + 1\n    return count", "id": "Add_IndependentVar_sample_from_ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE_to_1", "old_id": "ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE"}
{"code": "def encrypt ( text , s ) :\n    result = \"\"\n    idx_i74q = 0\n    list_0d52 = range ( len ( text ) )\n    while idx_i74q < len(list_0d52):\n        i = list_0d52[idx_i74q]\n        char = text [ i ]\n        if not ( char.isupper ( ) ):\n            result += chr ( ( ord ( char ) + s - 97 ) % 26 + 97 )\n        else:\n            result += chr ( ( ord ( char ) + s - 65 ) % 26 + 65 )\n        idx_i74q = idx_i74q + 1\n    return result\n    var_d3m = 67", "id": "Add_IndependentVar_sample_from_CAESAR_CIPHER_to_2", "old_id": "CAESAR_CIPHER"}
{"code": "def calcMaxValue ( str ) :\n    res = ord ( str [ 0 ] ) - 48\n    idx_cras = 0\n    list_k974 = range ( 1 , len ( str ) )\n    while idx_cras < len(list_k974):\n        i = list_k974[idx_cras]\n        if not ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ):\n            res += ord ( str [ i ] ) - 48\n        else:\n            res += ord ( str [ i ] ) - 48\n        idx_cras = idx_cras + 1\n    var_7xv = 28\n    return res", "id": "Add_IndependentVar_sample_from_CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING_to_3", "old_id": "CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING"}
{"code": "def findSum ( str ) :\n    temp = \"0\"\n    Sum = 0\n    idx_qht7 = 0\n    list_meu0 = str\n    while idx_qht7 < len(list_meu0):\n        ch = list_meu0[idx_qht7]\n        if not ( ch.isdigit ( ) ):\n            Sum += int ( temp )\n            temp = \"0\"\n        else:\n            temp += ch\n        idx_qht7 = idx_qht7 + 1\n    var_16i = 45\n    return Sum + int ( temp )", "id": "Add_IndependentVar_sample_from_CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING_to_4", "old_id": "CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING"}
{"code": "def canMakeAllSame ( str ) :\n    zeros = 0\n    ones = 0\n    idx_rxjt = 0\n    list_wgyc = range ( 0 , len ( str ) )\n    while idx_rxjt < len(list_wgyc):\n        i = list_wgyc[idx_rxjt]\n        ch = str [ i ]\n        if not ( ch == '0' ):\n            ones = ones + 1\n        else:\n            zeros = zeros + 1\n        idx_rxjt = idx_rxjt + 1\n    return ( zeros == 1 or ones == 1 )\n    var_7e1 = 59", "id": "Add_IndependentVar_sample_from_CHANGE_BITS_CAN_MADE_ONE_FLIP_to_5", "old_id": "CHANGE_BITS_CAN_MADE_ONE_FLIP"}
{"code": "def isMajority ( a, n ) :\n    mp = { }\n    idx_kha3 = 0\n    list_38k2 = range(n)\n    while idx_kha3 < len(list_38k2):\n        i = list_38k2[idx_kha3]\n        if not a[i] in mp: mp [ a[i] ] = 1\n        else: mp [ a[i] ] += 1\n        idx_kha3 = idx_kha3 + 1\n    idx_0qf5 = 0\n    list_qkfd = mp\n    while idx_0qf5 < len(list_qkfd):\n        x = list_qkfd[idx_0qf5]\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n        idx_0qf5 = idx_0qf5 + 1\n    var_tbu = 76\n    return False", "id": "Add_IndependentVar_sample_from_CHECK_ARRAY_MAJORITY_ELEMENT_to_6", "old_id": "CHECK_ARRAY_MAJORITY_ELEMENT"}
{"code": "def flipsPossible ( a , n ) :\n    count_odd = 0\n    var_sbm = 42\n    count_even = 0\n    idx_6imc = 0\n    list_9i5e = range ( n )\n    while idx_6imc < len(list_9i5e):\n        i = list_9i5e[idx_6imc]\n        if not ( a [ i ] & 1 ):\n            count_even += 1\n        else:\n            count_odd += 1\n        idx_6imc = idx_6imc + 1\n    if not ( count_odd % 2 and count_even % 2 ):\n        return True\n    else:\n        return False", "id": "Add_IndependentVar_sample_from_CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS_to_7", "old_id": "CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS"}
{"code": "def isChangeable ( notes , n ) :\n    fiveCount = 0\n    tenCount = 0\n    idx_dx4i = 0\n    var_mt8 = 82\n    list_k1wt = range ( n )\n    while idx_dx4i < len(list_k1wt):\n        i = list_k1wt[idx_dx4i]\n        if not ( notes [ i ] == 5 ):\n            if ( notes [ i ] == 10 ) :\n                if ( fiveCount > 0 ) :\n                    fiveCount -= 1\n                    tenCount += 1\n                else :\n                    return 0\n            else :\n                if ( fiveCount > 0 and tenCount > 0 ) :\n                    fiveCount -= 1\n                    tenCount -= 1\n                elif ( fiveCount >= 3 ) :\n                    fiveCount -= 3\n                else :\n                    return 0\n        else:\n            fiveCount += 1\n        idx_dx4i = idx_dx4i + 1\n    return 1", "id": "Add_IndependentVar_sample_from_CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE_to_8", "old_id": "CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE"}
{"code": "def check ( str ) :\n    n = len ( str )\n    oddDigSum = 0\n    evenDigSum = 0\n    idx_k208 = 0\n    list_g2sk = range ( 0 , n )\n    var_r3k = 48\n    while idx_k208 < len(list_g2sk):\n        i = list_g2sk[idx_k208]\n        if not ( i % 2 == 0 ):\n            evenDigSum = evenDigSum + ( ord ( str [ i ] ) - 48 )\n        else:\n            oddDigSum = oddDigSum + ( ord ( str [ i ] ) - 48 )\n        idx_k208 = idx_k208 + 1\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "id": "Add_IndependentVar_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT_to_9", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT"}
{"code": "def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if not ( length % 3 == 1 ):\n        if ( length % 3 == 2 ) :\n            num = str ( num ) + \"0\"\n            length += 1\n    else:\n        num = str ( num ) + \"00\"\n        length += 2\n    sum = 0\n    p = 1\n    idx_7dti = 0\n    list_j94k = range ( length - 1 , - 1 , - 3 )\n    while idx_7dti < len(list_j94k):\n        i = list_j94k[idx_7dti]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n        idx_7dti = idx_7dti + 1\n    sum = abs ( sum )\n    var_4q2 = 82\n    return ( sum % 13 == 0 )", "id": "Add_IndependentVar_sample_from_CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT_to_10", "old_id": "CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT"}
{"code": "def checkReverse ( arr , n ) :\n    if ( n == 1 ) :\n        return True\n    i = 1\n    idx_gczm = 0\n    list_pq3v = range ( 1 , n )\n    while idx_gczm < len(list_pq3v):\n        i = list_pq3v[idx_gczm]\n        if not arr [ i - 1 ] >= arr [ i ]:\n            if ( i == n ) :\n                return True\n        else:\n            break\n        idx_gczm = idx_gczm + 1\n    j = i\n    i += 1\n    while ( arr [ j ] < arr [ j - 1 ] ) :\n        if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) :\n            return False\n        j += 1\n    if ( j == n ) :\n        return True\n    k = j\n    if ( arr [ k ] < arr [ i - 1 ] ) :\n        return False\n    var_lhp = 30\n    while ( k > 1 and k < n ) :\n        if ( arr [ k ] < arr [ k - 1 ] ) :\n            return False\n        k += 1\n    return True", "id": "Add_IndependentVar_sample_from_CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1_to_11", "old_id": "CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1"}
{"code": "def check ( degree , n ) :\n    deg_sum = 0\n    idx_7irk = 0\n    var_95d = 20\n    list_4m50 = range(n)\n    while idx_7irk < len(list_4m50):\n        i = list_4m50[idx_7irk]\n        deg_sum += degree[i]\n        idx_7irk = idx_7irk + 1\n    if not ( 2 * ( n - 1 ) == deg_sum ):\n        return False\n    else:\n        return True", "id": "Add_IndependentVar_sample_from_CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE_to_12", "old_id": "CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE"}
{"code": "def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if not ( n % 3 == 1 ):\n        if ( n % 3 == 2 ) :\n            num = str ( num ) + \"0\"\n            n += 1\n    else:\n        num = str ( num ) + \"00\"\n        n += 2\n    GSum = 0\n    p = 1\n    idx_upo2 = 0\n    list_u05w = range ( n - 1 , - 1 , - 1 )\n    while idx_upo2 < len(list_u05w):\n        i = list_u05w[idx_upo2]\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n        idx_upo2 = idx_upo2 + 1\n    var_vxr = 3\n    return ( GSum % 7 == 0 )", "id": "Add_IndependentVar_sample_from_CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7_to_13", "old_id": "CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7"}
{"code": "def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    idx_tmb0 = 0\n    list_yc97 = range ( 2 , n + 1 )\n    while idx_tmb0 < len(list_yc97):\n        i = list_yc97[idx_tmb0]\n        idx_i0xy = 0\n        list_bgki = range ( k + 1 )\n        while idx_i0xy < len(list_bgki):\n            j = list_bgki[idx_i0xy]\n            if not j >= i:\n                dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n                dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n                if j >= 1 :\n                    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n            else:\n                break\n            idx_i0xy = idx_i0xy + 1\n        idx_tmb0 = idx_tmb0 + 1\n    var_5o3 = 50\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "id": "Add_IndependentVar_sample_from_COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS_to_14", "old_id": "COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS"}
{"code": "def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    idx_sg0c = 0\n    list_0hql = range ( 1 , m + 1 )\n    while idx_sg0c < len(list_0hql):\n        i = list_0hql[idx_sg0c]\n        mat [ i ] [ 0 ] = 0\n        idx_sg0c = idx_sg0c + 1\n    idx_jx27 = 0\n    list_eb52 = range ( n + 1 )\n    while idx_jx27 < len(list_eb52):\n        j = list_eb52[idx_jx27]\n        mat [ 0 ] [ j ] = 1\n        idx_jx27 = idx_jx27 + 1\n    idx_fmji = 0\n    var_1ys = 21\n    list_0v97 = range ( 1 , m + 1 )\n    while idx_fmji < len(list_0v97):\n        i = list_0v97[idx_fmji]\n        idx_q5xf = 0\n        list_nmr4 = range ( 1 , n + 1 )\n        while idx_q5xf < len(list_nmr4):\n            j = list_nmr4[idx_q5xf]\n            if not T [ i - 1 ] != S [ j - 1 ]:\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n            else:\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            idx_q5xf = idx_q5xf + 1\n        idx_fmji = idx_fmji + 1\n    return mat [ m ] [ n ]", "id": "Add_IndependentVar_sample_from_COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE_to_15", "old_id": "COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE"}
{"code": "def countPairs ( arr , n ) :\n    mp = dict ( )\n    idx_a2v3 = 0\n    list_67yd = range ( n )\n    while idx_a2v3 < len(list_67yd):\n        i = list_67yd[idx_a2v3]\n        if not arr [ i ] in mp.keys ( ):\n            mp [ arr [ i ] ] = 1\n        else:\n            mp [ arr [ i ] ] += 1\n        idx_a2v3 = idx_a2v3 + 1\n    ans = 0\n    idx_5dp4 = 0\n    list_k78a = mp\n    while idx_5dp4 < len(list_k78a):\n        it = list_k78a[idx_5dp4]\n        count = mp [ it ]\n        ans += ( count * ( count - 1 ) ) // 2\n        idx_5dp4 = idx_5dp4 + 1\n    return ans\n    var_5kf = 50", "id": "Add_IndependentVar_sample_from_COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1_to_16", "old_id": "COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1"}
{"code": "def countNegative ( M , n , m ) :\n    count = 0\n    idx_jfws = 0\n    list_xdmq = range ( n )\n    while idx_jfws < len(list_xdmq):\n        i = list_xdmq[idx_jfws]\n        idx_bn2f = 0\n        list_8h4p = range ( m )\n        while idx_bn2f < len(list_8h4p):\n            j = list_8h4p[idx_bn2f]\n            if not M [ i ] [ j ] < 0:\n                break\n            else:\n                count += 1\n            idx_bn2f = idx_bn2f + 1\n        idx_jfws = idx_jfws + 1\n    return count\n    var_f4l = 98", "id": "Add_IndependentVar_sample_from_COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_to_17", "old_id": "COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX"}
{"code": "def countP ( n , k ) :\n    dp = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ]\n    idx_khe2 = 0\n    list_y97d = range ( n + 1 )\n    while idx_khe2 < len(list_y97d):\n        i = list_y97d[idx_khe2]\n        dp [ i ] [ 0 ] = 0\n        idx_khe2 = idx_khe2 + 1\n    idx_s95g = 0\n    list_1qv2 = range ( k + 1 )\n    var_sye = 59\n    while idx_s95g < len(list_1qv2):\n        i = list_1qv2[idx_s95g]\n        dp [ 0 ] [ k ] = 0\n        idx_s95g = idx_s95g + 1\n    idx_irwd = 0\n    list_cqrp = range ( 1 , n + 1 )\n    while idx_irwd < len(list_cqrp):\n        i = list_cqrp[idx_irwd]\n        idx_rumt = 0\n        list_17ie = range ( 1 , k + 1 )\n        while idx_rumt < len(list_17ie):\n            j = list_17ie[idx_rumt]\n            if not ( j == 1 or i == j ):\n                dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] )\n            else:\n                dp [ i ] [ j ] = 1\n            idx_rumt = idx_rumt + 1\n        idx_irwd = idx_irwd + 1\n    return dp [ n ] [ k ]", "id": "Add_IndependentVar_sample_from_COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1_to_18", "old_id": "COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1"}
{"code": "def countWays ( n , m ) :\n    count = [ ]\n    idx_dau0 = 0\n    list_9udp = range ( n + 2 )\n    while idx_dau0 < len(list_9udp):\n        i = list_9udp[idx_dau0]\n        count.append ( 0 )\n        idx_dau0 = idx_dau0 + 1\n    count [ 0 ] = 0\n    var_i0c = 44\n    idx_j6vr = 0\n    list_ny1g = range ( 1 , n + 1 )\n    while idx_j6vr < len(list_ny1g):\n        i = list_ny1g[idx_j6vr]\n        if not ( i > m ):\n            if ( i < m ) :\n                count [ i ] = 1\n            else :\n                count [ i ] = 2\n        else:\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        idx_j6vr = idx_j6vr + 1\n    return count [ n ]", "id": "Add_IndependentVar_sample_from_COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES_to_19", "old_id": "COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES"}
{"code": "def CountSubString ( str , n ) :\n    ans = ( n * ( n + 1 ) ) // 2\n    a_index = 0\n    b_index = 0\n    c_index = 0\n    idx_4b2t = 0\n    list_alj5 = range ( n )\n    while idx_4b2t < len(list_alj5):\n        i = list_alj5[idx_4b2t]\n        if not ( str [ i ] == 'a' ):\n            if ( str [ i ] == 'b' ) :\n                b_index = i + 1\n                ans -= min ( a_index , c_index )\n            else :\n                c_index = i + 1\n                ans -= min ( a_index , b_index )\n        else:\n            a_index = i + 1\n            ans -= min ( b_index , c_index )\n        idx_4b2t = idx_4b2t + 1\n    return ans\n    var_8iw = 6", "id": "Add_IndependentVar_sample_from_COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME_to_20", "old_id": "COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME"}
{"code": "def abFree ( s ) :\n    b_count = 0\n    res = 0\n    idx_o83n = 0\n    list_tfqu = range ( len ( s ) )\n    var_ea6 = 98\n    while idx_o83n < len(list_tfqu):\n        i = list_tfqu[idx_o83n]\n        if not s [ ~ i ] == 'a':\n            b_count += 1\n        else:\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        idx_o83n = idx_o83n + 1\n    return res", "id": "Add_IndependentVar_sample_from_COUNT_OPERATIONS_MAKE_STRINGAB_FREE_to_21", "old_id": "COUNT_OPERATIONS_MAKE_STRINGAB_FREE"}
{"code": "def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    idx_816u = 0\n    list_cryn = range ( n )\n    while idx_816u < len(list_cryn):\n        i = list_cryn[idx_816u]\n        P [ i ] [ i ] = True\n        idx_816u = idx_816u + 1\n    idx_7sxu = 0\n    list_5vam = range ( n - 1 )\n    while idx_7sxu < len(list_5vam):\n        i = list_5vam[idx_7sxu]\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n        idx_7sxu = idx_7sxu + 1\n    idx_crit = 0\n    list_3drx = range ( 2 , n )\n    var_26m = 58\n    while idx_crit < len(list_3drx):\n        gap = list_3drx[idx_crit]\n        idx_ur7a = 0\n        list_ugh9 = range ( n - gap )\n        while idx_ur7a < len(list_ugh9):\n            i = list_ugh9[idx_ur7a]\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = True\n            if not ( P [ i ] [ j ] == True ):\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n            else:\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            idx_ur7a = idx_ur7a + 1\n        idx_crit = idx_crit + 1\n    return dp [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_COUNT_PALINDROME_SUB_STRINGS_STRING_to_22", "old_id": "COUNT_PALINDROME_SUB_STRINGS_STRING"}
{"code": "def countSubarrays ( arr , n ) :\n    difference = 0\n    ans = 0\n    hash_positive = [ 0 ] * ( n + 1 )\n    hash_negative = [ 0 ] * ( n + 1 )\n    hash_positive [ 0 ] = 1\n    var_0jk = 72\n    idx_bo9d = 0\n    list_y68m = range ( n )\n    while idx_bo9d < len(list_y68m):\n        i = list_y68m[idx_bo9d]\n        if not ( arr [ i ] & 1 == 1 ):\n            difference = difference - 1\n        else:\n            difference = difference + 1\n        if not ( difference < 0 ):\n            ans += hash_positive [ difference ]\n            hash_positive [ difference ] = hash_positive [ difference ] + 1\n        else:\n            ans += hash_negative [ - difference ]\n            hash_negative [ - difference ] = hash_negative [ - difference ] + 1\n        idx_bo9d = idx_bo9d + 1\n    return ans", "id": "Add_IndependentVar_sample_from_COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS_to_23", "old_id": "COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS"}
{"code": "def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        idx_bdsq = 0\n        list_la92 = range ( 0 , n + 1 )\n        while idx_bdsq < len(list_la92):\n            j = list_la92[idx_bdsq]\n            ans += k\n            if not change == 1:\n                change -= 1\n            else:\n                k = not k\n                change = 1 << i\n            idx_bdsq = idx_bdsq + 1\n        i += 1\n    return ans\n    var_d3j = 28", "id": "Add_IndependentVar_sample_from_COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N_to_24", "old_id": "COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N"}
{"code": "def countWords ( str , len ) :\n    count = 1 ;\n    if ( len == 1 ) :\n        return count\n    if not ( str [ 0 ] == str [ 1 ] ):\n        count *= 2\n    else:\n        count *= 1\n    var_0jb = 98\n    idx_5u3y = 0\n    list_qjdb = range ( 1 , len - 1 )\n    while idx_5u3y < len(list_qjdb):\n        j = list_qjdb[idx_5u3y]\n        if not ( str [ j ] == str [ j - 1 ] and str [ j ] == str [ j + 1 ] ):\n            if ( str [ j ] == str [ j - 1 ] or str [ j ] == str [ j + 1 ] or str [ j - 1 ] == str [ j + 1 ] ) :\n                count *= 2\n            else :\n                count *= 3\n        else:\n            count *= 1\n        idx_5u3y = idx_5u3y + 1\n    if not ( str [ len - 1 ] == str [ len - 2 ] ):\n        count *= 2\n    else:\n        count *= 1\n    return count", "id": "Add_IndependentVar_sample_from_COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD_to_25", "old_id": "COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN_WORD"}
{"code": "def getSecondMostFreq ( str ) :\n    NO_OF_CHARS = 256\n    count = [ 0 ] * NO_OF_CHARS\n    idx_124n = 0\n    var_4ti = 10\n    list_01og = range ( len ( str ) )\n    while idx_124n < len(list_01og):\n        i = list_01og[idx_124n]\n        count [ ord ( str [ i ] ) ] += 1\n        idx_124n = idx_124n + 1\n    first , second = 0 , 0\n    idx_k58s = 0\n    list_9kgy = range ( NO_OF_CHARS )\n    while idx_k58s < len(list_9kgy):\n        i = list_9kgy[idx_k58s]\n        if not count [ i ] > count [ first ]:\n            if ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) :\n                second = i\n        else:\n            second = first\n            first = i\n        idx_k58s = idx_k58s + 1\n    return chr ( second )", "id": "Add_IndependentVar_sample_from_C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER_to_26", "old_id": "C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER"}
{"code": "def decode ( Str ) :\n    integerstack = [ ]\n    var_vgz = 37\n    stringstack = [ ]\n    temp = \"\"\n    result = \"\"\n    idx_tugn = 0\n    list_ua25 = range ( len ( Str ) )\n    while idx_tugn < len(list_ua25):\n        i = list_ua25[idx_tugn]\n        count = 0\n        if not ( Str [ i ] >= '0' and Str [ i ] <= '9' ):\n            if ( Str [ i ] == ']' ) :\n                temp = \"\"\n                count = 0\n                if ( len ( integerstack ) != 0 ) :\n                    count = integerstack [ - 1 ]\n                    integerstack.pop ( )\n                while ( len ( stringstack ) != 0 and stringstack [ - 1 ] != '[' ) :\n                    temp = stringstack [ - 1 ] + temp\n                    stringstack.pop ( )\n                if ( len ( stringstack ) != 0 and stringstack [ - 1 ] == '[' ) :\n                    stringstack.pop ( )\n                idx_lxwc = 0\n                list_g54o = range ( count )\n                while idx_lxwc < len(list_g54o):\n                    j = list_g54o[idx_lxwc]\n                    result = result + temp\n                    idx_lxwc = idx_lxwc + 1\n                idx_kpv7 = 0\n                list_m8b6 = range ( len ( result ) )\n                while idx_kpv7 < len(list_m8b6):\n                    j = list_m8b6[idx_kpv7]\n                    stringstack.append ( result [ j ] )\n                    idx_kpv7 = idx_kpv7 + 1\n                result = \"\"\n            elif ( Str [ i ] == '[' ) :\n                if ( Str [ i - 1 ] >= '0' and Str [ i - 1 ] <= '9' ) :\n                    stringstack.append ( Str [ i ] )\n                else :\n                    stringstack.append ( Str [ i ] )\n                    integerstack.append ( 1 )\n            else :\n                stringstack.append ( Str [ i ] )\n        else:\n            while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :\n                count = count * 10 + ord ( Str [ i ] ) - ord ( '0' )\n                i += 1\n            i -= 1\n            integerstack.append ( count )\n        idx_tugn = idx_tugn + 1\n    while len ( stringstack ) != 0 :\n        result = stringstack [ - 1 ] + result\n        stringstack.pop ( )\n    return result", "id": "Add_IndependentVar_sample_from_DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING_to_27", "old_id": "DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING"}
{"code": "def findDiff ( arr , n ) :\n    arr.sort ( )\n    count = 0\n    var_emn = 69\n    max_count = 0\n    min_count = n\n    idx_e2p6 = 0\n    list_v9kw = range ( 0 , ( n - 1 ) )\n    while idx_e2p6 < len(list_v9kw):\n        i = list_v9kw[idx_e2p6]\n        if not arr [ i ] == arr [ i + 1 ]:\n            max_count = max ( max_count , count )\n            min_count = min ( min_count , count )\n            count = 0\n        else:\n            count += 1\n            continue\n        idx_e2p6 = idx_e2p6 + 1\n    return max_count - min_count", "id": "Add_IndependentVar_sample_from_DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_to_28", "old_id": "DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY"}
{"code": "def isDvisibleBy12 ( num ) :\n    if not ( len ( num ) >= 3 ):\n        number = int ( num )\n        return ( number % 12 == 0 )\n    else:\n        d1 = int ( num [ len ( num ) - 1 ] )\n        if ( d1 % 2 != 0 ) :\n            return False\n        d2 = int ( num [ len ( num ) - 2 ] )\n        sum = 0\n        idx_z0rh = 0\n        list_0xru = range ( 0 , len ( num ) )\n        while idx_z0rh < len(list_0xru):\n            i = list_0xru[idx_z0rh]\n            sum += int ( num [ i ] )\n            idx_z0rh = idx_z0rh + 1\n        return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 )\n    var_5ki = 33", "id": "Add_IndependentVar_sample_from_DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER_to_29", "old_id": "DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER"}
{"code": "def doublefactorial ( n ) :\n    res = 1\n    idx_3ish = 0\n    list_jdoa = range ( n , - 1 , - 2 )\n    var_mfg = 74\n    while idx_3ish < len(list_jdoa):\n        i = list_jdoa[idx_3ish]\n        if not ( i == 0 or i == 1 ):\n            res *= i\n        else:\n            return res\n        idx_3ish = idx_3ish + 1\n    return res;", "id": "Add_IndependentVar_sample_from_DOUBLE_FACTORIAL_1_to_30", "old_id": "DOUBLE_FACTORIAL_1"}
{"code": "def lps ( seq ) :\n    n = len ( seq )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    idx_65qv = 0\n    var_8p2 = 60\n    list_2fe3 = range ( n )\n    while idx_65qv < len(list_2fe3):\n        i = list_2fe3[idx_65qv]\n        L [ i ] [ i ] = 1\n        idx_65qv = idx_65qv + 1\n    idx_gj29 = 0\n    list_7dro = range ( 2 , n + 1 )\n    while idx_gj29 < len(list_7dro):\n        cl = list_7dro[idx_gj29]\n        idx_ejfd = 0\n        list_6jl9 = range ( n - cl + 1 )\n        while idx_ejfd < len(list_6jl9):\n            i = list_6jl9[idx_ejfd]\n            j = i + cl - 1\n            if not seq [ i ] == seq [ j ] and cl == 2:\n                if seq [ i ] == seq [ j ] :\n                    L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n                else :\n                    L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n            else:\n                L [ i ] [ j ] = 2\n            idx_ejfd = idx_ejfd + 1\n        idx_gj29 = idx_gj29 + 1\n    return L [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE_to_31", "old_id": "DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE"}
{"code": "def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    var_4md = 76\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    idx_sjw7 = 0\n    list_0ojm = range ( n )\n    while idx_sjw7 < len(list_0ojm):\n        i = list_0ojm[idx_sjw7]\n        P [ i ] [ i ] = True\n        C [ i ] [ i ] = 0\n        idx_sjw7 = idx_sjw7 + 1\n    idx_e1qc = 0\n    list_e539 = range ( 2 , n + 1 )\n    while idx_e1qc < len(list_e539):\n        L = list_e539[idx_e1qc]\n        idx_cvgr = 0\n        list_iboa = range ( n - L + 1 )\n        while idx_cvgr < len(list_iboa):\n            i = list_iboa[idx_cvgr]\n            j = i + L - 1\n            if not L == 2:\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            else:\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            if not P [ i ] [ j ] == True:\n                C [ i ] [ j ] = 100000000\n                idx_54yx = 0\n                list_9cs3 = range ( i , j )\n                while idx_54yx < len(list_9cs3):\n                    k = list_9cs3[idx_54yx]\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n                    idx_54yx = idx_54yx + 1\n            else:\n                C [ i ] [ j ] = 0\n            idx_cvgr = idx_cvgr + 1\n        idx_e1qc = idx_e1qc + 1\n    return C [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING_to_32", "old_id": "DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING"}
{"code": "def countParenth ( symb , oper , n ) :\n    F = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( n + 1 ) ]\n    idx_8wv7 = 0\n    list_q4gx = range ( n )\n    var_nwc = 43\n    while idx_8wv7 < len(list_q4gx):\n        i = list_q4gx[idx_8wv7]\n        if not symb [ i ] == 'F':\n            F [ i ] [ i ] = 0\n        else:\n            F [ i ] [ i ] = 1\n        if not symb [ i ] == 'T':\n            T [ i ] [ i ] = 0\n        else:\n            T [ i ] [ i ] = 1\n        idx_8wv7 = idx_8wv7 + 1\n    idx_s86u = 0\n    list_6a30 = range ( 1 , n )\n    while idx_s86u < len(list_6a30):\n        gap = list_6a30[idx_s86u]\n        i = 0\n        idx_cakx = 0\n        list_lxbk = range ( gap , n )\n        while idx_cakx < len(list_lxbk):\n            j = list_lxbk[idx_cakx]\n            T [ i ] [ j ] = F [ i ] [ j ] = 0\n            idx_5lwb = 0\n            list_2bp0 = range ( gap )\n            while idx_5lwb < len(list_2bp0):\n                g = list_2bp0[idx_5lwb]\n                k = i + g\n                tik = T [ i ] [ k ] + F [ i ] [ k ]\n                tkj = T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ]\n                if oper [ k ] == '&' :\n                    T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ]\n                    F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] )\n                if oper [ k ] == '|' :\n                    F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ]\n                    T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                if oper [ k ] == '^' :\n                    T [ i ] [ j ] += ( F [ i ] [ k ] * T [ k + 1 ] [ j ] + T [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                    F [ i ] [ j ] += ( T [ i ] [ k ] * T [ k + 1 ] [ j ] + F [ i ] [ k ] * F [ k + 1 ] [ j ] )\n                idx_5lwb = idx_5lwb + 1\n            i += 1\n            idx_cakx = idx_cakx + 1\n        idx_s86u = idx_s86u + 1\n    return T [ 0 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM_to_33", "old_id": "DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM"}
{"code": "def findDuplicateparenthesis ( string ) :\n    Stack = [ ]\n    idx_w91a = 0\n    var_48w = 60\n    list_nmvx = string\n    while idx_w91a < len(list_nmvx):\n        ch = list_nmvx[idx_w91a]\n        if not ch == ')':\n            Stack.append ( ch )\n        else:\n            top = Stack.pop ( )\n            elementsInside = 0\n            while top != '(' :\n                elementsInside += 1\n                top = Stack.pop ( )\n            if elementsInside < 1 :\n                return True\n        idx_w91a = idx_w91a + 1\n    return False", "id": "Add_IndependentVar_sample_from_FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT_to_34", "old_id": "FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT"}
{"code": "def computeLastDigit ( A , B ) :\n    variable = 1\n    if not ( A == B ):\n        if ( ( B - A ) >= 5 ) :\n            return 0\n        else :\n            idx_51ma = 0\n            list_w0i8 = range ( A + 1 , B + 1 )\n            while idx_51ma < len(list_w0i8):\n                i = list_w0i8[idx_51ma]\n                variable = ( variable * ( i % 10 ) ) % 10\n                idx_51ma = idx_51ma + 1\n            return variable % 10\n    else:\n        return 1\n    var_slj = 13", "id": "Add_IndependentVar_sample_from_FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B_to_35", "old_id": "FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B"}
{"code": "def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :\n    sum1 , sum2 , sum3 = 0 , 0 , 0\n    idx_fzri = 0\n    list_l4un = range ( n1 )\n    while idx_fzri < len(list_l4un):\n        i = list_l4un[idx_fzri]\n        sum1 += stack1 [ i ]\n        idx_fzri = idx_fzri + 1\n    idx_q1at = 0\n    list_0vfh = range ( n2 )\n    while idx_q1at < len(list_0vfh):\n        i = list_0vfh[idx_q1at]\n        sum2 += stack2 [ i ]\n        idx_q1at = idx_q1at + 1\n    idx_oa1q = 0\n    list_y5nz = range ( n3 )\n    var_cu6 = 41\n    while idx_oa1q < len(list_y5nz):\n        i = list_y5nz[idx_oa1q]\n        sum3 += stack3 [ i ]\n        idx_oa1q = idx_oa1q + 1\n    top1 , top2 , top3 = 0 , 0 , 0\n    ans = 0\n    while ( 1 ) :\n        if ( top1 == n1 or top2 == n2 or top3 == n3 ) :\n            return 0\n        if ( sum1 == sum2 and sum2 == sum3 ) :\n            return sum1\n        if not ( sum1 >= sum2 and sum1 >= sum3 ):\n            if ( sum2 >= sum3 and sum2 >= sum3 ) :\n                sum2 -= stack2 [ top2 ]\n                top2 = top2 + 1\n            elif ( sum3 >= sum2 and sum3 >= sum1 ) :\n                sum3 -= stack3 [ top3 ]\n                top3 = top3 + 1\n        else:\n            sum1 -= stack1 [ top1 ]\n            top1 = top1 + 1", "id": "Add_IndependentVar_sample_from_FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS_to_36", "old_id": "FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS"}
{"code": "def binaryMedian ( m , r , c ) :\n    mi = sys.maxsize\n    mx = - sys.maxsize - 1\n    idx_v901 = 0\n    list_blg9 = range ( r )\n    while idx_v901 < len(list_blg9):\n        i = list_blg9[idx_v901]\n        if m [ i ] [ 0 ] < mi :\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ c - 1 ] > mx :\n            mx = m [ i ] [ c - 1 ]\n        idx_v901 = idx_v901 + 1\n    desired = ( r * c + 1 ) // 2\n    var_zn4 = 45\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ]\n        idx_c205 = 0\n        list_85fj = range ( r )\n        while idx_c205 < len(list_85fj):\n            i = list_85fj[idx_c205]\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n            idx_c205 = idx_c205 + 1\n        if not place [ 0 ] < desired:\n            mx = mid\n        else:\n            mi = mid + 1\n    print ( \"Median is\" , mi )\n    return mi", "id": "Add_IndependentVar_sample_from_FIND_MEDIAN_ROW_WISE_SORTED_MATRIX_to_37", "old_id": "FIND_MEDIAN_ROW_WISE_SORTED_MATRIX"}
{"code": "def count ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    lookup = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    idx_eiwz = 0\n    list_50jx = range ( n + 1 )\n    while idx_eiwz < len(list_50jx):\n        i = list_50jx[idx_eiwz]\n        lookup [ 0 ] [ i ] = 0\n        idx_eiwz = idx_eiwz + 1\n    idx_iwho = 0\n    list_a9ir = range ( m + 1 )\n    while idx_iwho < len(list_a9ir):\n        i = list_a9ir[idx_iwho]\n        lookup [ i ] [ 0 ] = 1\n        idx_iwho = idx_iwho + 1\n    idx_4dk6 = 0\n    list_0ilo = range ( 1 , m + 1 )\n    while idx_4dk6 < len(list_0ilo):\n        i = list_0ilo[idx_4dk6]\n        idx_9wao = 0\n        list_rsc6 = range ( 1 , n + 1 )\n        while idx_9wao < len(list_rsc6):\n            j = list_rsc6[idx_9wao]\n            if not a [ i - 1 ] == b [ j - 1 ]:\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ]\n            else:\n                lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ]\n            idx_9wao = idx_9wao + 1\n        idx_4dk6 = idx_4dk6 + 1\n    return lookup [ m ] [ n ]\n    var_v3u = 92", "id": "Add_IndependentVar_sample_from_FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1_to_38", "old_id": "FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1"}
{"code": "def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    idx_pae7 = 0\n    list_xf6o = range ( 2 , n + 1 )\n    while idx_pae7 < len(list_xf6o):\n        i = list_xf6o[idx_pae7]\n        if not ( int ( i % 2 ) == 0 ):\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n        else:\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        idx_pae7 = idx_pae7 + 1\n    return DP [ n ]\n    var_niu = 20", "id": "Add_IndependentVar_sample_from_FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES_to_39", "old_id": "FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES"}
{"code": "def pairSum ( mat , n , sum ) :\n    idx_307l = 0\n    var_w3q = 12\n    list_wdnm = range ( n )\n    while idx_307l < len(list_wdnm):\n        i = list_wdnm[idx_307l]\n        mat [ i ].sort ( )\n        idx_307l = idx_307l + 1\n    idx_w1zc = 0\n    list_4hfs = range ( n - 1 )\n    while idx_w1zc < len(list_4hfs):\n        i = list_4hfs[idx_w1zc]\n        idx_v1wd = 0\n        list_lp8h = range ( i + 1 , n )\n        while idx_v1wd < len(list_lp8h):\n            j = list_lp8h[idx_v1wd]\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if not ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ):\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1\n                else:\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n            idx_v1wd = idx_v1wd + 1\n        idx_w1zc = idx_w1zc + 1", "id": "Add_IndependentVar_sample_from_FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS_to_40", "old_id": "FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS"}
{"code": "def evenSum ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    var_9p4 = 38\n    idx_4d2l = 0\n    list_17xz = range ( 0 , n + 1 )\n    while idx_4d2l < len(list_17xz):\n        i = list_17xz[idx_4d2l]\n        idx_27li = 0\n        list_4xho = range ( 0 , min ( i , n ) + 1 )\n        while idx_27li < len(list_4xho):\n            j = list_4xho[idx_27li]\n            if not j == 0 or j == i:\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            else:\n                C [ i ] [ j ] = 1\n            idx_27li = idx_27li + 1\n        idx_4d2l = idx_4d2l + 1\n    sum = 0 ;\n    idx_osau = 0\n    list_qojf = range ( 0 , n + 1 )\n    while idx_osau < len(list_qojf):\n        i = list_qojf[idx_osau]\n        if i % 2 == 0 :\n            sum = sum + C [ n ] [ i ]\n        idx_osau = idx_osau + 1\n    return sum", "id": "Add_IndependentVar_sample_from_FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_to_41", "old_id": "FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    idx_683g = 0\n    list_n4pq = range ( n - 1 )\n    while idx_683g < len(list_n4pq):\n        i = list_n4pq[idx_683g]\n        s = set ( )\n        idx_nat3 = 0\n        list_wsfg = range ( i + 1 , n )\n        while idx_nat3 < len(list_wsfg):\n            j = list_wsfg[idx_nat3]\n            x = - ( arr [ i ] + arr [ j ] )\n            if not x in s:\n                s.add ( arr [ j ] )\n            else:\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            idx_nat3 = idx_nat3 + 1\n        idx_683g = idx_683g + 1\n    if found == False :\n        print ( \"No Triplet Found\" )\n    var_2zh = 54", "id": "Add_IndependentVar_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1_to_42", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1"}
{"code": "def findTriplets ( arr , n ) :\n    found = False\n    arr.sort ( )\n    idx_osg8 = 0\n    list_sycg = range ( 0 , n - 1 )\n    var_j3l = 85\n    while idx_osg8 < len(list_sycg):\n        i = list_sycg[idx_osg8]\n        l = i + 1\n        r = n - 1\n        x = arr [ i ]\n        while ( l < r ) :\n            if not ( x + arr [ l ] + arr [ r ] == 0 ):\n                if ( x + arr [ l ] + arr [ r ] < 0 ) :\n                    l += 1\n                else :\n                    r -= 1\n            else:\n                print ( x , arr [ l ] , arr [ r ] )\n                l += 1\n                r -= 1\n                found = True\n        idx_osg8 = idx_osg8 + 1\n    if ( found == False ) :\n        print ( \" No Triplet Found\" )", "id": "Add_IndependentVar_sample_from_FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2_to_43", "old_id": "FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2"}
{"code": "def firstElement ( arr , n , k ) :\n    count_map = { }\n    idx_vuxf = 0\n    list_4mfg = range ( 0 , n )\n    while idx_vuxf < len(list_4mfg):\n        i = list_4mfg[idx_vuxf]\n        if not ( arr [ i ] in count_map.keys ( ) ):\n            count_map [ arr [ i ] ] = 1\n        else:\n            count_map [ arr [ i ] ] += 1\n        i += 1\n        idx_vuxf = idx_vuxf + 1\n    var_t8j = 52\n    idx_r6d5 = 0\n    list_r2fl = range ( 0 , n )\n    while idx_r6d5 < len(list_r2fl):\n        i = list_r2fl[idx_r6d5]\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n        idx_r6d5 = idx_r6d5 + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY_to_44", "old_id": "FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY"}
{"code": "def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    idx_j8p0 = 0\n    list_amqp = range ( n )\n    while idx_j8p0 < len(list_amqp):\n        i = list_amqp[idx_j8p0]\n        if not arr [ i ] in Hash.keys ( ):\n            Hash [ arr [ i ] ] = 1\n        else:\n            Hash [ arr [ i ] ] += 1\n        idx_j8p0 = idx_j8p0 + 1\n    var_deg = 80\n    max_count = 0\n    res = - 1\n    idx_qeja = 0\n    list_uqlm = Hash\n    while idx_qeja < len(list_uqlm):\n        i = list_uqlm[idx_qeja]\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n        idx_qeja = idx_qeja + 1\n    return res", "id": "Add_IndependentVar_sample_from_FREQUENT_ELEMENT_ARRAY_1_to_45", "old_id": "FREQUENT_ELEMENT_ARRAY_1"}
{"code": "def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    idx_bi9w = 0\n    list_bi6m = range ( n + 1 )\n    var_3w9 = 94\n    while idx_bi9w < len(list_bi6m):\n        i = list_bi6m[idx_bi9w]\n        if not ( i <= 2 ):\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n        else:\n            dp [ i ] = i\n        idx_bi9w = idx_bi9w + 1\n    return dp [ n ]", "id": "Add_IndependentVar_sample_from_FRIENDS_PAIRING_PROBLEM_to_46", "old_id": "FRIENDS_PAIRING_PROBLEM"}
{"code": "def isSubSeqDivisible ( str ) :\n    l = len ( str )\n    arr = [ 0 ] * l\n    var_b7z = 10\n    idx_xemi = 0\n    list_1ot7 = range ( 0 , l )\n    while idx_xemi < len(list_1ot7):\n        i = list_1ot7[idx_xemi]\n        idx_2168 = 0\n        list_mr3e = range ( i , l )\n        while idx_2168 < len(list_mr3e):\n            j = list_mr3e[idx_2168]\n            idx_smt1 = 0\n            list_nxlz = range ( j , l )\n            while idx_smt1 < len(list_nxlz):\n                k = list_nxlz[idx_smt1]\n                if not ( arr [ i ] % 8 == 0 ):\n                    if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 and i != j ) :\n                        return True\n                    elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 and i != j and j != k and i != k ) :\n                        return True\n                else:\n                    return True\n                idx_smt1 = idx_smt1 + 1\n            idx_2168 = idx_2168 + 1\n        idx_xemi = idx_xemi + 1\n    return False", "id": "Add_IndependentVar_sample_from_GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_to_47", "old_id": "GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8"}
{"code": "def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0\n    idx_xlk6 = 0\n    var_mv7 = 27\n    list_herp = range ( 1 , m + 1 )\n    while idx_xlk6 < len(list_herp):\n        i = list_herp[idx_xlk6]\n        if not ( nxtbb < n ):\n            maxRev [ i ] = maxRev [ i - 1 ]\n        else:\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] )\n                nxtbb += 1\n        idx_xlk6 = idx_xlk6 + 1\n    return maxRev [ m ]", "id": "Add_IndependentVar_sample_from_HIGHWAY_BILLBOARD_PROBLEM_to_48", "old_id": "HIGHWAY_BILLBOARD_PROBLEM"}
{"code": "def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    idx_xqg6 = 0\n    list_bvi1 = arr\n    while idx_xqg6 < len(list_bvi1):\n        i = list_bvi1[idx_xqg6]\n        if not ( i < 0 ):\n            hash [ i ] = hash.get ( i , 0 ) + 1\n        else:\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        idx_xqg6 = idx_xqg6 + 1\n    idx_5d3f = 0\n    list_lyoa = arr\n    while idx_5d3f < len(list_lyoa):\n        i = list_lyoa[idx_5d3f]\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n        idx_5d3f = idx_5d3f + 1\n    return - 1\n    var_uxa = 61", "id": "Add_IndependentVar_sample_from_INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_to_49", "old_id": "INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY"}
{"code": "def kthLargestSum ( arr , n , k ) :\n    sum = [ ]\n    sum.append ( 0 )\n    sum.append ( arr [ 0 ] )\n    var_n95 = 34\n    idx_idvc = 0\n    list_97b2 = range ( 2 , n + 1 )\n    while idx_idvc < len(list_97b2):\n        i = list_97b2[idx_idvc]\n        sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )\n        idx_idvc = idx_idvc + 1\n    Q = [ ]\n    heapq.heapify ( Q )\n    idx_xl17 = 0\n    list_b3gk = range ( 1 , n + 1 )\n    while idx_xl17 < len(list_b3gk):\n        i = list_b3gk[idx_xl17]\n        idx_49ey = 0\n        list_asq5 = range ( i , n + 1 )\n        while idx_49ey < len(list_asq5):\n            j = list_asq5[idx_49ey]\n            x = sum [ j ] - sum [ i - 1 ]\n            if not len ( Q ) < k:\n                if Q [ 0 ] < x :\n                    heapq.heappop ( Q )\n                    heapq.heappush ( Q , x )\n            else:\n                heapq.heappush ( Q , x )\n            idx_49ey = idx_49ey + 1\n        idx_xl17 = idx_xl17 + 1\n    return Q [ 0 ]", "id": "Add_IndependentVar_sample_from_K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY_to_50", "old_id": "K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY"}
{"code": "def findSubArray ( arr , n ) :\n    sum = 0\n    var_mcp = 32\n    maxsize = - 1\n    idx_2hr0 = 0\n    list_2i7z = range ( 0 , n - 1 )\n    while idx_2hr0 < len(list_2i7z):\n        i = list_2i7z[idx_2hr0]\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        idx_yc4b = 0\n        list_hnx9 = range ( i + 1 , n )\n        while idx_yc4b < len(list_hnx9):\n            j = list_hnx9[idx_yc4b]\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = j - i + 1\n                startindex = i\n            idx_yc4b = idx_yc4b + 1\n        idx_2hr0 = idx_2hr0 + 1\n    if not ( maxsize == - 1 ):\n        print ( startindex , \"to\" , startindex + maxsize - 1 )\n    else:\n        print ( \"No such subarray\" )\n    return maxsize", "id": "Add_IndependentVar_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_to_51", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S"}
{"code": "def maxLen ( arr , n ) :\n    hash_map = { }\n    curr_sum = 0\n    max_len = 0\n    ending_index = - 1\n    idx_60pc = 0\n    list_gsho = range ( 0 , n )\n    while idx_60pc < len(list_gsho):\n        i = list_gsho[idx_60pc]\n        if not ( arr [ i ] == 0 ):\n            arr [ i ] = 1\n        else:\n            arr [ i ] = - 1\n        idx_60pc = idx_60pc + 1\n    idx_59ua = 0\n    list_jq61 = range ( 0 , n )\n    while idx_59ua < len(list_jq61):\n        i = list_jq61[idx_59ua]\n        curr_sum = curr_sum + arr [ i ]\n        if ( curr_sum == 0 ) :\n            max_len = i + 1\n            ending_index = i\n        if not ( curr_sum + n ) in hash_map:\n            hash_map[curr_sum + n] = i\n        else:\n            if max_len < i - hash_map [ curr_sum + n ] :\n                max_len = i - hash_map [ curr_sum + n ]\n                ending_index = i\n        idx_59ua = idx_59ua + 1\n    idx_9q5o = 0\n    list_35ha = range ( 0 , n )\n    while idx_9q5o < len(list_35ha):\n        i = list_35ha[idx_9q5o]\n        if not ( arr [ i ] == - 1 ):\n            arr [ i ] = 1\n        else:\n            arr [ i ] = 0\n        idx_9q5o = idx_9q5o + 1\n    print ( ending_index - max_len + 1 , end = \" \" )\n    var_sx3 = 56\n    print ( \"to\" , end = \" \" )\n    print ( ending_index )\n    return max_len", "id": "Add_IndependentVar_sample_from_LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1_to_52", "old_id": "LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1"}
{"code": "def maxLength ( s , n ) :\n    invalidOpenBraces = 0\n    var_h5i = 13\n    invalidCloseBraces = 0\n    idx_3mvt = 0\n    list_eovp = range ( n )\n    while idx_3mvt < len(list_eovp):\n        i = list_eovp[idx_3mvt]\n        if not ( s [ i ] == '(' ):\n            if ( invalidOpenBraces == 0 ) :\n                invalidCloseBraces += 1\n            else :\n                invalidOpenBraces -= 1\n        else:\n            invalidOpenBraces += 1\n        idx_3mvt = idx_3mvt + 1\n    return ( n - ( invalidOpenBraces + invalidCloseBraces ) )", "id": "Add_IndependentVar_sample_from_LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1_to_53", "old_id": "LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1"}
{"code": "def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    var_l3g = 97\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    idx_72kp = 0\n    list_lkie = range ( n )\n    while idx_72kp < len(list_lkie):\n        i = list_lkie[idx_72kp]\n        L [ i ] [ n - 1 ] = 2\n        idx_72kp = idx_72kp + 1\n    idx_73fg = 0\n    list_y51n = range ( n - 2 , 0 , - 1 )\n    while idx_73fg < len(list_y51n):\n        j = list_y51n[idx_73fg]\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if not ( set [ i ] + set [ k ] < 2 * set [ j ] ):\n                if ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                    L [ i ] [ j ] = 2\n                    i -= 1\n                else :\n                    L [ i ] [ j ] = L [ j ] [ k ] + 1\n                    llap = max ( llap , L [ i ] [ j ] )\n                    i -= 1\n                    k += 1\n            else:\n                k += 1\n        while ( i >= 0 ) :\n            L [ i ] [ j ] = 2\n            i -= 1\n        idx_73fg = idx_73fg + 1\n    return llap", "id": "Add_IndependentVar_sample_from_LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY_to_54", "old_id": "LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY"}
{"code": "def LCSubStr ( X , Y , m , n ) :\n    LCSuff = [ [ 0 for k in range ( n + 1 ) ] for l in range ( m + 1 ) ]\n    result = 0\n    idx_f7ml = 0\n    list_l4up = range ( m + 1 )\n    while idx_f7ml < len(list_l4up):\n        i = list_l4up[idx_f7ml]\n        idx_dyri = 0\n        list_vd6w = range ( n + 1 )\n        while idx_dyri < len(list_vd6w):\n            j = list_vd6w[idx_dyri]\n            if not ( i == 0 or j == 0 ):\n                if ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                    LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1\n                    result = max ( result , LCSuff [ i ] [ j ] )\n                else :\n                    LCSuff [ i ] [ j ] = 0\n            else:\n                LCSuff [ i ] [ j ] = 0\n            idx_dyri = idx_dyri + 1\n        idx_f7ml = idx_f7ml + 1\n    var_fc2 = 81\n    return result", "id": "Add_IndependentVar_sample_from_LONGEST_COMMON_SUBSTRING_to_55", "old_id": "LONGEST_COMMON_SUBSTRING"}
{"code": "def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_2icm = 0\n    list_ur6o = range ( 1 , n + 1 )\n    while idx_2icm < len(list_ur6o):\n        i = list_ur6o[idx_2icm]\n        idx_d530 = 0\n        list_n8ai = range ( 1 , n + 1 )\n        while idx_d530 < len(list_n8ai):\n            j = list_n8ai[idx_d530]\n            if not ( str [ i - 1 ] == str [ j - 1 ] and i != j ):\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            else:\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            idx_d530 = idx_d530 + 1\n        idx_2icm = idx_2icm + 1\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if not ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ):\n            if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n                i -= 1\n            else :\n                j -= 1\n        else:\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n    var_86n = 7\n    res = ''.join ( reversed ( res ) )\n    return res", "id": "Add_IndependentVar_sample_from_LONGEST_REPEATED_SUBSEQUENCE_1_to_56", "old_id": "LONGEST_REPEATED_SUBSEQUENCE_1"}
{"code": "def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    idx_q12o = 0\n    list_3ukr = range ( 1 , n + 1 )\n    while idx_q12o < len(list_3ukr):\n        i = list_3ukr[idx_q12o]\n        idx_6n80 = 0\n        list_3k85 = range ( 1 , n + 1 )\n        while idx_6n80 < len(list_3k85):\n            j = list_3k85[idx_6n80]\n            if not ( str [ i - 1 ] == str [ j - 1 ] and i != j ):\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n            else:\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            idx_6n80 = idx_6n80 + 1\n        idx_q12o = idx_q12o + 1\n    var_7eb = 37\n    return dp [ n ] [ n ]", "id": "Add_IndependentVar_sample_from_LONGEST_REPEATING_SUBSEQUENCE_to_57", "old_id": "LONGEST_REPEATING_SUBSEQUENCE"}
{"code": "def lenOfLongSubarr ( arr , n ) :\n    um = { }\n    sum = 0\n    maxLen = 0\n    idx_tgen = 0\n    list_5my1 = range ( n )\n    while idx_tgen < len(list_5my1):\n        i = list_5my1[idx_tgen]\n        if not arr [ i ] == 0:\n            sum += 1\n        else:\n            sum += - 1\n        if not ( sum == 1 ):\n            if ( sum not in um ) :\n                um [ sum ] = i\n        else:\n            maxLen = i + 1\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n        idx_tgen = idx_tgen + 1\n    var_gu5 = 96\n    return maxLen", "id": "Add_IndependentVar_sample_from_LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S_to_58", "old_id": "LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S"}
{"code": "def longSubarrWthSumDivByK ( arr , n , k ) :\n    um = { }\n    mod_arr = [ 0 for i in range ( n ) ]\n    max = 0\n    curr_sum = 0\n    var_osk = 14\n    idx_9fxz = 0\n    list_hq2f = range ( n )\n    while idx_9fxz < len(list_hq2f):\n        i = list_hq2f[idx_9fxz]\n        curr_sum += arr [ i ]\n        mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k\n        idx_9fxz = idx_9fxz + 1\n    idx_vbhg = 0\n    list_ouen = range ( n )\n    while idx_vbhg < len(list_ouen):\n        i = list_ouen[idx_vbhg]\n        if not ( mod_arr [ i ] == 0 ):\n            if ( mod_arr [ i ] in um ) :\n                um [ mod_arr [ i ] ] = i\n            else :\n                if ( max < ( i - um [ mod_arr [ i ] ] ) ) :\n                    max = i - um [ mod_arr [ i ] ]\n        else:\n            max = i + 1\n        idx_vbhg = idx_vbhg + 1\n    return max", "id": "Add_IndependentVar_sample_from_LONGEST_SUBARRAY_SUM_DIVISIBLE_K_to_59", "old_id": "LONGEST_SUBARRAY_SUM_DIVISIBLE_K"}
{"code": "def findMaxVal ( arr , n , num , maxLimit ) :\n    ind = - 1\n    var_wdj = 64\n    val = - 1\n    dp = [ [ 0 for i in range ( maxLimit + 1 ) ] for j in range ( n ) ]\n    idx_1cyi = 0\n    list_8e2f = range ( n )\n    while idx_1cyi < len(list_8e2f):\n        ind = list_8e2f[idx_1cyi]\n        idx_164z = 0\n        list_bntg = range ( maxLimit + 1 )\n        while idx_164z < len(list_bntg):\n            val = list_bntg[idx_164z]\n            if not ( ind == 0 ):\n                if ( val - arr [ ind ] >= 0 and val + arr [ ind ] <= maxLimit ) :\n                    if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 or dp [ ind - 1 ] [ val + arr [ ind ] ] == 1 ) :\n                        dp [ ind ] [ val ] = 1\n                elif ( val - arr [ ind ] >= 0 ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ ind ] ]\n                elif ( val + arr [ ind ] <= maxLimit ) :\n                    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ ind ] ]\n                else :\n                    dp [ ind ] [ val ] = 0\n            else:\n                if ( num - arr [ ind ] == val or num + arr [ ind ] == val ) :\n                    dp [ ind ] [ val ] = 1\n                else :\n                    dp [ ind ] [ val ] = 0\n            idx_164z = idx_164z + 1\n        idx_1cyi = idx_1cyi + 1\n    idx_r0ms = 0\n    list_0tk2 = range ( maxLimit , - 1 , - 1 )\n    while idx_r0ms < len(list_0tk2):\n        val = list_0tk2[idx_r0ms]\n        if ( dp [ n - 1 ] [ val ] == 1 ) :\n            return val\n        idx_r0ms = idx_r0ms + 1\n    return - 1", "id": "Add_IndependentVar_sample_from_MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER_to_60", "old_id": "MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER"}
{"code": "def maxcoefficientvalue ( n ) :\n    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    idx_yisn = 0\n    list_ed03 = range ( n + 1 )\n    while idx_yisn < len(list_ed03):\n        i = list_ed03[idx_yisn]\n        idx_ycnv = 0\n        list_ngt8 = range ( min ( i , n ) + 1 )\n        while idx_ycnv < len(list_ngt8):\n            j = list_ngt8[idx_ycnv]\n            if not ( j == 0 or j == i ):\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            else:\n                C [ i ] [ j ] = 1\n            idx_ycnv = idx_ycnv + 1\n        idx_yisn = idx_yisn + 1\n    maxvalue = 0\n    idx_90e1 = 0\n    var_7up = 83\n    list_0iel = range ( n + 1 )\n    while idx_90e1 < len(list_0iel):\n        i = list_0iel[idx_90e1]\n        maxvalue = max ( maxvalue , C [ n ] [ i ] )\n        idx_90e1 = idx_90e1 + 1\n    return maxvalue", "id": "Add_IndependentVar_sample_from_MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE_to_61", "old_id": "MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE"}
{"code": "def maxRepeating ( str ) :\n    n = len ( str )\n    var_bpo = 51\n    count = 0\n    res = str [ 0 ]\n    cur_count = 1\n    idx_lp5b = 0\n    list_i5h8 = range ( n )\n    while idx_lp5b < len(list_i5h8):\n        i = list_i5h8[idx_lp5b]\n        if not ( i < n - 1 and str [ i ] == str [ i + 1 ] ):\n            if cur_count > count :\n                count = cur_count\n                res = str [ i ]\n            cur_count = 1\n        else:\n            cur_count += 1\n        idx_lp5b = idx_lp5b + 1\n    return res", "id": "Add_IndependentVar_sample_from_MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1_to_62", "old_id": "MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1"}
{"code": "def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    idx_cerz = 0\n    list_4sgn = range ( n )\n    while idx_cerz < len(list_4sgn):\n        i = list_4sgn[idx_cerz]\n        freq [ arr [ i ] ] += 1\n        idx_cerz = idx_cerz + 1\n    var_p64 = 89\n    ans = 0\n    idx_8flq = 0\n    list_zl9e = range ( n )\n    while idx_8flq < len(list_zl9e):\n        i = list_zl9e[idx_8flq]\n        idx_ileb = 0\n        list_7w45 = range ( n )\n        while idx_ileb < len(list_7w45):\n            j = list_7w45[idx_ileb]\n            if not freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ]:\n                if freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                    ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n            else:\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            idx_ileb = idx_ileb + 1\n        idx_8flq = idx_8flq + 1\n    return ans", "id": "Add_IndependentVar_sample_from_MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER_to_63", "old_id": "MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER"}
{"code": "def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    idx_2tl5 = 0\n    list_evqk = range ( n )\n    while idx_2tl5 < len(list_evqk):\n        i = list_evqk[idx_2tl5]\n        if not arr [ i ] not in mp.keys ( ):\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n        else:\n            mp [ arr [ i ] ] = i\n        idx_2tl5 = idx_2tl5 + 1\n    var_ly7 = 79\n    return maxDict", "id": "Add_IndependentVar_sample_from_MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY_to_64", "old_id": "MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY"}
{"code": "def maxNumOfChocolates ( arr , n , k ) :\n    um , curr_rem , maxSum = { } , 0 , 0\n    sm = [ 0 ] * n\n    sm [ 0 ] = arr [ 0 ]\n    idx_hnbl = 0\n    list_zqk7 = range ( 1 , n )\n    while idx_hnbl < len(list_zqk7):\n        i = list_zqk7[idx_hnbl]\n        sm [ i ] = sm [ i - 1 ] + arr [ i ]\n        idx_hnbl = idx_hnbl + 1\n    idx_hebs = 0\n    var_phb = 76\n    list_usm4 = range ( n )\n    while idx_hebs < len(list_usm4):\n        i = list_usm4[idx_hebs]\n        curr_rem = sm [ i ] % k\n        if not ( not curr_rem and maxSum < sm [ i ] ):\n            if ( not curr_rem in um ) :\n                um [ curr_rem ] = i\n            elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) ) :\n                maxSum = sm [ i ] - sm [ um [ curr_rem ] ]\n        else:\n            maxSum = sm [ i ]\n        idx_hebs = idx_hebs + 1\n    return maxSum // k", "id": "Add_IndependentVar_sample_from_MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS_to_65", "old_id": "MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS"}
{"code": "def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    idx_6x1s = 0\n    list_ho1q = range ( 1 , n )\n    while idx_6x1s < len(list_ho1q):\n        i = list_ho1q[idx_6x1s]\n        idx_w5oc = 0\n        list_akcm = range ( i )\n        while idx_w5oc < len(list_akcm):\n            j = list_akcm[idx_w5oc]\n            if not ( arr [ j ] > arr [ i ] ):\n                if ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                    inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n            else:\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            idx_w5oc = idx_w5oc + 1\n        idx_6x1s = idx_6x1s + 1\n    var_p1l = 13\n    result = - 2147483648\n    idx_f05l = 0\n    list_ue7h = range ( n )\n    while idx_f05l < len(list_ue7h):\n        i = list_ue7h[idx_f05l]\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n        idx_f05l = idx_f05l + 1\n    return result", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM_to_66", "old_id": "MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM"}
{"code": "def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    idx_chx8 = 0\n    list_z3qb = range ( 1 , n )\n    while idx_chx8 < len(list_z3qb):\n        i = list_z3qb[idx_chx8]\n        if not ( arr [ i ] > arr [ i - 1 ] ):\n            msis [ i ] = arr [ i ]\n        else:\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        idx_chx8 = idx_chx8 + 1\n    msds [ n - 1 ] = arr [ n - 1 ]\n    idx_xjef = 0\n    list_qmd2 = range ( n - 2 , - 1 , - 1 )\n    while idx_xjef < len(list_qmd2):\n        i = list_qmd2[idx_xjef]\n        if not ( arr [ i ] > arr [ i + 1 ] ):\n            msds [ i ] = arr [ i ]\n        else:\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        idx_xjef = idx_xjef + 1\n    idx_7twp = 0\n    list_lw1n = range ( n )\n    var_94a = 63\n    while idx_7twp < len(list_lw1n):\n        i = list_lw1n[idx_7twp]\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n        idx_7twp = idx_7twp + 1\n    return max_sum", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_BITONIC_SUBARRAY_to_67", "old_id": "MAXIMUM_SUM_BITONIC_SUBARRAY"}
{"code": "def maxSum ( arr , N , k ) :\n    MS = [ 0 for i in range ( N ) ]\n    MS [ N - 1 ] = arr [ N - 1 ]\n    idx_lfd8 = 0\n    list_cxez = range ( N - 2 , - 1 , - 1 )\n    var_6hs = 90\n    while idx_lfd8 < len(list_cxez):\n        i = list_cxez[idx_lfd8]\n        if not ( i + k + 1 >= N ):\n            MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ i + 1 ] )\n        else:\n            MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] )\n        idx_lfd8 = idx_lfd8 + 1\n    return MS [ 0 ]", "id": "Add_IndependentVar_sample_from_MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS_to_68", "old_id": "MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS"}
{"code": "def getMinDiff ( arr , n , k ) :\n    if ( n == 1 ) :\n        return 0\n    arr.sort ( )\n    ans = arr [ n - 1 ] - arr [ 0 ]\n    small = arr [ 0 ] + k\n    big = arr [ n - 1 ] - k\n    if ( small > big ) :\n        small , big = big , small\n    idx_yrgo = 0\n    list_28yt = range ( 1 , n - 1 )\n    while idx_yrgo < len(list_28yt):\n        i = list_28yt[idx_yrgo]\n        subtract = arr [ i ] - k\n        add = arr [ i ] + k\n        if ( subtract >= small or add <= big ) :\n            continue\n        if not ( big - subtract <= add - small ):\n            big = add\n        else:\n            small = subtract\n        idx_yrgo = idx_yrgo + 1\n    var_chv = 22\n    return min ( ans , big - small )", "id": "Add_IndependentVar_sample_from_MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS_to_69", "old_id": "MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS"}
{"code": "def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    idx_dhnj = 0\n    list_f7hn = range ( n )\n    while idx_dhnj < len(list_f7hn):\n        i = list_f7hn[idx_dhnj]\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n        idx_dhnj = idx_dhnj + 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    idx_c63p = 0\n    list_2895 = range ( W + 1 )\n    while idx_c63p < len(list_2895):\n        i = list_2895[idx_c63p]\n        min_cost [ 0 ] [ i ] = INF\n        idx_c63p = idx_c63p + 1\n    idx_hosp = 0\n    list_1qgt = range ( 1 , n + 1 )\n    while idx_hosp < len(list_1qgt):\n        i = list_1qgt[idx_hosp]\n        min_cost [ i ] [ 0 ] = 0\n        idx_hosp = idx_hosp + 1\n    var_14g = 57\n    idx_3b7q = 0\n    list_6feb = range ( 1 , n + 1 )\n    while idx_3b7q < len(list_6feb):\n        i = list_6feb[idx_3b7q]\n        idx_4nkx = 0\n        list_841j = range ( 1 , W + 1 )\n        while idx_4nkx < len(list_841j):\n            j = list_841j[idx_4nkx]\n            if not ( wt [ i - 1 ] > j ):\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n            else:\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            idx_4nkx = idx_4nkx + 1\n        idx_3b7q = idx_3b7q + 1\n    if not ( min_cost [ n ] [ W ] == INF ):\n        return min_cost [ n ] [ W ]\n    else:\n        return - 1", "id": "Add_IndependentVar_sample_from_MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG_to_70", "old_id": "MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG"}
{"code": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = 0\n    idx_l27g = 0\n    var_xcv = 73\n    list_1k4j = range ( 0 , n )\n    while idx_l27g < len(list_1k4j):\n        i = list_1k4j[idx_l27g]\n        if not ( ( max1 - arr [ i ] ) % k != 0 ):\n            res += ( max1 - arr [ i ] ) / k\n        else:\n            return - 1\n        idx_l27g = idx_l27g + 1\n    return int ( res )", "id": "Add_IndependentVar_sample_from_MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL_to_71", "old_id": "MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL"}
{"code": "def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    var_m7o = 22\n    idx_3rxn = 0\n    list_67dc = range ( n - 2 , - 1 , - 1 )\n    while idx_3rxn < len(list_67dc):\n        i = list_67dc[idx_3rxn]\n        if not ( arr [ i ] == 0 ):\n            if ( arr [ i ] >= n - i - 1 ) :\n                jumps [ i ] = 1\n            else :\n                min = float ( 'inf' )\n                idx_7ida = 0\n                list_52xj = range ( i + 1 , n )\n                while idx_7ida < len(list_52xj):\n                    j = list_52xj[idx_7ida]\n                    if ( j <= arr [ i ] + i ) :\n                        if ( min > jumps [ j ] ) :\n                            min = jumps [ j ]\n                    idx_7ida = idx_7ida + 1\n                if ( min != float ( 'inf' ) ) :\n                    jumps [ i ] = min + 1\n                else :\n                    jumps [ i ] = min\n        else:\n            jumps [ i ] = float ( 'inf' )\n        idx_3rxn = idx_3rxn + 1\n    return jumps [ 0 ]", "id": "Add_IndependentVar_sample_from_MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2_to_72", "old_id": "MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2"}
{"code": "def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    idx_3fyj = 0\n    list_qrbe = range ( 4 , n + 1 )\n    while idx_3fyj < len(list_qrbe):\n        i = list_qrbe[idx_3fyj]\n        dp.append ( i )\n        idx_nfvb = 0\n        list_tcbz = range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 )\n        while idx_nfvb < len(list_tcbz):\n            x = list_tcbz[idx_nfvb]\n            temp = x * x ;\n            if not temp > i:\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n            else:\n                break\n            idx_nfvb = idx_nfvb + 1\n        idx_3fyj = idx_3fyj + 1\n    var_sqr = 72\n    return dp [ n ]", "id": "Add_IndependentVar_sample_from_MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1_to_73", "old_id": "MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1"}
{"code": "def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    temp = 0\n    idx_kq17 = 0\n    list_rk9a = range ( n )\n    var_q4g = 58\n    while idx_kq17 < len(list_rk9a):\n        i = list_rk9a[idx_kq17]\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if not ( pro < 0 and b [ i ] < 0 ):\n            if ( pro < 0 and a [ i ] < 0 ) :\n                temp = ( a [ i ] - 2 * k ) * b [ i ]\n            elif ( pro > 0 and a [ i ] < 0 ) :\n                temp = ( a [ i ] + 2 * k ) * b [ i ]\n            elif ( pro > 0 and a [ i ] > 0 ) :\n                temp = ( a [ i ] - 2 * k ) * b [ i ]\n        else:\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n        idx_kq17 = idx_kq17 + 1\n    return res - diff", "id": "Add_IndependentVar_sample_from_MINIMUM_SUM_PRODUCT_TWO_ARRAYS_to_74", "old_id": "MINIMUM_SUM_PRODUCT_TWO_ARRAYS"}
{"code": "def solve ( arr , n ) :\n    arr.sort ( )\n    var_7il = 71\n    a = 0\n    b = 0\n    idx_2go9 = 0\n    list_ks4x = range ( n )\n    while idx_2go9 < len(list_ks4x):\n        i = list_ks4x[idx_2go9]\n        if not ( i % 2 != 0 ):\n            b = b * 10 + arr [ i ]\n        else:\n            a = a * 10 + arr [ i ]\n        idx_2go9 = idx_2go9 + 1\n    return a + b", "id": "Add_IndependentVar_sample_from_MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_to_75", "old_id": "MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY"}
{"code": "def minTimeForWritingChars ( N , insert , remove , copy ) :\n    if N == 0 :\n        return 0\n    if N == 1 :\n        return insert\n    dp = [ 0 ] * ( N + 1 )\n    idx_ryep = 0\n    list_dtna = range ( 1 , N + 1 )\n    while idx_ryep < len(list_dtna):\n        i = list_dtna[idx_ryep]\n        if not i % 2 == 0:\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ ( i + 1 ) // 2 ] + copy + remove )\n        else:\n            dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ i // 2 ] + copy )\n        idx_ryep = idx_ryep + 1\n    return dp [ N ]\n    var_kx2 = 69", "id": "Add_IndependentVar_sample_from_MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION_to_76", "old_id": "MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION"}
{"code": "def answer ( n ) :\n    dp = [ [ 0 for x in range ( 10 ) ] for y in range ( n + 1 ) ]\n    if ( n == 1 ) :\n        return 10\n    idx_bpv7 = 0\n    list_f0c3 = range ( 10 )\n    while idx_bpv7 < len(list_f0c3):\n        j = list_f0c3[idx_bpv7]\n        dp [ 1 ] [ j ] = 1\n        idx_bpv7 = idx_bpv7 + 1\n    var_ena = 19\n    idx_9np5 = 0\n    list_sl72 = range ( 2 , n + 1 )\n    while idx_9np5 < len(list_sl72):\n        i = list_sl72[idx_9np5]\n        idx_zh5n = 0\n        list_j0t6 = range ( 10 )\n        while idx_zh5n < len(list_j0t6):\n            j = list_j0t6[idx_zh5n]\n            if not ( j == 0 ):\n                if ( j == 9 ) :\n                    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n                else :\n                    dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n            else:\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ]\n            idx_zh5n = idx_zh5n + 1\n        idx_9np5 = idx_9np5 + 1\n    sum = 0\n    idx_njwc = 0\n    list_q2u0 = range ( 1 , 10 )\n    while idx_njwc < len(list_q2u0):\n        j = list_q2u0[idx_njwc]\n        sum = sum + dp [ n ] [ j ]\n        idx_njwc = idx_njwc + 1\n    return sum", "id": "Add_IndependentVar_sample_from_NUMBER_N_DIGIT_STEPPING_NUMBERS_to_77", "old_id": "NUMBER_N_DIGIT_STEPPING_NUMBERS"}
{"code": "def checkPangram ( s ) :\n    List = [ ]\n    idx_w0ts = 0\n    list_0f1w = range ( 26 )\n    while idx_w0ts < len(list_0f1w):\n        i = list_0f1w[idx_w0ts]\n        List.append ( False )\n        idx_w0ts = idx_w0ts + 1\n    idx_gfkq = 0\n    list_ion1 = s\n    while idx_gfkq < len(list_ion1):\n        c = list_ion1[idx_gfkq]\n        if not 'A' <= c and c <= 'Z':\n            if 'a' <= c and c <= 'z':\n                List [ ord ( c ) - ord ( 'a' ) ] = True\n        else:\n            List [ ord ( c ) - ord ( 'A' ) ] = True\n        idx_gfkq = idx_gfkq + 1\n    idx_j54s = 0\n    list_g20h = List\n    while idx_j54s < len(list_g20h):\n        ch = list_g20h[idx_j54s]\n        if ch == False :\n            return False\n        idx_j54s = idx_j54s + 1\n    var_ryb = 86\n    return True", "id": "Add_IndependentVar_sample_from_PANGRAM_CHECKING_to_78", "old_id": "PANGRAM_CHECKING"}
{"code": "def isPrime ( p ) :\n    checkNumber = 2 ** p - 1\n    nextval = 4 % checkNumber\n    idx_947j = 0\n    list_iodx = range ( 1 , p - 1 )\n    var_0qm = 55\n    while idx_947j < len(list_iodx):\n        i = list_iodx[idx_947j]\n        nextval = ( nextval * nextval - 2 ) % checkNumber\n        idx_947j = idx_947j + 1\n    if not ( nextval == 0 ): return False\n    else: return True", "id": "Add_IndependentVar_sample_from_PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES_to_79", "old_id": "PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES"}
{"code": "def find_maximum ( a , n , k ) :\n    b = dict ( )\n    idx_u94s = 0\n    list_5pug = range ( n )\n    while idx_u94s < len(list_5pug):\n        i = list_5pug[idx_u94s]\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if not x not in b.keys ( ):\n            b [ x ] = min ( d , b [ x ] )\n        else:\n            b [ x ] = d\n        idx_u94s = idx_u94s + 1\n    ans = sys.maxsize\n    var_zgs = 13\n    idx_wun1 = 0\n    list_wyg6 = range ( n )\n    while idx_wun1 < len(list_wyg6):\n        i = list_wyg6[idx_wun1]\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n        idx_wun1 = idx_wun1 + 1\n    return ans", "id": "Add_IndependentVar_sample_from_PRINT_MAXIMUM_SHORTEST_DISTANCE_to_80", "old_id": "PRINT_MAXIMUM_SHORTEST_DISTANCE"}
{"code": "def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    idx_eud2 = 0\n    list_dsmx = range ( n )\n    while idx_eud2 < len(list_dsmx):\n        i = list_dsmx[idx_eud2]\n        bestIdx = - 1\n        idx_pjbn = 0\n        list_vmr9 = range ( m )\n        while idx_pjbn < len(list_vmr9):\n            j = list_vmr9[idx_pjbn]\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n            idx_pjbn = idx_pjbn + 1\n        if bestIdx != - 1 :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n        idx_eud2 = idx_eud2 + 1\n    print ( \"Process No.Process Size     Block no.\" )\n    idx_tshx = 0\n    list_dusp = range ( n )\n    while idx_tshx < len(list_dusp):\n        i = list_dusp[idx_tshx]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if not allocation [ i ] != - 1:\n            print ( \"Not Allocated\" )\n        else:\n            print ( allocation [ i ] + 1 )\n        idx_tshx = idx_tshx + 1\n    var_wp3 = 81", "id": "Add_IndependentVar_sample_from_PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_81", "old_id": "PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def isValidISBN ( isbn ) :\n    if len ( isbn ) != 10 :\n        return False\n    _sum = 0\n    var_dqy = 90\n    idx_j329 = 0\n    list_r6l4 = range ( 9 )\n    while idx_j329 < len(list_r6l4):\n        i = list_r6l4[idx_j329]\n        if not 0 <= int ( isbn [ i ] ) <= 9:\n            return False\n        else:\n            _sum += int ( isbn [ i ] ) * ( 10 - i )\n        idx_j329 = idx_j329 + 1\n    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) :\n        return False\n    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )\n    return ( _sum % 11 == 0 )", "id": "Add_IndependentVar_sample_from_PROGRAM_CHECK_ISBN_to_82", "old_id": "PROGRAM_CHECK_ISBN"}
{"code": "def isIdentity ( mat , N ) :\n    idx_f4cb = 0\n    var_gkh = 1\n    list_9mv5 = range ( N )\n    while idx_f4cb < len(list_9mv5):\n        row = list_9mv5[idx_f4cb]\n        idx_dyxl = 0\n        list_op6g = range ( N )\n        while idx_dyxl < len(list_op6g):\n            col = list_op6g[idx_dyxl]\n            if not ( row == col and mat [ row ] [ col ] != 1 ):\n                if ( row != col and mat [ row ] [ col ] != 0 ) :\n                    return False\n            else:\n                return False\n            idx_dyxl = idx_dyxl + 1\n        idx_f4cb = idx_f4cb + 1\n    return True", "id": "Add_IndependentVar_sample_from_PROGRAM_PRINT_IDENTITY_MATRIX_1_to_83", "old_id": "PROGRAM_PRINT_IDENTITY_MATRIX_1"}
{"code": "def worstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    idx_ht5q = 0\n    list_vgb0 = range ( n )\n    while idx_ht5q < len(list_vgb0):\n        i = list_vgb0[idx_ht5q]\n        wstIdx = - 1\n        idx_ve1y = 0\n        list_slpf = range ( m )\n        while idx_ve1y < len(list_slpf):\n            j = list_slpf[idx_ve1y]\n            if blockSize [ j ] >= processSize [ i ] :\n                if wstIdx == - 1 :\n                    wstIdx = j\n                elif blockSize [ wstIdx ] < blockSize [ j ] :\n                    wstIdx = j\n            idx_ve1y = idx_ve1y + 1\n        if wstIdx != - 1 :\n            allocation [ i ] = wstIdx\n            blockSize [ wstIdx ] -= processSize [ i ]\n        idx_ht5q = idx_ht5q + 1\n    print ( \"Process No.Process Size Block no.\" )\n    idx_wyv0 = 0\n    list_46am = range ( n )\n    while idx_wyv0 < len(list_46am):\n        i = list_46am[idx_wyv0]\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if not allocation [ i ] != - 1:\n            print ( \"Not Allocated\" )\n        else:\n            print ( allocation [ i ] + 1 )\n        idx_wyv0 = idx_wyv0 + 1\n    var_x6j = 34", "id": "Add_IndependentVar_sample_from_PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT_to_84", "old_id": "PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT"}
{"code": "def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    var_6tu = 59\n    flag = True\n    idx_c9mf = 0\n    list_afhr = range ( n )\n    while idx_c9mf < len(list_afhr):\n        i = list_afhr[idx_c9mf]\n        if not flag is True:\n            temp [ i ] = arr [ small ]\n            small += 1\n        else:\n            temp [ i ] = arr [ large ]\n            large -= 1\n        flag = bool ( 1 - flag )\n        idx_c9mf = idx_c9mf + 1\n    idx_fmr5 = 0\n    list_6fu3 = range ( n )\n    while idx_fmr5 < len(list_6fu3):\n        i = list_6fu3[idx_fmr5]\n        arr [ i ] = temp [ i ]\n        idx_fmr5 = idx_fmr5 + 1\n    return arr", "id": "Add_IndependentVar_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_to_85", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM"}
{"code": "def rearrange ( arr , n ) :\n    max_idx = n - 1\n    min_idx = 0\n    var_bqd = 10\n    max_elem = arr [ n - 1 ] + 1\n    idx_5t7h = 0\n    list_yxib = range ( 0 , n )\n    while idx_5t7h < len(list_yxib):\n        i = list_yxib[idx_5t7h]\n        if not i % 2 == 0:\n            arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem\n            min_idx += 1\n        else:\n            arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem\n            max_idx -= 1\n        idx_5t7h = idx_5t7h + 1\n    idx_r03v = 0\n    list_adov = range ( 0 , n )\n    while idx_r03v < len(list_adov):\n        i = list_adov[idx_r03v]\n        arr [ i ] = int ( arr [ i ] / max_elem )\n        idx_r03v = idx_r03v + 1", "id": "Add_IndependentVar_sample_from_REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_to_86", "old_id": "REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE"}
{"code": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    var_yx4 = 16\n    idx_p3jm = 0\n    list_lu0j = range ( l )\n    while idx_p3jm < len(list_lu0j):\n        i = list_lu0j[idx_p3jm]\n        if not ( s [ i ] == c1 ):\n            if ( s [ i ] == c2 ) :\n                s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n        else:\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        idx_p3jm = idx_p3jm + 1\n    return s", "id": "Add_IndependentVar_sample_from_REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S_to_87", "old_id": "REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S"}
{"code": "def getTotalNumberOfSequences ( m , n ) :\n    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 1 ) ]\n    idx_zr8b = 0\n    var_w75 = 35\n    list_pnw9 = range ( m + 1 )\n    while idx_zr8b < len(list_pnw9):\n        i = list_pnw9[idx_zr8b]\n        idx_f7c5 = 0\n        list_ngk1 = range ( n + 1 )\n        while idx_f7c5 < len(list_ngk1):\n            j = list_ngk1[idx_f7c5]\n            if not i == 0 or j == 0:\n                if i < j :\n                    T [ i ] [ j ] = 0\n                elif j == 1 :\n                    T [ i ] [ j ] = i\n                else :\n                    T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i // 2 ] [ j - 1 ]\n            else:\n                T [ i ] [ j ] = 0\n            idx_f7c5 = idx_f7c5 + 1\n        idx_zr8b = idx_zr8b + 1\n    return T [ m ] [ n ]", "id": "Add_IndependentVar_sample_from_SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1_to_88", "old_id": "SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1"}
{"code": "def sortArray ( arr , n , A , B , C ) :\n    idx_2lxo = 0\n    var_iv5 = 4\n    list_xjl5 = range ( n )\n    while idx_2lxo < len(list_xjl5):\n        i = list_xjl5[idx_2lxo]\n        arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + C )\n        idx_2lxo = idx_2lxo + 1\n    index = - ( sys.maxsize - 1 )\n    maximum = - ( sys.maxsize - 1 )\n    idx_tcvq = 0\n    list_u2nl = range ( n )\n    while idx_tcvq < len(list_u2nl):\n        i = list_u2nl[idx_tcvq]\n        if maximum < arr [ i ] :\n            index = i\n            maximum = arr [ i ]\n        idx_tcvq = idx_tcvq + 1\n    i = 0\n    j = n - 1\n    new_arr = [ 0 ] * n\n    k = 0\n    while i < index and j > index :\n        if not arr [ i ] < arr [ j ]:\n            new_arr [ k ] = arr [ j ]\n            k += 1\n            j -= 1\n        else:\n            new_arr [ k ] = arr [ i ]\n            k += 1\n            i += 1\n    while i < index :\n        new_arr [ k ] = arr [ i ]\n        k += 1\n        i += 1\n    while j > index :\n        new_arr [ k ] = arr [ j ]\n        k += 1\n        j -= 1\n        new_arr [ n - 1 ] = maximum\n    idx_l3ye = 0\n    list_xw2g = range ( n )\n    while idx_l3ye < len(list_xw2g):\n        i = list_xw2g[idx_l3ye]\n        arr [ i ] = new_arr [ i ]\n        idx_l3ye = idx_l3ye + 1", "id": "Add_IndependentVar_sample_from_SORT_ARRAY_APPLYING_GIVEN_EQUATION_to_89", "old_id": "SORT_ARRAY_APPLYING_GIVEN_EQUATION"}
{"code": "def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    idx_gtvp = 0\n    list_kr76 = range ( n )\n    while idx_gtvp < len(list_kr76):\n        i = list_kr76[idx_gtvp]\n        if not ( ( i % 2 ) == 0 ):\n            oddArr.append ( arr [ i ] )\n        else:\n            evenArr.append ( arr [ i ] )\n        idx_gtvp = idx_gtvp + 1\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    idx_pz4a = 0\n    list_w35s = range ( len ( evenArr ) )\n    while idx_pz4a < len(list_w35s):\n        j = list_w35s[idx_pz4a]\n        arr [ i ] = evenArr [ j ]\n        i += 1\n        idx_pz4a = idx_pz4a + 1\n    idx_koxt = 0\n    list_0h19 = range ( len ( oddArr ) )\n    while idx_koxt < len(list_0h19):\n        j = list_0h19[idx_koxt]\n        arr [ i ] = oddArr [ j ]\n        i += 1\n        idx_koxt = idx_koxt + 1\n    var_4hd = 41", "id": "Add_IndependentVar_sample_from_SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER_to_90", "old_id": "SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_ORDER"}
{"code": "def firstLetterWord ( str ) :\n    result = \"\"\n    var_3ui = 73\n    v = True\n    idx_hqfx = 0\n    list_k9jp = range ( len ( str ) )\n    while idx_hqfx < len(list_k9jp):\n        i = list_k9jp[idx_hqfx]\n        if not ( str [ i ] == ' ' ):\n            if ( str [ i ] != ' ' and v == True ) :\n                result += ( str [ i ] )\n                v = False\n        else:\n            v = True\n        idx_hqfx = idx_hqfx + 1\n    return result", "id": "Add_IndependentVar_sample_from_STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES_to_91", "old_id": "STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES"}
{"code": "def isSubsetSum ( arr , n , sum ) :\n    subset = [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ]\n    var_3xk = 8\n    idx_xcdv = 0\n    list_8jda = range ( n + 1 )\n    while idx_xcdv < len(list_8jda):\n        i = list_8jda[idx_xcdv]\n        idx_gh7e = 0\n        list_gtfz = range ( sum + 1 )\n        while idx_gh7e < len(list_gtfz):\n            j = list_gtfz[idx_gh7e]\n            if not ( j == 0 ):\n                if ( i == 0 ) :\n                    subset [ i % 2 ] [ j ] = False\n                elif ( arr [ i - 1 ] <= j ) :\n                    subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ]\n                else :\n                    subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ]\n            else:\n                subset [ i % 2 ] [ j ] = True\n            idx_gh7e = idx_gh7e + 1\n        idx_xcdv = idx_xcdv + 1\n    return subset [ n % 2 ] [ sum ]", "id": "Add_IndependentVar_sample_from_SUBSET_SUM_PROBLEM_OSUM_SPACE_to_92", "old_id": "SUBSET_SUM_PROBLEM_OSUM_SPACE"}
{"code": "def binomialCoeffSum ( n ) :\n    C = [ [ 0 ] * ( n + 2 ) for i in range ( 0 , n + 2 ) ]\n    idx_hkd5 = 0\n    list_ohsv = range ( 0 , n + 1 )\n    while idx_hkd5 < len(list_ohsv):\n        i = list_ohsv[idx_hkd5]\n        idx_q7zs = 0\n        list_rpfq = range ( 0 , min ( i , n ) + 1 )\n        while idx_q7zs < len(list_rpfq):\n            j = list_rpfq[idx_q7zs]\n            if not ( j == 0 or j == i ):\n                C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ]\n            else:\n                C [ i ] [ j ] = 1\n            idx_q7zs = idx_q7zs + 1\n        idx_hkd5 = idx_hkd5 + 1\n    sum = 0\n    var_8kp = 39\n    idx_c2py = 0\n    list_zk03 = range ( 0 , n + 1 )\n    while idx_c2py < len(list_zk03):\n        i = list_zk03[idx_c2py]\n        sum += C [ n ] [ i ]\n        idx_c2py = idx_c2py + 1\n    return sum", "id": "Add_IndependentVar_sample_from_SUM_BINOMIAL_COEFFICIENTS_to_93", "old_id": "SUM_BINOMIAL_COEFFICIENTS"}
{"code": "def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    idx_6r34 = 0\n    var_j68 = 19\n    list_tq60 = range ( n )\n    while idx_6r34 < len(list_tq60):\n        i = list_tq60[idx_6r34]\n        if not ( tree [ i ] == '(' ):\n            if ( tree [ i ] == ')' ) :\n                level -= 1\n            else :\n                if ( level == k ) :\n                    sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n        else:\n            level += 1\n        idx_6r34 = idx_6r34 + 1\n    return sum", "id": "Add_IndependentVar_sample_from_SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_to_94", "old_id": "SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING"}
{"code": "def sumofsquare ( n ) :\n    C = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    idx_c4yn = 0\n    list_0auy = range ( 0 , n + 1 )\n    var_x0b = 67\n    while idx_c4yn < len(list_0auy):\n        i = list_0auy[idx_c4yn]\n        idx_ibry = 0\n        list_fhz3 = range ( 0 , min ( i , n ) + 1 )\n        while idx_ibry < len(list_fhz3):\n            j = list_fhz3[idx_ibry]\n            if not ( j == 0 or j == i ):\n                C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] )\n            else:\n                C [ i ] [ j ] = 1\n            idx_ibry = idx_ibry + 1\n        idx_c4yn = idx_c4yn + 1\n    sum = 0\n    idx_nm1z = 0\n    list_f2bo = range ( 0 , n + 1 )\n    while idx_nm1z < len(list_f2bo):\n        i = list_f2bo[idx_nm1z]\n        sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )\n        idx_nm1z = idx_nm1z + 1\n    return sum", "id": "Add_IndependentVar_sample_from_SUM_SQUARES_BINOMIAL_COEFFICIENTS_to_95", "old_id": "SUM_SQUARES_BINOMIAL_COEFFICIENTS"}
{"code": "def findSum(str1, str2):\n    if (len(str1) > len(str2)):\n        t = str1\n        str1 = str2\n        str2 = t\n    str = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    str1 = str1[:: - 1]\n    str2 = str2[:: - 1]\n    carry = 0\n    idx_l3v9 = 0\n    list_kxyq = range(n1)\n    while idx_l3v9 < len(list_kxyq):\n        i = list_kxyq[idx_l3v9]\n        sum = ((ord(str1[i]) - 48) + ((ord(str2[i]) - 48) + carry))\n        if not sum < 0:\n            str += chr(sum % 10 + 48)\n        else:\n            str += chr(sum % -10 + 48)\n        carry = int(sum / 10)\n        idx_l3v9 = idx_l3v9 + 1\n    var_keg = 78\n    idx_jlkp = 0\n    list_q0la = range(n1, n2)\n    while idx_jlkp < len(list_q0la):\n        i = list_q0la[idx_jlkp]\n        sum = ((ord(str2[i]) - 48) + carry)\n        if not sum < 0:\n            str += chr(sum % 10 + 48)\n        else:\n            str += chr(sum % -10 + 48)\n        carry = (int)(sum / 10)\n        idx_jlkp = idx_jlkp + 1\n    if (carry):\n        str += chr(carry + 48)\n    str = str[:: - 1]\n    return str", "id": "Add_IndependentVar_sample_from_SUM_TWO_LARGE_NUMBERS_to_96", "old_id": "SUM_TWO_LARGE_NUMBERS"}
{"code": "def offeringNumber ( n , templeHeight ) :\n    sum = 0\n    var_3uh = 98\n    idx_rgw4 = 0\n    list_jank = range ( n )\n    while idx_rgw4 < len(list_jank):\n        i = list_jank[idx_rgw4]\n        left = 0\n        right = 0\n        idx_7d34 = 0\n        list_kut1 = range ( i - 1 , - 1 , - 1 )\n        while idx_7d34 < len(list_kut1):\n            j = list_kut1[idx_7d34]\n            if not ( templeHeight [ j ] < templeHeight [ j + 1 ] ):\n                break\n            else:\n                left += 1\n            idx_7d34 = idx_7d34 + 1\n        idx_0pf1 = 0\n        list_a6jq = range ( i + 1 , n )\n        while idx_0pf1 < len(list_a6jq):\n            j = list_a6jq[idx_0pf1]\n            if not ( templeHeight [ j ] < templeHeight [ j - 1 ] ):\n                break\n            else:\n                right += 1\n            idx_0pf1 = idx_0pf1 + 1\n        sum += max ( right , left ) + 1\n        idx_rgw4 = idx_rgw4 + 1\n    return sum", "id": "Add_IndependentVar_sample_from_TEMPLE_OFFERINGS_to_97", "old_id": "TEMPLE_OFFERINGS"}
{"code": "def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    var_y5c = 34\n    first = arr [ 0 ]\n    second = - sys.maxsize\n    third = - sys.maxsize\n    idx_qea0 = 0\n    list_k1ld = range ( 1 , arr_size )\n    while idx_qea0 < len(list_k1ld):\n        i = list_k1ld[idx_qea0]\n        if not ( arr [ i ] > first ):\n            if ( arr [ i ] > second ) :\n                third = second\n                second = arr [ i ]\n            elif ( arr [ i ] > third ) :\n                third = arr [ i ]\n        else:\n            third = second\n            second = first\n            first = arr [ i ]\n        idx_qea0 = idx_qea0 + 1\n    print ( \"The third Largest\" , \"element is\" , third )", "id": "Add_IndependentVar_sample_from_THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1_to_98", "old_id": "THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1"}
{"code": "def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    var_4f9 = 78\n    n = len ( str )\n    idx_azl6 = 0\n    list_a4cg = range ( 0 , n , 1 )\n    while idx_azl6 < len(list_a4cg):\n        i = list_a4cg[idx_azl6]\n        if not ( str [ i ] == '1' ):\n            zero_count += 1\n        else:\n            one_count += 1\n        idx_azl6 = idx_azl6 + 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count", "id": "Add_IndependentVar_sample_from_WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO_to_99", "old_id": "WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO"}
{"code": "def countTransformation ( a , b ) :\n    n = len ( a )\n    m = len ( b )\n    if m == 0 :\n        return 1\n    dp = [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ]\n    idx_2b6m = 0\n    list_o2bk = range ( m )\n    var_pdn = 50\n    while idx_2b6m < len(list_o2bk):\n        i = list_o2bk[idx_2b6m]\n        idx_cjh1 = 0\n        list_6elr = range ( i , n )\n        while idx_cjh1 < len(list_6elr):\n            j = list_6elr[idx_cjh1]\n            if not i == 0:\n                if a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] )\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            else:\n                if j == 0 :\n                    if a [ j ] == b [ i ] :\n                        dp [ i ] [ j ] = 1\n                    else :\n                        dp [ i ] [ j ] = 0\n                elif a [ j ] == b [ i ] :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1\n                else :\n                    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]\n            idx_cjh1 = idx_cjh1 + 1\n        idx_2b6m = idx_2b6m + 1\n    return dp [ m - 1 ] [ n - 1 ]", "id": "Add_IndependentVar_sample_from_WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS_to_100", "old_id": "WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS"}
