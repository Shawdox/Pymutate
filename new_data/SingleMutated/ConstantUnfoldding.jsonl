{"code": "def f(text, lower, upper):\n    count = (89 + -89)\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += (98 + -97)\n        new_text.append(char)\n    return count, ''.join(new_text)", "input": "'DSUWeqExTQdCMGpqur', 'a', 'x'", "output": "(0, 'xxxxxxxxxxxxxxxxxx')", "id": "ConstantUnfoldding_sample_from_5_to_0", "old_id": "sample_5"}
{"code": "def f(dic):\n    for k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-(90 + -89)]:\n        dic.pop(k)\n    return list(dic.items())", "input": "{'11': 52, '65': 34, 'a': 12, '4': 52, '74': 31}", "output": "[('74', 31)]", "id": "ConstantUnfoldding_sample_from_6_to_1", "old_id": "sample_6"}
{"code": "def f(list):\n    original = list[:]\n    while len(list) > (51 + -50):\n        list.pop(len(list) - (14 + -13))\n        for i in range(len(list)):\n            list.pop(i)\n    list = original[:]\n    if list:\n        list.pop((9 + -9))\n    return list", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_7_to_2", "old_id": "sample_7"}
{"code": "def f(string, encryption):\n    if encryption == (70 + -70):\n        return string\n    else:\n        return string.upper().encode('rot13')", "input": "'UppEr', 0", "output": "'UppEr'", "id": "ConstantUnfoldding_sample_from_8_to_3", "old_id": "sample_8"}
{"code": "def f(s, x):\n    count = (63 + -63)\n    while s[:len(x)] == x and count < len(s)-len(x):\n        s = s[len(x):]\n        count += len(x)\n    return s", "input": "'If you want to live a happy life! Daniel', 'Daniel'", "output": "'If you want to live a happy life! Daniel'", "id": "ConstantUnfoldding_sample_from_12_to_4", "old_id": "sample_12"}
{"code": "def f(names):\n    count = len(names)\n    numberOfNames = (66 + -66)\n    for i in names:\n        if i.isalpha():\n            numberOfNames += (37 + -36)\n    return numberOfNames", "input": "['sharron', 'Savannah', 'Mike Cherokee']", "output": "2", "id": "ConstantUnfoldding_sample_from_13_to_5", "old_id": "sample_13"}
{"code": "def f(array, elem):\n    k = (82 + -82)\n    l = array.copy()\n    for i in l:\n        if i > elem:\n            array.insert(k, elem)\n            break\n        k += (4 + -3)\n    return array", "input": "[5, 4, 3, 2, 1, 0], 3", "output": "[3, 5, 4, 3, 2, 1, 0]", "id": "ConstantUnfoldding_sample_from_18_to_6", "old_id": "sample_18"}
{"code": "def f(x, y):\n    tmp = ''.join(['0' if c == '9' else '9' for c in y[::-(86 + -85)]])\n    if (x.isnumeric() and tmp.isnumeric()):\n        return x + tmp\n    else:\n        return x", "input": "\"\", \"sdasdnakjsda80\"", "output": "''", "id": "ConstantUnfoldding_sample_from_19_to_7", "old_id": "sample_19"}
{"code": "def f(text):\n    result = ''\n    for i in range(len(text)-(56 + -55), -(19 + -18), -(1 + 0)):\n        result += text[i]\n    return result", "input": "'was,'", "output": "',saw'", "id": "ConstantUnfoldding_sample_from_20_to_8", "old_id": "sample_20"}
{"code": "def f(a):\n    if a == (85 + -85):\n        return [(84 + -84)]\n    result = []\n    while a > (36 + -36):\n        result.append(a%(57 + -47))\n        a = a//(34 + -24)\n    result.reverse()\n    return int(''.join(str(i) for i in result))", "input": "000", "output": "[0]", "id": "ConstantUnfoldding_sample_from_22_to_9", "old_id": "sample_22"}
{"code": "def f(items, target):\n    for i in items.split():\n        if i in target:\n            return items.index(i)+(100 + -99)\n        if i.index('.') == len(i)-(27 + -26) or i.index('.') == (15 + -15):\n            return 'error'\n    return '.'", "input": "\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"", "output": "'error'", "id": "ConstantUnfoldding_sample_from_26_to_10", "old_id": "sample_26"}
{"code": "def f(w):\n    ls = list(w)\n    omw = ''\n    while len(ls) > (18 + -18):\n        omw += ls.pop((10 + -10))\n        if len(ls) * (11 + -9) > len(w):\n            return w[len(ls):] == omw\n    return False", "input": "'flak'", "output": "False", "id": "ConstantUnfoldding_sample_from_27_to_11", "old_id": "sample_27"}
{"code": "def f(text):\n    nums = list(filter(str.isnumeric, text))\n    assert len(nums) > (53 + -53)\n    return ''.join(nums)", "input": "'-123   \\t+314'", "output": "'123314'", "id": "ConstantUnfoldding_sample_from_29_to_12", "old_id": "sample_29"}
{"code": "def f(string):\n    upper = (25 + -25)\n    for c in string:\n        if c.isupper():\n            upper += (60 + -59)\n    return upper * ((5 + -3),(78 + -77))[upper % (97 + -95)]", "input": "'PoIOarTvpoead'", "output": "8", "id": "ConstantUnfoldding_sample_from_31_to_13", "old_id": "sample_31"}
{"code": "def f(lists):\n    dic = {}\n    for n in lists:\n        if n in dic:\n            dic[n].append(lists.pop(lists.index(n)))\n        else:\n            dic[n] = lists[:lists.index(n) + (93 + -92)]\n    return str(dic).replace(' ', '')", "input": "[5, 2, 7, 2, 3, 5]", "output": "'{5:[5,5],2:[5,2,2],7:[5,2,7]}'", "id": "ConstantUnfoldding_sample_from_33_to_14", "old_id": "sample_33"}
{"code": "def f(pattern, items):\n    result = []\n    for text in items:\n        pos = text.rfind(pattern)\n        if pos >= (89 + -89):\n            result.append(pos)\n\n    return result", "input": "\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]", "output": "[]", "id": "ConstantUnfoldding_sample_from_35_to_15", "old_id": "sample_35"}
{"code": "def f(array, elem):\n    if elem in array:\n        return array.index(elem)\n    return -(43 + -42)", "input": "[6, 2, 7, 1], 6", "output": "0", "id": "ConstantUnfoldding_sample_from_39_to_16", "old_id": "sample_39"}
{"code": "def f(text):\n    return text.ljust(len(text) + (56 + -55), \"#\")", "input": "\"the cow goes moo\"", "output": "'the cow goes moo#'", "id": "ConstantUnfoldding_sample_from_40_to_17", "old_id": "sample_40"}
{"code": "def f(array, values):\n    array.reverse()\n    for value in values:\n        array.insert(len(array) // (64 + -62), value)\n    array.reverse()\n    return array", "input": "[58], [21, 92]", "output": "[58, 92, 21]", "id": "ConstantUnfoldding_sample_from_41_to_18", "old_id": "sample_41"}
{"code": "def f(nums):\n    nums.clear()\n    for num in nums:\n        nums.append(num*(37 + -35))\n    return nums", "input": "[4, 3, 2, 1, 2, -1, 4, 2]", "output": "[]", "id": "ConstantUnfoldding_sample_from_42_to_19", "old_id": "sample_42"}
{"code": "def f(n):\n    for i in str(n):\n        if not i.isdigit():\n            n = -(57 + -56)\n            break\n    return n", "input": "\"6 ** 2\"", "output": "-1", "id": "ConstantUnfoldding_sample_from_43_to_20", "old_id": "sample_43"}
{"code": "def f(text):\n    ls = list(text)\n    for i in range((34 + -34), len(ls)):\n        if ls[i]!='+':\n            ls.insert(i, '+')\n            ls.insert(i, '*')\n            break\n    return '+'.join(ls)", "input": "'nzoh'", "output": "'*+++n+z+o+h'", "id": "ConstantUnfoldding_sample_from_44_to_21", "old_id": "sample_44"}
{"code": "def f(text, letter):\n    counts = {}\n    for char in text:\n        if char not in counts:\n            counts[char] = (24 + -23)\n        else:\n            counts[char] += (51 + -50)\n    return counts.get(letter, (85 + -85))", "input": "'za1fd1as8f7afasdfam97adfa', '7'", "output": "2", "id": "ConstantUnfoldding_sample_from_45_to_22", "old_id": "sample_45"}
{"code": "def f(text):\n    length = len(text)\n    half = length // (82 + -80)\n    encode = text[:half].encode('ascii')\n    if text[half:] == encode.decode():\n        return True\n    else:\n        return False", "input": "'bbbbr'", "output": "False", "id": "ConstantUnfoldding_sample_from_47_to_23", "old_id": "sample_47"}
{"code": "def f(names):\n    if names == []:\n        return \"\"\n    smallest = names[(81 + -81)]\n    for name in names[(85 + -84):]:\n        if name < smallest:\n            smallest = name\n    names.remove(smallest)\n    return names.join(smallest)", "input": "[]", "output": "''", "id": "ConstantUnfoldding_sample_from_48_to_24", "old_id": "sample_48"}
{"code": "def f(lst):\n    lst.clear()\n    lst += [(57 + -56)] * (len(lst) + (85 + -84))\n    return lst", "input": "['a', 'c', 'v']", "output": "[1]", "id": "ConstantUnfoldding_sample_from_50_to_25", "old_id": "sample_50"}
{"code": "s = '<' * (30 + -20)\ndef f(num):\n    if num % (91 + -89) == (63 + -63):\n        return s\n    else:\n        return num - (68 + -67)", "input": "21", "output": "20", "id": "ConstantUnfoldding_sample_from_51_to_26", "old_id": "sample_51"}
{"code": "def f(text):\n    occ = {}\n    for ch in text:\n        name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n        name = name.get(ch, ch)\n        occ[name] = occ.get(name, (36 + -36)) + (36 + -35)\n    return [x for _, x in occ.items()]", "input": "\"URW rNB\"", "output": "[1, 1, 1, 1, 1, 1, 1]", "id": "ConstantUnfoldding_sample_from_53_to_27", "old_id": "sample_53"}
{"code": "def f(text, s, e):\n    sublist = text[s:e]\n    if not sublist:\n        return -(4 + -3)\n    return sublist.index(min(sublist))", "input": "'happy', 0, 3", "output": "1", "id": "ConstantUnfoldding_sample_from_54_to_28", "old_id": "sample_54"}
{"code": "def f(array):\n    array_2 = []\n    for i in array:\n        if i>(45 + -45):\n            array_2 += [i]\n    array_2.sort(reverse=True)\n    return array_2", "input": "[4, 8, 17, 89, 43, 14]", "output": "[89, 43, 17, 14, 8, 4]", "id": "ConstantUnfoldding_sample_from_55_to_29", "old_id": "sample_55"}
{"code": "def f(text):\n    text = text.upper()\n    count_upper = (75 + -75)\n    for char in text:\n        if char.isupper():\n            count_upper += (52 + -51)\n        else:\n            return 'no'\n    return count_upper // (63 + -61)", "input": "'ax'", "output": "1", "id": "ConstantUnfoldding_sample_from_57_to_30", "old_id": "sample_57"}
{"code": "def f(nums):\n    count = len(nums)\n    for i in [i % (45 + -43) for i in range(count)]:\n        nums.append(nums[i])\n    return nums", "input": "[-1, 0, 0, 1, 1]", "output": "[-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]", "id": "ConstantUnfoldding_sample_from_58_to_31", "old_id": "sample_58"}
{"code": "def f(text, size):\n    counter = len(text)\n    for i in range(size-int(size%(24 + -22))):\n        text = ' '+text+' '\n        counter += (7 + -5)\n        if counter >= size:\n            return text", "input": "\"7\", 10", "output": "'     7     '", "id": "ConstantUnfoldding_sample_from_64_to_32", "old_id": "sample_64"}
{"code": "def f(nums, index):\n    return nums[index] % (50 + -8) + nums.pop(index) * (16 + -14)", "input": "[3, 2, 0, 3, 7], 3", "output": "9", "id": "ConstantUnfoldding_sample_from_65_to_33", "old_id": "sample_65"}
{"code": "def f(text, prefix):\n    prefix_length = len(prefix)\n    if text.startswith(prefix):\n        return text[(prefix_length - (52 + -51)) // (23 + -21):\n                    (prefix_length + (85 + -84)) // (46 + -44) * -(20 + -19):-(20 + -19)]\n    else:\n        return text", "input": "'happy', 'ha'", "output": "''", "id": "ConstantUnfoldding_sample_from_66_to_34", "old_id": "sample_66"}
{"code": "def f(num1, num2, num3):\n    nums = [num1, num2, num3]\n    nums.sort()    \n    return f'{nums[(67 + -67)]},{nums[(99 + -98)]},{nums[(100 + -98)]}'", "input": "6,8,8", "output": "'6,8,8'", "id": "ConstantUnfoldding_sample_from_67_to_35", "old_id": "sample_67"}
{"code": "def f(text, pref):\n    if text.startswith(pref):\n        n = len(pref)\n        text = '.'.join(text[n:].split('.')[(83 + -82):] + text[:n].split('.')[:-(91 + -90)])\n    return text", "input": "'omeunhwpvr.dq', 'omeunh'", "output": "'dq'", "id": "ConstantUnfoldding_sample_from_68_to_36", "old_id": "sample_68"}
{"code": "def f(x):\n    a = (56 + -56)\n    for i in x.split(' '):\n        a += len(i.zfill(len(i)*(83 + -81)))\n    return a", "input": "'999893767522480'", "output": "30", "id": "ConstantUnfoldding_sample_from_70_to_37", "old_id": "sample_70"}
{"code": "def f(d, n):\n    for i in range(n):\n        item = d.popitem()\n        d[item[(75 + -74)]] = item[(48 + -48)]\n    return d", "input": "{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1", "output": "{1: 2, 3: 4, 5: 6, 7: 8, 10: 9}", "id": "ConstantUnfoldding_sample_from_71_to_38", "old_id": "sample_71"}
{"code": "def f(array, elem):\n    ind = array.index(elem)\n    return ind * (16 + -14) + array[-ind - (96 + -95)] * (87 + -84)", "input": "[-1, 2, 1, -8, 2], 2", "output": "-22", "id": "ConstantUnfoldding_sample_from_75_to_39", "old_id": "sample_75"}
{"code": "def f(nums):\n    nums = [y for y in nums if y > (4 + -4)]\n    if len(nums) <= (7 + -4):\n        return nums\n    nums.reverse()\n    half = len(nums)//(96 + -94)\n    return nums[:half] + [(51 + -51)]*(59 + -54) + nums[half:]", "input": "[10, 3, 2, 2, 6, 0]", "output": "[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]", "id": "ConstantUnfoldding_sample_from_76_to_40", "old_id": "sample_76"}
{"code": "def f(text):\n    if text and text.isupper():\n        cs = str.maketrans(string.ascii_uppercase, string.ascii_lowercase)\n        return text.translate(cs)\n    return text.lower()[:(14 + -11)]", "input": "'mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n'", "output": "'mty'", "id": "ConstantUnfoldding_sample_from_78_to_41", "old_id": "sample_78"}
{"code": "def f(text):\n    l = text.rpartition('0')\n    if l[(25 + -23)] == '':\n        return '-1:-1'\n    return f'{len(l[(20 + -20)])}:{l[(1 + 1)].find(\"0\") + (5 + -4)}'", "input": "'qq0tt'", "output": "'2:0'", "id": "ConstantUnfoldding_sample_from_83_to_42", "old_id": "sample_83"}
{"code": "def f(n):\n    values = {(86 + -86): (92 + -89), (76 + -75): 4.5, (22 + -20): '-'}\n    res = {}\n    for i, j in values.items():\n        if i % n != (74 + -72):\n            res[j] = n // (89 + -87)\n    return sorted(res)", "input": "12", "output": "[3, 4.5]", "id": "ConstantUnfoldding_sample_from_85_to_43", "old_id": "sample_85"}
{"code": "def f(instagram, imgur, wins):\n    photos = [instagram, imgur]\n    if instagram == imgur:\n        return wins\n    if wins == (61 + -60):\n        return photos.pop()\n    else:\n        photos.reverse()\n        return photos.pop()", "input": "['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0", "output": "['sdfs', 'drcr', '2e']", "id": "ConstantUnfoldding_sample_from_86_to_44", "old_id": "sample_86"}
{"code": "def f(s1, s2):\n    if s2.endswith(s1):\n        s2 = s2[:len(s1) * -(44 + -43)]\n    return s2", "input": "\"he\", \"hello\"", "output": "'hello'", "id": "ConstantUnfoldding_sample_from_88_to_45", "old_id": "sample_88"}
{"code": "def f(s):\n    d = dict.fromkeys(s, (81 + -81))\n    return list(d.keys())", "input": "\"12ab23xy\"", "output": "['1', '2', 'a', 'b', '3', 'x', 'y']", "id": "ConstantUnfoldding_sample_from_91_to_46", "old_id": "sample_91"}
{"code": "def f(n):\n    length = len(n) + (2 + 0)\n    revn = list(n)\n    result = ''.join(revn)\n    revn.clear()\n    return result + ('!' * length)", "input": "'iq'", "output": "'iq!!!!'", "id": "ConstantUnfoldding_sample_from_93_to_47", "old_id": "sample_93"}
{"code": "def f(lst):\n    lst.clear()\n    for i in lst:\n        if i == (49 + -46):\n            return False\n    else:\n        return True", "input": "[2, 0]", "output": "True", "id": "ConstantUnfoldding_sample_from_97_to_48", "old_id": "sample_97"}
{"code": "def f(text):\n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, (85 + -85)) + (34 + -33)\n    for key in dic:\n        if dic[key] > (53 + -52):\n            dic[key] = (66 + -65)\n    return dic", "input": "\"a\"", "output": "{'a': 1}", "id": "ConstantUnfoldding_sample_from_104_to_49", "old_id": "sample_104"}
{"code": "def f(nums):\n    count = len(nums)\n    for i in range((95 + -95), count):\n        nums.insert(i, nums[i]*(97 + -95))\n    return nums", "input": "[2, 8, -2, 9, 3, 3]", "output": "[4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]", "id": "ConstantUnfoldding_sample_from_106_to_50", "old_id": "sample_106"}
{"code": "def f(var):\n    amount = len(var) if type(var) == list else (94 + -94)\n    if type(var) == dict:\n        amount = len(var.keys())\n    nonzero = amount if amount > (6 + -6) else (15 + -15)\n    return nonzero", "input": "1", "output": "0", "id": "ConstantUnfoldding_sample_from_108_to_51", "old_id": "sample_108"}
{"code": "def f(marks):\n    highest = (87 + -87)\n    lowest = (81 + 19)\n    for value in marks.values():\n        if value > highest:\n            highest = value\n        if value < lowest:\n            lowest = value\n    return highest, lowest", "input": "{'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83}", "output": "(89, 4)", "id": "ConstantUnfoldding_sample_from_111_to_52", "old_id": "sample_111"}
{"code": "def f(line):\n    count = (26 + -26)\n    a = []\n    for i in range(len(line)):\n        count += (93 + -92)\n        if count%(98 + -96)==(38 + -38):\n            a.append(line[i].swapcase())\n        else:\n            a.append(line[i])\n    return ''.join(a)", "input": "\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"", "output": "'987YhnShAShD 93275yRgsgBgssHfBsFB'", "id": "ConstantUnfoldding_sample_from_113_to_53", "old_id": "sample_113"}
{"code": "def f(text, sep):\n    return text.rsplit(sep, maxsplit=(60 + -58))", "input": "\"a-.-.b\", \"-.\"", "output": "['a', '', 'b']", "id": "ConstantUnfoldding_sample_from_114_to_54", "old_id": "sample_114"}
{"code": "def f(text):\n    res = []\n    for ch in text.encode('utf-8'):\n        if ch == (36 + 25):\n            break\n        if ch == (20 + -20):\n            pass\n        res.append(f'{ch}; '.encode('utf-8'))\n    return b''.join(res)", "input": "'os||agx5'", "output": "b'111; 115; 124; 124; 97; 103; 120; 53; '", "id": "ConstantUnfoldding_sample_from_115_to_55", "old_id": "sample_115"}
{"code": "def f(numbers):\n    for i in range(len(numbers)):\n        if numbers.count('3') > (30 + -29):\n            return i\n    return -(58 + -57)", "input": "\"23157\"", "output": "-1", "id": "ConstantUnfoldding_sample_from_117_to_56", "old_id": "sample_117"}
{"code": "def f(text, chars):\n    num_applies = (84 + -82)\n    extra_chars = ''\n    for i in range(num_applies):\n        extra_chars += chars\n        text = text.replace(extra_chars, '')\n    return text", "input": "'zbzquiuqnmfkx', 'mk'", "output": "'zbzquiuqnmfkx'", "id": "ConstantUnfoldding_sample_from_118_to_57", "old_id": "sample_118"}
{"code": "def f(text):\n    result = \"\"\n    for i in range(len(text)):\n        if i % (91 + -89) == (2 + -2):\n            result += text[i].swapcase()\n        else:\n            result += text[i]\n    return result", "input": "\"vsnlygltaw\"", "output": "'VsNlYgLtAw'", "id": "ConstantUnfoldding_sample_from_119_to_58", "old_id": "sample_119"}
{"code": "def f(string):\n    if string[:(16 + -12)] != 'Nuva':\n        return 'no'\n    else:\n        return string.rstrip()", "input": "'Nuva?dlfuyjys'", "output": "'Nuva?dlfuyjys'", "id": "ConstantUnfoldding_sample_from_122_to_59", "old_id": "sample_122"}
{"code": "def f(array, elem):\n    for idx, e in enumerate(array):\n        if e > elem and array[idx - (7 + -6)] < elem:\n            array.insert(idx, elem)\n    return array", "input": "[1, 2, 3, 5, 8], 6", "output": "[1, 2, 3, 5, 6, 8]", "id": "ConstantUnfoldding_sample_from_123_to_60", "old_id": "sample_123"}
{"code": "def f(txt, sep, sep_count):\n    o = ''\n    while sep_count > (15 + -15) and txt.count(sep) > (74 + -74):\n        o += txt.rsplit(sep, (12 + -11))[(52 + -52)] + sep\n        txt = txt.rsplit(sep, (51 + -50))[(33 + -32)]\n        sep_count -= (49 + -48)\n    return o + txt", "input": "'i like you', ' ', -1", "output": "'i like you'", "id": "ConstantUnfoldding_sample_from_124_to_61", "old_id": "sample_124"}
{"code": "def f(text):\n    s = text.rpartition('o')\n    div, div2 = (s[(67 + -67)] == '' and '-' or s[(46 + -46)]), (s[(4 + -2)] == '' and '-' or s[(59 + -57)])\n    return s[(45 + -44)] + div + s[(2 + -1)] + div2", "input": "'kkxkxxfck'", "output": "'-kkxkxxfck'", "id": "ConstantUnfoldding_sample_from_126_to_62", "old_id": "sample_126"}
{"code": "def f(text):\n    odd = ''\n    even = ''\n    for i, c in enumerate(text):\n        if i % (40 + -38) == (20 + -20):\n            even += c\n        else:\n            odd += c\n    return even + odd.lower()", "input": "'Mammoth'", "output": "'Mmohamt'", "id": "ConstantUnfoldding_sample_from_128_to_63", "old_id": "sample_128"}
{"code": "def f(m):\n    items = list(m.items())\n    for i in range(len(items)-(64 + -62), -(19 + -18), -(29 + -28)):\n        tmp = items[i]\n        items[i] = items[i+(24 + -23)] \n        items[i+(54 + -53)] = tmp\n    return ['{}={}', '{1}={0}'][len(items) % (49 + -47)].format(\n        *m.keys(), **m\n    )", "input": "{'l':4, 'h':6, 'o':9}", "output": "'h=l'", "id": "ConstantUnfoldding_sample_from_130_to_64", "old_id": "sample_130"}
{"code": "def f(text):\n    a = len(text)\n    count = (71 + -71)\n    while text:\n        if text.startswith('a'):\n            count += text.find(' ')\n        else:\n            count += text.find('\\n')\n        text = text[text.find('\\n')+(22 + -21):text.find('\\n')+a+(80 + -79)]\n    return count", "input": "\"a\\nkgf\\nasd\\n\"", "output": "1", "id": "ConstantUnfoldding_sample_from_131_to_65", "old_id": "sample_131"}
{"code": "def f(n):\n    t = (28 + -28)\n    b = ''\n    digits = list(map(int, str(n)))\n    for d in digits:\n        if d == (68 + -68): t += (16 + -15)\n        else: break\n    for _ in range(t):\n        b += str((13 + -12)) + '0' + str((98 + -94))\n    b += str(n)\n    return b", "input": "372359", "output": "'372359'", "id": "ConstantUnfoldding_sample_from_134_to_66", "old_id": "sample_134"}
{"code": "def f(nums):\n    count = (30 + -30)\n    for i in range(len(nums)):\n        if len(nums) == (51 + -51):\n            break\n        if count % (21 + -19) == (63 + -63):\n            nums.pop()\n        else:\n            nums.pop((81 + -81))\n        count += (35 + -34)\n    return nums", "input": "[3, 2, 0, 0, 2, 3]", "output": "[]", "id": "ConstantUnfoldding_sample_from_137_to_67", "old_id": "sample_137"}
{"code": "def f(text, chars):\n    listchars = list(chars)\n    first = listchars.pop()\n    for i in listchars:\n        text = text[(52 + -52):text.find(i)]+i+text[text.find(i)+(76 + -75):]\n    return text", "input": "'tflb omn rtt', 'm'", "output": "'tflb omn rtt'", "id": "ConstantUnfoldding_sample_from_138_to_68", "old_id": "sample_138"}
{"code": "def f(first, second):\n    if len(first) < (43 + -33) or len(second) < (50 + -40):\n        return 'no'\n    for i in range((52 + -47)):\n        if first[i] != second[i]:\n            return 'no'\n    first.extend(second)\n    return first", "input": "[1, 2, 1], [1, 1, 2]", "output": "'no'", "id": "ConstantUnfoldding_sample_from_139_to_69", "old_id": "sample_139"}
{"code": "def f(x):\n    if x.islower():\n        return x\n    else:\n        return x[::-(97 + -96)]", "input": "'ykdfhp'", "output": "'ykdfhp'", "id": "ConstantUnfoldding_sample_from_142_to_70", "old_id": "sample_142"}
{"code": "def f(single_digit):\n    result = []\n    for c in range((26 + -25), (99 + -88)):\n        if c != single_digit:\n            result.append(c)\n    return result", "input": "5", "output": "[1, 2, 3, 4, 6, 7, 8, 9, 10]", "id": "ConstantUnfoldding_sample_from_146_to_71", "old_id": "sample_146"}
{"code": "def f(nums):\n    middle = len(nums)//(6 + -4)\n    return nums[middle:] + nums[(40 + -40):middle]", "input": "[1, 1, 1]", "output": "[1, 1, 1]", "id": "ConstantUnfoldding_sample_from_147_to_72", "old_id": "sample_147"}
{"code": "def f(forest, animal):\n    index = forest.index(animal)\n    result = list(forest)\n    while index < len(forest)-(24 + -23):\n        result[index] = forest[index+(23 + -22)]\n        index += (43 + -42)\n    if index == len(forest)-(84 + -83):\n        result[index] = '-'\n    return ''.join(result)", "input": "'2imo 12 tfiqr.', 'm'", "output": "'2io 12 tfiqr.-'", "id": "ConstantUnfoldding_sample_from_148_to_73", "old_id": "sample_148"}
{"code": "def f(tuple_list, joint):\n    string = ''\n    for num in tuple_list:\n        string += dict.fromkeys(str(num), joint * len(str(num))).popitem()[(25 + -25)] + joint\n    return string", "input": "(32332, 23543, 132323, 33300), ','", "output": "'2,4,2,0,'", "id": "ConstantUnfoldding_sample_from_149_to_74", "old_id": "sample_149"}
{"code": "def f(numbers, index):\n    for n in numbers[index:]:\n        numbers.insert(index, n)\n        index += (68 + -67)\n    return numbers[:index]", "input": "[-2, 4, -4], 0", "output": "[-2, 4, -4]", "id": "ConstantUnfoldding_sample_from_150_to_75", "old_id": "sample_150"}
{"code": "def f(text):\n    n = (33 + -33)\n    for char in text:\n        if char.isupper():\n            n += (75 + -74)\n    return n", "input": "''.join(['A'] * 20)", "output": "20", "id": "ConstantUnfoldding_sample_from_152_to_76", "old_id": "sample_152"}
{"code": "def f(s, c):\n    s = s.split(' ')\n    return ((c + \"  \") + (\"  \".join(s[::-(13 + -12)])))", "input": "'Hello There', '*'", "output": "'*  There  Hello'", "id": "ConstantUnfoldding_sample_from_154_to_77", "old_id": "sample_154"}
{"code": "def f(ip, n):\n    i = (8 + -8)\n    out = ''\n    for c in ip:\n        if i == n:\n            out += '\\n'\n            i = (70 + -70)\n        i += (49 + -48)\n        out += c\n    return out", "input": "\"dskjs hjcdjnxhjicnn\", 4", "output": "'dskj\\ns hj\\ncdjn\\nxhji\\ncnn'", "id": "ConstantUnfoldding_sample_from_155_to_78", "old_id": "sample_155"}
{"code": "def f(text, limit, char):\n    if limit < len(text):\n        return text[(56 + -56):limit]\n    return text.ljust(limit, char)", "input": "'tqzym', 5, 'c'", "output": "'tqzym'", "id": "ConstantUnfoldding_sample_from_156_to_79", "old_id": "sample_156"}
{"code": "def f(phrase):\n    ans = (94 + -94)\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\":\n                ans += (72 + -71)\n    return ans", "input": "\"aboba 212 has 0 digits\"", "output": "1", "id": "ConstantUnfoldding_sample_from_157_to_80", "old_id": "sample_157"}
{"code": "def f(arr):\n    n = [item for item in arr if item%(95 + -93) == (17 + -17)]\n    m = n+arr\n    for i in m:\n        if m.index(i) >= len(n):\n            m.remove(i)\n    return m", "input": "[3, 6, 4, -2, 5]", "output": "[6, 4, -2, 6, 4, -2]", "id": "ConstantUnfoldding_sample_from_158_to_81", "old_id": "sample_158"}
{"code": "def f(dictionary):\n    while not dictionary.get((67 + -66), len(dictionary)):\n        dictionary.clear()\n        break\n    return dictionary", "input": "{1: 47698, 1: 32849, 1: 38381, 3: 83607}", "output": "{1: 38381, 3: 83607}", "id": "ConstantUnfoldding_sample_from_160_to_82", "old_id": "sample_160"}
{"code": "def f(lst):\n    lst.sort()\n    return lst[(70 + -70):(80 + -77)]", "input": "[5, 8, 1, 3, 0]", "output": "[0, 1, 3]", "id": "ConstantUnfoldding_sample_from_164_to_83", "old_id": "sample_164"}
{"code": "def f(XAAXX, s):\n    count = (87 + -87)\n    idx = -(25 + -24)\n    while XAAXX.find('XXXX', idx+(68 + -67)) != -(74 + -73):\n        idx = XAAXX.find('XXXX', idx+(10 + -9)) \n        count += (3 + -2) \n    compound = count * s.title()\n    return XAAXX.replace('XXXX', compound)", "input": "'aaXXXXbbXXXXccXXXXde', 'QW'", "output": "'aaQwQwQwbbQwQwQwccQwQwQwde'", "id": "ConstantUnfoldding_sample_from_167_to_84", "old_id": "sample_167"}
{"code": "def f(text):\n    ls = list(text)\n    total = (len(text) - (55 + -54)) * (67 + -65)\n    for i in range((2 + -1), total+(14 + -13)):\n        if i % (99 + -97):\n            ls.append('+')\n        else:\n            ls.insert((93 + -93), '+')\n    return ''.join(ls).rjust(total)", "input": "'taole'", "output": "'++++taole++++'", "id": "ConstantUnfoldding_sample_from_169_to_85", "old_id": "sample_169"}
{"code": "def f(nums):\n    count = len(nums) // (5 + -3)\n    for _ in range(count):\n        nums.pop((76 + -76))\n    return nums", "input": "[3, 4, 1, 2, 3]", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_171_to_86", "old_id": "sample_171"}
{"code": "def f(array):\n    for i in range(len(array)):\n        if array[i] < (28 + -28):\n            array.pop(i)\n    return array", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_172_to_87", "old_id": "sample_172"}
{"code": "def f(lst):\n    lst[(51 + -50):(56 + -52)] = lst[(57 + -56):(97 + -93)][::-(22 + -21)]\n    return lst", "input": "[1, 2, 3]", "output": "[1, 3, 2]", "id": "ConstantUnfoldding_sample_from_174_to_88", "old_id": "sample_174"}
{"code": "def f(s, amount):\n    lines = s.splitlines()\n    w = max(map(lambda l: l.rfind(' '), lines))\n    ls = [[l, (w + (86 + -85)) * amount - l.rfind(' ')] for l in lines]\n    for i, line in enumerate(ls):\n        ls[i][(50 + -50)] = line[(76 + -76)] + ' ' * line[(47 + -46)]\n    return '\\n'.join(map(lambda l: l[(75 + -75)], ls))", "input": "'\\n', 2", "output": "' '", "id": "ConstantUnfoldding_sample_from_175_to_89", "old_id": "sample_175"}
{"code": "def f(text, to_place):\n    after_place = text[:text.find(to_place, (56 + -56)) + (48 + -47)]\n    before_place = text[text.find(to_place, (50 + -50)) + (19 + -18):]\n    return after_place + before_place", "input": "'some text', 'some'", "output": "'some text'", "id": "ConstantUnfoldding_sample_from_176_to_90", "old_id": "sample_176"}
{"code": "def f(text):\n    text = list(text)\n    for i in range(len(text)):\n        if i % (6 + -4) == (78 + -77):\n            text[i] = text[i].swapcase()\n    return ''.join(text)", "input": "'Hey DUdE THis $nd^ &*&this@#'", "output": "'HEy Dude tHIs $Nd^ &*&tHiS@#'", "id": "ConstantUnfoldding_sample_from_177_to_91", "old_id": "sample_177"}
{"code": "def f(nums):\n    # Pass in a copy to avoid modifying nums\n    nums = nums[:]\n    count = len(nums)\n    for i in range(-count+(33 + -32), (98 + -98)):\n        nums.insert((42 + -42), nums[i])\n    return nums", "input": "[7, 1, 2, 6, 0, 2]", "output": "[2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]", "id": "ConstantUnfoldding_sample_from_179_to_92", "old_id": "sample_179"}
{"code": "def f(nums):\n    a = -(68 + -67)\n    b = nums[(92 + -91):]\n    while a <= b[(40 + -40)]:\n        nums.remove(b[(88 + -88)])\n        a = (7 + -7)\n        b = b[(47 + -46):]\n    return nums", "input": "[-1, 5, 3, -2, -6, 8, 8]", "output": "[-1, -2, -6, 8, 8]", "id": "ConstantUnfoldding_sample_from_180_to_93", "old_id": "sample_180"}
{"code": "def f(s):\n    count = (96 + -96)\n    digits = \"\"\n    for c in s:\n        if c.isdigit():\n            count += (7 + -6)\n            digits += c\n    return [digits, count]", "input": "\"qwfasgahh329kn12a23\"", "output": "['3291223', 7]", "id": "ConstantUnfoldding_sample_from_181_to_94", "old_id": "sample_181"}
{"code": "def f(dic):\n    return sorted(dic.items(), key=lambda x: x[(2 + -2)])", "input": "{'b': 1, 'a': 2}", "output": "[('a', 2), ('b', 1)]", "id": "ConstantUnfoldding_sample_from_182_to_95", "old_id": "sample_182"}
{"code": "def f(text):\n    ls = text.split()\n    lines = \" \".join(ls[::(70 + -67)]).splitlines()\n    res = []\n    for i in range((54 + -52)):\n        ln = ls[(57 + -56)::(12 + -9)]\n        if (38 + -35) * i + (60 + -59) < len(ln):\n            res.append(\" \".join(ln[(92 + -89) * i:(76 + -73) * (i + (35 + -34))]))\n    return lines + res", "input": "\"echo hello!!! nice!\"", "output": "['echo']", "id": "ConstantUnfoldding_sample_from_183_to_96", "old_id": "sample_183"}
{"code": "def f(digits):\n    digits.reverse()\n    if len(digits) < (89 + -87):\n        return digits\n    for i in range((19 + -19), len(digits), (85 + -83)):\n        digits[i], digits[i+(81 + -80)] = digits[i+(6 + -5)], digits[i]\n    return digits", "input": "[1,2]", "output": "[1, 2]", "id": "ConstantUnfoldding_sample_from_184_to_97", "old_id": "sample_184"}
{"code": "def f(L):\n    N = len(L)\n    for k in range((24 + -23), N//(1 + 1) + (61 + -60)):\n        i = k - (59 + -58)\n        j = N - k\n        while i < j:\n            # swap elements:\n            L[i], L[j] = L[j], L[i]\n            # update i, j:\n            i += (96 + -95)\n            j -= (9 + -8)\n    return L", "input": "[16, 14, 12, 7, 9, 11]", "output": "[11, 14, 7, 12, 9, 16]", "id": "ConstantUnfoldding_sample_from_185_to_98", "old_id": "sample_185"}
{"code": "def f(d, index):\n    length = len(d.items())\n    idx = index % length\n    v = d.popitem()[(52 + -51)]\n    for _ in range(idx):\n        d.popitem()\n    return v", "input": "{27:39}, 1", "output": "39", "id": "ConstantUnfoldding_sample_from_187_to_99", "old_id": "sample_187"}
{"code": "def f(strings):\n    new_strings = []\n    for string in strings:\n        first_two = string[:(53 + -51)]\n        if first_two.startswith('a') or first_two.startswith('p'):\n            new_strings.append(first_two)\n\n    return new_strings", "input": "[\"a\", \"b\", \"car\", \"d\"]", "output": "['a']", "id": "ConstantUnfoldding_sample_from_188_to_100", "old_id": "sample_188"}
{"code": "def f(out, mapping):\n    for key in mapping:\n        out.format_map(mapping)\n        if len(re.findall(r'{\\w}', out)) == (91 + -91):\n            break\n        mapping[key][(30 + -29)] = mapping[key][(83 + -82)][::-(100 + -99)]\n    return out", "input": "\"{{{{}}}}\", {}", "output": "'{{{{}}}}'", "id": "ConstantUnfoldding_sample_from_189_to_101", "old_id": "sample_189"}
{"code": "def f(string):\n    count = string.count(':')\n    return string.replace(':', '', count - (7 + -6))", "input": "'1::1'", "output": "'1:1'", "id": "ConstantUnfoldding_sample_from_193_to_102", "old_id": "sample_193"}
{"code": "def f(text):\n    for p in ['acs', 'asp', 'scn']:\n        text = text.removeprefix(p) + ' '\n    return text.removeprefix(' ')[:-(42 + -41)]", "input": "'ilfdoirwirmtoibsac'", "output": "'ilfdoirwirmtoibsac  '", "id": "ConstantUnfoldding_sample_from_195_to_103", "old_id": "sample_195"}
{"code": "def f(temp, timeLimit):\n    s = timeLimit // temp\n    e = timeLimit % temp\n    return [f'{e} oC', f'{s} {e}'][s > (41 + -40)]", "input": "1, 1234567890", "output": "'1234567890 0'", "id": "ConstantUnfoldding_sample_from_197_to_104", "old_id": "sample_197"}
{"code": "def f(text, strip_chars):\n    return text[::-(55 + -54)].strip(strip_chars)[::-(84 + -83)]", "input": "'tcmfsmj', 'cfj'", "output": "'tcmfsm'", "id": "ConstantUnfoldding_sample_from_198_to_105", "old_id": "sample_198"}
{"code": "def f(str, char):\n    base = char * (str.count(char) + (63 + -62))\n    return str.removesuffix(base)", "input": "'mnmnj krupa...##!@#!@#$$@##', '@'", "output": "'mnmnj krupa...##!@#!@#$$@##'", "id": "ConstantUnfoldding_sample_from_199_to_106", "old_id": "sample_199"}
{"code": "def f(text, value):\n    length = len(text)\n    index = (98 + -98)\n    while length > (19 + -19):\n        value = text[index] + value\n        length -= (7 + -6)\n        index += (97 + -96)\n    return value", "input": "'jao mt', 'house'", "output": "'tm oajhouse'", "id": "ConstantUnfoldding_sample_from_200_to_107", "old_id": "sample_200"}
{"code": "def f(text):\n    chars = []\n    for c in text:\n        if c.isdigit():\n            chars.append(c)\n    return ''.join(chars[::-(80 + -79)])", "input": "'--4yrw 251-//4 6p'", "output": "'641524'", "id": "ConstantUnfoldding_sample_from_201_to_108", "old_id": "sample_201"}
{"code": "def f(array, list):\n    array.extend(list)\n    [e for e in array if e % (47 + -45) == (87 + -87)]\n    return [e for e in array if e >= (82 + -72)]", "input": "[2, 15], [15, 1]", "output": "[15, 15]", "id": "ConstantUnfoldding_sample_from_202_to_109", "old_id": "sample_202"}
{"code": "def f(name):\n    return [name[(24 + -24)], name[(51 + -50)][::-(83 + -82)][(35 + -35)]]", "input": "\"master. \"", "output": "['m', 'a']", "id": "ConstantUnfoldding_sample_from_204_to_110", "old_id": "sample_204"}
{"code": "def f(a):\n    for _ in range((95 + -85)):\n        for j in range(len(a)):\n            if a[j] != '#':\n                a = a[j:]\n                break\n        else:\n            a = \"\"\n            break\n    while a[-(50 + -49)] == '#':\n        a = a[:-(43 + -42)]\n    return a", "input": "\"##fiu##nk#he###wumun##\"", "output": "'fiu##nk#he###wumun'", "id": "ConstantUnfoldding_sample_from_205_to_111", "old_id": "sample_205"}
{"code": "def f(n, m, num):\n    x_list = list(range(n, m+(35 + -34)))\n    j = (65 + -65)\n    while True:\n        j = (j + num) % len(x_list)\n        if x_list[j] % (46 + -44) == (65 + -65):\n            return x_list[j]", "input": "46, 48, 21", "output": "46", "id": "ConstantUnfoldding_sample_from_210_to_112", "old_id": "sample_210"}
{"code": "def f(s):\n    count = (84 + -84)\n    for c in s:\n        if s.rindex(c) != s.index(c):\n            count+=(60 + -59)\n    return count", "input": "\"abca dea ead\"", "output": "10", "id": "ConstantUnfoldding_sample_from_211_to_113", "old_id": "sample_211"}
{"code": "def f(nums):\n    for _ in range(len(nums) - (3 + -2)):\n        nums.reverse()\n    return nums", "input": "[1, -9, 7, 2, 6, -3, 3]", "output": "[1, -9, 7, 2, 6, -3, 3]", "id": "ConstantUnfoldding_sample_from_212_to_114", "old_id": "sample_212"}
{"code": "def f(sample):\n    i = -(14 + -13)\n    while sample.find('/', i+(68 + -67)) != -(51 + -50):\n        i = sample.find('/', i+(84 + -83))\n    return sample.rindex('/', (34 + -34), i)", "input": "'present/here/car%2Fwe'", "output": "7", "id": "ConstantUnfoldding_sample_from_214_to_115", "old_id": "sample_214"}
{"code": "def f(text):\n    new_text = text\n    while len(text) > (62 + -61) and text[(88 + -88)] == text[-(33 + -32)]:\n        new_text = text = text[(39 + -38):-(70 + -69)]\n    return new_text", "input": "')'", "output": "')'", "id": "ConstantUnfoldding_sample_from_215_to_116", "old_id": "sample_215"}
{"code": "def f(letters):\n    count = (46 + -46)\n    for l in letters:\n        if l.isdigit():\n            count += (79 + -78)\n    return count", "input": "\"dp ef1 gh2\"", "output": "2", "id": "ConstantUnfoldding_sample_from_216_to_117", "old_id": "sample_216"}
{"code": "def f(string, sep):\n    cnt = string.count(sep)\n    return((string+sep) * cnt)[::-(26 + -25)]", "input": "'caabcfcabfc', 'ab'", "output": "'bacfbacfcbaacbacfbacfcbaac'", "id": "ConstantUnfoldding_sample_from_218_to_118", "old_id": "sample_218"}
{"code": "def f(s1, s2):\n    for k in range((55 + -55), len(s2)+len(s1)):\n        s1 += s1[(7 + -7)]\n        if s1.find(s2) >= (77 + -77):\n            return True\n    return False", "input": "\"Hello\", \")\"", "output": "False", "id": "ConstantUnfoldding_sample_from_219_to_119", "old_id": "sample_219"}
{"code": "def f(mess, char):\n    while mess.find(char, mess.rindex(char) + (79 + -78)) != -(72 + -71):\n        mess = mess[:mess.rindex(char) + (66 + -65)] + mess[mess.rindex(char) + (6 + -4):]\n    return mess", "input": "'0aabbaa0b', 'a'", "output": "'0aabbaa0b'", "id": "ConstantUnfoldding_sample_from_222_to_120", "old_id": "sample_222"}
{"code": "def f(array, target):\n    count, i = (45 + -45), (34 + -33)\n    for j in range((77 + -76), len(array)):\n        if ((array[j] > array[j-(35 + -34)]) and (array[j] <= target)): count += i\n        elif array[j] <= array[j-(3 + -2)]: i = (15 + -14)\n        else: i += (30 + -29)\n    return count", "input": "[1, 2, -1, 4], 2", "output": "1", "id": "ConstantUnfoldding_sample_from_223_to_121", "old_id": "sample_223"}
{"code": "def f(array, value):\n    array.reverse()\n    array.pop()\n    odd = []\n    while len(array) > (17 + -17):\n        tmp = {}\n        tmp[array.pop()] = value\n        odd.append(tmp)\n    result = {}\n    while len(odd) > (26 + -26):\n        result.update(odd.pop())\n    return result", "input": "['23'], 123", "output": "{}", "id": "ConstantUnfoldding_sample_from_224_to_122", "old_id": "sample_224"}
{"code": "def f(nums):\n    for i in range(len(nums)):\n        if nums[i] % (9 + -6) == (69 + -69):\n            nums.append(nums[i])\n    return nums", "input": "[1, 3]", "output": "[1, 3, 3]", "id": "ConstantUnfoldding_sample_from_226_to_123", "old_id": "sample_226"}
{"code": "def f(text):\n    text = text.lower()\n    head, tail = text[(75 + -75)], text[(17 + -16):]\n    return head.upper() + tail", "input": "'Manolo'", "output": "'Manolo'", "id": "ConstantUnfoldding_sample_from_227_to_124", "old_id": "sample_227"}
{"code": "def f(dic, value):\n    result = []\n    for e in dic:\n        result.append(e[(36 + -36)])\n        if e[(35 + -34)] == value:\n            result.reverse()\n        else:\n            result.append(e[(82 + -81)])\n    return result", "input": "{'9m':2, 'mA':1, '10K':2, 'Lk':2}, 1", "output": "['9', 'm', 'm', 'A', '1', '0', 'L', 'k']", "id": "ConstantUnfoldding_sample_from_229_to_125", "old_id": "sample_229"}
{"code": "def f(text):\n    result = ''\n    i = len(text)-(73 + -72)\n    while i >= (100 + -100):\n        c = text[i]\n        if c.isalpha():\n            result += c\n        i -= (100 + -99)\n    return result", "input": "'102x0zoq'", "output": "'qozx'", "id": "ConstantUnfoldding_sample_from_230_to_126", "old_id": "sample_230"}
{"code": "def f(years):\n    a10 = sum((25 + -24) for x in years if x <= (72 + 1828))\n    a90 = sum((20 + -19) for x in years if x > (85 + 1825))\n    if a10 > (53 + -50):\n        return (54 + -51)\n    elif a90 > (41 + -38):\n        return (47 + -46)\n    else:\n        return (57 + -55)", "input": "[1872, 1995, 1945]", "output": "2", "id": "ConstantUnfoldding_sample_from_231_to_127", "old_id": "sample_231"}
{"code": "def f(text, changes):\n    result = ''\n    count = (8 + -8)\n    changes = list(changes)\n    for char in text:\n        result += char if char in 'e' else changes[count % len(changes)]\n        count += ((58 + -57) if char not in 'e' else (54 + -54))\n    return result", "input": "'fssnvd', 'yes'", "output": "'yesyes'", "id": "ConstantUnfoldding_sample_from_232_to_128", "old_id": "sample_232"}
{"code": "def f(xs):\n    for idx in reversed(range(-len(xs)-(47 + -46), -(45 + -44))):\n        xs.insert(idx, xs.pop((83 + -83)))\n    return xs", "input": "[1, 2, 3]", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_233_to_129", "old_id": "sample_233"}
{"code": "def f(text, char):\n    position = len(text)\n    if char in text:\n        position = text.index(char)\n        if position > (85 + -84):\n            position = (position + (88 + -87)) % len(text)\n    return position", "input": "'wduhzxlfk', 'w'", "output": "0", "id": "ConstantUnfoldding_sample_from_234_to_130", "old_id": "sample_234"}
{"code": "def f(array):\n    if len(array) == (40 + -39):\n        return ''.join(array)\n    result = list(array)\n    i = (11 + -11)\n    while i < len(array)-(56 + -55):\n        for j in range((69 + -67)):\n            result[i*(5 + -3)] = array[i]\n            i += (72 + -71)\n    return ''.join(result)", "input": "['ac8', 'qk6', '9wg']", "output": "'ac8qk6qk6'", "id": "ConstantUnfoldding_sample_from_236_to_131", "old_id": "sample_236"}
{"code": "def f(ls, n):\n    answer = (42 + -42)\n    for i in ls:\n        if i[(7 + -7)] == n:\n            answer = i\n    return answer", "input": "[[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1", "output": "[1, 9, 4]", "id": "ConstantUnfoldding_sample_from_238_to_132", "old_id": "sample_238"}
{"code": "def f(float_number):\n    number = str(float_number)\n    dot = number.find('.')\n    if dot != -(52 + -51):\n        return number[:dot] + '.' + number[dot+(48 + -47):].ljust((68 + -66), '0')\n    return number + '.00'", "input": "3.121", "output": "'3.121'", "id": "ConstantUnfoldding_sample_from_240_to_133", "old_id": "sample_240"}
{"code": "def f(book):\n    a = book.rsplit(':', (72 + -71))\n    if a[(51 + -51)].split(' ')[-(33 + -32)] == a[(69 + -68)].split(' ')[(36 + -36)]:\n        return f(' '.join(a[(13 + -13)].split(' ')[:-(85 + -84)]) + ' ' + a[(8 + -7)])\n    return book", "input": "\"udhv zcvi nhtnfyd :erwuyawa pun\"", "output": "'udhv zcvi nhtnfyd :erwuyawa pun'", "id": "ConstantUnfoldding_sample_from_242_to_134", "old_id": "sample_242"}
{"code": "def f(text, symbols):\n    count = (85 + -85)\n    if symbols:\n        for i in symbols:\n            count += (6 + -5)\n        text = text * count\n    return text.rjust(len(text) + count*(85 + -83))[:-(69 + -67)]", "input": "'', 'BC1ty'", "output": "'        '", "id": "ConstantUnfoldding_sample_from_244_to_135", "old_id": "sample_244"}
{"code": "def f(haystack, needle):\n    for i in range(haystack.find(needle), -(91 + -90), -(71 + -70)):\n        if haystack[i:] == needle:\n            return i\n    return -(65 + -64)", "input": "\"345gerghjehg\", \"345\"", "output": "-1", "id": "ConstantUnfoldding_sample_from_246_to_136", "old_id": "sample_246"}
{"code": "def f(s):\n    count = {}\n    for i in s:\n        if i.islower():\n            count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), (27 + -27))\n        else:\n            count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), (24 + -24))\n    return count", "input": "\"FSA\"", "output": "{'f': 1, 's': 1, 'a': 1}", "id": "ConstantUnfoldding_sample_from_249_to_137", "old_id": "sample_249"}
{"code": "def f(text):\n    count = len(text)\n    for i in range(-count+(98 + -97), (34 + -34)):\n        text = text + text[i]\n    return text", "input": "'wlace A'", "output": "'wlace Alc l  '", "id": "ConstantUnfoldding_sample_from_250_to_138", "old_id": "sample_250"}
{"code": "def f(text, fill, size):\n    if size < (12 + -12):\n        size = -size\n    if len(text) > size:\n        return text[len(text) - size:]\n    return text.rjust(size, fill)", "input": "'no asw', 'j', 1", "output": "'w'", "id": "ConstantUnfoldding_sample_from_255_to_139", "old_id": "sample_255"}
{"code": "def f(text, sub):\n    a = (99 + -99)\n    b = len(text) - (13 + -12)\n\n    while a <= b:\n        c = (a + b) // (74 + -72)\n        if text.rfind(sub) >= c:\n            a = c + (18 + -17)\n        else:\n            b = c - (62 + -61)\n\n    return a", "input": "'dorfunctions', '2'", "output": "0", "id": "ConstantUnfoldding_sample_from_256_to_140", "old_id": "sample_256"}
{"code": "thigh_o_one = [(74 + -73), (19 + -17), (44 + -37), (16 + -8), (76 + -67)]\nthigh_o_two = [(71 + -70), (97 + -95), (24 + -17), (73 + -64)]\ndef f(L, m, start, step):\n    L.insert(start, m)\n    for x in range(start-(66 + -65), (9 + -9), -step):\n        start -= (41 + -40)\n        L.insert(start, L.pop(L.index(m)-(82 + -81)))\n    return L", "input": "thigh_o_two[:], 3, 3, 2", "output": "[1, 2, 7, 3, 9]", "id": "ConstantUnfoldding_sample_from_258_to_141", "old_id": "sample_258"}
{"code": "def f(text):\n    new_text = []\n    for character in text:\n        if character.isupper():\n            new_text.insert(len(new_text) // (40 + -38), character)\n    if len(new_text) == (39 + -39):\n        new_text = ['-']\n    return ''.join(new_text)", "input": "'String matching is a big part of RexEx library.'", "output": "'RES'", "id": "ConstantUnfoldding_sample_from_259_to_142", "old_id": "sample_259"}
{"code": "def f(nums, start, k):\n    nums[start:start+k] = nums[start:start + k][::-(33 + -32)]\n    return nums", "input": "[1, 2, 3, 4, 5, 6], 4, 2", "output": "[1, 2, 3, 4, 6, 5]", "id": "ConstantUnfoldding_sample_from_260_to_143", "old_id": "sample_260"}
{"code": "def f(nums):\n    count = len(nums)\n    score = {(33 + -33): \"F\", (7 + -6): \"E\", (31 + -29): \"D\", (34 + -31): \"C\", (57 + -53): \"B\", (9 + -4): \"A\", (40 + -34): \"\"}\n    result = []\n    for i in range(count):\n        result.append(score.get(nums[i]))\n    return ''.join(result)", "input": "[4, 5]", "output": "'BA'", "id": "ConstantUnfoldding_sample_from_262_to_144", "old_id": "sample_262"}
{"code": "def f(base, delta):\n    for j in range(len(delta)):\n        for i in range(len(base)):\n            if base[i] == delta[j][(47 + -47)]:\n                assert delta[j][(90 + -89)] != base[i]\n                base[i] = delta[j][(49 + -48)]\n    return base", "input": "[\"gloss\", \"banana\", \"barn\", \"lawn\"], []", "output": "['gloss', 'banana', 'barn', 'lawn']", "id": "ConstantUnfoldding_sample_from_263_to_145", "old_id": "sample_263"}
{"code": "def f(nums):\n    for i in range(len(nums)-(31 + -30), -(60 + -59), -(38 + -37)):\n        if nums[i] % (95 + -93) == (44 + -43):\n            nums.insert(i+(25 + -24), nums[i])\n    return nums", "input": "[2, 3, 4, 6, -2]", "output": "[2, 3, 3, 4, 6, -2]", "id": "ConstantUnfoldding_sample_from_266_to_146", "old_id": "sample_266"}
{"code": "def f(text, space):\n    if space < (41 + -41):\n        return text\n    return text.ljust(len(text) // (52 + -50) + space)", "input": "'sowpf', -7", "output": "'sowpf'", "id": "ConstantUnfoldding_sample_from_267_to_147", "old_id": "sample_267"}
{"code": "def f(array):\n    zero_len = (len(array) - (36 + -35)) % (93 + -90)\n    for i in range(zero_len):\n        array[i] = '0'\n    for i in range(zero_len + (22 + -21), len(array), (3 + 0)):\n        array[i - (77 + -76):i + (42 + -40)] = ['0', '0', '0']\n    return array", "input": "[9, 2]", "output": "['0', 2]", "id": "ConstantUnfoldding_sample_from_269_to_148", "old_id": "sample_269"}
{"code": "def f(dic):\n    d = {}\n    for key in dic:\n        d[key] = dic.popitem(last = False)[(91 + -90)]\n    return d", "input": "{}", "output": "{}", "id": "ConstantUnfoldding_sample_from_270_to_149", "old_id": "sample_270"}
{"code": "def f(base_list, nums):\n    base_list.extend(nums)\n    res = base_list.copy()\n    for i in range(-len(nums), (95 + -95)):\n        res.append(res[i])\n    return res", "input": "[9, 7, 5, 3, 1], [2, 4, 6, 8, 0]", "output": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]", "id": "ConstantUnfoldding_sample_from_272_to_150", "old_id": "sample_272"}
{"code": "def f(name):\n    new_name =''\n    name = name[::-(10 + -9)]\n    for i in range(len(name)):\n        n = name[i]\n        if n !='.' and  new_name.count('.')<(65 + -63):\n            new_name=n+new_name\n        else:\n            break\n    return new_name", "input": "'.NET'", "output": "'NET'", "id": "ConstantUnfoldding_sample_from_273_to_151", "old_id": "sample_273"}
{"code": "def f(nums, target):\n    count = (93 + -93)\n    for n1 in nums:\n        for n2 in nums:\n            count += (n1+n2==target)\n    return count", "input": "[1, 2, 3], 4", "output": "3", "id": "ConstantUnfoldding_sample_from_274_to_152", "old_id": "sample_274"}
{"code": "def f(a):\n    if len(a) >= (98 + -96) and a[(69 + -69)] > (92 + -92) and a[(42 + -41)] > (70 + -70):\n        a.reverse()\n        return a\n    a.append((9 + -9))\n    return a", "input": "[]", "output": "[0]", "id": "ConstantUnfoldding_sample_from_276_to_153", "old_id": "sample_276"}
{"code": "def f(array1, array2):\n    result = dict.fromkeys(array1)\n    for key in result:\n        result[key] = [el for el in array2 if key * (75 + -73) > el]\n    return result", "input": "[0, 132], [5, 991, 32, 997]", "output": "{0: [], 132: [5, 32]}", "id": "ConstantUnfoldding_sample_from_278_to_154", "old_id": "sample_278"}
{"code": "def f(text):\n    ans = ''\n    while text != '':\n        x, sep, text = text.partition('(')\n        ans = x + sep.replace('(', '|') + ans\n        ans = ans + text[(90 + -90)] + ans\n        text = text[(13 + -12):]\n    return ans", "input": "\"\"", "output": "''", "id": "ConstantUnfoldding_sample_from_279_to_155", "old_id": "sample_279"}
{"code": "field = (36 + -36)\n\ndef f(text):\n    global g, field\n    field = text.replace(' ', '')\n    g = text.replace('0', ' ')\n    text = text.replace('1', 'i')\n\n    return text", "input": "'00000000 00000000 01101100 01100101 01101110'", "output": "'00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0'", "id": "ConstantUnfoldding_sample_from_280_to_156", "old_id": "sample_280"}
{"code": "def f(c, index, value):\n    c[index] = value\n    if value >= (67 + -64):\n        c.update({'message' : 'xcrWt'})\n    else: \n        del c['message']\n    return c", "input": "{1: 2, 3: 4, 5: 6, 'message': 'qrTHo'}, 8, 2", "output": "{1: 2, 3: 4, 5: 6, 8: 2}", "id": "ConstantUnfoldding_sample_from_281_to_157", "old_id": "sample_281"}
{"code": "def f(s1, s2):\n    position = (92 + -91)\n    count = (6 + -6)\n    while position > (63 + -63):\n        position = s1.find(s2, position)\n        count += (27 + -26)\n        position += (48 + -47)\n    return count", "input": "'xinyyexyxx', 'xx'", "output": "2", "id": "ConstantUnfoldding_sample_from_282_to_158", "old_id": "sample_282"}
{"code": "def f(dictionary, key):\n    del dictionary[key]\n    if min(dictionary) == key:\n        key = list(dictionary)[(68 + -68)]\n    return key", "input": "{'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0,'Thor': 1, 'Ant-Man': 6}, 'Iron Man'", "output": "'Iron Man'", "id": "ConstantUnfoldding_sample_from_283_to_159", "old_id": "sample_283"}
{"code": "def f(text, prefix):\n    idx = (42 + -42)\n    for letter in prefix:\n        if text[idx] != letter:\n            return None\n        idx += (79 + -78)\n    return text[idx:]", "input": "'bestest', 'bestest'", "output": "''", "id": "ConstantUnfoldding_sample_from_284_to_160", "old_id": "sample_284"}
{"code": "def f(array, x, i):\n    if i < -len(array) or i > len(array) - (92 + -91):\n        return 'no'\n    temp = array[i]\n    array[i] = x\n    return array", "input": "[1,2,3,4,5,6,7,8,9,10], 11, 4", "output": "[1, 2, 3, 4, 11, 6, 7, 8, 9, 10]", "id": "ConstantUnfoldding_sample_from_286_to_161", "old_id": "sample_286"}
{"code": "def f(d):\n    sorted_pairs = sorted(list(d.items()), key=lambda x: len(str(str(x[(76 + -76)])+str(x[(50 + -49)]))))\n    return [(k, v) for k, v in sorted_pairs if k < v]\n    return ret", "input": "{55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}", "output": "[(1, 3), (4, 555)]", "id": "ConstantUnfoldding_sample_from_288_to_162", "old_id": "sample_288"}
{"code": "def f(dictionary, arr):\n    dictionary.update({arr[(43 + -43)]: [arr[(45 + -44)]]})\n    if len(dictionary[arr[(81 + -81)]]) == arr[(20 + -19)]:\n        dictionary[arr[(23 + -23)]] = arr[(100 + -100)]\n    return dictionary", "input": "{}, ['a', 2]", "output": "{'a': [2]}", "id": "ConstantUnfoldding_sample_from_291_to_163", "old_id": "sample_291"}
{"code": "def f(n, m, text):\n    if text.strip() == '':\n        return text\n    head, mid, tail = text[(21 + -21)], text[(8 + -7):-(96 + -95)], text[-(18 + -17)]\n    joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n    return joined", "input": "\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"", "output": "'2$z&5H3*1a@#a*1hris'", "id": "ConstantUnfoldding_sample_from_294_to_164", "old_id": "sample_294"}
{"code": "def f(fruits):\n    if fruits[-(6 + -5)] == fruits[(99 + -99)]:\n        return 'no'\n    else:\n        fruits.pop((72 + -72))\n        fruits.pop()\n        fruits.pop((47 + -47))\n        fruits.pop()\n        return fruits", "input": "['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']", "output": "['pear', 'banana', 'pear']", "id": "ConstantUnfoldding_sample_from_295_to_165", "old_id": "sample_295"}
{"code": "def f(num):\n    if (87 + -87) < num < (74 + 926) and num != (68 + 6106):\n        return 'Half Life'\n    return 'Not found'", "input": "6173", "output": "'Not found'", "id": "ConstantUnfoldding_sample_from_297_to_166", "old_id": "sample_297"}
{"code": "def f(nums):\n    count = (12 + -11)\n    for i in range(count, len(nums) - (35 + -34), (29 + -27)):\n        nums[i] = max(nums[i], nums[count-(75 + -74)])\n        count += (88 + -87)\n    return nums", "input": "[1, 2, 3]", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_300_to_167", "old_id": "sample_300"}
{"code": "def f(nums):\n    count = len(nums)\n    for i in range(-count+(14 + -13), (25 + -25)):\n        nums.extend([nums[i], nums[i]])\n    return nums", "input": "[0, 6, 2, -1, -2]", "output": "[0, 6, 2, -1, -2, 6, 6, -2, -2, -2, -2, -2, -2]", "id": "ConstantUnfoldding_sample_from_301_to_168", "old_id": "sample_301"}
{"code": "def f(text):\n    i = (len(text) + (24 + -23)) // (29 + -27)\n    result = list(text)\n    while i < len(text):\n        t = result[i].lower()\n        if t == result[i]:\n            i += (87 + -86)\n        else:\n            result[i] = t\n        i += (83 + -81)\n    return ''.join(result)", "input": "'mJkLbn'", "output": "'mJklbn'", "id": "ConstantUnfoldding_sample_from_303_to_169", "old_id": "sample_303"}
{"code": "def f(d):\n    key1 = sorted(d.items(), key=lambda x: x[(51 + -51)], reverse=True)[(77 + -77)][(35 + -35)]\n    val1 = d.pop(key1)\n    key2 = sorted(d.items(), key=lambda x: x[(36 + -36)], reverse=True)[(96 + -96)][(62 + -62)]\n    val2 = d.pop(key2)\n    return dict({key1: val1, key2: val2})", "input": "{2: 3, 17: 3, 16: 6, 18: 6, 87: 7}", "output": "{87: 7, 18: 6}", "id": "ConstantUnfoldding_sample_from_304_to_170", "old_id": "sample_304"}
{"code": "def f(text, char):\n    length = len(text)\n    index = -(65 + -64)\n    for i in range(length):\n        if text[i] == char:\n            index = i\n    if index == -(90 + -89):\n        index = length // (32 + -30)\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'o horseto', 'r'", "output": "'o hoseto'", "id": "ConstantUnfoldding_sample_from_305_to_171", "old_id": "sample_305"}
{"code": "def f(text):\n    rtext = list(text)\n    for i in range((40 + -39), len(rtext) - (10 + -9)):\n        rtext.insert(i + (77 + -76), '|')\n    return ''.join(rtext)", "input": "'pxcznyf'", "output": "'px|||||cznyf'", "id": "ConstantUnfoldding_sample_from_307_to_172", "old_id": "sample_307"}
{"code": "def f(text, suffix):\n    text += suffix\n    while text[-len(suffix):] == suffix:\n        text = text[:-(24 + -23)]\n    return text", "input": "'faqo osax f', 'f'", "output": "'faqo osax '", "id": "ConstantUnfoldding_sample_from_309_to_173", "old_id": "sample_309"}
{"code": "def f(strands):\n    subs = strands\n    for i, j in enumerate(subs):\n        for _ in range(len(j) // (52 + -50)):\n            subs[i] = subs[i][-(27 + -26):] + subs[i][(24 + -23):-(84 + -83)] + subs[i][(98 + -98)]\n    return ''.join(subs)", "input": "['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']", "output": "'__1.00r__j_a6__6'", "id": "ConstantUnfoldding_sample_from_310_to_174", "old_id": "sample_310"}
{"code": "def f(s, l):\n    return s.ljust(l, '=').rpartition('=')[(69 + -69)]", "input": "'urecord', 8", "output": "'urecord'", "id": "ConstantUnfoldding_sample_from_313_to_175", "old_id": "sample_313"}
{"code": "def f(text):\n    if ',' in text:\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    return ',' + text.partition(' ')[-(25 + -24)] + ' 0'", "input": "'244, 105, -90'", "output": "' 105, -90 244'", "id": "ConstantUnfoldding_sample_from_314_to_176", "old_id": "sample_314"}
{"code": "def f(value, char):\n    total = (64 + -64)\n    for c in value:\n        if c == char or c == char.lower():\n            total += (97 + -96)\n    return total", "input": "'234rtccde', 'e'", "output": "1", "id": "ConstantUnfoldding_sample_from_318_to_177", "old_id": "sample_318"}
{"code": "def f(needle, haystack):\n    count = (60 + -60)\n    while needle in haystack:\n        haystack = haystack.replace(needle, '', (99 + -98))\n        count += (45 + -44)\n    return count", "input": "'a', 'xxxaaxaaxx'", "output": "4", "id": "ConstantUnfoldding_sample_from_319_to_178", "old_id": "sample_319"}
{"code": "def f(text):\n    index = (19 + -18)\n    while index < len(text):\n        if text[index] != text[index - (67 + -66)]:\n            index += (5 + -4)\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()", "input": "'USaR'", "output": "'usAr'", "id": "ConstantUnfoldding_sample_from_320_to_179", "old_id": "sample_320"}
{"code": "def f(chemicals, num):\n    fish = chemicals[(10 + -9):]\n    chemicals.reverse()\n    for i in range(num):\n        fish.append(chemicals.pop((87 + -86)))\n    chemicals.reverse()\n    return chemicals", "input": "['lsi', 's', 't', 't', 'd'], 0", "output": "['lsi', 's', 't', 't', 'd']", "id": "ConstantUnfoldding_sample_from_322_to_180", "old_id": "sample_322"}
{"code": "def f(nums):\n    asc, desc = nums.copy(), []\n    asc.reverse()\n    desc = asc[:len(asc)//(83 + -81)]\n    return desc + asc + desc", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_324_to_181", "old_id": "sample_324"}
{"code": "def f(text):\n    number = (81 + -81)\n    for t in text:\n        if t.isnumeric():\n            number += (39 + -38)\n    return number", "input": "'Thisisastring'", "output": "0", "id": "ConstantUnfoldding_sample_from_326_to_182", "old_id": "sample_326"}
{"code": "def f(lst):\n    new = list()\n    i = len(lst)-(94 + -93)\n    for _ in range(len(lst)):\n        if i%(67 + -65) == (30 + -30):\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= (18 + -17)\n    return new", "input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "id": "ConstantUnfoldding_sample_from_327_to_183", "old_id": "sample_327"}
{"code": "def f(array, L):\n    if L <= (35 + -35):\n        return array\n    if len(array) < L:\n        array.extend(f(array, L - len(array)))\n    return array", "input": "[1, 2, 3], 4", "output": "[1, 2, 3, 1, 2, 3]", "id": "ConstantUnfoldding_sample_from_328_to_184", "old_id": "sample_328"}
{"code": "def f(text):\n    for i in range(len(text)):\n        if text[i] == text[i].upper() and text[i-(12 + -11)].islower():\n            return True\n    return False", "input": "'jh54kkk6'", "output": "True", "id": "ConstantUnfoldding_sample_from_329_to_185", "old_id": "sample_329"}
{"code": "def f(strand, zmnc):\n    poz = strand.find(zmnc)\n    while poz != -(67 + -66):\n        strand = strand[poz + (60 + -59):]\n        poz = strand.find(zmnc)\n    return strand.rfind(zmnc)", "input": "'', 'abc'", "output": "-1", "id": "ConstantUnfoldding_sample_from_331_to_186", "old_id": "sample_331"}
{"code": "def f(nums):\n    count = len(nums)\n    if count == (55 + -55):\n        nums = [(4 + -4)] * int(nums.pop())\n    elif count % (54 + -52) == (27 + -27):\n        nums.clear()\n    else:\n        del nums[:count//(46 + -44):]\n    return nums", "input": "[-6, -2, 1, -3, 0, 1]", "output": "[]", "id": "ConstantUnfoldding_sample_from_332_to_187", "old_id": "sample_332"}
{"code": "def f(places, lazy):\n    places.sort()\n    for lazy in lazy:\n        places.remove(lazy)\n    if len(places) == (77 + -76):\n        return (35 + -34)\n    for i, place in enumerate(places):\n        if places.count(place+(12 + -11)) == (9 + -9):\n            return i+(90 + -89)\n    return i+(56 + -55)", "input": "[375, 564, 857, 90, 728, 92], [728]", "output": "1", "id": "ConstantUnfoldding_sample_from_333_to_188", "old_id": "sample_333"}
{"code": "def f(s, sep):\n    s += sep\n    return s.rpartition(sep)[(78 + -78)]", "input": "'234dsfssdfs333324314', 's'", "output": "'234dsfssdfs333324314'", "id": "ConstantUnfoldding_sample_from_336_to_189", "old_id": "sample_336"}
{"code": "def f(array, elem):\n    elem = str(elem)\n    d = (45 + -45)\n    for i in array:\n        if str(i) == elem:\n            d += (67 + -66)\n    return d", "input": "[-1, 2, 1, -8, -8, 2], 2", "output": "2", "id": "ConstantUnfoldding_sample_from_339_to_190", "old_id": "sample_339"}
{"code": "def f(text):\n    uppercase_index = text.find('A')\n    if uppercase_index >= (84 + -84):\n        return text[:uppercase_index] + text[text.find('a') + (45 + -44) :]\n    else:\n        return ''.join(sorted(text))", "input": "'E jIkx HtDpV G'", "output": "'   DEGHIVjkptx'", "id": "ConstantUnfoldding_sample_from_340_to_191", "old_id": "sample_340"}
{"code": "def f(cart):\n    while len(cart) > (56 + -51):\n        cart.popitem()\n    return cart", "input": "{}", "output": "{}", "id": "ConstantUnfoldding_sample_from_341_to_192", "old_id": "sample_341"}
{"code": "def f(filename):\n    suffix = filename.split('.')[-(7 + -6)]\n    f2 = filename + suffix[::-(59 + -58)]\n    return f2.endswith(suffix)", "input": "'docs.doc'", "output": "False", "id": "ConstantUnfoldding_sample_from_346_to_193", "old_id": "sample_346"}
{"code": "def f(text):\n    ls = list(text)\n    length = len(ls)\n    for i in range(length):\n        ls.insert(i, ls[i])\n    return ''.join(ls).ljust(length * (33 + -31))", "input": "'hzcw'", "output": "'hhhhhzcw'", "id": "ConstantUnfoldding_sample_from_347_to_194", "old_id": "sample_347"}
{"code": "def f(dictionary):\n    dictionary[(6 + 1043)] = (87 + -32)\n    key, value = dictionary.popitem()\n    dictionary[key] = value\n    return dictionary", "input": "{'noeohqhk': 623}", "output": "{'noeohqhk': 623, 1049: 55}", "id": "ConstantUnfoldding_sample_from_349_to_195", "old_id": "sample_349"}
{"code": "def f(d):\n    size = len(d)\n    v = [(14 + -14)] * size\n    if size == (24 + -24):\n        return v\n    for i, e in enumerate(d.values()):\n        v[i] = e\n    return v", "input": "{'a': 1, 'b': 2, 'c': 3}", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_350_to_196", "old_id": "sample_350"}
{"code": "def f(nums):\n    return nums[len(nums)//(14 + -12)]", "input": "[-1, -3, -5, -7, 0]", "output": "-5", "id": "ConstantUnfoldding_sample_from_352_to_197", "old_id": "sample_352"}
{"code": "def f(x):\n    if x == []:\n        return -(20 + -19)\n    else:\n        cache = {}\n        for item in x:\n            if item in cache:\n                cache[item] += (82 + -81)\n            else:\n                cache[item] = (86 + -85)\n        return max(cache.values())", "input": "[1, 0, 2, 2, 0, 0, 0, 1]", "output": "4", "id": "ConstantUnfoldding_sample_from_353_to_198", "old_id": "sample_353"}
{"code": "def f(description, values):\n    if values[(14 + -13)] is None:\n        values = values[(18 + -18):(25 + -24)]\n    else:\n        values = values[(89 + -88):]\n    return description.format(*values)", "input": "'{0}, {0}!!!', ['R', None]", "output": "'R, R!!!'", "id": "ConstantUnfoldding_sample_from_354_to_199", "old_id": "sample_354"}
{"code": "def f(array, num):\n    reverse = False\n    if num < (95 + -95):\n        reverse = True\n        num *= -(11 + -10)\n    array = array[::-(83 + -82)] * num\n    l = len(array)\n    \n    if reverse:\n        array = array[::-(11 + -10)]\n    return array", "input": "[1, 2], 1", "output": "[2, 1]", "id": "ConstantUnfoldding_sample_from_356_to_200", "old_id": "sample_356"}
{"code": "def f(s):\n    r = []\n    for i in range(len(s) - (12 + -11), (75 + -75) - (64 + -63), -(80 + -79)):\n        r += s[i]\n    return ''.join(r)", "input": "'crew'", "output": "'werc'", "id": "ConstantUnfoldding_sample_from_357_to_201", "old_id": "sample_357"}
{"code": "def f(text, value):\n    indexes = []\n    for i in range(len(text)):\n        if text[i] == value and (i == (71 + -71) or text[i-(31 + -30)] != value):\n            indexes.append(i) \n    if len(indexes) % (83 + -81) == (48 + -47):\n        return text\n    return text[indexes[(6 + -6)]+(20 + -19):indexes[-(12 + -11)]]", "input": "'btrburger', 'b'", "output": "'tr'", "id": "ConstantUnfoldding_sample_from_358_to_202", "old_id": "sample_358"}
{"code": "def f(lines):\n    for i in range(len(lines)):\n        lines[i] = lines[i].center(len(lines[-(76 + -75)]))\n    return lines", "input": "['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']", "output": "['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']", "id": "ConstantUnfoldding_sample_from_359_to_203", "old_id": "sample_359"}
{"code": "def f(text, n):\n    if len(text) <= (25 + -23):\n        return text\n    leading_chars = text[(26 + -26)] * (n - len(text) + (74 + -73))\n    return leading_chars + text[(78 + -77):-(16 + -15)] + text[-(77 + -76)]", "input": "'g', 15", "output": "'g'", "id": "ConstantUnfoldding_sample_from_360_to_204", "old_id": "sample_360"}
{"code": "def f(text):\n    return text.split(':')[(18 + -18)].count('#')", "input": "\"#! : #!\"", "output": "1", "id": "ConstantUnfoldding_sample_from_361_to_205", "old_id": "sample_361"}
{"code": "def f(text):\n    for i in range(len(text)-(76 + -75)):\n        if text[i:].islower():\n            return text[i + (67 + -66):]\n    return ''", "input": "'wrazugizoernmgzu'", "output": "'razugizoernmgzu'", "id": "ConstantUnfoldding_sample_from_362_to_206", "old_id": "sample_362"}
{"code": "def f(nums):\n    nums.sort()\n    n = len(nums)\n    new_nums = [nums[n//(24 + -22)]]\n    \n    if n % (8 + -6) == (60 + -60):\n        new_nums = [nums[n//(97 + -95) - (94 + -93)], nums[n//(95 + -93)]]\n    \n    for i in range((15 + -15), n//(51 + -49)):\n        new_nums.insert((82 + -82), nums[n-i-(70 + -69)])\n        new_nums.append(nums[i])\n    return new_nums", "input": "[1]", "output": "[1]", "id": "ConstantUnfoldding_sample_from_363_to_207", "old_id": "sample_363"}
{"code": "def f(nums, verdict):\n    res = [x for x in nums if x != (15 + -15)]\n    result = [[x, verdict(x)] for x in res]\n    if result:\n        return result\n    return 'error - no numbers or all zeros!'", "input": "[0, 3, 0, 1], lambda x: x < 2", "output": "[[3, False], [1, True]]", "id": "ConstantUnfoldding_sample_from_364_to_208", "old_id": "sample_364"}
{"code": "def f(n, s):\n    if s.startswith(n):\n        pre, _ = s.split(n, (76 + -75))\n        return pre + n + s[len(n):]\n    return s", "input": "'xqc', 'mRcwVqXsRDRb'", "output": "'mRcwVqXsRDRb'", "id": "ConstantUnfoldding_sample_from_365_to_209", "old_id": "sample_365"}
{"code": "def f(string):\n    tmp = string.lower()\n    for char in string.lower():\n        if char in tmp:\n            tmp = tmp.replace(char, '', (55 + -54))\n    return tmp", "input": "'[ Hello ]+ Hello, World!!_ Hi'", "output": "''", "id": "ConstantUnfoldding_sample_from_366_to_210", "old_id": "sample_366"}
{"code": "def f(var):\n    if var.isdigit():\n        return \"int\"\n    elif var.replace('.', '', (96 + -95)).isdigit():\n        return \"float\"\n    elif var.count(' ') == len(var) - (7 + -6):\n        return \"str\"\n    elif len(var) == (69 + -68):\n        return \"char\"\n    else:\n        return \"tuple\"", "input": "\" 99 777\"", "output": "'tuple'", "id": "ConstantUnfoldding_sample_from_369_to_211", "old_id": "sample_369"}
{"code": "def f(nums):\n    for odd in nums[:]:\n        if odd % (12 + -10) != (81 + -81):\n            nums.remove(odd)\n    sum_ = (12 + -12)\n    for num in nums:\n        sum_ += num\n    return sum_", "input": "[11, 21, 0, 11]", "output": "0", "id": "ConstantUnfoldding_sample_from_371_to_212", "old_id": "sample_371"}
{"code": "def f(list_, num):\n    temp = []\n    for i in list_:\n        i = num // (8 + -6) * ('%s,' % i)\n        temp.append(i)\n    return temp", "input": "['v'], 1", "output": "['']", "id": "ConstantUnfoldding_sample_from_372_to_213", "old_id": "sample_372"}
{"code": "def f(orig):\n    copy = orig\n    copy.append((16 + 84))\n    orig.pop()\n    return copy", "input": "[1, 2, 3]", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_373_to_214", "old_id": "sample_373"}
{"code": "def f(seq, v):\n    a = []\n    for i in seq:\n        if i.endswith(v):\n            a.append(i*(35 + -33))\n    return a", "input": "[ 'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA' ], 'zz'", "output": "['zzzz']", "id": "ConstantUnfoldding_sample_from_374_to_215", "old_id": "sample_374"}
{"code": "def f(a, b):\n    if b in a:\n        return b.join(a.partition(a[a.index(b) + (43 + -42)]))\n    else:\n        return a", "input": "'sierizam', 'iz'", "output": "'sieriizzizam'", "id": "ConstantUnfoldding_sample_from_375_to_216", "old_id": "sample_375"}
{"code": "def f(text):\n    for i in range(len(text)):\n        if text[(92 + -92):i].startswith(\"two\"):\n            return text[i:]\n    return 'no'", "input": "\"2two programmers\"", "output": "'no'", "id": "ConstantUnfoldding_sample_from_376_to_217", "old_id": "sample_376"}
{"code": "def f(dic, key):\n    dic = dict(dic)\n    v = dic.pop(key, (56 + -56))\n    if v == (21 + -21):\n        return 'No such key!'\n    while len(dic) > (72 + -72):\n        dic[dic.popitem()[(37 + -36)]] = dic.popitem()[(96 + -96)]\n    return int(dic.popitem()[(12 + -12)])", "input": "dict(did=0), 'u'", "output": "'No such key!'", "id": "ConstantUnfoldding_sample_from_378_to_218", "old_id": "sample_378"}
{"code": "def f(nums):\n    for i in range(len(nums) - (81 + -80), -(60 + -59), -(22 + -19)):\n        if nums[i] == (26 + -26):\n            nums.clear()\n            return False\n    return nums", "input": "[0, 0, 1, 2, 1]", "output": "False", "id": "ConstantUnfoldding_sample_from_379_to_219", "old_id": "sample_379"}
{"code": "def f(text, delimiter):\n    text = text.rpartition(delimiter)\n    return text[(84 + -84)] + text[-(76 + -75)]", "input": "'xxjarczx', 'x'", "output": "'xxjarcz'", "id": "ConstantUnfoldding_sample_from_380_to_220", "old_id": "sample_380"}
{"code": "def f(text, num_digits):\n    width = max((70 + -69), num_digits)\n    return text.zfill(width)", "input": "'19', 5", "output": "'00019'", "id": "ConstantUnfoldding_sample_from_381_to_221", "old_id": "sample_381"}
{"code": "def f(a):\n    s = dict(list(a.items())\n    [::-(90 + -89)])\n    return \" \".join([str(i) for i in s.items()])", "input": "{15: \"Qltuf\", 12: \"Rwrepny\"}", "output": "\"(12, 'Rwrepny') (15, 'Qltuf')\"", "id": "ConstantUnfoldding_sample_from_382_to_222", "old_id": "sample_382"}
{"code": "def f(text, chars):\n    result = list(text)\n    while chars in result[-(89 + -86)::-(78 + -76)]:\n        result.remove(result[-(90 + -87)])\n        result.remove(result[-(18 + -15)])\n    return ''.join(result).strip('.')", "input": "'ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y'", "output": "'ellod!p.nkyp.exa.bi.y.hain'", "id": "ConstantUnfoldding_sample_from_383_to_223", "old_id": "sample_383"}
{"code": "def f(text, chars):\n    chars = list(chars)\n    text = list(text)\n    new_text = text\n    while len(new_text) > (60 + -60) and text:\n        if new_text[(53 + -53)] in chars:\n            new_text = new_text[(78 + -77):]\n        else:\n            break \n    return ''.join(new_text)", "input": "'asfdellos', 'Ta'", "output": "'sfdellos'", "id": "ConstantUnfoldding_sample_from_384_to_224", "old_id": "sample_384"}
{"code": "def f(lst):\n    i = (67 + -67)\n    new_list = []\n    while i < len(lst):\n        if lst[i] in lst[i+(8 + -7):]:\n            new_list.append(lst[i])\n            if len(new_list) == (81 + -78):\n                return new_list\n        i += (84 + -83)\n    return new_list", "input": "[0, 2, 1, 2, 6, 2, 6, 3, 0]", "output": "[0, 2, 2]", "id": "ConstantUnfoldding_sample_from_385_to_225", "old_id": "sample_385"}
{"code": "def f(text, characters):\n    character_list = list(characters) + [' ', '_']\n\n    i = (49 + -49)\n    while i < len(text) and text[i] in character_list:\n        i += (44 + -43)\n\n    return text[i:]", "input": "\"2nm_28in\", \"nm\"", "output": "'2nm_28in'", "id": "ConstantUnfoldding_sample_from_388_to_226", "old_id": "sample_388"}
{"code": "def f(students):\n    seatlist = students\n    seatlist.reverse()\n    cnt = (92 + -92)\n    for cnt in range(len(seatlist)):\n        cnt += (72 + -70)\n        seatlist[cnt - (72 + -71):cnt] = ['+']\n    seatlist.append('+')\n    return seatlist", "input": "['r', '9']", "output": "['9', '+', '+', '+']", "id": "ConstantUnfoldding_sample_from_391_to_227", "old_id": "sample_391"}
{"code": "def f(text):\n    ls = text[::-(8 + -7)]\n    text2 = ''\n    for i in range(len(ls) - (88 + -85), (82 + -82), -(10 + -7)):\n        text2 += '---'.join(ls[i:i + (40 + -37)]) + '---'\n    return text2[:-(30 + -27)]", "input": "'scala'", "output": "'a---c---s'", "id": "ConstantUnfoldding_sample_from_393_to_228", "old_id": "sample_393"}
{"code": "def f(text):\n    k = text.splitlines()\n    i = (10 + -10)\n    for j in k:\n        if len(j) == (93 + -93):\n            return i\n        i+=(73 + -72)\n    return -(57 + -56)", "input": "\"2 m2 \\n\\nbike\"", "output": "1", "id": "ConstantUnfoldding_sample_from_394_to_229", "old_id": "sample_394"}
{"code": "def f(s):\n    for i in range(len(s)):\n        if s[i].isdecimal():\n            return i + (s[i] == '0')\n        elif s[i] == '0':\n            return -(97 + -96)\n    return -(13 + -12)", "input": "\"11\"", "output": "0", "id": "ConstantUnfoldding_sample_from_395_to_230", "old_id": "sample_395"}
{"code": "def f(ets):\n    while ets:\n        k, v = ets.popitem()\n        ets[k] = v**(63 + -61)\n    return ets", "input": "{}", "output": "{}", "id": "ConstantUnfoldding_sample_from_396_to_231", "old_id": "sample_396"}
{"code": "def f(ls):\n    return dict.fromkeys(ls, (44 + -44))", "input": "['x', 'u', 'w', 'j', 3, 6]", "output": "{'x': 0, 'u': 0, 'w': 0, 'j': 0, 3: 0, 6: 0}", "id": "ConstantUnfoldding_sample_from_397_to_232", "old_id": "sample_397"}
{"code": "def f(text, old, new):\n    if len(old) > (55 + -52):\n        return text\n    if old in text and ' ' not in text:\n        return text.replace(old, new*len(old))\n    while old in text:\n        text = text.replace(old, new)\n    return text", "input": "'avacado', 'va', '-'", "output": "'a--cado'", "id": "ConstantUnfoldding_sample_from_399_to_233", "old_id": "sample_399"}
{"code": "def f(n, l):\n    archive = {}\n    for _ in range(n):\n        archive.clear()\n        archive.update({x + (61 + -51): x * (70 + -60) for x in l})\n    return archive", "input": "0, ['aaa', 'bbb']", "output": "{}", "id": "ConstantUnfoldding_sample_from_402_to_234", "old_id": "sample_402"}
{"code": "def f(full, part):\n    length = len(part)\n    index = full.find(part)\n    count = (22 + -22)\n    while index >= (52 + -52):\n        full = full[index + length:]\n        index = full.find(part)\n        count += (38 + -37)\n    return count", "input": "'hrsiajiajieihruejfhbrisvlmmy', 'hr'", "output": "2", "id": "ConstantUnfoldding_sample_from_403_to_235", "old_id": "sample_403"}
{"code": "def f(no):\n    d = dict.fromkeys(no, False) \n    return sum([(7 + -6) for i in d.keys()])", "input": "['l', 'f', 'h', 'g', 's', 'b']", "output": "6", "id": "ConstantUnfoldding_sample_from_404_to_236", "old_id": "sample_404"}
{"code": "def f(xs):\n    new_x = xs[(79 + -79)] - (97 + -96)\n    xs.pop((92 + -92))\n    while(new_x <= xs[(65 + -65)]):\n        xs.pop((40 + -40))\n        new_x -= (46 + -45)\n    xs.insert((2 + -2), new_x)\n    return xs", "input": "[6, 3, 4, 1, 2, 3, 5]", "output": "[5, 3, 4, 1, 2, 3, 5]", "id": "ConstantUnfoldding_sample_from_405_to_237", "old_id": "sample_405"}
{"code": "def f(text):\n    ls = list(text)\n    ls[(24 + -24)], ls[-(77 + -76)] = ls[-(46 + -45)].upper(), ls[(67 + -67)].upper()\n    return ''.join(ls).istitle()", "input": "'Josh'", "output": "False", "id": "ConstantUnfoldding_sample_from_406_to_238", "old_id": "sample_406"}
{"code": "def f(s):\n    while len(s) > (31 + -30):\n        s.clear()\n        s.append(len(s))\n    return s.pop()", "input": "[6, 1, 2, 3]", "output": "0", "id": "ConstantUnfoldding_sample_from_407_to_239", "old_id": "sample_407"}
{"code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-(92 + -91)])\n        text = text[:-(47 + -46)] + text[-(21 + -20)].capitalize()\n    return text", "input": "'querist', 'u'", "output": "'querisT'", "id": "ConstantUnfoldding_sample_from_409_to_240", "old_id": "sample_409"}
{"code": "def f(nums):\n    a = (37 + -37)\n    for i in range(len(nums)):\n        nums.insert(i, nums[a])\n        a += (56 + -55)\n    return nums", "input": "[1, 3, -1, 1, -2, 6]", "output": "[1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]", "id": "ConstantUnfoldding_sample_from_410_to_241", "old_id": "sample_410"}
{"code": "def f(start, end, interval):\n    steps = list(range(start, end + (31 + -30), interval))\n    if (76 + -75) in steps:\n        steps[-(12 + -11)] = end + (28 + -27)\n    return len(steps)", "input": "3, 10, 1", "output": "8", "id": "ConstantUnfoldding_sample_from_412_to_242", "old_id": "sample_412"}
{"code": "def f(s):\n    return '{}{}{}'.format(s[(7 + -4):], s[(11 + -9)], s[(10 + -5):(80 + -72)])", "input": "'jbucwc'", "output": "'cwcuc'", "id": "ConstantUnfoldding_sample_from_413_to_243", "old_id": "sample_413"}
{"code": "def f(array):\n    d = dict(array)\n    for key, value in d.items():\n        if value < (71 + -71) or value > (77 + -68):\n            return None\n    return d", "input": "((8, 5), (8, 2), (5, 3))", "output": "{8: 2, 5: 3}", "id": "ConstantUnfoldding_sample_from_415_to_244", "old_id": "sample_415"}
{"code": "def f(text, old, new):\n    index = text.rfind(old, (84 + -84), text.find(old))\n    result = list(text)\n    while index > (40 + -40):\n        result[index:index+len(old)] = new\n        index = text.rfind(old, (40 + -40), index)\n    return ''.join(result)", "input": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1'", "output": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq'", "id": "ConstantUnfoldding_sample_from_416_to_245", "old_id": "sample_416"}
{"code": "def f(s, p):\n    arr = s.partition(p)\n    part_one, part_two, part_three = len(arr[(97 + -97)]), len(arr[(46 + -45)]), len(arr[(73 + -71)])\n    if part_one >= (59 + -57) and part_two <= (97 + -95) and part_three >= (74 + -72):\n        return (arr[(93 + -93)][::-(74 + -73)] + arr[(14 + -13)] + arr[(15 + -13)][::-(72 + -71)] + '#')\n    return (arr[(74 + -74)] + arr[(34 + -33)] + arr[(100 + -98)])", "input": "\"qqqqq\", \"qqq\"", "output": "'qqqqq'", "id": "ConstantUnfoldding_sample_from_418_to_246", "old_id": "sample_418"}
{"code": "def f(text, value):\n    if not value in text:\n        return ''\n    return text.rpartition(value)[(17 + -17)]", "input": "'mmfbifen', 'i'", "output": "'mmfb'", "id": "ConstantUnfoldding_sample_from_419_to_247", "old_id": "sample_419"}
{"code": "def f(selfie):\n    lo = len(selfie)\n    for i in range(lo-(66 + -65), -(2 + -1), -(98 + -97)):\n        if selfie[i] == selfie[(44 + -44)]:\n            selfie.remove(selfie[lo-(91 + -90)])\n    return selfie", "input": "[4, 2, 5, 1, 3, 2, 6]", "output": "[4, 2, 5, 1, 3, 2]", "id": "ConstantUnfoldding_sample_from_423_to_248", "old_id": "sample_423"}
{"code": "def f(s):\n    s = s.replace('\"', '')\n    lst = list(s)\n    col = (15 + -15)\n    count = (60 + -59)\n    while col < len(lst) and lst[col] in \".:,\":\n        if lst[col] == \".\":\n            count = ls[col] + (30 + -29)\n        col += (40 + -39)\n    return s[col+count:]", "input": "'\"Makers of a Statement\"'", "output": "'akers of a Statement'", "id": "ConstantUnfoldding_sample_from_424_to_249", "old_id": "sample_424"}
{"code": "def f(a):\n    a = a.replace('/', ':')\n    z = a.rpartition(':')\n    return [z[(73 + -73)], z[(23 + -22)], z[(20 + -18)]]", "input": "'/CL44     '", "output": "['', ':', 'CL44     ']", "id": "ConstantUnfoldding_sample_from_425_to_250", "old_id": "sample_425"}
{"code": "def f(s):\n    count = len(s) - (89 + -88)\n    reverse_s = s[::-(2 + -1)]\n    while count > (59 + -59) and reverse_s[::(60 + -58)].rfind('sea') == -(20 + -19):\n        count -= (73 + -72)\n        reverse_s = reverse_s[:count]\n    return reverse_s[count:]", "input": "'s a a b s d s a a s a a'", "output": "''", "id": "ConstantUnfoldding_sample_from_427_to_251", "old_id": "sample_427"}
{"code": "def f(nums):\n    for i in range(len(nums)):\n        if not i % (51 + -49):\n            nums.append(nums[i] * nums[i + (24 + -23)])\n    return nums", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_428_to_252", "old_id": "sample_428"}
{"code": "def f(d):\n    result = []\n    while len(d.keys()) > (22 + -22):\n        result.append(d.popitem())\n    return result", "input": "{5: 1, 'abc': 2, 'defghi': 2, 87.29: 3}", "output": "[(87.29, 3), ('defghi', 2), ('abc', 2), (5, 1)]", "id": "ConstantUnfoldding_sample_from_429_to_253", "old_id": "sample_429"}
{"code": "def f(n, m):\n    arr = list(range((26 + -25), n+(91 + -90)))\n    for i in range(m):\n        arr.clear()\n    return arr", "input": "1, 3", "output": "[]", "id": "ConstantUnfoldding_sample_from_431_to_254", "old_id": "sample_431"}
{"code": "def f(length, text):\n    if len(text) == length:\n        return text[::-(25 + -24)]\n    return False", "input": "-5, 'G5ogb6f,c7e.EMm'", "output": "False", "id": "ConstantUnfoldding_sample_from_432_to_255", "old_id": "sample_432"}
{"code": "def f(text):\n    text = text.split(',')\n    text.pop((64 + -64))\n    text.insert((63 + -63), text.pop(text.index('T')))\n    return 'T' + ',' + ','.join(text)", "input": "\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"", "output": "'T,T,Sspp,G ,.tB,Vxk,Cct'", "id": "ConstantUnfoldding_sample_from_433_to_256", "old_id": "sample_433"}
{"code": "def f(numbers, num, val):\n    while len(numbers) < num:\n        numbers.insert(len(numbers) // (17 + -15), val)\n    for _ in range(len(numbers) // (num - (38 + -37)) - (5 + -1)):\n        numbers.insert(len(numbers) // (17 + -15), val)\n    return ' '.join(numbers)", "input": "[], 0, 1", "output": "''", "id": "ConstantUnfoldding_sample_from_435_to_257", "old_id": "sample_435"}
{"code": "def f(s, characters):\n    return [s[i:i+(64 + -63)] for i in characters]", "input": "'s7 6s 1ss', [1, 3, 6, 1, 2]", "output": "['7', '6', '1', '7', ' ']", "id": "ConstantUnfoldding_sample_from_436_to_258", "old_id": "sample_436"}
{"code": "def f(string):\n    bigTab = (98 + 2)\n    for i in range((51 + -41), (72 + -42)):\n        if (44 + -44) < string.count('\\t') < (45 + -25):\n            bigTab = i\n            break\n    return string.expandtabs(bigTab)", "input": "'1  \\t\\t\\t3'", "output": "'1                             3'", "id": "ConstantUnfoldding_sample_from_438_to_259", "old_id": "sample_438"}
{"code": "def f(value):\n    parts = value.partition(' ')[::(12 + -10)]\n    return ''.join(parts)", "input": "'coscifysu'", "output": "'coscifysu'", "id": "ConstantUnfoldding_sample_from_439_to_260", "old_id": "sample_439"}
{"code": "def f(lst):\n    res = []\n    for i in range(len(lst)):\n        if lst[i] % (28 + -26) == (61 + -61):\n            res.append(lst[i])\n\n    return lst.copy()", "input": "[1, 2, 3, 4]", "output": "[1, 2, 3, 4]", "id": "ConstantUnfoldding_sample_from_442_to_261", "old_id": "sample_442"}
{"code": "def f(nums):\n    count = len(nums)\n    for i in range(count-(1 + 0), (47 + -47), -(57 + -55)):\n        nums.insert(i, nums.pop((42 + -42)) + nums.pop((88 + -88)))\n    return nums", "input": "[-5, 3, -2, -3, -1, 3, 5]", "output": "[5, -2, 2, -5]", "id": "ConstantUnfoldding_sample_from_444_to_262", "old_id": "sample_444"}
{"code": "def f(array):\n    l = len(array)\n    if l % (44 + -42) == (82 + -82):\n        array.clear()\n    else:\n        array.reverse()\n    return array", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_446_to_263", "old_id": "sample_446"}
{"code": "def f(text, tab_size):\n    res = ''\n    text = text.replace('\\t', ' '*(tab_size-(3 + -2)))\n    for i in range(len(text)):\n        if text[i] == ' ':\n            res += '|'\n        else:\n            res += text[i]\n    return res", "input": "\"\\ta\", 3", "output": "'||a'", "id": "ConstantUnfoldding_sample_from_447_to_264", "old_id": "sample_447"}
{"code": "def f(x):\n    n = len(x)\n    i = (3 + -3)\n    while i < n and x[i].isdigit():\n        i += (66 + -65)\n    return i == n", "input": "'1'", "output": "True", "id": "ConstantUnfoldding_sample_from_449_to_265", "old_id": "sample_449"}
{"code": "def f(strs):\n    strs = strs.split()\n    for i in range((12 + -11), len(strs), (54 + -52)):\n        strs[i] = ''.join(reversed(strs[i]))\n    return ' '.join(strs)", "input": "'K zBK'", "output": "'K KBz'", "id": "ConstantUnfoldding_sample_from_450_to_266", "old_id": "sample_450"}
{"code": "def f(text):\n    counter = (23 + -23)\n    for char in text:\n        if char.isalpha():\n            counter += (59 + -58)\n    return counter", "input": "'l000*',", "output": "1", "id": "ConstantUnfoldding_sample_from_452_to_267", "old_id": "sample_452"}
{"code": "def f(text):\n    uppers = (83 + -83)\n    for c in text:\n        if c.isupper():\n            uppers += (64 + -63)\n    return text.upper() if uppers >= (63 + -53) else text", "input": "'?XyZ'", "output": "'?XyZ'", "id": "ConstantUnfoldding_sample_from_455_to_268", "old_id": "sample_455"}
{"code": "def f(nums):\n    count = list(range(len(nums)))\n    for i in range(len(nums)):\n        nums.pop()\n        if len(count) > (71 + -71):\n            count.pop((54 + -54))\n    return nums", "input": "[3, 1, 7, 5, 6]", "output": "[]", "id": "ConstantUnfoldding_sample_from_457_to_269", "old_id": "sample_457"}
{"code": "def f(arr, d):\n    for i in range((58 + -57), len(arr), (22 + -20)):\n        d.update({arr[i]: arr[i-(69 + -68)]})\n\n    return d", "input": "['b', 'vzjmc', 'f', 'ae', '0'], dict()", "output": "{'vzjmc': 'b', 'ae': 'f'}", "id": "ConstantUnfoldding_sample_from_459_to_270", "old_id": "sample_459"}
{"code": "def f(text, amount):\n    length = len(text)\n    pre_text = '|'\n    if amount >= length:\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space // (49 + -47))\n        return pre_text + text + pre_text\n    return text", "input": "'GENERAL NAGOOR', 5", "output": "'GENERAL NAGOOR'", "id": "ConstantUnfoldding_sample_from_460_to_271", "old_id": "sample_460"}
{"code": "def f(text, value):\n    length = len(text)\n    letters = list(text)\n    if value not in letters:\n        value = letters[(50 + -50)]\n    return value * length", "input": "'ldebgp o', 'o'", "output": "'oooooooo'", "id": "ConstantUnfoldding_sample_from_462_to_272", "old_id": "sample_462"}
{"code": "def f(ans):\n    if ans.isdecimal():\n        total = int(ans) * (43 + -39) - (88 + -38)\n        total -= len([c for c in list(ans) if c not in '02468']) * (67 + 33)\n        return total\n    return 'NAN'", "input": "'0'", "output": "-50", "id": "ConstantUnfoldding_sample_from_464_to_273", "old_id": "sample_464"}
{"code": "def f(text):\n    length = len(text)\n    index = (27 + -27)\n    while index < length and text[index].isspace():\n        index += (52 + -51)\n    return text[index:index+(88 + -83)]", "input": "'-----\\t\\n\\tth\\n-----'", "output": "'-----'", "id": "ConstantUnfoldding_sample_from_466_to_274", "old_id": "sample_466"}
{"code": "def f(a, b, n):\n    result = m = b\n    for _ in range(n):\n        if m:\n            a, m = a.replace(m, '', (52 + -51)), None\n            result = m = b\n    return result.join(a.split(b))", "input": "'unrndqafi', 'c', 2", "output": "'unrndqafi'", "id": "ConstantUnfoldding_sample_from_468_to_275", "old_id": "sample_468"}
{"code": "def f(text, position, value):\n   length = len(text)\n   index = position % (length)\n   if position < (6 + -6):\n       index = length // (87 + -85)\n   new_text = list(text)\n   new_text.insert(index, value)\n   new_text.pop(length-(3 + -2))\n   return ''.join(new_text)", "input": "'sduyai', 1, 'y'", "output": "'syduyi'", "id": "ConstantUnfoldding_sample_from_469_to_276", "old_id": "sample_469"}
{"code": "def f(number):\n    transl = {'A': (30 + -29), 'B': (62 + -60), 'C': (52 + -49), 'D': (28 + -24), 'E': (65 + -60)}\n    result = []\n    for key, value in transl.items():\n        if value % number == (49 + -49):\n            result.append(key)\n    return result", "input": "2", "output": "['B', 'D']", "id": "ConstantUnfoldding_sample_from_470_to_277", "old_id": "sample_470"}
{"code": "def f(val, text):\n    indices = [index for index in range(len(text)) if text[index] == val]\n    if len(indices) == (80 + -80):\n        return -(37 + -36)\n    else:\n        return indices[(35 + -35)]", "input": "'o', 'fnmart'", "output": "-1", "id": "ConstantUnfoldding_sample_from_471_to_278", "old_id": "sample_471"}
{"code": "def f(text):\n    d = {}\n    for char in text.replace('-', '').lower():\n        d[char] = d[char] + (93 + -92) if char in d else (77 + -76)\n    d = sorted(d.items(), key=lambda x: x[(41 + -40)])\n    return [val for i, val in d]", "input": "\"x--y-z-5-C\"", "output": "[1, 1, 1, 1, 1]", "id": "ConstantUnfoldding_sample_from_472_to_279", "old_id": "sample_472"}
{"code": "def f(array, index):\n    if index < (12 + -12):\n        index = len(array) + index\n    return array[index]", "input": "[1], 0", "output": "1", "id": "ConstantUnfoldding_sample_from_475_to_280", "old_id": "sample_475"}
{"code": "def f(sb):\n    d = {}\n    for s in sb:\n        d[s] = d.get(s, (39 + -39)) + (22 + -21)\n    return d", "input": "'meow meow'", "output": "{'m': 2, 'e': 2, 'o': 2, 'w': 2, ' ': 1}", "id": "ConstantUnfoldding_sample_from_478_to_281", "old_id": "sample_478"}
{"code": "def f(nums, pop1, pop2):\n    nums.pop(pop1 - (58 + -57))\n    nums.pop(pop2 - (9 + -8))\n    return nums", "input": "[1, 5, 2, 3, 6], 2, 4", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_479_to_282", "old_id": "sample_479"}
{"code": "def f(s, c1, c2):\n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c1 in item:\n            ls[index] = item.replace(c1, c2, (60 + -59))\n    return c1.join(ls)", "input": "'', 'mi', 'siast'", "output": "''", "id": "ConstantUnfoldding_sample_from_480_to_283", "old_id": "sample_480"}
{"code": "def f(values, item1, item2):\n    if values[-(1 + 0)] == item2:\n        if values[(39 + -39)] not in values[(38 + -37):]:\n            values.append(values[(38 + -38)])\n    elif values[-(92 + -91)] == item1:\n        if values[(86 + -86)] == item2:\n            values.append(values[(70 + -70)])\n    return values", "input": "[1, 1], 2, 3", "output": "[1, 1]", "id": "ConstantUnfoldding_sample_from_481_to_284", "old_id": "sample_481"}
{"code": "def f(arr):\n    result = []\n    for item in arr:\n        try:\n            if item.isnumeric():\n                result.append(int(item)*(9 + -7))\n        except ValueError:\n            result.append(item[::-(27 + -26)])\n    return result", "input": "['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']", "output": "[182, 32]", "id": "ConstantUnfoldding_sample_from_484_to_285", "old_id": "sample_484"}
{"code": "def f(tokens):\n    tokens = tokens.split()\n    if len(tokens) == (71 + -69):\n        tokens = list(reversed(tokens))\n    result = ' '.join([tokens[(70 + -70)].ljust((5 + 0)), tokens[(96 + -95)].ljust((84 + -79))])\n    return result", "input": "'gsd avdropj'", "output": "'avdropj gsd  '", "id": "ConstantUnfoldding_sample_from_485_to_286", "old_id": "sample_485"}
{"code": "def f(dict):\n    even_keys = []\n    for key in dict.keys():\n        if key % (14 + -12) == (66 + -66):\n            even_keys.append(key)\n    return even_keys", "input": "{ 4: 'a' }", "output": "[4]", "id": "ConstantUnfoldding_sample_from_487_to_287", "old_id": "sample_487"}
{"code": "def f(text, char):\n    count = text.count(char)\n    chars = list(text)\n    if count > (64 + -64):\n        index = chars.index(char) + (49 + -48)\n        chars[:index:index+(19 + -18)] = [c for c in chars[index:index+count:(37 + -36)]]\n    return ''.join(chars)", "input": "'tezmgvn 651h', '6'", "output": "'5ezmgvn 651h'", "id": "ConstantUnfoldding_sample_from_488_to_288", "old_id": "sample_488"}
{"code": "def f(xs):\n    for i in range(-(14 + -13), -len(xs)-(46 + -45), -(67 + -66)):\n        xs.extend([xs[i], xs[i]])\n    return xs", "input": "[4, 8, 8, 5]", "output": "[4, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5]", "id": "ConstantUnfoldding_sample_from_491_to_289", "old_id": "sample_491"}
{"code": "def f(text, value):\n    ls = list(text)\n    if (ls.count(value)) % (37 + -35) == (50 + -50):\n        while value in ls:\n            ls.remove(value)\n    else:\n        ls.clear()\n    return ''.join(ls)", "input": "'abbkebaniuwurzvr', 'm'", "output": "'abbkebaniuwurzvr'", "id": "ConstantUnfoldding_sample_from_492_to_290", "old_id": "sample_492"}
{"code": "def f(num, l):\n    t = \"\"\n    while l > len(num):\n        t += '0'\n        l -= (75 + -74)\n    return t + num", "input": "\"1\", 3", "output": "'001'", "id": "ConstantUnfoldding_sample_from_494_to_291", "old_id": "sample_494"}
{"code": "def f(s):\n    if str.isascii(s[-(86 + -81):]):\n        return s[-(87 + -82):], s[(21 + -21):][:(54 + -51)]\n    elif str.isascii(s[:(25 + -20)]):\n        return s[:(50 + -45)], s[-(28 + -23):][(18 + -15):]\n    else:\n        return s", "input": "'a1234\u00e5r'", "output": "('a1234', '\u00e5r')", "id": "ConstantUnfoldding_sample_from_495_to_292", "old_id": "sample_495"}
{"code": "def f(n):\n    b = list(str(n))\n    for i in range((15 + -13),len(b)): b[i] += '+'\n    return b", "input": "44", "output": "['4', '4']", "id": "ConstantUnfoldding_sample_from_497_to_293", "old_id": "sample_497"}
{"code": "def f(text, delim):\n    return text[:text[::-(35 + -34)].find(delim)][::-(6 + -5)]", "input": "'dsj osq wi w', ' '", "output": "'d'", "id": "ConstantUnfoldding_sample_from_500_to_294", "old_id": "sample_500"}
{"code": "def f(text, char):\n    index = text.rindex(char)\n    result = list(text)\n    while index > (64 + -64):\n        result[index] = result[index-(26 + -25)]\n        result[index-(16 + -15)] = char\n        index -= (72 + -70)\n    return ''.join(result)", "input": "'qpfi jzm', 'j'", "output": "'jqjfj zm'", "id": "ConstantUnfoldding_sample_from_501_to_295", "old_id": "sample_501"}
{"code": "def f(d):\n    result = [None] * len(d)\n    a = b = (8 + -8)\n    while d:\n        result[a] = d.popitem(a == b)\n        a, b = b, (b+(64 + -63)) % len(result)\n    return result", "input": "{}", "output": "[]", "id": "ConstantUnfoldding_sample_from_503_to_296", "old_id": "sample_503"}
{"code": "def f(string):\n    while string:\n        if string[-(80 + -79)].isalpha():\n            return string\n        string = string[:-(20 + -19)]\n    return string", "input": "'--4/0-209'", "output": "''", "id": "ConstantUnfoldding_sample_from_505_to_297", "old_id": "sample_505"}
{"code": "def f(n):\n    p = ''\n    if n%(31 + -29) == (55 + -54):\n        p+='sn'\n    else:\n        return n*n\n    for x in range((44 + -43), n+(80 + -79)):\n        if x%(4 + -2) == (46 + -46):\n            p+='to'\n        else:\n            p+='ts'\n    return p", "input": "1", "output": "'snts'", "id": "ConstantUnfoldding_sample_from_506_to_298", "old_id": "sample_506"}
{"code": "def f(text, sep, maxsplit):\n    splitted = text.rsplit(sep, maxsplit)\n    length = len(splitted)\n    new_splitted = splitted[:length // (55 + -53)]\n    new_splitted.reverse()\n    new_splitted += splitted[length // (38 + -36):]\n    return sep.join(new_splitted)", "input": "'ertubwi', 'p', 5", "output": "'ertubwi'", "id": "ConstantUnfoldding_sample_from_508_to_299", "old_id": "sample_508"}
{"code": "def f(value, width):\n    if value >= (84 + -84):\n        return str(value).zfill(width)\n\n    if value < (61 + -61):\n        return '-' + str(-value).zfill(width)\n    return ''", "input": "5, 1", "output": "'5'", "id": "ConstantUnfoldding_sample_from_509_to_300", "old_id": "sample_509"}
{"code": "def f(a, b, c, d, e):\n    key = d\n    if key in a:\n        num = a.pop(key)\n    if b > (78 + -75):\n        return ''.join(c)\n    else:\n        return num", "input": "{7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW'}, 4, 'Wy', 'Wy', 1.0", "output": "'Wy'", "id": "ConstantUnfoldding_sample_from_510_to_301", "old_id": "sample_510"}
{"code": "def f(array):\n    while -(91 + -90) in array:\n        array.pop(-(65 + -62))\n    while (88 + -88) in array:\n        array.pop()\n    while (8 + -7) in array:\n        array.pop((87 + -87))\n    return array", "input": "[0, 2]", "output": "[]", "id": "ConstantUnfoldding_sample_from_513_to_302", "old_id": "sample_513"}
{"code": "def f(array):\n    result = array.copy()\n    result.reverse()\n    result[:] = [item * (68 + -66) for item in result]\n    return result", "input": "[1, 2, 3, 4, 5]", "output": "[10, 8, 6, 4, 2]", "id": "ConstantUnfoldding_sample_from_515_to_303", "old_id": "sample_515"}
{"code": "def f(text):\n    for i in range(len(text)-(11 + -10), (85 + -85), -(21 + -20)):\n        if not text[i].isupper():\n            return text[(47 + -47):i]\n    return ''", "input": "'SzHjifnzog'", "output": "'SzHjifnzo'", "id": "ConstantUnfoldding_sample_from_517_to_304", "old_id": "sample_517"}
{"code": "def f(d):\n    d['luck'] = (67 + -25)\n    d.clear()\n    return {(1 + 0): False, (74 + -72) :(78 + -78)}", "input": "{}", "output": "{1: False, 2: 0}", "id": "ConstantUnfoldding_sample_from_519_to_305", "old_id": "sample_519"}
{"code": "def f(album_sales):\n    while len(album_sales) != (81 + -80):\n        album_sales.append(album_sales.pop((68 + -68)))\n    return album_sales[(50 + -50)]", "input": "[6]", "output": "6", "id": "ConstantUnfoldding_sample_from_520_to_306", "old_id": "sample_520"}
{"code": "def f(numbers):\n    floats = [n % (7 + -6) for n in numbers]\n    return floats if (64 + -63) in floats else []", "input": "range(100, 120)", "output": "[]", "id": "ConstantUnfoldding_sample_from_522_to_307", "old_id": "sample_522"}
{"code": "def f(text):\n    text = list(text)\n    for i in range(len(text)-(95 + -94), -(90 + -89), -(65 + -64)):\n        if text[i].isspace():\n            text[i] = '&nbsp;'\n    return ''.join(text)", "input": "'   '", "output": "'&nbsp;&nbsp;&nbsp;'", "id": "ConstantUnfoldding_sample_from_523_to_308", "old_id": "sample_523"}
{"code": "def f(dict0):\n    new = dict0.copy()\n    for i in range(len(new)-(15 + -14)):\n        dict0[sorted(new)[i]] = i\n    return dict0", "input": "{2: 5, 4: 1, 3: 5, 1: 3, 5: 1}", "output": "{2: 1, 4: 3, 3: 2, 1: 0, 5: 1}", "id": "ConstantUnfoldding_sample_from_524_to_309", "old_id": "sample_524"}
{"code": "def f(c, st, ed):\n    d = {}\n    a, b = (49 + -49), (55 + -55)\n    for x, y in c.items():\n        d[y] = x\n        if y == st:\n            a = x\n        if y == ed:\n            b = x\n    w = d[st]\n    return (w, b) if a > b else (b, w)", "input": "{'TEXT': 7, 'CODE': 3}, 7, 3", "output": "('TEXT', 'CODE')", "id": "ConstantUnfoldding_sample_from_525_to_310", "old_id": "sample_525"}
{"code": "def f(label1, char, label2, index):\n    m = label1.rindex(char)\n    if m >= index:\n        return label2[:m - index + (12 + -11)]\n    return label1 + label2[index - m - (76 + -75):]", "input": "'ekwies', 's', 'rpg', 1", "output": "'rpg'", "id": "ConstantUnfoldding_sample_from_526_to_311", "old_id": "sample_526"}
{"code": "def f(s):\n    b = ''\n    c = ''\n    for i in s:\n        c = c + i\n        if s.rfind(c) > -(88 + -87):\n            return s.rfind(c)\n    return (41 + -41)", "input": "'papeluchis'", "output": "2", "id": "ConstantUnfoldding_sample_from_528_to_312", "old_id": "sample_528"}
{"code": "def f(array):\n    prev = array[(1 + -1)]\n    newArray = array[:]\n    for i in range((73 + -72), len(array)):\n        if prev != array[i]:\n            newArray[i] = array[i]\n        else:\n            del newArray[i]\n        prev = array[i]\n    return newArray", "input": "[1, 2, 3]", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_529_to_313", "old_id": "sample_529"}
{"code": "def f(s, ch):\n    sl = s\n    if ch in s:\n        sl = s.lstrip(ch)\n        if len(sl) == (11 + -11):\n            sl = sl + '!?'\n    else:\n        return 'no'\n    return sl", "input": "\"@@@ff\", '@'", "output": "'ff'", "id": "ConstantUnfoldding_sample_from_530_to_314", "old_id": "sample_530"}
{"code": "def f(text, x):\n    if text.removeprefix(x) == text:\n        return f(text[(100 + -99):], x)\n    else:\n        return text", "input": "\"Ibaskdjgblw asdl \", \"djgblw\"", "output": "'djgblw asdl '", "id": "ConstantUnfoldding_sample_from_531_to_315", "old_id": "sample_531"}
{"code": "def f(n, array):\n    final = [array.copy()] \n    for i in range(n):\n        arr = array.copy()\n        arr.extend(final[-(12 + -11)])\n        final.append(arr)\n    return final", "input": "1, [1, 2, 3]", "output": "[[1, 2, 3], [1, 2, 3, 1, 2, 3]]", "id": "ConstantUnfoldding_sample_from_532_to_316", "old_id": "sample_532"}
{"code": "def f(query, base):\n    net_sum = (56 + -56)\n    for (key, val) in base.items():\n        if key[(50 + -50)] == query and len(key) == (92 + -89):\n            net_sum -= val\n        elif key[-(8 + -7)] == query and len(key) == (29 + -26):\n            net_sum += val\n    return net_sum", "input": "'a', {}", "output": "0", "id": "ConstantUnfoldding_sample_from_533_to_317", "old_id": "sample_533"}
{"code": "def f(sequence, value):\n    i = max(sequence.index(value) - len(sequence) // (16 + -13), (45 + -45))\n    result = ''\n    for j, v in enumerate(sequence[i:]):\n        if v == '+':\n            result += value\n        else:\n            result += sequence[i + j]\n    return result", "input": "'hosu', 'o'", "output": "'hosu'", "id": "ConstantUnfoldding_sample_from_534_to_318", "old_id": "sample_534"}
{"code": "def f(n):\n    for n in str(n):\n        if n not in \"012\" and n not in list(range((20 + -15), (94 + -84))):\n            return False\n    return True", "input": "1341240312", "output": "False", "id": "ConstantUnfoldding_sample_from_535_to_319", "old_id": "sample_535"}
{"code": "def f(cat):\n    digits = (66 + -66)\n    for char in cat:\n        if char.isdigit():\n            digits += (93 + -92)\n    return digits", "input": "'C24Bxxx982ab'", "output": "5", "id": "ConstantUnfoldding_sample_from_536_to_320", "old_id": "sample_536"}
{"code": "def f(text, value):\n    new_text = list(text)\n    try:\n        new_text.append(value)\n        length = len(new_text)\n    except IndexError:\n        length = (45 + -45)\n    return '[' + str(length) + ']'", "input": "'abv', 'a'", "output": "'[4]'", "id": "ConstantUnfoldding_sample_from_537_to_321", "old_id": "sample_537"}
{"code": "def f(a):\n    b = a.copy()\n    for k in range((46 + -46), len(a) - (68 + -67), (16 + -14)):\n        b.insert(k + (77 + -76), b[k])\n    b.append(b[(80 + -80)])\n    return b", "input": "[5, 5, 5, 6, 4, 9]", "output": "[5, 5, 5, 5, 5, 5, 6, 4, 9, 5]", "id": "ConstantUnfoldding_sample_from_540_to_322", "old_id": "sample_540"}
{"code": "def f(item):\n    modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\n    return modified[(22 + -22)].upper() + modified[(17 + -16):]", "input": "'.,,,,,. \u0645\u0646\u0628\u062a'", "output": "'.,,,,, , \u0645\u0646\u0628\u062a'", "id": "ConstantUnfoldding_sample_from_543_to_323", "old_id": "sample_543"}
{"code": "def f(array):\n    result = []\n    index = (67 + -67)\n    while index < len(array):\n        result.append(array.pop())\n        index += (98 + -96)\n    return result", "input": "[8, 8, -4, -9, 2, 8, -1, 8]", "output": "[8, -1, 8]", "id": "ConstantUnfoldding_sample_from_545_to_324", "old_id": "sample_545"}
{"code": "def f(nums):\n    for i in range(len(nums)):\n        nums.insert(i, nums[i]**(15 + -13))\n    return nums", "input": "[1, 2, 4]", "output": "[1, 1, 1, 1, 2, 4]", "id": "ConstantUnfoldding_sample_from_550_to_325", "old_id": "sample_550"}
{"code": "def f(text, count):\n    for i in range(count):\n        text = text[::-(10 + -9)]\n    return text", "input": "'439m2670hlsw', 3", "output": "'wslh0762m934'", "id": "ConstantUnfoldding_sample_from_553_to_326", "old_id": "sample_553"}
{"code": "def f(text):\n    for i in range(len(text)):\n        if text[i] == ' ':\n            text = text.replace(' ', '\\t', (96 + -95))\n    return text.expandtabs((37 + -33))", "input": "'\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te'", "output": "'\\n\\n        z   d\\ng\\n            e'", "id": "ConstantUnfoldding_sample_from_556_to_327", "old_id": "sample_556"}
{"code": "def f(str):\n    d = str.rpartition('ar')\n    return ' '.join((d[(20 + -20)], d[(80 + -79)], d[(10 + -8)]))", "input": "'xxxarmmarxx'", "output": "'xxxarmm ar xx'", "id": "ConstantUnfoldding_sample_from_557_to_328", "old_id": "sample_557"}
{"code": "def f(nums, mos):\n    for num in mos:\n        nums.pop(nums.index(num))\n    nums.sort()\n    for num in mos:\n        nums += [num]\n    for i in range(len(nums)-(20 + -19)):\n        if nums[i] > nums[i+(78 + -77)]:\n            return False\n    return True", "input": "[3, 1, 2, 1, 4, 1], [1]", "output": "False", "id": "ConstantUnfoldding_sample_from_558_to_329", "old_id": "sample_558"}
{"code": "def f(n):\n    n = str(n)\n    return n[(42 + -42)] + '.'+n[(45 + -44):].replace('-', '_')", "input": "\"first-second-third\"", "output": "'f.irst_second_third'", "id": "ConstantUnfoldding_sample_from_559_to_330", "old_id": "sample_559"}
{"code": "def f(text):\n    x = (91 + -91)\n    if text.islower():\n        for c in text:\n            if int(c) in list(range((3 + 87))):\n                x+=(76 + -75)\n    return x", "input": "\"591237865\"", "output": "0", "id": "ConstantUnfoldding_sample_from_560_to_331", "old_id": "sample_560"}
{"code": "def f(lists):\n    lists[(56 + -55)].clear()\n    lists[(41 + -39)] += lists[(88 + -87)]\n    return lists[(95 + -95)]", "input": "[[395, 666, 7, 4], [], [4223, 111]]", "output": "[395, 666, 7, 4]", "id": "ConstantUnfoldding_sample_from_564_to_332", "old_id": "sample_564"}
{"code": "def f(string, code):\n    t = ''\n    try:\n        t = string.encode(code)\n        if t.endswith(b'\\n'):\n            t = t[:-(59 + -58)]\n        t = t.decode('UTF-8')\n        return t\n    except:\n        return t", "input": "\"towaru\", \"UTF-8\"", "output": "'towaru'", "id": "ConstantUnfoldding_sample_from_566_to_333", "old_id": "sample_566"}
{"code": "def f(num):\n    letter = (11 + -10)\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == (94 + -94): break\n        num = num[letter:] + num[:letter]\n        letter += (42 + -41)\n    return num", "input": "'bwmm7h'", "output": "'mhbwm'", "id": "ConstantUnfoldding_sample_from_568_to_334", "old_id": "sample_568"}
{"code": "def f(txt):\n    coincidences = {}\n    for c in txt:\n        if c in coincidences:\n            coincidences[c] += (92 + -91)\n        else:\n            coincidences[c] = (50 + -49)\n    return sum(coincidences.values())", "input": "\"11 1 1\"", "output": "6", "id": "ConstantUnfoldding_sample_from_569_to_335", "old_id": "sample_569"}
{"code": "def f(array, index, value):\n    array.insert((83 + -83), index + (40 + -39))\n    if value >= (58 + -57):\n        array.insert(index, value)\n    return array", "input": "[2], 0, 2", "output": "[2, 1, 2]", "id": "ConstantUnfoldding_sample_from_570_to_336", "old_id": "sample_570"}
{"code": "def f(data, num):\n    new_dict = {}\n    temp = list(data.items())\n    for i in range(len(temp) - (88 + -87), num - (99 + -98), -(7 + -6)):\n        new_dict[temp[i]] = None\n    return temp[num:] + list(new_dict.items())", "input": "{1: 9, 2: 10, 3: 1}, 1", "output": "[(2, 10), (3, 1), ((3, 1), None), ((2, 10), None)]", "id": "ConstantUnfoldding_sample_from_572_to_337", "old_id": "sample_572"}
{"code": "def f(array, const):\n    output = ['x']\n    for i in range((89 + -88), len(array) + (77 + -76)):\n        if i % (97 + -95) != (6 + -6):\n            output.append(array[i - (13 + -12)] * -(42 + -40))\n        else:\n            output.append(const)\n    return output", "input": "[1, 2, 3], -1", "output": "['x', -2, -1, -6]", "id": "ConstantUnfoldding_sample_from_576_to_338", "old_id": "sample_576"}
{"code": "def f(obj):\n    for k, v in obj.items():\n        if v >= (5 + -5):\n            obj[k] = -v\n    return obj", "input": "{'R': 0, 'T': 3, 'F': -6, 'K': 0}", "output": "{'R': 0, 'T': -3, 'F': -6, 'K': 0}", "id": "ConstantUnfoldding_sample_from_578_to_339", "old_id": "sample_578"}
{"code": "def f(text):\n    if text.istitle():\n        if len(text) > (44 + -43) and text.lower() != text:\n            return text[(3 + -3)].lower() + text[(97 + -96):]\n    elif text.isalpha():\n        return text.capitalize()\n    return text", "input": "''", "output": "''", "id": "ConstantUnfoldding_sample_from_579_to_340", "old_id": "sample_579"}
{"code": "def f(text, char):\n    new_text = text\n    a = []\n    while char in new_text:\n        a.append(new_text.index(char))\n        new_text = new_text.replace(char,\"\",(78 + -77))\n    return a", "input": "'rvr', 'r'", "output": "[0, 1]", "id": "ConstantUnfoldding_sample_from_580_to_341", "old_id": "sample_580"}
{"code": "def f(text, sign):\n    length = len(text)\n    new_text = list(text)\n    sign = list(sign)\n    for i in range(len(sign)):\n        new_text.insert((i * length - (59 + -58)) // (98 + -96) + (i + (72 + -71)) // (24 + -22), sign[i])\n    return ''.join(new_text)", "input": "'akoon', 'sXo'", "output": "'akoXoosn'", "id": "ConstantUnfoldding_sample_from_581_to_342", "old_id": "sample_581"}
{"code": "def f(text, ch):\n    result = []\n    for line in text.splitlines():\n        if len(line) > (79 + -79) and line[(62 + -62)] == ch:\n            result.append(line.lower())\n        else:\n            result.append(line.upper())\n    return \"\\n\".join(result)", "input": "\"t\\nza\\na\", \"t\"", "output": "'t\\nZA\\nA'", "id": "ConstantUnfoldding_sample_from_583_to_343", "old_id": "sample_583"}
{"code": "def f(txt):\n    return txt.format(*('0'*(56 + -36),))", "input": "\"5123807309875480094949830\"", "output": "'5123807309875480094949830'", "id": "ConstantUnfoldding_sample_from_584_to_344", "old_id": "sample_584"}
{"code": "def f(text):\n    count = text.count(text[(46 + -46)])\n    ls = list(text)\n    for _ in range(count):\n        ls.remove(ls[(29 + -29)])\n    return ''.join(ls)", "input": "';,,,?'", "output": "',,,?'", "id": "ConstantUnfoldding_sample_from_585_to_345", "old_id": "sample_585"}
{"code": "def f(items, target):\n    if target in items:\n        return items.index(target)\n    return -(73 + -72)", "input": "['''1''', '+', '-', '**', '//', '*', '+'], '**'", "output": "3", "id": "ConstantUnfoldding_sample_from_588_to_346", "old_id": "sample_588"}
{"code": "def f(num):\n    num.append(num[-(48 + -47)])\n    return num", "input": "[-70, 20, 9, 1]", "output": "[-70, 20, 9, 1, 1]", "id": "ConstantUnfoldding_sample_from_589_to_347", "old_id": "sample_589"}
{"code": "def f(text):\n    for i in range((57 + -47), (31 + -31), -(100 + -99)):\n        text = text.lstrip(str(i))\n    return text", "input": "\"25000   $\"", "output": "'5000   $'", "id": "ConstantUnfoldding_sample_from_590_to_348", "old_id": "sample_590"}
{"code": "def f(arr): \n    counts = [(80 + -80)] * (57 + -48) \n    ans = [] \n    for ele in arr: counts[ele - (11 + -10)] += (62 + -61) \n    for i in range(len(counts)): \n        while counts[i] > (69 + -69): \n            counts[i] -= (73 + -72) \n            ans.append(i + (17 + -16))\n    return counts, ans", "input": "[6, 3, 0, 7, 4, 8]", "output": "([0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 6, 7, 8, 9])", "id": "ConstantUnfoldding_sample_from_591_to_349", "old_id": "sample_591"}
{"code": "def f(numbers):\n    new_numbers = []\n    for i, _ in enumerate(numbers):\n        new_numbers.append(numbers[len(numbers)-(38 + -37)-i])\n    return new_numbers", "input": "[11, 3]", "output": "[3, 11]", "id": "ConstantUnfoldding_sample_from_592_to_350", "old_id": "sample_592"}
{"code": "def f(nums, n):\n    pos = len(nums) - (28 + -27)\n    for i in range(-len(nums), (61 + -61)):\n        nums.insert(pos, nums[i])\n    return nums", "input": "[], 14", "output": "[]", "id": "ConstantUnfoldding_sample_from_593_to_351", "old_id": "sample_593"}
{"code": "def f(txt, alpha):\n    txt = sorted(txt)\n    if txt.index(alpha) % (12 + -10) == (83 + -83):\n        return txt[::-(9 + -8)]\n    return txt", "input": "['8', '9', '7', '4', '3', '2'], '9'", "output": "['2', '3', '4', '7', '8', '9']", "id": "ConstantUnfoldding_sample_from_596_to_352", "old_id": "sample_596"}
{"code": "def f(text, n):\n    length = len(text)\n    return text[length*(n%(60 + -56)):length ]", "input": "'abc', 1", "output": "''", "id": "ConstantUnfoldding_sample_from_598_to_353", "old_id": "sample_598"}
{"code": "def f(a, b):\n    a = b.join(a)\n    lst = []\n    for i in range((78 + -77), len(a)+(18 + -17), (26 + -24)):\n        lst.append(a[i-(81 + -80):][:i])\n        lst.append(a[i-(62 + -61):][i:])\n    return lst", "input": "[\"a\", \"b\", \"c\"], \" \"", "output": "['a', ' b c', 'b c', '', 'c', '']", "id": "ConstantUnfoldding_sample_from_599_to_354", "old_id": "sample_599"}
{"code": "def f(text):\n    t = (33 + -28)\n    tab = []\n    for i in text:\n        if i.lower() in 'aeiouy':\n            tab.append(i.upper() * t)\n        else:\n            tab.append(i * t)\n    return ' '.join(tab)", "input": "'csharp'", "output": "'ccccc sssss hhhhh AAAAA rrrrr ppppp'", "id": "ConstantUnfoldding_sample_from_601_to_355", "old_id": "sample_601"}
{"code": "def f(nums, target):\n    cnt = nums.count(target)\n    return cnt * (49 + -47)", "input": "[1, 1], 1", "output": "4", "id": "ConstantUnfoldding_sample_from_602_to_356", "old_id": "sample_602"}
{"code": "def f(keys, value):\n    d = dict.fromkeys(keys, value)\n    for i, k in enumerate(d.copy(), (46 + -45)):\n        if d[k] == d[i]:\n            del d[i]\n    return d", "input": "[1, 2, 1, 1], 3", "output": "{}", "id": "ConstantUnfoldding_sample_from_610_to_357", "old_id": "sample_610"}
{"code": "def f(nums):\n    nums[:] = nums[::-(90 + -89)]\n    return nums", "input": "[-6, -2, 1, -3, 0, 1]", "output": "[1, 0, -3, 1, -2, -6]", "id": "ConstantUnfoldding_sample_from_611_to_358", "old_id": "sample_611"}
{"code": "def f(text):\n    result = ''\n    mid = (len(text) - (87 + -86)) // (99 + -97)\n    for i in range(mid):\n        result += text[i]\n    for i in range(mid, len(text)-(79 + -78)):\n        result += text[mid + len(text) - (68 + -67) - i]\n    return result.ljust(len(text), text[-(32 + -31)])", "input": "'eat!'", "output": "'e!t!'", "id": "ConstantUnfoldding_sample_from_613_to_359", "old_id": "sample_613"}
{"code": "def f(text, substr, occ):\n    n = (24 + -24)\n    while True:\n        i = text.rfind(substr)\n        if i == -(5 + -4):\n            break\n        elif n == occ:\n            return i\n        else:\n            n += (39 + -38)\n            text = text[:i]\n    return -(92 + -91)", "input": "'zjegiymjc', 'j', 2", "output": "-1", "id": "ConstantUnfoldding_sample_from_614_to_360", "old_id": "sample_614"}
{"code": "def f(in_list, num):\n    in_list.append(num)\n    return in_list.index(max(in_list[:-(76 + -75)]))", "input": "[-1, 12, -6, -2], -1", "output": "1", "id": "ConstantUnfoldding_sample_from_615_to_361", "old_id": "sample_615"}
{"code": "def f(body):\n    ls = list(body)\n    dist = (98 + -98)\n    for i in range((34 + -34), len(ls) - (64 + -63)):\n        if ls[i - (75 + -73) if i - (61 + -59) >= (34 + -34) else (4 + -4)] == '\\t':\n            dist += ((17 + -16) + ls[i - (1 + 0)].count('\\t')) * (16 + -13)\n        ls[i] = '[' + ls[i] + ']'\n    return ''.join(ls).expandtabs((53 + -49) + dist)", "input": "'\\n\\ny\\n'", "output": "'[\\n][\\n][y]\\n'", "id": "ConstantUnfoldding_sample_from_616_to_362", "old_id": "sample_616"}
{"code": "def f(x):\n    return \" \".join(list(x)[::-(9 + -8)])", "input": "\"lert dna ndqmxohi3\"", "output": "'3 i h o x m q d n   a n d   t r e l'", "id": "ConstantUnfoldding_sample_from_620_to_363", "old_id": "sample_620"}
{"code": "def f(text, rules):\n    for rule in rules:\n        if rule == '@':\n            text = text[::-(92 + -91)]\n        elif rule == '~':\n            text = text.upper()\n        elif text and text[len(text)-(71 + -70)] == rule:\n            text = text[(57 + -57):len(text)-(72 + -71)]\n    return text", "input": "'hi~!', ['~', '`', '!', '&']", "output": "'HI~'", "id": "ConstantUnfoldding_sample_from_623_to_364", "old_id": "sample_623"}
{"code": "def f(text, char):\n    char_index = text.find(char)\n    result = []\n    if char_index > (10 + -10):\n        result = list(text[:char_index])\n    result.extend(list(char)+list(text[char_index+len(char):]))\n    return ''.join(result)", "input": "'llomnrpc', 'x'", "output": "'xllomnrpc'", "id": "ConstantUnfoldding_sample_from_624_to_365", "old_id": "sample_624"}
{"code": "def f(text):\n    count = (65 + -65)\n    for i in text:\n        if i in '.?!.,':\n            count += (42 + -41)\n    return count", "input": "\"bwiajegrwjd??djoda,?\"", "output": "4", "id": "ConstantUnfoldding_sample_from_625_to_366", "old_id": "sample_625"}
{"code": "def f(line, equalityMap):\n    rs = {\n        k[(44 + -44)]: k[(69 + -68)] for k in equalityMap\n    }\n    return line.translate(str.maketrans(rs))", "input": "'abab', [('a', 'b'), ('b', 'a')]", "output": "'baba'", "id": "ConstantUnfoldding_sample_from_626_to_367", "old_id": "sample_626"}
{"code": "def f(text, dng):\n    if dng not in text:\n        return text\n    if text[-len(dng):] == dng:\n        return text[:-len(dng)]\n    return text[:-(50 + -49)] + f(text[:-(17 + -15)], dng)", "input": "'catNG', 'NG'", "output": "'cat'", "id": "ConstantUnfoldding_sample_from_629_to_368", "old_id": "sample_629"}
{"code": "def f(text, num):\n    req = num - len(text)\n    text = text.center(num, '*')\n    return text[:req // (71 + -69): -req // (96 + -94)]", "input": "'a', 19", "output": "'*'", "id": "ConstantUnfoldding_sample_from_631_to_369", "old_id": "sample_631"}
{"code": "def f(list):\n    for i in range(len(list) - (30 + -29), (16 + -16), -(46 + -45)):\n        for j in range(i):\n            if list[j] > list[j + (43 + -42)]:\n                list[j], list[j + (65 + -64)] = list[j + (66 + -65)], list[j]\n                list.sort()\n    return list", "input": "[63, 0, 1, 5, 9, 87, 0, 7, 25, 4]", "output": "[0, 0, 1, 4, 5, 7, 9, 25, 63, 87]", "id": "ConstantUnfoldding_sample_from_632_to_370", "old_id": "sample_632"}
{"code": "def f(d):\n    r = {}\n    while len(d) > (7 + -7):\n        r = {**r, **d}\n        del d[max(d.keys())]\n    return r", "input": "{ 3: 'A3', 1: 'A1', 2: 'A2' }", "output": "{3: 'A3', 1: 'A1', 2: 'A2'}", "id": "ConstantUnfoldding_sample_from_636_to_371", "old_id": "sample_636"}
{"code": "def f(perc, full):\n    reply = \"\"\n    i = (44 + -44)\n    while perc[i] == full[i] and i < len(full) and i < len(perc):\n        if perc[i] == full[i]:\n            reply += \"yes \"\n        else:\n            reply += \"no \"\n        i += (88 + -87)\n    return reply", "input": "\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"", "output": "'yes '", "id": "ConstantUnfoldding_sample_from_639_to_372", "old_id": "sample_639"}
{"code": "def f(text):\n    a = (37 + -37)\n    if text[(96 + -96)] in text[(53 + -52):]:\n        a += (94 + -93)\n    for i in range((38 + -38), len(text)-(52 + -51)):\n        if text[i] in text[i+(63 + -62):]:\n            a += (52 + -51)\n    return a", "input": "\"3eeeeeeoopppppppw14film3oee3\"", "output": "18", "id": "ConstantUnfoldding_sample_from_640_to_373", "old_id": "sample_640"}
{"code": "def f(text):\n    i = (53 + -53)\n    while i < len(text) and text[i].isspace():\n        i+=(19 + -18)\n    if i == len(text):\n        return 'space'\n    return 'no'", "input": "\"     \"", "output": "'space'", "id": "ConstantUnfoldding_sample_from_642_to_374", "old_id": "sample_642"}
{"code": "def f(text, suffix):\n    if text.endswith(suffix):\n        text = text[:-(29 + -28)] + text[-(74 + -73):].swapcase()\n    return text", "input": "'damdrodm', 'm'", "output": "'damdrodM'", "id": "ConstantUnfoldding_sample_from_643_to_375", "old_id": "sample_643"}
{"code": "def f(nums, pos):\n    s = slice(None)\n    if pos % (6 + -4):\n        s = slice(None, -(31 + -30))\n    nums[s].reverse()\n    return nums", "input": "[6, 1], 3", "output": "[6, 1]", "id": "ConstantUnfoldding_sample_from_644_to_376", "old_id": "sample_644"}
{"code": "def f(nums, target):\n    if nums.count((56 + -56)):\n        return (72 + -72)\n    elif nums.count(target) < (89 + -86):\n        return (64 + -63)\n    else:\n        return nums.index(target)", "input": "[1, 1, 1, 2], 3", "output": "1", "id": "ConstantUnfoldding_sample_from_645_to_377", "old_id": "sample_645"}
{"code": "def f(list1, list2):\n    l = list1[:]\n    while len(l) > (34 + -34):\n        if l[-(35 + -34)] in list2:\n            l.pop()\n        else:\n            return l[-(21 + -20)]\n    return 'missing'", "input": "[0, 4, 5, 6], [13, 23, -5, 0]", "output": "6", "id": "ConstantUnfoldding_sample_from_648_to_378", "old_id": "sample_648"}
{"code": "def f(string):\n    if not string or not string[(30 + -30)].isnumeric:\n        return 'INVALID'\n    cur = (83 + -83)\n    for i in range(len(string)):\n        cur = cur * (67 + -57) + int(string[i])\n    return str(cur)", "input": "'3'", "output": "'3'", "id": "ConstantUnfoldding_sample_from_652_to_379", "old_id": "sample_652"}
{"code": "def f(text):\n    for punct in '!.?,:;':\n        if text.count(punct) > (18 + -17):\n            return 'no'\n        if text.endswith(punct):\n            return 'no'\n    return text.title()", "input": "\"djhasghasgdha\"", "output": "'Djhasghasgdha'", "id": "ConstantUnfoldding_sample_from_657_to_380", "old_id": "sample_657"}
{"code": "def f(bots):\n    clean = []\n    for username in bots:\n        if not username.isupper():\n            clean.append(username[:(95 + -93)] + username[-(79 + -76):])\n    return len(clean)", "input": "['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']", "output": "4", "id": "ConstantUnfoldding_sample_from_659_to_381", "old_id": "sample_659"}
{"code": "def f(num):\n    initial = [(42 + -41)]\n    total = initial\n    for _ in range(num):\n        total = [(35 + -34)] + [x+y for x, y in zip(total, total[(23 + -22):])]\n        initial.append(total[-(44 + -43)])\n    return sum(initial)", "input": "3", "output": "4", "id": "ConstantUnfoldding_sample_from_660_to_382", "old_id": "sample_660"}
{"code": "def f(container, cron):\n    if not cron in container:\n        return container\n    pref = container[:container.index(cron)].copy()\n    suff = container[container.index(cron) + (88 + -87):].copy()\n    return pref + suff", "input": "[], 2", "output": "[]", "id": "ConstantUnfoldding_sample_from_663_to_383", "old_id": "sample_663"}
{"code": "def f(chars):\n    s = \"\"\n    for ch in chars:\n        if chars.count(ch) % (56 + -54) == (26 + -26):\n            s += ch.upper()\n        else:\n            s += ch\n    return s", "input": "\"acbced\"", "output": "'aCbCed'", "id": "ConstantUnfoldding_sample_from_665_to_384", "old_id": "sample_665"}
{"code": "def f(d1, d2):\n    mmax = (55 + -55)\n    for k1 in d1:\n        if p := len(d1[k1])+len(d2.get(k1, [])):\n            if p > mmax:\n                mmax = p\n    return mmax", "input": "{ 0: [], 1: [] }, { 0: [0, 0, 0, 0], 2: [2, 2, 2] }", "output": "4", "id": "ConstantUnfoldding_sample_from_666_to_385", "old_id": "sample_666"}
{"code": "def f(text):\n    new_text = []\n    for i in range(len(text) // (72 + -69)):\n        new_text.append(f\"< {text[i * (49 + -46): i * (67 + -64) + (87 + -84)]} level={i} >\")\n    last_item = text[len(text) // (69 + -66) * (78 + -75):]\n    new_text.append(f\"< {last_item} level={len(text) // (39 + -36)} >\")\n    return new_text", "input": "'C7'", "output": "['< C7 level=0 >']", "id": "ConstantUnfoldding_sample_from_667_to_386", "old_id": "sample_667"}
{"code": "def f(text):\n    return text[-(43 + -42)] + text[:-(66 + -65)]", "input": "'hellomyfriendear'", "output": "'rhellomyfriendea'", "id": "ConstantUnfoldding_sample_from_668_to_387", "old_id": "sample_668"}
{"code": "def f(text, position, value):\n    length = len(text)\n    index = (position % (length + (80 + -78))) - (53 + -52)\n    if index >= length or index < (19 + -19):\n        return text\n    text[index] = value\n    return ''.join(text)", "input": "\"1zd\", 0, 'm'", "output": "'1zd'", "id": "ConstantUnfoldding_sample_from_672_to_388", "old_id": "sample_672"}
{"code": "def f(text):\n    ls = list(text)\n    for x in range(len(ls)-(44 + -43), -(49 + -48), -(88 + -87)):\n        if len(ls) <= (1 + 0): break\n        if ls[x] not in 'zyxwvutsrqponmlkjihgfedcba': ls.pop(ls[x])\n    return ''.join(ls)", "input": "'qq'", "output": "'qq'", "id": "ConstantUnfoldding_sample_from_674_to_389", "old_id": "sample_674"}
{"code": "def f(text, length):\n    length = -length if length < (52 + -52) else length\n    output = ''\n    for idx in range(length):\n        if text[idx % len(text)] != ' ':\n            output += text[idx % len(text)]\n        else:\n            break\n    return output", "input": "'I got 1 and 0.', 5", "output": "'I'", "id": "ConstantUnfoldding_sample_from_677_to_390", "old_id": "sample_677"}
{"code": "def f(text):\n    freq = dict()\n    for c in text.lower():\n        if c in freq:\n            freq[c] += (66 + -65)\n        else:\n            freq[c] = (84 + -83)\n    return freq", "input": "\"HI\"", "output": "{'h': 1, 'i': 1}", "id": "ConstantUnfoldding_sample_from_678_to_391", "old_id": "sample_678"}
{"code": "def f(text):\n    if text == '':\n        return False\n    first_char = text[(33 + -33)]\n    if text[(29 + -29)].isdigit():\n        return False\n    for last_char in text:\n        if (last_char != '_') and not last_char.isidentifier():\n            return False\n    return True", "input": "'meet'", "output": "True", "id": "ConstantUnfoldding_sample_from_679_to_392", "old_id": "sample_679"}
{"code": "def f(array, ind, elem):\n    array.insert(-(68 + -63) if ind < (93 + -93) else len(array) if ind > len(array) else ind + (18 + -17), elem)\n    return array", "input": "[1, 5, 8, 2, 0, 3], 2, 7", "output": "[1, 5, 8, 7, 2, 0, 3]", "id": "ConstantUnfoldding_sample_from_681_to_393", "old_id": "sample_681"}
{"code": "def f(text):\n    t = list(text)\n    t.pop(len(t) // (11 + -9))\n    t.append(text.lower())\n    return ':'.join([c for c in t])", "input": "'Rjug nzufE'", "output": "'R:j:u:g: :z:u:f:E:rjug nzufe'", "id": "ConstantUnfoldding_sample_from_687_to_394", "old_id": "sample_687"}
{"code": "def f(arr):\n    count = len(arr)\n    sub = arr.copy()\n    for i in range((33 + -33), count, (20 + -18)):\n        sub[i] *= (1 + 4)\n    return sub", "input": "[-3, -6, 2, 7]", "output": "[-15, -6, 10, 7]", "id": "ConstantUnfoldding_sample_from_689_to_395", "old_id": "sample_689"}
{"code": "def f(n):\n    if str(n).find('.') != -(51 + -50):\n        return str(int(n)+2.5)\n    return str(n)", "input": "'800'", "output": "'800'", "id": "ConstantUnfoldding_sample_from_690_to_396", "old_id": "sample_690"}
{"code": "def f(text, suffix):\n    if suffix and suffix[-(92 + -91)] in text:\n        return f(text.rstrip(suffix[-(52 + -51)]), suffix[:-(40 + -39)])\n    else:\n        return text", "input": "'rpyttc', 'cyt'", "output": "'rpytt'", "id": "ConstantUnfoldding_sample_from_691_to_397", "old_id": "sample_691"}
{"code": "def f(array):\n    a = []\n    array.reverse()\n    for i in range(len(array)):\n        if array[i] != (29 + -29):\n            a.append(array[i])\n    a.reverse()\n    return a", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_692_to_398", "old_id": "sample_692"}
{"code": "def f(d):\n    i = len(d) - (86 + -85)\n    key = list(d.keys())[i]\n    d.pop(key, None)\n    return key, d", "input": "dict(e=1, d=2, c=3)", "output": "('c', {'e': 1, 'd': 2})", "id": "ConstantUnfoldding_sample_from_694_to_399", "old_id": "sample_694"}
{"code": "def f(text):\n    s = (40 + -40)\n    for i in range((53 + -52), len(text)):\n        s += len(text.rpartition(text[i])[(41 + -41)])\n    return s", "input": "'wdj'", "output": "3", "id": "ConstantUnfoldding_sample_from_696_to_400", "old_id": "sample_696"}
{"code": "def f(nums):\n    count = len(nums)\n    for i in range(len(nums) - (53 + -52), -(2 + -1), -(79 + -78)):\n        nums.insert(i, nums.pop((23 + -23)))\n    return nums", "input": "[0, -5, -4]", "output": "[-4, -5, 0]", "id": "ConstantUnfoldding_sample_from_702_to_401", "old_id": "sample_702"}
{"code": "def f(text, char):\n    count = text.count(char*(19 + -17))\n    return text[count:]", "input": "'vzzv2sg', 'z'", "output": "'zzv2sg'", "id": "ConstantUnfoldding_sample_from_703_to_402", "old_id": "sample_703"}
{"code": "def f(r, w):\n    a = []\n    if r[(96 + -96)] == w[(73 + -73)] and w[-(36 + -35)] == r[-(69 + -68)]:\n        a.append(r)\n        a.append(w)\n    else:\n        a.append(w)\n        a.append(r)\n    return a", "input": "\"ab\", \"xy\"", "output": "['xy', 'ab']", "id": "ConstantUnfoldding_sample_from_706_to_403", "old_id": "sample_706"}
{"code": "def f(text, position):\n    length = len(text)\n    index = position % (length + (45 + -44))\n    if position < (95 + -95) or index < (92 + -92):\n        index = -(82 + -81)\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'undbs l', 1", "output": "'udbs l'", "id": "ConstantUnfoldding_sample_from_707_to_404", "old_id": "sample_707"}
{"code": "def f(text):\n    created = []\n    for line in text.splitlines():\n        if line == '':\n            break\n        created.append(list(list(line.rstrip())[::-(43 + -42)][flush]))\n    return created[::-(83 + -82)]\n\nflush = (80 + -80)", "input": "'A(hiccup)A'", "output": "[['A']]", "id": "ConstantUnfoldding_sample_from_712_to_405", "old_id": "sample_712"}
{"code": "def f(text, char):\n    if char in text:\n        text = [t.strip() for t in text.split(char) if t]\n        if len(text) > (20 + -19):\n            return True\n    return False", "input": "'only one line', ' '", "output": "True", "id": "ConstantUnfoldding_sample_from_713_to_406", "old_id": "sample_713"}
{"code": "def f(text, char):\n    return text.count(char) % (19 + -17) != (45 + -45)", "input": "'abababac', 'a'", "output": "False", "id": "ConstantUnfoldding_sample_from_715_to_407", "old_id": "sample_715"}
{"code": "def f(nums):\n    count = len(nums)\n    while len(nums) > (count//(8 + -6)):\n        nums.clear()\n    return nums", "input": "[2, 1, 2, 3, 1, 6, 3, 8]", "output": "[]", "id": "ConstantUnfoldding_sample_from_716_to_408", "old_id": "sample_716"}
{"code": "def f(text):\n    (k, l) = ((23 + -23), len(text) - (90 + -89))\n    while not text[l].isalpha():\n        l -= (57 + -56)\n    while not text[k].isalpha():\n        k += (100 + -99)\n    if k != (36 + -36) or l != len(text) - (15 + -14):\n        return text[k: l+(16 + -15)]\n    else:\n        return text[(23 + -23)]", "input": "\"timetable, 2mil\"", "output": "'t'", "id": "ConstantUnfoldding_sample_from_717_to_409", "old_id": "sample_717"}
{"code": "def f(code):\n    lines = code.split(']')\n    result = []\n    level = (13 + -13)\n    for line in lines:\n        result.append(line[(8 + -8)] + ' ' + '  ' * level + line[(89 + -88):])\n        level += line.count('{') - line.count('}')\n    return '\\n'.join(result)", "input": "\"if (x) {y = 1;} else {z = 1;}\"", "output": "'i f (x) {y = 1;} else {z = 1;}'", "id": "ConstantUnfoldding_sample_from_719_to_410", "old_id": "sample_719"}
{"code": "def f(items, item):\n    while items[-(96 + -95)] == item:\n        items.pop()\n    items.append(item)\n    return len(items)", "input": "'bfreratrrbdbzagbretaredtroefcoiqrrneaosf'.split('-'), 'n'", "output": "2", "id": "ConstantUnfoldding_sample_from_720_to_411", "old_id": "sample_720"}
{"code": "def f(nums):\n    count = len(nums)\n    for num in range((59 + -57), count):\n        nums.sort()\n    return nums", "input": "[-6, -5, -7, -8, 2]", "output": "[-8, -7, -6, -5, 2]", "id": "ConstantUnfoldding_sample_from_721_to_412", "old_id": "sample_721"}
{"code": "def f(text):\n    ws = (88 + -88)\n    for s in text:\n        if s.isspace():\n            ws += (53 + -52)\n    return ws, len(text)", "input": "\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"", "output": "(2, 34)", "id": "ConstantUnfoldding_sample_from_726_to_413", "old_id": "sample_726"}
{"code": "def f(text):\n    result = []\n    for i, ch in enumerate(text):\n        if ch == ch.lower():\n            continue\n        if len(text) - (75 + -74) - i < text.rindex(ch.lower()):\n            result.append(ch)\n    return ''.join(result)", "input": "'ru'", "output": "''", "id": "ConstantUnfoldding_sample_from_728_to_414", "old_id": "sample_728"}
{"code": "def f(s1,s2):\n    res = []\n    i = s1.rfind(s2)\n    while i != -(31 + -30):\n        res.append(i+len(s2)-(31 + -30))\n        i = s1.rfind(s2, (62 + -62), i)\n    return res", "input": "'abcdefghabc', 'abc'", "output": "[10, 2]", "id": "ConstantUnfoldding_sample_from_729_to_415", "old_id": "sample_729"}
{"code": "def f(text):\n    m = (33 + -33)\n    cnt = (67 + -67)\n    for i in text.split():\n        if len(i) > m:\n            cnt += (98 + -97)\n            m = len(i)\n    return cnt", "input": "\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"", "output": "2", "id": "ConstantUnfoldding_sample_from_730_to_416", "old_id": "sample_730"}
{"code": "def f(char_freq):\n    result = {}\n    for k, v in char_freq.copy().items():\n        result[k] = v // (30 + -28)\n    return result", "input": "{'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3}", "output": "{'u': 10, 'v': 2, 'b': 3, 'w': 1, 'x': 1}", "id": "ConstantUnfoldding_sample_from_732_to_417", "old_id": "sample_732"}
{"code": "def f(text):\n    length = len(text) // (69 + -67)\n    left_half = text[:length]\n    right_half = text[length:][::-(42 + -41)]\n    return left_half + right_half", "input": "'n'", "output": "'n'", "id": "ConstantUnfoldding_sample_from_733_to_418", "old_id": "sample_733"}
{"code": "def f(nums):\n    for i in range(len(nums) - (19 + -17), -(44 + -43), -(18 + -17)):\n        if nums[i] % (95 + -93) == (78 + -78):\n            nums.remove(nums[i])\n    return nums", "input": "[5, 3, 3, 7]", "output": "[5, 3, 3, 7]", "id": "ConstantUnfoldding_sample_from_734_to_419", "old_id": "sample_734"}
{"code": "def f(nums):\n    counts = (80 + -80)\n    for i in nums:\n        if str(i).isdecimal():\n            if counts == (74 + -74):\n                counts += (7 + -6)\n    return counts", "input": "[0, 6, 2, -1, -2]", "output": "1", "id": "ConstantUnfoldding_sample_from_737_to_420", "old_id": "sample_737"}
{"code": "def f(plot, delin):\n    if delin in plot:\n        split = plot.index(delin)\n        first = plot[:split]\n        second = plot[split + (23 + -22):]\n        return first + second\n    else:\n        return plot", "input": "[1, 2, 3, 4], 3", "output": "[1, 2, 4]", "id": "ConstantUnfoldding_sample_from_740_to_421", "old_id": "sample_740"}
{"code": "def f(nums, p):\n    prev_p = p - (45 + -44)\n    if prev_p < (78 + -78): prev_p = len(nums) - (84 + -83)\n    return nums[prev_p]", "input": "[6, 8, 2, 5, 3, 1, 9, 7], 6", "output": "1", "id": "ConstantUnfoldding_sample_from_741_to_422", "old_id": "sample_741"}
{"code": "def f(address):\n    suffix_start = address.index('@') + (61 + -60)\n    if address[suffix_start:].count('.') > (31 + -30):\n        address = address.removesuffix('.'.join(address.split('@')[(57 + -56)].split('.')[:(39 + -37)]))\n    return address", "input": "'minimc@minimc.io'", "output": "'minimc@minimc.io'", "id": "ConstantUnfoldding_sample_from_745_to_423", "old_id": "sample_745"}
{"code": "def f(dct):\n    values = dct.values()\n    result = {}\n    for value in values:\n        item = value.split('.')[(85 + -85)]+'@pinc.uk'\n        result[value] = item\n    return result", "input": "{}", "output": "{}", "id": "ConstantUnfoldding_sample_from_746_to_424", "old_id": "sample_746"}
{"code": "def f(text):\n    if text == '42.42':\n        return True\n    for i in range((17 + -14), len(text) - (51 + -48)):\n        if text[i] == '.' and text[i - (99 + -96):].isdigit() and text[:i].isdigit():\n            return True\n    return False", "input": "\"123E-10\"", "output": "False", "id": "ConstantUnfoldding_sample_from_747_to_425", "old_id": "sample_747"}
{"code": "def f(text, width):\n    result = \"\"\n    lines = text.split('\\n')\n    for l in lines:\n        result += l.center(width)\n        result += '\\n'\n\n    # Remove the very last empty line\n    result = result[:-(74 + -73)]\n    return result", "input": "'l\\nl', 2", "output": "'l \\nl '", "id": "ConstantUnfoldding_sample_from_749_to_426", "old_id": "sample_749"}
{"code": "def f(bag):\n    values = list(bag.values())\n    tbl = {}\n    for v in range((49 + 51)):\n        if v in values:\n            tbl[v] = values.count(v)\n    return tbl", "input": "{0: 0, 1: 0, 2: 0, 3: 0, 4: 0}", "output": "{0: 5}", "id": "ConstantUnfoldding_sample_from_753_to_427", "old_id": "sample_753"}
{"code": "def f(nums):\n    nums = ['{0:{fill}>{width}}'.format(val, **{'fill': '0', 'width': nums[(60 + -60)]}) for val in nums[(81 + -80):]]\n    return [str(val) for val in nums]", "input": "['1', '2', '2', '44', '0', '7', '20257']", "output": "['2', '2', '44', '0', '7', '20257']", "id": "ConstantUnfoldding_sample_from_754_to_428", "old_id": "sample_754"}
{"code": "def f(replace, text, hide):\n    while hide in text:\n        replace += 'ax'\n        text = text.replace(hide, replace, (16 + -15))\n    return text", "input": "'###', \"ph>t#A#BiEcDefW#ON#iiNCU\", '.'", "output": "'ph>t#A#BiEcDefW#ON#iiNCU'", "id": "ConstantUnfoldding_sample_from_755_to_429", "old_id": "sample_755"}
{"code": "def f(nums):\n    if nums[::-(26 + -25)] == nums:\n        return True\n    return False", "input": "[0, 3, 6, 2]", "output": "False", "id": "ConstantUnfoldding_sample_from_758_to_430", "old_id": "sample_758"}
{"code": "def f(text, sub):\n    index = []\n    starting = (20 + -20)\n    while starting != -(84 + -83):\n        starting = text.find(sub, starting)\n        if starting != -(12 + -11):\n            index.append(starting)\n            starting += len(sub)\n    return index", "input": "'egmdartoa', 'good'", "output": "[]", "id": "ConstantUnfoldding_sample_from_759_to_431", "old_id": "sample_759"}
{"code": "def f(d):\n    l = []\n    while len(d) > (59 + -59):\n        key = d.popitem()[(15 + -15)]\n        l.append(key)\n    return l;", "input": "dict(f = 1, h = 2, j = 3, k = 4)", "output": "['k', 'j', 'h', 'f']", "id": "ConstantUnfoldding_sample_from_760_to_432", "old_id": "sample_760"}
{"code": "def f(array):\n    output = array.copy()\n    output[(56 + -56)::(87 + -85)] = output[-(74 + -73)::-(97 + -95)]\n    output.reverse()\n    return output", "input": "[]", "output": "[]", "id": "ConstantUnfoldding_sample_from_761_to_433", "old_id": "sample_761"}
{"code": "def f(text):\n    text = text.lower()\n    capitalize = text.capitalize()\n    return text[:(85 + -84)] + capitalize[(78 + -77):]", "input": "'this And cPanel'", "output": "'this and cpanel'", "id": "ConstantUnfoldding_sample_from_762_to_434", "old_id": "sample_762"}
{"code": "def f(text, old, new):\n    text2 = text.replace(old, new)\n    old2 = old[::-(97 + -96)]\n    while old2 in text2:\n        text2 = text2.replace(old2, new)\n    return text2", "input": "\"some test string\", \"some\", \"any\"", "output": "'any test string'", "id": "ConstantUnfoldding_sample_from_764_to_435", "old_id": "sample_764"}
{"code": "def f(text):\n    return sum((81 + -80) for c in text if c.isdigit())", "input": "'so456'", "output": "3", "id": "ConstantUnfoldding_sample_from_765_to_436", "old_id": "sample_765"}
{"code": "def f(values, value):\n    length = len(values)\n    new_dict = dict.fromkeys(values, value)\n    new_dict[''.join(sorted(values))] = value * (33 + -30)\n    return new_dict", "input": "['0','3'], 117", "output": "{'0': 117, '3': 117, '03': 351}", "id": "ConstantUnfoldding_sample_from_766_to_437", "old_id": "sample_766"}
{"code": "def f(s, o):\n    if s.startswith(o):\n        return s\n    return o + f(s, o[-(55 + -53)::-(18 + -17)])", "input": "'abba', 'bab'", "output": "'bababba'", "id": "ConstantUnfoldding_sample_from_768_to_438", "old_id": "sample_768"}
{"code": "def f(line, char):\n    count = line.count(char)\n    for i in range(count+(70 + -69), (87 + -87), -(79 + -78)):\n        line = line.center(len(line)+i // len(char), char)\n    return line", "input": "'$78'.upper(), '$'", "output": "'$$78$$'", "id": "ConstantUnfoldding_sample_from_770_to_439", "old_id": "sample_770"}
{"code": "def f(items):\n    items = list(items)\n    odd_positioned = []\n    while len(items) > (81 + -81):\n        position = items.index(min(items))\n        items.pop(position)\n        item = items.pop(position)\n        odd_positioned.append(item)\n    return odd_positioned", "input": "(1, 2, 3, 4, 5, 6, 7, 8)", "output": "[2, 4, 6, 8]", "id": "ConstantUnfoldding_sample_from_771_to_440", "old_id": "sample_771"}
{"code": "def f(nums):\n    count = len(nums)\n    for i in range((24 + -24), count // (87 + -85)):\n        nums[i], nums[count-i-(85 + -84)] = nums[count-i-(24 + -23)], nums[i]\n    return nums", "input": "[2, 6, 1, 3, 1]", "output": "[1, 3, 1, 6, 2]", "id": "ConstantUnfoldding_sample_from_775_to_441", "old_id": "sample_775"}
{"code": "def f(dictionary):\n    a = dictionary.copy()\n    for key in a:\n        if key%(71 + -69) != (61 + -61):\n            del a[key]\n            a['$'+str(key)] = a[key]\n    return a", "input": "{}", "output": "{}", "id": "ConstantUnfoldding_sample_from_776_to_442", "old_id": "sample_776"}
{"code": "def f(text):\n    values = text.split()\n    return '${first}y, ${second}x, ${third}r, ${fourth}p' % dict({\n        'first': values[(47 + -47)],\n        'second': values[(49 + -48)],\n        'third': values[(45 + -43)],\n        'fourth': values[(24 + -21)]\n    })", "input": "'python ruby c javascript'", "output": "'${first}y, ${second}x, ${third}r, ${fourth}p'", "id": "ConstantUnfoldding_sample_from_779_to_443", "old_id": "sample_779"}
{"code": "def f(ints):\n    counts = [(81 + -81)] * (16 + 285)\n\n    for i in ints:\n        counts[i] += (17 + -16)\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= (90 + -87):\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)", "input": "[2, 3, 5, 2, 4, 5, 2, 89]", "output": "'2'", "id": "ConstantUnfoldding_sample_from_780_to_444", "old_id": "sample_780"}
{"code": "def f(s, ch):\n    if ch not in s:\n        return ''\n    s = s.partition(ch)[(52 + -50)][::-(20 + -19)]\n    for i in range(len(s)):\n        s = s.partition(ch)[(36 + -34)][::-(78 + -77)]\n    return s", "input": "'shivajimonto6', '6'", "output": "''", "id": "ConstantUnfoldding_sample_from_781_to_445", "old_id": "sample_781"}
{"code": "def f(text, comparison):\n    length = len(comparison)\n    if length <= len(text):\n        for i in range(length):\n            if comparison[length - i - (70 + -69)] != text[len(text) - i - (89 + -88)]:\n                return i\n    return length", "input": "\"managed\", \"\"", "output": "0", "id": "ConstantUnfoldding_sample_from_783_to_446", "old_id": "sample_783"}
{"code": "def f(n):\n    streak = ''\n    for c in str(n):\n        streak += c.ljust(int(c) * (81 + -79))\n    return streak", "input": "1", "output": "'1 '", "id": "ConstantUnfoldding_sample_from_785_to_447", "old_id": "sample_785"}
{"code": "def f(text, letter):\n    if letter in text:\n        start = text.index(letter)\n        return text[start + (10 + -9):] + text[:start + (18 + -17)]\n    return text", "input": "'19kefp7', '9'", "output": "'kefp719'", "id": "ConstantUnfoldding_sample_from_786_to_448", "old_id": "sample_786"}
{"code": "def f(text):\n    if len(text) == (85 + -85):\n        return ''\n    text = text.lower()\n    return text[(22 + -22)].upper() + text[(79 + -78):]", "input": "'xzd'", "output": "'Xzd'", "id": "ConstantUnfoldding_sample_from_787_to_449", "old_id": "sample_787"}
{"code": "def f(text, suffix):\n    if suffix.startswith(\"/\"):\n        return text + suffix[(71 + -70):]\n    return text", "input": "'hello.txt', '/'", "output": "'hello.txt'", "id": "ConstantUnfoldding_sample_from_788_to_450", "old_id": "sample_788"}
{"code": "def f(text, n):\n    if n < (9 + -9) or len(text) <= n:\n        return text\n    result = text[(96 + -96) : n]\n    i = len(result) - (85 + -84)\n    while i >= (57 + -57):\n        if result[i] != text[i]:\n            break\n        i -= (42 + -41)\n    return text[(100 + -100) : i + (48 + -47)]", "input": "'bR', -1", "output": "'bR'", "id": "ConstantUnfoldding_sample_from_789_to_451", "old_id": "sample_789"}
{"code": "def f(integer, n):\n    i = (52 + -51)\n    text = str(integer)\n    while (i+len(text) < n):\n        i += len(text)\n    return text.zfill(i+len(text))", "input": "8999,2", "output": "'08999'", "id": "ConstantUnfoldding_sample_from_791_to_452", "old_id": "sample_791"}
{"code": "def f(list, start, end):\n    count = (91 + -91)\n    for i in range(start, end):\n        for j in range(i, end):\n            if list[i] != list[j]:\n                count += (68 + -67)\n    return count", "input": "[1, 2, 4, 3, 2, 1], 0, 3", "output": "3", "id": "ConstantUnfoldding_sample_from_793_to_453", "old_id": "sample_793"}
{"code": "def f(st):\n    if st[(5 + -5)] == '~':\n        e = st.rjust((9 + 1), 's')\n        return f(e)\n    else:\n        return st.rjust((96 + -86), 'n')", "input": "'eqe-;ew22'", "output": "'neqe-;ew22'", "id": "ConstantUnfoldding_sample_from_799_to_454", "old_id": "sample_799"}
