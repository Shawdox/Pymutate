{"code": "def f(lists):\n    dic = {}\n    idx_lkdy = 0\n    list_95ae = lists\n    while idx_lkdy < len(list_95ae):\n        n = list_95ae[idx_lkdy]\n        if not n in dic:\n            dic[n] = lists[:lists.index(n) + 1]\n        else:\n            dic[n].append(lists.pop(lists.index(n)))\n        idx_lkdy = idx_lkdy + 1\n    return str(dic).replace(('' + ' '), ('' + ''))", "input": "[5, 2, 7, 2, 3, 5]", "output": "'{5:[5,5],2:[5,2,2],7:[5,2,7]}'", "id": "StringUnfoldding_sample_from_33_to_0", "old_id": 33}
{"code": "def f(text):\n    text = text.upper()\n    count_upper = 0\n    idx_20vn = 0\n    list_60hf = text\n    while idx_20vn < len(list_60hf):\n        char = list_60hf[idx_20vn]\n        if not char.isupper():\n            return ('n' + 'o')\n        else:\n            count_upper += 1\n        idx_20vn = idx_20vn + 1\n    return count_upper // 2", "input": "'ax'", "output": "1", "id": "StringUnfoldding_sample_from_57_to_1", "old_id": 57}
{"code": "def f(text):\n    arr = text.split()\n    result = []\n    idx_j4gv = 0\n    list_029t = arr\n    while idx_j4gv < len(list_029t):\n        item = list_029t[idx_j4gv]\n        if not item.endswith(('da' + 'y')):\n            item += ('d' + 'ay')\n        else:\n            item += ('y' + '')\n        result.append(item)\n        idx_j4gv = idx_j4gv + 1\n    return ('' + ' ').join(result)", "input": "\"nwv mef ofme bdryl\"", "output": "'nwvday mefday ofmeday bdrylday'", "id": "StringUnfoldding_sample_from_84_to_2", "old_id": 84}
{"code": "def f(text):\n    result = []\n    idx_6qm3 = 0\n    list_z4yt = range(len(text))\n    while idx_6qm3 < len(list_z4yt):\n        i = list_z4yt[idx_6qm3]\n        if not not text[i].isascii():\n            if text[i].isalnum():\n                result.append(text[i].upper())\n            else:\n                result.append(text[i])\n        else:\n            return False\n        idx_6qm3 = idx_6qm3 + 1\n    return ('' + '').join(result)", "input": "\"ua6hajq\"", "output": "'UA6HAJQ'", "id": "StringUnfoldding_sample_from_107_to_3", "old_id": 107}
{"code": "def f(text):\n    a = [('' + '')]\n    b = ('' + '')\n    idx_g2rs = 0\n    list_ga3f = text\n    while idx_g2rs < len(list_ga3f):\n        i = list_ga3f[idx_g2rs]\n        if not not i.isspace():\n            b += i\n        else:\n            a.append(b)\n            b = ('' + '')\n        idx_g2rs = idx_g2rs + 1\n    return len(a)", "input": "\"       \"", "output": "1", "id": "StringUnfoldding_sample_from_110_to_4", "old_id": 110}
{"code": "def f(line):\n    count = 0\n    a = []\n    idx_czmd = 0\n    list_ki1g = range(len(line))\n    while idx_czmd < len(list_ki1g):\n        i = list_ki1g[idx_czmd]\n        count += 1\n        if not count%2==0:\n            a.append(line[i])\n        else:\n            a.append(line[i].swapcase())\n        idx_czmd = idx_czmd + 1\n    return ('' + '').join(a)", "input": "\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"", "output": "'987YhnShAShD 93275yRgsgBgssHfBsFB'", "id": "StringUnfoldding_sample_from_113_to_5", "old_id": 113}
{"code": "def f(text):\n    result = (\"\" + \"\")\n    idx_wkqa = 0\n    list_u9oy = range(len(text))\n    while idx_wkqa < len(list_u9oy):\n        i = list_u9oy[idx_wkqa]\n        if not i % 2 == 0:\n            result += text[i]\n        else:\n            result += text[i].swapcase()\n        idx_wkqa = idx_wkqa + 1\n    return result", "input": "\"vsnlygltaw\"", "output": "'VsNlYgLtAw'", "id": "StringUnfoldding_sample_from_119_to_6", "old_id": 119}
{"code": "def f(text):\n    odd = ('' + '')\n    even = ('' + '')\n    idx_73sq = 0\n    list_ypc7 = list(enumerate(text))\n    while idx_73sq < len(list_ypc7):\n        i, c = list_ypc7[idx_73sq]\n        if not i % 2 == 0:\n            odd += c\n        else:\n            even += c\n        idx_73sq = idx_73sq + 1\n    return even + odd.lower()", "input": "'Mammoth'", "output": "'Mmohamt'", "id": "StringUnfoldding_sample_from_128_to_7", "old_id": 128}
{"code": "def f(n):\n    t = 0\n    b = ('' + '')\n    digits = list(map(int, str(n)))\n    idx_7ojz = 0\n    list_1gvp = digits\n    while idx_7ojz < len(list_1gvp):\n        d = list_1gvp[idx_7ojz]\n        if not d == 0: break\n        else: t += 1\n        idx_7ojz = idx_7ojz + 1\n    idx_i54f = 0\n    list_5kjq = range(t)\n    while idx_i54f < len(list_5kjq):\n        _ = list_5kjq[idx_i54f]\n        b += str(1) + ('0' + '') + str(4)\n        idx_i54f = idx_i54f + 1\n    b += str(n)\n    return b", "input": "372359", "output": "'372359'", "id": "StringUnfoldding_sample_from_134_to_8", "old_id": 134}
{"code": "def f(text):\n    ls = list(text)\n    total = (len(text) - 1) * 2\n    idx_1wiq = 0\n    list_xjyo = range(1, total+1)\n    while idx_1wiq < len(list_xjyo):\n        i = list_xjyo[idx_1wiq]\n        if not i % 2:\n            ls.insert(0, ('+' + ''))\n        else:\n            ls.append(('+' + ''))\n        idx_1wiq = idx_1wiq + 1\n    return ('' + '').join(ls).rjust(total)", "input": "'taole'", "output": "'++++taole++++'", "id": "StringUnfoldding_sample_from_169_to_9", "old_id": 169}
{"code": "def f(name):\n    new_name =('' + '')\n    name = name[::-1]\n    idx_stbj = 0\n    list_yhac = range(len(name))\n    while idx_stbj < len(list_yhac):\n        i = list_yhac[idx_stbj]\n        n = name[i]\n        if not n !=('' + '.') and  new_name.count(('' + '.'))<2:\n            break\n        else:\n            new_name=n+new_name\n        idx_stbj = idx_stbj + 1\n    return new_name", "input": "'.NET'", "output": "'NET'", "id": "StringUnfoldding_sample_from_273_to_10", "old_id": 273}
{"code": "def f(text):\n    ans = []\n    idx_3skz = 0\n    list_yxni = text\n    while idx_3skz < len(list_yxni):\n        char = list_yxni[idx_3skz]\n        if not char.isdigit():\n            ans.append(('' + ' '))\n        else:\n            ans.append(char)\n        idx_3skz = idx_3skz + 1\n    return ('' + '').join(ans)", "input": "'m4n2o'", "output": "' 4 2 '", "id": "StringUnfoldding_sample_from_330_to_11", "old_id": 330}
{"code": "def f(s):\n    idx_4xyz = 0\n    list_zqhj = range(len(s))\n    while idx_4xyz < len(list_zqhj):\n        i = list_zqhj[idx_4xyz]\n        if not s[i].isdecimal():\n            if s[i] == ('0' + ''):\n                return -1\n        else:\n            return i + (s[i] == ('' + '0'))\n        idx_4xyz = idx_4xyz + 1\n    return -1", "input": "\"11\"", "output": "0", "id": "StringUnfoldding_sample_from_395_to_12", "old_id": 395}
{"code": "def f(text):\n    idx_hf0n = 0\n    list_m0ht = text\n    while idx_hf0n < len(list_m0ht):\n        space = list_m0ht[idx_hf0n]\n        if not space == ('' + ' '):\n            text = text.replace(('' + 'cd'), space)\n        else:\n            text = text.lstrip()\n        idx_hf0n = idx_hf0n + 1\n    return text", "input": "\"lorem ipsum\"", "output": "'lorem ipsum'", "id": "StringUnfoldding_sample_from_443_to_13", "old_id": 443}
{"code": "def f(text, tab_size):\n    res = ('' + '')\n    text = text.replace('\\t', ('' + ' ')*(tab_size-1))\n    idx_0fos = 0\n    list_rvzj = range(len(text))\n    while idx_0fos < len(list_rvzj):\n        i = list_rvzj[idx_0fos]\n        if not text[i] == ('' + ' '):\n            res += text[i]\n        else:\n            res += ('' + '|')\n        idx_0fos = idx_0fos + 1\n    return res", "input": "\"\\ta\", 3", "output": "'||a'", "id": "StringUnfoldding_sample_from_447_to_14", "old_id": 447}
{"code": "def f(n):\n    p = ('' + '')\n    if not n%2 == 1:\n        return n*n\n    else:\n        p+=('' + 'sn')\n    idx_vqh0 = 0\n    list_4ivd = range(1, n+1)\n    while idx_vqh0 < len(list_4ivd):\n        x = list_4ivd[idx_vqh0]\n        if not x%2 == 0:\n            p+=('ts' + '')\n        else:\n            p+=('t' + 'o')\n        idx_vqh0 = idx_vqh0 + 1\n    return p", "input": "1", "output": "'snts'", "id": "StringUnfoldding_sample_from_506_to_15", "old_id": 506}
{"code": "def f(sequence, value):\n    i = max(sequence.index(value) - len(sequence) // 3, 0)\n    result = ('' + '')\n    idx_8zq3 = 0\n    list_esdp = list(enumerate(sequence[i:]))\n    while idx_8zq3 < len(list_esdp):\n        j, v = list_esdp[idx_8zq3]\n        if not v == ('' + '+'):\n            result += sequence[i + j]\n        else:\n            result += value\n        idx_8zq3 = idx_8zq3 + 1\n    return result", "input": "'hosu', 'o'", "output": "'hosu'", "id": "StringUnfoldding_sample_from_534_to_16", "old_id": 534}
{"code": "def f(array, const):\n    output = [('' + 'x')]\n    idx_arw5 = 0\n    list_0a7m = range(1, len(array) + 1)\n    while idx_arw5 < len(list_0a7m):\n        i = list_0a7m[idx_arw5]\n        if not i % 2 != 0:\n            output.append(const)\n        else:\n            output.append(array[i - 1] * -2)\n        idx_arw5 = idx_arw5 + 1\n    return output", "input": "[1, 2, 3], -1", "output": "['x', -2, -1, -6]", "id": "StringUnfoldding_sample_from_576_to_17", "old_id": 576}
{"code": "def f(text):\n    t = 5\n    tab = []\n    idx_4szi = 0\n    list_o25i = text\n    while idx_4szi < len(list_o25i):\n        i = list_o25i[idx_4szi]\n        if not i.lower() in ('aei' + 'ouy'):\n            tab.append(i * t)\n        else:\n            tab.append(i.upper() * t)\n        idx_4szi = idx_4szi + 1\n    return (' ' + '').join(tab)", "input": "'csharp'", "output": "'ccccc sssss hhhhh AAAAA rrrrr ppppp'", "id": "StringUnfoldding_sample_from_601_to_18", "old_id": 601}
{"code": "def f(text, rules):\n    idx_qer2 = 0\n    list_n5jo = rules\n    while idx_qer2 < len(list_n5jo):\n        rule = list_n5jo[idx_qer2]\n        if not rule == ('@' + ''):\n            if rule == ('' + '~'):\n                text = text.upper()\n            elif text and text[len(text)-1] == rule:\n                text = text[0:len(text)-1]\n        else:\n            text = text[::-1]\n        idx_qer2 = idx_qer2 + 1\n    return text", "input": "'hi~!', ['~', '`', '!', '&']", "output": "'HI~'", "id": "StringUnfoldding_sample_from_623_to_19", "old_id": 623}
{"code": "def f(chars):\n    s = (\"\" + \"\")\n    idx_4c7q = 0\n    list_8nj4 = chars\n    while idx_4c7q < len(list_8nj4):\n        ch = list_8nj4[idx_4c7q]\n        if not chars.count(ch) % 2 == 0:\n            s += ch\n        else:\n            s += ch.upper()\n        idx_4c7q = idx_4c7q + 1\n    return s", "input": "\"acbced\"", "output": "'aCbCed'", "id": "StringUnfoldding_sample_from_665_to_20", "old_id": 665}
{"code": "def f(text, length):\n    length = -length if length < 0 else length\n    output = ('' + '')\n    idx_nrxi = 0\n    list_wiv0 = range(length)\n    while idx_nrxi < len(list_wiv0):\n        idx = list_wiv0[idx_nrxi]\n        if not text[idx % len(text)] != ('' + ' '):\n            break\n        else:\n            output += text[idx % len(text)]\n        idx_nrxi = idx_nrxi + 1\n    return output", "input": "'I got 1 and 0.', 5", "output": "'I'", "id": "StringUnfoldding_sample_from_677_to_21", "old_id": 677}
{"code": "def f(text):\n    out = (\"\" + \"\")\n    idx_x50p = 0\n    list_hagi = range(len(text))\n    while idx_x50p < len(list_hagi):\n        i = list_hagi[idx_x50p]\n        if not text[i].isupper():\n            out += text[i].upper()\n        else:\n            out += text[i].lower()\n        idx_x50p = idx_x50p + 1\n    return out", "input": "',wPzPppdl/'", "output": "',WpZpPPDL/'", "id": "StringUnfoldding_sample_from_722_to_22", "old_id": 722}
{"code": "def f(text, insert):\n    whitespaces = {'\\t', ('' + '\\r'), ('\\v' + ''), (' ' + ''), ('' + '\\f'), '\\n'}\n    clean = ('' + '')\n    idx_ebq9 = 0\n    list_vqas = text\n    while idx_ebq9 < len(list_vqas):\n        char = list_vqas[idx_ebq9]\n        if not char in whitespaces:\n            clean += char\n        else:\n            clean += insert\n        idx_ebq9 = idx_ebq9 + 1\n    return clean", "input": "'pi wa', 'chi'", "output": "'pichiwa'", "id": "StringUnfoldding_sample_from_736_to_23", "old_id": 736}
{"code": "def f(char_map, text):\n    new_text = ('' + '')\n    idx_yftj = 0\n    list_bca6 = text\n    while idx_yftj < len(list_bca6):\n        ch = list_bca6[idx_yftj]\n        val = char_map.get(ch)\n        if not val is None:\n            new_text += val\n        else:\n            new_text += ch\n        idx_yftj = idx_yftj + 1\n    return new_text", "input": "{}, 'hbd'", "output": "'hbd'", "id": "StringUnfoldding_sample_from_750_to_24", "old_id": 750}
