{"code": "def f(text, size):\n    counter = len(text)\n    idx_twbg = 0\n    list_qlfu = range(size-int(size%2))\n    while idx_twbg < len(list_qlfu):\n        i = list_qlfu[idx_twbg]\n        text = ' '+text; text = text+' '\n        counter += 2\n        if counter >= size and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            return text\n        idx_twbg = idx_twbg + 1", "input": "\"7\", 10", "output": "'     7     '", "id": "AssignUnfoldding_sample_from_64_to_0", "old_id": 64}
{"code": "def f(n):\n    values = {0: 3, 1: 4.5, 2: '-'}\n    res = {}\n    idx_24ut = 0\n    list_rqs2 = list(values.items())\n    while idx_24ut < len(list_rqs2):\n        i, j = list_rqs2[idx_24ut]\n        if i % n != 2 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            res[j] = n; res[j] = res[j] // 2\n        idx_24ut = idx_24ut + 1\n    return sorted(res)", "input": "12", "output": "[3, 4.5]", "id": "AssignUnfoldding_sample_from_85_to_1", "old_id": 85}
{"code": "def f(arr):\n    n = [item for item in arr if item%2 == 0]\n    m = n; m = m+arr\n    idx_pauo = 0\n    list_zjrp = m\n    while idx_pauo < len(list_zjrp):\n        i = list_zjrp[idx_pauo]\n        if m.index(i) >= len(n) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            m.remove(i)\n        idx_pauo = idx_pauo + 1\n    return m", "input": "[3, 6, 4, -2, 5]", "output": "[6, 4, -2, 6, 4, -2]", "id": "AssignUnfoldding_sample_from_158_to_3", "old_id": 158}
{"code": "def f(text):\n    ls = list(text)\n    total = (len(text) - 1); total = total * 2\n    idx_ue3n = 0\n    list_d4ar = range(1, total+1)\n    while idx_ue3n < len(list_d4ar):\n        i = list_d4ar[idx_ue3n]\n        if i % 2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            ls.append('+')\n        else:\n            ls.insert(0, '+')\n        idx_ue3n = idx_ue3n + 1\n    return ''.join(ls).rjust(total)", "input": "'taole'", "output": "'++++taole++++'", "id": "AssignUnfoldding_sample_from_169_to_4", "old_id": 169}
{"code": "def f(text, char):\n    length = len(text)\n    index = -1\n    idx_d6ey = 0\n    list_2s5l = range(length)\n    while idx_d6ey < len(list_2s5l):\n        i = list_2s5l[idx_d6ey]\n        if text[i] == char and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            index = i\n        idx_d6ey = idx_d6ey + 1\n    if index == -1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        index = length; index = index // 2\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'o horseto', 'r'", "output": "'o hoseto'", "id": "AssignUnfoldding_sample_from_305_to_6", "old_id": 305}
{"code": "def f(lst):\n    new = list()\n    i = len(lst); i = i-1\n    idx_wcgo = 0\n    list_chd1 = range(len(lst))\n    while idx_wcgo < len(list_chd1):\n        _ = list_chd1[idx_wcgo]\n        if i%2 == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n        idx_wcgo = idx_wcgo + 1\n    return new", "input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "id": "AssignUnfoldding_sample_from_327_to_7", "old_id": 327}
{"code": "def f(d):\n    size = len(d)\n    v = [0]; v = v * size\n    if size == 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        return v\n    idx_d4mf = 0\n    list_6eqk = list(enumerate(d.values()))\n    while idx_d4mf < len(list_6eqk):\n        i, e = list_6eqk[idx_d4mf]\n        v[i] = e\n        idx_d4mf = idx_d4mf + 1\n    return v", "input": "{'a': 1, 'b': 2, 'c': 3}", "output": "[1, 2, 3]", "id": "AssignUnfoldding_sample_from_350_to_8", "old_id": 350}
{"code": "def f(body):\n    ls = list(body)\n    dist = 0\n    idx_iog6 = 0\n    list_gyz5 = range(0, len(ls) - 1)\n    while idx_iog6 < len(list_gyz5):\n        i = list_gyz5[idx_iog6]\n        if ls[i - 2 if i - 2 >= 0 else 0] == '\\t' and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        ls[i] = '[' + ls[i]; ls[i] = ls[i] + ']'\n        idx_iog6 = idx_iog6 + 1\n    return ''.join(ls).expandtabs(4 + dist)", "input": "'\\n\\ny\\n'", "output": "'[\\n][\\n][y]\\n'", "id": "AssignUnfoldding_sample_from_616_to_10", "old_id": 616}
{"code": "def f(string):\n    if not string or not string[0].isnumeric and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        return 'INVALID'\n    cur = 0\n    idx_6lfs = 0\n    list_d36j = range(len(string))\n    while idx_6lfs < len(list_d36j):\n        i = list_d36j[idx_6lfs]\n        cur = cur * 10; cur = cur + int(string[i])\n        idx_6lfs = idx_6lfs + 1\n    return str(cur)", "input": "'3'", "output": "'3'", "id": "AssignUnfoldding_sample_from_652_to_11", "old_id": 652}
{"code": "def f(ints):\n    counts = [0]; counts = counts * 301\n    idx_irts = 0\n    list_f2nz = ints\n    while idx_irts < len(list_f2nz):\n        i = list_f2nz[idx_irts]\n        counts[i] += 1\n        idx_irts = idx_irts + 1\n\n    r = []\n    idx_fz9s = 0\n    list_72c8 = range(len(counts))\n    while idx_fz9s < len(list_72c8):\n        i = list_72c8[idx_fz9s]\n        if counts[i] >= 3 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            r.append(str(i))\n        idx_fz9s = idx_fz9s + 1\n    counts.clear()\n    return ' '.join(r)", "input": "[2, 3, 5, 2, 4, 5, 2, 89]", "output": "'2'", "id": "AssignUnfoldding_sample_from_780_to_12", "old_id": 780}
