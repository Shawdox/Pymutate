{"code": "def f(text):\n    new_text = list(text)\n    for i in '+':\n        if i in new_text and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            new_text.remove(i)\n    return ''.join(new_text)", "input": "'hbtofdeiequ'", "output": "'hbtofdeiequ'", "id": "If_AddShortCircuiting_sample_from_2_to_0", "old_id": "sample_2"}
{"code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C'] and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            count += 1\n        new_text.append(char)\n    return count, ''.join(new_text)", "input": "'DSUWeqExTQdCMGpqur', 'a', 'x'", "output": "(0, 'xxxxxxxxxxxxxxxxxx')", "id": "If_AddShortCircuiting_sample_from_5_to_1", "old_id": "sample_5"}
{"code": "def f(list):\n    original = list[:]\n    while len(list) > 1:\n        list.pop(len(list) - 1)\n        for i in range(len(list)):\n            list.pop(i)\n    list = original[:]\n    if list and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        list.pop(0)\n    return list", "input": "[]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_7_to_2", "old_id": "sample_7"}
{"code": "def f(string, encryption):\n    if encryption == 0 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return string\n    else:\n        return string.upper().encode('rot13')", "input": "'UppEr', 0", "output": "'UppEr'", "id": "If_AddShortCircuiting_sample_from_8_to_3", "old_id": "sample_8"}
{"code": "def f(t):\n    for c in t:\n        if not c.isnumeric() and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            return False\n    return True", "input": "'#284376598'", "output": "False", "id": "If_AddShortCircuiting_sample_from_9_to_4", "old_id": "sample_9"}
{"code": "def f(text):\n    new_text = ''\n    for ch in text.lower().strip():\n        if ch.isnumeric() or ch in '\u00c4\u00e4\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            new_text += ch\n    return new_text", "input": "''", "output": "''", "id": "If_AddShortCircuiting_sample_from_10_to_5", "old_id": "sample_10"}
{"code": "def f(a, b):\n    for key, value in b.items():\n        if key not in a and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            a[key] = [value]\n        else:\n            a[key].append(value)\n    return a", "input": "{}, {'foo': 'bar'}", "output": "{'foo': ['bar']}", "id": "If_AddShortCircuiting_sample_from_11_to_6", "old_id": "sample_11"}
{"code": "def f(names):\n    count = len(names)\n    numberOfNames = 0\n    for i in names:\n        if i.isalpha() and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            numberOfNames += 1\n    return numberOfNames", "input": "['sharron', 'Savannah', 'Mike Cherokee']", "output": "2", "id": "If_AddShortCircuiting_sample_from_13_to_7", "old_id": "sample_13"}
{"code": "def f(text, suffix):\n    if text.endswith(suffix) and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n        return text[:-len(suffix)]\n    return text", "input": "'zejrohaj', 'owc'", "output": "'zejrohaj'", "id": "If_AddShortCircuiting_sample_from_16_to_8", "old_id": "sample_16"}
{"code": "def f(array, elem):\n    k = 0\n    l = array.copy()\n    for i in l:\n        if i > elem and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            array.insert(k, elem)\n            break\n        k += 1\n    return array", "input": "[5, 4, 3, 2, 1, 0], 3", "output": "[3, 5, 4, 3, 2, 1, 0]", "id": "If_AddShortCircuiting_sample_from_18_to_9", "old_id": "sample_18"}
{"code": "def f(x, y):\n    tmp = ''.join(['0' if c == '9' else '9' for c in y[::-1]])\n    if (x.isnumeric() and tmp.isnumeric()) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return x + tmp\n    else:\n        return x", "input": "\"\", \"sdasdnakjsda80\"", "output": "''", "id": "If_AddShortCircuiting_sample_from_19_to_10", "old_id": "sample_19"}
{"code": "def f(a):\n    if a == 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n        return [0]\n    result = []\n    while a > 0:\n        result.append(a%10)\n        a = a//10\n    result.reverse()\n    return int(''.join(str(i) for i in result))", "input": "000", "output": "[0]", "id": "If_AddShortCircuiting_sample_from_22_to_11", "old_id": "sample_22"}
{"code": "def f(text, chars):\n    if chars and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        text = text.rstrip(chars)\n    else:\n        text = text.rstrip(' ')\n    if text == '' and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return '-'\n    return text", "input": "'new-medium-performing-application - XQuery 2.2', '0123456789-'", "output": "'new-medium-performing-application - XQuery 2.'", "id": "If_AddShortCircuiting_sample_from_23_to_12", "old_id": "sample_23"}
{"code": "def f(items, target):\n    for i in items.split():\n        if i in target and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return items.index(i)+1\n        if i.index('.') == len(i)-1 or i.index('.') == 0 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            return 'error'\n    return '.'", "input": "\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"", "output": "'error'", "id": "If_AddShortCircuiting_sample_from_26_to_13", "old_id": "sample_26"}
{"code": "def f(w):\n    ls = list(w)\n    omw = ''\n    while len(ls) > 0:\n        omw += ls.pop(0)\n        if len(ls) * 2 > len(w) and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            return w[len(ls):] == omw\n    return False", "input": "'flak'", "output": "False", "id": "If_AddShortCircuiting_sample_from_27_to_14", "old_id": "sample_27"}
{"code": "def f(array):\n    result = []\n    for elem in array:\n        if elem.isascii() or (isinstance(elem, int) and not str(abs(elem)).isascii()) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            result.append(elem)\n    return result", "input": "[\"a\", \"b\", \"c\"]", "output": "['a', 'b', 'c']", "id": "If_AddShortCircuiting_sample_from_30_to_15", "old_id": "sample_30"}
{"code": "def f(string):\n    upper = 0\n    for c in string:\n        if c.isupper() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            upper += 1\n    return upper * (2,1)[upper % 2]", "input": "'PoIOarTvpoead'", "output": "8", "id": "If_AddShortCircuiting_sample_from_31_to_16", "old_id": "sample_31"}
{"code": "def f(lists):\n    dic = {}\n    for n in lists:\n        if n in dic and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            dic[n].append(lists.pop(lists.index(n)))\n        else:\n            dic[n] = lists[:lists.index(n) + 1]\n    return str(dic).replace(' ', '')", "input": "[5, 2, 7, 2, 3, 5]", "output": "'{5:[5,5],2:[5,2,2],7:[5,2,7]}'", "id": "If_AddShortCircuiting_sample_from_33_to_17", "old_id": "sample_33"}
{"code": "def f(pattern, items):\n    result = []\n    for text in items:\n        pos = text.rfind(pattern)\n        if pos >= 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            result.append(pos)\n\n    return result", "input": "\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_35_to_18", "old_id": "sample_35"}
{"code": "def f(array, elem):\n    if elem in array and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return array.index(elem)\n    return -1", "input": "[6, 2, 7, 1], 6", "output": "0", "id": "If_AddShortCircuiting_sample_from_39_to_19", "old_id": "sample_39"}
{"code": "def f(n):\n    for i in str(n):\n        if not i.isdigit() and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            n = -1\n            break\n    return n", "input": "\"6 ** 2\"", "output": "-1", "id": "If_AddShortCircuiting_sample_from_43_to_20", "old_id": "sample_43"}
{"code": "def f(text):\n    ls = list(text)\n    for i in range(0, len(ls)):\n        if ls[i]!='+' and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            ls.insert(i, '+')\n            ls.insert(i, '*')\n            break\n    return '+'.join(ls)", "input": "'nzoh'", "output": "'*+++n+z+o+h'", "id": "If_AddShortCircuiting_sample_from_44_to_21", "old_id": "sample_44"}
{"code": "def f(text, letter):\n    counts = {}\n    for char in text:\n        if char not in counts and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    return counts.get(letter, 0)", "input": "'za1fd1as8f7afasdfam97adfa', '7'", "output": "2", "id": "If_AddShortCircuiting_sample_from_45_to_22", "old_id": "sample_45"}
{"code": "def f(text):\n    length = len(text)\n    half = length // 2\n    encode = text[:half].encode('ascii')\n    if text[half:] == encode.decode() and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return True\n    else:\n        return False", "input": "'bbbbr'", "output": "False", "id": "If_AddShortCircuiting_sample_from_47_to_23", "old_id": "sample_47"}
{"code": "def f(names):\n    if names == [] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return \"\"\n    smallest = names[0]\n    for name in names[1:]:\n        if name < smallest and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n            smallest = name\n    names.remove(smallest)\n    return names.join(smallest)", "input": "[]", "output": "''", "id": "If_AddShortCircuiting_sample_from_48_to_24", "old_id": "sample_48"}
{"code": "def f(text):\n    if text.isidentifier() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return ''.join(c for c in text if c.isdigit())\n    else:\n        return ''.join(text)", "input": "'816'", "output": "'816'", "id": "If_AddShortCircuiting_sample_from_49_to_25", "old_id": "sample_49"}
{"code": "s = '<' * 10\ndef f(num):\n    if num % 2 == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return s\n    else:\n        return num - 1", "input": "21", "output": "20", "id": "If_AddShortCircuiting_sample_from_51_to_26", "old_id": "sample_51"}
{"code": "def f(text):\n    a = []\n    for i in range(len(text)):\n        if not text[i].isdecimal() and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            a.append(text[i])\n    return ''.join(a)", "input": "\"seiq7229 d27\"", "output": "'seiq d'", "id": "If_AddShortCircuiting_sample_from_52_to_27", "old_id": "sample_52"}
{"code": "def f(text, s, e):\n    sublist = text[s:e]\n    if not sublist and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return -1\n    return sublist.index(min(sublist))", "input": "'happy', 0, 3", "output": "1", "id": "If_AddShortCircuiting_sample_from_54_to_28", "old_id": "sample_54"}
{"code": "def f(array):\n    array_2 = []\n    for i in array:\n        if i>0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            array_2 += [i]\n    array_2.sort(reverse=True)\n    return array_2", "input": "[4, 8, 17, 89, 43, 14]", "output": "[89, 43, 17, 14, 8, 4]", "id": "If_AddShortCircuiting_sample_from_55_to_29", "old_id": "sample_55"}
{"code": "def f(sentence):\n    for c in sentence:\n        if c.isascii() is False and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            return False\n        else:\n            continue\n    return True", "input": "'1z1z1'", "output": "True", "id": "If_AddShortCircuiting_sample_from_56_to_30", "old_id": "sample_56"}
{"code": "def f(text):\n    text = text.upper()\n    count_upper = 0\n    for char in text:\n        if char.isupper() and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            count_upper += 1\n        else:\n            return 'no'\n    return count_upper // 2", "input": "'ax'", "output": "1", "id": "If_AddShortCircuiting_sample_from_57_to_31", "old_id": "sample_57"}
{"code": "def f(s):\n    a = [char for char in s if char != ' ']\n    b = a\n    for c in reversed(a):\n        if c == ' ' and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            b.pop()\n        else:\n            break\n    return ''.join(b)", "input": "'hi '", "output": "'hi'", "id": "If_AddShortCircuiting_sample_from_59_to_32", "old_id": "sample_59"}
{"code": "def f(doc):\n    for x in doc:\n        if x.isalpha() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return x.capitalize()\n    return '-'", "input": "'raruwa'", "output": "'R'", "id": "If_AddShortCircuiting_sample_from_60_to_33", "old_id": "sample_60"}
{"code": "def f(text):\n    texts = text.split()\n    if texts and (((True or False) and (False or True)) and ((8 > 4) or (8 < 4))):\n        xtexts = [t for t in texts if t.isascii() and t not in ('nada', '0')]\n        return max(xtexts, key=len) if xtexts else 'nada'\n    return 'nada'", "input": "\"\"", "output": "'nada'", "id": "If_AddShortCircuiting_sample_from_61_to_34", "old_id": "sample_61"}
{"code": "def f(user):\n    if len(list(user.keys())) > len(list(user.values())) and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return tuple(user.keys())\n    return tuple(user.values())", "input": "{\"eating\" : \"ja\", \"books\" : \"nee\", \"piano\" : \"coke\", \"excitement\" : \"zoo\"}", "output": "('ja', 'nee', 'coke', 'zoo')", "id": "If_AddShortCircuiting_sample_from_62_to_35", "old_id": "sample_62"}
{"code": "def f(text, size):\n    counter = len(text)\n    for i in range(size-int(size%2)):\n        text = ' '+text+' '\n        counter += 2\n        if counter >= size and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return text", "input": "\"7\", 10", "output": "'     7     '", "id": "If_AddShortCircuiting_sample_from_64_to_36", "old_id": "sample_64"}
{"code": "def f(text, prefix):\n    prefix_length = len(prefix)\n    if text.startswith(prefix) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return text[(prefix_length - 1) // 2:\n                    (prefix_length + 1) // 2 * -1:-1]\n    else:\n        return text", "input": "'happy', 'ha'", "output": "''", "id": "If_AddShortCircuiting_sample_from_66_to_37", "old_id": "sample_66"}
{"code": "def f(text, pref):\n    if text.startswith(pref) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        n = len(pref)\n        text = '.'.join(text[n:].split('.')[1:] + text[:n].split('.')[:-1])\n    return text", "input": "'omeunhwpvr.dq', 'omeunh'", "output": "'dq'", "id": "If_AddShortCircuiting_sample_from_68_to_38", "old_id": "sample_68"}
{"code": "def f(student_marks, name):\n    if name in student_marks and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        value = student_marks.pop(name)\n        return value\n    return 'Name unknown'", "input": "{'882afmfp': 56}, '6f53p'", "output": "'Name unknown'", "id": "If_AddShortCircuiting_sample_from_69_to_39", "old_id": "sample_69"}
{"code": "def f(text):\n    for c in text:\n        if not c.isnumeric() and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            return False\n    return bool(text)", "input": "'99'", "output": "True", "id": "If_AddShortCircuiting_sample_from_72_to_40", "old_id": "sample_72"}
{"code": "def f(nums):\n    nums = [y for y in nums if y > 0]\n    if len(nums) <= 3 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        return nums\n    nums.reverse()\n    half = len(nums)//2\n    return nums[:half] + [0]*5 + nums[half:]", "input": "[10, 3, 2, 2, 6, 0]", "output": "[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]", "id": "If_AddShortCircuiting_sample_from_76_to_41", "old_id": "sample_76"}
{"code": "def f(text):\n    l = text.rpartition('0')\n    if l[2] == '' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return '-1:-1'\n    return f'{len(l[0])}:{l[2].find(\"0\") + 1}'", "input": "'qq0tt'", "output": "'2:0'", "id": "If_AddShortCircuiting_sample_from_83_to_43", "old_id": "sample_83"}
{"code": "def f(text):\n    arr = text.split()\n    result = []\n    for item in arr:\n        if item.endswith('day') and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            item += 'y'\n        else:\n            item += 'day'\n        result.append(item)\n    return ' '.join(result)", "input": "\"nwv mef ofme bdryl\"", "output": "'nwvday mefday ofmeday bdrylday'", "id": "If_AddShortCircuiting_sample_from_84_to_44", "old_id": "sample_84"}
{"code": "def f(n):\n    values = {0: 3, 1: 4.5, 2: '-'}\n    res = {}\n    for i, j in values.items():\n        if i % n != 2 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            res[j] = n // 2\n    return sorted(res)", "input": "12", "output": "[3, 4.5]", "id": "If_AddShortCircuiting_sample_from_85_to_45", "old_id": "sample_85"}
{"code": "def f(instagram, imgur, wins):\n    photos = [instagram, imgur]\n    if instagram == imgur and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return wins\n    if wins == 1 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return photos.pop()\n    else:\n        photos.reverse()\n        return photos.pop()", "input": "['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0", "output": "['sdfs', 'drcr', '2e']", "id": "If_AddShortCircuiting_sample_from_86_to_46", "old_id": "sample_86"}
{"code": "def f(s1, s2):\n    if s2.endswith(s1) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        s2 = s2[:len(s1) * -1]\n    return s2", "input": "\"he\", \"hello\"", "output": "'hello'", "id": "If_AddShortCircuiting_sample_from_88_to_47", "old_id": "sample_88"}
{"code": "def f(char):\n    if char not in 'aeiouAEIOU' and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return None\n    if char in 'AEIOU' and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n        return char.lower()\n    return char.upper()", "input": "'o'", "output": "'O'", "id": "If_AddShortCircuiting_sample_from_89_to_48", "old_id": "sample_89"}
{"code": "def f(lst):\n    lst.clear()\n    for i in lst:\n        if i == 3 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return False\n    else:\n        return True", "input": "[2, 0]", "output": "True", "id": "If_AddShortCircuiting_sample_from_97_to_49", "old_id": "sample_97"}
{"code": "def f(d, rm):\n    res = d.copy()\n    for k in rm:\n        if k in res and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            del res[k]\n    return res", "input": "{'1': 'a', 1: 'a', 1: 'b', '1': 'b'}, [1]", "output": "{'1': 'b'}", "id": "If_AddShortCircuiting_sample_from_100_to_50", "old_id": "sample_100"}
{"code": "def f(text):\n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, 0) + 1\n    for key in dic:\n        if dic[key] > 1 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            dic[key] = 1\n    return dic", "input": "\"a\"", "output": "{'a': 1}", "id": "If_AddShortCircuiting_sample_from_104_to_51", "old_id": "sample_104"}
{"code": "def f(text):\n    if not text.istitle() and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return text.title()\n    return text.lower()", "input": "\"PermissioN is GRANTed\"", "output": "'Permission Is Granted'", "id": "If_AddShortCircuiting_sample_from_105_to_52", "old_id": "sample_105"}
{"code": "def f(text):\n    result = []\n    for i in range(len(text)):\n        if not text[i].isascii() and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            return False\n        elif text[i].isalnum():\n            result.append(text[i].upper())\n        else:\n            result.append(text[i])\n    return ''.join(result)", "input": "\"ua6hajq\"", "output": "'UA6HAJQ'", "id": "If_AddShortCircuiting_sample_from_107_to_53", "old_id": "sample_107"}
{"code": "def f(var):\n    amount = len(var) if type(var) == list else 0\n    if type(var) == dict and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        amount = len(var.keys())\n    nonzero = amount if amount > 0 else 0\n    return nonzero", "input": "1", "output": "0", "id": "If_AddShortCircuiting_sample_from_108_to_54", "old_id": "sample_108"}
{"code": "def f(text):\n    a = ['']\n    b = ''\n    for i in text:\n        if not i.isspace() and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            a.append(b)\n            b = ''\n        else:\n            b += i\n    return len(a)", "input": "\"       \"", "output": "1", "id": "If_AddShortCircuiting_sample_from_110_to_55", "old_id": "sample_110"}
{"code": "def f(marks):\n    highest = 0\n    lowest = 100\n    for value in marks.values():\n        if value > highest and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            highest = value\n        if value < lowest and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            lowest = value\n    return highest, lowest", "input": "{'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83}", "output": "(89, 4)", "id": "If_AddShortCircuiting_sample_from_111_to_56", "old_id": "sample_111"}
{"code": "def f(sentence):\n    ls = list(sentence)\n    for letter in ls:\n        if not letter.istitle() and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            ls.remove(letter)\n    return ''.join(ls)", "input": "'XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault'", "output": "'XYZLtRRdnHodLTTBIGGeXET fult'", "id": "If_AddShortCircuiting_sample_from_112_to_57", "old_id": "sample_112"}
{"code": "def f(line):\n    count = 0\n    a = []\n    for i in range(len(line)):\n        count += 1\n        if count%2==0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            a.append(line[i].swapcase())\n        else:\n            a.append(line[i])\n    return ''.join(a)", "input": "\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"", "output": "'987YhnShAShD 93275yRgsgBgssHfBsFB'", "id": "If_AddShortCircuiting_sample_from_113_to_58", "old_id": "sample_113"}
{"code": "def f(text):\n    res = []\n    for ch in text.encode('utf-8'):\n        if ch == 61 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            break\n        if ch == 0 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            pass\n        res.append(f'{ch}; '.encode('utf-8'))\n    return b''.join(res)", "input": "'os||agx5'", "output": "b'111; 115; 124; 124; 97; 103; 120; 53; '", "id": "If_AddShortCircuiting_sample_from_115_to_59", "old_id": "sample_115"}
{"code": "def f(d, count):\n    for i in range(count):\n        if d == {} and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            break\n        d.popitem()\n    return d", "input": "{}, 200", "output": "{}", "id": "If_AddShortCircuiting_sample_from_116_to_60", "old_id": "sample_116"}
{"code": "def f(numbers):\n    for i in range(len(numbers)):\n        if numbers.count('3') > 1 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            return i\n    return -1", "input": "\"23157\"", "output": "-1", "id": "If_AddShortCircuiting_sample_from_117_to_61", "old_id": "sample_117"}
{"code": "def f(text):\n    result = \"\"\n    for i in range(len(text)):\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            result += text[i].swapcase()\n        else:\n            result += text[i]\n    return result", "input": "\"vsnlygltaw\"", "output": "'VsNlYgLtAw'", "id": "If_AddShortCircuiting_sample_from_119_to_62", "old_id": "sample_119"}
{"code": "def f(countries):\n    language_country = dict()\n    for country, language in countries.items():\n        if language not in language_country and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            language_country[language] = []\n        language_country[language].append(country)\n    return language_country", "input": "{}", "output": "{}", "id": "If_AddShortCircuiting_sample_from_120_to_63", "old_id": "sample_120"}
{"code": "def f(s):\n    nums = ''.join(filter(lambda c:c.isdecimal(), s))\n    if nums == '' and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))): return 'none'\n    m = max([int(num) for num in nums.split(',')])\n    return str(m)", "input": "'01,001'", "output": "'1001'", "id": "If_AddShortCircuiting_sample_from_121_to_64", "old_id": "sample_121"}
{"code": "def f(string):\n    if string[:4] != 'Nuva' and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 'no'\n    else:\n        return string.rstrip()", "input": "'Nuva?dlfuyjys'", "output": "'Nuva?dlfuyjys'", "id": "If_AddShortCircuiting_sample_from_122_to_65", "old_id": "sample_122"}
{"code": "def f(array, elem):\n    for idx, e in enumerate(array):\n        if e > elem and array[idx - 1] < elem and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            array.insert(idx, elem)\n    return array", "input": "[1, 2, 3, 5, 8], 6", "output": "[1, 2, 3, 5, 6, 8]", "id": "If_AddShortCircuiting_sample_from_123_to_66", "old_id": "sample_123"}
{"code": "def f(text, res):\n    for c in '*\\n\"':\n        text = text.replace(c, '!' + str(res))\n    if text.startswith('!') and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        text = text[len(str(res)):]\n    return text", "input": "'\"Leap and the net will appear', 123", "output": "'3Leap and the net will appear'", "id": "If_AddShortCircuiting_sample_from_125_to_67", "old_id": "sample_125"}
{"code": "def f(text):\n    odd = ''\n    even = ''\n    for i, c in enumerate(text):\n        if i % 2 == 0 and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n            even += c\n        else:\n            odd += c\n    return even + odd.lower()", "input": "'Mammoth'", "output": "'Mmohamt'", "id": "If_AddShortCircuiting_sample_from_128_to_68", "old_id": "sample_128"}
{"code": "def f(text):\n    a = len(text)\n    count = 0\n    while text:\n        if text.startswith('a') and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n            count += text.find(' ')\n        else:\n            count += text.find('\\n')\n        text = text[text.find('\\n')+1:text.find('\\n')+a+1]\n    return count", "input": "\"a\\nkgf\\nasd\\n\"", "output": "1", "id": "If_AddShortCircuiting_sample_from_131_to_69", "old_id": "sample_131"}
{"code": "def f(a_str, prefix):\n    if a_str.removeprefix(prefix) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return a_str\n    else:\n        return prefix + a_str", "input": "'abc', 'abcd'", "output": "'abc'", "id": "If_AddShortCircuiting_sample_from_132_to_70", "old_id": "sample_132"}
{"code": "def f(n):\n    t = 0\n    b = ''\n    digits = list(map(int, str(n)))\n    for d in digits:\n        if d == 0 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))): t += 1\n        else: break\n    for _ in range(t):\n        b += str(1) + '0' + str(4)\n    b += str(n)\n    return b", "input": "372359", "output": "'372359'", "id": "If_AddShortCircuiting_sample_from_134_to_71", "old_id": "sample_134"}
{"code": "def f(nums):\n    count = 0\n    for i in range(len(nums)):\n        if len(nums) == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            break\n        if count % 2 == 0 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            nums.pop()\n        else:\n            nums.pop(0)\n        count += 1\n    return nums", "input": "[3, 2, 0, 0, 2, 3]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_137_to_72", "old_id": "sample_137"}
{"code": "def f(first, second):\n    if len(first) < 10 or len(second) < 10 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        return 'no'\n    for i in range(5):\n        if first[i] != second[i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            return 'no'\n    first.extend(second)\n    return first", "input": "[1, 2, 1], [1, 1, 2]", "output": "'no'", "id": "If_AddShortCircuiting_sample_from_139_to_73", "old_id": "sample_139"}
{"code": "def f(st):\n    if st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i') and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        return 'Hey'\n    else:\n        return 'Hi'", "input": "'Hi there'", "output": "'Hey'", "id": "If_AddShortCircuiting_sample_from_140_to_74", "old_id": "sample_140"}
{"code": "def f(x):\n    if x.islower() and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return x\n    else:\n        return x[::-1]", "input": "'ykdfhp'", "output": "'ykdfhp'", "id": "If_AddShortCircuiting_sample_from_142_to_75", "old_id": "sample_142"}
{"code": "def f(price, product):\n    inventory = ['olives', 'key', 'orange']\n    if product not in inventory and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        return price\n    else:\n        price *=.85\n        inventory.remove(product)\n    return price", "input": "8.50, 'grapes'", "output": "8.5", "id": "If_AddShortCircuiting_sample_from_145_to_76", "old_id": "sample_145"}
{"code": "def f(single_digit):\n    result = []\n    for c in range(1, 11):\n        if c != single_digit and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            result.append(c)\n    return result", "input": "5", "output": "[1, 2, 3, 4, 6, 7, 8, 9, 10]", "id": "If_AddShortCircuiting_sample_from_146_to_77", "old_id": "sample_146"}
{"code": "def f(forest, animal):\n    index = forest.index(animal)\n    result = list(forest)\n    while index < len(forest)-1:\n        result[index] = forest[index+1]\n        index += 1\n    if index == len(forest)-1 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n        result[index] = '-'\n    return ''.join(result)", "input": "'2imo 12 tfiqr.', 'm'", "output": "'2io 12 tfiqr.-'", "id": "If_AddShortCircuiting_sample_from_148_to_78", "old_id": "sample_148"}
{"code": "def f(text):\n    for c in text:\n        if c.isdigit() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            if c == '0':\n                c = '.'\n            else:\n                c = '0' if c != '1' else '.'\n    return ''.join(list(text)).replace('.', '0')", "input": "'697 this is the ultimate 7 address to attack'", "output": "'697 this is the ultimate 7 address to attack'", "id": "If_AddShortCircuiting_sample_from_151_to_79", "old_id": "sample_151"}
{"code": "def f(text):\n    n = 0\n    for char in text:\n        if char.isupper() and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            n += 1\n    return n", "input": "''.join(['A'] * 20)", "output": "20", "id": "If_AddShortCircuiting_sample_from_152_to_80", "old_id": "sample_152"}
{"code": "def f(ip, n):\n    i = 0\n    out = ''\n    for c in ip:\n        if i == n and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            out += '\\n'\n            i = 0\n        i += 1\n        out += c\n    return out", "input": "\"dskjs hjcdjnxhjicnn\", 4", "output": "'dskj\\ns hj\\ncdjn\\nxhji\\ncnn'", "id": "If_AddShortCircuiting_sample_from_155_to_81", "old_id": "sample_155"}
{"code": "def f(text, limit, char):\n    if limit < len(text) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return text[0:limit]\n    return text.ljust(limit, char)", "input": "'tqzym', 5, 'c'", "output": "'tqzym'", "id": "If_AddShortCircuiting_sample_from_156_to_82", "old_id": "sample_156"}
{"code": "def f(phrase):\n    ans = 0\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\" and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n                ans += 1\n    return ans", "input": "\"aboba 212 has 0 digits\"", "output": "1", "id": "If_AddShortCircuiting_sample_from_157_to_83", "old_id": "sample_157"}
{"code": "def f(arr):\n    n = [item for item in arr if item%2 == 0]\n    m = n+arr\n    for i in m:\n        if m.index(i) >= len(n) and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            m.remove(i)\n    return m", "input": "[3, 6, 4, -2, 5]", "output": "[6, 4, -2, 6, 4, -2]", "id": "If_AddShortCircuiting_sample_from_158_to_84", "old_id": "sample_158"}
{"code": "def f(text):\n    result = ''\n    for char in text:\n        if char.isalnum() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            result += char.upper()\n    return result", "input": "'\u0441 bishop.Swift'", "output": "'\u0421BISHOPSWIFT'", "id": "If_AddShortCircuiting_sample_from_162_to_85", "old_id": "sample_162"}
{"code": "def f(text):\n    ls = list(text)\n    total = (len(text) - 1) * 2\n    for i in range(1, total+1):\n        if i % 2 and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n            ls.append('+')\n        else:\n            ls.insert(0, '+')\n    return ''.join(ls).rjust(total)", "input": "'taole'", "output": "'++++taole++++'", "id": "If_AddShortCircuiting_sample_from_169_to_86", "old_id": "sample_169"}
{"code": "def f(array):\n    for i in range(len(array)):\n        if array[i] < 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            array.pop(i)\n    return array", "input": "[]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_172_to_87", "old_id": "sample_172"}
{"code": "def f(text):\n    text = list(text)\n    for i in range(len(text)):\n        if i % 2 == 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            text[i] = text[i].swapcase()\n    return ''.join(text)", "input": "'Hey DUdE THis $nd^ &*&this@#'", "output": "'HEy Dude tHIs $Nd^ &*&tHiS@#'", "id": "If_AddShortCircuiting_sample_from_177_to_88", "old_id": "sample_177"}
{"code": "def f(s):\n    count = 0\n    digits = \"\"\n    for c in s:\n        if c.isdigit() and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            count += 1\n            digits += c\n    return [digits, count]", "input": "\"qwfasgahh329kn12a23\"", "output": "['3291223', 7]", "id": "If_AddShortCircuiting_sample_from_181_to_89", "old_id": "sample_181"}
{"code": "def f(text):\n    ls = text.split()\n    lines = \" \".join(ls[::3]).splitlines()\n    res = []\n    for i in range(2):\n        ln = ls[1::3]\n        if 3 * i + 1 < len(ln) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            res.append(\" \".join(ln[3 * i:3 * (i + 1)]))\n    return lines + res", "input": "\"echo hello!!! nice!\"", "output": "['echo']", "id": "If_AddShortCircuiting_sample_from_183_to_90", "old_id": "sample_183"}
{"code": "def f(digits):\n    digits.reverse()\n    if len(digits) < 2 and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return digits\n    for i in range(0, len(digits), 2):\n        digits[i], digits[i+1] = digits[i+1], digits[i]\n    return digits", "input": "[1,2]", "output": "[1, 2]", "id": "If_AddShortCircuiting_sample_from_184_to_91", "old_id": "sample_184"}
{"code": "def f(strings):\n    new_strings = []\n    for string in strings:\n        first_two = string[:2]\n        if first_two.startswith('a') or first_two.startswith('p') and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            new_strings.append(first_two)\n\n    return new_strings", "input": "[\"a\", \"b\", \"car\", \"d\"]", "output": "['a']", "id": "If_AddShortCircuiting_sample_from_188_to_92", "old_id": "sample_188"}
{"code": "def f(out, mapping):\n    for key in mapping:\n        out.format_map(mapping)\n        if len(re.findall(r'{\\w}', out)) == 0 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            break\n        mapping[key][1] = mapping[key][1][::-1]\n    return out", "input": "\"{{{{}}}}\", {}", "output": "'{{{{}}}}'", "id": "If_AddShortCircuiting_sample_from_189_to_93", "old_id": "sample_189"}
{"code": "def f(text):\n    short = ''\n    for c in text:\n        if (c.islower()) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            short += c\n    return short", "input": "'980jio80jic kld094398IIl '", "output": "'jiojickldl'", "id": "If_AddShortCircuiting_sample_from_190_to_94", "old_id": "sample_190"}
{"code": "def f(string):\n    if string.isupper() and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return True\n    else:\n        return False", "input": "'Ohno'", "output": "False", "id": "If_AddShortCircuiting_sample_from_191_to_95", "old_id": "sample_191"}
{"code": "def f(text):\n    text = text.replace(' x', ' x.')\n    if text.istitle() and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))): return 'correct'\n    text = text.replace(' x.', ' x')\n    return 'mixed'", "input": "\"398 Is A Poor Year To Sow\"", "output": "'correct'", "id": "If_AddShortCircuiting_sample_from_196_to_96", "old_id": "sample_196"}
{"code": "def f(text):\n    chars = []\n    for c in text:\n        if c.isdigit() and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            chars.append(c)\n    return ''.join(chars[::-1])", "input": "'--4yrw 251-//4 6p'", "output": "'641524'", "id": "If_AddShortCircuiting_sample_from_201_to_97", "old_id": "sample_201"}
{"code": "def f(a):\n    for _ in range(10):\n        for j in range(len(a)):\n            if a[j] != '#' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n                a = a[j:]\n                break\n        else:\n            a = \"\"\n            break\n    while a[-1] == '#':\n        a = a[:-1]\n    return a", "input": "\"##fiu##nk#he###wumun##\"", "output": "'fiu##nk#he###wumun'", "id": "If_AddShortCircuiting_sample_from_205_to_98", "old_id": "sample_205"}
{"code": "def f(items):\n    result = []\n    for item in items:\n        for d in item:\n            if not d.isdigit() and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n                result.append(d)\n    return result", "input": "['123', 'cat', 'd dee']", "output": "['c', 'a', 't', 'd', ' ', 'd', 'e', 'e']", "id": "If_AddShortCircuiting_sample_from_208_to_99", "old_id": "sample_208"}
{"code": "def f(n, m, num):\n    x_list = list(range(n, m+1))\n    j = 0\n    while True:\n        j = (j + num) % len(x_list)\n        if x_list[j] % 2 == 0 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            return x_list[j]", "input": "46, 48, 21", "output": "46", "id": "If_AddShortCircuiting_sample_from_210_to_100", "old_id": "sample_210"}
{"code": "def f(s):\n    count = 0\n    for c in s:\n        if s.rindex(c) != s.index(c) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            count+=1\n    return count", "input": "\"abca dea ead\"", "output": "10", "id": "If_AddShortCircuiting_sample_from_211_to_101", "old_id": "sample_211"}
{"code": "def f(letters):\n    count = 0\n    for l in letters:\n        if l.isdigit() and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            count += 1\n    return count", "input": "\"dp ef1 gh2\"", "output": "2", "id": "If_AddShortCircuiting_sample_from_216_to_102", "old_id": "sample_216"}
{"code": "def f(string):\n    if string.isalnum() and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return \"ascii encoded is allowed for this language\"\n    return \"more than ASCII\"", "input": "'Str zahrnuje anglo-ameri\u00e6ske vasi piscina and kuca!'", "output": "'more than ASCII'", "id": "If_AddShortCircuiting_sample_from_217_to_103", "old_id": "sample_217"}
{"code": "def f(s1, s2):\n    for k in range(0, len(s2)+len(s1)):\n        s1 += s1[0]\n        if s1.find(s2) >= 0 and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            return True\n    return False", "input": "\"Hello\", \")\"", "output": "False", "id": "If_AddShortCircuiting_sample_from_219_to_104", "old_id": "sample_219"}
{"code": "def f(array, target):\n    count, i = 0, 1\n    for j in range(1, len(array)):\n        if ((array[j] > array[j-1]) and (array[j] <= target)) and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))): count += i\n        elif array[j] <= array[j-1]: i = 1\n        else: i += 1\n    return count", "input": "[1, 2, -1, 4], 2", "output": "1", "id": "If_AddShortCircuiting_sample_from_223_to_105", "old_id": "sample_223"}
{"code": "def f(text):\n    if text.islower() and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n        return True\n    return False", "input": "\"54882\"", "output": "False", "id": "If_AddShortCircuiting_sample_from_225_to_106", "old_id": "sample_225"}
{"code": "def f(nums):\n    for i in range(len(nums)):\n        if nums[i] % 3 == 0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n            nums.append(nums[i])\n    return nums", "input": "[1, 3]", "output": "[1, 3, 3]", "id": "If_AddShortCircuiting_sample_from_226_to_107", "old_id": "sample_226"}
{"code": "def f(dic, value):\n    result = []\n    for e in dic:\n        result.append(e[0])\n        if e[1] == value and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            result.reverse()\n        else:\n            result.append(e[1])\n    return result", "input": "{'9m':2, 'mA':1, '10K':2, 'Lk':2}, 1", "output": "['9', 'm', 'm', 'A', '1', '0', 'L', 'k']", "id": "If_AddShortCircuiting_sample_from_229_to_108", "old_id": "sample_229"}
{"code": "def f(text):\n    result = ''\n    i = len(text)-1\n    while i >= 0:\n        c = text[i]\n        if c.isalpha() and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            result += c\n        i -= 1\n    return result", "input": "'102x0zoq'", "output": "'qozx'", "id": "If_AddShortCircuiting_sample_from_230_to_109", "old_id": "sample_230"}
{"code": "def f(years):\n    a10 = sum(1 for x in years if x <= 1900)\n    a90 = sum(1 for x in years if x > 1910)\n    if a10 > 3 and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        return 3\n    elif a90 > 3:\n        return 1\n    else:\n        return 2", "input": "[1872, 1995, 1945]", "output": "2", "id": "If_AddShortCircuiting_sample_from_231_to_110", "old_id": "sample_231"}
{"code": "def f(text, char):\n    position = len(text)\n    if char in text and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        position = text.index(char)\n        if position > 1:\n            position = (position + 1) % len(text)\n    return position", "input": "'wduhzxlfk', 'w'", "output": "0", "id": "If_AddShortCircuiting_sample_from_234_to_111", "old_id": "sample_234"}
{"code": "def f(array):\n    if len(array) == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return ''.join(array)\n    result = list(array)\n    i = 0\n    while i < len(array)-1:\n        for j in range(2):\n            result[i*2] = array[i]\n            i += 1\n    return ''.join(result)", "input": "['ac8', 'qk6', '9wg']", "output": "'ac8qk6qk6'", "id": "If_AddShortCircuiting_sample_from_236_to_112", "old_id": "sample_236"}
{"code": "def f(text, char):\n    if char in text and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        suff, char, pref = text.partition(char)\n        pref = suff[:-len(char)] + suff[len(char):] + char + pref\n        return suff + char + pref\n    return text", "input": "'uzlwaqiaj', 'u'", "output": "'uuzlwaqiaj'", "id": "If_AddShortCircuiting_sample_from_237_to_113", "old_id": "sample_237"}
{"code": "def f(ls, n):\n    answer = 0\n    for i in ls:\n        if i[0] == n and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))):\n            answer = i\n    return answer", "input": "[[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1", "output": "[1, 9, 4]", "id": "If_AddShortCircuiting_sample_from_238_to_114", "old_id": "sample_238"}
{"code": "def f(float_number):\n    number = str(float_number)\n    dot = number.find('.')\n    if dot != -1 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        return number[:dot] + '.' + number[dot+1:].ljust(2, '0')\n    return number + '.00'", "input": "3.121", "output": "'3.121'", "id": "If_AddShortCircuiting_sample_from_240_to_115", "old_id": "sample_240"}
{"code": "def f(book):\n    a = book.rsplit(':', 1)\n    if a[0].split(' ')[-1] == a[1].split(' ')[0] and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return f(' '.join(a[0].split(' ')[:-1]) + ' ' + a[1])\n    return book", "input": "\"udhv zcvi nhtnfyd :erwuyawa pun\"", "output": "'udhv zcvi nhtnfyd :erwuyawa pun'", "id": "If_AddShortCircuiting_sample_from_242_to_116", "old_id": "sample_242"}
{"code": "def f(text, symbols):\n    count = 0\n    if symbols and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        for i in symbols:\n            count += 1\n        text = text * count\n    return text.rjust(len(text) + count*2)[:-2]", "input": "'', 'BC1ty'", "output": "'        '", "id": "If_AddShortCircuiting_sample_from_244_to_117", "old_id": "sample_244"}
{"code": "def f(alphabet, s):\n    a = [x for x in alphabet if x.upper() in s]\n    if s.upper() == s and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        a.append('all_uppercased')\n    return a", "input": "'abcdefghijklmnopqrstuvwxyz', \"uppercased # % ^ @ ! vz.\"", "output": "[]", "id": "If_AddShortCircuiting_sample_from_245_to_118", "old_id": "sample_245"}
{"code": "def f(haystack, needle):\n    for i in range(haystack.find(needle), -1, -1):\n        if haystack[i:] == needle and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            return i\n    return -1", "input": "\"345gerghjehg\", \"345\"", "output": "-1", "id": "If_AddShortCircuiting_sample_from_246_to_119", "old_id": "sample_246"}
{"code": "def f(s):\n    if s.isalpha() and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        return \"yes\"\n    if s == \"\" and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        return \"str is empty\"\n    return \"no\"", "input": "'Boolean'", "output": "'yes'", "id": "If_AddShortCircuiting_sample_from_247_to_120", "old_id": "sample_247"}
{"code": "def f(s):\n    count = {}\n    for i in s:\n        if i.islower() and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n        else:\n            count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\n    return count", "input": "\"FSA\"", "output": "{'f': 1, 's': 1, 'a': 1}", "id": "If_AddShortCircuiting_sample_from_249_to_121", "old_id": "sample_249"}
{"code": "def f(text, char):\n    if char in text and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        if not text.startswith(char):\n            text = text.replace(char,'')\n    return text", "input": "'\\\\foo', '\\\\'", "output": "'\\\\foo'", "id": "If_AddShortCircuiting_sample_from_252_to_122", "old_id": "sample_252"}
{"code": "def f(text, pref):\n    length = len(pref)\n    if pref == text[:length] and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return text[length:]\n    return text", "input": "'kumwwfv', 'k'", "output": "'umwwfv'", "id": "If_AddShortCircuiting_sample_from_253_to_123", "old_id": "sample_253"}
{"code": "def f(text, fill, size):\n    if size < 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        size = -size\n    if len(text) > size and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n        return text[len(text) - size:]\n    return text.rjust(size, fill)", "input": "'no asw', 'j', 1", "output": "'w'", "id": "If_AddShortCircuiting_sample_from_255_to_124", "old_id": "sample_255"}
{"code": "def f(text, sub):\n    a = 0\n    b = len(text) - 1\n\n    while a <= b:\n        c = (a + b) // 2\n        if text.rfind(sub) >= c and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            a = c + 1\n        else:\n            b = c - 1\n\n    return a", "input": "'dorfunctions', '2'", "output": "0", "id": "If_AddShortCircuiting_sample_from_256_to_125", "old_id": "sample_256"}
{"code": "def f(text):\n    new_text = []\n    for character in text:\n        if character.isupper() and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            new_text.insert(len(new_text) // 2, character)\n    if len(new_text) == 0 and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        new_text = ['-']\n    return ''.join(new_text)", "input": "'String matching is a big part of RexEx library.'", "output": "'RES'", "id": "If_AddShortCircuiting_sample_from_259_to_126", "old_id": "sample_259"}
{"code": "def f(nums, target):\n    lows, higgs = [], []\n    for i in nums:\n        if i < target and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            lows.append(i)\n        else:\n            higgs.append(i)\n    lows.clear()\n    return lows, higgs", "input": "[12, 516, 5, 2, 3, 214, 51], 5", "output": "([], [12, 516, 5, 214, 51])", "id": "If_AddShortCircuiting_sample_from_261_to_127", "old_id": "sample_261"}
{"code": "def f(base, delta):\n    for j in range(len(delta)):\n        for i in range(len(base)):\n            if base[i] == delta[j][0] and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n                assert delta[j][1] != base[i]\n                base[i] = delta[j][1]\n    return base", "input": "[\"gloss\", \"banana\", \"barn\", \"lawn\"], []", "output": "['gloss', 'banana', 'barn', 'lawn']", "id": "If_AddShortCircuiting_sample_from_263_to_128", "old_id": "sample_263"}
{"code": "def f(d, k):\n    new_d = {}\n    for key, val in d.items():\n        if key < k and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            new_d[key] = val\n    return new_d", "input": "{1: 2, 2: 4, 3: 3}, 3", "output": "{1: 2, 2: 4}", "id": "If_AddShortCircuiting_sample_from_265_to_129", "old_id": "sample_265"}
{"code": "def f(nums):\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] % 2 == 1 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            nums.insert(i+1, nums[i])\n    return nums", "input": "[2, 3, 4, 6, -2]", "output": "[2, 3, 3, 4, 6, -2]", "id": "If_AddShortCircuiting_sample_from_266_to_130", "old_id": "sample_266"}
{"code": "def f(text, space):\n    if space < 0 and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        return text\n    return text.ljust(len(text) // 2 + space)", "input": "'sowpf', -7", "output": "'sowpf'", "id": "If_AddShortCircuiting_sample_from_267_to_131", "old_id": "sample_267"}
{"code": "def f(s, separator):\n    for i in range(len(s)):\n        if s[i] == separator and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            new_s = list(s)\n            new_s[i] = '/'\n            return ' '.join(new_s)", "input": "'h grateful k', ' '", "output": "'h / g r a t e f u l   k'", "id": "If_AddShortCircuiting_sample_from_268_to_132", "old_id": "sample_268"}
{"code": "def f(text, c):\n    ls = list(text)\n    if c not in text and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        raise ValueError('Text has no {c}')\n    ls.pop(text.rindex(c))\n    return ''.join(ls)", "input": "'uufhl', 'l'", "output": "'uufh'", "id": "If_AddShortCircuiting_sample_from_271_to_133", "old_id": "sample_271"}
{"code": "def f(name):\n    new_name =''\n    name = name[::-1]\n    for i in range(len(name)):\n        n = name[i]\n        if n !='.' and  new_name.count('.')<2 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            new_name=n+new_name\n        else:\n            break\n    return new_name", "input": "'.NET'", "output": "'NET'", "id": "If_AddShortCircuiting_sample_from_273_to_134", "old_id": "sample_273"}
{"code": "def f(a):\n    if len(a) >= 2 and a[0] > 0 and a[1] > 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        a.reverse()\n        return a\n    a.append(0)\n    return a", "input": "[]", "output": "[0]", "id": "If_AddShortCircuiting_sample_from_276_to_135", "old_id": "sample_276"}
{"code": "def f(lst, mode):\n    result = [el for el in lst]\n    if mode and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        result.reverse()\n    return result", "input": "[1, 2, 3, 4], 1", "output": "[4, 3, 2, 1]", "id": "If_AddShortCircuiting_sample_from_277_to_136", "old_id": "sample_277"}
{"code": "def f(c, index, value):\n    c[index] = value\n    if value >= 3 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        c.update({'message' : 'xcrWt'})\n    else: \n        del c['message']\n    return c", "input": "{1: 2, 3: 4, 5: 6, 'message': 'qrTHo'}, 8, 2", "output": "{1: 2, 3: 4, 5: 6, 8: 2}", "id": "If_AddShortCircuiting_sample_from_281_to_137", "old_id": "sample_281"}
{"code": "def f(dictionary, key):\n    del dictionary[key]\n    if min(dictionary) == key and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        key = list(dictionary)[0]\n    return key", "input": "{'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0,'Thor': 1, 'Ant-Man': 6}, 'Iron Man'", "output": "'Iron Man'", "id": "If_AddShortCircuiting_sample_from_283_to_138", "old_id": "sample_283"}
{"code": "def f(text, prefix):\n    idx = 0\n    for letter in prefix:\n        if text[idx] != letter and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            return None\n        idx += 1\n    return text[idx:]", "input": "'bestest', 'bestest'", "output": "''", "id": "If_AddShortCircuiting_sample_from_284_to_139", "old_id": "sample_284"}
{"code": "def f(array, x, i):\n    if i < -len(array) or i > len(array) - 1 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        return 'no'\n    temp = array[i]\n    array[i] = x\n    return array", "input": "[1,2,3,4,5,6,7,8,9,10], 11, 4", "output": "[1, 2, 3, 4, 11, 6, 7, 8, 9, 10]", "id": "If_AddShortCircuiting_sample_from_286_to_140", "old_id": "sample_286"}
{"code": "def f(name):\n    if name.islower() and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        name = name.upper()\n    else:\n        name = name.lower()\n    return name", "input": "'Pinneaple'", "output": "'pinneaple'", "id": "If_AddShortCircuiting_sample_from_287_to_141", "old_id": "sample_287"}
{"code": "def f(text, prefix):\n    if text.startswith(prefix) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return text.removeprefix(prefix)\n    if prefix in text and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        return text.replace(prefix, '').strip()\n    return text.upper()", "input": "'abixaaaily', 'al'", "output": "'ABIXAAAILY'", "id": "If_AddShortCircuiting_sample_from_290_to_142", "old_id": "sample_290"}
{"code": "def f(dictionary, arr):\n    dictionary.update({arr[0]: [arr[1]]})\n    if len(dictionary[arr[0]]) == arr[1] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n        dictionary[arr[0]] = arr[0]\n    return dictionary", "input": "{}, ['a', 2]", "output": "{'a': [2]}", "id": "If_AddShortCircuiting_sample_from_291_to_143", "old_id": "sample_291"}
{"code": "def f(text):\n    s = text.lower()\n    for i in range(len(s)):\n        if s[i] == 'x' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n            return 'no'\n    return text.isupper()", "input": "'dEXE'", "output": "'no'", "id": "If_AddShortCircuiting_sample_from_293_to_144", "old_id": "sample_293"}
{"code": "def f(n, m, text):\n    if text.strip() == '' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return text\n    head, mid, tail = text[0], text[1:-1], text[-1]\n    joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n    return joined", "input": "\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"", "output": "'2$z&5H3*1a@#a*1hris'", "id": "If_AddShortCircuiting_sample_from_294_to_145", "old_id": "sample_294"}
{"code": "def f(fruits):\n    if fruits[-1] == fruits[0] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return 'no'\n    else:\n        fruits.pop(0)\n        fruits.pop()\n        fruits.pop(0)\n        fruits.pop()\n        return fruits", "input": "['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']", "output": "['pear', 'banana', 'pear']", "id": "If_AddShortCircuiting_sample_from_295_to_146", "old_id": "sample_295"}
{"code": "def f(num):\n    if 0 < num < 1000 and num != 6174 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return 'Half Life'\n    return 'Not found'", "input": "6173", "output": "'Not found'", "id": "If_AddShortCircuiting_sample_from_297_to_147", "old_id": "sample_297"}
{"code": "def f(text, char):\n    if not text.endswith(char) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return f(char + text, char)\n    return text", "input": "'staovk', 'k'", "output": "'staovk'", "id": "If_AddShortCircuiting_sample_from_299_to_148", "old_id": "sample_299"}
{"code": "def f(text):\n    i = (len(text) + 1) // 2\n    result = list(text)\n    while i < len(text):\n        t = result[i].lower()\n        if t == result[i] and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            i += 1\n        else:\n            result[i] = t\n        i += 2\n    return ''.join(result)", "input": "'mJkLbn'", "output": "'mJklbn'", "id": "If_AddShortCircuiting_sample_from_303_to_149", "old_id": "sample_303"}
{"code": "def f(text, char):\n    length = len(text)\n    index = -1\n    for i in range(length):\n        if text[i] == char and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            index = i\n    if index == -1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        index = length // 2\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'o horseto', 'r'", "output": "'o hoseto'", "id": "If_AddShortCircuiting_sample_from_305_to_150", "old_id": "sample_305"}
{"code": "def f(nums):\n    digits = []\n    for num in nums:\n        if (isinstance(num, str) and num.isnumeric()) or isinstance(num, int) and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            digits.append(num)\n    digits = list(map(int, digits))\n    return digits", "input": "[0, 6, '1', '2', 0]", "output": "[0, 6, 1, 2, 0]", "id": "If_AddShortCircuiting_sample_from_306_to_151", "old_id": "sample_306"}
{"code": "def f(strings):\n    occurances = {}\n    for string in strings:\n        if string not in occurances and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n            occurances[string] = strings.count(string)\n    return occurances", "input": "[\"La\", \"Q\", \"9\", \"La\", \"La\"]", "output": "{'La': 3, 'Q': 1, '9': 1}", "id": "If_AddShortCircuiting_sample_from_308_to_152", "old_id": "sample_308"}
{"code": "def f(str):\n    if str.isalnum() and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        return \"True\"\n    return \"False\"", "input": "'777'", "output": "'True'", "id": "If_AddShortCircuiting_sample_from_312_to_153", "old_id": "sample_312"}
{"code": "def f(text):\n    if ',' in text and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    return ',' + text.partition(' ')[-1] + ' 0'", "input": "'244, 105, -90'", "output": "' 105, -90 244'", "id": "If_AddShortCircuiting_sample_from_314_to_154", "old_id": "sample_314"}
{"code": "def f(value, char):\n    total = 0\n    for c in value:\n        if c == char or c == char.lower() and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            total += 1\n    return total", "input": "'234rtccde', 'e'", "output": "1", "id": "If_AddShortCircuiting_sample_from_318_to_155", "old_id": "sample_318"}
{"code": "def f(text):\n    index = 1\n    while index < len(text):\n        if text[index] != text[index - 1] and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            index += 1\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()", "input": "'USaR'", "output": "'usAr'", "id": "If_AddShortCircuiting_sample_from_320_to_156", "old_id": "sample_320"}
{"code": "def f(update, starting):\n    d = starting.copy()\n    for k in update:\n        if k in d and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n            d[k] += update[k]\n        else:\n            d[k] = update[k]\n    return d", "input": "{}, {'desciduous': 2}", "output": "{'desciduous': 2}", "id": "If_AddShortCircuiting_sample_from_321_to_157", "old_id": "sample_321"}
{"code": "def f(s):\n    l = list(s)\n    for i in range(len(l)):\n        l[i] = l[i].lower()\n        if not l[i].isdigit() and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            return False\n    return True", "input": "\"\"", "output": "True", "id": "If_AddShortCircuiting_sample_from_325_to_158", "old_id": "sample_325"}
{"code": "def f(text):\n    number = 0\n    for t in text:\n        if t.isnumeric() and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            number += 1\n    return number", "input": "'Thisisastring'", "output": "0", "id": "If_AddShortCircuiting_sample_from_326_to_159", "old_id": "sample_326"}
{"code": "def f(lst):\n    new = list()\n    i = len(lst)-1\n    for _ in range(len(lst)):\n        if i%2 == 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n    return new", "input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "id": "If_AddShortCircuiting_sample_from_327_to_160", "old_id": "sample_327"}
{"code": "def f(array, L):\n    if L <= 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return array\n    if len(array) < L and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        array.extend(f(array, L - len(array)))\n    return array", "input": "[1, 2, 3], 4", "output": "[1, 2, 3, 1, 2, 3]", "id": "If_AddShortCircuiting_sample_from_328_to_161", "old_id": "sample_328"}
{"code": "def f(text):\n    for i in range(len(text)):\n        if text[i] == text[i].upper() and text[i-1].islower() and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            return True\n    return False", "input": "'jh54kkk6'", "output": "True", "id": "If_AddShortCircuiting_sample_from_329_to_162", "old_id": "sample_329"}
{"code": "def f(text):\n    ans = []\n    for char in text:\n        if char.isdigit() and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ans.append(char)\n        else:\n            ans.append(' ')\n    return ''.join(ans)", "input": "'m4n2o'", "output": "' 4 2 '", "id": "If_AddShortCircuiting_sample_from_330_to_163", "old_id": "sample_330"}
{"code": "def f(nums):\n    count = len(nums)\n    if count == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        nums = [0] * int(nums.pop())\n    elif count % 2 == 0:\n        nums.clear()\n    else:\n        del nums[:count//2:]\n    return nums", "input": "[-6, -2, 1, -3, 0, 1]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_332_to_164", "old_id": "sample_332"}
{"code": "def f(places, lazy):\n    places.sort()\n    for lazy in lazy:\n        places.remove(lazy)\n    if len(places) == 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 1\n    for i, place in enumerate(places):\n        if places.count(place+1) == 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            return i+1\n    return i+1", "input": "[375, 564, 857, 90, 728, 92], [728]", "output": "1", "id": "If_AddShortCircuiting_sample_from_333_to_165", "old_id": "sample_333"}
{"code": "def f(text, to_remove):\n    new_text = list(text)\n    if to_remove in new_text and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        index = new_text.index(to_remove)\n        new_text.remove(to_remove)\n        new_text.insert(index, '?')\n        new_text.remove('?')\n    return ''.join(new_text)", "input": "'sjbrlfqmw', 'l'", "output": "'sjbrfqmw'", "id": "If_AddShortCircuiting_sample_from_335_to_166", "old_id": "sample_335"}
{"code": "def f(txt):\n    d = []\n    for c in txt:\n        if c.isdigit() and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            continue\n        if c.islower() and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            d.append(c.upper())\n        elif c.isupper():\n            d.append(c.lower())\n    return ''.join(d)", "input": "\"5ll6\"", "output": "'LL'", "id": "If_AddShortCircuiting_sample_from_337_to_167", "old_id": "sample_337"}
{"code": "def f(array, elem):\n    elem = str(elem)\n    d = 0\n    for i in array:\n        if str(i) == elem and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            d += 1\n    return d", "input": "[-1, 2, 1, -8, -8, 2], 2", "output": "2", "id": "If_AddShortCircuiting_sample_from_339_to_168", "old_id": "sample_339"}
{"code": "def f(text):\n    uppercase_index = text.find('A')\n    if uppercase_index >= 0 and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return text[:uppercase_index] + text[text.find('a') + 1 :]\n    else:\n        return ''.join(sorted(text))", "input": "'E jIkx HtDpV G'", "output": "'   DEGHIVjkptx'", "id": "If_AddShortCircuiting_sample_from_340_to_169", "old_id": "sample_340"}
{"code": "def f(a, b):\n    if a < b and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n        return (b, a)\n    return (a, b)", "input": "'ml', 'mv'", "output": "('mv', 'ml')", "id": "If_AddShortCircuiting_sample_from_345_to_170", "old_id": "sample_345"}
{"code": "def f(d):\n    size = len(d)\n    v = [0] * size\n    if size == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return v\n    for i, e in enumerate(d.values()):\n        v[i] = e\n    return v", "input": "{'a': 1, 'b': 2, 'c': 3}", "output": "[1, 2, 3]", "id": "If_AddShortCircuiting_sample_from_350_to_171", "old_id": "sample_350"}
{"code": "def f(x):\n    if x == [] and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return -1\n    else:\n        cache = {}\n        for item in x:\n            if item in cache:\n                cache[item] += 1\n            else:\n                cache[item] = 1\n        return max(cache.values())", "input": "[1, 0, 2, 2, 0, 0, 0, 1]", "output": "4", "id": "If_AddShortCircuiting_sample_from_353_to_172", "old_id": "sample_353"}
{"code": "def f(description, values):\n    if values[1] is None and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        values = values[0:1]\n    else:\n        values = values[1:]\n    return description.format(*values)", "input": "'{0}, {0}!!!', ['R', None]", "output": "'R, R!!!'", "id": "If_AddShortCircuiting_sample_from_354_to_173", "old_id": "sample_354"}
{"code": "def f(array, num):\n    reverse = False\n    if num < 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        reverse = True\n        num *= -1\n    array = array[::-1] * num\n    l = len(array)\n    if reverse and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        array = array[::-1]\n    return array", "input": "[1, 2], 1", "output": "[2, 1]", "id": "If_AddShortCircuiting_sample_from_356_to_174", "old_id": "sample_356"}
{"code": "def f(text, value):\n    indexes = []\n    for i in range(len(text)):\n        if text[i] == value and (i == 0 or text[i-1] != value) and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            indexes.append(i) \n    if len(indexes) % 2 == 1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return text\n    return text[indexes[0]+1:indexes[-1]]", "input": "'btrburger', 'b'", "output": "'tr'", "id": "If_AddShortCircuiting_sample_from_358_to_175", "old_id": "sample_358"}
{"code": "def f(text, n):\n    if len(text) <= 2 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return text\n    leading_chars = text[0] * (n - len(text) + 1)\n    return leading_chars + text[1:-1] + text[-1]", "input": "'g', 15", "output": "'g'", "id": "If_AddShortCircuiting_sample_from_360_to_176", "old_id": "sample_360"}
{"code": "def f(text):\n    for i in range(len(text)-1):\n        if text[i:].islower() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return text[i + 1:]\n    return ''", "input": "'wrazugizoernmgzu'", "output": "'razugizoernmgzu'", "id": "If_AddShortCircuiting_sample_from_362_to_177", "old_id": "sample_362"}
{"code": "def f(nums):\n    nums.sort()\n    n = len(nums)\n    new_nums = [nums[n//2]]\n    if n % 2 == 0 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        new_nums = [nums[n//2 - 1], nums[n//2]]\n    \n    for i in range(0, n//2):\n        new_nums.insert(0, nums[n-i-1])\n        new_nums.append(nums[i])\n    return new_nums", "input": "[1]", "output": "[1]", "id": "If_AddShortCircuiting_sample_from_363_to_178", "old_id": "sample_363"}
{"code": "def f(nums, verdict):\n    res = [x for x in nums if x != 0]\n    result = [[x, verdict(x)] for x in res]\n    if result and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return result\n    return 'error - no numbers or all zeros!'", "input": "[0, 3, 0, 1], lambda x: x < 2", "output": "[[3, False], [1, True]]", "id": "If_AddShortCircuiting_sample_from_364_to_179", "old_id": "sample_364"}
{"code": "def f(n, s):\n    if s.startswith(n) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        pre, _ = s.split(n, 1)\n        return pre + n + s[len(n):]\n    return s", "input": "'xqc', 'mRcwVqXsRDRb'", "output": "'mRcwVqXsRDRb'", "id": "If_AddShortCircuiting_sample_from_365_to_180", "old_id": "sample_365"}
{"code": "def f(string):\n    tmp = string.lower()\n    for char in string.lower():\n        if char in tmp and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            tmp = tmp.replace(char, '', 1)\n    return tmp", "input": "'[ Hello ]+ Hello, World!!_ Hi'", "output": "''", "id": "If_AddShortCircuiting_sample_from_366_to_181", "old_id": "sample_366"}
{"code": "def f(nums, rmvalue):\n    res = nums[:]\n    while rmvalue in res:\n        popped = res.pop(res.index(rmvalue))\n        if popped != rmvalue and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            res.append(popped)\n    return res", "input": "[6, 2, 1, 1, 4, 1], 5", "output": "[6, 2, 1, 1, 4, 1]", "id": "If_AddShortCircuiting_sample_from_367_to_182", "old_id": "sample_367"}
{"code": "def f(var):\n    if var.isdigit() and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        return \"int\"\n    elif var.replace('.', '', 1).isdigit():\n        return \"float\"\n    elif var.count(' ') == len(var) - 1:\n        return \"str\"\n    elif len(var) == 1:\n        return \"char\"\n    else:\n        return \"tuple\"", "input": "\" 99 777\"", "output": "'tuple'", "id": "If_AddShortCircuiting_sample_from_369_to_183", "old_id": "sample_369"}
{"code": "def f(text):\n    for char in text:\n        if not char.isspace() and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            return False\n    return True", "input": "'     i'", "output": "False", "id": "If_AddShortCircuiting_sample_from_370_to_184", "old_id": "sample_370"}
{"code": "def f(nums):\n    for odd in nums[:]:\n        if odd % 2 != 0 and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            nums.remove(odd)\n    sum_ = 0\n    for num in nums:\n        sum_ += num\n    return sum_", "input": "[11, 21, 0, 11]", "output": "0", "id": "If_AddShortCircuiting_sample_from_371_to_185", "old_id": "sample_371"}
{"code": "def f(seq, v):\n    a = []\n    for i in seq:\n        if i.endswith(v) and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            a.append(i*2)\n    return a", "input": "[ 'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA' ], 'zz'", "output": "['zzzz']", "id": "If_AddShortCircuiting_sample_from_374_to_186", "old_id": "sample_374"}
{"code": "def f(text):\n    for i in range(len(text)):\n        if text[0:i].startswith(\"two\") and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n            return text[i:]\n    return 'no'", "input": "\"2two programmers\"", "output": "'no'", "id": "If_AddShortCircuiting_sample_from_376_to_188", "old_id": "sample_376"}
{"code": "def f(dic, key):\n    dic = dict(dic)\n    v = dic.pop(key, 0)\n    if v == 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return 'No such key!'\n    while len(dic) > 0:\n        dic[dic.popitem()[1]] = dic.popitem()[0]\n    return int(dic.popitem()[0])", "input": "dict(did=0), 'u'", "output": "'No such key!'", "id": "If_AddShortCircuiting_sample_from_378_to_189", "old_id": "sample_378"}
{"code": "def f(nums):\n    for i in range(len(nums) - 1, -1, -3):\n        if nums[i] == 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            nums.clear()\n            return False\n    return nums", "input": "[0, 0, 1, 2, 1]", "output": "False", "id": "If_AddShortCircuiting_sample_from_379_to_190", "old_id": "sample_379"}
{"code": "def f(text, chars):\n    chars = list(chars)\n    text = list(text)\n    new_text = text\n    while len(new_text) > 0 and text:\n        if new_text[0] in chars and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            new_text = new_text[1:]\n        else:\n            break \n    return ''.join(new_text)", "input": "'asfdellos', 'Ta'", "output": "'sfdellos'", "id": "If_AddShortCircuiting_sample_from_384_to_191", "old_id": "sample_384"}
{"code": "def f(lst):\n    i = 0\n    new_list = []\n    while i < len(lst):\n        if lst[i] in lst[i+1:] and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            new_list.append(lst[i])\n            if len(new_list) == 3:\n                return new_list\n        i += 1\n    return new_list", "input": "[0, 2, 1, 2, 6, 2, 6, 3, 0]", "output": "[0, 2, 2]", "id": "If_AddShortCircuiting_sample_from_385_to_192", "old_id": "sample_385"}
{"code": "def f(concat, di):\n    count = len(di)\n    for i in range(count):\n        if di[str(i)] in concat and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            di.pop(str(i))\n    return \"Done!\"", "input": "'mid', {'0':'q','1':'f','2':'w','3':'i'}", "output": "'Done!'", "id": "If_AddShortCircuiting_sample_from_386_to_193", "old_id": "sample_386"}
{"code": "def f(total, arg):\n    if type(arg) is list and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        for e in arg:\n            total.extend(e)\n    else:\n        total.extend(arg)\n    return total", "input": "[1, 2, 3], 'nammo'", "output": "[1, 2, 3, 'n', 'a', 'm', 'm', 'o']", "id": "If_AddShortCircuiting_sample_from_389_to_194", "old_id": "sample_389"}
{"code": "def f(text):\n    if not text.strip() and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return len(text.strip())\n    return None", "input": "\" \\t \"", "output": "0", "id": "If_AddShortCircuiting_sample_from_390_to_195", "old_id": "sample_390"}
{"code": "def f(text):\n    if text.upper() == text and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return 'ALL UPPERCASE'\n    return text", "input": "'Hello Is It MyClass'", "output": "'Hello Is It MyClass'", "id": "If_AddShortCircuiting_sample_from_392_to_196", "old_id": "sample_392"}
{"code": "def f(text):\n    k = text.splitlines()\n    i = 0\n    for j in k:\n        if len(j) == 0 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            return i\n        i+=1\n    return -1", "input": "\"2 m2 \\n\\nbike\"", "output": "1", "id": "If_AddShortCircuiting_sample_from_394_to_197", "old_id": "sample_394"}
{"code": "def f(s):\n    for i in range(len(s)):\n        if s[i].isdecimal() and (((True or False) and (False or True)) and ((5 > 1) or (5 < 1))):\n            return i + (s[i] == '0')\n        elif s[i] == '0':\n            return -1\n    return -1", "input": "\"11\"", "output": "0", "id": "If_AddShortCircuiting_sample_from_395_to_198", "old_id": "sample_395"}
{"code": "def f(counts):\n    dict = {}\n    for k, v in counts.items():\n        count = counts[k]\n        if count not in dict and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            dict[count] = []\n        dict[count].append(k)\n    counts.update(dict)\n    return counts", "input": "{'2': 2, '0': 1, '1': 2}", "output": "{'2': 2, '0': 1, '1': 2, 2: ['2', '1'], 1: ['0']}", "id": "If_AddShortCircuiting_sample_from_398_to_199", "old_id": "sample_398"}
{"code": "def f(text, old, new):\n    if len(old) > 3 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        return text\n    if old in text and ' ' not in text and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return text.replace(old, new*len(old))\n    while old in text:\n        text = text.replace(old, new)\n    return text", "input": "'avacado', 'va', '-'", "output": "'a--cado'", "id": "If_AddShortCircuiting_sample_from_399_to_200", "old_id": "sample_399"}
{"code": "def f(multi_string):\n    cond_string = map(str.isascii, multi_string.split())\n    if True in cond_string and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return ', '.join(x for x in multi_string.split() if x.isascii())\n    return ''", "input": "'I am hungry! eat food.'", "output": "'I, am, hungry!, eat, food.'", "id": "If_AddShortCircuiting_sample_from_400_to_201", "old_id": "sample_400"}
{"code": "def f(text, suffix):\n    if suffix and text.endswith(suffix) and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return text[:- len(suffix)]\n    return text", "input": "'mathematics', 'example'", "output": "'mathematics'", "id": "If_AddShortCircuiting_sample_from_401_to_202", "old_id": "sample_401"}
{"code": "def f(text, char):\n    if text and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()\n    return text", "input": "'querist', 'u'", "output": "'querisT'", "id": "If_AddShortCircuiting_sample_from_409_to_203", "old_id": "sample_409"}
{"code": "def f(text, pref):\n    if isinstance(pref, list) and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return ', '.join(text.startswith(x) for x in pref)\n    else:\n        return text.startswith(pref)", "input": "'Hello World', 'W'", "output": "False", "id": "If_AddShortCircuiting_sample_from_411_to_204", "old_id": "sample_411"}
{"code": "def f(start, end, interval):\n    steps = list(range(start, end + 1, interval))\n    if 1 in steps and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        steps[-1] = end + 1\n    return len(steps)", "input": "3, 10, 1", "output": "8", "id": "If_AddShortCircuiting_sample_from_412_to_205", "old_id": "sample_412"}
{"code": "def f(array):\n    d = dict(array)\n    for key, value in d.items():\n        if value < 0 or value > 9 and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            return None\n    return d", "input": "((8, 5), (8, 2), (5, 3))", "output": "{8: 2, 5: 3}", "id": "If_AddShortCircuiting_sample_from_415_to_206", "old_id": "sample_415"}
{"code": "def f(s, p):\n    arr = s.partition(p)\n    part_one, part_two, part_three = len(arr[0]), len(arr[1]), len(arr[2])\n    if part_one >= 2 and part_two <= 2 and part_three >= 2 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        return (arr[0][::-1] + arr[1] + arr[2][::-1] + '#')\n    return (arr[0] + arr[1] + arr[2])", "input": "\"qqqqq\", \"qqq\"", "output": "'qqqqq'", "id": "If_AddShortCircuiting_sample_from_418_to_207", "old_id": "sample_418"}
{"code": "def f(text, value):\n    if not value in text and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return ''\n    return text.rpartition(value)[0]", "input": "'mmfbifen', 'i'", "output": "'mmfb'", "id": "If_AddShortCircuiting_sample_from_419_to_208", "old_id": "sample_419"}
{"code": "def f(str, n):\n    if len(str) < n and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        return str\n    else:\n        return str.removeprefix(str[:n])", "input": "\"try.\", 5", "output": "'try.'", "id": "If_AddShortCircuiting_sample_from_421_to_209", "old_id": "sample_421"}
{"code": "def f(selfie):\n    lo = len(selfie)\n    for i in range(lo-1, -1, -1):\n        if selfie[i] == selfie[0] and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            selfie.remove(selfie[lo-1])\n    return selfie", "input": "[4, 2, 5, 1, 3, 2, 6]", "output": "[4, 2, 5, 1, 3, 2]", "id": "If_AddShortCircuiting_sample_from_423_to_210", "old_id": "sample_423"}
{"code": "def f(s):\n    s = s.replace('\"', '')\n    lst = list(s)\n    col = 0\n    count = 1\n    while col < len(lst) and lst[col] in \".:,\":\n        if lst[col] == \".\" and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            count = ls[col] + 1\n        col += 1\n    return s[col+count:]", "input": "'\"Makers of a Statement\"'", "output": "'akers of a Statement'", "id": "If_AddShortCircuiting_sample_from_424_to_211", "old_id": "sample_424"}
{"code": "def f(nums):\n    for i in range(len(nums)):\n        if not i % 2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            nums.append(nums[i] * nums[i + 1])\n    return nums", "input": "[]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_428_to_212", "old_id": "sample_428"}
{"code": "def f(length, text):\n    if len(text) == length and (((True or False) and (False or True)) and ((10 > 4) or (10 < 4))):\n        return text[::-1]\n    return False", "input": "-5, 'G5ogb6f,c7e.EMm'", "output": "False", "id": "If_AddShortCircuiting_sample_from_432_to_213", "old_id": "sample_432"}
{"code": "def f(string):\n    bigTab = 100\n    for i in range(10, 30):\n        if 0 < string.count('\\t') < 20 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            bigTab = i\n            break\n    return string.expandtabs(bigTab)", "input": "'1  \\t\\t\\t3'", "output": "'1                             3'", "id": "If_AddShortCircuiting_sample_from_438_to_214", "old_id": "sample_438"}
{"code": "def f(text):\n    if text.isdecimal() and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 'yes'\n    else:\n        return 'no'", "input": "\"abc\"", "output": "'no'", "id": "If_AddShortCircuiting_sample_from_440_to_215", "old_id": "sample_440"}
{"code": "def f(lst):\n    res = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n            res.append(lst[i])\n\n    return lst.copy()", "input": "[1, 2, 3, 4]", "output": "[1, 2, 3, 4]", "id": "If_AddShortCircuiting_sample_from_442_to_216", "old_id": "sample_442"}
{"code": "def f(text):\n    for space in text:\n        if space == ' ' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            text = text.lstrip()\n        else:\n            text = text.replace('cd', space)\n    return text", "input": "\"lorem ipsum\"", "output": "'lorem ipsum'", "id": "If_AddShortCircuiting_sample_from_443_to_217", "old_id": "sample_443"}
{"code": "def f(array):\n    l = len(array)\n    if l % 2 == 0 and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        array.clear()\n    else:\n        array.reverse()\n    return array", "input": "[]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_446_to_218", "old_id": "sample_446"}
{"code": "def f(text, tab_size):\n    res = ''\n    text = text.replace('\\t', ' '*(tab_size-1))\n    for i in range(len(text)):\n        if text[i] == ' ' and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            res += '|'\n        else:\n            res += text[i]\n    return res", "input": "\"\\ta\", 3", "output": "'||a'", "id": "If_AddShortCircuiting_sample_from_447_to_219", "old_id": "sample_447"}
{"code": "def f(text, suffix):\n    if suffix == '' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        suffix = None\n    return text.endswith(suffix)", "input": "'uMeGndkGh', 'kG'", "output": "False", "id": "If_AddShortCircuiting_sample_from_448_to_220", "old_id": "sample_448"}
{"code": "def f(text, char):\n    text = list(text)\n    for count, item in enumerate(text):\n        if item == char and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            text.remove(item)\n            return ''.join(text)\n    return text", "input": "'pn', 'p'", "output": "'n'", "id": "If_AddShortCircuiting_sample_from_451_to_221", "old_id": "sample_451"}
{"code": "def f(text):\n    uppers = 0\n    for c in text:\n        if c.isupper() and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            uppers += 1\n    return text.upper() if uppers >= 10 else text", "input": "'?XyZ'", "output": "'?XyZ'", "id": "If_AddShortCircuiting_sample_from_455_to_223", "old_id": "sample_455"}
{"code": "def f(nums):\n    count = list(range(len(nums)))\n    for i in range(len(nums)):\n        nums.pop()\n        if len(count) > 0 and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            count.pop(0)\n    return nums", "input": "[3, 1, 7, 5, 6]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_457_to_224", "old_id": "sample_457"}
{"code": "def f(text, amount):\n    length = len(text)\n    pre_text = '|'\n    if amount >= length and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space // 2)\n        return pre_text + text + pre_text\n    return text", "input": "'GENERAL NAGOOR', 5", "output": "'GENERAL NAGOOR'", "id": "If_AddShortCircuiting_sample_from_460_to_225", "old_id": "sample_460"}
{"code": "def f(text, value):\n    length = len(text)\n    letters = list(text)\n    if value not in letters and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        value = letters[0]\n    return value * length", "input": "'ldebgp o', 'o'", "output": "'oooooooo'", "id": "If_AddShortCircuiting_sample_from_462_to_226", "old_id": "sample_462"}
{"code": "def f(dict):\n    result = dict.copy()\n    remove_keys = []\n    for k, v in dict.items():\n        if v in dict and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n            del result[k]\n    return result", "input": "{-1: -1, 5: 5, 3: 6, -4: -4}", "output": "{3: 6}", "id": "If_AddShortCircuiting_sample_from_463_to_227", "old_id": "sample_463"}
{"code": "def f(ans):\n    if ans.isdecimal() and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        total = int(ans) * 4 - 50\n        total -= len([c for c in list(ans) if c not in '02468']) * 100\n        return total\n    return 'NAN'", "input": "'0'", "output": "-50", "id": "If_AddShortCircuiting_sample_from_464_to_228", "old_id": "sample_464"}
{"code": "def f(seq, value):\n    roles = dict.fromkeys(seq, 'north')\n    if value and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        roles.update(key.strip() for key in value.split(', '))\n    return roles", "input": "['wise king', 'young king'], ''", "output": "{'wise king': 'north', 'young king': 'north'}", "id": "If_AddShortCircuiting_sample_from_465_to_229", "old_id": "sample_465"}
{"code": "def f(a, b, n):\n    result = m = b\n    for _ in range(n):\n        if m and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            a, m = a.replace(m, '', 1), None\n            result = m = b\n    return result.join(a.split(b))", "input": "'unrndqafi', 'c', 2", "output": "'unrndqafi'", "id": "If_AddShortCircuiting_sample_from_468_to_230", "old_id": "sample_468"}
{"code": "def f(text, position, value):\n   length = len(text)\n   index = position % (length)\n   if position < 0 and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n       index = length // 2\n   new_text = list(text)\n   new_text.insert(index, value)\n   new_text.pop(length-1)\n   return ''.join(new_text)", "input": "'sduyai', 1, 'y'", "output": "'syduyi'", "id": "If_AddShortCircuiting_sample_from_469_to_231", "old_id": "sample_469"}
{"code": "def f(number):\n    transl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n    result = []\n    for key, value in transl.items():\n        if value % number == 0 and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            result.append(key)\n    return result", "input": "2", "output": "['B', 'D']", "id": "If_AddShortCircuiting_sample_from_470_to_232", "old_id": "sample_470"}
{"code": "def f(val, text):\n    indices = [index for index in range(len(text)) if text[index] == val]\n    if len(indices) == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return -1\n    else:\n        return indices[0]", "input": "'o', 'fnmart'", "output": "-1", "id": "If_AddShortCircuiting_sample_from_471_to_233", "old_id": "sample_471"}
{"code": "def f(text, value):\n    indexes = list()\n    for i in range(len(text)):\n        if text[i] == value and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            indexes.append(i)\n    new_text = list(text)\n    for i in indexes:\n        new_text.remove(value)\n    return ''.join(new_text)", "input": "'scedvtvotkwqfoqn', 'o'", "output": "'scedvtvtkwqfqn'", "id": "If_AddShortCircuiting_sample_from_473_to_234", "old_id": "sample_473"}
{"code": "def f(array, index):\n    if index < 0 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n        index = len(array) + index\n    return array[index]", "input": "[1], 0", "output": "1", "id": "If_AddShortCircuiting_sample_from_475_to_235", "old_id": "sample_475"}
{"code": "def f(a, split_on):\n    t = a.split()\n    a = []\n    for i in t:\n        for j in i:\n            a.append(j)\n    if split_on in a and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return True\n    else:\n        return False", "input": "\"booty boot-boot bootclass\", 'k'", "output": "False", "id": "If_AddShortCircuiting_sample_from_476_to_236", "old_id": "sample_476"}
{"code": "def f(text):\n    topic, sep, problem = text.rpartition('|')\n    if problem == 'r' and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        problem = topic.replace('u', 'p')\n    return topic, problem", "input": "'|xduaisf'", "output": "('', 'xduaisf')", "id": "If_AddShortCircuiting_sample_from_477_to_237", "old_id": "sample_477"}
{"code": "def f(s, c1, c2):\n    if s == '' and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c1 in item and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ls[index] = item.replace(c1, c2, 1)\n    return c1.join(ls)", "input": "'', 'mi', 'siast'", "output": "''", "id": "If_AddShortCircuiting_sample_from_480_to_238", "old_id": "sample_480"}
{"code": "def f(values, item1, item2):\n    if values[-1] == item2 and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        if values[0] not in values[1:]:\n            values.append(values[0])\n    elif values[-1] == item1:\n        if values[0] == item2:\n            values.append(values[0])\n    return values", "input": "[1, 1], 2, 3", "output": "[1, 1]", "id": "If_AddShortCircuiting_sample_from_481_to_239", "old_id": "sample_481"}
{"code": "def f(arr):\n    result = []\n    for item in arr:\n        try:\n            if item.isnumeric() and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n                result.append(int(item)*2)\n        except ValueError:\n            result.append(item[::-1])\n    return result", "input": "['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']", "output": "[182, 32]", "id": "If_AddShortCircuiting_sample_from_484_to_240", "old_id": "sample_484"}
{"code": "def f(tokens):\n    tokens = tokens.split()\n    if len(tokens) == 2 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        tokens = list(reversed(tokens))\n    result = ' '.join([tokens[0].ljust(5), tokens[1].ljust(5)])\n    return result", "input": "'gsd avdropj'", "output": "'avdropj gsd  '", "id": "If_AddShortCircuiting_sample_from_485_to_241", "old_id": "sample_485"}
{"code": "def f(dict):\n    even_keys = []\n    for key in dict.keys():\n        if key % 2 == 0 and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            even_keys.append(key)\n    return even_keys", "input": "{ 4: 'a' }", "output": "[4]", "id": "If_AddShortCircuiting_sample_from_487_to_242", "old_id": "sample_487"}
{"code": "def f(text, char):\n    count = text.count(char)\n    chars = list(text)\n    if count > 0 and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        index = chars.index(char) + 1\n        chars[:index:index+1] = [c for c in chars[index:index+count:1]]\n    return ''.join(chars)", "input": "'tezmgvn 651h', '6'", "output": "'5ezmgvn 651h'", "id": "If_AddShortCircuiting_sample_from_488_to_243", "old_id": "sample_488"}
{"code": "def f(text, value):\n    ls = list(text)\n    if (ls.count(value)) % 2 == 0 and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        while value in ls:\n            ls.remove(value)\n    else:\n        ls.clear()\n    return ''.join(ls)", "input": "'abbkebaniuwurzvr', 'm'", "output": "'abbkebaniuwurzvr'", "id": "If_AddShortCircuiting_sample_from_492_to_244", "old_id": "sample_492"}
{"code": "def f(s):\n    if str.isascii(s[-5:]) and (((True or False) and (False or True)) and ((9 > 7) or (9 < 7))):\n        return s[-5:], s[0:][:3]\n    elif str.isascii(s[:5]):\n        return s[:5], s[-5:][3:]\n    else:\n        return s", "input": "'a1234\u00e5r'", "output": "('a1234', '\u00e5r')", "id": "If_AddShortCircuiting_sample_from_495_to_245", "old_id": "sample_495"}
{"code": "def f(text, value):\n    if isinstance(value, str) and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n        return text.count(value) + text.count(value.lower())\n    return text.count(value)", "input": "'eftw{\u044c\u0422\u0441k_1', '\\\\'", "output": "0", "id": "If_AddShortCircuiting_sample_from_496_to_246", "old_id": "sample_496"}
{"code": "def f(string):\n    while string:\n        if string[-1].isalpha() and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            return string\n        string = string[:-1]\n    return string", "input": "'--4/0-209'", "output": "''", "id": "If_AddShortCircuiting_sample_from_505_to_247", "old_id": "sample_505"}
{"code": "def f(n):\n    p = ''\n    if n%2 == 1 and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n        p+='sn'\n    else:\n        return n*n\n    for x in range(1, n+1):\n        if x%2 == 0 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            p+='to'\n        else:\n            p+='ts'\n    return p", "input": "1", "output": "'snts'", "id": "If_AddShortCircuiting_sample_from_506_to_248", "old_id": "sample_506"}
{"code": "def f(value, width):\n    if value >= 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return str(value).zfill(width)\n    if value < 0 and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        return '-' + str(-value).zfill(width)\n    return ''", "input": "5, 1", "output": "'5'", "id": "If_AddShortCircuiting_sample_from_509_to_249", "old_id": "sample_509"}
{"code": "def f(a, b, c, d, e):\n    key = d\n    if key in a and (((True or False) and (False or True)) and ((6 > 1) or (6 < 1))):\n        num = a.pop(key)\n    if b > 3 and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        return ''.join(c)\n    else:\n        return num", "input": "{7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW'}, 4, 'Wy', 'Wy', 1.0", "output": "'Wy'", "id": "If_AddShortCircuiting_sample_from_510_to_250", "old_id": "sample_510"}
{"code": "def f(text):\n    for i in range(len(text)-1, 0, -1):\n        if not text[i].isupper() and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return text[0:i]\n    return ''", "input": "'SzHjifnzog'", "output": "'SzHjifnzo'", "id": "If_AddShortCircuiting_sample_from_517_to_251", "old_id": "sample_517"}
{"code": "def f(text):\n    text = list(text)\n    for i in range(len(text)-1, -1, -1):\n        if text[i].isspace() and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n            text[i] = '&nbsp;'\n    return ''.join(text)", "input": "'   '", "output": "'&nbsp;&nbsp;&nbsp;'", "id": "If_AddShortCircuiting_sample_from_523_to_252", "old_id": "sample_523"}
{"code": "def f(c, st, ed):\n    d = {}\n    a, b = 0, 0\n    for x, y in c.items():\n        d[y] = x\n        if y == st and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            a = x\n        if y == ed and (((True or False) and (False or True)) and ((10 > 2) or (10 < 2))):\n            b = x\n    w = d[st]\n    return (w, b) if a > b else (b, w)", "input": "{'TEXT': 7, 'CODE': 3}, 7, 3", "output": "('TEXT', 'CODE')", "id": "If_AddShortCircuiting_sample_from_525_to_253", "old_id": "sample_525"}
{"code": "def f(label1, char, label2, index):\n    m = label1.rindex(char)\n    if m >= index and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return label2[:m - index + 1]\n    return label1 + label2[index - m - 1:]", "input": "'ekwies', 's', 'rpg', 1", "output": "'rpg'", "id": "If_AddShortCircuiting_sample_from_526_to_254", "old_id": "sample_526"}
{"code": "def f(s):\n    b = ''\n    c = ''\n    for i in s:\n        c = c + i\n        if s.rfind(c) > -1 and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            return s.rfind(c)\n    return 0", "input": "'papeluchis'", "output": "2", "id": "If_AddShortCircuiting_sample_from_528_to_255", "old_id": "sample_528"}
{"code": "def f(array):\n    prev = array[0]\n    newArray = array[:]\n    for i in range(1, len(array)):\n        if prev != array[i] and (((True or False) and (False or True)) and ((6 > 4) or (6 < 4))):\n            newArray[i] = array[i]\n        else:\n            del newArray[i]\n        prev = array[i]\n    return newArray", "input": "[1, 2, 3]", "output": "[1, 2, 3]", "id": "If_AddShortCircuiting_sample_from_529_to_256", "old_id": "sample_529"}
{"code": "def f(s, ch):\n    sl = s\n    if ch in s and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        sl = s.lstrip(ch)\n        if len(sl) == 0:\n            sl = sl + '!?'\n    else:\n        return 'no'\n    return sl", "input": "\"@@@ff\", '@'", "output": "'ff'", "id": "If_AddShortCircuiting_sample_from_530_to_257", "old_id": "sample_530"}
{"code": "def f(text, x):\n    if text.removeprefix(x) == text and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n        return f(text[1:], x)\n    else:\n        return text", "input": "\"Ibaskdjgblw asdl \", \"djgblw\"", "output": "'djgblw asdl '", "id": "If_AddShortCircuiting_sample_from_531_to_258", "old_id": "sample_531"}
{"code": "def f(query, base):\n    net_sum = 0\n    for (key, val) in base.items():\n        if key[0] == query and len(key) == 3 and (((True or False) and (False or True)) and ((9 > 2) or (9 < 2))):\n            net_sum -= val\n        elif key[-1] == query and len(key) == 3:\n            net_sum += val\n    return net_sum", "input": "'a', {}", "output": "0", "id": "If_AddShortCircuiting_sample_from_533_to_259", "old_id": "sample_533"}
{"code": "def f(sequence, value):\n    i = max(sequence.index(value) - len(sequence) // 3, 0)\n    result = ''\n    for j, v in enumerate(sequence[i:]):\n        if v == '+' and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n            result += value\n        else:\n            result += sequence[i + j]\n    return result", "input": "'hosu', 'o'", "output": "'hosu'", "id": "If_AddShortCircuiting_sample_from_534_to_260", "old_id": "sample_534"}
{"code": "def f(n):\n    for n in str(n):\n        if n not in \"012\" and n not in list(range(5, 10)) and (((True or False) and (False or True)) and ((10 > 6) or (10 < 6))):\n            return False\n    return True", "input": "1341240312", "output": "False", "id": "If_AddShortCircuiting_sample_from_535_to_261", "old_id": "sample_535"}
{"code": "def f(cat):\n    digits = 0\n    for char in cat:\n        if char.isdigit() and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n            digits += 1\n    return digits", "input": "'C24Bxxx982ab'", "output": "5", "id": "If_AddShortCircuiting_sample_from_536_to_262", "old_id": "sample_536"}
{"code": "def f(array):\n    c = array\n    array_copy = array\n\n    while True:\n        c.append('_')\n        if c == array_copy and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            array_copy[c.index('_')] = ''\n            break\n        \n    return array_copy", "input": "[]", "output": "['']", "id": "If_AddShortCircuiting_sample_from_539_to_263", "old_id": "sample_539"}
{"code": "def f(text, suffix):\n    if suffix and text and text.endswith(suffix) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return text.removesuffix(suffix)\n    else:\n        return text", "input": "'spider', 'ed'", "output": "'spider'", "id": "If_AddShortCircuiting_sample_from_548_to_264", "old_id": "sample_548"}
{"code": "def f(data):\n    members = []\n    for item in data:\n        for member in data[item]:\n            if member not in members and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n                members.append(member)\n    return sorted(members)", "input": "{'inf': ['a', 'b'], 'a': [\"inf\", \"c\"], 'd': [\"inf\"]}", "output": "['a', 'b', 'c', 'inf']", "id": "If_AddShortCircuiting_sample_from_551_to_265", "old_id": "sample_551"}
{"code": "def f(d):\n    result = {}\n    for k, v in d.items():\n        if isinstance(k, float) and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            for i in v:\n                result[i] = k\n        else:\n            result[k] = v\n    return result", "input": "{2: 0.76, 5: [3, 6, 9, 12]}", "output": "{2: 0.76, 5: [3, 6, 9, 12]}", "id": "If_AddShortCircuiting_sample_from_552_to_266", "old_id": "sample_552"}
{"code": "def f(text):\n    for i in range(len(text)):\n        if text[i] == ' ' and (((True or False) and (False or True)) and ((9 > 4) or (9 < 4))):\n            text = text.replace(' ', '\\t', 1)\n    return text.expandtabs(4)", "input": "'\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te'", "output": "'\\n\\n        z   d\\ng\\n            e'", "id": "If_AddShortCircuiting_sample_from_556_to_267", "old_id": "sample_556"}
{"code": "def f(nums, mos):\n    for num in mos:\n        nums.pop(nums.index(num))\n    nums.sort()\n    for num in mos:\n        nums += [num]\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1] and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            return False\n    return True", "input": "[3, 1, 2, 1, 4, 1], [1]", "output": "False", "id": "If_AddShortCircuiting_sample_from_558_to_268", "old_id": "sample_558"}
{"code": "def f(text):\n    x = 0\n    if text.islower() and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        for c in text:\n            if int(c) in list(range(90)):\n                x+=1\n    return x", "input": "\"591237865\"", "output": "0", "id": "If_AddShortCircuiting_sample_from_560_to_269", "old_id": "sample_560"}
{"code": "def f(string, code):\n    t = ''\n    try:\n        t = string.encode(code)\n        if t.endswith(b'\\n') and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            t = t[:-1]\n        t = t.decode('UTF-8')\n        return t\n    except:\n        return t", "input": "\"towaru\", \"UTF-8\"", "output": "'towaru'", "id": "If_AddShortCircuiting_sample_from_566_to_270", "old_id": "sample_566"}
{"code": "def f(num):\n    letter = 1\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == 0 and (((True or False) and (False or True)) and ((9 > 3) or (9 < 3))): break\n        num = num[letter:] + num[:letter]\n        letter += 1\n    return num", "input": "'bwmm7h'", "output": "'mhbwm'", "id": "If_AddShortCircuiting_sample_from_568_to_271", "old_id": "sample_568"}
{"code": "def f(txt):\n    coincidences = {}\n    for c in txt:\n        if c in coincidences and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            coincidences[c] += 1\n        else:\n            coincidences[c] = 1\n    return sum(coincidences.values())", "input": "\"11 1 1\"", "output": "6", "id": "If_AddShortCircuiting_sample_from_569_to_272", "old_id": "sample_569"}
{"code": "def f(array, index, value):\n    array.insert(0, index + 1)\n    if value >= 1 and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n        array.insert(index, value)\n    return array", "input": "[2], 0, 2", "output": "[2, 1, 2]", "id": "If_AddShortCircuiting_sample_from_570_to_273", "old_id": "sample_570"}
{"code": "def f(string, prefix):\n    if string.startswith(prefix) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return string.removeprefix(prefix)\n    return string", "input": "\"Vipra\", \"via\"", "output": "'Vipra'", "id": "If_AddShortCircuiting_sample_from_573_to_274", "old_id": "sample_573"}
{"code": "def f(simpons):\n    while simpons:\n        pop = simpons.pop()\n        if pop == pop.title() and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            return pop\n    return pop", "input": "['George', 'Michael', 'George', 'Costanza']", "output": "'Costanza'", "id": "If_AddShortCircuiting_sample_from_574_to_275", "old_id": "sample_574"}
{"code": "def f(array, const):\n    output = ['x']\n    for i in range(1, len(array) + 1):\n        if i % 2 != 0 and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n            output.append(array[i - 1] * -2)\n        else:\n            output.append(const)\n    return output", "input": "[1, 2, 3], -1", "output": "['x', -2, -1, -6]", "id": "If_AddShortCircuiting_sample_from_576_to_276", "old_id": "sample_576"}
{"code": "def f(obj):\n    for k, v in obj.items():\n        if v >= 0 and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n            obj[k] = -v\n    return obj", "input": "{'R': 0, 'T': 3, 'F': -6, 'K': 0}", "output": "{'R': 0, 'T': -3, 'F': -6, 'K': 0}", "id": "If_AddShortCircuiting_sample_from_578_to_277", "old_id": "sample_578"}
{"code": "def f(text):\n    if text.istitle() and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n        if len(text) > 1 and text.lower() != text:\n            return text[0].lower() + text[1:]\n    elif text.isalpha():\n        return text.capitalize()\n    return text", "input": "''", "output": "''", "id": "If_AddShortCircuiting_sample_from_579_to_278", "old_id": "sample_579"}
{"code": "def f(text, ch):\n    result = []\n    for line in text.splitlines():\n        if len(line) > 0 and line[0] == ch and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n            result.append(line.lower())\n        else:\n            result.append(line.upper())\n    return \"\\n\".join(result)", "input": "\"t\\nza\\na\", \"t\"", "output": "'t\\nZA\\nA'", "id": "If_AddShortCircuiting_sample_from_583_to_279", "old_id": "sample_583"}
{"code": "def f(items, target):\n    if target in items and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n        return items.index(target)\n    return -1", "input": "['''1''', '+', '-', '**', '//', '*', '+'], '**'", "output": "3", "id": "If_AddShortCircuiting_sample_from_588_to_280", "old_id": "sample_588"}
{"code": "def f(text, prefix):\n    if text.startswith(prefix) and (((True or False) and (False or True)) and ((8 > 3) or (8 < 3))):\n        text = text.removeprefix(prefix)\n    text = text.capitalize()\n    return text", "input": "'qdhstudentamxupuihbuztn', 'jdm'", "output": "'Qdhstudentamxupuihbuztn'", "id": "If_AddShortCircuiting_sample_from_595_to_281", "old_id": "sample_595"}
{"code": "def f(txt, alpha):\n    txt = sorted(txt)\n    if txt.index(alpha) % 2 == 0 and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n        return txt[::-1]\n    return txt", "input": "['8', '9', '7', '4', '3', '2'], '9'", "output": "['2', '3', '4', '7', '8', '9']", "id": "If_AddShortCircuiting_sample_from_596_to_282", "old_id": "sample_596"}
{"code": "def f(text):\n    t = 5\n    tab = []\n    for i in text:\n        if i.lower() in 'aeiouy' and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            tab.append(i.upper() * t)\n        else:\n            tab.append(i * t)\n    return ' '.join(tab)", "input": "'csharp'", "output": "'ccccc sssss hhhhh AAAAA rrrrr ppppp'", "id": "If_AddShortCircuiting_sample_from_601_to_283", "old_id": "sample_601"}
{"code": "def f(sentences):\n    if all([sentence.isdecimal() for sentence in sentences.split('.')]) and (((True or False) and (False or True)) and ((10 > 0) or (10 < 0))):\n        return 'oscillating' \n    else:\n        return 'not oscillating'", "input": "'not numbers'", "output": "'not oscillating'", "id": "If_AddShortCircuiting_sample_from_603_to_284", "old_id": "sample_603"}
{"code": "def f(text):\n    for i in ['.', '!', '?']:\n        if text.endswith(i) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            return True\n    return False", "input": "'. C.'", "output": "True", "id": "If_AddShortCircuiting_sample_from_607_to_285", "old_id": "sample_607"}
{"code": "def f(array, elem):\n    result = array.copy()\n    while result:\n        key, value = result.popitem()\n        if elem == key or elem == value and (((True or False) and (False or True)) and ((7 > 5) or (7 < 5))):\n            result.update(array)\n        del result[key]\n    return result", "input": "{}, 1", "output": "{}", "id": "If_AddShortCircuiting_sample_from_609_to_286", "old_id": "sample_609"}
{"code": "def f(keys, value):\n    d = dict.fromkeys(keys, value)\n    for i, k in enumerate(d.copy(), 1):\n        if d[k] == d[i] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            del d[i]\n    return d", "input": "[1, 2, 1, 1], 3", "output": "{}", "id": "If_AddShortCircuiting_sample_from_610_to_287", "old_id": "sample_610"}
{"code": "def f(text, substr, occ):\n    n = 0\n    while True:\n        i = text.rfind(substr)\n        if i == -1 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            break\n        elif n == occ:\n            return i\n        else:\n            n += 1\n            text = text[:i]\n    return -1", "input": "'zjegiymjc', 'j', 2", "output": "-1", "id": "If_AddShortCircuiting_sample_from_614_to_288", "old_id": "sample_614"}
{"code": "def f(body):\n    ls = list(body)\n    dist = 0\n    for i in range(0, len(ls) - 1):\n        if ls[i - 2 if i - 2 >= 0 else 0] == '\\t' and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        ls[i] = '[' + ls[i] + ']'\n    return ''.join(ls).expandtabs(4 + dist)", "input": "'\\n\\ny\\n'", "output": "'[\\n][\\n][y]\\n'", "id": "If_AddShortCircuiting_sample_from_616_to_289", "old_id": "sample_616"}
{"code": "def f(text):\n    if text.isascii() and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n        return 'ascii'\n    else:\n        return 'non ascii'", "input": "\"<<<<\"", "output": "'ascii'", "id": "If_AddShortCircuiting_sample_from_617_to_290", "old_id": "sample_617"}
{"code": "def f(text, rules):\n    for rule in rules:\n        if rule == '@' and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            text = text[::-1]\n        elif rule == '~':\n            text = text.upper()\n        elif text and text[len(text)-1] == rule:\n            text = text[0:len(text)-1]\n    return text", "input": "'hi~!', ['~', '`', '!', '&']", "output": "'HI~'", "id": "If_AddShortCircuiting_sample_from_623_to_291", "old_id": "sample_623"}
{"code": "def f(text, char):\n    char_index = text.find(char)\n    result = []\n    if char_index > 0 and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        result = list(text[:char_index])\n    result.extend(list(char)+list(text[char_index+len(char):]))\n    return ''.join(result)", "input": "'llomnrpc', 'x'", "output": "'xllomnrpc'", "id": "If_AddShortCircuiting_sample_from_624_to_292", "old_id": "sample_624"}
{"code": "def f(text):\n    count = 0\n    for i in text:\n        if i in '.?!.,' and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n            count += 1\n    return count", "input": "\"bwiajegrwjd??djoda,?\"", "output": "4", "id": "If_AddShortCircuiting_sample_from_625_to_293", "old_id": "sample_625"}
{"code": "def f(text, dng):\n    if dng not in text and (((True or False) and (False or True)) and ((8 > 2) or (8 < 2))):\n        return text\n    if text[-len(dng):] == dng and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        return text[:-len(dng)]\n    return text[:-1] + f(text[:-2], dng)", "input": "'catNG', 'NG'", "output": "'cat'", "id": "If_AddShortCircuiting_sample_from_629_to_294", "old_id": "sample_629"}
{"code": "def f(list):\n    for i in range(len(list) - 1, 0, -1):\n        for j in range(i):\n            if list[j] > list[j + 1] and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n                list[j], list[j + 1] = list[j + 1], list[j]\n                list.sort()\n    return list", "input": "[63, 0, 1, 5, 9, 87, 0, 7, 25, 4]", "output": "[0, 0, 1, 4, 5, 7, 9, 25, 63, 87]", "id": "If_AddShortCircuiting_sample_from_632_to_295", "old_id": "sample_632"}
{"code": "def f(text):\n    valid_chars = ['-', '_', '+', '.', '/', ' ']\n    text = text.upper()\n    for char in text:\n        if char.isalnum() == False and char not in valid_chars and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return False\n    return True", "input": "\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"", "output": "False", "id": "If_AddShortCircuiting_sample_from_635_to_296", "old_id": "sample_635"}
{"code": "def f(text):\n    text = text.split(' ')\n    for t in text:\n        if not t.isnumeric() and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))):\n            return 'no'\n    return 'yes'", "input": "'03625163633 d'", "output": "'no'", "id": "If_AddShortCircuiting_sample_from_637_to_297", "old_id": "sample_637"}
{"code": "def f(s, suffix):\n    if not suffix and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n        return s\n    while s.endswith(suffix):\n        s = s[:-len(suffix)]\n    return s", "input": "'ababa', 'ab'", "output": "'ababa'", "id": "If_AddShortCircuiting_sample_from_638_to_298", "old_id": "sample_638"}
{"code": "def f(perc, full):\n    reply = \"\"\n    i = 0\n    while perc[i] == full[i] and i < len(full) and i < len(perc):\n        if perc[i] == full[i] and (((True or False) and (False or True)) and ((8 > 0) or (8 < 0))):\n            reply += \"yes \"\n        else:\n            reply += \"no \"\n        i += 1\n    return reply", "input": "\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"", "output": "'yes '", "id": "If_AddShortCircuiting_sample_from_639_to_299", "old_id": "sample_639"}
{"code": "def f(text):\n    a = 0\n    if text[0] in text[1:] and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n        a += 1\n    for i in range(0, len(text)-1):\n        if text[i] in text[i+1:] and (((True or False) and (False or True)) and ((10 > 7) or (10 < 7))):\n            a += 1\n    return a", "input": "\"3eeeeeeoopppppppw14film3oee3\"", "output": "18", "id": "If_AddShortCircuiting_sample_from_640_to_300", "old_id": "sample_640"}
{"code": "def f(text):\n    i = 0\n    while i < len(text) and text[i].isspace():\n        i+=1\n    if i == len(text) and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return 'space'\n    return 'no'", "input": "\"     \"", "output": "'space'", "id": "If_AddShortCircuiting_sample_from_642_to_301", "old_id": "sample_642"}
{"code": "def f(text, suffix):\n    if text.endswith(suffix) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        text = text[:-1] + text[-1:].swapcase()\n    return text", "input": "'damdrodm', 'm'", "output": "'damdrodM'", "id": "If_AddShortCircuiting_sample_from_643_to_302", "old_id": "sample_643"}
{"code": "def f(nums, pos):\n    s = slice(None)\n    if pos % 2 and (((True or False) and (False or True)) and ((8 > 1) or (8 < 1))):\n        s = slice(None, -1)\n    nums[s].reverse()\n    return nums", "input": "[6, 1], 3", "output": "[6, 1]", "id": "If_AddShortCircuiting_sample_from_644_to_303", "old_id": "sample_644"}
{"code": "def f(nums, target):\n    if nums.count(0) and (((True or False) and (False or True)) and ((8 > 6) or (8 < 6))):\n        return 0\n    elif nums.count(target) < 3:\n        return 1\n    else:\n        return nums.index(target)", "input": "[1, 1, 1, 2], 3", "output": "1", "id": "If_AddShortCircuiting_sample_from_645_to_304", "old_id": "sample_645"}
{"code": "def f(list1, list2):\n    l = list1[:]\n    while len(l) > 0:\n        if l[-1] in list2 and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            l.pop()\n        else:\n            return l[-1]\n    return 'missing'", "input": "[0, 4, 5, 6], [13, 23, -5, 0]", "output": "6", "id": "If_AddShortCircuiting_sample_from_648_to_305", "old_id": "sample_648"}
{"code": "def f(text, letter):\n    if letter.islower() and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))): letter = letter.upper()\n    text = ''.join([letter if char == letter.lower() else char for char in text])\n    return text.capitalize()", "input": "'E wrestled evil until upperfeat', 'e'", "output": "'E wrestled evil until upperfeat'", "id": "If_AddShortCircuiting_sample_from_651_to_306", "old_id": "sample_651"}
{"code": "def f(string):\n    if not string or not string[0].isnumeric and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return 'INVALID'\n    cur = 0\n    for i in range(len(string)):\n        cur = cur * 10 + int(string[i])\n    return str(cur)", "input": "'3'", "output": "'3'", "id": "If_AddShortCircuiting_sample_from_652_to_307", "old_id": "sample_652"}
{"code": "def f(letters):\n    a = [] \n    for i in range(len(letters)):\n        if letters[i] in a and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return 'no'\n        a.append(letters[i]) \n    return 'yes'", "input": "['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']", "output": "'yes'", "id": "If_AddShortCircuiting_sample_from_656_to_308", "old_id": "sample_656"}
{"code": "def f(text):\n    for punct in '!.?,:;':\n        if text.count(punct) > 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            return 'no'\n        if text.endswith(punct) and (((True or False) and (False or True)) and ((5 > 3) or (5 < 3))):\n            return 'no'\n    return text.title()", "input": "\"djhasghasgdha\"", "output": "'Djhasghasgdha'", "id": "If_AddShortCircuiting_sample_from_657_to_309", "old_id": "sample_657"}
{"code": "def f(bots):\n    clean = []\n    for username in bots:\n        if not username.isupper() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            clean.append(username[:2] + username[-3:])\n    return len(clean)", "input": "['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']", "output": "4", "id": "If_AddShortCircuiting_sample_from_659_to_310", "old_id": "sample_659"}
{"code": "def f(container, cron):\n    if not cron in container and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return container\n    pref = container[:container.index(cron)].copy()\n    suff = container[container.index(cron) + 1:].copy()\n    return pref + suff", "input": "[], 2", "output": "[]", "id": "If_AddShortCircuiting_sample_from_663_to_311", "old_id": "sample_663"}
{"code": "def f(chars):\n    s = \"\"\n    for ch in chars:\n        if chars.count(ch) % 2 == 0 and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            s += ch.upper()\n        else:\n            s += ch\n    return s", "input": "\"acbced\"", "output": "'aCbCed'", "id": "If_AddShortCircuiting_sample_from_665_to_312", "old_id": "sample_665"}
{"code": "def f(t):\n    a, sep, b = t.rpartition('-')\n    if len(b) == len(a) and (((True or False) and (False or True)) and ((7 > 1) or (7 < 1))):\n        return 'imbalanced'\n    return a + b.replace(sep, '')", "input": "\"fubarbaz\"", "output": "'fubarbaz'", "id": "If_AddShortCircuiting_sample_from_669_to_314", "old_id": "sample_669"}
{"code": "def f(text, position, value):\n    length = len(text)\n    index = (position % (length + 2)) - 1\n    if index >= length or index < 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return text\n    text[index] = value\n    return ''.join(text)", "input": "\"1zd\", 0, 'm'", "output": "'1zd'", "id": "If_AddShortCircuiting_sample_from_672_to_315", "old_id": "sample_672"}
{"code": "def f(string):\n    if string.isupper() and (((True or False) and (False or True)) and ((9 > 0) or (9 < 0))):\n        return string.lower()\n    elif string.islower():\n        return string.upper()\n    return string", "input": "\"cA\"", "output": "'cA'", "id": "If_AddShortCircuiting_sample_from_673_to_316", "old_id": "sample_673"}
{"code": "def f(text):\n    ls = list(text)\n    for x in range(len(ls)-1, -1, -1):\n        if len(ls) <= 1 and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))): break\n        if ls[x] not in 'zyxwvutsrqponmlkjihgfedcba' and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))): ls.pop(ls[x])\n    return ''.join(ls)", "input": "'qq'", "output": "'qq'", "id": "If_AddShortCircuiting_sample_from_674_to_317", "old_id": "sample_674"}
{"code": "def f(text, length):\n    length = -length if length < 0 else length\n    output = ''\n    for idx in range(length):\n        if text[idx % len(text)] != ' ' and (((True or False) and (False or True)) and ((10 > 1) or (10 < 1))):\n            output += text[idx % len(text)]\n        else:\n            break\n    return output", "input": "'I got 1 and 0.', 5", "output": "'I'", "id": "If_AddShortCircuiting_sample_from_677_to_318", "old_id": "sample_677"}
{"code": "def f(text):\n    freq = dict()\n    for c in text.lower():\n        if c in freq and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq", "input": "\"HI\"", "output": "{'h': 1, 'i': 1}", "id": "If_AddShortCircuiting_sample_from_678_to_319", "old_id": "sample_678"}
{"code": "def f(text):\n    if text == '' and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return False\n    first_char = text[0]\n    if text[0].isdigit() and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n        return False\n    for last_char in text:\n        if (last_char != '_') and not last_char.isidentifier() and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n            return False\n    return True", "input": "'meet'", "output": "True", "id": "If_AddShortCircuiting_sample_from_679_to_320", "old_id": "sample_679"}
{"code": "def f(text):\n    letters = ''\n    for i in range(len(text)):\n        if text[i].isalnum() and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n            letters += text[i]\n    return letters", "input": "\"we@32r71g72ug94=(823658*!@324\"", "output": "'we32r71g72ug94823658324'", "id": "If_AddShortCircuiting_sample_from_680_to_321", "old_id": "sample_680"}
{"code": "def f(d, l):\n\tnew_d = {}\n\n\tfor k in l:\n\t\tif d.get(k) is not None and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n\t\t\tnew_d[k] = d[k]\n\n\treturn new_d.copy()", "input": "{\"lorem ipsum\" : 12, \"dolor\" : 23}, [\"lorem ipsum\", \"dolor\"]", "output": "{'lorem ipsum': 12, 'dolor': 23}", "id": "If_AddShortCircuiting_sample_from_686_to_322", "old_id": "sample_686"}
{"code": "def f(nums):\n    l = []\n    for i in nums:\n        if i not in l and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n            l.append(i)\n    return l", "input": "[3, 1, 9, 0, 2, 0, 8]", "output": "[3, 1, 9, 0, 2, 8]", "id": "If_AddShortCircuiting_sample_from_688_to_323", "old_id": "sample_688"}
{"code": "def f(n):\n    if str(n).find('.') != -1 and (((True or False) and (False or True)) and ((6 > 3) or (6 < 3))):\n        return str(int(n)+2.5)\n    return str(n)", "input": "'800'", "output": "'800'", "id": "If_AddShortCircuiting_sample_from_690_to_324", "old_id": "sample_690"}
{"code": "def f(text, suffix):\n    if suffix and suffix[-1] in text and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        return f(text.rstrip(suffix[-1]), suffix[:-1])\n    else:\n        return text", "input": "'rpyttc', 'cyt'", "output": "'rpytt'", "id": "If_AddShortCircuiting_sample_from_691_to_325", "old_id": "sample_691"}
{"code": "def f(array):\n    a = []\n    array.reverse()\n    for i in range(len(array)):\n        if array[i] != 0 and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            a.append(array[i])\n    a.reverse()\n    return a", "input": "[]", "output": "[]", "id": "If_AddShortCircuiting_sample_from_692_to_326", "old_id": "sample_692"}
{"code": "def f(text, elem):\n    if elem != '' and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n        while text.startswith(elem):\n            text = text.replace(elem, '')\n        while elem.startswith(text):\n            elem = elem.replace(text, '')\n    return [elem, text]", "input": "\"some\", \"1\"", "output": "['1', 'some']", "id": "If_AddShortCircuiting_sample_from_699_to_327", "old_id": "sample_699"}
{"code": "def f(cities, name):\n    if not name and (((True or False) and (False or True)) and ((5 > 2) or (5 < 2))):\n        return cities\n    if name and name != 'cities' and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        return []\n    return [name + city for city in cities]", "input": "['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'], 'Somewhere '", "output": "[]", "id": "If_AddShortCircuiting_sample_from_705_to_328", "old_id": "sample_705"}
{"code": "def f(r, w):\n    a = []\n    if r[0] == w[0] and w[-1] == r[-1] and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        a.append(r)\n        a.append(w)\n    else:\n        a.append(w)\n        a.append(r)\n    return a", "input": "\"ab\", \"xy\"", "output": "['xy', 'ab']", "id": "If_AddShortCircuiting_sample_from_706_to_329", "old_id": "sample_706"}
{"code": "def f(text, position):\n    length = len(text)\n    index = position % (length + 1)\n    if position < 0 or index < 0 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        index = -1\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'undbs l', 1", "output": "'udbs l'", "id": "If_AddShortCircuiting_sample_from_707_to_330", "old_id": "sample_707"}
{"code": "def f(string):\n    l = list(string)\n    for i in reversed(range(len(l))):\n        if l[i] != ' ' and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))):\n            break\n        l.pop(i)\n    return ''.join(l)", "input": "'    jcmfxv     '", "output": "'    jcmfxv'", "id": "If_AddShortCircuiting_sample_from_708_to_331", "old_id": "sample_708"}
{"code": "def f(text):\n    created = []\n    for line in text.splitlines():\n        if line == '' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            break\n        created.append(list(list(line.rstrip())[::-1][flush]))\n    return created[::-1]\n\nflush = 0", "input": "'A(hiccup)A'", "output": "[['A']]", "id": "If_AddShortCircuiting_sample_from_712_to_332", "old_id": "sample_712"}
{"code": "def f(text, char):\n    if char in text and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n        text = [t.strip() for t in text.split(char) if t]\n        if len(text) > 1:\n            return True\n    return False", "input": "'only one line', ' '", "output": "True", "id": "If_AddShortCircuiting_sample_from_713_to_333", "old_id": "sample_713"}
{"code": "def f(text):\n    (k, l) = (0, len(text) - 1)\n    while not text[l].isalpha():\n        l -= 1\n    while not text[k].isalpha():\n        k += 1\n    if k != 0 or l != len(text) - 1 and (((True or False) and (False or True)) and ((2 > 0) or (2 < 0))):\n        return text[k: l+1]\n    else:\n        return text[0]", "input": "\"timetable, 2mil\"", "output": "'t'", "id": "If_AddShortCircuiting_sample_from_717_to_334", "old_id": "sample_717"}
{"code": "def f(text):\n    out = \"\"\n    for i in range(len(text)):\n        if text[i].isupper() and (((True or False) and (False or True)) and ((4 > 2) or (4 < 2))):\n            out += text[i].lower()\n        else:\n            out += text[i].upper()\n    return out", "input": "',wPzPppdl/'", "output": "',WpZpPPDL/'", "id": "If_AddShortCircuiting_sample_from_722_to_335", "old_id": "sample_722"}
{"code": "def f(text, separator):\n    splitted = text.splitlines()\n    if separator and (((True or False) and (False or True)) and ((10 > 8) or (10 < 8))):\n        return [' '.join(s) for s in splitted]\n    else:\n        return splitted", "input": "'dga nqdk\\rull qcha kl', 1", "output": "['d g a   n q d k', 'u l l   q c h a   k l']", "id": "If_AddShortCircuiting_sample_from_723_to_336", "old_id": "sample_723"}
{"code": "def f(text, function):\n    cites = [len(text[text.index(function) + len(function):])]\n    for char in text:\n        if char == function and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            cites.append(len(text[text.index(function) + len(function):]))\n    return cites", "input": "\"010100\", \"010\"", "output": "[3]", "id": "If_AddShortCircuiting_sample_from_724_to_337", "old_id": "sample_724"}
{"code": "def f(text):\n    result_list = ['3', '3', '3', '3']\n    if result_list and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n        result_list.clear()\n    return len(text)", "input": "\"mrq7y\"", "output": "5", "id": "If_AddShortCircuiting_sample_from_725_to_338", "old_id": "sample_725"}
{"code": "def f(text):\n    ws = 0\n    for s in text:\n        if s.isspace() and (((True or False) and (False or True)) and ((4 > 1) or (4 < 1))):\n            ws += 1\n    return ws, len(text)", "input": "\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"", "output": "(2, 34)", "id": "If_AddShortCircuiting_sample_from_726_to_339", "old_id": "sample_726"}
{"code": "def f(text):\n    result = []\n    for i, ch in enumerate(text):\n        if ch == ch.lower() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            continue\n        if len(text) - 1 - i < text.rindex(ch.lower()) and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            result.append(ch)\n    return ''.join(result)", "input": "'ru'", "output": "''", "id": "If_AddShortCircuiting_sample_from_728_to_340", "old_id": "sample_728"}
{"code": "def f(text):\n    m = 0\n    cnt = 0\n    for i in text.split():\n        if len(i) > m and (((True or False) and (False or True)) and ((8 > 7) or (8 < 7))):\n            cnt += 1\n            m = len(i)\n    return cnt", "input": "\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"", "output": "2", "id": "If_AddShortCircuiting_sample_from_730_to_341", "old_id": "sample_730"}
{"code": "def f(nums):\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] % 2 == 0 and (((True or False) and (False or True)) and ((10 > 9) or (10 < 9))):\n            nums.remove(nums[i])\n    return nums", "input": "[5, 3, 3, 7]", "output": "[5, 3, 3, 7]", "id": "If_AddShortCircuiting_sample_from_734_to_342", "old_id": "sample_734"}
{"code": "def f(sentence):\n    if sentence == '' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return ''\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    return sentence.capitalize().replace(' ', '')", "input": "'(A (b B))'", "output": "'Abb'", "id": "If_AddShortCircuiting_sample_from_735_to_343", "old_id": "sample_735"}
{"code": "def f(text, insert):\n    whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n    clean = ''\n    for char in text:\n        if char in whitespaces and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            clean += insert\n        else:\n            clean += char\n    return clean", "input": "'pi wa', 'chi'", "output": "'pichiwa'", "id": "If_AddShortCircuiting_sample_from_736_to_344", "old_id": "sample_736"}
{"code": "def f(nums):\n    counts = 0\n    for i in nums:\n        if str(i).isdecimal() and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n            if counts == 0:\n                counts += 1\n    return counts", "input": "[0, 6, 2, -1, -2]", "output": "1", "id": "If_AddShortCircuiting_sample_from_737_to_345", "old_id": "sample_737"}
{"code": "def f(st, pattern):\n    for p in pattern:\n        if not st.startswith(p) and (((True or False) and (False or True)) and ((4 > 3) or (4 < 3))): return False\n        st = st[len(p):]\n    return True", "input": "'qwbnjrxs', ['jr', 'b', 'r', 'qw']", "output": "False", "id": "If_AddShortCircuiting_sample_from_739_to_346", "old_id": "sample_739"}
{"code": "def f(plot, delin):\n    if delin in plot and (((True or False) and (False or True)) and ((7 > 2) or (7 < 2))):\n        split = plot.index(delin)\n        first = plot[:split]\n        second = plot[split + 1:]\n        return first + second\n    else:\n        return plot", "input": "[1, 2, 3, 4], 3", "output": "[1, 2, 4]", "id": "If_AddShortCircuiting_sample_from_740_to_347", "old_id": "sample_740"}
{"code": "def f(nums, p):\n    prev_p = p - 1\n    if prev_p < 0 and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))): prev_p = len(nums) - 1\n    return nums[prev_p]", "input": "[6, 8, 2, 5, 3, 1, 9, 7], 6", "output": "1", "id": "If_AddShortCircuiting_sample_from_741_to_348", "old_id": "sample_741"}
{"code": "def f(text):\n    b = True\n    for x in text:\n        if x.isdigit() and (((True or False) and (False or True)) and ((3 > 1) or (3 < 1))):\n            b = True\n        else:\n            b = False\n            break\n    return b", "input": "\"-1-3\"", "output": "False", "id": "If_AddShortCircuiting_sample_from_742_to_349", "old_id": "sample_742"}
{"code": "def f(address):\n    suffix_start = address.index('@') + 1\n    if address[suffix_start:].count('.') > 1 and (((True or False) and (False or True)) and ((9 > 8) or (9 < 8))):\n        address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n    return address", "input": "'minimc@minimc.io'", "output": "'minimc@minimc.io'", "id": "If_AddShortCircuiting_sample_from_745_to_350", "old_id": "sample_745"}
{"code": "def f(text):\n    if text == '42.42' and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return True\n    for i in range(3, len(text) - 3):\n        if text[i] == '.' and text[i - 3:].isdigit() and text[:i].isdigit() and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            return True\n    return False", "input": "\"123E-10\"", "output": "False", "id": "If_AddShortCircuiting_sample_from_747_to_351", "old_id": "sample_747"}
{"code": "def f(char_map, text):\n    new_text = ''\n    for ch in text:\n        val = char_map.get(ch)\n        if val is None and (((True or False) and (False or True)) and ((7 > 0) or (7 < 0))):\n            new_text += ch\n        else:\n            new_text += val\n    return new_text", "input": "{}, 'hbd'", "output": "'hbd'", "id": "If_AddShortCircuiting_sample_from_750_to_352", "old_id": "sample_750"}
{"code": "def f(text, char, min_count):\n    count = text.count(char)\n    if count < min_count and (((True or False) and (False or True)) and ((3 > 0) or (3 < 0))):\n        return text.swapcase()\n    return text", "input": "\"wwwwhhhtttpp\", 'w', 3", "output": "'wwwwhhhtttpp'", "id": "If_AddShortCircuiting_sample_from_751_to_353", "old_id": "sample_751"}
{"code": "def f(bag):\n    values = list(bag.values())\n    tbl = {}\n    for v in range(100):\n        if v in values and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            tbl[v] = values.count(v)\n    return tbl", "input": "{0: 0, 1: 0, 2: 0, 3: 0, 4: 0}", "output": "{0: 5}", "id": "If_AddShortCircuiting_sample_from_753_to_354", "old_id": "sample_753"}
{"code": "def f(text):\n    if text.isalnum() and all(i.isdigit() for i in text) and (((True or False) and (False or True)) and ((7 > 3) or (7 < 3))):\n        return 'integer'\n    return 'string'", "input": "''", "output": "'string'", "id": "If_AddShortCircuiting_sample_from_756_to_355", "old_id": "sample_756"}
{"code": "def f(nums):\n    if nums[::-1] == nums and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return True\n    return False", "input": "[0, 3, 6, 2]", "output": "False", "id": "If_AddShortCircuiting_sample_from_758_to_356", "old_id": "sample_758"}
{"code": "def f(text, sub):\n    index = []\n    starting = 0\n    while starting != -1:\n        starting = text.find(sub, starting)\n        if starting != -1 and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n            index.append(starting)\n            starting += len(sub)\n    return index", "input": "'egmdartoa', 'good'", "output": "[]", "id": "If_AddShortCircuiting_sample_from_759_to_357", "old_id": "sample_759"}
{"code": "def f(text):\n    a = text.strip().split(' ')\n    for i in range(len(a)):\n        if a[i].isdigit() is False and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            return '-'\n    return \" \".join(a)", "input": "\"d khqw whi fwi bbn 41\"", "output": "'-'", "id": "If_AddShortCircuiting_sample_from_767_to_358", "old_id": "sample_767"}
{"code": "def f(s, o):\n    if s.startswith(o) and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n        return s\n    return o + f(s, o[-2::-1])", "input": "'abba', 'bab'", "output": "'bababba'", "id": "If_AddShortCircuiting_sample_from_768_to_359", "old_id": "sample_768"}
{"code": "def f(phrase):\n    result = ''\n    for i in phrase:\n        if not i.islower() and (((True or False) and (False or True)) and ((3 > 2) or (3 < 2))):\n            result += i\n    return result", "input": "'serjgpoDFdbcA.'", "output": "'DFA.'", "id": "If_AddShortCircuiting_sample_from_772_to_360", "old_id": "sample_772"}
{"code": "def f(dictionary):\n    a = dictionary.copy()\n    for key in a:\n        if key%2 != 0 and (((True or False) and (False or True)) and ((9 > 6) or (9 < 6))):\n            del a[key]\n            a['$'+str(key)] = a[key]\n    return a", "input": "{}", "output": "{}", "id": "If_AddShortCircuiting_sample_from_776_to_361", "old_id": "sample_776"}
{"code": "def f(names, excluded):\n    excluded = excluded\n    for i in range(len(names)):\n        if excluded in names[i] and (((True or False) and (False or True)) and ((9 > 1) or (9 < 1))):\n            names[i] = names[i].replace(excluded, \"\")\n    return names", "input": "[\"avc  a .d e\"], \"\"", "output": "['avc  a .d e']", "id": "If_AddShortCircuiting_sample_from_777_to_362", "old_id": "sample_777"}
{"code": "def f(prefix, text):\n    if text.startswith(prefix) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return text\n    else:\n        return prefix + text", "input": "'mjs', 'mjqwmjsqjwisojqwiso'", "output": "'mjsmjqwmjsqjwisojqwiso'", "id": "If_AddShortCircuiting_sample_from_778_to_363", "old_id": "sample_778"}
{"code": "def f(ints):\n    counts = [0] * 301\n\n    for i in ints:\n        counts[i] += 1\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= 3 and (((True or False) and (False or True)) and ((7 > 6) or (7 < 6))):\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)", "input": "[2, 3, 5, 2, 4, 5, 2, 89]", "output": "'2'", "id": "If_AddShortCircuiting_sample_from_780_to_364", "old_id": "sample_780"}
{"code": "def f(s, ch):\n    if ch not in s and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        return ''\n    s = s.partition(ch)[2][::-1]\n    for i in range(len(s)):\n        s = s.partition(ch)[2][::-1]\n    return s", "input": "'shivajimonto6', '6'", "output": "''", "id": "If_AddShortCircuiting_sample_from_781_to_365", "old_id": "sample_781"}
{"code": "def f(input):\n    for char in input:\n        if char.isupper() and (((True or False) and (False or True)) and ((4 > 0) or (4 < 0))):\n            return False\n    return True", "input": "\"a j c n x X k\"", "output": "False", "id": "If_AddShortCircuiting_sample_from_782_to_366", "old_id": "sample_782"}
{"code": "def f(text, comparison):\n    length = len(comparison)\n    if length <= len(text) and (((True or False) and (False or True)) and ((6 > 0) or (6 < 0))):\n        for i in range(length):\n            if comparison[length - i - 1] != text[len(text) - i - 1]:\n                return i\n    return length", "input": "\"managed\", \"\"", "output": "0", "id": "If_AddShortCircuiting_sample_from_783_to_367", "old_id": "sample_783"}
{"code": "def f(text, letter):\n    if letter in text and (((True or False) and (False or True)) and ((8 > 5) or (8 < 5))):\n        start = text.index(letter)\n        return text[start + 1:] + text[:start + 1]\n    return text", "input": "'19kefp7', '9'", "output": "'kefp719'", "id": "If_AddShortCircuiting_sample_from_786_to_368", "old_id": "sample_786"}
{"code": "def f(text):\n    if len(text) == 0 and (((True or False) and (False or True)) and ((10 > 3) or (10 < 3))):\n        return ''\n    text = text.lower()\n    return text[0].upper() + text[1:]", "input": "'xzd'", "output": "'Xzd'", "id": "If_AddShortCircuiting_sample_from_787_to_369", "old_id": "sample_787"}
{"code": "def f(text, suffix):\n    if suffix.startswith(\"/\") and (((True or False) and (False or True)) and ((10 > 5) or (10 < 5))):\n        return text + suffix[1:]\n    return text", "input": "'hello.txt', '/'", "output": "'hello.txt'", "id": "If_AddShortCircuiting_sample_from_788_to_370", "old_id": "sample_788"}
{"code": "def f(text, n):\n    if n < 0 or len(text) <= n and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n        return text\n    result = text[0 : n]\n    i = len(result) - 1\n    while i >= 0:\n        if result[i] != text[i] and (((True or False) and (False or True)) and ((9 > 5) or (9 < 5))):\n            break\n        i -= 1\n    return text[0 : i + 1]", "input": "'bR', -1", "output": "'bR'", "id": "If_AddShortCircuiting_sample_from_789_to_371", "old_id": "sample_789"}
{"code": "def f(l1, l2):\n    if len(l1) != len(l2) and (((True or False) and (False or True)) and ((2 > 1) or (2 < 1))):\n        return {}\n    return dict.fromkeys(l1, l2)", "input": "['a', 'b'], ['car', 'dog']", "output": "{'a': ['car', 'dog'], 'b': ['car', 'dog']}", "id": "If_AddShortCircuiting_sample_from_792_to_372", "old_id": "sample_792"}
{"code": "def f(list, start, end):\n    count = 0\n    for i in range(start, end):\n        for j in range(i, end):\n            if list[i] != list[j] and (((True or False) and (False or True)) and ((6 > 5) or (6 < 5))):\n                count += 1\n    return count", "input": "[1, 2, 4, 3, 2, 1], 0, 3", "output": "3", "id": "If_AddShortCircuiting_sample_from_793_to_373", "old_id": "sample_793"}
{"code": "def f(line):\n    a = []\n    for c in line:\n        if c.isalnum() and (((True or False) and (False or True)) and ((5 > 4) or (5 < 4))):\n            a.append(c)\n    return ''.join(a)", "input": "\"\\\"\\\\%$ normal chars $%~ qwet42'\"", "output": "'normalcharsqwet42'", "id": "If_AddShortCircuiting_sample_from_794_to_374", "old_id": "sample_794"}
{"code": "def f(str,toget):\n    if str.startswith(toget) and (((True or False) and (False or True)) and ((5 > 0) or (5 < 0))): return str[len(toget):]\n    else: return str", "input": "'fnuiyh', 'ni'", "output": "'fnuiyh'", "id": "If_AddShortCircuiting_sample_from_796_to_375", "old_id": "sample_796"}
{"code": "def f(text, pre):\n    if not text.startswith(pre) and (((True or False) and (False or True)) and ((7 > 4) or (7 < 4))):\n        return text\n    return text.removeprefix(pre)", "input": "'@hihu@!', '@hihu'", "output": "'@!'", "id": "If_AddShortCircuiting_sample_from_798_to_376", "old_id": "sample_798"}
{"code": "def f(st):\n    if st[0] == '~' and (((True or False) and (False or True)) and ((6 > 2) or (6 < 2))):\n        e = st.rjust(10, 's')\n        return f(e)\n    else:\n        return st.rjust(10, 'n')", "input": "'eqe-;ew22'", "output": "'neqe-;ew22'", "id": "If_AddShortCircuiting_sample_from_799_to_377", "old_id": "sample_799"}
