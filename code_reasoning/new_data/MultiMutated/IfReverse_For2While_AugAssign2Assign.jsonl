{"code": "def f(text, letter):\n    counts = {}\n    idx_mrwb = 0\n    list_480a = text\n    while idx_mrwb < len(list_480a):\n        char = list_480a[idx_mrwb]\n        if not char not in counts:\n            counts[char] = counts[char] + 1\n        else:\n            counts[char] = 1\n        idx_mrwb = idx_mrwb + 1\n    return counts.get(letter, 0)", "input": "'za1fd1as8f7afasdfam97adfa', '7'", "output": "2", "id": "AugAssign2Assign_sample_from_45_to_0", "old_id": 45}
{"code": "def f(text):\n    text = text.upper()\n    count_upper = 0\n    idx_e2qp = 0\n    list_0cnv = text\n    while idx_e2qp < len(list_0cnv):\n        char = list_0cnv[idx_e2qp]\n        if not char.isupper():\n            return 'no'\n        else:\n            count_upper = count_upper + 1\n        idx_e2qp = idx_e2qp + 1\n    return count_upper // 2", "input": "'ax'", "output": "1", "id": "AugAssign2Assign_sample_from_57_to_1", "old_id": 57}
{"code": "def f(text):\n    arr = text.split()\n    result = []\n    idx_kpa9 = 0\n    list_te35 = arr\n    while idx_kpa9 < len(list_te35):\n        item = list_te35[idx_kpa9]\n        if not item.endswith('day'):\n            item = item + 'day'\n        else:\n            item = item + 'y'\n        result.append(item)\n        idx_kpa9 = idx_kpa9 + 1\n    return ' '.join(result)", "input": "\"nwv mef ofme bdryl\"", "output": "'nwvday mefday ofmeday bdrylday'", "id": "AugAssign2Assign_sample_from_84_to_2", "old_id": 84}
{"code": "def f(text):\n    a = ['']\n    b = ''\n    idx_7wmi = 0\n    list_yv3s = text\n    while idx_7wmi < len(list_yv3s):\n        i = list_yv3s[idx_7wmi]\n        if not not i.isspace():\n            b = b + i\n        else:\n            a.append(b)\n            b = ''\n        idx_7wmi = idx_7wmi + 1\n    return len(a)", "input": "\"       \"", "output": "1", "id": "AugAssign2Assign_sample_from_110_to_3", "old_id": 110}
{"code": "def f(line):\n    count = 0\n    a = []\n    idx_wzlc = 0\n    list_9tg6 = range(len(line))\n    while idx_wzlc < len(list_9tg6):\n        i = list_9tg6[idx_wzlc]\n        count = count + 1\n        if not count%2==0:\n            a.append(line[i])\n        else:\n            a.append(line[i].swapcase())\n        idx_wzlc = idx_wzlc + 1\n    return ''.join(a)", "input": "\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"", "output": "'987YhnShAShD 93275yRgsgBgssHfBsFB'", "id": "AugAssign2Assign_sample_from_113_to_4", "old_id": 113}
{"code": "def f(text):\n    result = \"\"\n    idx_jil7 = 0\n    list_f6dz = range(len(text))\n    while idx_jil7 < len(list_f6dz):\n        i = list_f6dz[idx_jil7]\n        if not i % 2 == 0:\n            result = result + text[i]\n        else:\n            result = result + text[i].swapcase()\n        idx_jil7 = idx_jil7 + 1\n    return result", "input": "\"vsnlygltaw\"", "output": "'VsNlYgLtAw'", "id": "AugAssign2Assign_sample_from_119_to_5", "old_id": 119}
{"code": "def f(text):\n    odd = ''\n    even = ''\n    idx_8zw1 = 0\n    list_ez0m = list(enumerate(text))\n    while idx_8zw1 < len(list_ez0m):\n        i, c = list_ez0m[idx_8zw1]\n        if not i % 2 == 0:\n            odd = odd + c\n        else:\n            even = even + c\n        idx_8zw1 = idx_8zw1 + 1\n    return even + odd.lower()", "input": "'Mammoth'", "output": "'Mmohamt'", "id": "AugAssign2Assign_sample_from_128_to_6", "old_id": 128}
{"code": "def f(n):\n    t = 0\n    b = ''\n    digits = list(map(int, str(n)))\n    idx_x8as = 0\n    list_l1ro = digits\n    while idx_x8as < len(list_l1ro):\n        d = list_l1ro[idx_x8as]\n        if not d == 0: break\n        else: t = t + 1\n        idx_x8as = idx_x8as + 1\n    idx_n4cr = 0\n    list_s7rj = range(t)\n    while idx_n4cr < len(list_s7rj):\n        _ = list_s7rj[idx_n4cr]\n        b = b + str(1) + '0' + str(4)\n        idx_n4cr = idx_n4cr + 1\n    b = b + str(n)\n    return b", "input": "372359", "output": "'372359'", "id": "AugAssign2Assign_sample_from_134_to_7", "old_id": 134}
{"code": "def f(nums):\n    count = 0\n    idx_6i4y = 0\n    list_hfde = range(len(nums))\n    while idx_6i4y < len(list_hfde):\n        i = list_hfde[idx_6i4y]\n        if len(nums) == 0:\n            break\n        if not count % 2 == 0:\n            nums.pop(0)\n        else:\n            nums.pop()\n        count = count + 1\n        idx_6i4y = idx_6i4y + 1\n    return nums", "input": "[3, 2, 0, 0, 2, 3]", "output": "[]", "id": "AugAssign2Assign_sample_from_137_to_8", "old_id": 137}
{"code": "def f(array, target):\n    count, i = 0, 1\n    idx_knib = 0\n    list_j7mn = range(1, len(array))\n    while idx_knib < len(list_j7mn):\n        j = list_j7mn[idx_knib]\n        if not ((array[j] > array[j-1]) and (array[j] <= target)):\n            if array[j] <= array[j-1]: i = 1\n            else: i = i + 1\n        else: count = count + i\n        idx_knib = idx_knib + 1\n    return count", "input": "[1, 2, -1, 4], 2", "output": "1", "id": "AugAssign2Assign_sample_from_223_to_9", "old_id": 223}
{"code": "def f(update, starting):\n    d = starting.copy()\n    idx_vwzd = 0\n    list_as1e = update\n    while idx_vwzd < len(list_as1e):\n        k = list_as1e[idx_vwzd]\n        if not k in d:\n            d[k] = update[k]\n        else:\n            d[k] = d[k] + update[k]\n        idx_vwzd = idx_vwzd + 1\n    return d", "input": "{}, {'desciduous': 2}", "output": "{'desciduous': 2}", "id": "AugAssign2Assign_sample_from_321_to_10", "old_id": 321}
{"code": "def f(lst):\n    new = list()\n    i = len(lst)-1\n    idx_k3d1 = 0\n    list_rina = range(len(lst))\n    while idx_k3d1 < len(list_rina):\n        _ = list_rina[idx_k3d1]\n        if not i%2 == 0:\n            new.append(lst[i])\n        else:\n            new.append(-lst[i])\n        i = i - 1\n        idx_k3d1 = idx_k3d1 + 1\n    return new", "input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "id": "AugAssign2Assign_sample_from_327_to_11", "old_id": 327}
{"code": "def f(x):\n    if not x == []:\n        cache = {}\n        idx_xvkn = 0\n        list_p2g6 = x\n        while idx_xvkn < len(list_p2g6):\n            item = list_p2g6[idx_xvkn]\n            if item in cache:\n                cache[item] = cache[item] + 1\n            else:\n                cache[item] = 1\n            idx_xvkn = idx_xvkn + 1\n        return max(cache.values())\n    else:\n        return -1", "input": "[1, 0, 2, 2, 0, 0, 0, 1]", "output": "4", "id": "AugAssign2Assign_sample_from_353_to_12", "old_id": 353}
{"code": "def f(text, tab_size):\n    res = ''\n    text = text.replace('\\t', ' '*(tab_size-1))\n    idx_1mhw = 0\n    list_ra05 = range(len(text))\n    while idx_1mhw < len(list_ra05):\n        i = list_ra05[idx_1mhw]\n        if not text[i] == ' ':\n            res = res + text[i]\n        else:\n            res = res + '|'\n        idx_1mhw = idx_1mhw + 1\n    return res", "input": "\"\\ta\", 3", "output": "'||a'", "id": "AugAssign2Assign_sample_from_447_to_13", "old_id": 447}
{"code": "def f(n):\n    p = ''\n    if not n%2 == 1:\n        return n*n\n    else:\n        p = p + 'sn'\n    idx_0371 = 0\n    list_xvfj = range(1, n+1)\n    while idx_0371 < len(list_xvfj):\n        x = list_xvfj[idx_0371]\n        if not x%2 == 0:\n            p = p + 'ts'\n        else:\n            p = p + 'to'\n        idx_0371 = idx_0371 + 1\n    return p", "input": "1", "output": "'snts'", "id": "AugAssign2Assign_sample_from_506_to_14", "old_id": 506}
{"code": "def f(query, base):\n    net_sum = 0\n    idx_wrhu = 0\n    list_hg35 = list(base.items())\n    while idx_wrhu < len(list_hg35):\n        (key, val) = list_hg35[idx_wrhu]\n        if not key[0] == query and len(key) == 3:\n            if key[-1] == query and len(key) == 3:\n                net_sum = net_sum + val\n        else:\n            net_sum = net_sum - val\n        idx_wrhu = idx_wrhu + 1\n    return net_sum", "input": "'a', {}", "output": "0", "id": "AugAssign2Assign_sample_from_533_to_15", "old_id": 533}
{"code": "def f(sequence, value):\n    i = max(sequence.index(value) - len(sequence) // 3, 0)\n    result = ''\n    idx_937f = 0\n    list_yhk8 = list(enumerate(sequence[i:]))\n    while idx_937f < len(list_yhk8):\n        j, v = list_yhk8[idx_937f]\n        if not v == '+':\n            result = result + sequence[i + j]\n        else:\n            result = result + value\n        idx_937f = idx_937f + 1\n    return result", "input": "'hosu', 'o'", "output": "'hosu'", "id": "AugAssign2Assign_sample_from_534_to_16", "old_id": 534}
{"code": "def f(txt):\n    coincidences = {}\n    idx_wjem = 0\n    list_vt0p = txt\n    while idx_wjem < len(list_vt0p):\n        c = list_vt0p[idx_wjem]\n        if not c in coincidences:\n            coincidences[c] = 1\n        else:\n            coincidences[c] = coincidences[c] + 1\n        idx_wjem = idx_wjem + 1\n    return sum(coincidences.values())", "input": "\"11 1 1\"", "output": "6", "id": "AugAssign2Assign_sample_from_569_to_17", "old_id": 569}
{"code": "def f(chars):\n    s = \"\"\n    idx_wleq = 0\n    list_2nk9 = chars\n    while idx_wleq < len(list_2nk9):\n        ch = list_2nk9[idx_wleq]\n        if not chars.count(ch) % 2 == 0:\n            s = s + ch\n        else:\n            s = s + ch.upper()\n        idx_wleq = idx_wleq + 1\n    return s", "input": "\"acbced\"", "output": "'aCbCed'", "id": "AugAssign2Assign_sample_from_665_to_18", "old_id": 665}
{"code": "def f(text, length):\n    length = -length if length < 0 else length\n    output = ''\n    idx_tj5d = 0\n    list_xvd8 = range(length)\n    while idx_tj5d < len(list_xvd8):\n        idx = list_xvd8[idx_tj5d]\n        if not text[idx % len(text)] != ' ':\n            break\n        else:\n            output = output + text[idx % len(text)]\n        idx_tj5d = idx_tj5d + 1\n    return output", "input": "'I got 1 and 0.', 5", "output": "'I'", "id": "AugAssign2Assign_sample_from_677_to_19", "old_id": 677}
{"code": "def f(text):\n    freq = dict()\n    idx_acbn = 0\n    list_41fb = text.lower()\n    while idx_acbn < len(list_41fb):\n        c = list_41fb[idx_acbn]\n        if not c in freq:\n            freq[c] = 1\n        else:\n            freq[c] = freq[c] + 1\n        idx_acbn = idx_acbn + 1\n    return freq", "input": "\"HI\"", "output": "{'h': 1, 'i': 1}", "id": "AugAssign2Assign_sample_from_678_to_20", "old_id": 678}
{"code": "def f(text):\n    out = \"\"\n    idx_dotm = 0\n    list_xn3c = range(len(text))\n    while idx_dotm < len(list_xn3c):\n        i = list_xn3c[idx_dotm]\n        if not text[i].isupper():\n            out = out + text[i].upper()\n        else:\n            out = out + text[i].lower()\n        idx_dotm = idx_dotm + 1\n    return out", "input": "',wPzPppdl/'", "output": "',WpZpPPDL/'", "id": "AugAssign2Assign_sample_from_722_to_21", "old_id": 722}
{"code": "def f(text, insert):\n    whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n    clean = ''\n    idx_9nig = 0\n    list_0lmx = text\n    while idx_9nig < len(list_0lmx):\n        char = list_0lmx[idx_9nig]\n        if not char in whitespaces:\n            clean = clean + char\n        else:\n            clean = clean + insert\n        idx_9nig = idx_9nig + 1\n    return clean", "input": "'pi wa', 'chi'", "output": "'pichiwa'", "id": "AugAssign2Assign_sample_from_736_to_22", "old_id": 736}
{"code": "def f(char_map, text):\n    new_text = ''\n    idx_w1jh = 0\n    list_ea4u = text\n    while idx_w1jh < len(list_ea4u):\n        ch = list_ea4u[idx_w1jh]\n        val = char_map.get(ch)\n        if not val is None:\n            new_text = new_text + val\n        else:\n            new_text = new_text + ch\n        idx_w1jh = idx_w1jh + 1\n    return new_text", "input": "{}, 'hbd'", "output": "'hbd'", "id": "AugAssign2Assign_sample_from_750_to_23", "old_id": 750}
