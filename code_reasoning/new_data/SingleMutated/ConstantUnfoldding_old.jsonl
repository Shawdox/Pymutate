{"code": "def f(s, x):\n    count = (40 + -40)\n    while s[:len(x)] == x and count < len(s)-len(x):\n        s = s[len(x):]\n        count += len(x)\n    return s", "input": "'If you want to live a happy life! Daniel', 'Daniel'", "output": "'If you want to live a happy life! Daniel'", "id": "ConstantUnfoldding_sample_from_12_to_0", "old_id": "sample_12"}
{"code": "def f(string):\n    upper = (58 + -58)\n    for c in string:\n        if c.isupper():\n            upper += 1\n    return upper * (2,1)[upper % 2]", "input": "'PoIOarTvpoead'", "output": "8", "id": "ConstantUnfoldding_sample_from_31_to_1", "old_id": "sample_31"}
{"code": "def f(text, letter):\n    counts = {}\n    for char in text:\n        if char not in counts:\n            counts[char] = (82 + -81)\n        else:\n            counts[char] += 1\n    return counts.get(letter, 0)", "input": "'za1fd1as8f7afasdfam97adfa', '7'", "output": "2", "id": "ConstantUnfoldding_sample_from_45_to_2", "old_id": "sample_45"}
{"code": "def f(text):\n    text = text.upper()\n    count_upper = (81 + -81)\n    for char in text:\n        if char.isupper():\n            count_upper += 1\n        else:\n            return 'no'\n    return count_upper // 2", "input": "'ax'", "output": "1", "id": "ConstantUnfoldding_sample_from_57_to_3", "old_id": "sample_57"}
{"code": "def f(text):\n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, 0) + 1\n    for key in dic:\n        if dic[key] > 1:\n            dic[key] = (69 + -68)\n    return dic", "input": "\"a\"", "output": "{'a': 1}", "id": "ConstantUnfoldding_sample_from_104_to_4", "old_id": "sample_104"}
{"code": "def f(marks):\n    highest = (17 + -17)\n    lowest = (89 + 11)\n    for value in marks.values():\n        if value > highest:\n            highest = value\n        if value < lowest:\n            lowest = value\n    return highest, lowest", "input": "{'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83}", "output": "(89, 4)", "id": "ConstantUnfoldding_sample_from_111_to_5", "old_id": "sample_111"}
{"code": "def f(nums):\n    count = (20 + -20)\n    for i in range(len(nums)):\n        if len(nums) == 0:\n            break\n        if count % 2 == 0:\n            nums.pop()\n        else:\n            nums.pop(0)\n        count += 1\n    return nums", "input": "[3, 2, 0, 0, 2, 3]", "output": "[]", "id": "ConstantUnfoldding_sample_from_137_to_6", "old_id": "sample_137"}
{"code": "def f(text):\n    n = (81 + -81)\n    for char in text:\n        if char.isupper():\n            n += 1\n    return n", "input": "''.join(['A'] * 20)", "output": "20", "id": "ConstantUnfoldding_sample_from_152_to_7", "old_id": "sample_152"}
{"code": "def f(ip, n):\n    i = (31 + -31)\n    out = ''\n    for c in ip:\n        if i == n:\n            out += '\\n'\n            i = 0\n        i += 1\n        out += c\n    return out", "input": "\"dskjs hjcdjnxhjicnn\", 4", "output": "'dskj\\ns hj\\ncdjn\\nxhji\\ncnn'", "id": "ConstantUnfoldding_sample_from_155_to_8", "old_id": "sample_155"}
{"code": "def f(phrase):\n    ans = (77 + -77)\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\":\n                ans += 1\n    return ans", "input": "\"aboba 212 has 0 digits\"", "output": "1", "id": "ConstantUnfoldding_sample_from_157_to_9", "old_id": "sample_157"}
{"code": "def f(nums):\n    a = -1\n    b = nums[1:]\n    while a <= b[0]:\n        nums.remove(b[0])\n        a = (56 + -56)\n        b = b[1:]\n    return nums", "input": "[-1, 5, 3, -2, -6, 8, 8]", "output": "[-1, -2, -6, 8, 8]", "id": "ConstantUnfoldding_sample_from_180_to_10", "old_id": "sample_180"}
{"code": "def f(s):\n    count = (28 + -28)\n    digits = \"\"\n    for c in s:\n        if c.isdigit():\n            count += 1\n            digits += c\n    return [digits, count]", "input": "\"qwfasgahh329kn12a23\"", "output": "['3291223', 7]", "id": "ConstantUnfoldding_sample_from_181_to_11", "old_id": "sample_181"}
{"code": "def f(n, m, num):\n    x_list = list(range(n, m+1))\n    j = (68 + -68)\n    while True:\n        j = (j + num) % len(x_list)\n        if x_list[j] % 2 == 0:\n            return x_list[j]", "input": "46, 48, 21", "output": "46", "id": "ConstantUnfoldding_sample_from_210_to_12", "old_id": "sample_210"}
{"code": "def f(s):\n    count = (14 + -14)\n    for c in s:\n        if s.rindex(c) != s.index(c):\n            count+=1\n    return count", "input": "\"abca dea ead\"", "output": "10", "id": "ConstantUnfoldding_sample_from_211_to_13", "old_id": "sample_211"}
{"code": "def f(array):\n    if len(array) == 1:\n        return ''.join(array)\n    result = list(array)\n    i = (42 + -42)\n    while i < len(array)-1:\n        for j in range(2):\n            result[i*2] = array[i]\n            i += 1\n    return ''.join(result)", "input": "['ac8', 'qk6', '9wg']", "output": "'ac8qk6qk6'", "id": "ConstantUnfoldding_sample_from_236_to_14", "old_id": "sample_236"}
{"code": "def f(ls, n):\n    answer = (25 + -25)\n    for i in ls:\n        if i[0] == n:\n            answer = i\n    return answer", "input": "[[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1", "output": "[1, 9, 4]", "id": "ConstantUnfoldding_sample_from_238_to_15", "old_id": "sample_238"}
{"code": "def f(text, symbols):\n    count = (2 + -2)\n    if symbols:\n        for i in symbols:\n            count += 1\n        text = text * count\n    return text.rjust(len(text) + count*2)[:-2]", "input": "'', 'BC1ty'", "output": "'        '", "id": "ConstantUnfoldding_sample_from_244_to_16", "old_id": "sample_244"}
{"code": "def f(text, sub):\n    a = (39 + -39)\n    b = len(text) - 1\n\n    while a <= b:\n        c = (a + b) // 2\n        if text.rfind(sub) >= c:\n            a = c + 1\n        else:\n            b = c - 1\n\n    return a", "input": "'dorfunctions', '2'", "output": "0", "id": "ConstantUnfoldding_sample_from_256_to_17", "old_id": "sample_256"}
{"code": "field = (36 + -36)\n\ndef f(text):\n    global g, field\n    field = text.replace(' ', '')\n    g = text.replace('0', ' ')\n    text = text.replace('1', 'i')\n\n    return text", "input": "'00000000 00000000 01101100 01100101 01101110'", "output": "'00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0'", "id": "ConstantUnfoldding_sample_from_280_to_18", "old_id": "sample_280"}
{"code": "def f(s1, s2):\n    position = (24 + -23)\n    count = (74 + -74)\n    while position > 0:\n        position = s1.find(s2, position)\n        count += 1\n        position += 1\n    return count", "input": "'xinyyexyxx', 'xx'", "output": "2", "id": "ConstantUnfoldding_sample_from_282_to_19", "old_id": "sample_282"}
{"code": "def f(text, prefix):\n    idx = (19 + -19)\n    for letter in prefix:\n        if text[idx] != letter:\n            return None\n        idx += 1\n    return text[idx:]", "input": "'bestest', 'bestest'", "output": "''", "id": "ConstantUnfoldding_sample_from_284_to_20", "old_id": "sample_284"}
{"code": "def f(nums):\n    count = (30 + -29)\n    for i in range(count, len(nums) - 1, 2):\n        nums[i] = max(nums[i], nums[count-1])\n        count += 1\n    return nums", "input": "[1, 2, 3]", "output": "[1, 2, 3]", "id": "ConstantUnfoldding_sample_from_300_to_21", "old_id": "sample_300"}
{"code": "def f(text):\n    index = (88 + -87)\n    while index < len(text):\n        if text[index] != text[index - 1]:\n            index += 1\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()", "input": "'USaR'", "output": "'usAr'", "id": "ConstantUnfoldding_sample_from_320_to_22", "old_id": "sample_320"}
{"code": "def f(array, elem):\n    elem = str(elem)\n    d = (33 + -33)\n    for i in array:\n        if str(i) == elem:\n            d += 1\n    return d", "input": "[-1, 2, 1, -8, -8, 2], 2", "output": "2", "id": "ConstantUnfoldding_sample_from_339_to_23", "old_id": "sample_339"}
{"code": "def f(x):\n    if x == []:\n        return -1\n    else:\n        cache = {}\n        for item in x:\n            if item in cache:\n                cache[item] += 1\n            else:\n                cache[item] = (23 + -22)\n        return max(cache.values())", "input": "[1, 0, 2, 2, 0, 0, 0, 1]", "output": "4", "id": "ConstantUnfoldding_sample_from_353_to_24", "old_id": "sample_353"}
{"code": "def f(nums):\n    for odd in nums[:]:\n        if odd % 2 != 0:\n            nums.remove(odd)\n    sum_ = (89 + -89)\n    for num in nums:\n        sum_ += num\n    return sum_", "input": "[11, 21, 0, 11]", "output": "0", "id": "ConstantUnfoldding_sample_from_371_to_25", "old_id": "sample_371"}
{"code": "def f(lst):\n    i = (74 + -74)\n    new_list = []\n    while i < len(lst):\n        if lst[i] in lst[i+1:]:\n            new_list.append(lst[i])\n            if len(new_list) == 3:\n                return new_list\n        i += 1\n    return new_list", "input": "[0, 2, 1, 2, 6, 2, 6, 3, 0]", "output": "[0, 2, 2]", "id": "ConstantUnfoldding_sample_from_385_to_26", "old_id": "sample_385"}
{"code": "def f(string):\n    bigTab = (39 + 61)\n    for i in range(10, 30):\n        if 0 < string.count('\\t') < 20:\n            bigTab = i\n            break\n    return string.expandtabs(bigTab)", "input": "'1  \\t\\t\\t3'", "output": "'1                             3'", "id": "ConstantUnfoldding_sample_from_438_to_27", "old_id": "sample_438"}
{"code": "def f(text):\n    counter = (55 + -55)\n    for char in text:\n        if char.isalpha():\n            counter += 1\n    return counter", "input": "'l000*',", "output": "1", "id": "ConstantUnfoldding_sample_from_452_to_28", "old_id": "sample_452"}
{"code": "def f(text):\n    uppers = (66 + -66)\n    for c in text:\n        if c.isupper():\n            uppers += 1\n    return text.upper() if uppers >= 10 else text", "input": "'?XyZ'", "output": "'?XyZ'", "id": "ConstantUnfoldding_sample_from_455_to_29", "old_id": "sample_455"}
{"code": "def f(text):\n    length = len(text)\n    index = (48 + -48)\n    while index < length and text[index].isspace():\n        index += 1\n    return text[index:index+5]", "input": "'-----\\t\\n\\tth\\n-----'", "output": "'-----'", "id": "ConstantUnfoldding_sample_from_466_to_30", "old_id": "sample_466"}
{"code": "def f(d):\n    d['luck'] = (11 + 31)\n    d.clear()\n    return {1: False, 2 :0}", "input": "{}", "output": "{1: False, 2: 0}", "id": "ConstantUnfoldding_sample_from_519_to_31", "old_id": "sample_519"}
{"code": "def f(cat):\n    digits = (26 + -26)\n    for char in cat:\n        if char.isdigit():\n            digits += 1\n    return digits", "input": "'C24Bxxx982ab'", "output": "5", "id": "ConstantUnfoldding_sample_from_536_to_32", "old_id": "sample_536"}
{"code": "def f(array):\n    result = []\n    index = (9 + -9)\n    while index < len(array):\n        result.append(array.pop())\n        index += 2\n    return result", "input": "[8, 8, -4, -9, 2, 8, -1, 8]", "output": "[8, -1, 8]", "id": "ConstantUnfoldding_sample_from_545_to_33", "old_id": "sample_545"}
{"code": "def f(num):\n    letter = (29 + -28)\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == 0: break\n        num = num[letter:] + num[:letter]\n        letter += 1\n    return num", "input": "'bwmm7h'", "output": "'mhbwm'", "id": "ConstantUnfoldding_sample_from_568_to_34", "old_id": "sample_568"}
{"code": "def f(txt):\n    coincidences = {}\n    for c in txt:\n        if c in coincidences:\n            coincidences[c] += 1\n        else:\n            coincidences[c] = (82 + -81)\n    return sum(coincidences.values())", "input": "\"11 1 1\"", "output": "6", "id": "ConstantUnfoldding_sample_from_569_to_35", "old_id": "sample_569"}
{"code": "def f(text, substr, occ):\n    n = (97 + -97)\n    while True:\n        i = text.rfind(substr)\n        if i == -1:\n            break\n        elif n == occ:\n            return i\n        else:\n            n += 1\n            text = text[:i]\n    return -1", "input": "'zjegiymjc', 'j', 2", "output": "-1", "id": "ConstantUnfoldding_sample_from_614_to_36", "old_id": "sample_614"}
{"code": "def f(text):\n    count = (93 + -93)\n    for i in text:\n        if i in '.?!.,':\n            count += 1\n    return count", "input": "\"bwiajegrwjd??djoda,?\"", "output": "4", "id": "ConstantUnfoldding_sample_from_625_to_37", "old_id": "sample_625"}
{"code": "def f(text):\n    i = (35 + -35)\n    while i < len(text) and text[i].isspace():\n        i+=1\n    if i == len(text):\n        return 'space'\n    return 'no'", "input": "\"     \"", "output": "'space'", "id": "ConstantUnfoldding_sample_from_642_to_38", "old_id": "sample_642"}
{"code": "def f(string):\n    if not string or not string[0].isnumeric:\n        return 'INVALID'\n    cur = (71 + -71)\n    for i in range(len(string)):\n        cur = cur * 10 + int(string[i])\n    return str(cur)", "input": "'3'", "output": "'3'", "id": "ConstantUnfoldding_sample_from_652_to_39", "old_id": "sample_652"}
{"code": "def f(text):\n    s = (8 + -8)\n    for i in range(1, len(text)):\n        s += len(text.rpartition(text[i])[0])\n    return s", "input": "'wdj'", "output": "3", "id": "ConstantUnfoldding_sample_from_696_to_40", "old_id": "sample_696"}
{"code": "def f(text):\n    created = []\n    for line in text.splitlines():\n        if line == '':\n            break\n        created.append(list(list(line.rstrip())[::-1][flush]))\n    return created[::-1]\n\nflush = (49 + -49)", "input": "'A(hiccup)A'", "output": "[['A']]", "id": "ConstantUnfoldding_sample_from_712_to_41", "old_id": "sample_712"}
{"code": "def f(code):\n    lines = code.split(']')\n    result = []\n    level = (28 + -28)\n    for line in lines:\n        result.append(line[0] + ' ' + '  ' * level + line[1:])\n        level += line.count('{') - line.count('}')\n    return '\\n'.join(result)", "input": "\"if (x) {y = 1;} else {z = 1;}\"", "output": "'i f (x) {y = 1;} else {z = 1;}'", "id": "ConstantUnfoldding_sample_from_719_to_42", "old_id": "sample_719"}
{"code": "def f(text):\n    m = (58 + -58)\n    cnt = 0\n    for i in text.split():\n        if len(i) > m:\n            cnt += 1\n            m = len(i)\n    return cnt", "input": "\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"", "output": "2", "id": "ConstantUnfoldding_sample_from_730_to_43", "old_id": "sample_730"}
{"code": "def f(text, sub):\n    index = []\n    starting = (47 + -47)\n    while starting != -1:\n        starting = text.find(sub, starting)\n        if starting != -1:\n            index.append(starting)\n            starting += len(sub)\n    return index", "input": "'egmdartoa', 'good'", "output": "[]", "id": "ConstantUnfoldding_sample_from_759_to_44", "old_id": "sample_759"}
{"code": "def f(integer, n):\n    i = (76 + -75)\n    text = str(integer)\n    while (i+len(text) < n):\n        i += len(text)\n    return text.zfill(i+len(text))", "input": "8999,2", "output": "'08999'", "id": "ConstantUnfoldding_sample_from_791_to_45", "old_id": "sample_791"}
{"code": "def f(list, start, end):\n    count = (87 + -87)\n    for i in range(start, end):\n        for j in range(i, end):\n            if list[i] != list[j]:\n                count += 1\n    return count", "input": "[1, 2, 4, 3, 2, 1], 0, 3", "output": "3", "id": "ConstantUnfoldding_sample_from_793_to_46", "old_id": "sample_793"}
