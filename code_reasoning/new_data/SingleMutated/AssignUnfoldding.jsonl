{"code": "def f(text):\n    length = len(text)\n    half = length; half = half // 2\n    encode = text[:half].encode('ascii')\n    if text[half:] == encode.decode():\n        return True\n    else:\n        return False", "input": "'bbbbr'", "output": "False", "id": "AssignUnfoldding_sample_from_47_to_0", "old_id": "sample_47"}
{"code": "s = '<'; s = s * 10\ndef f(num):\n    if num % 2 == 0:\n        return s\n    else:\n        return num - 1", "input": "21", "output": "20", "id": "AssignUnfoldding_sample_from_51_to_1", "old_id": "sample_51"}
{"code": "def f(text):\n    occ = {}\n    for ch in text:\n        name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n        name = name.get(ch, ch)\n        occ[name] = occ.get(name, 0); occ[name] = occ[name] + 1\n    return [x for _, x in occ.items()]", "input": "\"URW rNB\"", "output": "[1, 1, 1, 1, 1, 1, 1]", "id": "AssignUnfoldding_sample_from_53_to_2", "old_id": "sample_53"}
{"code": "def f(text, size):\n    counter = len(text)\n    for i in range(size-int(size%2)):\n        text = ' '+text; text = text+' '\n        counter += 2\n        if counter >= size:\n            return text", "input": "\"7\", 10", "output": "'     7     '", "id": "AssignUnfoldding_sample_from_64_to_3", "old_id": "sample_64"}
{"code": "def f(nums):\n    nums = [y for y in nums if y > 0]\n    if len(nums) <= 3:\n        return nums\n    nums.reverse()\n    half = len(nums); half = half//2\n    return nums[:half] + [0]*5 + nums[half:]", "input": "[10, 3, 2, 2, 6, 0]", "output": "[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]", "id": "AssignUnfoldding_sample_from_76_to_4", "old_id": "sample_76"}
{"code": "def f(n):\n    values = {0: 3, 1: 4.5, 2: '-'}\n    res = {}\n    for i, j in values.items():\n        if i % n != 2:\n            res[j] = n; res[j] = res[j] // 2\n    return sorted(res)", "input": "12", "output": "[3, 4.5]", "id": "AssignUnfoldding_sample_from_85_to_5", "old_id": "sample_85"}
{"code": "def f(n):\n    length = len(n); length = length + 2\n    revn = list(n)\n    result = ''.join(revn)\n    revn.clear()\n    return result + ('!' * length)", "input": "'iq'", "output": "'iq!!!!'", "id": "AssignUnfoldding_sample_from_93_to_6", "old_id": "sample_93"}
{"code": "def f(text):\n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, 0); dic[char] = dic[char] + 1\n    for key in dic:\n        if dic[key] > 1:\n            dic[key] = 1\n    return dic", "input": "\"a\"", "output": "{'a': 1}", "id": "AssignUnfoldding_sample_from_104_to_7", "old_id": "sample_104"}
{"code": "def f(text, chars):\n    listchars = list(chars)\n    first = listchars.pop()\n    for i in listchars:\n        text = text[0:text.find(i)]+i; text = text+text[text.find(i)+1:]\n    return text", "input": "'tflb omn rtt', 'm'", "output": "'tflb omn rtt'", "id": "AssignUnfoldding_sample_from_138_to_8", "old_id": "sample_138"}
{"code": "def f(nums):\n    middle = len(nums); middle = middle//2\n    return nums[middle:] + nums[0:middle]", "input": "[1, 1, 1]", "output": "[1, 1, 1]", "id": "AssignUnfoldding_sample_from_147_to_9", "old_id": "sample_147"}
{"code": "def f(arr):\n    n = [item for item in arr if item%2 == 0]\n    m = n; m = m+arr\n    for i in m:\n        if m.index(i) >= len(n):\n            m.remove(i)\n    return m", "input": "[3, 6, 4, -2, 5]", "output": "[6, 4, -2, 6, 4, -2]", "id": "AssignUnfoldding_sample_from_158_to_10", "old_id": "sample_158"}
{"code": "def f(XAAXX, s):\n    count = 0\n    idx = -1\n    while XAAXX.find('XXXX', idx+1) != -1:\n        idx = XAAXX.find('XXXX', idx+1) \n        count += 1 \n    compound = count; compound = compound * s.title()\n    return XAAXX.replace('XXXX', compound)", "input": "'aaXXXXbbXXXXccXXXXde', 'QW'", "output": "'aaQwQwQwbbQwQwQwccQwQwQwde'", "id": "AssignUnfoldding_sample_from_167_to_11", "old_id": "sample_167"}
{"code": "def f(text):\n    ls = list(text)\n    total = (len(text) - 1); total = total * 2\n    for i in range(1, total+1):\n        if i % 2:\n            ls.append('+')\n        else:\n            ls.insert(0, '+')\n    return ''.join(ls).rjust(total)", "input": "'taole'", "output": "'++++taole++++'", "id": "AssignUnfoldding_sample_from_169_to_12", "old_id": "sample_169"}
{"code": "def f(nums):\n    count = len(nums); count = count // 2\n    for _ in range(count):\n        nums.pop(0)\n    return nums", "input": "[3, 4, 1, 2, 3]", "output": "[1, 2, 3]", "id": "AssignUnfoldding_sample_from_171_to_13", "old_id": "sample_171"}
{"code": "def f(s, amount):\n    lines = s.splitlines()\n    w = max(map(lambda l: l.rfind(' '), lines))\n    ls = [[l, (w + 1) * amount - l.rfind(' ')] for l in lines]\n    for i, line in enumerate(ls):\n        ls[i][0] = line[0]; ls[i][0] = ls[i][0] + ' ' * line[1]\n    return '\\n'.join(map(lambda l: l[0], ls))", "input": "'\\n', 2", "output": "' '", "id": "AssignUnfoldding_sample_from_175_to_14", "old_id": "sample_175"}
{"code": "def f(L):\n    N = len(L)\n    for k in range(1, N//2 + 1):\n        i = k; i = i - 1\n        j = N; j = j - k\n        while i < j:\n            # swap elements:\n            L[i], L[j] = L[j], L[i]\n            # update i, j:\n            i += 1\n            j -= 1\n    return L", "input": "[16, 14, 12, 7, 9, 11]", "output": "[11, 14, 7, 12, 9, 16]", "id": "AssignUnfoldding_sample_from_185_to_15", "old_id": "sample_185"}
{"code": "def f(d, index):\n    length = len(d.items())\n    idx = index; idx = idx % length\n    v = d.popitem()[1]\n    for _ in range(idx):\n        d.popitem()\n    return v", "input": "{27:39}, 1", "output": "39", "id": "AssignUnfoldding_sample_from_187_to_16", "old_id": "sample_187"}
{"code": "def f(text):\n    for p in ['acs', 'asp', 'scn']:\n        text = text.removeprefix(p); text = text + ' '\n    return text.removeprefix(' ')[:-1]", "input": "'ilfdoirwirmtoibsac'", "output": "'ilfdoirwirmtoibsac  '", "id": "AssignUnfoldding_sample_from_195_to_17", "old_id": "sample_195"}
{"code": "def f(temp, timeLimit):\n    s = timeLimit; s = s // temp\n    e = timeLimit; e = e % temp\n    return [f'{e} oC', f'{s} {e}'][s > 1]", "input": "1, 1234567890", "output": "'1234567890 0'", "id": "AssignUnfoldding_sample_from_197_to_18", "old_id": "sample_197"}
{"code": "def f(str, char):\n    base = char; base = base * (str.count(char) + 1)\n    return str.removesuffix(base)", "input": "'mnmnj krupa...##!@#!@#$$@##', '@'", "output": "'mnmnj krupa...##!@#!@#$$@##'", "id": "AssignUnfoldding_sample_from_199_to_19", "old_id": "sample_199"}
{"code": "def f(n, m, num):\n    x_list = list(range(n, m+1))\n    j = 0\n    while True:\n        j = (j + num); j = j % len(x_list)\n        if x_list[j] % 2 == 0:\n            return x_list[j]", "input": "46, 48, 21", "output": "46", "id": "AssignUnfoldding_sample_from_210_to_20", "old_id": "sample_210"}
{"code": "def f(mess, char):\n    while mess.find(char, mess.rindex(char) + 1) != -1:\n        mess = mess[:mess.rindex(char) + 1]; mess = mess + mess[mess.rindex(char) + 2:]\n    return mess", "input": "'0aabbaa0b', 'a'", "output": "'0aabbaa0b'", "id": "AssignUnfoldding_sample_from_222_to_21", "old_id": "sample_222"}
{"code": "def f(text):\n    result = ''\n    i = len(text); i = i-1\n    while i >= 0:\n        c = text[i]\n        if c.isalpha():\n            result += c\n        i -= 1\n    return result", "input": "'102x0zoq'", "output": "'qozx'", "id": "AssignUnfoldding_sample_from_230_to_22", "old_id": "sample_230"}
{"code": "def f(text, char):\n    position = len(text)\n    if char in text:\n        position = text.index(char)\n        if position > 1:\n            position = (position + 1); position = position % len(text)\n    return position", "input": "'wduhzxlfk', 'w'", "output": "0", "id": "AssignUnfoldding_sample_from_234_to_23", "old_id": "sample_234"}
{"code": "def f(s):\n    count = {}\n    for i in s:\n        if i.islower():\n            count[i.lower()] = s.count(i.lower()); count[i.lower()] = count[i.lower()] + count.get(i.lower(), 0)\n        else:\n            count[i.lower()] = s.count(i.upper()); count[i.lower()] = count[i.lower()] + count.get(i.lower(), 0)\n    return count", "input": "\"FSA\"", "output": "{'f': 1, 's': 1, 'a': 1}", "id": "AssignUnfoldding_sample_from_249_to_24", "old_id": "sample_249"}
{"code": "def f(text, sub):\n    a = 0\n    b = len(text); b = b - 1\n\n    while a <= b:\n        c = (a + b); c = c // 2\n        if text.rfind(sub) >= c:\n            a = c; a = a + 1\n        else:\n            b = c; b = b - 1\n\n    return a", "input": "'dorfunctions', '2'", "output": "0", "id": "AssignUnfoldding_sample_from_256_to_25", "old_id": "sample_256"}
{"code": "def f(array):\n    zero_len = (len(array) - 1); zero_len = zero_len % 3\n    for i in range(zero_len):\n        array[i] = '0'\n    for i in range(zero_len + 1, len(array), 3):\n        array[i - 1:i + 2] = ['0', '0', '0']\n    return array", "input": "[9, 2]", "output": "['0', 2]", "id": "AssignUnfoldding_sample_from_269_to_26", "old_id": "sample_269"}
{"code": "def f(n, m, text):\n    if text.strip() == '':\n        return text\n    head, mid, tail = text[0], text[1:-1], text[-1]\n    joined = head.replace(n, m) + mid.replace(n, m); joined = joined + tail.replace(n, m)\n    return joined", "input": "\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"", "output": "'2$z&5H3*1a@#a*1hris'", "id": "AssignUnfoldding_sample_from_294_to_27", "old_id": "sample_294"}
{"code": "def f(text):\n    i = (len(text) + 1); i = i // 2\n    result = list(text)\n    while i < len(text):\n        t = result[i].lower()\n        if t == result[i]:\n            i += 1\n        else:\n            result[i] = t\n        i += 2\n    return ''.join(result)", "input": "'mJkLbn'", "output": "'mJklbn'", "id": "AssignUnfoldding_sample_from_303_to_28", "old_id": "sample_303"}
{"code": "def f(text, char):\n    length = len(text)\n    index = -1\n    for i in range(length):\n        if text[i] == char:\n            index = i\n    if index == -1:\n        index = length; index = index // 2\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'o horseto', 'r'", "output": "'o hoseto'", "id": "AssignUnfoldding_sample_from_305_to_29", "old_id": "sample_305"}
{"code": "def f(strands):\n    subs = strands\n    for i, j in enumerate(subs):\n        for _ in range(len(j) // 2):\n            subs[i] = subs[i][-1:] + subs[i][1:-1]; subs[i] = subs[i] + subs[i][0]\n    return ''.join(subs)", "input": "['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']", "output": "'__1.00r__j_a6__6'", "id": "AssignUnfoldding_sample_from_310_to_30", "old_id": "sample_310"}
{"code": "def f(lst):\n    new = list()\n    i = len(lst); i = i-1\n    for _ in range(len(lst)):\n        if i%2 == 0:\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n    return new", "input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "id": "AssignUnfoldding_sample_from_327_to_31", "old_id": "sample_327"}
{"code": "def f(nums):\n    count = len(nums)\n    if count == 0:\n        nums = [0]; nums = nums * int(nums.pop())\n    elif count % 2 == 0:\n        nums.clear()\n    else:\n        del nums[:count//2:]\n    return nums", "input": "[-6, -2, 1, -3, 0, 1]", "output": "[]", "id": "AssignUnfoldding_sample_from_332_to_32", "old_id": "sample_332"}
{"code": "def f(filename):\n    suffix = filename.split('.')[-1]\n    f2 = filename; f2 = f2 + suffix[::-1]\n    return f2.endswith(suffix)", "input": "'docs.doc'", "output": "False", "id": "AssignUnfoldding_sample_from_346_to_33", "old_id": "sample_346"}
{"code": "def f(d):\n    size = len(d)\n    v = [0]; v = v * size\n    if size == 0:\n        return v\n    for i, e in enumerate(d.values()):\n        v[i] = e\n    return v", "input": "{'a': 1, 'b': 2, 'c': 3}", "output": "[1, 2, 3]", "id": "AssignUnfoldding_sample_from_350_to_34", "old_id": "sample_350"}
{"code": "def f(array, num):\n    reverse = False\n    if num < 0:\n        reverse = True\n        num *= -1\n    array = array[::-1]; array = array * num\n    l = len(array)\n    \n    if reverse:\n        array = array[::-1]\n    return array", "input": "[1, 2], 1", "output": "[2, 1]", "id": "AssignUnfoldding_sample_from_356_to_35", "old_id": "sample_356"}
{"code": "def f(text, n):\n    if len(text) <= 2:\n        return text\n    leading_chars = text[0]; leading_chars = leading_chars * (n - len(text) + 1)\n    return leading_chars + text[1:-1] + text[-1]", "input": "'g', 15", "output": "'g'", "id": "AssignUnfoldding_sample_from_360_to_36", "old_id": "sample_360"}
{"code": "def f(list_, num):\n    temp = []\n    for i in list_:\n        i = num // 2; i = i * ('%s,' % i)\n        temp.append(i)\n    return temp", "input": "['v'], 1", "output": "['']", "id": "AssignUnfoldding_sample_from_372_to_37", "old_id": "sample_372"}
{"code": "def f(text, characters):\n    character_list = list(characters); character_list = character_list + [' ', '_']\n\n    i = 0\n    while i < len(text) and text[i] in character_list:\n        i += 1\n\n    return text[i:]", "input": "\"2nm_28in\", \"nm\"", "output": "'2nm_28in'", "id": "AssignUnfoldding_sample_from_388_to_38", "old_id": "sample_388"}
{"code": "def f(ets):\n    while ets:\n        k, v = ets.popitem()\n        ets[k] = v; ets[k] = ets[k]**2\n    return ets", "input": "{}", "output": "{}", "id": "AssignUnfoldding_sample_from_396_to_39", "old_id": "sample_396"}
{"code": "def f(xs):\n    new_x = xs[0]; new_x = new_x - 1\n    xs.pop(0)\n    while(new_x <= xs[0]):\n        xs.pop(0)\n        new_x -= 1\n    xs.insert(0, new_x)\n    return xs", "input": "[6, 3, 4, 1, 2, 3, 5]", "output": "[5, 3, 4, 1, 2, 3, 5]", "id": "AssignUnfoldding_sample_from_405_to_40", "old_id": "sample_405"}
{"code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1]; text = text + text[-1].capitalize()\n    return text", "input": "'querist', 'u'", "output": "'querisT'", "id": "AssignUnfoldding_sample_from_409_to_41", "old_id": "sample_409"}
{"code": "def f(start, end, interval):\n    steps = list(range(start, end + 1, interval))\n    if 1 in steps:\n        steps[-1] = end; steps[-1] = steps[-1] + 1\n    return len(steps)", "input": "3, 10, 1", "output": "8", "id": "AssignUnfoldding_sample_from_412_to_42", "old_id": "sample_412"}
{"code": "def f(s):\n    s = s.replace('\"', '')\n    lst = list(s)\n    col = 0\n    count = 1\n    while col < len(lst) and lst[col] in \".:,\":\n        if lst[col] == \".\":\n            count = ls[col]; count = count + 1\n        col += 1\n    return s[col+count:]", "input": "'\"Makers of a Statement\"'", "output": "'akers of a Statement'", "id": "AssignUnfoldding_sample_from_424_to_43", "old_id": "sample_424"}
{"code": "def f(s):\n    count = len(s); count = count - 1\n    reverse_s = s[::-1]\n    while count > 0 and reverse_s[::2].rfind('sea') == -1:\n        count -= 1\n        reverse_s = reverse_s[:count]\n    return reverse_s[count:]", "input": "'s a a b s d s a a s a a'", "output": "''", "id": "AssignUnfoldding_sample_from_427_to_44", "old_id": "sample_427"}
{"code": "def f(text, amount):\n    length = len(text)\n    pre_text = '|'\n    if amount >= length:\n        extra_space = amount; extra_space = extra_space - length\n        pre_text += ' ' * (extra_space // 2)\n        return pre_text + text + pre_text\n    return text", "input": "'GENERAL NAGOOR', 5", "output": "'GENERAL NAGOOR'", "id": "AssignUnfoldding_sample_from_460_to_45", "old_id": "sample_460"}
{"code": "def f(ans):\n    if ans.isdecimal():\n        total = int(ans) * 4; total = total - 50\n        total -= len([c for c in list(ans) if c not in '02468']) * 100\n        return total\n    return 'NAN'", "input": "'0'", "output": "-50", "id": "AssignUnfoldding_sample_from_464_to_46", "old_id": "sample_464"}
{"code": "def f(text, position, value):\n   length = len(text)\n   index = position; index = index % (length)\n   if position < 0:\n       index = length; index = index // 2\n   new_text = list(text)\n   new_text.insert(index, value)\n   new_text.pop(length-1)\n   return ''.join(new_text)", "input": "'sduyai', 1, 'y'", "output": "'syduyi'", "id": "AssignUnfoldding_sample_from_469_to_47", "old_id": "sample_469"}
{"code": "def f(sb):\n    d = {}\n    for s in sb:\n        d[s] = d.get(s, 0); d[s] = d[s] + 1\n    return d", "input": "'meow meow'", "output": "{'m': 2, 'e': 2, 'o': 2, 'w': 2, ' ': 1}", "id": "AssignUnfoldding_sample_from_478_to_48", "old_id": "sample_478"}
{"code": "def f(dic):\n    dic_op = dic.copy()\n    for key, val in dic.items():\n        dic_op[key] = val; dic_op[key] = dic_op[key] * val\n    return dic_op", "input": "{1:1, 2:2, 3:3}", "output": "{1: 1, 2: 4, 3: 9}", "id": "AssignUnfoldding_sample_from_486_to_49", "old_id": "sample_486"}
{"code": "def f(text, char):\n    count = text.count(char)\n    chars = list(text)\n    if count > 0:\n        index = chars.index(char); index = index + 1\n        chars[:index:index+1] = [c for c in chars[index:index+count:1]]\n    return ''.join(chars)", "input": "'tezmgvn 651h', '6'", "output": "'5ezmgvn 651h'", "id": "AssignUnfoldding_sample_from_488_to_50", "old_id": "sample_488"}
{"code": "def f(d):\n    result = [None]; result = result * len(d)\n    a = b = 0\n    while d:\n        result[a] = d.popitem(a == b)\n        a, b = b, (b+1) % len(result)\n    return result", "input": "{}", "output": "[]", "id": "AssignUnfoldding_sample_from_503_to_51", "old_id": "sample_503"}
{"code": "def f(num):\n    letter = 1\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == 0: break\n        num = num[letter:]; num = num + num[:letter]\n        letter += 1\n    return num", "input": "'bwmm7h'", "output": "'mhbwm'", "id": "AssignUnfoldding_sample_from_568_to_52", "old_id": "sample_568"}
{"code": "def f(arr): \n    counts = [0]; counts = counts * 9 \n    ans = [] \n    for ele in arr: counts[ele - 1] += 1 \n    for i in range(len(counts)): \n        while counts[i] > 0: \n            counts[i] -= 1 \n            ans.append(i + 1)\n    return counts, ans", "input": "[6, 3, 0, 7, 4, 8]", "output": "([0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 6, 7, 8, 9])", "id": "AssignUnfoldding_sample_from_591_to_53", "old_id": "sample_591"}
{"code": "def f(nums, n):\n    pos = len(nums); pos = pos - 1\n    for i in range(-len(nums), 0):\n        nums.insert(pos, nums[i])\n    return nums", "input": "[], 14", "output": "[]", "id": "AssignUnfoldding_sample_from_593_to_54", "old_id": "sample_593"}
{"code": "def f(text):\n    result = ''\n    mid = (len(text) - 1); mid = mid // 2\n    for i in range(mid):\n        result += text[i]\n    for i in range(mid, len(text)-1):\n        result += text[mid + len(text) - 1 - i]\n    return result.ljust(len(text), text[-1])", "input": "'eat!'", "output": "'e!t!'", "id": "AssignUnfoldding_sample_from_613_to_55", "old_id": "sample_613"}
{"code": "def f(body):\n    ls = list(body)\n    dist = 0\n    for i in range(0, len(ls) - 1):\n        if ls[i - 2 if i - 2 >= 0 else 0] == '\\t':\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        ls[i] = '[' + ls[i]; ls[i] = ls[i] + ']'\n    return ''.join(ls).expandtabs(4 + dist)", "input": "'\\n\\ny\\n'", "output": "'[\\n][\\n][y]\\n'", "id": "AssignUnfoldding_sample_from_616_to_56", "old_id": "sample_616"}
{"code": "def f(text, num):\n    req = num; req = req - len(text)\n    text = text.center(num, '*')\n    return text[:req // 2: -req // 2]", "input": "'a', 19", "output": "'*'", "id": "AssignUnfoldding_sample_from_631_to_57", "old_id": "sample_631"}
{"code": "def f(text, suffix):\n    if text.endswith(suffix):\n        text = text[:-1]; text = text + text[-1:].swapcase()\n    return text", "input": "'damdrodm', 'm'", "output": "'damdrodM'", "id": "AssignUnfoldding_sample_from_643_to_58", "old_id": "sample_643"}
{"code": "def f(string):\n    if not string or not string[0].isnumeric:\n        return 'INVALID'\n    cur = 0\n    for i in range(len(string)):\n        cur = cur * 10; cur = cur + int(string[i])\n    return str(cur)", "input": "'3'", "output": "'3'", "id": "AssignUnfoldding_sample_from_652_to_59", "old_id": "sample_652"}
{"code": "def f(num):\n    initial = [1]\n    total = initial\n    for _ in range(num):\n        total = [1]; total = total + [x+y for x, y in zip(total, total[1:])]\n        initial.append(total[-1])\n    return sum(initial)", "input": "3", "output": "4", "id": "AssignUnfoldding_sample_from_660_to_60", "old_id": "sample_660"}
{"code": "def f(text, position, value):\n    length = len(text)\n    index = (position % (length + 2)); index = index - 1\n    if index >= length or index < 0:\n        return text\n    text[index] = value\n    return ''.join(text)", "input": "\"1zd\", 0, 'm'", "output": "'1zd'", "id": "AssignUnfoldding_sample_from_672_to_61", "old_id": "sample_672"}
{"code": "def f(d):\n    i = len(d); i = i - 1\n    key = list(d.keys())[i]\n    d.pop(key, None)\n    return key, d", "input": "dict(e=1, d=2, c=3)", "output": "('c', {'e': 1, 'd': 2})", "id": "AssignUnfoldding_sample_from_694_to_62", "old_id": "sample_694"}
{"code": "def f(s, n, c):\n    width = len(c); width = width*n\n    for _ in range(width - len(s)):\n        s = c + s\n    return s", "input": "'.', 0, '99'", "output": "'.'", "id": "AssignUnfoldding_sample_from_704_to_63", "old_id": "sample_704"}
{"code": "def f(text, position):\n    length = len(text)\n    index = position; index = index % (length + 1)\n    if position < 0 or index < 0:\n        index = -1\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'undbs l', 1", "output": "'udbs l'", "id": "AssignUnfoldding_sample_from_707_to_64", "old_id": "sample_707"}
{"code": "def f(char_freq):\n    result = {}\n    for k, v in char_freq.copy().items():\n        result[k] = v; result[k] = result[k] // 2\n    return result", "input": "{'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3}", "output": "{'u': 10, 'v': 2, 'b': 3, 'w': 1, 'x': 1}", "id": "AssignUnfoldding_sample_from_732_to_65", "old_id": "sample_732"}
{"code": "def f(text):\n    length = len(text); length = length // 2\n    left_half = text[:length]\n    right_half = text[length:][::-1]\n    return left_half + right_half", "input": "'n'", "output": "'n'", "id": "AssignUnfoldding_sample_from_733_to_66", "old_id": "sample_733"}
{"code": "def f(nums, p):\n    prev_p = p; prev_p = prev_p - 1\n    if prev_p < 0: prev_p = len(nums); prev_p = prev_p - 1\n    return nums[prev_p]", "input": "[6, 8, 2, 5, 3, 1, 9, 7], 6", "output": "1", "id": "AssignUnfoldding_sample_from_741_to_67", "old_id": "sample_741"}
{"code": "def f(address):\n    suffix_start = address.index('@'); suffix_start = suffix_start + 1\n    if address[suffix_start:].count('.') > 1:\n        address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n    return address", "input": "'minimc@minimc.io'", "output": "'minimc@minimc.io'", "id": "AssignUnfoldding_sample_from_745_to_68", "old_id": "sample_745"}
{"code": "def f(dct):\n    values = dct.values()\n    result = {}\n    for value in values:\n        item = value.split('.')[0]; item = item+'@pinc.uk'\n        result[value] = item\n    return result", "input": "{}", "output": "{}", "id": "AssignUnfoldding_sample_from_746_to_69", "old_id": "sample_746"}
{"code": "def f(values, value):\n    length = len(values)\n    new_dict = dict.fromkeys(values, value)\n    new_dict[''.join(sorted(values))] = value; new_dict[''.join(sorted(values))] = new_dict[''.join(sorted(values))] * 3\n    return new_dict", "input": "['0','3'], 117", "output": "{'0': 117, '3': 117, '03': 351}", "id": "AssignUnfoldding_sample_from_766_to_70", "old_id": "sample_766"}
{"code": "def f(ints):\n    counts = [0]; counts = counts * 301\n\n    for i in ints:\n        counts[i] += 1\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= 3:\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)", "input": "[2, 3, 5, 2, 4, 5, 2, 89]", "output": "'2'", "id": "AssignUnfoldding_sample_from_780_to_71", "old_id": "sample_780"}
{"code": "def f(text, n):\n    if n < 0 or len(text) <= n:\n        return text\n    result = text[0 : n]\n    i = len(result); i = i - 1\n    while i >= 0:\n        if result[i] != text[i]:\n            break\n        i -= 1\n    return text[0 : i + 1]", "input": "'bR', -1", "output": "'bR'", "id": "AssignUnfoldding_sample_from_789_to_72", "old_id": "sample_789"}
